{
  "version": "https://jsonfeed.org/version/1",
  "title": "Auth0",
  "home_page_url": "https://auth0.com/blog/rss.xml",
  "items": [
    {
      "id": "",
      "url": "https://auth0.com/blog/authorization-for-rails-api-with-tdd/",
      "title": "How to Add Authorization to a Rails API Following TDD",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eWhen you\u0026#39;re adding authorization to an application, there are two crucial questions:\u003c/p\u003e\u003cul\u003e\u003cli\u003eAre users that shouldn\u0026#39;t have access \u003cem\u003eactually\u003c/em\u003e out?\u003c/li\u003e\u003cli\u003eAre users that should have access \u003cem\u003eactually\u003c/em\u003e in?\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIf you can\u0026#39;t answer with certainty both questions, how can you claim to have a secure application? This is something that you can test manually, but a better alternative is test automation. Concretely, I think the best methodology to get there is using Test-Driven Development (\u003ca href=\"https://en.wikipedia.org/wiki/Test-driven_development\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eTDD\u003c/a\u003e).\u003c/p\u003e\u003cp\u003eThis piece is about adding authorization to a \u003ca href=\"https://rubyonrails.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eRuby on Rails\u003c/a\u003e API by following TDD. You can check out \u003ca href=\"https://auth0.com/blog/secure-rails-api\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis article to learn in detail how to secure a Rails API with Auth0\u003c/a\u003e. Also, you can follow this article along with this \u003ca href=\"https://github.com/auth0-blog/securing-api-rails\" target=\"_blank\" rel=\"noreferrer noopener\"\u003erepository\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"The-TDD-Cycle\"\u003eThe TDD Cycle\u003c/h2\u003e\u003cp\u003eIn its essence, TDD is about a loop with the three steps shown in the following picture:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3FjI42yPKNne2NmL01bPbf/08cd0fca38b916370207e3a16f1c174e/tdd.png\" alt=\"TDD loop\"/\u003e\u003c/p\u003e\u003cp\u003e[\u003ca href=\"https://www.thoughtworks.com/insights/blog/test-driven-development-best-thing-has-happened-software-design\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cem\u003eSource: Thoughtworks\u003c/em\u003e\u003c/a\u003e]\u003c/p\u003e\u003cul\u003e\u003cli\u003eFirst, you make a test for a new feature. Initially, the \u003cstrong\u003etest will fail\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003eThen, you write the minimum amount of code that \u003cstrong\u003emakes the test pass\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003eLastly, you \u003cstrong\u003erefactor\u003c/strong\u003e the code to make the implementation more solid.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eSimple, isn\u0026#39;t it? It creates a feedback loop where you write code incrementally to fulfill the task at hand. Moreover, it ensures that you build testability, i.e., you write your code so that it can be tested.\u003c/p\u003e\u003cp\u003eTo show how to use TDD, let\u0026#39;s add authorization to our application step by step, starting with tests. I will use \u003ca href=\"https://auth0.com/docs/protocols/protocol-oauth2\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOAuth\u003c/a\u003e to authorize requests to the API via Auth0. As I explained in \u003ca href=\"https://auth0.com/blog/secure-rails-api\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emy previous article\u003c/a\u003e, you can \u003ca href=\"https://auth0.com/signup\" data-amp-replace=\"CLIENT_ID\" data-amp-addparams=\"anonId=CLIENT_ID(cid-scope-cookie-fallback-name)\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esign up for a free Auth0 account\u003c/a\u003e. Check it out to get \u003ca href=\"https://auth0.com/blog/secure-rails-api/#Creating-an-API-on-Auth0\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eall the details about setting up Auth0\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"The-Starting-Application\"\u003eThe Starting Application\u003c/h2\u003e\u003cp\u003eOur journey starts with an API bootstrapped with Rails 6. It has three routes that need different levels of protection:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003emessages\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003epublic\u003c/span\u003e\u003c/code\u003e: Public route.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003emessages\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eprotected\u003c/span\u003e\u003c/code\u003e: Requires a valid access token.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003emessages\u003cspan\u003e/\u003c/span\u003eadmin\u003c/code\u003e: Requires a valid access token. Since Auth0 uses JWT as its access token format, we can inspect it and make sure it has a \u003ccode\u003epermissions\u003c/code\u003e claim that contains the scope \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eadmin\u003cspan\u003e-\u003c/span\u003emessages\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis \u003ca href=\"https://github.com/auth0-blog/securing-api-rails/tree/starter\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ebranch\u003c/a\u003e is the correct starting point. These are the baseline tests for the three routes:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# spec/api/messages_controller_spec.rb\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;rails_helper\u0026#39;\u003c/span\u003e\n\ndescribe \u003cspan\u003eApi\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eMessagesController\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e type\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:controller\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  describe \u003cspan\u003e\u0026#39;#public\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n    subject \u003cspan\u003e{\u003c/span\u003e get \u003cspan\u003e:public\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e params\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e format\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:json\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\n    it \u003cspan\u003e\u0026#39;returns an accepted answer for the public endpoint\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n      subject\n\n      expect\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto be_ok\n\n      message \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;The API doesn\\\u0026#39;t require an access token to share this message.\u0026#39;\u003c/span\u003e\n      expect\u003cspan\u003e(\u003c/span\u003ejson_response\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto \u003cspan\u003einclude\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e message\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\n  describe \u003cspan\u003e\u0026#39;#protected\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n    subject \u003cspan\u003e{\u003c/span\u003e get \u003cspan\u003e:protected\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e params\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e format\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:json\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\n    it \u003cspan\u003e\u0026#39;returns an accepted answer for the protected endpoint\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n      subject\n\n      expect\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto be_ok\n\n      message \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;The API successfully validated your access token.\u0026#39;\u003c/span\u003e\n      expect\u003cspan\u003e(\u003c/span\u003ejson_response\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto \u003cspan\u003einclude\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e message\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\n  describe \u003cspan\u003e\u0026#39;#admin\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n    subject \u003cspan\u003e{\u003c/span\u003e get \u003cspan\u003e:admin\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e params\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e format\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:json\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\n    it \u003cspan\u003e\u0026#39;returns an accepted answer for the admin endpoint\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n      subject\n\n      expect\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto be_ok\n\n      message \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;The API successfully recognized you as an admin.\u0026#39;\u003c/span\u003e\n      expect\u003cspan\u003e(\u003c/span\u003ejson_response\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto \u003cspan\u003einclude\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e message\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe\u0026#39;re not enforcing authorization yet. The requests work, but that\u0026#39;ll change soon enough.\u003c/p\u003e\u003cp\u003eTo launch the tests, move in the project\u0026#39;s root folder and run the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e./go \u003cspan\u003etest\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003ego\u003c/code\u003e script allows you to execute different tasks, but we will use it here to run our tests.\u003c/p\u003e\u003cp\u003eFor now, we have a pleasant list of green tests, as you can see in the following screenshot:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5MNgIu9a2dQIHpWXCf2Lro/58ec0f5a6a59a3a05dd7d8248351b2df/green-tests-unprotected-endpoints.png\" alt=\"Green tests with unprotected endpoints\"/\u003e\u003c/p\u003e\u003ch2 id=\"The-Initial-Tests\"\u003eThe Initial Tests\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s start by decoding the access token in the \u003ca href=\"https://jwt.io/introduction\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJWT\u003c/a\u003e format that we get from Auth0. We\u0026#39;re leveraging the excellent \u003ca href=\"https://github.com/jwt/ruby-jwt\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ejwt\u003c/a\u003e gem. We don\u0026#39;t want to test that the library works, so we\u0026#39;re going to be relatively sparse with the testing. We want to make sure that incorrect requests fail. So, create a \u003ccode\u003elib\u003c/code\u003e folder under the \u003ccode\u003espec\u003c/code\u003e folder and add a file named \u003ccode\u003ejson_web_token_spec\u003cspan\u003e.\u003c/span\u003erb\u003c/code\u003e with the following content:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# spec/lib/json_web_token_spec.rb\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;rails_helper\u0026#39;\u003c/span\u003e\n\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;json_web_token\u0026#39;\u003c/span\u003e\n\ndescribe \u003cspan\u003eJsonWebToken\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  subject \u003cspan\u003e{\u003c/span\u003e described_class \u003cspan\u003e}\u003c/span\u003e\n\n  describe \u003cspan\u003e\u0026#39;.verify\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n    before \u003cspan\u003edo\u003c/span\u003e\n      allow\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eNet\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eHTTP\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto receive\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e:get\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eand_return\u003cspan\u003e(\u003c/span\u003ejwks_raw\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n\n    it \u003cspan\u003e\u0026#39;raises exception if the token is incorrect\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n      expect \u003cspan\u003e{\u003c/span\u003e subject\u003cspan\u003e.\u003c/span\u003everify\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto raise_exception\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eJWT\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eDecodeError\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n\n    it \u003cspan\u003e\u0026#39;raises exception if the token is expired\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n      expect \u003cspan\u003e{\u003c/span\u003e subject\u003cspan\u003e.\u003c/span\u003everify\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto raise_exception\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eJWT\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eDecodeError\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo integrate it in our application, we have to wrap the \u003ca href=\"https://github.com/jwt/ruby-jwt\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ejwt\u003c/a\u003e library with a little bit of code. For this purpose, add a file named \u003ccode\u003ejson_web_token\u003cspan\u003e.\u003c/span\u003erb\u003c/code\u003e to the \u003ccode\u003elib\u003c/code\u003e folder in the root of the project. Put the following code in that file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# lib/json_web_token.rb\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;jwt\u0026#39;\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;net/http\u0026#39;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eJsonWebToken\u003c/span\u003e\n  \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003everify\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003eJWT\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edecode\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enil\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                 \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e# Verify the signature of this token\u003c/span\u003e\n                 algorithm\u003cspan\u003e:\u003c/span\u003e algorithm\u003cspan\u003e,\u003c/span\u003e\n                 iss\u003cspan\u003e:\u003c/span\u003e issuer\u003cspan\u003e,\u003c/span\u003e\n                 verify_iss\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003eheader\u003cspan\u003e|\u003c/span\u003e\n        key\u003cspan\u003e(\u003c/span\u003eheader\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003eend\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ealgorithm\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;RS256\u0026#39;\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ekey\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eheader\u003cspan\u003e)\u003c/span\u003e\n      jwks_hash\u003cspan\u003e[\u003c/span\u003eheader\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;kid\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ejwks_hash\u003c/span\u003e\u003c/span\u003e\n      jwks_raw \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eNet\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eHTTP\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eget \u003cspan\u003eURI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003cspan\u003e\u003cspan\u003e#{\u003c/span\u003eissuer\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e.well-known/jwks.json\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n      jwks_keys \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eparse\u003cspan\u003e(\u003c/span\u003ejwks_raw\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;keys\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n      jwks_keys\u003cspan\u003e.\u003c/span\u003emap \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003ek\u003cspan\u003e|\u003c/span\u003e\n        \u003cspan\u003e[\u003c/span\u003e\n          k\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;kid\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003eOpenSSL\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eX509\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eCertificate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eBase64\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edecode64\u003cspan\u003e(\u003c/span\u003ek\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;x5c\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003efirst\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003epublic_key\n        \u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003eend\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto_h\n    \u003cspan\u003eend\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eissuer\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;https://\u003cspan\u003e\u003cspan\u003e#{\u003c/span\u003e\u003cspan\u003eRails\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eapplication\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003ex\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eissuerUri\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e/\u0026#34;\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe\u0026#39;re calling the library with the token that we want to decode. The \u003ccode\u003edecode\u003c/code\u003e method expects to receive the right key as the argument of the block. The \u003ccode\u003ekey\u003c/code\u003e method calls the \u003ccode\u003ejwks_hash\u003c/code\u003e helper, which in turn fetches the list of keys from the \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003ewell\u003cspan\u003e-\u003c/span\u003eknown\u003c/code\u003e URL. To find the right key easier, we convert the list to a hash using the id (\u003ccode\u003ekid\u003c/code\u003e) as an identifier.\u003c/p\u003e\u003cp\u003eThe tricky part here is that we need to pass actual tokens, otherwise the library will reject them outright.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s start by building our tests to verify that the protected endpoint works as expected.\u003c/p\u003e\u003ch3 id=\"Using-test-tokens\"\u003eUsing test tokens\u003c/h3\u003e\u003cp\u003eI have set up a bunch of tokens to use in our tests. They live in the \u003ca href=\"https://github.com/auth0-blog/securing-api-rails/tree/add-authorization/spec/fixtures\" target=\"_blank\" rel=\"noreferrer noopener\"\u003efixtures folder\u003c/a\u003e. They specify different conditions like being expired or using the wrong audience. This makes the tests a bit more resilient than using straight mocks.\u003c/p\u003e\u003cp\u003eI\u0026#39;m defining a helper to include one of these tokens in the request. So, add a \u003ccode\u003etoken_helper\u003cspan\u003e.\u003c/span\u003erb\u003c/code\u003e file to the \u003ccode\u003espec\u003cspan\u003e/\u003c/span\u003esupport\u003c/code\u003e folder with the following content:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# spec/support/token_helper.rb\u003c/span\u003e\n\u003cspan\u003emodule\u003c/span\u003e \u003cspan\u003eTokenHelper\u003c/span\u003e\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eread_token\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e)\u003c/span\u003e\n    path \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eFile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eexpand_path\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eFile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ejoin\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eFile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edirname\u003cspan\u003e(\u003c/span\u003e__FILE__\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;..\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;fixtures\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e name\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e@token\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eFile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eread\u003cspan\u003e(\u003c/span\u003epath\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eauthorize\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e)\u003c/span\u003e\n    request\u003cspan\u003e.\u003c/span\u003eheaders\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;Authorization\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Bearer \u003cspan\u003e\u003cspan\u003e#{\u003c/span\u003eread_token\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u0026#34;\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eRSpec\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003econfigure \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003ec\u003cspan\u003e|\u003c/span\u003e\n  c\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einclude\u003c/span\u003e \u003cspan\u003eTokenHelper\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, I attach the right token to the protected requests:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# spec/api/messages_controller_spec.rb\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;rails_helper\u0026#39;\u003c/span\u003e\n\ndescribe \u003cspan\u003eApi\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eMessagesController\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e type\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:controller\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n     \u003cspan\u003e# ...existing code...\u003c/span\u003e\n  \n     subject \u003cspan\u003e{\u003c/span\u003e get \u003cspan\u003e:protected\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e params\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e format\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:json\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\n     it \u003cspan\u003e\u0026#39;returns an accepted answer for the protected endpoint\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n       \u003cspan\u003e# 👇 new code\u003c/span\u003e\n       authorize\u003cspan\u003e!\u003c/span\u003e \u003cspan\u003e\u0026#39;validToken\u0026#39;\u003c/span\u003e\n       \u003cspan\u003e# 👆 new code\u003c/span\u003e\n\n       subject\n\n       expect\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto be_ok\n     \u003cspan\u003eend\u003c/span\u003e\n\n     \u003cspan\u003e# ...existing code...\u003c/span\u003e\n\n     subject \u003cspan\u003e{\u003c/span\u003e get \u003cspan\u003e:admin\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e params\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e format\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:json\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\n     it \u003cspan\u003e\u0026#39;returns an accepted answer for the admin endpoint\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n       \u003cspan\u003e# 👇 new code\u003c/span\u003e\n       authorize\u003cspan\u003e!\u003c/span\u003e \u003cspan\u003e\u0026#39;validWithPermissionsToken\u0026#39;\u003c/span\u003e\n       \u003cspan\u003e# 👆 new code\u003c/span\u003e\n\n       subject\n\n       expect\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto be_ok\n     \u003cspan\u003eend\u003c/span\u003e\n  \n     \u003cspan\u003e# ...existing code...\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThese tests will prevent regressions when we enforce authorization. Let\u0026#39;s add some tests to define the expectations that we want to enforce in the protected route:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# spec/api/messages_controller_spec.rb\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;rails_helper\u0026#39;\u003c/span\u003e\n\ndescribe \u003cspan\u003eApi\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eMessagesController\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e type\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:controller\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003e# ...existing code...\u003c/span\u003e\n  \n  describe \u003cspan\u003e\u0026#39;#protected\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n    it \u003cspan\u003e\u0026#39;returns error for the protected endpoint if there is no token\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n      can_authenticate\n\n      subject\n\n      expect\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto be_unauthorized\n    \u003cspan\u003eend\u003c/span\u003e\n\n    it \u003cspan\u003e\u0026#39;returns error for the protected endpoint if the token is expired\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n      authorize\u003cspan\u003e!\u003c/span\u003e \u003cspan\u003e\u0026#39;expiredToken\u0026#39;\u003c/span\u003e\n\n      subject\n\n      expect\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto be_unauthorized\n    \u003cspan\u003eend\u003c/span\u003e\n\n    it \u003cspan\u003e\u0026#39;returns error for the protected endpoint if the token has the wrong issuer\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n      authorize\u003cspan\u003e!\u003c/span\u003e \u003cspan\u003e\u0026#39;wrongIssuerToken\u0026#39;\u003c/span\u003e\n\n      subject\n\n      expect\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto be_unauthorized\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n  \n  \u003cspan\u003e# ...existing code...\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFor reasons of space, I\u0026#39;m grouping them, but to remain closer to the spirit of TDD, you should add them one by one. See how they fail:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3k1ZLpZhkETEoCIngYSawa/7aab01b4ceae70fe267f4c9027d33875/failing-tests.png\" alt=\"Failing Tests\"/\u003e\u003c/p\u003e\u003ch3 id=\"Implementing-authorization\"\u003eImplementing authorization\u003c/h3\u003e\u003cp\u003eTo implement the authorization, we\u0026#39;re using a \u003ca href=\"https://api.rubyonrails.org/v6.1.3.2/classes/AbstractController/Callbacks/ClassMethods.html#method-i-before_action\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ebefore_action\u003c/a\u003e callback. We pick the token out of the header and verify it with our library. Traditionally, this type of helper method goes in the \u003ccode\u003eApplicationController\u003c/code\u003e, which is the base class for all of our controllers. Here is the code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# app/controllers/application_controller.rb\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;json_web_token\u0026#39;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eActionController\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eAPI\u003c/span\u003e\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eauthorize\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\n    valid\u003cspan\u003e,\u003c/span\u003e result \u003cspan\u003e=\u003c/span\u003e verify\u003cspan\u003e(\u003c/span\u003eraw_token\u003cspan\u003e(\u003c/span\u003erequest\u003cspan\u003e.\u003c/span\u003eheaders\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    head \u003cspan\u003e:unauthorized\u003c/span\u003e \u003cspan\u003eunless\u003c/span\u003e valid\n    \u003cspan\u003e@token\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e result\n  \u003cspan\u003eend\u003c/span\u003e\n\n  \u003cspan\u003eprivate\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003everify\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e)\u003c/span\u003e\n    payload\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eJsonWebToken\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003everify\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e payload\u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003erescue\u003c/span\u003e \u003cspan\u003eJWT\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eDecodeError\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e e\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e e\u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eraw_token\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eheaders\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e headers\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;Authorization\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esplit\u003cspan\u003e.\u003c/span\u003elast \u003cspan\u003eif\u003c/span\u003e headers\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;Authorization\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003epresent\u003cspan\u003e?\u003c/span\u003e\n\n    \u003cspan\u003enil\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd we ensure it\u0026#39;s used only for the routes we want:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# app/controllers/api/messages_controller.rb\u003c/span\u003e\n\u003cspan\u003emodule\u003c/span\u003e \u003cspan\u003eApi\u003c/span\u003e\n  \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eMessagesController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e\n    before_action \u003cspan\u003e:authorize!\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e except\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e%i[public]\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow we see the tests passing:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3n98MGbakFURNupujEG8CZ/6de791a632850a1bdb9cfd8dc6a6ef07/passing-tests.png\" alt=\"Passing Tests\"/\u003e\u003c/p\u003e\u003ch3 id=\"Custom-messages\"\u003eCustom messages\u003c/h3\u003e\u003cp\u003eNext, we want to get a more detailed error message in the payload of the response. We need some extra assertions in the tests we wrote:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# spec/api/messages_controller_spec.rb\u003c/span\u003e\ndescribe \u003cspan\u003eApi\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eMessagesController\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e type\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:controller\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n       subject\n\n       expect\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto be_unauthorized\n\n       \u003cspan\u003e# 👇 new code\u003c/span\u003e\n       message \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;Nil JSON web token\u0026#39;\u003c/span\u003e\n       expect\u003cspan\u003e(\u003c/span\u003ejson_response\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto \u003cspan\u003einclude\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e message\u003cspan\u003e)\u003c/span\u003e\n       \u003cspan\u003e# 👆 new code\u003c/span\u003e\n     \u003cspan\u003eend\u003c/span\u003e\n\n     it \u003cspan\u003e\u0026#39;returns error for the protected endpoint if the token is expired\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n       subject\n\n       expect\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto be_unauthorized\n       \u003cspan\u003e# 👇 new code\u003c/span\u003e\n       expect\u003cspan\u003e(\u003c/span\u003ejson_response\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto \u003cspan\u003einclude\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;Signature has expired\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n       \u003cspan\u003e# 👆 new code\u003c/span\u003e\n     \u003cspan\u003eend\u003c/span\u003e\n\n     it \u003cspan\u003e\u0026#39;returns error for the protected endpoint if the token has the wrong issuer\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n       subject\n\n       expect\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto be_unauthorized\n       \u003cspan\u003e# 👇 new code\u003c/span\u003e\n       expect\u003cspan\u003e(\u003c/span\u003ejson_response\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto \u003cspan\u003einclude\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;Invalid issuer\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n       \u003cspan\u003e# 👆 new code\u003c/span\u003e\n     \u003cspan\u003eend\u003c/span\u003e\n\n     it \u003cspan\u003e\u0026#39;returns error for the protected endpoint if the token has the wrong audience\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo implement this capability, we need to pass the message in the response whenever an error happens.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# app/controllers/application_controller.rb\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eActionController\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eAPI\u003c/span\u003e\n   \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eauthorize\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\n     valid\u003cspan\u003e,\u003c/span\u003e result \u003cspan\u003e=\u003c/span\u003e verify\u003cspan\u003e(\u003c/span\u003eraw_token\u003cspan\u003e(\u003c/span\u003erequest\u003cspan\u003e.\u003c/span\u003eheaders\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n     \u003cspan\u003e# 👇 old code\u003c/span\u003e\n     \u003cspan\u003e# head :unauthorized unless valid\u003c/span\u003e\n     \u003cspan\u003e# 👇 new code\u003c/span\u003e\n     render json\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e message\u003cspan\u003e:\u003c/span\u003e result \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto_json\u003cspan\u003e,\u003c/span\u003e status\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:unauthorized\u003c/span\u003e \u003cspan\u003eunless\u003c/span\u003e valid\n\n     \u003cspan\u003e@token\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e result\n   \u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Validating-the-audience\"\u003eValidating the audience\u003c/h3\u003e\u003cp\u003eOur code has a serious flaw: it doesn\u0026#39;t validate the \u003cem\u003eaudience\u003c/em\u003e contained in the JWT. Let\u0026#39;s fix that to make sure that the application is the intended user of the token. A new test codes the behavior:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# spec/api/messages_controller_spec.rb\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;rails_helper\u0026#39;\u003c/span\u003e\n\ndescribe \u003cspan\u003eApi\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eMessagesController\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e type\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:controller\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003e# ...existing code...\u003c/span\u003e\n  \n  describe \u003cspan\u003e\u0026#39;#protected\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n    subject \u003cspan\u003e{\u003c/span\u003e get \u003cspan\u003e:protected\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e params\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e format\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:json\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\n    it \u003cspan\u003e\u0026#39;returns error for the protected endpoint if the token has the wrong audience\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n      authorize\u003cspan\u003e!\u003c/span\u003e \u003cspan\u003e\u0026#39;wrongAudienceToken\u0026#39;\u003c/span\u003e\n\n      subject\n\n      expect\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto be_unauthorized\n      expect\u003cspan\u003e(\u003c/span\u003ejson_response\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto \u003cspan\u003einclude\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;Invalid audience\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n  \n  \u003cspan\u003e# ...existing code...\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eConveniently, the change happens in the \u003ccode\u003e\u003cspan\u003eJWT\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edecode\u003c/code\u003e method that we rely on:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# lib/json_web_token.rb\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;jwt\u0026#39;\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;net/http\u0026#39;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eJsonWebToken\u003c/span\u003e\n  \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003everify\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003eJWT\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edecode\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enil\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                 \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e# Verify the signature of this token\u003c/span\u003e\n                 algorithm\u003cspan\u003e:\u003c/span\u003e algorithm\u003cspan\u003e,\u003c/span\u003e\n                 iss\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eRails\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eapplication\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003ex\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eissuerUri\u003cspan\u003e,\u003c/span\u003e\n                  \u003cspan\u003e# 👇 new code\u003c/span\u003e\n                  verify_iss\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                  aud\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eRails\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eapplication\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003ex\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eaudience\u003cspan\u003e,\u003c/span\u003e\n                  verify_aud\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003eheader\u003cspan\u003e|\u003c/span\u003e\n                  \u003cspan\u003e# 👆 new code\u003c/span\u003e\n        key\u003cspan\u003e(\u003c/span\u003eheader\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003eend\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n\n    \u003cspan\u003e# ...existing code...\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Testing-Permissions\"\u003eTesting Permissions\u003c/h2\u003e\u003cp\u003eAt this point, we\u0026#39;ve got the protected route covered. Now, we shall focus on the admin route. The next step is checking for the correct \u003ccode\u003epermission\u003c/code\u003e claim in the token. Our regular token doesn\u0026#39;t have the claim, so it should fail the test:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# spec/api/messages_controller_spec.rb\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;rails_helper\u0026#39;\u003c/span\u003e\n\ndescribe \u003cspan\u003eApi\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eMessagesController\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e type\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:controller\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003e# ...existing code...\u003c/span\u003e\n  \n  describe \u003cspan\u003e\u0026#39;#admin\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n    subject \u003cspan\u003e{\u003c/span\u003e get \u003cspan\u003e:admin\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e params\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e format\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:json\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\n    it \u003cspan\u003e\u0026#39;returns error for the admin endpoint if the token does not have permissions\u0026#39;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n      authorize\u003cspan\u003e!\u003c/span\u003e \u003cspan\u003e\u0026#39;validToken\u0026#39;\u003c/span\u003e\n\n      subject\n\n      expect\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto be_unauthorized\n      expect\u003cspan\u003e(\u003c/span\u003ejson_response\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto \u003cspan\u003einclude\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;Access is denied\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n  \n  \u003cspan\u003e# ...existing code...\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, let\u0026#39;s implement the permission check in the controller:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# app/controllers/application_controller.rb\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;json_web_token\u0026#39;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eActionController\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eAPI\u003c/span\u003e\n  \u003cspan\u003e# ...existing code...\u003c/span\u003e\n  \n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ecan_read_admin_messages\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\n    check_permissions\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e@token\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;read:admin-messages\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003echeck_permissions\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e,\u003c/span\u003e permission\u003cspan\u003e)\u003c/span\u003e\n    permissions \u003cspan\u003e=\u003c/span\u003e token\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;permissions\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    permissions \u003cspan\u003e=\u003c/span\u003e permissions\u003cspan\u003e.\u003c/span\u003esplit \u003cspan\u003eif\u003c/span\u003e permissions\u003cspan\u003e.\u003c/span\u003eis_a\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\n    \u003cspan\u003eunless\u003c/span\u003e permissions\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einclude\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003epermission\u003cspan\u003e)\u003c/span\u003e\n      render json\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e message\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;Access is denied\u0026#39;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto_json\u003cspan\u003e,\u003c/span\u003e\n             status\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:unauthorized\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n  \n  \u003cspan\u003e# ...existing code...\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo make sure the check is applied to the correct route, we follow a similar approach to before, based on a \u003ccode\u003ebefore_action\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# app/controllers/api/messages_controller.rb\u003c/span\u003e\n\u003cspan\u003emodule\u003c/span\u003e \u003cspan\u003eApi\u003c/span\u003e\n  \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eMessagesController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e\n    \u003cspan\u003e# ...existing code...\u003c/span\u003e\n    \n    before_action \u003cspan\u003e:can_read_admin_messages!\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e only\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e%i[admin]\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow you can run the tests to make sure everything works as expected.\u003c/p\u003e\u003ch2 id=\"We-Got-There-\"\u003eWe Got There!\u003c/h2\u003e\u003cp\u003eWriting code following TDD is all about having a tight feedback loop. This isn\u0026#39;t easy to show in writing due to a large number of small changes, but I hope I have given you a good glimpse.\u003c/p\u003e\u003cp\u003eUsing TDD brings several benefits:\u003c/p\u003e\u003cul\u003e\u003cli\u003eWe\u0026#39;ve confirmed that our implementation, you know, works\u003c/li\u003e\u003cli\u003eOur test suite describes the application\u0026#39;s behavior in an executable way instead of potentially misleading documentation\u003c/li\u003e\u003cli\u003eWe\u0026#39;re incorporating testability into our code from the beginning\u003c/li\u003e\u003cli\u003eOften, we tend to build things that we might need for a future that never comes. If you encode your expectations as tests, that becomes more visible, and it helps prevent it from happening.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003ePerhaps not every line of code that you write needs to be covered by tests. Nevertheless, a focus on testability helps to deliver better products \u003ca href=\"https://itrevolution.com/book/accelerate/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emore reliably\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eYou can download the sample project shown in this article from \u003ca href=\"https://github.com/auth0-blog/securing-api-rails\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis GitHub repository\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn how to secure a Rails API with Auth0 by letting you drive by tests.",
      "date_published": "2021-11-09T16:07:00Z",
      "author": {
        "name": "Testing Authorization"
      }
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/lush-transforms-its-login-experience-with-auth0/",
      "title": "Lush Transforms its Login Experience with Auth0",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eLONDON. – 9th November, 2021\u003c/strong\u003e – The \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Identity Platform\u003c/a\u003e, a product unit within Okta, has been selected by \u003ca href=\"https://www.lush.com/uk/en\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLush\u003c/a\u003e, the global cosmetics retailer, to provide a superior login experience for customers and staff interacting with the online brand. Auth0 will initially power the login experience for Lush’s new chat function and add website authentication, along with centralising its point-of-sale (PoS) system to simplify access to information throughout the organisation, while helping to ensure privacy.\u003c/p\u003e\u003cp\u003eWhen it comes to pursuing more \u003ca href=\"https://weare.lush.com/lush-life/our-ethics/digital-ethics/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eethical ways of doing business\u003c/a\u003e, Lush is no stranger to pushing the limits. Founded in the 1990s, its commitment to sustainable, cruelty-free production was initially an outlier in cosmetics, but the brand has influenced the direction of the industry as a whole. In the process, it has grown into a successful multinational business and operates in 47 countries with 937 global Lush shops. The latest business numbers can be found on \u003ca href=\"https://weare.lush.com/numbers\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLush’s company information website\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eTraditionally, Lush preferred to build its digital services in-house following its digital ethics code. However, when it restructured its digital business using a microservices architecture, the company found that its approach to authentication complicated its ability to protect customer data, which raised security concerns within the company. What’s more, the time taken for developers to maintain its internally-built authentication system strained innovation across other parts of the business.\u003c/p\u003e\u003cp\u003e“While we didn\u0026#39;t experience any major data leaks, our home-baked solution raised red flags for our internal data privacy team, and that posed a huge risk for us since we are a business built on ethics,” said Simon Ince, Lush’s creative technology and innovation lead. “During the development of a new customer chat function, we hit a roadblock with our existing authentication system. Time was not on our side, so we evaluated open standards as an alternative to building in-house. That’s when we discovered Auth0, and the problem was solved in thirty minutes.”\u003c/p\u003e\u003cp\u003eFollowing the success of the chat system, Lush evaluated Auth0’s solution for use across other parts of the business — including its website redesign and centralizing its global POS system — to create a more seamless, secure, and personalized end-user experience. With Auth0, just two developers were able to add authentication to Lush\u0026#39;s website without impacting Lush\u0026#39;s existing timeline or roadmap.\u003c/p\u003e\u003cp\u003e“When business and consumer needs rapidly evolve, and the security landscape becomes even more complex, maintaining in-house systems can be a difficult and time-consuming process — one that takes developers away from other, more pressing tasks,” said Steven Rees-Pullman, SVP International at Auth0. “Auth0’s identity platform enables Lush to refocus its development teams where they can bring the most value, while meeting the company’s ethical standards for data privacy and customer security.”\u003c/p\u003e\u003cp\u003eLearn more about \u003ca href=\"https://auth0.com/case-studies/lush-cs/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLush’s implementation\u003c/a\u003e on Auth0.com.\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eThe Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003ch3 id=\"Media-Contacts\"\u003eMedia Contacts\u003c/h3\u003e\u003cp\u003eAuth0 Global Communications\u003cbr/\u003e\u003ca href=\"mailto:press@auth0.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epress@auth0.com\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Cosmetics firm replaces home-built authentication with Auth0 to optimise developers’ time and simplify security for customers and staff throughout the business",
      "image": "https://images.ctfassets.net/23aumh6u8s0i/1CxU44JDw9xEZHvAzjcEy1/9aa6d361a00a37440e4bbbc1a6079f5c/Announcement2.png",
      "date_published": "2021-11-09T13:34:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/auth0-integration-with-singpass/",
      "title": "Auth0 Integration with Singpass",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eWhen it comes to national digital identity, Singapore has a lot to say. \nSingapore launched \u003ca href=\"https://www.singpass.gov.sg/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSingpass\u003c/a\u003e in 2003 and has been enhancing it over the years. \nSingpass’s initial goal was to authenticate citizens to government agencies and has since expanded to use in the private sector quite successfully.\nToday, Singapore residents use Singpass to securely access over 1,700 services from more than 460 government agencies and private sector organisations. \u003c/p\u003e\u003cp\u003eWith Auth0\u0026#39;s customer base quickly growing in Southeast Asia, Singapore and Japan, it was about time to officially offer Singpass services on the Auth0 platform.\u003c/p\u003e\u003cp\u003eThis is the first of a two-post series. In this post, we’ll learn how to integrate Singpass QR Login with Auth0 Universal Login. \nIn the next post, we’ll look into integrating Myinfo to share selective personal data such as name and email address.\u003c/p\u003e\u003ch2 id=\"How-Singpass-QR-Login-Works\"\u003eHow Singpass QR Login Works\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://api.singpass.gov.sg/library/login/developers/overview-at-a-glance\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSingpass QR login\u003c/a\u003e uses OIDC authorization code flow. \nSingpass offers an embedded SDK that renders a QR code returned from the authorization endpoint.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003escript\u003c/span\u003e \u003cspan\u003esrc\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e”https://id.singpass.gov.sg/static/ndi_embedded_auth.js”\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003escript\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWebsites integrate with Singpass by hosting NDI embedded Javascript SDK. On page load, the Singpass SDK starts an authorization flow, with the \u003ccode\u003estate\u003c/code\u003e and \u003ccode\u003enonce\u003c/code\u003e loaded to the page from the backend.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eauthParamsSupplier\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e state\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;my-state\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e nonce\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;my-nonce\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eonError\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eerrorId\u003cspan\u003e,\u003c/span\u003e message\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003eError. errorId:\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003eerrorId\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e message:\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003emessage\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e initAuthSessionResponse \u003cspan\u003e=\u003c/span\u003e window\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eNDI\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einitAuthSession\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003e\u0026#39;ndi-qr\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        clientId\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSINGPASS_CLIENT_ID\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n        redirectUri\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSINGPASS_REDIRECT_URL\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        scope\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;openid\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        responseType\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;code\u0026#39;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    authParamsSupplier\u003cspan\u003e,\u003c/span\u003e\n    onError\n\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNDI clients call authorization endpoint to return an embedded QR code. The Singpass app then scans the generated QR code, and the user then confirms the login. \nNext, the Embedded SDK receives a confirmation over Websocket and redirects to the client’s callback URL with an authorization code and state. \u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/vfNDWisx8csQ7Ifg777EQ/7037d43c9924c70239e6d49fd365c988/01_private-qr.png\" alt=\"Singpass sequence diagram\"/\u003e\u003c/p\u003e\u003cp\u003eAfter the exchange, \u003ccode\u003eid_token\u003c/code\u003e’s \u003ccode\u003esub\u003c/code\u003e claim contains either an opaque digital identifier known as UUID or a combination of UUID and NRIC. \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e \n   \u003cspan\u003e\u0026#34;sub\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;s=S8829314B,u=1c0cee38-3a8f-4f8a-83bc-7a0e4c59d6a9\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;aud\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;xxNsTfleQMHoW6tbUgSVNwnLWQ0xTeV0\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;iss\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;https://stg-id.singpass.gov.sg\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;exp\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1609907975\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;iat\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1609907375\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;nonce\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;alh5DS2Gfndv9i0jXYViqGIhiQdP4+4BrUvBhDXBYKk=\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;amr\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e \u003cspan\u003e\u0026#34;pwd\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;swk\u0026#34;\u003c/span\u003e \u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eDepending on the information requested, \u003ccode\u003eid_token\u003c/code\u003e is either signed or encrypted.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1IrIEcWP6iAmJQ4pS7iNrp/e0cb15a685523ab581f7567c543411b8/Screen_Shot_2021-10-13_at_13.12.10.png\" alt=\"id_token\"/\u003e\u003c/p\u003e\u003ch2 id=\"Integrate-Singpass-with-Auth0\"\u003eIntegrate Singpass with Auth0\u003c/h2\u003e\u003cp\u003eDuring the discovery phase, we noticed some gaps between what Auth0 offers for integration with external OIDC providers and what Singpass required.\u003c/p\u003e\u003cp\u003eFirst challenge was that the \u003ccode\u003enonce\u003c/code\u003e parameter that applications send to Auth0 is not available within UL where we wanted to initiate the NDI SDK.\u003c/p\u003e\u003cp\u003eSecond, Auth0 currently does not support the \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc7523#section-2.2\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eclient-assertion\u003c/a\u003e for token endpoints of OIDC connections. \nSingpass expects clients to use asymmetric \u003ca href=\"https://stg-id.singpass.gov.sg/docs/authorization/api#_client_jwk_requirements\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eclient_assertion JWT\u003c/a\u003e and customers should follow NDI’s process to generate an Elliptic-curve keypair and host public key in a public-facing \u003ccode\u003ejwks\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e file. \nCustomer’s public-key URL is shared with Singpass during lodging the application.\u003c/p\u003e\u003cp\u003eLastly, Singpass’s \u003ccode\u003eid_token\u003c/code\u003e signing signature (\u003ccode\u003eid_token_signing_alg_values_supported\u003c/code\u003e), is \u003ccode\u003e\u003cspan\u003eES256\u003c/span\u003e\u003c/code\u003e as pointed in their \u003ca href=\"https://id.singpass.gov.sg/.well-known/openid-configuration\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eopenid-configuration\u003c/a\u003e. \nAuth0 only supports \u003ccode\u003e\u003cspan\u003eRS256\u003c/span\u003e\u003c/code\u003e signed \u003ccode\u003eid_tokens\u003c/code\u003e from upstream connections.\u003c/p\u003e\u003cp\u003eWhile integrating Singpass with Auth0 is not a native feature, we hope to build a simpler and easier solution in the future.\u003c/p\u003e\u003ch3 id=\"Technical-Details\"\u003eTechnical Details\u003c/h3\u003e\u003cp\u003eOur field team decided to challenge themselves by taking available tools within the Auth0 extensibility platform and develop an integration path for Singpass on Auth0.\u003c/p\u003e\u003cp\u003eWe decided to proxy both authorization and token endpoints. The proxied version adds missing features of appending nonce, performing exchange with client_assertion, and validating the \u003ccode\u003e\u003cspan\u003eES256\u003c/span\u003e\u003c/code\u003e signature in return.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4IpSoCXSxRbyByzRnXk8jl/2d9c90bba361a99b9426ffbed16c1e20/singpass-seq.png\" alt=\"Singpass component diagram\"/\u003e\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eUser visits an application that requires authentication against Auth0\u003c/li\u003e\u003cli\u003eAuth0 detects no session and redirects to Universal Login page for interactive authentication\u003c/li\u003e\u003cli\u003eUser selects login with Singpass from available logon options\u003c/li\u003e\u003cli\u003eNDI library inside UL page initiates connection with Singpass, fetches QR code, and displays it\u003c/li\u003e\u003cli\u003eUser opens up Singpass app and scans the QR code\u003c/li\u003e\u003cli\u003eSingpass app communicates to Singpass authorization server in back-channel and accepts logon\u003c/li\u003e\u003cli\u003eSingpass redirects a callback to Auth0’s/login/callback endpoint using the front channel from the NDI SDK on the UL page\u003c/li\u003e\u003cli\u003eAuth0 connects to the proxy /token endpoint to exchange authorization code. Token endpoint validates client credentials\u003c/li\u003e\u003cli\u003eProxy endpoint creates private_jwt client assertion and exchanges authorization code, validates response and returns results to Auth0\u003c/li\u003e\u003cli\u003eAuth0 decodes returning \u003ccode\u003eid_token\u003c/code\u003e from Singpass and issues its own \u003ccode\u003eid_token\u003c/code\u003e to the application, completing the sign-in flow\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eWe developed four open-source versions of proxy endpoint; \n\u003ca href=\"https://github.com/auth0-extensions/auth0-singpass-extension\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehosted on Auth0\u003c/a\u003e, \u003ca href=\"https://github.com/auth0-blog/auth0-singpass/tree/main/aws\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAWS Lambda\u003c/a\u003e, \u003ca href=\"https://github.com/auth0-blog/auth0-singpass/tree/main/cloudflare\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCloudflare Workers\u003c/a\u003e, and vanilla \u003ca href=\"https://github.com/auth0-blog/auth0-singpass/tree/main/express\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eExpress.js\u003c/a\u003e. \nIn the rest of this article, we will focus on the configuration of the Singpass integration proxy inside Auth0. For production use, we suggest hosting proxy endpoints in your environment.\u003c/p\u003e\u003ch3 id=\"Deploying-Singpass-Integration-Proxy\"\u003eDeploying Singpass Integration Proxy\u003c/h3\u003e\u003cp\u003eFirst, create a SPA companion app with Allowed Callback URLs set to \u0026#34;\u003ca href=\"https://your-custom-domain/login/callback\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://your-custom-domain/login/callback\u003c/a\u003e\u0026#34;. \u003c/p\u003e\u003cp\u003eThen head to Extensions, click on \u0026#34;Create Extension\u0026#34; and enter GitHub URL \u003ca href=\"https://github.com/auth0-extensions/auth0-singpass-extension\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://github.com/auth0-extensions/auth0-singpass-extension\u003c/a\u003e. During installation populate with the correct values as follows:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1YGwCulxPHWHiH9OPImMvC/f361a7bb82c2a1baaf0110160272a4da/03_singpass-extension-settings.jpg\" alt=\"Extension settings\"/\u003e\u003c/p\u003e\u003cp\u003eValues are:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eAuth0 custom domain\u003c/strong\u003e\u003cbr/\u003eThis is your Auth0 custom domain name. You need to have a custom domain name enabled in Auth0\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAuth0 client id\u003c/strong\u003e\u003cbr/\u003e\u003ccode\u003eclient_id\u003c/code\u003e of companion app in Auth0\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAuth0 client secret\u003c/strong\u003e\u003cbr/\u003e\u003ccode\u003eclient_secret\u003c/code\u003e of companion app in Auth0\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSingpass environment\u003c/strong\u003e\u003cbr/\u003eIs set to Staging only.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSingpass client id\u003c/strong\u003e\u003cbr/\u003e\u003ccode\u003eclient_id\u003c/code\u003e assigned to you from Singpass\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSingpass signing alg\u003c/strong\u003e\u003cbr/\u003eAlways \u003ccode\u003e\u003cspan\u003eES256\u003c/span\u003e\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eRelying on party jwks endpoint\u003c/strong\u003e\u003cbr/\u003eThis is your JWKS endpoint used during Singpass onboarding registration\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eRelying on party private key\u003c/strong\u003e\u003cbr/\u003eYour Elliptic-curve private key used during Singpass onboarding registration. This is not required if the proxy endpoint is running in your own infrastructure, which is the preferred deployment method for production\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eRelying on party kid\u003c/strong\u003e\u003cbr/\u003eThis is your JWKS key ID used during Singpass onboarding registration\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eOnce installed, you’ll need to Singpass connection under Authentication \u0026gt; Social \u0026gt; Create Connection \u0026gt; Create Custom. Use client_id and secret from companion app and populate URLs depending on your tenant region and node version as documented \u003ca href=\"https://github.com/auth0-extensions/auth0-singpass-extension#usage\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e. Fetch User Profile script template is also available in \u003ca href=\"https://github.com/auth0-blog/auth0-singpass/blob/main/oauth2-connection-config/fetchUserProfile.js\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGithub repo\u003c/a\u003e. Ultimately \u003ca href=\"https://github.com/auth0-blog/auth0-singpass/blob/main/enable-pkce.sh\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eenable PKCE\u003c/a\u003e on this connection.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2h8ucNIa0Pns4bzRZMnJSe/9bb19078adc8e67a43f224d3ca6a3ffe/04_singpass-connection.jpg\" alt=\"singpass social connection\"/\u003e\u003c/p\u003e\u003cp\u003eThen enable this connection to applications that require sign-in with Singpass:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2Drur5RknH2jD9KEWQVSsJ/5eee8e828e78fa107c495e1ff3017a27/singpass-demo-app.png\" alt=\"singpass application connection\"/\u003e\u003c/p\u003e\u003ch3 id=\"Universal-Login\"\u003eUniversal Login\u003c/h3\u003e\u003cp\u003eNext, configure Universal Login to host NDI SDK and render QR login code when requested. \nHead to Branding \u0026gt; Universal Login \u0026gt; Login. Enable “Customize Login Page” and configure page HTML.  \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003escript\u003c/span\u003e \u003cspan\u003esrc\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttps://cdn.auth0.com/js/lock/11.30/lock.min.js\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003escript\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;!-- ADDED for Singpass --\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003escript\u003c/span\u003e \u003cspan\u003esrc\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e//code.jquery.com/jquery-3.1.0.min.js\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003escript\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003escript\u003c/span\u003e \u003cspan\u003esrc\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttps://stg-id.singpass.gov.sg/static/ndi_embedded_auth.js\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003escript\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;!-- /ADDED --\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAdd \u003ccode\u003eauthButtons\u003c/code\u003e under \u003ccode\u003etheme\u003c/code\u003e object of Lock configuration:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003evar\u003c/span\u003e lock \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eAuth0Lock\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003eclientID\u003cspan\u003e,\u003c/span\u003e config\u003cspan\u003e.\u003c/span\u003eauth0Domain\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// ...\u003c/span\u003e\n    theme\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      authButtons\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;singpass\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n          displayName\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Singpass\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          primaryColor\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;#cf0b15\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          foregroundColor\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;#FFFFFF\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          icon\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;https://app.singpass.gov.sg/apple-touch-icon.png\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd logic to render QR code as following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003elock\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;signin ready\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;siginin ready\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003eextraParams\u003cspan\u003e.\u003c/span\u003esingpass\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e$\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;.auth0-lock.auth0-lock\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eremoveProp\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;box-sizing\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e connectionConfig \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003einitConnnectionConfig\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eaddEnterpriseConnections\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003econnectionConfig\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\nlock\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003einitConnectionConfig\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    general\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      backButton\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026lt;span class=\u0026#34;auth0-lock-back-button\u0026#34;\u0026gt;\u0026lt;svg focusable=\u0026#34;false\u0026#34; enable-background=\u0026#34;new 0 0 24 24\u0026#34; version=\u0026#34;1.0\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; xml:space=\u0026#34;preserve\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;polyline fill=\u0026#34;none\u0026#34; points=\u0026#34;12.5,21 3.5,12 12.5,3 \u0026#34; stroke=\u0026#34;#000000\u0026#34; stroke-miterlimit=\u0026#34;10\u0026#34; stroke-width=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;/polyline\u0026gt; \u0026lt;line fill=\u0026#34;none\u0026#34; stroke=\u0026#34;#000000\u0026#34; stroke-miterlimit=\u0026#34;10\u0026#34; stroke-width=\u0026#34;2\u0026#34; x1=\u0026#34;22\u0026#34; x2=\u0026#34;3.5\u0026#34; y1=\u0026#34;12\u0026#34; y2=\u0026#34;12\u0026#34;\u0026gt;\u0026lt;/line\u0026gt; \u0026lt;/svg\u0026gt;\u0026lt;/span\u0026gt;\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      enterprise_panel\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026lt;div id=\u0026#34;ndi-qr\u0026#34; class=\u0026#34;auth0-enterprise-button-content\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026#39;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eaddEnterpriseConnections\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econnectionConfig\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003evar\u003c/span\u003e backButton \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e$\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003econnectionConfig\u003cspan\u003e.\u003c/span\u003egeneral\u003cspan\u003e.\u003c/span\u003ebackButton\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e$\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;.auth0-lock-submit\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehide\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  backButton\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappendTo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;.auth0-lock-header\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  backButton\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;click\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epreventDefault\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    window\u003cspan\u003e.\u003c/span\u003ehistory\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eback\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003evar\u003c/span\u003e enterprisePanel \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e$\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003econnectionConfig\u003cspan\u003e.\u003c/span\u003egeneral\u003cspan\u003e.\u003c/span\u003eenterprise_panel\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  enterprisePanel\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappendTo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;.auth0-lock-body-content\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e$\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;.auth0-lock-content\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehide\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  enterprisePanel\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eauthParamsSupplier\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Replace the below with an `await`ed call to initiate an auth session on your backend\u003c/span\u003e\n    \u003cspan\u003e// which will generate state+nonce values, e.g\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e state\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003edecodeURIComponent\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003eextraParams\u003cspan\u003e.\u003c/span\u003endi_state\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e nonce\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003edecodeURIComponent\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003eextraParams\u003cspan\u003e.\u003c/span\u003endi_nonce\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eonError\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eerrorId\u003cspan\u003e,\u003c/span\u003e message\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003eonError. errorId:\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003eerrorId\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e message:\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003emessage\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003econst\u003c/span\u003e initAuthSessionResponse \u003cspan\u003e=\u003c/span\u003e window\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eNDI\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einitAuthSession\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          \u003cspan\u003e\u0026#39;ndi-qr\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e{\u003c/span\u003e\n            clientId\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSINGPASS_CLIENT_ID\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e// Replace with your Singpass client ID\u003c/span\u003e\n            redirectUri\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSINGPASS_AUTH0_CALLBACK\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e        \u003cspan\u003e// Replace with your Auth0 custom domain\u003c/span\u003e\n            scope\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;openid\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            responseType\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;code\u0026#39;\u003c/span\u003e\n          \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          authParamsSupplier\u003cspan\u003e,\u003c/span\u003e\n          onError\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e{\u003c/span\u003e\n            renderDownloadLink\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            appLaunchUrl\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e \u003cspan\u003e// Replace with your iOS/Android App Link\u003c/span\u003e\n          \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;initAuthSession: \u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e initAuthSessionResponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can find the full version of the custom Universal Login page \u003ca href=\"https://github.com/auth0-blog/auth0-singpass/tree/main/universal-login\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch3 id=\"How-it-Looks-in-Action\"\u003eHow it Looks in Action\u003c/h3\u003e\u003cp\u003eYou should be able to see Log in with Singpass as connections options on the login page.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1qhC2Zg65ZshMGMEgXVmzs/a3c692bb512777eca5ee93dde07c3285/lock-singpass-p1v3.png\" alt=\"singpass login selection\"/\u003e\u003c/p\u003e\u003cp\u003eClick on \u0026#34;Log in with Singpass. QR code renders.\n\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5cIFPyXvsCJ0u4iwrOWaIh/dc1aec1d8421154d375222f0e3cc1c4d/lock-singpass-qrv2.png\" alt=\"singpass QR in lock\"/\u003e\u003c/p\u003e\u003cp\u003eScan the QR code with the Singpass mobile app.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6pGbrMObvL33JzKFWnkJ1Y/4de633516efb24f40220ab0a2a513b0b/singpass-app-combined.png\" alt=\"app combined\"/\u003e\u003c/p\u003e\u003ch3 id=\"User-Profile\"\u003eUser Profile\u003c/h3\u003e\u003cp\u003eWe’re taking Singpass UUID to form Auth0 \u003ccode\u003euser_id\u003c/code\u003e. That logic is sitting in the Fetch User Profile script of the Singpass connection.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/glYisSzA8BDvvAmOJfAyV/3bcc4833cce7954c922efe336ca6ddad/14_singpass-user-profile.png\" alt=\"singpass user profile\"/\u003e\u003c/p\u003e\u003cp\u003eIn the next article, we will enable Myinfo, where you will fetch email and name information and use it to link Singpass users with existing customers with matching details. Stay tuned!\u003c/p\u003e\u003ch2 id=\"Login-experience-in-Action\"\u003eLogin experience in Action\u003c/h2\u003e\u003cblockquote\u003e\u003cp\u003eNote: This video is captured with staging app (v13.0.0-stg) in the staging environment. The actual app interface might be different.\u003c/p\u003e\u003c/blockquote\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg src=\"https://fast.wistia.com/embed/medias/dybrofix9e/swatch\" alt=\"\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eThe Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn how to enable Singpass login with QR code in Auth0 Universal Login",
      "date_published": "2021-11-05T17:59:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/auth0-announces-the-winners-of-the-actions-hackathon/",
      "title": "Auth0 Announces the Winners of the Actions Hackathon",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eAuth0 was excited to host our first Actions Hackathon on Oct 28, 2021. Teams from around the globe participated in a day-long event that saw hackers take their best shot at creating their versions of the newest Auth0 extensibility feature - Actions.\u003c/p\u003e\u003ch2 id=\"But--What-Even-Is-Actions-Anyway-\"\u003eBut, What Even Is Actions Anyway?\u003c/h2\u003e\u003cp\u003eWe are always looking for new tools and solutions that allow you to customize your identity solution. Our first extensibility tool was Auth0 Rules, serverless code blocks that can be customized to extend Auth0\u0026#39;s core capabilities. Next up was Auth0 Hooks, similar to Rules but can be executed against several extensibility points.\u003c/p\u003e\u003cp\u003eAuth0 Actions is the next evolution in our extensibility toolset. An Action is a functional service that fires after specific triggers across an identity flow; these could be events such as a post-login or client credential exchange.\u003c/p\u003e\u003ch2 id=\"Okay--so-Let-s-Get-down-to-the-Winning-Teams-and-What-They-Built\"\u003eOkay, so Let’s Get down to the Winning Teams and What They Built\u003c/h2\u003e\u003cp\u003eThe Hack kicked off Thursday morning with six developer teams.\u003c/p\u003e\u003cp\u003eAfter a roughly four-hour coding session, the teams came back to make their presentations to the judges. And the judges picked the top two winners.\u003c/p\u003e\u003ch2 id=\"Facial-Recognition-and-Vaccination-Status\"\u003eFacial Recognition and Vaccination Status\u003c/h2\u003e\u003cp\u003eSecond place was awarded to the \u003cstrong\u003eA-Team\u003c/strong\u003e, a team consisting of just one person! Augustine Correa from Mumbai utilized two Auth0 Actions: Yoonik, the Face Authentication Action found in the \u003ca href=\"https://marketplace.auth0.com/integrations/yoonik-face-authentication\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 marketplace\u003c/a\u003e, and a custom one built by the team during the Hackathon named “Vaccination Status.” This action was designed to interface with India’s COVID19 vaccination portal and verify the vaccination status of the person logging in.\u003c/p\u003e\u003cp\u003eIndia is enforcing vaccine mandates for entry to enclosed physical spaces. The A-Team’s Login Flow solution ascertains a registrant’s vaccination status and ensures the integrity of the process with a non-contact biometric authentication.\u003c/p\u003e\u003cp\u003e“For app developers, Auth0 Actions has a comforting familiarity with our current software practices,” reflected Augustin. “While we channel our efforts to code the unique functionality of our app, we incorporate packages for everything else. This assembly of components enables rapid development of high-quality software.”\u003c/p\u003e\u003ch2 id=\"Authenticate-Your-VPN-at-Login\"\u003eAuthenticate Your VPN at Login\u003c/h2\u003e\u003cp\u003eThe winners of the Auth0 Hackathon were \u003cstrong\u003eKnights of the Pass\u003c/strong\u003e, composed of Inna Shablygin, Kirill Kotyagin, Rostislav Kondratenko, and Igor Vladimirskiy. The Knights of the Pass designed an Auth0 Login flow that streamlines access to corporate resources by recognizing authorization at login for access to VPN.\u003c/p\u003e\u003cp\u003eVPN is a widely-used security tool for remote workers but often creates significant inconvenience for users and systems administrators alike, contributing to productivity and compromised security.\u003c/p\u003e\u003cp\u003eThe Knights of the Pass team created an Auth0 application for their test demo and set up a reverse proxy that restricts access to the application from the Internet (e.g., only the login page of the app is exposed). Next, they created an Auth0 action that generates one-time tickets for VPN authentication when the user is being logged in. These tickets are later verified by the RADIUS server. Lastly, their Action displays a webpage in the middle of the login process. The webpage verifies if the user is currently in the corporate network and, if not, starts the VPN client software on the user machine to connect to VPN.\u003c/p\u003e\u003cp\u003e“Companies which utilize Auth0 identity management with WWPass passwordless authentication can use Auth0 Actions to streamline access to corporate resources,” said Inna Shablygin, VP of Operations at WWPass. “Protected by corporate VPN, with extremely transparent and simple user experience, Auth0 Actions is a fantastic tool to glue different pieces of technology together.”\u003c/p\u003e\u003ch2 id=\"Want-to-Know-More-\"\u003eWant to Know More?\u003c/h2\u003e\u003cp\u003eTo learn more about \u003ca href=\"https://auth0.com/actions\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehow to use Actions\u003c/a\u003e in an Auth0 login flow, check out our \u003ca href=\"https://auth0.com/docs/actions\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edocs\u003c/a\u003e section to see how to use Actions in your customer flow.\u003c/p\u003e\u003cp\u003eIf you’ve built an Action and think you’re ready to share it as an integration, find out more in the \u003ca href=\"https://marketplace.auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Marketplace\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Developers from around the world created awesome new Actions",
      "date_published": "2021-11-04T16:01:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/how-the-jwt-profile-for-oauth-20-access-tokens-became-rfc9068/",
      "title": "From Idea to Standard: How the JWT Profile for OAuth 2.0 Access Tokens Became RFC9068",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/ZEd0TLgFgvxqdJYcSiwvg/2fd1748691bc5e16c631735e7c6ae62c/Uploaded_from_From_Idea_to_Standard__How_the_JWT_Profile_for_OAuth_2\" alt=\"OAuth\"/\u003e\u003c/p\u003e\u003cp\u003eOAuth 2 Core does not say what an access token (AT) should look like, only what it should be used for. Left to their own devices, the most important OAuth-based services and products chose to encode access tokens as JWTs. Without guidance from standards, however, they ended up producing as many incompatible variants.\u003cbr/\u003eThis article is the story of how this issue bugged me so much that I took it on myself to work with the IETF standards community to try fixing it, culminating in the publication of a new standard document describing how to encode and validate an OAuth 2.0 AT in JWT format.\u003cbr/\u003eI am taking this opportunity to give you a glimpse of how the standardization process works, but most importantly: I hope this will show you that today anyone has the power to contribute to the community.\u003c/p\u003e\u003ch2 id=\"Preamble--Why-Are-Issuers-Encoding-Access-Tokens-as-JWTs-\"\u003ePreamble: Why Are Issuers Encoding Access Tokens as JWTs?\u003c/h2\u003e\u003cp\u003eIn the first version of OAuth, the access token issuer and the resource-consuming it (service provider and the protected resource, respectively, in OAuth 1 parlance) were co-located: the consumer (old name for client) would request an access token from \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ephotos\u003cspan\u003e.\u003c/span\u003eexample\u003cspan\u003e.\u003c/span\u003enet\u003cspan\u003e/\u003c/span\u003eaccess\\_token\u003cspan\u003e?.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e and use it to access the resource at \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ephotos\u003cspan\u003e.\u003c/span\u003eexample\u003cspan\u003e.\u003c/span\u003enet\u003cspan\u003e/\u003c/span\u003ephoto\u003cspan\u003e?.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eOAuth 2 introduced better role separation, making it possible for the authorization server (AS) and resource server (RS) to live on different domains and be run by different owners. However, the scenario where AS and RS live together was still the quintessential use case, think Google issuing tokens to protect Google APIs.\u003c/p\u003e\u003cp\u003eWhen the token issuer and token consumer are essentially the same entity, validating tokens is an easy problem (see Figure 1). Say that a client asks and obtains delegated authorization to read your Google Calendar. At authorization request time, Google can write somewhere in its backend that you granted consent for that client, and return as AT the ID of the row where it recorded your preference. When the client wants to access the calendar, it just presents the AT to the API: the API turns around, looks up the ID in the DB it shares with the AS, and consults the record to decide whether to grant access. This is definitely oversimplified (and I have no insight on how google really does things, I just picked a relatable example) but should give a rough idea.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/IJRZvuawYe651McJaKsjP/92c105976b851db0c78c93ebc0cad3a7/Uploaded_from_From_Idea_to_Standard__How_the_JWT_Profile_for_OAuth_2\" alt=\"Authorization\"/\u003e\n\u003cem\u003eFigure 1: if authorization server and resource server are co-located, access tokens are easy to validate\u003c/em\u003e\u003c/p\u003e\u003cp\u003eThis trick clearly doesn’t work if the AS and RS are separate and don’t share any common state (figure 2). Just like it’s common for web apps to outsource authentication to a separate entity, it’s common for API to integrate with 3rd party services (such as IDaaS, local IdP software, etc) running elsewhere. And of course, APIs can be deployed anywhere (Lambda, Azure Functions, etc). The case in which AS and RS are separate is completely mainstream nowadays.\u003c/p\u003e\u003cp\u003eImagine you are such an API. A caller sends you a request, including an AT allegedly indicating that they should be authorized to perform that request. Strictly adhering to the core spec, the AT is just an opaque blob. How are you going to determine whether you should serve the request?\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5B0yuKwp0LC2pCHIic9gJa/325c4684cffbda80ce45df58d41064de/Uploaded_from_From_Idea_to_Standard__How_the_JWT_Profile_for_OAuth_2\" alt=\"API\"/\u003e\n\u003cem\u003eFigure 2: if the authorization server and resource server are separate and distinct entities, the API needs an explicit strategy for validating access tokens.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eAbsent the luxury of shared state with the AS, you mostly have two alternatives: calling back the AS asking for help, or trying to make that determination by looking at the AT content. Neither approach were included in the core OAuth 2 specification.\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe “calling back the AS asking for help” route is known as \u003cem\u003eintrospection\u003c/em\u003e. The idea is that your API can open a direct SSL channel with the AS, present the AT and find out whether the token is valid, what relevant information it contains/refers to, and so on.\u003cbr/\u003eThat’s a perfectly valid method, which has the advantage of immediately reflecting the revocation state of a token. It does however come with some tradeoffs: doing network IO from the API every time it gets a token is expensive, and puts network latency/failures/throttling risks on the API critical path. It’s expensive for the AS, too.\u003c/li\u003e\u003cli\u003eThe “looking at the AT content” route is just an extension of what other boundary-crossing protocols have been doing for decades. If AS and the RS/API can agree on a format for encoding ATs, and associated validation methods, the API can now independently validate the incoming AT, without depending on network performance, AS availability, throttling, and so on. This approach is extraordinarily popular, adopted by hyperscale IDaaS and nimble SDKs alike.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThat hopefully clarifies why it’s handy to use a format for ATs. Why JWT in particular? I believe that’s because most AS also implement OpenID Connect, hence already needed to use the JWT format to issue ID tokens. Same deal on the consumer side: lots of OpenID Connect SDKs relying on lower-level components implementing JWT, at the ready to be used in APIs.\u003cbr/\u003eWhatever the reason, everywhere I looked I saw products and companies issuing ATs as JWTs: and that’s where our story begins.\u003c/p\u003e\u003ch2 id=\"Framing-the-Problem--JWT--JWT-ATs-Everywhere\"\u003eFraming the Problem: JWT, JWT ATs Everywhere\u003c/h2\u003e\u003cp\u003eThroughout my years of tenure at Microsoft, I have consistently seen API calls secured using tokens in a known format, JWT in particular. I helped many product teams build features predicated on that, and hundreds of customers to achieve their goals via architectures that included encoding access tokens as JWTs. Doing so wasn’t against any standards, it just didn’t benefit from standard guidance. All the practices and implementation decisions had to be derived from the concrete experience of running solutions predicated on that approach.\u003c/p\u003e\u003cp\u003eWhen I moved to Auth0, I found the approach used to secure the customer’s API to be very similar to the one I was already used to. Two hyperscale services, handling API authorization in the same way… make you think, doesn’t it?\u003cbr/\u003eAnd yet, there were small differences- details that made reusing exactly the same SDKs to handle the two different JWT ATs impossible. For example, Azure AD placed the scopes granted to the client in a claim called scp, whereas Auth0 used a claim called scope. Exact same functionality, but incompatible formats for a pure matter of formatting. Makes you think some more! If other well-adopted vendors are using JWT to encode ATs, and are all mostly sending the same info with some minor syntactic differences, perhaps devising a common profile might be a good thing! It was a hypothesis worth investigating.\u003c/p\u003e\u003cp\u003eIn March 2019 I reached out to friends and contacts working at key providers I knew were using JWT as AT format. I explained my hypothesis and asked if they’d share with me sample ATs.\u003c/p\u003e\u003cp\u003eI got answers and samples from Dominick Baier (IdentityServer), Brian Campbell (PingIdentity), Daniel Dobalian (Microsoft), Karl McGuinness (Okta- this was years before the merger news) and I of course sourced Auth0 ATs myself. For good measure, I threw in JWT ATs from AWS as extracted from their public documentation.\u003c/p\u003e\u003cp\u003ePutting all the AT claims in a table, I found more similarities than differences.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/KtfrSGPakBBawFDXtV4p8/123efc182d522ca0783c0e0432308a7c/Uploaded_from_From_Idea_to_Standard__How_the_JWT_Profile_for_OAuth_2\" alt=\"Table\"/\u003e\u003c/p\u003e\u003cp\u003eI found that the claims could be roughly classified into 4 categories:\u003c/p\u003e\u003cul\u003e\u003cli\u003eValidation. Structural claims used to validate the token, largely echoing the ones defined by OpenID Connect for IDTokens\u003c/li\u003e\u003cli\u003eIdentity. Contrary to popular belief, which insists on ATs being exclusively (delegated) authorization constructs, nearly everyone included identity attributes (and the one instance who didn’t, allowed them as optional)\u003c/li\u003e\u003cli\u003eAuthorization. Besides the scope claim, present in all samples albeit in varying formats, various providers allowed the inclusion of other classic authorization artifacts (groups, roles)\u003c/li\u003e\u003cli\u003eContext/misc. A loose category carrying miscellaneous information, with some common elements like client identifiers and authentication methods info.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis further confirmed my hypothesis that everyone was roughly pursuing the same goals and using the same attributes, but just happened to use a different syntax for pure happenstance.\u003c/p\u003e\u003cp\u003eTo me that was interesting evidence that deserved being shared with the OAuth community. Luckily, there was just the right forum coming up: the OAuth Security Workshop.\u003c/p\u003e\u003ch2 id=\"Probing-Interest--the-Stuttgart-Pitch\"\u003eProbing Interest: the Stuttgart Pitch\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5abeLJalBQD6VdWUsuwmfZ/e3fcb24b09fb6c097604dec414986afd/Uploaded_from_From_Idea_to_Standard__How_the_JWT_Profile_for_OAuth_2\" alt=\"Stuttgart Pitch\"/\u003e\u003c/p\u003e\u003cp\u003eIn late March 2019, I flew to Stuttgart, Germany, to attend the OAuth Security Workshop. It is a fantastic conference, a watering hole toward which the most brilliant (and generous) experts in the OAuth community converge once a year. That made it the absolute ideal place and time to explore whether others saw the problem and the opportunity.\u003c/p\u003e\u003cp\u003eI grabbed a one-hour slot and presented my research. You can still find the deck I used \u003ca href=\"https://osw2019.sec.uni-stuttgart.de/documents/slides/bertocci_-_a_jwt_profile_for_ats.pptx\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003cbr/\u003eI got a lot of nodding, the room definitely already knew what I was talking about: the data I presented was consistent with their experience. I did one more session on the topic, this time focusing on what an interop profile could look like, and got tons of enthusiastic contributions to it. \u003ca href=\"https://twitter.com/tlodderstedt/status/1109118437006196737?s=20\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eThe interest was there\u003c/a\u003e: it was time to get serious about starting formal work on the problem.\u003cbr/\u003eThe IETF was going to meet just a few days later for IETF104: the OAuth chairs were open to let me put this in front of the working group via remote presentation, but in order to do that I had to jot down my proposal as an \u0026#34;individual draft\u0026#34; (see below). That’s where I started to realize just how much process I was going to have to deal with!\u003c/p\u003e\u003ch2 id=\"From-Individual-Draft-to-Working-Group-Adoption--IETF-104\"\u003eFrom Individual Draft to Working Group Adoption: IETF 104\u003c/h2\u003e\u003cp\u003eHave you ever seen an RFC? They live at addresses like \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc9068\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://datatracker.ietf.org/doc/html/rfc9068\u003c/a\u003e and have a characteristic look (tho they can be visualized in many formats).\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2oWuv172MyYRrXqkrGlDMK/da9b0705fd051e6485bba5934692fd5c/Uploaded_from_From_Idea_to_Standard__How_the_JWT_Profile_for_OAuth_2\" alt=\"RFC\"/\u003e\u003c/p\u003e\u003cp\u003eAs it turns out, documents that eventually become RFCs usually start their life as an \u003cem\u003eindividual draft\u003c/em\u003e, containing an initial proposal of an author on how to tackle something that, in the author’s opinion, deserves to become formal guidance. That is a document that must be authored in a very specific format and must be submitted using the tooling and processes that the IETF provides (and enforces). The result is something that looks very similar to an RFC, as it looks the same and lives on the IETF pages, but that at this stage has \u003cem\u003eno formal weight whatsoever\u003c/em\u003e. For a funny example, \u003ca href=\"https://datatracker.ietf.org/doc/html/draft-abr-twitter-reply-00\" target=\"_blank\" rel=\"noreferrer noopener\"\u003echeck this out\u003c/a\u003e (and \u003ca href=\"https://datatracker.ietf.org/doc/html/draft-wkumari-not-a-draft-14\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis one\u003c/a\u003e, too).\u003c/p\u003e\u003cp\u003eNonetheless, an individual draft was what I had to produce in order to even suggest the idea to the IETF meeting. I had to do it FAST, likely while on the plane back from Germany. And I had to do it right, given that anything incorrectly formatted would have been rejected by the uploading tools.\u003c/p\u003e\u003cp\u003eI took a look at the official guidance \u003ca href=\"https://www.ietf.org/standards/ids/guidelines/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e, and it was just overwhelming. Luckily, the identity community is full of good people who are generous with their time. My good friend Brian Campbell was incredibly helpful, leading me through the labyrinth of tools, options, and templates, helping me to troubleshoot when things broke down, and in general, making it possible for me to produce a draft on time for the presentation.\u003c/p\u003e\u003cp\u003eAs is the case for all things IETF, where the story of everything is pretty much always available, you can still find that first individual draft at \u003ca href=\"https://datatracker.ietf.org/doc/html/draft-bertocci-oauth-access-token-jwt\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://datatracker.ietf.org/doc/html/draft-bertocci-oauth-access-token-jwt\u003c/a\u003e. At that point that was just my own thoughts, not reflecting any working group discussion. A true individual draft. The secret to recognizing those is to look at the name of the file. If it’s of the form draft-\u0026lt; lastname \u0026gt;-*, it’s just the opinion of the author- nothing more.\u003c/p\u003e\u003cp\u003eOnce I uploaded the draft, an automated mail informed the OAuth WG mailing list of its existence and location. Shortly after, I gave my presentation at the IETF104 conference: you can find the rather terse minutes \u003ca href=\"https://datatracker.ietf.org/doc/minutes-104-oauth/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e. It was well-received there, too, but the real test came a few days after the conference. The working group chairs sent a message to the mailing list, issuing what is known as a call for adoption: the group members are asked to share whether they accept or object to the adoption of the draft document as a starting point for work in the OAuth working group. To my delight, the support for the adoption was strong- no one objected, and \u003ca href=\"https://twitter.com/vibronet/status/1120382180029423616?s=20\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe motion passed\u003c/a\u003e. I re-submitted the draft, which changed into \u003ca href=\"https://datatracker.ietf.org/doc/html/draft-ietf-oauth-access-token-jwt-00\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://datatracker.ietf.org/doc/html/draft-\u003cstrong\u003eietf\u003c/strong\u003e-oauth-access-token-jwt-00\u003c/a\u003e. That’s another stage of our pokemon here: from the individual draft, the document turned into an \u003cstrong\u003e\u003cem\u003einternet\u003c/em\u003e draft\u003c/strong\u003e. When you see a document whose name is in the form draft-ietf-*[-\u0026lt; digits \u0026gt;], you know it’s a document that is being worked on by a working group. That is NOT yet a standard, it is still very likely to change, but already received some degree of scrutiny (at the very least, it successfully went through a call for adoption as a work item).\u003c/p\u003e\u003cp\u003eThat was when the REAL fun began.\u003c/p\u003e\u003ch2 id=\"The-Working-Group-Discussion\"\u003eThe Working Group Discussion\u003c/h2\u003e\u003cp\u003eThe raison d’etre of this work was that one important area of OAuth was left underspecified, so I was strongly motivated to swing the pendulum in the other direction and generate truly actionable guidance that would help developers achieve an end to end interop in no uncertain terms. That meant going beyond just defining the layout of an AT encoded as a JWT, but also defining how the authorization server should take request parameters into account when populating ATs, and providing clear guidance about how resource servers should validate JWT ATs. On top of that, there were years of lessons learned in terms of security and privacy practices that had to be codified in the spec recommendations. All noble goals! As I was about to discover, however, the cost of consensus doesn’t grow linearly with the amount of stuff a group needs to agree on: if it’s not exponential, it’s pretty darn close.\u003c/p\u003e\u003cp\u003eI contributed to the discussion on the working group many times before, but this was the first time I felt responsible to ensure things moved forward and in the right way. No more \u003ca href=\"https://en.wikipedia.org/wiki/Bystander_effect\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ebystander effect\u003c/a\u003e!\u003c/p\u003e\u003cp\u003eI don’t want to bore you with a detailed chronicle of how the discussion went, but just give you a feel of what the process looks like. In broad strokes, it was something along the lines of\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eSend to the mailing list a writeup about some detail of the document, proposing something or seeking opinions: whether a certain claim should be optional or mandatory, whether a certain recommendation should be included in the security considerations, and so on. At times, someone else will do this- asking a question about the document, sharing an opinion.\u003c/li\u003e\u003cli\u003eActively engage in the discussion, soliciting points of view, asking for clarifications, summarizing to steer toward consensus or uncover remaining disagreements, spawn separate threads when necessary, facilitate closure when things don’t seem to converge on their own\u003c/li\u003e\u003cli\u003eReflect the outcome of the conversations in the draft and upload new versions\u003c/li\u003e\u003cli\u003eAt key milestones (IETF F2F events, conferences, etc) present to the group in high bandwidth settings, bringing up issues that are hard to close in email form\u003c/li\u003e\u003cli\u003eRepeat as many times as it is necessary to reach a form that enjoys widespread consensus, no longer generates disagreements\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eI found all of the above a challenging, humbling, and profoundly formative experience.\u003c/p\u003e\u003cp\u003eOne of the most important lessons I got was that I didn\u0026#39;t know nearly as much as I thought on the topic. After years of hands-on experience using JWT ATs with many customers in the most diverse circumstances, I thought the bulk of the work was going to be putting down that experience in spec form. Goodness was I wrong. I think I did supply a solid starting point, but I was absolutely blown away by the diversity of viewpoints, goals, scenarios, and ways to look at the problem that were just as valid and backed by concrete experience as mine. The working group sports some really, really smart members. Luckily I was fully committed to identifying the right guidance and channel consensus rather than “being right”, so I genuinely enjoyed learning those things - even when they required some reframing.\u003c/p\u003e\u003cp\u003eExtracting the insight was not always easy. Not everyone follows the discussion closely (we all have day jobs) so it wasn’t uncommon for someone to comment on something that has been already discussed, often presenting the same arguments - to which I had to either summarize the outcome of the discussion and/or provide pointers to the relevant threads in the mail archive, hoping they would read it before diving further. Of course that occasionally caused people unsatisfied with the outcome of the former discussion to give it another shot, relitigating issues large and small in what at times felt like a Sisyphean task. I remember the chill in my spine when during the QA of my presentation at an in-person IETF meeting, someone walked up to the microphone and opened with “I didn’t read the specification or follow the discussion, but here there’s my take on this…” :D that caused an avalanche of comments along those lines, largely repeating a discussion that already occurred on the mailing list, and ate all the precious face time I had. ARGH :D\u003c/p\u003e\u003cp\u003eFor a while, it looked like most of the work was on tracking down, digesting, and curating context and content to ensure that the opinions being shared were well informed rather than the result of incomplete understanding. Throw in the mix the occasional individual pursuing their own agenda regardless of what spec is being discussed, and you get the picture. Ultimately, things always worked out in a way or another- but it was HARD. I admit that for a while seeing new messages appear in the OAUTH WG folder in my inbox caused me little anxiety spikes :’)\u003c/p\u003e\u003cp\u003eBut, as I said- formative experience. I developed a stoic stance toward the endeavor, resolving to do my best without expecting fast progress. There was incredible insight being shared in the discussion, and even if the process felt at times painful, I had faith in its ability to eventually distill the collective wisdom.\u003c/p\u003e\u003ch2 id=\"The-Last-Stretch--Last-Calls--IESG--RFC-Editor\"\u003eThe Last Stretch: Last Calls, IESG, RFC Editor\u003c/h2\u003e\u003ch3 id=\"Working-Group-Last-Call-s-\"\u003eWorking Group Last Call(s)\u003c/h3\u003e\u003cp\u003eAt a certain point in the process, the working group chairs establish that the draft is close enough to completion, and issue what it’s known as a working group last call (WGLC): it basically says that if by a certain date no one had anything of substance to discuss, the draft will move to the next stage. My spec went through not one, but THREE WGLCs.\u003c/p\u003e\u003cp\u003eThe first one, issued on March 23, 2020, and ending on April 6, 2020, generated LOTS of comments from many people, on fundamental matters.\u003c/p\u003e\u003cp\u003eThe second, from 4/15 to 4/29, got less substantive traffic but still useful observations. It also got WAY more drama than I would have ever expected to witness in the process of developing a standard, but there’s no point rehashing any of that here. The mailing list records are public, and you can always catch me at some conference to get a TL;DR- especially if I have an adult beverage in my hands.\u003c/p\u003e\u003cp\u003eThe third one, from 5/5 to 5/12, was meant to be the last, last… but in fact, the next stage didn’t really start in earnest until \u003ca href=\"https://twitter.com/dzhuvi/status/1354101508187578368?s=21\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJanuary 2021\u003c/a\u003e.\u003c/p\u003e\u003ch3 id=\"The-IESG\"\u003eThe IESG\u003c/h3\u003e\u003cp\u003eThe next stage is a review from the IESG, a group of experts (area directors) with scope beyond OAuth that will give very detailed commentary and formally vote whether to move the doc forward or if they need to get further clarifications.\u003c/p\u003e\u003cp\u003eIn order to pass the buck to IESG, the working group chair has to produce a “shepherd writeup”- basically a backgrounder preempting a fixed series of questions about the specification, from the standard track the document is in, to whether all the intellectual properties considerations have been cleared. Mine was authored and submitted in October 2020 by the always excellent Hannes Tschofenig, you can find it \u003ca href=\"https://datatracker.ietf.org/doc/draft-ietf-oauth-access-token-jwt/shepherdwriteup/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eOne particularly interesting aspect the shepherd writeup needs to cover is whether there are already implementations of the draft in actual products- I was delighted to discover that there were already FOUR products offering support for the profile! There was \u003ca href=\"https://leastprivilege.com/2020/06/15/the-jwt-profile-for-oauth-2-0-access-tokens-and-identityserver/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eIdentityServer\u003c/a\u003e, Filip Skokan’s Node \u003ca href=\"https://github.com/panva/node-oidc-provider\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOIDC library\u003c/a\u003e, \u003ca href=\"https://connect2id.com/products/server/docs/datasheet#access-token-encoding-jwt\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eConnectID\u003c/a\u003e, \u003ca href=\"https://github.com/babelouest/glewlwyd/blob/master/docs/OIDC.md#access-token-format\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGlewlwyd OIDC plugin\u003c/a\u003e... That placed a huge smile on my face.\u003c/p\u003e\u003cp\u003eThe \u003ca href=\"https://twitter.com/oauth_2/status/1432731166440759301?s=20\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eIESG review went very smoothly\u003c/a\u003e. As expected, some of the questions were repeats of things already discussed; others were brand new, and very insightful. And there were LOTS of them, it was a thorough combing. What made it go smoothly was that every reviewer was familiar with the process, paid very close attention to the replies, and relentlessly drove toward resolution. I was pretty worried about that phase, but it turned out to be one of the best parts of this experience.\u003c/p\u003e\u003ch3 id=\"RFC-Editor-and-Publication\"\u003eRFC Editor and Publication\u003c/h3\u003e\u003cp\u003eAfter their approval, the last stage (I am skipping some stuff here, notably the IANA parts pertaining to the registration of new media and claim types the spec defines) was the RFC editor- an extraordinarily thorough editorial review, for some reason (and confusingly, for identity people) called AUTH48, where the author is asked to review every proposed edit (all good edits that enhance clarity). Once that’s done, the document receives a number and becomes an official IETF standard, assuming the characteristic \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc9068\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://datatracker.ietf.org/doc/html/rfc9068\u003c/a\u003e form.\u003c/p\u003e\u003cp\u003eThe publication happened during the AuthenticateCon/FIDO plenary conference - that made me miss the magical window for tweeting about it (\u003ca href=\"https://twitter.com/selfissued/status/1451352723853504514?s=21\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMike did the honors\u003c/a\u003e) but it also created the awesome opportunity to \u003ca href=\"https://twitter.com/vibronet/status/1451406207206375424?s=20\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecelebrate on that very evening\u003c/a\u003e with many of my identity friends, also in town for the conference.\u003c/p\u003e\u003ch2 id=\"Where-to-Go-from-Here\"\u003eWhere to Go from Here\u003c/h2\u003e\u003cp\u003eOur brief tour de force showed us how it really is possible to go from an idea, a pet peeve to an official standard. Even better, if you exclude the time I and the other WG members offered when working on this, and the occasional trip to in-person IETF events, this was substantially free - no hefty corporate membership required. The rational question you should ask, dear reader, is: was it worth it?\u003c/p\u003e\u003cp\u003eAfter all this brouhaha to make the JWT profile a standard, everyone’s going to drop what they’re doing and change their existing JWT encoding logic for ATs to comply with the profile, right? ...right?\u003c/p\u003e\u003cp\u003eNot likely. What companies have today, my starting point, already works for their scenarios. Moreover, their customers are taking at least some degree of dependency on it. The incentive for a wholesale swap isn’t strong. But frankly, it was never the main point of standardizing this. Describing what a JWT AT would look like in the platonic ideal scenario gave the working group a chance to provide guidance on the security and privacy implications of using a JWT (and, more generally, a parseable format) for encoding ATs. That’s guidance that can be successfully applied to existing solutions, without having to fully commit to the profile in its entirety. Furthermore, the profile provides an authoritative reference for important functionality ATs are expected to perform: if all existing implementations pick up from rfc9068 is what claim type and format to use to transmit scopes, opening the way for SDKs to offer scope based policies reliably applicable to multiple vendors, that alone would be worth the effort of pushing this heavy boulder to completion.\u003cbr/\u003eAnd of course, new SDK work will hopefully build on the guidance. There are already products supporting the profile: besides the four products I listed earlier in this post, Auth0’s very own Node JS API middleware offers a strict option that will enforce the profile.\u003c/p\u003e\u003cp\u003eTo me, that makes all the effort absolutely worth it. The process might be at times frustrating, maddeningly slow… but it is open, thorough, and effective. It’s not perfect and it doesn’t yield perfect results, but it’s pretty much the best we have today. I feel grateful to have had (and have) the chance to contribute. I am constantly amazed at the generosity of so many world-class identity experts freely offering their insights: besides the chance of steering the community in the right direction, all they can hope for is an entry in the spec’s acknowledgment section, with a non zero chance to have their names misspelled.\u003c/p\u003e\u003cp\u003eI hope this was more inspiring than discouraging. If you are interested in contributing to the IETF standards work, please always feel free to reach out at \u003ca href=\"https://twitter.com/vibronet\" target=\"_blank\" rel=\"noreferrer noopener\"\u003etwitter.com/vibronet\u003c/a\u003e: I received so much help that I don’t think I’ll ever be able to pay it back. Your experience and scenarios are important, and I assure you many people are eager to hear about them!\u003c/p\u003e\u003cp\u003e\u003cem\u003eThanks to Aaron Parecki for his thorough review and feedback on this article!\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "A first-person account of how modern open identity standards are made",
      "date_published": "2021-11-04T15:25:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/full-stack-java-with-react-spring-boot-and-jhipster/",
      "title": "Full Stack Java with React, Spring Boot, and JHipster",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIf you search for \u0026#34;Full Stack Java\u0026#34; on the internet, you\u0026#39;ll likely find a lot of recruiting, courses, and jobs. Being a full-stack developer can be exciting because you can create the backend and frontend of an app all by yourself. There is business logic and algorithms as well as like styling, making things look good, and securing everything. It also pays pretty well. Today, I\u0026#39;m going to show you how you can be a full-stack Java developer with Spring Boot, React, and JHipster.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ePrerequisites:\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNode.js 14+\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://sdkman.io\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJava 11+\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDocker Compose\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIf you\u0026#39;re on Windows, you may need to install the \u003ca href=\"https://docs.microsoft.com/en-us/windows/wsl/about\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eWindows Subsystem for Linux\u003c/a\u003e for some commands to work.\u003c/p\u003e\u003cp\u003eI recommend using SDKMAN to manage your OpenJDK installations. Just run \u003ccode\u003esdk install java \u003cspan\u003e11.0\u003c/span\u003e\u003cspan\u003e.2\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eopen\u003c/code\u003e to install Java 11 and \u003ccode\u003esdk install java \u003cspan\u003e17\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eopen\u003c/code\u003e for Java 17.\u003c/p\u003e\u003cp\u003eThis tutorial won\u0026#39;t provide the nitty-gritty details on how to write code in Java, React, or Spring Boot. That\u0026#39;s because JHipster will write most of the code for you! However, if you\u0026#39;re brand new to programming with these technologies, I recommend the following resources:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://dev.java/learn/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOracle\u0026#39;s Learn Java Tutorials\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://spring.io/guides\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring Guides\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://reactjs.org/tutorial/tutorial.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eTutorial: Intro to React\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou can skip around between sections of this tutorial using the table of contents below. \u003c/p\u003e\u003cp\u003eYou can also clone \u003ca href=\"https://github.com/oktadev/auth0-full-stack-java-example\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe completed example\u003c/a\u003e and follow along that way.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003egit clone https\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003egithub\u003cspan\u003e.\u003c/span\u003ecom\u003cspan\u003e/\u003c/span\u003eoktadev\u003cspan\u003e/\u003c/span\u003eauth0\u003cspan\u003e-\u003c/span\u003efull\u003cspan\u003e-\u003c/span\u003estack\u003cspan\u003e-\u003c/span\u003ejava\u003cspan\u003e-\u003c/span\u003eexample\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Full-Stack-Development-with-React-and-Spring-Boot\"\u003eFull Stack Development with React and Spring Boot\u003c/h2\u003e\u003cp\u003eOne of the easiest ways to get started with React is by using \u003ca href=\"https://create-react-app.dev/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCreate React App\u003c/a\u003e (CRA). You install it locally, then run \u003ccode\u003ecreate\u003cspan\u003e-\u003c/span\u003ereact\u003cspan\u003e-\u003c/span\u003eapp \u003cspan\u003e\u0026lt;\u003c/span\u003eproject\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e to generate a React application with minimal dependencies. It uses webpack under-the-covers to build the project, launch a web server, and run its tests.\u003c/p\u003e\u003cp\u003eSpring Boot has a similar tool called \u003ca href=\"https://start.spring.io/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring Initializr\u003c/a\u003e. Spring Initializer is a bit different than CRA because it\u0026#39;s a website (and API) that you can create applications with.\u003c/p\u003e\u003cp\u003eToday, I\u0026#39;ll show you how to build a Flickr clone with React and Spring Boot. However, I\u0026#39;m going to cheat. Rather than building everything using the aforementioned tools, I\u0026#39;m going to use JHipster. JHipster is an application generator that initially only supported Angular and Spring Boot. Now it supports Angular, React, and Vue for the frontend. JHipster also has support for \u003ca href=\"https://www.jhipster.tech/modules/official-blueprints/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eKotlin, Micronaut, Quarkus, .NET, and Node.js\u003c/a\u003e on the backend.\u003c/p\u003e\u003cp\u003eIn this tutorial, we\u0026#39;ll use React since it seems to be \u003ca href=\"https://trends.google.com/trends/explore?q=angular,react,vuejs\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe most popular\u003c/a\u003e frontend framework nowadays. \u003c/p\u003e\u003ch2 id=\"Get-Started-with-JHipster-7\"\u003eGet Started with JHipster 7\u003c/h2\u003e\u003cp\u003eIf you haven\u0026#39;t heard of \u003ca href=\"https://www.jhipster.tech\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJHipster\u003c/a\u003e, boy do I have a treat for you! JHipster started as a Yeoman application generator back in 2013 and has grown to become a development platform. It allows you to quickly generate, develop, and deploy modern web apps and microservice architectures. Today, I\u0026#39;ll show you how to build a Flickr clone with JHipster and lock it down with OAuth and OpenID Connect (OIDC).\u003c/p\u003e\u003cp\u003eTo get started with JHipster, you\u0026#39;ll need a fast internet connection and Node.js installed. The project recommends you use the latest LTS (Long Term Support) version, which is 14.7.6 at the time of this writing. To run the app, you\u0026#39;ll need to have Java 11 installed. If you have Git installed, JHipster will auto-commit your project after creating it. This will allow you to upgrade between versions.\u003c/p\u003e\u003cp\u003eRun the following command to install JHipster:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003enpm\u003c/span\u003e i -g generator-jhipster@7\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo create a full-stack app with JHipster, create a directory, and run \u003ccode\u003ejhipster\u003c/code\u003e in it:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003emkdir\u003c/span\u003e full-stack-java\n\u003cspan\u003ecd\u003c/span\u003e full-stack-java\njhipster\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eJHipster will prompt you for the type of application to create and what technologies you\u0026#39;d like to include. For this tutorial, make the following choices:\u003c/p\u003e\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth\u003eQuestion\u003c/th\u003e\u003cth\u003eAnswer\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003eType of application?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eMonolithic application\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eName?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eflickr2\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eSpring WebFlux?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eNo\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eJava package name?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ecom\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eflickr2\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eType of authentication?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eOAuth \u003cspan\u003e2.0\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e \u003cspan\u003eOIDC\u003c/span\u003e\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eType of database?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003e\u003cspan\u003eSQL\u003c/span\u003e\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eProduction database?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ePostgreSQL\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eDevelopment database?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003e\u003cspan\u003eH2\u003c/span\u003e \u003cspan\u003ewith\u003c/span\u003e disk\u003cspan\u003e-\u003c/span\u003ebased persistence\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eWhich cache?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eEhcache\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eUse Hibernate 2nd level cache?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eYes\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eMaven or Gradle?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eMaven\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eUse the JHipster Registry?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eNo\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eOther technologies?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eblank\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eClient framework?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eReact\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eAdmin UI?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eYes\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eBootswatch theme?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eUnited\u003c/code\u003e \u0026gt; \u003ccode\u003eDark\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eEnable i18n?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eYes\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eNative language of application?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eEnglish\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eAdditional languages?\u003c/td\u003e\u003ctd\u003eYour choice!\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eAdditional testing frameworks?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eCypress\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eInstall other generators?\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eNo\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003cp\u003ePress \u003cstrong\u003eEnter\u003c/strong\u003e, and JHipster will create your app in the current directory and run \u003ccode\u003enpm install\u003c/code\u003e to install all the dependencies specified in \u003ccode\u003e\u003cspan\u003epackage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e.\u003c/p\u003e\u003ch3 id=\"Verify-Everything-Works-with-Cypress-and-Keycloak\"\u003eVerify Everything Works with Cypress and Keycloak\u003c/h3\u003e\u003cp\u003eWhen you choose OAuth 2.0 and OIDC for authentication, the users are stored outside of the application rather than in it. You need to configure an identity provider (IdP) to store your users and allow your app to retrieve information about them. By default, JHipster ships with a Keycloak file for Docker Compose. A default set of users and groups is imported at startup, and it has a client registered for your JHipster app.\u003c/p\u003e\u003cp\u003eHere\u0026#39;s what the \u003ccode\u003ekeycloak\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e looks like in your app\u0026#39;s \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003emain\u003cspan\u003e/\u003c/span\u003edocker\u003c/code\u003e directory:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# This configuration is intended for development purpose; it\u0026#39;s **your** responsibility\u003c/span\u003e\n\u003cspan\u003e# to harden it for production\u003c/span\u003e\n\u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;3.8\u0026#39;\u003c/span\u003e\n\u003cspan\u003eservices\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003ekeycloak\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003eimage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e jboss/keycloak\u003cspan\u003e:\u003c/span\u003e15.0.2\n    \u003cspan\u003ecommand\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003e[\u003c/span\u003e\n          \u003cspan\u003e\u0026#39;-b\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e\u0026#39;0.0.0.0\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e\u0026#39;-Dkeycloak.migration.action=import\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e\u0026#39;-Dkeycloak.migration.provider=dir\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e\u0026#39;-Dkeycloak.migration.dir=/opt/jboss/keycloak/realm-config\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e\u0026#39;-Dkeycloak.migration.strategy=OVERWRITE_EXISTING\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e\u0026#39;-Djboss.socket.binding.port-offset=1000\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e\u0026#39;-Dkeycloak.profile.feature.upload_scripts=enabled\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003evolumes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003e-\u003c/span\u003e ./realm\u003cspan\u003e-\u003c/span\u003econfig\u003cspan\u003e:\u003c/span\u003e/opt/jboss/keycloak/realm\u003cspan\u003e-\u003c/span\u003econfig\n    \u003cspan\u003eenvironment\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003e-\u003c/span\u003e KEYCLOAK_USER=admin\n      \u003cspan\u003e-\u003c/span\u003e KEYCLOAK_PASSWORD=admin\n      \u003cspan\u003e-\u003c/span\u003e DB_VENDOR=h2\n    \u003cspan\u003e# If you want to expose these ports outside your dev PC,\u003c/span\u003e\n    \u003cspan\u003e# remove the \u0026#34;127.0.0.1:\u0026#34; prefix\u003c/span\u003e\n    \u003cspan\u003eports\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003e-\u003c/span\u003e 127.0.0.1\u003cspan\u003e:\u003c/span\u003e9080\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e9080\u003c/span\u003e\n      \u003cspan\u003e-\u003c/span\u003e 127.0.0.1\u003cspan\u003e:\u003c/span\u003e9443\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e9443\u003c/span\u003e\n      \u003cspan\u003e-\u003c/span\u003e 127.0.0.1\u003cspan\u003e:\u003c/span\u003e10990\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e10990\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eStart Keycloak with the following command in your project\u0026#39;s root directory.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edocker-compose -f src/main/docker/keycloak.yml up -d\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can verify everything works by starting your app with Maven:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e./mvnw\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOpen another terminal to run your new app\u0026#39;s Cypress tests:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003enpm\u003c/span\u003e run e2e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou should see output like the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e  \u003cspan\u003e(\u003c/span\u003eRun Finished\u003cspan\u003e)\u003c/span\u003e\n\n       Spec                                              Tests  Passing  Failing  Pending  Skipped\n  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐\n  │ ✔  administration/administration.spec.      00:12        \u003cspan\u003e5\u003c/span\u003e        \u003cspan\u003e5\u003c/span\u003e        -        -        - │\n  │    ts                                                                                          │\n  └────────────────────────────────────────────────────────────────────────────────────────────────┘\n    ✔  All specs passed\u003cspan\u003e!\u003c/span\u003e                        00:12        \u003cspan\u003e5\u003c/span\u003e        \u003cspan\u003e5\u003c/span\u003e        -        -        -\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Change-Your-Identity-Provider-to-Auth0\"\u003eChange Your Identity Provider to Auth0\u003c/h2\u003e\u003cp\u003eJHipster uses Spring Security\u0026#39;s OAuth 2.0 and OIDC support to configure which IdP it uses. When using Spring Security with Spring Boot, you can configure most settings in a properties file. You can even override properties with environment variables.\u003c/p\u003e\u003cp\u003eTo switch from Keycloak to Auth0, you only need to override the default properties (for Spring Security OAuth). You don\u0026#39;t even need to write any code!\u003c/p\u003e\u003cp\u003eTo see how it works, create a \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eenv\u003c/code\u003e file in the root of your project, and fill it with the code below to override the default OIDC settings:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eSPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003ehttps://\u003cspan\u003e\u0026lt;\u003c/span\u003eyour-auth0-domain\u003cspan\u003e\u0026gt;\u003c/span\u003e/\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eSPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eyour-client-id\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eSPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eyour-client-secret\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eJHIPSTER_SECURITY_OAUTH2_AUDIENCE\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003ehttps://\u003cspan\u003e\u0026lt;\u003c/span\u003eyour-auth0-domain\u003cspan\u003e\u0026gt;\u003c/span\u003e/api/v2/\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e⚠️ \u003cstrong\u003eWARNING:\u003c/strong\u003e Modify your existing \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003egitignore\u003c/code\u003e file to have \u003ccode\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eenv\u003c/code\u003e so you don\u0026#39;t accidentally check in your secrets!\u003c/p\u003e\u003cp\u003eYou\u0026#39;ll need to create a new web application in Auth0 and fill in the \u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e...\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e placeholders before this works. \u003c/p\u003e\u003ch3 id=\"Create-an-OpenID-Connect-App-on-Auth0\"\u003eCreate an OpenID Connect App on Auth0\u003c/h3\u003e\u003cp\u003eLog in to your Auth0 account (or \u003ca href=\"https://auth0.com/signup\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esign up\u003c/a\u003e if you don\u0026#39;t have an account). You should have a unique domain like \u003ccode\u003edev\u003cspan\u003e-\u003c/span\u003exxx\u003cspan\u003e.\u003c/span\u003eeu\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003ecom\u003c/code\u003e. \u003c/p\u003e\u003cp\u003ePress the \u003cstrong\u003eCreate Application\u003c/strong\u003e button in \u003ca href=\"https://manage.auth0.com/#/applications\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eApplications section\u003c/a\u003e. Use a name like \u003ccode\u003eJHipster Baby\u003cspan\u003e!\u003c/span\u003e\u003c/code\u003e, select \u003ccode\u003eRegular Web Applications\u003c/code\u003e, and click \u003cstrong\u003eCreate\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eSwitch to the \u003cstrong\u003eSettings\u003c/strong\u003e tab and configure your application settings:\u003c/p\u003e\u003cul\u003e\u003cli\u003eAllowed Callback URLs: \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elogin\u003cspan\u003e/\u003c/span\u003eoauth2\u003cspan\u003e/\u003c/span\u003ecode\u003cspan\u003e/\u003c/span\u003eoidc\u003c/code\u003e\u003c/li\u003e\u003cli\u003eAllowed Logout URLs: \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003elocalhost:8080\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eScroll to the bottom and click \u003cstrong\u003eSave Changes\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eIn the \u003ca href=\"https://manage.auth0.com/#/roles\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eroles\u003c/a\u003e section, create new roles named \u003ccode\u003e\u003cspan\u003eROLE_ADMIN\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003eROLE_USER\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eCreate a new user account in the \u003ca href=\"https://manage.auth0.com/#/users\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eusers\u003c/a\u003e section. Click on the \u003cstrong\u003eRole\u003c/strong\u003e tab to assign the roles you just created to the new account. \u003c/p\u003e\u003cp\u003e\u003cem\u003eMake sure your new user\u0026#39;s email is verified before attempting to log in!\u003c/em\u003e\u003c/p\u003e\u003cp\u003eNext, head to \u003cstrong\u003eAuth Pipeline\u003c/strong\u003e \u0026gt; \u003cstrong\u003eRules\u003c/strong\u003e \u0026gt; \u003cstrong\u003eCreate\u003c/strong\u003e. Select the \u003ccode\u003eEmpty rule\u003c/code\u003e template. Provide a meaningful name like \u003ccode\u003eGroup claims\u003c/code\u003e and replace the Script content with the following.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser\u003cspan\u003e,\u003c/span\u003e context\u003cspan\u003e,\u003c/span\u003e callback\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  user\u003cspan\u003e.\u003c/span\u003epreferred_username \u003cspan\u003e=\u003c/span\u003e user\u003cspan\u003e.\u003c/span\u003eemail\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e roles \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eauthorization \u003cspan\u003e||\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eroles\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eprepareCustomClaimKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eclaim\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003ehttps://www.jhipster.tech/\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003eclaim\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003econst\u003c/span\u003e rolesClaim \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eprepareCustomClaimKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;roles\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eidToken\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    context\u003cspan\u003e.\u003c/span\u003eidToken\u003cspan\u003e[\u003c/span\u003erolesClaim\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e roles\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    context\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e[\u003c/span\u003erolesClaim\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e roles\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e user\u003cspan\u003e,\u003c/span\u003e context\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis code is adding the user\u0026#39;s roles to a custom claim (prefixed with \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ewww\u003cspan\u003e.\u003c/span\u003ejhipster\u003cspan\u003e.\u003c/span\u003etech\u003cspan\u003e/\u003c/span\u003eroles\u003c/code\u003e). This claim is mapped to Spring Security authorities in \u003ccode\u003eSecurityUtils\u003cspan\u003e.\u003c/span\u003ejava\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003eList\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGrantedAuthority\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eextractAuthorityFromClaims\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eMap\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e claims\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003emapRolesToGrantedAuthorities\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetRolesFromClaims\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eclaims\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e@SuppressWarnings\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;unchecked\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003eCollection\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003egetRolesFromClaims\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eMap\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e claims\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eCollection\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e claims\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetOrDefault\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;groups\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        claims\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetOrDefault\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;roles\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e claims\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetOrDefault\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eCLAIMS_NAMESPACE \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e\u0026#34;roles\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eArrayList\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003eList\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGrantedAuthority\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003emapRolesToGrantedAuthorities\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eCollection\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e roles\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e roles\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estream\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003erole \u003cspan\u003e-\u0026gt;\u003c/span\u003e role\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estartsWith\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;ROLE_\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eSimpleGrantedAuthority\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecollect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eCollectors\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoList\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003eSecurityConfiguration\u003cspan\u003e.\u003c/span\u003ejava\u003c/code\u003e class has a bean that calls this method to configure a user\u0026#39;s roles from their OIDC data.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Bean\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eGrantedAuthoritiesMapper\u003c/span\u003e \u003cspan\u003euserAuthoritiesMapper\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e authorities \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eSet\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGrantedAuthority\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e mappedAuthorities \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eHashSet\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        authorities\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eforEach\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eauthority \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e// Check for OidcUserAuthority because Spring Security 5.2 returns\u003c/span\u003e\n            \u003cspan\u003e// each scope as a GrantedAuthority, which we don\u0026#39;t care about.\u003c/span\u003e\n            \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eauthority \u003cspan\u003einstanceof\u003c/span\u003e \u003cspan\u003eOidcUserAuthority\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003eOidcUserAuthority\u003c/span\u003e oidcUserAuthority \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eOidcUserAuthority\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e authority\u003cspan\u003e;\u003c/span\u003e\n                mappedAuthorities\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddAll\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eSecurityUtils\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eextractAuthorityFromClaims\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoidcUserAuthority\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetUserInfo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetClaims\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e mappedAuthorities\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eClick \u003cstrong\u003eSave changes\u003c/strong\u003e to continue.\u003c/p\u003e\u003cp\u003eℹ️ \u003cstrong\u003eNOTE\u003c/strong\u003e: Want to have all these steps automated for you? Vote for \u003ca href=\"https://github.com/auth0/auth0-cli/issues/351\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis issue\u003c/a\u003e in the Auth0 CLI project.\u003c/p\u003e\u003ch3 id=\"Run-Your-JHipster-App-with-Auth0\"\u003eRun Your JHipster App with Auth0\u003c/h3\u003e\u003cp\u003eStop your JHipster app using \u003cstrong\u003eCtrl+C\u003c/strong\u003e, set your Auth0 properties in \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eenv\u003c/code\u003e, and start your app again.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003esource\u003c/span\u003e .auth0.env\n./mvnw\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cem\u003eVoilà\u003c/em\u003e - your full-stack app is now using Auth0! Open your favorite browser to \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003c/code\u003e. \u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1Zma6iIU9n6P4CguG8CcQh/e7faa31be47593107329d0128d947b0a/04_jhipster-homepage.png\" alt=\"JHipster default homepage\"/\u003e\u003c/p\u003e\u003cp\u003eYou should see your app\u0026#39;s homepage with a link to sign in. Click \u003cstrong\u003esign in\u003c/strong\u003e, and you\u0026#39;ll be redirected to Auth0 to log in.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/M4rpafdRgJwaqkvm7gaZl/578bd56bd6c85bbdc180aeb7537d3a63/02_auth0-login.png\" alt=\"Auth0 Login\"/\u003e\u003c/p\u003e\u003cp\u003eAfter entering your credentials, you\u0026#39;ll be redirected back to your app. \u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7CBL7VFB4PSkcazRLSIyEG/6da5d9f23d170ba3c9b1e5c492220af7/05_jhipster-logged-in.png\" alt=\"Authenticated\"/\u003e\u003c/p\u003e\u003ch2 id=\"Test-Your-Full-Stack-Java-App-with-Cypress\"\u003eTest Your Full Stack Java App with Cypress\u003c/h2\u003e\u003cp\u003eJHipster has Auth0 support built-in, so you can specify your credentials for Cypress tests and automate your UI testing!\u003c/p\u003e\u003cp\u003eTo do this, open a new terminal window, specify the credentials for the Auth0 user you just created, and run \u003ccode\u003enpm run e2e\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eCYPRESS_E2E_USERNAME\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003enew-username\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eCYPRESS_E2E_PASSWORD\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003enew-password\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003enpm\u003c/span\u003e run e2e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eTIP:\u003c/strong\u003e If you want to use a \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003eenv\u003c/code\u003e file for your environment variables, you can use \u003ca href=\"https://www.npmjs.com/package/cypress-dotenv\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecypress-dotenv\u003c/a\u003e. You can also put these values in \u003ccode\u003ecypress\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e, but since this file will be in source control, it\u0026#39;s a bad practice to put your secrets in it.\u003c/p\u003e\u003cp\u003eEverything should pass in around a minute.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e       Spec                                              Tests  Passing  Failing  Pending  Skipped\n  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐\n  │ ✔  administration/administration.spec.      00:31        \u003cspan\u003e5\u003c/span\u003e        \u003cspan\u003e5\u003c/span\u003e        -        -        - │\n  │    ts                                                                                          │\n  └────────────────────────────────────────────────────────────────────────────────────────────────┘\n    ✔  All specs passed\u003cspan\u003e!\u003c/span\u003e                        00:31        \u003cspan\u003e5\u003c/span\u003e        \u003cspan\u003e5\u003c/span\u003e        -        -        -\n\nExecution time: \u003cspan\u003e44\u003c/span\u003e s.\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eShut down the process running your JHipster app - it\u0026#39;s time to create some data handling for your Flickr clone!\u003c/p\u003e\u003ch2 id=\"Create-Entities-to-allow-CRUD-on-Photos\"\u003eCreate Entities to allow CRUD on Photos\u003c/h2\u003e\u003cp\u003eI\u0026#39;ve talked a lot about how to secure your application, but we haven\u0026#39;t done anything with photos! JHipster has a JDL (JHipster Domain Language) feature that allows you to model the data in your app and generate entities from it. You can use the \u003ca href=\"https://start.jhipster.tech/jdl-studio/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJDL Studio\u003c/a\u003e to do this online and save it locally once you\u0026#39;ve finished.\u003c/p\u003e\u003cp\u003eMy data model for this app has \u003ccode\u003eAlbum\u003c/code\u003e, \u003ccode\u003ePhoto\u003c/code\u003e, and \u003ccode\u003eTag\u003c/code\u003e entities and sets up relationships between them. Below is a screenshot of what it looks like in JDL Studio.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/73z2OABdygvcVuMzVCzjIP/7d9a84eb719ecac66290b367ecaa3682/03_jdl-studio.png\" alt=\"JDL Studio\"/\u003e\u003c/p\u003e\u003cp\u003eCopy the JDL below and save it in a \u003ccode\u003eflickr2\u003cspan\u003e.\u003c/span\u003ejdl\u003c/code\u003e file in the root directory of your project.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eentity Album \u003cspan\u003e{\u003c/span\u003e\n  title String required\n  description TextBlob\n  created Instant\n\u003cspan\u003e}\u003c/span\u003e\n\nentity Photo \u003cspan\u003e{\u003c/span\u003e\n  title String required\n  description TextBlob\n  image ImageBlob required\n  height Integer\n  width Integer\n  taken Instant\n  uploaded Instant\n\u003cspan\u003e}\u003c/span\u003e\n\nentity Tag \u003cspan\u003e{\u003c/span\u003e\n  name String required \u003cspan\u003eminlength\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\nrelationship ManyToOne \u003cspan\u003e{\u003c/span\u003e\n  Album\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003elogin\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e to User\n  Photo\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ealbum\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etitle\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e to Album\n\u003cspan\u003e}\u003c/span\u003e\n\nrelationship ManyToMany \u003cspan\u003e{\u003c/span\u003e\n  Photo\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003etag\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e to Tag\u003cspan\u003e{\u003c/span\u003ephoto\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\npaginate Album \u003cspan\u003ewith\u003c/span\u003e pagination\npaginate Photo\u003cspan\u003e,\u003c/span\u003e Tag \u003cspan\u003ewith\u003c/span\u003e infinite\u003cspan\u003e-\u003c/span\u003escroll\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can generate entities and \u003ca href=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCRUD\u003c/a\u003e code (Java for Spring Boot; TypeScript and JSX for React) by using the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ejhipster jdl flickr2.jdl\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhen prompted, type \u003ccode\u003ea\u003c/code\u003e to allow overwriting of existing files.\u003c/p\u003e\u003cp\u003eThis process will create Liquibase changelog files (to create your database tables), entities, repositories, Spring MVC controllers, and all the React code necessary to create, read, update, and delete your entities. It\u0026#39;ll even generate JUnit unit tests, Jest unit tests, and Cypress end-to-end tests!\u003c/p\u003e\u003cp\u003eAfter the process completes, you can restart your app, log in, and browse through the \u003cstrong\u003eEntities\u003c/strong\u003e menu. Try adding some data to confirm everything works.\u003c/p\u003e\u003cp\u003eBy now, you can see that JHipster is pretty powerful. It recognized that you had an image property of \u003ccode\u003eImageBlob\u003c/code\u003e type and created the logic necessary to upload and store images in your database! \u003cem\u003eBooyah!\u003c/em\u003e\u003c/p\u003e\u003ch2 id=\"Add-Image-EXIF-Processing-in-Your-Spring-Boot-API\"\u003eAdd Image EXIF Processing in Your Spring Boot API\u003c/h2\u003e\u003cp\u003eThe \u003ccode\u003ePhoto\u003c/code\u003e entity has a few properties that can be calculated by reading the uploaded photo\u0026#39;s \u003ca href=\"https://yourphotoadvisor.com/understanding-exif-data-what-it-is-and-what-to-do-with-it/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eEXIF\u003c/a\u003e (Exchangeable Image File Format) data. You might ask, how do you do that in Java?\u003c/p\u003e\u003cp\u003eThankfully, Drew Noakes created a \u003ca href=\"https://github.com/drewnoakes/metadata-extractor\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emetadata-extractor\u003c/a\u003e library to do just that. Add a dependency on Drew\u0026#39;s library to your \u003ccode\u003epom\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003ecom.drewnoakes\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003emetadata-extractor\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e2.16.0\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen modify the \u003ccode\u003ePhotoResource\u003cspan\u003e#createPhoto\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to set the metadata when an image is uploaded.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003edrew\u003cspan\u003e.\u003c/span\u003eimaging\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eImageMetadataReader\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003edrew\u003cspan\u003e.\u003c/span\u003eimaging\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eImageProcessingException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003edrew\u003cspan\u003e.\u003c/span\u003emetadata\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eMetadata\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003edrew\u003cspan\u003e.\u003c/span\u003emetadata\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eMetadataException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003edrew\u003cspan\u003e.\u003c/span\u003emetadata\u003cspan\u003e.\u003c/span\u003eexif\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eExifSubIFDDirectory\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003edrew\u003cspan\u003e.\u003c/span\u003emetadata\u003cspan\u003e.\u003c/span\u003ejpeg\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eJpegDirectory\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejavax\u003cspan\u003e.\u003c/span\u003exml\u003cspan\u003e.\u003c/span\u003ebind\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eDatatypeConverter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eio\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eBufferedInputStream\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eio\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eByteArrayInputStream\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eio\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eIOException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eio\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eInputStream\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003etime\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eInstant\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eutil\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003ePhotoResource\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePhoto\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003ecreatePhoto\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e@Valid\u003c/span\u003e \u003cspan\u003e@RequestBody\u003c/span\u003e \u003cspan\u003ePhoto\u003c/span\u003e photo\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ethrows\u003c/span\u003e \u003cspan\u003eException\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        log\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edebug\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;REST request to save Photo : {}\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e photo\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ephoto\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ethrow\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eBadRequestAlertException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;A new photo cannot already have an ID\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e ENTITY_NAME\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;idexists\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            photo \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003esetMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ephoto\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003ecatch\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eImageProcessingException\u003c/span\u003e ipe\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            log\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eerror\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eipe\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003ePhoto\u003c/span\u003e result \u003cspan\u003e=\u003c/span\u003e photoRepository\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esave\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ephoto\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreated\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eURI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/photos/\u0026#34;\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e result\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eheaders\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eHeaderUtil\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateEntityCreationAlert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eapplicationName\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e ENTITY_NAME\u003cspan\u003e,\u003c/span\u003e result\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eresult\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003ePhoto\u003c/span\u003e \u003cspan\u003esetMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ePhoto\u003c/span\u003e photo\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ethrows\u003c/span\u003e \u003cspan\u003eImageProcessingException\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eIOException\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eMetadataException\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eString\u003c/span\u003e str \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eDatatypeConverter\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprintBase64Binary\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ephoto\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ebyte\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e data2 \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eDatatypeConverter\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparseBase64Binary\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estr\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eInputStream\u003c/span\u003e inputStream \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eByteArrayInputStream\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003edata2\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eBufferedInputStream\u003c/span\u003e bis \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eBufferedInputStream\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003einputStream\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eMetadata\u003c/span\u003e metadata \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eImageMetadataReader\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereadMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ebis\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eExifSubIFDDirectory\u003c/span\u003e directory \u003cspan\u003e=\u003c/span\u003e metadata\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetFirstDirectoryOfType\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eExifSubIFDDirectory\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003edirectory \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eDate\u003c/span\u003e date \u003cspan\u003e=\u003c/span\u003e directory\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetDateDigitized\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003edate \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                photo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetTaken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003edate\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoInstant\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ephoto\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetTaken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            log\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edebug\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Photo EXIF date digitized not available, setting taken on date to now...\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            photo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetTaken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eInstant\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        photo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetUploaded\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eInstant\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003eJpegDirectory\u003c/span\u003e jpgDirectory \u003cspan\u003e=\u003c/span\u003e metadata\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetFirstDirectoryOfType\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eJpegDirectory\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ejpgDirectory \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            photo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetHeight\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ejpgDirectory\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetImageHeight\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            photo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetWidth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ejpgDirectory\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetImageWidth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003ereturn\u003c/span\u003e photo\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSince you\u0026#39;re extracting the information, you can remove the fields from the UI and tests so the user cannot set these values.\u003c/p\u003e\u003cp\u003eIn \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003emain\u003cspan\u003e/\u003c/span\u003ewebapp\u003cspan\u003e/\u003c/span\u003eapp\u003cspan\u003e/\u003c/span\u003eentities\u003cspan\u003e/\u003c/span\u003ephoto\u003cspan\u003e/\u003c/span\u003ephoto\u003cspan\u003e-\u003c/span\u003eupdate\u003cspan\u003e.\u003c/span\u003etsx\u003c/code\u003e, hide the metadata so users can\u0026#39;t edit it. Rather than displaying the \u003ccode\u003eheight\u003c/code\u003e, \u003ccode\u003ewidth\u003c/code\u003e, \u003ccode\u003etaken\u003c/code\u003e, and \u003ccode\u003euploaded\u003c/code\u003e values, hide them. You can do this by searching for \u003ccode\u003ephoto\u003cspan\u003e-\u003c/span\u003eheight\u003c/code\u003e, grabbing the elements (and its following three elements), and adding them to a \u003ccode\u003emetadata\u003c/code\u003e constant just after \u003ccode\u003e\u003cspan\u003edefaultValues\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e lambda function.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst defaultValues = () =\u0026gt;\n  ...\n\nconst metadata = (\n  \u0026lt;div\u0026gt;\n    \u0026lt;ValidatedField label={translate(\u0026#39;flickr2App.photo.height\u0026#39;)} id=\u0026#34;photo-height\u0026#34; name=\u0026#34;height\u0026#34; data-cy=\u0026#34;height\u0026#34; type=\u0026#34;text\u0026#34; /\u0026gt;\n    \u0026lt;ValidatedField label={translate(\u0026#39;flickr2App.photo.width\u0026#39;)} id=\u0026#34;photo-width\u0026#34; name=\u0026#34;width\u0026#34; data-cy=\u0026#34;width\u0026#34; type=\u0026#34;text\u0026#34; /\u0026gt;\n    \u0026lt;ValidatedField\n      label={translate(\u0026#39;flickr2App.photo.taken\u0026#39;)}\n      id=\u0026#34;photo-taken\u0026#34;\n      name=\u0026#34;taken\u0026#34;\n      data-cy=\u0026#34;taken\u0026#34;\n      type=\u0026#34;datetime-local\u0026#34;\n      placeholder=\u0026#34;YYYY-MM-DD HH:mm\u0026#34;\n    /\u0026gt;\n    \u0026lt;ValidatedField\n      label={translate(\u0026#39;flickr2App.photo.uploaded\u0026#39;)}\n      id=\u0026#34;photo-uploaded\u0026#34;\n      name=\u0026#34;uploaded\u0026#34;\n      data-cy=\u0026#34;uploaded\u0026#34;\n      type=\u0026#34;datetime-local\u0026#34;\n      placeholder=\u0026#34;YYYY-MM-DD HH:mm\u0026#34;\n    /\u0026gt;\n  \u0026lt;/div\u0026gt;\n);\nconst metadataRows = isNew ? \u0026#39;\u0026#39; : metadata;\n\nreturn ( ... );\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, in the \u003ccode\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003c/code\u003e block, remove the JSX between the \u003ccode\u003eimage\u003c/code\u003e property and \u003ccode\u003ealbum\u003c/code\u003e property and replace it with \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003emetadataRows\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;ValidatedBlobField\n  label={translate(\u0026#39;flickr2App.photo.image\u0026#39;)}\n  id=\u0026#34;photo-image\u0026#34;\n  name=\u0026#34;image\u0026#34;\n  data-cy=\u0026#34;image\u0026#34;\n  isImage\n  accept=\u0026#34;image/*\u0026#34;\n  validate={{\n    required: { value: true, message: translate(\u0026#39;entity.validation.required\u0026#39;) },\n  }}\n/\u0026gt;\n{metadataRows}\n\u0026lt;ValidatedField id=\u0026#34;photo-album\u0026#34; name=\u0026#34;albumId\u0026#34; data-cy=\u0026#34;album\u0026#34; label={translate(\u0026#39;flickr2App.photo.album\u0026#39;)} type=\u0026#34;select\u0026#34;\u0026gt;\n  \u0026lt;option value=\u0026#34;\u0026#34; key=\u0026#34;0\u0026#34; /\u0026gt;\n  {albums\n    ? albums.map(otherEntity =\u0026gt; (\n      \u0026lt;option value={otherEntity.id} key={otherEntity.id}\u0026gt;\n        {otherEntity.title}\n      \u0026lt;/option\u0026gt;\n    ))\n    : null}\n\u0026lt;/ValidatedField\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003etest\u003cspan\u003e/\u003c/span\u003ejavascript\u003cspan\u003e/\u003c/span\u003ecypress\u003cspan\u003e/\u003c/span\u003eintegration\u003cspan\u003e/\u003c/span\u003eentity\u003cspan\u003e/\u003c/span\u003ephoto\u003cspan\u003e.\u003c/span\u003espec\u003cspan\u003e.\u003c/span\u003ets\u003c/code\u003e, remove the code that sets the data in these fields:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ecy\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e[data-cy=\u0026#34;height\u0026#34;]\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;99459\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshould\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;have.value\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;99459\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\ncy\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e[data-cy=\u0026#34;width\u0026#34;]\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;61514\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshould\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;have.value\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;61514\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\ncy\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e[data-cy=\u0026#34;taken\u0026#34;]\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;2021-10-11T16:46\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshould\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;have.value\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;2021-10-11T16:46\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\ncy\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e[data-cy=\u0026#34;uploaded\u0026#34;]\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;2021-10-11T15:23\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshould\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;have.value\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;2021-10-11T15:23\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eStop your Maven process, run \u003ccode\u003esource \u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eenv\u003c/code\u003e, then \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003emvwn\u003c/code\u003e again. Open a new terminal window, set your Auth0 credentials, and run \u003ccode\u003enpm run e2e\u003c/code\u003e to make sure everything still works. \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eCYPRESS_E2E_USERNAME\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eauth0-username\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eCYPRESS_E2E_PASSWORD\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eauth0-password\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003enpm\u003c/span\u003e run e2e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eℹ️ \u003cstrong\u003eNOTE\u003c/strong\u003e: If you experience authentication errors in your Cypress tests, it\u0026#39;s likely because you\u0026#39;ve violated Auth0\u0026#39;s \u003ca href=\"https://auth0.com/docs/support/policies/rate-limit-policy\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eRate Limit Policy\u003c/a\u003e. As a workaround, I recommend you use Keycloak for Cypress tests. You can do this by opening a new terminal window and starting your app there using \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003emvnw\u003c/code\u003e. Then, open a second terminal window and run \u003ccode\u003enpm run e2e\u003c/code\u003e.  \u003c/p\u003e\u003cp\u003eIf you upload an image you took with your smartphone, the height, width, and taken values should all be populated. If they\u0026#39;re not, chances are your image doesn\u0026#39;t have the data in it.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eNeed some sample photos with EXIF data? You can download pictures of my 1966 VW Bus from \u003ca href=\"https://www.flickr.com/photos/mraible/albums/72157689027458320\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ean album on Flickr\u003c/a\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Add-a-React-Photo-Gallery\"\u003eAdd a React Photo Gallery\u003c/h2\u003e\u003cp\u003eYou\u0026#39;ve added metadata extraction to your backend, but your photos still display in a list rather than in a grid (like Flickr). To fix that, you can use the \u003ca href=\"https://github.com/neptunian/react-photo-gallery\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eReact Photo Gallery\u003c/a\u003e component. Install it using npm:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003enpm\u003c/span\u003e i react-photo-gallery@8\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003emain\u003cspan\u003e/\u003c/span\u003ewebapp\u003cspan\u003e/\u003c/span\u003eapp\u003cspan\u003e/\u003c/span\u003eentities\u003cspan\u003e/\u003c/span\u003ephoto\u003cspan\u003e/\u003c/span\u003ephoto\u003cspan\u003e.\u003c/span\u003etsx\u003c/code\u003e, add an import for \u003ccode\u003eGallery\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e Gallery \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;react-photo-gallery\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen add the following just after \u003ccode\u003e\u003cspan\u003econst\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e match \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e props\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e. This adds the photos to a set with source, height, and width information.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003econst\u003c/span\u003e photoSet \u003cspan\u003e=\u003c/span\u003e photoList\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ephoto \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  src\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003edata:\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003ephoto\u003cspan\u003e.\u003c/span\u003eimageContentType\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;base64,\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003ephoto\u003cspan\u003e.\u003c/span\u003eimage\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  width\u003cspan\u003e:\u003c/span\u003e photo\u003cspan\u003e.\u003c/span\u003eheight \u003cspan\u003e\u0026gt;\u003c/span\u003e photo\u003cspan\u003e.\u003c/span\u003ewidth \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e photo\u003cspan\u003e.\u003c/span\u003eheight \u003cspan\u003e===\u003c/span\u003e photo\u003cspan\u003e.\u003c/span\u003ewidth \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e4\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  height\u003cspan\u003e:\u003c/span\u003e photo\u003cspan\u003e.\u003c/span\u003eheight \u003cspan\u003e\u0026gt;\u003c/span\u003e photo\u003cspan\u003e.\u003c/span\u003ewidth \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e4\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e photo\u003cspan\u003e.\u003c/span\u003eheight \u003cspan\u003e===\u003c/span\u003e photo\u003cspan\u003e.\u003c/span\u003ewidth \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, add a \u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eGallery\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e component right after the closing \u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eh2\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ereturn (\n  \u0026lt;div\u0026gt;\n    \u0026lt;h2 id=\u0026#34;photo-heading\u0026#34; data-cy=\u0026#34;PhotoHeading\u0026#34;\u0026gt;\n      ...\n    \u0026lt;/h2\u0026gt;\n    \u0026lt;Gallery photos={photoSet} /\u0026gt;\n    ...\n);\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSave all your changes and restart your app.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003esource\u003c/span\u003e .auth0.env\n./mvnw\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLog in and navigate to \u003cstrong\u003eEntities\u003c/strong\u003e \u0026gt; \u003cstrong\u003ePhoto\u003c/strong\u003e in the top nav bar. You will see a plethora of photos loaded by \u003ca href=\"https://www.liquibase.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLiquibase\u003c/a\u003e and \u003ca href=\"https://marak.github.io/faker.js/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003efaker.js\u003c/a\u003e. To make a clean screenshot without this data, I modified \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003emain\u003cspan\u003e/\u003c/span\u003eresources\u003cspan\u003e/\u003c/span\u003econfig\u003cspan\u003e/\u003c/span\u003eapplication\u003cspan\u003e-\u003c/span\u003edev\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e to remove the \u0026#34;faker\u0026#34; context for Liquibase.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eliquibase\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003e# Append \u0026#39;, faker\u0026#39; to the line below if you want sample data to be loaded automatically\u003c/span\u003e\n  \u003cspan\u003econtexts\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e dev\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eStop your Spring Boot backend and run \u003ccode\u003erm \u003cspan\u003e-\u003c/span\u003er target\u003cspan\u003e/\u003c/span\u003eh2db\u003c/code\u003e to clear out your database (or just delete the \u003ccode\u003etarget\u003cspan\u003e/\u003c/span\u003eh2db\u003c/code\u003e directory). Restart your backend.\u003c/p\u003e\u003cp\u003eNow you should be able to upload photos and see the results in a nice grid at the top of the list.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6RIASq72N4JN9b3ya5UVra/c0530addbbf28020d1a42f6b18ea0bae/08_photo-gallery.jpg\" alt=\"Gallery with Photos\"/\u003e\u003c/p\u003e\u003cp\u003eYou can also add a \u0026#34;lightbox\u0026#34; feature to the grid so you can click on photos and zoom in. The \u003ca href=\"https://neptunian.github.io/react-photo-gallery/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eReact Photo Gallery docs\u003c/a\u003e shows how to do this. I\u0026#39;ve integrated it into the example for this post, but I won\u0026#39;t show the code here for the sake of brevity. You can see the \u003ca href=\"https://github.com/oktadev/auth0-full-stack-java-example/blob/main/src/main/webapp/app/entities/photo/photo.tsx\" target=\"_blank\" rel=\"noreferrer noopener\"\u003efinal \u003ccode\u003ephoto\u003cspan\u003e.\u003c/span\u003etsx\u003c/code\u003e with Lightbox added on GitHub\u003c/a\u003e or a \u003ca href=\"https://github.com/oktadev/auth0-full-stack-java-example/commit/76dcf711816cb2f3455ba4b46264bf48002487f7\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ediff of the necessary changes\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"Make-Your-Full-Stack-Java-App-Into-a-PWA\"\u003eMake Your Full Stack Java App Into a PWA\u003c/h2\u003e\u003cp\u003eProgressive Web Apps, aka PWAs, are the best way for developers to make their webapps load faster and more performant. In a nutshell, PWAs are websites that use recent web standards to allow for installation on a user\u0026#39;s computer or device and deliver an app-like experience to those users. To make a web app into a PWA:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eYour app must be served over HTTPS\u003c/li\u003e\u003cli\u003eYour app must register a service worker so it can cache requests and work offline\u003c/li\u003e\u003cli\u003eYour app must have a webapp manifest with installation information and icons\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eFor HTTPS, you can \u003ca href=\"https://letsencrypt.org/docs/certificates-for-localhost/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eset up a certificate for localhost\u003c/a\u003e or (even better), deploy it to production! Cloud providers like Heroku will provide you with HTTPS out-of-the-box, but they won\u0026#39;t \u003cem\u003eforce\u003c/em\u003e HTTPS. To force HTTPS, open \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003emain\u003cspan\u003e/\u003c/span\u003ejava\u003cspan\u003e/\u003c/span\u003ecom\u003cspan\u003e/\u003c/span\u003eauth0\u003cspan\u003e/\u003c/span\u003eflickr2\u003cspan\u003e/\u003c/span\u003econfig\u003cspan\u003e/\u003c/span\u003eSecurityConfiguration\u003cspan\u003e.\u003c/span\u003ejava\u003c/code\u003e and add a rule to force a secure channel when an \u003ccode\u003e\u003cspan\u003eX\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eForwarded\u003cspan\u003e-\u003c/span\u003eProto\u003c/code\u003e header is sent.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Override\u003c/span\u003e\n\u003cspan\u003eprotected\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003econfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eHttpSecurity\u003c/span\u003e http\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ethrows\u003c/span\u003e \u003cspan\u003eException\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    http\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eand\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eframeOptions\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edeny\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eand\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequiresChannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequestMatchers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003er \u003cspan\u003e-\u0026gt;\u003c/span\u003e r\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetHeader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;X-Forwarded-Proto\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequiresSecure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eand\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthorizeRequests\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ca href=\"https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eworkbox-webpack-plugin\u003c/a\u003e is configured already for generating a service worker, but it only works when running your app with a production profile. This is nice because it means your data isn\u0026#39;t cached in the browser when you\u0026#39;re developing.\u003c/p\u003e\u003cp\u003eTo register a service worker, open \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003emain\u003cspan\u003e/\u003c/span\u003ewebapp\u003cspan\u003e/\u003c/span\u003eindex\u003cspan\u003e.\u003c/span\u003ehtml\u003c/code\u003e and uncomment the following block of code.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003escript\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;serviceWorker\u0026#39;\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e navigator\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    window\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddEventListener\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;load\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      navigator\u003cspan\u003e.\u003c/span\u003eserviceWorker\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eregister\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/service-worker.js\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;Service Worker Registered\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003escript\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe final feature — a webapp manifest — is included at \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003emain\u003cspan\u003e/\u003c/span\u003ewebapp\u003cspan\u003e/\u003c/span\u003emanifest\u003cspan\u003e.\u003c/span\u003ewebapp\u003c/code\u003e. It defines an app name, colors, and icons. You might want to adjust these to fit your app.\u003c/p\u003e\u003ch2 id=\"Deploy-Your-React---Spring-Boot-App-to-Heroku\"\u003eDeploy Your React + Spring Boot App to Heroku\u003c/h2\u003e\u003cp\u003eTo deploy your app to Heroku, you\u0026#39;ll first need to install the \u003ca href=\"https://devcenter.heroku.com/articles/heroku-cli\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eHeroku CLI\u003c/a\u003e. You can confirm it\u0026#39;s installed by running \u003ccode\u003eheroku \u003cspan\u003e--\u003c/span\u003eversion\u003c/code\u003e.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eIf you don\u0026#39;t have a Heroku account, go to \u003ca href=\"https://www.heroku.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eheroku.com\u003c/a\u003e and sign up. Don\u0026#39;t worry, it\u0026#39;s free, and chances are you\u0026#39;ll love the experience.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eRun \u003ccode\u003eheroku login\u003c/code\u003e to log in to your account, then start the deployment process with JHipster:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ejhipster heroku\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis will start the \u003ca href=\"https://www.jhipster.tech/heroku/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eHeroku sub-generator\u003c/a\u003e that asks you a couple of questions about your app: what you want to name it and whether you want to deploy it to a US region or EU. Then it\u0026#39;ll prompt you to choose between building locally or with Git on Heroku\u0026#39;s servers. Choose Git, so you don\u0026#39;t have to upload a fat JAR. When prompted to use Okta for OIDC, select \u003ccode\u003eNo\u003c/code\u003e. Then, the deployment process will begin.\u003c/p\u003e\u003cp\u003eYou\u0026#39;ll be prompted to overwrite \u003ccode\u003epom\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e—type \u003ccode\u003ea\u003c/code\u003e to allow overwriting all files.\u003c/p\u003e\u003cp\u003eIf you have a stable and fast internet connection, your app should be live on the internet in around six minutes!\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eremote\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e Compressing\u003cspan\u003e...\u003c/span\u003e\nremote\u003cspan\u003e:\u003c/span\u003e        Done\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e120.9\u003c/span\u003eM\nremote\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e Launching\u003cspan\u003e...\u003c/span\u003e\nremote\u003cspan\u003e:\u003c/span\u003e        Released v7\nremote\u003cspan\u003e:\u003c/span\u003e        https\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eflickr\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2.\u003c/span\u003eherokuapp\u003cspan\u003e.\u003c/span\u003ecom\u003cspan\u003e/\u003c/span\u003e deployed to Heroku\nremote\u003cspan\u003e:\u003c/span\u003e\nremote\u003cspan\u003e:\u003c/span\u003e Verifying deploy\u003cspan\u003e...\u003c/span\u003e done\u003cspan\u003e.\u003c/span\u003e\n\nTo https\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003egit\u003cspan\u003e.\u003c/span\u003eheroku\u003cspan\u003e.\u003c/span\u003ecom\u003cspan\u003e/\u003c/span\u003eflickr\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2.\u003c/span\u003egit\n \u003cspan\u003e*\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003ebranch\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e      \u003cspan\u003eHEAD\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e main\n\nYour app should now be live\u003cspan\u003e.\u003c/span\u003e To view it\u003cspan\u003e,\u003c/span\u003e run\n    heroku open\nAnd you can view the logs \u003cspan\u003ewith\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e command\n    heroku logs \u003cspan\u003e--\u003c/span\u003etail\nAfter application modification\u003cspan\u003e,\u003c/span\u003e redeploy it \u003cspan\u003ewith\u003c/span\u003e\n    jhipster heroku\nCongratulations\u003cspan\u003e,\u003c/span\u003e JHipster execution\u003cspan\u003e,\u003c/span\u003e is complete\u003cspan\u003e!\u003c/span\u003e\nSponsored \u003cspan\u003ewith\u003c/span\u003e ❤️ by @oktadev\u003cspan\u003e.\u003c/span\u003e\nExecution time\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e6\u003c/span\u003e min\u003cspan\u003e.\u003c/span\u003e \u003cspan\u003e19\u003c/span\u003e s\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Configure-for-Auth0-and-Analyze-Your-PWA-Score-with-Lighthouse\"\u003eConfigure for Auth0 and Analyze Your PWA Score with Lighthouse\u003c/h3\u003e\u003cp\u003eTo configure your app to work with Auth0 on Heroku, run the following command to set your Auth0 variables on Heroku.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eheroku config:set \u003cspan\u003e\\\u003c/span\u003e\n  \u003cspan\u003eSPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;https://\u0026lt;your-auth0-domain\u0026gt;/\u0026#34;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n  \u003cspan\u003eSPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026lt;your-client-id\u0026gt;\u0026#34;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n  \u003cspan\u003eSPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026lt;your-client-secret\u0026gt;\u0026#34;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n  \u003cspan\u003eJHIPSTER_SECURITY_OAUTH2_AUDIENCE\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;https://\u0026lt;your-auth0-domain\u0026gt;/api/v2/\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, log in to your Auth0 account, navigate to your app, and add your Heroku URLs as valid redirect URIs:\u003c/p\u003e\u003cul\u003e\u003cli\u003eAllowed Callback URLs: \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eflickr\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2.\u003c/span\u003eherokuapp\u003cspan\u003e.\u003c/span\u003ecom\u003cspan\u003e/\u003c/span\u003elogin\u003cspan\u003e/\u003c/span\u003eoauth2\u003cspan\u003e/\u003c/span\u003ecode\u003cspan\u003e/\u003c/span\u003eoidc\u003c/code\u003e\u003c/li\u003e\u003cli\u003eAllowed Logout URLs: \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eflickr\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2.\u003c/span\u003eherokuapp\u003cspan\u003e.\u003c/span\u003ecom\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eAfter Heroku restarts your app, open it with \u003ccode\u003eheroku open\u003c/code\u003e and log in.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3MDBfwDhZiuKW8uzrlm291/2c574c89ca11c7b853bf01d850f06ee9/09_app-on-heroku.png\" alt=\"Running on Heroku!\"/\u003e\u003c/p\u003e\u003cp\u003eThen, test it with \u003ca href=\"https://developers.google.com/web/tools/lighthouse/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLighthouse\u003c/a\u003e (using the Lighthouse tab in Chrome developer tools). Looks pretty good, eh?! 💯\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2udHZaYwD4vfVtTf9SrpzB/c6888183a1364142f5edca732a0ad02c/06_lighthouse-score.png\" alt=\"Lighthouse Score 💯\"/\u003e\u003c/p\u003e\u003cp\u003eIt\u0026#39;s pretty darn secure too, at least according to \u003ca href=\"https://securityheaders.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esecurityheaders.com\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/Y1O0MLjbMSojaSH1UOnuN/48d36a1abdb9007c0dfa2a45bd61057e/09_security-headers.png\" alt=\"Security Headers on Heroku\"/\u003e\u003c/p\u003e\u003ch2 id=\"Learn-More-About-Full-Stack-Java-Development\"\u003eLearn More About Full Stack Java Development\u003c/h2\u003e\u003cp\u003eThis tutorial shows you how to streamline full-stack Java development with JHipster. You developed a working application with a React frontend and a Spring Boot backend. You can find the app created in this tutorial on GitHub, in the \u003ca href=\"https://github.com/oktadev/auth0-full-stack-java-example\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eauth0-full-stack-java-example\u003c/a\u003e repository.\u003c/p\u003e\u003cp\u003eYou might also enjoy these related blog posts:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://auth0.com/blog/2018/12/11/learning-java-first-language\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLearning Java as a First Language\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://auth0.com/blog/2021/01/20/reactive-java-microservices\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eReactive Java Microservices with Spring Boot and JHipster\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://auth0.com/blog/build-and-secure-an-api-with-spring-boot/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eBuild and Secure an API with Spring Boot and Kotlin\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://auth0.com/blog/complete-guide-to-react-user-authentication/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eThe Complete Guide to React User Authentication with Auth0\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eTo see when we publish more developer topics on Auth0 and the Okta developer blog, follow \u003ca href=\"https://twitter.com/auth0\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0\u003c/a\u003e and \u003ca href=\"https://twitter.com/oktadev\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOktaDev\u003c/a\u003e on Twitter.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "This tutorial shows you how to create a slick-looking, full-stack, secure application using React, Spring Boot, and JHipster.",
      "date_published": "2021-11-03T17:18:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/okta-and-auth0-named-leaders-in-2021-gartner-magic-quadrant-for-access-management/",
      "title": "Okta and Okta (Auth0) Both Named as Leaders in 2021 Gartner® Magic Quadrant™ for Access Management",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eSAN FRANCISCO – Nov. 3, 2021 –\u003c/strong\u003e \u003ca href=\"https://www.okta.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOkta, Inc.\u003c/a\u003e (NASDAQ:OKTA) the leading independent identity provider, today announced that it has been recognized as a Leader in the 2021 Gartner Magic Quadrant for Access Management, for both Okta and Auth0 (which Okta acquired in \u003ca href=\"https://www.okta.com/press-room/press-releases/okta-completes-acquisition-of-auth0/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMay 2021\u003c/a\u003e). This marks the fifth consecutive year in which Okta has been named Leader, and the first for Okta (Auth0). A complimentary version of the full report can be found \u003ca href=\"https://auth0.com/resources/whitepapers/gartner-magic-quadrant-access-management\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eGartner\u0026#39;s view of the market is focused on transformational technologies or approaches delivering on the future needs of end users. The access management (AM) market is defined by customers’ needs to establish, enforce, and manage run-time access controls for internal and external types of identities, interacting with cloud, modern standards-based web, and legacy web applications. The report evaluated 12 vendors on 15 criteria and placed both Okta and Okta (Auth0) in the Leaders Quadrant.\u003c/p\u003e\u003cp\u003eOkta and Auth0 together provide the breadth of modern Workforce and Customer Identity and Access Management (CIAM) solutions needed to seamlessly manage the digital complexities of security, agility, and user experience. The Okta Identity Cloud and the Auth0 Identity Platform deliver the identity solutions that are built for customer choice, connecting best-of-breed technology for seamless integration into any ecosystem; addressing compliance and regulatory requirements; and empowering users with secure and frictionless experiences. Any development style (no-code, low-code, to pro-code) and deployment choice (multi-tenant cloud or a dedicated tenant) is satisfied with the extensibility and breadth that Okta and Auth0 offer.\u003c/p\u003e\u003cp\u003e“This dual recognition from Gartner is an honor, and one that I believe is a testament to the individual leadership of our complementary platforms and the incredible value that we offer together,” said Todd McKinnon, CEO and co-founder, Okta. “Companies that proactively build an identity-first architecture and prioritize identity as the foundation to all digital experiences will have the competitive edge. The breadth of technology across both Okta’s and Auth0’s platforms provide industry-leading execution and innovation for driving secure and seamless digital experiences.”\u003c/p\u003e\u003cp\u003e“Becoming part of Okta was a transformational milestone for both companies, as well as the identity industry as a whole,” said Eugenio Pace, CEO and co-founder, Auth0. “We are just scratching the surface of the breadth of use cases we can solve together. We are grateful for the recognition of Okta (Auth0) as a Leader from Gartner. We will continue to innovate our modern identity platform to satisfy the many complex identity needs of our customers.”\u003c/p\u003e\u003cp\u003eOkta recently featured Auth0 and the future plans as a combined company at its annual Showcase event, which was held virtually on October 13. The rich content from the event, including commentary from both CEOs, customer interviews, and product demos can be seen \u003ca href=\"https://www.okta.com/resources/showcase21-content/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAdditional detail on the overall Gartner Magic Quadrant evaluation can be found respectively on the \u003ca href=\"https://auth0.com/blog/okta-and-auth0-recognized-as-a-leader-in-the-2021-gartner-magic-quadrant-for-access-management\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 blog\u003c/a\u003e and the \u003ca href=\"https://www.okta.com/blog/2021/11/tracking-upward-and-innovating-for-our-customers-together/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOkta blog\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003cem\u003e*Gartner, Inc., Magic Quadrant for Access Management, Henrique Teixeira, Michael Kelley, Abhyuday Data, November 1, 2021.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eGartner Disclaimer:\u003cbr/\u003e\u003cem\u003eGartner does not endorse any vendor, product or service depicted in our research publications, and does not advise technology users to select only those vendors with the highest ratings or other designation. Gartner research publications consist of the opinions of Gartner\u0026#39;s research organization and should not be construed as statements of fact. Gartner disclaims all warranties, expressed or implied, with respect to this research, including any warranties of merchantability or fitness for a particular purpose.\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eGartner and Magic Quadrant are registered trademarks of Gartner, Inc. and/or its affiliates in the U.S. and internationally and is used herein with permission. All rights reserved\u003c/em\u003e\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eThe Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003ch2 id=\"About-Okta\"\u003eAbout Okta\u003c/h2\u003e\u003cp\u003eOkta is the leading independent identity provider. The Okta Identity Cloud enables organizations to securely connect the right people to the right technologies at the right time. With more than 7,000 pre-built integrations to applications and infrastructure providers, Okta provides simple and secure access to people and organizations everywhere, giving them the confidence to reach their full potential. More than 13,050 organizations, including JetBlue, Nordstrom, Siemens, Slack, Takeda, Teach for America, and Twilio, trust Okta to help protect the identities of their workforces and customers.\u003c/p\u003e\u003ch3 id=\"Media-Contacts\"\u003eMedia Contacts\u003c/h3\u003e\u003cp\u003eCommunications Team\u003cbr/\u003eOkta\u003cbr/\u003e\u003ca href=\"mailto:press@okta.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epress@okta.com\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp\u003eGlobal Communications\u003cbr/\u003eAuth0\u003cbr/\u003e\u003ca href=\"mailto:press@auth0.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epress@auth0.com\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\u003ch3 id=\"Investor-Contact-\"\u003eInvestor Contact:\u003c/h3\u003e\u003cp\u003eInvestor Relations\u003cbr/\u003e\u003ca href=\"mailto:investor@okta.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003einvestor@okta.com\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Okta positioned highest in Ability to Execute",
      "date_published": "2021-11-03T16:37:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/okta-and-auth0-recognized-as-a-leader-in-the-2021-gartner-magic-quadrant-for-access-management/",
      "title": "Okta (Auth0) recognized as a Leader in the 2021 Gartner® Magic Quadrant™ Gartner Magic Quadrant for Access Management, Worldwide",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eWe are proud to announce that Auth0, a product unit within Okta, has been recognized as a Leader in the 2021 Gartner Magic Quadrant for Access Management, Worldwide. Gartner defines the Access Management market as: \u0026#34;\u003cem\u003eThe access management (AM) market is defined by customers’ needs to establish, enforce, and manage run-time access controls for internal and external types of identities, as well as machine identities, interacting with cloud, modern standards-based web and legacy web applications\u003c/em\u003e\u0026#34; Auth0 focuses on SaaS-delivered developer-centric and Customer Identity and Access Management (CIAM) use cases.\u003c/p\u003e\u003cp\u003eFor more information, please download the full 2021 Gartner Magic Quadrant for Access Management \u003ca href=\"https://auth0.com/resources/whitepapers/gartner-magic-quadrant-access-management\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ereport\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2R3F2vxbxOSS9HtrO3Odcf/f8351826feee0286580150623d6d53b4/Figure1_2.jpg\" alt=\"Access Management\"/\u003e\u003c/p\u003e\u003cp\u003eThe Magic Quadrant recognized Okta (Auth0) as a Leader based on our Ability to Execute and Completeness of Vision.  \u003c/p\u003e\u003cp\u003eAuth0 believes that CIAM should do more to balance the three forces of security, privacy and convenience — not just keeping the bad actors out, but also driving customer loyalty and conversion and revenue to create a great experience for our customers, partners, and their end-users.\u003c/p\u003e\u003cp\u003eWe believe vendors\u0026#39; experience in the space is a key consideration for Gartner in their Magic Quadrant Evaluations. As stated by one of our customers in their \u003ca href=\"https://www.gartner.com/reviews/market/access-management/vendor/auth0/product/auth0-platform/review/view/1363099\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ereview\u003c/a\u003e of Auth0, included in the \u003ca href=\"https://auth0.com/resources/ebooks/gartner-peer-insights-ciam\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e2021 Gartner Peer Insights Voice of the Customer Access Management Report\u003c/a\u003e, Auth0 comes with great features out-of-the-box. We went live easily with Auth0 as our Identity Provider. The platform/vendor does not just support us in a technical angle, but also understanding our user journey and sharing their experience (with other clients) and what approaches to take to minimize risk and even enhance user experience during the migration. — VP, Core Product Development, Retail industry\u003c/p\u003e\u003ch2 id=\"Auth0---Okta-Both-Recognized-as-Leaders\"\u003eAuth0 / Okta Both Recognized as Leaders\u003c/h2\u003e\u003cp\u003eBecause \u003ca href=\"https://auth0.com/blog/okta-acquisition-announcement/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOkta closed the acquisition of Auth0 in May 2021\u003c/a\u003e, we believe we are both represented as vendors in the 2021 Magic Quadrant for Access Management. Our capabilities and visions were evaluated separately, but to great success — both Okta and Auth0 were recognized as Leaders.  \u003c/p\u003e\u003cp\u003eAs we move forward we will combine Okta’s proven ability to execute and leadership in Workforce and CIAM with Auth0’s role as the innovator of a modern CIAM and developer experience. Together, Okta and Auth0 are the future of identity, working to solve every identity use case for customers.\u003c/p\u003e\u003ch2 id=\"Next-Steps-with-Okta\"\u003eNext Steps with Okta\u003c/h2\u003e\u003cp\u003eBringing together two strong market leaders is a challenge — but we both see the positive impact this will bring for our customers and for the identity market. We know we have a lot of work ahead of us and will rely on customer feedback. We’re grateful for your trust as we continue to innovate with Okta.\u003c/p\u003e\u003cp\u003e\u003cem\u003e*Gartner, Inc., Magic Quadrant for Access Management, Henrique Teixeira, Michael Kelley, Abhyuday Data, November 1, 2021.\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eThis graphic was published by Gartner, Inc. as part of a larger research document and should be evaluated in the context of the entire document. The Gartner document is available upon request from Okta.\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eGartner does not endorse any vendor, product or service depicted in its research publications, and does not advise technology users to select only those vendors with the highest ratings or other designation. Gartner research publications consist of the opinions of Gartner’s research organization and should not be construed as statements of fact. Gartner disclaims all warranties, express or implied, with respect to this research, including any warranties of merchantability or fitness for a particular purpose.\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eGartner and Magic Quadrant are registered trademarks of Gartner, Inc. and/or its affiliates in the U.S. and internationally and is used herein with permission. All rights reserved\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eGartner Peer Insights reviews constitute the subjective opinions of individual end users based on their own experiences and do not represent the views of Gartner or its affiliates.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Okta (Auth0) was placed into the Leader Quadrant for 2021, parent company Okta also named a Leader",
      "date_published": "2021-11-03T16:03:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/role-based-authorization-for-aspnet-webapi/",
      "title": "Role-Based Authorization for ASP.NET Web APIs",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eRole-Based Access Control, also known as RBAC, is one of the most common strategies to restrict access to protected resources within an organization. It simplifies permission assignment by categorizing users in roles. However, many people making their first foray into RBAC have questions:\u003c/p\u003e\u003cul\u003e\u003cli\u003eHow can you reflect this user categorization on your application to check users\u0026#39; privileges?\u003c/li\u003e\u003cli\u003eHow can you deal with roles in your code?\u003c/li\u003e\u003cli\u003eIs role control appropriate for Web APIs?\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIn this article, you will learn the best way to implement RBAC in your ASP.NET Core Web API by using Auth0\u0026#39;s capabilities.\u003c/p\u003e\u003ch2 id=\"What-is-RBAC-\"\u003eWhat is RBAC?\u003c/h2\u003e\u003cp\u003eConsider a payroll system in a company. Different people accessing this system have different rights to view and change data. Each employee can view their own data, while HR people can view all employees\u0026#39; data. Also, while an employee can just view their own data, HR people can change them. Roles may also not be assigned just by department. For example, the HR department may have just a few people who should have the ability to add new employees to the payroll system, with the remainder only having permission to update employees.\u003c/p\u003e\u003cp\u003eAssigning specific permissions individually to each employee can be challenging and lead to mistakes. To expand on the payroll system example, consider that we have at least 4 types of permissions. Each of these must be assigned with perfect accuracy to each employee in your company.  With just a handful of employees and a few HR events a month, this would quickly spiral into a time-consuming and error-prone activity. This doesn\u0026#39;t even consider needing to reassign permissions for a large group of people due to a security policy change.\u003c/p\u003e\u003cp\u003eRole-Based Access Control helps with the permission assignment by introducing the concept of role. A role is a collection of permissions. Basically, you build a predefined set of permissions, give it a name, such as \u003cem\u003eEmployee\u003c/em\u003e, \u003cem\u003eHR Assistant\u003c/em\u003e, \u003cem\u003eHR Manager\u003c/em\u003e, and assign that role to a user. If you need to add or remove a permission from all the users who have a specific role, you just need to add or remove that permission from the role they are assigned. That\u0026#39;s a great improvement!\u003c/p\u003e\u003ch2 id=\"Setting-up-the-Sample-Application\"\u003eSetting up the Sample Application\u003c/h2\u003e\u003cp\u003eIn order to best show how to use roles in an ASP.NET Web API application integrated with Auth0, you will build on a sample application. I\u0026#39;ve provided a starting point that you can download by running the following command in a terminal window:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003egit\u003c/span\u003e clone --branch starter --single-branch https://github.com/auth0-blog/glossary-rbac-web-api-aspnet.git\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003eMake sure you have \u003ca href=\"https://dotnet.microsoft.com/download/dotnet/current\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe latest .NET SDK\u003c/a\u003e already installed on your machine to run the sample ASP.NET application.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eThe Web API implements a CRUD interface for a glossary of terms. It has some basic endpoints that allow you to create a definition, read a list of term definitions or a single one, and update or delete them. To learn more about the details of \u003ca href=\"https://auth0.com/blog/aspnet-web-api-authorization/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ebuilding and securing this application, check out this blog post\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eOnce you download the application on your machine, register it with Auth0 in order to enable support for authorization. If you don\u0026#39;t yet have an Auth0 account, you can \u003ca href=\"https://auth0.com/signup\" data-amp-replace=\"CLIENT_ID\" data-amp-addparams=\"anonId=CLIENT_ID(cid-scope-cookie-fallback-name)\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esign up for a free one\u003c/a\u003e. Follow the \u003ca href=\"https://auth0.com/blog/aspnet-web-api-authorization/#Registering-the-Web-API-with-Auth0\" target=\"_blank\" rel=\"noreferrer noopener\"\u003einstructions in this article to register the application with Auth0\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAfter you have completed the registration, move to the \u003ccode\u003eglossary\u003cspan\u003e-\u003c/span\u003erbac\u003cspan\u003e-\u003c/span\u003eweb\u003cspan\u003e-\u003c/span\u003eapi\u003cspan\u003e-\u003c/span\u003easpnet\u003c/code\u003e folder and open the \u003ccode\u003eappsettings\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e configuration file. Its content should look like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// appsettings.json\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;Logging\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;LogLevel\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;Default\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Information\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;Microsoft\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Warning\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;Microsoft.Hosting.Lifetime\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Information\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;AllowedHosts\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;YOUR_AUTH0_DOMAIN\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;Audience\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;YOUR_UNIQUE_IDENTIFIER\u0026#34;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eReplace the \u003ccode\u003e\u003cspan\u003eYOUR_AUTH0_DOMAIN\u003c/span\u003e\u003c/code\u003e placeholder with your Auth0 domain and the \u003ccode\u003e\u003cspan\u003eYOUR_UNIQUE_IDENTIFIER\u003c/span\u003e\u003c/code\u003e placeholder with the value you provided as a unique identifier of your API (\u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eglossary\u003cspan\u003e.\u003c/span\u003ecom\u003c/code\u003e, if you kept the value suggested in \u003ca href=\"https://auth0.com/blog/aspnet-web-api-authorization/#Registering-the-Web-API-with-Auth0\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe mentioned article\u003c/a\u003e).\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eNote: Your Auth0 domain is a string in the form \u003ccode\u003e\u003cspan\u003eYOUR\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eTENANT\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eNAME\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003ecom\u003c/code\u003e where \u003ccode\u003e\u003cspan\u003eYOUR\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eTENANT\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eNAME\u003c/span\u003e\u003c/code\u003e is the name you provided when you created your account with Auth0. For more information, \u003ca href=\"https://auth0.com/docs/getting-started/the-basics#domains\" target=\"_blank\" rel=\"noreferrer noopener\"\u003echeck the documentation\u003c/a\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eTo test that everything works as expected, launch the ASP.NET Web API application by typing \u003ccode\u003edotnet run\u003c/code\u003e in a terminal window. Now point your browser to \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e5001\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eswagger\u003c/code\u003e, and you should see the \u003ca href=\"https://swagger.io/tools/swagger-ui/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSwagger UI\u003c/a\u003e shown below to test the API interactively:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/uhfec4Zt8OyMK6svN3SK3/63c5e9f43f19e70d5720ca92c8a8fd3d/protected-swagger-ui-webapi.png\" alt=\"Swagger UI for the Glossary API\"/\u003e\u003c/p\u003e\u003cp\u003eTo call the POST, PUT, and DELETE actions, \u003ca href=\"https://auth0.com/blog/aspnet-web-api-authorization/#Testing-the-Secure-Web-API\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eyou need an access token, as explained in this section\u003c/a\u003e. The related endpoints already require an access token, but they don\u0026#39;t perform any check on the permissions granted to the users. This means that any user authorized to access the protected endpoints can do anything: create a new term, modify an existing term, and delete them.\u003c/p\u003e\u003cp\u003eIn the following sections, you will implement RBAC to allow just specific users to perform specific actions.\u003c/p\u003e\u003ch2 id=\"Defining-Permissions-for-Your-API\"\u003eDefining Permissions for Your API\u003c/h2\u003e\u003cp\u003eAs a first step to enable a more granular control on the access to your Web API, you have to define the permissions needed for your application. In the case of the glossary Web API application, define the permissions using the following strings:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003ecreate\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e. This permission allows you to add a new term to the glossary.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eupdate\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e. With this permission, you can update an existing term.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003edelete\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e. This permission allows you to delete a term from the glossary.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eTo associate these permissions with the API, go to the \u003ca href=\"https://manage.auth0.com/#/apis\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAPI section\u003c/a\u003e of your Auth0 Dashboard and select the API you defined for the glossary application. Then select the \u003cem\u003ePermissions\u003c/em\u003e tab. Here you can add the permissions with their descriptions as defined above. At the end of this process, that page will look like the following:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6eX5PaBGmIVpwgbQnhuc24/0730de2e62b8f0080edb8b54857c4aca/defining-permissions-auth0-dashboard.png.png\" alt=\"Defining permissions in the Auth0 Dashboard\"/\u003e\u003c/p\u003e\u003cp\u003eThis configuration informs Auth0 that the glossary Web API supports these permissions.\u003c/p\u003e\u003cp\u003eNext, move to the \u003cem\u003eSettings\u003c/em\u003e tab and scroll down to the \u003cem\u003eRBAC Settings\u003c/em\u003e section. Here, click the \u003cem\u003eEnable RBAC\u003c/em\u003e and the \u003cem\u003eAdd Permissions in the Access Token\u003c/em\u003e toggle buttons, as in the following picture, and then click the \u003cem\u003eSave\u003c/em\u003e button at the bottom:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/743TgQU6zPGJmPZSC5fLqp/b8e982ab6255144ba111044d34251f6d/enabling-rbac-and-permissions.png\" alt=\"Enabling RBAC\"/\u003e\u003c/p\u003e\u003cp\u003eThese settings will enforce the evaluation of roles and permissions assignments during the user login.\u003c/p\u003e\u003ch2 id=\"Auth0-and-RBAC\"\u003eAuth0 and RBAC\u003c/h2\u003e\u003cp\u003eAuth0 lets you organize your RBAC easily through its \u003ca href=\"https://manage.auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDashboard\u003c/a\u003e. If you have more complex or specific needs, you can also manage users and roles by using the \u003ca href=\"https://auth0.com/docs/api/management/v2\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Management API\u003c/a\u003e. In this article, you will use the Dashboard to manage users and roles.\u003c/p\u003e\u003cp\u003eYour goal is to create roles so that only specific users can perform specific actions. In practice, you have to create:\u003c/p\u003e\u003cul\u003e\u003cli\u003ean \u003cem\u003eEditor\u003c/em\u003e role, which includes the permission to create (\u003ccode\u003ecreate\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e) and update (\u003ccode\u003eupdate\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e) a glossary term,\u003c/li\u003e\u003cli\u003ean \u003cem\u003eAdmin\u003c/em\u003e role, which includes the permission to delete (\u003ccode\u003e\u003cspan\u003edelete\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e) a glossary term in addition to being able to create and modify it.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Creating-roles\"\u003eCreating roles\u003c/h3\u003e\u003cp\u003eWith this goal in mind, head to the Auth0 Dashboard and select \u003ca href=\"https://manage.auth0.com/#/roles\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eRoles\u003c/a\u003e under the User Management section of the side menu. Click the \u003cem\u003eCreate Role\u003c/em\u003e button in the upper right corner and fill the form with the following data:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eglossary\u003cspan\u003e-\u003c/span\u003eadmin\u003c/code\u003e as the name.\u003c/li\u003e\u003cli\u003e\u003cem\u003eGlossary administrator\u003c/em\u003e as the description.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eNow click the \u003cem\u003eCreate\u003c/em\u003e button. In the screen you get, select the \u003cem\u003ePermissions\u003c/em\u003e tab and associate the required permissions to define this role by clicking the \u003cem\u003eAdd Permissions\u003c/em\u003e button. You need to select the API you registered with Auth0 (\u003cem\u003eGlossary\u003c/em\u003e, if you kept the suggested name) and select all its permissions, as shown in the following image:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1tzvcX3VlK5DoB79yXXjSh/e39f4c885685eff93fa709a2826c3435/assign-permissions-to-admin-role.png\" alt=\"Assign permissions to the admin role\"/\u003e\u003c/p\u003e\u003cp\u003eFinally, click the \u003cem\u003eAdd Permissions\u003c/em\u003e button. You have just created the \u003ccode\u003eglossary\u003cspan\u003e-\u003c/span\u003eadmin\u003c/code\u003e role as a collection of \u003ccode\u003ecreate\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e, \u003ccode\u003eupdate\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e, and \u003ccode\u003e\u003cspan\u003edelete\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e permissions\u003c/p\u003e\u003cp\u003eNow, repeat the same process to create the \u003cem\u003eEditor\u003c/em\u003e role with the following data:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eglossary\u003cspan\u003e-\u003c/span\u003eeditor\u003c/code\u003e as the name.\u003c/li\u003e\u003cli\u003e\u003cem\u003eGlossary editor\u003c/em\u003e as the description.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis time, you will add only the \u003ccode\u003ecreate\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e and \u003ccode\u003eupdate\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e permissions to this role, as shown below:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/SNU8KS0SCf6EOEbx9eKPs/912fdb65b668cc90d36a9064b896c51e/assigning-permissions-to-editor-role.png\" alt=\"Assigning permissions to the editor role\"/\u003e\u003c/p\u003e\u003cp\u003eRemember to click the \u003cem\u003eAdd Permissions\u003c/em\u003e button to finalize the creation of the \u003ccode\u003eglossary\u003cspan\u003e-\u003c/span\u003eeditor\u003c/code\u003e role.\u003c/p\u003e\u003ch3 id=\"Creating-users-with-roles\"\u003eCreating users with roles\u003c/h3\u003e\u003cp\u003eUltimately, roles are meaningless without users. Now, you\u0026#39;ll create two users and assign them the roles you\u0026#39;ve made to test the application.\u003c/p\u003e\u003cp\u003eThe first user will have \u003ccode\u003ejohn@example\u003cspan\u003e.\u003c/span\u003ecom\u003c/code\u003e as their email and username and will be assigned the \u003ccode\u003eglossary\u003cspan\u003e-\u003c/span\u003eeditor\u003c/code\u003e role.\u003c/p\u003e\u003cp\u003eThe second user will have \u003ccode\u003ejane@example\u003cspan\u003e.\u003c/span\u003ecom\u003c/code\u003e as their email and username and will be assigned the \u003ccode\u003eglossary\u003cspan\u003e-\u003c/span\u003eadmin\u003c/code\u003e role.\u003c/p\u003e\u003cp\u003eOpen the \u003ca href=\"https://manage.auth0.com/#/users\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eUsers\u003c/a\u003e section in your Auth0 Dashboard and click the \u003cem\u003eCreate User\u003c/em\u003e button. Then, fill the form with the required data for the first user:\u003ccode\u003ejohn@example\u003cspan\u003e.\u003c/span\u003ecom\u003c/code\u003e as the email, a password of your choice, and \u003ccode\u003eUsername\u003cspan\u003e-\u003c/span\u003ePassword\u003cspan\u003e-\u003c/span\u003eAuthentication\u003c/code\u003e as the connection. The following is an example of a filled form:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/MUw60srrqjaN82e9N2eKo/818ff48164cd4d4b47aea198dd3a992c/creating-user-auth0-dashboard.png\" alt=\"creating-user-auth0-dashboard\"/\u003e\u003c/p\u003e\u003cp\u003eClick the \u003cem\u003eCreate\u003c/em\u003e button to create the user.\u003c/p\u003e\u003cp\u003eNow, on the user\u0026#39;s page, select the \u003cem\u003eRoles\u003c/em\u003e tab and click the \u003cem\u003eAssign Roles\u003c/em\u003e button. In the popup window, select the \u003ccode\u003eglossary\u003cspan\u003e-\u003c/span\u003eeditor\u003c/code\u003e role from the drop-down list and click the \u003cem\u003eAssign\u003c/em\u003e button. The window should look as follows:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/60KIekM6LsTkdps1bn9cmH/9f11e710bd29983c50eb4eb816a029ad/assign-role-to-user.png\" alt=\"Assign editor role to the user\"/\u003e\u003c/p\u003e\u003cp\u003eRepeat the same steps described so far to create the user \u003ccode\u003ejane@example\u003cspan\u003e.\u003c/span\u003ecom\u003c/code\u003e and assign them the \u003ccode\u003eglossary\u003cspan\u003e-\u003c/span\u003eadmin\u003c/code\u003e role.\u003c/p\u003e\u003ch2 id=\"Checking-Permissions-in-Your-API\"\u003eChecking Permissions in Your API\u003c/h2\u003e\u003cp\u003eAt this point, you\u0026#39;ve configured your API and created users with their respective roles on Auth0. Now it\u0026#39;s time to enable your app to have more granular control over the HTTP requests it receives.\u003c/p\u003e\u003cp\u003eRecall that roles are collections of permissions. When you enabled RBAC for your API in the Auth0 Dashboard, you ensured that tokens issued by Auth0 for the API will include permissions within the access token. As a result, when clients use that same token for HTTP requests, the API can parse the token\u0026#39;s permissions.\u003c/p\u003e\u003cp\u003eTo correctly authorize the incoming HTTP requests, your API needs to make sure the access token has the necessary permissions. You can accomplish this task by defining one or more authorization policies and applying them to the methods that implement your ASP.NET Web API.\u003c/p\u003e\u003cp\u003eAn \u003cstrong\u003eauthorization policy\u003c/strong\u003e is a set of requirements that users or applications must meet in order to be allowed to perform an action on a resource. Let\u0026#39;s see how you can define and apply an authorization policy in practice.\u003c/p\u003e\u003cp\u003eTo define an authorization policy for the glossary Web API, open the \u003ccode\u003eStartup\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e file in the root folder of the project and append the following code to the body of the \u003ccode\u003e\u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Startup.cs\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\n\n\u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003eGlossary\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eStartup\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// ...existing code...\u003c/span\u003e\n    \n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIServiceCollection\u003c/span\u003e services\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e// ...existing code...\u003c/span\u003e\n      \n      \u003cspan\u003e//👇 new code\u003c/span\u003e\n      services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuthorization\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e\n        options\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddPolicy\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;CreateAccess\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e policy \u003cspan\u003e=\u0026gt;\u003c/span\u003e \n                          policy\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eRequireClaim\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;permissions\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;create:term\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        options\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddPolicy\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;UpdateAccess\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e policy \u003cspan\u003e=\u0026gt;\u003c/span\u003e \n                          policy\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eRequireClaim\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;permissions\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;update:term\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        options\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddPolicy\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;DeleteAccess\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e policy \u003cspan\u003e=\u0026gt;\u003c/span\u003e \n                          policy\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eRequireClaim\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;permissions\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;delete:term\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e//👆 new code\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003e// ...existing code...\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere, you\u0026#39;ve invoked the \u003ccode\u003e\u003cspan\u003eAddAuthorization\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to configure the ASP.NET authorization service. You\u0026#39;ve also defined three authorization policies via the \u003ccode\u003e\u003cspan\u003eAddPolicy\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method of the \u003ccode\u003eoptions\u003c/code\u003e parameter. Each policy has a name and a lambda expression. For example, the \u003ccode\u003eCreateAccess\u003c/code\u003e authorization policy is defined by requiring the \u003ccode\u003epermissions\u003c/code\u003e \u003ca href=\"https://auth0.com/docs/tokens/json-web-tokens/json-web-token-claims\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eclaim\u003c/a\u003e in the access token whose value must be \u003ccode\u003ecreate\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e. Similarly, for the \u003ccode\u003eUpdateAccess\u003c/code\u003e and the  \u003ccode\u003eDeleteAccess\u003c/code\u003e policies.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eDifferent approaches to creating authorization policies in ASP.NET exist. For example, you can use a \u003ca href=\"https://docs.microsoft.com/en-us/aspnet/core/security/authorization/claims\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eclaim-based authorization\u003c/a\u003e or a \u003ca href=\"https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epolicy-based authorization\u003c/a\u003e approach. You can even create your own approach by \u003ca href=\"https://docs.microsoft.com/en-us/aspnet/core/security/authorization/customizingauthorizationmiddlewareresponse\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecustomizing the built-in ASP.NET authorization middleware\u003c/a\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003ch3 id=\"Applying-an-authorization-policy\"\u003eApplying an authorization policy\u003c/h3\u003e\u003cp\u003eOnce you define and register your authorization policies, you can apply them in your Web API. Applying an authorization policy is just a matter of passing parameters to the \u003ccode\u003eAuthorize\u003c/code\u003e attribute. So, open the \u003ccode\u003eGlossaryController\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e file under the \u003ccode\u003eControllers\u003c/code\u003e folder and apply the changes pointed out in the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Controllers/GlossaryController.cs\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\n\n\u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003eGlossary\u003cspan\u003e.\u003c/span\u003eControllers\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eApiController\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eRoute\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;api/[controller]\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eGlossaryController\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eControllerBase\u003c/span\u003e\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// ...existing code...\u003c/span\u003e\n\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eHttpPost\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eAuthorize\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e(\u003c/span\u003ePolicy \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;CreateAccess\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e    \u003cspan\u003e//👈 changed code\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eActionResult\u003c/span\u003e \u003cspan\u003ePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eGlossaryItem\u003c/span\u003e glossaryItem\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e// ...existing code...\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eHttpPut\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eAuthorize\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e(\u003c/span\u003ePolicy \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;UpdateAccess\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e    \u003cspan\u003e//👈 changed code\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eActionResult\u003c/span\u003e \u003cspan\u003ePut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eGlossaryItem\u003c/span\u003e glossaryItem\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e// ...existing code...\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eHttpDelete\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eRoute\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;{term}\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eAuthorize\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e(\u003c/span\u003ePolicy \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;DeleteAccess\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e    \u003cspan\u003e//👈 changed code\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eActionResult\u003c/span\u003e \u003cspan\u003eDelete\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e term\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e// ...existing code...\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis way, you are requesting that the ASP.NET authorization middleware evaluates a specific policy to authorize the execution of the related controller\u0026#39;s method.\u003c/p\u003e\u003cp\u003eYour Web API is ready to run and check permissions!\u003c/p\u003e\u003ch2 id=\"Testing-the-Web-API\"\u003eTesting the Web API\u003c/h2\u003e\u003cp\u003eTo test your glossary Web API, you need a client that allows your users to authenticate with Auth0 and get an access token with the proper permissions based on their role. Fortunately, the Swagger UI of the sample Web API is built to be very much an actual client of your API. You just need to enable OAuth support so that the user can authenticate and get their access token.\u003c/p\u003e\u003ch3 id=\"Configuring-the-client\"\u003eConfiguring the client\u003c/h3\u003e\u003cp\u003eTo configure your Swagger UI, you need to register it with Auth0. Head to the \u003ca href=\"https://manage.auth0.com/#/applications\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eApplication section of your Auth0 Dashboard\u003c/a\u003e and click the \u003cem\u003eCreate Application\u003c/em\u003e button in the upper right corner. In the window that appears, provide a meaningful name, e.g., \u003cem\u003eGlossary client\u003c/em\u003e, and select \u003cem\u003eRegular Web Applications\u003c/em\u003e as the application type. That window should look like the following:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3RmuR8F9nAIR7bk9xA0mkM/2a732e3f8ab67e14d149498a927f291a/register-glossary-client-with-auth0.png\" alt=\"Register the glossary client with Auth0\"/\u003e\u003c/p\u003e\u003cp\u003eNow, click the \u003cem\u003eCreate\u003c/em\u003e button to confirm. After the client page is created, move to the \u003cem\u003eSettings\u003c/em\u003e tab and take note of the Client ID and the Client Secret values.\u003c/p\u003e\u003cp\u003eNow, back in your project, open the \u003ccode\u003eappsettings\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e configuration file and apply the changes highlighted below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// appsettings.json\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;Logging\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;LogLevel\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;Default\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Information\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;Microsoft\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Warning\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;Microsoft.Hosting.Lifetime\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Information\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;AllowedHosts\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;YOUR_AUTH0_DOMAIN\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;Audience\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;YOUR_UNIQUE_IDENTIFIER\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e// 👇 new keys\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;ClientId\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;YOUR_CLIENT_ID\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;ClientSecret\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;YOUR_CLIENT_SECRET\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e// 👆 new keys\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;SwaggerUISecurityMode\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;oauth2\u0026#34;\u003c/span\u003e        \u003cspan\u003e// 👈 new key\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou added the \u003ccode\u003eClientId\u003c/code\u003e and \u003ccode\u003eClientSecret\u003c/code\u003e keys within the \u003ccode\u003eAuth0\u003c/code\u003e section. Replace the \u003ccode\u003e\u003cspan\u003eYOUR_CLIENT_ID\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003eYOUR_CLIENT_SECRET\u003c/span\u003e\u003c/code\u003e placeholders with the corresponding values you just annotated from the Auth0 Dashboard. The \u003ccode\u003eDomain\u003c/code\u003e and \u003ccode\u003eAudience\u003c/code\u003e keys keep the values you already assigned at the beginning of this article.\u003c/p\u003e\u003cp\u003eAlso, you added the \u003ccode\u003eSwaggerUISecurityMode\u003c/code\u003e key with the \u003ccode\u003eoauth2\u003c/code\u003e value. This key enables the Swagger UI to act as an OAuth client so that it asks Auth0 for an access token on behalf of a user. You will see how it works in a moment.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eKeep in mind that the \u003ccode\u003eSwaggerUISecurityMode\u003c/code\u003e key is a custom key supported by this sample project. It is only required for demo purposes in order to test your API with the Swagger UI. In a real-world scenario, your API will be called by a real client.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eNow, launch the Web API by typing \u003ccode\u003edotnet run\u003c/code\u003e in a terminal window and point your browser to \u003ca href=\"https://localhost:5001/swagger\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://localhost:5001/swagger\u003c/a\u003e.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eI suggest using your browser in incognito mode to switch between users easily.\nIn fact, an unresolved issue in Swagger UI prevents you from logging out from the authorization server. See \u003ca href=\"https://github.com/swagger-api/swagger-ui/issues/3368\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethese\u003c/a\u003e \u003ca href=\"https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/436\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eissues\u003c/a\u003e for more information.\u003c/p\u003e\u003c/blockquote\u003e\u003ch3 id=\"Testing-access-with-the-Editor-role\"\u003eTesting access with the Editor role\u003c/h3\u003e\u003cp\u003eIn the Swagger UI of your Web API, click the \u003cem\u003eAuthorize\u003c/em\u003e button. You should see a window like the following:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7yvXburi6A2FwFtLED0OAr/3bbe5d0f2c6a3895a35b72349db107c5/swagger-ui-authorization-window.png\" alt=\"Swagger UI authorization window\"/\u003e\u003c/p\u003e\u003cp\u003eThis window asks to authorize the Swagger UI client to obtain an access token on behalf of the user. By clicking the \u003cem\u003eAuthorize\u003c/em\u003e button here, you will be redirected to the \u003ca href=\"https://auth0.com/docs/login/universal-login\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Universal Login page\u003c/a\u003e. On that page, authenticate as a user having the Editor role by providing the credentials of \u003ccode\u003ejohn@example\u003cspan\u003e.\u003c/span\u003ecom\u003c/code\u003e, as you \u003ca href=\"#Creating-users-with-roles\"\u003ecreated them before\u003c/a\u003e. After you authenticate, you will be redirected back to the following screen:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4osuAFMDIObnRv0yOdA4Zs/d31188f8c819d8bbc7969ea5da667648/swagger-ui-authorized-window.png\" alt=\"Swagger UI authorized window\"/\u003e\u003c/p\u003e\u003cp\u003eYour Swagger UI client has now received the access token for that user. Click the \u003cem\u003eClose\u003c/em\u003e button and try to add a new term to the glossary through the POST action. In the Swagger UI, click the \u003cem\u003ePOST /api/Glossary\u003c/em\u003e row and then the \u003cem\u003eTry it out\u003c/em\u003e button. Now, add a new term definition as in the following example:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/198INMtj79uGHzSj0GFf6C/8c5cdc291681c150f4932ff2a9175151/create-new-glossary-term.png\" alt=\"Create a new glossary term\"/\u003e\u003c/p\u003e\u003cp\u003eBy clicking the \u003cem\u003eExecute\u003c/em\u003e button, you should get a successful response similar to the following:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/GKma6edlyKq8Er3g7FzAE/840c64bd654a0f8460a54cd6598dc375/successful-response-to-creating-new-term.png\" alt=\"Successful response to creating a new term\"/\u003e\u003c/p\u003e\u003cp\u003eIf you \u003ca href=\"https://auth0.com/docs/security/tokens/access-tokens/get-management-api-access-tokens-for-production#use-access-tokens\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecopy the access token\u003c/a\u003e from the \u003ccode\u003ecurl\u003c/code\u003e statement text box and decode it in \u003ca href=\"https://jwt.io/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ejwt.io\u003c/a\u003e, you should see a payload similar to the following:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3BWPIoM8PTjxXjmE13EpBp/d7d31e8a349915925d1935ff3c6f5567/editor-access-token-payload.png\" alt=\"Editor access token payload\"/\u003e\u003c/p\u003e\u003cp\u003eYou can see the \u003ccode\u003epermissions\u003c/code\u003e claim containing the \u003ccode\u003ecreate\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e and \u003ccode\u003eupdate\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e permissions. These permissions are assigned to the current user thanks to their Editor role. Also, the \u003ccode\u003ecreate\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e permission is the one required by the \u003ccode\u003eCreateAccess\u003c/code\u003e policy that controls the access to the \u003ccode\u003e\u003cspan\u003ePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method in your API controller. So, everything works as expected.\u003c/p\u003e\u003cp\u003eIf you try to modify a glossary term through the PUT action, you should get a successful response as well.\u003c/p\u003e\u003ch3 id=\"Testing-the-API-with-the-Administrator-Role\"\u003eTesting the API with the Administrator Role\u003c/h3\u003e\u003cp\u003eHowever, if you attempt to delete the newly created term, you should receive a \u003ccode\u003e\u003cspan\u003e403\u003c/span\u003e Forbidden\u003c/code\u003e status code. In fact, your access token doesn\u0026#39;t contain the \u003ccode\u003e\u003cspan\u003edelete\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e permission. Only users with the Admin role are allowed to delete terms.\u003c/p\u003e\u003cp\u003eSo, clear the cookies in your browser (or close it and reopen it in incognito mode).\u003c/p\u003e\u003cp\u003eClick the \u003cem\u003eAuthorize\u003c/em\u003e button again and this time authenticate as the \u003ccode\u003ejane@example\u003cspan\u003e.\u003c/span\u003ecom\u003c/code\u003e user. That user has the Admin role. Now, try to execute all the three protected actions: POST, PUT, and DELETE. You should be able to perform them successfully.\u003c/p\u003e\u003ch2 id=\"Roles-and-APIs\"\u003eRoles and APIs\u003c/h2\u003e\u003cp\u003eApplying RBAC to Web APIs shown above leverages the Auth0\u0026#39;s ability to extract permissions from user roles at login time and add them to the \u003ccode\u003epermissions\u003c/code\u003e access token\u0026#39;s claim. As the API developer, this approach lets you focus just on permissions and leave the role management to Auth0.\u003c/p\u003e\u003cp\u003eAs an ASP.NET developer, you may know that you could use the \u003ccode\u003eRoles\u003c/code\u003e parameter with the \u003ccode\u003eAuthorize\u003c/code\u003e attribute, as shown in the following example:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eHttpPost\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eAuthorize\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e(\u003c/span\u003eRoles \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;glossary-editor, glossary-admin\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eActionResult\u003c/span\u003e \u003cspan\u003ePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eGlossaryItem\u003c/span\u003e glossaryItem\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e// ... existing code ...\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo, you might ask yourself a couple of questions at this point:\u003c/p\u003e\u003cul\u003e\u003cli\u003eIs it possible to include user roles in the access token issued by Auth0?\u003c/li\u003e\u003cli\u003eWhy not check roles instead of permissions on the Web API side?\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eLet\u0026#39;s try to answer both questions.\u003c/p\u003e\u003ch3 id=\"Including-roles-in-the-access-token\"\u003eIncluding roles in the access token\u003c/h3\u003e\u003cp\u003eAuth0 allows you to add user roles in the access token issued at login time. However, this is not a built-in feature, i.e., something that you got without any explicit intervention. To enrich the access token with the user\u0026#39;s roles, you need to add an \u003ca href=\"https://auth0.com/docs/actions\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Action\u003c/a\u003e to the login flow. An Action is a JavaScript function that allows you to customize the standard behavior of different \u003ca href=\"https://auth0.com/docs/actions/triggers\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 flows\u003c/a\u003e. Check out \u003ca href=\"https://auth0.com/blog/introducing-auth0-actions/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis blog post to get an overview of Auth0 Actions\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eShowing how to use Auth0 Actions to add user roles in the access token is out of the scope of this article. However, you can \u003ca href=\"https://auth0.com/docs/actions/triggers/post-login#add-user-roles-to-tokens\" target=\"_blank\" rel=\"noreferrer noopener\"\u003etake a look at this Action example\u003c/a\u003e to get an idea of how it works.\u003c/p\u003e\u003ch3 id=\"Checking-permissions-or-roles-\"\u003eChecking permissions or roles?\u003c/h3\u003e\u003cp\u003eOne of the reasons you may want to check roles instead of permissions on the Web API side could be that they are easy to read and understand quickly. They lead to a direct mapping between user roles and your API. They are easy to read and understand. Looking at the following code, you know at a glance who is allowed to do a given action:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eHttpDelete\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eRoute\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;{term}\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eAuthorize\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e(\u003c/span\u003eRoles \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;glossary-admin\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eActionResult\u003c/span\u003e \u003cspan\u003eDelete\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e term\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e// ... existing code ...\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt is immediately obvious that only the glossary administrator can delete a glossary term. Having the permission instead of the role requires you to think about who the users having the \u003ccode\u003e\u003cspan\u003edelete\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e permission may be. It implies you have an extra layer of mapping between roles and permissions in mind.\u003c/p\u003e\u003cp\u003eHowever, there are some drawbacks in checking roles on the Web API side in return for this benefit.\u003c/p\u003e\u003cp\u003eImagine you implemented your glossary Web API with role checking instead of permission checking. After your Web API is published, you need a new role for your glossary application: the Assistant role. Say you name this role \u003ccode\u003eglossary\u003cspan\u003e-\u003c/span\u003eassistant\u003c/code\u003e. Users in this role can only update existing terms, and so they will only have the \u003ccode\u003eupdate\u003cspan\u003e:\u003c/span\u003eterm\u003c/code\u003e permission.\u003c/p\u003e\u003cp\u003eTo enable this role on your Web API, you now need to change its code in the controller. You need to add the \u003ccode\u003eglossary\u003cspan\u003e-\u003c/span\u003eassistant\u003c/code\u003e role to the list of the allowed roles of the \u003ccode\u003e\u003cspan\u003ePut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method. Not complicated... But now, you need to redeploy your API with the new code!\u003c/p\u003e\u003cp\u003eIf you check permissions instead of roles, you don\u0026#39;t need any updates on the Web API side. The role management and the permission unpacking is an Auth0 responsibility.\u003c/p\u003e\u003cp\u003eOnce again: roles are just collections of permissions. While, in general, permissions are quite static, roles are more dynamic. The need to group permissions for new roles or combine multiple roles for the same user makes permission checking more convenient and lower-maintenance.\u003c/p\u003e\u003cp\u003eThink of the simple glossary Web API. It relies on only three permissions. However, it can lead to the creation of seven roles (eight, if we also consider the empty role). This should make you think about the opportunity to deal with roles on the Web API side.\u003c/p\u003e\u003cp\u003eFinally, consider that \u003ca href=\"https://auth0.com/docs/authorization/rbac/rbac-users/assign-permissions-to-users\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 allows you to directly assign permissions to a user\u003c/a\u003e. In that case, if you only check roles, you miss any directly assigned permissions causing a security flaw in your Web API.\u003c/p\u003e\u003ch2 id=\"Summary\"\u003eSummary\u003c/h2\u003e\u003cp\u003eThroughout this article, you learned how to use Auth0 Role-Based Access Control in your ASP.NET Web API.\u003c/p\u003e\u003cp\u003eYou started by defining and assigning roles to your users. Then, you registered a glossary Web API with Auth0 and enabled RBAC support. Next, you implemented an authorization policy in your Web API to check user permissions.\u003c/p\u003e\u003cp\u003eFinally, you learned why checking permissions on the API side is better than directly checking roles.\u003c/p\u003e\u003cp\u003eYou can find the final version of the glossary Web API implemented throughout the article in \u003ca href=\"https://github.com/auth0-blog/glossary-rbac-web-api-aspnet\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis GitHub repository\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "What is the best way to apply Role-Based Access Control (RBAC) to your ASP.NET Web API? Let's find out together.",
      "date_published": "2021-11-02T16:20:00Z",
      "author": {
        "name": "Registering an authorization policy"
      }
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/auth0-wins-gold-at-workl-workplace-awards-2021/",
      "title": "Auth0 Wins Gold at WorkL Workplace Awards 2021",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eLONDON – 2 November 2021\u003c/strong\u003e – The \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Identity Platform\u003c/a\u003e, a product unit within \u003ca href=\"https://www.okta.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOkta, Inc.\u003c/a\u003e (NASDAQ: OKTA), today announced it has been named among Britain’s five best places to work in technology, and one of the top 20 “most engaged” employers in the \u003ca href=\"https://www.telegraph.co.uk/business/2021/10/26/winners-workl-workplace-awards-2021-revealed/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eWorkL Workplace Awards 2021\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eConducted in partnership with The Telegraph, the awards recognize UK employers across 26 industries that score highest on a staff satisfaction survey. The five companies with the highest scores in each category are awarded gold status for the most engaged workforce. Of the 20,000 companies that entered, a select few are also recognized as the most inclusive, best in well-being, and having the most engaged employees – including Auth0.\u003c/p\u003e\u003cp\u003e“I’m pleased to congratulate Auth0 on its gold medal. After such a difficult 18 months in business, I’m pleased that our awards are celebrating organizations that are leading the way, creating happy and engaged employees,” said Lord Mark Price, founder of WorkL, and former UK Trade Minister and ex-managing director of British supermarket brand, Waitrose \u0026amp; Partners.\u003c/p\u003e\u003cp\u003eEmployer scores, called the “Workplace Happiness Score,” are calculated based on employee feedback about reward and recognition, information sharing, empowerment, well-being, and other elements of job satisfaction over the past year. The awards are the latest in a series of accolades recognizing Auth0’s remote working DNA and culture, including the \u003ca href=\"https://auth0.com/blog/auth0-named-one-of-the-10-best-mid-sized-companies-to-work-for-in-london/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eUK’s Best Companies to Work For List\u003c/a\u003e and \u003ca href=\"https://auth0.com/blog/auth0-awarded-highest-accreditation-by-best-companies-uk/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eBest Companies Accreditation\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e“We owe a tremendous debt of gratitude to our employees who responded to the survey, and all who continue to make Auth0 a great place to work,” said Steven Rees-Pullman, SVP International at Auth0. “From Auth0\u0026#39;s inception, our founders instilled values of transparency, collaboration, and experimentation into the business. Those values are exemplified by all of our employees and create this award-winning culture. Many congratulations to all!”\u003c/p\u003e\u003cp\u003eAuth0 is now part of Okta, the leading independent identity provider, with a vision to provide secure access to any technology. Learn more about what it’s like to work here, and apply to join our growing team on the \u003ca href=\"https://auth0.com/careers\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Careers Page\u003c/a\u003e.\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eThe Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003ch3 id=\"Media-Contacts\"\u003eMedia Contacts\u003c/h3\u003e\u003cp\u003eAuth0 Global Communications \u003cbr/\u003e\u003ca href=\"mailto:press@auth0.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epress@auth0.com\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Auth0 recognized among Britain’s five best places to work in technology, and one of 20 “most engaged” employers",
      "date_published": "2021-11-02T13:24:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/we-are-thankful-for-our-team/",
      "title": "We Are Thankful for Our Team",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection itemscope=\"\" itemtype=\"http://schema.org/BlogPosting\" itemprop=\"mainEntity\"\u003e\u003cheader\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cp\u003e\u003cspan\u003eCulture\u003c/span\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eRecognizing the efforts of the Okta and Auth0 teams during 2021\u003c/p\u003e\u003c/div\u003e\u003cp\u003eNovember 01, 2021\u003c/p\u003e\u003cmeta itemprop=\"datePublished\" content=\"2021-11-01\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2021-11-01\"/\u003e\u003c/div\u003e\u003c/header\u003e\u003cheader\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2G5alVFWdMmLBVZZeHPkaq/dc4092634b2a6956e7f825ae149eddac/auth0-blue-logo\"/\u003e\u003c/p\u003e\u003cdiv\u003e\u003cp\u003e\u003cspan\u003eCulture\u003c/span\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eRecognizing the efforts of the Okta and Auth0 teams during 2021\u003c/p\u003e\u003cp\u003eNovember 01, 2021\u003c/p\u003e\u003cmeta itemprop=\"datePublished\" content=\"2021-11-01\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2021-11-01\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003c/header\u003e\u003carticle\u003e\u003cmain id=\"post-content\" itemprop=\"articleBody\"\u003e\u003cdiv\u003e\u003cp\u003eAs 2021 starts to draw to a close, we all find ourselves reflecting on the year. We’ve all been through a lot — both inside and outside of work — and I know how hard our employees have worked this year to provide the best possible product, innovations, and service for our customers.\u003c/p\u003e\u003cp\u003eSo to say thanks for all their efforts — and to ensure everyone has the chance to spend time with family, go on an adventure, or just kick back on the couch with ice cream — both Okta and Auth0 teams will have the week of US Thanksgiving and the week following Christmas as a company holiday.\u003c/p\u003e\u003cp\u003eWhile these weeks are designated holidays, business continuity and reliability are our first priority. All support, customer success, engineering, and communications teams will rotate weeks away to ensure there is no disruption for our customers. We’ve also implemented an extended period of code freeze during the holiday season, with an elevated approval process for exceptions to limit any risk of service disruption. For all of the details on our ongoing resiliency efforts, \u003ca href=\"https://auth0.com/blog/improving-our-platform-resiliency-and-upcoming-holiday-plans/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eplease visit here\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eToo often in our industry, we overvalue work and undervalue rest. We don’t work so we can rest. We rest so we can work — and grow and change, which lets us continue to provide our customers the best possible experiences.\u003c/p\u003e\u003cp\u003eWe are committed to bringing our very best to you all in the coming year.\u003c/p\u003e\u003cp\u003eThank you,\u003c/p\u003e\u003cp\u003eEugenio Pace\u003c/p\u003e\u003c/div\u003e\u003c/main\u003e\u003c/article\u003e\u003c/section\u003e\u003c/div\u003e",
      "summary": "Recognizing the efforts of the Okta and Auth0 teams during 2021",
      "date_published": "2021-11-01T16:01:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/will-johnson-developer-advocate-auth0/",
      "title": "Getting To Know Will Johnson, Developer Advocate @ Auth0",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eHi! My name is Will Johnson, and I\u0026#39;m going to tell you the story of how I ended up in the Developer Relations world.\nOne thing I\u0026#39;ve learned is that where you begin does not guarantee where you will end. It\u0026#39;s been an ever-changing path for me, but it\u0026#39;s never too late to take control and direct your path.\u003c/p\u003e\u003ch2 id=\"My-Interest-In-Computers-Is-Sparked\"\u003eMy Interest In Computers Is Sparked\u003c/h2\u003e\u003cp\u003eI remember sitting in my 3rd-grade class: all the kids were quiet, but you could feel the excitement in the air. Something new was coming: our desks were lined around the walls of the room. At first, everyone faced the middle of the class. Then, the doors opened, everyone looked anxiously, waiting for what was to come through.\u003c/p\u003e\u003cp\u003eOne by one, the computer lab team rolled in brand new colored iMacs! The class went wild! Before this, we had blocky computers with green and black UI\u0026#39;s. They were huge, slow, and boring. The iMacs were cool, colorful, and small. Something completely new!\u003c/p\u003e\u003cp\u003eThat sparked my interest in computers. I always wanted to be on the computer and do things on it. I remember telling my teachers I want to tell computers what to do. I had no idea what that meant, and usually, they would direct me to learn the hardware part of computers. But I had no interest in that. The programs were what caught my attention.\u003c/p\u003e\u003ch2 id=\"Writing-My-First-Lines-of-Code\"\u003eWriting My First Lines of Code\u003c/h2\u003e\u003cp\u003eGrowing up, we never had a computer at home. I would only use the ones at school during lab time. I got my own computer right around the time the social media site MySpace was getting popular. One of the cool features was using HTML and CSS (even JavaScript, which I later learned) to customize my page. I spent hours googling different layouts and animations I could add to my page. (Yes, I used the \u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003emarquee\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e tag all over the place). Then I started doing my friends\u0026#39; pages. I enjoyed playing around with the code so much. I didn\u0026#39;t even know you could use HTML and CSS to make real websites; I thought only MySpace used them. I would just search \u0026#34;how to make moving text myspace\u0026#34; without realizing I was using HTML and CSS at that time.\u003c/p\u003e\u003cp\u003eAfter MySpace lost its popularity, I stopped customizing pages. At that time, I was unaware that I had a valuable skill that aligned with my interests. I started planning what I would do for work, so I looked into the local college programs. They were all IT; no computer programming, computer science, or anything that would let me \u0026#34;tell computers what to do.\u0026#34; Since I didn\u0026#39;t want to go into a bunch of debt for something I wasn\u0026#39;t sure was my thing, I put my tech dreams on hold.\u003c/p\u003e\u003ch2 id=\"Getting-Over-My-Fears\"\u003eGetting Over My Fears\u003c/h2\u003e\u003cp\u003eWhen working at my day jobs, I would still do random tech things on the side. Like taking broken cell phones and replacing the parts, so they looked like new. Once, I had a Windows smartphone that I modded to run Android. I think I even used Java for that, some instructions were quite tricky, but I enjoyed the process of learning and kept going. I would search Google or YouTube and try stuff, and because of that, I\u0026#39;ve broken and bricked plenty of phones, but I was always having fun.\u003c/p\u003e\u003cp\u003eAround this time, I started to hear more and more about making apps and coding. Every time computer programming came up, people said: \u0026#34;You have to be good at math or coding on a computer since you are young.\u0026#34; Neither of those was me, so it made me stop pursuing any further. People always made it seem like working with computers was really hard, and you had to be a super genius or something like that.\u003c/p\u003e\u003cp\u003eAfter being fed up with manual labor jobs, I decided to change careers and try different things. Then one day, I came across a forum post where everyone was buying online courses. In particular, I noticed that everyone was buying a specific course on web development. I spent $10 and purchased that course. I was skeptical if this was legit or not. Could I get a job just by learning online? I was willing to give it a shot. I mean, it was only $10.\u003c/p\u003e\u003cp\u003eAs soon as I started learning, I began to recognize the syntax. \u0026#34;Yo! This is the stuff from MySpace that I learned a long time ago. I\u0026#39;ve already done this.\u0026#34;\u003c/p\u003e\u003ch2 id=\"Breaking-Into-Tech\"\u003eBreaking Into Tech\u003c/h2\u003e\u003cp\u003eLearning to code and breaking into tech involved reading lots of blogs, watching videos, and listening to podcasts. I was so thankful that developers took time out of their day to create content to help other developers. So I started doing the same: I wrote blog posts, recorded screencasts, volunteered to mentor for workshops, spoke at meetups, and hosted a podcast. I would also tweet what I was learning and help others on Twitter as well. Every time I helped another dev get unstuck, it felt really good.\u003c/p\u003e\u003cp\u003eAll of this content and community work was very fulfilling. I was learning new things and helping people reach new levels in their careers.\nAt that time, I started to see the role of Developer Advocate pop up a lot. I didn\u0026#39;t quite understand it at first, but it aligned with me more as I learned more about it. I liked tinkering with code and showing others how to do the same. Then people started to tell me all the time, \u0026#34;You should get into Developer Relations\u0026#34; or \u0026#34;You\u0026#39;d be a great developer advocate.\u0026#34;\u003c/p\u003e\u003cp\u003eIt took me some time and a lot of thinking, and then it clicked: I love the tech community! I\u0026#39;ve met a lot of incredible people, and I love helping them learn new things so they can crush their goals. It\u0026#39;s a great joy for me.\u003c/p\u003e\u003cp\u003eI like to be remembered as a person that tried his best to help people in any way I could. That\u0026#39;s why, in August 2021, I joined the Auth0 developer relations team. Their vision of empowering developers aligns with mine perfectly. That\u0026#39;s why I look forward to creating content that humanizes the technical jargon and helps developers with their daily work.\u003c/p\u003e\u003cp\u003eSo, this is my story of how I ended up fulfilling my early dream. Even if you are not working on something that energizes you, it is never too late to pivot to what you are passionate about. Don\u0026#39;t get discouraged, and keep pursuing your dreams.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Meet Will Johnson, part of the developer relations team at Auth0.",
      "date_published": "2021-10-28T15:08:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/wharton-interactive-selects-auth0-to-help-securely-democratize-and-transform-education/",
      "title": "Wharton Interactive Selects Auth0 to Help Securely Democratize and Transform Education",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eBELLEVUE, Wash. – Oct. 28, 2021\u003c/strong\u003e – The \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Identity Platform\u003c/a\u003e, a product unit within Okta (NASDAQ: OKTA), today announced it has been selected as the identity and authentication provider for \u003ca href=\"https://interactive.wharton.upenn.edu/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eWharton Interactive\u003c/a\u003e, an interactive learning platform that draws on games, simulations, and research to make Ivy League business education more accessible to all. To enable a seamless, end-to-end experience for learners and educators, Auth0’s platform will provide a \u003ca href=\"https://auth0.com/blog/what-is-single-sign-on-a-non-developer-s-guide/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSingle Sign-on\u003c/a\u003e (SSO) solution for learners and educators throughout their journey.\u003c/p\u003e\u003cp\u003eWharton Interactive — founded by Sarah Toms, executive director, and Professor Ethan Mollick at the Wharton School, The University of Pennsylvania — has developed different modes of delivering education on its Alternate Reality Courseware (ARC) platform. ARCs knit together leading subject matter expertise and an immersive games-based experience where users gain mastery through practice and receive personal feedback about their performance every step of the way. By increasing inclusive access to business education, this unique higher ed initiative strives to better the socio-economic status of individuals and lift economies through job creation.\u003c/p\u003e\u003cp\u003eTo aid in Wharton Interactive’s marketplace launch, the team wanted to create one, seamless user experience across the entire platform, from the user’s account creation and management to the interactive simulations and classes, and selected Auth0 to help. By implementing SSO, students and educators can enter their login credentials once and automatically gain access to multiple applications. Through the implementation of Auth0’s SSO solution, Wharton Interactive’s platform benefits from increased security and privacy while improving the end-to-end experience for users.\u003c/p\u003e\u003cp\u003e“Auth0 plays an integral role in making Wharton Interactive’s mission to transform education a reality by eliminating the hurdles associated with having to login to multiple systems along the customer journey,” said Sarah Toms, co-founder and Executive Director for Wharton Interactive. “We were searching for a top-notch identity provider with proven expertise in SSO, and are so pleased that we have partnered with Auth0. From vendor selection to launch, it took only a few months to build and deliver a comprehensive solution that was ready for market.”\u003c/p\u003e\u003cp\u003e“Wharton Interactive is democratizing higher education and transforming the eLearning space with its cutting-edge approaches, and identity is a key enabler in supporting this mission — strong user experience, security, and privacy practices all start at login,” said Ghazi Masood, General Manager and SVP of Americas at Auth0. “We’re honored to support Wharton Interactive’s identity needs and help them seamlessly scale as they make education more attainable and secure for educators and learners around the world.”\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eThe Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003ch3 id=\"Media-Contacts\"\u003eMedia Contacts\u003c/h3\u003e\u003cp\u003eAuth0 Global Communications\u003cbr/\u003e\u003ca href=\"mailto:press@auth0.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epress@auth0.com\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp\u003eMatter Communications for Auth0\u003cbr/\u003e\u003ca href=\"mailto:auth0@matternow.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eauth0@matternow.com\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\u003ch3 id=\"Investor-Contact-\"\u003eInvestor Contact:\u003c/h3\u003e\u003cp\u003eInvestor Relations \u003cbr/\u003e\u003ca href=\"mailto:investor@okta.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003einvestor@okta.com\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Global identity management provider supports the launch of Ivy League MBA interactive learning platform",
      "date_published": "2021-10-28T13:00:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/improving-our-platform-resiliency-and-upcoming-holiday-plans/",
      "title": "Improving Our Platform Resiliency and Upcoming Holiday Plans",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eOver the last few months, there has been an increase in service degradation and outages that has shaken our customer’s confidence in Auth0. Our number one mission is to provide you with the highest level of service and reliability at all times, for the full spectrum of customers from free users to enterprise. The production environments in US-1 and EU have been impacted the most frequently and, in extreme cases, has caused downtime for some of our customers. As the Auth0 CPO, I sincerely apologize for the pain this caused you and your customers. We take ownership for the failures and recognize how disappointed you are.\u003c/p\u003e\u003cp\u003eWe know that identity plays a critical role in your company, and it is our responsibility to make our service reliable. It is also our responsibility to provide guidance to our customers on appropriate architecture patterns. When we experience failures or degradation of our service, we correct them as swiftly as possible. Today, I wanted to share the active measures we are taking to protect against similar issues from occurring in the future.\u003c/p\u003e\u003ch2 id=\"First--What-Caused-the-Outages-\"\u003eFirst, What Caused the Outages?\u003c/h2\u003e\u003cp\u003eBefore we explore all of the actions we have taken, it’s good to understand the patterns we have observed in these environments:\u003c/p\u003e\u003ch3 id=\"Noisy-neighbors-in-our-large-multi-tenant-environments-create-throughput-bottlenecks\"\u003eNoisy neighbors in our large multi-tenant environments create throughput bottlenecks\u003c/h3\u003e\u003cp\u003eThe noisy neighbor phenomenon is a well-known issue in multi-tenant environments. In our case, one co-tenant may experience a spike in traffic which can lead them to monopolize resources available and thus reduce the throughput (requests-per-second) on the environment for the other co-tenants.\u003c/p\u003e\u003cp\u003eMost of our customers in the US-1 and EU environments have enjoyed many years of uninterrupted service. These environments have grown significantly and are now the longest-running and largest, which exacerbates the noisy neighbor impact.\u003c/p\u003e\u003cp\u003eWe have not strictly enforced restrictions to the frequency of customer API calls (rate limits) and at times allowed for a 10X increase in requests-per-second (RPS) for certain tenants in a single environment. Typically, our architecture would allow us to absorb these spikes as it is the case in most of our environments, but given the volume and size of the customers in US-1 and EU, these concurrent requests restrict throughput for other tenants. We do not fault our customers for their peak traffic needs and it is on us to put in place the right protections and guardrails around each tenant. Unfortunately, we are not able to actively load shed today (i.e. automatically move tenants to other environments such as US-3, because we don’t currently have the migration tooling nor can we do it without any downtime). There are some customer scenarios where a planned migration by a customer is possible, but it requires time and effort on your part. I will cover migration scenarios and timing in the ‘Looking beyond the next 60 days’ section below.\u003c/p\u003e\u003ch3 id=\"Region-Mean-Time-To-Recovery--MTTR--outside-of-our-15-min-target\"\u003eRegion Mean Time To Recovery (MTTR) outside of our 15-min target\u003c/h3\u003e\u003cp\u003eThe other item we are solving is meeting our 15 minutes target for region failover. This is caused by dependencies on an underlying managed service that doesn’t support automated failover within our target timeframe. Our teams are in the final stages of completing the switch, a managed service that allows us to automatically failover within 15-minutes, in Q1 2022.\u003c/p\u003e\u003cp\u003eWe can successfully failover Availability Zones (AZ) today within our 1-minute target window as validated by quarterly testing.\u003c/p\u003e\u003ch2 id=\"What-Actions-Have-We-Taken-Already-\"\u003eWhat Actions Have We Taken Already?\u003c/h2\u003e\u003ch3 id=\"Slowing-down-and-invoking-our-change-freeze-earlier\"\u003eSlowing down and invoking our change freeze earlier\u003c/h3\u003e\u003cp\u003eEffective Sept. 30, 2021, we’ve significantly reduced the number and frequency of changes that we’re introducing into production for the remainder of the year. This is to introduce increased testing and soak time in pre-production environments. Heading into the holiday season, our protocols may change slightly, however, we anticipate continuing a conservative posture to maintain the stability of our production environments. We are mostly allowing changes that are related to our resiliency initiatives or security patches. Being an authentication platform, security-related changes are non-negotiable, as is our mission to protect you and your customers.\u003c/p\u003e\u003ch3 id=\"New-staging-environment\"\u003eNew staging environment\u003c/h3\u003e\u003cp\u003eAs of early October, we have a staging environment that has the same load as US-1, so that we can simulate test cases reproducing production traffic at large scale. The volume and high load-related issues described above can now be more easily detected.\u003c/p\u003e\u003ch3 id=\"Additional-resources-and-re-prioritization-of-our-roadmap\"\u003eAdditional resources and re-prioritization of our roadmap\u003c/h3\u003e\u003cp\u003eWe have added team members and reprioritized resilience projects in order to complete these improvements in time for the holiday season. I am personally doing a daily stand-up with our Engineering leadership team to ensure there is an elevated review process and all blockers are actively being addressed. In addition, all new product and feature initiatives have been deferred until the new year.\u003c/p\u003e\u003ch3 id=\"Resilience-and-holiday-readiness-efforts\"\u003eResilience and holiday readiness efforts\u003c/h3\u003e\u003cp\u003eAfter our outage on April 20th, a dedicated team of 40 engineers completed a 10-week task force to reduce the load on our environments that resulted in:\u003c/p\u003e\u003cul\u003e\u003cli\u003eReduced cache load by removing unused feature flags and added in-memory caching of multiple per-environment feature flags.\u003c/li\u003e\u003cli\u003eRemoved 2 collections from our database that reduced total database writes by 10%.\u003c/li\u003e\u003cli\u003eReduced reads to the collection with the most reads within the database by 12%.\u003c/li\u003e\u003cli\u003eAdded limits to refresh tokens queries from the Management API.\u003c/li\u003e\u003cli\u003eAdded missing indexes for new collections in the database.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eSome of the improvements identified were multi-quarter projects that are still underway and are expected to be completed this November. These projects will:\u003c/p\u003e\u003cul\u003e\u003cli\u003eReduce the read/write workload by 10%.\u003c/li\u003e\u003cli\u003eReduce 40% of inserts/deletes from our database.\u003c/li\u003e\u003cli\u003eReduce 30% of inserts/deletes from our database in US-1 enviroment. This requires a deprecation of opaque access tokens and will take 6 months to complete.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIn October, we started the following remediation projects to further reduce the probability of these failures:\u003c/p\u003e\u003cul\u003e\u003cli\u003eRefactoring our connections schema to remove high cardinality issues.\u003c/li\u003e\u003cli\u003eAddressing noisy neighbor issues in our extensibility stack (also known as Webtask).\u003c/li\u003e\u003cli\u003eImplementing an additional caching layer for reading requests.\u003c/li\u003e\u003cli\u003eProactively and significantly over-provisioning our stack in an effort to get ready for holiday traffic.\u003c/li\u003e\u003cli\u003eEnforcing global active rate management per tenant at the edge.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe projects listed above are also scheduled to be live and in production by November 10. We know that all of the initiatives above will reduce the load on our environments and should significantly reduce the noisy neighbor issue I referenced above.\u003c/p\u003e\u003cp\u003eWe are also initiating code change freeze windows over the holidays:\u003c/p\u003e\u003cp\u003e🟧 \u003cstrong\u003eOrange Change Freeze\u003c/strong\u003e 10/12 - 11/11 \u003cbr/\u003e\u003c/p\u003e\u003cp\u003e🟥 \u003cstrong\u003eRed Change Freeze\u003c/strong\u003e 11/12 - 11/29 \u003cbr/\u003e\u003c/p\u003e\u003cp\u003e🟧 \u003cstrong\u003eOrange Change Freeze\u003c/strong\u003e 11/30 - 12/16 \u003cbr/\u003e\u003c/p\u003e\u003cp\u003e🟥 \u003cstrong\u003eRed Change Freeze\u003c/strong\u003e 12/17 - 01/03 \u003cbr/\u003e\u003c/p\u003e\u003cp\u003e🟧 \u003cstrong\u003eOrange Change Freeze:\u003c/strong\u003e During this window, all production deployments are halted, and only work related to stability for Mission Critical Services, security patches or urgent releases on other components may be deployed. Changes must meet testing and approval criteria. \u003cbr/\u003e\u003c/p\u003e\u003cp\u003e🟥 \u003cstrong\u003eRed Change Freeze\u003c/strong\u003e: During this window, all production deployments are halted. Exceptions allowed only to resolve critical customer issues or security patches. Changes must meet testing and approval criteria. \u003cbr/\u003e\u003c/p\u003e\u003ch2 id=\"Looking-Beyond-the-Next-60-Days\"\u003eLooking Beyond the Next 60 Days\u003c/h2\u003e\u003ch3 id=\"New-environments-and-migration-capabilities\"\u003eNew environments and migration capabilities\u003c/h3\u003e\u003cp\u003eWe are now actively working on creating new environments in our US and EU regions. Our target is to progressively introduce 4 new environments in the US and up to 3 new environments in the EU in CY Q1 2022. The new environments allow us to dynamically allocate load as part of our demand response strategies and significantly reduce the blast radius of disruptions and outages. Our team is also actively scoping and designing an automated tenant migration process. We expect to have an automated tenant migration tool that will enable us to work with you and migrate you over to one of our newer environments beginning late CY Q1 2022.\u003c/p\u003e\u003ch3 id=\"New-platform-rollout-across-clouds-and-regions\"\u003eNew platform rollout across clouds and regions\u003c/h3\u003e\u003cp\u003eWe began working on a modern platform last year that is poised to roll out across the regions and clouds that we operate in. This month we began the gradual rollout of this new platform and made it available on Microsoft\u0026#39;s Azure cloud. This new platform architecture has been purposefully designed from the ground up to deliver a scalable, reliable, and resilient service that meets the current and future needs of our customers. We are targeting to make this available on AWS starting CY 1H 2022.\u003c/p\u003e\u003cp\u003eFinally, we truly appreciate your trust in Auth0 and will do everything that we can to keep that trust. I will post another public update in early CY Q1 2022 to share the results of all of our work in future blog updates including the progress of the improvement initiatives listed above.\u003c/p\u003e\u003cp\u003e\u003cem\u003ePlease note: any unreleased products, features, or functionality referenced in this disclosure may not be currently available and may not be delivered on time or at all. Product roadmaps do not represent a commitment, obligation, or promise to deliver any product, feature, or functionality, and you should not rely on them to make your purchase decisions.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "We are committed to delivering a Tier 0 service for our customers",
      "date_published": "2021-10-27T16:48:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/how-to-protect-against-ransomware-in-2021/",
      "title": "How To Protect Against Ransomware In 2021",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eAs digital assets increase in value (in some cases, being \u003cem\u003ethe most\u003c/em\u003e valuable assets a company owns), threats become more profitable to criminals too. The largest ransomware payout made by an insurance company ($40 million) to date happened in 2021, and the trend doesn’t show any signs of slowing down.\u003c/p\u003e\u003cp\u003eThe major problem with attacks like these is that computers today are so fast and interconnected that malware can harness those resources to spread itself throughout the network and encrypt an enormous amount of files before the victim can respond.\u003c/p\u003e\u003cp\u003eUnfortunately, after the files have been encrypted, there is not much that can be done. Most modern ransomware has good, or at least good-enough implementation of encryption algorithms, all but guaranteeing that the victim won’t be able to recover their data.\u003c/p\u003e\u003ch2 id=\"How-Ransomware-Works\"\u003eHow Ransomware Works\u003c/h2\u003e\u003cp\u003eThe first versions of ransomware were poorly implemented, and the victim stood a decent chance of recovering their files without paying the ransom.\u003c/p\u003e\u003cp\u003eSince the virus had to encrypt the victim’s files as fast as possible to increase the chances of a successful attack, it relied on a \u003cstrong\u003esymmetric cipher\u003c/strong\u003e, such as AES, as they encrypt data much faster than asymmetric ciphers.\u003c/p\u003e\u003cp\u003eThe problem is that symmetric ciphers use the same key to encrypt \u003cem\u003eand\u003c/em\u003e decrypt the files.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/uG54F3Ra1JmRNUnLVBPWM/e7079f11b2a6f61114409660eebfe6d3/Uploaded_from_How_To_Protect_Against_Ransomware_In_2021\" alt=\"Symmetric cipher encryption\"/\u003e\n\u003c/p\u003e\u003cp\u003e\u003ci\u003eSymmetric cipher encryption\u003c/i\u003e\u003c/p\u003e\u003cp\u003eThe bad actor would have to hard code the key into the malware and hope that the victim wouldn’t have the means to look for the keys in the code, or they would have to send a copy to a remote server which they controlled and delete the key on the victim’s computer. Neither option is very good for the attacker.\u003c/p\u003e\u003cp\u003eMost modern ransomware uses a hybrid encryption mechanism. While asymmetric ciphers are slow and not meant to encrypt huge amounts of data, using them to encrypt just \u003cem\u003ethe encryption key\u003c/em\u003e created by a symmetric cipher is not a problem.\u003c/p\u003e\u003cp\u003eHere’s how it works. Before the attack, the attacker generates an asymmetric key pair, and the public key is embedded into the malware. Once the malware is executed, it encrypts the victim’s files with a fast, symmetric cipher, and its key will then be encrypted with the public key from earlier.\u003c/p\u003e\u003cp\u003eTo get their files back, the victim would need the attacker’s private key to decrypt the public key to then, finally, decrypt the files using the symmetric cipher key.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4sJ4KsUjN5Ez4b9u1A4YUY/4677b2dbb6a638166b57805c20b43c14/Uploaded_from_How_To_Protect_Against_Ransomware_In_2021\" alt=\"Asymmetric cipher encryption\"/\u003e\n\u003c/p\u003e\u003cp\u003e\u003ci\u003eAsymmetric cipher encryption\u003c/i\u003e\u003c/p\u003e\u003cp\u003e(This is assuming the attacker went through the trouble of providing a way for the victim to get their data back. They could just encrypt everything with AES and delete the key with no intention of ever recovering the data.)\u003c/p\u003e\u003cp\u003eOther than that, the only “realistic” scenario to decrypt the data is by brute-forcing it. I use quotes because it’s not really realistic – we already went over the math behind it. You would need more time than the age of the universe to decrypt AES-128 even if you were using all the computational power available today.\u003c/p\u003e\u003ch2 id=\"How-To-Protect-Against-Ransomware\"\u003eHow To Protect Against Ransomware\u003c/h2\u003e\u003cblockquote\u003e\u003cp\u003eWhen it comes to ransomware, the best defense is being \u003cem\u003eproactive\u003c/em\u003e instead of \u003cem\u003ereactive\u003c/em\u003e. If you got hit by ransomware and didn’t already have a plan in place, your chances of ever recovering your files are slim.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eWith that in mind, the tips below will help you mitigate some of the risks \u003cem\u003ebefore\u003c/em\u003e something bad happens.\u003c/p\u003e\u003ch3 id=\"1--Update-Your-Systems-Regularly\"\u003e1. Update Your Systems Regularly\u003c/h3\u003e\u003cp\u003eIn May 2017, a strain of ransomware known as WannaCry was deployed around the world, affecting more than 230,000 computers in 24 hours.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5Xhk4JfQznetFAIRvPo0mf/feb1235ce512cf13d7b581d24a526129/Uploaded_from_How_To_Protect_Against_Ransomware_In_2021\" alt=\"UWannaCry note\"/\u003e\n\u003c/p\u003e\u003cp\u003e\u003ci\u003eScreenshot of the WannaCry note\u003c/i\u003e\u003c/p\u003e\u003cp\u003eThe malware exploited a vulnerability in SMB, a file-sharing protocol in Windows, that allowed the virus to spread itself through the network without being executed by the user.\u003c/p\u003e\u003cp\u003eTo get infected, you didn’t need to run anything – being connected to the same network as someone else who ran it and having an unpatched version of Windows was enough.\u003c/p\u003e\u003cp\u003eMicrosoft had released a security update a month before, in April, so only the organizations that weren’t as diligent with their software updates were affected by the attack.\u003c/p\u003e\u003cp\u003eKeeping your systems up-to-date is your first line of defense, and in most cases, can be automated. Low-effort, high-reward.\u003c/p\u003e\u003ch3 id=\"2--Think-Hard-Before-Paying-The-Ransom\"\u003e2. Think Hard Before Paying The Ransom\u003c/h3\u003e\u003cp\u003eIf you’re hit by ransomware and your data is now encrypted, you might be tempted to throw the flag and pay the ransom. After all, in the short term, paying the ransom might seem like the less expensive option. But you should think hard before paying.\u003c/p\u003e\u003cp\u003eThere’s a reason why the official US government response is to “never negotiate with terrorists.” Caving in opens a can of worms and doesn’t guarantee that your problem will be solved.\u003c/p\u003e\u003cp\u003eFirst of all, paying the ransom doesn’t guarantee that the attackers will decrypt your data – they could just ask for more money instead. Furthermore, it signals that it’s profitable to target your company, and they (and others) will target your organization again in the future. A report by Cybereason found that 80% of the companies that pay the ransom are attacked again soon.\u003c/p\u003e\u003cp\u003eYou should also be aware that, to pressure you into paying the ransom, criminals may perform a double extortion attack, where they first exfiltrate proprietary company information before encrypting the files and then threaten to release those secrets if the ransom isn’t paid.\u003c/p\u003e\u003ch3 id=\"3--Make-a-Plan-For--Foul-Weather--in-Advance\"\u003e3. Make a Plan For “Foul-Weather” in Advance\u003c/h3\u003e\u003cp\u003eRegardless of the decision, it’s best if it’s made in advance. The stakeholders can keep a cool head and aren’t in a bind to come up with a solution on the fly.\u003c/p\u003e\u003cp\u003eEver noticed that laminated paper that every NFL coach holds during the games? They contain the plays they have planned for different game situations. It was pioneered by Bill Walsh during the 80s:\u003c/p\u003e\u003cp\u003e\u003cem\u003eHaving a well-thought-out plan ready to go in advance of a change in the weather is the key to success. In the closing moments [of a playoff game against the Raiders], we recovered a fumble. We were trailing by three points, and a field goal would send us into overtime. My job [as an assistant coach] was to figure out how to get us within range of a field goal quickly. Unfortunately, the severe pressure and absolute pandemonium up at the booth where I was sitting destroyed my thinking. I completely forgot the plays we had practiced that would have worked best under those circumstances, but equally important, I recognized (in retrospect) that I had no specific plan for what to do in that “foul-weather” circumstance.”\u003c/em\u003e\u003c/p\u003e\u003cp\u003eHe started scripting his entire opening drive after that game and then every “foul weather” situation he could think of before the game even started. Consider doing the same for ransomware – the procedures for what to do during an attack should be prepared in advance when you are \u003cem\u003enot\u003c/em\u003e under duress.\u003c/p\u003e\u003cp\u003eYour plan should be as detailed as you can get away with. Here are some things you could write explicit instructions for:\u003c/p\u003e\u003cul\u003e\u003cli\u003eWhat to do during an attack (step-by-step)\u003c/li\u003e\u003cli\u003eHow to contact the person in charge during an attack\u003c/li\u003e\u003cli\u003eHow communication will happen during the attack\u003c/li\u003e\u003cli\u003eWhere the backup is stored and how to retrieve it\u003c/li\u003e\u003cli\u003eHow to wipe the disks clean and how to restore backup images\u003c/li\u003e\u003cli\u003eList the partners or clients that would have to be notified and in which order, should such an attack happen\u003c/li\u003e\u003cli\u003eAnswer to difficult questions: Do you need to contact insurance? Which equipment would you need to rent or buy immediately to keep the operation running?\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"4--Be-Aware-of-Phishing-Emails\"\u003e4. Be Aware of Phishing Emails\u003c/h3\u003e\u003cp\u003ePhishing is the main attack vector used in ransomware cyberattacks. The attacker will send an initial malware disguised as a seemingly harmless file – for example, an Excel or Word document.\u003c/p\u003e\u003cp\u003eThis malware, known as a dropper, is responsible for downloading the main malware that will encrypt the files and possibly other malware to exfiltrate other valuable data it finds on the organization’s network: intellectual property, passwords, trade secrets, etc.\u003c/p\u003e\u003cp\u003ePhishing is a hard problem to solve; it works because people are focused on work and aren’t expecting to be tricked. However, here are some things that you can consider doing to reduce the attack surface of phishing attacks:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eImplement email filtering.\u003c/strong\u003e Block emails with dangerous extensions, such as .exe and .bat attached. It may stop some, but as mentioned before, sophisticated attacks will try to disguise the files.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eCreate a process for phishing response.\u003c/strong\u003e Here’s what we do at Auth0 when someone receives a phishing email.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eTrain employees at your organization.\u003c/strong\u003e Spam filters are very smart today, but even Google’s spam filter lets around 0.1% of spam emails reach your inbox. Employees must understand the risks of phishing emails.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThese measures won’t stop you from getting compromised, but they will stop the low-effort attacks that can be automated.  \u003c/p\u003e\u003ch3 id=\"5--Implement-IAM--Identity-and-Access-Management--and-a-Password-Manager-Where-You-Can\"\u003e5. Implement IAM (Identity and Access Management) and a Password Manager Where You Can\u003c/h3\u003e\u003cp\u003eThe second most common attack vector is trying to penetrate the network directly, either by brute force or by exploiting a vulnerability. Bloomberg reported in June that hackers were able to get into the network of the largest fuel pipeline in the US, Colonial Pipeline, and deploy a ransomware attack.\u003c/p\u003e\u003cp\u003eThe bad actors got in through a company VPN by using employee credentials found in a data breach. The VPN also wasn’t protected by 2FA, which could have prevented the hackers from getting in.\u003c/p\u003e\u003cp\u003eImplementing IAM (Identity and Access Management) controls help organizations manage who has access to what and prove they are who they say they are (for example, via fingerprint scanning or hardware tokens).\u003c/p\u003e\u003cp\u003eOn top of that, consider using a password manager. It’s likely that the employee used the same password elsewhere, and the bad actors simply used those same credentials to connect through the company’s VPN. A password manager ensures good password policies for all employees and makes sure that they don’t use duplicate passwords elsewhere.\u003c/p\u003e\u003ch3 id=\"6--Remove-Local-Administrative-Rights-From-Endpoints\"\u003e6. Remove Local Administrative Rights From Endpoints\u003c/h3\u003e\u003cp\u003eMost ransomware (and malware in general) perform many actions that require administrative rights during an attack. Removing such rights reduces the chance it will spread throughout the network.\u003c/p\u003e\u003cp\u003eEmployees shouldn’t have access to local administrative accounts, and the IT staff should not have administrative rights for day-to-day activities.\u003c/p\u003e\u003cp\u003eMoreover, the local admin passwords should never be the same across workstations, as the attacker may pass the hash across machines with the same password to move laterally throughout the network.\u003c/p\u003e\u003ch3 id=\"7--Restrict-Permissions-To-Run-Software--And-Macros-\"\u003e7. Restrict Permissions To Run Software (And Macros)\u003c/h3\u003e\u003cp\u003eOnly a few applications are needed to run the business on a day-to-day basis. Determine the few applications that are needed, and block any other application from running using Microsoft’s Group Policy if you’re a Windows user (macOS and Linux users must look for third-party solutions).\u003c/p\u003e\u003cp\u003eThis will prevent unauthorized processes, including those created by malware, from running.\u003c/p\u003e\u003ch3 id=\"8--Limit-Network-Access\"\u003e8. Limit Network Access\u003c/h3\u003e\u003cp\u003eAs mentioned earlier, direct network exploits, such as remote services like RDP (Remote Desktop Protocol), are the second most common infection vector.\u003c/p\u003e\u003cp\u003eReview your ports and block anything that you don’t use. For example, port 3389 (RDP) and port 445 (SMB) are commonly exploited by hackers to infiltrate your network.\u003c/p\u003e\u003cp\u003eIf you need them, limit them as much as possible. You probably don’t need your RDP port open to the Internet. Make it so that it’s only accessible via the organization’s VPN and secure it with 2FA.\u003c/p\u003e\u003cp\u003eAlso, create firewall rules to automatically block incoming access after sufficient failed attempts and use a filter to block any outgoing connection from unauthorized applications. Most malware will need to connect to a remote server to carry on its attack.\u003c/p\u003e\u003cp\u003eMake sure that your network is properly segmented to avoid losing network drives to a single endpoint infection. Create a guest network with extremely limited access for untrusted devices. Implement read-only shares so that you can restore backups with limited attack surface; separate subnets according to purpose or application.\u003c/p\u003e\u003ch3 id=\"9--Create-a-Robust-Backup-Solution\"\u003e9. Create a Robust Backup Solution\u003c/h3\u003e\u003cp\u003eNo system in the world is impenetrable – even the most well-funded corporations in the world have been compromised. Instead of betting that you are the exception, assume the worst and create a plan to mitigate the damage when all else fails.\u003c/p\u003e\u003cp\u003eAt roughly 3 cents per GB, it’s tough to beat hard drives when it comes to insurance against ransomware (but it doesn’t hurt to check if your insurance policy covers cyberattacks too).\u003c/p\u003e\u003cp\u003eWhen designing your backup plan, keep in mind that:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eIt must be automated.\u003c/strong\u003e Any backup that depends on human intervention is prone to be neglected at some point.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eIt must be rock-solid.\u003c/strong\u003e Test your snapshots from time to time. You don’t want to \u003cem\u003ethink\u003c/em\u003e you have your files backed up, only to discover it hasn’t been copying the proper files this whole time.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eIt must have at least one air-gapped copy.\u003c/strong\u003e Air-gapped backups (disks not connected to another computer or network) make sure that, if the ransomware spreads through your systems, at least one copy is safe. Since they require manual intervention – someone has to plug the drive-in and disconnect it afterward – air-gapped copies generally aren’t as up-to-date as other hard drives in your backup plan. Still, it’s better to have a one-week-old copy than to have no copy at all.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eIt must follow the 3-2-1 backup rule.\u003c/strong\u003e You must have three copies of your data, in at least two different media types, with one of them in an offsite location.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6gZ3ZuZ4THbAAXeggjhHcn/82b94644dfff001d0270d5a365e460f6/Uploaded_from_How_To_Protect_Against_Ransomware_In_2021\" alt=\"Create a Robust Backup Solution\"/\u003e\n\u003c/p\u003e\u003cp\u003e\u003ci\u003e\u003ca href=\"https://www.keepitsafe.com/blog/post/3-2-1-rule-for-cloud-backup/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSource\u003c/a\u003e\u003c/i\u003e\u003c/p\u003e\u003cp\u003eHow that plan is going to be implemented will depend on company policy (or personal preference). Having a backup in an offsite location could be as easy as using a third-party cloud provider, but it could be against company policy to have proprietary data uploaded to someone else’s cloud. So, it will vary.\u003c/p\u003e\u003cp\u003eIn the majority of cases, though, it makes sense to have central storage connected to the network performing automated backups, even if it is at risk of being affected by ransomware. It’s much easier to mirror the data to an offsite location or to air-gapped hard disks from one location than every computer on the network.\u003c/p\u003e\u003ch2 id=\"Staying-Safe\"\u003eStaying Safe\u003c/h2\u003e\u003cp\u003eDo the tips above \u003cem\u003eguarantee\u003c/em\u003e you won’t be hit by ransomware? No, but no one can make such a promise when it comes to security. Staying safe is a process you must continually engage in, and the pointers above are a good starting point.\u003c/p\u003e\u003cp\u003eRansomware attacks are still one of the most profitable attacks for bad actors, which means it’s one of the most costly for you. You can’t stop attacks from happening, as it’s completely outside of your control. What you \u003cem\u003ecan\u003c/em\u003e do, however, is to make it as costly as possible to attack your organization. And as the saying goes, you don’t have to outrun the bear, only the person running next to you.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Ransomware attacks are among the most profitable for criminals and remain the most prominent malware threat today",
      "date_published": "2021-10-27T14:48:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/what-is-smishing/",
      "title": "What is Smishing?",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eYou know \u003cem\u003eall\u003c/em\u003e about phishing. From time to time, emails purporting to be from Facebook or your bank drift into your inbox and insist you “verify your account.” Look closer and you spot the telltale signs of a scam: a sketchy-looking sender address, sloppy writing, and a complete lack of personalization. You sigh and hit delete.\u003c/p\u003e\u003cp\u003eIt’s easy to be cynical about opportunistic, mass-mailed phishing attempts. Although some look genuine to even the most cautious eye, others feel decidedly amateurish and are readily identifiable. Billions of emails are sent each month, with over 245,000 phishing-related websites created in January alone \u003ca href=\"https://docs.apwg.org/reports/apwg_trends_report_q1_2021.pdf\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eaccording to the Anti-Phishing Working Group (APWG)\u003c/a\u003e. But when it comes to SMS-based phishing, or ‘smishing,’ things are a little different.\u003c/p\u003e\u003cp\u003eSmishing is when a malicious actor harvests credentials and credit card details by pretending to be someone else over text. This novel spin on phishing has grown exponentially in recent years, with the volume of messages sent to North American phones \u003ca href=\"https://www.proofpoint.com/us/blog/threat-protection/mobile-phishing-increases-more-300-2020-chaos-continues\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eincreasing by 328% in Q3 2020 alone\u003c/a\u003e. Similar trends can be found in other territories. In the UK, one survey found 61% of respondents received \u003ca href=\"https://www.which.co.uk/news/2021/06/three-in-five-people-have-received-a-scam-delivery-text-in-the-last-year/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eat least one smishing text during 2020\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eFor the perpetrators, smishing can prove incredibly lucrative. For the victims, it can be financially devastating. This article will explain how the scam works, why it’s effective, and how individuals and organizations can fight back.\u003c/p\u003e\u003ch2 id=\"How-a-Smishing-Scam-Works\"\u003eHow a Smishing Scam Works\u003c/h2\u003e\u003cp\u003eIf you’re reasonably tech-savvy — or have listened to the dire warnings issued by tech companies, financial institutions, and governments — chances are high you understand the risk posed by traditional email-based phishing.\u003c/p\u003e\u003cp\u003eYou know that email accounts can be created and hijacked. Spammers can even spoof the origins of an email. And, after countless high-profile data breaches, you may have grudgingly reconciled with the reality that your personal information is irrevocably available online.\u003c/p\u003e\u003cp\u003eSmishing scams, on the other hand, feel comparatively opaque. How do attackers successfully impersonate well-known brands? How do they operate at such a large scale, sending tens of thousands of messages at a time?\u003c/p\u003e\u003cp\u003eLet’s start by looking at the methodology. Attackers have plenty of options when it comes to the bulk distribution of text messages. They may choose to buy a device created explicitly for that purpose, with examples available online for just a few hundred dollars. Alternatively, they can use a standard mobile phone or USB cellular modem, combined with an automation program that costs just $69.\u003c/p\u003e\u003cp\u003eThis isn\u0026#39;t the most inconspicuous method. In June, UK law enforcement were \u003ca href=\"https://www.gmp.police.uk/news/greater-manchester/news/news/2021/june/man-arrested-in-manchester-hotel-after-over-25000-phishing-messages-sent-in-one-day/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecalled to a hotel in Manchester\u003c/a\u003e after staff became suspicious of a guest carrying a bag filled with unusual-looking wires and electrical devices. Upon inspecting his room, police found a laptop containing 44,000 mobile numbers, as well as an SMS hardware gateway. They later determined the device was used to send 26,000 messages in the previous day alone.\u003c/p\u003e\u003cp\u003eAlternatively, as pointed out by veteran cybersecurity journalist Brian Krebs, attackers may choose a provider to send the messages out on their behalf. Earlier this year, UK authorities arrested the 20-year-old operator \u003ca href=\"https://krebsonsecurity.com/2021/02/u-k-arrest-in-sms-bandits-phishing-service/#comment-527047\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ebehind the SMS Bandits gateway\u003c/a\u003e, which he marketed within criminal circles as “spam friendly.” Messages sent via SMS Bandits impersonated government agencies, financial services organizations, and telecommunications providers.\u003c/p\u003e\u003cp\u003eNow, let\u0026#39;s talk about the composition of the text. SMS messaging is a relatively ‘flat’ medium. There is no room for a visual flair or branding. This works to the advantage of attackers, as they don’t have to painstakingly recreate the style of the organizations being impersonated. And many phishing approaches works\u003c/p\u003e\u003cp\u003eWithin the body of the text, the attacker faithfully adheres to the phishing playbook. One common tactic is to create a false sense of urgency. They want the recipient to be anxious, as they’ll be more likely to hand over their credentials without scrutinizing the message too closely.\u003c/p\u003e\u003cp\u003eThe pandemic has provided many examples of this. In May, a UK man was sentenced to 4 years and three months imprisonment after perpetrating a scam where \u003ca href=\"https://www.cps.gov.uk/cps/news/covid-19-fraudster-jailed-mass-cyber-scam\" target=\"_blank\" rel=\"noreferrer noopener\"\u003evictims were asked to provide their bank details\u003c/a\u003e in order to verify their eligibility for a Covid vaccine.\u003c/p\u003e\u003cp\u003eAnother SMS phishing campaign \u003ca href=\"https://www.f-secure.com/gb-en/consulting/our-thinking/how-smishing-uses-urgency-to-manipulate-victims-during-lockdown\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eidentified in South Africa in March 2020\u003c/a\u003e purported to be from local financial institutions and warned the recipient that their account would be terminated if they didn’t verify their credentials.\u003c/p\u003e\u003cp\u003eIt’s interesting to note that this campaign began during the early months of the first lockdown, at a point when many contact centers were operating at a vastly reduced capacity. The ensuing long wait times ultimately disincentivized recipients from trying to independently verify the message with their bank, which contributed to its success.\u003c/p\u003e\u003ch2 id=\"Why-is-Smishing-so-Effective-\"\u003eWhy is Smishing so Effective?\u003c/h2\u003e\u003cp\u003eIt\u0026#39;s hard to find solid data on the financial cost of smishing. In most cases, it is grouped together with traditional email phishing and ‘vishing’ (voice phishing), rather than a standalone category. However, police reports and testimony from victims suggest it can be hugely profitable for the perpetrators.\u003c/p\u003e\u003cp\u003eOne \u003ca href=\"https://inews.co.uk/news/pair-jailed-for-text-message-fraud-that-swindled-20m-from-bank-customers-and-funded-luxury-shopping-sprees-911561\" target=\"_blank\" rel=\"noreferrer noopener\"\u003egang made at least £20m over just eight years\u003c/a\u003e, allowing them to live a celebrity lifestyle of five-star hotels and designer clothing brands. Another man, \u003ca href=\"https://www.ukfinance.org.uk/press/press-releases/enfield-student-behind-scam-texts-jailed-22-months\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ea 22-year-old computer science student from London\u003c/a\u003e, made £125,000 before his arrest. In 2019, a Georgia federal court convicted three Romanian men for their role in a smishing scheme that \u003ca href=\"https://www.justice.gov/usao-ndga/pr/three-romanian-citizens-plead-guilty-participating-multi-million-dollar-vishing-and\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecost individuals and institutions an estimated $21M\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAnd then there are the victims. One Hong Kong flight attendant saw \u003ca href=\"https://www.scmp.com/news/hong-kong/law-and-crime/article/3141567/hong-kong-sees-sharp-rise-phishing-scams-victims\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eher $10,000 life savings\u003c/a\u003e drained after she clicked through a text purporting to be from her bank. A student in the UK was pushed \u003ca href=\"https://www.bbc.co.uk/news/uk-england-birmingham-56500599\" target=\"_blank\" rel=\"noreferrer noopener\"\u003einto her overdraft after receiving a text ostensibly from Barclays Bank\u003c/a\u003e. Another woman in Topeka, Kansas \u003ca href=\"https://www.ksnt.com/news/local-news/topeka-woman-falls-victim-to-text-message-scam-warning-others-what-to-look-for/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003elost $600\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eSo, why is it so effective? It falls down to a number of reasons.\u003c/p\u003e\u003cul\u003e\u003cli\u003eSmishing is a relatively novel phenomenon, especially when compared to traditional email phishing, and much of its growth has occurred in recent years. In the UK, the volume of smishing messages \u003ca href=\"https://news.sky.com/story/smishing-reports-increase-nearly-700-in-first-six-months-of-this-year-12407504\" target=\"_blank\" rel=\"noreferrer noopener\"\u003egrew 700% in the first six months of 2021 alone\u003c/a\u003e. There isn\u0026#39;t the same level of awareness, and therefore, skepticism, among the wider populace.\u003c/li\u003e\u003cli\u003eText messages have a visibility advantage over emails. While your Gmail inbox may contain thousands of unread messages, odds are good you read every single text that shows up on your phone.\u003c/li\u003e\u003cli\u003eFor scammers hoping to establish credibility, SMS messages are hard to get wrong. As mentioned, it is a purely plaintext medium, with no visual flair to mimic.\u003c/li\u003e\u003cli\u003eThis simplicity allows scammers to quickly respond to events. Delivery scams — which account for over half of all smishing attempts in the UK — are a good example, having proliferated after the UK concluded its withdrawal from the EU. In the US, smishing epidemics have coincided with the distribution of stimulus checks, tax season, and the widespread difficulties in obtaining unemployment insurance during the early months of the pandemic.\u003c/li\u003e\u003cli\u003eFinally, many of the tactics that make traditional email phishing successful also work over text, such as the creation of a false sense of urgency.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Fighting-Back\"\u003eFighting Back\u003c/h2\u003e\u003cp\u003eIt’s easy to dismiss smishing as a purely consumer problem. That would be a mistake. First, there is an overlap between the tools and services used by the general public, and those used by the public and private sectors. Gmail is a good example. You might also use the same bank or the same social media platforms.\u003c/p\u003e\u003cp\u003eAdditionally, there are many examples of text messages being used to distribute malware, or as the basis for a spear-phishing campaign. This raises the prospect of smishing becoming a major headache for public and private-sector organizations.\u003c/p\u003e\u003cp\u003eThat all said, SMS remains a prime mode of communication due to its ease of use and sheer ubiquity. Although services like WhatsApp and Facebook Messenger offer more functionality, you can’t beat the humble text message for sheer universality.\u003c/p\u003e\u003cp\u003eAn \u003ca href=\"https://www.smscomparison.com/mass-text-messaging/2021-statistics/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eestimated 96% of US adults\u003c/a\u003e own a device capable of receiving text messages, while 95% of SMS messages are read and responded to within three minutes of receipt.\u003c/p\u003e\u003cp\u003eIt\u0026#39;s therefore crucial that organizations proactively develop a strategy for combating smishing, with awareness at the heart of any such strategy. Employees and partners must understand that text messages are not inherently safe. They should be treated with the same level of cautiousness as email.\u003c/p\u003e\u003cp\u003eEmployees should also feel empowered to report suspected smishing scams targeting the business. The sooner an organization becomes aware of an attack in progress, the quicker it can act.\u003c/p\u003e\u003cp\u003eAuth0 Security Culture Manager Annybell Villarroel notes that we’re seeing an increase in smishing attempts and recommends creating a culture of security and awareness for employees and partners through regular training.\u003c/p\u003e\u003cp\u003eBut the biggest thing for all of us is just to learn to take a “skeptical pause,” says Annybell. “Pausing to ask yourself if the message makes sense can make a big difference. It can take you out of an emotional response back to logic. That extra few seconds can save you from a smishing click.”\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "How text messaging scams work and why a ‘skeptical pause’ can save you",
      "date_published": "2021-10-26T16:02:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/how-social-engineering-has-and-hasnt-evolved-over-time/",
      "title": "How Social Engineering Has (And Hasn’t) Evolved Over Time",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eLet’s face it. We all make mistakes. Even the most diligent, well-intentioned employee can inadvertently open the floodgates to an attack. Telecoms giant Verizon illustrated this earlier this year, when it published the 2021 edition of its Data Breach Investigations Report (DBIR).\u003c/p\u003e\u003cp\u003eThe DBIR examined approximately 5,250 successful security breaches, gathering data about the methodologies used. It found 35 percent of attacks incorporated a social element. Of these, the vast majority (85%) used phishing tactics.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eIn short:\u003c/strong\u003e you can deploy all the technological measures you want, but unless you address the human element, an attacker can defeat your defenses with a simple phone call or email.\u003c/p\u003e\u003cp\u003eSocial engineering has always intrigued me. There’s something weirdly compelling about someone circumventing the defenses of a company with nothing but a winning smile and a confident tone, and industry raconteurs like Jenny “The People Hacker” Radcliffe and Kevin Mitnick have some incredible stories to share.\u003c/p\u003e\u003cp\u003eBut there’s something else. Many of the tactics successfully employed by social engineers can be found throughout history, used in the fields of warfare, espionage, and criminality. Shadowy state actors targeting government departments can be found using the same playbook as Classical-era Greek military tacticians.\u003c/p\u003e\u003cp\u003eThere’s a reason for this. Humans are social animals. We have certain inherent traits. We’re often willing to trust strangers, and we help those we don’t necessarily know. We live by a set of rules, both written and unwritten. These attributes allowed us to develop societies, permanent settlements, and eventually nation states. But they can also be exploited by malicious actors seeking to further a particular goal.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eTechnologies and tactics change. Human nature is a constant.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eThis article will explore some of these historical parallels. We’ll take a journey through time that starts in the Roman city of Brundisium, circa 19 BCE, with detours through the swinging sixties, the latter years of the Vietnam War, and the early days of the Internet. We’ll put the tactics used by social engineers into context, and show why they’re so effective. And finally, we’ll learn how to defend against them.\u003c/p\u003e\u003ch2 id=\"Our-Unpatchable-Human-Zero-Days\"\u003eOur Unpatchable Human Zero-Days\u003c/h2\u003e\u003cp\u003eBefore we start our trip, it’s probably a good idea to talk about the human qualities commonly targeted by social engineers.\u003c/p\u003e\u003cp\u003eWhile researching this post, I sought out as many tales of real-world social engineering as I could find. I thumbed through books by Chris Hadnagy and Kevin Mitnick. I listened to conference talks from the likes of Paul Wilson and Jenny Radcliffe. I devoured entire episodes of The Darknet Diaries.\u003c/p\u003e\u003cp\u003eAs I went through, I noted most attacks focused on certain human attributes. These included:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eCuriosity\u003c/strong\u003e\u003cbr/\u003e\u003cem\u003e\u003c/em\u003eEvery great scientific and technological leap started with the words: “What if?” But you don’t need to be Einstein to have curiosity. We use trial-and-error and experimentation to make sense of our environment. Social engineers frequently exploit this when harvesting credentials or \u003ca href=\"https://darknetdiaries.com/episode/100/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edeploying malware\u003c/a\u003e.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eTrust\u003c/strong\u003e\u003cbr/\u003e\u003cem\u003e\u003c/em\u003eLife’s easier (and nicer) when you assume everyone acts in good faith. And so, we take people at their word. If an unfamiliar voice calls and claims to be from your bank or phone company, you might instinctively believe them. Social engineers can — and often do — exploit this.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eThe Desire to Help\u003c/strong\u003e\u003cbr/\u003e\u003cem\u003e\u003c/em\u003eSince we’re social animals, collaboration is inevitable. If we see someone in need of assistance, chances are we’ll offer it. When exploiting this, a social engineer might pretend to be a low-ranking employee in need of credentials, access, or documents. They’ll count on the target feeling pity for them.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eFear\u003c/strong\u003e\u003cbr/\u003e\u003cem\u003e\u003c/em\u003eThe “fear factor” frequently features in social engineering attacks. You’re probably familiar with phishing emails claiming your bank account has been hacked, or your social media profile will be deleted unless you click a link. This tactic pressurizes the target into making hasty decisions and dropping their skepticism.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eThe Desire to Comply\u003c/strong\u003e\u003cbr/\u003e\u003cem\u003e\u003c/em\u003eAlmost all organizations — both public and private sector — are hierarchical. There’s a pecking order, with some people at the top, and others at the bottom. We tend to listen to (and obey) those higher up in the echelons. Attackers can exploit this by masquerading as high-ranking employees and issuing edicts to junior employees.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eEach of the historical examples listed in this article uses these innate attributes, often to devastating effect.\u003c/p\u003e\u003ch2 id=\"From-USB-Sticks-to-Wooden-Horses\"\u003eFrom USB Sticks to Wooden Horses\u003c/h2\u003e\u003cp\u003eThe year is 2008. A threat actor, most likely working for a foreign state, had broken into the heart of the United States defense establishment. Showing remarkable skil, the attacker had successfully deployed a data-siphoning worm onto a Central Command (CENTCOM) computer. From there, it proliferated like a fungus, spreading undetected into other computers.\u003c/p\u003e\u003cp\u003eWilliam J. Lynn III, an Obama-era Deputy Secretary of Defense, later described it as \u0026#34;\u003ca href=\"https://archive.defense.gov/home/features/2010/0410_cybersec/lynn-article1.aspx\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe most significant breach of U.S. military computers ever.\u003c/a\u003e\u0026#34; He wasn’t wrong. The worm took almost 14 months to eradicate, and it infected both classified and unclassified machines. It’s hard to quantify the damage it inflicted on the Department of Defense.\u003c/p\u003e\u003cp\u003eAdding insult to injury, the damage was arguably self-inflicted. The virus, later dubbed Agent.biz, was distributed on USB sticks dropped in the parking lot at an unnamed Middle East military base. A CENTCOM employee picked one up and plugged it into their laptop.\u003c/p\u003e\u003cp\u003eThe Department of Defense never identified the employee responsible for the first infection. We’ll never know their motivations. Were they curious about the drive’s contents? Did they want to reunite the drive with its owner? Or did they just want to save the $20 on a new memory stick? It’s not clear.\u003c/p\u003e\u003cp\u003eIn the end, it doesn’t matter. The damage was done. The Department of Defense was forced to spend critical resources identifying and wiping infected machines, as they eliminated the worm one computer at a time. And it forced the military to radically change their approach to computer security, ultimately leading to the creation of the United States Cyber Command.\u003c/p\u003e\u003cp\u003eStill, I can’t help but wonder what the ancient Roman poet Virgil would think of this tale. Two millennia prior, Virgil was spending his twilight years in the city of Brundisium (now Brindisi), where he worked on his opus, the epic poem Aeneid.\u003c/p\u003e\u003cp\u003eAeneid described the Siege of Troy. This is perhaps the most famous battle that never actually took place — or, at least, in the way depicted. Pretty much everything below is apocryphal. Still, it’s a great story, so indulge me.\u003c/p\u003e\u003cp\u003eHere’s the TL;DR: Greece was at war with Troy. It wasn’t going well. Both sides were effectively at a stalemate. Troy had retreated behind the walls of its capital city, where it could hold out indefinitely. After an exhausting decades-long siege, the Greeks were eager to end the campaign. And so, their leader, Odysseus, conjured a devious ruse.\u003c/p\u003e\u003cp\u003eGreece would pretend to surrender. Their forces would retreat. By means of apology, they left a large wooden horse at the gates of the city, which the Trojans interpreted as a tribute to their greatness.\u003c/p\u003e\u003cp\u003eWe all know what happened next. The Trojans hauled the horse into the city, unbeknownst to the shock force of Greek warriors lurking within its interior. As night fell, they crept out and unlocked the gates to the city. The rest of the Greek army surged forward, flooding in and bringing the war to its conclusion in a matter of hours.\u003c/p\u003e\u003cp\u003eTechnologically, USB drives and wooden horses couldn’t be more different. But in both of the examples cited, they were used to inflict devastating losses to the target. More importantly, they were only effective because the victim implicitly trusted they wouldn’t be used to harm them. Trust can be a dangerous thing.\u003c/p\u003e\u003ch2 id=\"Helpful-Humans\"\u003eHelpful Humans\u003c/h2\u003e\u003cp\u003eIn the 1990s, Kevin Mitnick was the ultimate cybercrime bogeyman. He won his notoriety by breaking into some of the most powerful technology and telecommunications companies in the world. His misadventures were front-page news and even inspired two feature-length movies (one documentary, another dramatic).\u003c/p\u003e\u003cp\u003eNow, Mitnick is a legitimate cybersecurity professional and author. Through talks, articles, and books, he warns about the risks posed by social engineering attacks, giving examples from his own criminal past.\u003c/p\u003e\u003cp\u003eMany of his tales describe interactions with relatively low-level employees at the target company. He would build a rapport with the worker and gather information, which he would later use to achieve his larger goals.\u003c/p\u003e\u003cp\u003eIn one example, detailed in his book \u003ca href=\"https://www.amazon.com/Ghost-Wires-Adventures-Worlds-Wanted/dp/0316037729\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGhost in the Wires\u003c/a\u003e, Mitnick sought to access the phone records of a friend he suspected of working for the FBI. He repeatedly called the phone provider, each time building a rapport with the employee and teasing out details relating to the account. Once he gathered enough information, he convinced the provider to fax the target’s previous invoice, claiming he needed it to rebuild his phone book.\u003c/p\u003e\u003cp\u003eMitnick was successful because the employees didn’t question whether he was the real account holder. They weren’t motivated by data security, but rather customer happiness. They simply weren’t suspicious. He would successfully re-use these tactics again and again, before the FBI brought his criminal career to an abrupt end in 1995.\u003c/p\u003e\u003cp\u003eTwenty-five years earlier, a group of Anti-Vietnam War activists used a similar approach when breaking into a Delaware draft office. The group had already penetrated several military offices, as they sought to frustrate the recruitment of new soldiers into the highly unpopular war. They were seasoned burglars.\u003c/p\u003e\u003cp\u003eThis Delaware office, however, proved a challenge. It was protected by an advanced, heavy duty door. Their usual tools — crowbars and lock picks — were useless here. And so, they had to think outside the box.\u003c/p\u003e\u003cp\u003eDuring the daytime, the office’s door was unlocked. A member of the group crept in and left a note behind. It read: “Please don’t lock this door tonight.”\u003c/p\u003e\u003cp\u003eIt was simple. Obvious, even. And it worked. The group later returned under the cover of darkness. They approached the door and twisted its handle. It opened with a satisfying click. They gathered the documents they came for and left. In 2014, after the statute of limitations expired, the group would tell their tale to veteran Washington Post journalist Betty Medsger.\u003c/p\u003e\u003cp\u003eNo doubt, the draft office was staffed by seasoned military servicemen. They understood risk, and no doubt knew of the widespread opposition to the Vietnam war. And yet, this experience was overridden by their desire to be helpful, and to comply with the request of a colleague or superior. They trusted the note’s provenance, and didn’t think to consider that it may have been left by an adversary.\u003c/p\u003e\u003cp\u003eThe term “social engineering” sounds deceptively modern. In reality, it could be used to describe the kind of subterfuge used by criminals and military leaders throughout history.\u003c/p\u003e\u003cp\u003eYou can draw parallels between the approaches detailed in Chris Hadnagy’s book \u003ca href=\"https://www.amazon.com/Human-Hacking-Friends-Influence-People/dp/0063001780\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eHuman Hacking\u003c/a\u003e, which focuses on their application in legitimate offensive security procedures, and those used by convicted fraudster Frank Abagnale, as described in his book \u003ca href=\"https://www.amazon.com/s?k=catch+me+if+you+can+book\u0026amp;gclid=Cj0KCQjwwNWKBhDAARIsAJ8HkhcNRSvRdVegZPvCiI176SCZvOnGn3rDQGLMGOoA039SYYck0AfzRFAaAtWEEALw_wcB\u0026amp;hvadid=409998390125\u0026amp;hvdev=c\u0026amp;hvlocphy=9033339\u0026amp;hvnetw=g\u0026amp;hvqmt=e\u0026amp;hvrand=1184131583828329460\u0026amp;hvtargid=kwd-421448854\u0026amp;hydadcr=24630_11410023\u0026amp;tag=googhydr-20\u0026amp;ref=pd_sl_7yubf00gv6_e\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCatch Me If You Can\u003c/a\u003e. The basic concepts are the same, with the only real point of differentiation being how they’re used.\u003c/p\u003e\u003cp\u003eComplicating matters, it’s now possible to perform social engineering attacks at scale. Through phishing (as well as its evil siblings, Smishing, or SMS phishing, and Vishing, or phishing via voice), a bad actor can reach millions in a matter of moments.\u003c/p\u003e\u003cp\u003eIn 2020, the FBI received 231,000 reports of phishing attacks — or double that previous year’s figure. The real figure is almost certainly significantly higher, with most attempts unreported to the bureau. It affects non-profit organizations, businesses, and individuals, albeit to varying levels, and the costs can measure in the millions.\u003c/p\u003e\u003cp\u003eEarlier this year, US authorities sentenced the ringleader of a Business Email Compromise (BEC) scam to ten years in prison. The man, Obinwanne Okeke, stole $11m from companies in the construction industry by issuing fake invoices with the funds directed to foreign bank accounts.\u003c/p\u003e\u003cp\u003eLooking further back, in May 2000, Filipino malware developer Onel De Guzman caused an estimated $5.5bn to $8.7bn in damages, after he released a self-propagating worm masquerading as a love letter. The ILOVEYOU worm sought to steal dial-up internet credentials, and inadvertently took down the mail services of the UK parliament, Microsoft, and the US Department of defense.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eHere’s the good news: You can take steps to mitigate the risk social engineering poses to your organization.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eTechnical measures, as recommended by the US Computer Emergency Response Team (US-CERT), include the use of multi-factor authentication (MFA), email filtering, and firewalls. It helps to stay abreast of recent developments, and the Anti-Phishing Working Group provides helpful information about new threat actors and trends.\u003c/p\u003e\u003cp\u003eTraining also plays an important role. It’s possible your colleagues are unaware that social engineering exists. Teach them about the tactics used and the importance of verifying the identities and details of those they interact with, along with your organization’s phishing reporting procedures. If you don’t have one, make a point to create one, even if it’s something as simple as a dedicated inbox, where employees can forward suspicious communications.\u003c/p\u003e\u003cp\u003eFinally, creating a culture of transparency and collaboration is important. Your colleagues should feel able to report security issues without fear or judgment.\u003c/p\u003e\u003cp\u003e\u0026#34;Our innate human traits make us vulnerable to social engineering attacks, and always will. The best and most scalable defense is to create a strong security culture, both within organizations and across society at large. When we empower people to detect and respond to these attacks, we build a more secure Internet for all,\u0026#34; said Annybell Villarroel, Security Awareness and Culture Manager. To find out how Auth0 can meet your organization’s identity needs, click here.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "There’s no patch for humanity, but that’s not a bad thing",
      "date_published": "2021-10-25T14:47:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/should-you-give-users-access-before-they-register/",
      "title": "Should You Give Users Access Before They Register",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eGating your content can be something of a gamble. On the one hand, allowing users to prematurely access your product means that you might wind up serving a lot of users who you never truly monetize. On the other hand, putting a login wall between potential users and content could lead to slower growth and a smaller user base.\u003c/p\u003e\u003cp\u003eAccording to Blue Research, \u003ca href=\"http://www.prweb.com/releases/2012/1/prweb9086226.htm\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e54% of users will abandon a website\u003c/a\u003e if the registration process is too cumbersome. Good product designers know all too well that interrupting a user in their intended path can be a great way to lose them.\u003c/p\u003e\u003cp\u003eOver and over again, the data shows that the more cumbersome a signup process is, the less likely a user is to bother with it at all. \u003ca href=\"http://unbounce.com/conversion-rate-optimization/how-to-optimize-contact-forms/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eEighty-six percent of users\u003c/a\u003e say lengthy forms make them quit registrations, and 88% will simply \u003ca href=\"https://web.archive.org/web/20171209150724/http://www1.janrain.com/rs/janrain/images/Industry-Research-Value-of-Social-Login-2013.pdf\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eenter incomplete or false information\u003c/a\u003e if the signup process is too exhaustive or intrusive.\u003c/p\u003e\u003cp\u003eBut how do you solve for registration drop off when your signup process \u003cem\u003edoes\u003c/em\u003e follow best practices? Lazy registration could be the solution.\u003c/p\u003e\u003ch2 id=\"What-is-Lazy-Registration-\"\u003eWhat is Lazy Registration?\u003c/h2\u003e\u003cp\u003eLazy registration allows users to access content \u003cem\u003ebefore\u003c/em\u003e they register as a user. This allows users to experience the product without inputting any of their information and can increase the loyalty and lifetime value (LTV) of a registered user base by building a relationship with the user ahead of account creation.\u003c/p\u003e\u003cp\u003eWhere you put the login wall is a conversation similar to deciding where to put a paywall within an app. Ultimately, you’ll have to look at what’s within your user experience that users are going to want to see and use for themselves before deciding the app has value.\u003c/p\u003e\u003cp\u003eLazy registration has the potential to mitigate some install-to-signup dropoff by giving users time to explore the app, and then prompting them to set up an account when they want to save the information or personalize their experience.\u003c/p\u003e\u003ch3 id=\"How-progressive-profiling-fits-in\"\u003eHow progressive profiling fits in\u003c/h3\u003e\u003cp\u003eLazy registration doesn’t just benefit the users of an application. By collecting data from your users as they interact with the application, you’ll be able to tailor their experience to their needs, without bombarding them with questions.\u003c/p\u003e\u003cp\u003eThis process is known as progressive profiling, and it means that your users get the content that’s most relevant to them, without being inundated with requests for more information. Examples of progressive profiling include incentivizing certain behaviors with points or rewards, collecting data from pop-ups as the user progresses through the application, or even prompting users to add more data via email or push notification.\u003c/p\u003e\u003cp\u003eProgressive profiling used in tandem with lazy registration allows you to collect a rich store of data on your users, without putting the burden on them. You’re able to build a relationship with them and establish trust ahead of asking for their personal information and use their behavioral data to serve them with more relevant information and experiences.\u003c/p\u003e\u003cp\u003eIf your motivation for implementing lazy registration is for the purposes of progressively profiling your users, it might make sense to also look at incorporating some form of single sign on, or SSO, into your user signup experience.\u003c/p\u003e\u003cp\u003eSSO allows you to build a \u003ca href=\"https://auth0.com/learn/social-login/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ericher user profile\u003c/a\u003e, without asking your users manually for a lot of information. Implementing SSO can also have a dramatic impact on your install-to-signup conversion rate. Slowly learning about your consumers also aids in serving more targeted information to them. In the case of Moogsoft, their team found \u003ca href=\"https://auth0.com/case-studies/moogsoft/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eafter implementing SSO\u003c/a\u003e with Auth0, that 60% of their users were signing up using Google.\u003c/p\u003e\u003ch2 id=\"Lazy-Registration-Doesn-t-Have-to-Mean-Zero-Data-Collection\"\u003eLazy Registration Doesn’t Have to Mean Zero Data Collection\u003c/h2\u003e\u003cp\u003eIn the age-old tug of war between user experience and data collection, it’s the product designer’s job to ensure that the former isn’t being compromised too much for the latter. Often it’s inevitable that there will be some form of the tradeoff between an easy user experience and a richer user profile, but technology is rapidly accelerating to close in on this gap.\u003c/p\u003e\u003cp\u003eApps can use lazy registration to encourage brand engagement ahead of the acquisition, much like an eCommerce store allows users to browse products without an account, right up until they want to favorite an item or complete a checkout. Lazy registration coupled with SSO and progressive profiling can reduce the burden of effort on the user to register for use while allowing for richer data collection, and an all around more customizable user experience. If you’d like to learn how lazy registration can benefit your business and your customers, please \u003ca href=\"https://auth0.com/contact-us\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ereach out to the team at Auth0\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "The business case for lazy registration",
      "date_published": "2021-10-21T15:03:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/top-6-cybersecurity-predictions-for-2022/",
      "title": "Top 6 Cybersecurity Predictions for 2022",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eFrom the Colonial Pipeline attack, which resulted in fuel shortages across much of the East Coast, to the devastating breach on Microsoft Exchange, it’s safe to say 2021 was a tumultuous year for cybersecurity. But what will the next year look like?\u003c/p\u003e\u003cp\u003eI reached out to Auth0’s leading security and privacy experts to hear their predictions for 2022, and to learn how organizations will grapple with a changing threat landscape and the ongoing pandemic.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/e8LLSbz9kUTIssTNzD33k/1c58e52ea17e0bf67b104322e8ade137/cybersecurity-prediction-sep1\" alt=\"Predictions\"/\u003e\u003c/p\u003e\u003ch2 id=\"1--The-Visibility-Challenge\"\u003e1. The Visibility Challenge\u003c/h2\u003e\u003cp\u003eIt’s been almost eighteen months since the Covid-19 pandemic forced us to rethink everyday life. The workplace was no exception. States ordered tens of millions to work from home, as they sought to limit the virus’ spread. To accommodate this flood of remote working, IT departments raced against the clock to build the necessary technology infrastructure.\u003c/p\u003e\u003cp\u003eNow, the dust has settled. The pressure has eased slightly. It’s time to take a breath. But don’t get too comfortable.\u003c/p\u003e\u003cp\u003eThe next challenge for IT leaders — and CISOs in particular — is in securing the newly acquired devices and services underpinning remote working. Monitoring and threat detection will likely prove to be the biggest headache.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e“Visibility is fundamental to security,” explained Cassio Sampaio, Senior Vice President of Product at Auth0. “You can’t stop attacks you don’t see. It’s always better to see attacks in progress, rather than after they’ve occurred.”\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eMany workplaces deployed new hardware and software in record time to ensure the continuity of the business, leaving little time to integrate them into existing security workflows. Sampaio says the big priority for 2022 will be to bring this infrastructure into view.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e“With teams working remotely for the foreseeable future, now’s the time for IT teams to start focusing on security, with monitoring and threat detection both high priorities,” Sampaio added. “Hybrid working, as well as the growth of BYOD and cloud computing, has shifted the definition of a security perimeter. It now includes identity systems, as well as firewalls and IPS tools. It’s critical organizations extend their visibility to include these.”\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"2--Secure-by-Default-Becomes-the-Norm\"\u003e2. Secure by Default Becomes the Norm\u003c/h2\u003e\u003cp\u003eSecurity breaches can occur because of simple user errors. In some cases, vendors inadvertently facilitate that by issuing products with insecure default configurations, putting the onus on the customer to harden them.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e“Far too often, security is treated as the user’s responsibility. This approach has arguably contributed to several high-profile incidents,” said Shiven Ramji, Chief Product Officer at Auth0.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eIn August, researchers at Upguard learned some apps running on a popular infrastructure provider were leaking sensitive customer and business data totaling 39m records. This included Covid-19 contact tracing details, payroll records, and biographical customer data.\u003c/p\u003e\u003cp\u003eUpGuard attributed the issue to a default configuration that allowed unauthorized third parties to remotely query the underlying data source. But instead of considering it a bug, the provider described the issue as a well-documented feature.\u003c/p\u003e\u003cp\u003eIn the face of massive data breaches and other unwelcome security lapses, we expect vendors will take a more proactive approach in creating guardrails for their customers. A Secure by Design approach will become the default. This philosophy sees products shipped with the most cautious settings by default, accompanied by other vital protective features, including Multi-Factor Authentication (MFA) and Privileged Access Management (PAM)\u003c/p\u003e\u003ch2 id=\"3--Malicious-Actors-Will-Exploit-Supply-Chain-Woes\"\u003e3. Malicious Actors Will Exploit Supply Chain Woes\u003c/h2\u003e\u003cp\u003eGlobal supply chains are in disarray. The cost of shipping products between continents spiked during the pandemic, with ships and containers both in short supply. Meanwhile, soaring demand for semiconductors has resulted in widespread shortages of graphics cards, games consoles, and cars, with the “chip drought” expected to last until 2023.\u003c/p\u003e\u003cp\u003eAmid this turmoil, we can expect to see malicious actors take advantage of the situation, exploiting the widespread sense of desperation among businesses and consumers. There is evidence this has already started to occur, with the FBI reporting an increase in Business Email Compromise (BEC) attacks at the start of the year.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e“If you’re a school awaiting a shipment of Chromebooks for remote learning, or a retailer expecting stock from overseas, you might not question an unexpected invoice, especially if it comes from someone you know. The urgency may override your skepticism,” said Annybell Villaroel, Security Awareness and Culture Manager at Auth0.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"4--Diversity-of-Thought-and-Skill-Becomes-Regarded-as-an-Asset\"\u003e4. Diversity of Thought and Skill Becomes Regarded as an Asset\u003c/h2\u003e\u003cp\u003eThe security landscape continuously evolves. In the past decade alone, we’ve witnessed the emergence of malware-as-a-service (MaaS), threat actors expanding by franchising their brand and technology to others, and attacks upon national infrastructure. Deepfake technology and bulk SMS messaging have been used to devastating effect.  \u003c/p\u003e\u003cp\u003eIT teams now face increasingly sophisticated opponents, with attacks delivered in greater volume over a variety of mediums. Combatting this will require organizations to draw from a wider range of skills when filling cybersecurity roles.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e“Bad actors have already diversified their thinking. Businesses must do the same,” said Jameeka Aaron, CISO at Auth0. \u003cbr/\u003e“I’ve always argued for a holistic approach to information security,” she added. “Technical skills are important, but so are the soft skills.”\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eTo find candidates with these skills, organizations will have to broaden their hiring criteria and recruit from places they didn’t previously.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e“To respond to this new threat landscape, businesses will have to shift their focus away from GPAs and certifications. You need people who can build bridges within the organization and evangelize good security practices. And going forward, I can imagine hiring managers will recognize communication and language skills as assets, too,” said Aaron.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"5--Consumer-patience-wanes-over-privacy-breaches\"\u003e5. Consumer patience wanes over privacy breaches\u003c/h2\u003e\u003cp\u003eFive years ago, Have I Been Pwned — a service that allows members of the public to check whether their personal credentials have been leaked — held records on 1.4 billion accounts. Today, that figure is almost 11.5 billion.\u003c/p\u003e\u003cp\u003eCoinciding with that almost tenfold rise is a greater awareness of security breaches among the general public, and signs their patience has begun to wane. According to Auth0’s latest CIAM survey, 92% of consumers expect businesses to keep their personal information safe.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e“A decade ago, security breaches were smaller and less likely to be headline news,” said Sampaio. “Now, they’re front-page news, and they’ve ensnared some of the largest brands in the world. People are tired and scared, and they want businesses to raise their game.”\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003ePerhaps surprisingly, the survey showed that a larger percentage of businesses, 97%, believe they are obligated to protect their customers’ personal information.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e“This figure likely has its roots in many places. Security breaches are bad PR and are hugely costly for the company involved,” said Sampaio.\n“Recent legislation, most notably GDPR, LGPD, and APPI, introduces significant monetary penalties for organizations that experience a security breach. That raises the pressure further.”\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"6--Consumers-Begin-Expecting-Data-Portability---Interoperability\"\u003e6. Consumers Begin Expecting Data Portability \u0026amp; Interoperability\u003c/h2\u003e\u003cp\u003eFrom healthcare and financial services to social networks, consumers increasingly recognize the value of data interoperability and portability. It allows you to seamlessly share medical records between practitioners, to see your banking and credit card information from a single central hub, and port your playlist between streaming services.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e“One of the most popular apps in the App Store is Mint, which lets users track spending across their accounts. In the US, FHIR (Fast Healthcare Interoperability Resources) is making it easier for doctors to see the information held on their patients by other medical professionals. From a consumer’s perspective, interoperability is something that makes their lives easier, and data portability allows them to make real choices about who they do business with,” said Lucy McGrath, VP of Privacy at Auth0.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/11v4gylcGVWijlKWnhibFw/f7e091c1883197d00af99737574c649d/cybersecurity-prediction-sep2\" alt=\"Interoperability\"/\u003e\u003c/p\u003e\u003cp\u003eData portability is already a consumer right in Europe thanks in part to GDPR and a number of global sectoral laws - particularly in finance and banking. McGrath expects demand for both portability and interoperability to increase in 2021 and beyond. The OECD has outlined the detailed benefits and challenges in its report \u003cem\u003eData portability, interoperability and digital platform competition, OECD Competition Committee Discussion Paper,\u003c/em\u003e \u003ca href=\"https://www.oecd.org/daf/competition/data-portability-interoperability-and-digital-platform-competition-2021.pdf\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e“It’s likely that we’ll see consumers’ expectation for choice - data portability and interoperability - enshrined in more global laws. It’s an exciting space that is spurring innovation - it’s essential the technology supporting the choice continues to protect the privacy of consumers and security of their data in these complex ecosystems” McGrath said.\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Security leaders will increase visibility and diversity of thought to meet consumer (and business) expectations",
      "date_published": "2021-10-20T14:51:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/a-tour-through-the-owasp-top-10/",
      "title": "A Tour Through the OWASP Top 10",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eOctober is \u003ca href=\"https://www.dhs.gov/national-cyber-security-awareness-month\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNational Cyber Security Awareness Month\u003c/a\u003e. On top of that, OWASP just celebrated its 20th anniversary. To celebrate, we’re going to run through the newly updated \u003ca href=\"https://www.owasptopten.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOWASP TOP 10\u003c/a\u003e to remind everyone of how you can better protect your applications, your businesses, and your customers from unlawful and damaging cyber attacks. We’ll also be highlighting where the updates were made and why and throw in some tips on how strengthening your identity solution can help mitigate these threats.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eThe new Top 10 is still a working draft, and OWASP is soliciting \u003ca href=\"https://github.com/OWASP/Top10/issues\" target=\"_blank\" rel=\"noreferrer noopener\"\u003efeedback\u003c/a\u003e on errors and corrections.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"What-is-OWASP-\"\u003eWhat is OWASP?\u003c/h2\u003e\u003cp\u003eThe \u003ca href=\"https://www.owasp.org\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOpen Web Application Security Project\u003c/a\u003e (OWASP) is a non-profit organization that was set up to help raise awareness around web application security and provides guidance on how to incorporate preventative measures into your applications, infrastructure, and internal processes.  \u003c/p\u003e\u003cp\u003eThey have several projects, including \u003ca href=\"https://www.owasp.org/index.php/OWASP_Juice_Shop_Project\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ean insecure JavaScript application used for security training\u003c/a\u003e, but the one that we’re focusing on today is the newly updated 2021 edition of their list of the top 10 threats to web app security.  \u003c/p\u003e\u003cp\u003eUpdated regularly, the OWASP Top 10 lists the main security threats that affect web applications today. Each entry enumerates the threat, shows possible attack vectors, and highlights preventive measures to reduce the risk of such threat. At Auth0, we take steps to mitigate most of the issues outlined below, so when you delegate your authentication needs to us, a lot of this is already taken care of for you.\u003c/p\u003e\u003cp\u003eLet’s run through the list, looking at the threats and what we could be doing to make sure our own applications are secure and examining some features of the Auth0 platform that help to mitigate or entirely remove such threats.\u003c/p\u003e\u003cp\u003eFor a high-level overview of the list updates, please refer to this handy chart, provided by \u003ca href=\"https://owasp.org/Top10/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOWASP\u003c/a\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3GzLwhF5nSZnDaHvvotBLf/3d6cca202946de7ce52e3ef02865082e/Uploaded_from_A_Tour_Through_the_OWASP_Top_10\" alt=\"A Tour Through the OWASP Top 10\"/\u003e\u003c/p\u003e\u003ch2 id=\"-1--Broken-Access-Control\"\u003e#1: Broken Access Control\u003c/h2\u003e\u003cp\u003eMoving up to the #1 spot from its 2017 position at #5, broken access control is an umbrella term for possible weaknesses associated with the implementation of a reliable access control system. Access control systems have the ability to distinguish users based on privileges or permissions and determine who gets what access to content and functions. Weaknesses emerging from access control systems can be leveraged by attackers to elevate their permissions to levels they shouldn’t have. Some examples of this are:  \u003c/p\u003e\u003cul\u003e\u003cli\u003eFailing to prevent access to ‘members only’ pages when the user is not logged in or does not have the right permissions to view the page.\u003c/li\u003e\u003cli\u003eNot validating URL parameters that could be changed by the user (e.g., swapping one user ID out for another).\u003c/li\u003e\u003cli\u003eTrusting that cookie values have not been altered where the value can be used to determine the user’s role.\u003c/li\u003e\u003cli\u003eForgoing security considerations in access control token management\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eOnce Auth0 issues access and ID tokens, they cannot be revoked in the same way as cookies with session IDs for server-side sessions. As a result, tokens should be issued for relatively short periods and then \u003ca href=\"https://auth0.com/docs/security/tokens/refresh-tokens\" target=\"_blank\" rel=\"noreferrer noopener\"\u003erefreshed\u003c/a\u003e periodically if the user remains active. You can revoke refresh tokens in case they become compromised. Auth0 treats token revocation as though the token has been potentially exposed to malicious adversaries. Taking care to validate user permissions is key. Do not trust any input that could be modified by the user when it comes to working out what that user can do.\u003c/p\u003e\u003ch2 id=\"-2--Cryptographic-Failures\"\u003e#2: Cryptographic Failures\u003c/h2\u003e\u003cp\u003eFormerly sitting at #3 and referred to as “Sensitive Data Exposure,” this entry in the OWASP Top 10 focuses on failures related to cryptography (or lack thereof) which often lead to exposure of sensitive data. It also deals with protecting sensitive information under normal operating conditions. It’s about handling sensitive data securely, encrypting data at rest, and being diligent about holding only as much data as you need only for as long as you need it. One of the reasons that the EU’s \u003ca href=\"https://auth0.com/gdpr\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGeneral Data Protection Regulation\u003c/a\u003e (GDPR) exists today is because of improper handling of sensitive personal data.  \u003c/p\u003e\u003cp\u003eSome things that you can do to help prevent sensitive data being stolen from your application include:  \u003c/p\u003e\u003cul\u003e\u003cli\u003eMaking sure that web traffic is encrypted and transmitted over HTTPS using a valid SSL certificate and that \u003ca href=\"https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet\" target=\"_blank\" rel=\"noreferrer noopener\"\u003einsecure connections are upgraded where possible\u003c/a\u003e. \u003ca href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLet’s Encrypt\u003c/a\u003e issue \u003cstrong\u003efree\u003c/strong\u003e SSL certificates, making it very easy to make sure your web traffic is secure.\u003c/li\u003e\u003cli\u003eEncrypting \u003cem\u003eand\u003c/em\u003e signing any browser cookies that contain sensitive information.\u003c/li\u003e\u003cli\u003eRemoving any sensitive data that is no longer needed.\u003c/li\u003e\u003cli\u003eHashing passwords using a strong hashing algorithm such as Bcrypt or PBKDF2.\u003c/li\u003e\u003cli\u003eEncrypting sensitive data at rest.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eNote that using automatic database encryption technology could still leave you exposed if an SQL injection attack is successful, as the data has to be read and decrypted at the database level. Doing the encryption and decryption step as part of your core application logic would help mitigate this.\u003c/p\u003e\u003ch2 id=\"-3--Injection\"\u003e#3: Injection\u003c/h2\u003e\u003cp\u003eInjection flaws are a well-known attack vector and have been around for a long time. This vector particularly impacts legacy code. Despite slipping two spots from its former status as #1, OWASP continues to recognize SQL injection as a common attack that is not only easy to exploit and detect as a weakness in an application but can also have devastating effects if successfully exploited by an attacker. Injection has been expanded to include the former #7 — Cross-site scripting (XSS). This type of attack mostly involves the injection of unsanitized input that causes the user to unwittingly interact with a malicious site or file.  \u003c/p\u003e\u003cp\u003eIn most cases, these types of attacks are successful because either:  \u003c/p\u003e\u003cul\u003e\u003cli\u003ethe application relies on user input that has not been sanitized directly in an SQL query, or;\u003c/li\u003e\u003cli\u003ethe query itself is not parameterized.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eAssuming that all user input could potentially be malicious is a good mantra to have when validating and processing it. \u003ca href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eParameterizing your SQL queries\u003c/a\u003e can also help to protect your datastore from malformed queries manipulating your data in undesirable and damaging ways.  \u003c/p\u003e\u003cp\u003eAs an example of what SQL query parameterization looks like, imagine a query that inserts a new user into a database:  \u003c/p\u003e\u003cpre\u003e\u003ccode\u003esql \u003cspan\u003e=\u003c/span\u003e db\u003cspan\u003e.\u003c/span\u003eprepare \u003cspan\u003e\u0026#34;INSERT INTO users (name, email) VALUES (\u0026#39;\u003cspan\u003e\u003cspan\u003e#{\u003c/span\u003ename\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u0026#39;, \u0026#39;\u003cspan\u003e\u003cspan\u003e#{\u003c/span\u003eemail\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u0026#39;)\u0026#34;\u003c/span\u003e\nsql\u003cspan\u003e.\u003c/span\u003eexecute\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the code snippet above, the values for \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eemail\u003c/code\u003e are inserted into the SQL string without any sanitization performed on the input values. If those input values were to come from form fields, then an attacker could potentially supply malicious values that malform the SQL string and perform an attack. The same query using parameterized values might look like the following:  \u003c/p\u003e\u003cpre\u003e\u003ccode\u003esql \u003cspan\u003e=\u003c/span\u003e db\u003cspan\u003e.\u003c/span\u003eprepare \u003cspan\u003e\u0026#34;INSERT INTO users (name, email) VALUES (?, ?)\u0026#34;\u003c/span\u003e\nsql\u003cspan\u003e.\u003c/span\u003eexecute \u003cspan\u003e\u0026#39;some_user\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;some_user@email.com\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn this case, the values can be escaped and sanitized by the database library before they are included in the SQL statement. This way the SQL statement cannot be malformed in such a way that it can do damage or expose data.  \u003c/p\u003e\u003cp\u003eIn more recent times, \u003ca href=\"https://www.owasp.org/index.php/Testing_for_NoSQL_injection\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNoSQL Injection\u003c/a\u003e has become a factor when using NoSQL databases such as Mongo. Although it doesn’t use SQL, it’s still potentially susceptible to attacks when user input has not been validated and sanitized, as the query itself can be manipulated. Validating your user input and rejecting values that do not conform to an expected format would be a good strategy.\u003c/p\u003e\u003cp\u003eSQL and NoSQL injection attacks are just a subset of a broad category of injection attacks, which also includes \u003ca href=\"https://cwe.mitre.org/data/definitions/77.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCommand\u003c/a\u003e, \u003ca href=\"https://cwe.mitre.org/data/definitions/917.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eExpression Language\u003c/a\u003e, and \u003ca href=\"https://www.owasp.org/index.php/LDAP_injection\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLDAP\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eMany XSS issues can be mitigated by making sure that any data retrieved from third-party sources is properly encoded according to the context. Also, using frameworks that contain built-in mechanisms for sanitizing user input (such as Ruby on Rails or Play Framework) would go a long way to protecting your applications from these types of attacks.\u003c/p\u003e\u003ch2 id=\"-4--Insecure-Design\"\u003e#4: Insecure Design\u003c/h2\u003e\u003cp\u003eMaking its debut at #4 on this year\u0026#39;s list, Insecure Design is a new entry that focuses on the design and architectural flaws. It is defined by OWASP as a broad category that centers around missing or ineffective control design.\u003c/p\u003e\u003cp\u003eBefore we go further into this one, it’s important to understand that there is a difference between insecure design and insecure implementation. We differentiate between design flaws and implementation defects for a reason; they have different root causes and remediation. A secure design can still have implementation defects leading to vulnerabilities that may be exploited. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks.\u003c/p\u003e\u003cp\u003eInsecure design issues can be identified and remediated through effective threat modeling in the design phase. Threat modeling should be performed early in the development cycle when potential issues can be caught early and remedied, preventing a much costlier fix down the line. Threat modeling methods are used to create:\u003c/p\u003e\u003cul\u003e\u003cli\u003ean abstraction of the system (Assets, components involved, and data flow between them)\u003c/li\u003e\u003cli\u003epersonae of potential attackers and attack surfaces\u003c/li\u003e\u003cli\u003ea catalog of potential threats that may arise\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe outcome of threat modeling is documentation that outlines secure design recommendations and requirements for the system under consideration. This helps identify potential vulnerabilities earlier in the software development lifecycle.\u003c/p\u003e\u003ch2 id=\"-5--Security-Misconfiguration\"\u003e#5: Security Misconfiguration\u003c/h2\u003e\u003cp\u003eMoving up one spot from #6, this entry in the Top 10 list has been identified by OWASP as something that is easy to exploit, easy to discover, and extremely common. It concerns themes such as:  \u003c/p\u003e\u003cul\u003e\u003cli\u003eOut of date security patches on the host system\u003c/li\u003e\u003cli\u003eApplication framework security feature not turned on or improperly configured\u003c/li\u003e\u003cli\u003eDefault accounts, passwords, and secure keys left enabled and unchanged\u003c/li\u003e\u003cli\u003eUnused or default ports and services enabled on the host system\u003c/li\u003e\u003cli\u003eVerbose error pages or directory listing turned on\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis item also incorporates aspects of the former #4 on the list, XML External Entities (XXE). An XXE attack is designed to expose a vulnerability in poorly configured XML parsers. Such attacks can be used to expose sensitive data (such as reading system password files) or invoke a \u003ca href=\"https://msdn.microsoft.com/en-us/magazine/ee335713.aspx\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDenial of Service\u003c/a\u003e (DoS) attack on a resource.\u003c/p\u003e\u003cp\u003eIt is important to make sure that the host system running your applications is updated with the latest security patches, and that your application frameworks have all of the appropriate security features turned on in order to mitigate these types of misconfiguration vulnerabilities.  \u003c/p\u003e\u003cp\u003eAnother serious concern in this area is making sure that any secret keys for third-party platforms (such as Auth0) are not committed and uploaded to your source control provider along with the rest of your code, particularly if your application is open source. These can be scanned by attackers using automation tools. Better to store these keys securely separate from your source code.\u003c/p\u003e\u003ch2 id=\"-6--Vulnerable-and-Outdated-Components\"\u003e#6: Vulnerable and Outdated Components\u003c/h2\u003e\u003cp\u003eThis entry jumped three spots from 2017 and was renamed from “using components with known vulnerabilities.” Software these days tends to make use of many third-party components, and so being diligent about which version of these components you are using and keeping them up to date is paramount in protecting your application from attacks that stem from vulnerable dependencies.  \u003c/p\u003e\u003cp\u003eUnfortunately, the number of dependencies that a given application uses — directly or indirectly — can sometimes make identifying and triaging vulnerable components difficult, usually meaning that the task doesn’t get done and developers are completely unaware as to their existence.  \u003c/p\u003e\u003cp\u003eOWASP recommends a few tools that can help to identify and upgrade components that present a security risk, including their own \u003ca href=\"https://www.owasp.org/index.php/OWASP_Dependency_Check\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOWASP Dependency-Check\u003c/a\u003e. Node.js applications using NPM version 5.10.0 or 6 and above can make use of the ‘\u003ca href=\"https://docs.npmjs.com/cli/audit\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eaudit\u003c/a\u003e’ command in the terminal, which can \u003ca href=\"https://blog.npmjs.org/post/173719309445/npm-audit-identify-and-fix-insecure\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eidentify and automatically upgrade dependencies\u003c/a\u003e that have been identified as vulnerable.  \u003c/p\u003e\u003cp\u003eAnother popular tool (and one that we use ourselves here at Auth0) for the checking of vulnerabilities in dependencies is \u003ca href=\"https://snyk.io/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSnyk\u003c/a\u003e. Snyk can be set up to evaluate your projects directly in GitHub or can be used as a \u003ca href=\"https://snyk.io/docs/using-snyk/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecommand-line tool\u003c/a\u003e to act directly on your project code.\u003c/p\u003e\u003ch2 id=\"-7--Identification-and-Authentication-Failures\"\u003e#7: Identification and Authentication Failures\u003c/h2\u003e\u003cp\u003eFormerly sitting at #2 and called “broken authentication,” this entry is close to our hearts here at Auth0. OWASP acknowledges this as easily exploitable with extreme damage potential.  \u003c/p\u003e\u003cp\u003eBroken authentication covers many things to do with authenticating users with an application or service, including:  \u003c/p\u003e\u003cul\u003e\u003cli\u003eAutomated brute-force attacks using known password lists\u003c/li\u003e\u003cli\u003ePermission of weak or well-known passwords\u003c/li\u003e\u003cli\u003eStorage of plain-text or weakly-hashed passwords over strong hashes\u003c/li\u003e\u003cli\u003eLack of \u003ca href=\"https://auth0.com/docs/multifactor-authentication\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emulti-factor authentication (MFA)\u003c/a\u003e\u003c/li\u003e\u003cli\u003eImproper invalidation of a session when logging out or after a period of inactivity\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eImplementing features like Auth0’s adaptive MFA into your application will help prevent \u003ca href=\"https://auth0.com/blog/what-is-credential-stuffing\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecredential stuffing\u003c/a\u003e and other brute force attacks, as the attacker will not be able to complete the authentication steps. Regarding passwords, validating for weak or well-known passwords using a common password list and hashing the user’s password using a strong hashing algorithm (such as \u003ca href=\"https://en.wikipedia.org/wiki/Bcrypt\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eBcrypt\u003c/a\u003e or \u003ca href=\"https://en.wikipedia.org/wiki/PBKDF2\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ePBKDF2\u003c/a\u003e) take the protection a step further. Never use a weak hash like MD5, and never store your passwords in plain text.  \u003c/p\u003e\u003cp\u003eIt’s also good practice to purposefully use vague login failure messages when your users enter an incorrect username or password. Otherwise, attackers may be able to identify valid accounts that they could use in order to instigate an attack.\u003c/p\u003e\u003cp\u003eThe Auth0 identity platform has built-attack protection to address most of the issues around brute-force attacks, including cross-site scripting attacks (XSS) and strong password hashing are all handled for you. Additionally, we make it very easy to turn on and \u003ca href=\"https://auth0.com/blog/auth0-introduces-adaptive-mfa/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eintegrate MFA into your applications\u003c/a\u003e for that extra level of security.\u003c/p\u003e\u003ch2 id=\"-8--Software-and-Data-Integrity-Failures\"\u003e#8: Software and Data Integrity Failures\u003c/h2\u003e\u003cp\u003eAnother new entry for 2021, this category includes the former #8: Insecure Deserialization. OWASP expanded the definition to include other ways software and data integrity can slip between the cracks and end in calamity. An insecure CI/CD pipeline, using plug-ins or modules from untrusted repositories or CDNs, along with situations where data is serialized in a structure that an attacker can access and modify are all possible vectors of attack covered by this category.\u003c/p\u003e\u003cp\u003eA partial list of security measures to implement includes:\u003c/p\u003e\u003cul\u003e\u003cli\u003eEnsuring your CI/CD processes are securely configured and have access controls in place to enable integrity checks on the code flowing through them.\u003c/li\u003e\u003cli\u003eIncorporate software supply chain security controls to verify the integrity of any modules and plug-ins being used.\u003c/li\u003e\u003cli\u003eRun any unsigned or unencrypted data through an integrity check before usage.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIf your application deserializes objects from untrusted sources, you could be open to this kind of attack. The only safe way to prevent these from happening is to not accept serialized objects from untrusted locations. If that’s not possible, OWASP recommends using digital signatures to verify integrity, enforcing strict primitive type checking, and performing deserialization logic inside a low-privilege environment.\u003c/p\u003e\u003ch2 id=\"-9--Security-Logging-and-Monitoring-Failures\"\u003e#9: Security Logging and Monitoring Failures\u003c/h2\u003e\u003cp\u003eEntry 9 was bumped up from #10 and renamed from “insufficient logging and monitoring.” Being able to discover breaches, attack patterns, and user activity is a key property of a secure system. Without \u003ca href=\"https://auth0.com/blog/log-streaming--what-it-is-and-why-it-matters/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esufficient logging\u003c/a\u003e and application monitoring, it will be difficult to ascertain how a system was breached, where the breach came from, and where the holes lie in your application security strategy. If you don’t know where the holes are, you can’t fill them in!  \u003c/p\u003e\u003cp\u003eOWASP recommends that application activity — particularly around authentication and permission activities — are logged in a common format that can be easily processed by a centralized logging system. As much detail about user context should be logged and retained as possible without compromising their personal data, which not only includes personally identifiable information (PII) but also secure keys, access tokens, and session tokens. If detailed information that could be used to identify a person must be recorded for forensics purposes, use a secure data warehouse coupled with tight access controls available only to trusted individuals.\u003c/p\u003e\u003ch2 id=\"-10--Server-Side-Request-Forgery--SSRF-\"\u003e#10: Server-Side Request Forgery (SSRF)\u003c/h2\u003e\u003cp\u003eMaking a debut at #10 this year is Server-Side Request Forgery, an item from OWASPs industry survey. Despite relatively low incidence rates (per the survey), this attack vector rates high in potential impact and damage, so it garnered the #10 spot. SSRF is a flaw that occurs when a web app fails to validate a user-supplied URL. An attacker can exploit this scenario to send a malicious request to any destination server they want.\u003c/p\u003e\u003cp\u003eThere are numerous common ways to prevent this type of attack, some are more apt to be overlooked than others:\u003c/p\u003e\u003cul\u003e\u003cli\u003eDisable HTTP redirection\u003c/li\u003e\u003cli\u003eSegment remote access functionality to a secure network separate from potential target resources\u003c/li\u003e\u003cli\u003eValidate all client-supplied input data\u003c/li\u003e\u003cli\u003eEmploy a robust identity and access management solution\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Mitigating-Security-Issues-with-Auth0\"\u003eMitigating Security Issues with Auth0\u003c/h2\u003e\u003cp\u003eThe Auth0 platform has many features which help protect your application and your users from security attacks. For starters, simply by using our Universal Login offering, you are effectively delegating all the work of making your login pages \u003ca href=\"https://auth0.com/docs/hosted-pages/login#why-use-universal-login\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esecure and resilient to attacks\u003c/a\u003e.  \u003c/p\u003e\u003cp\u003eAdditionally, \u003ca href=\"https://auth0.com/blog/multifactor-authentication-mfa/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMulti-factor Authentication\u003c/a\u003e (MFA) can easily be enabled on any application to provide an extra layer of security when your users log in and decrease the likelihood of unauthorized access. Options for completing the MFA step include receiving push notifications and codes via mobile authenticator apps.  \u003c/p\u003e\u003cp\u003eAuth0’s \u003ca href=\"https://auth0.com/docs/anomaly-detection\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAnomaly Detection\u003c/a\u003e includes options for protecting against brute-force attacks, blocking repeated attempts to log in, and notifying designated recipients of such unauthorized attempts. Furthermore, enabling our \u003ca href=\"https://auth0.com/breached-passwords\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eBreached Password Detection\u003c/a\u003e feature means that your users will be notified if we detect that their credentials were part of a published security breach.  \u003c/p\u003e\u003cp\u003e\u003ca href=\"https://auth0.com/blog/log-streaming--what-it-is-and-why-it-matters/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eComprehensive logging\u003c/a\u003e is a feature of the Auth0 platform, which can be interrogated for events, such as:  \u003c/p\u003e\u003cul\u003e\u003cli\u003eFailed login attempts\u003c/li\u003e\u003cli\u003eFailed password changes\u003c/li\u003e\u003cli\u003eFailed Access Token exchanges\u003c/li\u003e\u003cli\u003eToo many failures\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eLogs can also be shipped to other providers via \u003ca href=\"https://marketplace.auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emarketplace\u003c/a\u003e integrations, such as \u003ca href=\"https://auth0.com/docs/extensions/logstash\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLogstash\u003c/a\u003e, \u003ca href=\"https://auth0.com/docs/extensions/papertrail\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ePapertrail\u003c/a\u003e, and \u003ca href=\"https://auth0.com/docs/extensions/splunk\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSplunk\u003c/a\u003e.  \u003c/p\u003e\u003cp\u003eAs added protection against \u003ca href=\"https://us.norton.com/internetsecurity-wifi-what-is-a-man-in-the-middle-attack.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eman-in-the-middle attacks\u003c/a\u003e, we also enforce HTTPS connections to our services, meaning that any non-HTTPS connections are upgraded according to \u003ca href=\"https://tools.ietf.org/html/rfc6797\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eHSTS specifications\u003c/a\u003e.  \u003c/p\u003e\u003cp\u003eFinally, to protect against XXE attacks through SAML, we use \u003ca href=\"https://github.com/auth0/xmldom\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eour own fork of XML parsing library \u0026#39;XMLDOM\u0026#39;\u003c/a\u003e, which does not allow DOCTYPE entity parsing at all—a key component of XXE attacks.\u003c/p\u003e\u003ch2 id=\"Summary\"\u003eSummary\u003c/h2\u003e\u003cp\u003eIn this article, we’ve had a brief run through the newly updated OWASP Top 10 and examined the main threats to web application security that exist today. We\u0026#39;ve also considered some of the possible mitigations against such threats and how we can all do better to help protect our businesses and our users from problems arising as a result of poor and insecure implementation.\u003c/p\u003e\u003cp\u003eSome of these solutions are easy to implement and take only a short amount of time, while others require a bit more thought and planning to do properly. However, anything that can be done to improve the security of your products — especially where personal information and other sensitive data is concerned — can only be beneficial, and could be a key factor in \u003ca href=\"https://auth0.com/blog/the-worst-data-breaches-of-2021-q1-and-q2/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epreventing a data disaster\u003c/a\u003e should an attack be attempted.\u003c/p\u003e\u003cp\u003eWe\u0026#39;ve also looked at several key features of the Auth0 platform that bolster the security of web applications and APIs, from relieving you of a lot of these issues through Universal Login to rich audit trails through comprehensive logging. To start taking advantage, \u003ca href=\"https://auth0.com/signup\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esign up for a free account today\u003c/a\u003e or \u003ca href=\"https://auth0.com/contact-us\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ereach out to our team of identity experts\u003c/a\u003e to have your questions answered.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "A quick look at the refreshed OWASP Top 10 to celebrate Cybersecurity Awareness Month",
      "date_published": "2021-10-19T14:56:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/exploring-auth0-aspnet-core-authentication-sdk/",
      "title": "Exploring the Auth0 ASP.NET Core Authentication SDK",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eAuth0 brings you the new \u003ca href=\"https://github.com/auth0/auth0-aspnetcore-authentication\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eASP.NET Core Authentication SDK\u003c/a\u003e, which improves your development experience and better integrates with Auth0 features! Let\u0026#39;s take a tour through the main features of the SDK to see how easy it becomes to integrate your ASP.NET applications with Auth0.\u003c/p\u003e\u003ch2 id=\"The-SDK-Overview\"\u003eThe SDK Overview\u003c/h2\u003e\u003cp\u003eSo far, you were used to relying on the standard \u003ccode\u003eMicrosoft\u003cspan\u003e.\u003c/span\u003eAspNetCore\u003cspan\u003e.\u003c/span\u003eAuthentication\u003cspan\u003e.\u003c/span\u003eOpenIdConnect\u003c/code\u003e package to integrate your ASP.NET application with Auth0. That library does its job very well. However, when you move away from implementing the simple login and logout, your code starts becoming verbose until it gets messy.\u003c/p\u003e\u003cp\u003eYou can mitigate this issue by \u003ca href=\"https://auth0.com/blog/using-csharp-extension-methods-for-auth0-authentication/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eimplementing your authentication with C# extension methods\u003c/a\u003e. But why do it yourself when the experts at Auth0 can provide you with a ready-to-use SDK?\u003c/p\u003e\u003cp\u003eThe  \u003ca href=\"https://github.com/auth0/auth0-aspnetcore-authentication\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eASP.NET Core Authentication SDK\u003c/a\u003e allows you to write less code to integrate Auth0 authentication and authorization into your ASP.NET applications. It simplifies configuration, supports additional query parameters and refresh tokens, natively supports \u003ca href=\"https://auth0.com/docs/organizations\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Organizations\u003c/a\u003e and user invitations. It is actually a wrapper around the \u003ccode\u003eMicrosoft\u003cspan\u003e.\u003c/span\u003eAspNetCore\u003cspan\u003e.\u003c/span\u003eAuthentication\u003cspan\u003e.\u003c/span\u003eOpenIdConnect\u003c/code\u003e library, but it brings you a standard and easy way to integrate Auth0 into your applications.\u003c/p\u003e\u003cp\u003eYou can use the SDK for all your ASP.NET applications that require authentication, such as ASP.NET MVC apps, Razor web apps, and Blazor server apps.\u003c/p\u003e\u003ch2 id=\"Install-the-ASP-NET-Core-Authentication-SDK\"\u003eInstall the ASP.NET Core Authentication SDK\u003c/h2\u003e\u003cp\u003eYou can install the Auth0 ASP.NET Core SDK by using the NuGet Package Manager UI in Visual Studio, as shown below:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/52AB2b6XDotBDpBlPPR1F7/f4b71a1b33c3cecb56b46d96b2e27788/installing-auth0-aspnet-core-authentication-sdk.png\" alt=\"Installing the Auth0 ASP.NET SDK with NuGet Package Manager UI\"/\u003e\u003c/p\u003e\u003cp\u003eYou can also install it by running the following command in the Package Manager Console:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eInstall-Package\u003c/span\u003e Auth0\u003cspan\u003e.\u003c/span\u003eAspNetCore\u003cspan\u003e.\u003c/span\u003eAuthentication\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOr you can use the following command in a terminal window:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edotnet \u003cspan\u003eadd\u003c/span\u003e package Auth0.AspNetCore.Authentication\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIndependently of your preferred approach, you will get the \u003ccode\u003eAuth0\u003cspan\u003e.\u003c/span\u003eAspNetCore\u003cspan\u003e.\u003c/span\u003eAuthentication\u003c/code\u003e dependency in your ASP.NET project.\u003c/p\u003e\u003ch2 id=\"The-Basic-Login-Use-Case\"\u003eThe Basic Login Use Case\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s start to take a look at the way the new SDK improves your developer experience. Of course, you need an Auth0 account to integrate your ASP.NET application with Auth0. If you haven\u0026#39;t, you can \u003ca href=\"https://auth0.com/signup\" data-amp-replace=\"CLIENT_ID\" data-amp-addparams=\"anonId=CLIENT_ID(cid-scope-cookie-fallback-name)\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esign up for a free one\u003c/a\u003e right now. Follow \u003ca href=\"https://auth0.com/docs/quickstart/webapp/aspnet-core#configure-auth0\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe Auth0 ASP.NET Core Authentication SDK quickstart to register your application and get your application keys\u003c/a\u003e. \u003c/p\u003e\u003cp\u003eThe following is the typical code you write to enable authentication in your ASP.NET application when using \u003ccode\u003eMicrosoft\u003cspan\u003e.\u003c/span\u003eAspNetCore\u003cspan\u003e.\u003c/span\u003eAuthentication\u003cspan\u003e.\u003c/span\u003eOpenIdConnect\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIServiceCollection\u003c/span\u003e services\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eDefaultAuthenticateScheme \u003cspan\u003e=\u003c/span\u003e CookieAuthenticationDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eDefaultSignInScheme \u003cspan\u003e=\u003c/span\u003e CookieAuthenticationDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eDefaultChallengeScheme \u003cspan\u003e=\u003c/span\u003e CookieAuthenticationDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddCookie\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddOpenIdConnect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e options \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eAuthority \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e$\u0026#34;https://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eConfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eClientId \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientId\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eCallbackPath \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003ePathString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/callback\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eTokenValidationParameters \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eTokenValidationParameters\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n      NameClaimType \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eEvents \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eOpenIdConnectEvents\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n      OnRedirectToIdentityProviderForSignOut \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e logoutUri \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e$\u0026#34;https://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eConfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/v2/logout?client_id=\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eConfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientId\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e postLogoutUri \u003cspan\u003e=\u003c/span\u003e context\u003cspan\u003e.\u003c/span\u003eProperties\u003cspan\u003e.\u003c/span\u003eRedirectUri\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eIsNullOrEmpty\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003epostLogoutUri\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n          \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003epostLogoutUri\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eStartsWith\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n          \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e// transform to absolute\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e request \u003cspan\u003e=\u003c/span\u003e context\u003cspan\u003e.\u003c/span\u003eRequest\u003cspan\u003e;\u003c/span\u003e\n            postLogoutUri \u003cspan\u003e=\u003c/span\u003e request\u003cspan\u003e.\u003c/span\u003eScheme \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e\u0026#34;://\u0026#34;\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e request\u003cspan\u003e.\u003c/span\u003eHost \u003cspan\u003e+\u003c/span\u003e request\u003cspan\u003e.\u003c/span\u003ePathBase \u003cspan\u003e+\u003c/span\u003e postLogoutUri\u003cspan\u003e;\u003c/span\u003e\n          \u003cspan\u003e}\u003c/span\u003e\n          logoutUri \u003cspan\u003e+=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e$\u0026#34;\u0026amp;returnTo=\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e Uri\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eEscapeDataString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003epostLogoutUri\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        context\u003cspan\u003e.\u003c/span\u003eResponse\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eRedirect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003elogoutUri\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        context\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eHandleResponse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003ereturn\u003c/span\u003e Task\u003cspan\u003e.\u003c/span\u003eCompletedTask\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI will not go through that code to explain every single step. You just need to know it implements the login and logout features in your applications by relying on the \u003ca href=\"https://auth0.com/docs/login/universal-login\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Universal Login\u003c/a\u003e page.\u003c/p\u003e\u003cp\u003eBy using the Auth0 ASP.NET Core Authentication SDK, your code shortens as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIServiceCollection\u003c/span\u003e services\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuth0WebAppAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eDomain \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eClientId \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientId\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eImpressive, isn\u0026#39;t it? 😲\u003c/p\u003e\u003cp\u003eThe SDK takes care of all the configuration stuff you previously needed to do manually. And that\u0026#39;s just the beginning! 🎉\u003c/p\u003e\u003ch2 id=\"Get-an-Access-Token\"\u003eGet an Access Token\u003c/h2\u003e\u003cp\u003eWhat if you want to call an API from your ASP.NET application? In this case, you need to \u003ca href=\"https://auth0.com/docs/security/tokens/access-tokens/get-access-tokens#control-access-token-audience\" target=\"_blank\" rel=\"noreferrer noopener\"\u003erequest an access token for a specific audience\u003c/a\u003e to Auth0.\u003c/p\u003e\u003cp\u003eDoing it without the SDK would require a code similar to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIServiceCollection\u003c/span\u003e services\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eDefaultAuthenticateScheme \u003cspan\u003e=\u003c/span\u003e CookieAuthenticationDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eDefaultSignInScheme \u003cspan\u003e=\u003c/span\u003e CookieAuthenticationDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eDefaultChallengeScheme \u003cspan\u003e=\u003c/span\u003e CookieAuthenticationDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddCookie\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddOpenIdConnect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e options \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eAuthority \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e$\u0026#34;https://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eConfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eClientId \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientId\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e//👇new code\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eClientSecret \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientSecret\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eSaveTokens \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eResponseType \u003cspan\u003e=\u003c/span\u003e OpenIdConnectResponseType\u003cspan\u003e.\u003c/span\u003eCode\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e//👆new code\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eCallbackPath \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003ePathString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/callback\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eTokenValidationParameters \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eTokenValidationParameters\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n      NameClaimType \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eEvents \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eOpenIdConnectEvents\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n      OnRedirectToIdentityProviderForSignOut \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e logoutUri \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e$\u0026#34;https://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eConfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/v2/logout?client_id=\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eConfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientId\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e postLogoutUri \u003cspan\u003e=\u003c/span\u003e context\u003cspan\u003e.\u003c/span\u003eProperties\u003cspan\u003e.\u003c/span\u003eRedirectUri\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eIsNullOrEmpty\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003epostLogoutUri\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n          \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003epostLogoutUri\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eStartsWith\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n          \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e// transform to absolute\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e request \u003cspan\u003e=\u003c/span\u003e context\u003cspan\u003e.\u003c/span\u003eRequest\u003cspan\u003e;\u003c/span\u003e\n            postLogoutUri \u003cspan\u003e=\u003c/span\u003e request\u003cspan\u003e.\u003c/span\u003eScheme \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e\u0026#34;://\u0026#34;\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e request\u003cspan\u003e.\u003c/span\u003eHost \u003cspan\u003e+\u003c/span\u003e request\u003cspan\u003e.\u003c/span\u003ePathBase \u003cspan\u003e+\u003c/span\u003e postLogoutUri\u003cspan\u003e;\u003c/span\u003e\n          \u003cspan\u003e}\u003c/span\u003e\n          logoutUri \u003cspan\u003e+=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e$\u0026#34;\u0026amp;returnTo=\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e Uri\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eEscapeDataString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003epostLogoutUri\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        context\u003cspan\u003e.\u003c/span\u003eResponse\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eRedirect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003elogoutUri\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        context\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eHandleResponse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003ereturn\u003c/span\u003e Task\u003cspan\u003e.\u003c/span\u003eCompletedTask\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n      \u003cspan\u003e//👇new code\u003c/span\u003e\n      OnRedirectToIdentityProvider \u003cspan\u003e=\u003c/span\u003e context \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e\n        context\u003cspan\u003e.\u003c/span\u003eProtocolMessage\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSetParameter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;audience\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Audience\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e Task\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eFromResult\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n      \u003cspan\u003e//👆new code\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBasically, you need to add a few more lines to the previous code in order to change the OAuth flow, provide the client secret, enable token saving, and attach the audience value to the authorization request.\u003c/p\u003e\u003cp\u003eThe equivalent code to achieve the same result using the SDK is as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIServiceCollection\u003c/span\u003e services\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuth0WebAppAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eDomain \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eClientId \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientId\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eClientSecret \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientSecret\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eWithAccessToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eAudience \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Audience\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAren\u0026#39;t you excited about this? 💥 Your code will be more concise, clean, and clear!\u003c/p\u003e\u003ch2 id=\"Refresh-Tokens-As-Magic\"\u003eRefresh Tokens As Magic\u003c/h2\u003e\u003cp\u003eAnd in case you need a \u003ca href=\"https://auth0.com/docs/security/tokens/refresh-tokens\" target=\"_blank\" rel=\"noreferrer noopener\"\u003erefresh token\u003c/a\u003e? 🤔 Nothing could be simpler. Just set a flag:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIServiceCollection\u003c/span\u003e services\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuth0WebAppAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eDomain \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eClientId \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientId\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eClientSecret \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientSecret\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eWithAccessToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eAudience \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Audience\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eUseRefreshTokens \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e   \u003cspan\u003e//👈 new code\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eCompare it with the code you need to add to the SDK-less code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIServiceCollection\u003c/span\u003e services\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e//...the code to configure authentication...\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddCookie\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eEvents\u003cspan\u003e.\u003c/span\u003eOnValidatePrincipal \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e options \u003cspan\u003e=\u003c/span\u003e context\u003cspan\u003e.\u003c/span\u003eHttpContext\u003cspan\u003e.\u003c/span\u003eRequestServices\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eGetRequiredService\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eAuth0Options\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e accessToken\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eProperties\u003cspan\u003e.\u003c/span\u003eItems\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eTryGetValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;.Token.access_token\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eout\u003c/span\u003e accessToken\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eoptions\u003cspan\u003e.\u003c/span\u003eUseRefreshTokens\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e refreshToken\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eProperties\u003cspan\u003e.\u003c/span\u003eItems\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eTryGetValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;.Token.refresh_token\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eout\u003c/span\u003e refreshToken\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n          \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e now \u003cspan\u003e=\u003c/span\u003e DateTimeOffset\u003cspan\u003e.\u003c/span\u003eNow\u003cspan\u003e;\u003c/span\u003e\n          \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e expiresAt \u003cspan\u003e=\u003c/span\u003e DateTimeOffset\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eParse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eProperties\u003cspan\u003e.\u003c/span\u003eItems\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;.Token.expires_at\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n          \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e leeway \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e60\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n          \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e difference \u003cspan\u003e=\u003c/span\u003e DateTimeOffset\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eCompare\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eexpiresAt\u003cspan\u003e,\u003c/span\u003e now\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddSeconds\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eleeway\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n          \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e isExpired \u003cspan\u003e=\u003c/span\u003e difference \u003cspan\u003e\u0026lt;=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n          \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eisExpired \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eIsNullOrWhiteSpace\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003erefreshToken\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n          \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e result \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e \u003cspan\u003eRefreshTokens\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions\u003cspan\u003e,\u003c/span\u003e refreshToken\u003cspan\u003e,\u003c/span\u003e auth0Options\u003cspan\u003e.\u003c/span\u003eBackchannel\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n            \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eresult \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n              context\u003cspan\u003e.\u003c/span\u003eProperties\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUpdateTokenValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;access_token\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e result\u003cspan\u003e.\u003c/span\u003eAccessToken\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n              context\u003cspan\u003e.\u003c/span\u003eProperties\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUpdateTokenValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;refresh_token\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e result\u003cspan\u003e.\u003c/span\u003eRefreshToken\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n              context\u003cspan\u003e.\u003c/span\u003eProperties\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUpdateTokenValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;id_token\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e result\u003cspan\u003e.\u003c/span\u003eIdToken\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n              context\u003cspan\u003e.\u003c/span\u003eProperties\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUpdateTokenValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;expires_at\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e DateTimeOffset\u003cspan\u003e.\u003c/span\u003eNow\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddSeconds\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eresult\u003cspan\u003e.\u003c/span\u003eExpiresIn\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eToString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;o\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n            \u003cspan\u003eelse\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n              context\u003cspan\u003e.\u003c/span\u003eProperties\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUpdateTokenValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;refresh_token\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n            context\u003cspan\u003e.\u003c/span\u003eShouldRenew \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n          \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e \n      \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddOpenIdConnect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e options \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e//...the code to configure OpenID Connect...\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou should take care of all the details about determining the token expiration and requesting a new access token. The Auth0 ASP.NET Core Authentication SDK does this on your behalf. Do you agree it\u0026#39;s magic? ✨\u003c/p\u003e\u003ch2 id=\"Auth0-Organizations-Support\"\u003eAuth0 Organizations Support\u003c/h2\u003e\u003cp\u003eNot only the ASP.NET Core Authentication SDK lets you deal with standard OpenID Connect and OAuth duties, but it also simplifies your life in using specific Auth0 features such as \u003ca href=\"https://auth0.com/docs/organizations\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Organizations\u003c/a\u003e. By using Organizations, you can represent logical groups of users such as teams, partners, business customers, and so on. They can have specific policies, branding, and other customizations. So, to enable a user to log in to an organization, you need to specify it in your ASP.NET application. The following is an example of how you can accomplish this by using the SDK:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIServiceCollection\u003c/span\u003e services\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuth0WebAppAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eDomain \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eClientId \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientId\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eOrganization \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Organization\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePretty straightforward, right? 🙌 Of course, you can do more with Organizations. Please, take a look at \u003ca href=\"https://github.com/auth0/auth0-aspnetcore-authentication#organization\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe ASP.NET Core Authentication SDK documentation\u003c/a\u003e to learn more.\u003c/p\u003e\u003ch2 id=\"Customization\"\u003eCustomization\u003c/h2\u003e\u003cp\u003eAt this point, you may think that having an SDK forces you to use its methods to work with OpenID Connect and OAuth. So you no longer have the freedom of adding extra parameters to the authorization request, for example. Or you may think you can\u0026#39;t anymore apply your custom token validation or freely manage OpenID Connect events.\u003c/p\u003e\u003cp\u003eI have good news: you don\u0026#39;t need to worry about this. The ASP.NET Core Authentication SDK leaves you the freedom to customize many things.\u003c/p\u003e\u003cp\u003eFor example, you can add custom parameters to the authorization request. Look at the following example:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIServiceCollection\u003c/span\u003e services\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuth0WebAppAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eDomain \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eClientId \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientId\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eLoginParameters \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eDictionary\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \n      \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e\u0026#34;screen_hint\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;signup\u0026#34;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e \n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere you configured your ASP.NET application to attach the \u003ccode\u003escreen_hint\u003c/code\u003e parameter with the \u003ccode\u003esignup\u003c/code\u003e value  to the authorization request. In this specific case, the user will see the signup window instead of the default login screen.\u003c/p\u003e\u003cp\u003eBut you can also apply your custom validation, as in the following case:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIServiceCollection\u003c/span\u003e services\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuth0WebAppAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eDomain \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eClientId \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientId\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eOpenIdConnectEvents \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eOpenIdConnectEvents\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n      OnTokenValidated \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e birthDateClaim \u003cspan\u003e=\u003c/span\u003e context\u003cspan\u003e.\u003c/span\u003eSecurityToken\u003cspan\u003e.\u003c/span\u003eClaims\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSingleOrDefault\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eclaim \u003cspan\u003e=\u0026gt;\u003c/span\u003e claim\u003cspan\u003e.\u003c/span\u003eType \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#34;birthdate\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e?.\u003c/span\u003eValue\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eIsNullOrWhiteSpace\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ebirthDateClaim\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n          context\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eFail\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;The \u0026#39;birthdate\u0026#39; claim must be present in the ID token.\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n            \n        \u003cspan\u003ereturn\u003c/span\u003e Task\u003cspan\u003e.\u003c/span\u003eCompletedTask\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see, the ASP.NET Core Authentication SDK exposes the \u003ccode\u003eOpenIdConnectEvents\u003c/code\u003e option to let you handle the standard events triggered by the \u003ccode\u003eMicrosoft\u003cspan\u003e.\u003c/span\u003eAspNetCore\u003cspan\u003e.\u003c/span\u003eAuthentication\u003cspan\u003e.\u003c/span\u003eOpenIdConnect\u003c/code\u003e library. This way, you can combine the SDK simplicity with the standard library behavior to get the maximum flexibility.\u003c/p\u003e\u003ch2 id=\"Summary\"\u003eSummary\u003c/h2\u003e\u003cp\u003eNow you should have a clearer idea about the benefits you have by using the ASP.NET Core Authentication SDK to integrate Auth0 into your ASP.NET applications: less code, more readability, flexibility, and best practices inside. So, give a try to the SDK and integrate your \u003ca href=\"https://auth0.com/docs/quickstart/webapp/aspnet-core\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eASP.NET applications with Auth0 by following the QuickStart\u003c/a\u003e. Check out \u003ca href=\"https://auth0.github.io/auth0-aspnetcore-authentication/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe SDK documentation\u003c/a\u003e to learn more.\u003c/p\u003e\u003cp\u003eYou can also \u003ca href=\"https://github.com/auth0/auth0-aspnetcore-authentication#contributing\" target=\"_blank\" rel=\"noreferrer noopener\"\u003econtribute to it\u003c/a\u003e: it\u0026#39;s open-source!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "The new Auth0 ASP.NET Core Authentication SDK makes adding authentication and authorization to your web applications a breeze. Learn how.",
      "date_published": "2021-10-15T15:05:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/the-future-of-healthcare-relies-on-adaptation/",
      "title": "The Future of Healthcare Relies on Adaptation",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eThe delivery of healthcare services has gone through an unprecedented transformation during the COVID-19 pandemic. COVID-19 has accelerated the move to a digital-forward model and elevated trends that were previously slow to be adopted. In addition, the final rule of the 21st Century Cures Act, effective June 30, 2020, implements provisions to “advance interoperability and support the access, exchange, and use of electronic health information”.\u003c/p\u003e\u003cp\u003eTechnology leaders in the healthcare industry will drive positive business outcomes by continuing to innovate in ways that meet the demands of consumers while also meeting security compliance requirements. Healthcare companies have an opportunity to leverage the current momentum to capture more market share by providing cutting-edge, secure experiences for patients, providers, payers, and insurance companies.\u003c/p\u003e\u003ch2 id=\"Consumer-Demands\"\u003eConsumer Demands\u003c/h2\u003e\u003cp\u003eConsumer habits have permanently changed across industries over the past 18 months. Healthcare companies providing the best digital experiences will be the ones to attract consumers. In healthcare, consumers include the patients themselves, but could also be caregivers, parents, or patient representatives. Consumers are also the medical staff providing care. A digital experience that makes it easy to share data, retrieve lab results, check coverage, pay bills, etc. will make a big difference to all of these kinds of consumers. It’s likely that in healthcare, consumers will follow the best user experience, as they have in other industries.\u003c/p\u003e\u003cp\u003eA \u003ca href=\"https://www.healthcaredive.com/news/convenience-more-important-to-patients-than-quality-of-care-survey-finds/545365/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esurvey\u003c/a\u003e of healthcare consumers found that 51% said convenience and access to care are the most important factors in their decision-making. Convenience ranked above insurance coverage (46%), doctor/nurse conduct (44%), brand reputation (40%), and quality of care (35%). Healthcare companies that continue to require patients and providers to use antiquated and disconnected methods to share information with hospitals, specialists, and insurance companies will become less compelling, leading consumers to choose something else. The same applies to providers that stop offering telehealth options for patients. Although the personal experience of an in-person visit cannot be replicated via Zoom, most consumers and providers enjoy having the option when needed.\u003c/p\u003e\u003cp\u003eThe intersection of factors such as COVID-19 driving the rise in telehealth services, consumer demand for improved digital access to healthcare data, and recent regulatory mandates creates a shifting technology landscape in healthcare.\u003c/p\u003e\u003ch2 id=\"Enabling-Patient-Control-over-Data--Interoperability-with-SMART-on-FHIR\"\u003eEnabling Patient Control over Data: Interoperability with SMART on FHIR\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://auth0.com/blog/what-smart-on-fhir-means-for-the-future-of-healthcare/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSMART on FHIR\u003c/a\u003e is an API that facilitates the exchange of healthcare data. It is part of the 21st Century Cures Act certification requirements. SMART on FHIR is built on open standards including HL7’s FHIR, OAuth2, and OpenID Connect. Developers have the ability to write apps that will run anywhere in the healthcare system. The SMART on FHIR Patient Access API and Provider Directory API came into force on July 1, 2021. The Payer-to-Payer Data Exchange is applicable from January 1, 2022.\u003c/p\u003e\u003cp\u003eSMART on FHIR creates the potential for interoperability and will enable patients, providers, payers, and any other healthcare-related organizations to securely share information, giving patients control over their healthcare data. Patients will no longer have to request records and wait to have them mailed or picked up. Patient control over how and when information is shared will lead to a smoother experience for all parties.\u003c/p\u003e\u003ch2 id=\"Unlocking-Interoperability--Identity-as-the-Key-to-the-Digital-Front-Door\"\u003eUnlocking Interoperability: Identity as the Key to the Digital Front Door\u003c/h2\u003e\u003ch3 id=\"ID-linking\"\u003eID linking\u003c/h3\u003e\u003cp\u003eIdentity is the key to the digital front door for any healthcare transaction, and also provides the backbone to securely interconnecting systems. Many users have multiple identities that they use to log in to various applications. Frequently, patients will have to reenter credentials to access every application or portal. This approach is frustrating for patients and increases the risk of phishing attacks and other security breaches. The ability to link disparate identities through a common platform can reduce user friction and increase security.\u003c/p\u003e\u003cp\u003eCentralizing patient identity and providing a seamless SSO experience between all of those identities helps consumers reduce the number of login credentials they need to access their data. Each login attempt can be evaluated for malicious or risky behavior and properly blocked or logged. This protects the user, resources, and the applications or platforms they use. Using this approach creates a patient-focused ecosystem leading to better service and outcomes.\u003c/p\u003e\u003ch3 id=\"Managing-identity\"\u003eManaging identity\u003c/h3\u003e\u003cp\u003eMany healthcare companies have developed in-house custom solutions for managing identity and access to their applications. This traditional stovepiped approach worked when there were limited numbers of users and much of the data remained in-house. Custom solutions don’t easily scale or integrate with other systems. They also require a significant amount of maintenance and IT costs. This can lead to end-user friction in the form of multiple passwords to manage, an inconsistent experience, and a lack of adoption.\u003c/p\u003e\u003cp\u003eWith these in-house solutions, organizations are also responsible for supporting end-users with account management activities, such as password reset and account recovery and handling costly help desk tickets. Poor identity management creates a poor user experience. Automating user account functions, such as signup, password reset, and self-enrollment in MFA greatly reduces friction and inefficiency.\u003c/p\u003e\u003ch3 id=\"Data-security\"\u003eData security\u003c/h3\u003e\u003cp\u003eSecuring patient data should be the top consideration for any solution, yet based on a recent \u003ca href=\"https://marketing.rsvpportal.com/acton/attachment/3648/f-49df9907-d20f-4de6-87f4-ac7736211d20/1/-/-/-/-/Okta_Healthcare_Pulse_Survey_Whitepaper.pdf?sid=TV2:fx7gELoz4\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esurvey\u003c/a\u003e of 100 healthcare executives, speed was prioritized over security with the move to telehealth during COVID-19. Even more worryingly, 95% of these leaders admitted that confidential patient records are only secured with a password. Providing built-in security features, such as multi-factor authentication, bot detection, breached password detection, suspicious IP throttling, and brute force detection can significantly increase the security posture of protecting critical data. Cyber attacks are increasingly common, and the cost of a breach can be devastating. In addition, new security threats are constantly exposed.\u003c/p\u003e\u003ch3 id=\"Secure-identity-and-focus-on-core-competencies\"\u003eSecure identity and focus on core competencies\u003c/h3\u003e\u003cp\u003eMost healthcare organizations are and should be, focused on their core business pursuits, such as patient care or processing insurance claims. Information security and identity management is not their core business, yet is a critical factor in compliant, secure business operations. Focusing on core competencies while ensuring secure identity management doesn’t mean giving up control of identity management but instead places the responsibility for the technical aspects of identity building and protection in the hands of experts who work with identity every day.\u003c/p\u003e\u003cp\u003eIdentity and security are complex and require a particular skill set to ensure that data is properly handled and protected. As the industry moves to meet the compliance requirements for interoperability, this leaves the systems dependent on each other to properly secure and protect user data, including usernames and passwords. Choosing an identity provider that focuses on security as their core business can greatly reduce the burden and risk for healthcare companies.\u003c/p\u003e\u003cp\u003eAuth0 has helped many healthcare customers provide their users with a highly customized, secure, seamless user experience while driving down costs and reducing risk. To learn more, \u003ca href=\"https://auth0.com/contact-us\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ereach out to the team at Auth0\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Interoperability, liberating patient data, and the identity lynchpin",
      "date_published": "2021-10-14T14:41:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/okta-auth0-showcase-2021-identity-for-all/",
      "title": "Okta + Auth0 Showcase 2021: Identity for All",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eToday, we’re bringing you Okta’s third \u003ca href=\"https://www.okta.com/showcase/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cstrong\u003eShowcase\u003c/strong\u003e\u003c/a\u003e, joining forces virtually with teammates, customers, and partners from around the world for our annual fall event that provides an inside look at how the company is innovating. \u003c/p\u003e\u003cp\u003eThis year, it’s not just Okta taking the stage: it’s \u003cstrong\u003eOkta + Auth0\u003c/strong\u003e. Six months ago, we officially embarked on a mission to join our two companies and lead together in the customer identity and access management (CIAM) market with our shared worldview for a neutral, independent identity cloud. While we came from very different backgrounds, we both built our companies to innovate on identity from the ground up and prioritize customer success—so we connect on helping customers drive outcomes that matter most to them. Our cultures are strongly aligned with a strong focus on transparency and innovation, all with trust at the center. \u003c/p\u003e\u003cp\u003eSince the acquisition closed in May, we’ve learned so much about our teams, companies, and technology. This partnership (eight years in the making!) has exceeded expectations beyond what we’ve imagined and has reinforced our commitment to continue investing in both platforms. We’ve invited both teams here today to share our joint story of growth, momentum, and strategy in the CIAM market. \u003c/p\u003e\u003ch2 id=\"The-World-Is-Shifting-to-Identity-First\"\u003eThe World Is Shifting to Identity-First\u003c/h2\u003e\u003cp\u003eIt has become clear that the role of identity in the world has evolved, and we’re here to address that shift. Together, Okta and Auth0 are reimagining identity’s role in every organization’s technology strategy. Cloud, mobile, and Bring Your Own Device (BYOD) have transformed the dynamics of the digital world over the past decade. At the same time, IT is struggling to keep up with all of these changes, and developers are more burdened than ever to build more applications quickly and without sacrificing security and user experience. Identity is the perimeter, and it’s at the heart of every technology choice and transformation. Governments globally are shifting to identity-first through initiatives like MFA mandates with Zero Trust security architecture. Customer experiences must be identity-first as companies rush to secure platforms and provide seamless, personalized experiences amidst a growing number of data breaches in the wake of the pandemic. \u003c/p\u003e\u003cp\u003eThis Showcase, we’re thrilled to introduce product innovation and joint momentum on the heels of the acquisition—all with the goal of helping organizations thrive in an identity-first world.\u003c/p\u003e\u003ch2 id=\"Adopting-an-Identity-First-Strategy-with-Okta---Auth0\"\u003eAdopting an Identity-First Strategy with Okta + Auth0\u003c/h2\u003e\u003cp\u003eThe digital world is heterogeneous: we all work across multiple stacks, many clouds, and myriad applications. Digital experiences are connecting more companies, customers, and employees than ever before. Okta understands this need to connect. Through the \u003ca href=\"https://www.okta.com/okta-integration-network/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOkta Integration Network\u003c/a\u003e, we have the broadest and deepest set of independent and neutral integrations to securely connect to everything. And through our Workflows technology, we empower companies to weave the best employee and customer experience throughout those integrations and applications.\u003c/p\u003e\u003cp\u003eOkta Workflows is the key to simplifying and automating identity processes in an identity-first world at scale. We first introduced this technology to customers with democratization at the heart. Democratizing identity means providing everyone with the choice of tools and technology needed to harness it. Today we’re excited to announce \u003cstrong\u003eWorkflows for Any Identity Use Case\u003c/strong\u003e, meaning our identity automation and orchestration solution is now available as a standalone product for all customers, including a no-cost option for up to five flows. We really mean anyone: anyone at any company, development or non-development teams alike, can now leverage the power and extensibility of identity in a low or no-code user interface. \u003c/p\u003e\u003cp\u003eWhat’s more, we’re also introducing new connectors, including Jamf, Microsoft Teams, ITSM (FreshService), and alert management (OpsGenie), along with new templates such as app access requests with Slack. Okta Workflows helps customers solve highly complex use cases and now enables even more innovation to happen more securely and faster. \u003c/p\u003e\u003cp\u003eWe are also announcing the availability of the \u003cstrong\u003eAuth0 Identity Platform on Microsoft Azure\u003c/strong\u003e, offering customers the ability to choose Azure as a private cloud deployment option from Auth0. This addition provides customers with another secure cloud deployment option that better aligns with their technology stack and supports regional data residency needs, unlocking a comprehensive CIAM solution for organizations in regions where Azure has a larger infrastructure presence. Ultimately, more flexibility means more ways to deploy identity in the way that works best for each business. \u003c/p\u003e\u003ch2 id=\"Accelerating-Momentum---Innovation-in-the-CIAM-Market\"\u003eAccelerating Momentum \u0026amp; Innovation in the CIAM Market\u003c/h2\u003e\u003cp\u003eEvery company connecting directly with customers must manage customer identities and the massive volumes of data and insight accompanying them. An identity-first, CX strategy is critical in a world where businesses feel increased urgency around digital transformation, security threats, and growing user experience demands.\u003c/p\u003e\u003cp\u003eAs a joint Okta + Auth0 team, we can better meet the demands of a fast-growing CIAM market. When we look closely inside our customers’ technology environments, we see a wide range of situations—some are digital natives, others are building their first apps to connect with customers. While some live fully in the cloud, others choose a hybrid model, and some still manage massive legacy on-premises deployments. It’s within this diversity of technology environments that we see the biggest opportunity to make a difference.\u003c/p\u003e\u003cp\u003eTo further our offerings in this space, we’re rolling out new CIAM capabilities across Okta’s CIAM offering, including \u003cstrong\u003eDevice Authorization Grant, Branding\u003c/strong\u003e, and \u003cstrong\u003eCustom Administration Roles\u003c/strong\u003e to deliver universal customization from internal management and compliance to devices and customer-facing applications. These features address critical pain points across IT, security, and engineering when implementing identity and are rooted in choice and extensibility. Together, Okta and Auth0 now enable end-to-end customer journeys and address every use case imaginable, driving better digital customer experiences. \u003c/p\u003e\u003cp\u003eWith our combined company, we have one vision for identity. We’re ready to create solutions for all, offering more opportunities for current and future customers. The world now is identity-first; it ensures our environments are kept safe and secure and that every digital experience fits each customer’s needs. We’re just at the beginning of our journey together—we can’t wait to see what the future holds.\u003c/p\u003e\u003cp\u003eIf you missed the live event, you can watch the \u003ca href=\"https://www.okta.com/showcase/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cstrong\u003eon-demand content\u003c/strong\u003e\u003c/a\u003e beginning on October 14.\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eThe Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "CEOs Todd McKinnon and Eugenio Pace highlight the exciting opportunities ahead for the combined company",
      "date_published": "2021-10-13T15:42:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/auth0-identity-platform-now-available-on-microsoft-azure/",
      "title": "Auth0 Identity Platform Now Available on Microsoft Azure",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection itemscope=\"\" itemtype=\"http://schema.org/BlogPosting\" itemprop=\"mainEntity\"\u003e\u003cheader\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cp\u003e\u003cspan\u003eAzure\u003c/span\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eNew private cloud deployment option offers customers greater choice, scalability, and reliability\u003c/p\u003e\u003c/div\u003e\u003cp\u003eOctober 13, 2021\u003c/p\u003e\u003cmeta itemprop=\"datePublished\" content=\"2021-10-13\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2021-10-13\"/\u003e\u003c/div\u003e\u003c/header\u003e\u003cheader\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/48HABlVaavxkvSpCEpgHdZ/f9de8b608b229dda310c5296187890f4/Announcements3.png\"/\u003e\u003c/p\u003e\u003cdiv\u003e\u003cp\u003e\u003cspan\u003eAzure\u003c/span\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eNew private cloud deployment option offers customers greater choice, scalability, and reliability\u003c/p\u003e\u003cp\u003eOctober 13, 2021\u003c/p\u003e\u003cmeta itemprop=\"datePublished\" content=\"2021-10-13\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2021-10-13\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003c/header\u003e\u003carticle\u003e\u003cmain id=\"post-content\" itemprop=\"articleBody\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eBELLEVUE, Wash. – Oct. 13, 2021 –\u003c/strong\u003e The \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Identity Platform\u003c/a\u003e, a product unit within Okta (NASDAQ: OKTA), today announced the launch of the \u003ca href=\"https://auth0.com/cloud/azure\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Identity Platform on Microsoft Azure\u003c/a\u003e. The launch gives customers the ability to choose Azure as their cloud deployment option from Auth0. The addition of Azure as an Auth0 private cloud platform option unlocks a secure cloud deployment option for organizations seeking strategic fit with their technology stack, supporting regional data residency capabilities and higher control over customer data.\u003c/p\u003e\u003cp\u003eToday, organizations moving to the cloud and selecting a \u003ca href=\"https://auth0.com/blog/what-is-ciam/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCustomer Identity and Access Management (CIAM)\u003c/a\u003e solution require significant control over sensitive customer data and may require local data residency capabilities. They often have to make a hard choice of selecting either a CIAM solution that supports their product differentiation goals or one that meets their technical requirements and regulatory needs. Auth0’s modern identity platform eliminates the need to choose by providing organizations with tools designed to support security, compliance, and data residency needs that may apply to them across multiple regions globally. The platform’s design can accelerate their time to value and go-to-market strategies to meet their long-term growth goals. \u003c/p\u003e\u003cp\u003eKey benefits of the Auth0 Identity Platform on Azure include:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eTechnology Stack Alignment:\u003c/strong\u003e Organizations have the flexibility to choose Azure as their preferred cloud vendor for greater technology stack alignment with existing investments in Azure.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eData Residency:\u003c/strong\u003e Improved data residency capabilities for Auth0 customers with Azure’s widespread geographic infrastructure.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eStreamlined Experience with Private Cloud:\u003c/strong\u003e A modern, cloud-native platform built with a focus on security and compliance at every level. Organizations requiring data residency options can take advantage of periodic feature updates while maintaining control over the timing and the ability to roll back without the hassle of having to maintain them — resulting in faster time to market and a more seamless experience for organizations and their customers.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e“As more applications move to the cloud and expand globally, organizations depend on their identity service to protect and manage access for their most critical users, applications, and data,” said Shiv Ramji, Chief Product Officer at Auth0. “The Auth0 Identity Platform on Azure can help unlock a secure and compliant cloud deployment experience for organizations seeking support across CIAM use cases. This is especially true for organizations in industries like retail or financial services where selecting vendors that are not competitive to their business is top priority, organizations operating in regions where certain cloud providers have higher geographic availability, and those that have existing technology investments in Azure.”\u003c/p\u003e\u003cp\u003e“Companies like Auth0 add value by integrating their solutions with Microsoft Azure,” said Mandana Javaheri, Global Senior Director, SCI Business Development at Microsoft Corp. “With Azure, Auth0 customers have ultimate performance capabilities and control over their environment without the hassle of maintaining it, allowing customers to focus more on their core business proposition.”\u003c/p\u003e\u003cp\u003eMore detailed information on the Auth0 Identity Platform on Azure can be found on \u003ca href=\"https://auth0.com/blog/auth0-on-microsoft-azure-as-a-private-cloud-deployment-option\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0’s blog\u003c/a\u003e. Auth0 will discuss this offering in greater detail with Okta at Showcase21 taking place today, Oct. 13, 2021. To learn more, visit: \u003ca href=\"https://www.okta.com/showcase/register\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://www.okta.com/showcase/register\u003c/a\u003e  \u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eThe Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003ch3 id=\"Media-Contacts-\"\u003eMedia Contacts:\u003c/h3\u003e\u003cp\u003eGlobal Communications\u003cbr/\u003eAuth0\u003cbr/\u003e\u003ca href=\"mailto:press@auth0.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epress@auth0.com\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp\u003eMatter Communications for Auth0\u003cbr/\u003e\u003ca href=\"mailto:auth0@matternow.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eauth0@matternow.com\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\u003ch3 id=\"Investor-Contact-\"\u003eInvestor Contact:\u003c/h3\u003e\u003cp\u003eInvestor Relations\u003cbr/\u003e\u003ca href=\"mailto:investor@okta.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003einvestor@okta.com\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/main\u003e\u003c/article\u003e\u003c/section\u003e\u003c/div\u003e",
      "summary": "New private cloud deployment option offers customers greater choice, scalability, and reliability",
      "date_published": "2021-10-13T12:48:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/auth0-on-microsoft-azure-as-a-private-cloud-deployment-option/",
      "title": "Auth0 Identity Platform Now Available on Microsoft Azure",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eWe’re excited to announce the availability\u003ca href=\"#1\"\u003e\u003csup\u003e1\u003c/sup\u003e\u003c/a\u003e of Auth0 \u003cstrong\u003eIdentity Platform\u003c/strong\u003e as a private cloud deployment option \u003cstrong\u003eon \u003ca href=\"https://auth0.com/cloud/azure\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMicrosoft Azure\u003c/a\u003e\u003c/strong\u003e. \u003c/p\u003e\u003cp\u003eAuth0 is an Identity-as-a-Service platform that eliminates the complexity of implementing authentication and authorization capabilities by providing easy-to-use APIs (application programming interfaces) that you can use in a variety of applications. It processes billions of login transactions each month across thousands of customers, ensuring that end-users get a secure, fast and seamless login experience within their applications.\u003c/p\u003e\u003cp\u003eAuth0’s capabilities are available in two deployment options — public cloud and private cloud. Public cloud is a multi-tenant SaaS application available in four regions (United States, Europe, Japan, and Australia), \u003cstrong\u003eused by companies of all sizes\u003c/strong\u003e. Alternatively, a private cloud deployment provides Auth0’s comprehensive CIAM capabilities to enterprises who want dedicated resources. \u003c/p\u003e\u003ch2 id=\"The-Benefits-of-Auth0-on-Azure\"\u003eThe Benefits of Auth0 on Azure\u003c/h2\u003e\u003cp\u003eMicrosoft Azure is an industry-leading cloud computing provider, offering hundreds of products and services used by developers and organizations around the world. With this release, Auth0 customers now have the flexibility to choose Azure (in addition to AWS) as the target cloud for their private cloud deployment.\u003c/p\u003e\u003cp\u003eSome of the key reasons for customers to choose Auth0 on Azure for their private cloud deployment are:\u003c/p\u003e\u003ch3 id=\"Data-Residency-and-Compliance\"\u003eData Residency and Compliance\u003c/h3\u003e\u003cp\u003eAzure offers \u003ca href=\"https://azure.microsoft.com/en-us/global-infrastructure/geographies/#overview\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eover 60 regions\u003c/a\u003e worldwide, and has plans to continue \u003ca href=\"https://azure.microsoft.com/en-us/global-infrastructure/geographies/#new-regions\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eexpanding\u003c/a\u003e worldwide. This global coverage lets Auth0 meet your data residency and other regulatory compliance requirements by offering greater choice when planning deployments.\u003c/p\u003e\u003ch3 id=\"Microsoft-Ecosystem-and-Security\"\u003eMicrosoft Ecosystem and Security\u003c/h3\u003e\u003cp\u003eMany customers prefer to pick a SaaS vendor deployed in the same cloud as their core applications. This is due to a number of considerations, including security or performance. Azure Private Link reduces latency between Auth0 and the customer’s applications. This also gives a choice to customers that have an internal strategic requirement to pick one cloud over another.\u003c/p\u003e\u003ch2 id=\"How-We-Evolved-our-Platform\"\u003eHow We Evolved our Platform\u003c/h2\u003e\u003cp\u003eAdding support for Microsoft Azure meant that we had an opportunity to improve our technology stack and development processes. As part of this effort, we focused on improving the resilience, reliability, and customer experience provided by the platform.\u003c/p\u003e\u003cp\u003eThe private cloud support of Azure is built on top of a modern, cloud-native platform that is also compatible with AWS. As well as providing a number of internal benefits due to standardization and automation, here are some of the additional highlights for customers:\u003c/p\u003e\u003ch3 id=\"Fully-Automated-Environment-Creation-and-Management\"\u003eFully Automated Environment Creation and Management\u003c/h3\u003e\u003cp\u003eCreating a new environment is now fully automated. Behind the scenes, we use cutting-edge automation tools to kick off environment provisioning. This ensures all environments are represented as code and are immutable. A host of flexible, scalable, and cloud-independent services are used as part of the technology stack.\u003c/p\u003e\u003ch3 id=\"High-Availability-and-Disaster-Recovery\"\u003eHigh Availability and Disaster Recovery\u003c/h3\u003e\u003cp\u003eSimilar to our existing AWS deployment option, all Azure deployment service components are deployed in a highly-available, three Availability Zones (AZ) configuration. If an AZ is affected as a result of an incident, services automatically reorganize their workload on the remaining AZs within the same region. In addition to HA, all customer data is backed up at a regular cadence, backups are encrypted at rest and in transit, and there is an option to restore a customer’s environment from the last backup.\u003c/p\u003e\u003ch3 id=\"Security-first-Architecture--Shifting-Left\"\u003eSecurity-first Architecture: Shifting Left\u003c/h3\u003e\u003cp\u003eAs we developed the Auth0 Identity Platform for Microsoft Azure, we emphasized “shift-left” principles, focussing on building a strong security architecture at the start of the development cycle. We established a dedicated Azure AD tenant and automated governance controls to ensure resource and identity isolation, required MFA and Azure PIM for privileged access, and enforced security standards with Azure Policy. Prioritizing security in the early stages of the development process is part of our secure by design strategy to mitigate risk and keep customers safe from cyber threats.\u003c/p\u003e\u003ch3 id=\"Automated--Periodic-Release-Updates--and-Roll-back-Option\"\u003eAutomated, Periodic Release Updates, and Roll-back Option\u003c/h3\u003e\u003cp\u003eWith this modern platform, we will now ship smaller, weekly releases that automatically deploy to private cloud environments. Additionally, the private cloud platform provides the ability to schedule deployments and roll back specific versions within predefined time windows, enabling greater control over the software delivery process.\u003c/p\u003e\u003cp\u003eWith this launch, customers have the option of choosing a comprehensive CIAM solution on Azure, built on a technology stack geared for resilience, reliance, and security. Learn more about Auth0 Identity Platform on Azure\u003ca href=\"https://auth0.com/contact-us?place=header\u0026amp;type=button\u0026amp;text=contact%20sales\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e here\u003c/a\u003e.\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eThe Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
      "summary": "Take advantage of cloud provider flexibility, data residency options, and a streamlined experience for your identity needs with a private cloud deployment",
      "date_published": "2021-10-13T10:31:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/configuring-postgresql-as-auth0-custom-database/",
      "title": "Configuring PostgreSQL as Auth0 Custom Database",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eYou can use Auth0 to create and maintain your own user store while also providing a secure authentication system on top of it. Auth0 lets you store users in your own database. Furthermore, Auth0 uses \u003ca href=\"https://oauth.net/2/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOAuth 2.0\u003c/a\u003e as an authorization framework with which you can be confident in terms of security. Using a custom database as a user store in Auth0 facilitates \u003ca href=\"https://auth0.com/docs/users/import-and-export-users\" target=\"_blank\" rel=\"noreferrer noopener\"\u003euser migration\u003c/a\u003e and adds an OAuth and \u003ca href=\"https://openid.net/connect/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOpenID Connect\u003c/a\u003e layer to your existing user database. You can configure any database or web service, including ASP.NET Membership Provider, MongoDB, MySQL, PostgreSQL, as an Auth0 custom database. In this article, you will learn how to set up PostgreSQL as a custom database for Auth0.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eLimited Access:\u003c/strong\u003e Some features are available depending on your Auth0 subscription. For more information, see \u003ca href=\"https://auth0.com/pricing\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 pricing plans\u003c/a\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Enabling-Custom-Databases\"\u003eEnabling Custom Databases\u003c/h2\u003e\u003cp\u003eDon\u0026#39;t already have an Auth0 account yet? \u003ca href=\"https://auth0.com/signup/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSign up for free right now!\u003c/a\u003e\u003c/p\u003e\u003cp\u003eOnce you \u003ca href=\"https://auth0.com/auth/login\" target=\"_blank\" rel=\"noreferrer noopener\"\u003elog in\u003c/a\u003e, navigate to the \u003ca href=\"https://manage.auth0.com/#/connections/database\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDatabase connections page\u003c/a\u003e (Auth0 Dashboard \u0026gt; Authentication \u0026gt; Database). Click on the \u003cstrong\u003eCreate DB Connection\u003c/strong\u003e button, give your database a nice name, and click the \u003cstrong\u003eCreate\u003c/strong\u003e button. Go to the \u003cstrong\u003eCustom Database\u003c/strong\u003e tab and enable \u003cstrong\u003eUse my own database\u003c/strong\u003e to configure the custom database.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/OGyNXnaAOAwmDmJeSS29o/f2462f845f94aba70a41caac89f0d495/01_8enable-custom-database.png\" alt=\"Enabling \u0026#39;use my own database\u0026#39; on custom database tab of Auth0 interface\"/\u003e\u003c/p\u003e\u003cp\u003eAuth0 uses Node.js scripts, called Action Scripts, for connecting and accessing your database. These scripts include JavaScript functions that allow you to execute a variety of tasks such as adding a new user, logging in a user, and so on. You should define \u003cstrong\u003eCustom Database Action Scripts\u003c/strong\u003e to perform the following actions:\u003c/p\u003e\u003cul\u003e\u003cli\u003eCreate: The \u003cstrong\u003eCreate\u003c/strong\u003e script inserts a new user with \u003ccode\u003eemail\u003c/code\u003e and \u003ccode\u003epassword\u003c/code\u003e into your PostgreSQL database.\u003c/li\u003e\u003cli\u003eLogin: The \u003cstrong\u003eLogin\u003c/strong\u003e script verifies the identity of the user in your PostgreSQL database whenever a user needs to authenticate.\u003c/li\u003e\u003cli\u003eVerify: The \u003cstrong\u003eVerify\u003c/strong\u003e script updates the verification status of a user\u0026#39;s email address in your database.\u003c/li\u003e\u003cli\u003eChange Password: The \u003cstrong\u003eChange Password\u003c/strong\u003e script modifies the password for the user\u0026#39;s email address. It changes the user\u0026#39;s password in the database for future logins (forgot password functionality).\u003c/li\u003e\u003cli\u003eGet User: The \u003cstrong\u003eGet User\u003c/strong\u003e script retrieves a specified user\u0026#39;s information from your database. It returns \u003ccode\u003e\u003cspan\u003eundefined\u003c/span\u003e\u003c/code\u003e if the user is not present in your database.\u003c/li\u003e\u003cli\u003eDelete: The \u003cstrong\u003eDelete\u003c/strong\u003e script removes the specified user identity from your database.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eFortunately, Auth0 provides templates for these custom database scripts. You can use the template and update the \u003cstrong\u003econnection string\u003c/strong\u003e with your database URL. Refer to the \u003ca href=\"https://auth0.com/docs/connections/database/custom-db/templates\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eofficial documentation\u003c/a\u003e for additional information on Auth0 custom database action scripts. Let\u0026#39;s start by creating a PostgreSQL database to connect with Auth0.\u003c/p\u003e\u003ch2 id=\"Setting-up-a-PostgreSQL-Database\"\u003eSetting up a PostgreSQL Database\u003c/h2\u003e\u003cp\u003eYou cannot use the database in your local environment. You should make your database accessible via the internet or use tools like \u003ca href=\"https://www.ibm.com/cloud/learn/dbaas\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDatabase as A Service\u003c/a\u003e. In this tutorial, I\u0026#39;ll use \u003ca href=\"https://www.elephantsql.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eElephantSQL\u003c/a\u003e, which offers a fully configured and cloud-hosted PostgreSQL database in few minutes. However, it does not display any data inside your database; instead, you can run SQL commands to show your data. You can design your own database and host it on any cloud provider like \u003ca href=\"https://aws.amazon.com/rds/postgresql/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAWS\u003c/a\u003e, \u003ca href=\"https://cloud.google.com/sql/docs/postgres/quickstart\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGoogle Cloud\u003c/a\u003e or \u003ca href=\"https://devcenter.heroku.com/articles/heroku-postgresql\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eHeroku\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/67kI5tanFdPenloG7UPWmo/a9901332759fdf407562eedfefce6f0a/02_5elephant-sql.png\" alt=\"Elephant sql home page\"/\u003e\u003c/p\u003e\u003cp\u003eHead over to \u003ca href=\"https://www.elephantsql.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://www.elephantsql.com/\u003c/a\u003e and create an account for yourself or log in if you already have one. It takes you to the dashboard page; Click on the \u003cstrong\u003eCreate New Instance\u003c/strong\u003e to create a new database instance. Give a suitable name to your database instance and choose a plan and a region. I\u0026#39;ll use the free plan for demonstration purposes. Configure the database to meet your requirements, then click \u003cstrong\u003eCreate instance\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2KypO18fJdOwAUAUzAvEaI/f0637c4914da6ed6c106f203bf1651a2/03_0create-new-instance.png\" alt=\"Elephantsql create instance confirmation page\"/\u003e\u003c/p\u003e\u003cp\u003eIf you encounter any error in creating an instance, refer to the \u003ca href=\"https://www.elephantsql.com/docs/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eElephantSQL documentation\u003c/a\u003e for troubleshooting.\u003c/p\u003e\u003cp\u003eNow, navigate to the freshly created database instance and copy the \u003cstrong\u003eURL\u003c/strong\u003e from the details page. You\u0026#39;ll need this to connect your Auth0 application to this database. Anyone can access your database with this connection string. It would help if you were to keep it very secret for security purposes.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6ygHuLT6dz2nL3E7rLGprV/5ac2748f274fec16755aa97402506126/04_9instance-details.png\" alt=\"Click on show button and copy the \u0026#39;URL\u0026#39; on the ElephantSQL instance details page\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ePS:\u003c/strong\u003e Auth0 provides several IP addresses to configure your database network connections if you\u0026#39;re using a firewall. You can find them under the action scripts.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7z4pzq4dETiiHaHk3hUY1T/8e22ded36e15b4eaffa7588d65ed30a3/05_3database-ips.png\" alt=\"List of IP addresses under action scripts\"/\u003e\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Using your own database leads to several security concerns. Allowing your database accessible over the internet without any firewalls or security measures may result in data leakage.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Creating-a-Table-for-Storing-Users\"\u003eCreating a Table for Storing Users\u003c/h2\u003e\u003cp\u003eSwitch to the \u003cstrong\u003eBrowser\u003c/strong\u003e tab and execute the following command.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eCREATE\u003c/span\u003e \u003cspan\u003eTABLE\u003c/span\u003e users\u003cspan\u003e(\u003c/span\u003e\n    id UUID \u003cspan\u003eDEFAULT\u003c/span\u003e uuid_generate_v4\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    nickname \u003cspan\u003eVARCHAR\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e255\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    email \u003cspan\u003eVARCHAR\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e255\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eNOT\u003c/span\u003e \u003cspan\u003eNULL\u003c/span\u003e \u003cspan\u003eUNIQUE\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    password \u003cspan\u003eVARCHAR\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e255\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eNOT\u003c/span\u003e \u003cspan\u003eNULL\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    email_Verified \u003cspan\u003eBOOLEAN\u003c/span\u003e \u003cspan\u003eDEFAULT\u003c/span\u003e \u003cspan\u003eFALSE\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/57cmWLADlzyKQcMgIj7hVk/f4758d8ccdc9bcc214b9b30da842b2fe/06_1create-table.png\" alt=\"creating a new table using SQL command in SQL Browser\"/\u003e\u003c/p\u003e\u003cp\u003eThe above command creates a new table called \u003ccode\u003eusers\u003c/code\u003e to store the user information from Auth0. You need at least the above five columns to save and validate the user identity.\u003c/p\u003e\u003ch2 id=\"Defining-the-Auth0-Custom-Database-Scripts\"\u003eDefining the Auth0 Custom Database Scripts\u003c/h2\u003e\u003cp\u003eOpen the custom database tab in the Auth0 interface and navigate to the \u003cstrong\u003eDatabase Action Scripts\u003c/strong\u003e section. Select a script (say \u003cem\u003eLogin\u003c/em\u003e) to edit and choose \u003cstrong\u003ePostgreSQL\u003c/strong\u003e from the templates drop-down. To connect your database to Auth0, you should add the connection string (\u003ccode\u003econString\u003c/code\u003e) of your database in the action scripts.\u003c/p\u003e\u003cp\u003eScroll down a little to the \u003cstrong\u003eDatabase Settings\u003c/strong\u003e under the Action scripts section. Add the database URL you copied from your ElephantSQL as an environment variable (to keep it as a secret).\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/qkAAeUkyauInLsJYqqGZw/fdddd502f0dbf1048d40bf47c3526c56/07_4database-settings.png\" alt=\"Adding the database URL as an env variable \u0026#39;POSTGRES_URL\u0026#39; settings section\"/\u003e\u003c/p\u003e\u003cp\u003eNow, update the \u003ccode\u003econString\u003c/code\u003e in your action scripts with this value.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e const conString = \u0026#39;postgres://user:pass@localhost/mydb\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e const conString = configuration.POSTGRES_URL;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRemember to add the connection string in every database action script, and that\u0026#39;s all! Now you can click on \u003cstrong\u003eSave and Try\u003c/strong\u003e button to test your database.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can also link an existing user database to Auth0. You should modify some code in the action scripts to match your database configuration.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Testing-the-Database\"\u003eTesting the Database\u003c/h2\u003e\u003cp\u003eFirst, try creating a user in the database using \u003cstrong\u003eCreate\u003c/strong\u003e script.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7EZTXGBq7Yks8RnklmrcfP/66a3c8c9c4c6c2dcffc6c61c456116ec/08_2create-user.png\" alt=\"user created successfully after trying the custom create script\"/\u003e\u003c/p\u003e\u003cp\u003eYou can find the user in your database. Open the \u003cstrong\u003eSQL Browser\u003c/strong\u003e in ElephantSQL and run the following command. It retrieves the first 100 records from the database containing information about the users.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eSELECT\u003c/span\u003e \u003cspan\u003e*\u003c/span\u003e \u003cspan\u003eFROM\u003c/span\u003e \u003cspan\u003e\u0026#34;public\u0026#34;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e\u0026#34;users\u0026#34;\u003c/span\u003e \u003cspan\u003eLIMIT\u003c/span\u003e \u003cspan\u003e100\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2OEtiruBOBch1KQuxrJxlm/6c799eba9dcd0693d2f08a9e89259b52/09_7elephantsql-users.png\" alt=\"database rows will be displayed on the browser tab after executing the above command\"/\u003e\u003c/p\u003e\u003cp\u003eSimilarly, login, validate your email and delete the user. For deleting a user, you should use the unique id of the specific user. Test all the scripts and use this database in applications that you create on the Auth0 dashboard. You can select to use this database on \u003cstrong\u003eConnections\u003c/strong\u003e tab in your application. If you experience any problem through the whole process, reach out to the \u003ca href=\"https://community.auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 community\u003c/a\u003e for assistance.\u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eIn this article, you learned how to set up your PostgreSQL database as an Auth0 custom database. Even if you have a different type of database, you can easily connect to Auth0 using the templates provided. In this tutorial, you merely changed the Auth0 templates. Modify the action scripts accordingly if you need to keep more information about the user or want to configure the already existing user store as Auth0 custom database. \u003c/p\u003e\u003cp\u003eUsing a custom database introduces several security issues as well as additional configuration work. You should keep your database in a secure cloud to prevent data leakage. You can rely on Auth0 if you don\u0026#39;t want to put in any extra effort. It saves your users\u0026#39; information in very secure databases (\u003ca href=\"https://auth0.com/blog/how-we-store-data-in-the-cloud-at-auth0/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esee how Auth0 stores data?\u003c/a\u003e).\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Connect Auth0 to PostgreSQL to create and maintain your own user store.",
      "date_published": "2021-10-12T14:55:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/build-and-secure-fastapi-server-with-auth0/",
      "title": "Build and Secure a FastAPI Server with Auth0",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eFastAPI is a relatively new Python framework that enables you to create applications very quickly. This framework allows you to read API request data seamlessly with built-in modules and is a lightweight alternative to Flask.\u003c/p\u003e\u003cp\u003eIn this article, we will go over the features of \u003ccode\u003eFastAPI\u003c/code\u003e, set up a basic API, protect an endpoint using Auth0, and you\u0026#39;ll learn how simple it is to get started.\u003c/p\u003e\u003cp\u003eBefore we get started, you can also check out the contents of this blog post in video format by playing the video below: 👇\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.youtube.com/embed/gkkDP_SVxyk\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\u003ch2 id=\"Prerequisites\"\u003ePrerequisites\u003c/h2\u003e\u003cp\u003eBefore you start building with \u003ca href=\"https://fastapi.tiangolo.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eFastAPI\u003c/a\u003e, you need to have Python \u003ccode\u003e\u003cspan\u003e3.8\u003c/span\u003e\u003cspan\u003e.2\u003c/span\u003e\u003c/code\u003e and a \u003ca href=\"https://auth0.com/signup\" data-amp-replace=\"CLIENT_ID\" data-amp-addparams=\"anonId=CLIENT_ID(cid-scope-cookie-fallback-name)\" target=\"_blank\" rel=\"noreferrer noopener\"\u003efree Auth0 account; you can sign up here\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIf you got that Python version installed and your Auth0 account, you can create a new \u003ccode\u003eFastAPI\u003c/code\u003e application. To begin, create a new directory to develop within. For this example, you will make a directory called \u003ccode\u003efastapi\u003cspan\u003e-\u003c/span\u003eexample\u003c/code\u003e and a subfolder called \u003ccode\u003eapplication\u003c/code\u003e; this subfolder is where your code will live.\u003c/p\u003e\u003cp\u003eIn the \u003ccode\u003efastapi\u003cspan\u003e-\u003c/span\u003eexample\u003c/code\u003e folder, create a virtual environment using the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epython3 -m venv .env\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis creates a virtual environment, and it separates the dependencies from the rest of your computer libraries. In other words, you don\u0026#39;t pollute the global namespace with libraries and dependencies, which might impact other Python projects.\u003c/p\u003e\u003cp\u003eAfter creating the virtual environment, you need to activate it. For Unix-based operating systems, here\u0026#39;s the command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003esource\u003c/span\u003e .env/bin/activate\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you are in another operating system, you can find a list of \u003ca href=\"https://docs.python.org/3/library/venv.html#creating-virtual-environments\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehow you can activate an environment on this documentation page\u003c/a\u003e. After activating your virtual environment, you can install the packages you are going to use: \u003ccode\u003eFastAPI\u003c/code\u003e, \u003ca href=\"https://www.uvicorn.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003euvicorn\u003c/a\u003e server, \u003ca href=\"https://pyjwt.readthedocs.io/en/latest/usage.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epyjwt\u003c/a\u003e, and update \u003ccode\u003epip\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epip \u003cspan\u003einstall\u003c/span\u003e -U pip\npip \u003cspan\u003einstall\u003c/span\u003e fastapi uvicorn \u003cspan\u003e\u0026#39;pyjwt[crypto]\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Get-Started-with-FastAPI\"\u003eGet Started with FastAPI\u003c/h2\u003e\u003cp\u003eNow that all the libraries are installed, you can create a \u003ccode\u003emain\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file inside the \u003ccode\u003eapplication\u003c/code\u003e folder; that\u0026#39;s where your API code will live. The contents of the \u003ccode\u003emain\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e will look like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;main.py\nPython FastAPI Auth0 integration example\n\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n \n\u003cspan\u003efrom\u003c/span\u003e fastapi \u003cspan\u003eimport\u003c/span\u003e FastAPI\n\u003cspan\u003e# Creates app instance\u003c/span\u003e\napp \u003cspan\u003e=\u003c/span\u003e FastAPI\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n \n \n\u003cspan\u003e@app\u003cspan\u003e.\u003c/span\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/public\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003epublic\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;No access token required to access this route\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\n    result \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;msg\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Hello from a public endpoint! You don\u0026#39;t need to be \u0026#34;\u003c/span\u003e\n                \u003cspan\u003e\u0026#34;authenticated to see this.\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e result\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0026#39;s break this down:\n - To start, you are importing the \u003ccode\u003eFastAPI\u003c/code\u003e library;\n - Then creating your app by instantiating a \u003ccode\u003e\u003cspan\u003eFastAPI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e object;\n - After that, you use \u003ccode\u003e@app\u003cspan\u003e.\u003c/span\u003eget\u003c/code\u003e to define a route that handles \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e\u003c/code\u003e requests;\n - Finally, you have the path operation function called \u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, which is a function that will run each time that route is called, and it returns a dictionary with the welcome message.\u003c/p\u003e\u003cp\u003eNow that you\u0026#39;ve got your first endpoint code, to get the server up and running, run the following command on the root directory of the project:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003euvicorn application.main:app --reload\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWith your server is running, you can go either to \u003ca href=\"http://127.0.0.1:8000/docs\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttp://127.0.0.1:8000/docs\u003c/a\u003e to see the automatically generated documentation for the first endpoint like shown in the image below:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3fE3ngkaleHJw78ZNzQway/24719642235593cbf2016b4b86f38c54/Screen_Shot_2021-10-04_at_09.55.16.png\" alt=\"FastAPI documentation page showing the public endpoint\"/\u003e\u003c/p\u003e\u003cp\u003eOr you can make your first request in a new terminal window by using \u003ccode\u003ecURL\u003c/code\u003e. Keep in mind that if you are a Windows user on an older version of the operating system, you will have to \u003ca href=\"https://curl.se/dlwiz/?type=bin\" target=\"_blank\" rel=\"noreferrer noopener\"\u003einstall curl\u003c/a\u003e before running the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e -X \u003cspan\u003e\u0026#39;GET\u0026#39;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n  --url http://127.0.0.1:8000/api/public\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd you should see a JSON as a result of the request you just did similar to this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;msg\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Hello from a public endpoint! You don\u0026#39;t need to be authenticated to see this.\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFor simplicity\u0026#39;s sake, you are going to use the \u003ccode\u003ecURL\u003c/code\u003e for the rest of this post.\u003c/p\u003e\u003ch2 id=\"Create-a-Private-Endpoint\"\u003eCreate a Private Endpoint\u003c/h2\u003e\u003cp\u003eNow that a base API server is set up, you will add one more endpoint to your \u003ccode\u003emain\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file. In this application, you will have a \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003epublic\u003c/span\u003e\u003c/code\u003e route available for everyone and a \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eprivate\u003c/span\u003e\u003c/code\u003e route that only you can access with the access token you\u0026#39;ll get from Auth0.\u003c/p\u003e\u003cp\u003eNow you need to update the \u003ccode\u003emain\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file. Here\u0026#39;s what you\u0026#39;ll need to change to the imports section:\u003c/p\u003e\u003cul\u003e\u003cli\u003eFirst, you need to import \u003ccode\u003eDepends\u003c/code\u003e from the \u003ccode\u003efastapi\u003c/code\u003e module, that\u0026#39;s FastAPI dependency injection system;\u003c/li\u003e\u003cli\u003eThen, you\u0026#39;ll also need to import the \u003ccode\u003eHTTPBearer\u003c/code\u003e class from the \u003ccode\u003efastapi\u003cspan\u003e.\u003c/span\u003esecurity\u003c/code\u003e module, a built-in security scheme for authorization headers with bearer tokens;\u003c/li\u003e\u003cli\u003eYou will need to create the authorization scheme based on the \u003ccode\u003eHTTPBearer\u003c/code\u003e. This will be used to guarantee the presence of the authorization header with the \u003ccode\u003eBearer\u003c/code\u003e token in each request made to the private endpoint.\u003c/li\u003e\u003c/ul\u003e\u003cblockquote\u003e\u003cp\u003eThe \u003ca href=\"https://auth0.com/docs/security/tokens/access-tokens\" target=\"_blank\" rel=\"noreferrer noopener\"\u003etoken informs the API that the bearer of the token\u003c/a\u003e has been authorized to access the API and perform specific actions specified by the scope that was granted during authorization.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eOther than updating the imports, you need to implement the private endpoint. The \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eprivate\u003c/span\u003e\u003c/code\u003e endpoint will also accept \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e\u003c/code\u003e requests, and here is what the code \u003ccode\u003emain\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e looks like for now:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;main.py\nPython FastAPI Auth0 integration example\n\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n \n\u003cspan\u003efrom\u003c/span\u003e fastapi \u003cspan\u003eimport\u003c/span\u003e Depends\u003cspan\u003e,\u003c/span\u003e FastAPI  \u003cspan\u003e# 👈 new imports\u003c/span\u003e\n\u003cspan\u003efrom\u003c/span\u003e fastapi\u003cspan\u003e.\u003c/span\u003esecurity \u003cspan\u003eimport\u003c/span\u003e HTTPBearer  \u003cspan\u003e# 👈 new imports\u003c/span\u003e\n\n\n\u003cspan\u003e# Scheme for the Authorization header\u003c/span\u003e\ntoken_auth_scheme \u003cspan\u003e=\u003c/span\u003e HTTPBearer\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e  \u003cspan\u003e# 👈 new code\u003c/span\u003e\n \n\u003cspan\u003e# Creates app instance\u003c/span\u003e\napp \u003cspan\u003e=\u003c/span\u003e FastAPI\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e@app\u003cspan\u003e.\u003c/span\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/public\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003epublic\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;No access token required to access this route\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n \n    result \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;msg\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Hello from a public endpoint! You don\u0026#39;t need to be \u0026#34;\u003c/span\u003e\n                \u003cspan\u003e\u0026#34;authenticated to see this.\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e result\n\n\n\u003cspan\u003e# new code 👇\u003c/span\u003e\n\u003cspan\u003e@app\u003cspan\u003e.\u003c/span\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/private\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e Depends\u003cspan\u003e(\u003c/span\u003etoken_auth_scheme\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;A valid access token is required to access this route\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n \n    result \u003cspan\u003e=\u003c/span\u003e token\u003cspan\u003e.\u003c/span\u003ecredentials\n\n    \u003cspan\u003ereturn\u003c/span\u003e result\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003eDepends\u003c/code\u003e class is responsible for evaluating each request that a given endpoint receives against a function, class, or instance. In this case, it will evaluate the requests against the \u003ccode\u003eHTTPBearer\u003c/code\u003e scheme that will check the request for an authorization header with a bearer token.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eYou can find more details on how \u003ccode\u003eFastAPI\u003c/code\u003e \u003ca href=\"https://fastapi.tiangolo.com/tutorial/dependencies/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edependency injection works on its documentation\u003c/a\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eNow your private endpoint returns the received token. If no token is provided, it will return a \u003ccode\u003e\u003cspan\u003e403\u003c/span\u003e Forbidden\u003c/code\u003e status code with the detail saying you are \u003ccode\u003e\u003cspan\u003e\u0026#34;Not authenticated\u0026#34;\u003c/span\u003e\u003c/code\u003e. Because you used the \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003ereload\u003c/code\u003e flag while running your server, you don\u0026#39;t need to re-run the command; \u003ccode\u003euvicorn\u003c/code\u003e will pick up the changes and update the server every time you save your files. Now make a request to the \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eprivate\u003c/span\u003e\u003c/code\u003e endpoint to check its behavior. First, let\u0026#39;s make a request \u003cem\u003ewithout\u003c/em\u003e passing an authorization header:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e -X \u003cspan\u003e\u0026#39;GET\u0026#39;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n  --url \u003cspan\u003e\u0026#39;http://127.0.0.1:8000/api/private\u0026#39;\u003c/span\u003e\n\u003cspan\u003e# {\u0026#34;detail\u0026#34;: \u0026#34;Not authenticated\u0026#34;}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd now, if you make a request with the authorization header, but with a \u003cstrong\u003erandom\u003c/strong\u003e string as token value, you should see the same random value as a result:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e -X \u003cspan\u003e\u0026#39;GET\u0026#39;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n  --url \u003cspan\u003e\u0026#39;http://127.0.0.1:8000/api/private\u0026#39;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n  --header \u003cspan\u003e\u0026#39;Authorization: Bearer FastAPI is awesome\u0026#39;\u003c/span\u003e\n\u003cspan\u003e# \u0026#34;FastAPI is awesome\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see, your endpoint \u003cstrong\u003eisn\u0026#39;t protected\u003c/strong\u003e since it accepts any string as the value for the authorization header. It is \u003cstrong\u003enot enough\u003c/strong\u003e to receive an authorization header; you must also \u003cstrong\u003everify the value of the bearer token\u003c/strong\u003e to let somebody access the endpoint. Let\u0026#39;s fix that behavior.\u003c/p\u003e\u003ch2 id=\"Set-up-Auth0-an-API\"\u003eSet up Auth0 an API\u003c/h2\u003e\u003cp\u003eBefore you get to the point where you are ready to validate tokens in your endpoints, you need to \u003ca href=\"https://auth0.com/docs/get-started/set-up-apis\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eset up an API in Auth0\u003c/a\u003e. When this API is set up, you get access to a few pieces of information that Auth0 requires - an audience, client ID, and client secret.\u003c/p\u003e\u003cp\u003eYou also need to have access to that information from within the server; that\u0026#39;s where a configuration file comes into play. You will need to create a configuration file called \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003econfig\u003c/code\u003e at the root of the project. This is what the \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003econfig\u003c/code\u003e file should look like below. Remember to update the values accordingly:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e# .config\n \n[AUTH0]\nDOMAIN = your.domain.auth0.com\nAPI_AUDIENCE = your.api.audience\nALGORITHMS = RS256\nISSUER = https://your.domain.auth0.com/\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis configuration is the first piece of the puzzle of checking for the Auth0 configuration settings in the token validation stage. Another good rule to follow is to never commit your configuration files with environment variables to source code. To prevent this from occurring, you should create a \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003egitignore\u003c/code\u003e file in the project\u0026#39;s root and add the \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003econfig\u003c/code\u003e file as an entry:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e# .gitignore\n.config\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Add-JSON-Web-Token--JWT--Validation\"\u003eAdd JSON Web Token (JWT) Validation\u003c/h2\u003e\u003cp\u003eYour \u003ccode\u003eFastAPI\u003c/code\u003e server now has a \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eprivate\u003c/span\u003e\u003c/code\u003e route, but it is not protected yet. It only checks if you have an authorization header in the request, which means you are missing a step in the process: you need to validate the access token. To do that, you need to create an object that does \u003ca href=\"https://auth0.com/learn/json-web-tokens/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eall the steps for validating a JWT\u003c/a\u003e because Auth0\u0026#39;s access tokens are JWTs.\u003c/p\u003e\u003cp\u003eTo separate responsibilities from the routing definition, you should create a new file called \u003ccode\u003eutils\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e inside the \u003ccode\u003eapplication\u003c/code\u003e folder to hold all the utility code, like validating the access token and reading the configuration information.\u003c/p\u003e\u003cp\u003eStart by importing the Python \u003ccode\u003eos\u003c/code\u003e library, as well as the \u003ccode\u003ePyJWT\u003c/code\u003e and \u003ccode\u003econfigparser\u003c/code\u003e libraries. The OS library gives you access to the environment variables. The JWT library gives you functions to check and validate a JWT. The \u003ccode\u003eConfigParser\u003c/code\u003e class from the namesake library provides a way for Python to read the configuration settings found in the \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003econfig\u003c/code\u003e file you created earlier. And the first thing you have after the imports is a function called \u003ccode\u003e\u003cspan\u003eset_up\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, which you can see below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;utils.py\n\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e os\n\u003cspan\u003eimport\u003c/span\u003e jwt\n\u003cspan\u003efrom\u003c/span\u003e configparser \u003cspan\u003eimport\u003c/span\u003e ConfigParser\n\n \n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eset_up\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;Sets up configuration for the app\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\n    env \u003cspan\u003e=\u003c/span\u003e os\u003cspan\u003e.\u003c/span\u003egetenv\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;ENV\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;.config\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003eif\u003c/span\u003e env \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#34;.config\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        config \u003cspan\u003e=\u003c/span\u003e ConfigParser\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        config\u003cspan\u003e.\u003c/span\u003eread\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;.config\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        config \u003cspan\u003e=\u003c/span\u003e config\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;AUTH0\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        config \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;DOMAIN\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e os\u003cspan\u003e.\u003c/span\u003egetenv\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;DOMAIN\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;your.domain.com\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;API_AUDIENCE\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e os\u003cspan\u003e.\u003c/span\u003egetenv\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;API_AUDIENCE\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;your.audience.com\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;ISSUER\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e os\u003cspan\u003e.\u003c/span\u003egetenv\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;ISSUER\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;https://your.domain.com/\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;ALGORITHMS\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e os\u003cspan\u003e.\u003c/span\u003egetenv\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;ALGORITHMS\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;RS256\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e config\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003e\u003cspan\u003eset_up\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e function is responsible for reading the \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003econfig\u003c/code\u003e file and creating a configuration object that works like a dictionary. Because this sample code is prepared to also run on environment variables, the \u003ccode\u003e\u003cspan\u003eset_up\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e function by default will try to read the \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003econfig\u003c/code\u003e file. You can change this behavior by setting the \u003ccode\u003e\u003cspan\u003eENV\u003c/span\u003e\u003c/code\u003e environment variable to any other value, in which case a dictionary will be created by reading all the environment variables you can see under the \u003ccode\u003e\u003cspan\u003eelse\u003c/span\u003e\u003c/code\u003e clause above.\u003c/p\u003e\u003cp\u003eThe next piece of the puzzle is where the magic happens. You\u0026#39;ll create a \u003ccode\u003eVerifyToken\u003c/code\u003e class to handle JWT token validation:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# paste the code 👇 after the set_up() function in the utils.py file\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eVerifyToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;Does all the token verification using PyJWT\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e__init__\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e,\u003c/span\u003e token\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003etoken \u003cspan\u003e=\u003c/span\u003e token\n        self\u003cspan\u003e.\u003c/span\u003econfig \u003cspan\u003e=\u003c/span\u003e set_up\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n        \u003cspan\u003e# This gets the JWKS from a given URL and does processing so you can\u003c/span\u003e\n        \u003cspan\u003e# use any of the keys available\u003c/span\u003e\n        jwks_url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ef\u0026#39;https://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003eself\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;DOMAIN\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/.well-known/jwks.json\u0026#39;\u003c/span\u003e\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003ejwks_client \u003cspan\u003e=\u003c/span\u003e jwt\u003cspan\u003e.\u003c/span\u003ePyJWKClient\u003cspan\u003e(\u003c/span\u003ejwks_url\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003everify\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003e# This gets the \u0026#39;kid\u0026#39; from the passed token\u003c/span\u003e\n        \u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n            self\u003cspan\u003e.\u003c/span\u003esigning_key \u003cspan\u003e=\u003c/span\u003e self\u003cspan\u003e.\u003c/span\u003ejwks_client\u003cspan\u003e.\u003c/span\u003eget_signing_key_from_jwt\u003cspan\u003e(\u003c/span\u003e\n                self\u003cspan\u003e.\u003c/span\u003etoken\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ekey\n        \u003cspan\u003eexcept\u003c/span\u003e jwt\u003cspan\u003e.\u003c/span\u003eexceptions\u003cspan\u003e.\u003c/span\u003ePyJWKClientError \u003cspan\u003eas\u003c/span\u003e error\u003cspan\u003e:\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;msg\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e error\u003cspan\u003e.\u003c/span\u003e__str__\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003eexcept\u003c/span\u003e jwt\u003cspan\u003e.\u003c/span\u003eexceptions\u003cspan\u003e.\u003c/span\u003eDecodeError \u003cspan\u003eas\u003c/span\u003e error\u003cspan\u003e:\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;msg\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e error\u003cspan\u003e.\u003c/span\u003e__str__\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n            payload \u003cspan\u003e=\u003c/span\u003e jwt\u003cspan\u003e.\u003c/span\u003edecode\u003cspan\u003e(\u003c/span\u003e\n                self\u003cspan\u003e.\u003c/span\u003etoken\u003cspan\u003e,\u003c/span\u003e\n                self\u003cspan\u003e.\u003c/span\u003esigning_key\u003cspan\u003e,\u003c/span\u003e\n                algorithms\u003cspan\u003e=\u003c/span\u003eself\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;ALGORITHMS\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                audience\u003cspan\u003e=\u003c/span\u003eself\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;API_AUDIENCE\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                issuer\u003cspan\u003e=\u003c/span\u003eself\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;ISSUER\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eexcept\u003c/span\u003e Exception \u003cspan\u003eas\u003c/span\u003e e\u003cspan\u003e:\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ee\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003ereturn\u003c/span\u003e payload\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0026#39;s break down this class to understand the steps here:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eFirst, you have the \u003ccode\u003e\u003cspan\u003e__init__\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method:\n \u003col start=\"1\"\u003e\u003cli\u003eThis method is responsible for specifying the \u003ccode\u003etoken\u003c/code\u003e parameter the \u003ccode\u003eVerifyToken\u003c/code\u003e class needs;\u003c/li\u003e\u003cli\u003eIt also runs the \u003ccode\u003e\u003cspan\u003eset_up\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e function to build the configuration the class will need;\u003c/li\u003e\u003cli\u003eAnd finally, it sets the path for the \u003ccode\u003e\u003cspan\u003eJWKS\u003c/span\u003e\u003c/code\u003e file by using the \u003ccode\u003ePyJWKClient\u003c/code\u003e from the \u003ccode\u003ePyJWT\u003c/code\u003e package. A \u003ca href=\"https://auth0.com/docs/tokens/json-web-tokens/json-web-key-sets\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJSON Web Key Set, or JWKS for short\u003c/a\u003e contains the information necessary to validate a token signature and ensure that it is a valid token. Because Auth0 implements OAuth 2.0, it has a \u0026#34;well-known\u0026#34; endpoint which you can call and get the extra metadata used to validate the token and its properties.\u003c/li\u003e\u003c/ol\u003e\u003c/li\u003e\u003cli\u003eSecond, you have the \u003ccode\u003e\u003cspan\u003everify\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method:\n \u003col start=\"1\"\u003e\u003cli\u003eThis method uses the key ID (\u003ccode\u003ekid\u003c/code\u003e claim present in the token header) to grab the key used from the JWKS to verify the token signature. If this step fails by any of the possible errors, the error message is returned;\u003c/li\u003e\u003cli\u003eThen, the method tries to decode the JWT by using the information gathered so far. In case of errors, it returns the error message. When successful, the token payload is returned.\u003c/li\u003e\u003c/ol\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eLet\u0026#39;s see how to use this piece of code in our private endpoint in the section ahead.\u003c/p\u003e\u003ch2 id=\"Validate-an-Auth0-Access-Token\"\u003eValidate an Auth0 Access Token\u003c/h2\u003e\u003cp\u003eThe final puzzle piece is to import the class you just created in the \u003ccode\u003eutils\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file and use it in the \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eprivate\u003c/span\u003e\u003c/code\u003e endpoint. Here\u0026#39;s what you need to change:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eUpdate the imports section to add the import clause for the \u003ccode\u003eVerifyToken\u003c/code\u003e, then head to your endpoint; you will also need to import the \u003ccode\u003eResponse\u003c/code\u003e class and the \u003ccode\u003estatus\u003c/code\u003e object from \u003ccode\u003efastapi\u003c/code\u003e so you can give a detailed response in case of an error;\u003c/li\u003e\u003cli\u003eThen, you\u0026#39;ll need to adjust the endpoint by passing the token to the \u003ccode\u003eVerifyToken\u003c/code\u003e class and checking whether the result of the \u003ccode\u003e\u003cspan\u003everify\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method is an error.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eHere\u0026#39;s what your \u003ccode\u003emain\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file should look like with all the changes above:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;main.py\nPython FastAPI Auth0 integration example\n\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n \n\u003cspan\u003efrom\u003c/span\u003e fastapi \u003cspan\u003eimport\u003c/span\u003e Depends\u003cspan\u003e,\u003c/span\u003e FastAPI\u003cspan\u003e,\u003c/span\u003e Response\u003cspan\u003e,\u003c/span\u003e status  \u003cspan\u003e# 👈 new imports\u003c/span\u003e\n\u003cspan\u003efrom\u003c/span\u003e fastapi\u003cspan\u003e.\u003c/span\u003esecurity \u003cspan\u003eimport\u003c/span\u003e HTTPBearer\n \n\u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003eutils \u003cspan\u003eimport\u003c/span\u003e VerifyToken  \u003cspan\u003e# 👈 new import\u003c/span\u003e\n\n\u003cspan\u003e# Scheme for the Authorization header\u003c/span\u003e\ntoken_auth_scheme \u003cspan\u003e=\u003c/span\u003e HTTPBearer\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n \n\u003cspan\u003e# Creates app instance\u003c/span\u003e\napp \u003cspan\u003e=\u003c/span\u003e FastAPI\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n \n \n\u003cspan\u003e@app\u003cspan\u003e.\u003c/span\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/public\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003epublic\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;No access token required to access this route\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n \n   result \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n       \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n       \u003cspan\u003e\u0026#34;msg\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Hello from a public endpoint! You don\u0026#39;t need to be \u0026#34;\u003c/span\u003e\n               \u003cspan\u003e\u0026#34;authenticated to see this.\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n   \u003cspan\u003e}\u003c/span\u003e\n   \u003cspan\u003ereturn\u003c/span\u003e result\n \n \n\u003cspan\u003e@app\u003cspan\u003e.\u003c/span\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/private\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e:\u003c/span\u003e Response\u003cspan\u003e,\u003c/span\u003e token\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e Depends\u003cspan\u003e(\u003c/span\u003etoken_auth_scheme\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e  \u003cspan\u003e# 👈 updated code\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;A valid access token is required to access this route\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n \n    result \u003cspan\u003e=\u003c/span\u003e VerifyToken\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e.\u003c/span\u003ecredentials\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003everify\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e  \u003cspan\u003e# 👈 updated code\u003c/span\u003e\n\n    \u003cspan\u003e# 👇 new code\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e result\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n       response\u003cspan\u003e.\u003c/span\u003estatus_code \u003cspan\u003e=\u003c/span\u003e status\u003cspan\u003e.\u003c/span\u003eHTTP_400_BAD_REQUEST\n       \u003cspan\u003ereturn\u003c/span\u003e result\n    \u003cspan\u003e# 👆 new code\u003c/span\u003e\n \n    \u003cspan\u003ereturn\u003c/span\u003e result\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWith this update, you are properly setting up your protected endpoint and doing all the verification steps for the access tokens you need. 🎉\u003c/p\u003e\u003cp\u003eEven though you started your server with the \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003ereload\u003c/code\u003e flag because you need to make sure the configuration is loaded, it is a good time to terminate the \u003ccode\u003euvicorn\u003c/code\u003e process and then restart the server. That will guarantee the proper functionality of your API with the configuration parameters from the \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003econfig\u003c/code\u003e file or environment variables.\u003c/p\u003e\u003cp\u003eBefore you can make requests to the protected endpoint in the \u003ccode\u003eFastAPI\u003c/code\u003e server, you need the access token from Auth0. You can get it by copying it from the Auth0 dashboard in the \u003ccode\u003eTest\u003c/code\u003e tab of your API. \u003c/p\u003e\u003cp\u003eYou can also use a curl \u003ccode\u003e\u003cspan\u003ePOST\u003c/span\u003e\u003c/code\u003e request to Auth0\u0026#39;s \u003ccode\u003eoauth\u003cspan\u003e/\u003c/span\u003etoken\u003c/code\u003e endpoint to get the access token, and you can copy this request from the \u003ccode\u003eTest\u003c/code\u003e tab of your API in the Auth0 dashboard. The curl request will look like this; remember to fill the values as necessary:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e -X \u003cspan\u003e\u0026#39;POST\u0026#39;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n--url \u003cspan\u003e\u0026#39;https://\u0026lt;YOUR DOMAIN HERE\u0026gt;/oauth/token\u0026#39;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n --header \u003cspan\u003e\u0026#39;content-type: application/x-www-form-urlencoded\u0026#39;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n --data \u003cspan\u003egrant_type\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003eclient_credentials \u003cspan\u003e\\\u003c/span\u003e\n --data \u003cspan\u003e\u0026#39;client_id=\u0026lt;YOUR CLIENT ID HERE\u0026gt;\u0026#39;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n --data \u003cspan\u003eclient_secret\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eYOUR CLIENT SECRET HERE\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n --data \u003cspan\u003eaudience\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eYOUR AUDIENCE HERE\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the command line, you should see a response containing your bearer token, like this one:​​\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;access_token\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026lt;YOUR_BEARER_TOKEN\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;expires_in\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e86400\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;token_type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Bearer\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow you can use this access token to access the private endpoint:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e -X \u003cspan\u003e\u0026#39;GET\u0026#39;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n--url \u003cspan\u003e\u0026#39;http://127.0.0.1:8000/api/private\u0026#39;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n--header  \u003cspan\u003e\u0026#39;Authorization: Bearer \u0026lt;YOUR_BEARER_TOKEN\u0026gt;\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf the request succeeds, the server will send back the payload of the access token:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;iss\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;https://\u0026lt;YOUR_DOMAIN\u0026gt;/\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;sub\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;iojadoijawdioWDasdijasoid@clients\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;aud\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;http://\u0026lt;YOUR_AUDIENCE\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;iat\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1630341660\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;exp\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1630428060\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;azp\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;ADKASDawdopjaodjwopdAWDdsd\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;gty\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;client-credentials\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eKeep in mind that if the validation fails, you should see the details of what went wrong. \u003c/p\u003e\u003cp\u003eAnd that’s it — you have finished protecting the private endpoint and testing its protection.\u003c/p\u003e\u003ch2 id=\"Recap\"\u003eRecap\u003c/h2\u003e\u003cp\u003eYou learned quite a few things in this blog post. To start, you learned the basics of \u003ccode\u003eFastAPI\u003c/code\u003e by implementing two endpoints — one public, one private. You saw how simple it is to make requests to both of these endpoints. You created a verification class and saw how PyJWT helps you validate an Auth0 access token, and you learned what JWKS is.\u003c/p\u003e\u003cp\u003eYou went through the process of creating your API in the Auth0 dashboard. You also learned how to secure one of your endpoints by leveraging the dependency injection system FastAPI provides to help you implement integrations. And you did all of this very quickly.\u003c/p\u003e\u003cp\u003eIn short, you’ve learned how easy it is to get up and running with \u003ccode\u003eFastAPI\u003c/code\u003e, as well as how to use Auth0 for protecting your endpoints.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://github.com/auth0-blog/auth0-python-fastapi-sample\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eIn this GitHub repo\u003c/a\u003e, you’ll find the full code for the sample application you built today. If you have any questions, ask them in the community forum thread for this blog post.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn the basics of FastAPI, how to quickly set up a server and secure endpoints with Auth0.",
      "date_published": "2021-10-08T20:00:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/secure-rails-api/",
      "title": "Secure a Rails API with Auth0",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIf you want to expose an API publicly on the Internet, authorization will be a requirement for you sooner or later. You want to verify that the client consuming the API has the appropriate permissions.\u003c/p\u003e\u003cp\u003eThis guide is exactly about that. We\u0026#39;ll be securing an API written using \u003ca href=\"https://rubyonrails.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eRuby On Rails\u003c/a\u003e, with \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0\u003c/a\u003e as the authorization server.\u003c/p\u003e\u003cp\u003eThere\u0026#39;s a repository with the code so that you can follow along in \u003ca href=\"https://github.com/auth0-blog/rails-api-auth0\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGithub\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"Securing-an-API\"\u003eSecuring an API\u003c/h2\u003e\u003cp\u003eI didn\u0026#39;t explain what I mean by securing an API yet. Essentially, we\u0026#39;re ensuring that protected routes are accessible only for the users with enough rights.\u003c/p\u003e\u003cp\u003eWhen it comes to security, it\u0026#39;s generally considered a bad idea to roll your own bespoke implementation. Instead, I\u0026#39;m using \u003ca href=\"https://auth0.com/docs/protocols/protocol-oauth2\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOAuth\u003c/a\u003e, a battle-tested and widely used authorization framework for web applications.\u003c/p\u003e\u003cp\u003eIn this context, Auth0 fulfills the role of the \u003cem\u003eauthorization server\u003c/em\u003e and abstracts a significant part of the work away from us. That way, we can focus on delivering value to our users.\u003c/p\u003e\u003cp\u003eWithout getting into too many details on how OAuth works, we assume that calls to our API will include a bearer token using the industry-standard \u003ca href=\"https://jwt.io/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJWT\u003c/a\u003e format. The token contains a series of claims regarding its issuer, how long it is valid, and what rights it grants. Let\u0026#39;s have a look at a sample token:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;iss\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;https://yourTenant.eu.auth0.com/\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;sub\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;zHwnsh0j2sTj4u3ss6YedSFrzyb2\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;aud\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;https://targetAudience.com\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;iat\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1621369130\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;exp\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1791455530\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;azp\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;ThEkgdG1NndLlWoNMcEdEr2KJIs9vKad\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;scope\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;openid profile read:admin-messages\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;permissions\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;read:admin-messages\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe\u0026#39;re going to implement verification for that token and reject requests that don\u0026#39;t have the required permissions.\u003c/p\u003e\u003ch2 id=\"Getting-Started\"\u003eGetting Started\u003c/h2\u003e\u003cp\u003eWe\u0026#39;re getting started with our base application, bootstrapped with Rails 6. This \u003ca href=\"https://github.com/auth0-blog/rails-api-auth0/tree/starter\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ebranch\u003c/a\u003e is a good starting point. You can download it by running the following command in a terminal window:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003egit\u003c/span\u003e clone -b starter --single-branch https://github.com/auth0-blog/rails-api-auth0.git\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe API has three endpoints with different levels of protection:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003emessages\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003epublic\u003c/span\u003e\u003c/code\u003e: Public route.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003emessages\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eprotected\u003c/span\u003e\u003c/code\u003e: Requires a valid access token.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003emessages\u003cspan\u003e/\u003c/span\u003eadmin\u003c/code\u003e: Requires a valid access token. Since Auth0 uses JWT as its access token format, we can inspect it and make sure it has a \u003ccode\u003epermissions\u003c/code\u003e claim that contains the scope \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eadmin\u003cspan\u003e-\u003c/span\u003emessages\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Running-the-Application\"\u003eRunning the Application\u003c/h3\u003e\u003cp\u003eTo run the application, we first need the correct ruby version. The easiest way to do so is to use a version manager like \u003ca href=\"https://github.com/rbenv/rbenv\" target=\"_blank\" rel=\"noreferrer noopener\"\u003erbenv\u003c/a\u003e. Once you install it, run this command inside the repository to install the right version of ruby:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003erbenv \u003cspan\u003einstall\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eInstall the dependencies for the application:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ebundle \u003cspan\u003einstall\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd finally, run the application:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ebin/rails s\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can verify that the application is working correctly with \u003ccode\u003ecurl\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e localhost:6060/api/messages/public\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe command will return a 200 code, plus the message:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;The API doesn\u0026#39;t require an access token to share this message.\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Creating-an-API-on-Auth0\"\u003eCreating an API on Auth0\u003c/h3\u003e\u003cp\u003eTo secure the API with Auth0, you need an Auth0 account. If you haven\u0026#39;t one, you can \u003ca href=\"https://auth0.com/signup\" data-amp-replace=\"CLIENT_ID\" data-amp-addparams=\"anonId=CLIENT_ID(cid-scope-cookie-fallback-name)\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esign up for free\u003c/a\u003e right now. In the \u003cem\u003eAPIs\u003c/em\u003e section of the \u003ca href=\"https://manage.auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 dashboard\u003c/a\u003e, click \u003cem\u003eCreate API\u003c/em\u003e. Provide a name and an identifier for your API. You will use the identifier as an \u003ccode\u003eaudience\u003c/code\u003e later, when you are configuring the access token verification. Leave the \u003cem\u003eSigning Algorithm\u003c/em\u003e as RS256.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5y9rQHvjBzjxQo5aDIrsKE/842c2fadf99e521fc20a8326dfa8ee2e/create-auth0-api.png\" alt=\"Create API\"/\u003e\u003c/p\u003e\u003cp\u003eOnce you create the API, go to the \u003cem\u003ePermissions\u003c/em\u003e tab in the API details and add a permission called \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eadmin\u003cspan\u003e-\u003c/span\u003emessages\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/jT9dzB4AcCM0BAoYgCizu/2abc44d5604d03267b957281e93749a8/configure-permissions.png\" alt=\"Create permission\"/\u003e\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: While you are in the Auth0 Dashboard, take note of your Auth0 domain. You will need it soon. This is a string in the form \u003ccode\u003e\u003cspan\u003eYOUR\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eTENANT\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eNAME\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003ecom\u003c/code\u003e where \u003ccode\u003e\u003cspan\u003eYOUR\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eTENANT\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eNAME\u003c/span\u003e\u003c/code\u003e is the name you provided when you created your account with Auth0. For more information, \u003ca href=\"https://auth0.com/docs/getting-started/the-basics#domains\" target=\"_blank\" rel=\"noreferrer noopener\"\u003echeck the documentation\u003c/a\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Preparing-the-Application-for-Validation\"\u003ePreparing the Application for Validation\u003c/h2\u003e\u003cp\u003eAlright, our application is ready to go and in dire need of some \u003cem\u003esecurity\u003c/em\u003e. Before that, we need to add some configurations.\u003c/p\u003e\u003cp\u003eYou dutifully stored the \u003ccode\u003edomain\u003c/code\u003e and the \u003ccode\u003eaudience\u003c/code\u003e after creating the API, right? Let\u0026#39;s use them. In the \u003cem\u003eRails\u003c/em\u003e world, the convention is to add this in the \u003ccode\u003econfig\u003c/code\u003e folder, using \u003ca href=\"https://yaml.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eYAML\u003c/a\u003e. The file is called \u003ccode\u003econfig\u003cspan\u003e/\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eWe don\u0026#39;t want to store credentials in our code, so we\u0026#39;ll export the values as environment variables, named \u003ccode\u003e\u003cspan\u003eAUTH0_DOMAIN\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003eAUTH0_AUDIENCE\u003c/span\u003e\u003c/code\u003e. The configuration uses those values and keeps them safely away from source control!\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003edevelopment\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003eissuerUri\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u0026lt;%= ENV\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;AUTH0_DOMAIN\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e %\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003eaudience\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u0026lt;%= ENV\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;AUTH0_AUDIENCE\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e %\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, set \u003ccode\u003e\u003cspan\u003eAUTH0_DOMAIN\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003eAUTH0_AUDIENCE\u003c/span\u003e\u003c/code\u003e environment variables to the \u003ccode\u003edomain\u003c/code\u003e and \u003ccode\u003eaudience\u003c/code\u003e values for your API.\u003c/p\u003e\u003cp\u003eWith this, the application is ready to connect with Auth0. Let\u0026#39;s move on to the implementation.\u003c/p\u003e\u003ch2 id=\"Validating-the-Access-Token\"\u003eValidating the Access Token\u003c/h2\u003e\u003cp\u003eBefore we get started, let\u0026#39;s talk for a second about authentication frameworks for rails. There are a bunch of alternatives in the ecosystem, such as \u003ca href=\"https://github.com/CanCanCommunity/cancancan\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCanCanCan\u003c/a\u003e, or \u003ca href=\"https://github.com/heartcombo/devise\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edevise\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eHowever, our case is an awkward fit for those. We don\u0026#39;t want to take over user management. We only want to validate tokens issued by the authorization server. In this case, using a framework won\u0026#39;t bring us as much benefit as something like, say, \u003ca href=\"https://spring.io/projects/spring-security\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring Security\u003c/a\u003e. That\u0026#39;s why we only rely on an extra gem, \u003ca href=\"https://github.com/jwt/ruby-jwt\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ejwt\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe code implementing the authorization check lives in the \u003ca href=\"https://github.com/auth0-blog/rails-api-auth0/tree/add-authorization\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eadd-authorization\u003c/a\u003e branch. Let\u0026#39;s see how it works!\u003c/p\u003e\u003ch3 id=\"Utilizing-the-JWT-Library\"\u003eUtilizing the JWT Library\u003c/h3\u003e\u003cp\u003eThe \u003ccode\u003ejwt\u003c/code\u003e library brings a lot of functionality to make our API able to validate and manage tokens in JWT formats like the ones issued by Auth0. We need to do three things:\u003c/p\u003e\u003cul\u003e\u003cli\u003eWe need to fetch the \u003ca href=\"https://auth0.com/docs/tokens/json-web-tokens/json-web-key-sets\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJWKS\u003c/a\u003e configuration from \u003cem\u003eAuth0\u003c/em\u003e so that we know what is the public key to verify the access token signature\u003c/li\u003e\u003cli\u003eWith the public key, the issuer, and the audience, we want to verify the token\u003c/li\u003e\u003cli\u003eAfter verifying the token, we\u0026#39;re decoding it to access the \u003ccode\u003epermissions\u003c/code\u003e claim (or any other information contained in the token, really)\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Decoding-the-Token\"\u003eDecoding the Token\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s get down to business. We\u0026#39;re implementing the verification/decoding logic in the \u003ccode\u003elib\u003c/code\u003e folder, in a file called \u003ccode\u003ejson_web_token\u003cspan\u003e.\u003c/span\u003erb\u003c/code\u003e. We\u0026#39;re starting by fetching the \u003cem\u003eJWKS\u003c/em\u003e data:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# lib/json_web_token.rb\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;jwt\u0026#39;\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;net/http\u0026#39;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eJsonWebToken\u003c/span\u003e\n  \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ealgorithm\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;RS256\u0026#39;\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ekey\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eheader\u003cspan\u003e)\u003c/span\u003e\n      jwks_hash\u003cspan\u003e[\u003c/span\u003eheader\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;kid\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ejwks_hash\u003c/span\u003e\u003c/span\u003e\n      jwks_raw \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eNet\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eHTTP\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eget \u003cspan\u003eURI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003cspan\u003e\u003cspan\u003e#{\u003c/span\u003eissuer\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e.well-known/jwks.json\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n      jwks_keys \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eparse\u003cspan\u003e(\u003c/span\u003ejwks_raw\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;keys\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n      jwks_keys\u003cspan\u003e.\u003c/span\u003emap \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003ek\u003cspan\u003e|\u003c/span\u003e\n        \u003cspan\u003e[\u003c/span\u003e\n          k\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;kid\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003eOpenSSL\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eX509\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eCertificate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eBase64\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edecode64\u003cspan\u003e(\u003c/span\u003ek\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;x5c\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003efirst\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003epublic_key\n        \u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003eend\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto_h\n    \u003cspan\u003eend\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eissuer\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;https://\u003cspan\u003e\u003cspan\u003e#{\u003c/span\u003e\u003cspan\u003eRails\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eapplication\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003ex\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eissuerUri\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e/\u0026#34;\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see, through the \u003ccode\u003eissuerUri\u003c/code\u003e we know where to look for the data. Then, we parse the key so that we can consume it in the library.\u003c/p\u003e\u003cp\u003eThe next step is to add an extra method to the class, \u003ccode\u003everify\u003c/code\u003e, that verifies and decodes the token at the same time:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# lib/json_web_token.rb\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eJsonWebToken\u003c/span\u003e\n  \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003everify\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003eJWT\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edecode\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enil\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                 \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e# Verify the signature of this token\u003c/span\u003e\n                 algorithm\u003cspan\u003e:\u003c/span\u003e algorithm\u003cspan\u003e,\u003c/span\u003e\n                 iss\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eRails\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eapplication\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003ex\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eissuerUri\u003cspan\u003e,\u003c/span\u003e\n                 verify_iss\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                 aud\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eRails\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eapplication\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003ex\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eaudience\u003cspan\u003e,\u003c/span\u003e\n                 verify_aud\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003eheader\u003cspan\u003e|\u003c/span\u003e\n        key\u003cspan\u003e(\u003c/span\u003eheader\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003eend\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n    \n    \u003cspan\u003e# ... existing code ...\u003c/span\u003e\n    \n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is all the code that we need for the actual verification. Neat, isn\u0026#39;t it? But our controllers are still insecure. Not for long, though.\u003c/p\u003e\u003ch2 id=\"Protecting-the-Endpoints\"\u003eProtecting the Endpoints\u003c/h2\u003e\u003cp\u003eTo make it as convenient as possible, we\u0026#39;re creating a hook that we\u0026#39;re going to run before any route that needs authentication. To make it available for every controller, it lives in the \u003ccode\u003eapp\u003cspan\u003e/\u003c/span\u003econtrollers\u003cspan\u003e/\u003c/span\u003eapplication_controller\u003cspan\u003e.\u003c/span\u003erb\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# app/controllers/application_controller.rb\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;json_web_token\u0026#39;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eActionController\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eAPI\u003c/span\u003e\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eauthorize\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\n    valid\u003cspan\u003e,\u003c/span\u003e result \u003cspan\u003e=\u003c/span\u003e verify\u003cspan\u003e(\u003c/span\u003eraw_token\u003cspan\u003e(\u003c/span\u003erequest\u003cspan\u003e.\u003c/span\u003eheaders\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    head \u003cspan\u003e:unauthorized\u003c/span\u003e \u003cspan\u003eunless\u003c/span\u003e valid\n\n    \u003cspan\u003e@token\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e result\n  \u003cspan\u003eend\u003c/span\u003e\n\n  \u003cspan\u003eprivate\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003everify\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e)\u003c/span\u003e\n    payload\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eJsonWebToken\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003everify\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e payload\u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003erescue\u003c/span\u003e \u003cspan\u003eJWT\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eDecodeError\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e e\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e e\u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eraw_token\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eheaders\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e headers\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;Authorization\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esplit\u003cspan\u003e.\u003c/span\u003elast \u003cspan\u003eif\u003c/span\u003e headers\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;Authorization\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003epresent\u003cspan\u003e?\u003c/span\u003e\n\n    \u003cspan\u003enil\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe take the token from the standard \u003cem\u003eAuthorization\u003c/em\u003e header. Then, we verify it with the code from the previous section. There are two possible paths after running \u003ccode\u003eauthorize\u003cspan\u003e!\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\u003cul\u003e\u003cli\u003eIf the token isn\u0026#39;t there, or it\u0026#39;s invalid for any reason, the processing stops right there, and the call returns a 401\u003c/li\u003e\u003cli\u003eIf the token is valid, we continue the execution and store the token in \u003ccode\u003e@token\u003c/code\u003e so that it\u0026#39;s available\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWe\u0026#39;re protecting both the \u003ccode\u003e\u003cspan\u003eprotected\u003c/span\u003e\u003c/code\u003e and the \u003ccode\u003eadmin\u003c/code\u003e routes with this hook, thanks to \u003ca href=\"https://api.rubyonrails.org/v6.1.4/classes/AbstractController/Callbacks/ClassMethods.html#method-i-before_action\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ebefore_action\u003c/a\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# app/controllers/api/messages_controller.rb\u003c/span\u003e\n\u003cspan\u003emodule\u003c/span\u003e \u003cspan\u003eApi\u003c/span\u003e\n  \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eMessagesController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e\n    before_action \u003cspan\u003e:authorize!\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e except\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e%i[public]\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Custom-Error-Messages\"\u003eCustom Error Messages\u003c/h3\u003e\u003cp\u003eDon\u0026#39;t you feel better knowing that the application is not exposing private stuff anymore? I definitely do. But we got to help our users. A blank 401 message might not give them enough information to debug the issue. Let\u0026#39;s extend the hook to return something more explicit:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# app/controllers/application_controller.rb\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eActionController\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eAPI\u003c/span\u003e\n   \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eauthorize\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\n     valid\u003cspan\u003e,\u003c/span\u003e result \u003cspan\u003e=\u003c/span\u003e verify\u003cspan\u003e(\u003c/span\u003eraw_token\u003cspan\u003e(\u003c/span\u003erequest\u003cspan\u003e.\u003c/span\u003eheaders\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n     \u003cspan\u003e# 👇 old code\u003c/span\u003e\n     \u003cspan\u003e# head :unauthorized unless valid\u003c/span\u003e\n     \u003cspan\u003e# 👇 new code\u003c/span\u003e\n     render json\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e message\u003cspan\u003e:\u003c/span\u003e result \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto_json\u003cspan\u003e,\u003c/span\u003e status\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:unauthorized\u003c/span\u003e \u003cspan\u003eunless\u003c/span\u003e valid\n\n     \u003cspan\u003e@token\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e result\n   \u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow we get a message that\u0026#39;s more helpful than an HTTP code without a body.\u003c/p\u003e\u003ch2 id=\"Testing-the-Protected-Endpoints\"\u003eTesting the Protected Endpoints\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s test the protected endpoint:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e localhost:6060/api/messages/protected\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe command will return a 401, because we\u0026#39;re not authorized. We need to get a valid token from Auth0.\u003c/p\u003e\u003cp\u003eThe simplest way is to access the \u003ca href=\"https://manage.auth0.com/#/apis\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAPI section of your Auth0 Dashboard\u003c/a\u003e again, select the API that you created before and click the \u003cem\u003eTest\u003c/em\u003e tab. In this section, you can get a temporary token to test your Web API by clicking the \u003cem\u003eCopy Token\u003c/em\u003e icon as shown in the following picture:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6zmU9XWwgZLWIAFF0qu6IP/50e2aa27469142c138b814731aa0233d/copy-access-token.png\" alt=\"Test Token\"/\u003e\u003c/p\u003e\u003cp\u003eLet\u0026#39;s attach the token to the request:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eTOKEN\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003ethe-test-token\n\u003cspan\u003ecurl\u003c/span\u003e localhost:6060/api/messages/protected -H \u003cspan\u003e\u0026#34;Authorization: Bearer \u003cspan\u003e$TOKEN\u003c/span\u003e\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe request works now! \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;The API successfully validated your access token.\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Checking-for-permissions\"\u003eChecking for permissions\u003c/h2\u003e\u003cp\u003eThere\u0026#39;s one requirement pending. As you might recall, for \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003emessages\u003cspan\u003e/\u003c/span\u003eadmin\u003c/code\u003e a valid token isn\u0026#39;t enough. Rather, we expect the correct permission in the \u003ccode\u003epermissions\u003c/code\u003e claim. This extra check allows us to define more granular access criteria for our endpoints. This functionality is implemented in the \u003ca href=\"https://github.com/auth0-blog/rails-api-auth0/tree/add-rbac\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eadd-rbac\u003c/a\u003e branch.\u003c/p\u003e\u003cp\u003eWe\u0026#39;re adding a new method in the \u003ccode\u003eapplication_controller\u003c/code\u003e, \u003ccode\u003echeck_permissions\u003c/code\u003e. It takes the decoded token and looks for a given permission:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# app/controllers/application_controller.rb\u003c/span\u003e\n\u003cspan\u003erequire\u003c/span\u003e \u003cspan\u003e\u0026#39;json_web_token\u0026#39;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eActionController\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eAPI\u003c/span\u003e\n  \u003cspan\u003e# ... existing code ...\u003c/span\u003e\n  \n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ecan_read_admin_messages\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\n    check_permissions\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e@token\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;read:admin-messages\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n  \n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e\u003cspan\u003echeck_permissions\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etoken\u003cspan\u003e,\u003c/span\u003e permission\u003cspan\u003e)\u003c/span\u003e\n    permissions \u003cspan\u003e=\u003c/span\u003e token\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;permissions\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    permissions \u003cspan\u003e=\u003c/span\u003e permissions\u003cspan\u003e.\u003c/span\u003esplit \u003cspan\u003eif\u003c/span\u003e permissions\u003cspan\u003e.\u003c/span\u003eis_a\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\n    \u003cspan\u003eunless\u003c/span\u003e permissions\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einclude\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003epermission\u003cspan\u003e)\u003c/span\u003e\n      render json\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e message\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;Access is denied\u0026#39;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eto_json\u003cspan\u003e,\u003c/span\u003e\n             status\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e:unauthorized\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n  \n  \u003cspan\u003e# ... existing code ...\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe use a \u003ccode\u003ebefore_action\u003c/code\u003e again to protect the \u003ccode\u003eadmin\u003c/code\u003e endpoint:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# app/controllers/api/messages_controller.rb\u003c/span\u003e\n\u003cspan\u003emodule\u003c/span\u003e \u003cspan\u003eApi\u003c/span\u003e\n  \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eMessagesController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e\n    before_action \u003cspan\u003e:can_read_admin_messages!\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e only\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e%i[admin]\u003c/span\u003e\n    \n    \u003cspan\u003e# ... existing code ...\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWith this, each route in our sample application is safe the way we wanted.\u003c/p\u003e\u003ch3 id=\"Testing-Permissions\"\u003eTesting Permissions\u003c/h3\u003e\u003cp\u003eIf you try to call the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003emessages\u003cspan\u003e/\u003c/span\u003eadmin\u003c/code\u003e endpoint with the token we generated before, it will return a 401. Our token is valid but doesn\u0026#39;t have the necessary permissions. Let\u0026#39;s create a new one!\u003c/p\u003e\u003cp\u003eBack in your \u003ca href=\"https://manage.auth0.com/#/apis\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAPI configuration page on the Auth0 Dashboard\u003c/a\u003e, select the \u003cem\u003eMachine to Machine Applications\u003c/em\u003e tab. You\u0026#39;ll get a list of applications, some of them with the \u003cem\u003e(Test Application)\u003c/em\u003e label in the name. These applications are automatically created by Auth0 when you create an API there. They are meant as test clients from your API. One of them should have the \u003cem\u003eAuthorized\u003c/em\u003e switch on. Click the dropdown next to it and check the \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eadmin\u003cspan\u003e-\u003c/span\u003emessages\u003c/code\u003e permission:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2Iva8EtxfjdsunLbDTGVyD/71034bf799e82e51c7e5f7152ccd6adf/adding-permissions.png\" alt=\"Adding Permissions\"/\u003e\u003c/p\u003e\u003cp\u003eThen, click the \u003cem\u003eUpdate\u003c/em\u003e button, move again to the \u003cem\u003eTest\u003c/em\u003e tab, and copy the new token that has been generated for you. Let\u0026#39;s try again:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eTOKEN\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003ethe-new-test-token\n\u003cspan\u003ecurl\u003c/span\u003e localhost:6060/api/messages/admin -H \u003cspan\u003e\u0026#34;Authorization: Bearer \u003cspan\u003e$TOKEN\u003c/span\u003e\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe request works now!\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;The API successfully recognized you as an admin.\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eIn this guide, we\u0026#39;ve added authorization to a Rails API by using Auth0 as an authorization server. Thanks to the \u003ccode\u003ejwt\u003c/code\u003e gem, we don\u0026#39;t have to invest much effort. We use the library to decode the bearer token that the API receives. After that, it\u0026#39;s a matter of checking the relevant routes before each request.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn how to secure an API written using Ruby On Rails with Auth0 authorization services.",
      "date_published": "2021-10-07T15:03:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/auth0-welcomes-bhawna-singh-to-the-team/",
      "title": "Auth0 Welcomes Bhawna Singh to the Team",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection itemscope=\"\" itemtype=\"http://schema.org/BlogPosting\" itemprop=\"mainEntity\"\u003e\u003cheader\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cp\u003e\u003cspan\u003eENGINEERING\u003c/span\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eBhawna Singh joined Auth0 as SVP of Engineering. Why she plans to focus on mentoring innovation.\u003c/p\u003e\u003c/div\u003e\u003cp\u003eOctober 07, 2021\u003c/p\u003e\u003cmeta itemprop=\"datePublished\" content=\"2021-10-07\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2021-10-07\"/\u003e\u003c/div\u003e\u003c/header\u003e\u003cheader\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7AsuaROfW0vGJaHpUPqGrW/c509de75eeb8c42543afe95883138554/Bhawna_Singh.jpg\"/\u003e\u003c/p\u003e\u003cdiv\u003e\u003cp\u003e\u003cspan\u003eENGINEERING\u003c/span\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eBhawna Singh joined Auth0 as SVP of Engineering. Why she plans to focus on mentoring innovation.\u003c/p\u003e\u003cp\u003eOctober 07, 2021\u003c/p\u003e\u003cmeta itemprop=\"datePublished\" content=\"2021-10-07\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2021-10-07\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003c/header\u003e\u003carticle\u003e\u003cmain id=\"post-content\" itemprop=\"articleBody\"\u003e\u003cdiv\u003e\u003cp\u003eRelying on Ask.com for quick answers or researching your next role at Glassdoor? You’re likely leaning on innovations \u003ca href=\"https://auth0.com/blog/bhawna-singh-joins-auth0-leadership-team-as-senior-vice-president-of-engineering\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eBhawna Singh\u003c/a\u003e helped make possible. With over twenty years of helping companies through tech transformations, scaling challenges, and participating in multiple acquisitions, Bhawna brings an understanding of how to deliver growth that serves end users and develops talent on the way to building revenue.\u003c/p\u003e\u003cp\u003eThat experience is coming to Auth0 at a critical moment. While we’re seeking to strongly align our product and engineering teams, we’re also working through our recent acquisition by Okta — and we want to do that while sustaining our growth trajectory.\u003c/p\u003e\u003cp\u003eWe sat down with Bhawna to learn more about how she grows talent through innovation, what brought her to Auth0, and why she’ll be applying the power of diversity of thought to the global identity market.\u003c/p\u003e\u003ch3 id=\"Why-join-Auth0-\"\u003eWhy join Auth0?\u003c/h3\u003e\u003cp\u003eThree things intrigued me. \u003c/p\u003e\u003cp\u003eFirst, you, Eugenio [Pace], Matias [Woloski], were upfront and transparent about challenges. More importantly, though, Auth0’s mission and roadmap was compelling. \u003c/p\u003e\u003cp\u003eSecond, I really enjoy the people interaction that comes from working with a global team. But Auth0’s engineering talent spread across many countries presents an interesting time zone challenge.\u003c/p\u003e\u003cp\u003eThird, the technological challenges presented with Auth0’s high growth. Auth0 needs to work across 21 deployment regions to securely and reliably support billions of logins a month while continuously calling the team and technology to meet growth demands. This is an area where I can help and learn at the same time. Bottom line? I see the high growth and complexity of challenges ahead as an opportunity to make a larger impact.\u003c/p\u003e\u003ch3 id=\"Now-that-you-re-here--what-are-your-short-term-goals-\"\u003eNow that you’re here, what are your short-term goals?\u003c/h3\u003e\u003cp\u003eIn the short term, hiring is my top priority. Even before Okta’s acquisition, Auth0 had big hiring goals. I am currently partnering with multiple teams and leaders on our hiring and onboarding strategy. At Auth0, we are solving hard problems around authentication, security, scale, and a product that needs to be highly available, along with continuous innovation in the identity space. So making sure new engineers understand that when they come to Auth0, they’re going to get to solve hard problems with leadership support (which means mentorship, team building, and securing proper funding) and strong cross-org alignment, specifically with product and process teams.\u003c/p\u003e\u003ch3 id=\"Longer-term-\"\u003eLonger-term?\u003c/h3\u003e\u003cp\u003eMid-term, I’m looking to build Auth0’s engineering vision and roadmap to align our technology investments and product innovation plans. This will also play into our longer-term Okta + Auth0 vision. As a team, we are constantly innovating and making big bets. It is important that we build external awareness of key initiatives (watch for more engineering-specific content) to help continue attracting top talent and satisfying evolving customer needs.\u003c/p\u003e\u003ch3 id=\"If-I-m-a-new-or-current-engineer-at-Auth0--what-kind-of-leadership-can-I-expect-from-you-\"\u003eIf I’m a new or current engineer at Auth0, what kind of leadership can I expect from you?\u003c/h3\u003e\u003cp\u003eTable stakes for me are genuine empathy. But if I am going to ask you to rally behind me, there are really four core qualities that I look for in leaders, whether I am looking in the mirror or at leadership across an org.\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003cstrong\u003eHigh-accountability.\u003c/strong\u003e Everyone is going to make mistakes. I hold myself highly accountable for what happens in my org. This helps build team integrity, trust, and collective ethics. The point is never to be mistake-free but to make sure we take the time to learn from our mistakes.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eListening-based communication.\u003c/strong\u003e For a lot of people, listening is passive. For me, active listening means checking that you’ve effectively communicated what needs to be communicated and making sure it was received correctly. Information and feedback need to flow both ways, which is also key to building a transparent organization.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePlanning long-term.\u003c/strong\u003e As we look at our organization and tech stack, we need to invest in our long-term vision and strategy along with making short-term bets and wins. Aligning engineering with our vision and long-term goals means investing in people, investing in our technology, and strengthening innovation.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eInvesting in leaders.\u003c/strong\u003e The mentors I wanted and needed weren’t right there at the start of my career. If I could go back and change something in my own career, it would be to mentor sooner. Investing in developing team leadership through mentoring, coaching, or providing access to additional training and contacts can make a huge difference in the amount of creativity and innovation that comes out of an org. But more importantly, it helps keep the entire industry growing and innovating. I ensure that I am coaching my leaders to grow, and together we are building an organization inspired by learning and problem-solving. I also make every effort in connecting with underrepresented groups regularly and evaluate how effectively I help them to achieve their goals. If you’re on my team and would appreciate mentorship, I will either mentor you directly or connect you with someone within my network.\u003c/li\u003e\u003c/ol\u003e\u003ch3 id=\"What-did-it-take-to-break-into-executive-roles--Especially-if-you-re-a-woman-or-underrepresented-person-in-tech--what-five-steps-should-you-take-to-break-in-\"\u003eWhat did it take to break into executive roles? Especially if you’re a woman or underrepresented person in tech, what five steps should you take to break in?\u003c/h3\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003cstrong\u003eSay yes to stretch assignments.\u003c/strong\u003e Mentors or coaches are usually telling you what’s happening, but if an opportunity comes your way, it means someone has vouched for you. Of course, you need to evaluate whether or not this assignment is right for you at this point in your life, but if you can, say “yes”.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSeek mentors — and trust them to identify your gaps.\u003c/strong\u003e We all have self-doubts, but I sometimes see women calling out “gaps” that I don’t really see as their weakness. Finding a mentor who can confirm your true gaps and strengths is critical. Then it’s important to do that homework to actively address the things you need to do in order to reach that goal.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eGet comfortable with taking risks and failing.\u003c/strong\u003e As an executive, the situations that come your way usually do not have a playbook. Being comfortable with taking risks, failing, and learning from the experience is the only path forward.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eNetwork.\u003c/strong\u003e Look for peers (in addition to mentors) that you can lean on and ask for best practices. This is easier for some than others. Here are concrete steps that work:\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eTalk to your manager and express interest in mentorship.\u003c/strong\u003e Your manager can lean in and help and/or provide recommendations and intros to other mentors.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eReach out to your People/Human Resources partner for mentorship.\u003c/strong\u003e They can connect you with internal mentors, in addition to external opportunities.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eIdentify your goals.\u003c/strong\u003e Work on self-awareness. Avoid an open-ended discussion. Identify two to three areas you’d like to work on. This will make it easier for your network to help you take action that matters.\u003c/li\u003e\u003c/ol\u003e\u003ch3 id=\"Our-security-team-talks-about-relying-on--diversity-of-thought--to-help-secure-our-product-and-ensure-a-stronger-security-culture-that-protects-our-customers-and-the-internet--How-does-diverse-thinking-help-fuel-an-effective-engineering-team-\"\u003eOur security team talks about relying on “diversity of thought” to help secure our product and ensure a stronger security culture that protects our customers and the internet. How does diverse thinking help fuel an effective engineering team?\u003c/h3\u003e\u003cp\u003eSecurity is part of engineering, and the teams collaborate closely to identify solutions grounded in the \u003ca href=\"https://auth0.com/blog/why-auth0-is-shifting-left-on-security/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSecure by Design approach\u003c/a\u003e. Diverse backgrounds bring diverse thoughts with multiple perspectives to get us to the right solution for all our customers. Auth0 was not created for just one company in the US or one company in another country. Our customer space requires a large global setup. One perspective just won’t work.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTell me about why you helped found the \u003ca href=\"https://www.linkedin.com/company/neythri-futures-fund/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNeythri Futures Fund\u003c/a\u003e (NFF).\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThe core reason we all came together to found the NFF was to fuel diversity at the top. We focus specifically on funding companies founded by women and underrepresented groups because we weren’t seeing women investors in this space. If you want to fuel diversity, you have to fund it.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eWhat makes a good ally?\u003c/strong\u003e \u003c/p\u003e\u003cp\u003eWe all feel we should know the answer here, but this is an evolving area. I am a continual learner in this space, so this means making sure I am listening and aware that I am going to make mistakes. Not intentionally, of course, but coming from a place of being comfortable with learning and listening hopefully makes it easier for others to point out my mistakes so I can learn from them. Immediately trying to fix everything is not the answer. The constant learning can’t stop with me. I need to pass it on to my team, leadership, and my network. We need to share what we learn to build collective awareness in this area.\u003c/p\u003e\u003ch3 id=\"After-being-through-more-than-five-acquisitions--what-kind-of-leadership-does-it-take-to-move-companies-through-mergers-and-acquisitions-towards-success-for-both-employees-and-customers-\"\u003eAfter being through more than five acquisitions, what kind of leadership does it take to move companies through mergers and acquisitions towards success for both employees and customers?\u003c/h3\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eAligning mission and core values.\u003c/strong\u003e How does the acquiree fit in/influence the mission?\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eBringing people along through communication.\u003c/strong\u003e An acquisition is change management at a grand scale. Being clear about challenges and opportunities, especially for growth acquisitions, helps people bring the collaborative vision into reality.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePut together a plan for how you will bring people together — and actively communicate that plan.\u003c/strong\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eUnderstand that this is a complex process.\u003c/strong\u003e Know that there are areas that might not work out, while there are people who thrive on complex challenges. Actively choose to let those people lead and bring in those who are looking to work collaboratively. Frankly, I’m excited to be able to help Okta and Auth0 at this time.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Learn-more-about-identity-and-opportunities-at-Auth0\"\u003eLearn more about identity and opportunities at Auth0\u003c/h2\u003e\u003cul\u003e\u003cli\u003eIf you’d like to learn more about how Auth0 can help speed your product to market, reach \u003ca href=\"https://auth0.com/contact-us\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eout to our team\u003c/a\u003e.\u003c/li\u003e\u003cli\u003eIf you’re interested in helping us solve complex problems, you’ll find \u003ca href=\"https://auth0.com/careers/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecurrent listings here\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/main\u003e\u003c/article\u003e\u003c/section\u003e\u003c/div\u003e",
      "summary": "Bhawna Singh joined Auth0 as SVP of Engineering. Why she plans to focus on mentoring innovation.",
      "date_published": "2021-10-07T14:18:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/bhawna-singh-joins-auth0-leadership-team-as-senior-vice-president-of-engineering/",
      "title": "Bhawna Singh Joins Auth0 Leadership Team as Senior Vice President of Engineering",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection itemscope=\"\" itemtype=\"http://schema.org/BlogPosting\" itemprop=\"mainEntity\"\u003e\u003cheader\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cp\u003e\u003cspan\u003eLeadership\u003c/span\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eFormer SVP of Engineering and CTO at Glassdoor and Ask.com bolsters management team\u003c/p\u003e\u003c/div\u003e\u003cp\u003eLast Updated On: October 07, 2021\u003c/p\u003e\u003cmeta itemprop=\"datePublished\" content=\"2021-10-07\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2021-10-07\"/\u003e\u003c/div\u003e\u003c/header\u003e\u003cheader\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4WvCBPXRYPtxWSIIO3yHVJ/b42049305c220e3957595e0d32eeb5f3/Announcements1.png\"/\u003e\u003c/p\u003e\u003cdiv\u003e\u003cp\u003e\u003cspan\u003eLeadership\u003c/span\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eFormer SVP of Engineering and CTO at Glassdoor and Ask.com bolsters management team\u003c/p\u003e\u003cp\u003eLast Updated On: October 07, 2021\u003c/p\u003e\u003cmeta itemprop=\"datePublished\" content=\"2021-10-07\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2021-10-07\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003c/header\u003e\u003carticle\u003e\u003cmain id=\"post-content\" itemprop=\"articleBody\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eBELLEVUE, Wash. – Oct. 7, 2021 –\u003c/strong\u003e The \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Identity Platform\u003c/a\u003e, a product unit within Okta (NASDAQ: OKTA), today announced that \u003ca href=\"https://www.linkedin.com/in/bhawnasingh/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eBhawna Singh\u003c/a\u003e has joined the company as Senior Vice President (SVP) of Engineering. With more than two decades of engineering and technology leadership, Singh will be instrumental in continuing to build and lead Auth0’s talented team of engineers in transforming technology and increasing value to its growing customer base.\u003c/p\u003e\u003cp\u003ePrior to joining Auth0, Singh held senior engineering and technology roles, including SVP of Engineering and CTO at Glassdoor, where she was responsible for technological innovation overseeing the company’s websites and mobile platforms, in addition to its software engineering data platform and machine learning teams. Before Glassdoor, Singh held engineering leadership roles at Ask.com, Sybase, and AT\u0026amp;T. As SVP of Engineering, Singh will lead the high growth of Auth0’s solutions, strengthen trust and reliability for their global customer base, and continue to invest in engineering excellence. \u003c/p\u003e\u003cp\u003e“The technological complexity of identity, innovation of the company’s solutions, and transparent and inclusive workplace culture immediately drew me to Auth0,” said Singh. “I’m excited to join a global team filled with experts that continuously innovate and all share one common vision — secure access for all.”\u003c/p\u003e\u003cp\u003e“Identity is one of the most strategic investments an organization will make today, and as a company deeply passionate about our customers and dedicated to continuous improvement, Bhawna will play a critical role in helping us shape the future of identity and enabling our customers to accelerate innovation,” said Shiv Ramji, Chief Product Officer at Auth0. “With deeply experienced leadership in engineering and technology, Bhawna is an invaluable addition to Auth0, and we are honored she is joining us.”\u003c/p\u003e\u003cp\u003eTo learn more about Singh and Auth0’s engineering team, visit \u003ca href=\"https://auth0.com/blog/auth0-welcomes-bhawna-singh-to-the-team\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0’s blog\u003c/a\u003e.\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eThe Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003ch3 id=\"Media-Contacts-\"\u003eMedia Contacts:\u003c/h3\u003e\u003cp\u003eGlobal Communications\u003cbr/\u003eAuth0\u003cbr/\u003e\u003ca href=\"mailto:press@auth0.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epress@auth0.com\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp\u003eMatter Communications for Auth0\u003cbr/\u003e\u003ca href=\"mailto:auth0@matternow.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eauth0@matternow.com\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\u003ch3 id=\"Investor-Contact-\"\u003eInvestor Contact:\u003c/h3\u003e\u003cp\u003eInvestor Relations\u003cbr/\u003e\u003ca href=\"mailto:investor@okta.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003einvestor@okta.com\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/main\u003e\u003c/article\u003e\u003c/section\u003e\u003c/div\u003e",
      "summary": "Former SVP of Engineering and CTO at Glassdoor and Ask.com bolsters management team",
      "date_published": "2021-10-07T14:16:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/what-your-customers-really-want-from-your-login-box/",
      "title": "What Your Customers Really Want From Your Login Box",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3ECzfjyrDSou0kNDj6grh6/dcd039b4cd4f6f4b85d3aa4da305d679/Uploaded_from_What_Your_Customers_Really_Want_From_Your_Login_Box_-_Steven_Rees-Pullman\" alt=\"image\"/\u003e\u003c/p\u003e\u003cp\u003eWe think a lot about login boxes. \u003c/p\u003e\u003cp\u003eBut you would be surprised by just how much your customers are thinking about them as well.\u003c/p\u003e\u003cp\u003eNow, we would say that, since we are in the business of making login boxes. So that’s why we went out and asked people what \u003cem\u003ethey\u003c/em\u003e thought: more than 17,000 global technology leaders and consumers across 12 global markets: United States, United Kingdom, Belgium, France, Germany, the Netherlands, Australia, Singapore, Japan, Argentina, Brazil, and Mexico.\u003c/p\u003e\u003cp\u003eThe survey report, called “\u003ca href=\"https://info.auth0.com/expectation-vs-reality\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eExpectation vs. Reality at The Log Inn\u003c/a\u003e,” and conducted in partnership with third-party research firm YouGov, revealed that most organizations fail to meet consumer expectations around login experiences.\u003c/p\u003e\u003cp\u003eEverywhere we looked, consumers\u0026#39; expectations didn’t match reality. If you’ve ever had to fill out endless registration forms just to buy a pair of jeans, or create yet another (weak) password for websites owned by the same company (even worse), you know the pain. \u003c/p\u003e\u003cp\u003eAnd it makes sense, right? Login should be simple, invisible almost. Because it’s a marketer’s worst nightmare when you get frustrated and decide to take your business elsewhere.\u003c/p\u003e\u003cp\u003eAt least, that \u003cem\u003ewould\u003c/em\u003e \u003cem\u003ebe\u003c/em\u003e the case, if anyone were paying attention to the login box.\u003c/p\u003e\u003ch2 id=\"Won-t-Somebody-Think-of-the-Login-Boxes-\"\u003eWon’t Somebody Think of the Login Boxes?\u003c/h2\u003e\u003cp\u003eIt’s easy to forget about login boxes. After all, no one visits a website just to play with the \u003ca href=\"https://auth0.com/blog/introducing-auth0-craptchas/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCAPTCHA\u003c/a\u003e – and they are rarely the first place executives and their marketing teams look to increase revenue and reduce churn. But, if you have a website or application, it’s likely you have a login box, and it’s the first thing that customers see. \u003c/p\u003e\u003cp\u003eSo, what did the study show customers want?\u003c/p\u003e\u003cp\u003eA winning lottery ticket?\u003c/p\u003e\u003cp\u003eNo.\u003c/p\u003e\u003cp\u003eThey want choice.\u003c/p\u003e\u003cp\u003eWhen they arrive at your login, customers want convenience and control: they want to choose which authentication method to use – whether it’s MFA or SSO or biometrics. They want a brand experience that resembles a concierge desk: a 24/7 service where no demand is too big. To top it off, they don’t want to see any technical glitches, or have to re-sign up on another device: they want seamless omni-channel experiences – not to be left out in the cold.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003ePasswords just don’t do it for people\u003c/strong\u003e — Consumers rank “Creating a password that has to meet certain requirements” (e.g. number of digits, symbols) among their top frustrations with the sign-up process (47%).\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eOne ID to rule them all\u003c/strong\u003e — Almost half (48%) of consumers are likely to sign up to an app or service if they can use Single Sign-On (SSO) – using a single ID and password for multiple related services. This number is higher for Latin American (61%) consumers compared to their global counterparts (APAC 52%, EMEA 41%, and the US 47%).\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"But-Login-Boxes-Aren-t-Really-a-Big-Deal--Right-\"\u003eBut Login Boxes Aren’t Really a Big Deal, Right?\u003c/h2\u003e\u003cp\u003eTo make things interesting, we asked businesses what they thought consumers thought (getting meta with this study), and they often didn’t realize just how important login experiences really are:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eMinding the gap with biometrics\u003c/strong\u003e\n  \u003cul\u003e\u003cli\u003e44% of consumers are likely to sign up to an app or online service if a company offers biometric authentication — only 25% of companies offer biometrics as an option.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eGoing fully passwordless\u003c/strong\u003e\n  \u003cul\u003e\u003cli\u003eLATAM (43%), US (42%), and APAC (40%) consumers are more likely than their EMEA counterparts (29%) to sign-up to an app/online service if they were able to use passwordless services. Across the globe, just 20% of companies offer passwordless authentication.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"It-s-More-than-Just-a-Login-Box\"\u003eIt’s More than Just a Login Box\u003c/h2\u003e\u003cp\u003eNot having the technologies above is not just a minor annoyance; it’s an actual turn-off for many consumers when it comes to engaging with your brand. Oftentimes your login box is actually standing in the way of users signing up to your app or making a purchase.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eIt’s not about the journey, it’s about the destination\u003c/strong\u003e\n  \u003cul\u003e\u003cli\u003eAbout half of the consumers (48%) are frustrated by having to fill in long login or sign-up forms. This number rises for consumers in APAC (55%) and LATAM (51%) compared to consumers in EMEA (46%) and the US (36%).\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eI’m outta here\u003c/strong\u003e\n  \u003cul\u003e\u003cli\u003eOur research shows that 83% of consumers have abandoned a purchase or an account setup because the login process was too arduous. This rises to the highest levels in Singapore (89%), Brazil (87%), Australia (86%), France (86%), US (86%), UK (85%), and Mexico (85%).\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Okay--You-Have-My-Attention\"\u003eOkay, You Have My Attention\u003c/h2\u003e\u003cp\u003eGood. Very few executives are used to paying much attention to customer identity management (their login box). But as many of us emerge from the past year, more digital than we’ve ever been, creating safe and simple access to online services is essential. \u003c/p\u003e\u003cp\u003eThe opportunity to build trust is massive.\u003c/p\u003e\u003cp\u003eThis is admittedly just a glimpse into the minds and behaviors of consumers. We are working on a series of blogs that look deeper at what consumers want, and how the login box can help.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Taking a closer look at our recent YouGov survey results",
      "date_published": "2021-10-06T12:53:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/implementing-api-gateway-in-aspnet-core-with-ocelot/",
      "title": "Implementing an API Gateway in ASP.NET Core with Ocelot",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eThe urge towards adopting microservices architecture has been a welcome trend in the software development industry.  Microservices architecture has been one of the most talked-about technologies in recent times – it has been embraced by many leading organizations worldwide. Originally developed to solve the limitations of monolithic systems, microservices architecture has seen a significant increase in popularity over the last several years, mainly due to increased scalability, flexibility, and performance.\u003c/p\u003e\u003cp\u003eSince microservices-based applications comprise several different services, you often need a common interface or gateway to call these services so that you define and manage all concerns in one place rather than replicate them across all downstream services. This is precisely where an API Gateway comes in. This article briefly discusses the concepts around microservices architecture and how you can work with API Gateways to have a consistent way to connect to the microservices. Let\u0026#39;s get started!\u003c/p\u003e\u003ch2 id=\"What-Is-Microservices-Architecture-\"\u003eWhat Is Microservices Architecture?\u003c/h2\u003e\u003cp\u003eMicroservices architecture is a service-oriented architecture (SOA) variant in which an application comprises a collection of lightweight, loosely coupled, modular services. These services can be built to execute on various platforms and independently developed, tested, deployed, and managed.\u003c/p\u003e\u003cp\u003eMicroservices architecture can replace long-running, complicated monolithic systems requiring considerable resource and management overhead. Microservice is a word that refers to a service having a limited set of functionalities rather than referring to the length of the code used to create it.\u003c/p\u003e\u003ch2 id=\"What-Is-an-API-Gateway-\"\u003eWhat Is an API Gateway?\u003c/h2\u003e\u003cp\u003eWhen building microservices-based applications, an API Gateway is needed to have a central place where authentication, throttling, orchestration, etc., is implemented. Without an API Gateway in place, you might typically implement each of these in each service, and hence maintaining them for each service would be a daunting task at hand. An API Gateway decouples the service producer from its consumer, providing a security layer since you need not expose your microservices directly.\u003c/p\u003e\u003cp\u003eAs soon as it receives a request, it breaks it into multiple requests (if needed) and then routes them to the appropriate downstream microservice. You can take advantage of an API Gateway to centralize, manage, and monitor the non-functional requirements of an application, orchestrate the cross-functional microservices, and reduce roundtrips. By managing requests consistently, an API Gateway can help reduce the latency and improve security.\u003c/p\u003e\u003cp\u003eThe figure below illustrates an API Gateway used to connect to two downstream microservices named Customer and Product.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3GS9a9hK4MG45UQuG2DVC8/bf86b3d095b072199d88dce416907472/api-gateway-architecture.png\" alt=\"API Gateway architecture diagram\"/\u003e\u003c/p\u003e\u003cp\u003eUsually, the service consumers or clients of a microservice don\u0026#39;t communicate with it directly. Instead, an API Gateway provides a single entry point for directing traffic to various microservices, as shown in the figure above. Hence the clients don\u0026#39;t have any direct access to the services and cannot exploit the services. If your API Gateway is behind the firewall, you can add an extra layer of protection around the attack surface.\u003c/p\u003e\u003cp\u003eAn API Gateway pattern corresponds to two famous \u003ca href=\"https://en.wikipedia.org/wiki/Design_Patterns\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGang of Four design patterns\u003c/a\u003e: Facade and Adapter. Like the Facade design pattern, an API Gateway provides an API to the consumers while encapsulating the internal architecture. An API Gateway enables communication and collaboration like in the Adapter design pattern, even if the interfaces are incompatible.\u003c/p\u003e\u003ch3 id=\"--Why-Do-We-Need-an-API-Gateway---\"\u003e\u003cstrong\u003eWhy Do We Need an API Gateway?\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eA microservices-based application comprises many different microservices built using homogenous or heterogeneous technologies. An API Gateway provides a centralized point of entry for external consumers, regardless of the number or composition of the downstream microservices. An API Gateway can often contain an additional layer of rate-limiting and security.\u003c/p\u003e\u003cp\u003eHere are the main benefits of an API Gateway:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eBetter isolation\u003c/strong\u003e: An API Gateway provides isolation by preventing direct access to internal concerns. As a result, it can encapsulate service discovery, versioning, and other internal details from the service consumers or clients. Additionally, an API Gateway enables you to add more microservices or change boundaries without impacting the external consumers.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eImproved security\u003c/strong\u003e: An API Gateway provides a security layer for your microservices that can help prevent attack vectors such as SQL Injection, Denial-of-Service (DoS), etc. You can leverage an API Gateway to authenticate users. If a particular service consumer needs data from multiple services, you need to authenticate the user just once hence reducing latency and making your authentication mechanism consistent across the application.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePerformance metrics\u003c/strong\u003e: Since an API Gateway is a single component through which all requests and responses flow, it is a great place to collect metrics. For example, you can measure the count and execution times of the requests forwarded to the downstream microservices.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eReduced complexity\u003c/strong\u003e: Microservices have specific common concerns that include logging, rate-limiting, security, etc. You\u0026#39;ll need more time to develop these concerns in each of the microservices your application is using. An API Gateway can eliminate this code duplication hence reducing the effort required to create these components.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"API-Gateways-and-reverse-proxies\"\u003eAPI Gateways and reverse proxies\u003c/h3\u003e\u003cp\u003eThere is a lot of confusion around a reverse proxy and an API Gateway. While there are similarities between them, there are subtle differences between the two as well.\u003c/p\u003e\u003cp\u003eReverse proxy servers typically sit behind a firewall and route requests from the client to the appropriate back-end server. A reverse proxy is a lightweight API Gateway that comprises a few basic security and monitoring capabilities. So, if you need an API Gateway with basic features, a reverse proxy server should suffice. Note that a reverse proxy is incapable of performing transformation or orchestration.\u003c/p\u003e\u003cp\u003eAn API gateway sits between the client and a set of back-end services and provides much more extensive security and monitoring capabilities than a reverse proxy server. An API Gateway provides support for comprehensive service orchestration, transformation, and mediation. It also offers extensive support for transport security - much more than a simple proxy can provide.\u003c/p\u003e\u003ch2 id=\"Introducing-Ocelot\"\u003eIntroducing Ocelot\u003c/h2\u003e\u003cp\u003eIn this article, we are going to use \u003ca href=\"https://github.com/ThreeMammals/Ocelot\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOcelot API Gateway\u003c/a\u003e. It is a lightweight, open-source, scalable, and fast API Gateway based on .NET Core and specially designed for microservices architecture. Basically, it is a set of middleware designed to work with ASP.NET Core. It has several features such as routing, caching, security, rate limiting, etc.\u003c/p\u003e\u003ch2 id=\"The-Order-Processing-Microservices-Based-Application\"\u003eThe Order Processing Microservices-Based Application\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s now put the concepts we\u0026#39;ve learned thus far into practice by implementing a concrete example. We\u0026#39;ll build an order processing application that illustrates how an API Gateway can be used to invoke each service to retrieve customer and product data using the Customer and Product microservice, respectively. \u003c/p\u003e\u003cp\u003eTypically, an order processing microservices-based application comprises microservices such as Product, Customer, Order, OrderDetails, etc. In this example, we\u0026#39;ll consider a minimalistic microservices-based application. This application will contain an API Gateway and two microservices - the Product and Customer microservice. The application would be simple so that we can focus more on building the API Gateway.\u003c/p\u003e\u003ch3 id=\"Prerequisites\"\u003ePrerequisites\u003c/h3\u003e\u003cp\u003eTo execute the code examples shown in this article, here are the minimum requirements you should have installed in your system:\u003c/p\u003e\u003cul\u003e\u003cli\u003e.NET 5 SDK\u003c/li\u003e\u003cli\u003eVisual Studio 2019\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"The-solution-structure\"\u003eThe solution structure\u003c/h3\u003e\u003cp\u003eThe application you are going to build will comprise the following projects as part of a single Visual Studio solution:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eOrderProcessing\u003c/code\u003e project - This project represents the API Gateway and is responsible for getting requests from the clients and invoking the microservices.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eCustomer\u003c/code\u003e project - This project defines the classes and interfaces used to represent the customer microservice.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eProduct\u003c/code\u003e project - This project defines the types used to represent the product microservice.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe Customer microservice project will comprise the following classes and interfaces:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eCustomer\u003c/code\u003e class – This represents the customer entity class.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eICustomerRepository\u003c/code\u003e interface – This represents the interface for the customer repository.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eCustomerRepository\u003c/code\u003eclass – This represents the customer repository class that implements the \u003ccode\u003eICustomerRepository\u003c/code\u003e interface.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eCustomerController\u003c/code\u003e class – This class represents the API controller for the Customer microservice.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe Product microservice project will contain the following types:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eProduct\u003c/code\u003e class – This class represents the product entity.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eIProductRepository\u003c/code\u003e interface – This represents the interface for the product repository.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eProductRepository\u003c/code\u003e class – This is the product repository class that implements the \u003ccode\u003eIProductRepository\u003c/code\u003e interface.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eProductController\u003c/code\u003e class – This represents the API controller class for the Product microservice.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe following picture shows how the solution structure of the completed\napplication will look like:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5eiiZahb4K7nC6X3W8IIGw/1d3fca58dfba684ba2be6c9902fc6beb/demo-project-structure.png\" alt=\"Solution Structure of the OrderProcessing Application\"/\u003e\u003c/p\u003e\u003ch3 id=\"Create-the-projects-for-the-Order-Processing-application\"\u003eCreate the projects for the Order Processing application\u003c/h3\u003e\u003cp\u003eOpen a command shell and enter the following commands to create the three ASP.NET projects we need:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edotnet new web --framework \u003cspan\u003e\u0026#34;net5.0\u0026#34;\u003c/span\u003e -o OrderProcessing\ndotnet new webapi --framework \u003cspan\u003e\u0026#34;net5.0\u0026#34;\u003c/span\u003e -o OrderProcessing.Customer\ndotnet new webapi --framework \u003cspan\u003e\u0026#34;net5.0\u0026#34;\u003c/span\u003e -o OrderProcessing.Product\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhile the \u003ccode\u003eOrderProcessing\u003c/code\u003e project is an empty ASP.NET project, the other two projects are WebAPI projects. Ensure that you delete the default controller and entity classes from these two projects as we don’t need them.\u003c/p\u003e\u003ch3 id=\"Create-the-Customer-microservice\"\u003eCreate the Customer microservice\u003c/h3\u003e\u003cp\u003eCreate a new file named \u003ccode\u003eCustomer\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e at the root of the \u003ccode\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eCustomer\u003c/code\u003e project with the following code in there:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing.Customer/Customer.cs\u003c/span\u003e\n\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eCustomer\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCustomer\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eGuid\u003c/span\u003e Id \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e FirstName \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e LastName \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e EmailAddress \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Create-the-CustomerRepository-class\"\u003eCreate the CustomerRepository class\u003c/h4\u003e\u003cp\u003eCreate an interface named \u003ccode\u003eICustomerRepository\u003c/code\u003e in a file named \u003ccode\u003eICustomerRepository\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e at the root of the \u003ccode\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eCustomer\u003c/code\u003e project with the following code in there:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing.Customer/ICustomerRepository.cs\u003c/span\u003e\n\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eCollections\u003cspan\u003e.\u003c/span\u003eGeneric\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eThreading\u003cspan\u003e.\u003c/span\u003eTasks\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eCustomer\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003einterface\u003c/span\u003e \u003cspan\u003eICustomerRepository\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eTask\u003cspan\u003e\u0026lt;\u003c/span\u003eList\u003cspan\u003e\u0026lt;\u003c/span\u003eCustomer\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eGetAllCustomers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eCreate the \u003ccode\u003eCustomerRepository\u003c/code\u003e class that implements the \u003ccode\u003eICustomerRepository\u003c/code\u003e interface at the root of the \u003ccode\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eCustomer\u003c/code\u003e project as shown in the following code snippet:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing.Customer/CustomerRepository.cs\u003c/span\u003e\n\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eCollections\u003cspan\u003e.\u003c/span\u003eGeneric\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eLinq\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eThreading\u003cspan\u003e.\u003c/span\u003eTasks\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eCustomer\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCustomerRepository\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eICustomerRepository\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003ereadonly\u003c/span\u003e \u003cspan\u003eList\u003cspan\u003e\u0026lt;\u003c/span\u003eCustomer\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e customers \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eList\u003cspan\u003e\u0026lt;\u003c/span\u003eCustomer\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eCustomerRepository\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            customers\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAdd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eCustomer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n                Id \u003cspan\u003e=\u003c/span\u003e Guid\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eNewGuid\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                FirstName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Joydip\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                LastName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Kanjilal\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                EmailAddress \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;joydipkanjilal@yahoo.com\u0026#34;\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n            customers\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAdd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eCustomer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n                Id \u003cspan\u003e=\u003c/span\u003e Guid\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eNewGuid\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                FirstName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Steve\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                LastName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Smith\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                EmailAddress \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;stevesmith@yahoo.com\u0026#34;\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eTask\u003cspan\u003e\u0026lt;\u003c/span\u003eList\u003cspan\u003e\u0026lt;\u003c/span\u003eCustomer\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eGetAllCustomers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e Task\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eFromResult\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecustomers\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Create-the-CustomerController-class\"\u003eCreate the CustomerController class\u003c/h4\u003e\u003cp\u003eIn the \u003ccode\u003eControllers\u003c/code\u003e folder of the \u003ccode\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eCustomer\u003c/code\u003e project, create an API controller named \u003ccode\u003eCustomerController\u003c/code\u003e and replace the default code with the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing.Customer/Controllers/CustomerController.cs\u003c/span\u003e\n\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eMicrosoft\u003cspan\u003e.\u003c/span\u003eAspNetCore\u003cspan\u003e.\u003c/span\u003eMvc\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eCollections\u003cspan\u003e.\u003c/span\u003eGeneric\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eThreading\u003cspan\u003e.\u003c/span\u003eTasks\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eCustomer\u003cspan\u003e.\u003c/span\u003eControllers\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eRoute\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;api/[controller]\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eApiController\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCustomerController\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eControllerBase\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003ereadonly\u003c/span\u003e \u003cspan\u003eICustomerRepository\u003c/span\u003e _customerRepository\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eCustomerController\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eICustomerRepository\u003c/span\u003e customerRepository\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            _customerRepository \u003cspan\u003e=\u003c/span\u003e customerRepository\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eHttpGet\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003eTask\u003cspan\u003e\u0026lt;\u003c/span\u003eActionResult\u003cspan\u003e\u0026lt;\u003c/span\u003eList\u003cspan\u003e\u0026lt;\u003c/span\u003eCustomer\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eGetAllCustomers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e _customerRepository\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eGetAllCustomers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Create-the-Product-microservice\"\u003eCreate the Product microservice\u003c/h3\u003e\u003cp\u003eCreate a new file named \u003ccode\u003eProduct\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e at the root of the \u003ccode\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eProduct\u003c/code\u003e project with the following code in there:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing.Product/Product.cs\u003c/span\u003e\n\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eProduct\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eProduct\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eGuid\u003c/span\u003e Id \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e Code \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e Name \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eint\u003c/span\u003e\u003c/span\u003e Quantity_In_Stock \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003edecimal\u003c/span\u003e\u003c/span\u003e Unit_Price \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Create-the-ProductRepository-class\"\u003eCreate the ProductRepository class\u003c/h4\u003e\u003cp\u003eNext, you should create a new file called \u003ccode\u003eIProductRepository\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e in the \u003ccode\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eProduct\u003c/code\u003e project and write the following code to create the \u003ccode\u003eIProductRepository\u003c/code\u003e interface.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing.Product/IProductRepository.cs\u003c/span\u003e\n\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eCollections\u003cspan\u003e.\u003c/span\u003eGeneric\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eThreading\u003cspan\u003e.\u003c/span\u003eTasks\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eProduct\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003einterface\u003c/span\u003e \u003cspan\u003eIProductRepository\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eTask\u003cspan\u003e\u0026lt;\u003c/span\u003eList\u003cspan\u003e\u0026lt;\u003c/span\u003eProduct\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eGetAllProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eCreate the \u003ccode\u003eProductRepository\u003c/code\u003e class that implements the \u003ccode\u003eIProductRepository\u003c/code\u003e interface at the root of the \u003ccode\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eProduct\u003c/code\u003e project as shown in the following code snippet:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing.Product/ProductRepository.cs\u003c/span\u003e\n\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eCollections\u003cspan\u003e.\u003c/span\u003eGeneric\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eThreading\u003cspan\u003e.\u003c/span\u003eTasks\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eProduct\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eProductRepository\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eIProductRepository\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003ereadonly\u003c/span\u003e \u003cspan\u003eList\u003cspan\u003e\u0026lt;\u003c/span\u003eProduct\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e products \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eList\u003cspan\u003e\u0026lt;\u003c/span\u003eProduct\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eProductRepository\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            products\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAdd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eProduct\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n                Id \u003cspan\u003e=\u003c/span\u003e Guid\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eNewGuid\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                Code \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;P0001\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                Name \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Lenovo Laptop\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                Quantity_In_Stock \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e15\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                Unit_Price \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e125000\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n            products\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAdd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eProduct\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n                Id \u003cspan\u003e=\u003c/span\u003e Guid\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eNewGuid\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                Code \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;P0002\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                Name \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;DELL Laptop\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                Quantity_In_Stock \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e25\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                Unit_Price \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e135000\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n            products\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAdd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eProduct\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n                Id \u003cspan\u003e=\u003c/span\u003e Guid\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eNewGuid\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                Code \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;P0003\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                Name \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;HP Laptop\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                Quantity_In_Stock \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e20\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                Unit_Price \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e115000\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eTask\u003cspan\u003e\u0026lt;\u003c/span\u003eList\u003cspan\u003e\u0026lt;\u003c/span\u003eProduct\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eGetAllProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e Task\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eFromResult\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eproducts\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Create-the-ProductController-class\"\u003eCreate the ProductController class\u003c/h4\u003e\u003cp\u003eIn the \u003ccode\u003eControllers\u003c/code\u003e folder of the \u003ccode\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eProduct\u003c/code\u003e project, create an API controller named \u003ccode\u003eProductController\u003c/code\u003e and replace the default code with the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing.Product/ProductController.cs\u003c/span\u003e\n\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eMicrosoft\u003cspan\u003e.\u003c/span\u003eAspNetCore\u003cspan\u003e.\u003c/span\u003eMvc\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eCollections\u003cspan\u003e.\u003c/span\u003eGeneric\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eThreading\u003cspan\u003e.\u003c/span\u003eTasks\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003eOrderProcessing\u003cspan\u003e.\u003c/span\u003eProduct\u003cspan\u003e.\u003c/span\u003eControllers\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eRoute\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;api/[controller]\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eApiController\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eProductController\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eControllerBase\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003ereadonly\u003c/span\u003e \u003cspan\u003eIProductRepository\u003c/span\u003e _productRepository\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eProductController\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIProductRepository\u003c/span\u003e customerRepository\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            _productRepository \u003cspan\u003e=\u003c/span\u003e customerRepository\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eHttpGet\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003eTask\u003cspan\u003e\u0026lt;\u003c/span\u003eActionResult\u003cspan\u003e\u0026lt;\u003c/span\u003eList\u003cspan\u003e\u0026lt;\u003c/span\u003eProduct\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eGetAllCustomers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e _productRepository\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eGetAllProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Implement-the-API-Gateway-Using-Ocelot\"\u003eImplement the API Gateway Using Ocelot\u003c/h2\u003e\u003cp\u003eNow that the projects have been created with the necessary files in them, let’s implement the API Gateway using Ocelot.\u003c/p\u003e\u003cp\u003eBefore going any further, you should be aware of the terms \u003cstrong\u003eupstream\u003c/strong\u003e and \u003cstrong\u003edownstream\u003c/strong\u003e. While upstream refers to the request sent by the client to the API Gateway, downstream is related to the request that the API Gateway sends to a particular microservice.\u003c/p\u003e\u003ch3 id=\"Install-the-required-package\"\u003eInstall the required package\u003c/h3\u003e\u003cp\u003eTo work with Ocelot, you must install it in your ASP.NET Core project. In our case, you will install Ocelot in the \u003ccode\u003eOrderProcessing\u003c/code\u003e project. You can do it by using the NuGet Package Manager inside Visual Studio IDE. Alternatively, you can execute the following command at the Package Manager Console window:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eInstall-Package\u003c/span\u003e Ocelot\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Implement-routing\"\u003eImplement routing\u003c/h3\u003e\u003cp\u003eAn Ocelot API Gateway accepts an incoming HTTP request and forwards it to a downstream service. Ocelot makes use of routes to  define how a request is routed from one place to another. Add a new file named \u003ccode\u003eocelot\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e to this project with the following content in there:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing/Ocelot.json\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;Routes\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n      \u003cspan\u003e//Customer API{\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamPathTemplate\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/Customer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamScheme\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamHostAndPorts\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n               \u003cspan\u003e\u0026#34;Host\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;localhost\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n               \u003cspan\u003e\u0026#34;Port\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;20057\u0026#34;\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n         \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;UpstreamPathTemplate\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/Customer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;UpstreamHttpMethod\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e\n         \u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e//Product API{\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamPathTemplate\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/Product\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamScheme\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamHostAndPorts\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n               \u003cspan\u003e\u0026#34;Host\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;localhost\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n               \u003cspan\u003e\u0026#34;Port\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;32345\u0026#34;\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n         \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;UpstreamPathTemplate\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/Product\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;UpstreamHttpMethod\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e\n         \u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n   \u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe above configuration specifies the downstream and upstream metadata (scheme, path, ports) for the customer and product microservices. So, while use the upstream metadata to call the endpoints specified here, the request is routed to the appropriate downstream service as specified in the downstream metadata. In other words, the downstream metadata is used to specify the internal service URL to redirect a request to when the API Gateway receives a new request.\u003c/p\u003e\u003cp\u003eYou should add Ocelot to the service container by calling the \u003ccode\u003eAddOcelot\u003c/code\u003e method in the \u003ccode\u003eConfigureServices\u003c/code\u003e method of the \u003ccode\u003eStartup\u003c/code\u003e class as shown below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing/Startup.cs\u003c/span\u003e\n\n\u003cspan\u003e// ... existing code\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIServiceCollection\u003c/span\u003e services\u003cspan\u003e)\u003c/span\u003e \n\u003cspan\u003e{\u003c/span\u003e\n  services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddOcelot\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eConfiguration\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e// ... existing code\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, you should enable Ocelot in the \u003ccode\u003eConfigure\u003c/code\u003e method of the \u003ccode\u003eStartup\u003c/code\u003e class by calling the \u003ccode\u003eUseOcelot\u003c/code\u003e extension method as shown here:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing/Startup.cs\u003c/span\u003e\n\n\u003cspan\u003e// ... existing code\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIApplicationBuilder\u003c/span\u003e app\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eIWebHostEnvironment\u003c/span\u003e env\u003cspan\u003e)\u003c/span\u003e \n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eenv\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eIsDevelopment\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    app\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseDeveloperExceptionPage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  app\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseRouting\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  app\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseOcelot\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  app\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseEndpoints\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eendpoints \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    endpoints\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eMapGet\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e context \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003eawait\u003c/span\u003e context\u003cspan\u003e.\u003c/span\u003eResponse\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eWriteAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e// ... existing code\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Run-the-projects\"\u003eRun the projects\u003c/h3\u003e\u003cp\u003eNow make sure that you\u0026#39;ve made all three projects as startup projects. To do this, follow these steps:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eIn the Solution Explorer window, right-click on the solution file.\u003c/li\u003e\u003cli\u003eClick \u0026#34;Properties\u0026#34;.\u003c/li\u003e\u003cli\u003eIn the \u0026#34;Property Pages\u0026#34; window, select the \u0026#34;Multiple startup projects\u0026#34; radio button:\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6has5yWrFDhGSMhgwEkrzK/6f237e6c673353528c0b7dbe2b8eef59/multiple-startup-projects-option.png\" alt=\"Multiple startup projects option in Visual Studio\"/\u003e\u003c/p\u003e\u003col start=\"4\"\u003e\u003cli\u003eClick Ok.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003ePress the F5 key to run the application. Now send an HTTP Get request to the following URL from \u003ca href=\"https://www.postman.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ePostman\u003c/a\u003e or any other HTTP client of your choice:\u003c/p\u003e\u003cp\u003e\u003ca href=\"http://localhost:39469/Customer\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttp://localhost:39469/Customer\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe HTTP Get method of the Customer controller will be executed and the output will look like this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1HXo0qIRynV06ghuJGWzF9/3f3e0a5d04b69e8c9b7f752efa1eabc6/customer-response-from-microservice.png\" alt=\"The Customer Microservice in Execution!\"/\u003e\u003c/p\u003e\u003cp\u003eSend an HTTP Get request from Postman to the following URL:\u003c/p\u003e\u003cp\u003e\u003ca href=\"http://localhost:39469/Product\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttp://localhost:39469/Product\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe request first goes to the API Gateway. Next, the API Gateway routes the request to the correct downstream microservice as specified in \u003ccode\u003eocelot\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e. The HTTP Get method named \u003ccode\u003eGetAllProducts\u003c/code\u003e of the \u003ccode\u003eProductController\u003c/code\u003e will be called, and the output will look like this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/Y9M6Ephso4Stg4JJcDTQC/fa5e9ac505ca25b855ed544af7d1a0cf/product-response-from-microservice.png\" alt=\"The Product Microservice in Execution!\"/\u003e\u003c/p\u003e\u003ch3 id=\"--Implement-rate-limiting--\"\u003e\u003cstrong\u003eImplement rate limiting\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eRate limiting is a technique for controlling network traffic. It sets a limit on how many times you can perform a specific activity within a given period - for example, accessing a particular resource, logging into an account, etc. Typically, rate-limiting keeps track of the IP addresses and the time elapsed between requests. The IP address helps determine the source of a particular request.\u003c/p\u003e\u003cp\u003eA rate-limiting solution is adept at tracking the time elapsed between each request and the total number of requests in a particular period. If a single IP address makes excessive requests within a specific timeframe, the rate-limiting solution will reject the requests for a specified period.\u003c/p\u003e\u003cp\u003eIn order to prevent your downstream services from being overburdened,  Ocelot enables rate-limiting of upstream requests. The following configuration illustrates how you specify rate-limiting in Ocelot:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing/Ocelot.json\u003c/span\u003e\n\n\u003cspan\u003e\u0026#34;RateLimitOptions\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;ClientWhitelist\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e      \n   \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;EnableRateLimiting\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;Period\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;5s\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;PeriodTimespan\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;Limit\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;HttpStatusCode\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e429\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet us now examine each of these options briefly:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eClientWhitelist\u003c/code\u003e setting - This is an array used to specify the clients that should not be affected by the rate-limiting.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eEnableRateLimiting\u003c/code\u003e setting - This is a boolean value, \u003ccode\u003e\u003cspan\u003etrue\u003c/span\u003e\u003c/code\u003e if you want to enable rate-limiting, \u003ccode\u003e\u003cspan\u003efalse\u003c/span\u003e\u003c/code\u003e otherwise.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eHttpStatusCode\u003c/code\u003e setting - This is used to specify \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe HTTP status code that is returned when rate limiting occurs\u003c/a\u003e.\u003c/li\u003e\u003cli\u003e\u003ccode\u003ePeriod\u003c/code\u003e setting - This specifies the duration that the rate limit is applicable, which in turn implies that if you make more requests within this duration than what is allowed, you\u0026#39;ll need to wait for the duration specified in the \u003ccode\u003ePeriodTimespan\u003c/code\u003e.\u003c/li\u003e\u003cli\u003e\u003ccode\u003ePeriodTimespan\u003c/code\u003e setting - This is used to specify the duration after which you can retry to connect to a service.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eLimit\u003c/code\u003e setting - This specifies the maximum number of requests that are allowed within the duration specified in \u003ccode\u003ePeriod\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eLet us assume that rate limiting is applied to the Product microservice only. The updated \u003ccode\u003eocelot\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e file will now look like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing/Ocelot.json\u003c/span\u003e\n\n\u003cspan\u003e{\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;Routes\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n      \u003cspan\u003e//Customer API\u003c/span\u003e\n     \u003cspan\u003e{\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamPathTemplate\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/Customer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamScheme\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamHostAndPorts\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n               \u003cspan\u003e\u0026#34;Host\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;localhost\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n               \u003cspan\u003e\u0026#34;Port\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;20057\u0026#34;\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n         \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;UpstreamPathTemplate\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/Customer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;UpstreamHttpMethod\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e\n         \u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e//Product API\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamPathTemplate\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/Product\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamScheme\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamHostAndPorts\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n               \u003cspan\u003e\u0026#34;Host\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;localhost\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n               \u003cspan\u003e\u0026#34;Port\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;32345\u0026#34;\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n         \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;RateLimitOptions\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;ClientWhitelist\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n               \n            \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;EnableRateLimiting\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;Period\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;5s\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;PeriodTimespan\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;Limit\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\n         \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;UpstreamPathTemplate\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/Product\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;UpstreamHttpMethod\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e\n         \u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n   \u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, run the application and send frequent requests (more than 1 per 5sec) and you’ll see the following error:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4E7h9U32IrkfVkDUte217c/adcd0d2f62ed0bdebd623ff74ac324c7/rate-limit-error.png\" alt=\"Rate Limiting at work!\"/\u003e\u003c/p\u003e\u003ch3 id=\"Implement-caching\"\u003eImplement caching\u003c/h3\u003e\u003cp\u003eCaching is a widely popular technique used in web applications to keep data in memory so that the same data may be quickly accessed when required by the application. Ocelot provides support for basic caching. To take advantage of it, you should install the \u003ccode\u003eOcelot\u003cspan\u003e.\u003c/span\u003eCache\u003cspan\u003e.\u003c/span\u003eCacheManager\u003c/code\u003e NuGet package as shown below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eInstall-Package\u003c/span\u003e Ocelot\u003cspan\u003e.\u003c/span\u003eCache\u003cspan\u003e.\u003c/span\u003eCacheManager\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, you should configure caching using the following code in the \u003ccode\u003eConfigureServices\u003c/code\u003e method:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing/Startup.cs\u003c/span\u003e\n\n\u003cspan\u003e// ... existing code ...\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIServiceCollection\u003c/span\u003e services\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddOcelot\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eConfiguration\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddCacheManager\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ex \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e\n        x\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eWithDictionaryHandle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e// ... existing code ...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLastly, you should specify caching on a particular route in the route configuration using the following settings:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing/Ocelot.json\u003c/span\u003e\n\n\u003cspan\u003e// ... existing settings ...\u003c/span\u003e\n\n\u003cspan\u003e\u0026#34;Routes\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n   \u003cspan\u003e//Customer API{\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;DownstreamPathTemplate\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/Customer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;DownstreamScheme\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;DownstreamHostAndPorts\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n         \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;Host\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;localhost\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;Port\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;20057\u0026#34;\u003c/span\u003e\n         \u003cspan\u003e}\u003c/span\u003e\n      \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;FileCacheOptions\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;TtlSeconds\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e30\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;Region\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;customercaching\u0026#34;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;UpstreamPathTemplate\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/Customer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;UpstreamHttpMethod\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e\n      \u003cspan\u003e]\u003c/span\u003e\n   \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e]\u003c/span\u003e\n\n\u003cspan\u003e// ... existing settings ...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere, we\u0026#39;ve set \u003ccode\u003eTtlSeconds\u003c/code\u003e to 30 seconds which implies that the cache will expire after this time has elapsed. Note that you should specify your cache configuration in the \u003ccode\u003eFileCacheOptions\u003c/code\u003e section. The \u003ccode\u003eRegion\u003c/code\u003e setting identifies the area within the cache that will contain the data. This way you can clear that area by using the Ocelot\u0026#39;s administration API. \u003c/p\u003e\u003cp\u003eTo test this, you can set a breakpoint on the HTTP Get method named \u003ccode\u003eGetAllCustomers\u003c/code\u003e in the \u003ccode\u003eCustomerController\u003c/code\u003e class. When you execute the application and send an HTTP Get request to the endpoint, the breakpoint will be hit as usual. However, all subsequent calls to the same endpoint within 30 seconds (this is the duration we\u0026#39;ve specified) will fetch data, but the breakpoint will not be hit anymore.\u003c/p\u003e\u003ch3 id=\"Implement-correlation-ID\"\u003eImplement correlation ID\u003c/h3\u003e\u003cp\u003eOcelot enables a client to send a request Id in the header to the  server. Once this request Id is available in the middleware pipeline,  you can log it along with other information. Ocelot can also forward  this request Id to the downstream services if required. A \u003cstrong\u003ecorrelation ID\u003c/strong\u003e is a unique identifier attached to every request and response and used to track requests and responses in a distributed application. You can use either a request Id or a correlation ID when working with Ocelot to track requests.\u003c/p\u003e\u003cp\u003eThe primary difference between a request Id and a correlation ID is that while the former uniquely identifies every HTTP request, the latter is a unique identifier attached to a particular request-response chain. While you can use \u003ccode\u003eRequest\u003cspan\u003e-\u003c/span\u003eId\u003c/code\u003e for every HTTP request, you can use \u003ccode\u003e\u003cspan\u003eX\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eCorrelation\u003cspan\u003e-\u003c/span\u003eId\u003c/code\u003e for an event chain of requests and responses. \u003ccode\u003e\u003cspan\u003eX\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eCorrelation\u003cspan\u003e-\u003c/span\u003eId\u003c/code\u003e is the name of the HTTP header attached to the downstream requests used to track HTTP requests that flow through multiple back-end services.\u003c/p\u003e\u003cp\u003eOcelot must know the URL that it is running on in order to perform certain administration configurations. This is the \u003ccode\u003eBaseUrl\u003c/code\u003e specified in the \u003ccode\u003eocelot\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e file. Note that this URL should be the URL that your clients will see the API Gateway running on.\u003c/p\u003e\u003cp\u003eHere\u0026#39;s the complete source code of the \u003ccode\u003eocelot\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e file for your reference:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// OrderProcessing/Ocelot.json\u003c/span\u003e\n\n\u003cspan\u003e{\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;Routes\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n      \u003cspan\u003e//Customer API\u003c/span\u003e\n     \u003cspan\u003e{\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamPathTemplate\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/Customer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamScheme\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamHostAndPorts\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n               \u003cspan\u003e\u0026#34;Host\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;localhost\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n               \u003cspan\u003e\u0026#34;Port\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;20057\u0026#34;\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n         \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;FileCacheOptions\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;TtlSeconds\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e30\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;Region\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;customercaching\u0026#34;\u003c/span\u003e\n         \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;UpstreamPathTemplate\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/Customer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;UpstreamHttpMethod\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e\n         \u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e//Product API\u003c/span\u003e\n     \u003cspan\u003e{\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamPathTemplate\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/Product\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamScheme\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;DownstreamHostAndPorts\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n               \u003cspan\u003e\u0026#34;Host\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;localhost\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n               \u003cspan\u003e\u0026#34;Port\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;32345\u0026#34;\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n         \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;RateLimitOptions\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;ClientWhitelist\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n               \n            \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;EnableRateLimiting\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;Period\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;5s\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;PeriodTimespan\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;Limit\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\n         \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;UpstreamPathTemplate\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/Product\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         \u003cspan\u003e\u0026#34;UpstreamHttpMethod\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e\n         \u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n   \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n   \u003cspan\u003e\u0026#34;GlobalConfiguration\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;RequestIdKey\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;X-Correlation-Id\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;BaseUrl\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;http://localhost:39469\u0026#34;\u003c/span\u003e\n   \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eChoosing an exemplary architecture for the needs of your business is the first and foremost step in building applications that are flexible, scalable, and high performant. One of the most significant advantages of microservices architecture is its support for heterogeneous platforms and technologies.\u003c/p\u003e\u003cp\u003eYour API Gateway can manage concerns such as security, rate limiting, performance, and scalability. However, you should be aware of handling the complexity it brings in and the risk of a single point of failure. Besides, there is a learning curve when you\u0026#39;re building microservices-based applications using an API Gateway. Possible performance degradation is yet another concern that you must handle.\u003c/p\u003e\u003cp\u003eThe complete source code of the \u003cem\u003eOrderProcessing\u003c/em\u003e application built throughout this article is available \u003ca href=\"https://github.com/auth0-blog/api-gateway-aspnetcore-ocelot\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"Aside--Securing-ASP-NET-Core-with-Auth0\"\u003eAside: Securing ASP.NET Core with Auth0\u003c/h2\u003e\u003cp\u003eSecuring ASP.NET Core applications with Auth0 is easy and brings a lot of great features to the table. With \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0\u003c/a\u003e, you only have to write a few lines of code to get a solid \u003ca href=\"https://auth0.com/user-management\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eidentity management solution\u003c/a\u003e, \u003ca href=\"https://auth0.com/docs/sso/single-sign-on\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esingle sign-on\u003c/a\u003e, support for \u003ca href=\"https://auth0.com/docs/identityproviders\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esocial identity providers (like Facebook, GitHub, Twitter, etc.)\u003c/a\u003e, and support for \u003ca href=\"https://auth0.com/enterprise\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eenterprise identity providers (like Active Directory, LDAP, SAML, custom, etc.)\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eOn ASP.NET Core, you need \u003ca href=\"https://auth0.com/docs/apis\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eto create an API in your Auth0 Management Dashboard\u003c/a\u003e and change a few things on your code. To create an API, you need to \u003ca href=\"https://auth0.com/signup\" data-amp-replace=\"CLIENT_ID\" data-amp-addparams=\"anonId=CLIENT_ID(cid-scope-cookie-fallback-name)\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esign up for a free Auth0 account\u003c/a\u003e. After that, you need to go to \u003ca href=\"https://manage.auth0.com/#/apis\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe API section of the dashboard\u003c/a\u003e and click on \u0026#34;Create API\u0026#34;. On the dialog shown, you can set the \u003cem\u003eName\u003c/em\u003e of your API as \u0026#34;Books\u0026#34;, the \u003cem\u003eIdentifier\u003c/em\u003e as \u0026#34;\u003ca href=\"http://books.mycompany.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttp://books.mycompany.com\u003c/a\u003e\u0026#34;, and leave the \u003cem\u003eSigning Algorithm\u003c/em\u003e as \u0026#34;RS256\u0026#34;.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6HrObJ2eGY7YehLzbBM0sH/066be814a124d98f03224d9b177caa22/net-core-2_creating-api-on-auth0.png\" alt=\"Creating API on Auth0\"/\u003e\u003c/p\u003e\u003cp\u003eAfter that, you have to add the call to \u003ccode\u003eservices\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e in the \u003ccode\u003e\u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method of the \u003ccode\u003eStartup\u003c/code\u003e class as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e authority \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e$\u0026#34;https://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eConfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e audience \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Audience\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\nservices\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  options\u003cspan\u003e.\u003c/span\u003eDefaultAuthenticateScheme \u003cspan\u003e=\u003c/span\u003e JwtBearerDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n  options\u003cspan\u003e.\u003c/span\u003eDefaultChallengeScheme \u003cspan\u003e=\u003c/span\u003e JwtBearerDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddJwtBearer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  options\u003cspan\u003e.\u003c/span\u003eAuthority \u003cspan\u003e=\u003c/span\u003e authority\u003cspan\u003e;\u003c/span\u003e\n  options\u003cspan\u003e.\u003c/span\u003eAudience \u003cspan\u003e=\u003c/span\u003e audience\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the body of the \u003ccode\u003e\u003cspan\u003eConfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method of the \u003ccode\u003eStartup\u003c/code\u003e class, you also need to add an invocation to \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthorization\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e as shown below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseRouting\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\napp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\napp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthorization\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\napp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseEndpoints\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eendpoints \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    endpoints\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eMapControllers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003eMake sure you invoke these methods in the order shown above. It is essential so that everything works properly.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eFinally, add the following element to the \u003ccode\u003eappsettings\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e configuration file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;Logging\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// ...\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;YOUR_DOMAIN\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;Audience\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;YOUR_AUDIENCE\u0026#34;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Replace the placeholders \u003ccode\u003e\u003cspan\u003eYOUR_DOMAIN\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003eYOUR_AUDIENCE\u003c/span\u003e\u003c/code\u003e with the actual values for the domain that you specified when creating your Auth0 account and the \u003cem\u003eIdentifier\u003c/em\u003e you assigned to your API.\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn what an API Gateway is and how to build yours in ASP.NET Core by using Ocelot.",
      "date_published": "2021-10-05T14:51:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/auth0-introduces-zanzibar-academy/",
      "title": "Auth0 Introduces zanzibar.academy",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eWhile our customers tell us they appreciate our Authentication (AuthN) features, we’ve seen an increase in requests to expand our Authorization (AuthZ) offering to help builders accelerate their development. This is why we’ve released key features like \u003ca href=\"https://auth0.com/blog/introducing-auth0-organizations/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOrganizations\u003c/a\u003e and \u003ca href=\"https://auth0.com/docs/authorization/rbac/roles\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eRoles\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eWhile reading \u003ca href=\"https://research.google/pubs/pub48190/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGoogle’s Zanzibar paper\u003c/a\u003e describing their global access system, we found the approach to be highly creative and inspiring. It had the flexibility to support so many of their products and was scalable, highly reliable, and extremely fast. Companies like \u003ca href=\"https://medium.com/airbnb-engineering/himeji-a-scalable-centralized-system-for-authorization-at-airbnb-341664924574\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAirbnb\u003c/a\u003e and \u003ca href=\"https://medium.com/building-carta/authz-cartas-highly-scalable-permissions-system-782a7f2c840f\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCarta\u003c/a\u003e have developed their own version, and companies and new products are being built inspired by Zanzibar. This is why we believe that Authorization systems built using the Zanzibar model are going to grow in number over the next few years.\u003c/p\u003e\u003ch2 id=\"What-is-Zanzibar\"\u003eWhat is Zanzibar\u003c/h2\u003e\u003cp\u003eZanzibar is Google’s global authorization system. It powers authorization for YouTube, Google Drive, Google Workspaces, Google Cloud Platform, and their other services. It drives Google’s core collaboration features like sharing a document with someone or sharing photos with a friend. Like anything Google makes, it has to scale to billions of users and trillions of digital objects. Creating an access control system for that many people and object combinations is a daunting task, and Google laid out how they did it in their \u003ca href=\"https://research.google/pubs/pub48190/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e2019 Google Zanzibar paper\u003c/a\u003e. It talks about the different considerations and tradeoffs they made. Simplicity and extensibility were key considerations because Google needed to ensure that its internal teams could use the system for a wide array of use cases with certainty with how it would respond to their specific needs.\u003c/p\u003e\u003cp\u003eZanzibar has steadily grown in popularity since the paper’s release. We set out this past year to talk with the organizations about their implementation experiences, and learn from what worked and didn’t work. You can find some of those discussions \u003ca href=\"https://www.youtube.com/playlist?list=PLZuCrkqyqw9wY0bCosGYDMI9enFpg_tk-\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e\u003ca href=\"https://www.youtube.com/playlist?list=PLZuCrkqyqw9wY0bCosGYDMI9enFpg_tk-.\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e.\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6NDVD79nUcJB0wtfL9OM4v/1ec383bc257192ca0b2c83438c27891b/Uploaded_from_Auth0_Introduces_zanzibar\" alt=\"Zanzibar\"/\u003e\u003c/p\u003e\u003ch2 id=\"Introducing-Zanzibar-Academy\"\u003eIntroducing Zanzibar Academy\u003c/h2\u003e\u003cp\u003eWe\u0026#39;ve always pushed to create content that is useful for the global development community and today we’re taking another important step in our Authorization journey by releasing the \u003ca href=\"http://zanzibar.academy\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ezanzibar.academy\u003c/a\u003e learning site. \u003ca href=\"http://zanzibar.academy\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eZanzibar.academy\u003c/a\u003e is meant to help builders understand the value and power of Zanzibar style systems, much like \u003ca href=\"http://jwt.io\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJWT.io\u003c/a\u003e educates and spreads the understanding of the JSON Web Token standard. It’s a place for builders to learn the Zanzibar concepts in a progressive, guided way.\u003c/p\u003e\u003ch2 id=\"ReBAC-in-a-Wider-AuthZ-World\"\u003eReBAC in a Wider AuthZ World\u003c/h2\u003e\u003cp\u003eOne of the key differences between Google Zanzibar and other AuthZ systems is that Google Zanzibar uses graph-based data structures to create Relationship-Based Access Control (ReBAC). ReBAC centralizes more data so Access Control Lists (ACLs) are less cumbersome to manage.\u003c/p\u003e\u003cp\u003eWith no viable alternatives, organizations have been rolling their own AuthZ, or extending systems like OPA, that handle policies for authorization based on attribute-based access control (ABAC), to manage things outside their typical use cases. These types of systems give developers an incredible amount of control over their authorization decisions, but also an incredible amount of responsibility to develop and manage them. Policies are also hard to build against, it’s very hard to create filtered lists of accessible resources in a search function based on a policy system.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/68daT6P0GYPtQtDBUFqTFL/3eecd0d6e0390c61e23d0e454bd6c09c/Uploaded_from_Auth0_Introduces_zanzibar\" alt=\"ReBAC\"/\u003e\u003c/p\u003e\u003cp\u003eInstead, Zanzibar offers a system that can be indexed and reverse indexed for various purposes in an application. It’s easily extensible, so new features can easily be added. In our own version we’re working to make this process easier for developers by creating an out-of-the-box assertions system, so developers can create automated tests of changes to their implementation. Zanzibar-style systems won’t solve all AtuthZ problems, there is still an important place for OPA-style ABAC systems, but Zanzibar systems will only be more widely adopted as time goes on.\u003c/p\u003e\u003ch2 id=\"Supporting-Builders\"\u003eSupporting Builders\u003c/h2\u003e\u003cp\u003eAuth0 is here to support builders — and, frankly, what the team at Google created is inspiring. But learning from a paper isn’t always easy. With the Zanzibar Academy website and related presentations, we seek to make the concepts and practices in the Zanzibar paper easier to understand with interactive descriptions and examples — always with full credit to the original team.\u003c/p\u003e\u003cp\u003eWe’re further supporting builders by creating our own version for developers to use. You can explore our implementation \u003ca href=\"http://learn.sandcastle.cloud\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e. Inspired by the Zanzibar paper, we’ve applied our 8 years of experience in building tools for developers to build a version all builders will be delighted to use.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3f4HlkamlZDMh86euuxGTo/8675f6c32d593e6d3f96fc5aec43c379/Uploaded_from_Auth0_Introduces_zanzibar\" alt=\"Supporting\"/\u003e\u003c/p\u003e\u003cp\u003eWe’re excited for you to learn more at \u003ca href=\"http://zanzibar.academy\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ezanzibar.academy\u003c/a\u003e, we’ll see you there! If you’re interested in learning more about Zanzibar and \u003ca href=\"http://learn.sandcastle.cloud\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0s new Zanzibar based AuthZ platform\u003c/a\u003e, join our \u003ca href=\"https://discord.com/invite/pvbNmqC\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDiscord community\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "A microsite to help developers understand how a Zanzibar style system works.",
      "date_published": "2021-10-05T13:54:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-4-roles-permissions/",
      "title": "Flutter Authentication and Authorization with Auth0, Part 4: Roles and Permissions",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://twitter.com/auth0\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://facebook.com/getauth0\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://linkedin.com/company/auth0\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.instagram.com/weareauth0/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/auth0\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e© 2013-2021 Auth0 Inc. All Rights Reserved.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.",
      "date_published": "2021-10-04T17:13:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-4-roles-permissions/",
      "title": "Flutter Authentication and Authorization with Auth0, Part 4: Roles and Permissions",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIn the previous section, you learned how to add real-time chat to the application and set up the \u003cem\u003eMJ Coffee\u003c/em\u003e app to load different chat screens. \u003c/p\u003e\u003cp\u003eIn this section, you will learn how to manage roles and permissions in Auth0 and a Flutter app, as well as how to apply a proper authorization flow. You\u0026#39;ll also learn how to leverage RBAC and permission-based functionalities in a Flutter application.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eLook for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Managing-Roles\"\u003eManaging Roles\u003c/h2\u003e\u003cp\u003eIn a previous section in this tutorial, you learned how to create roles in the Auth0 dashboard. It’s time to see why you need roles and learn how you can leverage them into your app.\u003c/p\u003e\u003cp\u003eRole-based access control (RBAC) is a way to assign permissions to users based on their roles. It offers a simple approach to access management that is less prone to error than assigning permissions to users individually.\u003c/p\u003e\u003cp\u003eFor example, suppose you use RBAC to control Customer/Employee access in the \u003cem\u003eMJ Coffee\u003c/em\u003e application. In that case, you could give employees a role that allows them to update users’ details or access the community chat screen. In contrast, customers would view the support screen, but wouldn’t be authorized to perform tasks such as deleting messages or uploading attachments.\u003c/p\u003e\u003cp\u003eWhen planning your access control strategy, it’s generally a good idea to assign users a smalled number of permissions that allow them to get their work done.\u003c/p\u003e\u003cp\u003eYou can leverage Auth0 Actions to assign roles automatically to each user after they sign up.\u003c/p\u003e\u003cp\u003e🛠 Once more, create a new custom action. In the left column menu of the Auth0 dashboard, select \u003cstrong\u003eActions\u003c/strong\u003e, then \u003cstrong\u003eFlows\u003c/strong\u003e. The \u003cstrong\u003eChoose Flow\u003c/strong\u003e page will appear. Select \u003cstrong\u003ePost User Registration\u003c/strong\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1pbuab4m48ur5r0abMjpx5/0c67319150786f3ccff7a1fd4f788b60/create_new_post_user_registration.png\" alt=\"Creating a new post user registration\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Name the action \u003ccode\u003eAssign Role\u003c/code\u003e and add the \u003ccode\u003eauth0\u003c/code\u003e npm module with version \u003ccode\u003e\u003cspan\u003e2.35\u003c/span\u003e\u003cspan\u003e.1\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e🛠 Add the following handler, which will be called during the execution of a \u003ccode\u003ePostUserRegistration\u003c/code\u003e flow:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Auth0 Actions\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e ManagementClient \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003erequire\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;auth0\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eManagementClient\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e AuthenticationClient \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003erequire\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;auth0\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eAuthenticationClient\u003cspan\u003e;\u003c/span\u003e\n\nexports\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonExecutePostUserRegistration\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eDOMAIN\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;{YOUR_DOMAIN}\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e auth0 \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eAuthenticationClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    domain\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDOMAIN\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    clientId\u003cspan\u003e:\u003c/span\u003e event\u003cspan\u003e.\u003c/span\u003esecrets\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eM2M_CLIENT_ID\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    clientSecret\u003cspan\u003e:\u003c/span\u003e event\u003cspan\u003e.\u003c/span\u003esecrets\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eM2M_CLIENT_SECRET\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e response \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e auth0\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclientCredentialsGrant\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    audience\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003ehttps://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eDOMAIN\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/api/v2/\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    scope\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;read:users update:users\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eAPI_TOKEN\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003eaccess_token\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e management \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eManagementClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    domain\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDOMAIN\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    token\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAPI_TOKEN\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eevent\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003eemail\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eendsWith\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;@mjcoffee.app\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// employee\u003c/span\u003e\n    \u003cspan\u003eawait\u003c/span\u003e management\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eassignRolestoUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e id\u003cspan\u003e:\u003c/span\u003e event\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003euser_id \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e roles\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;rol_CHpJMdZUPCLzo6E2\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// customer\u003c/span\u003e\n    \u003cspan\u003eawait\u003c/span\u003e management\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eassignRolestoUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e id\u003cspan\u003e:\u003c/span\u003e event\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003euser_id \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e roles\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;rol_fG50GuNE9S72jNZn\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0026#39;s analyze this handler’s logic step by step.\u003c/p\u003e\u003cp\u003eThe handler imports both \u003ccode\u003eManagementClient\u003c/code\u003e and \u003ccode\u003eAuthenticationClient\u003c/code\u003e from the \u003ccode\u003eauth0\u003c/code\u003e module, a Node.js SDK that conveniently provides official Auth0 public APIs.\u003c/p\u003e\u003cp\u003eIt then defines your domain name, \u003ccode\u003e\u003cspan\u003eDOMAIN\u003c/span\u003e\u003c/code\u003e. \u003c/p\u003e\u003cp\u003e🛠 In the handler, replace \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eYOUR_DOMAIN\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e with your application’s domain, which you’ll find in the Auth0 dashboard.\u003c/p\u003e\u003cp\u003eThe handler initializes an authentication client, passing its constructor the application’s domain, client ID, and client secret. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNote that the application client is a bit special here!\u003c/strong\u003e This is \u003cem\u003enot\u003c/em\u003e the application you have created and worked with so far. You need to create a Machine-to-Machine (M2M) application or Auth0 non-interactive client, which makes it possible to request a client credentials grant.\u003c/p\u003e\u003cp\u003e🛠 Open the Auth0 dashboard in a new tab in your browser. Go to the \u003cstrong\u003eApplications\u003c/strong\u003e page and creating a new application, selecting the \u003cstrong\u003eMachine to Machine Applications\u003c/strong\u003e type:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4s9EPsMj5Lg5StnSURGU4X/df7a4f7a97be3e83a4ff84d446137df3/create_new_m2m_app.png\" alt=\"Creating a new M2M application in the Auth0 dashboard\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Once the M2M application is created, take a note of Client ID and Client Secret. You will need to add them to your Actions’ secrets in the next step, then go to the \u003cstrong\u003eAPIs\u003c/strong\u003e tab and authorize the Auth0 Management API.\u003c/p\u003e\u003cp\u003eAs mentioned before, it\u0026#39;s always a good idea to limit the permissions. Hence, select only those permissions needed to perform actions with this Client. \u003c/p\u003e\u003cp\u003e🛠 We want to be able to add roles to users, so select the \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eusers\u003c/code\u003e and \u003ccode\u003eupdate\u003cspan\u003e:\u003c/span\u003eusers\u003c/code\u003e permissions:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1zQbWKfW0orBdHROj3RR3j/ce856b0663b4f78610c9d3aa1ea9e0e5/authorize_api.png\" alt=\"Authorizing the API\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Add the following to the action:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe key \u003ccode\u003e\u003cspan\u003eM2M_CLIENT_ID\u003c/span\u003e\u003c/code\u003e, with the client ID as its corresponding value\u003c/li\u003e\u003cli\u003eThe key \u003ccode\u003e\u003cspan\u003eM2M_CLIENT_SECRET\u003c/span\u003e\u003c/code\u003e, with the client secret as the value\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou can now successfully authenticate an Auth0 client and request a management API token by specifying audiences and scopes. Scopes are the ones that you have selected in the previous steps in the permission tab under Auth0 management API.\u003c/p\u003e\u003cp\u003eOnce access is granted and the token is received, you can create a management client.\u003c/p\u003e\u003cp\u003eThe logic is relatively simple for this MJ Coffee app.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eevent\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003eemail\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eendsWith\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;@mjcoffee.app\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e// employee\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e// customer\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSimply put, if the user’s email address ends with  \u003ccode\u003e@mjcoffee\u003cspan\u003e.\u003c/span\u003eapp\u003c/code\u003e they will be assigned the \u003cem\u003eemployee\u003c/em\u003e role; otherwise, they’ll be assigned the \u003cem\u003ecustomer\u003c/em\u003e role. This, of course, could change based on your implementation.\u003c/p\u003e\u003cp\u003eFinally, the handler calls \u003ccode\u003e\u003cspan\u003eassignRolesToUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e on the \u003ccode\u003emanagement\u003c/code\u003e client and passes:\u003c/p\u003e\u003cul\u003e\u003cli\u003ea map containing the user ID, and\u003c/li\u003e\u003cli\u003ea list of role IDs.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eTo get a role’s ID, select \u003cstrong\u003eUser Management\u003c/strong\u003e in the Auth0 dashboard’s left column menu, then select \u003cstrong\u003eRoles\u003c/strong\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4WKeTj5YRcq1IZUcxCO32d/d627b895fe44352d1e4f7de01fa406c6/role_id.png\" alt=\"Getting a Role’s ID\"/\u003e\u003c/p\u003e\u003cp\u003eFantastic! Don’t forget to deploy your function.\u003c/p\u003e\u003cp\u003e🛠 For the last step, go to \u003cstrong\u003eFlows\u003c/strong\u003e, then \u003cstrong\u003ePost User Registration\u003c/strong\u003e. Add your \u003ccode\u003eAssign Role\u003c/code\u003e custom action to the flow.\u003c/p\u003e\u003cp\u003eIf you are impatient to test what you have created so far, navigate to the Auth0 dashboard’s \u003cstrong\u003eUsers\u003c/strong\u003e page and create new users with and without email addresses that you have specified in your function logic. Then, go to the \u003cstrong\u003eRole\u003c/strong\u003e tab — you should see that for each user, their role was assigned automatically:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/30XsYPDx2euHspY9BGnk6s/ddcaf08706e6dda515179b46611cd724/user_role.png\" alt=\"Users and their automatically assigned roles\"/\u003e\u003c/p\u003e\u003ch2 id=\"Managing-Permissions\"\u003eManaging Permissions\u003c/h2\u003e\u003cp\u003eYou’ll often need to create a custom API that defines permissions. Then you can assign those permissions to roles, which can then be assigned to users.\u003c/p\u003e\u003cp\u003e🛠 In the Auth0 dashboard, select \u003cstrong\u003eApplications\u003c/strong\u003e in the left column menu, select \u003cstrong\u003eAPIs\u003c/strong\u003e in the submenu, and then click the \u003cstrong\u003eCreate API\u003c/strong\u003e button to create a new custom API.\u003c/p\u003e\u003cp\u003e🛠 Give the API a recognizable name, such as \u003ccode\u003eStreamChat Management \u003cspan\u003eAPI\u003c/span\u003e\u003c/code\u003e, then define your identifier. This identifier will become your API audience. Note that the identifier cannot be modified. A good practice for naming identifiers is to use a URL, even if that URL is not publicly available. For example, you could name the identifier \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003egetStreamChat\u003cspan\u003e.\u003c/span\u003emjcoffee\u003cspan\u003e.\u003c/span\u003eapp\u003cspan\u003e/\u003c/span\u003ev1\u003cspan\u003e/\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4NdodtRf9CZSY8O8Onb5fP/7b0216eed696a44a99ef5a99437431a5/custom_api.png\" alt=\"Creating a new custom API\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Once the API is created, go to the RBAC Settings section and enable RBAC and Add Permissions in the Access Token. The API is supposed to be flagged as First Party so that you can turn on Allow Skipping User Consent. Turn on Allow Offline Access so that Auth0 will allow applications to ask for Refresh Tokens for this API.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1egWhGNMvy0g12Oh6ccQyq/ee28278cf4831101c95dc9ceb5acbf50/rbac-api.png\" alt=\"RBAC API\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Navigate to the \u003cstrong\u003ePermissions\u003c/strong\u003e tab and add your permissions and description. I recommend at adding at least these permissions:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003edelete\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003emessage\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003eedit\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003emessage\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003eupload\u003cspan\u003e.\u003c/span\u003eattachments\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/47v9LpCiZKbnsTL3VDBQoe/fc80c54e22f8d316b3bf02a6ab3e656f/custom_permissions.png\" alt=\"Custome permissions\"/\u003e\u003c/p\u003e\u003cp\u003eThe more permissions you define, and the more explicit they are,  the better you can control the resources.\u003c/p\u003e\u003cp\u003e🛠 Next, head over to \u003cstrong\u003eRoles\u003c/strong\u003e under \u003cstrong\u003eUser Management\u003c/strong\u003e. Go to each role and assign the following permissions:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eEmployee\u003c/strong\u003e\n\u003cul\u003e\u003cli\u003e\u003ccode\u003eedit\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003emessage\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003eupload\u003cspan\u003e.\u003c/span\u003eattachments\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eCustomer\u003c/strong\u003e\n\u003cul\u003e\u003cli\u003e\u003ccode\u003eedit\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003emessage\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAdmin\u003c/strong\u003e\n\u003cul\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003edelete\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003emessage\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003eedit\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003emessage\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003eupload\u003cspan\u003e.\u003c/span\u003eattachments\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6JylazPCTIIvUKwrSicEib/116523b7e52452211349376dff85dba0/role_permission.png\" alt=\"Defining custom permissions\"/\u003e\u003c/p\u003e\u003cp\u003eYou have managed to create roles and users are automatically assigned roles on registration. Although role assignment is automatic now, you can still alter user roles manually. For example, you can add the \u003cstrong\u003eAdmin\u003c/strong\u003e role to specific users in the Auth0 dashboard.\u003c/p\u003e\u003cp\u003eThe only step remaining is to expose the roles and permissions to \u003ccode\u003eidToken\u003c/code\u003e and \u003ccode\u003eaccessToken\u003c/code\u003e that the Flutter app can consume.\u003c/p\u003e\u003ch2 id=\"Exposing-Roles-and-Permission\"\u003eExposing Roles and Permission\u003c/h2\u003e\u003cp\u003e🛠 This step is pretty similar to what you have done when assigning roles. As a reminder, here are the steps:\u003c/p\u003e\u003cul\u003e\u003cli\u003eCreate a custom action, triggering Login/Post Login\u003c/li\u003e\u003cli\u003eName the action “Revealing User Roles \u0026amp; Permissions”\u003c/li\u003e\u003cli\u003eAdd the machine-to-machine application’s client ID and client key to the action’s secrets\u003c/li\u003e\u003cli\u003eAdd \u003ccode\u003eauth0\u003c/code\u003e npm package version \u003ccode\u003e\u003cspan\u003e2.35\u003c/span\u003e\u003cspan\u003e.1\u003c/span\u003e\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 Once you’ve done that, follow the code below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Auth0 Actions\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e ManagementClient \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003erequire\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;auth0\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eManagementClient\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e AuthenticationClient \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003erequire\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;auth0\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eAuthenticationClient\u003cspan\u003e;\u003c/span\u003e\nexports\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonExecutePostLogin\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eevent\u003cspan\u003e,\u003c/span\u003e api\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eDOMAIN\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;mhadaily.eu.auth0.com\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e auth0 \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eAuthenticationClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    domain\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDOMAIN\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    clientId\u003cspan\u003e:\u003c/span\u003e event\u003cspan\u003e.\u003c/span\u003esecrets\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eM2M_CLIENT_ID\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    clientSecret\u003cspan\u003e:\u003c/span\u003e event\u003cspan\u003e.\u003c/span\u003esecrets\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eM2M_CLIENT_SECRET\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e response \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e auth0\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclientCredentialsGrant\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    audience\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003ehttps://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eDOMAIN\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/api/v2/\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    scope\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;read:users update:users read:roles\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eAPI_TOKEN\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003eaccess_token\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e management \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eManagementClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    domain\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDOMAIN\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    token\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAPI_TOKEN\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003econst\u003c/span\u003e params \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e id\u003cspan\u003e:\u003c/span\u003e event\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003euser_id \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e roles \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e management\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetUserRoles\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eparams\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e permissions \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e management\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetUserPermissions\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eparams\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003econst\u003c/span\u003e namespace \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;https://users.mjcoffee.app\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eevent\u003cspan\u003e.\u003c/span\u003eauthorization\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    api\u003cspan\u003e.\u003c/span\u003eidToken\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomClaim\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003enamespace\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/roles\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e roles\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    api\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomClaim\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003enamespace\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/roles\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e roles\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    api\u003cspan\u003e.\u003c/span\u003eidToken\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomClaim\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003enamespace\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/permissions\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e permissions\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    api\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomClaim\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003enamespace\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/permissions\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e permissions\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe code is pretty similar to what you have written once before. The first change is that it adds \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eroles\u003c/code\u003e to the scope. Make sure you have enabled this permission under the M2M application as you have done once for the \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eusers update\u003cspan\u003e:\u003c/span\u003eusers\u003c/code\u003e permissions; otherwise, you will face an “unauthorized” error.\u003c/p\u003e\u003cp\u003eIt then calls \u003ccode\u003e\u003cspan\u003egetUserRoles\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003egetUserPermissions\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e,  passing the user ID. These functions will return user roles and permissions respectively.\u003c/p\u003e\u003cp\u003eAfter defining a namespace, the code calls \u003ccode\u003e\u003cspan\u003esetCustomClaim\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e to add both roles and permission custom claims to the ID and access tokens.\u003c/p\u003e\u003cp\u003e🛠 Make sure you deploy and then navigate to \u003cstrong\u003eFlows\u003c/strong\u003e. You want to add the new custom action to the login flow right before the previous action you created earlier:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5XinnapiJ1AUQN0LiHY5sV/bf95d7da7f1333aafe30f80f0e81f14e/new_login_flow.png\" alt=\"new flow login\"/\u003e\u003c/p\u003e\u003cp\u003eSo far so good, but you still need to go to the Flutter app and add roles and permissions to the models.\u003c/p\u003e\u003ch2 id=\"Read-Roles-and-Permissions-in-Flutter\"\u003eRead Roles and Permissions in Flutter\u003c/h2\u003e\u003cp\u003eNow that both roles and permissions are available in the ID and access tokens, you can add them to \u003ccode\u003eAuth0IdToken\u003c/code\u003e and \u003ccode\u003eAuth0UserInfo\u003c/code\u003e, respectively.\u003c/p\u003e\u003cp\u003e🛠 First, create a file named \u003ccode\u003eauth0_roles\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file in the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003emodels\u003c/code\u003e folder:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/models/auth0_roles.dart\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:json_annotation/json_annotation.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003epart\u003c/span\u003e \u003cspan\u003e\u0026#39;auth0_roles.g.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eenum\u003c/span\u003e Role \u003cspan\u003e{\u003c/span\u003e\n  Employee\u003cspan\u003e,\u003c/span\u003e\n  Admin\u003cspan\u003e,\u003c/span\u003e\n  Customer\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e@JsonSerializable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuth0Role\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eAuth0Role\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edescription\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efinal\u003c/span\u003e String id\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e Role name\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String description\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efactory\u003c/span\u003e Auth0Role\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efromJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eMap\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e json\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      _$\u003cspan\u003eAuth0RoleFromJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ejson\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  Map\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003etoJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e _$\u003cspan\u003eAuth0RoleToJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@override\u003c/span\u003e\n  String \u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u0026#39;$name\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Then create \u003ccode\u003eauth0_permissions\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e in the same directory, with the code below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/models/auth0_permissions.dart\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:json_annotation/json_annotation.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003epart\u003c/span\u003e \u003cspan\u003e\u0026#39;auth0_permissions.g.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eUserPermissions\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003econst\u003c/span\u003e String delete \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;delete.user.message\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003econst\u003c/span\u003e String edit \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;edit.user.message\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003econst\u003c/span\u003e String upload \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;upload.attachments\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e@JsonSerializable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuth0Permission\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eAuth0Permission\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003epermissionName\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edescription\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eresourceServerName\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eresourceServerIdentifier\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esources\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;permission_name\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String permissionName\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efinal\u003c/span\u003e String description\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;resource_server_name\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String resourceServerName\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;resource_server_identifier\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String resourceServerIdentifier\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efinal\u003c/span\u003e List\u003cspan\u003e\u0026lt;\u003c/span\u003eAuth0PermissionsSource\u003cspan\u003e\u0026gt;\u003c/span\u003e sources\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efactory\u003c/span\u003e Auth0Permission\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efromJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eMap\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e json\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      _$\u003cspan\u003eAuth0PermissionFromJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ejson\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  Map\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003etoJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e _$\u003cspan\u003eAuth0PermissionToJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@override\u003c/span\u003e\n  String \u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u0026#39;$permissionName\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e@JsonSerializable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuth0PermissionsSource\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eAuth0PermissionsSource\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esourceId\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esourceName\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esourceType\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;source_id\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String sourceId\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;source_name\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String sourceName\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;source_type\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String sourceType\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efactory\u003c/span\u003e Auth0PermissionsSource\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efromJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eMap\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e json\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      _$\u003cspan\u003eAuth0PermissionsSourceFromJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ejson\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  Map\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003etoJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e _$\u003cspan\u003eAuth0PermissionsSourceToJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@override\u003c/span\u003e\n  String \u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u0026#39;\n      sourceId: $sourceId,\n      sourceName: $sourceName,\n      sourceType: $sourceType,\n      \u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhat you want to achieve here is to serialize and deserialize the roles and permissions for each model.\u003c/p\u003e\u003cp\u003e🛠 The next step is to update the \u003ccode\u003eAuth0IdToken\u003c/code\u003e model:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/models/auth0_id_token.dart\u003c/span\u003e\n\n\u003cspan\u003e@JsonSerializable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuth0IdToken\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eAuth0IdToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eroles\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003epermissions\u003cspan\u003e,\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;https://users.mjcoffee.app/roles\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e List\u003cspan\u003e\u0026lt;\u003c/span\u003eAuth0Role\u003cspan\u003e\u0026gt;\u003c/span\u003e roles\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;https://users.mjcoffee.app/permissions\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e List\u003cspan\u003e\u0026lt;\u003c/span\u003eAuth0Permission\u003cspan\u003e\u0026gt;\u003c/span\u003e permissions\u003cspan\u003e;\u003c/span\u003e\n  \n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Do the same for the \u003ccode\u003eAuth0User\u003c/code\u003e model:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/models/auth0_user.dart\u003c/span\u003e\n\n\u003cspan\u003e@JsonSerializable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuth0User\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eAuth0User\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003epermissions\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eroles\u003cspan\u003e,\u003c/span\u003e\n    \n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;https://users.mjcoffee.app/roles\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e List\u003cspan\u003e\u0026lt;\u003c/span\u003eAuth0Role\u003cspan\u003e\u0026gt;\u003c/span\u003e roles\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;https://users.mjcoffee.app/permissions\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e List\u003cspan\u003e\u0026lt;\u003c/span\u003eAuth0Permission\u003cspan\u003e\u0026gt;\u003c/span\u003e permissions\u003cspan\u003e;\u003c/span\u003e\n  \n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Finally, run the \u003ccode\u003ebuild_runner\u003c/code\u003e command to ensure that the models are generated properly:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eflutter pub run build_runner build --delete-conflicting-outputs\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can now restart the \u003cem\u003eMJ Coffee\u003c/em\u003e app, and everything should work as expected.\u003c/p\u003e\u003ch2 id=\"Role-Based-Screens-in-Flutter\"\u003eRole-Based Screens in Flutter\u003c/h2\u003e\u003cp\u003eIt’s finally time to have a loading screen based on the user\u0026#39;s role. If you remember, we wanted to add Support and Community screens for customers and employees, respectively. You created both screens earlier.\u003c/p\u003e\u003cp\u003eIt would be easier to define getter methods in \u003ccode\u003eAuth0User\u003c/code\u003e to determine whether a user has a particular role or permission.\u003c/p\u003e\u003cp\u003e🛠 Add code to the \u003ccode\u003eAuth0User\u003c/code\u003e class as shown below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/models/auth0_user.dart\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuth0User\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n  bool \u003cspan\u003eget\u003c/span\u003e hasImage \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e picture\u003cspan\u003e.\u003c/span\u003eisNotEmpty\u003cspan\u003e;\u003c/span\u003e\n  bool \u003cspan\u003ecan\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eString permission\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e permissions\n      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewhere\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003e(\u003c/span\u003ep\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e p\u003cspan\u003e.\u003c/span\u003epermissionName \u003cspan\u003e==\u003c/span\u003e permission\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003e.\u003c/span\u003eisNotEmpty\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003eget\u003c/span\u003e isAdmin \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e roles\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewhere\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003erole\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e role\u003cspan\u003e.\u003c/span\u003ename \u003cspan\u003e==\u003c/span\u003e Role\u003cspan\u003e.\u003c/span\u003eAdmin\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eisNotEmpty\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eget\u003c/span\u003e isEmployee \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      roles\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewhere\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003erole\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e role\u003cspan\u003e.\u003c/span\u003ename \u003cspan\u003e==\u003c/span\u003e Role\u003cspan\u003e.\u003c/span\u003eEmployee\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eisNotEmpty\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eget\u003c/span\u003e isCustomer \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      roles\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewhere\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003erole\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e role\u003cspan\u003e.\u003c/span\u003ename \u003cspan\u003e==\u003c/span\u003e Role\u003cspan\u003e.\u003c/span\u003eCustomer\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eisNotEmpty\u003cspan\u003e;\u003c/span\u003e\n      \n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThese getters are pretty self-explanatory.\u003c/p\u003e\u003cp\u003e🛠 Next, open \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003escreens\u003cspan\u003e/\u003c/span\u003emenu\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e and locate the \u003ccode\u003etabs\u003c/code\u003e list in the \u003ccode\u003e_MenuScreenState\u003c/code\u003e class:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/menu.dart\u003c/span\u003e\n\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n  \n  \u003cspan\u003efinal\u003c/span\u003e List\u003cspan\u003e\u0026lt;\u003c/span\u003eWidget\u003cspan\u003e\u0026gt;\u003c/span\u003e tabs \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n      \u003cspan\u003eMenuList\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecoffees\u003cspan\u003e:\u003c/span\u003e coffees\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eAuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eprofile\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eisCustomer\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eSupportChatScreen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003eelse\u003c/span\u003e\n        \u003cspan\u003eCommunityScreen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003eProfileScreen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 In the same file, find \u003ccode\u003eBottomNavigationBar\u003c/code\u003e and add \u003ccode\u003eBottomNavigationBarItem\u003c/code\u003e to the second position in the list:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/menu.dart\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\nBottomNavigationBar \u003cspan\u003e_bottomNavigationBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eAuth0User\u003cspan\u003e?\u003c/span\u003e user\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eBottomNavigationBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      \n      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n      \n      items\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003eBottomNavigationBarItem\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n      \n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n      \n        \u003cspan\u003eBottomNavigationBarItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          icon\u003cspan\u003e:\u003c/span\u003e AuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eprofile\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eisCustomer\n              \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003eIcon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eIcons\u003cspan\u003e.\u003c/span\u003esupport_agent\u003cspan\u003e)\u003c/span\u003e\n              \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIcon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eIcons\u003cspan\u003e.\u003c/span\u003egroup\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          label\u003cspan\u003e:\u003c/span\u003e AuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eprofile\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eisCustomer\n              \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e\u0026#34;Support\u0026#34;\u003c/span\u003e\n              \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Community\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \n       \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n       \n      \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \n     \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n     \n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n  \n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 To make the UI look better, you can add the user\u0026#39;s avatar to the \u003ccode\u003eappBar\u003c/code\u003e so that the complete implementation is as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/menu.dart\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eMenuScreen\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eStatefulWidget\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003estatic\u003c/span\u003e String routeName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;menuScreen\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003estatic\u003c/span\u003e Route\u003cspan\u003e\u0026lt;\u003c/span\u003eMenuScreen\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e MaterialPageRoute\u003cspan\u003e\u0026lt;\u003c/span\u003eMenuScreen\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      settings\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eRouteSettings\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e routeName\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      builder\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eBuildContext context\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eMenuScreen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003e@override\u003c/span\u003e\n  _MenuScreenState \u003cspan\u003ecreateState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e_MenuScreenState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003e_MenuScreenState\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eState\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eMenuScreen\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  int _selectedIndex \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  Auth0User\u003cspan\u003e?\u003c/span\u003e profile \u003cspan\u003e=\u003c/span\u003e AuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eprofile\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@override\u003c/span\u003e\n  \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003einitState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einitState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003efinal\u003c/span\u003e List\u003cspan\u003e\u0026lt;\u003c/span\u003eWidget\u003cspan\u003e\u0026gt;\u003c/span\u003e tabs \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n    \u003cspan\u003eMenuList\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecoffees\u003cspan\u003e:\u003c/span\u003e coffees\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eAuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eprofile\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eisCustomer\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003eSupportChatScreen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eelse\u003c/span\u003e\n      \u003cspan\u003eCommunityScreen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003eProfileScreen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003e_onItemTapped\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eint index\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      _selectedIndex \u003cspan\u003e=\u003c/span\u003e index\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003e@override\u003c/span\u003e\n  Widget \u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eBuildContext context\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eScaffold\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      backgroundColor\u003cspan\u003e:\u003c/span\u003e Colors\u003cspan\u003e.\u003c/span\u003ewhite\u003cspan\u003e,\u003c/span\u003e\n      appBar\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAppBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        automaticallyImplyLeading\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        centerTitle\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        title\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Welcome ${profile?.name}\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        actions\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n          \u003cspan\u003e_avatar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eprofile\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      body\u003cspan\u003e:\u003c/span\u003e tabs\u003cspan\u003e[\u003c/span\u003e_selectedIndex\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      bottomNavigationBar\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e_bottomNavigationBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eprofile\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  BottomNavigationBar \u003cspan\u003e_bottomNavigationBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eAuth0User\u003cspan\u003e?\u003c/span\u003e user\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eBottomNavigationBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      backgroundColor\u003cspan\u003e:\u003c/span\u003e Colors\u003cspan\u003e.\u003c/span\u003ewhite\u003cspan\u003e,\u003c/span\u003e\n      type\u003cspan\u003e:\u003c/span\u003e BottomNavigationBarType\u003cspan\u003e.\u003c/span\u003efixed\u003cspan\u003e,\u003c/span\u003e\n      unselectedItemColor\u003cspan\u003e:\u003c/span\u003e Colors\u003cspan\u003e.\u003c/span\u003ebrown\u003cspan\u003e.\u003c/span\u003eshade300\u003cspan\u003e,\u003c/span\u003e\n      items\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003eBottomNavigationBarItem\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n        \u003cspan\u003eBottomNavigationBarItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          icon\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIcon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eIcons\u003cspan\u003e.\u003c/span\u003elist_alt\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          label\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Menu\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003eBottomNavigationBarItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          icon\u003cspan\u003e:\u003c/span\u003e\n              user\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eisCustomer \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003eIcon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eIcons\u003cspan\u003e.\u003c/span\u003esupport_agent\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIcon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eIcons\u003cspan\u003e.\u003c/span\u003egroup\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          label\u003cspan\u003e:\u003c/span\u003e user\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eisCustomer \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e\u0026#34;Support\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Community\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003eBottomNavigationBarItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          icon\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIcon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eIcons\u003cspan\u003e.\u003c/span\u003eperson\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          label\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Profile\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      currentIndex\u003cspan\u003e:\u003c/span\u003e _selectedIndex\u003cspan\u003e,\u003c/span\u003e\n      selectedItemColor\u003cspan\u003e:\u003c/span\u003e Colors\u003cspan\u003e.\u003c/span\u003ebrown\u003cspan\u003e.\u003c/span\u003eshade800\u003cspan\u003e,\u003c/span\u003e\n      onTap\u003cspan\u003e:\u003c/span\u003e _onItemTapped\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  Padding \u003cspan\u003e_avatar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eAuth0User\u003cspan\u003e?\u003c/span\u003e profile\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003ePadding\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      padding\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003econst\u003c/span\u003e EdgeInsets\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e8.0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eFittedBox\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        fit\u003cspan\u003e:\u003c/span\u003e BoxFit\u003cspan\u003e.\u003c/span\u003ecover\u003cspan\u003e,\u003c/span\u003e\n        child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eClipRRect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          clipBehavior\u003cspan\u003e:\u003c/span\u003e Clip\u003cspan\u003e.\u003c/span\u003eantiAlias\u003cspan\u003e,\u003c/span\u003e\n          borderRadius\u003cspan\u003e:\u003c/span\u003e BorderRadius\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eRadius\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecircular\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e600\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eContainer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e_avatarPhoto\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eprofile\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  Widget \u003cspan\u003e_avatarPhoto\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eAuth0User\u003cspan\u003e?\u003c/span\u003e profile\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e profile \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e profile\u003cspan\u003e.\u003c/span\u003ehasImage\n        \u003cspan\u003e?\u003c/span\u003e Image\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enetwork\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            profile\u003cspan\u003e.\u003c/span\u003epicture\u003cspan\u003e,\u003c/span\u003e\n            width\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e20\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            height\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e20\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eContainer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            width\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e20\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            height\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e20\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            color\u003cspan\u003e:\u003c/span\u003e darkBrown\u003cspan\u003e,\u003c/span\u003e\n            child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCenter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n              child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;${profile?.name[0].toUpperCase()}\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can create a new user and assign it the “employee” role so that you can also test the Employee role screen.\u003c/p\u003e\u003cp\u003eWell done! Restart your app, log out, and log in again, and you’ll see the appropriate screen for your role:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4viiFWih2Zdu8FzWeIQYmS/489c1e5a9dda80abbf13e97a3541b945/role_based_screens.png\" alt=\" role base screen flutter \"/\u003e\u003c/p\u003e\u003cp\u003eBut that\u0026#39;s not all! You still need an employee ID to create a private channel between the currently signed-in customer and an employee.\u003c/p\u003e\u003cp\u003eYou can define an API that can return available agents to create a channel. However, another strategy that would work for the \u003cem\u003eMJ Coffee\u003c/em\u003e app is to retrieve all employees\u0026#39; user IDs via ID tokens’ custom claims and randomly pick one of them.\u003c/p\u003e\u003cp\u003eYou can create other custom actions, similar to the previous steps for permissions and roles. I won’t walk you through all steps since you’ve already done it twice.\u003c/p\u003e\u003cp\u003e🛠 Name this action \u003ccode\u003eRetrieve Employees User IDs\u003c/code\u003e and define its logic as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Auth0 Action\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e ManagementClient \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003erequire\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;auth0\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eManagementClient\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e AuthenticationClient \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003erequire\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;auth0\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eAuthenticationClient\u003cspan\u003e;\u003c/span\u003e\nexports\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonExecutePostLogin\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eevent\u003cspan\u003e,\u003c/span\u003e api\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eDOMAIN\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;mhadaily.eu.auth0.com\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e auth0 \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eAuthenticationClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    domain\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDOMAIN\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    clientId\u003cspan\u003e:\u003c/span\u003e event\u003cspan\u003e.\u003c/span\u003esecrets\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eM2M_CLIENT_ID\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    clientSecret\u003cspan\u003e:\u003c/span\u003e event\u003cspan\u003e.\u003c/span\u003esecrets\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eM2M_CLIENT_SECRET\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e response \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e auth0\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclientCredentialsGrant\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    audience\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003ehttps://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eDOMAIN\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/api/v2/\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    scope\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;read:users read:roles\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eAPI_TOKEN\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003eaccess_token\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e management \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eManagementClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    domain\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDOMAIN\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    token\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAPI_TOKEN\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e params \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e id\u003cspan\u003e:\u003c/span\u003e event\u003cspan\u003e.\u003c/span\u003esecrets\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eEMPLOYEE_ROLE_ID\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e per_page\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e10\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e page\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e employees \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e management\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetUsersInRole\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eparams\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e employee_ids \u003cspan\u003e=\u003c/span\u003e employees\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eemployee\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e employee\u003cspan\u003e.\u003c/span\u003euser_id\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e namespace \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;https://employees.mjcoffee.app\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eevent\u003cspan\u003e.\u003c/span\u003eauthorization\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    api\u003cspan\u003e.\u003c/span\u003eidToken\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomClaim\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003enamespace\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/id\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e employee_ids\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAgain, you will use \u003ccode\u003eManagementClient\u003c/code\u003e to get the first ten users based on their role by calling \u003ccode\u003e\u003cspan\u003egetUsersInRole\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and passing the role ID that \u003ccode\u003e\u003cspan\u003eEMPLOYEE_ROLE_ID\u003c/span\u003e\u003c/code\u003e identifies from secrets, then define the namespace and set a custom claim on \u003ccode\u003eidToken\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e🛠 Lastly, deploy this action and add it to the \u003cstrong\u003eLogin\u003c/strong\u003e flow right after the GetStream User Token action and apply:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3T7JSFv4ogGggqg8ig34hh/d12e912be13cf17ce9f74f0ac73f9ca7/role-actions.png\" alt=\" role in login flow \"/\u003e\u003c/p\u003e\u003cp\u003eLocate the \u003ccode\u003eAuth0IdToken\u003c/code\u003e and \u003ccode\u003eAuth0User\u003c/code\u003e classes in the Flutter app and add a new property, \u003ccode\u003eavailableAgents\u003c/code\u003e, to both of them.\u003c/p\u003e\u003cp\u003e🛠 In \u003ccode\u003eAuth0IdToken\u003c/code\u003e you should have:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/models/auth0_id_token.dart\u003c/span\u003e\n\n\u003cspan\u003e@JsonSerializable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuth0IdToken\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eAuth0IdToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n  \n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eavailableAgents\u003cspan\u003e,\u003c/span\u003e\n    \n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n    \n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;https://employees.mjcoffee.app/id\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e defaultValue\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e List\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e\u0026gt;\u003c/span\u003e availableAgents\u003cspan\u003e;\u003c/span\u003e\n  \n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 ...and in \u003ccode\u003eAuth0User\u003c/code\u003e you can do the same:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/models/auth0_user.dart\u003c/span\u003e\n\n\u003cspan\u003e@JsonSerializable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuth0User\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eAuth0User\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n  \n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eavailableAgents\u003cspan\u003e,\u003c/span\u003e\n  \n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n    \n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;https://employees.mjcoffee.app/id\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e defaultValue\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e List\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e\u0026gt;\u003c/span\u003e availableAgents\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Don’t forget to run this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eflutter pub run build_runner build --delete-conflicting-outputs\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 It\u0026#39;s perfectly fine if you decide to make this change only to the user class. Locate \u003ccode\u003ecreateSupportChat\u003c/code\u003e in \u003ccode\u003eChatService\u003c/code\u003e class. You left the employee ID blank, so now you can refactor this to pick an employee ID randomly:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/chat_service.dart\u003c/span\u003e\n\n String\u003cspan\u003e?\u003c/span\u003e _currentEmployeeId\u003cspan\u003e;\u003c/span\u003e\n\nFuture\u003cspan\u003e\u0026lt;\u003c/span\u003eChannel\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003ecreateSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eList\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e\u0026gt;\u003c/span\u003e availableAgents\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// skip if the chat is still open with current employeeId\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e_currentEmployeeId \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003efinal\u003c/span\u003e _random \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eRandom\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003efinal\u003c/span\u003e randomNumber \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e _random\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enextInt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eavailableAgents\u003cspan\u003e.\u003c/span\u003elength \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003efinal\u003c/span\u003e String employeeId \u003cspan\u003e=\u003c/span\u003e availableAgents\u003cspan\u003e[\u003c/span\u003erandomNumber\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esplit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;|\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejoin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      _currentEmployeeId \u003cspan\u003e=\u003c/span\u003e employeeId\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003efinal\u003c/span\u003e channel \u003cspan\u003e=\u003c/span\u003e client\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;support\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      id\u003cspan\u003e:\u003c/span\u003e _currentChannelId\u003cspan\u003e,\u003c/span\u003e\n      extraData\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;MJCoffee Support\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#39;members\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n          _currentEmployeeId\u003cspan\u003e,\u003c/span\u003e\n          client\u003cspan\u003e.\u003c/span\u003estate\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eawait\u003c/span\u003e channel\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewatch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    _currentChannelId \u003cspan\u003e=\u003c/span\u003e channel\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e channel\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0026#39;s examine this code. First, it passes a list of employee IDs to \u003ccode\u003ecreateSupportChat\u003c/code\u003e. Then, it makes sure it is storing the current employee ID that has an open support chat in order to avoid recreating a new channel.\u003c/p\u003e\u003cp\u003eFinally, it randomly picks an ID from the list and creates a channel with the current customer.\u003c/p\u003e\u003cp\u003eThis solution might not be the best possible one. However, it would work for our small coffee store. Ideally, you would define an API that can return an available employee to a customer on-demand. I may write another article to show you how you can better with other solutions.\u003c/p\u003e\u003cp\u003e🛠 Lastly, locate the \u003ccode\u003e\u003cspan\u003ecreateChannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method in the \u003ccode\u003e_SupportChatScreenState\u003c/code\u003e class (it’s in the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003escreens\u003cspan\u003e/\u003c/span\u003esupport\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file) and refactor it to pass the \u003ccode\u003eavailableAgents\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/support.dart\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003ecreateChannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eprofile \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003efinal\u003c/span\u003e _channel \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e ChatService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        profile\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eavailableAgents\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        channel \u003cspan\u003e=\u003c/span\u003e _channel\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n  \n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003eIt\u0026#39;s very important that you have registered all of your employees’ IDs in Stream chat. Typically, users can log in as employees should log in and everything will work. However, if you still have not registered all of your employees, you might get an error with the message \u003ccode\u003eThe following users are specified \u003cspan\u003ein\u003c/span\u003e channel\u003cspan\u003e.\u003c/span\u003emembers but don\u0026#39;t exist\u003c/code\u003e. This usually happens if you have created any users before the Login flow and Custom token generation action have been created.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eNicely done! You can restart your app, and this time you can see the support channel screen.\u003c/p\u003e\u003ch2 id=\"Permission-Based-Functionalities\"\u003ePermission-Based Functionalities\u003c/h2\u003e\u003cp\u003eAfter applying roles to have specific kinds of access in the app, you can go one step deeper and use functionalities based on the user\u0026#39;s permission inherited from the role.\u003c/p\u003e\u003cp\u003eYou have already defined the \u003ccode\u003ecan\u003c/code\u003e method on \u003ccode\u003eAuth0User\u003c/code\u003e in the previous section. The purpose of this method is to check if the user has given permission. Let\u0026#39;s use it.\u003c/p\u003e\u003cp\u003e🛠 Locate \u003ccode\u003eMessageInput\u003c/code\u003e in the \u003ccode\u003esupport\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file, and you can replace it with\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/support.dart\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003eMessageInput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n  disableAttachments\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003eprofile\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecan\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eUserPermissions\u003cspan\u003e.\u003c/span\u003eupload\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  sendButtonLocation\u003cspan\u003e:\u003c/span\u003e SendButtonLocation\u003cspan\u003e.\u003c/span\u003einside\u003cspan\u003e,\u003c/span\u003e\n  actionsLocation\u003cspan\u003e:\u003c/span\u003e ActionsLocation\u003cspan\u003e.\u003c/span\u003eleftInside\u003cspan\u003e,\u003c/span\u003e\n  showCommandsButton\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003eprofile\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eisCustomer\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the implementation above, \u003ccode\u003edisableAttachments\u003c/code\u003e is enabled based on the user\u0026#39;s permission, or \u003ccode\u003eshowCommandsButton\u003c/code\u003e is active only for the Customer role.\u003c/p\u003e\u003cp\u003eAnother approach you can take is to limit the delete message functionality and apply \u003ccode\u003eUserPermissions\u003cspan\u003e.\u003c/span\u003edelete\u003c/code\u003e to remove the applicable UI.\u003c/p\u003e\u003cp\u003eMoreover, you may want to apply for these permissions on your back-end or API to perform. I will leave this part as homework.\u003c/p\u003e\u003ch2 id=\"Closing-a-Support-Chat-Channel\"\u003eClosing a Support Chat Channel\u003c/h2\u003e\u003cp\u003eFor the last section of this tutorial, I\u0026#39;d like to show you how to close a support channel chat.\u003c/p\u003e\u003cp\u003e🛠 First, you need to create a method for the \u003ccode\u003eChatService\u003c/code\u003e class to send the command to close a channel.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/chat_service.dart\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\nFuture\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003evoid\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003earchiveSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n   \u003cspan\u003eawait\u003c/span\u003e client\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehideChannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      _currentChannelId\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;support\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      clearHistory\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  client\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;support\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e id\u003cspan\u003e:\u003c/span\u003e _currentChannelId\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edispose\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  _currentChannelId \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  _currentEmployeeId \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn this implementation, you can hide a chat with an existing ID and the type \u003ccode\u003esupport\u003c/code\u003e and finally, set both \u003ccode\u003e_currentChannelId\u003c/code\u003e and \u003ccode\u003e_currentEmployeeId\u003c/code\u003e to \u003ccode\u003e\u003cspan\u003enull\u003c/span\u003e\u003c/code\u003e so that next time users come to a support screen, they’ll see a new channel created, and it will connect them to another employee.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eHiding a channel makes it invisible to the query channels. It can be retrieved if the user adds a new message to it or calls the \u003ccode\u003e\u003cspan\u003eshow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to remove the hidden status.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eHowever, there are other possibilities. For example, you can \u003ccode\u003earchive\u003c/code\u003e or \u003ccode\u003e\u003cspan\u003edelete\u003c/span\u003e\u003c/code\u003e a channel. At the moment, \u003ccode\u003earchive\u003c/code\u003e is not exposed to the Stream Dart SDK. Therefore, for now, you can hide a channel.\u003c/p\u003e\u003cp\u003e🛠 Next, locate \u003ccode\u003eMessageInput\u003c/code\u003e in the \u003ccode\u003esupport\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file, and add \u003ccode\u003eactions\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/support.dart\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003eMessageInput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n  actions\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e_closeChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  disableAttachments\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003eprofile\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecan\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eUserPermissions\u003cspan\u003e.\u003c/span\u003eupload\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  sendButtonLocation\u003cspan\u003e:\u003c/span\u003e SendButtonLocation\u003cspan\u003e.\u003c/span\u003einside\u003cspan\u003e,\u003c/span\u003e\n  actionsLocation\u003cspan\u003e:\u003c/span\u003e ActionsLocation\u003cspan\u003e.\u003c/span\u003eleftInside\u003cspan\u003e,\u003c/span\u003e\n  showCommandsButton\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003eprofile\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eisCustomer\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n  \u003cspan\u003e/// method in the class\u003c/span\u003e\n  CommonButton \u003cspan\u003e_closeChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eCommonButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      onPressed\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        ChatService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003earchiveSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        CoffeeRouter\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eMenuScreen\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIcon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        Icons\u003cspan\u003e.\u003c/span\u003eclose\u003cspan\u003e,\u003c/span\u003e\n        color\u003cspan\u003e:\u003c/span\u003e Colors\u003cspan\u003e.\u003c/span\u003ewhite\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003eactions\u003c/code\u003e parameter adds a list of additional actions to the \u003ccode\u003eGetStream\u003c/code\u003e chat input UI. You can call the \u003ccode\u003earchiveSupportChat\u003c/code\u003e method \u003ccode\u003e\u003cspan\u003eOnPressed\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and hide the chat, and redirect the user to the menu screen to show a proper message that the discussion is closed. They can reopen by returning to the support screen.\u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eAuthentication and authorization are complex but necessary features of most applications, and they can be tricky to implement and manage. Auth0 provides a reliable service that takes on these tasks. You can this service in Flutter applications without having to set up a server or maintain infrastructure. You can also make use of serverless tools such as Auth0 Actions, which you can use to add sophistication to your authentication and authorization process.\u003c/p\u003e\u003cp\u003eYou have seen how you can speed up your development by adding a support chat using \u003ccode\u003eGetStreamChat\u003c/code\u003e to a Flutter application. You’ve also seen how you can limit the functionality available to users by leveraging roles and permissions received from Auth0 via tokens.\u003c/p\u003e\u003cp\u003eCongratulations! You’ve come a long way over this tutorial’s four parts, and I hope that you have learned a lot. This is just the beginning — you can still implement and configure a lot, using both Stream and Auth0, and take your apps to the next level.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.",
      "date_published": "2021-10-04T17:13:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-3-adding-real-time-chat-to-the-app/",
      "title": "Flutter Authentication and Authorization with Auth0, Part 3: Adding Real-Time Chat to the App",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIn the previous sections of this tutorial, you added authentication to \u003cem\u003eMJ Coffee\u003c/em\u003e, a Flutter app, and then enhanced that authentication by adding refresh token rotation and social logins. You also looked at customizing the login page with your own branding, and user management in Auth0.\u003c/p\u003e\u003cp\u003eIn this section, we’ll focus on authorization. Remember:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eAuthentication\u003c/strong\u003e concerns itself with answering the question “Who are you?”\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAuthorization\u003c/strong\u003e — this section’s topic — is all about answering the question “What are you allowed to do?”\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWe’ll cover authorization by adding real-time chat to \u003cem\u003eMJ Coffee\u003c/em\u003e so that we can later see how the chat can be integrated with Auth0, limit its functionalities and UIs based on roles and permissions.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eLook for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Add-Real-Time-Chat-to-the-Flutter-Application\"\u003eAdd Real-Time Chat to the Flutter Application\u003c/h2\u003e\u003cp\u003eHaving a real-time chat service in the \u003cem\u003eMJ Coffee\u003c/em\u003e app can significantly improve how fast users can communicate with our customer service or employees. Having looked around, I found \u003ca href=\"https://getstream.io\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eStream\u003c/a\u003e, an exciting service with a solid Flutter SDK that you can integrate and customize quickly and easily.\u003c/p\u003e\u003ch2 id=\"Install-Dependencies\"\u003eInstall Dependencies\u003c/h2\u003e\u003cp\u003eStream comes with several SDKs that can be used in Dart or Flutter applications. However, one of them comes with all features, a beautiful theme, and enough API so that you can customize it as much as you wish. We’ll use that one.\u003c/p\u003e\u003cp\u003e🛠 Open the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003epubspec\u003cspan\u003e.\u003c/span\u003eyaml\u003c/code\u003e file and add \u003ccode\u003estream_chat_flutter\u003c/code\u003e to your dependencies. The \u003ccode\u003edependencies\u003c/code\u003e section of the file should end up looking like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e// /pubspec.yaml\n\n\u003cspan\u003edependencies\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003eflutter\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003esdk\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e flutter\n  \u003cspan\u003efont_awesome_flutter\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^9.1.0\n  \u003cspan\u003eflutter_svg\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^0.22.0\n  \u003cspan\u003egoogle_fonts\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^2.1.0\n  \u003cspan\u003ejson_annotation\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^4.0.1\n  \u003cspan\u003ehttp\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^0.13.3\n  \u003cspan\u003eflutter_appauth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^1.1.0\n  \u003cspan\u003eflutter_secure_storage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^4.2.0\n  \u003cspan\u003estream_chat_flutter\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^2.0.0\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI recommend using a version later than 2.0, which is fully compatible with Flutter 2 and its support for \u003ca href=\"https://flutter.dev/docs/null-safety\" target=\"_blank\" rel=\"noreferrer noopener\"\u003enull safety\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIf you’re only targeting Android, you can ignore the next section.\u003c/p\u003e\u003ch4 id=\"If-you-re-targeting-iOS\"\u003eIf you’re targeting iOS\u003c/h4\u003e\u003cp\u003e🛠 If you’re targeting iOS, you’ll need to take a few extra steps:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe Stream library uses the \u003ca href=\"https://github.com/miguelpruivo/flutter_file_picker\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cem\u003eflutter file picker\u003c/em\u003e plugin\u003c/a\u003e to present the user with an interface to select files. You’ll need to follow the steps in \u003ca href=\"https://github.com/miguelpruivo/flutter_file_picker/wiki/Setup#ios\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe \u003cem\u003eiOS\u003c/em\u003e section of this page\u003c/a\u003e to make use of it.\u003c/li\u003e\u003cli\u003eThe library also uses the \u003cem\u003evideo_player\u003c/em\u003e plugin to display inline videos. Follow \u003ca href=\"https://pub.dev/packages/video_player#installation\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis guide\u003c/a\u003e to install and enable it.\u003c/li\u003e\u003cli\u003eFinally, the library uses the \u003cem\u003eimage_picker\u003c/em\u003e plugin to provide a user interface for selecting images. Follow [these instructions] to use this plugin.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 Don’t forget to actually install the dependencies! Enter \u003ccode\u003eflutter pub get\u003c/code\u003e in the terminal or PowerShell, or \u003ccode\u003ePub get\u003c/code\u003e in your IDE.\u003c/p\u003e\u003ch2 id=\"Create-a-Stream-Account-and-App\"\u003eCreate a Stream Account and App\u003c/h2\u003e\u003cp\u003eBefore you can integrate Stream with your app, you need a Stream account, which you’ll use to register the app.\u003c/p\u003e\u003cp\u003e🛠 \u003ca href=\"https://getstream.io/accounts/signup/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCreate your account if you don’t already have one,\u003c/a\u003e then log in and go to the Stream dashboard:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5g116jkNGeqaZvFk5nesaZ/e01470d789d92e658ca0d4ac16605d5e/stream_dashboard.png\" alt=\"Stream dashboard.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Tap on the \u003cstrong\u003eCreate App\u003c/strong\u003e button, then follow these steps:\u003c/p\u003e\u003cul\u003e\u003cli\u003eEnter a name for your app in the \u003cstrong\u003eApp Name\u003c/strong\u003e field. For this example, we’ll use \u003ccode\u003eMJCoffee\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eIn the \u003cstrong\u003eFeeds Server Location\u003c/strong\u003e menu, select the location closest to you.\u003c/li\u003e\u003cli\u003e\u003cem\u003eDon’t\u003c/em\u003e select anything from the \u003cstrong\u003eClone Existing App\u003c/strong\u003e menu — just leave it set to \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eSelect your environment. Usually, it\u0026#39;s a good idea to create separate apps for production and development. In this tutorial, we’ll focus on production, so select \u003cstrong\u003eProduction\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003eFinally, click the \u003cstrong\u003eCreate App\u003c/strong\u003e button.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou should see this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3Zh9QmY69R9Bwo4p3PZawt/f8c55e169d20282c17e3592216344fd6/stream_app.png\" alt=\"A newly-created app in Stream.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Once your app has been created, make a note of your Stream key. \u003c/p\u003e\u003cp\u003eNotice that you will need a secret key to sign the user ID and get a production user token to connect users. You’ll learn how to do that with Auth0 Actions.\u003c/p\u003e\u003cp\u003eI recommend passing sensitive data and keys with \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003edart\u003cspan\u003e-\u003c/span\u003edefine\u003c/code\u003e via the command line or adding to your editor or IDE run command rather than storing it in your app’s code.\u003c/p\u003e\u003cp\u003eYou took this approach when implementing basic authentication for the app. You passed two sensitive values — your Auth0 domain and Auth0 client ID — as command-line arguments when launching the app. You’ll simply add the Stream key as a third argument, like so:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eflutter run -d all --dart-define\u003cspan\u003e=\u003c/span\u003eAUTH0_DOMAIN\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003eYOUR DOMAIN\u003cspan\u003e]\u003c/span\u003e --dart-define\u003cspan\u003e=\u003c/span\u003eAUTH0_CLIENT_ID\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003eYOUR CLIENT ID\u003cspan\u003e]\u003c/span\u003e --dart-define\u003cspan\u003e=\u003c/span\u003eSTREAM_API_KEY\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003eYOUR STREAM KEY\u003cspan\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn order for your application to use the Stream key argument, you’ll need to define a new constant.\u003c/p\u003e\u003cp\u003e🛠 Add the following to your \u003ccode\u003econstants\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file, which is located in the in the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003ehelpers\u003cspan\u003e/\u003c/span\u003e\u003c/code\u003e directory:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/helpers/constants.dart\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e STREAM_API_KEY \u003cspan\u003e=\u003c/span\u003e String\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efromEnvironment\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;STREAM_API_KEY\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Integrate-Chat-Into-the-Flutter-Application\"\u003eIntegrate Chat Into the Flutter Application\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s start by creating a new \u003ccode\u003eStreamChatClient\u003c/code\u003e in the \u003ccode\u003eChatService\u003c/code\u003e singleton class. In doing this, there are three essential things that you need to take into account:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eInitializing the Dart API client with your API Key\u003c/li\u003e\u003cli\u003eSetting the current user\u003c/li\u003e\u003cli\u003ePassing the client to the top-level StreamChat widget\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e🛠 Open \u003ccode\u003echat_service\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e (located in the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003eservices\u003cspan\u003e/\u003c/span\u003e\u003c/code\u003e directory) and initialize \u003ccode\u003eStreamChatClient\u003c/code\u003e by updating the \u003ccode\u003eChatService\u003c/code\u003e class so that it appears as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/chat_service.dart\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eChatService\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e ChatService instance \u003cspan\u003e=\u003c/span\u003e ChatService\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e_internal\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efactory\u003c/span\u003e \u003cspan\u003eChatService\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e instance\u003cspan\u003e;\u003c/span\u003e\n  ChatService\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e_internal\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efinal\u003c/span\u003e StreamChatClient client \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eStreamChatClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    STREAM_API_KEY\u003cspan\u003e,\u003c/span\u003e\n    logLevel\u003cspan\u003e:\u003c/span\u003e isInDebugMode \u003cspan\u003e?\u003c/span\u003e Level\u003cspan\u003e.\u003c/span\u003eINFO \u003cspan\u003e:\u003c/span\u003e Level\u003cspan\u003e.\u003c/span\u003eOFF\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe only required positional parameter for \u003ccode\u003e\u003cspan\u003eStreamChatClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e is \u003ccode\u003e\u003cspan\u003eSTREAM_API_KEY\u003c/span\u003e\u003c/code\u003e, but you have more options to configure your client. For instance, it might be pretty helpful to see all the logs during debugging. That\u0026#39;s why we used the optional \u003ccode\u003elogLevel\u003c/code\u003e parameter to set the amount of logging that will take place, based on whether or not the app is in debug mode.\u003c/p\u003e\u003cp\u003eNow that you‘ve created the client, you need to ensure that your current user is connected appropriately.\u003c/p\u003e\u003cp\u003e🛠 Add the \u003ccode\u003e\u003cspan\u003econnectUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e to the \u003ccode\u003eChatService\u003c/code\u003e class in  \u003ccode\u003echat_service\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/chat_service.dart\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eChatService\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n  Future\u003cspan\u003e\u0026lt;\u003c/span\u003eAuth0User\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003econnectUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eAuth0User\u003cspan\u003e?\u003c/span\u003e user\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003euser \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ethrow\u003c/span\u003e \u003cspan\u003eException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;User was not received\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003eawait\u003c/span\u003e client\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econnectUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      \u003cspan\u003eUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        id\u003cspan\u003e:\u003c/span\u003e user\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e,\u003c/span\u003e\n        extraData\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n          \u003cspan\u003e\u0026#39;image\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e user\u003cspan\u003e.\u003c/span\u003epicture\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e user\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e// To be replaced with PRODUCTION TOKEN for user\u003c/span\u003e\n      client\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edevToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003erawValue\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e user\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n  \n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n  \n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis new method of the \u003ccode\u003eChatService\u003c/code\u003e class, \u003ccode\u003e\u003cspan\u003econnectUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, will handle the logic for connecting the current user. It accepts an \u003ccode\u003eAuth0User\u003c/code\u003e object. If it doesn‘t receive one, it means the authentication has probably failed and that the user should not be connected to the chat.\u003c/p\u003e\u003cp\u003e🛠 Open \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003escreens\u003cspan\u003e/\u003c/span\u003ehome\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e, look for the \u003ccode\u003e_HomeScreenState\u003c/code\u003e class, and within it, the \u003ccode\u003e\u003cspan\u003esetSuccessAuthState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method. Update \u003ccode\u003e\u003cspan\u003esetSuccessAuthState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/home.dart\u003c/span\u003e\n\n\u003cspan\u003esetSuccessAuthState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    isProgressing \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    isLoggedIn \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    name \u003cspan\u003e=\u003c/span\u003e AuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eidToken\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  ChatService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econnectUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eAuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eprofile\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  CoffeeRouter\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eMenuScreen\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou need to pass two required positional parameters:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe \u003ccode\u003eUser\u003c/code\u003e object with a defined user ID, and\u003c/li\u003e\u003cli\u003ethe user token, a signed and encrypted hash string.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eTypically, the user token should be generated on a back-end server to store the aforementioned secret key and to sign and get the token. You\u0026#39;ll soon learn how Auth0 can handle that as your backend.\u003c/p\u003e\u003cp\u003eTo continue, you need to:\u003c/p\u003e\u003cul\u003e\u003cli\u003eGet a development token,\u003c/li\u003e\u003cli\u003epass \u003ccode\u003euser\u003cspan\u003e.\u003c/span\u003eid\u003c/code\u003e to the \u003ccode\u003e\u003cspan\u003edevToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method on the chat client, and\u003c/li\u003e\u003cli\u003eGet the \u003ccode\u003erawValue\u003c/code\u003e which is the token string.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 To ensure that \u003ccode\u003edevToken\u003c/code\u003e works, you need to disable auth checks. In the \u003ccode\u003eGetStream\u003c/code\u003e app’s chat dashboard, turn on the \u003cstrong\u003eDisable Auth0 Checks\u003c/strong\u003e option.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3DMx1hZFHbDqt50gtJErjO/9c4c7e3c1da342ddf10c8fb208ac8960/disable_auth_checks.png\" alt=\"Stream dashboard.\"/\u003e\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eWhen you move the app to production and you have a proper method to receive the production token, make sure that you turn off the \u003cstrong\u003eDisable Auth0 Checks\u003c/strong\u003e option.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eStream chat UI components will accept additional data that you provide while connecting a user. For example, you may create a \u003ccode\u003eMap\u003c/code\u003e containing the user‘s image and name, so they appear automatically and beautifully throughout the chat widget.\u003c/p\u003e\u003cp\u003eAt the time of writing, Stream does not accept Auth0’s user ID format, which includes \u003ccode\u003e\u003cspan\u003e|\u003c/span\u003e\u003c/code\u003e between the Auth source and user hash ID. You’ll need to make a change to the \u003ccode\u003eid\u003c/code\u003e arrow function in the \u003ccode\u003eAuth0User\u003c/code\u003e model to account for this.\u003c/p\u003e\u003cp\u003e🛠 Open \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003emodels\u003cspan\u003e/\u003c/span\u003eauth0_user\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e and make this change to the \u003ccode\u003eid\u003c/code\u003e arrow function: \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/models/auth0_user.dart\u003c/span\u003e\n\nString \u003cspan\u003eget\u003c/span\u003e id \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e sub\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esplit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;|\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejoin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe next and final step is to create \u003ccode\u003eStreamChat\u003c/code\u003e, the root widget of the application.\u003c/p\u003e\u003cp\u003e🛠 Open the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003emain\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file, locate the call to  \u003ccode\u003eMaterialApp\u003c/code\u003e, and add the \u003ccode\u003ebuilder\u003c/code\u003e parameter so that it returns a \u003ccode\u003eStreamChat\u003c/code\u003e object:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/main.dart\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003eMaterialApp\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n  debugShowCheckedModeBanner\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  themeMode\u003cspan\u003e:\u003c/span\u003e ThemeMode\u003cspan\u003e.\u003c/span\u003esystem\u003cspan\u003e,\u003c/span\u003e\n  home\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eHomeScreen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  navigatorKey\u003cspan\u003e:\u003c/span\u003e CoffeeRouter\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003enavigatorKey\u003cspan\u003e,\u003c/span\u003e\n  theme\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003egetTheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  builder\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e,\u003c/span\u003e child\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eStreamChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      child\u003cspan\u003e:\u003c/span\u003e child\u003cspan\u003e,\u003c/span\u003e\n      client\u003cspan\u003e:\u003c/span\u003e ChatService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eclient\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003eStreamChat\u003c/code\u003e object returned by \u003ccode\u003ebuilder\u003c/code\u003e is an inherited widget and aims to provide APIs for advanced customization. It requires a child and a client that you have initialized in the \u003ccode\u003eChatService\u003c/code\u003e class.\u003c/p\u003e\u003cp\u003eThat\u0026#39;s it — your chat is ready! Restart the app, and let\u0026#39;s continue to add the support screen and community screen using the prebuilt \u003ccode\u003eStreamChat\u003c/code\u003e UI widget to leverage the chat service that you added.\u003c/p\u003e\u003ch2 id=\"Implement-the-Support-Chat-Screen\"\u003eImplement the Support Chat Screen\u003c/h2\u003e\u003cp\u003eTypically, a support chat consists of a user and an agent interacting in a channel created for both. Hence the support chat screen will do the following:\u003c/p\u003e\u003cul\u003e\u003cli\u003eCreate a private channel for the current user and one of the available agents\u003c/li\u003e\u003cli\u003eListen to the channel for updates\u003c/li\u003e\u003cli\u003eLoad existing chat content, if any\u003c/li\u003e\u003cli\u003eUpon chat completion, archive the chat history\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eLet\u0026#39;s create a \u003ccode\u003e\u003cspan\u003ecreateSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method in the \u003ccode\u003eChatService\u003c/code\u003e class.\u003c/p\u003e\u003cp\u003e🛠 First, add the following instance variable to the start of the \u003ccode\u003eChatService\u003c/code\u003e class:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/chat_service.dart\u003c/span\u003e\n\nString\u003cspan\u003e?\u003c/span\u003e _currentChannelId\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Then add the \u003ccode\u003e\u003cspan\u003ecreateSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to the \u003ccode\u003eChatService\u003c/code\u003e class:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/chat_service.dart\u003c/span\u003e\n\nFuture\u003cspan\u003e\u0026lt;\u003c/span\u003eChannel\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003ecreateSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e// To be replaced with EmployeeRole via Auth0\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String employeeId \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;rootEmployeeId\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e channel \u003cspan\u003e=\u003c/span\u003e client\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003e\u0026#39;support\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    id\u003cspan\u003e:\u003c/span\u003e _currentChannelId\u003cspan\u003e,\u003c/span\u003e\n    extraData\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;MJCoffee Support\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;members\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n        employeeId\u003cspan\u003e,\u003c/span\u003e\n        client\u003cspan\u003e.\u003c/span\u003estate\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eawait\u003c/span\u003e channel\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewatch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  _currentChannelId \u003cspan\u003e=\u003c/span\u003e channel\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003ereturn\u003c/span\u003e channel\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThere’s a lot going on here. Let\u0026#39;s review it step by step.\u003c/p\u003e\u003cp\u003eFirst, to create a support chat channel for the current user, you need to know the ID of an available agent. In this tutorial, you will eventually learn how to create an API to get an available agent via Auth0 based on their roles. However, we’ll skip this part for now.\u003c/p\u003e\u003cp\u003eSecond, you need to create a channel with a specific type. In this case, the type will be \u003ccode\u003esupport\u003c/code\u003e. Stream provides default types for channels; however, you can define your types as needed. To create a channel type, navigate to the Stream dashboard, go to your app in the Chat overview tab, and add your channel types to the list.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6W33zODRlOuxetIMT5FFX5/c3b4894e13324aa8db4822545716248e/streamchat_type.png\" alt=\"Stream channel types.\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2Waym3vZQnTvKNejptTCJp/64b96fb65f65f5b1ceae5bf485eb2856/chat_type.png\" alt=\"New stream channel type.\"/\u003e\u003c/p\u003e\u003cp\u003eNext, you can pass an existing channel ID to reconnect to a channel or leave it \u003ccode\u003e\u003cspan\u003enull\u003c/span\u003e\u003c/code\u003e to create a new channel. Stream will automatically assign an ID to new channels. Since this support chat is private and exclusive to one agent and a current user, you may add IDs to \u003ccode\u003emembers\u003c/code\u003e in the \u003ccode\u003eextraData\u003c/code\u003e map.\u003c/p\u003e\u003cp\u003eThen, call the \u003ccode\u003e\u003cspan\u003ewatch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method on the channel to create and listen to the events on that channel. The \u003ccode\u003e\u003cspan\u003ewatch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method is a \u003ccode\u003eFuture\u003c/code\u003e and will perform its tasks asynchronously. You can assign the channel ID to the \u003ccode\u003e_currentChannelId\u003c/code\u003e private instance variable so that you can reconnect to the channel when needed.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eLater on, it might be a good idea to store the channel ID in an external database or local secure storage in the app so that it persists between user sessions.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eFinally, the method returns the newly created channel.\u003c/p\u003e\u003cp\u003eWith the \u003ccode\u003e\u003cspan\u003ecreateSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method implemented, you can now implement the chat UI.\u003c/p\u003e\u003cp\u003e🛠 Open the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003escreens\u003cspan\u003e/\u003c/span\u003esupport\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file, where you’ll find the \u003ccode\u003eSupportChatScreen\u003c/code\u003e class. Update the file’s contents to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/support.dart\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:flutter/material.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:flutter/widgets.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eSupportChatScreen\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eStatefulWidget\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e@override\u003c/span\u003e\n  _SupportChatScreenState \u003cspan\u003ecreateState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e_SupportChatScreenState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003e_SupportChatScreenState\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eState\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eSupportChatScreen\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  Auth0User\u003cspan\u003e?\u003c/span\u003e profile \u003cspan\u003e=\u003c/span\u003e AuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eprofile\u003cspan\u003e;\u003c/span\u003e\n  Channel\u003cspan\u003e?\u003c/span\u003e channel\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@override\u003c/span\u003e\n  \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003einitState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einitState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003ecreateChannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003ecreateChannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efinal\u003c/span\u003e _channel \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e ChatService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      channel \u003cspan\u003e=\u003c/span\u003e _channel\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003e@override\u003c/span\u003e\n  Widget \u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eBuildContext context\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e channel \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n        \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003eCenter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;You are in the queue!, please wait...\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eScaffold\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            body\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSafeArea\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n              child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eStreamChannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                channel\u003cspan\u003e:\u003c/span\u003e channel\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColumn\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                  children\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003eWidget\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n                    \u003cspan\u003eExpanded\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                      child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eMessageListView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                    \u003cspan\u003eMessageInput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                      disableAttachments\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                      sendButtonLocation\u003cspan\u003e:\u003c/span\u003e SendButtonLocation\u003cspan\u003e.\u003c/span\u003einside\u003cspan\u003e,\u003c/span\u003e\n                      actionsLocation\u003cspan\u003e:\u003c/span\u003e ActionsLocation\u003cspan\u003e.\u003c/span\u003eleftInside\u003cspan\u003e,\u003c/span\u003e\n                      showCommandsButton\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                  \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n              \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere’s what’s happening in this UI implementation:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThis support chat screen, \u003ccode\u003eSupportChatScreen\u003c/code\u003e, is a \u003ccode\u003eStatefulWidget\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003eprofile\u003c/code\u003e variable is the user profile from \u003ccode\u003eAuthService\u003c/code\u003e that you created in the previous section.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003echannel\u003c/code\u003e variable is used to detect if a support channel has been created.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003e\u003cspan\u003ecreateChannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method calls \u003ccode\u003eChatService\u003c/code\u003e’s \u003ccode\u003e\u003cspan\u003ecreateSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method, which you recently defined.\u003c/li\u003e\u003cli\u003eOnce the channel is ready, \u003ccode\u003e\u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e is called, which renders the chat UI.\u003c/li\u003e\u003cli\u003eIn the \u003ccode\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method, you can show a message while the channel is being created or return a \u003ccode\u003eStreamChannel\u003c/code\u003e object, which provides information about the channel to the widget tree and passes a reference to the \u003ccode\u003echannel\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eTypically, a child of \u003ccode\u003eSupportChatScreen\u003c/code\u003e should be a \u003ccode\u003eColumn\u003c/code\u003e that includes \u003ccode\u003e\u003cspan\u003eMessageListView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and is wrapped by \u003ccode\u003eExpanded\u003c/code\u003e to ensure it takes up all the available space.\u003c/li\u003e\u003cli\u003eYou can highly customize \u003ccode\u003e\u003cspan\u003eMessageInput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e in a number of ways, such as disabling the file attachment or command buttons. You’ll do this later by using Auth0’s permissions and roles to determine which buttons should be enabled or disabled, so stay tuned.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eCongratulations — you’ve implemented the support chat screen! Let\u0026#39;s move on to the community view.\u003c/p\u003e\u003cp\u003eIt\u0026#39;s time to make a screen to allow agents to see all the messages they receive via support. Let\u0026#39;s call this screen \u003ccode\u003eCommunityScreen\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e🛠 Open the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003escreens\u003cspan\u003e/\u003c/span\u003ecommunity\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file, and update the \u003ccode\u003eCommunityScreen\u003c/code\u003e class within to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/community.dart\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCommunityScreen\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eStatelessWidget\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e userId \u003cspan\u003e=\u003c/span\u003e ChatService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eclient\u003cspan\u003e.\u003c/span\u003estate\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eid \u003cspan\u003eas\u003c/span\u003e Object\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@override\u003c/span\u003e\n  Widget \u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eBuildContext context\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eScaffold\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      body\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eChannelsBloc\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eChannelListView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          filter\u003cspan\u003e:\u003c/span\u003e Filter\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ein_\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003e\u0026#39;members\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e[\u003c/span\u003euserId\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e// current user is employee (role/permission)\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          sort\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eSortOption\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;last_message_at\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          pagination\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003ePaginationParams\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            limit\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e30\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          channelWidget\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eChannelPage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eChannelPage\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eStatelessWidget\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e@override\u003c/span\u003e\n  Widget \u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eBuildContext context\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eScaffold\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      appBar\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eChannelHeader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      body\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColumn\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        children\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003eWidget\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n          \u003cspan\u003eExpanded\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eMessageListView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003eMessageInput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe logic behind this page is relatively simple. You want to load all channels seen by the current user, an agent in this context, then open each channel to answer its respective customer.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eChannelsBloc\u003c/code\u003e manages a list of channels with pagination, re-ordering, querying, and other operations associated with channels together with \u003ccode\u003e\u003cspan\u003eChannelListView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e. The \u003ccode\u003eBloc\u003c/code\u003e is not related to the \u003ccode\u003eBloc\u003c/code\u003e package or pattern; this is just a coincidence.\u003c/p\u003e\u003cp\u003eYou need to filter all channels by the membership of the current user. If necessary, do custom sorting and pagination too.\u003c/p\u003e\u003cp\u003eLastly, you need to ensure that the \u003ccode\u003e\u003cspan\u003eChannelPage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e is also passed to correctly as it makes channels routable. The \u003ccode\u003e\u003cspan\u003eChannelPage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e is nothing fancy — just a straightforward implementation of what you have done already in \u003ccode\u003eSupportScreen\u003c/code\u003e.\u003c/p\u003e\u003cp\u003ePerfect! You have created all screens for the app. However, we still need to implement permissions and roles to load each screen and functionalities based on what we can define and receive via Auth0 tokens. But if you are curious, you can simply add another tab to the \u003ccode\u003eMenuScreen\u003c/code\u003e and load these pages (although you might not see any channels yet).\u003c/p\u003e\u003cp\u003e🛠 In the file \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003escreens\u003cspan\u003e/\u003c/span\u003emenu\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e, locate \u003ccode\u003efinal List\u003cspan\u003e\u0026lt;\u003c/span\u003eWidget\u003cspan\u003e\u0026gt;\u003c/span\u003e tabs\u003c/code\u003e in \u003ccode\u003eMenuScreenState\u003c/code\u003e and update it to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/menu.dart\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e List\u003cspan\u003e\u0026lt;\u003c/span\u003eWidget\u003cspan\u003e\u0026gt;\u003c/span\u003e tabs \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n    \u003cspan\u003eMenuList\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecoffees\u003cspan\u003e:\u003c/span\u003e coffees\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003eSupportChatScreen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003eProfileScreen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 In the same file, add a new icon to \u003ccode\u003ebottomNavigationBar\u003c/code\u003e by replacing the \u003ccode\u003eitems\u003c/code\u003e parameter with the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/menu.dart\u003c/span\u003e\n\nitems\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003eBottomNavigationBarItem\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n  \u003cspan\u003eBottomNavigationBarItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    icon\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIcon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eIcons\u003cspan\u003e.\u003c/span\u003elist_alt\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    label\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Menu\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003eBottomNavigationBarItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    icon\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIcon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eIcons\u003cspan\u003e.\u003c/span\u003esupport\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    label\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Support\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003eBottomNavigationBarItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    icon\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIcon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eIcons\u003cspan\u003e.\u003c/span\u003eperson\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    label\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Profile\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Before you can test the chat, you should temporarily add the \u003ccode\u003erootEmployeeId\u003c/code\u003e user ID that you defined in \u003ccode\u003ecreateSupportChat\u003c/code\u003e  in the Stream dashboard.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2RqndsI9Xp4CR35fYyRRSG/4832ae874ee2b4622ae4282560d1f396/chat_custom_user.png\" alt=\"Custom user in the chat.\"/\u003e\u003c/p\u003e\u003cp\u003eYou can skip this step, but it’s still a good idea to have a root support user in case of a specific agent is unavailable. That way, the user with the absent agent can still get support.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/qFcfGuNTipVpuEWJtAfM0/312b8561bbbbc47ed9a97342dbd46764/custom_user_root.png\" alt=\"Custom user in the chat.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Run your app in the emulator, go to the support chat screen, and try it out!\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eIf you encounter an error regarding an outdated Kotlin version on the Android emulator, open \u003ccode\u003eandroid\u003cspan\u003e/\u003c/span\u003eapp\u003cspan\u003e/\u003c/span\u003ebuild\u003cspan\u003e.\u003c/span\u003egradle\u003c/code\u003e, and search for \u003ccode\u003eext\u003cspan\u003e.\u003c/span\u003ekotlin_version\u003c/code\u003e. Change that line to \u003ccode\u003eext\u003cspan\u003e.\u003c/span\u003ekotlin_version \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;1.5.10\u0026#39;\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Auth0-Actions-and-Generating-Stream-User-Production-Tokens\"\u003eAuth0 Actions and Generating Stream User Production Tokens\u003c/h2\u003e\u003cp\u003eUntil now, for each user, you have been using a token generated for the development environment. In order to release your app, the app will have to request production tokens.\u003c/p\u003e\u003cp\u003eAs I mentioned earlier, retrieving production tokens is usually done by your backend server. Auth0 can act as this service and retrieve those tokens for you, thanks to a potent tool called \u003cem\u003eAuth0 Actions\u003c/em\u003e. \u003c/p\u003e\u003cp\u003eYou can use Auth0 Actions to handle your application logic and fit it into a particular flow. They are secure, tenant-specific, versioned functions written in Node.js that execute at specific points when Auth0 is doing its work. This allows you to customize and extend Auth0\u0026#39;s capabilities with custom logic. Think of Actions as serverless functions, such as AWS Lambda or Google Cloud Functions.\u003c/p\u003e\u003cp\u003eYou can determine when and where to execute an Action in the Auth0 runtime environment. Your flows might be:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eLogin:\u003c/strong\u003e Executed after a user logs in and when refresh tokens are issued.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eMachine to Machine:\u003c/strong\u003e Executed after a user logs in after the Client Credentials hook.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePre-User Registration:\u003c/strong\u003e Executed before a user is added to the database or passwordless connections.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePost-User Registration:\u003c/strong\u003e Executed after a user is added to a database or passwordless connections. The execution is asynchronous and will not affect the transaction.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePost-Change Password:\u003c/strong\u003e Executed after a password is changed for a database connection user.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSend Phone Message:\u003c/strong\u003e Executed when using a custom MFA provider.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7fpne9yUGBpXYzAT5km5l5/83ab5c891c02495d53a9d2661e10083e/actions_flow.png\" alt=\"Actions flow\"/\u003e\u003c/p\u003e\u003cp\u003eYou’ve probably already thought of several use cases for each of these scenarios.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s create a custom action to exchange Stream production user tokens for users after they logged in and hooked it up to the ID token and user metadata received by the Flutter app.\u003c/p\u003e\u003cp\u003eFirst, you need to create a new action. Go to the Custom Actions menu under Actions in Auth0 Dashboard and hit the \u0026#34;Create\u0026#34; button.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/oR6jv9IA92twMdtRrAvIz/e414cac9a740c5fdd5eaab85a7795ebb/create_action.png\" alt=\"Create action\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 You should provide a name for the action, select a trigger from the list, and then create it. For the purpose of generating a chat token and attaching it to \u003ccode\u003eidToken\u003c/code\u003e, select the \u003cstrong\u003eLogin / Post Login\u003c/strong\u003e trigger, which allows you to use the action in the login flow.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5wbUmlcD0qq7FrgBCiURrS/a95bb544b5d4fdaa4eac2a87b5fd9361/create_action_trigger.png\" alt=\"Create action trigger\"/\u003e\u003c/p\u003e\u003cp\u003eYou\u0026#39;ll see an editor where you can write your logic. You can run the code, try it out before deploying it, add your secrets to the environment instead of putting it in the application code, and even add almost all public NPM packages!\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/46DWkLU05SPD1kTE6i5oGF/54f46b0d30cd13bf141b4beb28a2445e/action_module.png\" alt=\" action module\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Start by adding the \u003ccode\u003egetstream\u003c/code\u003e npm package. At the time of writing, the current version of the package is \u003ccode\u003e\u003cspan\u003e7.2\u003c/span\u003e\u003cspan\u003e.10\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e🛠 Go back to the Stream dashboard, copy your secret and client keys...\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5aLtEOAjfXguB6BQlI8fmB/b55f3fd1d0c7c44c91c760c5850d8457/chat_app_secret.png\" alt=\"chat app secret\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 ...and then add them with the name of \u003ccode\u003e\u003cspan\u003eGET_STREAM_CHAT_SECRET_KEY\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003eGET_STREAM_CHAT_CLIENT_KEY\u003c/span\u003e\u003c/code\u003e, respectively, to this function in Auth0.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4JgG1WLTfWa2RTlkzAkV8j/1704cdf6b2e7abfd23e611171440dce5/action_secrets.png\" alt=\" action secrets\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Lastly, you can import \u003ccode\u003egetStream\u003c/code\u003e and connect and create a user token bypassing \u003ccode\u003euser_id\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Javascript\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e stream \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003erequire\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;getstream\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\nexports\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonExecutePostLogin\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eevent\u003cspan\u003e,\u003c/span\u003e api\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e getStreamClient \u003cspan\u003e=\u003c/span\u003e stream\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econnect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    event\u003cspan\u003e.\u003c/span\u003esecrets\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eGET_STREAM_CHAT_CLIENT_KEY\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    event\u003cspan\u003e.\u003c/span\u003esecrets\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eGET_STREAM_CHAT_SECRET_KEY\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e getStreamToken \u003cspan\u003e=\u003c/span\u003e getStreamClient\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateUserToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003eevent\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003euser_id\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esplit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;|\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejoin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e// getstream does not support `|` in the ID yet, so we have to omit it.\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e// api.user.setAppMetadata(\u0026#34;stream_chat_token\u0026#34;, getStreamToken);\u003c/span\u003e\n  \u003cspan\u003e// api.user.setUserMetadata(\u0026#34;stream_chat_token\u0026#34;, getStreamToken);\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e namespace \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;https://getstream.mjcoffee.app\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eevent\u003cspan\u003e.\u003c/span\u003eauthorization\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    api\u003cspan\u003e.\u003c/span\u003eidToken\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomClaim\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003enamespace\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/user_token\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e getStreamToken\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    api\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomClaim\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003enamespace\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/user_token\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e getStreamToken\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0026#39;s explore the implementation above. \u003c/p\u003e\u003cp\u003eOnce you get the token, you can set a user or app metadata named \u003ccode\u003estream_chat_token\u003c/code\u003e with the token value. \u003c/p\u003e\u003cp\u003eAlternately, you can set a custom claim on \u003ccode\u003eidToken\u003c/code\u003e and \u003ccode\u003eaccessToken\u003c/code\u003e. A custom claim must take the form of a URI, which means that \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003egetstream\u003cspan\u003e.\u003c/span\u003emjcoffee\u003cspan\u003e.\u003c/span\u003eapp\u003cspan\u003e/\u003c/span\u003euser_token\u003c/code\u003e is an acceptable name for a claim, while \u003ccode\u003euser_token\u003c/code\u003e alone is not.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e In Stream, only the characters \u003ccode\u003ea\u003c/code\u003e through \u003ccode\u003ez\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003e0\u003c/span\u003e\u003c/code\u003e through \u003ccode\u003e\u003cspan\u003e9\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e@\u003c/code\u003e, \u003ccode\u003e_\u003c/code\u003e, and \u003ccode\u003e\u003cspan\u003e-\u003c/span\u003e\u003c/code\u003e are allowed in the user ID. Therefore, we shouldn’t use the \u003ccode\u003e\u003cspan\u003e|\u003c/span\u003e\u003c/code\u003e for \u003ccode\u003euser_id\u003c/code\u003e in Auth0.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eLet\u0026#39;s run and test this function before we deploy. Click on the play icon and run with the example event, which is automatically generated for you.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1b3pOpx8O1g4MBOqmhI6ix/88e2335e0b2bb8a3730dba6ebcc57e44/action_run.png\" alt=\" action run\"/\u003e\u003c/p\u003e\u003cp\u003eIf everything goes well, you’ll get a generated token in JWT format. Its payload will contain \u003ccode\u003euser_id\u003c/code\u003e, and it will be signed with your secret key by the Stream servers.\u003c/p\u003e\u003cp\u003eHere’s an example of what you’ll get:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// response in Action run\u003c/span\u003e\n\n\u003cspan\u003e[\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    name\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;https://getstream.mjcoffee.app/user_token\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    target\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;idToken\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    type\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;SetCustomClaim\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    value\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYXV0aDA1ZjdjOGVjN2MzM2M2YzAwNGJiYWZlODIifQ.7ZIyr27skgrGm6REEz5o-WvoCArNblDnwiOdxXW4dp8\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    name\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;https://getstream.mjcoffee.app/user_token\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    target\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;accessToken\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    type\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;SetCustomClaim\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    value\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYXV0aDA1ZjdjOGVjN2MzM2M2YzAwNGJiYWZlODIifQ.7ZIyr27skgrGm6REEz5o-WvoCArNblDnwiOdxXW4dp8\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/Ax6b4nRMkHyjvfGBK47bV/d15969eb0f4740dfe1057372e04c4437/jwt_stream.png\" alt=\"action run\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Next, go back to \u003cstrong\u003eFlow\u003c/strong\u003e, select \u003cstrong\u003eLogin\u003c/strong\u003e, and drag your newly-created custom action to the flow and apply the changes:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5oYj9z0hIawXOi3dSW8dEZ/4684098fb3b108dd0cc4f32e01aa4e59/login_flow.png\" alt=\" action run\"/\u003e\u003c/p\u003e\u003cp\u003eFor the last step, the Flutter app needs to read this token and add it to the user model. That way, when you connect a user to Stream’s chat, instead of the development tokens you’ve been using, you can replace it with the token that Auth0 received.\u003c/p\u003e\u003cp\u003e🛠 Since it\u0026#39;s a custom claim, it will show up in \u003ccode\u003eidToken\u003c/code\u003e; thus you’ll need to modify your \u003ccode\u003eAuth0IdToken\u003c/code\u003e model class (located in \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003emodels\u003cspan\u003e/\u003c/span\u003eauth0_id_token\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e)...\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/models/auth0_id_token.dart\u003c/span\u003e\n\n\u003cspan\u003e@JsonSerializable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuth0IdToken\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eAuth0IdToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n  \n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003estreamChatUserToken\u003cspan\u003e,\u003c/span\u003e\n  \n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n  \n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;https://getstream.mjcoffee.app/user_token\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String streamChatUserToken\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Then do the same with your \u003ccode\u003eAuth0User\u003c/code\u003e class (located in \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003emodels\u003cspan\u003e/\u003c/span\u003eauth0_user\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e), as it will be part of the user details:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// m/lib/models/auth0_user.dart\u003c/span\u003e\n\n\u003cspan\u003e@JsonSerializable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuth0User\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eAuth0User\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n      required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003estreamChatUserToken\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;https://getstream.mjcoffee.app/user_token\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String streamChatUserToken\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Once you are done, run the \u003ccode\u003ebuild_runner\u003c/code\u003e command to generate models again.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eflutter pub run build_runner build --delete-conflicting-outputs\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Locate \u003ccode\u003econnectUser\u003c/code\u003e in the \u003ccode\u003eChatService\u003c/code\u003e class (located in \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003eservices\u003cspan\u003e/\u003c/span\u003echat_service\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e) and replace \u003ccode\u003e\u003cspan\u003edevToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e with the newly-received token on the user object.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/chat_service.dart\u003c/span\u003e\n\n\u003cspan\u003eawait\u003c/span\u003e client\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econnectUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n  \u003cspan\u003eUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    id\u003cspan\u003e:\u003c/span\u003e user\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e,\u003c/span\u003e\n    extraData\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;image\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e user\u003cspan\u003e.\u003c/span\u003epicture\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e user\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e// client.devToken(user.id).rawValue,\u003c/span\u003e\n    user\u003cspan\u003e.\u003c/span\u003estreamChatUserToken\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWell done! Log out of the app, restart it. and log in again. This time, you\u0026#39;ll receive a production-ready user token. When you go to the support chat screen, everything should work as expected.\u003c/p\u003e\u003ch2 id=\"Looking-Ahead\"\u003eLooking Ahead\u003c/h2\u003e\u003cp\u003eNow that the app has a real-time chat is ready with a proper authentication flow, you can move on to the next section to focus on authorization, roles, and permissions.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.",
      "date_published": "2021-10-04T17:13:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-3-adding-real-time-chat-to-the-app/",
      "title": "Flutter Authentication and Authorization with Auth0, Part 3: Adding Real-Time Chat to the App",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIn the previous sections of this tutorial, you added authentication to \u003cem\u003eMJ Coffee\u003c/em\u003e, a Flutter app, and then enhanced that authentication by adding refresh token rotation and social logins. You also looked at customizing the login page with your own branding, and user management in Auth0.\u003c/p\u003e\u003cp\u003eIn this section, we’ll focus on authorization. Remember:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eAuthentication\u003c/strong\u003e concerns itself with answering the question “Who are you?”\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAuthorization\u003c/strong\u003e — this section’s topic — is all about answering the question “What are you allowed to do?”\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWe’ll cover authorization by adding real-time chat to \u003cem\u003eMJ Coffee\u003c/em\u003e so that we can later see how the chat can be integrated with Auth0, limit its functionalities and UIs based on roles and permissions.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eLook for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Add-Real-Time-Chat-to-the-Flutter-Application\"\u003eAdd Real-Time Chat to the Flutter Application\u003c/h2\u003e\u003cp\u003eHaving a real-time chat service in the \u003cem\u003eMJ Coffee\u003c/em\u003e app can significantly improve how fast users can communicate with our customer service or employees. Having looked around, I found \u003ca href=\"https://getstream.io\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eStream\u003c/a\u003e, an exciting service with a solid Flutter SDK that you can integrate and customize quickly and easily.\u003c/p\u003e\u003ch2 id=\"Install-Dependencies\"\u003eInstall Dependencies\u003c/h2\u003e\u003cp\u003eStream comes with several SDKs that can be used in Dart or Flutter applications. However, one of them comes with all features, a beautiful theme, and enough API so that you can customize it as much as you wish. We’ll use that one.\u003c/p\u003e\u003cp\u003e🛠 Open the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003epubspec\u003cspan\u003e.\u003c/span\u003eyaml\u003c/code\u003e file and add \u003ccode\u003estream_chat_flutter\u003c/code\u003e to your dependencies. The \u003ccode\u003edependencies\u003c/code\u003e section of the file should end up looking like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e// /pubspec.yaml\n\n\u003cspan\u003edependencies\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003eflutter\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003esdk\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e flutter\n  \u003cspan\u003efont_awesome_flutter\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^9.1.0\n  \u003cspan\u003eflutter_svg\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^0.22.0\n  \u003cspan\u003egoogle_fonts\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^2.1.0\n  \u003cspan\u003ejson_annotation\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^4.0.1\n  \u003cspan\u003ehttp\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^0.13.3\n  \u003cspan\u003eflutter_appauth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^1.1.0\n  \u003cspan\u003eflutter_secure_storage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^4.2.0\n  \u003cspan\u003estream_chat_flutter\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^2.0.0\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI recommend using a version later than 2.0, which is fully compatible with Flutter 2 and its support for \u003ca href=\"https://flutter.dev/docs/null-safety\" target=\"_blank\" rel=\"noreferrer noopener\"\u003enull safety\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIf you’re only targeting Android, you can ignore the next section.\u003c/p\u003e\u003ch4 id=\"If-you-re-targeting-iOS\"\u003eIf you’re targeting iOS\u003c/h4\u003e\u003cp\u003e🛠 If you’re targeting iOS, you’ll need to take a few extra steps:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe Stream library uses the \u003ca href=\"https://github.com/miguelpruivo/flutter_file_picker\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cem\u003eflutter file picker\u003c/em\u003e plugin\u003c/a\u003e to present the user with an interface to select files. You’ll need to follow the steps in \u003ca href=\"https://github.com/miguelpruivo/flutter_file_picker/wiki/Setup#ios\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe \u003cem\u003eiOS\u003c/em\u003e section of this page\u003c/a\u003e to make use of it.\u003c/li\u003e\u003cli\u003eThe library also uses the \u003cem\u003evideo_player\u003c/em\u003e plugin to display inline videos. Follow \u003ca href=\"https://pub.dev/packages/video_player#installation\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis guide\u003c/a\u003e to install and enable it.\u003c/li\u003e\u003cli\u003eFinally, the library uses the \u003cem\u003eimage_picker\u003c/em\u003e plugin to provide a user interface for selecting images. Follow [these instructions] to use this plugin.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 Don’t forget to actually install the dependencies! Enter \u003ccode\u003eflutter pub get\u003c/code\u003e in the terminal or PowerShell, or \u003ccode\u003ePub get\u003c/code\u003e in your IDE.\u003c/p\u003e\u003ch2 id=\"Create-a-Stream-Account-and-App\"\u003eCreate a Stream Account and App\u003c/h2\u003e\u003cp\u003eBefore you can integrate Stream with your app, you need a Stream account, which you’ll use to register the app.\u003c/p\u003e\u003cp\u003e🛠 \u003ca href=\"https://getstream.io/accounts/signup/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCreate your account if you don’t already have one,\u003c/a\u003e then log in and go to the Stream dashboard:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5g116jkNGeqaZvFk5nesaZ/e01470d789d92e658ca0d4ac16605d5e/stream_dashboard.png\" alt=\"Stream dashboard.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Tap on the \u003cstrong\u003eCreate App\u003c/strong\u003e button, then follow these steps:\u003c/p\u003e\u003cul\u003e\u003cli\u003eEnter a name for your app in the \u003cstrong\u003eApp Name\u003c/strong\u003e field. For this example, we’ll use \u003ccode\u003eMJCoffee\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eIn the \u003cstrong\u003eFeeds Server Location\u003c/strong\u003e menu, select the location closest to you.\u003c/li\u003e\u003cli\u003e\u003cem\u003eDon’t\u003c/em\u003e select anything from the \u003cstrong\u003eClone Existing App\u003c/strong\u003e menu — just leave it set to \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eSelect your environment. Usually, it\u0026#39;s a good idea to create separate apps for production and development. In this tutorial, we’ll focus on production, so select \u003cstrong\u003eProduction\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003eFinally, click the \u003cstrong\u003eCreate App\u003c/strong\u003e button.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou should see this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3Zh9QmY69R9Bwo4p3PZawt/f8c55e169d20282c17e3592216344fd6/stream_app.png\" alt=\"A newly-created app in Stream.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Once your app has been created, make a note of your Stream key. \u003c/p\u003e\u003cp\u003eNotice that you will need a secret key to sign the user ID and get a production user token to connect users. You’ll learn how to do that with Auth0 Actions.\u003c/p\u003e\u003cp\u003eI recommend passing sensitive data and keys with \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003edart\u003cspan\u003e-\u003c/span\u003edefine\u003c/code\u003e via the command line or adding to your editor or IDE run command rather than storing it in your app’s code.\u003c/p\u003e\u003cp\u003eYou took this approach when implementing basic authentication for the app. You passed two sensitive values — your Auth0 domain and Auth0 client ID — as command-line arguments when launching the app. You’ll simply add the Stream key as a third argument, like so:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eflutter run -d all --dart-define\u003cspan\u003e=\u003c/span\u003eAUTH0_DOMAIN\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003eYOUR DOMAIN\u003cspan\u003e]\u003c/span\u003e --dart-define\u003cspan\u003e=\u003c/span\u003eAUTH0_CLIENT_ID\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003eYOUR CLIENT ID\u003cspan\u003e]\u003c/span\u003e --dart-define\u003cspan\u003e=\u003c/span\u003eSTREAM_API_KEY\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003eYOUR STREAM KEY\u003cspan\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn order for your application to use the Stream key argument, you’ll need to define a new constant.\u003c/p\u003e\u003cp\u003e🛠 Add the following to your \u003ccode\u003econstants\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file, which is located in the in the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003ehelpers\u003cspan\u003e/\u003c/span\u003e\u003c/code\u003e directory:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/helpers/constants.dart\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e STREAM_API_KEY \u003cspan\u003e=\u003c/span\u003e String\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efromEnvironment\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;STREAM_API_KEY\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Integrate-Chat-Into-the-Flutter-Application\"\u003eIntegrate Chat Into the Flutter Application\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s start by creating a new \u003ccode\u003eStreamChatClient\u003c/code\u003e in the \u003ccode\u003eChatService\u003c/code\u003e singleton class. In doing this, there are three essential things that you need to take into account:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eInitializing the Dart API client with your API Key\u003c/li\u003e\u003cli\u003eSetting the current user\u003c/li\u003e\u003cli\u003ePassing the client to the top-level StreamChat widget\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e🛠 Open \u003ccode\u003echat_service\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e (located in the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003eservices\u003cspan\u003e/\u003c/span\u003e\u003c/code\u003e directory) and initialize \u003ccode\u003eStreamChatClient\u003c/code\u003e by updating the \u003ccode\u003eChatService\u003c/code\u003e class so that it appears as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/chat_service.dart\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eChatService\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e ChatService instance \u003cspan\u003e=\u003c/span\u003e ChatService\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e_internal\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efactory\u003c/span\u003e \u003cspan\u003eChatService\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e instance\u003cspan\u003e;\u003c/span\u003e\n  ChatService\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e_internal\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efinal\u003c/span\u003e StreamChatClient client \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eStreamChatClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    STREAM_API_KEY\u003cspan\u003e,\u003c/span\u003e\n    logLevel\u003cspan\u003e:\u003c/span\u003e isInDebugMode \u003cspan\u003e?\u003c/span\u003e Level\u003cspan\u003e.\u003c/span\u003eINFO \u003cspan\u003e:\u003c/span\u003e Level\u003cspan\u003e.\u003c/span\u003eOFF\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe only required positional parameter for \u003ccode\u003e\u003cspan\u003eStreamChatClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e is \u003ccode\u003e\u003cspan\u003eSTREAM_API_KEY\u003c/span\u003e\u003c/code\u003e, but you have more options to configure your client. For instance, it might be pretty helpful to see all the logs during debugging. That\u0026#39;s why we used the optional \u003ccode\u003elogLevel\u003c/code\u003e parameter to set the amount of logging that will take place, based on whether or not the app is in debug mode.\u003c/p\u003e\u003cp\u003eNow that you‘ve created the client, you need to ensure that your current user is connected appropriately.\u003c/p\u003e\u003cp\u003e🛠 Add the \u003ccode\u003e\u003cspan\u003econnectUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e to the \u003ccode\u003eChatService\u003c/code\u003e class in  \u003ccode\u003echat_service\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/chat_service.dart\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eChatService\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n  Future\u003cspan\u003e\u0026lt;\u003c/span\u003eAuth0User\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003econnectUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eAuth0User\u003cspan\u003e?\u003c/span\u003e user\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003euser \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ethrow\u003c/span\u003e \u003cspan\u003eException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;User was not received\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003eawait\u003c/span\u003e client\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econnectUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      \u003cspan\u003eUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        id\u003cspan\u003e:\u003c/span\u003e user\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e,\u003c/span\u003e\n        extraData\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n          \u003cspan\u003e\u0026#39;image\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e user\u003cspan\u003e.\u003c/span\u003epicture\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e user\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e// To be replaced with PRODUCTION TOKEN for user\u003c/span\u003e\n      client\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edevToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003erawValue\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e user\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n  \n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n  \n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis new method of the \u003ccode\u003eChatService\u003c/code\u003e class, \u003ccode\u003e\u003cspan\u003econnectUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, will handle the logic for connecting the current user. It accepts an \u003ccode\u003eAuth0User\u003c/code\u003e object. If it doesn‘t receive one, it means the authentication has probably failed and that the user should not be connected to the chat.\u003c/p\u003e\u003cp\u003e🛠 Open \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003escreens\u003cspan\u003e/\u003c/span\u003ehome\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e, look for the \u003ccode\u003e_HomeScreenState\u003c/code\u003e class, and within it, the \u003ccode\u003e\u003cspan\u003esetSuccessAuthState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method. Update \u003ccode\u003e\u003cspan\u003esetSuccessAuthState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/home.dart\u003c/span\u003e\n\n\u003cspan\u003esetSuccessAuthState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    isProgressing \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    isLoggedIn \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    name \u003cspan\u003e=\u003c/span\u003e AuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eidToken\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  ChatService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econnectUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eAuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eprofile\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  CoffeeRouter\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eMenuScreen\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou need to pass two required positional parameters:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe \u003ccode\u003eUser\u003c/code\u003e object with a defined user ID, and\u003c/li\u003e\u003cli\u003ethe user token, a signed and encrypted hash string.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eTypically, the user token should be generated on a back-end server to store the aforementioned secret key and to sign and get the token. You\u0026#39;ll soon learn how Auth0 can handle that as your backend.\u003c/p\u003e\u003cp\u003eTo continue, you need to:\u003c/p\u003e\u003cul\u003e\u003cli\u003eGet a development token,\u003c/li\u003e\u003cli\u003epass \u003ccode\u003euser\u003cspan\u003e.\u003c/span\u003eid\u003c/code\u003e to the \u003ccode\u003e\u003cspan\u003edevToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method on the chat client, and\u003c/li\u003e\u003cli\u003eGet the \u003ccode\u003erawValue\u003c/code\u003e which is the token string.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 To ensure that \u003ccode\u003edevToken\u003c/code\u003e works, you need to disable auth checks. In the \u003ccode\u003eGetStream\u003c/code\u003e app’s chat dashboard, turn on the \u003cstrong\u003eDisable Auth0 Checks\u003c/strong\u003e option.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3DMx1hZFHbDqt50gtJErjO/9c4c7e3c1da342ddf10c8fb208ac8960/disable_auth_checks.png\" alt=\"Stream dashboard.\"/\u003e\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eWhen you move the app to production and you have a proper method to receive the production token, make sure that you turn off the \u003cstrong\u003eDisable Auth0 Checks\u003c/strong\u003e option.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eStream chat UI components will accept additional data that you provide while connecting a user. For example, you may create a \u003ccode\u003eMap\u003c/code\u003e containing the user‘s image and name, so they appear automatically and beautifully throughout the chat widget.\u003c/p\u003e\u003cp\u003eAt the time of writing, Stream does not accept Auth0’s user ID format, which includes \u003ccode\u003e\u003cspan\u003e|\u003c/span\u003e\u003c/code\u003e between the Auth source and user hash ID. You’ll need to make a change to the \u003ccode\u003eid\u003c/code\u003e arrow function in the \u003ccode\u003eAuth0User\u003c/code\u003e model to account for this.\u003c/p\u003e\u003cp\u003e🛠 Open \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003emodels\u003cspan\u003e/\u003c/span\u003eauth0_user\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e and make this change to the \u003ccode\u003eid\u003c/code\u003e arrow function: \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/models/auth0_user.dart\u003c/span\u003e\n\nString \u003cspan\u003eget\u003c/span\u003e id \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e sub\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esplit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;|\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejoin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe next and final step is to create \u003ccode\u003eStreamChat\u003c/code\u003e, the root widget of the application.\u003c/p\u003e\u003cp\u003e🛠 Open the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003emain\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file, locate the call to  \u003ccode\u003eMaterialApp\u003c/code\u003e, and add the \u003ccode\u003ebuilder\u003c/code\u003e parameter so that it returns a \u003ccode\u003eStreamChat\u003c/code\u003e object:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/main.dart\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003eMaterialApp\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n  debugShowCheckedModeBanner\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  themeMode\u003cspan\u003e:\u003c/span\u003e ThemeMode\u003cspan\u003e.\u003c/span\u003esystem\u003cspan\u003e,\u003c/span\u003e\n  home\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eHomeScreen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  navigatorKey\u003cspan\u003e:\u003c/span\u003e CoffeeRouter\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003enavigatorKey\u003cspan\u003e,\u003c/span\u003e\n  theme\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003egetTheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  builder\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e,\u003c/span\u003e child\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eStreamChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      child\u003cspan\u003e:\u003c/span\u003e child\u003cspan\u003e,\u003c/span\u003e\n      client\u003cspan\u003e:\u003c/span\u003e ChatService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eclient\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003eStreamChat\u003c/code\u003e object returned by \u003ccode\u003ebuilder\u003c/code\u003e is an inherited widget and aims to provide APIs for advanced customization. It requires a child and a client that you have initialized in the \u003ccode\u003eChatService\u003c/code\u003e class.\u003c/p\u003e\u003cp\u003eThat\u0026#39;s it — your chat is ready! Restart the app, and let\u0026#39;s continue to add the support screen and community screen using the prebuilt \u003ccode\u003eStreamChat\u003c/code\u003e UI widget to leverage the chat service that you added.\u003c/p\u003e\u003ch2 id=\"Implement-the-Support-Chat-Screen\"\u003eImplement the Support Chat Screen\u003c/h2\u003e\u003cp\u003eTypically, a support chat consists of a user and an agent interacting in a channel created for both. Hence the support chat screen will do the following:\u003c/p\u003e\u003cul\u003e\u003cli\u003eCreate a private channel for the current user and one of the available agents\u003c/li\u003e\u003cli\u003eListen to the channel for updates\u003c/li\u003e\u003cli\u003eLoad existing chat content, if any\u003c/li\u003e\u003cli\u003eUpon chat completion, archive the chat history\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eLet\u0026#39;s create a \u003ccode\u003e\u003cspan\u003ecreateSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method in the \u003ccode\u003eChatService\u003c/code\u003e class.\u003c/p\u003e\u003cp\u003e🛠 First, add the following instance variable to the start of the \u003ccode\u003eChatService\u003c/code\u003e class:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/chat_service.dart\u003c/span\u003e\n\nString\u003cspan\u003e?\u003c/span\u003e _currentChannelId\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Then add the \u003ccode\u003e\u003cspan\u003ecreateSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to the \u003ccode\u003eChatService\u003c/code\u003e class:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/chat_service.dart\u003c/span\u003e\n\nFuture\u003cspan\u003e\u0026lt;\u003c/span\u003eChannel\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003ecreateSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e// To be replaced with EmployeeRole via Auth0\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String employeeId \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;rootEmployeeId\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e channel \u003cspan\u003e=\u003c/span\u003e client\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003e\u0026#39;support\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    id\u003cspan\u003e:\u003c/span\u003e _currentChannelId\u003cspan\u003e,\u003c/span\u003e\n    extraData\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;MJCoffee Support\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;members\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n        employeeId\u003cspan\u003e,\u003c/span\u003e\n        client\u003cspan\u003e.\u003c/span\u003estate\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eawait\u003c/span\u003e channel\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewatch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  _currentChannelId \u003cspan\u003e=\u003c/span\u003e channel\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003ereturn\u003c/span\u003e channel\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThere’s a lot going on here. Let\u0026#39;s review it step by step.\u003c/p\u003e\u003cp\u003eFirst, to create a support chat channel for the current user, you need to know the ID of an available agent. In this tutorial, you will eventually learn how to create an API to get an available agent via Auth0 based on their roles. However, we’ll skip this part for now.\u003c/p\u003e\u003cp\u003eSecond, you need to create a channel with a specific type. In this case, the type will be \u003ccode\u003esupport\u003c/code\u003e. Stream provides default types for channels; however, you can define your types as needed. To create a channel type, navigate to the Stream dashboard, go to your app in the Chat overview tab, and add your channel types to the list.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6W33zODRlOuxetIMT5FFX5/c3b4894e13324aa8db4822545716248e/streamchat_type.png\" alt=\"Stream channel types.\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2Waym3vZQnTvKNejptTCJp/64b96fb65f65f5b1ceae5bf485eb2856/chat_type.png\" alt=\"New stream channel type.\"/\u003e\u003c/p\u003e\u003cp\u003eNext, you can pass an existing channel ID to reconnect to a channel or leave it \u003ccode\u003e\u003cspan\u003enull\u003c/span\u003e\u003c/code\u003e to create a new channel. Stream will automatically assign an ID to new channels. Since this support chat is private and exclusive to one agent and a current user, you may add IDs to \u003ccode\u003emembers\u003c/code\u003e in the \u003ccode\u003eextraData\u003c/code\u003e map.\u003c/p\u003e\u003cp\u003eThen, call the \u003ccode\u003e\u003cspan\u003ewatch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method on the channel to create and listen to the events on that channel. The \u003ccode\u003e\u003cspan\u003ewatch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method is a \u003ccode\u003eFuture\u003c/code\u003e and will perform its tasks asynchronously. You can assign the channel ID to the \u003ccode\u003e_currentChannelId\u003c/code\u003e private instance variable so that you can reconnect to the channel when needed.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eLater on, it might be a good idea to store the channel ID in an external database or local secure storage in the app so that it persists between user sessions.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eFinally, the method returns the newly created channel.\u003c/p\u003e\u003cp\u003eWith the \u003ccode\u003e\u003cspan\u003ecreateSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method implemented, you can now implement the chat UI.\u003c/p\u003e\u003cp\u003e🛠 Open the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003escreens\u003cspan\u003e/\u003c/span\u003esupport\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file, where you’ll find the \u003ccode\u003eSupportChatScreen\u003c/code\u003e class. Update the file’s contents to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/support.dart\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:flutter/material.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:flutter/widgets.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eSupportChatScreen\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eStatefulWidget\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e@override\u003c/span\u003e\n  _SupportChatScreenState \u003cspan\u003ecreateState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e_SupportChatScreenState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003e_SupportChatScreenState\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eState\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eSupportChatScreen\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  Auth0User\u003cspan\u003e?\u003c/span\u003e profile \u003cspan\u003e=\u003c/span\u003e AuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eprofile\u003cspan\u003e;\u003c/span\u003e\n  Channel\u003cspan\u003e?\u003c/span\u003e channel\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@override\u003c/span\u003e\n  \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003einitState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einitState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003ecreateChannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003ecreateChannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efinal\u003c/span\u003e _channel \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e ChatService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      channel \u003cspan\u003e=\u003c/span\u003e _channel\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003e@override\u003c/span\u003e\n  Widget \u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eBuildContext context\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e channel \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n        \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003eCenter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;You are in the queue!, please wait...\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eScaffold\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            body\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSafeArea\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n              child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eStreamChannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                channel\u003cspan\u003e:\u003c/span\u003e channel\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColumn\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                  children\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003eWidget\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n                    \u003cspan\u003eExpanded\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                      child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eMessageListView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                    \u003cspan\u003eMessageInput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                      disableAttachments\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                      sendButtonLocation\u003cspan\u003e:\u003c/span\u003e SendButtonLocation\u003cspan\u003e.\u003c/span\u003einside\u003cspan\u003e,\u003c/span\u003e\n                      actionsLocation\u003cspan\u003e:\u003c/span\u003e ActionsLocation\u003cspan\u003e.\u003c/span\u003eleftInside\u003cspan\u003e,\u003c/span\u003e\n                      showCommandsButton\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                  \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n              \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere’s what’s happening in this UI implementation:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThis support chat screen, \u003ccode\u003eSupportChatScreen\u003c/code\u003e, is a \u003ccode\u003eStatefulWidget\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003eprofile\u003c/code\u003e variable is the user profile from \u003ccode\u003eAuthService\u003c/code\u003e that you created in the previous section.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003echannel\u003c/code\u003e variable is used to detect if a support channel has been created.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003e\u003cspan\u003ecreateChannel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method calls \u003ccode\u003eChatService\u003c/code\u003e’s \u003ccode\u003e\u003cspan\u003ecreateSupportChat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method, which you recently defined.\u003c/li\u003e\u003cli\u003eOnce the channel is ready, \u003ccode\u003e\u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e is called, which renders the chat UI.\u003c/li\u003e\u003cli\u003eIn the \u003ccode\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method, you can show a message while the channel is being created or return a \u003ccode\u003eStreamChannel\u003c/code\u003e object, which provides information about the channel to the widget tree and passes a reference to the \u003ccode\u003echannel\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eTypically, a child of \u003ccode\u003eSupportChatScreen\u003c/code\u003e should be a \u003ccode\u003eColumn\u003c/code\u003e that includes \u003ccode\u003e\u003cspan\u003eMessageListView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and is wrapped by \u003ccode\u003eExpanded\u003c/code\u003e to ensure it takes up all the available space.\u003c/li\u003e\u003cli\u003eYou can highly customize \u003ccode\u003e\u003cspan\u003eMessageInput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e in a number of ways, such as disabling the file attachment or command buttons. You’ll do this later by using Auth0’s permissions and roles to determine which buttons should be enabled or disabled, so stay tuned.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eCongratulations — you’ve implemented the support chat screen! Let\u0026#39;s move on to the community view.\u003c/p\u003e\u003cp\u003eIt\u0026#39;s time to make a screen to allow agents to see all the messages they receive via support. Let\u0026#39;s call this screen \u003ccode\u003eCommunityScreen\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e🛠 Open the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003escreens\u003cspan\u003e/\u003c/span\u003ecommunity\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file, and update the \u003ccode\u003eCommunityScreen\u003c/code\u003e class within to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/community.dart\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCommunityScreen\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eStatelessWidget\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e userId \u003cspan\u003e=\u003c/span\u003e ChatService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eclient\u003cspan\u003e.\u003c/span\u003estate\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eid \u003cspan\u003eas\u003c/span\u003e Object\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@override\u003c/span\u003e\n  Widget \u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eBuildContext context\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eScaffold\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      body\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eChannelsBloc\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eChannelListView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          filter\u003cspan\u003e:\u003c/span\u003e Filter\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ein_\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003e\u0026#39;members\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e[\u003c/span\u003euserId\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e// current user is employee (role/permission)\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          sort\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eSortOption\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;last_message_at\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          pagination\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003ePaginationParams\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            limit\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e30\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          channelWidget\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eChannelPage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eChannelPage\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eStatelessWidget\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e@override\u003c/span\u003e\n  Widget \u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eBuildContext context\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eScaffold\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      appBar\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eChannelHeader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      body\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColumn\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        children\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003eWidget\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n          \u003cspan\u003eExpanded\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eMessageListView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003eMessageInput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe logic behind this page is relatively simple. You want to load all channels seen by the current user, an agent in this context, then open each channel to answer its respective customer.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eChannelsBloc\u003c/code\u003e manages a list of channels with pagination, re-ordering, querying, and other operations associated with channels together with \u003ccode\u003e\u003cspan\u003eChannelListView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e. The \u003ccode\u003eBloc\u003c/code\u003e is not related to the \u003ccode\u003eBloc\u003c/code\u003e package or pattern; this is just a coincidence.\u003c/p\u003e\u003cp\u003eYou need to filter all channels by the membership of the current user. If necessary, do custom sorting and pagination too.\u003c/p\u003e\u003cp\u003eLastly, you need to ensure that the \u003ccode\u003e\u003cspan\u003eChannelPage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e is also passed to correctly as it makes channels routable. The \u003ccode\u003e\u003cspan\u003eChannelPage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e is nothing fancy — just a straightforward implementation of what you have done already in \u003ccode\u003eSupportScreen\u003c/code\u003e.\u003c/p\u003e\u003cp\u003ePerfect! You have created all screens for the app. However, we still need to implement permissions and roles to load each screen and functionalities based on what we can define and receive via Auth0 tokens. But if you are curious, you can simply add another tab to the \u003ccode\u003eMenuScreen\u003c/code\u003e and load these pages (although you might not see any channels yet).\u003c/p\u003e\u003cp\u003e🛠 In the file \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003escreens\u003cspan\u003e/\u003c/span\u003emenu\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e, locate \u003ccode\u003efinal List\u003cspan\u003e\u0026lt;\u003c/span\u003eWidget\u003cspan\u003e\u0026gt;\u003c/span\u003e tabs\u003c/code\u003e in \u003ccode\u003eMenuScreenState\u003c/code\u003e and update it to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/menu.dart\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e List\u003cspan\u003e\u0026lt;\u003c/span\u003eWidget\u003cspan\u003e\u0026gt;\u003c/span\u003e tabs \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n    \u003cspan\u003eMenuList\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecoffees\u003cspan\u003e:\u003c/span\u003e coffees\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003eSupportChatScreen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003eProfileScreen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 In the same file, add a new icon to \u003ccode\u003ebottomNavigationBar\u003c/code\u003e by replacing the \u003ccode\u003eitems\u003c/code\u003e parameter with the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/menu.dart\u003c/span\u003e\n\nitems\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003eBottomNavigationBarItem\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n  \u003cspan\u003eBottomNavigationBarItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    icon\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIcon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eIcons\u003cspan\u003e.\u003c/span\u003elist_alt\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    label\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Menu\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003eBottomNavigationBarItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    icon\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIcon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eIcons\u003cspan\u003e.\u003c/span\u003esupport\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    label\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Support\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003eBottomNavigationBarItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    icon\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIcon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eIcons\u003cspan\u003e.\u003c/span\u003eperson\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    label\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Profile\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Before you can test the chat, you should temporarily add the \u003ccode\u003erootEmployeeId\u003c/code\u003e user ID that you defined in \u003ccode\u003ecreateSupportChat\u003c/code\u003e  in the Stream dashboard.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2RqndsI9Xp4CR35fYyRRSG/4832ae874ee2b4622ae4282560d1f396/chat_custom_user.png\" alt=\"Custom user in the chat.\"/\u003e\u003c/p\u003e\u003cp\u003eYou can skip this step, but it’s still a good idea to have a root support user in case of a specific agent is unavailable. That way, the user with the absent agent can still get support.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/qFcfGuNTipVpuEWJtAfM0/312b8561bbbbc47ed9a97342dbd46764/custom_user_root.png\" alt=\"Custom user in the chat.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Run your app in the emulator, go to the support chat screen, and try it out!\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eIf you encounter an error regarding an outdated Kotlin version on the Android emulator, open \u003ccode\u003eandroid\u003cspan\u003e/\u003c/span\u003eapp\u003cspan\u003e/\u003c/span\u003ebuild\u003cspan\u003e.\u003c/span\u003egradle\u003c/code\u003e, and search for \u003ccode\u003eext\u003cspan\u003e.\u003c/span\u003ekotlin_version\u003c/code\u003e. Change that line to \u003ccode\u003eext\u003cspan\u003e.\u003c/span\u003ekotlin_version \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;1.5.10\u0026#39;\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Auth0-Actions-and-Generating-Stream-User-Production-Tokens\"\u003eAuth0 Actions and Generating Stream User Production Tokens\u003c/h2\u003e\u003cp\u003eUntil now, for each user, you have been using a token generated for the development environment. In order to release your app, the app will have to request production tokens.\u003c/p\u003e\u003cp\u003eAs I mentioned earlier, retrieving production tokens is usually done by your backend server. Auth0 can act as this service and retrieve those tokens for you, thanks to a potent tool called \u003cem\u003eAuth0 Actions\u003c/em\u003e. \u003c/p\u003e\u003cp\u003eYou can use Auth0 Actions to handle your application logic and fit it into a particular flow. They are secure, tenant-specific, versioned functions written in Node.js that execute at specific points when Auth0 is doing its work. This allows you to customize and extend Auth0\u0026#39;s capabilities with custom logic. Think of Actions as serverless functions, such as AWS Lambda or Google Cloud Functions.\u003c/p\u003e\u003cp\u003eYou can determine when and where to execute an Action in the Auth0 runtime environment. Your flows might be:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eLogin:\u003c/strong\u003e Executed after a user logs in and when refresh tokens are issued.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eMachine to Machine:\u003c/strong\u003e Executed after a user logs in after the Client Credentials hook.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePre-User Registration:\u003c/strong\u003e Executed before a user is added to the database or passwordless connections.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePost-User Registration:\u003c/strong\u003e Executed after a user is added to a database or passwordless connections. The execution is asynchronous and will not affect the transaction.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePost-Change Password:\u003c/strong\u003e Executed after a password is changed for a database connection user.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSend Phone Message:\u003c/strong\u003e Executed when using a custom MFA provider.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7fpne9yUGBpXYzAT5km5l5/83ab5c891c02495d53a9d2661e10083e/actions_flow.png\" alt=\"Actions flow\"/\u003e\u003c/p\u003e\u003cp\u003eYou’ve probably already thought of several use cases for each of these scenarios.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s create a custom action to exchange Stream production user tokens for users after they logged in and hooked it up to the ID token and user metadata received by the Flutter app.\u003c/p\u003e\u003cp\u003eFirst, you need to create a new action. Go to the Custom Actions menu under Actions in Auth0 Dashboard and hit the \u0026#34;Create\u0026#34; button.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/oR6jv9IA92twMdtRrAvIz/e414cac9a740c5fdd5eaab85a7795ebb/create_action.png\" alt=\"Create action\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 You should provide a name for the action, select a trigger from the list, and then create it. For the purpose of generating a chat token and attaching it to \u003ccode\u003eidToken\u003c/code\u003e, select the \u003cstrong\u003eLogin / Post Login\u003c/strong\u003e trigger, which allows you to use the action in the login flow.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5wbUmlcD0qq7FrgBCiURrS/a95bb544b5d4fdaa4eac2a87b5fd9361/create_action_trigger.png\" alt=\"Create action trigger\"/\u003e\u003c/p\u003e\u003cp\u003eYou\u0026#39;ll see an editor where you can write your logic. You can run the code, try it out before deploying it, add your secrets to the environment instead of putting it in the application code, and even add almost all public NPM packages!\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/46DWkLU05SPD1kTE6i5oGF/54f46b0d30cd13bf141b4beb28a2445e/action_module.png\" alt=\" action module\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Start by adding the \u003ccode\u003egetstream\u003c/code\u003e npm package. At the time of writing, the current version of the package is \u003ccode\u003e\u003cspan\u003e7.2\u003c/span\u003e\u003cspan\u003e.10\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e🛠 Go back to the Stream dashboard, copy your secret and client keys...\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5aLtEOAjfXguB6BQlI8fmB/b55f3fd1d0c7c44c91c760c5850d8457/chat_app_secret.png\" alt=\"chat app secret\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 ...and then add them with the name of \u003ccode\u003e\u003cspan\u003eGET_STREAM_CHAT_SECRET_KEY\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003eGET_STREAM_CHAT_CLIENT_KEY\u003c/span\u003e\u003c/code\u003e, respectively, to this function in Auth0.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4JgG1WLTfWa2RTlkzAkV8j/1704cdf6b2e7abfd23e611171440dce5/action_secrets.png\" alt=\" action secrets\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Lastly, you can import \u003ccode\u003egetStream\u003c/code\u003e and connect and create a user token bypassing \u003ccode\u003euser_id\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Javascript\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e stream \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003erequire\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;getstream\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\nexports\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonExecutePostLogin\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eevent\u003cspan\u003e,\u003c/span\u003e api\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e getStreamClient \u003cspan\u003e=\u003c/span\u003e stream\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econnect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    event\u003cspan\u003e.\u003c/span\u003esecrets\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eGET_STREAM_CHAT_CLIENT_KEY\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    event\u003cspan\u003e.\u003c/span\u003esecrets\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eGET_STREAM_CHAT_SECRET_KEY\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e getStreamToken \u003cspan\u003e=\u003c/span\u003e getStreamClient\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateUserToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003eevent\u003cspan\u003e.\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003euser_id\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esplit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;|\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejoin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e// getstream does not support `|` in the ID yet, so we have to omit it.\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e// api.user.setAppMetadata(\u0026#34;stream_chat_token\u0026#34;, getStreamToken);\u003c/span\u003e\n  \u003cspan\u003e// api.user.setUserMetadata(\u0026#34;stream_chat_token\u0026#34;, getStreamToken);\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e namespace \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;https://getstream.mjcoffee.app\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eevent\u003cspan\u003e.\u003c/span\u003eauthorization\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    api\u003cspan\u003e.\u003c/span\u003eidToken\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomClaim\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003enamespace\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/user_token\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e getStreamToken\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    api\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomClaim\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003enamespace\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/user_token\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e getStreamToken\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0026#39;s explore the implementation above. \u003c/p\u003e\u003cp\u003eOnce you get the token, you can set a user or app metadata named \u003ccode\u003estream_chat_token\u003c/code\u003e with the token value. \u003c/p\u003e\u003cp\u003eAlternately, you can set a custom claim on \u003ccode\u003eidToken\u003c/code\u003e and \u003ccode\u003eaccessToken\u003c/code\u003e. A custom claim must take the form of a URI, which means that \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003egetstream\u003cspan\u003e.\u003c/span\u003emjcoffee\u003cspan\u003e.\u003c/span\u003eapp\u003cspan\u003e/\u003c/span\u003euser_token\u003c/code\u003e is an acceptable name for a claim, while \u003ccode\u003euser_token\u003c/code\u003e alone is not.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e In Stream, only the characters \u003ccode\u003ea\u003c/code\u003e through \u003ccode\u003ez\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003e0\u003c/span\u003e\u003c/code\u003e through \u003ccode\u003e\u003cspan\u003e9\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e@\u003c/code\u003e, \u003ccode\u003e_\u003c/code\u003e, and \u003ccode\u003e\u003cspan\u003e-\u003c/span\u003e\u003c/code\u003e are allowed in the user ID. Therefore, we shouldn’t use the \u003ccode\u003e\u003cspan\u003e|\u003c/span\u003e\u003c/code\u003e for \u003ccode\u003euser_id\u003c/code\u003e in Auth0.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eLet\u0026#39;s run and test this function before we deploy. Click on the play icon and run with the example event, which is automatically generated for you.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1b3pOpx8O1g4MBOqmhI6ix/88e2335e0b2bb8a3730dba6ebcc57e44/action_run.png\" alt=\" action run\"/\u003e\u003c/p\u003e\u003cp\u003eIf everything goes well, you’ll get a generated token in JWT format. Its payload will contain \u003ccode\u003euser_id\u003c/code\u003e, and it will be signed with your secret key by the Stream servers.\u003c/p\u003e\u003cp\u003eHere’s an example of what you’ll get:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// response in Action run\u003c/span\u003e\n\n\u003cspan\u003e[\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    name\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;https://getstream.mjcoffee.app/user_token\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    target\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;idToken\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    type\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;SetCustomClaim\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    value\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYXV0aDA1ZjdjOGVjN2MzM2M2YzAwNGJiYWZlODIifQ.7ZIyr27skgrGm6REEz5o-WvoCArNblDnwiOdxXW4dp8\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    name\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;https://getstream.mjcoffee.app/user_token\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    target\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;accessToken\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    type\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;SetCustomClaim\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    value\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYXV0aDA1ZjdjOGVjN2MzM2M2YzAwNGJiYWZlODIifQ.7ZIyr27skgrGm6REEz5o-WvoCArNblDnwiOdxXW4dp8\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/Ax6b4nRMkHyjvfGBK47bV/d15969eb0f4740dfe1057372e04c4437/jwt_stream.png\" alt=\"action run\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Next, go back to \u003cstrong\u003eFlow\u003c/strong\u003e, select \u003cstrong\u003eLogin\u003c/strong\u003e, and drag your newly-created custom action to the flow and apply the changes:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5oYj9z0hIawXOi3dSW8dEZ/4684098fb3b108dd0cc4f32e01aa4e59/login_flow.png\" alt=\" action run\"/\u003e\u003c/p\u003e\u003cp\u003eFor the last step, the Flutter app needs to read this token and add it to the user model. That way, when you connect a user to Stream’s chat, instead of the development tokens you’ve been using, you can replace it with the token that Auth0 received.\u003c/p\u003e\u003cp\u003e🛠 Since it\u0026#39;s a custom claim, it will show up in \u003ccode\u003eidToken\u003c/code\u003e; thus you’ll need to modify your \u003ccode\u003eAuth0IdToken\u003c/code\u003e model class (located in \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003emodels\u003cspan\u003e/\u003c/span\u003eauth0_id_token\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e)...\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/models/auth0_id_token.dart\u003c/span\u003e\n\n\u003cspan\u003e@JsonSerializable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuth0IdToken\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eAuth0IdToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n  \n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003estreamChatUserToken\u003cspan\u003e,\u003c/span\u003e\n  \n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n  \n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;https://getstream.mjcoffee.app/user_token\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String streamChatUserToken\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Then do the same with your \u003ccode\u003eAuth0User\u003c/code\u003e class (located in \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003emodels\u003cspan\u003e/\u003c/span\u003eauth0_user\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e), as it will be part of the user details:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// m/lib/models/auth0_user.dart\u003c/span\u003e\n\n\u003cspan\u003e@JsonSerializable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuth0User\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eAuth0User\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n      required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003estreamChatUserToken\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;https://getstream.mjcoffee.app/user_token\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String streamChatUserToken\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Once you are done, run the \u003ccode\u003ebuild_runner\u003c/code\u003e command to generate models again.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eflutter pub run build_runner build --delete-conflicting-outputs\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Locate \u003ccode\u003econnectUser\u003c/code\u003e in the \u003ccode\u003eChatService\u003c/code\u003e class (located in \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003eservices\u003cspan\u003e/\u003c/span\u003echat_service\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e) and replace \u003ccode\u003e\u003cspan\u003edevToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e with the newly-received token on the user object.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/chat_service.dart\u003c/span\u003e\n\n\u003cspan\u003eawait\u003c/span\u003e client\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econnectUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n  \u003cspan\u003eUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    id\u003cspan\u003e:\u003c/span\u003e user\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e,\u003c/span\u003e\n    extraData\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;image\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e user\u003cspan\u003e.\u003c/span\u003epicture\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e user\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e// client.devToken(user.id).rawValue,\u003c/span\u003e\n    user\u003cspan\u003e.\u003c/span\u003estreamChatUserToken\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWell done! Log out of the app, restart it. and log in again. This time, you\u0026#39;ll receive a production-ready user token. When you go to the support chat screen, everything should work as expected.\u003c/p\u003e\u003ch2 id=\"Looking-Ahead\"\u003eLooking Ahead\u003c/h2\u003e\u003cp\u003eNow that the app has a real-time chat is ready with a proper authentication flow, you can move on to the next section to focus on authorization, roles, and permissions.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.",
      "date_published": "2021-10-04T17:13:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-1-adding-authentication-to-an-app/",
      "title": "Flutter Authentication and Authorization with Auth0, Part 1: Adding Authentication to an App",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003ch2 id=\"Welcome-\"\u003eWelcome!\u003c/h2\u003e\u003cp\u003eIn this four-part tutorial, you’ll take a Flutter app and enhance it with Auth0. You’ll start by adding basic username/password authentication to it, followed by social logins, and then enable real-time support chat that makes use of authorization.\u003c/p\u003e\u003cp\u003eBy the end of this tutorial, you’ll have built a fairly complex Flutter app that you can use as the basis for your own creations, and you will also have covered a lot of Auth0’s features.\u003c/p\u003e\u003cp\u003eBefore we begin, let’s get our terminology straight...\u003c/p\u003e\u003cp\u003eAuthentication and authorization are two key security components in applications, whether they are mobile apps, web apps, or machine-to-machine connections. Many people are confused by these terms, so here are some simple definitions:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e\u003cem\u003eAuthentication\u003c/em\u003e\u003c/strong\u003e deals with the question \u003cstrong\u003e\u0026#34;Who are you?\u0026#34;\u003c/strong\u003e. You’ll implement it in this section with the help of an authentication protocol called \u003ca href=\"https://auth0.com/docs/protocols/openid-connect-protocol\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOpenID Connect\u003c/a\u003e, or “OIDC” for short.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003cem\u003eAuthorization\u003c/em\u003e\u003c/strong\u003e answers the question \u003cstrong\u003e\u0026#34;What are you allowed to do?\u0026#34;\u003c/strong\u003e. You’ll implement it in a later section with the help of an authorization protocol called \u003ca href=\"https://auth0.com/intro-to-iam/what-is-oauth-2/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOAuth 2.0\u003c/a\u003e, or “OAuth2” for short.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Adding-Authentication-to-a-Flutter-App\"\u003eAdding Authentication to a Flutter App\u003c/h2\u003e\u003cp\u003eIn this section, you’ll learn how to secure a Flutter app with Auth0. You’ll take a production-ready Flutter app and add a login screen and logout functionality to it, and you’ll do it with only a fraction of the effort required to implement login and logout yourself!\u003c/p\u003e\u003cp\u003eYou’ll be able to follow this tutorial a little more smoothly if you know the basics of Flutter, but it\u0026#39;s not a hard requirement. If you have experience with any modern web framework, you’ll probably be able to understand the code and learn Flutter and Dart (Flutter’s programming language) as you go.\u003c/p\u003e\u003ch3 id=\"What-you-ll-learn-and-build\"\u003eWhat you’ll learn and build\u003c/h3\u003e\u003cp\u003eWhile you \u003cem\u003ecould\u003c/em\u003e create a new Flutter project and implement everything you will learn in this tutorial, adding authentication to an existing production-ready app is pretty common. I’ll provide a production-ready app, \u003cstrong\u003e\u003cem\u003eMJ Coffee\u003c/em\u003e\u003c/strong\u003e, which you’ll secure by adding authentication.\u003c/p\u003e\u003cp\u003eIn later sections, you’ll enable authentication through a social identity provider, such as Google or Apple. You’ll then work on authorization by adding roles and permissions to limit app functionalities based on each user’s permissions and roles.\u003c/p\u003e\u003cp\u003eI’ll explain more about what this tutorial will cover in \u003ca href=\"https://img.youtube.com/vi/bHdSLwWFNJ4/0.jpg\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis video overview.\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI will provide the source code for both the “starter” and “final” versions of the application. I strongly recommend that you use the “starter” version and follow the tutorial step by step in order to better understand the application and your additions to it.\u003c/p\u003e\u003cp\u003eAdditionally, I have recorded videos that support this tutorial. You’ll find them on my \u003ca href=\"https://www.youtube.com/playlist?list=PLCOnzDflrUceRLfHEkl-u2ipjsre6ZwjV\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eYoutube channel\nplaylist\u003c/a\u003e.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eLook for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Set-Up-the-Initial-App\"\u003eSet Up the Initial App\u003c/h2\u003e\u003ch3 id=\"Prerequisites\"\u003ePrerequisites\u003c/h3\u003e\u003cp\u003eBefore getting started, you need to have the following installed on your machine:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://flutter.dev/docs/get-started/install\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eFlutter SDK\u003c/a\u003e version 2.0 or later.\u003c/strong\u003e I used version \u003cstrong\u003e2.2\u003c/strong\u003e for building my application.\u003c/li\u003e\u003cli\u003eIf you want to build the app for iOS, you’ll need the following:\n  \u003cul\u003e\u003cli\u003e\u003cstrong\u003eXcode 11 or later.\u003c/strong\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eRuby 2.6.0 or later.\u003c/strong\u003e This is required for the next iOS requirement, which is...\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://cocoapods.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCocoaPods\u003c/a\u003e 1.10.0 or later.\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eA basic understanding of \u003cem\u003enull safety\u003c/em\u003e.\u003c/strong\u003e If you’ve used Kotlin’s or Swift’s optional types, you should be fine; if not, please read \u003ca href=\"https://flutter.dev/docs/null-safety\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cem\u003eNull safety in Flutter\u003c/em\u003e\u003c/a\u003e.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eThe IDE or an editor of your choice.\u003c/strong\u003e I recommend:\n\u003cul\u003e\u003cli\u003eAndroid Studio, or\u003c/li\u003e\u003cli\u003eIntelliJ, or\u003c/li\u003e\u003cli\u003eVisual Studio Code (which I will use in this series).\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eDart and Flutter plugins\u003c/strong\u003e for your IDE.\u003c/li\u003e\u003cli\u003eA cup of tea or coffee.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Get-the-project--configure-it--and-run-it\"\u003eGet the project, configure it, and run it\u003c/h3\u003e\u003cp\u003e🛠 \u003ca href=\"https://github.com/mhadaily/serverless-authentication-authorization-flutter\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOpen the repository for the MJ Coffee app\u003c/a\u003e and download the source from the \u003cem\u003emain\u003c/em\u003e branch. This contains a fully functioning app that is ready for you to add Auth0 authentication/authorization and chat.\u003c/p\u003e\u003cp\u003e🛠 If you want to build the app for iOS, you’ll need to specify your own development team for the build process. Open the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eios\u003cspan\u003e/\u003c/span\u003eRunner\u003cspan\u003e.\u003c/span\u003excworkspace\u003cspan\u003e/\u003c/span\u003e\u003c/code\u003e file with Xcode, select the \u003cstrong\u003eRunner\u003c/strong\u003e project, then the \u003cstrong\u003eRunner\u003c/strong\u003e target, open the \u003cstrong\u003eSigning \u0026amp; Capabilities\u003c/strong\u003e tab, and select your team in the \u003cstrong\u003eTeam\u003c/strong\u003e drop-down menu:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3URlDK6kyBY0Op3OU1GX02/1701db29ed00c3e364063984981c5efd/select_development_team.png\" alt=\"Screenshot of Xcode. The reader is instructed to select the “Runner” project and then the “Runner” target, then select “Signing and Capabilities”, and finally select their development team.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Confirm that the app works by running it. Open a command-line interface, navigate to the project’s root directory, and enter  \u003ccode\u003eflutter run\u003c/code\u003e. \u003c/p\u003e\u003cp\u003eFlutter will compile the project and run it on any mobile device connected to your computer or any mobile device emulator running on it. If it can’t find any of those, it will run a mobile device emulation in a browser window.\u003c/p\u003e\u003cp\u003eYou will see the app’s home screen:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6kebmOTiWF0KJvdk3yRhZv/a564bccc4f49415742375a9a597db8aa/mj_coffee_screen_1.png\" alt=\"The MJ Coffee App’s home screen\"/\u003e\u003c/p\u003e\u003ch3 id=\"Take-a-quick-tour-of-the-app\"\u003eTake a quick tour of the app\u003c/h3\u003e\u003cp\u003e🛠 Tap the \u003cstrong\u003eLogin | Register\u003c/strong\u003e button. Right now, there is no login functionality, so the app immediately takes you to the \u003cstrong\u003eMenu\u003c/strong\u003e screen:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/26VWlWFGMfEkt3lxzB4Vtl/d76d8e9157544008eb45706196be9e58/mj_coffee_screen_2.png\" alt=\"The MJ Coffee App’s “Menu” screen\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Tap the \u003cstrong\u003eSupport\u003c/strong\u003e button located at the bottom center of the screen. It will take you to the screen where you’ll eventually implement that support chat feature:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6kP1psYGYxUYjP2lfmGGSy/cf9f8fe20aeb4dcf6aabfc717706ec45/mj_coffee_screen_3.png\" alt=\"The MJ Coffee App’s “Support” screen, which is currently blank\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Now tap the \u003cstrong\u003eProfile\u003c/strong\u003e button located at the bottom right of the screen. It will take you to the profile screen, which will eventually display some information about the logged-in user:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/66R156m2DmiVcOy3NDAUrx/768da6f50629ec4084ba0cdfd974045e/mj_coffee_screen_4.png\" alt=\"The MJ Coffee App’s “Profile” screen, which currently shows a coffee illustration\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 And finally, tap the \u003cstrong\u003eLogout\u003c/strong\u003e button, which will bring you back to the home screen.\u003c/p\u003e\u003cp\u003eNow that you’ve had a tour of the app, it’s time to start implementing the new features!\u003c/p\u003e\u003ch2 id=\"Implement-Login\"\u003eImplement Login\u003c/h2\u003e\u003ch3 id=\"Install-Flutter-dependencies\"\u003eInstall Flutter dependencies\u003c/h3\u003e\u003cp\u003eThe first step is to import the required libraries. You’ll do that by specifying three new dependencies:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://pub.dartlang.org/packages/http\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cstrong\u003ehttp\u003c/strong\u003e\u003c/a\u003e: A composable, Future-based library for making HTTP requests published by the \u003ca href=\"https://dart.dev/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDart team\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://pub.dev/packages/flutter_appauth\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cstrong\u003eflutter_appauth\u003c/strong\u003e\u003c/a\u003e : A well-maintained wrapper package around \u003ca href=\"https://appauth.io/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAppAuth\u003c/a\u003e for Flutter developed by \u003ca href=\"https://dexterx.dev/about/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMichael Bui\u003c/a\u003e. AppAuth authenticates and authorizes users and supports the PKCE extension.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://pub.dev/packages/flutter_secure_storage\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cstrong\u003efluttersecurestorage\u003c/strong\u003e\u003c/a\u003e: A library for securely persisting data locally; it was developed by \u003ca href=\"https://github.com/mogol\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGerman Saprykin\u003c/a\u003e. You will need this to safely store tokens and other necessary information.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou’ll install them by adding entries to the project’s \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003epubspec\u003cspan\u003e.\u003c/span\u003eyaml\u003c/code\u003e file (located in the root directory), where dependencies are specified.\u003c/p\u003e\u003cp\u003e🛠 Add the following lines to the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003epubspec\u003cspan\u003e.\u003c/span\u003eyaml\u003c/code\u003e’s \u003ccode\u003edependencies\u003cspan\u003e:\u003c/span\u003e\u003c/code\u003e section, just after the line that starts with \u003ccode\u003ejson_annotation\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e  \u003cspan\u003ehttp\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^0.13.3\n  \u003cspan\u003eflutter_appauth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^1.1.0\n  \u003cspan\u003eflutter_secure_storage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^4.2.0\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003edependencies\u003cspan\u003e:\u003c/span\u003e\u003c/code\u003e section should end up looking like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003edependencies\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003eflutter\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003esdk\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e flutter\n  \u003cspan\u003efont_awesome_flutter\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^9.1.0\n  \u003cspan\u003eflutter_svg\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^0.22.0\n  \u003cspan\u003egoogle_fonts\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^2.1.0\n  \u003cspan\u003ejson_annotation\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^4.0.1\n  \u003cspan\u003ehttp\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^0.13.3\n  \u003cspan\u003eflutter_appauth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^1.1.0\n  \u003cspan\u003eflutter_secure_storage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ^4.2.0\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Save the file and then install the dependencies by either:\u003c/p\u003e\u003cul\u003e\u003cli\u003eRunning the \u003ccode\u003eflutter pub get\u003c/code\u003e command in the root of your project on the command line, or\u003c/li\u003e\u003cli\u003eRunning \u003ccode\u003ePub get\u003c/code\u003e in your editor or IDE.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Configure-the-callback-URL\"\u003eConfigure the callback URL\u003c/h3\u003e\u003cp\u003eA callback URL is a mechanism that an authorization server such as Auth0 uses to communicate back to your application. It specifies a location where the user should be returned after the user had been authenticated.\u003c/p\u003e\u003cp\u003eBecause unauthorized parties can manipulate callback URLs, Auth0 recognizes only URLs in a list of allowed callback URLs. These are stored in the application’s Settings page in the Auth0 dashboard.\u003c/p\u003e\u003cp\u003eFor web applications, a callback URL is a valid HTTPS URL. For native apps, your Flutter implementation, you need to create a “pseudo-URL” based on your app’s unique name (the name is the \u003cem\u003eapplication ID\u003c/em\u003e in Android and the \u003cem\u003ebundle name\u003c/em\u003e in iOS). These are similar in format to an URL.\u003c/p\u003e\u003cp\u003eYou will specify that this app’s name is \u003ccode\u003emj\u003cspan\u003e.\u003c/span\u003ecoffee\u003cspan\u003e.\u003c/span\u003eapp\u003c/code\u003e, which means that the callback URL for this application will be \u003ccode\u003emj\u003cspan\u003e.\u003c/span\u003ecoffee\u003cspan\u003e.\u003c/span\u003eapp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elogin\u003cspan\u003e-\u003c/span\u003ecallback\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eflutter_appauth\u003c/code\u003e will register your app with an intent filter on that callback URL. If there\u0026#39;s no match, the app will not receive the result.\u003c/p\u003e\u003ch4 id=\"Configure-the-callback-URL-for-Android\"\u003eConfigure the callback URL for Android\u003c/h4\u003e\u003cp\u003e🛠 To configure the Android version of the app, open the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eandroid\u003cspan\u003e/\u003c/span\u003eapp\u003cspan\u003e/\u003c/span\u003ebuild\u003cspan\u003e.\u003c/span\u003egradle\u003c/code\u003e file. Update the \u003ccode\u003edefaultConfig\u003c/code\u003e section of the file by adding a new item: \u003ccode\u003emanifestPlaceHolders\u003c/code\u003e and its value, \u003ccode\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;appAuthRedirectScheme\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;mj.coffee.app\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/code\u003e. The value of \u003ccode\u003eappAuthRedirectScheme\u003c/code\u003e must be in lower case letters.\u003c/p\u003e\u003cp\u003e🛠 You should set the value for \u003ccode\u003eminSdkVersion\u003c/code\u003e to at least \u003ccode\u003e\u003cspan\u003e18\u003c/span\u003e\u003c/code\u003e, as it\u0026#39;s a requirement for the \u003ccode\u003eflutter_secure_storage\u003c/code\u003e package. For the MJ Coffee app, I changed the \u003ccode\u003eminSdkVersion\u003c/code\u003e to \u003ccode\u003e\u003cspan\u003e21\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eThe result should look like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /android/app/build.gradle\u003c/span\u003e\n\n    defaultConfig \u003cspan\u003e{\u003c/span\u003e\n        applicationId \u003cspan\u003e\u0026#34;mj.coffee.app\u0026#34;\u003c/span\u003e\n        minSdkVersion \u003cspan\u003e21\u003c/span\u003e\n        targetSdkVersion \u003cspan\u003e29\u003c/span\u003e\n        versionCode flutterVersionCode\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoInteger\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        versionName flutterVersionName\n        multiDexEnabled \u003cspan\u003etrue\u003c/span\u003e\n        testInstrumentationRunner \u003cspan\u003e\u0026#34;androidx.test.runner.AndroidJUnitRunner\u0026#34;\u003c/span\u003e\n        manifestPlaceholders \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n            \u003cspan\u003e\u0026#39;appAuthRedirectScheme\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;mj.coffee.app\u0026#39;\u003c/span\u003e\n        \u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Configure-the-callback-URL-for-iOS\"\u003eConfigure the callback URL for iOS\u003c/h4\u003e\u003cp\u003eThe only change that you need to make in order to configure the iOS version of the app is to add a callback scheme.\u003c/p\u003e\u003cp\u003e🛠 To do this, open the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eios\u003cspan\u003e/\u003c/span\u003eRunner\u003cspan\u003e/\u003c/span\u003eInfo\u003cspan\u003e.\u003c/span\u003eplist\u003c/code\u003e file. Inside the \u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edict\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e tag, add a new key, \u003ccode\u003eCFBundleURLTypes\u003c/code\u003e so that the start of the \u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edict\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e tag looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;!-- /ios/Runner/Info.plist --\u0026gt;\u003c/span\u003e\n\n...\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edict\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n   \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ekey\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eCFBundleURLTypes\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ekey\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003earray\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edict\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ekey\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eCFBundleTypeRole\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ekey\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eEditor\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ekey\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eCFBundleURLSchemes\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ekey\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003earray\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003emj.coffee.app\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003earray\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edict\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003earray\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n...\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Run both Android and iOS versions and ensure that the app runs on all devices or emulators/simulators with no error by using the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eflutter run -d all\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Configure-Auth0\"\u003eConfigure Auth0\u003c/h3\u003e\u003cp\u003eThe next step is to register MJ Coffee as an application in the Auth0 dashboard.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eYou’ll need an Auth0 account for this step.\u003c/strong\u003e If you don’t already have one, \u003ca href=\"https://auth0.com/signup\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eyou can sign up for a free account\u003c/a\u003e. The free tier is generous enough for many small applications.\u003c/p\u003e\u003cp\u003e🛠 Log in to into your Auth0 account and follow the steps below to register the application:\u003c/p\u003e\u003cul\u003e\u003cli\u003e🛠 Go to the \u003cstrong\u003eApplications\u003c/strong\u003e section of your dashboard:\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/11V2MgaHACXkpzvWYTDrGC/61f2f0b37a0a15b1bfb2dead062f02ad/click_applications.png\" alt=\"The main page of the Auth0 dashboard. The reader is directed to click “Applications”.\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1mH6wEsUHtZizYdp4Jitu1/8d653eb1249f22347d2c67eb403f2c88/click_applications_2.png\" alt=\"The main page of the Auth0 dashboard. The reader is directed to click the “Applications” menu item in the “Applications” menu.\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e🛠 Click the \u003cstrong\u003eCreate Application\u003c/strong\u003e button:\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3uRVLR5qdjjvLBwvNJ4Xpk/40ff5b6358a332453e3062a830a19a37/click_create_application.png\" alt=\"The main page of the Auth0 dashboard’s “Applications” page. The reader is directed to click the “Create Application” button.\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e🛠 Enter a name for your application (e.g., \u0026#34;MJ Coffee Flutter Application\u0026#34;) and select the \u003cstrong\u003eNative\u003c/strong\u003e application type:\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3uxWZltP1uokojsifZoGky/61a5b804ecde79755448907169e63ed9/create_application_dialog.png\" alt=\"The “Create Application” dialog. The reader is directed to enter a name for the application, select the “Native” application type, and click the “Create” button.\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e🛠 You’ll see the \u003cstrong\u003eQuick Start\u003c/strong\u003e page of your newly-registered application. Go to the \u003cstrong\u003eConnections\u003c/strong\u003e page...\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1hGTF4bDiVDLTTtF8cNN7G/b928a2d8737efe5c61fc9629cff8503e/click_connections.png\" alt=\"The “Quick Start” tab for the “MJ Coffee” application in the Auth0 dashboard. The user is directed to click the “Connections” tab.\"/\u003e\u003c/p\u003e\u003cp\u003e...and ensure that \u003cstrong\u003eUsername-Password-Authentication\u003c/strong\u003e(in the \u003cstrong\u003eDatabase\u003c/strong\u003e section of the page) is selected. You can, and you will add a social connection later to this application too:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5MVzC4D9RA4l27SKsnFTH0/f68ea1b0c2bd7215ddb7ae504383ed20/connections_page.png\" alt=\"The “Connections” tab for the “MJ Coffee” application in the Auth0 dashboard. The user is directed to click the “Connections” tab.\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e🛠 Then go to the \u003cstrong\u003eSettings\u003c/strong\u003e page. You can find all information, including client ID, client secret, domain (Tenant), etc.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1nDE9yyCNNRKhfYcAC348j/61be08ddfab99158d3dff17e3dfd6336/settings_page.png\" alt=\"The “Settings” tab for the “MJ Coffee” application in the Auth0 dashboard. The user is directed to copy the values in the “Domain” and “Client ID” fields.\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e🛠 You need to add a callback URL for the app to the \u003cstrong\u003eAllowed Callback URLs\u003c/strong\u003e under \u003cstrong\u003eApplication URIs\u003c/strong\u003e. Use the value \u003ccode\u003emj\u003cspan\u003e.\u003c/span\u003ecoffee\u003cspan\u003e.\u003c/span\u003eapp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elogin\u003cspan\u003e-\u003c/span\u003ecallback\u003c/code\u003e:\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6Fxhp8QMl1sWcijlnP3L6w/9c99382a1d2cd330ebf11b3e47f48e46/add_callback_url.png\" alt=\"The “Quick Start” tab for the “MJ Coffee” application in the Auth0 dashboard. The user is directed to add the callback URL for the app to the “Allowed Callback URLs” list.\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e🛠 Scroll to the bottom of the page and click the \u003cstrong\u003eSave Changes\u003c/strong\u003e button:\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7KsLW4adJ6PNIPAI12al4g/f2c0e8abf6d7377595cfb7df11493e67/save_changes.png\" alt=\"The “Save Changes” button. The user is directed to click it.\"/\u003e\u003c/p\u003e\u003ch3 id=\"Provide-the-domain-and-client-ID-to-the-app\"\u003eProvide the domain and client ID to the app\u003c/h3\u003e\u003cp\u003eYou will need to use the domain and client ID that you copied from the \u003cstrong\u003eSettings\u003c/strong\u003e page in your Flutter application. You can either store these values in constant variables in the app’s code, or you can pass these values to the app by providing them as \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003edart\u003cspan\u003e-\u003c/span\u003edefine\u003c/code\u003e arguments when you run it. \u003c/p\u003e\u003cp\u003eRather than store this sensitive information in your code (which is a big security risk), I suggest that you supply the app with these values as \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003edart\u003cspan\u003e-\u003c/span\u003edefine\u003c/code\u003e arguments when you run it. \u003c/p\u003e\u003cp\u003e🛠 To do this in Terminal or PowerShell, use this command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eflutter run -d all --dart-define\u003cspan\u003e=\u003c/span\u003eAUTH0_DOMAIN\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eYOUR DOMAIN\u003cspan\u003e}\u003c/span\u003e --dart-define\u003cspan\u003e=\u003c/span\u003eAUTH0_CLIENT_ID\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eYOUR CLIENT ID\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can optionally have your editor of choice provide these values. For example, you can have Visual Studio Code pass these additional \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003edart\u003cspan\u003e-\u003c/span\u003edefine\u003c/code\u003e values by adding them to the \u003ccode\u003eargs\u003c/code\u003e field of your launch configuration file (\u003ccode\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003evscode\u003cspan\u003e/\u003c/span\u003elaunch\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e):\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026#34;configurations\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Flutter\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;request\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;launch\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;flutterMode\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;debug\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;dart\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;args\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;--dart-define\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;AUTH0_DOMAIN={YOUR DOMAIN}\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;--dart-define\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;AUTH0_CLIENT_ID={YOUR CLIENT ID}\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 The app should capture the values you pass to it. Do this by defining these constants in the \u003ccode\u003econstants\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file in the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003ehelpers\u003cspan\u003e/\u003c/span\u003e\u003c/code\u003e directory -- add these just after the \u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e\u003c/code\u003e statements:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/helpers/constants.dart\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e AUTH0_DOMAIN \u003cspan\u003e=\u003c/span\u003e String\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efromEnvironment\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;AUTH0_DOMAIN\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e AUTH0_CLIENT_ID \u003cspan\u003e=\u003c/span\u003e String\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efromEnvironment\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;AUTH0_CLIENT_ID\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e AUTH0_ISSUER \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;https://$AUTH0_DOMAIN\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e BUNDLE_IDENTIFIER \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;mj.coffee.app\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e AUTH0_REDIRECT_URI \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;$BUNDLE_IDENTIFIER://login-callback\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNotice that you only need the domain and client ID because the Authorization Code Flow with PKCE does not require a client secret. \u003c/p\u003e\u003cp\u003eThe code also defines a top-level domain for your tenant, which is called the issuer.\u003c/p\u003e\u003cp\u003eAs mentioned earlier, you need to create your redirect URI based on your bundle identifier, which you added to the \u0026#34;Allowed Callback URLs\u0026#34; list earlier. However, it would be best to keep in mind that:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe bundle identifier must match \u003ccode\u003eappAuthRedirectScheme\u003c/code\u003e on Android, and\u003c/li\u003e\u003cli\u003eThe scheme part of the redirect URL must match and \u003ccode\u003eCFBundleURLSchemes\u003c/code\u003e on iOS...\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e...and that both values must be in all lowercase.\u003c/p\u003e\u003ch3 id=\"Integrating-Auth0-with-Flutter\"\u003eIntegrating Auth0 with Flutter\u003c/h3\u003e\u003cp\u003eSince Auth0 is a standard OAuth 2.0 authorization server, you can utilize any standard OpenID Connect SDK to authenticate against Auth0. One of them is \u003ccode\u003eflutter_appauth\u003c/code\u003e, a wrapper around the \u003ccode\u003eAppAuth\u003c/code\u003e SDK for native applications. You will need to integrate it into your application.\u003c/p\u003e\u003cp\u003e🛠 Open the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003eservices\u003cspan\u003e/\u003c/span\u003eauth_service\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file and update it to import the necessary libraries as well as instantiate \u003ccode\u003eFlutterAppAuth\u003c/code\u003e and \u003ccode\u003eFlutterSecureStorage\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/auth_service.dart\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;dart:convert\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:http/http.dart\u0026#39;\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e http\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:flutter/services.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:flutter_appauth/flutter_appauth.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:flutter_secure_storage/flutter_secure_storage.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:mjcoffee/helpers/constants.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:mjcoffee/models/auth0_id_token.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:mjcoffee/models/auth0_user.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthService\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n  \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e AuthService instance \u003cspan\u003e=\u003c/span\u003e AuthService\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e_internal\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efactory\u003c/span\u003e \u003cspan\u003eAuthService\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e instance\u003cspan\u003e;\u003c/span\u003e\n  AuthService\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e_internal\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efinal\u003c/span\u003e FlutterAppAuth appAuth \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eFlutterAppAuth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e FlutterSecureStorage secureStorage \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eFlutterSecureStorage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOpenID Connect has a protocol, \u003ca href=\"https://auth0.com/docs/protocols/oidc/openid-connect-discovery\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOpenID Connect Discovery\u003c/a\u003e, that provides a standard way to discover authorization server endpoints in JSON documents. \u003c/p\u003e\u003cp\u003eIn Auth0, you can find the discovery document at the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ewell\u003cspan\u003e-\u003c/span\u003eknown\u003cspan\u003e/\u003c/span\u003eopenid\u003cspan\u003e-\u003c/span\u003econfiguration\u003c/code\u003e endpoint of your tenant address. For MJ Coffee, this endpoint is \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eYOUR-AUTH0-TENANT-NAME.auth0.com\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ewell\u003cspan\u003e-\u003c/span\u003eknown\u003cspan\u003e/\u003c/span\u003eopenid\u003cspan\u003e-\u003c/span\u003econfiguration\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eIf you watch \u003ca href=\"https://www.youtube.com/playlist?list=PLCOnzDflrUceRLfHEkl-u2ipjsre6ZwjV\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emy videos\u003c/a\u003e, you will see an example of a discovery URL.\u003c/p\u003e\u003cp\u003eAppAuth supports \u003ca href=\"https://pub.dev/packages/flutter_appauth#getting-started\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethree methods to configure endpoints\u003c/a\u003e. Conveniently, you just pass the top-level domain name (i.e., issuer) as a parameter to AppAuth methods. AppAuth then internally fetches the discovery documents from the \u003ccode\u003eopenid\u003cspan\u003e-\u003c/span\u003econfiguration\u003c/code\u003e endpoint and figures out where to send subsequent requests.\u003c/p\u003e\u003cp\u003e🛠 Let\u0026#39;s create a login method in our \u003ccode\u003eAuthService\u003c/code\u003e to construct the \u003ccode\u003eAuthorizationTokenRequest\u003c/code\u003e. Add the following to \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003eservices\u003cspan\u003e/\u003c/span\u003eauth_service\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/auth_service.dart\u003c/span\u003e\n\n  \u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003efinal\u003c/span\u003e authorizationTokenRequest \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAuthorizationTokenRequest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        AUTH0_CLIENT_ID\u003cspan\u003e,\u003c/span\u003e AUTH0_REDIRECT_URI\u003cspan\u003e,\u003c/span\u003e\n        issuer\u003cspan\u003e:\u003c/span\u003e AUTH0_ISSUER\u003cspan\u003e,\u003c/span\u003e\n        scopes\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;openid\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;profile\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;offline_access\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;email\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003efinal\u003c/span\u003e AuthorizationTokenResponse\u003cspan\u003e?\u003c/span\u003e result \u003cspan\u003e=\u003c/span\u003e\n          \u003cspan\u003eawait\u003c/span\u003e appAuth\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthorizeAndExchangeCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        authorizationTokenRequest\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eresult\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo construct the request, you can create \u003ccode\u003eAuthorizationTokenRequest\u003c/code\u003e object bypassing the mandatory \u003ccode\u003eclientID\u003c/code\u003e and \u003ccode\u003eredirectUrl\u003c/code\u003e parameters using the values of \u003ccode\u003e\u003cspan\u003eAUTH0_CLIENT_ID\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003eAUTH0_REDIRECT_URI\u003c/span\u003e\u003c/code\u003e respectively, and the value of \u003ccode\u003e\u003cspan\u003eAUTH0_ISSUER\u003c/span\u003e\u003c/code\u003e as the value for \u003ccode\u003eissuer\u003c/code\u003e to enable discovery.\u003c/p\u003e\u003cp\u003eIt would be best if you defined \u003ccode\u003escopes\u003c/code\u003e so that when the user allows them, you can perform actions on their behalf. Here are the scopes that we have requested in the code above:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eopenid\u003c/code\u003e: Perform an OpenID connect sign-in.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eprofile\u003c/code\u003e: Retrieve the user’s profile.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eoffline_access\u003c/code\u003e: Retrieve a Refresh Token for \u003ccode\u003eoffline_access\u003c/code\u003e from the application.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eemail\u003c/code\u003e: Retrieve the user’s email.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou will add more scopes later in this tutorial.\u003c/p\u003e\u003cp\u003eOnce the request is constructed, calling \u003ccode\u003eappAuth\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthorizeAndExchangeCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e starts a sign-in transaction. The authentication process will start, and upon completion, the user will return to the application with the \u003ccode\u003eAuthorizationTokenResponse\u003c/code\u003e, which is shown below and contains an Access Token, ID Token, and Refresh Token:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eAuthorizationTokenResponse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    String\u003cspan\u003e?\u003c/span\u003e accessToken\u003cspan\u003e,\u003c/span\u003e\n    String\u003cspan\u003e?\u003c/span\u003e refreshToken\u003cspan\u003e,\u003c/span\u003e\n    DateTime\u003cspan\u003e?\u003c/span\u003e accessTokenExpirationDateTime\u003cspan\u003e,\u003c/span\u003e\n    String\u003cspan\u003e?\u003c/span\u003e idToken\u003cspan\u003e,\u003c/span\u003e\n    String\u003cspan\u003e?\u003c/span\u003e tokenType\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eauthorizationAdditionalParameters\u003cspan\u003e,\u003c/span\u003e\n    Map\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e tokenAdditionalParameters\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"The-Access-Token--Refresh-Token--and-ID-Token\"\u003eThe Access Token, Refresh Token, and ID Token\u003c/h3\u003e\u003cp\u003eYou can use the Access Token to access APIs. Clients can’t decode this token, which is all right since it only means something to the API’s authorization server.\u003c/p\u003e\u003cp\u003eAs a security measure, the Access Token usually has a short time to live. There are different methods to keep it alive for a longer period. One way is to use Refresh Tokens, which re-authorize your users. If a Refresh Token is available, the app can use it to silently get a new Access Token. For this reason, the app will store Refresh Tokens, and for security reasons, it will securely store them.\u003c/p\u003e\u003cp\u003e🛠 I recommend defining a constant key for your Refresh Token. Add this to your \u003ccode\u003econstants\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/helpers/constants.dart\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e REFRESH_TOKEN_KEY \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;refresh_token\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhile the contents of the Access Token are opaque to the client, the\u003ccode\u003eAppAuth\u003c/code\u003e SDK validates the ID Token since it’s part of an OpenID Connect client’s responsibility. The app should decode the ID Token’s body to receive its JSON payload.\u003c/p\u003e\u003cp\u003e🛠 To get the ID Token’s payload, we’ll need to create a model. We’ll call it \u003ccode\u003eAuth0IdToken\u003c/code\u003e. Create a new file named \u003ccode\u003eauth0_id_token\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e in the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003emodels\u003c/code\u003e directory, where models go:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/models/auth0_id_token.dart\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:json_annotation/json_annotation.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003epart\u003c/span\u003e \u003cspan\u003e\u0026#39;auth0_id_token.g.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@JsonSerializable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuth0IdToken\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eAuth0IdToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003enickname\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eemail\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003epicture\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eupdatedAt\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eiss\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esub\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eaud\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eiat\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eexp\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eauthTime\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efinal\u003c/span\u003e String nickname\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String name\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String picture\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;updated_at\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String updatedAt\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efinal\u003c/span\u003e String iss\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e// In OIDC, \u0026#34;sub\u0026#34; means \u0026#34;subject identifier\u0026#34;,\u003c/span\u003e\n  \u003cspan\u003e// which for our purposes is the user ID.\u003c/span\u003e\n  \u003cspan\u003e// This getter makes it easier to understand.\u003c/span\u003e\n  String \u003cspan\u003eget\u003c/span\u003e userId \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e sub\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String sub\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efinal\u003c/span\u003e String aud\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String email\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e int iat\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e int exp\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;auth_time\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e int\u003cspan\u003e?\u003c/span\u003e authTime\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e// this might be null for the first time login\u003c/span\u003e\n\n  \u003cspan\u003efactory\u003c/span\u003e Auth0IdToken\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efromJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eMap\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e json\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      _$\u003cspan\u003eAuth0IdTokenFromJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ejson\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  Map\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003etoJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e _$\u003cspan\u003eAuth0IdTokenToJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe ID Token is made up of \u003cem\u003eclaims\u003c/em\u003e, which are name/value pairs that contain either information about the user or meta-information about the Open ID Connect service. The \u003ccode\u003eAuth0IdToken\u003c/code\u003e model contains fields to contain the token’s claims, which are:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eiss\u003c/code\u003e: An identifier for the \u003cstrong\u003eiss\u003c/strong\u003euer of the response. Its value is an URL.\u003c/li\u003e\u003cli\u003e\u003ccode\u003esub\u003c/code\u003e: An identifier for the \u003cstrong\u003esub\u003c/strong\u003eject. In the case of our app, it’s the user’s ID. Since \u003ccode\u003esub\u003c/code\u003e is not an often-used term outside of Open ID Connect, we created a getter named \u003ccode\u003euserId\u003c/code\u003e that simply returns \u003ccode\u003esub\u003c/code\u003e’s value.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eaud\u003c/code\u003e: An identifier for the \u003cstrong\u003eaud\u003c/strong\u003eience — that is, whom the ID Token is intended for.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eiat\u003c/code\u003e: The time when JWT that makes up the token was issued (\u003ccode\u003eiat\u003c/code\u003e is short for “\u003cstrong\u003ei\u003c/strong\u003essued \u003cstrong\u003eat\u003c/strong\u003e).\u003c/li\u003e\u003cli\u003e\u003ccode\u003eexp\u003c/code\u003e: The \u003cstrong\u003eexp\u003c/strong\u003eiration time for the token. After this time, the token cannot be used.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe other fields — \u003ccode\u003enickname\u003c/code\u003e, \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003eemail\u003c/code\u003e, \u003ccode\u003epicture\u003c/code\u003e, and \u003ccode\u003eupdatedAt\u003c/code\u003e are for claims that contain specific information about the user.\u003c/p\u003e\u003cp\u003eThe \u003ccode\u003eAuth0IdToken\u003c/code\u003e class needs methods to convert data from the authentication server into an \u003ccode\u003eAuth0IdToken\u003c/code\u003e object and an \u003ccode\u003eAuth0IdToken\u003c/code\u003e object to JSON. You could write them manually, but it’s easier and less error-prone to generate them instead.\u003c/p\u003e\u003cp\u003eYou may have noticed these two lines at the start of the file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:json_annotation/json_annotation.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003epart\u003c/span\u003e \u003cspan\u003e\u0026#39;auth0_id_token.g.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\u003cli\u003eThe \u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e\u003c/code\u003e line brings in the \u003ccode\u003ejson_annotation\u003c/code\u003e library, which you’ll use to generate code to serialize and deserialize an object. The \u003ccode\u003e@\u003cspan\u003eJsonSerializable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e annotation in the code specifies these are \u003ccode\u003eAuth0IdToken\u003c/code\u003e objects that are to be serialized and deserialized.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003epart\u003c/code\u003e line specifies that the contents of the file \u003ccode\u003eauth0_id_token\u003cspan\u003e.\u003c/span\u003eg\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e belong to this file. The \u003ccode\u003eg\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e filename extension indicates that it’s a generated dart file.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 Run the following command to generate the JSON conversion methods for \u003ccode\u003eAuth0IdToken\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eflutter pub run build_runner build --delete-conflicting-outputs\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Once you have generated the JSON conversion methods, you can implement the \u003ccode\u003e\u003cspan\u003eparseIdToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method in the \u003ccode\u003eAuthService\u003c/code\u003e class by adding the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/auth_service.dart\u003c/span\u003e\n\n  Auth0IdToken \u003cspan\u003eparseIdToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eString idToken\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efinal\u003c/span\u003e parts \u003cspan\u003e=\u003c/span\u003e idToken\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esplit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003er\u0026#39;.\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eassert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eparts\u003cspan\u003e.\u003c/span\u003elength \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003efinal\u003c/span\u003e Map\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e json \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ejsonDecode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      utf8\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edecode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        base64Url\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edecode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          base64Url\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enormalize\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eparts\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003ereturn\u003c/span\u003e Auth0IdToken\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efromJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ejson\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow that you have the ID Token, you can get information about the user from the OpenID Connect endpoint for user details, which is \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eAUTH0_DOMAIN\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003euserinfo\u003c/code\u003e. \u003c/p\u003e\u003cp\u003eLet\u0026#39;s create another model, \u003ccode\u003eAuth0User\u003c/code\u003e, so that we can deserialize and serialize the data from the \u003ccode\u003euserinfo\u003c/code\u003e endpoint. \u003c/p\u003e\u003cp\u003e🛠 Create a file \u003ccode\u003eauth0_user\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e in the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003emodels\u003cspan\u003e/\u003c/span\u003e\u003c/code\u003e directory with the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/models/auth0_user.dart\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:json_annotation/json_annotation.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003epart\u003c/span\u003e \u003cspan\u003e\u0026#39;auth0_user.g.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@JsonSerializable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuth0User\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eAuth0User\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003enickname\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eemail\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003epicture\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eupdatedAt\u003cspan\u003e,\u003c/span\u003e\n    required \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esub\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String nickname\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String name\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String picture\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003e@JsonKey\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;updated_at\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String updatedAt\u003cspan\u003e;\u003c/span\u003e\n\n \u003cspan\u003e// userID getter to understand it easier\u003c/span\u003e\n  String \u003cspan\u003eget\u003c/span\u003e id \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e sub\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e String sub\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efinal\u003c/span\u003e String email\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efactory\u003c/span\u003e Auth0User\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efromJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eMap\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e json\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      _$\u003cspan\u003eAuth0UserFromJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ejson\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  Map\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003etoJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e _$\u003cspan\u003eAuth0UserToJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Like \u003ccode\u003eAuth0IdToken\u003c/code\u003e, \u003ccode\u003eAuth0User\u003c/code\u003e uses the \u003ccode\u003ejson_annotation\u003c/code\u003e library to generate code to serialize and deserialize its instances. Run the following command to generate that code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eflutter pub run build_runner build --delete-conflicting-outputs\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 This completes the model for Auth0 users, so let’s create a \u003ccode\u003e\u003cspan\u003egetUserDetails\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method for the \u003ccode\u003eAuthService\u003c/code\u003e class as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/auth_service.dart\u003c/span\u003e\n\n Future\u003cspan\u003e\u0026lt;\u003c/span\u003eAuth0User\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003egetUserDetails\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eString accessToken\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efinal\u003c/span\u003e url \u003cspan\u003e=\u003c/span\u003e Uri\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehttps\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      AUTH0_DOMAIN\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;/userinfo\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003efinal\u003c/span\u003e response \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e http\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      url\u003cspan\u003e,\u003c/span\u003e\n      headers\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;Authorization\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;Bearer $accessToken\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;getUserDetails ${response.body}\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e.\u003c/span\u003estatusCode \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ereturn\u003c/span\u003e Auth0User\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efromJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejsonDecode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e.\u003c/span\u003ebody\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ethrow\u003c/span\u003e \u003cspan\u003eException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;Failed to get user details\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 \u003ccode\u003e\u003cspan\u003egetUserDetails\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e uses Dart’s \u003ca href=\"https://pub.dev/packages/http\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003ehttp\u003c/code\u003e\u003c/a\u003e library, so add this \u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e\u003c/code\u003e statement at the top of the file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/auth_service.dart\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:http/http.dart\u0026#39;\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e http\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Since you will need to reuse \u003ccode\u003eidToken\u003c/code\u003e, \u003ccode\u003eprofile\u003c/code\u003e, and \u003ccode\u003eaccessToken\u003c/code\u003e throughout the application, it would be nice to store their values as members of \u003ccode\u003eAuthService\u003c/code\u003e to access them easily. Add these instance variables to \u003ccode\u003eAuthService\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/auth_service.dart\u003c/span\u003e\n\n  Auth0User\u003cspan\u003e?\u003c/span\u003e profile\u003cspan\u003e;\u003c/span\u003e\n  Auth0IdToken\u003cspan\u003e?\u003c/span\u003e idToken\u003cspan\u003e;\u003c/span\u003e\n  String\u003cspan\u003e?\u003c/span\u003e auth0AccessToken\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 You can create a simple method, \u003ccode\u003e\u003cspan\u003e_setLocalVariables\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, to store these local values. Add the following to \u003ccode\u003eAuthService\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/auth_service.dart\u003c/span\u003e\n\n  Future\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e_setLocalVariables\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eresult\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efinal\u003c/span\u003e bool isValidResult \u003cspan\u003e=\u003c/span\u003e\n        result \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e result\u003cspan\u003e.\u003c/span\u003eaccessToken \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e result\u003cspan\u003e.\u003c/span\u003eidToken \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eisValidResult\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      auth0AccessToken \u003cspan\u003e=\u003c/span\u003e result\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e;\u003c/span\u003e\n      idToken \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eparseIdToken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eresult\u003cspan\u003e.\u003c/span\u003eidToken\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      profile \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e \u003cspan\u003egetUserDetails\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eresult\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n      \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eresult\u003cspan\u003e.\u003c/span\u003erefreshToken \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eawait\u003c/span\u003e secureStorage\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewrite\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          key\u003cspan\u003e:\u003c/span\u003e REFRESH_TOKEN_KEY\u003cspan\u003e,\u003c/span\u003e\n          value\u003cspan\u003e:\u003c/span\u003e result\u003cspan\u003e.\u003c/span\u003erefreshToken\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n\n      \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#39;Success\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#39;Something is Wrong!\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf the Access Token and ID Token are available, it stores their values. If the Refresh Token is also available, it writes its value to secure storage, and that value is retrievable only with the Refresh Token key.\u003c/p\u003e\u003cp\u003e🛠 With the changes you have made, you can now update \u003ccode\u003eAuthService\u003c/code\u003e’s \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to return the response for a successful login. Update the method so that it looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/auth_service.dart\u003c/span\u003e\n\nFuture\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003efinal\u003c/span\u003e authorizationTokenRequest \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAuthorizationTokenRequest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        AUTH0_CLIENT_ID\u003cspan\u003e,\u003c/span\u003e\n        AUTH0_REDIRECT_URI\u003cspan\u003e,\u003c/span\u003e\n        issuer\u003cspan\u003e:\u003c/span\u003e AUTH0_ISSUER\u003cspan\u003e,\u003c/span\u003e\n        scopes\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;openid\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;profile\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;offline_access\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;email\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n      \u003cspan\u003efinal\u003c/span\u003e AuthorizationTokenResponse\u003cspan\u003e?\u003c/span\u003e result \u003cspan\u003e=\u003c/span\u003e\n          \u003cspan\u003eawait\u003c/span\u003e appAuth\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthorizeAndExchangeCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        authorizationTokenRequest\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n      \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e \u003cspan\u003e_setLocalVariables\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eresult\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eon\u003c/span\u003e PlatformException \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#39;User has cancelled or no internet!\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003ecatch\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ee\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#39;Unkown Error!\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can catch any exceptions and return a specific response based on their type to handle errors better.\u003c/p\u003e\u003ch3 id=\"Handling-the-app-s-initial-state\"\u003eHandling the app’s initial state\u003c/h3\u003e\u003cp\u003eThe only thing missing is handling the authentication state when the app is launched. You might want to be able to silently login and retrieve a new Access Token if a Refresh Token is available.\u003c/p\u003e\u003cp\u003e🛠 Let’s add a new method, \u003ccode\u003e\u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, to deal with the app’s initial state. Implement this method by adding the following to \u003ccode\u003eAuthService\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/auth_service.dart\u003c/span\u003e\n\n  Future\u003cspan\u003e\u0026lt;\u003c/span\u003ebool\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efinal\u003c/span\u003e storedRefreshToken \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e secureStorage\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eread\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ekey\u003cspan\u003e:\u003c/span\u003e REFRESH_TOKEN_KEY\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003estoredRefreshToken \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003efinal\u003c/span\u003e TokenResponse\u003cspan\u003e?\u003c/span\u003e result \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e appAuth\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003eTokenRequest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          AUTH0_CLIENT_ID\u003cspan\u003e,\u003c/span\u003e\n          AUTH0_REDIRECT_URI\u003cspan\u003e,\u003c/span\u003e\n          issuer\u003cspan\u003e:\u003c/span\u003e AUTH0_ISSUER\u003cspan\u003e,\u003c/span\u003e\n          refreshToken\u003cspan\u003e:\u003c/span\u003e storedRefreshToken\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003efinal\u003c/span\u003e String setResult \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e \u003cspan\u003e_setLocalVariables\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eresult\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003ereturn\u003c/span\u003e setResult \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#39;Success\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003ecatch\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ee\u003cspan\u003e,\u003c/span\u003e s\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;error on Refresh Token: $e - stack: $s\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e// logOut() possibly\u003c/span\u003e\n      \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e checks for a Refresh Token in secure storage and immediately returns \u003ccode\u003e\u003cspan\u003efalse\u003c/span\u003e\u003c/code\u003e if there isn’t one. However, if it finds a Refresh Token, \u003ccode\u003e\u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e passes the retrieved request token via a \u003ccode\u003eTokenRequest\u003c/code\u003e object to \u003ccode\u003eappAuth\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoken\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e in order to automatically get new access, ID, and Refresh Tokens without requiring the user to log in manually.\u003c/p\u003e\u003ch3 id=\"Enabling-login-on-the-home-screen\"\u003eEnabling login on the home screen\u003c/h3\u003e\u003cp\u003eNow that you have the underlying methods for login and initial setup, it’s time to implement similar methods for the app’s screens, whose code is in the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003escreens\u003cspan\u003e/\u003c/span\u003e\u003c/code\u003e directory. \u003c/p\u003e\u003cp\u003e🛠 The app’s home screen is implemented in the \u003ccode\u003eHomeScreen\u003c/code\u003e class, located in \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003escreens\u003cspan\u003e/\u003c/span\u003ehome\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e. Open that file and add this line to the other \u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e\u003c/code\u003e statements:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/home.dart\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:mjcoffee/services/auth_service.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow scroll past the \u003ccode\u003eHomeScreen\u003c/code\u003e class to the \u003ccode\u003e_HomeScreenState\u003c/code\u003e class. You’ll need to make some changes to this class.\u003c/p\u003e\u003cp\u003e🛠 The first set of changes is to the instance variables at the start of \u003ccode\u003e_HomeScreenState\u003c/code\u003e. Change them to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/home.dart\u003c/span\u003e\n\n    bool isProgressing \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    bool isLoggedIn \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    String errorMessage \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    String\u003cspan\u003e?\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 The \u003ccode\u003e\u003cspan\u003einitState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method is just below those variables. Right now, the only thing it does is call its counterpart in the superclass. Replace the \u003ccode\u003eimplement init action\u003c/code\u003e comments with a call to \u003ccode\u003e\u003cspan\u003einitAction\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e. The method should look like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/home.dart\u003c/span\u003e\n\n  \u003cspan\u003e@override\u003c/span\u003e\n  \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003einitState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003einitAction\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einitState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou’ll implement \u003ccode\u003e\u003cspan\u003einitAction\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e shortly.\u003c/p\u003e\u003cp\u003eFinally, look at the \u003ccode\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method, which defines the home screen’s user interface. Scroll through this method until you find this \u003ccode\u003e\u003cspan\u003eRow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e function call:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eRow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n  mainAxisAlignment\u003cspan\u003e:\u003c/span\u003e MainAxisAlignment\u003cspan\u003e.\u003c/span\u003ecenter\u003cspan\u003e,\u003c/span\u003e\n  children\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003eWidget\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eisProgressing\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003eCircularProgressIndicator\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003eisLoggedIn\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003eCommonButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        onPressed\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            CoffeeRouter\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epushReplacement\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eMenuScreen\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \u003cspan\u003e/// ----------------------\u003c/span\u003e\n            \u003cspan\u003e/// Implement login action\u003c/span\u003e\n            \u003cspan\u003e/// ----------------------\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        text\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;Login | Register\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eelse\u003c/span\u003e\n      \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;Welcome $name\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e// \u0026lt;Widget\u0026gt;[]\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Replace the \u003ccode\u003eImplement login section\u003c/code\u003e comments so that the \u003ccode\u003e\u003cspan\u003eRow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e function call in the \u003ccode\u003ebuild\u003c/code\u003e looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eRow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n  mainAxisAlignment\u003cspan\u003e:\u003c/span\u003e MainAxisAlignment\u003cspan\u003e.\u003c/span\u003ecenter\u003cspan\u003e,\u003c/span\u003e\n  children\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003eWidget\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eisProgressing\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003eCircularProgressIndicator\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003eisLoggedIn\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003eCommonButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        onPressed\u003cspan\u003e:\u003c/span\u003e loginAction\u003cspan\u003e,\u003c/span\u003e\n        text\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;Login | Register\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eelse\u003c/span\u003e\n      \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;Welcome $name\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e// \u0026lt;Widget\u0026gt;[]\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Now add these methods to \u003ccode\u003e_HomeScreenState\u003c/code\u003e, after the \u003ccode\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003esetSuccessAuthState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    isProgressing \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    isLoggedIn \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    name \u003cspan\u003e=\u003c/span\u003e AuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003eidToken\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  CoffeeRouter\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eMenuScreen\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003esetLoadingState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    isProgressing \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    errorMessage \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\nFuture\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003evoid\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eloginAction\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003esetLoadingState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e message \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e AuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003emessage \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#39;Success\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003esetSuccessAuthState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      isProgressing \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      errorMessage \u003cspan\u003e=\u003c/span\u003e message\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003einitAction\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003esetLoadingState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efinal\u003c/span\u003e bool isAuth \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e AuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eisAuth\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003esetSuccessAuthState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      isProgressing \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSome notes about these methods:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003einitAction\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e is called when the home screen is initiated and handles the case where the app has a Refresh Token.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003e\u003cspan\u003eRow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e function call in the \u003ccode\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method determines what the user sees based on their login status. When the user is logged in, the screen shows a welcome message containing the user’s name. When the user isn’t logged in, it shows a progress indicator if the login is in progress, or the “Login | Register” button otherwise.\u003c/li\u003e\u003cli\u003ePressing the “Login | Register” button causes the \u003ccode\u003e\u003cspan\u003eloginAction\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to be called.\u003c/li\u003e\u003cli\u003eA loading indicator will appear if the login is in progress.\u003c/li\u003e\u003cli\u003eA number of methods call \u003ccode\u003e\u003cspan\u003esetSuccessAuthState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, which set the home screen’s instance variables to the appropriate values and redirects the user to the proper screen. In case some operation fails, you can easily display an error message onscreen.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Logging-in\"\u003eLogging in\u003c/h3\u003e\u003cp\u003e🛠 If you’ve made it this far, you’ve done well, and it’s now time to see what you’ve achieved so far. Make sure your emulators or devices are active and stop any earlier versions of this app. Once you’ve done that, run the app using this command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eflutter run -d all --dart-define\u003cspan\u003e=\u003c/span\u003eAUTH0_DOMAIN\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003eYOUR DOMAIN\u003cspan\u003e]\u003c/span\u003e --dart-define\u003cspan\u003e=\u003c/span\u003eAUTH0_CLIENT_ID\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003eYOUR CLIENT ID\u003cspan\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce the app is loaded, tap on the \u0026#34;Login | Register\u0026#34; button.\u003c/p\u003e\u003cp\u003eOn iOS, when you run the app for the first time, you will see a prompt like this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/35URcfKhXm5Mw9H6UCEZMh/f60c8a3bf99f629b5fad6884c1c1d579/ASWebAuthenticationSession.png\" alt=\"Allowed callback URLs\"/\u003e\u003c/p\u003e\u003cp\u003eThis prompt is a result of iOS’ \u003ca href=\"https://developer.apple.com/documentation/authenticationservices/aswebauthenticationsession\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eASWebAuthenticationSession\u003c/code\u003e\u003c/a\u003e, a session where the user is authenticated through a web service. iOS is notifying the user that the app intends to log the user in using Auth0.\u003c/p\u003e\u003cp\u003eIf you tap “Continue” and all goes well, you will see the \u003ca href=\"https://auth0.com/docs/universal-login\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Universal Login page\u003c/a\u003e, shown below (the Android version is on the left, and the iOS version is on the right): \u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4XJ2EMjdhToaGmbQfYrSq5/a1273bdef7feacf4bdc82de2d7ef3379/auth0-login.png\" alt=\"Allowed callback URLs\"/\u003e\u003c/p\u003e\u003cp\u003eNote that you can style this page or even choose other templates in the Auth0 dashboard. \u003ca href=\"https://www.youtube.com/playlist?list=PLCOnzDflrUceRLfHEkl-u2ipjsre6ZwjV\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eWatch this video to learn more about the theming of the login page in Auth0\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eOnce you log in, you will be redirected to the application, where you’ll be greeted by name. You’ll then be redirected to the menu screen, as specified by the final line in \u003ccode\u003e_HomeScreenState\u003c/code\u003e’s \u003ccode\u003e\u003cspan\u003esetSuccessAuthState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eCoffeeRouter\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eMenuScreen\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003eIf you signed up for a new account using the app, you might receive a confirmation email from Auth0 for the app.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e🛠 To confirm that the Refresh Token works, terminate the app, and run it again. The application will retrieve the Refresh Token from a secure store, get a new Access Token and ID Token, and then take you straight to the menu screen, bypassing the login process and not asking for your credentials.\u003c/p\u003e\u003ch2 id=\"Simple-Logout\"\u003eSimple Logout\u003c/h2\u003e\u003ch3 id=\"Layers-of-sessions\"\u003eLayers of sessions\u003c/h3\u003e\u003cp\u003eEvery login requires logout! It’s more complicated than it looks  since there are typically three-session layers you need to consider:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eApplication Session Layer:\u003c/strong\u003e This is the application, which in this case is the MJ Coffee app.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAuth0 Session Layer:\u003c/strong\u003e Auth0 maintains a session for each logged-in user and stores their information inside a cookie or in some other way.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eIdentity Provider Session Layer:\u003c/strong\u003e This is another service providing identity services, such as Facebook or Google.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eAfter users log out, you can redirect users to a specific URL. You need to register the redirect URL in your tenant or application settings.\u003c/p\u003e\u003cp\u003eOne of the parameters for OIDC authentication requests is called \u003ccode\u003eprompt\u003c/code\u003e, which specifies how the user should be prompted for reauthentication and consent. It also makes it easy to clear sessions. \u003c/p\u003e\u003cp\u003e\u003ccode\u003eprompt\u003c/code\u003e takes a list that can contain any combination of these values:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003enone\u003c/code\u003e\u003c/strong\u003e: Do not display any authentication or consent user interface pages.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003elogin\u003c/code\u003e\u003c/strong\u003e: Ignore any existing session and require the user to log in.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003econsent\u003c/code\u003e\u003c/strong\u003e: Ask the user for consent before returning information to the app.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eselect_account\u003c/code\u003e\u003c/strong\u003e: Show a prompt asking the user to select a user account. Useful in cases where the user has multiple accounts.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 Luckily, \u003ccode\u003eprompt\u003c/code\u003e is supported in the \u003ccode\u003eAppAuth\u003c/code\u003e SDK. In the \u003ccode\u003eAuthService\u003c/code\u003e class (located in \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003eservices\u003cspan\u003e/\u003c/span\u003eauth_service\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e) locate the \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method, where you have constructed \u003ccode\u003eAuthorizationTokenRequest\u003c/code\u003e. Change your call to the \u003ccode\u003eAuthorizationTokenRequest\u003c/code\u003e constructor so that it includes \u003ccode\u003elogin\u003c/code\u003e as a \u003ccode\u003eprompt\u003c/code\u003e value:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/auth_service.dart\u003c/span\u003e\n\n\u003cspan\u003efinal\u003c/span\u003e authorizationTokenRequest \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAuthorizationTokenRequest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n  AUTH0_CLIENT_ID\u003cspan\u003e,\u003c/span\u003e\n  AUTH0_REDIRECT_URI\u003cspan\u003e,\u003c/span\u003e\n  issuer\u003cspan\u003e:\u003c/span\u003e AUTH0_ISSUER\u003cspan\u003e,\u003c/span\u003e\n  scopes\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;openid\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;profile\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;offline_access\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;email\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  promptValues\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;login\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Remove-the-Refresh-Token\"\u003eRemove the Refresh Token\u003c/h3\u003e\u003cp\u003eThanks to the Refresh Token, the user should be able to switch to another app or even close it and then return to MJ Coffee without having to re-authenticate because they’re still logged in. Logging out implies that the user is done with the app for now. The next time someone uses the app, they should be required to log in. This is done by removing the Refresh Token.\u003c/p\u003e\u003cp\u003e🛠 To remove the Refresh Token, we’ll need to remove the Refresh Token key from secure storage. Add this \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to \u003ccode\u003eAuthService\u003c/code\u003e, just after the \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/services/auth_service.dart\u003c/span\u003e\n\nFuture\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003evoid\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eawait\u003c/span\u003e secureStorage\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edelete\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ekey\u003cspan\u003e:\u003c/span\u003e REFRESH_TOKEN_KEY\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe next time the user runs the app, they’ll be sent to the home screen and its login button since the app no longer has a Refresh Token and hence no way to authenticate automatically. \u003c/p\u003e\u003cp\u003eWhile this is approach is sufficient for the MJ Coffee app, I would like to mention that you can also manually call logout endpoints and pass necessary parameters, and shown in the example below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Example:\u003c/span\u003e\n\nFuture\u003cspan\u003e\u0026lt;\u003c/span\u003ebool\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eawait\u003c/span\u003e secureStorage\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edelete\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ekey\u003cspan\u003e:\u003c/span\u003e REFRESH_TOKEN_KEY\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003efinal\u003c/span\u003e url \u003cspan\u003e=\u003c/span\u003e Uri\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehttps\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      AUTH0_DOMAIN\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;/v2/logout\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#39;client_id\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e AUTH0_CLIENT_ID\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#39;federated\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e//\u0026#39;returnTo\u0026#39;: \u0026#39;YOUR_RETURN_LOGOUT_URL\u0026#39;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003efinal\u003c/span\u003e response \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e http\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      url\u003cspan\u003e,\u003c/span\u003e\n      headers\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;Authorization\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;Bearer $auth0AccessToken\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;logout: ${response.request} ${response.statusCode} ${response.body}\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003ereturn\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003estatusCode \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFor more information, you can read \u003ca href=\"https://auth0.com/docs/logout\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0’s documentation on logout.\u003c/a\u003e\u003c/p\u003e\u003cp\u003e🛠 Let’s enable the “Logout” button. It is on the profile screen, which is implemented by the \u003ccode\u003eProfileScreen\u003c/code\u003e class (located in \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003escreens\u003cspan\u003e/\u003c/span\u003eprofile\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e). In the \u003ccode\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method, locate the   “Logout” button and its \u003ccode\u003eonPressed\u003c/code\u003e parameter. Replace the “Perform logout” comments so that the call to the \u003ccode\u003e\u003cspan\u003ePadding\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e function looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /lib/screens/profile.dart\u003c/span\u003e\n\n\u003cspan\u003ePadding\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n  padding\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003econst\u003c/span\u003e EdgeInsets\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esymmetric\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehorizontal\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e30\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  child\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCommonButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    onPressed\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003eawait\u003c/span\u003e AuthService\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      CoffeeRouter\u003cspan\u003e.\u003c/span\u003einstance\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epushReplacement\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eHomeScreen\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    text\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;Logout\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhen the user presses “Logout”, the \u003ccode\u003eAuthService\u003c/code\u003e instance’s \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e is called and the user is redirected to the home screen.\u003c/p\u003e\u003cp\u003e🛠 Since you’re making use of \u003ccode\u003eAuthService\u003c/code\u003e’s \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method, you’ll have to import its file. Add the following to the \u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e\u003c/code\u003e statements at the top of \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003elib\u003cspan\u003e/\u003c/span\u003escreens\u003cspan\u003e/\u003c/span\u003eprofile\u003cspan\u003e.\u003c/span\u003edart\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;package:mjcoffee/services/auth_service.dart\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Restart your application, go to the \u003cstrong\u003eProfile\u003c/strong\u003e screen and log out. You’ll be sent back to the home screen. You will have to log in to use the app again.\u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eCongratulations! You have just integrated Auth0-powered login and logout into the MJ Coffee app.\u003c/p\u003e\u003cp\u003eIn an upcoming section, you will continue to add authentication features to the app. You’ll learn more about Refresh Token rotation, managing the branding that appears in the login box, roles and adding social login via Apple and Google accounts.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.",
      "date_published": "2021-10-04T17:12:00Z",
      "author": {
        "name": "Authentication vs. authorization"
      }
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-2-refresh-tokens-social-logins-more/",
      "title": "Flutter Authentication and Authorization with Auth0, Part 2: Refresh Tokens, Social Logins, and More",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIn the exercise from the previous section, you added Auth0 authentication to an existing Flutter app. This added a username/password authentication flow to the app. You also gave the app the ability to request and submit refresh tokens, which enhance the user experience by not requiring the user to authenticate every time they use the app.\u003c/p\u003e\u003cp\u003eThis section will expand on the app by examining some useful Auth0 features:\u003c/p\u003e\u003cul\u003e\u003cli\u003eRefresh token rotation\u003c/li\u003e\u003cli\u003eSocial logins\u003c/li\u003e\u003cli\u003eManaging your Auth0 account\u003c/li\u003e\u003c/ul\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eLook for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Add-Refresh-Token-Rotation\"\u003eAdd Refresh Token Rotation\u003c/h2\u003e\u003cp\u003eWhen the app makes an authentication request to Auth0’s authentication server, it includes the \u003ccode\u003eoffline_access\u003c/code\u003e scope. This causes the authentication server to issue a refresh token, which the app can use to re-authenticate without requiring the user to log in again. The app stores this token in the device’s secure storage.\u003c/p\u003e\u003cp\u003eWhile this enhances the app’s user experience, it also introduces risk. The refresh token is long-lived, and the app could use it as a “lifetime pass” to endlessly request new access tokens and keep the user logged in forever.\u003c/p\u003e\u003cp\u003eI highly recommend taking advantage of \u003cem\u003eRefresh Token Rotation\u003c/em\u003e and \u003cem\u003eAutomatic Reuse Detection\u003c/em\u003e to help mitigate this risk. With these features enabled, each refresh token can be used only once. When the app exchanges its refresh token for a new access token, the authentication server also returns a new refresh token and invalidates the old one. \u003c/p\u003e\u003cp\u003eLet’s enable these features!\u003c/p\u003e\u003cp\u003e🛠 Navigate to the \u003cstrong\u003eApplications\u003c/strong\u003e section of your Auth0 dashboard, select the \u003cstrong\u003eMJ Coffee\u003c/strong\u003e application, and then select its \u003cstrong\u003eSettings\u003c/strong\u003e tab. Scroll down the page to the \u003cstrong\u003eRefresh Token Rotation\u003c/strong\u003e section and turn on the \u003cstrong\u003eRotation\u003c/strong\u003e and \u003cstrong\u003eAbsolute Expiration\u003c/strong\u003e options:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6EizPZZnkGjxoAOle1Q8eL/e06c99f4a49413572736bbf0f470436c/rotation_and_absolute_expiration.png\" alt=\"Turn on the “Rotation” and “Absolute Expiration” options.\"/\u003e\u003c/p\u003e\u003cp\u003eIt is recommended that you issue a refresh token that expires after a preset lifetime. The refresh token’s lifetime can be extended each time one is used to get a new access token or access token/refresh token pair.\u003c/p\u003e\u003cp\u003eThere are two options for token lifetimes, and they can be set independently of each other:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eAbsolute Lifetime:\u003c/strong\u003e Enabling \u003cstrong\u003eAbsolute Expiration\u003c/strong\u003e sets a specified \u003cem\u003eabsolute lifetime\u003c/em\u003e for the application’s refresh tokens. Refresh tokens can be exchanged for new access tokens during this lifetime. Once the token’s age goes past its lifetime, the user will need to re-authenticate in order to get a new access token. If \u003cstrong\u003eAbsolute Expiration\u003c/strong\u003e is disabled, the refresh token has an indefinite absolute lifetime.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eInactivity Lifetime:\u003c/strong\u003e Enabling \u003cstrong\u003eInactivity Expiration\u003c/strong\u003e specified \u003cem\u003einactivity lifetime\u003c/em\u003e for the application’s refresh tokens. Refresh tokens can be exchanged for new access tokens if the user is active in the application during this lifetime. If the user is inactive in the application for a period longer than the inactivity lifetime, they will need to re-authenticate in order to get a new access token.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 Scroll to the bottom of the page and click the \u003cstrong\u003eSave Changes\u003c/strong\u003e button:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7KsLW4adJ6PNIPAI12al4g/f2c0e8abf6d7377595cfb7df11493e67/save_changes.png\" alt=\"The “Save Changes” button. The user is directed to click it.\"/\u003e\u003c/p\u003e\u003cp\u003eThese days, it\u0026#39;s pretty common to have login methods beyond the standard username/password combination. These include logging in with social media account, which will significantly enhance your users’ experiences.\u003c/p\u003e\u003cp\u003eImplementing these additional login methods and adding them to your authorization server is time-consuming and will come with many considerations and risks. \u003c/p\u003e\u003cp\u003eLuckily, Auth0 provides lots of integration with well-known third parties’ authentication systems, and even allows you to write your custom connections. Let\u0026#39;s add connections to both Google’s and Apple’s authentication systems.\u003c/p\u003e\u003cp\u003e🛠 In the Auth0 dashboard, select \u003cstrong\u003eAuthentication\u003c/strong\u003e in the left column menu, then select \u003cstrong\u003eSocial\u003c/strong\u003e. This takes you to the \u003cstrong\u003eSocial Connections\u003c/strong\u003e page, where you should click the \u003cstrong\u003eCreate Social Connection\u003c/strong\u003e button:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/61w1eXrbY7bGOpNo6ODbaU/da810c63bacd28cabf71e6dee4baa349/create_social_connection.png\" alt=\"The steps to create a new social connection in Auth0\"/\u003e\u003c/p\u003e\u003cp\u003eYou will be taken to the \u003cstrong\u003eNew Social Connection\u003c/strong\u003e page, which has a list of social login providers that integrate with Auth0. \u003c/p\u003e\u003cp\u003e🛠 Select \u003cstrong\u003eGoogle\u003c/strong\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2YdUxIkwmCTcc9QFlo584q/22f7fd0bf4bc1c93c4ebc555e21009f8/select_google.png\" alt=\"Selecting Google from all the available social connections\"/\u003e\u003c/p\u003e\u003cp\u003eYou will now be on the  \u003cstrong\u003eNew Google / Gmail Social Connection\u003c/strong\u003e page, which tells you what kind of user information is accessed by Google social login.\u003c/p\u003e\u003cp\u003e🛠 Click \u003cstrong\u003eContinue\u003c/strong\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2SQwtF0vqtXJucnGbE3DNS/baf5bd9d7103a6ecbd59b879bbe2aaf4/click_continue.png\" alt=\"Initial page for creating a new Google/Gmail social connection\"/\u003e\u003c/p\u003e\u003cp\u003eA new page with a number of fields will appear; this is the connection’s \u003cstrong\u003eSettings\u003c/strong\u003e tab. \u003c/p\u003e\u003cp\u003eAs long as you’re working in a development environment, you only need to fill the \u003cstrong\u003eName\u003c/strong\u003e field (which provides a name for this connection) and leave all the other fields empty. You can always use the default value in the \u003cstrong\u003eName\u003c/strong\u003e field:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7Jzsn4ryILOOdACN2urlSo/fdaa205ef09352c0b9aba0acbd592977/new_google_gmail_social_connection.png\" alt=\"New Google/Gmail social connection\"/\u003e\u003c/p\u003e\u003cp\u003eHowever, production apps require you to provide a \u003cstrong\u003eClient ID\u003c/strong\u003e and \u003cstrong\u003eClient Secret\u003c/strong\u003e (\u003ca href=\"https://auth0.com/docs/connections/social/google\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edoc\u003c/a\u003e) and specify the \u003cstrong\u003eAllowed Mobile Client IDs\u003c/strong\u003e. These topics will be covered in another video or article.\u003c/p\u003e\u003cp\u003e🛠 Create the Google/Gmail connection by scrolling to the bottom of the page and clicking \u003cstrong\u003eCreate\u003c/strong\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4S8AJUaj4xehVwVxhNDt5X/69eb88b8bec557d310d0e9d678fe9b7e/click_create.png\" alt=\"Creating the Google/Gmail connection\"/\u003e\u003c/p\u003e\u003cp\u003eThis will create the connection, and you’ll be taken to its \u003cstrong\u003eApplications\u003c/strong\u003e tab. You’ll see a list of your applications, which will allow you to enable the Google/Gmail connection for any of them. Enable the connection for the \u003cem\u003eMJ Coffee\u003c/em\u003e application:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/681u1RRcha4ABJJ5GRZivy/c7eea90ca4e19ec5ab3b333caa47e5ba/google-oauth2_applications_tab.png\" alt=\"The Google/OAuth2 applications tab\"/\u003e\u003c/p\u003e\u003cp\u003eYou may also set more permissions that the end-user will need to approve during authorization. These permissions depend on your application and what you want to do on behalf of the user. The \u003cem\u003eMJ Coffee\u003c/em\u003e app doesn’t need any extra permissions beyond the basic and extended profile.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/13CvLX8tQUTuqU6jpZ6K94/a0eaac13b8fc83fc11b3ca3f6651ebd9/google_permissions.png\" alt=\"Google Permission\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Make sure you sync user profile attributes at each login and hit the \u003cstrong\u003eSave\u003c/strong\u003e button.\u003c/p\u003e\u003cp\u003e🛠 Once again in the Auth0 dashboard, select \u003cstrong\u003eAuthentication\u003c/strong\u003e in the left column menu, then select \u003cstrong\u003eSocial\u003c/strong\u003e. This takes you to the \u003cstrong\u003eSocial Connections\u003c/strong\u003e page, where you should click the \u003cstrong\u003eCreate Social Connection\u003c/strong\u003e button:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1sohaZxDHuq8X8ZvT5nhvE/d2b7a7e2647708327f8fc6971ddb43a9/create_connection.png\" alt=\"The steps to create a new social connection in Auth0\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 This time, select \u003cstrong\u003eApple\u003c/strong\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3JAgbtDSNOsfYrjxkE1wCI/e51d80f7418706c29cd6e9dc06b93719/select_apple.png\" alt=\"Selecting Apple from all the available social connections\"/\u003e\u003c/p\u003e\u003cp\u003eYou will now be on the  \u003cstrong\u003eNew Apple Social Connection\u003c/strong\u003e page, which tells you what kind of user information is accessed by Apple social login.\u003c/p\u003e\u003cp\u003e🛠 Click \u003cstrong\u003eContinue\u003c/strong\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3zt2ntLwoHwp6bldLmOOsD/8db3e7f5c057d5782c7202b748013420/click_connect_-_apple.png\" alt=\"Continue\"/\u003e\u003c/p\u003e\u003cp\u003eAs long as you’re working in a development environment, you can leave the \u003cstrong\u003eClient ID\u003c/strong\u003e and \u003cstrong\u003eClient Secret Signing Key\u003c/strong\u003e fields empty. You \u003cem\u003ewill\u003c/em\u003e need proper keys for those fields when the app goes to production; \u003ca href=\"https://auth0.com/docs/connections/apple-siwa/set-up-apple\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis document covers that topic in more detail\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe \u003cstrong\u003eApple Team ID\u003c/strong\u003e and \u003cstrong\u003eKey ID\u003c/strong\u003e values are required:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2qNvT5zkxB1TY06ywkH5Re/7c46fa1399743de9e7bb05d1d804fab0/apple_dev.png\" alt=\"Google Permission\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003eTo get your Apple Team ID, you need an Apple Developer Account.\u003c/li\u003e\u003cli\u003eTo get a Key ID for your app, you need to register that app using your Apple Developer Account.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 Sign in to your Apple Developer Account, and go to the \u003cstrong\u003eMembership\u003c/strong\u003e page and make a note of your Team ID.\u003c/p\u003e\u003cp\u003e🛠 If you have a registered app, you can skip the following steps and jump to the list of tasks for creating a service ID. Otherwise, follow the steps below:\u003c/p\u003e\u003cul\u003e\u003cli\u003eIn the Apple Developer Portal, go to \u003cstrong\u003eCertificates, IDs, \u0026amp; Profiles \u0026gt; Identifiers\u003c/strong\u003e and click the blue “plus” icon next to \u003cstrong\u003eIdentifiers\u003c/strong\u003e to create a new App ID.\u003c/li\u003e\u003cli\u003eChoose \u003cstrong\u003eApp IDs\u003c/strong\u003e as the identifier type and click \u003cstrong\u003eContinue\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003eProvide a description and a Bundle ID in reverse-domain name format (e.g.: \u003ccode\u003ecom\u003cspan\u003e.\u003c/span\u003emydomain\u003cspan\u003e.\u003c/span\u003emjcoffee\u003c/code\u003e).\u003c/li\u003e\u003cli\u003eScroll down and check \u003cstrong\u003eSign In with Apple\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003eClick \u003cstrong\u003eContinue\u003c/strong\u003e, and then click \u003cstrong\u003eRegister\u003c/strong\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 Once the app is registered, it’s time to create a service ID:\u003c/p\u003e\u003cul\u003e\u003cli\u003eReturn to the \u003cstrong\u003eCertificates, IDs, \u0026amp; Profiles\u003c/strong\u003e section, and click the blue “plus” icon next to \u003cstrong\u003eIdentifiers\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003eChoose \u003cstrong\u003eService IDs\u003c/strong\u003e and select \u003cstrong\u003eContinue\u003c/strong\u003e. Fill in the description and identifier (e.g.: \u003ccode\u003ecom\u003cspan\u003e.\u003c/span\u003emydomain\u003cspan\u003e.\u003c/span\u003emjcoffee\u003c/code\u003e).\u003c/li\u003e\u003cli\u003eAfter checking \u003cstrong\u003eSign In with Apple\u003c/strong\u003e, select \u003cstrong\u003eConfigure\u003c/strong\u003e, and define your Web Domain (e.g.: \u003ccode\u003ecom\u003cspan\u003e.\u003c/span\u003emydomain\u003cspan\u003e.\u003c/span\u003emjcoffee\u003c/code\u003e) and your \u0026#34;Return URL\u0026#34;. Ensure that your Return URL is your Auth0 domain and that it follows this format: \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eYOUR_AUTH0_DOMAIN\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elogin\u003cspan\u003e/\u003c/span\u003ecallback\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5Wetff0Tutv55UXsYz0gKq/ab19cd3e48604aea314410d22d194982/callback_apple.png\" alt=\"Return URL apple sign in\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Finally: save, continue and then register the service.\u003c/p\u003e\u003ch4 id=\"Set-up-your-Client-Secret-Signing-Key\"\u003eSet up your Client Secret Signing Key\u003c/h4\u003e\u003cp\u003e🛠 Follow these steps:\u003c/p\u003e\u003cul\u003e\u003cli\u003eGo to \u003cstrong\u003eKeys\u003c/strong\u003e, which is located in the \u003cstrong\u003eCertificates, Identifiers, \u0026amp; Profiles\u003c/strong\u003e section of your Apple developer dashboard.\u003c/li\u003e\u003cli\u003eSelect the blue “plus” icon to add a new key.\u003c/li\u003e\u003cli\u003eEnter a \u003cstrong\u003eKey Name\u003c/strong\u003e and check the \u003cstrong\u003eSign In with Apple\u003c/strong\u003e option.\u003c/li\u003e\u003cli\u003eSelect \u003cstrong\u003eConfigure\u003c/strong\u003e to make sure the \u003cstrong\u003eChoose a Primary App ID\u003c/strong\u003e field is filled with the correct App ID.\u003c/li\u003e\u003cli\u003eSelect \u003cstrong\u003eSave, Continue\u003c/strong\u003e, and then \u003cstrong\u003eRegister\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003eOn the page to which you\u0026#39;re redirected after registering, make a note of the Key ID. Then download the key; it will have a \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003ep8\u003c/code\u003e filename extension.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 Go back to your Apple social connection settings and paste the Key ID. Ensure the proper attributes are selected (Name, Email) and sync user profile at each login is enabled. Hit \u003cstrong\u003eSave\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e🛠 Once you have created all your social connections and set them up correctly, go back to your applications. Go to the \u003cstrong\u003eConnections\u003c/strong\u003e tab and enable your newly-made social connections:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/59SCRbiX055qDcmTSNwPVl/fa175f974ceb43515893f24f7747d549/app_social_connections.png\" alt=\"app social connections\"/\u003e\u003c/p\u003e\u003cp\u003eAs you can see, adding and removing social connections for your apps is now as simple and flicking a switch.\u003c/p\u003e\u003cp\u003eOn the Flutter side, I have good news: you don’t need to implement anything there! \u003c/p\u003e\u003cp\u003eRestart the app, log out, then try to log in. You’ll see this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4b6BIaeZ8EHcN1a3MYVOrF/91c9039cf0d56051c99397d1a7524a3e/social_buttons_flutter.png\" alt=\"app social connections\"/\u003e\u003c/p\u003e\u003cp\u003eThat\u0026#39;s it! The login screen will now display social login buttons, and their login flows will be ready to use.\u003c/p\u003e\u003ch2 id=\"Branding\"\u003eBranding\u003c/h2\u003e\u003cp\u003eWhile it’s fine to use the default branding in development, you want the login page to be customized to your “look and feel” once the app’s in production.\u003c/p\u003e\u003cp\u003eAuth0 allows you to customize your login page through a number of options. You can change the look and feel of the login page by adding colors and logos, and you can customize the user notification part of the process as well: email templates, text messages, and so on. It’s all in the \u003cstrong\u003eBranding\u003c/strong\u003e section of the Auth0 dashboard:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7oq6VzFQ3nSUcStZTXvjQu/38d1e272f3bef751d9feaca704d580dc/branding.png\" alt=\"Auth0 branding\"/\u003e\u003c/p\u003e\u003ch3 id=\"Add-Roles\"\u003eAdd Roles\u003c/h3\u003e\u003cp\u003eYou may want to provide certain functionalities to the user based on their roles. This is easy with proper authorization server such as Auth0, which facilitates adding roles and specifying what users in each role are allowed to do. \u003c/p\u003e\u003cp\u003eIn the MJ Coffee app, there are three different roles:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eAdmin:\u003c/strong\u003e These are administrators, and they will have access to all the app’s functionality with full permissions.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eCustomer:\u003c/strong\u003e This is the default role for registered or logged-in users. They are limited to the app’s customer-facing features. You will automatically assign this role to all users upon registration or login, and you will learn how to do so later on in this tutorial.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eEmployee:\u003c/strong\u003e These are coffee shop employees. They can access the community screen to answer customer requests in the support chat, as well as other employee-facing features.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7nVdiU86TPCF1tLXrBg6ID/54a078bfe7d2382a6776c26adfc5cba4/roles.png\" alt=\"Auth0 roles\"/\u003e\u003c/p\u003e\u003cp\u003eYou can add more roles to the app as the need arises.\u003c/p\u003e\u003ch2 id=\"User-Management-in-Auth0\"\u003eUser Management in Auth0\u003c/h2\u003e\u003cp\u003eAuth0 provides the infrastructure to store users and their information on its cloud database.\u003c/p\u003e\u003cp\u003eFor the \u003cem\u003eMJ Coffee\u003c/em\u003e app, Auth0’s cloud database is sufficient. One of Auth0’s goals is to reduce the cost of extra infrastructure maintenance and cost.\u003c/p\u003e\u003cp\u003eYou can access users by selecting \u003cstrong\u003eUser Management\u003c/strong\u003e in the left column menu of the Auth0 dashboard. The \u003cstrong\u003eUsers\u003c/strong\u003e page allows you to create new users and manage your existing ones by changing their details, adding permissions and roles, or revoking their access.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3O0JDGBqXHmPfrKaEavP2D/260c804cf50a308e696ecd9a446ab4a9/users.png\" alt=\"Auth0 users\"/\u003e\u003c/p\u003e\u003cp\u003eWhen you open a user, you’ll see that Auth0 provides in-depth details about that user, including basic account data, metadata, their devices, and their history, which might be pretty helpful for debugging the application or investigating a particular user’s access activity, permissions, and roles.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/JcGTMspZ9hKtu9RAi4Oq9/257a692aa9a65cd12e96f645b56aafd1/user_roles.png\" alt=\"Auth0 user roles\"/\u003e\u003c/p\u003e\u003cp\u003eEach user account stores some basic information about the user: name, email address, the date and time when the account was created, and so on. \u003c/p\u003e\u003cp\u003eAdditional information can be attached to a user by adding to these metadata stores:  their user metadata, which is a key-value structure for storing information about the user. You can also store information in the user\u003cem\u003emetadata or manipulating `app\u003c/em\u003emetadata`, which helps to provide more information to the Flutter application while receiving user details.\u003c/p\u003e\u003ch2 id=\"Moving-Forward\"\u003eMoving Forward\u003c/h2\u003e\u003cp\u003eIn the next section of this tutorial, you will learn how to add real-time chat to the app.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.",
      "date_published": "2021-10-04T17:12:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/introducing-auth0-ctf/",
      "title": "Let the Hunt Begin: Introducing Auth0’s First Capture the Flag Event.",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eFrom companies to consumers, we believe everyone has a responsibility to make technology as secure as possible. For Auth0, this means building secure processes, technology, tools, and a culture of trust that puts people at the center. So this year we want you to join us for our first-ever custom Capture The Flag (CTF) with \u003ca href=\"https://www.hackthebox.eu/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eHack The Box\u003c/a\u003e from October 18th to October 25th.\u003c/p\u003e\u003ch2 id=\"But-Wait-a-Minute--What-Is-a-CTF-\"\u003eBut Wait a Minute, What Is a CTF?\u003c/h2\u003e\u003cp\u003eA CTF or Capture The Flag is a cybersecurity competitive game where you have to solve or hack different types of challenges to gain access to a string -the flag- which looks something like this: \u003ccode\u003e\u003cspan\u003eHTB\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003em1_f1rst_fl4g\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/p\u003e\u003cp\u003eYou enter that flag into Hack The Box and get points depending on the difficulty of the challenge. The team with the most points wins the game.\u003c/p\u003e\u003ch2 id=\"Sounds-Easy--Is-That-It-\"\u003eSounds Easy, Is That It?\u003c/h2\u003e\u003cp\u003eBut winning alone is not the goal in our case. We designed our CTF with developers getting started in the security world in mind. \u003c/p\u003e\u003cp\u003eThe benefit of learning cybersecurity principles and hacking techniques through a CTF is that you have certainty that the vulnerability exists in the challenge. When you go hacking in the real world, you don’t know whether the environment will be vulnerable or not. CTFs can also help you develop an attacker mindset, so the more you practice, the more secure and defensive your code will be.\u003c/p\u003e\u003cp\u003eRikaard Hosein, Offensive Security Engineer (i.e hacker) at Auth0, and the mastermind behind this event got started in cybersecurity thanks to CTFs. \u003cem\u003e“I solved my first cybersecurity web challenge when I was 15 and I was hooked. I kept on practicing CTFs in my spare time, and thanks to them I was able to transition from a developer role to Auth0’s offensive security engineering team. I designed the challenge concepts for this CTF to give you a little taste of what the CTF world is like, and to help you learn about cybersecurity”\u003c/em\u003e. \u003c/p\u003e\u003cp\u003eOur CTF is a Jeopardy-style one, meaning that the team that gets the most points wins. We have different types of challenges:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eWeb: \u003c/strong\u003ehere you’ll find mostly web-based vulnerability and also authentication/authorization issues (of course we had to include that!). Web development knowledge will come in very handy on these.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eCryptography:\u003c/strong\u003e here you can find some improperly implemented encryption schemes, different (and perhaps a bit uncommon 😉) ciphers, and more.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eReverse Engineering:\u003c/strong\u003e some challenges may include a lower-level programming language like Assembly, decompiling code, debugging by doing step-by-step execution.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePwn - Binary Exploitation: \u003c/strong\u003ethe 0s and 1s! Finding a vulnerability in a binary or executable file.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eMisc:\u003c/strong\u003e surprise\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eTo solve these challenges you can use a wide range of freely available tools and decipher websites. Rikaard recommends a simple tool belt: a great mindset (learn, have fun, keep trying), \u003ca href=\"https://portswigger.net/burp/communitydownload\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eburp suite community edition\u003c/a\u003e, your favorite scripting language, \u003ca href=\"https://www.gnu.org/software/gdb/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGDB\u003c/a\u003e and \u003ca href=\"https://hex-rays.com/ida-free/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eIDA\u003c/a\u003e. You may need other tools but finding those is also part of the challenge 😉.\u003c/p\u003e\u003ch2 id=\"I-m-Excited--How-Can-I-Join-\"\u003eI’m Excited. How Can I Join?\u003c/h2\u003e\u003cul\u003e\u003cli\u003eNo prior experience is required.\u003c/li\u003e\u003cli\u003eYou can participate either on your own or with a team of up to five people. We strongly recommend you find a team.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://ctf.hackthebox.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCreate an account in Hack The Box\u003c/a\u003e and sign up for the CTF starting now to get ready for October 18th. If you are part of a team, only the team captain needs to join the CTF (but everyone needs to have an account)\u003c/li\u003e\u003cli\u003eJoin Hack The Box’s \u003ca href=\"https://discord.gg/hackthebox\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ediscord channel\u003c/a\u003e\u003c/li\u003e\u003cli\u003eGet ready to hack your way to the podium.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Resources-to-Get-Started\"\u003eResources to Get Started\u003c/h2\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://help.hackthebox.eu/en/articles/5200851-gs-introduction-to-ctf\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eHack The Box Introduction to CTFs\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://ctf101.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCTF 101\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://ctftime.org/writeups\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCTF Write ups \u003c/a\u003e(solutions to previous worldwide events)\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://trailofbits.github.io/ctf/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCTF Field Guide by Trailofbits\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Auth0’s first custom CTF with Hack The Box in honor of October Security Awareness Month",
      "date_published": "2021-10-01T14:56:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/spring-boot-logs-aggregation-and-monitoring-using-elk-stack/",
      "title": "Spring Boot Logs Aggregation and Monitoring Using ELK Stack",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eTL;DR:\u003c/strong\u003e Logs are the most critical way for debugging. They can help us follow the different operations carried out by the various services of our system.\u003c/p\u003e\u003cp\u003eThis article will demonstrate how to integrate ELK Stack with a Spring Boot application for logs aggregation and monitoring in a centralized and scalable way.\nYou will also learn how to create custom index patterns through a Filebeat configuration and separate logs of different services of the same application by different indexes.\nThe application\u0026#39;s source code used in this tutorial is available in this \u003ca href=\"https://github.com/ApoorvTyagi/Spring-ELK\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGitHub repository\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"Introduction\"\u003eIntroduction\u003c/h2\u003e\u003cp\u003eHaving a good log monitoring infrastructure is a key feature to have while developing any software. For instance, in a microservices architecture, any single operation triggers a chain of API calls making it challenging to debug the entire application in case an error comes.\u003c/p\u003e\u003cp\u003eThis is where Logs act as essential information that allows us to investigate better and diagnose the errors. They can help sysadmins, support teams, and even developers to follow the different operations carried out by the different services of the system.\u003c/p\u003e\u003cp\u003eBut it becomes very complex to maintain this critical data in a distributed environment where many applications, services, and systems are running. As a solution for this problem, we\u0026#39;re going to look at the \u003cstrong\u003eELK stack\u003c/strong\u003e, a useful tool for centralized log aggregation and analysis.\u003c/p\u003e\u003cp\u003eThis article will demonstrate how you can integrate ELK Stack with a Spring Boot application to collect, process, store, and view the logs.\u003c/p\u003e\u003cp\u003eApart from this, while working with the ELK stack, the default action is to show all the logs of a particular application at a single place inside Kibana.\u003c/p\u003e\u003cp\u003eIn this article, you will also tackle this problem and learn how you can view the logs of multiple services separately that are running in parallel inside one single application.\u003c/p\u003e\u003ch2 id=\"Introducing-ELK-Stack\"\u003eIntroducing ELK Stack\u003c/h2\u003e\u003cp\u003eELK is a collection of three open-source applications - \u003ca href=\"https://www.elastic.co/elasticsearch/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eElasticsearch\u003c/a\u003e, \u003ca href=\"https://www.elastic.co/logstash/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLogstash\u003c/a\u003e, and \u003ca href=\"https://www.elastic.co/kibana/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eKibana\u003c/a\u003e from \u003ca href=\"https://www.elastic.co/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eElastic\u003c/a\u003e that accepts data from any source or format, on which you can then perform search, analysis, and visualize that data.\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003cstrong\u003eElasticsearch\u003c/strong\u003e — Elasticsearch stores and indexes the data. It is a NoSQL database based on Lucene\u0026#39;s open-source search engine. Since Elasticsearch is developed using Java, therefore, it can run on different platforms. One particular aspect where it excels is indexing streams of data such as logs.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eLogstash\u003c/strong\u003e — Logstash is a tool that integrates with a variety of deployments. It is used to collect, parse, transform, and buffer data from a variety of sources. The data collected by Logstash can be shipped to one or more targets like Elasticsearch.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eKibana\u003c/strong\u003e — Kibana acts as an analytics and visualization layer on top of Elasticsearch.  Kibana can be used to search, view, and interpret the data stored in Elasticsearch.\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"ELK-Installation---Other-Configurations\"\u003eELK Installation \u0026amp; Other Configurations\u003c/h2\u003e\u003cp\u003eNow that you understand what ELK means, let\u0026#39;s learn how to configure all three components to your local development environment:\u003c/p\u003e\u003ch3 id=\"Elasticsearch\"\u003eElasticsearch\u003c/h3\u003e\u003cp\u003eDownload the Elasticsearch zip file from the \u003ca href=\"https://www.elastic.co/downloads/elasticsearch\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eofficial elastic website\u003c/a\u003e and extract the zip file contents.\u003c/p\u003e\u003cp\u003eNext, you can start the Elasticsearch cluster by running \u003ccode\u003ebin\u003cspan\u003e/\u003c/span\u003eelasticsearch\u003c/code\u003e on Linux and macOS or \u003ccode\u003ebin\\elasticsearch\u003cspan\u003e.\u003c/span\u003ebat\u003c/code\u003e on Windows.\u003c/p\u003e\u003cp\u003eTo make sure the Elasticsearch cluster is up and working fine, open the browser at \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e9200\u003c/span\u003e\u003c/code\u003e. You must see something similar to this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;name\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;YOUR_PC_NAME\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;cluster_name\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;elasticsearch\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;cluster_uuid\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Qz59cUdbQRuRTVct1h3HiA\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;version\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;number\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;7.13.2\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;build_flavor\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;default\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;build_type\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;zip\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;build_hash\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;4d960a0733be83dd2543ca018aa4ddc42e956800\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;build_date\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;2021-06-10T21:01:55.251515791Z\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;build_snapshot\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;lucene_version\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;8.8.2\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;minimum_wire_compatibility_version\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;6.8.0\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;minimum_index_compatibility_version\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;6.0.0-beta1\u0026#34;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;tagline\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;You Know, for Search.\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Kibana\"\u003eKibana\u003c/h3\u003e\u003cp\u003eSetting up Kibana is similar to Elasticsearch. Just download the latest version application from the \u003ca href=\"https://www.elastic.co/downloads/kibana\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eofficial website\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eTo start Kibana, run \u003ccode\u003ebin\u003cspan\u003e/\u003c/span\u003ekibana\u003c/code\u003e on Linux and macOS or \u003ccode\u003ebin\u003cspan\u003e/\u003c/span\u003ekibana\u003cspan\u003e.\u003c/span\u003ebat\u003c/code\u003e on Windows.\u003c/p\u003e\u003cp\u003eBy default, Kibana listens on port 5601. If you go to \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e5601\u003c/span\u003e\u003c/code\u003e, you should be redirected to the Kibana home page:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7AHCnDDJCuJoGdIeu9kEme/27f2716e95dc611dbd0f69d79fe9a6e4/elk_01.png\" alt=\"Kibana_Start\"/\u003e\u003c/p\u003e\u003ch3 id=\"Logstash\"\u003eLogstash\u003c/h3\u003e\u003cp\u003eDownload and extract the latest version of Logstash from \u003ca href=\"https://www.elastic.co/downloads/logstash\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eofficial Logstash downloads\u003c/a\u003e\u003c/p\u003e\u003cp\u003eHere, inside the \u003ccode\u003ebin\u003c/code\u003e folder, you need to create one configuration(.conf) file. For instance, in this case, you will be creating \u003ccode\u003elogstash\u003cspan\u003e.\u003c/span\u003econf\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eA Logstash configuration consists of 3 components:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e1. Input\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThe input section in the configuration file defines the name and the absolute path of the file from where data has to be fetched. In your case, it will be from the log file generated by the spring boot application.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e2. Filter\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThe filter section defines what processing you want to apply to the data.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e3. Output\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThe output section defines the target where you want to send the data (elasticsearch, for example).\u003c/p\u003e\u003cp\u003eSo your \u003ccode\u003elogstash\u003cspan\u003e.\u003c/span\u003econf\u003c/code\u003e file should look similar to this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003einput \u003cspan\u003e{\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\n\nfilter \u003cspan\u003e{\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\noutput \u003cspan\u003e{\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the further section, you will be making the changes in this file to pass the Spring Boot application logs to elasticsearch.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eTo run the logstash configuration file, use command: \u003ccode\u003elogstash \u003cspan\u003e-\u003c/span\u003ef \u003cspan\u003e\u0026lt;\u003c/span\u003efile\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003econf\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eApart from these, the other prerequisites required to follow this tutorial are:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://www.oracle.com/in/java/technologies/javase-jdk11-downloads.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJava 11\u003c/a\u003e or later version\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eApache Maven\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.postman.com/downloads/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ePostman App\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eAlso, this tutorial requires you have a basic understanding of how REST APIs work in Spring Boot.\u003c/p\u003e\u003ch2 id=\"Creating-a-Spring-Boot-Application\"\u003eCreating a Spring Boot Application\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s now begin with creating the microservice. You will be using Spring Boot to create the REST APIs, and then you\u0026#39;ll integrate it with the ELK stack that you saw above.\u003c/p\u003e\u003cp\u003eTo start with Spring Boot, you can create a basic project using the \u003ca href=\"https://start.spring.io/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring Boot Initializr\u003c/a\u003e. \u003c/p\u003e\u003cp\u003eSelect Maven project and Java language. For the Spring Boot version, select \u003ccode\u003e\u003cspan\u003e2.5\u003c/span\u003e\u003cspan\u003e.4\u003c/span\u003e\u003c/code\u003e. You will also have to add the \u003ccode\u003espring\u003cspan\u003e-\u003c/span\u003eboot\u003cspan\u003e-\u003c/span\u003estarter\u003cspan\u003e-\u003c/span\u003eweb\u003c/code\u003e dependency.\u003c/p\u003e\u003cp\u003eNext, fill in the project metadata. Set group as \u003ccode\u003ecom\u003cspan\u003e.\u003c/span\u003edemo\u003c/code\u003e, artifact and name as \u003ccode\u003e\u003cspan\u003eELK\u003c/span\u003e\u003c/code\u003e, package as \u003ccode\u003ecom\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eELK\u003c/span\u003e\u003c/code\u003e. Last but not least, enter a short description and click the \u003ccode\u003egenerate\u003c/code\u003e button.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2YRj4WBbKsNyC8w1ebSQdc/5a8d316ff646df959f549f712e3449e8/elk_02.png\" alt=\"Spring\"/\u003e\u003c/p\u003e\u003cp\u003eOpen the project folder in your favorite IDE and open the \u003ccode\u003epom\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e file.\u003c/p\u003e\u003cp\u003eAdd the following code to the \u003ccode\u003epom\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e to configure the extra dependencies that you are going to use in this Spring Boot project:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eproject\u003c/span\u003e \u003cspan\u003exmlns\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttp://maven.apache.org/POM/4.0.0\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e\u003cspan\u003exmlns:\u003c/span\u003exsi\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttp://www.w3.org/2001/XMLSchema-instance\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003exsi:\u003c/span\u003eschemaLocation\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttp://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003emodelVersion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e4.0.0\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003emodelVersion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eparent\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eorg.springframework.boot\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003espring-boot-starter-parent\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e2.5.3\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003erelativePath\u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e\u0026lt;!-- lookup parent from repository --\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eparent\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003ecom.demo\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eELK\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e0.0.1-SNAPSHOT\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ename\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eELK\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ename\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edescription\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eLogs monitoring and aggregation using ELK stack\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edescription\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eproperties\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ejava.version\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e11\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ejava.version\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eproperties\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edependencies\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eorg.springframework.boot\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003espring-boot-starter-web\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eorg.springframework.boot\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003espring-boot-starter-test\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003escope\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003etest\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003escope\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eorg.json\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003ejson\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e20180130\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003ecom.googlecode.json-simple\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003ejson-simple\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e1.1\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edependencies\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ebuild\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eplugins\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eplugin\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eorg.springframework.boot\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003espring-boot-maven-plugin\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eplugin\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eplugins\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ebuild\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eproject\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, create a new package \u003ccode\u003ecom\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eELK\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003econtroller\u003c/code\u003e. Inside this, make a new Java file called \u003ccode\u003eELKController\u003cspan\u003e.\u003c/span\u003ejava\u003c/code\u003e to define the REST Controller for exposing the API endpoints. \u003c/p\u003e\u003cp\u003eYou will call these APIs to print the content to your log file.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003eELK\u003cspan\u003e.\u003c/span\u003econtroller\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003efasterxml\u003cspan\u003e.\u003c/span\u003ejackson\u003cspan\u003e.\u003c/span\u003edatabind\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eJsonNode\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003ejson\u003cspan\u003e.\u003c/span\u003esimple\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eJSONArray\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003eslf4j\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eLogger\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003eslf4j\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eLoggerFactory\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ebeans\u003cspan\u003e.\u003c/span\u003efactory\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAutowired\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003ebind\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eGetMapping\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003ebind\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003ePathVariable\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003ebind\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eRequestMapping\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003ebind\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eRestController\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eutil\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@RestController\u003c/span\u003e\n\u003cspan\u003e@RequestMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003evalue \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;/api\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eELKController\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003e// Initializing instance of Logger for Controller\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eLogger\u003c/span\u003e log \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eLoggerFactory\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetLogger\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eELKController\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eELKService\u003c/span\u003e service\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eRestService\u003c/span\u003e restService\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eELKController\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eELKService\u003c/span\u003e service\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eRestService\u003c/span\u003e restService\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eservice \u003cspan\u003e=\u003c/span\u003e service\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003erestService \u003cspan\u003e=\u003c/span\u003e restService\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@GetMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003evalue \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;/hello\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003ehelloWorld\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        log\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einfo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Inside Hello World Function\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eString\u003c/span\u003e response \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Hello World! \u0026#34;\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        log\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einfo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Response =\u0026gt; {}\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e response\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@GetMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003evalue \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;/Food-Details\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eJSONArray\u003c/span\u003e \u003cspan\u003efoodDetails\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        log\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einfo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Inside Food Detail Function\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e service\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetAllFoodDetails\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere you are exposing two endpoints which are: \u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003ehello\u003c/code\u003e — It returns the \u0026#34;Hello World!\u0026#34; message with the current timestamp.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003eFood\u003cspan\u003e-\u003c/span\u003eDetails\u003c/code\u003e — It gives the details of some food data, which is stored inside a JSON file.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eThe \u003ccode\u003eELKService\u003c/code\u003e class for that is as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003eELK\u003cspan\u003e.\u003c/span\u003eservices\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003ejson\u003cspan\u003e.\u003c/span\u003esimple\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eJSONArray\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003ejson\u003cspan\u003e.\u003c/span\u003esimple\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eJSONObject\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003ejson\u003cspan\u003e.\u003c/span\u003esimple\u003cspan\u003e.\u003c/span\u003eparser\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eJSONParser\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003ejson\u003cspan\u003e.\u003c/span\u003esimple\u003cspan\u003e.\u003c/span\u003eparser\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eParseException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003eslf4j\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eLogger\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003eslf4j\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eLoggerFactory\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003estereotype\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eService\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eio\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eFileReader\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eio\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eIOException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003enio\u003cspan\u003e.\u003c/span\u003echarset\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eStandardCharsets\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@Service\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eELKService\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003e// Initializing instance of Logger for Service\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eLogger\u003c/span\u003e log \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eLoggerFactory\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetLogger\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eELKService\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eJSONArray\u003c/span\u003e \u003cspan\u003egetAllFoodDetails\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n        log\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einfo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Fetching ALL food details...\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eJSONArray\u003c/span\u003e foodDetail \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eJSONArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eJSONParser\u003c/span\u003e parser \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eJSONParser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \u003cspan\u003eObject\u003c/span\u003e obj \u003cspan\u003e=\u003c/span\u003e parser\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eFileReader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;example.json\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eStandardCharsets\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eUTF_8\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \u003cspan\u003eJSONObject\u003c/span\u003e jsonObject \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eJSONObject\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e obj\u003cspan\u003e;\u003c/span\u003e\n            foodDetail \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eJSONArray\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e jsonObject\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;data\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003ecatch\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIOException\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e \u003cspan\u003eParseException\u003c/span\u003e e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            log\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eerror\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Error occurred in reading JSON file\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprintStackTrace\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e foodDetail\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd following is the content inside the \u003ccode\u003eexample\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e file which you are reading:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;data\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n    \n        \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;productName\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Fresh Avocados\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;image\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;🥑\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;from\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Spain\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;nutrients\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Vitamin B, Vitamin K\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;quantity\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;4 🥑\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;price\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;6.50\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;organic\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;A ripe avocado yields to gentle pressure when held in the palm and squeezed. \u0026#34;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;productName\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Cheese\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;image\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;🧀\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;from\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Portugal\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;nutrients\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Vitamin A, Calcium\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;quantity\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;250g\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;price\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;5.00\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;organic\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Creamy and distinct in flavor, goat cheese is a dairy product enjoyed around the world.\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;productName\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Broccoli\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;image\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;🥦\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;from\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Portugal\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;nutrients\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Vitamin C, Vitamin K\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;quantity\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;3 🥦\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;price\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;5.50\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;organic\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Broccoli is known to be a hearty and tasty vegetable which is rich in dozens of nutrients.\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Creating-Logback-Spring-xml\"\u003eCreating Logback-Spring.xml\u003c/h3\u003e\u003cp\u003eNext, you also have to configure the \u003ccode\u003elogback\u003cspan\u003e-\u003c/span\u003espring\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e file inside the \u003ccode\u003eresources\u003c/code\u003e folder of your project. It will be responsible for printing the logs in the console and to a log file. Logstash will use this log file to feed the data to Elasticsearch.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003econfiguration\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eappender\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eSTDOUT\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ech.qos.logback.core.ConsoleAppender\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eencoder\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003epattern\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e %d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003epattern\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eencoder\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eappender\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eappender\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eSAVE-TO-FILE\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ech.qos.logback.core.FileAppender\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003efile\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003elogs/application.log\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003efile\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eencoder\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ech.qos.logback.classic.encoder.PatternLayoutEncoder\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ePattern\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e %d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ePattern\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eencoder\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003elogger\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecom.demo.ELK\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eadditivity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003efalse\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003elevel\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003einfo\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eappender-ref\u003c/span\u003e \u003cspan\u003eref\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eSAVE-TO-FILE\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eappender-ref\u003c/span\u003e \u003cspan\u003eref\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eSTDOUT\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003elogger\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eroot\u003c/span\u003e \u003cspan\u003elevel\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eINFO\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eappender-ref\u003c/span\u003e \u003cspan\u003eref\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eSTDOUT\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eroot\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003econfiguration\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eLoggers\u003c/strong\u003e are responsible for capturing events and passing them to the appender. \u003cstrong\u003eAppenders\u003c/strong\u003e (also known as Handlers in some logging frameworks) are responsible for documenting the log events to a destination.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eHere inside appenders, you have defined a custom log pattern - \u003ccode\u003e\u003cspan\u003e%\u003c/span\u003ed\u003cspan\u003e{\u003c/span\u003edd\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eMM\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eyyyy \u003cspan\u003eHH\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003emm\u003cspan\u003e:\u003c/span\u003ess\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSSS\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e%\u003c/span\u003ethread\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e%\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e5\u003c/span\u003elevel \u003cspan\u003e%\u003c/span\u003elogger\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e36\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e%\u003c/span\u003e\u003cspan\u003eM\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003e%\u003c/span\u003emsg\u003cspan\u003e%\u003c/span\u003en\u003c/code\u003e. Let us first understand what each of these terms means:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e%d\u003c/strong\u003e – Returns the time when the log message occurred.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e%thread\u003c/strong\u003e – Returns the name of the thread in which the log message occurred.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e%-5level\u003c/strong\u003e – Returns the logging level of the log message (ERROR, WARN, INFO, DEBUG, and TRACE).\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e%logger{64}\u003c/strong\u003e – Returns the package with the package and class name where the log message occurred. The number 64 inside the brackets represents the maximum length of the package and class name combined. You can change this number as per your need.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e%M\u003c/strong\u003e – Returns the name of the method where the log message has occurred.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e%msg\u003c/strong\u003e – Returns the actual log message.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e%n\u003c/strong\u003e – Line break.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou have added two appenders here, one for logging in to the console and another one to log to a file.\u003c/p\u003e\u003cp\u003eWith that covered, let\u0026#39;s see how you can start your Spring Boot app server using CLI:\u003c/p\u003e\u003cul\u003e\u003cli\u003eSince you are using Maven, run the \u003ccode\u003emvn clean install\u003c/code\u003e command in a terminal window inside your project root directory. This creates a JAR(Java archive) file that contains a compressed version of .class files, audio files, image files, or other directories.\u003c/li\u003e\u003cli\u003eThis JAR will be created inside the \u003ccode\u003etarget\u003c/code\u003e folder in the root directory. Navigate to that directory and run \u003ccode\u003ejava \u003cspan\u003e-\u003c/span\u003ejar \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eJAR_NAME\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ejar \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eMAIN_CLASS_NAME\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e. For example - \u003cstrong\u003ejava -jar ELK-0.0.1-SNAPSHOT.jar com.demo.ELK.ElkApplication\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis will start your Spring Boot application on the default 8080 port:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e  \u003cspan\u003e.\u003c/span\u003e   ____          _            __ _ _\n \u003cspan\u003e/\u003c/span\u003e\\\\ \u003cspan\u003e/\u003c/span\u003e ___\u003cspan\u003e\u0026#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | \u0026#39;\u003c/span\u003e_ \u003cspan\u003e|\u003c/span\u003e \u003cspan\u003e\u0026#39;_| | \u0026#39;\u003c/span\u003e_ \\\u003cspan\u003e/\u003c/span\u003e _` \u003cspan\u003e|\u003c/span\u003e \\ \\ \\ \\\n \\\\\u003cspan\u003e/\u003c/span\u003e  ___\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e_\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e_\u003cspan\u003e|\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e  \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e)\u003c/span\u003e\n  \u0026#39;  \u003cspan\u003e|\u003c/span\u003e____\u003cspan\u003e|\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e__\u003cspan\u003e|\u003c/span\u003e_\u003cspan\u003e|\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e_\u003cspan\u003e|\u003c/span\u003e_\u003cspan\u003e|\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e_\\__\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003c/span\u003e\n \u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e_\u003cspan\u003e|=\u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e___\u003cspan\u003e/=\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e_\u003cspan\u003e/\u003c/span\u003e_\u003cspan\u003e/\u003c/span\u003e_\u003cspan\u003e/\u003c/span\u003e\n \u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Spring Boot \u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e                \u003cspan\u003e(\u003c/span\u003ev2\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e5.4\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\n\u003cspan\u003e05\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e11\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e57\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e16.090\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003emain\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  com\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eELK\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eElkApplication\u003cspan\u003e.\u003c/span\u003elogStarting \u003cspan\u003e-\u003c/span\u003e Starting ElkApplication using Java \u003cspan\u003e11.0\u003c/span\u003e\u003cspan\u003e.1\u003c/span\u003e on Vulcan \u003cspan\u003ewith\u003c/span\u003e \u003cspan\u003ePID\u003c/span\u003e \u003cspan\u003e18048\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eD\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\\Git Projects\\\u003cspan\u003eELK\u003c/span\u003e Logs Monitoring\\\u003cspan\u003eELK\u003c/span\u003e\\target\\classes started by ApoorvTyagi \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003eD\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\\Git Projects\\\u003cspan\u003eELK\u003c/span\u003e Logs Monitoring\\\u003cspan\u003eELK\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e05\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e11\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e57\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e16.098\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003emain\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  com\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eELK\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eElkApplication\u003cspan\u003e.\u003c/span\u003elogStartupProfileInfo \u003cspan\u003e-\u003c/span\u003e No active profile set\u003cspan\u003e,\u003c/span\u003e falling back to \u003cspan\u003edefault\u003c/span\u003e profiles\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003edefault\u003c/span\u003e\n\u003cspan\u003e05\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e11\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e57\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e17.573\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003emain\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  o\u003cspan\u003e.\u003c/span\u003es\u003cspan\u003e.\u003c/span\u003eb\u003cspan\u003e.\u003c/span\u003ew\u003cspan\u003e.\u003c/span\u003ee\u003cspan\u003e.\u003c/span\u003etomcat\u003cspan\u003e.\u003c/span\u003eTomcatWebServer\u003cspan\u003e.\u003c/span\u003einitialize \u003cspan\u003e-\u003c/span\u003e Tomcat initialized \u003cspan\u003ewith\u003c/span\u003e \u003cspan\u003eport\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003es\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e8080\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ehttp\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e05\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e11\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e57\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e17.589\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003emain\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  o\u003cspan\u003e.\u003c/span\u003ea\u003cspan\u003e.\u003c/span\u003ecoyote\u003cspan\u003e.\u003c/span\u003ehttp11\u003cspan\u003e.\u003c/span\u003eHttp11NioProtocol\u003cspan\u003e.\u003c/span\u003elog \u003cspan\u003e-\u003c/span\u003e Initializing ProtocolHandler \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;http-nio-8080\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e05\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e11\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e57\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e17.589\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003emain\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  o\u003cspan\u003e.\u003c/span\u003ea\u003cspan\u003e.\u003c/span\u003ecatalina\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003eStandardService\u003cspan\u003e.\u003c/span\u003elog \u003cspan\u003e-\u003c/span\u003e Starting service \u003cspan\u003e[\u003c/span\u003eTomcat\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e05\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e11\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e57\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e17.589\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003emain\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  o\u003cspan\u003e.\u003c/span\u003ea\u003cspan\u003e.\u003c/span\u003ecatalina\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003eStandardEngine\u003cspan\u003e.\u003c/span\u003elog \u003cspan\u003e-\u003c/span\u003e Starting Servlet engine\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eApache Tomcat\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e9.0\u003c/span\u003e\u003cspan\u003e.50\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e05\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e11\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e57\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e17.679\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003emain\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  o\u003cspan\u003e.\u003c/span\u003ea\u003cspan\u003e.\u003c/span\u003ec\u003cspan\u003e.\u003c/span\u003ec\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eC\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003eTomcat\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003elocalhost\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003elog \u003cspan\u003e-\u003c/span\u003e Initializing Spring embedded WebApplicationContext\n\u003cspan\u003e05\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e11\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e57\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e17.679\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003emain\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  o\u003cspan\u003e.\u003c/span\u003es\u003cspan\u003e.\u003c/span\u003eb\u003cspan\u003e.\u003c/span\u003ew\u003cspan\u003e.\u003c/span\u003es\u003cspan\u003e.\u003c/span\u003ec\u003cspan\u003e.\u003c/span\u003eServletWebServerApplicationContext\u003cspan\u003e.\u003c/span\u003eprepareWebApplicationContext \u003cspan\u003e-\u003c/span\u003e Root WebApplicationContext\u003cspan\u003e:\u003c/span\u003e initialization completed \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e1533\u003c/span\u003e ms\n\u003cspan\u003e05\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e11\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e57\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e18.143\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003emain\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  o\u003cspan\u003e.\u003c/span\u003ea\u003cspan\u003e.\u003c/span\u003ecoyote\u003cspan\u003e.\u003c/span\u003ehttp11\u003cspan\u003e.\u003c/span\u003eHttp11NioProtocol\u003cspan\u003e.\u003c/span\u003elog \u003cspan\u003e-\u003c/span\u003e Starting ProtocolHandler \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;http-nio-8080\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e05\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e11\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e57\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e18.321\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003emain\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  o\u003cspan\u003e.\u003c/span\u003es\u003cspan\u003e.\u003c/span\u003eb\u003cspan\u003e.\u003c/span\u003ew\u003cspan\u003e.\u003c/span\u003ee\u003cspan\u003e.\u003c/span\u003etomcat\u003cspan\u003e.\u003c/span\u003eTomcatWebServer\u003cspan\u003e.\u003c/span\u003estart \u003cspan\u003e-\u003c/span\u003e Tomcat started on \u003cspan\u003eport\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003es\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e8080\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ehttp\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ewith\u003c/span\u003e context path \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\n\u003cspan\u003e05\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e11\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e57\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e18.329\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003emain\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  com\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eELK\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eElkApplication\u003cspan\u003e.\u003c/span\u003elogStarted \u003cspan\u003e-\u003c/span\u003e Started ElkApplication \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e3.131\u003c/span\u003e \u003cspan\u003eseconds\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eJVM\u003c/span\u003e running \u003cspan\u003efor\u003c/span\u003e \u003cspan\u003e3.654\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn case you are using an IDE like IntelliJ IDEA, you can run the Spring Boot application by following these instructions:\u003c/p\u003e\u003cul\u003e\u003cli\u003eClick on \u003ccode\u003eAdd Configuration\u003c/code\u003e from the top menu bar\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2VWREZTi4rbVfGvv2varl/f4bcec85847f6b47b7daacbad03296e5/elk_03.png\" alt=\"IntelliJ_Start\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003eA new dialog box will open, click on \u003ccode\u003eAdd \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003erun\u003c/span\u003e configurations\u003c/code\u003e and select \u003ccode\u003eMaven\u003c/code\u003e from the dropdown\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/gAXnX1CalajGsuEZnNi2n/a45ea122ea20e219d458b9ad2ea13597/elk_04.png\" alt=\"Intellij_2\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003eGive your run configuration a name. The working directory will automatically get picked. You just have to put the command \u003ccode\u003espring\u003cspan\u003e-\u003c/span\u003eboot\u003cspan\u003e:\u003c/span\u003erun\u003c/code\u003e inside the command line and then click Apply and OK\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6MFpFMhOUDNL4O3CB3ntcL/ed25b8a5c5a584767897ce3ea81bcba5/elk_05.png\" alt=\"IntelliJ_3\"/\u003e\u003c/p\u003e\u003cp\u003eNow run the application, and the next thing you have to do is to hit the endpoints via the Postman app to generate the response and logs:\u003c/p\u003e\u003cul\u003e\u003cli\u003eGET: \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003eget\u003cspan\u003e/\u003c/span\u003ehello\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003ccode\u003eHello World\u003cspan\u003e!\u003c/span\u003e Tue Aug \u003cspan\u003e10\u003c/span\u003e \u003cspan\u003e23\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e22\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e01\u003c/span\u003e \u003cspan\u003eIST\u003c/span\u003e \u003cspan\u003e2021\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\u003cli\u003eGET: \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003eget\u003cspan\u003e/\u003c/span\u003eFood\u003cspan\u003e-\u003c/span\u003eDetails\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e[\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;image\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;🥑\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;quantity\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;4 🥑\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;price\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;6.50\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;A ripe avocado yields to gentle pressure when held in the palm and squeezed. \u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;from\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Spain\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;productName\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Fresh Avocados\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;organic\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;nutrients\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Vitamin B, Vitamin K\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;image\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;🧀\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;quantity\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;250g\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;price\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;5.00\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Creamy and distinct in flavor, goat cheese is a dairy product enjoyed around the world.\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;from\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Portugal\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;productName\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Cheese\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;organic\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;nutrients\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Vitamin A, Calcium\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;image\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;🥦\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;quantity\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;3 🥦\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;price\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;5.50\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Broccoli is known to be a hearty and tasty vegetable which is rich in dozens of nutrients.\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;from\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Portugal\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;productName\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Broccoli\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;organic\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;nutrients\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Vitamin C, Vitamin K\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you check your IDE console, you can see the logs being printed inside it:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eConsole Logs\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e10\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e08\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e23\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e22\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e01.368\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003ehttp\u003cspan\u003e-\u003c/span\u003enio\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eexec\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e6\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  c\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eELK\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003econtroller\u003cspan\u003e.\u003c/span\u003eELKController\u003cspan\u003e.\u003c/span\u003ehelloWorld \u003cspan\u003e-\u003c/span\u003e Inside Hello World Function\n\u003cspan\u003e10\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e08\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e23\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e22\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e01.376\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003ehttp\u003cspan\u003e-\u003c/span\u003enio\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eexec\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e6\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  c\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eELK\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003econtroller\u003cspan\u003e.\u003c/span\u003eELKController\u003cspan\u003e.\u003c/span\u003ehelloWorld \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003eResponse\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e Hello World\u003cspan\u003e!\u003c/span\u003e Sun Aug \u003cspan\u003e29\u003c/span\u003e \u003cspan\u003e09\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e34\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e56\u003c/span\u003e \u003cspan\u003eIST\u003c/span\u003e \u003cspan\u003e2021\u003c/span\u003e\n\u003cspan\u003e10\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e08\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e23\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e22\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e03.955\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003ehttp\u003cspan\u003e-\u003c/span\u003enio\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eexec\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e7\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  c\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eELK\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003econtroller\u003cspan\u003e.\u003c/span\u003eELKController\u003cspan\u003e.\u003c/span\u003efoodDetails \u003cspan\u003e-\u003c/span\u003e Inside Food Detail Function\n\u003cspan\u003e10\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e08\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e23\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e22\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e03.955\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003ehttp\u003cspan\u003e-\u003c/span\u003enio\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eexec\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e7\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  com\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eELK\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eservices\u003cspan\u003e.\u003c/span\u003eELKService\u003cspan\u003e.\u003c/span\u003egetAllFoodDetails \u003cspan\u003e-\u003c/span\u003e Fetching \u003cspan\u003eALL\u003c/span\u003e food details\u003cspan\u003e...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAlso, a new folder called \u003ccode\u003elogs\u003c/code\u003e is created inside the project root directory as specified in the \u003ccode\u003elogback\u003cspan\u003e-\u003c/span\u003espring\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e. Navigate inside this folder, and you will have your \u003ccode\u003eapplication\u003cspan\u003e.\u003c/span\u003elog\u003c/code\u003e file containing all the logs generated after hitting those two API endpoints:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eFile Logs\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4jojUsThftoW86uIMMzW0y/9043727cb170eb1eb8ecd42cbdf02334/elk_06.png\" alt=\"File_Logs_1\"/\u003e\u003c/p\u003e\u003ch2 id=\"Integrating-Logstash-Pipeline\"\u003eIntegrating Logstash Pipeline\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s go back to where you have your Logstash folder and open the \u003ccode\u003elogstash\u003cspan\u003e.\u003c/span\u003econf\u003c/code\u003e file.\u003c/p\u003e\u003cp\u003eAdd the following content to it:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003einput \u003cspan\u003e{\u003c/span\u003e\n  file \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003etype\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n    \u003cspan\u003epath\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;/ELK/logs/application.log\u0026#34;\u003c/span\u003e    # Make sure you provide the absolute path \u003cspan\u003eof\u003c/span\u003e the file here\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\nfilter \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003emessage\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e \u003cspan\u003e\u0026#34;\\tat\u0026#34;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    grok \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ematch\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;^(\\tat)\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003eadd_tag\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;stacktrace\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n \n\u003cspan\u003e}\u003c/span\u003e\n\noutput \u003cspan\u003e{\u003c/span\u003e\n  stdout \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ecodec\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e rubydebug\n  \u003cspan\u003e}\u003c/span\u003e\n \n  elasticsearch \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ehosts\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;localhost:9200\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eIn the input\u003c/strong\u003e, you have specified the type and the complete path of your file. Note that the value of the \u003ccode\u003epath\u003c/code\u003e must be absolute and cannot be relative.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eIn filters\u003c/strong\u003e, wherever in the logs you will find a Tab character(\\t) followed by \u0026#34;at\u0026#34;, you will tag that entry as a stacktrace of an error. \u003cem\u003eGrok\u003c/em\u003e is simply a filter plugin useful to parse and apply queries to unstructured data in Logstash.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eIn the output\u003c/strong\u003e, you have defined a response that prints to the STDOUT of the console running Logstash using output codecs.\u003c/p\u003e\u003cp\u003eAccording to the \u003ca href=\"https://www.elastic.co/guide/en/logstash/current/plugins-outputs-file.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eofficial docs\u003c/a\u003e:\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eOutput codecs are a convenient method for encoding your data before it leaves the output without needing a separate filter in your Logstash pipeline. Here, \u003ccode\u003erubydebug\u003c/code\u003e outputs event data using the ruby \u0026#34;awesome_print\u0026#34; library. This is the default codec for stdout.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eAnd finally, you have defined the \u003cstrong\u003eoutput target\u003c/strong\u003e  where these logs have to be sent from logstash, that is, Elasticsearch running locally on port 9200.\u003c/p\u003e\u003cp\u003eHit the API endpoints again to generate the logs:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003eget\u003cspan\u003e/\u003c/span\u003ehello\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003eget\u003cspan\u003e/\u003c/span\u003eFood\u003cspan\u003e-\u003c/span\u003eDetails\u003c/code\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eThis time you can see the logs printing in the logstash console as well. It means Logstash is successfully able to pick the Logs generated inside the \u003ccode\u003eapplication\u003cspan\u003e.\u003c/span\u003elog\u003c/code\u003e file: \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;@timestamp\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e2021\u003c/span\u003e-09-05T06:34:11.977Z,\n       \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;29-08-2021 09:34:56.368 [http-nio-8080-exec-6] INFO  c.demo.ELK.controller.ELKController.helloWorld - Inside Hello World Function\u003cspan title=\"\\r\"\u003e\\r\u003c/span\u003e\u0026#34;\u003c/span\u003e,\n          \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;log\u0026#34;\u003c/span\u003e,\n      \u003cspan\u003e\u0026#34;@version\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;1\u0026#34;\u003c/span\u003e,\n          \u003cspan\u003e\u0026#34;host\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;Vulcan\u0026#34;\u003c/span\u003e,\n          \u003cspan\u003e\u0026#34;path\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;D:/Git Projects/ELK Logs Monitoring/ELK/logs/application.log\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;@timestamp\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e2021\u003c/span\u003e-09-05T06:34:11.977Z,\n       \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;29-08-2021 09:34:56.376 [http-nio-8080-exec-6] INFO  c.demo.ELK.controller.ELKController.helloWorld - Response =\u0026gt; Hello World! Sun Aug 29 09:34:56 IST 2021\u003cspan title=\"\\r\"\u003e\\r\u003c/span\u003e\u0026#34;\u003c/span\u003e,\n          \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;log\u0026#34;\u003c/span\u003e,\n      \u003cspan\u003e\u0026#34;@version\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;1\u0026#34;\u003c/span\u003e,\n          \u003cspan\u003e\u0026#34;host\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;Vulcan\u0026#34;\u003c/span\u003e,\n          \u003cspan\u003e\u0026#34;path\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;D:/Git Projects/ELK Logs Monitoring/ELK/logs/application.log\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;@timestamp\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e2021\u003c/span\u003e-09-05T06:34:11.977Z,\n       \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;28-08-2021 20:33:24.598 [http-nio-8080-exec-1] INFO  c.demo.ELK.controller.ELKController.foodDetails - Inside Food Detail Function\u003cspan title=\"\\r\"\u003e\\r\u003c/span\u003e\u0026#34;\u003c/span\u003e,\n          \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;log\u0026#34;\u003c/span\u003e,\n      \u003cspan\u003e\u0026#34;@version\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;1\u0026#34;\u003c/span\u003e,\n          \u003cspan\u003e\u0026#34;host\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;Vulcan\u0026#34;\u003c/span\u003e,\n          \u003cspan\u003e\u0026#34;path\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;D:/Git Projects/ELK Logs Monitoring/ELK/logs/application.log\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;@timestamp\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e2021\u003c/span\u003e-09-05T06:34:11.977Z,\n       \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;28-08-2021 20:33:24.600 [http-nio-8080-exec-1] INFO  com.demo.ELK.services.ELKService.getAllFoodDetails - Fetching ALL food details...\u003cspan title=\"\\r\"\u003e\\r\u003c/span\u003e\u0026#34;\u003c/span\u003e,\n          \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;log\u0026#34;\u003c/span\u003e,\n      \u003cspan\u003e\u0026#34;@version\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;1\u0026#34;\u003c/span\u003e,\n          \u003cspan\u003e\u0026#34;host\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;Vulcan\u0026#34;\u003c/span\u003e,\n          \u003cspan\u003e\u0026#34;path\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;D:/Git Projects/ELK Logs Monitoring/ELK/logs/application.log\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Creating-Indexes-and-Viewing-Logs-in-Kibana\"\u003eCreating Indexes and Viewing Logs in Kibana\u003c/h3\u003e\u003cp\u003eTo access data from Elasticsearch, Kibana requires index patterns. As an analogy, in kibana, indexes are like the tables of a SQL database where you can store the data. Therefore, you must create an index pattern first to explore your data.\u003c/p\u003e\u003cp\u003eBut how do you know what index to create?\u003c/p\u003e\u003cp\u003eFor this, navigate to \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e9200\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e_cat\u003cspan\u003e/\u003c/span\u003eindices\u003c/code\u003e; it will display all the indexes that have ever been created inside elasticsearch. Here you will see an index name starting with \u0026#34;logstash-\u0026#34;. This is the index that has been created by Logstash.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4XTKYRUo8MtA57PcHZipQn/cc4b8667e6ea32b9696292b21a8b4f71/elk_07.png\" alt=\"Indexes_Half\"/\u003e\u003c/p\u003e\u003cp\u003eNext, go to \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e5601\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eapp\u003cspan\u003e/\u003c/span\u003emanagement\u003cspan\u003e/\u003c/span\u003ekibana\u003cspan\u003e/\u003c/span\u003eindexPatterns\u003c/code\u003e and click on \u003cstrong\u003ecreate index pattern\u003c/strong\u003e on the top right.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6Tfx0m2k17VGJAdcWa1f8c/78e7c84c9f5082261de82a97b3c2641e/elk_08.png\" alt=\"Create_Index\"/\u003e\u003c/p\u003e\u003cp\u003eType the index name as \u003ccode\u003elogstash\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003c/code\u003e and then click on next.\u003c/p\u003e\u003cp\u003eOptionally, in the next step, you can pick a field for filtering the data. You can choose \u003ccode\u003e@timestamp\u003c/code\u003e and then click on \u003cstrong\u003eCreate index pattern\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eAfter this, head on to the \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e5601\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eapp\u003cspan\u003e/\u003c/span\u003ediscover\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eSelect the index from the filters that you just created, and you\u0026#39;ll be able to see and analyze the logs.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6NZ3memL5i50CMouUEJOm4/da541dcbd31e093f0e69da9bf95dac62/elk_09.png\" alt=\"Kibana_Logs_1\"/\u003e\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eIf you don\u0026#39;t see data in Kibana, try changing the time filter to a larger range. By default, Kibana shows data for the last 15 minutes.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eClicking and expanding any one particular Log data and then selecting JSON will show the response in easier to read JSON format:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/wZYP9Z6aoBpOTujAHC2MM/6f8cce8b1094fa3d15e109eb604558d9/elk_10.png\" alt=\"Expand_Logs.png\"/\u003e\u003c/p\u003e\u003cp\u003eHere\u0026#39;s how you can integrate the ELK stack with your Spring Boot app to collect, process, and visualize logs at a centralized place.\u003c/p\u003e\u003ch2 id=\"Introducing-Beats\"\u003eIntroducing Beats\u003c/h2\u003e\u003cp\u003eUntil now, you have seen how to use the ELK stack for monitoring Spring Boot logs. Here, \u003cstrong\u003eLogstash was reading log files\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eNow, suppose you have to read data from log files from multiple file servers. \u003c/p\u003e\u003cp\u003eHow should you approach this?\u003c/p\u003e\u003cp\u003eOne simple option is adding Logstash on all the servers and passing the data to Elasticsearch. \u003c/p\u003e\u003cp\u003eBut there is one problem, \u003cstrong\u003eLogstash consumes a lot of resources\u003c/strong\u003e. This can cause performance issues for high-traffic deployments servers. So it is not the best solution to use Logstash on all file servers.\u003c/p\u003e\u003cp\u003eAs a solution to this, \u003cstrong\u003eBeats\u003c/strong\u003e were introduced. \u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003ca href=\"https://www.elastic.co/guide/en/beats/libbeat/current/beats-reference.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eBeats\u003c/a\u003e are open source data shippers that can be installed as agents on servers to send data directly to Elasticsearch or via Logstash, where it can be further processed and enhanced.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eThere are various Beats for different purposes:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eFilebeat\u003c/strong\u003e: For file monitoring\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eMetricbeat\u003c/strong\u003e: For metrics monitoring\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePacketbeat\u003c/strong\u003e: For network data monitoring\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eHeartbeat\u003c/strong\u003e: For uptime monitoring\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou will be specifically looking at Filebeat for this tutorial.\u003c/p\u003e\u003ch3 id=\"When-to-Use-Filebeat-and-When-to-Use-Logstash-\"\u003eWhen to Use Filebeat and When to Use Logstash?\u003c/h3\u003e\u003cp\u003eFilebeat is considered one of the best log shippers as it is lightweight, supports SSL \u0026amp; TLS encryption, and is extremely reliable. However, it cannot transform the logs into easy-to-analyze structured data. That\u0026#39;s the part performed by Logstash.\u003c/p\u003e\u003cp\u003eSo, if you require advanced log enhancement like filtering out unwanted bits of data or transforming data to another format, you have to go for Logstash.\u003c/p\u003e\u003cp\u003eBut if you are only interested in the timestamp and message content, you can choose Filebeat to act as your log aggregator, especially in a distributed environment. \u003c/p\u003e\u003cp\u003eFilebeat can either ship data directly to Elasticsearch or first to Logstash, and then Logstash can ingest this data to Elasticsearch. If you want to use the benefit of Filebeat and Logstash, you can very well go with the second approach.\u003c/p\u003e\u003ch3 id=\"Configuring-Filebeat\"\u003eConfiguring Filebeat\u003c/h3\u003e\u003cp\u003eYou can configure Filebeat similar to how you have done for other ELK stacks.\u003c/p\u003e\u003cp\u003eJust extract the zip file after downloading it from the \u003ca href=\"https://www.elastic.co/downloads/beats/filebeat\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eofficial Filebeat Downloads\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn Logstash, you have to modify the \u003ccode\u003elogstash\u003cspan\u003e.\u003c/span\u003econf\u003c/code\u003e file; similarly, here, you have to do the same thing in \u003ccode\u003efilebeat\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eTo run Filebeat, use the command \u003ccode\u003efilebeat\u003cspan\u003e.\u003c/span\u003eexe \u003cspan\u003e-\u003c/span\u003ec filebeat\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eLet\u0026#39;s now look at how you can incorporate it with your already existing Spring Boot project.\u003c/p\u003e\u003ch3 id=\"Integrating-Filebeat-with-Spring-Boot\"\u003eIntegrating Filebeat with Spring Boot\u003c/h3\u003e\u003cp\u003eOpen filebeat.yml and add the following content:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003efilebeat\u003cspan\u003e.\u003c/span\u003einputs\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003e-\u003c/span\u003e type\u003cspan\u003e:\u003c/span\u003e log\n    enabled\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n    paths\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eELK\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elogs\u003cspan\u003e/\u003c/span\u003eapplication\u003cspan\u003e.\u003c/span\u003elog  # Make sure to provide the absolute path \u003cspan\u003eof\u003c/span\u003e the file\n\noutput\u003cspan\u003e.\u003c/span\u003eelasticsearch\u003cspan\u003e:\u003c/span\u003e\n  hosts\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;localhost:9200\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n  protocol\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eIn the input\u003c/strong\u003e, you have to specify the complete path of the log file from where Filebeat will read the data. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eIn the output\u003c/strong\u003e, you have to define the hosts as the Elasticsearch and the port on which it is configured to listen. The protocol takes either HTTP or HTTPS as one of its values. It specifies where Elasticsearch is reachable. In this case, it is \u003cstrong\u003eHTTP\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eNow run the file with the command \u003ccode\u003efilebeat\u003cspan\u003e.\u003c/span\u003eexe \u003cspan\u003e-\u003c/span\u003ec filebeat\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eSimilar to what you have done for logstash, you need to create a filebeat index inside Kibana by getting the index name from the \u003ca href=\"http://localhost:9200/_cat/indices\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eElasticsearch indices list\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6P9fymE1Qm7knKCEGw9d4n/0aa6773c0e8942b652f6903ea8be8b6a/elk_11.png\" alt=\"Filebeat index\"/\u003e\u003c/p\u003e\u003cp\u003eHere, you will see a new index name starting with \u0026#34;filebeat-\u0026#34;. This is the index that has been created by Filebeat.\u003c/p\u003e\u003cp\u003eNext, navigate back to the \u003ca href=\"http://localhost:5601/app/management/kibana/indexPatterns\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eindex pattern management\u003c/a\u003e console in Kibana. \u003c/p\u003e\u003cp\u003eClick on the \u003ccode\u003eCreate index pattern\u003c/code\u003e and type the index name as \u003ccode\u003efilebeat\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eIn the next step, pick a field for filtering the data. You can again pick \u003ccode\u003e@timestamp\u003c/code\u003e and then click on \u003ccode\u003eCreate index pattern\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eAfter this, head on to the \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e5601\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eapp\u003cspan\u003e/\u003c/span\u003ediscover\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eSelect the \u003ccode\u003efilebeat\u003c/code\u003e index from the filters that you just created, and you\u0026#39;ll be able to see and analyze the logs.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6BPgSritTgGvxxh21mh7PP/25551fe01a44e68c90a422d3f9e484dd/elk_12.png\" alt=\"FilebeatConsole\"/\u003e\u003c/p\u003e\u003ch2 id=\"Combining-Filebeat-with-Logstash\"\u003eCombining Filebeat with Logstash\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s say you are using Filebeat as your log shipper, and you want to transform the data which you are getting from the log file before passing it to Elasticsearch. \u003c/p\u003e\u003cp\u003eSince Filebeat doesn\u0026#39;t allow any transformation to data, therefore, in this case, you have to use Logstash along with Filebeat.\u003c/p\u003e\u003cp\u003eLet us see how you can do that:\u003c/p\u003e\u003cul\u003e\u003cli\u003eChange the Filebeat output to Logstash and the port on which it is enabled, instead of Elasticsearch\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003ccode\u003efilebeat\u003cspan\u003e.\u003c/span\u003einputs\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003e-\u003c/span\u003e type\u003cspan\u003e:\u003c/span\u003e log\n    enabled\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n    paths\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eELK\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elogs\u003cspan\u003e/\u003c/span\u003eapplication\u003cspan\u003e.\u003c/span\u003elog  # Absolute path \u003cspan\u003eof\u003c/span\u003e the log file\n\n output\u003cspan\u003e.\u003c/span\u003elogstash\u003cspan\u003e:\u003c/span\u003e\n    hosts\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;localhost:5044\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e  # Output is now pointing to Logstash\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\u003cli\u003eModify the Logstash\u0026#39;s input to read data from Filebeat instead of picking it from a file\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003ccode\u003einput \u003cspan\u003e{\u003c/span\u003e\n      beats \u003cspan\u003e{\u003c/span\u003e  # Notice the input is now being taken \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;Beats\u0026#39;\u003c/span\u003e instead \u003cspan\u003eof\u003c/span\u003e a \u003cspan\u003e\u0026#39;file\u0026#39;\u003c/span\u003e\n        \u003cspan\u003etype\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;logs\u0026#34;\u003c/span\u003e\n        \u003cspan\u003eport\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;5044\u0026#34;\u003c/span\u003e \n      \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\nfilter \u003cspan\u003e{\u003c/span\u003e  # Adding the filters\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003emessage\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e \u003cspan\u003e\u0026#34;\\tat\u0026#34;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    grok \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ematch\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;^(\\tat)\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003eadd_tag\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;stacktrace\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n mutate \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereplace\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e\u0026#34;[host]\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;%{[host][name]}\u0026#34;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e \n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\noutput \u003cspan\u003e{\u003c/span\u003e  # Output pointing to Elasticsearch\n  stdout \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ecodec\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e rubydebug\n  \u003cspan\u003e}\u003c/span\u003e\n \n  elasticsearch \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ehosts\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;localhost:9200\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAlso, note that you have to add a new plugin(\u003ccode\u003emutate\u003c/code\u003e) inside the filters.\u003c/p\u003e\u003cp\u003eThis is because when you\u0026#39;re using Filebeat and Logstash together, Filebeat automatically adds a \u003ccode\u003ehost\u003c/code\u003e field with the type as an object to the logs events. At the same time, Logstash adds another \u003ccode\u003ehost\u003c/code\u003e field of its own to the log events. But this host is of the string type instead of an object.\u003c/p\u003e\u003cp\u003eBecause of these two different types of hosts, Elaticsearch will start throwing an error. To solve this, you need to decide whether you want to have the \u003ccode\u003ehost\u003c/code\u003e as an object or a string.\u003c/p\u003e\u003cp\u003eIn this case, we will go with the more straightforward way to replace the type of the host coming from Filebeat with a string type.\u003c/p\u003e\u003cp\u003eTo do this, you have to use the \u003ccode\u003eMutate\u003c/code\u003e filter plugin that allows you to perform general mutations on any field. You can replace and modify fields in your log events, as shown in the configuration above.\u003c/p\u003e\u003ch3 id=\"Verifying-the-Configurations\"\u003eVerifying the Configurations\u003c/h3\u003e\u003cp\u003eThe next thing you have to do is to verify if the provided configurations are correct or not. The process for that remains the same as you did earlier. The Only difference is that this time you need to run both the \u003ccode\u003efilebeat\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e \u0026amp; \u003ccode\u003elogstash\u003cspan\u003e.\u003c/span\u003econf\u003c/code\u003e together. \u003c/p\u003e\u003cp\u003eThe complete process for that is mentioned below:\u003c/p\u003e\u003cul\u003e\u003cli\u003eStart your \u003ccode\u003efilebeat\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e and \u003ccode\u003elogstash\u003cspan\u003e.\u003c/span\u003econf\u003c/code\u003e files. Also, make sure the predefined \u003ccode\u003elogsatsh\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003c/code\u003e index pattern is selected inside Kibana.\u003c/li\u003e\u003cli\u003eNext, just hit any one of the API endpoints again, and you will see the new logs coming in the Logstash console:\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;@timestamp\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e2021\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003eT16\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e55\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e40.112\u003c/span\u003eZ\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;09-09-2021 22:25:36.174 [http-nio-8080-exec-3] INFO  c.demo.ELK.controller.ELKController.helloWorld - Inside Hello World Function\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;input\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;logs\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;tags\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n       \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u0026#34;beats_input_codec_plain_applied\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;@version\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;1\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;ecs\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;version\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;1.8.0\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;host\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;Vulcan\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;agent\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;version\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;7.13.2\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;name\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;Vulcan\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;filebeat\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;ephemeral_id\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;94a3a0f3-165f-4308-8333-c1afbef0e016\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;hostname\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;Vulcan\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;f1b9d79a-9cf0-4a51-b12f-29c41ed05f60\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;@timestamp\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e2021\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e09\u003c/span\u003eT16\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e55\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e40.112\u003c/span\u003eZ\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;09-09-2021 22:25:36.177 [http-nio-8080-exec-3] INFO  c.demo.ELK.controller.ELKController.helloWorld - Response =\u0026gt; Hello World! Thu Sep 09 22:25:36 IST 2021\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;input\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;logs\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;tags\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n        \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u0026#34;beats_input_codec_plain_applied\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;@version\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;1\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;ecs\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;version\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;1.8.0\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;agent\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;version\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;7.13.2\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;name\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;Vulcan\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;filebeat\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;hostname\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;Vulcan\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;ephemeral_id\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;94a3a0f3-165f-4308-8333-c1afbef0e016\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;f1b9d79a-9cf0-4a51-b12f-29c41ed05f60\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;host\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#34;Vulcan\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\u003cli\u003eFinally, navigate to the \u003ca href=\"http://localhost:5601/app/discover#\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eKibana console\u003c/a\u003e, and you will see the logs coming under the Logstash index:\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4zsSRslO3w8pF9M7MqKCNT/00d2235fa3de83250371feabb58ae1eb/elk_13.png\" alt=\"Combined\"/\u003e\u003c/p\u003e\u003ch2 id=\"Separating-Logs-in-Kibana\"\u003eSeparating Logs in Kibana\u003c/h2\u003e\u003cp\u003eIn a large-scale distributed environment, there are high chances that you would have to run multiple interlinked applications. To visualize logs of all of them under a single index can sometimes become very cumbersome.\u003c/p\u003e\u003cp\u003eTo solve this, you can simply separate the logs of each application by different indexes depending on your use cases.\u003c/p\u003e\u003cp\u003eFor doing this, you have to differentiate between multiple log files using the property \u003ccode\u003efile\u003cspan\u003e.\u003c/span\u003etype\u003c/code\u003e inside the \u003ccode\u003efilebeat\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s look at that with an example - Suppose in your application you have a service that asynchronously calls a third-party API to fetch some data.\u003c/p\u003e\u003cp\u003eIt makes sense if you want to monitor the logs for this process in a separate index because it is independent of your application, and any failure occurring in this service should not be accounted inside the rest of the application\u0026#39;s failure.\u003c/p\u003e\u003cp\u003eTo achieve this, you will have to process the logs of this new service in a separate log file. So let\u0026#39;s first add another logger and appender inside the \u003ccode\u003elogback\u003cspan\u003e-\u003c/span\u003espring\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e file.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003econfiguration\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eappender\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eSTDOUT\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ech.qos.logback.core.ConsoleAppender\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eencoder\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003epattern\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e%d{dd-MM-yyyy HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %logger{36}.%M - %msg%n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003epattern\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eencoder\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eappender\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eappender\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eSAVE-TO-FILE\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ech.qos.logback.core.FileAppender\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003efile\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003elogs/application.log\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003efile\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eencoder\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ech.qos.logback.classic.encoder.PatternLayoutEncoder\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ePattern\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e%d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ePattern\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eencoder\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eappender\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eappender\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eOUTBOUND_LOGS\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ech.qos.logback.core.FileAppender\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003efile\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003elogs/application-outbound.log\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003efile\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eencoder\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ech.qos.logback.classic.encoder.PatternLayoutEncoder\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ePattern\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e%d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ePattern\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eencoder\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eappender\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003elogger\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecom.demo.ELK\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eadditivity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003efalse\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003elevel\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003einfo\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eappender-ref\u003c/span\u003e \u003cspan\u003eref\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eSAVE-TO-FILE\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eappender-ref\u003c/span\u003e \u003cspan\u003eref\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eSTDOUT\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003elogger\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003elogger\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eoutbound-logs\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eadditivity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003efalse\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003elevel\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003einfo\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eappender-ref\u003c/span\u003e \u003cspan\u003eref\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eOUTBOUND_LOGS\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eappender-ref\u003c/span\u003e \u003cspan\u003eref\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eSTDOUT\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003elogger\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eroot\u003c/span\u003e \u003cspan\u003elevel\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eINFO\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eappender-ref\u003c/span\u003e \u003cspan\u003eref\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eSTDOUT\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eroot\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003econfiguration\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere you have added another appender and logger by the name \u003ccode\u003eoutbound\u003cspan\u003e-\u003c/span\u003elogs\u003c/code\u003e and have specified a different file name to print your logs in.\u003c/p\u003e\u003cp\u003eTo use this inside your application, you have to initialize the logger object like this: \n\u003ccode\u003eLogger log \u003cspan\u003e=\u003c/span\u003e LoggerFactory\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetLogger\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;outbound-logs\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/p\u003e\u003cp\u003eNow let\u0026#39;s apply it inside one of your services:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003eELK\u003cspan\u003e.\u003c/span\u003eservices\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003efasterxml\u003cspan\u003e.\u003c/span\u003ejackson\u003cspan\u003e.\u003c/span\u003edatabind\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eJsonNode\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003efasterxml\u003cspan\u003e.\u003c/span\u003ejackson\u003cspan\u003e.\u003c/span\u003edatabind\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eObjectMapper\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003eslf4j\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eLogger\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003eslf4j\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eLoggerFactory\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003eboot\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003eclient\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eRestTemplateBuilder\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003estereotype\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eService\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003eclient\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eRestTemplate\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@Service\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eRestService\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \n    \u003cspan\u003e// Initializing logger with new appender\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eLogger\u003c/span\u003e log \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eLoggerFactory\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetLogger\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;outbound-logs\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eRestTemplate\u003c/span\u003e restTemplate\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e BASE_URL \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;https://goweather.herokuapp.com/weather/\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eRestService\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eRestTemplateBuilder\u003c/span\u003e restTemplateBuilder\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003erestTemplate \u003cspan\u003e=\u003c/span\u003e restTemplateBuilder\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eJsonNode\u003c/span\u003e \u003cspan\u003egetPostsPlainJSON\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e city\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        log\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einfo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Getting Weather Information for {}\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003ecity\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eString\u003c/span\u003e url \u003cspan\u003e=\u003c/span\u003e BASE_URL \u003cspan\u003e+\u003c/span\u003e city\u003cspan\u003e;\u003c/span\u003e\n        log\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einfo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Final URL =\u0026gt; {}\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003eurl\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eString\u003c/span\u003e response \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003erestTemplate\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetForObject\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eurl\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \u003cspan\u003eObjectMapper\u003c/span\u003e mapper \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eObjectMapper\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            log\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einfo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Response =\u0026gt; {}\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e mapper\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereadTree\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eresponse\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003ecatch\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eException\u003c/span\u003e e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            log\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einfo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Error occurred in Outbound Request... =\u0026gt; {}\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003ee\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEverything that you log in to this service will go to the \u003ccode\u003eapplication\u003cspan\u003e-\u003c/span\u003eoutbound\u003cspan\u003e.\u003c/span\u003elog\u003c/code\u003e file.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s create another endpoint in your controller class to test it:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@GetMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003evalue \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;/weather/{city}\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eJsonNode\u003c/span\u003e \u003cspan\u003egetWeatherInformation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e@PathVariable\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e city\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n   \u003cspan\u003ereturn\u003c/span\u003e restService\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetPostsPlainJSON\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecity\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFinally, let\u0026#39;s invoke it using HTTP GET method, e.g.: \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003eweather\u003cspan\u003e/\u003c/span\u003eohio\u003c/code\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;temperature\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;+33 °C\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;wind\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;14 km/h\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Partly cloudy\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;forecast\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;day\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;1\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;temperature\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;+38 °C\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;wind\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;17 km/h\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;day\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;2\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;temperature\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;37 °C\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;wind\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;14 km/h\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;day\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;3\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;temperature\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;+39 °C\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;wind\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;22 km/h\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWith this, you should see the new logs being printed inside the \u003ccode\u003eapplication\u003cspan\u003e-\u003c/span\u003eoutbound\u003cspan\u003e.\u003c/span\u003elog\u003c/code\u003e file in your logs folder:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e22\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e08\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e22\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e03\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e38.328\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003ehttp\u003cspan\u003e-\u003c/span\u003enio\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eexec\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e6\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  outbound\u003cspan\u003e-\u003c/span\u003elogs\u003cspan\u003e.\u003c/span\u003egetPostsPlainJSON \u003cspan\u003e-\u003c/span\u003e Getting Weather Information \u003cspan\u003efor\u003c/span\u003e ohio\n\u003cspan\u003e22\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e08\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e22\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e03\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e38.330\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003ehttp\u003cspan\u003e-\u003c/span\u003enio\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eexec\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e6\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  outbound\u003cspan\u003e-\u003c/span\u003elogs\u003cspan\u003e.\u003c/span\u003egetPostsPlainJSON \u003cspan\u003e-\u003c/span\u003e Final \u003cspan\u003e\u003cspan\u003eURL\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e https\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003egoweather\u003cspan\u003e.\u003c/span\u003eherokuapp\u003cspan\u003e.\u003c/span\u003ecom\u003cspan\u003e/\u003c/span\u003eweather\u003cspan\u003e/\u003c/span\u003eohio\n\u003cspan\u003e22\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e08\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e22\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e03\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e39.912\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003ehttp\u003cspan\u003e-\u003c/span\u003enio\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eexec\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e6\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eINFO\u003c/span\u003e  outbound\u003cspan\u003e-\u003c/span\u003elogs\u003cspan\u003e.\u003c/span\u003egetPostsPlainJSON \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003eResponse\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;temperature\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;+33 °C\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;wind\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;14 km/h\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;Partly cloudy\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;forecast\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;day\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;1\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;temperature\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;+38 °C\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;wind\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;17 km/h\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;day\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;2\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;temperature\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;37 °C\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;wind\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;14 km/h\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;day\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;3\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;temperature\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;+39 °C\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;wind\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;22 km/h\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Modifying-Filebeat-and-Creating-Custom-Index-Pattern\"\u003eModifying Filebeat and Creating Custom Index Pattern\u003c/h3\u003e\u003cp\u003eNext, you also have to change your \u003ccode\u003efilebeat\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e to fetch the data from two different locations. \u003c/p\u003e\u003cp\u003eThis is an important section where you will also learn how to create custom indexes instead of using the default ones that Filebeat generates.\u003c/p\u003e\u003cp\u003eAn \u003cstrong\u003eIMPORTANT\u003c/strong\u003e thing to note here is that you have to disable ILM(Index Lifecycle Management) for using the custom indexes. (This is not mentioned in any elastic documentation but is a very important step)\u003c/p\u003e\u003cp\u003eILM is nothing but the policy to manage indices according to the performance requirements. If this is enabled (which is true by default), you\u0026#39;ll not be able to give any custom name to the index.\u003c/p\u003e\u003cp\u003eYou also have to set the value for \u003ccode\u003esetup\u003cspan\u003e.\u003c/span\u003etemplate\u003cspan\u003e.\u003c/span\u003ename\u003c/code\u003e and \u003ccode\u003esetup\u003cspan\u003e.\u003c/span\u003etemplate\u003cspan\u003e.\u003c/span\u003epattern\u003c/code\u003e to modify the index name.\u003c/p\u003e\u003cp\u003eBy default, Filebeat creates index in pattern: “filebeat-%{[version]}-%{+yyyy.MM.dd}”. \u003c/p\u003e\u003cp\u003eTo change this format, inside \u003ccode\u003esetup\u003cspan\u003e.\u003c/span\u003etemplate\u003cspan\u003e.\u003c/span\u003ename\u003c/code\u003e you have to set your custom index name like \u0026#34;myapp\u0026#34; and inside \u003ccode\u003esetup\u003cspan\u003e.\u003c/span\u003etemplate\u003cspan\u003e.\u003c/span\u003epattern\u003c/code\u003e you have to put the same custom index name that you provided, followed by a hyphen(-) and asterisk (*), e.g., myapp-*\u003c/p\u003e\u003cpre\u003e\u003ccode\u003efilebeat\u003cspan\u003e.\u003c/span\u003einputs\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003e-\u003c/span\u003e type\u003cspan\u003e:\u003c/span\u003e log\n    enabled\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n    fields\u003cspan\u003e:\u003c/span\u003e\n        type\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;service_logs\u0026#34;\u003c/span\u003e\n    paths\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eELK\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elogs\u003cspan\u003e/\u003c/span\u003eapplication\u003cspan\u003e.\u003c/span\u003elog  # Absolute path \u003cspan\u003eof\u003c/span\u003e application\u003cspan\u003e.\u003c/span\u003elog file\n  \u003cspan\u003e-\u003c/span\u003e type\u003cspan\u003e:\u003c/span\u003e log\n    enabled\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n    fields\u003cspan\u003e:\u003c/span\u003e\n        type\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;outbound_logs\u0026#34;\u003c/span\u003e\n    paths\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eELK\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elogs\u003cspan\u003e/\u003c/span\u003eapplication\u003cspan\u003e-\u003c/span\u003eoutbound\u003cspan\u003e.\u003c/span\u003elog  # Absolute path \u003cspan\u003eof\u003c/span\u003e application\u003cspan\u003e-\u003c/span\u003eoutbound\u003cspan\u003e.\u003c/span\u003elog file\n\nsetup\u003cspan\u003e.\u003c/span\u003eilm\u003cspan\u003e.\u003c/span\u003eenabled\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\nsetup\u003cspan\u003e.\u003c/span\u003etemplate\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;myapp-%{[fields.type]:other}\u0026#34;\u003c/span\u003e\nsetup\u003cspan\u003e.\u003c/span\u003etemplate\u003cspan\u003e.\u003c/span\u003epattern\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;myapp-%{[fields.type]:other}-*\u0026#34;\u003c/span\u003e\n\noutput\u003cspan\u003e.\u003c/span\u003eelasticsearch\u003cspan\u003e:\u003c/span\u003e\n  hosts\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;localhost:9200\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n  protocol\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\n  index\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;myapp-%{[fields.type]:other}-%{+yyyy.MM.dd}\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn Filebeat configuration, you have to use \u003ccode\u003efields\u003cspan\u003e.\u003c/span\u003etype\u003c/code\u003e to distinguish among the different inputs from where you\u0026#39;re fetching the data in case of multiple inputs.\u003c/p\u003e\u003cp\u003eNow go to the \u003ca href=\"http://localhost:9200/_cat/indices\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eElasticsearch indices\u003c/a\u003e, and you\u0026#39;ll see two new additional indexes starting with the name \u0026#34;myapp\u0026#34; followed by their respective values of \u003ccode\u003efields\u003cspan\u003e.\u003c/span\u003etype\u003c/code\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/34wU3NOVwfT7iovbKF2AvK/98a5d87a72c016b4ce252ded9f900f97/elk_14.png\" alt=\"Indexes_myapp\"/\u003e\u003c/p\u003e\u003cp\u003eCreate these two new patterns inside your \u003ca href=\"http://localhost:5601/app/management/kibana/indexPatterns\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eKibana index pattern management\u003c/a\u003e console by the name \u003ccode\u003emyapp\u003cspan\u003e-\u003c/span\u003eoutbound_logs\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003emyapp\u003cspan\u003e-\u003c/span\u003eservice_logs\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eNext, hit the REST APIs again, and you should be able to view the logs of your applications in separate indexes depending on the API you are hitting.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2IE0qGNm79KxHRpt2U5dnI/1501124e0a2be6307c630973ae13c827/elk_15.png\" alt=\"Myapp_Logs\"/\u003e\u003c/p\u003e\u003ch2 id=\"Summary\"\u003eSummary\u003c/h2\u003e\u003cp\u003eFor any developer, logs are the most critical way for debugging. ELK Stack simplifies the delivery of logs in a centralized and scalable way. This article was an introduction to how it all works. \u003c/p\u003e\u003cul\u003e\u003cli\u003eYou have gone through the step-by-step process of sending out Spring Boot application logs to the Elastic Stack(ELK).\u003c/li\u003e\u003cli\u003eYou got introduced to Filebeat and learned about the advantages and disadvantages of Filebeat and Logstash as log shippers.\u003c/li\u003e\u003cli\u003eYou learned how to create custom index patterns through a Filebeat configuration.\u003c/li\u003e\u003cli\u003eYou also got the hang of how you can manage logs of different services of the same applications by putting them in separate indexes.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cem\u003eThe complete code used in this tutorial is available on this \u003ca href=\"https://github.com/ApoorvTyagi/Spring-ELK\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGitHub repository\u003c/a\u003e\u003c/em\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn how you can integrate ELK stack with your Spring Boot application for logs aggregation and monitoring in a centralized way.",
      "date_published": "2021-09-30T14:53:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/create-an-api-in-swift-and-deploy-it-to-aws-lambda/",
      "title": "Create an API in Swift and Deploy It to AWS Lambda",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIn almost every real mobile application, we are probably going to need a backend side where our business logic will be handled. In most cases, there will be two different teams, one for mobile and one for the backend side of the project. But, what if we, as iOS developers, could write our own backend in our preferred language? Let\u0026#39;s explore in this article how we can achieve this using Swift AWS Lambda Runtime together with AWS Lambda.\u003c/p\u003e\u003ch2 id=\"What-is-AWS-Lambda-\"\u003eWhat is AWS Lambda?\u003c/h2\u003e\u003cp\u003eIn simple terms, it is a service provider by AWS in which we can run our code without the need to configure and manage a server. We just upload our code as a zip file, and AWS automatically does all the configurations needed in the server to make our software available.\u003c/p\u003e\u003cp\u003eOne of the main differences between this approach and having a dedicated server, in addition to simpler administration, is that if at some point we need to increase our processing power to scale up our application, AWS Lambda does that automatically for us if we design the application correctly.\u003c/p\u003e\u003cp\u003eYou can check out more at this \u003ca href=\"https://aws.amazon.com/lambda/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003elink\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"Swift-AWS-Lambda-Runtime\"\u003eSwift AWS Lambda Runtime\u003c/h2\u003e\u003cp\u003eA custom AWS Lambda runtime is basically a library that is in charge of managing and executing the Lambda function\u0026#39;s code when it is called. With \u003ca href=\"https://swift.org/blog/aws-lambda-runtime/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSwift AWS Lambda Runtime\u003c/a\u003e, we can now write serverless code in Swift and make it ready for use with AWS Lambda service.\u003c/p\u003e\u003ch2 id=\"Creating-Our-HTTP-API\"\u003eCreating Our HTTP API\u003c/h2\u003e\u003cp\u003eFor this tutorial, we will create a simple HTTP API in Swift and expose it through \u003ca href=\"https://aws.amazon.com/api-gateway/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAPI Gateway\u003c/a\u003e, which is another service available in AWS suite that allows us to expose our Lambda function as HTTP endpoints.\u003c/p\u003e\u003ch3 id=\"Prerequisites\"\u003ePrerequisites\u003c/h3\u003e\u003cul\u003e\u003cli\u003eHave XCode installed\u003c/li\u003e\u003cli\u003eHave an AWS account.\u003c/li\u003e\u003cli\u003eHave an Auth0 account.\u003c/li\u003e\u003cli\u003eHave Docker installed in your machine to compile the code that we will upload to AWS.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Step-1--Defining-the-API\"\u003eStep 1: Defining the API\u003c/h3\u003e\u003cp\u003eWe\u0026#39;re going to create a simple API to handle a simple todo list with three operations:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003ePOST\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003etodoitem\u003c/code\u003e Create a new todo item.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003etodoitems\u003c/code\u003e Return all the items in the list.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003etodoitems\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003eid\u003c/code\u003e Return a specific item in the list.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eJust to simplify things, our TodoItem will only have an id and a description.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eToDoItem\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e id\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInt\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e description\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Step-2--Setup-the-project\"\u003eStep 2: Setup the project\u003c/h3\u003e\u003cp\u003eThe next thing we need to do is create our project. In this case, we need to create a new \u003ca href=\"https://swift.org/package-manager/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSwift Package\u003c/a\u003e. To do this, we can open Xcode and go to \u003cstrong\u003eFile → New → Swift Package\u003c/strong\u003e option and name it \u003cstrong\u003eToDoList-API\u003c/strong\u003e. We can also create it from the console by running the following command: \u003ccode\u003e$ swift \u003cspan\u003epackage\u003c/span\u003e init \u003cspan\u003e--\u003c/span\u003etype executable\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eOnce that we have our project created, let\u0026#39;s open and modify our \u003cstrong\u003ePackage.swift\u003c/strong\u003e file with all the information needed.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// swift-tools-version:5.3\u003c/span\u003e\n\u003cspan\u003e// The swift-tools-version declares the minimum version of Swift required to build this package.\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ePackageDescription\u003c/span\u003e\n\n\u003cspan\u003elet\u003c/span\u003e package \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ePackage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    name\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;ToDoList-API\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    platforms\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emacOS\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ev10_15\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    products\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eexecutable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;ToDoList-API\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e targets\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;ToDoList-API\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    dependencies\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epackage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eurl\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;https://github.com/swift-server/swift-aws-lambda-runtime.git\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eupToNextMajor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efrom\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;0.3.0\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    targets\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            name\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;ToDoList-API\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            dependencies\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproduct\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;AWSLambdaRuntime\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e package\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;swift-aws-lambda-runtime\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproduct\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;AWSLambdaEvents\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e package\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;swift-aws-lambda-runtime\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            resources\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprocess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Config.plist\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e]\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce you save the file, Xcode will start downloading all the needed resources and dependencies. For this example, we\u0026#39;re going to use two dependencies:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eAWSLambdaRuntime\u003c/strong\u003e to handle the communications with \u003ca href=\"https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAWS Lambda runtime API\u003c/a\u003e.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAWSLambdaEvents\u003c/strong\u003e to handle the events with API Gateway in our code.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Step-3--Create-our-first-Lambda-function\"\u003eStep 3: Create our first Lambda function\u003c/h3\u003e\u003cp\u003eWe now have to develop our Lambda function. To do so, we must create a new file inside the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eSource\u003c/code\u003e directory and name it \u003cstrong\u003emain.swift\u003c/strong\u003e. Inside this file, we\u0026#39;ll use the Swift Lambda Runtime by calling \u003ccode\u003eLambda\u003cspan\u003e.\u003c/span\u003erun\u003c/code\u003e function. This function takes an input and a callback as parameters. We can use the callback to return whatever we want if the operation is successful or an error otherwise.\u003c/p\u003e\u003cp\u003eFor every invocation that Lambada receives, our Runtime will execute whatever we put inside the \u003ccode\u003eLambda\u003cspan\u003e.\u003c/span\u003erun\u003c/code\u003e function. In this case, we are going to take just a string as input and return a greeting message.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eAWSLambdaRuntime\u003c/span\u003e\n\n\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eInput\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCodable\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003elet\u003c/span\u003e name\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eOutput\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCodable\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003elet\u003c/span\u003e greeting\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eLambda\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003erun \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e,\u003c/span\u003e input\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInput\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e callback\u003cspan\u003e:\u003c/span\u003e @escaping \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eResult\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eOutput\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eError\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eVoid\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n  \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eOutput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003egreeting\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Hello \u003cspan\u003e\u003cspan\u003e\\(\u003c/span\u003einput\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn order to run our lambda in our machine, we need to add a custom environment variable (\u003ccode\u003e\u003cspan\u003eLOCAL_LAMBDA_SERVER_ENABLED\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003c/code\u003e) to our scheme\u0026#39;s run settings. This will simulate the Lambda server in our local environment. \u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/42lm5qsyLdzZ9sVnvs6Ipn/c177634055ba4886f3863e6a4232d4fb/swift_lambda_01.png\" alt=\"Enable AWS Lambda local\"/\u003e\u003c/p\u003e\u003cp\u003eNow, if we run the target, we will get something like this in the console:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e2021\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e08\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e14T23\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e36\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e50\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e0300\u003c/span\u003e info \u003cspan\u003eLocalLambdaServer\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eLocalLambdaServer\u003c/span\u003e started and listening on \u003cspan\u003e127.0\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e0.1\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e7000\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e receiving events on \u003cspan\u003e/\u003c/span\u003einvoke\n\u003cspan\u003e2021\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e08\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e14T23\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e36\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e50\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e0300\u003c/span\u003e info \u003cspan\u003eLambda\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e lambda lifecycle starting with \u003cspan\u003eConfiguration\u003c/span\u003e\n  \u003cspan\u003eGeneral\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003elogLevel\u003cspan\u003e:\u003c/span\u003e info\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003eLifecycle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eid\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e9908899204653\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e maxTimes\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e stopSignal\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eTERM\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003eRuntimeEngine\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eip\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e127.0\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e0.1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e port\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e7000\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e requestTimeout\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003enil\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis means that our Lambda function is running on port \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e700\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003einvoke\u003c/code\u003e. So let\u0026#39;s go ahead and make our first request to the function.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ curl \\\n    \u003cspan\u003e--\u003c/span\u003eheader \u003cspan\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \\\n  \u003cspan\u003e--\u003c/span\u003erequest \u003cspan\u003ePOST\u003c/span\u003e \\\n  \u003cspan\u003e--\u003c/span\u003edata \u003cspan\u003e\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;Bruno\u0026#34;}\u0026#39;\u003c/span\u003e \\\n  http\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e7000\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003einvoke\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf we are getting something like this: \u003ccode\u003e$ \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;greeting\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;Hello Bruno\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e, it means that we did everything right so far!.\u003c/p\u003e\u003cp\u003eWe have our first function up and running, so we are in a pretty good spot to move on and create our HTTP API.\u003c/p\u003e\u003ch3 id=\"Step-4--Create-HTTP-API\"\u003eStep 4: Create HTTP API\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s start by creating the model that we are going to deal with. Since we\u0026#39;re going to return static data, we\u0026#39;ll create some helpers functions as well. Go ahead and create a new file  \u003cstrong\u003eTodoItem.swift\u003c/strong\u003e inside \u003cstrong\u003eSources/ToDoList-API\u003c/strong\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eToDoItem\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCodable\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e id\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInt\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e description\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e// MARK: - Static helpers\u003c/span\u003e\n\n\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eToDoItem\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003egetToDoList\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eToDoItem\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003evar\u003c/span\u003e list \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eToDoItem\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        list\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappend\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eid\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e description\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Pay credit card\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        list\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappend\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eid\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e description\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Clean apartment\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        list\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappend\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eid\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e description\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Call John\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n        \u003cspan\u003ereturn\u003c/span\u003e list\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003egetItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ewith id\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInt\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eToDoItem\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003egetToDoList\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e $\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eid \u003cspan\u003e==\u003c/span\u003e id \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirst\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe next thing we need to do is adjust our Lambda function to interact with APIGateway. For this, we are going to use two types included in \u003cstrong\u003eAWSLambdaEvents\u003c/strong\u003e for our function\u0026#39;s input and output:\u003c/p\u003e\u003cul\u003e\u003cli\u003eAPIGateway.V2.Request\u003c/li\u003e\u003cli\u003eAPIGateway.V2.Response\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eMake the following changes inside our \u003cstrong\u003emain.swift\u003c/strong\u003e file.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003etypealias\u003c/span\u003e \u003cspan\u003eIn\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAPIGateway\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eV2\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eRequest\u003c/span\u003e\n\u003cspan\u003etypealias\u003c/span\u003e \u003cspan\u003eOut\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAPIGateway\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eV2\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eResponse\u003c/span\u003e\n\n\u003cspan\u003eLambda\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003erun \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e,\u003c/span\u003e \n              request\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIn\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n              callback\u003cspan\u003e:\u003c/span\u003e @escaping \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eResult\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eOut\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eError\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eVoid\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n    \u003cspan\u003e// Implementation... \u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo we receive an \u003cstrong\u003eAPIGateway.V2.Request\u003c/strong\u003e type as an input, and we must return an \u003cstrong\u003eAPIGateway.V2.Response\u003c/strong\u003e type as an output. However, we want to obtain a \u003cstrong\u003eToDoItem\u003c/strong\u003e type when we receive a \u003ccode\u003e\u003cspan\u003ePOST\u003c/span\u003e\u003c/code\u003e, and we want to return a \u003cstrong\u003eTodoItem\u003c/strong\u003e type if we receive a \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eBoth types, \u003cstrong\u003eAPIGateway.V2.Request\u003c/strong\u003e and \u003cstrong\u003eAPIGateway.V2.Response,\u003c/strong\u003e have a body property in which we will receive and send the payload from our endpoints. This property is a String type, so we must do some transformation using an \u003ca href=\"https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eencoder\u003c/a\u003e (or decoder in the case we want to return something) in order to use our Swift type before sending it back or before start processing it. \u003c/p\u003e\u003cp\u003eThe only missing part in our code design is how we distinguish between different routes and methods. We can access the endpoint path from our request type. In our example, we are only going to have one path: \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003etodoitems\u003c/code\u003e. If we get another path, we should return a 404 error.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s put all the pieces together and modify our lambda function.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eFoundation\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eAWSLambdaRuntime\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eAWSLambdaEvents\u003c/span\u003e\n\n\u003cspan\u003etypealias\u003c/span\u003e \u003cspan\u003eIn\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAPIGateway\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eV2\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eRequest\u003c/span\u003e\n\u003cspan\u003etypealias\u003c/span\u003e \u003cspan\u003eOut\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAPIGateway\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eV2\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eResponse\u003c/span\u003e\n\n\u003cspan\u003eLambda\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003erun \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e,\u003c/span\u003e\n              request\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIn\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n              callback\u003cspan\u003e:\u003c/span\u003e @escaping \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eResult\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eOut\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eError\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eVoid\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n    \n    \u003cspan\u003elet\u003c/span\u003e routeKey \u003cspan\u003e=\u003c/span\u003e request\u003cspan\u003e.\u003c/span\u003erouteKey\n    \n    \u003cspan\u003eswitch\u003c/span\u003e routeKey \u003cspan\u003e{\u003c/span\u003e\n    \n    \u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e\u0026#34;GET /todoitems\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003elet\u003c/span\u003e items \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eToDoItem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetToDoList\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003elet\u003c/span\u003e bodyOutput \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e \u003cspan\u003eJSONEncoder\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eencodeAsString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eitems\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003elet\u003c/span\u003e output \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eOut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estatusCode\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003eok\u003cspan\u003e,\u003c/span\u003e headers\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;content-type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e body\u003cspan\u003e:\u003c/span\u003e bodyOutput\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoutput\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \n    \u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e\u0026#34;GET /todoitems/{id}\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e idString \u003cspan\u003e=\u003c/span\u003e request\u003cspan\u003e.\u003c/span\u003epathParameters\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e id \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eInt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eidString\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n           \u003cspan\u003elet\u003c/span\u003e item \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eToDoItem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ewith\u003cspan\u003e:\u003c/span\u003e id\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \n            \u003cspan\u003elet\u003c/span\u003e bodyOutput \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e \u003cspan\u003eJSONEncoder\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eencodeAsString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eitem\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003elet\u003c/span\u003e output \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eOut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estatusCode\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003eok\u003cspan\u003e,\u003c/span\u003e headers\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;content-type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e body\u003cspan\u003e:\u003c/span\u003e bodyOutput\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoutput\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eOut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estatusCode\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003enotFound\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \n    \u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e\u0026#34;POST /todoitems\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003elet\u003c/span\u003e input \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003eJSONDecoder\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edecode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eToDoItem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e from\u003cspan\u003e:\u003c/span\u003e request\u003cspan\u003e.\u003c/span\u003ebody \u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003elet\u003c/span\u003e bodyOutput \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003eJSONEncoder\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eencodeAsString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003einput\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003elet\u003c/span\u003e output \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eOut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estatusCode\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003eok\u003cspan\u003e,\u003c/span\u003e headers\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;content-type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e body\u003cspan\u003e:\u003c/span\u003e bodyOutput\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoutput\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003ecatch\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eOut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estatusCode\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003ebadRequest\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \n    \u003cspan\u003edefault\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eOut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estatusCode\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003enotFound\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e// ---------------\u003c/span\u003e\n\n\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eJSONEncoder\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efunc\u003c/span\u003e encodeAsString\u003cspan\u003e\u0026lt;\u003c/span\u003eT\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eEncodable\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e value\u003cspan\u003e:\u003c/span\u003e T\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ethrows\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003edecoding\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eencode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003evalue\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUnicode\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUTF8\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eJSONDecoder\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efunc\u003c/span\u003e decode\u003cspan\u003e\u0026lt;\u003c/span\u003eT\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDecodable\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e type\u003cspan\u003e:\u003c/span\u003e T\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eType\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e from string\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ethrows\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e T \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edecode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etype\u003cspan\u003e,\u003c/span\u003e from\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003eutf8\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Test-the-API-Locally\"\u003eTest the API Locally\u003c/h2\u003e\u003cp\u003eWe now have everything in place to start testing our API before deploying it to AWS. Let\u0026#39;s try to get all the items.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ \u003cspan\u003ecurl\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n    --header \u003cspan\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n  --request GET \u003cspan\u003e\\\u003c/span\u003e\n  http://localhost:7000/invoke/todoitems\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe will get a \u003ccode\u003e\u003cspan\u003e404\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e Not found\u003c/code\u003e error, which is weird because we have configured that endpoint in the right way inside our Lambda function. Well, this is because our local Runtime is only listening for requests at \u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e7000\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003einvoke\u003c/code\u003e. \u003c/p\u003e\u003cp\u003eIn addition, we are using Amazon API Gateway to expose our Lambda function as an HTTP API. This means that all incoming HTTP requests will get transformed into JSON data by the API Gateway and provide the Lambda function with that payload already transformed. Then, our function will process that JSON payload and respond with another JSON payload itself, which the API Gateway will transform back into an HTTP response. \u003c/p\u003e\u003cp\u003eSo, if we want to simulate this interaction, we must provide an HTTP request (in JSON format) in which we need to include all the relevant information like the method we want to call, the route path, the body, and so on.\u003c/p\u003e\u003cp\u003eThis is a standard HTTP request after the API Gateway makes its transformations:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;routeKey\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;GET /todoitems\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;2.0\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;rawPath\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/todoitems\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;requestContext\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;accountId\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;apiId\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;domainName\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;domainPrefix\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;stage\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;requestId\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;path\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;/todoitems\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;method\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;protocol\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;HTTP/1.1\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;sourceIp\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;userAgent\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;timeEpoch\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;isBase64Encoded\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;rawQueryString\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;headers\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe don\u0026#39;t have to provide all the values, but all the keys must be present. Otherwise, we\u0026#39;ll get a decoding error from the Lambda function.\u003c/p\u003e\u003cp\u003eWith this in mind, let\u0026#39;s make a request again. We can do it using the terminal like before or an API client tool like \u003ca href=\"https://www.postman.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ePostman\u003c/a\u003e. \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ \u003cspan\u003ecurl\u003c/span\u003e --header \u003cspan\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n  --request POST \u003cspan\u003e\\\u003c/span\u003e\n  --data \u003cspan\u003e\u0026#39;{\n    \u0026#34;routeKey\u0026#34;:\u0026#34;GET /todoitems\u0026#34;,\n    \u0026#34;version\u0026#34;:\u0026#34;2.0\u0026#34;,\n    \u0026#34;rawPath\u0026#34;:\u0026#34;/todoitems\u0026#34;,\n    \u0026#34;requestContext\u0026#34;:{\n        \u0026#34;accountId\u0026#34;:\u0026#34;\u0026#34;,\n        \u0026#34;apiId\u0026#34;:\u0026#34;\u0026#34;,\n        \u0026#34;domainName\u0026#34;:\u0026#34;\u0026#34;,\n        \u0026#34;domainPrefix\u0026#34;:\u0026#34;\u0026#34;,\n        \u0026#34;stage\u0026#34;: \u0026#34;\u0026#34;,\n        \u0026#34;requestId\u0026#34;: \u0026#34;\u0026#34;,\n        \u0026#34;http\u0026#34;:{\n            \u0026#34;path\u0026#34;:\u0026#34;/todoitems\u0026#34;,\n            \u0026#34;method\u0026#34;:\u0026#34;GET\u0026#34;,\n            \u0026#34;protocol\u0026#34;:\u0026#34;HTTP/1.1\u0026#34;,\n            \u0026#34;sourceIp\u0026#34;:\u0026#34;\u0026#34;,\n            \u0026#34;userAgent\u0026#34;:\u0026#34;\u0026#34;\n        },\n        \u0026#34;time\u0026#34;: \u0026#34;\u0026#34;,\n        \u0026#34;timeEpoch\u0026#34;:0\n    },\n    \u0026#34;isBase64Encoded\u0026#34;:false,\n    \u0026#34;rawQueryString\u0026#34;:\u0026#34;\u0026#34;,\n    \u0026#34;headers\u0026#34;:{}\n}\u0026#39;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\nhttp://localhost:7000/invoke\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf we want to retrieve only one item, we need to add an entry into our data JSON. \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026#34;pathParameters\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;1\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLast, if we want to test the \u003ccode\u003e\u003cspan\u003ePOST\u003c/span\u003e\u003c/code\u003e method, we must add the following entry to our data JSON. \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026#34;body\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;{\\\u0026#34;id\\\u0026#34;:1, \\\u0026#34;description\\\u0026#34;: \\\u0026#34;Test\\\u0026#34;}\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd, other than that, we also need to modify the \u003cstrong\u003erouteKey\u003c/strong\u003e to \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003etodoitems\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e and the \u003cstrong\u003ehttp.method\u003c/strong\u003e property to \u003cstrong\u003ePOST\u003c/strong\u003e instead of \u003cstrong\u003eGET\u003c/strong\u003e.\u003c/p\u003e\u003ch2 id=\"Deploy-to-AWS\"\u003eDeploy to AWS\u003c/h2\u003e\u003ch3 id=\"Compile---Package\"\u003eCompile \u0026amp; Package\u003c/h3\u003e\u003cp\u003eWe will execute our Lambda function on \u003cstrong\u003eAmazon Linux 2\u003c/strong\u003e OS, so we need to compile our function for this particular OS. For convenience, we\u0026#39;ll use \u003ca href=\"https://www.docker.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDocker\u003c/a\u003e to do this. Create a new folder named \u003cstrong\u003eScripts\u003c/strong\u003e in your root project folder. Inside this folder, create a new \u003cstrong\u003ebuild.sh\u003c/strong\u003e file with the following code\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edocker run \u003cspan\u003e\\\u003c/span\u003e\n    --rm \u003cspan\u003e\\\u003c/span\u003e\n    --volume \u003cspan\u003e\u0026#34;\u003cspan\u003e\u003cspan\u003e$(\u003c/span\u003e\u003cspan\u003epwd\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e/:/src\u0026#34;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n    --workdir \u003cspan\u003e\u0026#34;/src/\u0026#34;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n    swift:5.3.1-amazonlinux2 \u003cspan\u003e\\\u003c/span\u003e\n    swift build --product ToDoList-API -c release -Xswiftc -static-stdlib\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUnderstanding Docker commands is beyond the scope of this article, but what this code does is compiles our code for a container. If you\u0026#39;d like to learn more about using Docker and its available commands, check out the \u003ca href=\"https://docs.docker.com/engine/reference/commandline/cli/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eoficial documentation\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eNow go ahead and create another file inside the \u003cstrong\u003eScripts\u003c/strong\u003e folder: \u003cstrong\u003epackage.sh\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e#!/bin/bash\u003c/span\u003e\n\n\u003cspan\u003eset\u003c/span\u003e -eu\n\n\u003cspan\u003eexecutable\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$1\u003c/span\u003e\n\n\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e.build/lambda/\u003cspan\u003e$executable\u003c/span\u003e\n\u003cspan\u003erm\u003c/span\u003e -rf \u003cspan\u003e\u0026#34;\u003cspan\u003e$target\u003c/span\u003e\u0026#34;\u003c/span\u003e\n\u003cspan\u003emkdir\u003c/span\u003e -p \u003cspan\u003e\u0026#34;\u003cspan\u003e$target\u003c/span\u003e\u0026#34;\u003c/span\u003e\n\u003cspan\u003ecp\u003c/span\u003e \u003cspan\u003e\u0026#34;.build/release/\u003cspan\u003e$executable\u003c/span\u003e\u0026#34;\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003cspan\u003e$target\u003c/span\u003e/\u0026#34;\u003c/span\u003e\n\u003cspan\u003ecd\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003cspan\u003e$target\u003c/span\u003e\u0026#34;\u003c/span\u003e\n\u003cspan\u003eln\u003c/span\u003e -s \u003cspan\u003e\u0026#34;\u003cspan\u003e$executable\u003c/span\u003e\u0026#34;\u003c/span\u003e \u003cspan\u003e\u0026#34;bootstrap\u0026#34;\u003c/span\u003e\n\u003cspan\u003ezip\u003c/span\u003e --symlinks lambda.zip *\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis will create a new zip file with the right structure ready for us to upload to AWS.\u003c/p\u003e\u003cp\u003eWe only need to follow these simple steps to build and package our code:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003ccode\u003e$ sh \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eScripts\u003cspan\u003e/\u003c/span\u003ebuild\u003cspan\u003e.\u003c/span\u003esh\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003e$ sh \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eScripts\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003epackage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esh ToDoList\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eAPI\u003c/span\u003e\u003c/code\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eIn many environments, we may get privilege errors upon executing these scripts. If that happens, we just need to mark the file as executable by running the following commands:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ \u003cspan\u003echmod\u003c/span\u003e +x Scripts/build.sh\n$ \u003cspan\u003echmod\u003c/span\u003e +x Scripts/package.sh\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Upload-Lambda-file\"\u003eUpload Lambda file\u003c/h3\u003e\u003cp\u003eThe next step is to create our Lambda function and upload the zip file that we\u0026#39;ve just generated. Login into your AWS account, go to AWS Lambda, and click on \u003cstrong\u003eCreate function\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5pfB1jTuOtVriJgoushAI5/0998fd7778997150dd2b85d01d80564a/swift_lambda_02.png\" alt=\"Crate AWS Lambda function - Step 1\"/\u003e\u003c/p\u003e\u003cp\u003eClick on the \u003cstrong\u003eCreate function\u003c/strong\u003e button after entering a function name and the runtime option. You will be redirected to the next screen to upload the file.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/67bsSmxRcFkaROyOYicx2o/59a3679578ae60617f795065e5f3546b/swift_lambda_03.png\" alt=\"Crate AWS Lambda function - Step 2\"/\u003e\u003c/p\u003e\u003cp\u003eClick on the .zip file and locate your \u003cstrong\u003elambda.zip\u003c/strong\u003e file on your computer. It should be available on \u003ccode\u003e$ your\u003cspan\u003e-\u003c/span\u003eproject\u003cspan\u003e-\u003c/span\u003epath\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ebuild\u003cspan\u003e/\u003c/span\u003elambda\u003cspan\u003e/\u003c/span\u003eToDoList\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eAPI\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elambda\u003cspan\u003e.\u003c/span\u003ezip\u003c/code\u003e\u003c/p\u003e\u003ch3 id=\"Connect-the-API-Gateway\"\u003eConnect the API Gateway\u003c/h3\u003e\u003cp\u003eThe last thing we need to do is connect our function to the API Gateway. Go to the API Gateway dashboard from your AWS console and click on \u003cstrong\u003eCreate API.\u003c/strong\u003e Then choose the \u003cstrong\u003eHTTP API\u003c/strong\u003e option by clicking on the \u003cstrong\u003eBuild\u003c/strong\u003e button.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eStep 1\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003eClick on \u003cstrong\u003eAdd Integration\u003c/strong\u003e and select the Lambda option\n  \u003cul\u003e\u003cli\u003eSearch for the Lambda function we just created in the previous section.\u003c/li\u003e\u003cli\u003eMake sure that the version is \u003cstrong\u003e2.0\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003eChose a name for the API.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3O9bqK0RSD2116B4akcjJ5/a8dff34110d14a5065c6058e7823c73e/swift_lambda_04.png\" alt=\"API Gateway - Step 1\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eStep 2\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eHere we must configure our routes. If we don\u0026#39;t want to restrict the routing, we can use \u003cstrong\u003e$default\u003c/strong\u003e in the \u003cstrong\u003eResource path\u003c/strong\u003e field. This will map all the requests to our Lambda. \u003c/p\u003e\u003cp\u003eFor this tutorial, we\u0026#39;re going to set the three endpoints that we defined at the beginning.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1ttSD1ozz3vM1IJ4ERKX8H/93a7c3d609759f6138c338e09c721f7a/swift_lambda_05.png\" alt=\"API Gateway - Step 2\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eStep 3\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIn this step, we can configure different environments for our API, like development and production. In our case, we can leave \u003cstrong\u003e$default\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/515U5zI0IewKQpHvK5vTeC/4a0772d20ce1fd9f1778edecfefa928b/swift_lambda_06.png\" alt=\"API Gateway - Step 3\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eStep 4\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eReview all the information and click on \u003cstrong\u003eCreate\u003c/strong\u003e. \u003c/p\u003e\u003cp\u003eAnd that\u0026#39;s it! We now have our API deployed to AWS. The invoke url should be something like this: \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eyour\u003cspan\u003e-\u003c/span\u003egateway\u003cspan\u003e-\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eexecute\u003cspan\u003e-\u003c/span\u003eapi\u003cspan\u003e.\u003c/span\u003eus\u003cspan\u003e-\u003c/span\u003eeast\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1.\u003c/span\u003eamazonaws\u003cspan\u003e.\u003c/span\u003ecom\u003c/code\u003e\u003c/p\u003e\u003ch3 id=\"Test-it-\"\u003eTest it!\u003c/h3\u003e\u003cp\u003eWe\u0026#39;re using Postman for this part, but you can use whatever other tool you want.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eGet all items\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/iz0F35N6VrbMOJfBSU58p/5bf838ddda1dbb529c2a4973d1f626a3/swift_lambda_07.png\" alt=\"Get all items reques\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eGet one item\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/OF1HGO3P1B51ioF5JdfdR/1af20c65c0addbc106f7a974312bd74d/swift_lambda_08.png\" alt=\"Get one item request\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eCreate new item\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7yuttuwCtspW5xxmy0ug0r/ab7e81aa859b84948a304c7a3abed3c6/swift_lambda_09.png\" alt=\"Create new item request\"/\u003e\u003c/p\u003e\u003ch2 id=\"Secure-the-API-Using-Auth0\"\u003eSecure the API Using Auth0\u003c/h2\u003e\u003cp\u003eOf course, you\u0026#39;d never want to leave an unauthenticated API up - you\u0026#39;ll be responsible for paying for every call made to it!. To demonstrate how we can secure our endpoints, let\u0026#39;s make the \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003etodoitems\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e endpoint only be accessible by authenticated users (in a real application, we\u0026#39;d protect all of these endpoints). \u003c/p\u003e\u003cp\u003eTo accomplish this, we are going to create a custom \u003ca href=\"https://es.wikipedia.org/wiki/JSON_Web_Token\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJSON Web Tokens (JWTs)\u003c/a\u003e authorizer with \u003cstrong\u003eAuth0\u003c/strong\u003e and attach it to our API Gateway endpoint.\u003c/p\u003e\u003ch3 id=\"Create-a-new-Auth0-API\"\u003eCreate a new Auth0 API\u003c/h3\u003e\u003cp\u003eFirst thing first, login into your Auth0 account and go to \u003cstrong\u003eApplications → APIs\u003c/strong\u003e in the left menu, and click on + \u003cstrong\u003eCreate API\u003c/strong\u003e button.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3GZG3baxHOc6e2CaNEv0iu/12d2dc752a4753bdd7b9cba95c72f91e/swift_lambda_10.png\" alt=\"New Auth0 API\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eName\u003c/strong\u003e: This will be the internal name for the API\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eIdentifier\u003c/strong\u003e: \u003ca href=\"https://auth0-jwt-authorizer/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://auth0-jwt-authorizer\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSigning Algorithm\u003c/strong\u003e: Just leave the default here\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eGo back to your API Gateway Dashboard and click the \u003cstrong\u003eAuthorization\u003c/strong\u003e option on the left panel below the \u003cstrong\u003eDevelop\u003c/strong\u003e section.\u003c/p\u003e\u003cp\u003eSelect the endpoints that you want to restrict access to; in our case, it will be \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003etodoitems\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e, and click on \u003cstrong\u003eCreate and attach an authorizer\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2muFgeJURgJInk8TGe7UgA/bfe4a098b1b9912f319879ee4356bb9a/swift_lambda_11.png\" alt=\"Authorizer\"/\u003e\u003c/p\u003e\u003cp\u003eSelect \u003cstrong\u003eJWT\u003c/strong\u003e type and fill in the required information:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eName\u003c/strong\u003e: The name that you want to call the authorizer\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eIdentity source\u003c/strong\u003e: \u003ccode\u003e$request\u003cspan\u003e.\u003c/span\u003eheader\u003cspan\u003e.\u003c/span\u003eAuthorization\u003c/code\u003e This means that the authorizer can access the access token in the Authorization header.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eIssuer URL\u003c/strong\u003e: \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003etenant\u003cspan\u003e-\u003c/span\u003ename\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003ecom\u003c/code\u003e. The authorizer uses this to validate the \u003cstrong\u003eiss\u003c/strong\u003e field inside the JWT. You can find your Auth0 tenant-name in \u003cstrong\u003eApplications → Default App → Domain\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAudience\u003c/strong\u003e: \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eauth0\u003cspan\u003e-\u003c/span\u003ejwt\u003cspan\u003e-\u003c/span\u003eauthorizer\u003c/code\u003e. This will be used by the authorizer to validate the \u003cstrong\u003eaud\u003c/strong\u003e field inside the JWT. This needs to match with the identifier that we configured our Auth0 API before.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6CBOYYxuepwvH5GuJBy4Sa/a2fa0221485d3351bbb3b789b26276fa/swift_lambda_12.png\" alt=\"Add AWS Lambda authorizer\"/\u003e\u003c/p\u003e\u003ch3 id=\"Test-it-Again\"\u003eTest it Again\u003c/h3\u003e\u003cp\u003eIf we now try to call \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003etodoitems\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e, we will get an unauthorized error.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Unauthorized\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is because if we want to use this endpoint, we must provide an authentication header. In a real app, we will return a valid token after the user was authenticated by our app, but just for testing purposes, we can get a token from Auth0.\u003c/p\u003e\u003cp\u003eGo again to your Auth0 dashboard, and on the left panel, click on \u003cstrong\u003eApplications → APIs → AWS JWT Authorizer\u003c/strong\u003e \u003cstrong\u003e→\u003c/strong\u003e \u003cstrong\u003eTest\u003c/strong\u003e. Find the response section and copy the bearer token provided.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6rxP91y2vKpJLm2sJ72nb7/ac0c048e856f3e8fedbecbf097317d53/swift_lambda_13.png\" alt=\"Auth0 dashboard\"/\u003e\u003c/p\u003e\u003cp\u003eNow go back to Postman, add an Authorization header with this token, and send the request. \u003c/p\u003e\u003cp\u003eBecause our request has an authentication token, we get a response!\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1QIhmYdn0hGKDGqAhKcuSJ/170a0ef548ff64bc57770f9aa9ae72a7/swift_lambda_14.png\" alt=\"Authentication Token Response\"/\u003e\u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eWith this type of solution, we, as iOS developers, are in a position to start shifting to a mobile full-stack role, where we don\u0026#39;t need a separate team for the backend side. Of course, every team and project is different. However, for small projects or proof of concepts, this solution should work like a charm. Understanding backend technologies will increase your understanding of software and make you more of an asset to any iOS team.\u003c/p\u003e\u003cp\u003eThe Swift AWS Lambda Runtime has room for improvement (like everything in the tech industry), but it gives us a start point to write backend code without the need of learning a new development language. \u003c/p\u003e\u003cp\u003eIf you want a more detailed example with a database (DynamoDB) connection, you can check the full project \u003ca href=\"https://github.com/blorenzo10/lambda-swift\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn how to create and deploy a serverless HTTP API using Swift and AWS Lambda.",
      "date_published": "2021-09-29T16:28:00Z",
      "author": {
        "name": "Attach new Authorizer"
      }
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/get-started-with-custom-error-handling-in-spring-boot-java/",
      "title": "Get Started with Custom Error Handling in Spring Boot (Java)",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eTL/DR:\u003c/strong\u003e Let’s take a look at everything required to build custom error handling logic in both Spring Boot Web and Spring Boot Security\u003c/p\u003e\u003cp\u003eREST applications developed in Spring Boot automatically take advantage of its default error handling logic. Specifically, whenever an error occurs, a default response containing some information is returned. The problem is that this information may be poor or insufficient for the API callers to deal with the error properly. This is why implementing custom error handling logic is such a common and desirable task. Achieving it requires more effort than you might think, and you need to delve into a few essential Spring Boot notions. Let\u0026#39;s see everything required to get started with custom error handling in Spring Boot and Java.\u003c/p\u003e\u003ch2 id=\"Prerequisites\"\u003ePrerequisites\u003c/h2\u003e\u003cp\u003eThis is the list of all the prerequisites for following the article:\u003c/p\u003e\u003cul\u003e\u003cli\u003eJava \u0026gt;= 1.8 (Java \u0026gt;= 13 recommended)\u003c/li\u003e\u003cli\u003eSpring Boot \u0026gt;= 2.5\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring Boot Starter Web\u003c/a\u003e \u0026gt;= 2.5\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://mvnrepository.com/artifact/org.springframework.security/spring-security-core\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring Security\u003c/a\u003e \u0026gt;= 5.5\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://mvnrepository.com/artifact/org.projectlombok/lombok\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eProject Lombok\u003c/a\u003e \u0026gt;= 1.18\u003c/li\u003e\u003cli\u003eGradle \u0026gt;= 4.x or Maven 3.6.x\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Default-Error-Handling-in-Spring-Boot\"\u003eDefault Error Handling in Spring Boot\u003c/h2\u003e\u003cp\u003eBy default, Spring Boot offers a fallback error-handling page, as well as an error-handling response in case of REST requests. Particularly, Spring Boot looks for a mapping for the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eerror\u003c/code\u003e endpoint during the start-up. This mapping depends on what is set on a \u003ca href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/ViewResolver.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eViewResolver\u003c/code\u003e\u003c/a\u003e class. When no valid mappings can be found, Spring Boot automatically configures a default fallback error page. This so-called \u003cem\u003eWhitelabel Error Page\u003c/em\u003e is nothing more than a white HTML page containing the HTTP status code and a vague error message. This is what such a page looks like:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n   \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ehead\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ehead\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n   \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ebody\u003c/span\u003e \u003cspan\u003edata-new-gr-c-s-check-loaded\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e14.1026.0\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003edata-gr-ext-installed\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eWhitelabel Error Page\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eThis application has no explicit mapping for /error, so you are seeing this as a fallback.\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ediv\u003c/span\u003e \u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecreated\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eSun Aug 15 14:32:17 UTC 2021\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eThere was an unexpected error (type=Internal Server Error, status=500).\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n   \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is what the \u003cem\u003eWhitelabel\u003c/em\u003e HTML page looks like in your browser:\n\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3uDV4oIkM9VkBKdc37xA9n/647cc2fc212b61a1aa3ff4d52a99c032/whitelabel-error-page.jpg\" alt=\"The Spring Boot Whitelabel HTML Error Page\" title=\"The Spring Boot Whitelabel HTML Error Page\"/\u003e\n\u003c/p\u003e\u003cp\u003e\u003ci\u003eThe Spring Boot Whitelabel HTML Error Page\u003c/i\u003e\u003c/p\u003e\u003cp\u003eSimilarly, when dealing with REST requests, Spring Boot automatically returns a default JSON response in case of errors. This contains the same information as the aforementioned \u003cem\u003eWhitelabel\u003c/em\u003e HTML error page and looks as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;2021-15-08T14:32:17.947+0000\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e500\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Internal Server Error\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;path\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;/test\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see, the default Spring Boot error handling responses for REST does not provide much information. This can quickly become a problem, especially when trying to debug. It is also problematic for front-end developers, who need detailed information coming from API error response messages to be able to explain to the end users what happened properly. \u003c/p\u003e\u003cp\u003eLet’s see how to replace this default response with custom-defined messages. While this may appear like an easy task, this is actually a tricky one. To achieve it, you first need to know a few Spring Boot fundamentals. Let\u0026#39;s learn more about them.\u003c/p\u003e\u003ch2 id=\"Custom-Error-Handling-in-Spring-Boot\"\u003eCustom Error Handling in Spring Boot\u003c/h2\u003e\u003cp\u003eYou are about to see two different approaches to custom error handling in Spring Boot REST applications. Both are based on a \u003ccode\u003e@ControllerAdvice\u003c/code\u003e annotated class handling all exceptions that may occur. So, let’s first see what a \u003ccode\u003e@ControllerAdvice\u003c/code\u003e annotated class is, why to use it, how, and when. Then, you will learn how to implement the two different approaches in detail. Finally, the pros and cons of each method will be explained.\u003c/p\u003e\u003ch2 id=\"Handling-Exceptions-with---ControllerAdvice-\"\u003eHandling Exceptions with \u003ccode\u003e@ControllerAdvice\u003c/code\u003e\u003c/h2\u003e\u003cp\u003eThe \u003ca href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@ControllerAdvice\u003c/code\u003e\u003c/a\u003e annotation was introduced in \u003ca href=\"https://docs.spring.io/spring-framework/docs/3.2.8.RELEASE/changelog.txt\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring 3.2\u003c/a\u003e to make exception handling logic easier and entirely definable in one place. In fact, \u003ccode\u003e@ControllerAdvice\u003c/code\u003e allows you to address exception handling across the whole application. In other words, a single \u003ccode\u003e@ControllerAdvice\u003c/code\u003e annotated class can handle exceptions thrown from any place in your application. Thus, classes annotated with \u003ccode\u003e@ControllerAdvice\u003c/code\u003e are powerful and flexible tools. Not only do they allow you to centralize exception-handling logic into a global component, but also give you control over the body response, as well as the HTTP status code. This is especially important when trying to achieve custom error handling. Let’s see \u003ccode\u003e@ControllerAdvice\u003c/code\u003e in action.\u003c/p\u003e\u003cp\u003eNow, you are about to see everything required to implement two custom error handling approaches based on \u003ccode\u003e@ControllerAdvice\u003c/code\u003e. First, you should clone \u003ca href=\"https://github.com/Tonel/spring-boot-custom-error-handling\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe GitHub repository\u003c/a\u003e supporting this article. By analyzing the codebase, going through this article will become easier. Also, you will be able to immediately see the two approaches in action.\u003c/p\u003e\u003cp\u003eSo, clone the repository with the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003egit\u003c/span\u003e clone https://github.com/Tonel/spring-boot-custom-error-handling\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, run the \u003ccode\u003eDemoApplication\u003c/code\u003e main class by following \u003ca href=\"https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/using-boot-running-your-application.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis guide from the Spring Boot official documentation\u003c/a\u003e, and reach one of the following 4 endpoints to see the custom error handling responses:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003etest\u003cspan\u003e-\u003c/span\u003ecustom\u003cspan\u003e-\u003c/span\u003edata\u003cspan\u003e-\u003c/span\u003enot\u003cspan\u003e-\u003c/span\u003efound\u003cspan\u003e-\u003c/span\u003eexception\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003etest\u003cspan\u003e-\u003c/span\u003ecustom\u003cspan\u003e-\u003c/span\u003eparameter\u003cspan\u003e-\u003c/span\u003econstraint\u003cspan\u003e-\u003c/span\u003eexception\u003cspan\u003e?\u003c/span\u003evalue\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e12\u003c/span\u003e\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003etest\u003cspan\u003e-\u003c/span\u003ecustom\u003cspan\u003e-\u003c/span\u003eerror\u003cspan\u003e-\u003c/span\u003eexception\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003etest\u003cspan\u003e-\u003c/span\u003egeneric\u003cspan\u003e-\u003c/span\u003eexception\u003c/code\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eThe first two APIs apply the first approach to error handling you are about to see, while the third API uses the second approach. The fourth and last API shows the fallback error handling logic presented above in action. Now, let\u0026#39;s delve into implementing these two approaches to custom error handling in Spring Boot.\u003c/p\u003e\u003cp\u003eBoth of them rely on an \u003ccode\u003eErrorMessage\u003c/code\u003e class representing the custom error body placed in an \u003ccode\u003eerror\u003c/code\u003e package, containing everything needed to deal with custom error handling logic. This can be implemented as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/java/com/customerrorhandling/demo/errors/ErrorResponse.java\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003ecustomerrorhandling\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003eerrors\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003efasterxml\u003cspan\u003e.\u003c/span\u003ejackson\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eJsonFormat\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003elombok\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eGetter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003elombok\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eSetter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eutil\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@Getter\u003c/span\u003e\n\u003cspan\u003e@Setter\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eErrorResponse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// customizing timestamp serialization format\u003c/span\u003e\n    \u003cspan\u003e@JsonFormat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eshape \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eJsonFormat\u003cspan\u003e.\u003c/span\u003eShape\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eSTRING\u003cspan\u003e,\u003c/span\u003e pattern \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;dd-MM-yyyy hh:mm:ss\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eDate\u003c/span\u003e timestamp\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e code\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e status\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e message\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e stackTrace\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e data\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eErrorResponse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        timestamp \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eErrorResponse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003eHttpStatus\u003c/span\u003e httpStatus\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003eString\u003c/span\u003e message\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ecode \u003cspan\u003e=\u003c/span\u003e httpStatus\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003estatus \u003cspan\u003e=\u003c/span\u003e httpStatus\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003emessage \u003cspan\u003e=\u003c/span\u003e message\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eErrorResponse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003eHttpStatus\u003c/span\u003e httpStatus\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003eString\u003c/span\u003e message\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003eString\u003c/span\u003e stackTrace\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                httpStatus\u003cspan\u003e,\u003c/span\u003e\n                message        \n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003estackTrace \u003cspan\u003e=\u003c/span\u003e stackTrace\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eErrorResponse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003eHttpStatus\u003c/span\u003e httpStatus\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003eString\u003c/span\u003e message\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003eString\u003c/span\u003e stackTrace\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003eObject\u003c/span\u003e data\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                httpStatus\u003cspan\u003e,\u003c/span\u003e\n                message\u003cspan\u003e,\u003c/span\u003e\n        stackTrace\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edata \u003cspan\u003e=\u003c/span\u003e data\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ca href=\"https://projectlombok.org/features/GetterSetter\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Getter\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://projectlombok.org/features/GetterSetter\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Setter\u003c/code\u003e\u003c/a\u003e annotations used in the code examples above are part of the \u003ca href=\"https://projectlombok.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eProject Lombok\u003c/code\u003e\u003c/a\u003e. They are used to automatically generate getters and setters. This is not mandatory and is just an additional way to avoid boilerplate code. Read \u003ca href=\"https://auth0.com/blog/a-complete-guide-to-lombok/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis\u003c/a\u003e article to find out more about Lombok.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eErrorResponse\u003c/code\u003e carries information such as an HTTP status \u003ccode\u003ecode\u003c/code\u003e and \u003ccode\u003ename\u003c/code\u003e, a \u003ccode\u003etimestamp\u003c/code\u003e indicating when the error occurred, an optional error \u003ccode\u003emessage\u003c/code\u003e, an optional \u003ca href=\"https://en.wikibooks.org/wiki/Java_Programming/Stack_trace\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eexception stacktrace\u003c/code\u003e\u003c/a\u003e, and an optional object containing any kind of \u003ccode\u003edata\u003c/code\u003e. You should try to provide values to the first three fields, while the latter should be used only when required. In particular, the \u003ccode\u003estackTrace\u003c/code\u003e field should be valorized only in staging or development environments, as explained \u003ca href=\"https://betterprogramming.pub/environment-based-error-handling-with-spring-boot-and-kotlin-b36b901135ad\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e. Similarly, the data field should be used only when additional data is required. Specifically, to explain in detail what happened or let the front-end better handle the error.\u003c/p\u003e\u003cp\u003eThis class can be used to achieve a custom response when handling exceptions with \u003ccode\u003e@ControllerAdvice\u003c/code\u003e as below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/java/com/customerrorhandling/demo/errors/CustomControllerAdvice.java\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003ecustomerrorhandling\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003eerrors\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eexceptions\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eCustomDataNotFoundException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eexceptions\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eCustomErrorException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eexceptions\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eCustomParameterConstraintException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003ebind\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eControllerAdvice\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003ebind\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eExceptionHandler\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eio\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003ePrintWriter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eio\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eStringWriter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@ControllerAdvice\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCustomControllerAdvice\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e@ExceptionHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eNullPointerException\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e// exception handled\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eErrorResponse\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003ehandleNullPointerExceptions\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003eException\u003c/span\u003e e\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e// ... potential custom logic\u003c/span\u003e\n\n        \u003cspan\u003eHttpStatus\u003c/span\u003e status \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eNOT_FOUND\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e// 404\u003c/span\u003e\n\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eErrorResponse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n              status\u003cspan\u003e,\u003c/span\u003e \n              e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            status\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e// fallback method\u003c/span\u003e\n    \u003cspan\u003e@ExceptionHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eException\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e// exception handled\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eErrorResponse\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003ehandleExceptions\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003eException\u003c/span\u003e e\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e// ... potential custom logic\u003c/span\u003e\n\n        \u003cspan\u003eHttpStatus\u003c/span\u003e status \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eINTERNAL_SERVER_ERROR\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e// 500\u003c/span\u003e\n\n    \u003cspan\u003e// converting the stack trace to String\u003c/span\u003e\n    \u003cspan\u003eStringWriter\u003c/span\u003e stringWriter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eStringWriter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003ePrintWriter\u003c/span\u003e printWriter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003ePrintWriter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estringWriter\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprintStackTrace\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eprintWriter\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eString\u003c/span\u003e stackTrace \u003cspan\u003e=\u003c/span\u003e stringWriter\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eErrorResponse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n              status\u003cspan\u003e,\u003c/span\u003e \n              e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n              stackTrace \u003cspan\u003e// specifying the stack trace in case of 500s\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            status\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see, \u003ccode\u003e@ControllerAdvice\u003c/code\u003e works by employing the \u003ca href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@ExceptionHandler\u003c/code\u003e\u003c/a\u003e method-level annotation. This annotation allows you to define which method should be called in case of an error. Specifically, the exception thrown is compared to the exceptions passed as parameters to \u003ccode\u003e@ExceptionHandler\u003c/code\u003e based on type. The first method where there is a match is called. If none matched, then the exception\u0026#39;s parent class is tested, and so on. This is also why you should implement a fallback method to cover all remaining cases. You can achieve this by passing the \u003ca href=\"https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Exception.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eException\u003c/code\u003e\u003c/a\u003e class to the \u003ccode\u003e@ExceptionHandler\u003c/code\u003e annotation, just like in the \u003ccode\u003ehandleExceptions\u003c/code\u003e method. In fact, any exception in Java must have \u003ccode\u003eException\u003c/code\u003e as one of its ancestors in their inheritance chain. So, they all extend directly — or as subclasses — the \u003ccode\u003eException\u003c/code\u003e \u003ca href=\"https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esuperclass\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThen, each method handles the error and might even implement custom logic, such as logging. In this example, each exception is handled by returning a \u003ca href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eResponseEntity\u003c/code\u003e\u003c/a\u003e having the desired \u003ca href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/HttpStatus.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eHttpStatus\u003c/code\u003e\u003c/a\u003e. This will be used as an HTTP status code associated with the error response. Similarly, the \u003ccode\u003eErrorResponse\u003c/code\u003e instance passed to the \u003ccode\u003eResponseEntity\u003c/code\u003e constructor will be automatically serialized in JSON and used as the message body. This way, custom error handling has just been achieved.\u003c/p\u003e\u003cp\u003eNow, you will dive into how to use \u003ccode\u003e@ConfrollerAdvice\u003c/code\u003e to implement two different approaches to custom error handling for REST in Spring Boot Web. The first one involves boilerplate code, but it is clean and best-practice based. In contrast, the second represents a good solution in terms of convenience, although it is a bit dirty.\u003c/p\u003e\u003ch3 id=\"Defining-Many-Custom-Exceptions\"\u003eDefining Many Custom Exceptions\u003c/h3\u003e\u003cp\u003eThis approach involves having as many methods in your \u003ccode\u003e@ControllerAdvice\u003c/code\u003e as many HTTP error status codes you want to handle. These methods will be related to one or more exceptions and return an error message with a particular HTTP status code. Implementing such an approach required three steps. First, you have to think about all the HTTP error status codes you want your application to return. Then, you have to define a method for each of them in your \u003ccode\u003e@ControllerAdvice\u003c/code\u003e annotated class. Lastly, you have to associate these methods with their exceptions with the \u003ccode\u003e@ExceptionHandler\u003c/code\u003e annotation.\u003c/p\u003e\u003cp\u003eThis means that all exceptions of a particular type will be traced back to their relative method in the \u003ccode\u003e@ControllerAdvice\u003c/code\u003e annotated class. This may represent a problem, especially considering some exceptions are more common than others, such as \u003ca href=\"https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/NullPointerException.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e. Since these exceptions can be thrown in many parts of your logic, they might have different meanings. Thus, they represent various errors and, therefore, other HTTP status codes.\u003c/p\u003e\u003cp\u003eThe solution is to introduce new custom exceptions wrapping these frequent exceptions. For example, a \u003ccode\u003eNullPointerException\u003c/code\u003e can become a \u003ccode\u003eCustomParameterConstraintException\u003c/code\u003e exception at the controller layer, and a \u003ccode\u003eCustomDataNotFoundException\u003c/code\u003e at the DAO  (\u003ca href=\"https://it.wikipedia.org/wiki/Data_Access_Object\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eData Access Object\u003c/a\u003e) layer. In this case, the first one can be associated with a \u003cem\u003e400 Bad Request\u003c/em\u003e, and the second with a \u003cem\u003e404 Not Found\u003c/em\u003e HTTP status. The idea behind these exceptions is to give the error that occurred a more specific meaning. This better characterizes the error and makes it more handleable in the \u003ccode\u003e@ControllerAdvice\u003c/code\u003e annotated class accordingly. So, you should define a custom exception for each particular error you want to handle. Also, using custom exception classes represents undoubtedly a clean code principle. Thus, by adopting it, you are going to have more than one benefit.\u003c/p\u003e\u003cp\u003eSo, let’s see this approach in action through an example. Firstly, you have to define custom exceptions, as shown here:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/java/exceptions/CustomParameterConstraintException.java\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003eexceptions\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCustomParameterConstraintException\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eRuntimeException\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e  \n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eCustomParameterConstraintException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eCustomParameterConstraintException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e message\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003emessage\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/java/exceptions/CustomDataNotFoundException.java\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003eexceptions\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCustomDataNotFoundException\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eRuntimeException\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e  \n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eCustomDataNotFoundException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eCustomDataNotFoundException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e message\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003emessage\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, use them to wrap frequent exceptions, or to throw them in case of particular circumstances representing errors in your business logic. Let’s see how with two examples:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// DAO-level method\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eFoo\u003c/span\u003e \u003cspan\u003eretrieveFooById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003eint\u003c/span\u003e id\n\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e// data retrieving logic\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003ecatch\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eNullPointerException\u003c/span\u003e e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethrow\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eCustomDataNotFoundException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ee\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs shown above, a generic \u003ccode\u003eNullPointerException\u003c/code\u003e is turned into a more meaningful \u003ccode\u003eCustomDataNotFoundException\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// controller-level method method\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eVoid\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eperformOperation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003eint\u003c/span\u003e numberOfAttempts\n\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003enumberOfAttempts \u003cspan\u003e\u0026lt;=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e numberOfAttempts \u003cspan\u003e\u0026gt;=\u003c/span\u003e \u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003ethrow\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eCustomParameterConstraintException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;numberOfAttempts must be \u0026gt;= 0 and \u0026lt;= 5!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \n    \u003cspan\u003e// business logic\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere, a particular behavior that should not happen is intercepted. Then, the custom \u003ccode\u003eCustomParameterConstraintException\u003c/code\u003e exception describing it is thrown.\u003c/p\u003e\u003cp\u003eFinally, all you have to do is add two particular methods to your \u003ccode\u003e@ControllerAdvice\u003c/code\u003e annotated class, one for each specific error.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/java/com/customerrorhandling/demo/errors/CustomControllerAdvice.java\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003ecustomerrorhandling\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003eerrors\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eexceptions\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eCustomDataNotFoundException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eexceptions\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eCustomErrorException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eexceptions\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eCustomParameterConstraintException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003ebind\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eControllerAdvice\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003ebind\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eExceptionHandler\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eio\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003ePrintWriter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eio\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eStringWriter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@ControllerAdvice\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCustomControllerAdvice\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// ...\u003c/span\u003e\n\n    \u003cspan\u003e@ExceptionHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eCustomDataNotFoundException\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eErrorResponse\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003ehandleCustomDataNotFoundExceptions\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003eException\u003c/span\u003e e\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eHttpStatus\u003c/span\u003e status \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eNOT_FOUND\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e// 404\u003c/span\u003e\n\n    \u003cspan\u003e// converting the stack trace to String\u003c/span\u003e\n    \u003cspan\u003eStringWriter\u003c/span\u003e stringWriter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eStringWriter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003ePrintWriter\u003c/span\u003e printWriter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003ePrintWriter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estringWriter\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprintStackTrace\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eprintWriter\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eString\u003c/span\u003e stackTrace \u003cspan\u003e=\u003c/span\u003e stringWriter\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eErrorResponse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n              status\u003cspan\u003e,\u003c/span\u003e \n              e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          stackTrace\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e// assuming to be in staging environment, otherwise stackTrace should not be valorized\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            status\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@ExceptionHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eCustomParameterConstraintException\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eErrorResponse\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003ehandleCustomParameterConstraintExceptions\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003eException\u003c/span\u003e e\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eHttpStatus\u003c/span\u003e status \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eBAD_REQUEST\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e// 400\u003c/span\u003e\n\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eErrorResponse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n              status\u003cspan\u003e,\u003c/span\u003e \n              e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            status\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e// ...\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEt voilà! Both errors originally related to the same exception were first characterized and then handled accordingly.\u003c/p\u003e\u003cp\u003eNow, let\u0026#39;s see the difference. This is what the default error response would look like on a 404 error:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;2021-15-08T14:32:17.947+0000\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e404\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Not Found\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;path\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;/test404\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd this is what the custom error response just implemented looks like:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;2021-15-08 14:32:17\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;code\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e404\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;NOT_FOUND\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Resource not found\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;stackTrace\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u0026#34;Exception in thread \\\u0026#34;main\\\u0026#34; com.example.demo.exceptions.CustomDataNotFoundException\n        at com.example.demo.AuthorController.getAuthor(AuthorController.java\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e16\u003c/span\u003e)\n        at com.example.demo.AuthorService.getAuthor(AuthorService.java\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e37\u003c/span\u003e)\n        at com.example.demo.AuthorDao.getById(AuthorDao.java\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e24\u003c/span\u003e)\u0026#34;\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Defining-a-Single-Custom-Exception-Carrying-All-Data\"\u003eDefining a Single Custom Exception Carrying All Data\u003c/h3\u003e\u003cp\u003eThis approach involves defining a custom exception carrying the HTTP status to use, and all the data required to describe the error that occurred. The idea is to turn every exception you want to handle, or you would like to throw under special circumstances, into an instance of this particular exception. This way, you are spreading the error characterization logic into all your code. So, you will only have to add a new method in your \u003ccode\u003e@ControllerAdvice\u003c/code\u003e annotated class to handle this custom exception accordingly.\u003c/p\u003e\u003cp\u003eFirst, you have to define a custom error handling exception. This can be achieved as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/java/exceptions/CustomErrorException.java\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003eexceptions\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003elombok\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eGetter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003elombok\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eSetter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@Getter\u003c/span\u003e\n\u003cspan\u003e@Setter\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCustomErrorException\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eRuntimeException\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eHttpStatus\u003c/span\u003e status \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e data \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eCustomErrorException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n   \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eCustomErrorException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      \u003cspan\u003eString\u003c/span\u003e message\n   \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \n      \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003emessage\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n   \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eCustomErrorException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003eHttpStatus\u003c/span\u003e status\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003eString\u003c/span\u003e message\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003emessage\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003estatus \u003cspan\u003e=\u003c/span\u003e status\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eCustomErrorException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003eHttpStatus\u003c/span\u003e status\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003eString\u003c/span\u003e message\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003eObject\u003c/span\u003e data\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          status\u003cspan\u003e,\u003c/span\u003e\n      message\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edata \u003cspan\u003e=\u003c/span\u003e data\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAgain, the \u003ca href=\"https://projectlombok.org/features/GetterSetter\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Getter\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://projectlombok.org/features/GetterSetter\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Setter\u003c/code\u003e\u003c/a\u003e annotations were used to avoid boilerplate code and are not mandatory. As you can see, the \u003ccode\u003eCustomErrorException\u003c/code\u003e class carries the same data used in the \u003ccode\u003eErrorResponse\u003c/code\u003e class to better describe what happened and present the errors to the end-users.\u003c/p\u003e\u003cp\u003eSo, you can use this exception to wrap other exceptions, or you can throw it in case of particular circumstances constituting errors in your business logic. Now, let’s see how with two examples:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// DAO-level method\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eFoo\u003c/span\u003e \u003cspan\u003eretrieveFooById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003eint\u003c/span\u003e id\n\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e// data retrieving logic\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003ecatch\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eNullPointerException\u003c/span\u003e e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethrow\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eCustomErrorException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          \u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eNOT_FOUND\u003cspan\u003e,\u003c/span\u003e\n          e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eInteger\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e id\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere, an insufficiently significant \u003ccode\u003eNullPointerException\u003c/code\u003e is turned into a more detailed \u003ccode\u003eCustomErrorException\u003c/code\u003e containing all the data to describe why the error occurred.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// controller-level method method\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eVoid\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eperformOperation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003eint\u003c/span\u003e numberOfAttempts\n\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003enumberOfAttempts \u003cspan\u003e\u0026lt;=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e numberOfAttempts \u003cspan\u003e\u0026gt;=\u003c/span\u003e \u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethrow\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eCustomErrorException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          \u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eBAD_REQUEST\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e\u0026#34;numberOfAttempts must be \u0026gt;= 0 and \u0026lt;= 5!\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eInteger\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e numberOfAttempts\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n        \n    \u003cspan\u003e// business logic\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSimilarly, a particular behavior that is not supposed to happen is intercepted. Consequently, a \u003ccode\u003eCustomErrorException\u003c/code\u003e exception containing all the useful data to represent the error is thrown.\u003c/p\u003e\u003cp\u003eLastly, add one method to handle \u003ccode\u003eCustomErrorException\u003c/code\u003e exception instances to your \u003ccode\u003e@ControllerAdvice\u003c/code\u003e annotated class, as below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/java/com/customerrorhandling/demo/errors/CustomControllerAdvice.java\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003ecustomerrorhandling\u003cspan\u003e.\u003c/span\u003edemo\u003cspan\u003e.\u003c/span\u003eerrors\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eexceptions\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eCustomDataNotFoundException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eexceptions\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eCustomErrorException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eexceptions\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eCustomParameterConstraintException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003ebind\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eControllerAdvice\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003ebind\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eExceptionHandler\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eio\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003ePrintWriter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eio\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eStringWriter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@ControllerAdvice\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCustomControllerAdvice\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// ...\u003c/span\u003e\n\n    \u003cspan\u003e@ExceptionHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eCustomErrorException\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eErrorResponse\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003ehandleCustomErrorExceptions\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003eException\u003c/span\u003e e\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e// casting the generic Exception e to CustomErrorException\u003c/span\u003e\n        \u003cspan\u003eCustomErrorException\u003c/span\u003e customErrorException \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eCustomErrorException\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003eHttpStatus\u003c/span\u003e status \u003cspan\u003e=\u003c/span\u003e customErrorException\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetStatus\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003e// converting the stack trace to String\u003c/span\u003e\n        \u003cspan\u003eStringWriter\u003c/span\u003e stringWriter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eStringWriter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ePrintWriter\u003c/span\u003e printWriter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003ePrintWriter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estringWriter\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        customErrorException\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprintStackTrace\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eprintWriter\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eString\u003c/span\u003e stackTrace \u003cspan\u003e=\u003c/span\u003e stringWriter\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eErrorResponse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                        status\u003cspan\u003e,\u003c/span\u003e\n                        customErrorException\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                        stackTrace\u003cspan\u003e,\u003c/span\u003e\n                        customErrorException\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                status\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e// ...\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote that \u003ccode\u003e@ExceptionHandler\u003c/code\u003e can accept more than one exception type. This means that the parameter of the method representing the exception must be downcasted. Otherwise, a \u003ca href=\"https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/ClassCastException.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eClassCastException\u003c/code\u003e\u003c/a\u003e will be throw. So, upcast the exception \u003ccode\u003ee\u003c/code\u003e to \u003ccode\u003eCustomErrorException\u003c/code\u003e inside the method. Then, you will be able to access its particular fields and define a valid \u003ccode\u003eErrorResponse\u003c/code\u003e instance.\u003c/p\u003e\u003cp\u003eDone! This way each error that occurs is encapsulated into an exception containing everything required to describe it.\u003c/p\u003e\u003cp\u003eNow, let\u0026#39;s see the difference. This is what the default error response on a 404 error would look like:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;2021-15-08T14:32:17.947+0000\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e404\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Not Found\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;path\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;/test404\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd this is what the custom error response just implemented looks like:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;2021-15-08 14:32:17\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;code\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e404\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;NOT_FOUND\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Resource not found\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;stackTrace\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u0026#34;Exception in thread \\\u0026#34;main\\\u0026#34; com.example.demo.exceptions.CustomErrorException\n        at com.example.demo.AuthorController.getAuthor(AuthorController.java\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e16\u003c/span\u003e)\n        at com.example.demo.AuthorService.getAuthor(AuthorService.java\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e37\u003c/span\u003e)\n        at com.example.demo.AuthorDao.getById(AuthorDao.java\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e24\u003c/span\u003e)\u0026#34;\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Pros-and-Cons-of-Each-Approach\"\u003ePros and Cons of Each Approach\u003c/h3\u003e\u003cp\u003eThe first approach should be used when you do not want to spread error handling logic all over your codebase. In fact, the HTTP status code is only associated with errors in your \u003ccode\u003e@ControllerAdvice\u003c/code\u003e annotated class. This means that no layer knows how the error will be handled and presented to users. Although this should be the desired behavior because it respects the \u003ca href=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eprinciple of least privilege\u003c/a\u003e, it does involve boilerplate code. In fact, you may easily end up with dozens of custom exceptions, and define them is a tedious and not-scalable approach.\u003c/p\u003e\u003cp\u003eSo, you may want a less restricting approach, and this is why the second approach was presented. Unfortunately, this one is definitely dirtier. In fact, it requires you to spread detail about error handling logic in many different points of your code. In contrast, it is scalable and quicker to be implemented. So, despite not being the cleanest approach, it allows you to achieve the desired result with little effort. Plus, it is more maintainable than the first approach because it involves only a custom exception.\u003c/p\u003e\u003ch2 id=\"Custom-Error-Handling-in-Spring-Security\"\u003eCustom Error Handling in Spring Security\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://spring.io/projects/spring-security\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring Security\u003c/a\u003e is a powerful and highly customizable framework that provides both authentication and authorization. It is one of the most widely used Spring dependencies and represents the de-facto standard for securing a Spring Boot application.\u003c/p\u003e\u003cp\u003eIn case of authentication and authorization failures, \u003ca href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/AuthenticationException.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eAuthenticationException\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/access/AccessDeniedException.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eAccessDeniedException\u003c/code\u003e\u003c/a\u003e are thrown respectively. Then, Spring Security takes care of encapsulating them in default error handling responses. If you want to customize them, the two approaches presented above are of no use. This is because \u003ccode\u003e@ControllerAdvice\u003c/code\u003e can handle only exceptions thrown by controllers, but \u003ccode\u003eAuthenticationException\u003c/code\u003e and \u003ccode\u003eAccessDeniedException\u003c/code\u003e are thrown by the Spring Security \u003ca href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/access/intercept/AbstractSecurityInterceptor.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eAbstractSecurityInterceptor\u003c/code\u003e\u003c/a\u003e component - which is not a controller. In other words, a \u003ccode\u003e@ControllerAdvice\u003c/code\u003e annotated class cannot catch them. Achieving this requires custom logic. \u003c/p\u003e\u003ch3 id=\"Implementing-Custom-Error-Handling-Logic-in-Spring-Security\"\u003eImplementing Custom Error Handling Logic in Spring Security\u003c/h3\u003e\u003cp\u003eLet’s take a look at how to implement custom error handling in Spring Security. Luckily, this is not too complex since you can easily provide Spring Security with two components to handle authentication and authorization errors, respectively. What you need to do is to provide the \u003ca href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/authentication/AuthenticationFailureHandler.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eAuthenticationFailureHandler\u003c/code\u003e\u003c/a\u003e interface with implementation, as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/java/com/auth0/hotsauces/security/CustomAuthenticationFailureHandler.java\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003ehotsauces\u003cspan\u003e.\u003c/span\u003esecurity\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003efasterxml\u003cspan\u003e.\u003c/span\u003ejackson\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eJsonFormat\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003efasterxml\u003cspan\u003e.\u003c/span\u003ejackson\u003cspan\u003e.\u003c/span\u003edatabind\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eObjectMapper\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAuthenticationException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003eauthentication\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAuthenticationFailureHandler\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eutil\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejavax\u003cspan\u003e.\u003c/span\u003eservlet\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eHttpServletRequest\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejavax\u003cspan\u003e.\u003c/span\u003eservlet\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eHttpServletResponse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eutil\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eHashMap\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCustomAuthenticationFailureHandler\u003c/span\u003e \u003cspan\u003eimplements\u003c/span\u003e \u003cspan\u003eAuthenticationFailureHandler\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Jackson JSON serializer instance\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eObjectMapper\u003c/span\u003e objectMapper \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eObjectMapper\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e@Override\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003eonAuthenticationFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      \u003cspan\u003eHttpServletRequest\u003c/span\u003e request\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003eHttpServletResponse\u003c/span\u003e response\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003eAuthenticationException\u003c/span\u003e exception\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ethrows\u003c/span\u003e \u003cspan\u003eIOException\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eServletException\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \n        \u003cspan\u003eHttpStatus\u003c/span\u003e httpStatus \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eUNAUTHORIZED\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e// 401        \u003c/span\u003e\n\n        \u003cspan\u003eMap\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e data \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eHashMap\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        data\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          \u003cspan\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n          \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        data\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          \u003cspan\u003e\u0026#34;code\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n          httpStatus\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        data\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n          httpStatus\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        data\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n          exception\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \n        \u003cspan\u003e// setting the response HTTP status code\u003c/span\u003e\n        response\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetStatus\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehttpStatus\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \n        \u003cspan\u003e// serializing the response body in JSON\u003c/span\u003e\n        response\n          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetOutputStream\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n              objectMapper\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewriteValueAsString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003edata\u003cspan\u003e)\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis will be used to handle \u003ccode\u003eAuthenticationExceptions\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eSimilarly, you can provide the \u003ca href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/access/AccessDeniedHandler.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eAccessDeniedHandler\u003c/code\u003e\u003c/a\u003e interface with implementation to handle \u003ccode\u003eAccessDeniedExceptions\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/java/com/auth0/hotsauces/security/CustomAccessDeniedHandler.java\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003ehotsauces\u003cspan\u003e.\u003c/span\u003esecurity\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003efasterxml\u003cspan\u003e.\u003c/span\u003ejackson\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eJsonFormat\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003efasterxml\u003cspan\u003e.\u003c/span\u003ejackson\u003cspan\u003e.\u003c/span\u003edatabind\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eObjectMapper\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAuthenticationException\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003eauthentication\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAuthenticationFailureHandler\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eutil\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejavax\u003cspan\u003e.\u003c/span\u003eservlet\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eHttpServletRequest\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejavax\u003cspan\u003e.\u003c/span\u003eservlet\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eHttpServletResponse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eutil\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eHashMap\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCustomAccessDeniedHandler\u003c/span\u003e \u003cspan\u003eimplements\u003c/span\u003e \u003cspan\u003eAccessDeniedHandler\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Jackson JSON serializer instance\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eObjectMapper\u003c/span\u003e objectMapper \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eObjectMapper\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e@Override\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003ehandle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      \u003cspan\u003eHttpServletRequest\u003c/span\u003e request\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003eHttpServletResponse\u003c/span\u003e response\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003eAccessDeniedException\u003c/span\u003e exception\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ethrows\u003c/span\u003e \u003cspan\u003eIOException\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eServletException\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \n        \u003cspan\u003eHttpStatus\u003c/span\u003e httpStatus \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eHttpStatus\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eFORBIDDEN\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e// 403        \u003c/span\u003e\n\n        \u003cspan\u003eMap\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e data \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eHashMap\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        data\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          \u003cspan\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n          \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        data\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          \u003cspan\u003e\u0026#34;code\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n          httpStatus\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        data\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n          httpStatus\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        data\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n          exception\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \n        \u003cspan\u003e// setting the response HTTP status code\u003c/span\u003e\n        response\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetStatus\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehttpStatus\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \n        \u003cspan\u003e// serializing the response body in JSON\u003c/span\u003e\n        response\n          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetOutputStream\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n              objectMapper\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewriteValueAsString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003edata\u003cspan\u003e)\u003c/span\u003e\n          \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, you just need to register these two custom implementations as authentication and authorization error handlers. You can do this as below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/java/com/auth0/hotsauces/security/SecurityConfig.java\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003ehotsauces\u003cspan\u003e.\u003c/span\u003esecurity\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ebeans\u003cspan\u003e.\u003c/span\u003efactory\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eValue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eBean\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003ebuilders\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eHttpSecurity\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003econfiguration\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eEnableWebSecurity\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003econfiguration\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eWebSecurityConfigurerAdapter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eoauth2\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eDelegatingOAuth2TokenValidator\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eoauth2\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eOAuth2TokenValidator\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eoauth2\u003cspan\u003e.\u003c/span\u003ejwt\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eoauth2\u003cspan\u003e.\u003c/span\u003eserver\u003cspan\u003e.\u003c/span\u003eresource\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eBearerTokenAuthenticationFilter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003eaccess\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAccessDeniedHandler\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003eauthentication\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAuthenticationFailureHandler\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@EnableWebSecurity\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eSecurityConfig\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eWebSecurityConfigurerAdapter\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// ...\u003c/span\u003e\n\n    \u003cspan\u003e@Override\u003c/span\u003e\n    \u003cspan\u003eprotected\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003econfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eHttpSecurity\u003c/span\u003e http\u003cspan\u003e)\u003c/span\u003e \n      \u003cspan\u003ethrows\u003c/span\u003e \u003cspan\u003eException\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        http\n          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthorizeRequests\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eanyRequest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthenticated\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eand\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eformLogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efailureHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauthenticationFailureHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \n          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eand\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eexceptionHandling\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaccessDeniedHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eaccessDeniedHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@Bean\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eAuthenticationFailureHandler\u003c/span\u003e \u003cspan\u003eauthenticationFailureHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eCustomAuthenticationFailureHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@Bean\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eAccessDeniedHandler\u003c/span\u003e \u003cspan\u003eaccessDeniedHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eCustomAccessDeniedHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEt voilà! Custom error handling in Spring Boot has just been achieved thanks to the \u003ccode\u003efailureHandler\u003c/code\u003e and \u003ccode\u003eaccessDeniedHandler\u003c/code\u003e methods, which allows you to register a custom authentication error handler and a custom authorization error handler.\u003c/p\u003e\u003ch3 id=\"Spring-Security-Custom-Error-Handling-in-Action\"\u003eSpring Security Custom Error Handling in Action\u003c/h3\u003e\u003cp\u003eNow, let’s see how to implement it in a real-world example. First, read \u003ca href=\"https://auth0.com/blog/build-and-secure-an-api-with-spring-boot/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis\u003c/a\u003e article on how to protect APIs with Spring Security and Auth0. In the demo application produced in that article, no custom error handling is implemented. So, by making a request to a protected API including a wrong access token, the default Spring Boot error handling logic is applied. Let’s test it out.\u003c/p\u003e\u003cp\u003eIf you are a macOS or Linux user, enter this command into the terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ecurl \u003cspan\u003e-\u003c/span\u003ei \u003cspan\u003e--\u003c/span\u003erequest \u003cspan\u003eGET\u003c/span\u003e \\\n     \u003cspan\u003e--\u003c/span\u003eurl http\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003ehotsauces\u003cspan\u003e/\u003c/span\u003e \\\n     \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eH\u003c/span\u003e \u003cspan\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \\\n     \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eH\u003c/span\u003e \u003cspan\u003e\u0026#34;authorization: Bearer wrong-token\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOtherwise, if you are a Windows user, enter this command into PowerShell:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$accessToken \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;wrong-token\u0026#34;\u003c/span\u003e\n$headers \u003cspan\u003e=\u003c/span\u003e @\u003cspan\u003e{\u003c/span\u003e\n    Authorization \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Bearer $accessToken\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n$response \u003cspan\u003e=\u003c/span\u003e Invoke\u003cspan\u003e-\u003c/span\u003eRestMethod \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/\u0026#34;\u003c/span\u003e `\n    \u003cspan\u003e-\u003c/span\u003eHeaders $headers\n$response \u003cspan\u003e|\u003c/span\u003e ConvertTo\u003cspan\u003e-\u003c/span\u003eJson\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, the following response will be returned:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eInvoke\u003cspan\u003e-\u003c/span\u003eWebRequest\u003cspan\u003e:\u003c/span\u003e The remote server returned an error\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e401\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e Unauthorized\u003cspan\u003e.\u003c/span\u003e\nAt line\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e char\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\n\u003cspan\u003e+\u003c/span\u003e Invoke\u003cspan\u003e-\u003c/span\u003eWebRequest \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/\u0026#34;\u003c/span\u003e\n\u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\n\u003cspan\u003e+\u003c/span\u003e CategoryInfo          \u003cspan\u003e:\u003c/span\u003e InvalidOperation\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eSystem\u003cspan\u003e.\u003c/span\u003eNet\u003cspan\u003e.\u003c/span\u003eHttpWebRequest\u003cspan\u003e:\u003c/span\u003eHttpWebRequest\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eInvoke\u003cspan\u003e-\u003c/span\u003eWebRequest\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e WebExc\n   eption\n\u003cspan\u003e+\u003c/span\u003e FullyQualifiedErrorId \u003cspan\u003e:\u003c/span\u003e WebCmdletWebResponseException\u003cspan\u003e,\u003c/span\u003eMicrosoft\u003cspan\u003e.\u003c/span\u003ePowerShell\u003cspan\u003e.\u003c/span\u003eCommands\u003cspan\u003e.\u003c/span\u003eInvokeWebRequestCommand\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see, a 401 error status code is returned, but with no details on what happened.\u003c/p\u003e\u003cp\u003eNow, let’s test the demo application extended with custom error handling logic. You can find it in \u003ca href=\"https://github.com/Tonel/HotSauces\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis GitHub repository\u003c/a\u003e. The application is exactly the same as the previous one, except for the error handling logic. In particular, the aforementioned presented logic was implemented. \u003c/p\u003e\u003cp\u003eIn this case, by launching the commands above, this message will be returned:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eInvoke\u003cspan\u003e-\u003c/span\u003eRestMethod \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;code\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e401\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;An error occurred while attempting to decode the Jwt: Invalid JWT serialization: Missing dot delimiter(s)\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e1629880611013\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;UNAUTHORIZED\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\nAt line\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e char\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\n\u003cspan\u003e+\u003c/span\u003e $response \u003cspan\u003e=\u003c/span\u003e Invoke\u003cspan\u003e-\u003c/span\u003eRestMethod \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/\u0026#34;\u003c/span\u003e  \u003cspan\u003e...\u003c/span\u003e\n\u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\n\u003cspan\u003e+\u003c/span\u003e CategoryInfo          \u003cspan\u003e:\u003c/span\u003e InvalidOperation\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eSystem\u003cspan\u003e.\u003c/span\u003eNet\u003cspan\u003e.\u003c/span\u003eHttpWebRequest\u003cspan\u003e:\u003c/span\u003eHttpWebRequest\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eInvoke\u003cspan\u003e-\u003c/span\u003eWebRequest\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e WebExc\n   eption\n\u003cspan\u003e+\u003c/span\u003e FullyQualifiedErrorId \u003cspan\u003e:\u003c/span\u003e WebCmdletWebResponseException\u003cspan\u003e,\u003c/span\u003eMicrosoft\u003cspan\u003e.\u003c/span\u003ePowerShell\u003cspan\u003e.\u003c/span\u003eCommands\u003cspan\u003e.\u003c/span\u003eInvokeWebRequestCommand\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see, a JSON message representing the custom error handling logic was returned as expected. This contains the status code, the exception message, a timestamp, and the HTTP status code name, as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;code\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e401\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;An error occurred while attempting to decode the Jwt: Invalid JWT serialization: Missing dot delimiter(s)\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1629880611013\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;UNAUTHORIZED\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eIn this article, we looked at how to implement custom error handling logic when dealing with REST applications in Spring Boot. This is not as easy a task as it may seem, and it requires knowing a few Spring Boot fundamentals. First, we delved into default error handling in Spring Boot and saw how poor the responses are. Then, we looked at \u003ccode\u003e@ControllerAdvice\u003c/code\u003e and learn everything required to implement custom error handling logic. In particular, two different approaches were shown. Both allow you to define custom error handling responses but have specific pros and cons. Finally, we learned how to achieve the same result when dealing with Spring Boot Security errors, which requires specific logic. As shown, achieving custom error handling in Spring Boot is not easy but definitely possible, and explaining when, why, and how to do it was what this article was aimed at.\u003c/p\u003e\u003cp\u003eThanks for reading! I hope that you found this article helpful. Feel free to reach out to me with any questions, comments, or suggestions.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn how to implement custom error handling logic in Spring Boot. You will see two approaches based on the @ControllerAdvice annotation. Similarly, you will learn how to deal with authentication and access denied errors in Spring Security.",
      "date_published": "2021-09-27T15:29:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/id-token-access-token-what-is-the-difference/",
      "title": "ID Token and Access Token: What Is the Difference?",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u0026#34;Let’s use a token to secure this API call. Should I use the ID token or the access token? 🤔 The ID token looks nicer to me. After all, if I know who the user is, I can make better authorization decisions, right?\u0026#34;\u003c/p\u003e\u003cp\u003eHow many times have you found yourself making similar arguments? Choices based on your intuition may sound good, however, what looks intuitive not always is correct. In the case of ID and access tokens, they have clear and well-defined purposes, so you should use them based on that, not on your intuition.\u003c/p\u003e\u003cp\u003e\u0026#34;What changes after all? They are just tokens. I can use them as I see fit. What can happen?\u0026#34;\u003c/p\u003e\u003cp\u003eLet’s take a closer look at these two security tokens to better understand their role in authentication and authorization processes.\u003c/p\u003e\u003cp\u003eIf you prefer, you can also watch this video on the same topic:\u003c/p\u003e\u003cp\u003e\u003ciframe src=\"https://www.youtube.com/embed/M4JIvUIE17c\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\u003ch2 id=\"What-Is-an-ID-Token-\"\u003eWhat Is an ID Token?\u003c/h2\u003e\u003cp\u003eAn ID token is an artifact that proves that \u003cstrong\u003ethe user has been authenticated\u003c/strong\u003e. \u003ca href=\"https://openid.net/connect/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOpenID Connect\u003c/a\u003e provides you with it as the result of the user authentication process. By the way, OpenID Connect is an open standard for decentralized authentication used by many Identity providers such as Google, Facebook, Twitter, and, of course, Auth0. Check out \u003ca href=\"https://auth0.com/docs/protocols/openid-connect-protocol\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis document for more details on OpenID Connect\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eWell, this is a very basic definition of what an ID token is. Let’s see some other details.\u003c/p\u003e\u003cp\u003eAn ID token is \u003cstrong\u003eencoded as a JSON Web Token\u003c/strong\u003e (JWT), a standard format that allows your application to easily inspect its content and make sure it comes from the expected issuer and no one else changed it. If you want to learn more on JWTs, check out \u003ca href=\"https://auth0.com/resources/ebooks/jwt-handbook\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eThe JWT Handbook\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eTo put it simply, an example of ID token looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\u003cspan\u003e.\u003c/span\u003eeyJpc3MiOiJodHRwOi8vbXktZG9tYWluLmF1dGgwLmNvbSIsInN1YiI6ImF1dGgwfDEyMzQ1NiIsImF1ZCI6IjEyMzRhYmNkZWYiLCJleHAiOjEzMTEyODE5NzAsImlhdCI6MTMxMTI4MDk3MCwibmFtZSI6IkphbmUgRG9lIiwiZ2l2ZW5fbmFtZSI6IkphbmUiLCJmYW1pbHlfbmFtZSI6IkRvZSJ9\u003cspan\u003e.\u003c/span\u003ebql\u003cspan\u003e-\u003c/span\u003ejxlG9B_bielkqOnjTY9Di9FillFb6IMQINXoYsw\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOf course, this isn\u0026#39;t readable to the human eye, so you have to decode it to see what content the JWT holds. You can use one of the \u003ca href=\"https://jwt.io/#libraries-io\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emany available libraries\u003c/a\u003e to decode it or you can examine it yourself with the \u003ca href=\"https://jwt.io/?id_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwOi8vbXktZG9tYWluLmF1dGgwLmNvbSIsInN1YiI6ImF1dGgwfDEyMzQ1NiIsImF1ZCI6IjEyMzRhYmNkZWYiLCJleHAiOjEzMTEyODE5NzAsImlhdCI6MTMxMTI4MDk3MCwibmFtZSI6IkphbmUgRG9lIiwiZ2l2ZW5fbmFtZSI6IkphbmUiLCJmYW1pbHlfbmFtZSI6IkRvZSJ9.bql-jxlG9B_bielkqOnjTY9Di9FillFb6IMQINXoYsw\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ejwt.io\u003c/a\u003e debugger.\u003c/p\u003e\u003cp\u003eWithout going deeper into the details, the relevant information carried by the ID token above looks like the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e \n  \u003cspan\u003e\u0026#34;iss\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;http://my-domain.auth0.com\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n  \u003cspan\u003e\u0026#34;sub\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;auth0|123456\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n  \u003cspan\u003e\u0026#34;aud\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;1234abcdef\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n  \u003cspan\u003e\u0026#34;exp\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1311281970\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n  \u003cspan\u003e\u0026#34;iat\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1311280970\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n  \u003cspan\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Jane Doe\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n  \u003cspan\u003e\u0026#34;given_name\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Jane\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n  \u003cspan\u003e\u0026#34;family_name\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Doe\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThese JSON properties are called \u003cstrong\u003eclaims\u003c/strong\u003e, and they are \u003cstrong\u003edeclarations about the user\u003c/strong\u003e and the token itself. The claims about the user define the user’s identity. Hence the name \u0026#34;ID token\u0026#34;.\u003c/p\u003e\u003cp\u003eOne of the claims that is usually underrated is the \u003ccode\u003eaud\u003c/code\u003e claim. This claim defines the \u003cstrong\u003eaudience\u003c/strong\u003e of the token, i.e., the application that is meant as \u003cstrong\u003ethe final recipient of the token\u003c/strong\u003e. Its value is the client ID of the application that should use the token.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eRemember this small detail about the audience claim because it will help you better understand what its correct use is later on.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eOptionally, the ID token may have additional information about the user, such as their email address, picture, birthday, and so on.\u003c/p\u003e\u003cp\u003eCool! Now you know what an ID token is. But, what can you do with an ID token?\u003c/p\u003e\u003cp\u003eFirst, it demonstrates that the user has been authenticated and so \u003cstrong\u003eyou can trust their identity\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eAlso, your application can \u003cstrong\u003epersonalize the user’s experience\u003c/strong\u003e by using the claims about the user included in the ID token. For example, you can show their name on the UI, or display a wish message on their birthday. The fun part is that you don’t need to make additional requests, so you may get \u003cstrong\u003ea little gain in performance\u003c/strong\u003e for your application.\u003c/p\u003e\u003ch2 id=\"What-Is-an-Access-Token-\"\u003eWhat Is an Access Token?\u003c/h2\u003e\u003cp\u003eNow that you know what an ID token is, let’s try to understand what an access token is.\u003c/p\u003e\u003cp\u003eAs the name says, an access token is an artifact that \u003cstrong\u003eallows you to access a resource\u003c/strong\u003e. That resource can be a file, an API, a database, or anything else which is protected from unauthorized access. The authorization server issues the access token.\u003c/p\u003e\u003cp\u003eIn the \u003ca href=\"https://auth0.com/docs/protocols/protocol-oauth2\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOAuth 2\u003c/a\u003e context, the access token \u003cstrong\u003eallows an application to access a specific resource on behalf of the user\u003c/strong\u003e. That means, for example, that you can authorize your LinkedIn app to access Twitter’s API on your behalf to cross-post on both social platforms.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://datatracker.ietf.org/doc/html/rfc6749\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOAuth 2 specifications\u003c/a\u003e say nothing about the access token format. It \u003cstrong\u003ecan be a string in any format\u003c/strong\u003e. A common format used for access tokens is JWT, and \u003ca href=\"https://datatracker.ietf.org/doc/html/draft-ietf-oauth-access-token-jwt\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ea standard is along the way\u003c/a\u003e at the time of writing. However, this doesn’t mean that access tokens should be in that format. Keep the following in mind: \u003cstrong\u003eyour client application should treat access tokens as opaque strings\u003c/strong\u003e, that is, a string with no specific meaning such as \u003ccode\u003eab5\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e2\u003c/span\u003eGtse9ITg\u003c/code\u003e or \u003ccode\u003e\u003cspan\u003e1234\u003c/span\u003e\u003c/code\u003e and so on.\u003c/p\u003e\u003cp\u003eOnly the intended recipient of the access token can (and must) make assumptions on the access token’s format. Wait! Who is the intended recipient of an access token? 🤔 \u003cstrong\u003eThe intended recipient is the resource server\u003c/strong\u003e, that is, the server that protects the resource your application is trying to access.\u003c/p\u003e\u003cp\u003eLast but not least, an access token is not bound to a specific client. It can be used by any application that presents it: \u003cstrong\u003eit grants authorization to its bearer\u003c/strong\u003e. This is extremely important since you need to take care of it and avoid it falling into the wrong hands.\u003c/p\u003e\u003cp\u003eAlright! Now you know what an ID token and an access token are. 🎉 So you are ready to use them without any fear of making mistakes. But, wait. I do not see you convinced. 🤔 Maybe you need some other information. Ok. So, let’s see what these tokens are \u003cem\u003enot\u003c/em\u003e suitable for.\u003c/p\u003e\u003ch2 id=\"What-Is-an-ID-Token-NOT-Suitable-For-\"\u003eWhat Is an ID Token NOT Suitable For?\u003c/h2\u003e\u003cp\u003eOne of the most common mistakes developers make with an ID token is to use it for authorization. As said above, an ID token has to do with authentication. It \u003cstrong\u003eis not meant for authorization\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eIf your API accepts an ID token as an authorization token, to begin with, you are ignoring the intended recipient stated by the audience claim. That claim says that it is meant for your client application, not for the resource server (i.e., the API).\u003c/p\u003e\u003cp\u003eYou may think this is just a formality, but \u003cstrong\u003ethere are security implications\u003c/strong\u003e here.\u003c/p\u003e\u003cp\u003eFirst of all, your API shouldn’t accept a token that is not meant for it. If it does so, its security is at risk. In fact, if your API doesn\u0026#39;t care if a token is meant for it, an ID token stolen from any client application can be used to access your API.\u003c/p\u003e\u003cp\u003eIn addition, your ID token will not have granted \u003ca href=\"https://auth0.com/docs/scopes\" target=\"_blank\" rel=\"noreferrer noopener\"\u003escopes\u003c/a\u003e (I know, this is another pain point). To briefly explain, OAuth has a specific process to allow the user to grant the minimum permissions (scopes) to the application. Those scopes are associated with the access token so that your API knows what the client application can do and what it can\u0026#39;t do. If you use an ID token, you ignore this feature and potentially allow the application to do actions that the user has not authorized.\u003c/p\u003e\u003cp\u003eAnother mistake you can make with ID tokens is to use them for user session management. An ID token \u003cstrong\u003eisn’t an appropriate choice for session management\u003c/strong\u003e. In fact, ID tokens have a few specific drawbacks. First, they are larger than a typical session cookie. You need to validate them on the server side just to check if the session is still alive. You also cannot remove them from the client application at the end of a session, e.g., at logout. It requires the active collaboration of the client, but this is not something you can rely on.\u003c/p\u003e\u003ch2 id=\"What-Is-an-Access-Token-NOT-Suitable-For-\"\u003eWhat Is an Access Token NOT Suitable For?\u003c/h2\u003e\u003cp\u003eAs you guess, on the access token side, you can’t use it for authentication. I mean, \u003cstrong\u003eyou can’t make any assumption about the user’s identity\u003c/strong\u003e based on the access token. The access token can’t tell you if the user has authenticated. \u003cstrong\u003eYou can’t ever deduce that the user is currently logged in\u003c/strong\u003e to your application. Based on the OAuth specifications, the access token authorizes the client application to operate on behalf of the user. Once the application is authorized, the user can log out with no issue and the access token will continue to work.\u003c/p\u003e\u003cp\u003eIn addition, the access token \u003cstrong\u003ehas nothing to tell the client application\u003c/strong\u003e. It is intended for the resource server. Even if you know the access token format, you shouldn’t try to interpret the access token content in your client application. The access token format is an agreement between the authorization server and the resource server. Period! The client application should not intrude.\u003c/p\u003e\u003ch2 id=\"A-Quick-Recap\"\u003eA Quick Recap\u003c/h2\u003e\u003cp\u003eThe confusion over the use of ID and access tokens is very common, and it can be difficult to wrap your head around the differences. And maybe it mostly derives from the difference between authentication and authorization that also confuses many developers. Nevertheless, I hope this topic is a little more clear now.\u003c/p\u003e\u003cp\u003eTo recap, here is a quick summary of what you learned about what you can and can’t do with ID and access tokens:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6OoxJnwLaEumCzNxa53J1f/473d3e0483e8a06b2318175ca1b03f16/id-token-vs-access-token.jpg\" alt=\"ID token vs access token\"/\u003e\u003c/p\u003e\u003cp\u003eIf you want to see ID and access tokens in action, \u003ca href=\"https://auth0.com/signup\" data-amp-replace=\"CLIENT_ID\" data-amp-addparams=\"anonId=CLIENT_ID(cid-scope-cookie-fallback-name)\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esign up for a free Auth0 account\u003c/a\u003e and start to add authentication and authorization to your applications in minutes with \u003ca href=\"https://auth0.com/docs/libraries\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eyour preferred programming language and framework\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn what ID and access tokens are and how to correctly use them in the OpenID Connect and OAuth context.",
      "date_published": "2021-09-23T14:31:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/how-to-explain-public-key-cryptography-digital-signatures-to-anyone/",
      "title": "How to Explain Public-Key Cryptography and Digital Signatures to Anyone",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eIf you work in cybersecurity or any computer-related field, sooner or later, you’ll have to explain public-key cryptography and digital signatures to non-technical people.\u003c/strong\u003e With the recent rise of remote work and stories about system breaches, computer security has become a topic of discussion even among laypeople.\u003c/p\u003e\u003cp\u003eAfter trying to explain public-key cryptography and digital signatures to some clients with varying degrees of success, I wanted to develop an analogy that explained them and was easy to remember. I’ve found that even techies get confused by the formal definitions, and many non-technical explanations just seem unsatisfying.\u003c/p\u003e\u003cp\u003eThat’s when I stumbled upon \u003ca href=\"https://twitter.com/vrypan\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ePanayotis Vryonis’\u003c/a\u003e article, \u003ca href=\"https://blog.vrypan.net/2013/08/28/public-key-cryptography-for-non-geeks/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cem\u003ePublic-key cryptography for non-geeks\u003c/em\u003e\u003c/a\u003e. It became my go-to analogy until my computer science professor, \u003ca href=\"http://research.cs.queensu.ca/home/dawes/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDr. Robin Dawes\u003c/a\u003e pointed out a flaw. I refined it with his help, and a suggestion from Matthew Ernest, and the result is below. I hope you find it helpful when trying to explain these concepts to anyone!\u003c/p\u003e\u003ch2 id=\"The-Box\"\u003eThe Box\u003c/h2\u003e\u003cp\u003eImagine a box with a special lock, as pictured below:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4nm7EvXpqVqMxfOPkjUlXe/bca6b7d8d0a00658045dd4f3fd0a5c7f/the_box_has_a_lock_with_three_positions.png\" alt=\"Photo of a box with a lock. There is a key inserted into the lock. Caption: \u0026#34;The box has a lock with three positions: Locked (at the 9:00 position), unlocked (at the 12:00 position), and locked (at the 3:00 position).\u0026#34;\"/\u003e\u003c/p\u003e\u003cp\u003eThe lock has three positions:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eWhen the lock is at the “9:00” position, the box is locked, and its contents are inaccessible.\u003c/li\u003e\u003cli\u003eWhen the lock is at the “12:00” position, the box is unlocked, which means you can open it and view its contents.\u003c/li\u003e\u003cli\u003eWhen the lock is at the “3:00” position, the box is locked, and its contents are inaccessible.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eIn order to avoid wandering into endless “What if...?” tangents, assume that it’s prohibitively costly to pick the lock or break the box.\u003c/p\u003e\u003ch2 id=\"The-Keys\"\u003eThe Keys\u003c/h2\u003e\u003cp\u003eThere are two kinds of keys that work with the box’s lock.\u003c/p\u003e\u003ch3 id=\"The-private-key\"\u003eThe private key\u003c/h3\u003e\u003cp\u003eThe first kind of key belongs to you, and only you. You don’t share it with anyone else, which is why it’s called the \u003cstrong\u003eprivate key\u003c/strong\u003e. You might make a backup copy in case of emergencies, but you keep it in a safe place that only you know.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2PJXCaqzggdgTpN4FSm8Qj/4a1228e2e8a6a46ad103c01ffd197e58/you_keep_the_private_key_to_yourself.png\" alt=\"Photo of a single key. Caption: \u0026#34;You keep the private key to yourself.\u0026#34;\"/\u003e\u003c/p\u003e\u003cp\u003eThe private key fits the lock, but it has a particular limitation: it can only turn \u003cem\u003eclockwise\u003c/em\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/qqPVi6JTc2HOW4SuE4sEj/8fcd841021e55b659a3c5b92ad9b2da2/the_private_key_only_turns_clockwise.png\" alt=\"Photo of the box with lock and key. An arrow indicates that the key is being turned clockwise. Caption: \u0026#34;The private key only turns clockwise.\u0026#34;\"/\u003e\u003c/p\u003e\u003ch3 id=\"The-public-key\"\u003eThe public key\u003c/h3\u003e\u003cp\u003eYou treat the second kind of key very differently. Unlike the first key, you’ve made many, many copies of these keys. You’ve given them to everyone you know, and even people you don’t know. You’ve left them in as many public places as you could reach: restaurants, stores, busy streets, dark alleys, and any place you happened to pass through. You’ve even left them in other towns, and even other countries! Because of the way you treat this key, it’s called the \u003cstrong\u003epublic key\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2LTNf9JxfjDuB4rMZyM7K6/4a3a6264b81bf2b90efaffe469d3406c/you_hand_out_copies_of_the_public_key_freely.png\" alt=\"Photo of hundreds of keys hanging on hooks on a wall. Caption: \u0026#34;You hand out copies of the public key freely.\u0026#34;\"/\u003e\u003c/p\u003e\u003cp\u003eLike the private key, public keys also fit the lock, and they also have a particular limitation — but in the opposite direction. They can only turn \u003cem\u003ecounterclockwise\u003c/em\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6QVsGSSoLuNdRgpfHznh6H/b5f42c68a9d5aa9e322e898cac14aeb3/the_public_key_only_turns_counterclockwise.png\" alt=\"Photo of the box with lock and key. An arrow indicates that the key is being turned counterclockwise. Caption: \u0026#34;The public key only turns counterclockwise.\u0026#34;\"/\u003e\u003c/p\u003e\u003ch2 id=\"How-They-Work-Together\"\u003eHow They Work Together\u003c/h2\u003e\u003cp\u003eThe lock, private key, and public keys work together to produce these interesting outcomes:\u003c/p\u003e\u003cul\u003e\u003cli\u003eIf the box is locked with a public key, only the private key can unlock it.\u003c/li\u003e\u003cli\u003eIf the box is locked with the private key, only a public key can unlock it.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe keys are designed so that you can’t use one key to figure out how to make the other key.\u003c/p\u003e\u003cp\u003eWe can use the box and keys to create two useful kinds of secure communication:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eI can send you a secret message.\u003c/li\u003e\u003cli\u003eYou can send me a message with proof that you (and not some impostor) sent it and that it wasn’t altered \u003cem\u003een route\u003c/em\u003e.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eLet’s take a closer look at each of these kinds of secure communication.\u003c/p\u003e\u003ch2 id=\"Sending-Secret-Messages\"\u003eSending Secret Messages\u003c/h2\u003e\u003cp\u003eSuppose I wanted to send you a message that I wanted only you to read. We have enemies in common who’d love nothing more than to know what’s in the messages I send you.\u003c/p\u003e\u003cp\u003eWe each have a cadre of minions to deliver our messages. We trust them... to a limited extent. It would be all too easy for our foes to intercept our messages through force or bribery. \u003c/p\u003e\u003cp\u003eThere must be a way to send messages to you secretly, and that’s where the box comes in. I can use the box to send the message so that no one but you can read it. \u003c/p\u003e\u003cp\u003eYou have the only private key. Everyone else has at least one of the public keys because you’ve been giving them away like candy. \u003c/p\u003e\u003cp\u003eI put my message in the open box. Since it’s open, it’s unlocked, which means the lock is at the “12:00” position. \u003c/p\u003e\u003cp\u003eI use one of the many copies of the public key that I own to lock it, turning it counterclockwise from the unlocked “12:00” position to the locked “9:00” position.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3WnNKlXN7MC0BfDdEU8GyX/2bcc1521f829c80ff548cf7234078bba/i_lock_the_message_with_public_key.png\" alt=\"Photo of the box with lock and key. An arrow indicates that the key is being turned counterclockwise. Caption: \u0026#34;I lock the message in the box with the public key...\u0026#34;\"/\u003e\u003c/p\u003e\u003cp\u003eThe message is now ready for a minion to deliver to you.\u003c/p\u003e\u003cp\u003eI’m not worried that my minion or anyone other than you will be able to read the message while it’s in transit. Even though anyone can easily find the public key, they can’t use it to unlock the box. Only the private key can unlock the box if it’s been locked with the public key.\u003c/p\u003e\u003cp\u003eWhen you receive the box, you use the private key to unlock it, turning the key clockwise from the “3:00” position to the “12:00” position.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2kwG5ogtYDYCkDtjC0MqgN/75f2cb365ea0014a0af58a7dbc90c481/you_unlock_it_with_the_private_key.png\" alt=\"Photo of the box with lock and key. An arrow indicates that the key is being turned clockwise. Caption: \u0026#34;...and you unlock it with the private key.\u0026#34;\"/\u003e\u003c/p\u003e\u003cp\u003eIn summary: to send you a secret message, I use a public key to lock the message so nobody can read it, and you use a private key to unlock the message so that you can read it.\u003c/p\u003e\u003cp\u003eThis is the general idea behind public-key encryption: \u003cstrong\u003eencrypt with the public key, decrypt with the private key.\u003c/strong\u003e\u003c/p\u003e\u003ch2 id=\"Signing-Messages\"\u003eSigning Messages\u003c/h2\u003e\u003cp\u003eThe “secret messages” use case for the box and private and public keys is intuitive: anyone with a public key can lock a message, but only the holder of the private key can unlock it.\u003c/p\u003e\u003cp\u003eThere’s another way to use the box and keys: you can lock a message with the private key, which anyone with the public key can unlock. What could a possible use case there be for a system where anyone can unlock the box?\u003c/p\u003e\u003cp\u003eSuppose one of our common enemies has been trying to break up our alliance and that I’ve been receiving very hurtful messages that appear to have come from you. (I’ll leave the content of those messages to your imagination.)\u003c/p\u003e\u003cp\u003eThat enemy has either been sending fake messages or has been intercepting and altering your real ones. There has to be a way to package a message in order to prove that it’s actually from you!\u003c/p\u003e\u003cp\u003eThere \u003cem\u003eis\u003c/em\u003e a way: the box!\u003c/p\u003e\u003cp\u003eIn this scenario, you put your message in the open box. Since it’s open, it’s unlocked, which means the lock is at the “12:00” position. \u003c/p\u003e\u003cp\u003eUsing the private key, you “sign” the message by locking it, turning the key counterclockwise from the “12:00” position to the “9:00” position.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1U2aOr7mKgMtGdZM8lPLWT/82ff89d7160d93b04fff8ac635fd41d7/you_sign_the_message_with_the_private_key.png\" alt=\"Photo of the box with lock and key. An arrow indicates that the key is being turned clockwise. Caption: \u0026#34;You \u0026#39;sign\u0026#39; the message with the private key...\u0026#34;\"/\u003e\u003c/p\u003e\u003cp\u003eOne of your minions delivers the box to me.\u003c/p\u003e\u003cp\u003eSince you locked the box with the private key, anyone can unlock it with any one of the many public keys you have distributed. Our common enemy, knowing that this message is in transit, could intercept it and replace your invitation to tea with a “top ten” list of very cutting insults that would surely dissolve our alliance.\u003c/p\u003e\u003cp\u003eThe problem with the enemy’s plan is that it won’t work. Intercepting and altering the message means that they would have to do one of two things before forwarding the box to me.\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eThey could leave the box unlocked. Since the box is supposed to arrive locked, this is an obvious sign that the message may have been tampered with.\u003c/li\u003e\u003cli\u003eThey could lock the box. They would have to do it with a public key, which means that only the private key can unlock it. I wouldn’t be able to unlock the box with the only key I had — the public key — which would lead me to conclude that someone had unlocked the box before I did.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eIf the box arrives at my doorstep and...\u003c/p\u003e\u003cul\u003e\u003cli\u003eIt’s locked\u003c/li\u003e\u003cli\u003eI can unlock it with the public key\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e...then, I can be assured that the message came from you and wasn’t changed \u003cem\u003een route\u003c/em\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4Fax8BanX5Qts7KJzW7166/b4dc34b169f6eca961c8d8f3c7452af4/i_verify_your_signature_with_the_public_key.png\" alt=\"Photo of the box with lock and key. An arrow indicates that the key is being turned counterclockwise. Caption: \u0026#34;...and I verify your \u0026#39;signature\u0026#39; with the public key.\u0026#34;\"/\u003e\u003c/p\u003e\u003cp\u003eIn summary: to send me a message with proof that you are the sender, you use the private key to lock the message. You’re the only person with the private key, and only a public key can unlock messages locked with the private key. If one of the public keys can unlock that message, I know that it came from you.\u003c/p\u003e\u003cp\u003eThis is the general idea behind digital signatures: \u003cstrong\u003esign with the private key, verify with a public key.\u003c/strong\u003e\u003c/p\u003e\u003ch2 id=\"How-About-Sending-a-Message-That-s-Both-Secret--and--Signed-\"\u003eHow About Sending a Message That’s Both Secret \u003cem\u003eand\u003c/em\u003e Signed?\u003c/h2\u003e\u003cp\u003eYou might think that sending a message that is both secret and signed is paranoid. I would answer by saying, “Paranoia is the \u003cstrong\u003e\u003cem\u003emistaken\u003c/em\u003e\u003c/strong\u003e impression that people are out to get you.”\u003c/p\u003e\u003cp\u003eSuppose I wanted to send you a secret signed message. I could do it with two boxes:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eA smaller box, which I own. It will prove that I sent the message. I have the private key for this box, and you have one of its public keys.\u003c/li\u003e\u003cli\u003eA larger box, which you own. It will keep the message secret. You have the private key for this box, and I have one of its public keys.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eI would lock the message in my smaller box using my private key and then lock it in your larger box using your public key.\u003c/p\u003e\u003cp\u003eWhen you receive the delivery, you will unlock your larger box first, using your private key. This would reveal my smaller box inside, which you would unlock with my public key.\u003c/p\u003e\u003ch2 id=\"It-s-Not-Keys-and-Boxes--but-Numbers-and-Algorithms\"\u003eIt’s Not Keys and Boxes, but Numbers and Algorithms\u003c/h2\u003e\u003cp\u003eOf course, we’re not really dealing with boxes, keys (at least the kind that goes into locks), or minions. Here’s a list of elements in these stories and their real-world equivalents:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eThe message\u003c/strong\u003e: Anything that you’d want to send that can you can view or edit with a computer. It could be text, one or more pictures, an audio or video recording, a database, or even an application. As far as the computer is concerned, messages are just a long series of numbers.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eThe private and public keys\u003c/strong\u003e: Very large numbers that are used in a lengthy math process to encrypt, decrypt, sign, and verify messages.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eThe box\u003c/strong\u003e: An algorithm that takes the message and keys and performs the math process to encrypt, decrypt, sign, and verify messages.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eMinions\u003c/strong\u003e: The way in which the message is sent. This could be the internet but could just as easily be an actual minion, such as an unsuspecting summer intern with a USB key.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIn the alternate universe where messages are sent with boxes and keys, everyone would have their own set of boxes with their own private keys, as well as copies of other people’s public keys. In the real world, we run applications that run public-key encryption and digital signature algorithms to secure our messages. We still use public and private keys in the real world; they’re just digital.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Here’s an easy-to-understand analogy to help your non-technical friends and customers understand public keys and private keys, and how they relate to cryptography and digital signatures.",
      "date_published": "2021-09-22T14:53:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/dependency-injection-with-kotlin-and-koin/",
      "title": "Dependency Injection with Kotlin and Koin",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eInversion of Control (IoC) is a broad term to describe how responsibility for some aspect of a system is lifted out of the custom code written by the end developer and into a framework. \u003ca href=\"https://martinfowler.com/bliki/InversionOfControl.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMartin Fowler describes a framework in terms of IoC\u003c/a\u003e:\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eInversion of Control is a key part of what makes a framework different from a library. A library is essentially a set of functions that you can call, these days usually organized into classes. Each call does some work and returns control to the client.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eA framework embodies some abstract design, with more behavior built-in. In order to use it, you need to insert your behavior into various places in the framework, either by subclassing or by plugging in your own classes. The framework\u0026#39;s code then calls your code at these points.\u003c/p\u003e\u003cp\u003eDependency injection (DI) is one specific example of IoC where classes no longer directly instantiate member properties by creating new objects but instead declare their dependencies and allow an external system, in this case, a dependency injection framework to satisfy those dependencies.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://insert-koin.io/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eKoin\u003c/a\u003e is a dependency injection framework for Kotlin. It is lightweight, can be used in Android applications, is implemented via a concise DSL, and takes advantage of Kotlin features like delegate properties rather than relying on annotations. \u003c/p\u003e\u003cp\u003eIn this post, we\u0026#39;ll look at a simple application taking advantage of Koin to inject dependencies into our custom classes.\u003c/p\u003e\u003ch2 id=\"Prerequisites\"\u003ePrerequisites\u003c/h2\u003e\u003cp\u003eTo build the sample application, you\u0026#39;ll need to have JDK 11 or above, which is available from many sources, including \u003ca href=\"https://openjdk.java.net/install/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOpenJDK\u003c/a\u003e, \u003ca href=\"https://adoptopenjdk.net/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAdoptOpenJDK\u003c/a\u003e, \u003ca href=\"https://www.azul.com/downloads/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAzul\u003c/a\u003e, or \u003ca href=\"https://www.oracle.com/au/java/technologies/javase-jdk11-downloads.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOracle\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe code for the sample Koin application can be found \u003ca href=\"https://github.com/mcasperson/KotlinKoinExample\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"The-Gradle-Project-Definition\"\u003eThe Gradle Project Definition\u003c/h2\u003e\u003cp\u003eWe start with the Gradle build file, which includes dependencies for Kotlin and Koin, and makes use of the \u003ca href=\"https://github.com/johnrengelman/shadow\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eshadow plugin\u003c/a\u003e to create self-contained uberjars:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ebuildscript \u003cspan\u003e{\u003c/span\u003e\n    repositories \u003cspan\u003e{\u003c/span\u003e\n        maven \u003cspan\u003e{\u003c/span\u003e\n            url \u003cspan\u003e\u0026#34;https://plugins.gradle.org/m2/\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    dependencies \u003cspan\u003e{\u003c/span\u003e\n        classpath \u003cspan\u003e\u0026#39;com.github.jengelman.gradle.plugins:shadow:6.1.0\u0026#39;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\nplugins \u003cspan\u003e{\u003c/span\u003e\n    id \u003cspan\u003e\u0026#34;org.jetbrains.kotlin.jvm\u0026#34;\u003c/span\u003e version \u003cspan\u003e\u0026#34;1.5.21\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\napply plugin\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;kotlin\u0026#39;\u003c/span\u003e\napply plugin\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;com.github.johnrengelman.shadow\u0026#39;\u003c/span\u003e\n\nrepositories \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003emavenLocal\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003emavenCentral\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\ndependencies \u003cspan\u003e{\u003c/span\u003e\n    implementation \u003cspan\u003e\u0026#34;org.jetbrains.kotlin:kotlin-stdlib:1.5.21\u0026#34;\u003c/span\u003e\n    implementation \u003cspan\u003e\u0026#34;io.insert-koin:koin-core:3.1.2\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo build the uberjar, run this command from Bash or PowerShell:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e./gradlew shadowJar\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Registering-Singletons\"\u003eRegistering Singletons\u003c/h2\u003e\u003cp\u003eThe first demonstration of Koin will register a class as a singleton, ensuring each time we request a new instance of the class, we are returned a single, shared object. Here is the code from the file \u003ccode\u003esingle\u003cspan\u003e.\u003c/span\u003ekt\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/kotlin/com/matthewcasperson/single.kt\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003ematthewcasperson\n\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eGlobalContext\u003cspan\u003e.\u003c/span\u003estartKoin\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003edsl\u003cspan\u003e.\u003c/span\u003emodule\n\n\u003cspan\u003eclass\u003c/span\u003e SingleInstance \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ecompanion\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003evar\u003c/span\u003e count\u003cspan\u003e:\u003c/span\u003e Int \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003einit\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e++\u003c/span\u003ecount\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;I am instance number \u003cspan\u003e$count\u003c/span\u003e\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e singleModule \u003cspan\u003e=\u003c/span\u003e module \u003cspan\u003e{\u003c/span\u003e\n        single \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eSingleInstance\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003evar\u003c/span\u003e app \u003cspan\u003e=\u003c/span\u003e startKoin \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003emodules\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esingleModule\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e\u0026lt;\u003c/span\u003eSingleInstance\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e\u0026lt;\u003c/span\u003eSingleInstance\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e\u0026lt;\u003c/span\u003eSingleInstance\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis class is run with the command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ejava -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.SingleKt\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe start by defining a typical class, but with a companion object containing a variable called \u003ccode\u003ecount\u003c/code\u003e. The \u003ccode\u003ecount\u003c/code\u003e variable is incremented by 1 each time we create a new \u003ccode\u003eSingleInstance\u003c/code\u003e object, which we will use to track how many new \u003ccode\u003eSingleInstance\u003c/code\u003e objects have been created:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e SingleInstance \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ecompanion\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003evar\u003c/span\u003e count\u003cspan\u003e:\u003c/span\u003e Int \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003einit\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e++\u003c/span\u003ecount\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;I am instance number \u003cspan\u003e$count\u003c/span\u003e\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eInside the \u003ccode\u003emain\u003c/code\u003e function we create a \u003ca href=\"https://insert-koin.io/docs/reference/koin-core/modules/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eKoin module\u003c/a\u003e. Modules are used to group related Koin definitions, and here we use the \u003ccode\u003esingle\u003c/code\u003e definition to instruct Koin to create a single instance of the supplied object:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e singleModule \u003cspan\u003e=\u003c/span\u003e module \u003cspan\u003e{\u003c/span\u003e\n        single \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eSingleInstance\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext we call the \u003ccode\u003estartKoin\u003c/code\u003e function, which is part of the \u003ccode\u003eGlobalContext\u003c/code\u003e object. \u003ccode\u003eGlobalContext\u003c/code\u003e is a singleton (defined as an \u003ca href=\"https://kotlinlang.org/docs/object-declarations.html#object-declarations-overview\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eobject declaration\u003c/a\u003e), and is typically used as the default context for applications. Here we register our module into the global context:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003evar\u003c/span\u003e app \u003cspan\u003e=\u003c/span\u003e startKoin \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003emodules\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esingleModule\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe\u0026#39;re now able to request instances of any of our registered objects with \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003eget\u003c/code\u003e. To demonstrate that our \u003ccode\u003esingle\u003c/code\u003e definitions are working as expected, we get an instance of the \u003ccode\u003eSingleInstance\u003c/code\u003e class three times and print the message containing the instance count to the console: \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e\u0026lt;\u003c/span\u003eSingleInstance\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e\u0026lt;\u003c/span\u003eSingleInstance\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e\u0026lt;\u003c/span\u003eSingleInstance\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe output shows we have been given the same \u003ccode\u003eSingleInstance\u003c/code\u003e object each time:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eI am instance number \u003cspan\u003e1\u003c/span\u003e\nI am instance number \u003cspan\u003e1\u003c/span\u003e\nI am instance number \u003cspan\u003e1\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Registering-a-Factory\"\u003eRegistering a Factory\u003c/h2\u003e\u003cp\u003eThere are times when you want a new instance each time you request a dependency from Koin. To support this, Koin has a \u003ccode\u003efactory\u003c/code\u003e definition. This is demonstrated in the file \u003ccode\u003efactory\u003cspan\u003e.\u003c/span\u003ekt\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/kotlin/com/matthewcasperson/factory.kt\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003ematthewcasperson\n\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eGlobalContext\u003cspan\u003e.\u003c/span\u003estartKoin\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003edsl\u003cspan\u003e.\u003c/span\u003emodule\n\n\u003cspan\u003eclass\u003c/span\u003e FactoryInstance \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ecompanion\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003evar\u003c/span\u003e count\u003cspan\u003e:\u003c/span\u003e Int \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003einit\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e++\u003c/span\u003ecount\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;I am instance number \u003cspan\u003e$count\u003c/span\u003e\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e factoryModule \u003cspan\u003e=\u003c/span\u003e module \u003cspan\u003e{\u003c/span\u003e\n        factory \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eFactoryInstance\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003evar\u003c/span\u003e app \u003cspan\u003e=\u003c/span\u003e startKoin \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003emodules\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efactoryModule\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e\u0026lt;\u003c/span\u003eFactoryInstance\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e\u0026lt;\u003c/span\u003eFactoryInstance\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e\u0026lt;\u003c/span\u003eFactoryInstance\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis class is run with the command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ejava -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.FactoryKt\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis code is almost a line for line copy of the previous example, with some different class and variable names. The most significant difference is how the module is built, where we use the \u003ccode\u003efactory\u003c/code\u003e definition:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003eval\u003c/span\u003e factoryModule \u003cspan\u003e=\u003c/span\u003e module \u003cspan\u003e{\u003c/span\u003e\n        factory \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eFactoryInstance\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhereas the \u003ccode\u003esingle\u003c/code\u003e definition registered a singleton dependency, the \u003ccode\u003efactory\u003c/code\u003e definition calls the supplied lambda every time a dependency is requested.\u003c/p\u003e\u003cp\u003eThis is reflected in the console output, which shows that we have indeed constructed three instances, one for each call to \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003eget\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eI am instance number \u003cspan\u003e1\u003c/span\u003e\nI am instance number \u003cspan\u003e2\u003c/span\u003e\nI am instance number \u003cspan\u003e3\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Registering-Interfaces\"\u003eRegistering Interfaces\u003c/h2\u003e\u003cp\u003eThe previous two examples registered concrete classes with Koin, but good object-oriented practice is to work with interfaces rather than classes. The example below from the file \u003ccode\u003einterfaces\u003cspan\u003e.\u003c/span\u003ekt\u003c/code\u003e shows how to register a class via its base interface with Koin:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/kotlin/com/matthewcasperson/interfaces.kt\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003ematthewcasperson\n\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eGlobalContext\u003cspan\u003e.\u003c/span\u003estartKoin\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003edsl\u003cspan\u003e.\u003c/span\u003emodule\n\n\u003cspan\u003einterface\u003c/span\u003e HelloService \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e String\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e HelloServiceImpl \u003cspan\u003e:\u003c/span\u003e HelloService \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Hello!\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e helloService \u003cspan\u003e=\u003c/span\u003e module \u003cspan\u003e{\u003c/span\u003e\n        single \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eHelloServiceImpl\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e HelloService \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003evar\u003c/span\u003e app \u003cspan\u003e=\u003c/span\u003e startKoin \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003emodules\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehelloService\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e\u0026lt;\u003c/span\u003eHelloService\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis class is run with the command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ejava -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.InterfacesKt\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe start with a basic interface:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003einterface\u003c/span\u003e HelloService \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e String\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe then implement the interface in a class:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e HelloServiceImpl \u003cspan\u003e:\u003c/span\u003e HelloService \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Hello!\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo make the class available to Koin via its interface, we cast the new object back to the interface with the \u003ccode\u003e\u003cspan\u003eas\u003c/span\u003e\u003c/code\u003e operator while building the module:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003eval\u003c/span\u003e helloService \u003cspan\u003e=\u003c/span\u003e module \u003cspan\u003e{\u003c/span\u003e\n        single \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eHelloServiceImpl\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e HelloService \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe then retrieve a dependency from its interface:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e\u0026lt;\u003c/span\u003eHelloService\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Resolving-Nested-Dependencies\"\u003eResolving Nested Dependencies\u003c/h2\u003e\u003cp\u003eAll the previous examples have resolved objects with no additional dependencies. A more typical scenario is where Koin is used to resolve classes that themselves have additional dependencies. This is demonstrated in the file called \u003ccode\u003enested\u003cspan\u003e.\u003c/span\u003ekt\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/kotlin/com/matthewcasperson/nested.kt\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003ematthewcasperson\n\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eGlobalContext\u003cspan\u003e.\u003c/span\u003estartKoin\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003edsl\u003cspan\u003e.\u003c/span\u003emodule\n\n\u003cspan\u003edata\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eHelloMessageData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eval\u003c/span\u003e message \u003cspan\u003e:\u003c/span\u003e String \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Hello from wrapped class!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003einterface\u003c/span\u003e HelloServiceWrapper \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e String\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eHelloServiceWrapperImpl\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e helloMessageData\u003cspan\u003e:\u003c/span\u003eHelloMessageData\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e HelloServiceWrapper \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e helloMessageData\u003cspan\u003e.\u003c/span\u003emessage\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e helloService \u003cspan\u003e=\u003c/span\u003e module \u003cspan\u003e{\u003c/span\u003e\n        single \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eHelloMessageData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        single \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eHelloServiceWrapperImpl\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e HelloServiceWrapper \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003evar\u003c/span\u003e app \u003cspan\u003e=\u003c/span\u003e startKoin \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003emodules\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehelloService\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e\u0026lt;\u003c/span\u003eHelloServiceWrapper\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis class is run with the command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ejava -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.NestedKt\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe start with a data class defining a string property:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003edata\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eHelloMessageData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eval\u003c/span\u003e message \u003cspan\u003e:\u003c/span\u003e String \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Hello from wrapped class!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs with the previous example, we define an interface and then implement the interface with a class. This time, however, the class has a constructor that takes an instance of \u003ccode\u003eHelloMessageData\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003einterface\u003c/span\u003e HelloServiceWrapper \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e String\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eHelloServiceWrapperImpl\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e helloMessageData\u003cspan\u003e:\u003c/span\u003eHelloMessageData\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e HelloServiceWrapper \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ehello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e helloMessageData\u003cspan\u003e.\u003c/span\u003emessage\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhen defining the module, we register an instance of the \u003ccode\u003eHelloMessageData\u003c/code\u003e class, and then resolve that class in the \u003ccode\u003eHelloServiceWrapperImpl\u003c/code\u003e constructor with a call to \u003ccode\u003eget\u003c/code\u003e, which will return the appropriate dependency for us. Note the order is not important here, and \u003ccode\u003eHelloServiceWrapperImpl\u003c/code\u003e could have been defined in the module first:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003eval\u003c/span\u003e helloService \u003cspan\u003e=\u003c/span\u003e module \u003cspan\u003e{\u003c/span\u003e\n        single \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eHelloMessageData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        single \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eHelloServiceWrapperImpl\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e HelloServiceWrapper \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Creating-a-KoinComponent\"\u003eCreating a KoinComponent\u003c/h2\u003e\u003cp\u003eWe noted earlier that Koin creates a default global context that our dependencies are registered with. Koin uses this global context, in conjunction with Kotlin \u003ca href=\"https://kotlinlang.org/docs/delegated-properties.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edelegated properties\u003c/a\u003e, through the \u003ccode\u003eKoinComponent\u003c/code\u003e interface to allow classes to resolve their own dependencies without an explicit reference to the \u003ccode\u003eKoinApplication\u003c/code\u003e returned by \u003ccode\u003estartKoin\u003c/code\u003e. An example of this is shown in the file \u003ccode\u003ekoinComponent\u003cspan\u003e.\u003c/span\u003ekt\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// src/main/kotlin/com/matthewcasperson/koinComponent.kt\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003ematthewcasperson\n\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003ecomponent\u003cspan\u003e.\u003c/span\u003eKoinComponent\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003ecomponent\u003cspan\u003e.\u003c/span\u003einject\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eGlobalContext\u003cspan\u003e.\u003c/span\u003estartKoin\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003ekoin\u003cspan\u003e.\u003c/span\u003edsl\u003cspan\u003e.\u003c/span\u003emodule\n\n\u003cspan\u003edata\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eGoodbyeMessageData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eval\u003c/span\u003e message \u003cspan\u003e:\u003c/span\u003e String \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Goodbye!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003einterface\u003c/span\u003e GoodbyeService \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003egoodbye\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e String\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eGoodbyeServiceImpl\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e goodbyeMessageData\u003cspan\u003e:\u003c/span\u003e GoodbyeMessageData\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e GoodbyeService \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003egoodbye\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;GoodbyeServiceImpl says: \u003cspan\u003e\u003cspan\u003e${\u003c/span\u003egoodbyeMessageData\u003cspan\u003e.\u003c/span\u003emessage\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e GoodbyeApplication \u003cspan\u003e:\u003c/span\u003e KoinComponent \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e goodbyeService \u003cspan\u003eby\u003c/span\u003e inject\u003cspan\u003e\u0026lt;\u003c/span\u003eGoodbyeService\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003esayGoodbye\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003egoodbyeService\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egoodbye\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e goodbyeModule \u003cspan\u003e=\u003c/span\u003e module \u003cspan\u003e{\u003c/span\u003e\n        single \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eGoodbyeMessageData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        single \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eGoodbyeServiceImpl\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e GoodbyeService \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    startKoin \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003emodules\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003egoodbyeModule\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eGoodbyeApplication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esayGoodbye\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis class is run with the command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ejava -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.KoinComponentKt\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis example draws from the features demonstrated in previous sections to define a class called \u003ccode\u003eGoodbyeServiceImpl\u003c/code\u003e, with a nested dependency on the data class called \u003ccode\u003eGoodbyeMessageData\u003c/code\u003e, and which implements an interface called \u003ccode\u003eGoodbyeService\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003edata\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eGoodbyeMessageData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eval\u003c/span\u003e message \u003cspan\u003e:\u003c/span\u003e String \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Goodbye!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003einterface\u003c/span\u003e GoodbyeService \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003egoodbye\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e String\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eGoodbyeServiceImpl\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e goodbyeMessageData\u003cspan\u003e:\u003c/span\u003e GoodbyeMessageData\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e GoodbyeService \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003egoodbye\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;GoodbyeServiceImpl says: \u003cspan\u003e\u003cspan\u003e${\u003c/span\u003egoodbyeMessageData\u003cspan\u003e.\u003c/span\u003emessage\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe then define a class called \u003ccode\u003eGoodbyeApplication\u003c/code\u003e implementing the \u003ccode\u003eKoinComponent\u003c/code\u003e interface. This class has a delegate property called \u003ccode\u003egoodbyService\u003c/code\u003e initialized by the \u003ccode\u003einject\u003c/code\u003e function made available through the \u003ccode\u003eKoinComponent\u003c/code\u003e interface:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e GoodbyeApplication \u003cspan\u003e:\u003c/span\u003e KoinComponent \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e goodbyeService \u003cspan\u003eby\u003c/span\u003e inject\u003cspan\u003e\u0026lt;\u003c/span\u003eGoodbyeService\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003esayGoodbye\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003egoodbyeService\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egoodbye\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe module is defined in much the same way as it has been in previous examples. Note however that the \u003ccode\u003eGoodbyeApplication\u003c/code\u003e class is not defined in the module:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003eval\u003c/span\u003e goodbyeModule \u003cspan\u003e=\u003c/span\u003e module \u003cspan\u003e{\u003c/span\u003e\n        single \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eGoodbyeMessageData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        single \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eGoodbyeServiceImpl\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e GoodbyeService \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn this example, we don\u0026#39;t assign the result of the \u003ccode\u003estartKoin\u003c/code\u003e function to any variable; registering the module with the global context is enough here:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e    startKoin \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003emodules\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003egoodbyeModule\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe then create a new instance of the \u003ccode\u003eGoodbyeApplication\u003c/code\u003e class and call its \u003ccode\u003esayGoodbye\u003c/code\u003e function. By implementing the \u003ccode\u003eKoinComponent\u003c/code\u003e interface, the \u003ccode\u003eGoodbyeApplication\u003c/code\u003e class can resolve its own dependencies from the global context and will resolve its \u003ccode\u003eGoodbyeService\u003c/code\u003e dependency in order to print a message to the console:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003eGoodbyeApplication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esayGoodbye\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003eKoinComponent\u003c/code\u003e interface is convenient, but be aware that it means your classes are now dependant on the Koin framework. Constructor-based injection is recommended when you wish to share code without any explicit dependency on Koin. \u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eKoin is a lightweight dependency injection framework with a concise DSL taking advantage of Kotlin\u0026#39;s modern syntax and features. In this post, we looked at how Koin creates singletons and factories, registers dependencies against their interfaces, and allows classes to resolve their own dependencies with delegated properties.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn how to implement common dependency injection scenarios with Koin and Kotlin",
      "date_published": "2021-09-21T17:05:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-2/",
      "title": "Get Started with Android Authentication Using Kotlin: Part 2",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIn the previous section, you started an Android project that uses Auth0 for user login, logout, and reading and updating user metadata. You set up the project on both the Auth0 and app sides. In this section, you’ll complete the project and update it to ensure that it works in both portrait and landscape orientations.\u003c/p\u003e\u003ch2 id=\"Write-the-code\"\u003eWrite the code\u003c/h2\u003e\u003cp\u003eEverything you’ve done so far in this exercise is just a preamble. It’s now time to write the actual code! This is the biggest task in the exercise, so let’s do it in small steps.​\u003c/p\u003e\u003cp\u003e🛠 Move to the \u003ccode\u003eapp\u003cspan\u003e/\u003c/span\u003ejava\u003cspan\u003e/\u003c/span\u003ecom\u003cspan\u003e.\u003c/span\u003eexample\u003cspan\u003e.\u003c/span\u003elogin\u003c/code\u003e folder and open the main activity’s file, \u003ccode\u003eMainActivity\u003cspan\u003e.\u003c/span\u003ekt\u003c/code\u003e. Its contents should look like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epackage\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eexample\u003cspan\u003e.\u003c/span\u003emyapplication\n\n\u003cspan\u003eimport\u003c/span\u003e androidx\u003cspan\u003e.\u003c/span\u003eappcompat\u003cspan\u003e.\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003eAppCompatActivity\n\u003cspan\u003eimport\u003c/span\u003e android\u003cspan\u003e.\u003c/span\u003eos\u003cspan\u003e.\u003c/span\u003eBundle\n\n\u003cspan\u003eclass\u003c/span\u003e MainActivity \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAppCompatActivity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esavedInstanceState\u003cspan\u003e:\u003c/span\u003e Bundle\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esavedInstanceState\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003esetContentView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003elayout\u003cspan\u003e.\u003c/span\u003eactivity_main\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Import-the-necessary-libraries\"\u003eImport the necessary libraries\u003c/h3\u003e\u003cp\u003e🛠 Add the following \u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e\u003c/code\u003e statements to the ones already in the file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e androidx\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003eview\u003cspan\u003e.\u003c/span\u003eisVisible\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003eAuth0\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003eauthentication\u003cspan\u003e.\u003c/span\u003eAuthenticationAPIClient\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003eauthentication\u003cspan\u003e.\u003c/span\u003eAuthenticationException\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003ecallback\u003cspan\u003e.\u003c/span\u003eCallback\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003emanagement\u003cspan\u003e.\u003c/span\u003eManagementException\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003emanagement\u003cspan\u003e.\u003c/span\u003eUsersAPIClient\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003eprovider\u003cspan\u003e.\u003c/span\u003eWebAuthProvider\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003eresult\u003cspan\u003e.\u003c/span\u003eCredentials\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003eresult\u003cspan\u003e.\u003c/span\u003eUserProfile\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003egoogle\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003ematerial\u003cspan\u003e.\u003c/span\u003esnackbar\u003cspan\u003e.\u003c/span\u003eSnackbar\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eMost of these \u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e\u003c/code\u003e statements import classes from Auth0’s libraries. Here’s what those classes do:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eAuthenticationAPIClient\u003c/code\u003e: Accesses the Auth0 Authentication API. The app uses this to retrieve the user’s profile information.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eAuthenticationException\u003c/code\u003e: Defines errors and exceptions that may arise during authentication.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eCallback\u003c/code\u003e: Defines an object containing “success” and “failure” callback functions that Auth0 should call after completing an API function.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eManagementException\u003c/code\u003e: Defines errors and exceptions that \u003ccode\u003eCallback\u003c/code\u003e objects may have to handle.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eUsersAPIClient\u003c/code\u003e: Manages user information. The app uses this to retrieve the user’s profile information.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eWebAuthProvider\u003c/code\u003e: Provides Auth0’s web page-based login to the app. The app uses this to log the user in via a login page in a web browser and log the user out.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eCredentials\u003c/code\u003e: Stores the user’s credentials, including ID, access, and refresh tokens.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eUserProfile\u003c/code\u003e: Stores the user’s profile information, including their user ID, names, email address, and metadata.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 You’ll also need to import the \u003ccode\u003eActivity\u003c/code\u003e ’s auto-generated view binding library, which will make it possible for your code to reference views in the layout (or, to put it more simply: access the onscreen widgets). Do this by adding the following \u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e\u003c/code\u003e statement, replacing \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eYOUR_PACKAGE_NAME_HERE\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e with the name of your app’s package, which you’ll find on the first line of the file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003eYOUR_PACKAGE_NAME_HERE\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edatabinding\u003cspan\u003e.\u003c/span\u003eActivityMainBinding\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe package name for my app is \u003ccode\u003ecom\u003cspan\u003e.\u003c/span\u003eexample\u003cspan\u003e.\u003c/span\u003elogin\u003c/code\u003e, so my \u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e\u003c/code\u003e statement looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eexample\u003cspan\u003e.\u003c/span\u003elogin\u003cspan\u003e.\u003c/span\u003edatabinding\u003cspan\u003e.\u003c/span\u003eActivityMainBinding\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Add-class-properties\"\u003eAdd class properties\u003c/h3\u003e\u003cp\u003e🛠 Add the following properties to \u003ccode\u003eMainActivity\u003c/code\u003e so that the start of the class looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e MainActivity \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAppCompatActivity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003elateinit\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e binding\u003cspan\u003e:\u003c/span\u003e ActivityMainBinding\n\n    \u003cspan\u003e// Login/logout-related properties\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003elateinit\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e account\u003cspan\u003e:\u003c/span\u003e Auth0\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e cachedCredentials\u003cspan\u003e:\u003c/span\u003e Credentials\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e cachedUserProfile\u003cspan\u003e:\u003c/span\u003e UserProfile\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n\n\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esavedInstanceState\u003cspan\u003e:\u003c/span\u003e Bundle\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \n    \u003cspan\u003e..\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou’ll use the first property, \u003ccode\u003ebinding\u003c/code\u003e, to access the widgets on the screen. The other three properties are related to logging in and out and are described in more detail below:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eaccount\u003c/code\u003e: represents the app’s Auth0 account and is instantiated using the app’s client ID and the domain for the app’s Auth0 tenant. Let me make this clear: this isn’t the account of the user trying to log in, but the account of the developer or organization who is delegating the login/logout process to Auth0. In the case of this example, it’s \u003cem\u003eyour\u003c/em\u003e Auth0 developer account. \u003ccode\u003eaccount\u003c/code\u003e’s value is set in \u003ccode\u003e\u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e when the activity is instantiated.\u003c/li\u003e\u003cli\u003e\u003ccode\u003ecachedCredentials\u003c/code\u003e: contains the user’s credentials that are returned from Auth0 after a successful login. Its value should be \u003ccode\u003e\u003cspan\u003enull\u003c/span\u003e\u003c/code\u003e when the user is \u003cem\u003enot\u003c/em\u003e logged in. When the user is logged in, it should reference an instance of \u003ccode\u003eCredentials\u003c/code\u003e. A \u003ccode\u003eCredentials\u003c/code\u003e instance has the following properties:\n  \u003cul\u003e\u003cli\u003e\u003ccode\u003eidToken\u003c/code\u003e: The \u003ca href=\"https://auth0.com/docs/tokens/id-tokens\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eID token\u003c/a\u003e, which contains user information that the app can use to customize the user’s experience.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eaccessToken\u003c/code\u003e: The \u003ca href=\"https://auth0.com/docs/tokens/access-tokens\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eaccess token\u003c/a\u003e, which is a credential that allows the app to access the Auth0 API.\u003c/li\u003e\u003cli\u003e\u003ccode\u003erefreshToken\u003c/code\u003e: The \u003ca href=\"https://auth0.com/docs/tokens/refresh-tokens\" target=\"_blank\" rel=\"noreferrer noopener\"\u003erefresh token\u003c/a\u003e, which can be used to request a new access token when the original access token expires, without requiring the user to re-authenticate.\u003c/li\u003e\u003cli\u003e\u003ccode\u003etype\u003c/code\u003e: The type of the received access token.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eexpiresAt\u003c/code\u003e: The date/time when the received access token expires.\u003c/li\u003e\u003cli\u003e\u003ccode\u003escope\u003c/code\u003e: The scopes granted to the access token. I’ll explain what scopes are in the next section, \u003cem\u003eThe login method\u003c/em\u003e.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003ecachedUserProfile\u003c/code\u003e: holds the user’s profile information. Its value should be \u003ccode\u003e\u003cspan\u003enull\u003c/span\u003e\u003c/code\u003e when the user is \u003cem\u003enot\u003c/em\u003e logged in. When the user is logged in, it should reference an instance of \u003ccode\u003eUserProfile\u003c/code\u003e. A \u003ccode\u003eUserProfile\u003c/code\u003e instance has the following properties:\n\u003cul\u003e\u003cli\u003e\u003ccode\u003eemail\u003c/code\u003e: The email address corresponding to the user account.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eisEmailVerified\u003c/code\u003e: \u003ccode\u003e\u003cspan\u003etrue\u003c/span\u003e\u003c/code\u003e if the user responded to the verification email sent by Auth0 after they registered themselves as a user.\u003c/li\u003e\u003cli\u003e\u003ccode\u003ename\u003c/code\u003e: The user’s full name.\u003c/li\u003e\u003cli\u003e\u003ccode\u003egivenName\u003c/code\u003e: The user’s given name, often referred to as their “first name” or “forename”.\u003c/li\u003e\u003cli\u003e\u003ccode\u003efamilyName\u003c/code\u003e: The user’s family name, often referred to as their “last name” or “surname”.\u003c/li\u003e\u003cli\u003e\u003ccode\u003enickname\u003c/code\u003e: The user’s nickname, sometimes referred to as thier “familiar name” or “moniker”.\u003c/li\u003e\u003cli\u003e\u003ccode\u003ePictureURL\u003c/code\u003e: The URL where the user’s picture can be retrieved.\u003c/li\u003e\u003cli\u003e\u003ccode\u003ecreatedAt\u003c/code\u003e: The creation date and time of the user’s account.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Update-the--onCreate----method\"\u003eUpdate the \u003ccode\u003e\u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method\u003c/h3\u003e\u003cp\u003eFirst, let’s fill out the \u003ccode\u003e\u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method that was automatically generated for the project and use it to initialize everything in the activity.\u003c/p\u003e\u003cp\u003e🛠 Update the \u003ccode\u003e\u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method so that it looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esavedInstanceState\u003cspan\u003e:\u003c/span\u003e Bundle\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esavedInstanceState\u003cspan\u003e)\u003c/span\u003e\n\n    account \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAuth0\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003ecom_auth0_client_id\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003ecom_auth0_domain\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\n\n    binding \u003cspan\u003e=\u003c/span\u003e ActivityMainBinding\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einflate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003elayoutInflater\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003esetContentView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ebinding\u003cspan\u003e.\u003c/span\u003eroot\u003cspan\u003e)\u003c/span\u003e\n\n    binding\u003cspan\u003e.\u003c/span\u003ebuttonLogin\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetOnClickListener\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    binding\u003cspan\u003e.\u003c/span\u003ebuttonLogout\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetOnClickListener\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    binding\u003cspan\u003e.\u003c/span\u003ebuttonGet\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetOnClickListener\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    binding\u003cspan\u003e.\u003c/span\u003ebuttonSet\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetOnClickListener\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003esetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis method:\u003c/p\u003e\u003cul\u003e\u003cli\u003eDefines the account object, which contains the necessary credentials to connect to your Auth0 account.\u003c/li\u003e\u003cli\u003eCreates a view binding object, which you’ll use to access the onscreen widgets.\u003c/li\u003e\u003cli\u003eConnects the \u003cstrong\u003eLog in\u003c/strong\u003e, \u003cstrong\u003eLog out\u003c/strong\u003e, \u003cstrong\u003eGet\u003c/strong\u003e, and \u003cstrong\u003eSet\u003c/strong\u003e buttons to the methods they should call when tapped.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Add-the--login----method\"\u003eAdd the \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method\u003c/h3\u003e\u003cp\u003eThe next step is to implement the method that gets called when the user taps the \u003cstrong\u003eLog In\u003c/strong\u003e button.\u003c/p\u003e\u003cp\u003e🛠 Add this to the class after \u003ccode\u003e\u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    WebAuthProvider\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eaccount\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithScheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003ecom_auth0_scheme\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithScope\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003elogin_scopes\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithAudience\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003elogin_audience\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003ecom_auth0_domain\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e Callback\u003cspan\u003e\u0026lt;\u003c/span\u003eCredentials\u003cspan\u003e,\u003c/span\u003e AuthenticationException\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eexception\u003cspan\u003e:\u003c/span\u003e AuthenticationException\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003elogin_failure_message\u003cspan\u003e,\u003c/span\u003e exception\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecredentials\u003cspan\u003e:\u003c/span\u003e Credentials\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                cachedCredentials \u003cspan\u003e=\u003c/span\u003e credentials\n                \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003elogin_success_message\u003cspan\u003e,\u003c/span\u003e credentials\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003eshowUserProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e uses the Auth0 SDK’s \u003ccode\u003eWebAuthProvider\u003c/code\u003e class, which gives the app the ability to use Auth0’s authentication service. The \u003ccode\u003eWebAuthProvider\u003c/code\u003e methods that you’ll use most often are its \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e methods.\u003c/p\u003e\u003cp\u003eAlthough this method is formatted to span several lines, it’s just a single line of code. The single line is made of a call to a chain of \u003ccode\u003eWebAuthProvider\u003c/code\u003e ’s methods starting with \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e. If you ignore all the comments and parameters, the method chain looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eWebAuthProvider\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithScheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithScope\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithAudience\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is the \u003ca href=\"https://www.baeldung.com/kotlin/builder-pattern\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eBuilder design pattern\u003c/a\u003e in action. From \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e to \u003ccode\u003e\u003cspan\u003ewithAudience\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, each method in the chain takes an argument that provides additional information about the login, using that information to creates a \u003ccode\u003eWebAuthProvider\u003c/code\u003e object that it passes to the next method in the chain. The final method in the chain, \u003ccode\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, takes the resulting \u003ccode\u003eWebAuthProvider\u003c/code\u003e object as its argument and uses it to display the login page and define what should happen when the login succeeds and when it fails.\u003c/p\u003e\u003cp\u003eLet’s take a look at what each of the methods in the chain does.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e initiates the login process and specifies the Auth0 account used by the application.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003ewithScheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e specifies the scheme to use for the URL that Auth0 redirects to after a successful login. For web apps, the scheme is \u003ccode\u003ehttp\u003c/code\u003e or \u003ccode\u003ehttps\u003c/code\u003e. This value is arbitrary for native mobile apps, so we use \u003ccode\u003eapp\u003c/code\u003e to make it clear to other developers and other people who may use the Auth0 settings for this app that the redirect is \u003cem\u003enot\u003c/em\u003e to a web page.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003ewithScope\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e specifies which sets of user data the app is authorized to use if the user logs in successfully. The OpenID Connect and OAuth frameworks, on which Auth0’s authentication and authorization are based, use the term \u003ca href=\"https://auth0.com/docs/scopes/openid-connect-scopes\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cem\u003escope\u003c/em\u003e\u003c/a\u003e to represent the authorization to access user’s data and resources. The method takes a space-delimited string as its argument, where each “word” in the string specifies a different scope. The string used in this app contains these scopes:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eopenid\u003c/code\u003e: Indicates that application that uses OpenID Connect for authentication. This is the only required scope; all other scopes are optional.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eprofile\u003c/code\u003e: Authorizes the application to access basic user profile information, including first name, surname, nickname, their photo or avatar, and so on.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eemail\u003c/code\u003e: Authorizes the application to access the user’s email address.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003ecurrent_user\u003c/code\u003e: Authorizes the application with read-only access to the \u003ccode\u003ecurrent_user\u003c/code\u003e claim.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eupdate\u003cspan\u003e:\u003c/span\u003ecurrent_user_metadata\u003c/code\u003e: Authorizes the application with read and write  access to the \u003ccode\u003ecurrent_user_metadata\u003c/code\u003e claim. This scope allows us to get and set the \u003ccode\u003ecountry\u003c/code\u003e value in the user’s metadata.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003ewithAudience\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e specifies the URL that the app will use to connect to Auth0’s login service. This URL is constructed using the domain of the Auth0 tenant used by the app and the endpoint for the Auth0 authentication API.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e takes the \u003ccode\u003eWebAuthProvider\u003c/code\u003e object constructed by all the previous methods in the chain and opens the browser window to display the login page. It takes two parameters: a context (a reference to the \u003ccode\u003eActivity\u003c/code\u003e that’s initiating the browser window) and an anonymous object with two callback methods:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e: Defines what should happen if the user returns from the browser login screen without successfully logging in. This typically happens when the user closes the browser login screen or taps the “back” button while on that screen. The app displays a \u003ccode\u003eSnackBar\u003c/code\u003e that notifies the user that login failed, followed by an error code.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e: Defines what should happen if the user returns from the browser login screen after successfully logging in. The app processes the successful response, displays a \u003ccode\u003eSnackBar\u003c/code\u003e notifying the user that login was successful, and updates the UI to its “logged in” state.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Add-the--logout----method\"\u003eAdd the \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method\u003c/h3\u003e\u003cp\u003eYou’ve probably guessed that if there’s a \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method that’s called when the user presses the \u003cstrong\u003eLog In\u003c/strong\u003e button, there must also be a \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method that’s called when the user presses the \u003cstrong\u003eLog Out\u003c/strong\u003e button.\u003c/p\u003e\u003cp\u003e🛠 Add this method to the class after \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    WebAuthProvider\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eaccount\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithScheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003ecom_auth0_scheme\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e Callback\u003cspan\u003e\u0026lt;\u003c/span\u003eVoid\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e AuthenticationException\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eexception\u003cspan\u003e:\u003c/span\u003e AuthenticationException\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003egeneral_failure_with_exception_code\u003cspan\u003e,\u003c/span\u003e\n                    exception\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003epayload\u003cspan\u003e:\u003c/span\u003e Void\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                cachedCredentials \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n                cachedUserProfile \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n                \u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs with \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e also uses the Auth0 SDK’s \u003ccode\u003eWebAuthProvider\u003c/code\u003e class and is a one-liner that uses the Builder pattern. This time, that one line calls a shorter chain of \u003ccode\u003eWebAuthProvider\u003c/code\u003e ’s methods starting with \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e. If you ignore all the parameters, the method chain looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eWebAuthProvider\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithScheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e initiates the logout process and specifies the Auth0 account used by the application, which should be the same account as the one used to log in.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003ewithScheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e specifies the scheme to use for the URL that Auth0 redirects to after successful logout. This should be the same scheme as the one used to log in.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e takes the \u003ccode\u003eWebAuthProvider\u003c/code\u003e object constructed by all the previous methods in the chain to log the user out. It takes two parameters: a context (a reference to the \u003ccode\u003eActivity\u003c/code\u003e that’s initiating the logout process) and an anonymous object with two callback methods:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e: Defines what should happen when the logout process fails. This rarely happens and usually indicates a network or server issue. In this example, the app updates the UI (which remains in the “logged in” state) and displays a \u003ccode\u003eSnackBar\u003c/code\u003e that notifies the user that logout failed, followed by an error code.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e: Defines what should happen when the logout process succeeds. In this example, the app destroys its local copies of the user’s credentials and profile and updates the UI to its “logged out” state.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Add-the--showUserProfile----method\"\u003eAdd the \u003ccode\u003e\u003cspan\u003eshowUserProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method\u003c/h3\u003e\u003cp\u003eEvery Auth0 user has a \u003cem\u003euser profile\u003c/em\u003e associated with their account. The user profile contains the following basic information about the user:\u003c/p\u003e\u003cul\u003e\u003cli\u003eNames: The user’s full name, given name, surname, and nickname\u003c/li\u003e\u003cli\u003eEmail info: The user’s email address, and whether it was verified\u003c/li\u003e\u003cli\u003ePicture: The location of an image that identifies the user\u003c/li\u003e\u003cli\u003eCreation date: The date and time when the user’s account was created\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWhen the user successfully logs in, the app should display their name and email onscreen. It does so by calling \u003ccode\u003e\u003cspan\u003eshowUserProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e immediately after a successful login.\u003c/p\u003e\u003cp\u003e🛠 Add this method to the class after \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eshowUserProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Guard against showing the profile when no user is logged in\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ecachedCredentials \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eval\u003c/span\u003e client \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAuthenticationAPIClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eaccount\u003cspan\u003e)\u003c/span\u003e\n    client\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euserInfo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecachedCredentials\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e Callback\u003cspan\u003e\u0026lt;\u003c/span\u003eUserProfile\u003cspan\u003e,\u003c/span\u003e AuthenticationException\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eexception\u003cspan\u003e:\u003c/span\u003e AuthenticationException\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003egeneral_failure_with_exception_code\u003cspan\u003e,\u003c/span\u003e\n                    exception\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eprofile\u003cspan\u003e:\u003c/span\u003e UserProfile\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                cachedUserProfile \u003cspan\u003e=\u003c/span\u003e profile\n                \u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis method is the final task performed by the \u003ccode\u003e\u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e callback method in  \u003ccode\u003e\u003cspan\u003eloginWithBrowser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e. It initializes the \u003ccode\u003ecachedUserProfile\u003c/code\u003e property, which contains the user’s profile information.\u003c/p\u003e\u003cp\u003eAs a precaution, it returns immediately if the \u003ccode\u003ecachedCredentials\u003c/code\u003e property is \u003ccode\u003e\u003cspan\u003enull\u003c/span\u003e\u003c/code\u003e, which implies that no user is logged in, and therefore there isn’t any user profile to show.\u003c/p\u003e\u003cp\u003eIn order to get this information, it does the following:\u003c/p\u003e\u003cul\u003e\u003cli\u003eIt creates an instance of \u003ccode\u003eAuthenticationAPIClient\u003c/code\u003e, which retrieves Auth0 account information. Like the login and logout methods, this also uses the Builder pattern.\u003c/li\u003e\u003cli\u003eIt uses \u003ccode\u003eAuthenticationAPIClient\u003c/code\u003e ’s \u003ccode\u003e\u003cspan\u003euserInfo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to specify that we want to retrieve user profile information from Auth0. This method requires a valid access token, which it extracts from the \u003ccode\u003ecachedCredentials\u003c/code\u003e property.\u003c/li\u003e\u003cli\u003eFinally, it defines callback methods for the cases where it failed and succeeded in retrieving the user profile information from Auth0. If the retrieval was successful, the profile information is stored in \u003ccode\u003ecachedUserProfile\u003c/code\u003e, and the UI is updated to display the user’s name and email address.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Add-the--getUserMetadata----and--setUserMetadata----methods\"\u003eAdd the \u003ccode\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003esetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e methods\u003c/h3\u003e\u003cp\u003eThe user profile contains information that generally applies to \u003cem\u003eevery\u003c/em\u003e user account regardless of the type of application it’s being used for — name, email, photo, and date/time created. While this is necessary information, it’s probably not \u003cem\u003eall\u003c/em\u003e the user information that you want to store in their profile.\u003c/p\u003e\u003cp\u003eThat what the \u003cem\u003euser metadata\u003c/em\u003e is for. Think of it as a key-value store where you can place additional user information that isn’t covered by the user profile. In this app, the user metadata will store just one additional piece of user information — their country — and it will allow the user to retrieve and update this information.\u003c/p\u003e\u003cp\u003e🛠 Add the following to the class after \u003ccode\u003e\u003cspan\u003eshowUserProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Guard against getting the metadata when no user is logged in\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ecachedCredentials \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eval\u003c/span\u003e usersClient \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eUsersAPIClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eaccount\u003cspan\u003e,\u003c/span\u003e cachedCredentials\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    usersClient\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecachedUserProfile\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e Callback\u003cspan\u003e\u0026lt;\u003c/span\u003eUserProfile\u003cspan\u003e,\u003c/span\u003e ManagementException\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eexception\u003cspan\u003e:\u003c/span\u003e ManagementException\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003egeneral_failure_with_exception_code\u003cspan\u003e,\u003c/span\u003e\n                    exception\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003euserProfile\u003cspan\u003e:\u003c/span\u003e UserProfile\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                cachedUserProfile \u003cspan\u003e=\u003c/span\u003e userProfile\n                \u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n                \u003cspan\u003eval\u003c/span\u003e country \u003cspan\u003e=\u003c/span\u003e userProfile\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;country\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e String\u003cspan\u003e?\u003c/span\u003e\n                binding\u003cspan\u003e.\u003c/span\u003eedittextCountry\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecountry\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003esetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Guard against getting the metadata when no user is logged in\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ecachedCredentials \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eval\u003c/span\u003e usersClient \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eUsersAPIClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eaccount\u003cspan\u003e,\u003c/span\u003e cachedCredentials\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e metadata \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003emapOf\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;country\u0026#34;\u003c/span\u003e \u003cspan\u003eto\u003c/span\u003e binding\u003cspan\u003e.\u003c/span\u003eedittextCountry\u003cspan\u003e.\u003c/span\u003etext\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    usersClient\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eupdateMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecachedUserProfile\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e metadata\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e Callback\u003cspan\u003e\u0026lt;\u003c/span\u003eUserProfile\u003cspan\u003e,\u003c/span\u003e ManagementException\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eexception\u003cspan\u003e:\u003c/span\u003e ManagementException\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003egeneral_failure_with_exception_code\u003cspan\u003e,\u003c/span\u003e\n                    exception\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eprofile\u003cspan\u003e:\u003c/span\u003e UserProfile\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                cachedUserProfile \u003cspan\u003e=\u003c/span\u003e profile\n                \u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n                \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003egeneral_success_message\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhile \u003ccode\u003e\u003cspan\u003eshowUserProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e uses an instance of \u003ccode\u003eAuthenticationAPIClient\u003c/code\u003e to get the user profile information, \u003ccode\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003esetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e use a different object type: \u003ccode\u003eUsersAPIClient\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eUnlike \u003ccode\u003eAuthenticationAPIClient\u003c/code\u003e, which needs only an \u003ccode\u003eAuth0\u003c/code\u003e account object to be instantiated, you need both an \u003ccode\u003eAuth0\u003c/code\u003e account object and an access token to instantiate a \u003ccode\u003eUsersAPIClient\u003c/code\u003e object.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e specifies the user profile using \u003ccode\u003eUsersAPIClient\u003c/code\u003e ’s \u003ccode\u003e\u003cspan\u003egetProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method and the ID of the user, followed by the \u003ccode\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to attempt to get the user profile and define callback methods for failure and success.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e’s \u003ccode\u003e\u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e callback is almost the same as \u003ccode\u003e\u003cspan\u003eshowUserProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e’s — it just has these two additional lines that extract the \u003ccode\u003ecountry\u003c/code\u003e value from the user’s metadata and display it onscreen:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eval\u003c/span\u003e country \u003cspan\u003e=\u003c/span\u003e userProfile\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;country\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e String\u003cspan\u003e?\u003c/span\u003e\nbinding\u003cspan\u003e.\u003c/span\u003eedittextCountry\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecountry\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003esetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e defines a \u003ccode\u003eMap\u003c/code\u003e with a single key-value pair, where the key is the string \u003ccode\u003ecountry\u003c/code\u003e and the corresponding value is the contents of the \u003ccode\u003eEditText\u003c/code\u003e where the user enters the name of their country. It then passes that \u003ccode\u003eMap\u003c/code\u003e along with the user’s ID to \u003ccode\u003eUsersAPIClient\u003c/code\u003e ’s \u003ccode\u003e\u003cspan\u003eupdateMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to specify the change to be made, followed by the \u003ccode\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to initiate the update and define callback methods for failure and success.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003esetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e’s \u003ccode\u003e\u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e callback is almost the same as \u003ccode\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e’s — but instead of updating the \u003ccode\u003eEditText\u003c/code\u003e where the user enters the name of their country, it simply displays a \u003ccode\u003eSnackBar\u003c/code\u003e notifying the user that it was successful in updating the metadata.\u003c/p\u003e\u003ch3 id=\"Add-the-UI-methods\"\u003eAdd the UI methods\u003c/h3\u003e\u003cp\u003eThe final step is to add the methods that present information to the user.\u003c/p\u003e\u003cp\u003e🛠 Add the following to the class after \u003ccode\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003esetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e isLoggedIn \u003cspan\u003e=\u003c/span\u003e cachedCredentials \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n\n    binding\u003cspan\u003e.\u003c/span\u003etextviewTitle\u003cspan\u003e.\u003c/span\u003etext \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eisLoggedIn\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003elogged_in_title\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003elogged_out_title\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    binding\u003cspan\u003e.\u003c/span\u003ebuttonLogin\u003cspan\u003e.\u003c/span\u003eisEnabled \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003eisLoggedIn\n    binding\u003cspan\u003e.\u003c/span\u003ebuttonLogout\u003cspan\u003e.\u003c/span\u003eisEnabled \u003cspan\u003e=\u003c/span\u003e isLoggedIn\n    binding\u003cspan\u003e.\u003c/span\u003elinearlayoutMetadata\u003cspan\u003e.\u003c/span\u003eisVisible \u003cspan\u003e=\u003c/span\u003e isLoggedIn\n\n    binding\u003cspan\u003e.\u003c/span\u003etextviewUserProfile\u003cspan\u003e.\u003c/span\u003eisVisible \u003cspan\u003e=\u003c/span\u003e isLoggedIn\n\n    \u003cspan\u003eval\u003c/span\u003e userName \u003cspan\u003e=\u003c/span\u003e cachedUserProfile\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename \u003cspan\u003e?:\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e userEmail \u003cspan\u003e=\u003c/span\u003e cachedUserProfile\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eemail \u003cspan\u003e?:\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n    binding\u003cspan\u003e.\u003c/span\u003etextviewUserProfile\u003cspan\u003e.\u003c/span\u003etext \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003euser_profile\u003cspan\u003e,\u003c/span\u003e userName\u003cspan\u003e,\u003c/span\u003e userEmail\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003eisLoggedIn\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        binding\u003cspan\u003e.\u003c/span\u003eedittextCountry\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etext\u003cspan\u003e:\u003c/span\u003e String\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    Snackbar\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emake\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        binding\u003cspan\u003e.\u003c/span\u003eroot\u003cspan\u003e,\u003c/span\u003e\n        text\u003cspan\u003e,\u003c/span\u003e\n        Snackbar\u003cspan\u003e.\u003c/span\u003eLENGTH_LONG\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you’ve made it this far, I have great news for you: you’ve written all the code for the app!\u003c/p\u003e\u003ch2 id=\"See-the-App-in-Action\"\u003eSee the App in Action\u003c/h2\u003e\u003cp\u003eRun the app. You’ll see this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7FSXqzXczgaNUC5NnY9q1F/d72b55833d1bf446c70d60488f7f4ae0/welcome_screen.png\" alt=\"The app’s screen when launched.\"/\u003e\u003c/p\u003e\u003cp\u003eTap the \u003cstrong\u003eLog in\u003c/strong\u003e button. The app will open a browser window that will display the login web page:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/53TEQjPR0HhmvGIC8BXW7a/e7b6205b7c401883c61b162c498a00f7/universal_login.png\" alt=\"The Auth0 login web page.\"/\u003e\u003c/p\u003e\u003cp\u003eLog in using the email address and password of the user account you created earlier. Since this is the first time the account has logged into the app, the \u003cstrong\u003eAuthorize App\u003c/strong\u003e page will appear in the browser window:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4AkDSwWeHROplHJV3KOFcg/98376afd920b0af2a2e732a06c7fb622/authorize_app.png\" alt=\"The “Authorize App” screen. It says that the app is requesting access to your user account, particularly the “profile”, “current_user”, and “current_user_metadata” information.\"/\u003e\u003c/p\u003e\u003cp\u003eThis page is asking you to authorize the app to access the following information in your user account:\u003c/p\u003e\u003cul\u003e\u003cli\u003eProfile: access to your profile and email\u003c/li\u003e\u003cli\u003eCurrent_user: read your current_user\u003c/li\u003e\u003cli\u003eCurrent_user_metadata: update your current_user_metadata\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIf these items sound familiar, it’s because you’ve seen them recently. They’re the names of the scopes in the \u003ccode\u003elogin_scopes\u003c/code\u003e string in the \u003ccode\u003estrings\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e resource...\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003elogin_scopes\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    openid profile email read:current_user update:current_user_metadata\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e...which the call to \u003ccode\u003e\u003cspan\u003ewithScope\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e in the \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method uses to specify which sets of user data the app is authorized to use. This additional step informs the user of this use of their data and gives them a choice to approve or decline.\u003c/p\u003e\u003cp\u003eTap the \u003cstrong\u003eApprove\u003c/strong\u003e button. The browser will disappear, and you will return to the app, which will now look like this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png\" alt=\"The app’s screen when the user is logged in.\"/\u003e\u003c/p\u003e\u003cp\u003eTap the \u003cstrong\u003eGet\u003c/strong\u003e button. If you’ve never edited the value of the \u003ccode\u003ecountry\u003c/code\u003e field in the user’s metadata, the metadata text box will display the hint text “Enter country”.\u003c/p\u003e\u003cp\u003eEnter a country’s name (or any other text if you like) into the text box and tap the \u003cstrong\u003eSet\u003c/strong\u003e button. You’ll see this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5NE22T6w25nAVecqCIZ7x7/3c913e712052570af8908e860da37d2a/main_screen_3.png\" alt=\"The app’s screen, with the word “Morocco”, entered into the text field.\"/\u003e\u003c/p\u003e\u003cp\u003eTwo things just happened:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eIf the user’s metadata already had a \u003ccode\u003ecountry\u003c/code\u003e field, its value changed to whatever text you entered. If the user’s metadata didn’t have a \u003ccode\u003ecountry\u003c/code\u003e field, a \u003ccode\u003ecountry\u003c/code\u003e field was added to the metadata, and its value was set to whatever text you entered.\u003c/li\u003e\u003cli\u003eAn Android pop-up message called a \u003ca href=\"https://developer.android.com/reference/com/google/android/material/snackbar/Snackbar\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eSnackbar\u003c/code\u003e\u003c/a\u003e appeared at the bottom of the screen with the message “Success!”\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eLog out of the app, then log in again. Tap the \u003cstrong\u003eGet\u003c/strong\u003e button. The app should fill the metadata text box with the value of the \u003ccode\u003ecountry\u003c/code\u003e metadata field.\u003c/p\u003e\u003cp\u003eLet’s look at the updated user metadata from the Auth0 side. In the Auth0 dashboard, go to the list of users. Do this by clicking \u003cstrong\u003eUser Management\u003c/strong\u003e in the menu on the left side of the page, followed by clicking on \u003cstrong\u003eUsers\u003c/strong\u003e. Select the user that is currently logged in on the app. You’ll be taken to that user’s \u003cstrong\u003eDetails\u003c/strong\u003e page:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5nnVqPm4l6vVtgyvZpeYwI/db98ccbfb8b945ebde7ec7c8143724c5/user_details_page.png\" alt=\"The Auth0 dashboard displaying the user’s “User Details” page. In the “user_metadata” field, a JSON object contains a single key-value pair with the key “country” and the value “Morocco”.\"/\u003e\u003c/p\u003e\u003cp\u003eScroll down to the \u003cstrong\u003eMetadata\u003c/strong\u003e section of the page. You’ll see an area labeled \u003cstrong\u003euser_metadata\u003c/strong\u003e. If you filled out the \u003ccode\u003eEditText\u003c/code\u003e in the app, you’ll see it in the JSON object there:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;country\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eWHATEVER_TEXT_YOU_ENTERED\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEach Auth0 user account can store two kinds of metadata:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eUser metadata,\u003c/strong\u003e which is meant for data intentionally provided by and controlled by the user. It’s typically used for storing information that the user wants to share with the app, such as their address, contact information, preferences, and similar data. Only data that the user can read and edit should be stored here.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eApp metadata,\u003c/strong\u003e which is meant for data provided by and controlled by the app. It’s typically used for storing information about the user that is primarily for the app’s use, such as the user’s roles, permissions, status, and similar data. There may be cases where the user can read this data, but you should not use app metadata to store data provided directly by the user.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWhile a detailed look at the user account pages is beyond the scope of this article, you should explore them to see the kinds of data and functionality that are associated with user accounts.\u003c/p\u003e\u003ch2 id=\"When-Things-Go-Sideways\"\u003eWhen Things Go Sideways\u003c/h2\u003e\u003cp\u003eThe expression “to go sideways” means “to go wrong” or “to not go according to plan.” In this section, I’ll show you what can go wrong when you’re writing an Android app and fail to account for what happens when the user turns their phone on its side. \u003c/p\u003e\u003ch3 id=\"Inducing-app-amnesia\"\u003eInducing app amnesia\u003c/h3\u003e\u003cp\u003eRun the app and log in. You should see this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png\" alt=\"The app’s screen when the user is logged in, in portrait orientation.\"/\u003e\u003c/p\u003e\u003cp\u003eRotate your device to landscape orientation:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/48FY3obLHoGHnHfugbSn7I/8bc142a3e3e69bde3deed3223e6d02d7/orientation_change.png\" alt=\"The app screen viewed in landscape orientation. It has taken on the appearance of just having been launched.\"/\u003e\u003c/p\u003e\u003cp\u003eNotice what happened: \u003c/p\u003e\u003cul\u003e\u003cli\u003eThe greeting text changed from “You’re logged in.” to “Welcome to the app!”, which is its state when the app is launched.\u003c/li\u003e\u003cli\u003eThe buttons have also been returned to their initial state:  \u003cstrong\u003eLog in\u003c/strong\u003e is enabled, and \u003cstrong\u003eLog out\u003c/strong\u003e is disabled.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIt appears as if turning your device on its side has given your app amnesia and returned it to its initial state. What happened?\u003c/p\u003e\u003ch3 id=\"Configuration-changes-and-reloading\"\u003eConfiguration changes and reloading\u003c/h3\u003e\u003cp\u003eTo use a developer cliché: this isn’t a bug, but a feature.\u003c/p\u003e\u003cp\u003eWhenever it detects a configuration change, Android’s default response is to reload the current activity. There are many configuration changes, such as language, keyboard availability, or the change you made just now: screen orientation. Reloading an activity when a configuration change happens makes it run its initialization methods again and reload resources, allowing it to set itself up for the new configuration.\u003c/p\u003e\u003cp\u003eThis behavior was designed for applications that present different interfaces in different orientations. YouTube is an example of such an app, which has different portrait and landscape UI setups:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4jHUrVT9Ekh5252HZc3T95/706f6ddb57bb1b6be1a37c82b1201297/youtube_portrait_and_landscape.png\" alt=\"The YouTube app, shown in both orientations. In portrait orientation, it shows the video, ratings, and comments. In landscape orientation, the video takes up the entire screen.\"/\u003e\u003c/p\u003e\u003cp\u003eChanging the screen orientation reloaded the activity and restored the app to its initial state, but it \u003cem\u003edid not\u003c/em\u003e change your “logged in” status. The \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method was not called when you turned your device on its side. You’re still logged in!\u003c/p\u003e\u003cp\u003eYou can confirm your “logged in” status by tapping the \u003cstrong\u003eLog in\u003c/strong\u003e button. Note that there wasn’t an intermediate step where you had to enter your email address and password — you were taken straight to the app:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/01B8CQAD7K9uDYwkT7D1c7/08a21f19cdacc4ecdb065132cd2cf590/logged_in_sideways.png\" alt=\"The app screen, viewed in landscape orientation, showing the user logged in. The bottom portion of the screen is not in sight.\"/\u003e\u003c/p\u003e\u003cp\u003eNote that that app never presented the login page. That’s because there wasn’t any need — you were still logged in. Let’s solve this problem.\u003c/p\u003e\u003ch3 id=\"Curing-your-app-s-amnesia\"\u003eCuring your app’s amnesia\u003c/h3\u003e\u003cp\u003eYou can instruct Android \u003cem\u003enot\u003c/em\u003e to reload Activities in the event of specified configuration changes in the app’s manifest. \u003c/p\u003e\u003cp\u003e🛠 Open \u003ccode\u003eAndroidManifest\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e and change the \u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eactivity\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e tag to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eactivity\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e.MainActivity\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eexported\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003etrue\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003econfigChanges\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorientation|screenSize\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis change adds the attribute \u003ccode\u003eandroid\u003cspan\u003e:\u003c/span\u003econfigChanges\u003cspan\u003e=\u003c/span\u003e “orientation\u003cspan\u003e|\u003c/span\u003escreenSize”\u003c/code\u003e to \u003ccode\u003eMainActivity\u003c/code\u003e, which tells Android that the activity should \u003cem\u003enot\u003c/em\u003e reload if the device orientation or screen size changes. Instead of reloading the activity, Android uses a callback method to notify the app of the change. The assumption is that you’ll handle those configuration changes yourself. Since we’ll ignore this callback, the configuration change has no effect.\u003c/p\u003e\u003cp\u003eRun the app and log in. Change the screen orientation, going from portrait to landscape and back. It no longer causes the activity to reload.\u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eYou’ve just built a simple app that features basic username/password \u003cem\u003eauthentication\u003c/em\u003e — the ability to identify a known user. In addition to log a user in and out, you can also retrieve the information in their profile, and read and update their metadata.\u003c/p\u003e\u003cp\u003eYou can find the code for the complete project for this article in \u003ca href=\"https://github.com/auth0-blog/get-started-android-authentication-kotlin\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis repository on the \u003cem\u003eAuth0 Blog Samples\u003c/em\u003e GitHub account\u003c/a\u003e. The only change that you’ll need to make in order to run it is to enter your app’s client ID and tenant’s domain in the \u003ccode\u003eauth0\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e resource file.\u003c/p\u003e\u003cp\u003eThis is the first in a new series of articles on Android development with Auth0. Future articles will cover new developments in Android 12 and Android Studio, as well as deeper dives into authentication and authorization with Android and Auth0 and alternatives to the standard username-and-password approach. Watch this space!\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-1\" target=\"_blank\" rel=\"noopener referrer\"\u003eNext Step: Read the preview part here\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://community.auth0.com/t/developing-a-secure-api-with-nestjs/33026\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eI ran into an issue\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn how to implement login, logout, and user profiles in Android apps using Kotlin and Auth0.",
      "date_published": "2021-09-20T18:29:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-1/",
      "title": "Get Started with Android Authentication Using Kotlin: Part 1",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIf you’re planning to build a native Android app that requires users to log in, you should use Auth0. \u003c/p\u003e\u003cp\u003eImplementing user login/logout often turns into its own project. Just implementing the many ways users want to log in can easily take a lot of time. You’d also have to deal with issues such as user management, scaling, and security, each of which could have its own article.\u003c/p\u003e\u003cp\u003eWith Auth0 and a few lines of code, your app can have a full-featured system that supports logging in with a basic username/password combination, single sign-on and social accounts, passwordless login, biometrics, and more. You won’t have to handle the “behind the scenes” issues, either!\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eThis tutorial covers the basics of using Auth0 to implement login/logout in an Android app written in Kotlin.\u003c/strong\u003e It also provides an introduction to reading and writing information into user profiles so that your app can customize itself for each user. Along the way, you’ll become familiar with the Auth0 dashboard and learn how to use it to register applications and users.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eLook for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.\u003c/strong\u003e \u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"What-you-ll-build\"\u003eWhat you’ll build\u003c/h2\u003e\u003cp\u003eYou’ll build a simple, single-screen Android app that will allow the user to log in and log out using Auth0. While logged in, the user will be able to see the following information from their user profile, namely:\u003c/p\u003e\u003cul\u003e\u003cli\u003eInformation that is part and parcel of the user account, namely:\n  \u003cul\u003e\u003cli\u003eThe user’s name\u003c/li\u003e\u003cli\u003eThe user’s email address\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003eMetadata attached to the user account, namely:\n  \u003cul\u003e\u003cli\u003eThe user’s country\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe user will also be able to edit their country, and the result of that edit will be stored in the user account.\u003c/p\u003e\u003cp\u003eWhen you launch the completed app, you’ll see a greeting, a \u003cstrong\u003eLog in\u003c/strong\u003e button, and a disabled \u003cstrong\u003eLog out\u003c/strong\u003e button:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7FSXqzXczgaNUC5NnY9q1F/d72b55833d1bf446c70d60488f7f4ae0/welcome_screen.png\" alt=\"The finished app’s screen when launched. The greeting “Welcome to the app!” appears above the “Log in” and “Log out” buttons.\"/\u003e\u003c/p\u003e\u003cp\u003eTapping the \u003cstrong\u003eLog in\u003c/strong\u003e button takes the user to the login screen, which appears in a custom Chrome tab:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/53TEQjPR0HhmvGIC8BXW7a/e7b6205b7c401883c61b162c498a00f7/universal_login.png\" alt=\"The default Auth0 login web page. It lets the user enter username and password or log in using a Google account.\"/\u003e\u003c/p\u003e\u003cp\u003eWhen you use Auth0 in your apps, you delegate authentication to a centralized login page in the same way that Google properties such as Gmail and YouTube redirect you to \u003cstrong\u003eaccounts.google.com\u003c/strong\u003e when you log in. In this exercise, you’ll use the default “look and feel” for the login page, but \u003ca href=\"https://auth0.com/docs/universal-login/new-experience/universal-login-page-templates\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eyou can customize it to match your app or organization’s branding\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLogging in successfully returns you to the app, where you’ll see the following changes:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png\" alt=\"The finished app’s screen when the user is logged in. It displays information about the logged-in user.\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe greeting will have changed to a notification telling you that you’re now logged into the app.\u003c/li\u003e\u003cli\u003eThe \u003cstrong\u003eLog in\u003c/strong\u003e button will now be disabled, and the \u003cstrong\u003eLog out\u003c/strong\u003e button will now be enabled.\u003c/li\u003e\u003cli\u003eThe name and email address for the user account that you used to log in will be displayed.\u003c/li\u003e\u003cli\u003eThere will now be a section for metadata, complete with an editable text box (an \u003ccode\u003eEditText\u003c/code\u003e in Android parlance) and \u003cstrong\u003eGet\u003c/strong\u003e and \u003cstrong\u003eSet\u003c/strong\u003e buttons that will allow you to read and write to the \u003ccode\u003ecountry\u003c/code\u003e field of the metadata for the user account.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eAs you might expect, logging out is done by tapping the \u003cstrong\u003eLog out\u003c/strong\u003e button. Once logged out, you see the following changes onscreen:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2JqJGGpuuMVwdXSPyHH0iT/8c4153360bd7aa656dccc8170af42e4d/logout_screen.png\" alt=\"The finished app’s screen when the user is logged out. The title bar reads “You’re logged out”.\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe notification at the top of the screen will now inform you that you’re logged out of the app.\u003c/li\u003e\u003cli\u003eLogging out enables the \u003cstrong\u003eLog in\u003c/strong\u003e button and disables the \u003cstrong\u003eLog out\u003c/strong\u003e button.\u003c/li\u003e\u003cli\u003eThe other controls that were visible when you were logged in will no longer be visible.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Prerequisites\"\u003ePrerequisites\u003c/h2\u003e\u003cp\u003eYou’ll need the following for this coding exercise:\u003c/p\u003e\u003ch3 id=\"What-you-ll-need\"\u003eWhat you’ll need\u003c/h3\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eAn Android development setup.\u003c/strong\u003e Make sure you have the following, in the order given below:\n  \u003cul\u003e\u003cli\u003e\u003ca href=\"https://www.oracle.com/java/technologies/javase-jdk16-downloads.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cstrong\u003eJava SE Developer Kit (JDK), version 11 or later.\u003c/strong\u003e\u003c/a\u003e You can find out which version is on your computer by opening a command-line interface and entering \u003ccode\u003ejava \u003cspan\u003e--\u003c/span\u003eversion\u003c/code\u003e.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://developer.android.com/studio\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cstrong\u003eAndroid Studio,\u003c/strong\u003e\u003c/a\u003e version 3.6 (February 2020) or later. I used the current stable version of Android Studio when writing this article: version 2020.3.1, also known as “Arctic Fox”.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAt least one Android SDK (Software Development Kit) platform.\u003c/strong\u003e You can confirm that you have one (and install one if you don’t) in Android Studio. Open \u003cstrong\u003eTools\u003c/strong\u003e → \u003cstrong\u003eSDK Manager\u003c/strong\u003e. You’ll see a list of Android SDK platforms. Make sure that the current SDK (\u003cstrong\u003eAndroid 11.0 (R)\u003c/strong\u003e at the time of writing) is checked; if it isn’t, check it, click the \u003cstrong\u003eApply\u003c/strong\u003e button, and click the \u003cstrong\u003eOK\u003c/strong\u003e  button in the confirmation dialog that appears. Wait for the SDK platform to install and click the \u003cstrong\u003eFinish\u003c/strong\u003e button when installation is complete.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAn Android device, real or virtual:\u003c/strong\u003e\n  \u003cul\u003e\u003cli\u003e\u003cstrong\u003eUsing a real device:\u003c/strong\u003e Connect the device to your computer with a USB cable. \u003ca href=\"https://developer.android.com/studio/debug/dev-options\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMake sure that your device has Developer Options and USB debugging enabled.\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eUsing a virtual device:\u003c/strong\u003e Using Android Studio, you can build a virtual device (emulator) that runs on your computer. Here’s my recipe for a virtual device that simulates a current-model inexpensive Android phone:\n  \u003col start=\"1\"\u003e\u003cli\u003eOpen \u003cstrong\u003eTools\u003c/strong\u003e → \u003cstrong\u003eAVD Manager\u003c/strong\u003e (AVD is short for “Android Virtual Device”). The \u003cstrong\u003eYour Virtual Devices\u003c/strong\u003e window will appear. Click the \u003cstrong\u003eCreate Virtual Device...\u003c/strong\u003e button.\u003c/li\u003e\u003cli\u003eThe \u003cstrong\u003eSelect Hardware\u003c/strong\u003e window will appear. In the \u003cstrong\u003ePhone\u003c/strong\u003e category, select \u003cstrong\u003ePixel 3a\u003c/strong\u003e and click the \u003cstrong\u003eNext\u003c/strong\u003e button.\u003c/li\u003e\u003cli\u003eThe \u003cstrong\u003eSystem Image\u003c/strong\u003e window will appear, and you’ll see a list of Android versions. Select \u003cstrong\u003eR\u003c/strong\u003e (API 30, also known as Android 11.0). If you see a \u003cstrong\u003eDownload\u003c/strong\u003e link beside R, click it, wait for the OS to download, then click the \u003cstrong\u003eFinish\u003c/strong\u003e button. Then click the \u003cstrong\u003eNext\u003c/strong\u003e button.\u003c/li\u003e\u003cli\u003eThe \u003cstrong\u003eAndroid Virtual Device (AVD)\u003c/strong\u003e window will appear. The \u003cstrong\u003eAVD Name\u003c/strong\u003e field should contain \u003cstrong\u003ePixel 3a API 30\u003c/strong\u003e, the two rows below it should have the titles \u003cstrong\u003ePixel 3a\u003c/strong\u003e and \u003cstrong\u003eR\u003c/strong\u003e, and in the \u003cstrong\u003eStartup orientation\u003c/strong\u003e section, \u003cstrong\u003ePortrait\u003c/strong\u003e should be selected. Click the \u003cstrong\u003eFinish\u003c/strong\u003e button.\u003c/li\u003e\u003cli\u003eYou will be back at the \u003cstrong\u003eYour Virtual Devices\u003c/strong\u003e window. The list will now contain \u003cstrong\u003ePixel 3a API 30\u003c/strong\u003e, and that device will be available to you when you run the app.\u003c/li\u003e\u003c/ol\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAn Auth0 account.\u003c/strong\u003e \u003ca href=\"https://auth0.com/sign-up?tr=1\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eYou can sign up for a free one now\u003c/a\u003e, or later on in the article.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"What-might-be-useful\"\u003eWhat might be useful\u003c/h3\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eA little familiarity with Android development.\u003c/strong\u003e If you’re new to Android development or the Kotlin programming language, you might find Android Developers’ site, \u003ca href=\"https://developer.android.com/courses/android-basics-kotlin/course\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cem\u003eAndroid Basics in Kotlin\u003c/em\u003e\u003c/a\u003e, a good introduction.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Set-Up-the-Project-on-Android-Studio\"\u003eSet Up the Project on Android Studio\u003c/h2\u003e\u003cp\u003e🛠 Open Android Studio. Close any open project windows, which will cause the \u003cstrong\u003eWelcome to Android Studio\u003c/strong\u003e window to appear. Create a new project by clicking the \u003cstrong\u003eNew project\u003c/strong\u003e button:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/515JGjc8Gu0kPUC9nSmABB/04464174cda6dd059c734157cf68de21/click_new_project.png\" alt=\"Android Studio’s “Welcome to Android Studio” screen. An arrow directs the reader to click the “New Project” button.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Make sure that \u003cstrong\u003ePhone and Tablet\u003c/strong\u003e is selected in the menu of the left side of the window that appears, then select \u003cstrong\u003eEmpty Activity\u003c/strong\u003e from the selection of templates. Click the \u003cstrong\u003eNext\u003c/strong\u003e button:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3C7qUdfN39HAixbVPi7cMs/0d6f2fe941ddf1f25c7ac1b56bd46344/select_empty_activity.png\" alt=\"Android Studio’s template screen for new projects. The reader is told to select the “Empty Activity” and click the “Next” button.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 In the next window, enter a name for the app, such as \u003cstrong\u003eLogin\u003c/strong\u003e. Make a note of the value that Android Studio generates in the \u003cstrong\u003ePackage Name\u003c/strong\u003e field — you’ll need it when registering the app with Auth0.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eIf you used \u003cstrong\u003eLogin\u003c/strong\u003e as the name for the app, Android Studio will automatically generate the package name \u003cstrong\u003ecom.example.login\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2ke5fQE1zyH9OljmWbarEG/5715fffa863c2f193930679aadbd66da/new_project_name.png\" alt=\"The template screen for new project details: project name is “Login”, package name is “com.example.login”, language is Kotlin, minimum SDK is set to API 21.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Ensure that the selected \u003cstrong\u003eLanguage\u003c/strong\u003e is \u003cstrong\u003eKotlin\u003c/strong\u003e and that the \u003cstrong\u003eMinimum SDK\u003c/strong\u003e is set to \u003cstrong\u003eAPI 21: Android 5.0 (Lollipop)\u003c/strong\u003e or later.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eAPI 21, which dates back to November 2014, is the oldest version of Android supported by Auth0. By targeting API 21 or later, you can write an app that will run on almost 95% of the active Android devices that are connected to the Play Store.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e🛠 Click the \u003cstrong\u003eFinish\u003c/strong\u003e button. Android Studio will spend a few moments setting up your project. \u003c/p\u003e\u003cp\u003e🛠 Once Android Studio has finished setting up the project, run the app to confirm that it works. You should see the default “Hello, World!” app:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6PQgEXywNwmp7eKD50RSU6/ffe69b079f53c0d059264c541c3d5623/hello_world.png\" alt=\"The newly-created app’s screen when launched. Title bar reads “Login”; body reads “Hello World!”.\"/\u003e\u003c/p\u003e\u003cp\u003eWith the app project set up on Android Studio, it’s time to turn your attention to the Auth0 side.\u003c/p\u003e\u003ch2 id=\"Register-the-App-with-Auth0\"\u003eRegister the App with Auth0\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eTo continue beyond this point, you’ll need an Auth0 account.\u003c/strong\u003e That’s because your app will delegate the heavy lifting of the login/logout process to Auth0 so that you can focus your effort, energy, and time on what your app actually does, instead of worrying about authenticating users and all the edges cases that come with it.\u003c/p\u003e\u003ch3 id=\"If-you-already-have-an-Auth0-account---\"\u003eIf you already have an Auth0 account...\u003c/h3\u003e\u003cp\u003e🛠 ...log in, skip the next section, and proceed to the part titled \u003cstrong\u003e\u003cem\u003eRegister your app with Auth0\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\u003ch3 id=\"If-you-don-t-have-an-Auth0-account-yet---\"\u003eIf you don’t have an Auth0 account yet...\u003c/h3\u003e\u003cp\u003e🛠 \u003ca href=\"https://auth0.com/signup\" data-amp-replace=\"CLIENT_ID\" data-amp-addparams=\"anonId=CLIENT_ID(cid-scope-cookie-fallback-name)\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cstrong\u003e...go ahead and sign up for one!\u003c/strong\u003e\u003c/a\u003e It’s free, and we’ve taken great care to make the process as painless as possible.\u003c/p\u003e\u003cp\u003eAuth0 will ask you to fill just \u003cem\u003etwo\u003c/em\u003e fields: your email address and a password. We \u003cem\u003e won’t\u003c/em\u003e ask for a credit card number or any other information. If \u003cem\u003ethat\u003c/em\u003e seems like too much work, you can sign up with a single click by doing so using your GitHub, Google, or Microsoft account:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/Pk0WorUwp6mW9iJKj4Ar7/9d8c9e515765f118b5fdc06d3793b6ef/sign_up.png\" alt=\"Auth0’s “Sign Up” form, which has “Email” and “Password” fields, and links to sign up with a GitHub, Google, and Microsoft account.\"/\u003e\u003c/p\u003e\u003cp\u003eOnce you’ve provided an email address and password, you’ll see the “Let’s set you up for success” page:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4M6OV4hlEWk5J9kI2Vzs5p/fa8c33783e7255757f7710e219caeac0/set_up_auth0_account.png\" alt=\"The “Let’s set you up for success” page. The reader is directed to select the “Personal” account type and click the “Next” button.\"/\u003e\u003c/p\u003e\u003cp\u003eJust select \u003cstrong\u003ePersonal\u003c/strong\u003e for your account type and click the \u003cstrong\u003eNext\u003c/strong\u003e button. Your sign-up process will be complete, and you’ll see the Auth0 dashboard page.\u003c/p\u003e\u003ch3 id=\"Register-your-app-with-Auth0\"\u003eRegister your app with Auth0\u003c/h3\u003e\u003cp\u003e🛠 In the menu on the left side of the \u003ca href=\"https://manage.auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 dashboard\u003c/a\u003e, click on \u003cstrong\u003eApplications\u003c/strong\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2PsBUajhnnXWJR7QS8PUfg/e9c6bd92175335286aa03224e1646e91/expand_applications_menu.png\" alt=\"The main page of the Auth0 dashboard. The reader is directed to expand the “Applications” menu.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 This will expand the \u003cstrong\u003eApplications\u003c/strong\u003e menu. Select the first item in that menu, which also has the name \u003cstrong\u003eApplications\u003c/strong\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2UNcUhGNq16RFBJkokz7KS/854f3e92fbe58943bf05f0f4a761d177/select_applications_menu_item.png\" alt=\"The main page of the Auth0 dashboard, with the “Applications” menu expanded. The reader is directed to select the “Applications” menu item.\"/\u003e\u003c/p\u003e\u003cp\u003eYou will now be on the \u003cstrong\u003eApplications\u003c/strong\u003e page. It lists all the applications that you have registered so that Auth0 can handle their login/logout processes.\u003c/p\u003e\u003cp\u003e🛠 Let’s create a new registration for your app. Do this by clicking the \u003cstrong\u003eCreate application\u003c/strong\u003e button near the top right of the page:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4aOFH6mt7xs9CspYNkuU7Q/1cff580b803c09236ad959b18614119a/create_application.png\" alt=\"The “Applications” page. The reader is directed to click the “Create Application” button.\"/\u003e\u003c/p\u003e\u003cp\u003eYou’ll see this dialog appear:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/lAiEqcCsTt5CcwrdA3IGb/8eda117f82ca08f55f120d058587443d/create_application.png\" alt=\"The “Create application” dialog. The application’s name is set to “Login”, and the selected application type is “Native”.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 You’ll need to provide two pieces of information to continue:\u003c/p\u003e\u003cul\u003e\u003cli\u003eEnter a name for your app in the name field. It might be simplest to use the same name as your Android Studio project (if you’ve been following my example, use the name \u003cstrong\u003eLogin\u003c/strong\u003e).\u003c/li\u003e\u003cli\u003eSpecify the application type, which in this case is \u003cstrong\u003eNative\u003c/strong\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eClick \u003cstrong\u003eCreate\u003c/strong\u003e. The \u003cstrong\u003eQuick Start\u003c/strong\u003e page for your app will appear:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5yXXeZfsMDWTPUcWi49Jj6/73176affc85927351badee8172b831e8/quick_start_tab.png\" alt=\"The “Quick Start” page. It contains several icons, each one representing an operating system or platform.\"/\u003e\u003c/p\u003e\u003cp\u003eThis page provides you with ready-made projects for several different platforms that you can use as the basis for an application that delegates login/logout to Auth0. You won’t be using any of them in this exercise; instead, you’ll make use of a couple of Auth0 libraries and write the code yourself. It’s more educational — and more importantly, \u003cem\u003efun\u003c/em\u003e — that way.\u003c/p\u003e\u003cp\u003e🛠 Click the \u003cstrong\u003eSettings\u003c/strong\u003e tab, which will take you to this page:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6uxBjXmnlf1uD7hocTif0p/b3701340069e48b6f8dfe1e151a9d7cb/settings_page.png\" alt=\"The “Application” page’s “Settings” tab.\"/\u003e\u003c/p\u003e\u003cp\u003eYou’re going to do two critical things on this page:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eGet information that your app needs to know about Auth0, and\u003c/li\u003e\u003cli\u003eProvide information that Auth0 needs to know about your app.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eLet’s take care of the first one: Getting the information that your app needs, namely:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe \u003cstrong\u003edomain\u003c/strong\u003e, which is the URL that your app will use to contact Auth0. It uniquely identifies your Auth0 \u003cem\u003etenant\u003c/em\u003e, which is a collection of applications, users, and other information that you have registered with your Auth0 account.\u003c/li\u003e\u003cli\u003eThe \u003cstrong\u003eclient ID\u003c/strong\u003e, which is the identifier that Auth0 assigned to your app. It’s how Auth0 knows which app of yours it’s working with.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 Get this information by copying the contents of the \u003cstrong\u003eDomain\u003c/strong\u003e and \u003cstrong\u003eClient ID\u003c/strong\u003e fields for later reference:  \u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7m7XUrzgnR5A1OZIJdzPkd/b4c421d8f0a2c15d94fd685bea0e3b3e/settings_-_get_info.png\" alt=\"The “Application” page’s “Settings” tab. The reader is directed to copy the values of the “Domain” and “Client ID” text fields, then to scroll down the page.\"/\u003e\u003c/p\u003e\u003cp\u003eYou’ll enter them into your Android Studio project as string resources soon.\u003c/p\u003e\u003cp\u003e🛠 Scroll down to the \u003cstrong\u003eApplications URIs\u003c/strong\u003e section. This is where you provide two pieces of information that Auth0 needs to know about your app, which are:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eA \u003cstrong\u003ecallback URL:\u003c/strong\u003e the URL that Auth0 will redirect to after the user successfully logs in. There can be more than one of these.\u003c/li\u003e\u003cli\u003eA \u003cstrong\u003elogout URL:\u003c/strong\u003e the URL that Auth0 will redirect to after the user logs out. There can be more than one of these.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eAt this point, you’re probably thinking: “Wait a minute — I’m writing an \u003cem\u003eAndroid app\u003c/em\u003e. It doesn’t have \u003cem\u003eweb pages\u003c/em\u003e that you navigate to using URLs, but \u003cem\u003eactivities\u003c/em\u003e that you navigate to using \u003cem\u003eintents\u003c/em\u003e!”\u003c/p\u003e\u003cp\u003eYou’re absolutely right. In the case of native applications, the callback and logout URLs are the same string, and Auth0 sends that string to your app to inform it that a user has logged in or logged out.\u003c/p\u003e\u003cp\u003eThe string that Android native apps use for both the callback URL and the logout URL use this format:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eSCHEME\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eYOUR_DOMAIN\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eandroid\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eYOUR_APP_PACKAGE_NAME\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ecallback\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 To construct the string, do the following:\u003c/p\u003e\u003cul\u003e\u003cli\u003eReplace \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eSCHEME\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e with \u003ccode\u003eapp\u003c/code\u003e. \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eSCHEME\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e is the URL’s protocol, and if you were writing a web app, this value would be \u003ccode\u003ehttp\u003c/code\u003e, or better, \u003ccode\u003ehttps\u003c/code\u003e. Since this is an Android native app, you can pick any string for this value. I like to use \u003ccode\u003eapp\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eReplace \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eYOUR_DOMAIN\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e with the value from the \u003cstrong\u003eDomain\u003c/strong\u003e field that you saw earlier on this page.\u003c/li\u003e\u003cli\u003eReplace \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eYOUR_APP_PACKAGE_NAME\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e with the package name of your Android app. If you’ve been following the example in this article, your app’s package name is \u003ccode\u003ecom\u003cspan\u003e.\u003c/span\u003eexample\u003cspan\u003e.\u003c/span\u003elogin\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 Enter this string into both the \u003cstrong\u003eAllowed Callback URLs\u003c/strong\u003e and \u003cstrong\u003eAllowed Login URLs\u003c/strong\u003e fields. Remember, it’s the same string going into both fields.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2OXT7ElyikvL8JNCO3RzFk/658591a0c5a67dc7e8499bb0ea02b7e5/settings_-_put_info.png\" alt=\"The “Application URIs” section of the page. The reader is directed to enter the callback URL into “Allowed Callback URLs” and “Allowed Logout URLs”.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 You’ve done everything you need to do on this page. Scroll down to the bottom of the page and click the \u003cstrong\u003eSave changes\u003c/strong\u003e button:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3w6HT6fNOjiJPOjA5uduzt/bb290473a3ae601b70d7ce6456ac7fc4/settings_-_save_changes.png\" alt=\"The bottom of the page, which features the “Save Changes” button. An arrow directs the reader to click the button.\"/\u003e\u003c/p\u003e\u003ch3 id=\"Create-a-user-if-your-tenant-doesn-t-have-any\"\u003eCreate a user if your tenant doesn’t have any\u003c/h3\u003e\u003cp\u003eIf your tenant is brand new, it won’t have any user accounts, which means that there won’t be any way to log in to your app. If this is the case, follow these steps to create a user.\u003c/p\u003e\u003cp\u003e🛠 In the menu on the left side of the Auth0 dashboard, click on \u003cstrong\u003eUser Management\u003c/strong\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/13qs824Uauwv78ewd682EO/6898da1b68642b10cb9c31413f358a95/user_management_menu.png\" alt=\"The bottom of the page. An arrow directs the reader to expand the “User Management” menu.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 This will expand the \u003cstrong\u003eUser Management\u003c/strong\u003e menu. Select the \u003cstrong\u003eUsers\u003c/strong\u003e item in that menu:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1tivj870qehY6oIaeDolj1/31b0544fab715b7fbded29fb63802a45/select_users_menu_item.png\" alt=\"The bottom of the page now featuring an expanded “User Management” menu. An arrow directs the reader to expand the “Users” menu item.\"/\u003e\u003c/p\u003e\u003cp\u003eThe \u003cstrong\u003eUsers\u003c/strong\u003e page will appear. It lists all the users registered to your tenant. If there are no users, you’ll see the “You don’t have any users yet” message.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1wCORw3pqSOLt65n48Qr56/7421164d02cfb112350882a4cccb4cca/click_create_user.png\" alt=\"The “Users” page. The page says, “You don’t have any users yet”. An arrow directs the reader to click the “Create User” button.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Click the \u003cstrong\u003eCreate User\u003c/strong\u003e button to create a new user, which will make this dialog box appear:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2s3GfTHNKRgts8lcXQJ0SH/6d6d0ca397684be75030d40bb6b94fb5/create_user_dialog.png\" alt=\"The “Create User” dialog. It has fields for email and password, as well as a drop-down menu displaying “Username-Password-Authentication”.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Enter an email address and password for the user. The only option for the \u003cstrong\u003eConnection\u003c/strong\u003e will be \u003cstrong\u003eUsername-Password-Authentication\u003c/strong\u003e, so leave it as it is. Make a note of that email address and password — you’ll be using them to log in to the app.\u003c/p\u003e\u003cp\u003e🛠 Click the \u003cstrong\u003eCreate\u003c/strong\u003e button to create the user. The user’s \u003cstrong\u003eDetails\u003c/strong\u003e page will appear:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3TbGcAFo4e4N1coNCtHYdV/fa830264079fc661cbc683590729e4b1/user_details_page.png\" alt=\"The user’s “Details” page.\"/\u003e\u003c/p\u003e\u003cp\u003eThat takes care of all the setup you need to do within the Auth0 dashboard. It’s time to build the app!\u003c/p\u003e\u003ch2 id=\"Set-Up-the-App\"\u003eSet Up the App\u003c/h2\u003e\u003ch3 id=\"Install-the-Auth0-SDK\"\u003eInstall the Auth0 SDK\u003c/h3\u003e\u003cp\u003eThe \u003ca href=\"https://github.com/auth0/Auth0.Android\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Android SDK\u003c/a\u003e enables Android apps to use Auth0’s APIs, including the \u003ca href=\"https://auth0.com/docs/api/authentication\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuthentication API\u003c/a\u003e, which you’ll use to implement login and logout in your app.\u003c/p\u003e\u003cp\u003eTo install the SDK, you’ll need to perform two tasks:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eMake changes to the app’s Gradle file to integrate Auth0. While you’re editing that file, you’ll also enable view binding.\u003c/li\u003e\u003cli\u003eGive the app permission to access the internet in the project’s manifest.\u003c/li\u003e\u003c/ol\u003e\u003ch4 id=\"Add-the-Auth0-SDK-as-a-project-dependency\"\u003eAdd the Auth0 SDK as a project dependency\u003c/h4\u003e\u003cp\u003e🛠 Open \u003ccode\u003ebuild\u003cspan\u003e.\u003c/span\u003egradle\u003c/code\u003e for the \u003cem\u003eapp\u003c/em\u003e — it’s the file in the Project Structure menu that has the words \u003cstrong\u003eModule\u003c/strong\u003e and \u003cstrong\u003eapp\u003c/strong\u003e in its name:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5tUS9ilXyP4KIxNqwSJZkg/bcb5c65a4d483149367211f0cbb9f63b/open_the_app_build.gradle_file.png\" alt=\"The project tree in Android Studio. An arrow points to the “build.gradle” file and instructs the reader to open it.\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Add the following line to the \u003ccode\u003edefaultConfig\u003c/code\u003e block of the file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003emanifestPlaceholders \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eauth0Domain\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;@string/com_auth0_domain\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e auth0Scheme\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;@string/com_auth0_scheme\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere’s what the \u003ccode\u003edefaultConfig\u003c/code\u003e block should look like once you’ve added the line: \u003c/p\u003e\u003cpre\u003e\u003ccode\u003edefaultConfig \u003cspan\u003e{\u003c/span\u003e\n    applicationId \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eAPPLICATION_ID_GOES_HERE\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n    minSdk \u003cspan\u003e21\u003c/span\u003e\n    targetSdk \u003cspan\u003e31\u003c/span\u003e\n    versionCode \u003cspan\u003e1\u003c/span\u003e\n    versionName \u003cspan\u003e\u0026#34;1.0\u0026#34;\u003c/span\u003e\n    manifestPlaceholders \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eauth0Domain\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;@string/com_auth0_domain\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e auth0Scheme\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;@string/com_auth0_scheme\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\n    testInstrumentationRunner \u003cspan\u003e\u0026#34;androidx.test.runner.AndroidJUnitRunner\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Add this line to the \u003ccode\u003edependencies\u003c/code\u003e block, after all the other lines that begin with the keyword \u003ccode\u003eimplementation\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eimplementation \u003cspan\u003e\u0026#39;com.auth0.android:auth0:2.0.0\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis line tells Gradle to include version 2.0.0 of Auth0’s Android library in the application.\u003c/p\u003e\u003cp\u003eHere’s what the \u003ccode\u003edependencies\u003c/code\u003e block should look like once you’ve added the line:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edependencies \u003cspan\u003e{\u003c/span\u003e\n    implementation \u003cspan\u003e\u0026#39;androidx.core:core-ktx:1.6.0\u0026#39;\u003c/span\u003e\n    implementation \u003cspan\u003e\u0026#39;androidx.appcompat:appcompat:1.3.1\u0026#39;\u003c/span\u003e\n    implementation \u003cspan\u003e\u0026#39;com.google.android.material:material:1.4.0\u0026#39;\u003c/span\u003e\n    implementation \u003cspan\u003e\u0026#39;androidx.constraintlayout:constraintlayout:2.1.0\u0026#39;\u003c/span\u003e\n    implementation \u003cspan\u003e\u0026#39;com.auth0.android:auth0:2.0.0\u0026#39;\u003c/span\u003e\n    testImplementation \u003cspan\u003e\u0026#39;junit:junit:4.+\u0026#39;\u003c/span\u003e\n    androidTestImplementation \u003cspan\u003e\u0026#39;androidx.test.ext:junit:1.1.3\u0026#39;\u003c/span\u003e\n    androidTestImplementation \u003cspan\u003e\u0026#39;androidx.test.espresso:espresso-core:3.4.0\u0026#39;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Enable-view-binding\"\u003eEnable view binding\u003c/h4\u003e\u003cp\u003eBefore Android Studio 3.6, if you wanted to refer to a view or widget in the user interface, you’d have to \u003ca href=\"https://www.tutorialkart.com/kotlin-android/access-a-view-programmatically-using-findviewbyid/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecreate a new variable for every view or widget using \u003ccode\u003e\u003cspan\u003efindViewById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eSuppose you had an \u003ccode\u003eActivity\u003c/code\u003e whose layout file contains these views:\u003c/p\u003e\u003cul\u003e\u003cli\u003eA \u003ccode\u003eTextView\u003c/code\u003e whose \u003ccode\u003eid\u003c/code\u003e is \u003ccode\u003etextview_instructions\u003c/code\u003e\u003c/li\u003e\u003cli\u003eAn \u003ccode\u003eEditText\u003c/code\u003e whose \u003ccode\u003eid\u003c/code\u003e is \u003ccode\u003eedittext_input\u003c/code\u003e\u003c/li\u003e\u003cli\u003eA \u003ccode\u003eButton\u003c/code\u003e whose \u003ccode\u003eid\u003c/code\u003e is \u003ccode\u003ebutton_submit\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eHere’s how you would create references to those views in code and set their \u003ccode\u003etext\u003c/code\u003e properties:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// A quick example of findViewById() binding\u003c/span\u003e\n\n\u003cspan\u003e// Set this activity’s content to the layout specified\u003c/span\u003e\n\u003cspan\u003e// by activity_main.xml\u003c/span\u003e\n\u003cspan\u003esetContentView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003elayout\u003cspan\u003e.\u003c/span\u003eactivity_main\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e// Get references to the TextView, EditText, and Button:\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e textviewInstructions \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efindViewById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e.\u003c/span\u003e textview_instructions\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e TextView\n\u003cspan\u003eval\u003c/span\u003e edittextInput \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efindViewById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e.\u003c/span\u003e edittext_input\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e EditText\n\u003cspan\u003eval\u003c/span\u003e buttonSubmit \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efindViewById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e.\u003c/span\u003ebutton_submit\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e Button\n\n\u003cspan\u003e// Set the widgets\u0026#39; text\u003c/span\u003e\ntextviewInstructions\u003cspan\u003e.\u003c/span\u003etext \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Here are your instructions.\u0026#34;\u003c/span\u003e\nedittextInput \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Edit this text.\u0026#34;\u003c/span\u003e\nbuttonSubmit \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Tap me!\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAndroid 3.6 introduced \u003ca href=\"https://medium.com/androiddevelopers/use-view-binding-to-replace-findviewbyid-c83942471fc\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cstrong\u003e\u003cem\u003eview binding\u003c/em\u003e\u003c/strong\u003e, which generates a binding object that holds all the views in the activity\u003c/a\u003e. You no longer have to declare a variable for each view or widget because all the views and widgets in the activity are now properties of the binding object.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// A quick example of view binding\u003c/span\u003e\n\n\u003cspan\u003e// Bind this activity to the layout and create a binding object\u003c/span\u003e\n\u003cspan\u003e// that gives us access to all its views\u003c/span\u003e\nbinding \u003cspan\u003e=\u003c/span\u003e ActivityMainBinding\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einflate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003elayoutInflater\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003esetContentView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ebinding\u003cspan\u003e.\u003c/span\u003eroot\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e// Set the widgets\u0026#39; text\u003c/span\u003e\nbinding\u003cspan\u003e.\u003c/span\u003etextviewInstructions\u003cspan\u003e.\u003c/span\u003etext \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Here are your instructions.\u0026#34;\u003c/span\u003e\nbinding\u003cspan\u003e.\u003c/span\u003eedittextInput \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Edit this text.\u0026#34;\u003c/span\u003e\nbinding\u003cspan\u003e.\u003c/span\u003ebuttonSubmit \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Tap me!\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote that the system automatically converts the names of controls in the layout file, which use \u003ccode\u003esnake_case\u003c/code\u003e, into \u003ccode\u003ebinding\u003c/code\u003e property names, which use \u003ccode\u003ecamelCase\u003c/code\u003e. For example, the control whose \u003ccode\u003eid\u003c/code\u003e is \u003ccode\u003ebutton_submit\u003c/code\u003e in the layout file has a corresponding \u003ccode\u003ebinding\u003c/code\u003e property named \u003ccode\u003ebuttonSubmit\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eNow that you’ve been introduced to view binding let’s enable it.\u003c/p\u003e\u003cp\u003e🛠 Add this \u003ccode\u003ebuildFeatures\u003c/code\u003e block to the \u003ccode\u003eandroid\u003c/code\u003e block in the app’s \u003ccode\u003ebuild\u003cspan\u003e.\u003c/span\u003egradle\u003c/code\u003e file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ebuildFeatures \u003cspan\u003e{\u003c/span\u003e\n    viewBinding \u003cspan\u003etrue\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere’s what the \u003ccode\u003eandroid\u003c/code\u003e block should look like once you’ve added the \u003ccode\u003ebuildFeatures\u003c/code\u003e block:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eandroid \u003cspan\u003e{\u003c/span\u003e\n    compileSdk \u003cspan\u003e31\u003c/span\u003e\n\n    defaultConfig \u003cspan\u003e{\u003c/span\u003e\n        applicationId \u003cspan\u003e\u0026#34;com.example.myapplicationx\u0026#34;\u003c/span\u003e\n        minSdk \u003cspan\u003e21\u003c/span\u003e\n        targetSdk \u003cspan\u003e31\u003c/span\u003e\n        versionCode \u003cspan\u003e1\u003c/span\u003e\n        versionName \u003cspan\u003e\u0026#34;1.0\u0026#34;\u003c/span\u003e\n        manifestPlaceholders \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eauth0Domain\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;@string/com_auth0_domain\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e auth0Scheme\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;@string/com_auth0_scheme\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\n        testInstrumentationRunner \u003cspan\u003e\u0026#34;androidx.test.runner.AndroidJUnitRunner\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    buildTypes \u003cspan\u003e{\u003c/span\u003e\n        release \u003cspan\u003e{\u003c/span\u003e\n            minifyEnabled \u003cspan\u003efalse\u003c/span\u003e\n            proguardFiles \u003cspan\u003egetDefaultProguardFile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;proguard-android-optimize.txt\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;proguard-rules.pro\u0026#39;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    compileOptions \u003cspan\u003e{\u003c/span\u003e\n        sourceCompatibility JavaVersion\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eVERSION_1_8\u003c/span\u003e\n        targetCompatibility JavaVersion\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eVERSION_1_8\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    kotlinOptions \u003cspan\u003e{\u003c/span\u003e\n        jvmTarget \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;1.8\u0026#39;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    buildFeatures \u003cspan\u003e{\u003c/span\u003e\n        viewBinding \u003cspan\u003etrue\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Synchronize-the-project-with-the-updated-Gradle-file\"\u003eSynchronize the project with the updated Gradle file\u003c/h4\u003e\u003cp\u003eAfter making these changes to the Gradle file, you’ll need to synchronize the project with the new build configuration you defined. Android Studio will notify you that it detected the changes to the Gradle file and present you with the option to synchronize the project with the updated file.\u003c/p\u003e\u003cp\u003e🛠 Click the \u003cstrong\u003eSync Now\u003c/strong\u003e link that appears in the notification near the top of the Android Studio window:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7MfBWjCw726wDkiyg4PVyO/986c835490dbebb3fb26fd67dd5ac6ec/click_sync_now.png\" alt=\"The code window for the “build.gradle” file. A notification bar at the top of the window says, “Gradle files have changed since last project sync.\"/\u003e\u003c/p\u003e\u003ch4 id=\"Give-the-app-permission-to-access-the-internet\"\u003eGive the app permission to access the internet\u003c/h4\u003e\u003cp\u003e🛠 Open the Android manifest file, \u003ccode\u003eAndroidManifest\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e, located in the \u003ccode\u003eapp\u003cspan\u003e/\u003c/span\u003emanifests\u003c/code\u003e folder, and add the XML element below as a child of the \u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003emanifest\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e element:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003euses\u003cspan\u003e-\u003c/span\u003epermission android\u003cspan\u003e:\u003c/span\u003ename\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;android.permission.INTERNET\u0026#34;\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis line grants your app the permission to perform network operations, which will allow it to contact Auth0 and make use of its Authentication API.\u003c/p\u003e\u003cp\u003eHere’s what \u003ccode\u003eAndroidManifest\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e should look like once you’ve added the XML element:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;!-- AndroidManifest.xml --\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003emanifest\u003c/span\u003e \u003cspan\u003e\u003cspan\u003exmlns:\u003c/span\u003eandroid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttp://schemas.android.com/apk/res/android\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003epackage\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecom.example.login\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003euses-permission\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eandroid.permission.INTERNET\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eapplication\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eallowBackup\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003etrue\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eicon\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@mipmap/ic_launcher\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elabel\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@string/app_name\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eroundIcon\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@mipmap/ic_launcher_round\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003esupportsRtl\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003etrue\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003etheme\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@style/Theme.Login\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eactivity\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e.MainActivity\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eexported\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003etrue\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eintent-filter\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eaction\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eandroid.intent.action.MAIN\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n                \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ecategory\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eandroid.intent.category.LAUNCHER\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eintent-filter\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eactivity\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eapplication\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003emanifest\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Update-the-project-s-string-resource-file\"\u003eUpdate the project’s string resource file\u003c/h3\u003e\u003cp\u003eWe’re going to follow the Android recommended practice and put all the string literals used by the app in \u003ca href=\"https://developer.android.com/guide/topics/resources/string-resource\" target=\"_blank\" rel=\"noreferrer noopener\"\u003estring resource\u003c/a\u003e files.\u003c/p\u003e\u003cp\u003eBy default, new Android projects come with a file located in \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapp\u003cspan\u003e/\u003c/span\u003eres\u003cspan\u003e/\u003c/span\u003evalues\u003cspan\u003e/\u003c/span\u003e\u003c/code\u003e named \u003ccode\u003estrings\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e. While resource files can contain resouces of any type, the convention is to use \u003ccode\u003estrings\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e for strings only. Let’s put the non-sensitive strings into that file.\u003c/p\u003e\u003cp\u003e🛠 Open \u003ccode\u003estrings\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e. It should contain the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;!-- strings.xml --\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eresources\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eapp_name\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e{APP_NAME}\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eresources\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eInstead of \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eAPP_NAME\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e, you’ll see the name that you assigned to your app when you first created the project.\u003c/p\u003e\u003cp\u003e🛠 Replace the contents of \u003ccode\u003estrings\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e with the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;!-- strings.xml --\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eresources\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eapp_name\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e{APP_NAME}\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u0026lt;!--\n    Auth0 identifiers and settings\n    ==============================\n    --\u0026gt;\u003c/span\u003e\n\n    \u003cspan\u003e\u0026lt;!-- Identifiers --\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecom_auth0_scheme\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eapp\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u0026lt;!-- Settings --\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003elogin_scopes\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eopenid profile email read:current_user update:current_user_metadata\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003elogin_audience\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003ehttps://%1$s/api/v2/\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n\n    \u003cspan\u003e\u0026lt;!--\n    Main activity\n    =============\n    --\u0026gt;\u003c/span\u003e\n\n    \u003cspan\u003e\u0026lt;!-- Title --\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003einitial_title\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eWelcome to the app!\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003elogged_in_title\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eYou\\\u0026#39;re logged in.\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003elogged_out_title\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eYou\\\u0026#39;re logged out.\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u0026lt;!-- \u0026#34;Log in\u0026#34; and \u0026#34;Log out\u0026#34; buttons --\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ebutton_login\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eLog in\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ebutton_logout\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eLog out\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u0026lt;!-- User profile --\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003euser_profile\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        Name: %1$s\\n\n        Email: %2$s\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u0026lt;!-- Metadata --\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003etextview_metadata_heading\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eMetadata\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003etextview_metadata_info\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eUse the text box and buttons below to get and set the \\\u0026#39;country\\\u0026#39; field in the user\\\u0026#39;s metadata.\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u0026lt;!-- \u0026#34;Get\u0026#34; and \u0026#34;Set\u0026#34; buttons --\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ebutton_get\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eGet\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ebutton_set\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eSet\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u0026lt;!-- SnackBar messages--\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003elogin_success_message\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eSuccessfully logged in! %1$s\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003elogin_failure_message\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eFailed to log in. %1$s\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003egeneral_failure_with_exception_code\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eFailed - exception code: %1$s\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003egeneral_success_message\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eSuccess!\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eresources\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Make the following replacements in the XML above:\u003c/p\u003e\u003cul\u003e\u003cli\u003eReplace \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eAPP_NAME\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e with the name of your app.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Create-a-separate-string-resource-file-for-Auth0-credentials\"\u003eCreate a separate string resource file for Auth0 credentials\u003c/h3\u003e\u003cp\u003eThere are still two strings that we need to store in a resource file: the Auth0 domain and client ID that the app will use. \u003c/p\u003e\u003cp\u003eUnlike the values you’re storing in \u003ccode\u003estrings\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e, these are values that you want to keep secret and don’t want “leaked”. A common approach to dealing with is issue is to store “secret” values like these in a separate resource file so that you can limit access to them. Let’s create a new string resource file for our “secret” Auth0 values.\u003c/p\u003e\u003cp\u003e🛠 In Android Studio’s \u003cstrong\u003eProject\u003c/strong\u003e pane, right-click on the \u003ccode\u003evalues\u003c/code\u003e folder. In the menu that appears, select \u003cstrong\u003eNew\u003c/strong\u003e, which will cause a sub-menu to appear. Select \u003cstrong\u003eValues Resource File\u003c/strong\u003e from that sub-menu:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6g58ZVxykAAuh7hvHwtqlU/4c6289c47d6275c04df0257ffd2b78d8/creating_a_new_resource_file_1.png\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 The \u003cstrong\u003eNew Resource File\u003c/strong\u003e window will appear. Enter \u003ccode\u003eauth0\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e into the \u003cstrong\u003eFile name:\u003c/strong\u003e field and click the \u003cstrong\u003eOK\u003c/strong\u003e button to create a new resource file with that name:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3bfkNBq7tfwSYbPNTJ6zSR/627c9fd1aec651382fc44bc035555625/creating_a_new_resource_file_2.png\"/\u003e\u003c/p\u003e\u003cp\u003e🛠 Open the newly-created \u003ccode\u003eauth0\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e file and enter the following into it:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;!-- auth0.xml --\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eresources\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u0026lt;!--\n    Secret Auth0 identifiers and settings\n    =====================================\n    These values are required to connect to Auth0 for authorization,\n    which is why we\u0026#39;re storing them in their own string resource file.\n\n    DO NOT CHECK THIS FILE INTO A PUBLIC REPOSITORY!\n    --\u0026gt;\u003c/span\u003e\n\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecom_auth0_domain\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e{DOMAIN}\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecom_auth0_client_id\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e{CLIENT_ID}\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eresources\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🛠 Make the following replacements in the XML above:\u003c/p\u003e\u003cul\u003e\u003cli\u003eReplace \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eDOMAIN\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e with the domain of your app, which you copied from the \u003cstrong\u003eSettings\u003c/strong\u003e page of the Auth0 dashboard.\u003c/li\u003e\u003cli\u003eReplace \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eCLIENT_ID\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e with the client ID of your app, which you copied from the \u003cstrong\u003eSettings\u003c/strong\u003e page of the Auth0 dashboard.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Define-the-app-s-user-interface\"\u003eDefine the app’s user interface\u003c/h3\u003e\u003cp\u003eIt’s time to define the app’s user interface. This is a single-screen app, so everything takes place in the Main Activity file, whose layout is defined in the \u003ccode\u003eactivity_main\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e file located in the \u003ccode\u003eapp\u003cspan\u003e/\u003c/span\u003eres\u003cspan\u003e/\u003c/span\u003elayout\u003c/code\u003e folder.\u003c/p\u003e\u003cp\u003e🛠 Open \u003ccode\u003eactivity_main\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e, switch to the code view and replace the children of the \u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eandroidx\u003cspan\u003e.\u003c/span\u003econstraintlayout\u003cspan\u003e.\u003c/span\u003ewidget\u003cspan\u003e.\u003c/span\u003eConstraintLayout\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e tag with the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;!-- activity_main.xml --\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eandroidx.constraintlayout.widget.ConstraintLayout\u003c/span\u003e \u003cspan\u003e\u003cspan\u003exmlns:\u003c/span\u003eandroid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttp://schemas.android.com/apk/res/android\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003exmlns:\u003c/span\u003eapp\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttp://schemas.android.com/apk/res-auto\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003exmlns:\u003c/span\u003etools\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttp://schemas.android.com/tools\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003etools:\u003c/span\u003econtext\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e.MainActivity\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eScrollView\u003c/span\u003e \u003cspan\u003e\u003cspan\u003exmlns:\u003c/span\u003eandroid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttp://schemas.android.com/apk/res/android\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003efill_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003efill_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003etools:\u003c/span\u003eignore\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eMissingConstraints\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eLinearLayout\u003c/span\u003e \u003cspan\u003e\u003cspan\u003exmlns:\u003c/span\u003eandroid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttp://schemas.android.com/apk/res/android\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eorientation\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003evertical\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003egravity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecenter\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eTextView\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/textview_title\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_marginTop\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e100dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003etext\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@string/initial_title\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003etextSize\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e26sp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintEnd_toEndOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eparent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintStart_toStartOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eparent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintTop_toTopOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eparent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eButton\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/button_login\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e200dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_marginTop\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e36dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003etext\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@string/button_login\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintEnd_toEndOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/textview_title\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintStart_toStartOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/textview_title\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintTop_toBottomOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/textview_title\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eButton\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/button_logout\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e200dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003etext\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@string/button_logout\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eenabled\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003efalse\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintEnd_toEndOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/textview_title\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintStart_toStartOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/textview_title\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintTop_toBottomOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/button_login\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eTextView\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/textview_user_profile\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintEnd_toEndOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eparent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintStart_toStartOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eparent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintTop_toBottomOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@id/button_logout\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_margin\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e18dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eLinearLayout\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/linearlayout_metadata\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003evisibility\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003einvisible\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eorientation\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003evertical\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003egravity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecenter\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_marginTop\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e16dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintEnd_toEndOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eparent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintStart_toStartOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eparent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintTop_toBottomOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@id/textview_user_profile\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n                \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eTextView\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/textview_metadata_heading\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003etextStyle\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ebold\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003etext\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@string/textview_metadata_heading\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n                \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eTextView\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/textview_metadata_info\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e50dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_margin\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e8dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003etextAlignment\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecenter\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003etext\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@string/textview_metadata_info\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003etextSize\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e12sp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n                \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eEditText\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/edittext_country\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003ehint\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eEnter country\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n                \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eLinearLayout\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eorientation\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehorizontal\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003egravity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecenter\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n                    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eButton\u003c/span\u003e\n                        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/button_get\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e100dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003etext\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@string/button_get\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_marginRight\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e8dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n                    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eButton\u003c/span\u003e\n                        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/button_set\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e100dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003etext\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@string/button_set\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_marginLeft\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e8dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n                \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eLinearLayout\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eLinearLayout\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eLinearLayout\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eScrollView\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eandroidx.constraintlayout.widget.ConstraintLayout\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis XML above defines:\u003c/p\u003e\u003cul\u003e\u003cli\u003eA \u003ca href=\"https://developer.android.com/reference/android/widget/ScrollView\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eScrollView\u003c/code\u003e\u003c/a\u003e that encapsulates the entire user interface. It allows the user to scroll up and down when the device screen isn’t tall enough to display the entire activity at once.\u003c/li\u003e\u003cli\u003eA \u003ca href=\"https://developer.android.com/reference/android/widget/LinearLayout\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eLinearLayout\u003c/code\u003e\u003c/a\u003e contained within the \u003ccode\u003eScrollView\u003c/code\u003e. A \u003ccode\u003eScrollView\u003c/code\u003e can contain only one child, so we’re using the \u003ccode\u003eLinearLayout\u003c/code\u003e to encapsulate all the views in the \u003ccode\u003eScrollView\u003c/code\u003e.\u003c/li\u003e\u003cli\u003e\u003ccode\u003etextview_title\u003c/code\u003e: A \u003ca href=\"https://developer.android.com/reference/android/widget/TextView\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003c/a\u003e that displays a greeting message when the app launches and the user’s logged-in/out status afterward.\u003c/li\u003e\u003cli\u003e\u003ccode\u003ebutton_login\u003c/code\u003e and \u003ccode\u003ebutton_logout\u003c/code\u003e: The \u003ca href=\"https://developer.android.com/reference/android/widget/Button\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eButton\u003c/code\u003e\u003c/a\u003es that the user taps to log in and out.\u003c/li\u003e\u003cli\u003e\u003ccode\u003etextview_user_profile\u003c/code\u003e: A \u003ccode\u003eTextView\u003c/code\u003e that displays the name and email of the logged-in user.\u003c/li\u003e\u003cli\u003e\u003ccode\u003elayout_metadata\u003c/code\u003e: A \u003ccode\u003eLinearLayout\u003c/code\u003e that encapsulates all the metadata-related controls.\u003c/li\u003e\u003cli\u003e\u003ccode\u003etextview_metadata_heading\u003c/code\u003e: A \u003ccode\u003eTextView\u003c/code\u003e that displays the heading of the metadata section.\u003c/li\u003e\u003cli\u003e\u003ccode\u003etextview_metadata_country\u003c/code\u003e: A \u003ccode\u003eTextView\u003c/code\u003e that instructions for editing the user’s country.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eedittext_country\u003c/code\u003e: An \u003ca href=\"https://developer.android.com/reference/android/widget/EditText\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003c/a\u003e for displaying and editing the user’s country.\u003c/li\u003e\u003cli\u003e\u003ccode\u003ebutton_get\u003c/code\u003e and \u003ccode\u003ebutton_set\u003c/code\u003e: The \u003ccode\u003eButton\u003c/code\u003es to get and set the user’s country.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eHere’s the “blueprint view” of the resulting layout. I’ve labeled the controls in the layout with their \u003ccode\u003eid\u003c/code\u003es:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4DF79VdhoNlyAKOKkmQOsa/f280540a8f0d8484ab55a08ac83c3c5a/app_layout.png\" alt=\"“Blueprint view” of the app’s main activity layout showing the ids of its controls.\"/\u003e\u003c/p\u003e\u003cp\u003eAt this point in the exercise, you’ve completed all the setup. You’ve registered the app with Auth0 and set up the app’s build files and user interface. In the next step, you’ll write the app’s code!\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-2\" target=\"_blank\" rel=\"noopener referrer\"\u003eNext Step: Read the second part here\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://community.auth0.com/t/developing-a-secure-api-with-nestjs/33026\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eI ran into an issue\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn how to implement login, logout, and user profiles in Android apps using Kotlin and Auth0.",
      "date_published": "2021-09-20T18:29:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-2/",
      "title": "Get Started with Android Authentication Using Kotlin: Part 2",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIn the previous section, you started an Android project that uses Auth0 for user login, logout, and reading and updating user metadata. You set up the project on both the Auth0 and app sides. In this section, you’ll complete the project and update it to ensure that it works in both portrait and landscape orientations.\u003c/p\u003e\u003ch2 id=\"Write-the-code\"\u003eWrite the code\u003c/h2\u003e\u003cp\u003eEverything you’ve done so far in this exercise is just a preamble. It’s now time to write the actual code! This is the biggest task in the exercise, so let’s do it in small steps.​\u003c/p\u003e\u003cp\u003e🛠 Move to the \u003ccode\u003eapp\u003cspan\u003e/\u003c/span\u003ejava\u003cspan\u003e/\u003c/span\u003ecom\u003cspan\u003e.\u003c/span\u003eexample\u003cspan\u003e.\u003c/span\u003elogin\u003c/code\u003e folder and open the main activity’s file, \u003ccode\u003eMainActivity\u003cspan\u003e.\u003c/span\u003ekt\u003c/code\u003e. Its contents should look like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epackage\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eexample\u003cspan\u003e.\u003c/span\u003emyapplication\n\n\u003cspan\u003eimport\u003c/span\u003e androidx\u003cspan\u003e.\u003c/span\u003eappcompat\u003cspan\u003e.\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003eAppCompatActivity\n\u003cspan\u003eimport\u003c/span\u003e android\u003cspan\u003e.\u003c/span\u003eos\u003cspan\u003e.\u003c/span\u003eBundle\n\n\u003cspan\u003eclass\u003c/span\u003e MainActivity \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAppCompatActivity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esavedInstanceState\u003cspan\u003e:\u003c/span\u003e Bundle\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esavedInstanceState\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003esetContentView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003elayout\u003cspan\u003e.\u003c/span\u003eactivity_main\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Import-the-necessary-libraries\"\u003eImport the necessary libraries\u003c/h3\u003e\u003cp\u003e🛠 Add the following \u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e\u003c/code\u003e statements to the ones already in the file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e androidx\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003eview\u003cspan\u003e.\u003c/span\u003eisVisible\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003eAuth0\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003eauthentication\u003cspan\u003e.\u003c/span\u003eAuthenticationAPIClient\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003eauthentication\u003cspan\u003e.\u003c/span\u003eAuthenticationException\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003ecallback\u003cspan\u003e.\u003c/span\u003eCallback\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003emanagement\u003cspan\u003e.\u003c/span\u003eManagementException\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003emanagement\u003cspan\u003e.\u003c/span\u003eUsersAPIClient\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003eprovider\u003cspan\u003e.\u003c/span\u003eWebAuthProvider\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003eresult\u003cspan\u003e.\u003c/span\u003eCredentials\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003eresult\u003cspan\u003e.\u003c/span\u003eUserProfile\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003egoogle\u003cspan\u003e.\u003c/span\u003eandroid\u003cspan\u003e.\u003c/span\u003ematerial\u003cspan\u003e.\u003c/span\u003esnackbar\u003cspan\u003e.\u003c/span\u003eSnackbar\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eMost of these \u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e\u003c/code\u003e statements import classes from Auth0’s libraries. Here’s what those classes do:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eAuthenticationAPIClient\u003c/code\u003e: Accesses the Auth0 Authentication API. The app uses this to retrieve the user’s profile information.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eAuthenticationException\u003c/code\u003e: Defines errors and exceptions that may arise during authentication.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eCallback\u003c/code\u003e: Defines an object containing “success” and “failure” callback functions that Auth0 should call after completing an API function.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eManagementException\u003c/code\u003e: Defines errors and exceptions that \u003ccode\u003eCallback\u003c/code\u003e objects may have to handle.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eUsersAPIClient\u003c/code\u003e: Manages user information. The app uses this to retrieve the user’s profile information.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eWebAuthProvider\u003c/code\u003e: Provides Auth0’s web page-based login to the app. The app uses this to log the user in via a login page in a web browser and log the user out.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eCredentials\u003c/code\u003e: Stores the user’s credentials, including ID, access, and refresh tokens.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eUserProfile\u003c/code\u003e: Stores the user’s profile information, including their user ID, names, email address, and metadata.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🛠 You’ll also need to import the \u003ccode\u003eActivity\u003c/code\u003e ’s auto-generated view binding library, which will make it possible for your code to reference views in the layout (or, to put it more simply: access the onscreen widgets). Do this by adding the following \u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e\u003c/code\u003e statement, replacing \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eYOUR_PACKAGE_NAME_HERE\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e with the name of your app’s package, which you’ll find on the first line of the file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003eYOUR_PACKAGE_NAME_HERE\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edatabinding\u003cspan\u003e.\u003c/span\u003eActivityMainBinding\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe package name for my app is \u003ccode\u003ecom\u003cspan\u003e.\u003c/span\u003eexample\u003cspan\u003e.\u003c/span\u003elogin\u003c/code\u003e, so my \u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e\u003c/code\u003e statement looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eexample\u003cspan\u003e.\u003c/span\u003elogin\u003cspan\u003e.\u003c/span\u003edatabinding\u003cspan\u003e.\u003c/span\u003eActivityMainBinding\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Add-class-properties\"\u003eAdd class properties\u003c/h3\u003e\u003cp\u003e🛠 Add the following properties to \u003ccode\u003eMainActivity\u003c/code\u003e so that the start of the class looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e MainActivity \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAppCompatActivity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003elateinit\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e binding\u003cspan\u003e:\u003c/span\u003e ActivityMainBinding\n\n    \u003cspan\u003e// Login/logout-related properties\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003elateinit\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e account\u003cspan\u003e:\u003c/span\u003e Auth0\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e cachedCredentials\u003cspan\u003e:\u003c/span\u003e Credentials\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e cachedUserProfile\u003cspan\u003e:\u003c/span\u003e UserProfile\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n\n\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esavedInstanceState\u003cspan\u003e:\u003c/span\u003e Bundle\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \n    \u003cspan\u003e..\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou’ll use the first property, \u003ccode\u003ebinding\u003c/code\u003e, to access the widgets on the screen. The other three properties are related to logging in and out and are described in more detail below:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eaccount\u003c/code\u003e: represents the app’s Auth0 account and is instantiated using the app’s client ID and the domain for the app’s Auth0 tenant. Let me make this clear: this isn’t the account of the user trying to log in, but the account of the developer or organization who is delegating the login/logout process to Auth0. In the case of this example, it’s \u003cem\u003eyour\u003c/em\u003e Auth0 developer account. \u003ccode\u003eaccount\u003c/code\u003e’s value is set in \u003ccode\u003e\u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e when the activity is instantiated.\u003c/li\u003e\u003cli\u003e\u003ccode\u003ecachedCredentials\u003c/code\u003e: contains the user’s credentials that are returned from Auth0 after a successful login. Its value should be \u003ccode\u003e\u003cspan\u003enull\u003c/span\u003e\u003c/code\u003e when the user is \u003cem\u003enot\u003c/em\u003e logged in. When the user is logged in, it should reference an instance of \u003ccode\u003eCredentials\u003c/code\u003e. A \u003ccode\u003eCredentials\u003c/code\u003e instance has the following properties:\n  \u003cul\u003e\u003cli\u003e\u003ccode\u003eidToken\u003c/code\u003e: The \u003ca href=\"https://auth0.com/docs/tokens/id-tokens\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eID token\u003c/a\u003e, which contains user information that the app can use to customize the user’s experience.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eaccessToken\u003c/code\u003e: The \u003ca href=\"https://auth0.com/docs/tokens/access-tokens\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eaccess token\u003c/a\u003e, which is a credential that allows the app to access the Auth0 API.\u003c/li\u003e\u003cli\u003e\u003ccode\u003erefreshToken\u003c/code\u003e: The \u003ca href=\"https://auth0.com/docs/tokens/refresh-tokens\" target=\"_blank\" rel=\"noreferrer noopener\"\u003erefresh token\u003c/a\u003e, which can be used to request a new access token when the original access token expires, without requiring the user to re-authenticate.\u003c/li\u003e\u003cli\u003e\u003ccode\u003etype\u003c/code\u003e: The type of the received access token.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eexpiresAt\u003c/code\u003e: The date/time when the received access token expires.\u003c/li\u003e\u003cli\u003e\u003ccode\u003escope\u003c/code\u003e: The scopes granted to the access token. I’ll explain what scopes are in the next section, \u003cem\u003eThe login method\u003c/em\u003e.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003ecachedUserProfile\u003c/code\u003e: holds the user’s profile information. Its value should be \u003ccode\u003e\u003cspan\u003enull\u003c/span\u003e\u003c/code\u003e when the user is \u003cem\u003enot\u003c/em\u003e logged in. When the user is logged in, it should reference an instance of \u003ccode\u003eUserProfile\u003c/code\u003e. A \u003ccode\u003eUserProfile\u003c/code\u003e instance has the following properties:\n\u003cul\u003e\u003cli\u003e\u003ccode\u003eemail\u003c/code\u003e: The email address corresponding to the user account.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eisEmailVerified\u003c/code\u003e: \u003ccode\u003e\u003cspan\u003etrue\u003c/span\u003e\u003c/code\u003e if the user responded to the verification email sent by Auth0 after they registered themselves as a user.\u003c/li\u003e\u003cli\u003e\u003ccode\u003ename\u003c/code\u003e: The user’s full name.\u003c/li\u003e\u003cli\u003e\u003ccode\u003egivenName\u003c/code\u003e: The user’s given name, often referred to as their “first name” or “forename”.\u003c/li\u003e\u003cli\u003e\u003ccode\u003efamilyName\u003c/code\u003e: The user’s family name, often referred to as their “last name” or “surname”.\u003c/li\u003e\u003cli\u003e\u003ccode\u003enickname\u003c/code\u003e: The user’s nickname, sometimes referred to as thier “familiar name” or “moniker”.\u003c/li\u003e\u003cli\u003e\u003ccode\u003ePictureURL\u003c/code\u003e: The URL where the user’s picture can be retrieved.\u003c/li\u003e\u003cli\u003e\u003ccode\u003ecreatedAt\u003c/code\u003e: The creation date and time of the user’s account.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Update-the--onCreate----method\"\u003eUpdate the \u003ccode\u003e\u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method\u003c/h3\u003e\u003cp\u003eFirst, let’s fill out the \u003ccode\u003e\u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method that was automatically generated for the project and use it to initialize everything in the activity.\u003c/p\u003e\u003cp\u003e🛠 Update the \u003ccode\u003e\u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method so that it looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esavedInstanceState\u003cspan\u003e:\u003c/span\u003e Bundle\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esavedInstanceState\u003cspan\u003e)\u003c/span\u003e\n\n    account \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAuth0\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003ecom_auth0_client_id\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003ecom_auth0_domain\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\n\n    binding \u003cspan\u003e=\u003c/span\u003e ActivityMainBinding\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einflate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003elayoutInflater\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003esetContentView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ebinding\u003cspan\u003e.\u003c/span\u003eroot\u003cspan\u003e)\u003c/span\u003e\n\n    binding\u003cspan\u003e.\u003c/span\u003ebuttonLogin\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetOnClickListener\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    binding\u003cspan\u003e.\u003c/span\u003ebuttonLogout\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetOnClickListener\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    binding\u003cspan\u003e.\u003c/span\u003ebuttonGet\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetOnClickListener\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    binding\u003cspan\u003e.\u003c/span\u003ebuttonSet\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetOnClickListener\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003esetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis method:\u003c/p\u003e\u003cul\u003e\u003cli\u003eDefines the account object, which contains the necessary credentials to connect to your Auth0 account.\u003c/li\u003e\u003cli\u003eCreates a view binding object, which you’ll use to access the onscreen widgets.\u003c/li\u003e\u003cli\u003eConnects the \u003cstrong\u003eLog in\u003c/strong\u003e, \u003cstrong\u003eLog out\u003c/strong\u003e, \u003cstrong\u003eGet\u003c/strong\u003e, and \u003cstrong\u003eSet\u003c/strong\u003e buttons to the methods they should call when tapped.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Add-the--login----method\"\u003eAdd the \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method\u003c/h3\u003e\u003cp\u003eThe next step is to implement the method that gets called when the user taps the \u003cstrong\u003eLog In\u003c/strong\u003e button.\u003c/p\u003e\u003cp\u003e🛠 Add this to the class after \u003ccode\u003e\u003cspan\u003eonCreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    WebAuthProvider\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eaccount\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithScheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003ecom_auth0_scheme\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithScope\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003elogin_scopes\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithAudience\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003elogin_audience\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003ecom_auth0_domain\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e Callback\u003cspan\u003e\u0026lt;\u003c/span\u003eCredentials\u003cspan\u003e,\u003c/span\u003e AuthenticationException\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eexception\u003cspan\u003e:\u003c/span\u003e AuthenticationException\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003elogin_failure_message\u003cspan\u003e,\u003c/span\u003e exception\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecredentials\u003cspan\u003e:\u003c/span\u003e Credentials\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                cachedCredentials \u003cspan\u003e=\u003c/span\u003e credentials\n                \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003elogin_success_message\u003cspan\u003e,\u003c/span\u003e credentials\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003eshowUserProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e uses the Auth0 SDK’s \u003ccode\u003eWebAuthProvider\u003c/code\u003e class, which gives the app the ability to use Auth0’s authentication service. The \u003ccode\u003eWebAuthProvider\u003c/code\u003e methods that you’ll use most often are its \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e methods.\u003c/p\u003e\u003cp\u003eAlthough this method is formatted to span several lines, it’s just a single line of code. The single line is made of a call to a chain of \u003ccode\u003eWebAuthProvider\u003c/code\u003e ’s methods starting with \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e. If you ignore all the comments and parameters, the method chain looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eWebAuthProvider\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithScheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithScope\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithAudience\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is the \u003ca href=\"https://www.baeldung.com/kotlin/builder-pattern\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eBuilder design pattern\u003c/a\u003e in action. From \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e to \u003ccode\u003e\u003cspan\u003ewithAudience\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, each method in the chain takes an argument that provides additional information about the login, using that information to creates a \u003ccode\u003eWebAuthProvider\u003c/code\u003e object that it passes to the next method in the chain. The final method in the chain, \u003ccode\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, takes the resulting \u003ccode\u003eWebAuthProvider\u003c/code\u003e object as its argument and uses it to display the login page and define what should happen when the login succeeds and when it fails.\u003c/p\u003e\u003cp\u003eLet’s take a look at what each of the methods in the chain does.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e initiates the login process and specifies the Auth0 account used by the application.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003ewithScheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e specifies the scheme to use for the URL that Auth0 redirects to after a successful login. For web apps, the scheme is \u003ccode\u003ehttp\u003c/code\u003e or \u003ccode\u003ehttps\u003c/code\u003e. This value is arbitrary for native mobile apps, so we use \u003ccode\u003eapp\u003c/code\u003e to make it clear to other developers and other people who may use the Auth0 settings for this app that the redirect is \u003cem\u003enot\u003c/em\u003e to a web page.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003ewithScope\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e specifies which sets of user data the app is authorized to use if the user logs in successfully. The OpenID Connect and OAuth frameworks, on which Auth0’s authentication and authorization are based, use the term \u003ca href=\"https://auth0.com/docs/scopes/openid-connect-scopes\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cem\u003escope\u003c/em\u003e\u003c/a\u003e to represent the authorization to access user’s data and resources. The method takes a space-delimited string as its argument, where each “word” in the string specifies a different scope. The string used in this app contains these scopes:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eopenid\u003c/code\u003e: Indicates that application that uses OpenID Connect for authentication. This is the only required scope; all other scopes are optional.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eprofile\u003c/code\u003e: Authorizes the application to access basic user profile information, including first name, surname, nickname, their photo or avatar, and so on.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eemail\u003c/code\u003e: Authorizes the application to access the user’s email address.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003ecurrent_user\u003c/code\u003e: Authorizes the application with read-only access to the \u003ccode\u003ecurrent_user\u003c/code\u003e claim.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eupdate\u003cspan\u003e:\u003c/span\u003ecurrent_user_metadata\u003c/code\u003e: Authorizes the application with read and write  access to the \u003ccode\u003ecurrent_user_metadata\u003c/code\u003e claim. This scope allows us to get and set the \u003ccode\u003ecountry\u003c/code\u003e value in the user’s metadata.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003ewithAudience\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e specifies the URL that the app will use to connect to Auth0’s login service. This URL is constructed using the domain of the Auth0 tenant used by the app and the endpoint for the Auth0 authentication API.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e takes the \u003ccode\u003eWebAuthProvider\u003c/code\u003e object constructed by all the previous methods in the chain and opens the browser window to display the login page. It takes two parameters: a context (a reference to the \u003ccode\u003eActivity\u003c/code\u003e that’s initiating the browser window) and an anonymous object with two callback methods:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e: Defines what should happen if the user returns from the browser login screen without successfully logging in. This typically happens when the user closes the browser login screen or taps the “back” button while on that screen. The app displays a \u003ccode\u003eSnackBar\u003c/code\u003e that notifies the user that login failed, followed by an error code.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e: Defines what should happen if the user returns from the browser login screen after successfully logging in. The app processes the successful response, displays a \u003ccode\u003eSnackBar\u003c/code\u003e notifying the user that login was successful, and updates the UI to its “logged in” state.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Add-the--logout----method\"\u003eAdd the \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method\u003c/h3\u003e\u003cp\u003eYou’ve probably guessed that if there’s a \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method that’s called when the user presses the \u003cstrong\u003eLog In\u003c/strong\u003e button, there must also be a \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method that’s called when the user presses the \u003cstrong\u003eLog Out\u003c/strong\u003e button.\u003c/p\u003e\u003cp\u003e🛠 Add this method to the class after \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    WebAuthProvider\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eaccount\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithScheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003ecom_auth0_scheme\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e Callback\u003cspan\u003e\u0026lt;\u003c/span\u003eVoid\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e AuthenticationException\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eexception\u003cspan\u003e:\u003c/span\u003e AuthenticationException\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003egeneral_failure_with_exception_code\u003cspan\u003e,\u003c/span\u003e\n                    exception\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003epayload\u003cspan\u003e:\u003c/span\u003e Void\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                cachedCredentials \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n                cachedUserProfile \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n                \u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs with \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e also uses the Auth0 SDK’s \u003ccode\u003eWebAuthProvider\u003c/code\u003e class and is a one-liner that uses the Builder pattern. This time, that one line calls a shorter chain of \u003ccode\u003eWebAuthProvider\u003c/code\u003e ’s methods starting with \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e. If you ignore all the parameters, the method chain looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eWebAuthProvider\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithScheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e initiates the logout process and specifies the Auth0 account used by the application, which should be the same account as the one used to log in.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003ewithScheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e specifies the scheme to use for the URL that Auth0 redirects to after successful logout. This should be the same scheme as the one used to log in.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e takes the \u003ccode\u003eWebAuthProvider\u003c/code\u003e object constructed by all the previous methods in the chain to log the user out. It takes two parameters: a context (a reference to the \u003ccode\u003eActivity\u003c/code\u003e that’s initiating the logout process) and an anonymous object with two callback methods:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e: Defines what should happen when the logout process fails. This rarely happens and usually indicates a network or server issue. In this example, the app updates the UI (which remains in the “logged in” state) and displays a \u003ccode\u003eSnackBar\u003c/code\u003e that notifies the user that logout failed, followed by an error code.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e: Defines what should happen when the logout process succeeds. In this example, the app destroys its local copies of the user’s credentials and profile and updates the UI to its “logged out” state.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Add-the--showUserProfile----method\"\u003eAdd the \u003ccode\u003e\u003cspan\u003eshowUserProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method\u003c/h3\u003e\u003cp\u003eEvery Auth0 user has a \u003cem\u003euser profile\u003c/em\u003e associated with their account. The user profile contains the following basic information about the user:\u003c/p\u003e\u003cul\u003e\u003cli\u003eNames: The user’s full name, given name, surname, and nickname\u003c/li\u003e\u003cli\u003eEmail info: The user’s email address, and whether it was verified\u003c/li\u003e\u003cli\u003ePicture: The location of an image that identifies the user\u003c/li\u003e\u003cli\u003eCreation date: The date and time when the user’s account was created\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWhen the user successfully logs in, the app should display their name and email onscreen. It does so by calling \u003ccode\u003e\u003cspan\u003eshowUserProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e immediately after a successful login.\u003c/p\u003e\u003cp\u003e🛠 Add this method to the class after \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eshowUserProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Guard against showing the profile when no user is logged in\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ecachedCredentials \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eval\u003c/span\u003e client \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAuthenticationAPIClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eaccount\u003cspan\u003e)\u003c/span\u003e\n    client\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euserInfo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecachedCredentials\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e Callback\u003cspan\u003e\u0026lt;\u003c/span\u003eUserProfile\u003cspan\u003e,\u003c/span\u003e AuthenticationException\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eexception\u003cspan\u003e:\u003c/span\u003e AuthenticationException\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003egeneral_failure_with_exception_code\u003cspan\u003e,\u003c/span\u003e\n                    exception\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eprofile\u003cspan\u003e:\u003c/span\u003e UserProfile\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                cachedUserProfile \u003cspan\u003e=\u003c/span\u003e profile\n                \u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis method is the final task performed by the \u003ccode\u003e\u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e callback method in  \u003ccode\u003e\u003cspan\u003eloginWithBrowser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e. It initializes the \u003ccode\u003ecachedUserProfile\u003c/code\u003e property, which contains the user’s profile information.\u003c/p\u003e\u003cp\u003eAs a precaution, it returns immediately if the \u003ccode\u003ecachedCredentials\u003c/code\u003e property is \u003ccode\u003e\u003cspan\u003enull\u003c/span\u003e\u003c/code\u003e, which implies that no user is logged in, and therefore there isn’t any user profile to show.\u003c/p\u003e\u003cp\u003eIn order to get this information, it does the following:\u003c/p\u003e\u003cul\u003e\u003cli\u003eIt creates an instance of \u003ccode\u003eAuthenticationAPIClient\u003c/code\u003e, which retrieves Auth0 account information. Like the login and logout methods, this also uses the Builder pattern.\u003c/li\u003e\u003cli\u003eIt uses \u003ccode\u003eAuthenticationAPIClient\u003c/code\u003e ’s \u003ccode\u003e\u003cspan\u003euserInfo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to specify that we want to retrieve user profile information from Auth0. This method requires a valid access token, which it extracts from the \u003ccode\u003ecachedCredentials\u003c/code\u003e property.\u003c/li\u003e\u003cli\u003eFinally, it defines callback methods for the cases where it failed and succeeded in retrieving the user profile information from Auth0. If the retrieval was successful, the profile information is stored in \u003ccode\u003ecachedUserProfile\u003c/code\u003e, and the UI is updated to display the user’s name and email address.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Add-the--getUserMetadata----and--setUserMetadata----methods\"\u003eAdd the \u003ccode\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003esetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e methods\u003c/h3\u003e\u003cp\u003eThe user profile contains information that generally applies to \u003cem\u003eevery\u003c/em\u003e user account regardless of the type of application it’s being used for — name, email, photo, and date/time created. While this is necessary information, it’s probably not \u003cem\u003eall\u003c/em\u003e the user information that you want to store in their profile.\u003c/p\u003e\u003cp\u003eThat what the \u003cem\u003euser metadata\u003c/em\u003e is for. Think of it as a key-value store where you can place additional user information that isn’t covered by the user profile. In this app, the user metadata will store just one additional piece of user information — their country — and it will allow the user to retrieve and update this information.\u003c/p\u003e\u003cp\u003e🛠 Add the following to the class after \u003ccode\u003e\u003cspan\u003eshowUserProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Guard against getting the metadata when no user is logged in\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ecachedCredentials \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eval\u003c/span\u003e usersClient \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eUsersAPIClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eaccount\u003cspan\u003e,\u003c/span\u003e cachedCredentials\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    usersClient\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecachedUserProfile\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e Callback\u003cspan\u003e\u0026lt;\u003c/span\u003eUserProfile\u003cspan\u003e,\u003c/span\u003e ManagementException\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eexception\u003cspan\u003e:\u003c/span\u003e ManagementException\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003egeneral_failure_with_exception_code\u003cspan\u003e,\u003c/span\u003e\n                    exception\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003euserProfile\u003cspan\u003e:\u003c/span\u003e UserProfile\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                cachedUserProfile \u003cspan\u003e=\u003c/span\u003e userProfile\n                \u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n                \u003cspan\u003eval\u003c/span\u003e country \u003cspan\u003e=\u003c/span\u003e userProfile\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;country\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e String\u003cspan\u003e?\u003c/span\u003e\n                binding\u003cspan\u003e.\u003c/span\u003eedittextCountry\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecountry\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003esetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Guard against getting the metadata when no user is logged in\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ecachedCredentials \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eval\u003c/span\u003e usersClient \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eUsersAPIClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eaccount\u003cspan\u003e,\u003c/span\u003e cachedCredentials\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eaccessToken\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e metadata \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003emapOf\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;country\u0026#34;\u003c/span\u003e \u003cspan\u003eto\u003c/span\u003e binding\u003cspan\u003e.\u003c/span\u003eedittextCountry\u003cspan\u003e.\u003c/span\u003etext\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    usersClient\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eupdateMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecachedUserProfile\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e metadata\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e Callback\u003cspan\u003e\u0026lt;\u003c/span\u003eUserProfile\u003cspan\u003e,\u003c/span\u003e ManagementException\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eexception\u003cspan\u003e:\u003c/span\u003e ManagementException\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003egeneral_failure_with_exception_code\u003cspan\u003e,\u003c/span\u003e\n                    exception\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eprofile\u003cspan\u003e:\u003c/span\u003e UserProfile\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                cachedUserProfile \u003cspan\u003e=\u003c/span\u003e profile\n                \u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n                \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003egeneral_success_message\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhile \u003ccode\u003e\u003cspan\u003eshowUserProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e uses an instance of \u003ccode\u003eAuthenticationAPIClient\u003c/code\u003e to get the user profile information, \u003ccode\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003esetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e use a different object type: \u003ccode\u003eUsersAPIClient\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eUnlike \u003ccode\u003eAuthenticationAPIClient\u003c/code\u003e, which needs only an \u003ccode\u003eAuth0\u003c/code\u003e account object to be instantiated, you need both an \u003ccode\u003eAuth0\u003c/code\u003e account object and an access token to instantiate a \u003ccode\u003eUsersAPIClient\u003c/code\u003e object.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e specifies the user profile using \u003ccode\u003eUsersAPIClient\u003c/code\u003e ’s \u003ccode\u003e\u003cspan\u003egetProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method and the ID of the user, followed by the \u003ccode\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to attempt to get the user profile and define callback methods for failure and success.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e’s \u003ccode\u003e\u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e callback is almost the same as \u003ccode\u003e\u003cspan\u003eshowUserProfile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e’s — it just has these two additional lines that extract the \u003ccode\u003ecountry\u003c/code\u003e value from the user’s metadata and display it onscreen:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eval\u003c/span\u003e country \u003cspan\u003e=\u003c/span\u003e userProfile\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;country\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e String\u003cspan\u003e?\u003c/span\u003e\nbinding\u003cspan\u003e.\u003c/span\u003eedittextCountry\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecountry\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003esetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e defines a \u003ccode\u003eMap\u003c/code\u003e with a single key-value pair, where the key is the string \u003ccode\u003ecountry\u003c/code\u003e and the corresponding value is the contents of the \u003ccode\u003eEditText\u003c/code\u003e where the user enters the name of their country. It then passes that \u003ccode\u003eMap\u003c/code\u003e along with the user’s ID to \u003ccode\u003eUsersAPIClient\u003c/code\u003e ’s \u003ccode\u003e\u003cspan\u003eupdateMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to specify the change to be made, followed by the \u003ccode\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method to initiate the update and define callback methods for failure and success.\u003c/p\u003e\u003cp\u003e\u003ccode\u003e\u003cspan\u003esetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e’s \u003ccode\u003e\u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e callback is almost the same as \u003ccode\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e’s — but instead of updating the \u003ccode\u003eEditText\u003c/code\u003e where the user enters the name of their country, it simply displays a \u003ccode\u003eSnackBar\u003c/code\u003e notifying the user that it was successful in updating the metadata.\u003c/p\u003e\u003ch3 id=\"Add-the-UI-methods\"\u003eAdd the UI methods\u003c/h3\u003e\u003cp\u003eThe final step is to add the methods that present information to the user.\u003c/p\u003e\u003cp\u003e🛠 Add the following to the class after \u003ccode\u003e\u003cspan\u003egetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003esetUserMetadata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e isLoggedIn \u003cspan\u003e=\u003c/span\u003e cachedCredentials \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n\n    binding\u003cspan\u003e.\u003c/span\u003etextviewTitle\u003cspan\u003e.\u003c/span\u003etext \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eisLoggedIn\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003elogged_in_title\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003elogged_out_title\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    binding\u003cspan\u003e.\u003c/span\u003ebuttonLogin\u003cspan\u003e.\u003c/span\u003eisEnabled \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003eisLoggedIn\n    binding\u003cspan\u003e.\u003c/span\u003ebuttonLogout\u003cspan\u003e.\u003c/span\u003eisEnabled \u003cspan\u003e=\u003c/span\u003e isLoggedIn\n    binding\u003cspan\u003e.\u003c/span\u003elinearlayoutMetadata\u003cspan\u003e.\u003c/span\u003eisVisible \u003cspan\u003e=\u003c/span\u003e isLoggedIn\n\n    binding\u003cspan\u003e.\u003c/span\u003etextviewUserProfile\u003cspan\u003e.\u003c/span\u003eisVisible \u003cspan\u003e=\u003c/span\u003e isLoggedIn\n\n    \u003cspan\u003eval\u003c/span\u003e userName \u003cspan\u003e=\u003c/span\u003e cachedUserProfile\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename \u003cspan\u003e?:\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e userEmail \u003cspan\u003e=\u003c/span\u003e cachedUserProfile\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eemail \u003cspan\u003e?:\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n    binding\u003cspan\u003e.\u003c/span\u003etextviewUserProfile\u003cspan\u003e.\u003c/span\u003etext \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003egetString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003euser_profile\u003cspan\u003e,\u003c/span\u003e userName\u003cspan\u003e,\u003c/span\u003e userEmail\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003eisLoggedIn\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        binding\u003cspan\u003e.\u003c/span\u003eedittextCountry\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eshowSnackBar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etext\u003cspan\u003e:\u003c/span\u003e String\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    Snackbar\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emake\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        binding\u003cspan\u003e.\u003c/span\u003eroot\u003cspan\u003e,\u003c/span\u003e\n        text\u003cspan\u003e,\u003c/span\u003e\n        Snackbar\u003cspan\u003e.\u003c/span\u003eLENGTH_LONG\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you’ve made it this far, I have great news for you: you’ve written all the code for the app!\u003c/p\u003e\u003ch2 id=\"See-the-App-in-Action\"\u003eSee the App in Action\u003c/h2\u003e\u003cp\u003eRun the app. You’ll see this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7FSXqzXczgaNUC5NnY9q1F/d72b55833d1bf446c70d60488f7f4ae0/welcome_screen.png\" alt=\"The app’s screen when launched.\"/\u003e\u003c/p\u003e\u003cp\u003eTap the \u003cstrong\u003eLog in\u003c/strong\u003e button. The app will open a browser window that will display the login web page:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/53TEQjPR0HhmvGIC8BXW7a/e7b6205b7c401883c61b162c498a00f7/universal_login.png\" alt=\"The Auth0 login web page.\"/\u003e\u003c/p\u003e\u003cp\u003eLog in using the email address and password of the user account you created earlier. Since this is the first time the account has logged into the app, the \u003cstrong\u003eAuthorize App\u003c/strong\u003e page will appear in the browser window:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4AkDSwWeHROplHJV3KOFcg/98376afd920b0af2a2e732a06c7fb622/authorize_app.png\" alt=\"The “Authorize App” screen. It says that the app is requesting access to your user account, particularly the “profile”, “current_user”, and “current_user_metadata” information.\"/\u003e\u003c/p\u003e\u003cp\u003eThis page is asking you to authorize the app to access the following information in your user account:\u003c/p\u003e\u003cul\u003e\u003cli\u003eProfile: access to your profile and email\u003c/li\u003e\u003cli\u003eCurrent_user: read your current_user\u003c/li\u003e\u003cli\u003eCurrent_user_metadata: update your current_user_metadata\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIf these items sound familiar, it’s because you’ve seen them recently. They’re the names of the scopes in the \u003ccode\u003elogin_scopes\u003c/code\u003e string in the \u003ccode\u003estrings\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e resource...\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003elogin_scopes\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    openid profile email read:current_user update:current_user_metadata\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e...which the call to \u003ccode\u003e\u003cspan\u003ewithScope\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e in the \u003ccode\u003e\u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method uses to specify which sets of user data the app is authorized to use. This additional step informs the user of this use of their data and gives them a choice to approve or decline.\u003c/p\u003e\u003cp\u003eTap the \u003cstrong\u003eApprove\u003c/strong\u003e button. The browser will disappear, and you will return to the app, which will now look like this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png\" alt=\"The app’s screen when the user is logged in.\"/\u003e\u003c/p\u003e\u003cp\u003eTap the \u003cstrong\u003eGet\u003c/strong\u003e button. If you’ve never edited the value of the \u003ccode\u003ecountry\u003c/code\u003e field in the user’s metadata, the metadata text box will display the hint text “Enter country”.\u003c/p\u003e\u003cp\u003eEnter a country’s name (or any other text if you like) into the text box and tap the \u003cstrong\u003eSet\u003c/strong\u003e button. You’ll see this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5NE22T6w25nAVecqCIZ7x7/3c913e712052570af8908e860da37d2a/main_screen_3.png\" alt=\"The app’s screen, with the word “Morocco”, entered into the text field.\"/\u003e\u003c/p\u003e\u003cp\u003eTwo things just happened:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eIf the user’s metadata already had a \u003ccode\u003ecountry\u003c/code\u003e field, its value changed to whatever text you entered. If the user’s metadata didn’t have a \u003ccode\u003ecountry\u003c/code\u003e field, a \u003ccode\u003ecountry\u003c/code\u003e field was added to the metadata, and its value was set to whatever text you entered.\u003c/li\u003e\u003cli\u003eAn Android pop-up message called a \u003ca href=\"https://developer.android.com/reference/com/google/android/material/snackbar/Snackbar\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eSnackbar\u003c/code\u003e\u003c/a\u003e appeared at the bottom of the screen with the message “Success!”\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eLog out of the app, then log in again. Tap the \u003cstrong\u003eGet\u003c/strong\u003e button. The app should fill the metadata text box with the value of the \u003ccode\u003ecountry\u003c/code\u003e metadata field.\u003c/p\u003e\u003cp\u003eLet’s look at the updated user metadata from the Auth0 side. In the Auth0 dashboard, go to the list of users. Do this by clicking \u003cstrong\u003eUser Management\u003c/strong\u003e in the menu on the left side of the page, followed by clicking on \u003cstrong\u003eUsers\u003c/strong\u003e. Select the user that is currently logged in on the app. You’ll be taken to that user’s \u003cstrong\u003eDetails\u003c/strong\u003e page:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5nnVqPm4l6vVtgyvZpeYwI/db98ccbfb8b945ebde7ec7c8143724c5/user_details_page.png\" alt=\"The Auth0 dashboard displaying the user’s “User Details” page. In the “user_metadata” field, a JSON object contains a single key-value pair with the key “country” and the value “Morocco”.\"/\u003e\u003c/p\u003e\u003cp\u003eScroll down to the \u003cstrong\u003eMetadata\u003c/strong\u003e section of the page. You’ll see an area labeled \u003cstrong\u003euser_metadata\u003c/strong\u003e. If you filled out the \u003ccode\u003eEditText\u003c/code\u003e in the app, you’ll see it in the JSON object there:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;country\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eWHATEVER_TEXT_YOU_ENTERED\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEach Auth0 user account can store two kinds of metadata:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eUser metadata,\u003c/strong\u003e which is meant for data intentionally provided by and controlled by the user. It’s typically used for storing information that the user wants to share with the app, such as their address, contact information, preferences, and similar data. Only data that the user can read and edit should be stored here.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eApp metadata,\u003c/strong\u003e which is meant for data provided by and controlled by the app. It’s typically used for storing information about the user that is primarily for the app’s use, such as the user’s roles, permissions, status, and similar data. There may be cases where the user can read this data, but you should not use app metadata to store data provided directly by the user.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWhile a detailed look at the user account pages is beyond the scope of this article, you should explore them to see the kinds of data and functionality that are associated with user accounts.\u003c/p\u003e\u003ch2 id=\"When-Things-Go-Sideways\"\u003eWhen Things Go Sideways\u003c/h2\u003e\u003cp\u003eThe expression “to go sideways” means “to go wrong” or “to not go according to plan.” In this section, I’ll show you what can go wrong when you’re writing an Android app and fail to account for what happens when the user turns their phone on its side. \u003c/p\u003e\u003ch3 id=\"Inducing-app-amnesia\"\u003eInducing app amnesia\u003c/h3\u003e\u003cp\u003eRun the app and log in. You should see this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png\" alt=\"The app’s screen when the user is logged in, in portrait orientation.\"/\u003e\u003c/p\u003e\u003cp\u003eRotate your device to landscape orientation:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/48FY3obLHoGHnHfugbSn7I/8bc142a3e3e69bde3deed3223e6d02d7/orientation_change.png\" alt=\"The app screen viewed in landscape orientation. It has taken on the appearance of just having been launched.\"/\u003e\u003c/p\u003e\u003cp\u003eNotice what happened: \u003c/p\u003e\u003cul\u003e\u003cli\u003eThe greeting text changed from “You’re logged in.” to “Welcome to the app!”, which is its state when the app is launched.\u003c/li\u003e\u003cli\u003eThe buttons have also been returned to their initial state:  \u003cstrong\u003eLog in\u003c/strong\u003e is enabled, and \u003cstrong\u003eLog out\u003c/strong\u003e is disabled.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIt appears as if turning your device on its side has given your app amnesia and returned it to its initial state. What happened?\u003c/p\u003e\u003ch3 id=\"Configuration-changes-and-reloading\"\u003eConfiguration changes and reloading\u003c/h3\u003e\u003cp\u003eTo use a developer cliché: this isn’t a bug, but a feature.\u003c/p\u003e\u003cp\u003eWhenever it detects a configuration change, Android’s default response is to reload the current activity. There are many configuration changes, such as language, keyboard availability, or the change you made just now: screen orientation. Reloading an activity when a configuration change happens makes it run its initialization methods again and reload resources, allowing it to set itself up for the new configuration.\u003c/p\u003e\u003cp\u003eThis behavior was designed for applications that present different interfaces in different orientations. YouTube is an example of such an app, which has different portrait and landscape UI setups:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4jHUrVT9Ekh5252HZc3T95/706f6ddb57bb1b6be1a37c82b1201297/youtube_portrait_and_landscape.png\" alt=\"The YouTube app, shown in both orientations. In portrait orientation, it shows the video, ratings, and comments. In landscape orientation, the video takes up the entire screen.\"/\u003e\u003c/p\u003e\u003cp\u003eChanging the screen orientation reloaded the activity and restored the app to its initial state, but it \u003cem\u003edid not\u003c/em\u003e change your “logged in” status. The \u003ccode\u003e\u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method was not called when you turned your device on its side. You’re still logged in!\u003c/p\u003e\u003cp\u003eYou can confirm your “logged in” status by tapping the \u003cstrong\u003eLog in\u003c/strong\u003e button. Note that there wasn’t an intermediate step where you had to enter your email address and password — you were taken straight to the app:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/01B8CQAD7K9uDYwkT7D1c7/08a21f19cdacc4ecdb065132cd2cf590/logged_in_sideways.png\" alt=\"The app screen, viewed in landscape orientation, showing the user logged in. The bottom portion of the screen is not in sight.\"/\u003e\u003c/p\u003e\u003cp\u003eNote that that app never presented the login page. That’s because there wasn’t any need — you were still logged in. Let’s solve this problem.\u003c/p\u003e\u003ch3 id=\"Curing-your-app-s-amnesia\"\u003eCuring your app’s amnesia\u003c/h3\u003e\u003cp\u003eYou can instruct Android \u003cem\u003enot\u003c/em\u003e to reload Activities in the event of specified configuration changes in the app’s manifest. \u003c/p\u003e\u003cp\u003e🛠 Open \u003ccode\u003eAndroidManifest\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e and change the \u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eactivity\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e tag to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eactivity\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003ename\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e.MainActivity\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eexported\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003etrue\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003econfigChanges\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorientation|screenSize\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis change adds the attribute \u003ccode\u003eandroid\u003cspan\u003e:\u003c/span\u003econfigChanges\u003cspan\u003e=\u003c/span\u003e “orientation\u003cspan\u003e|\u003c/span\u003escreenSize”\u003c/code\u003e to \u003ccode\u003eMainActivity\u003c/code\u003e, which tells Android that the activity should \u003cem\u003enot\u003c/em\u003e reload if the device orientation or screen size changes. Instead of reloading the activity, Android uses a callback method to notify the app of the change. The assumption is that you’ll handle those configuration changes yourself. Since we’ll ignore this callback, the configuration change has no effect.\u003c/p\u003e\u003cp\u003eRun the app and log in. Change the screen orientation, going from portrait to landscape and back. It no longer causes the activity to reload.\u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eYou’ve just built a simple app that features basic username/password \u003cem\u003eauthentication\u003c/em\u003e — the ability to identify a known user. In addition to log a user in and out, you can also retrieve the information in their profile, and read and update their metadata.\u003c/p\u003e\u003cp\u003eYou can find the code for the complete project for this article in \u003ca href=\"https://github.com/auth0-blog/get-started-android-authentication-kotlin\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis repository on the \u003cem\u003eAuth0 Blog Samples\u003c/em\u003e GitHub account\u003c/a\u003e. The only change that you’ll need to make in order to run it is to enter your app’s client ID and tenant’s domain in the \u003ccode\u003eauth0\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e resource file.\u003c/p\u003e\u003cp\u003eThis is the first in a new series of articles on Android development with Auth0. Future articles will cover new developments in Android 12 and Android Studio, as well as deeper dives into authentication and authorization with Android and Auth0 and alternatives to the standard username-and-password approach. Watch this space!\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-1\" target=\"_blank\" rel=\"noopener referrer\"\u003eNext Step: Read the preview part here\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://community.auth0.com/t/developing-a-secure-api-with-nestjs/33026\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eI ran into an issue\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn how to implement login, logout, and user profiles in Android apps using Kotlin and Auth0.",
      "date_published": "2021-09-20T18:29:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/streamlining-a-react-monorepo/",
      "title": "Streamlining a React Monorepo",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://nx.dev\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNx is a build framework for monorepos\u003c/a\u003e with first-class React support. It helps accelerate the adoption of proven development practices across projects of many sizes and scopes. Nx provides additional tooling for React projects to help scale and develop features at a faster pace. \u003c/p\u003e\u003cp\u003eThis guide walks through some of the tooling provided by Nx, the creation, and structure of an Nx workspace, with an example to follow along with.\u003c/p\u003e\u003cp\u003e\u003ciframe src=\"https://www.youtube.com/embed/IMWk0P6EeRc\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\u003ch2 id=\"What-are-Monorepos\"\u003eWhat are Monorepos\u003c/h2\u003e\u003cp\u003eA monorepo is a single collection of all your source code that spans multiple applications, libraries, and languages. Everything in the monorepo is not deployed at the same time but is all located in a central repository. Many companies use monorepos for different organizations and projects. Some even use a single monorepo to house all the source code for projects across their entire company.\u003c/p\u003e\u003cp\u003eHere are some of the benefits of a monorepo:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eShared code\u003c/strong\u003e — Promotes reuse of validation code, UI components, and types across the code base, including code between the backend and the frontend.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAtomic changes\u003c/strong\u003e — Make changes to a server API and modify the clients that consume that API in the same commit. No more coordinating commits across different repositories.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eDeveloper mobility\u003c/strong\u003e — Provides consistency between building and testing applications written using different tools and technologies. Developers can confidently contribute to other teams’ applications and verify that their changes are safe.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eA single set of dependencies\u003c/strong\u003e — Use a single version of third-party dependencies for all your apps. Less frequently used applications don’t get left behind with a 3-year-old version of a framework library or an old version of a build tool.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThere are also a few common misconceptions with monorepos:\u003c/p\u003e\u003cul\u003e\u003cli\u003eStrictly co-locating your code just by placing all your code in the same repository.\u003c/li\u003e\u003cli\u003eRunning all the builds, tests, and quality checks on all applications for each PR or commit.\u003c/li\u003e\u003cli\u003eDeploying every application on every commit to the main branch.\u003c/li\u003e\u003cli\u003eSetting up multiple scripts across applications to handle common tasks.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eJust because you have all your code in a monorepo, that does not mean you have run all the tests and checks on your monorepo for every single commit. This doesn\u0026#39;t scale well and leads to bottlenecks in your development and Continuous Integration (CI) and Continuous Deployment (CD) pipelines. Nx provides integrated tooling to intelligently determine what needs to be run through code analysis, affected commands, and computation caching. \u003c/p\u003e\u003ch3 id=\"Affected-commands\"\u003eAffected commands\u003c/h3\u003e\u003cp\u003eNx uses code analysis to build a dependency graph of all projects in the workspace. It then uses the dependency graph to determine what projects are impacted based on your changes between your Git branches and the main branch. \u003ca href=\"https://nx.dev/latest/react/core-concepts/mental-model#affected-commands\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNx’s Affected Commands\u003c/a\u003e use this code analysis to perform the minimum set of tasks based on what\u0026#39;s changed. Let’s look at two applications that depend on a library as an example.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3Msqcbm3M7zreqA7s3Yga/fa9a14ab5dd0970d45ff8603494a2530/Uploaded_from_Streamlining_a_React_Monorepo\"/\u003e\u003c/p\u003e\u003cp\u003eTo see what applications are affected, use the \u003cstrong\u003e\u003ca href=\"https://nx.dev/latest/angular/cli/affected-apps\" target=\"_blank\" rel=\"noreferrer noopener\"\u003enx affected:apps command\u003c/a\u003e\u003c/strong\u003e. Nx analyzes the nature of the changes and determines which projects, including applications and libraries, are impacted. In the example above, changing app1 doesn’t cause app2 to be impacted, so you don’t need to run all the pre-merge steps for app2. Alternatively, changing the lib, or packages that both apps depend on does impact both applications.\u003c/p\u003e\u003ch3 id=\"Computation-caching\"\u003eComputation caching\u003c/h3\u003e\u003cp\u003eNx is smart in that it also knows the context in which you ran particular commands, the current hash of the files, and other environmental information. \u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1gsO5lGTZaluzgHVc3H3xr/f931ae116060c2def80962a764b4888b/Uploaded_from_Streamlining_a_React_Monorepo\"/\u003e\u003c/p\u003e\u003cp\u003eThe image above displays an example of the information collected to build a unique hash used to identify the computation. With this information, Nx caches and stores these computations and can replay them if it seems the same computation is being run again.\u003c/p\u003e\u003cp\u003eThis isn’t done through rebuilding source code. Only the artifacts produced from a given command are stored and replayed when possible. If Nx doesn’t find this computation, Nx runs the task, and after it completes, it takes the outputs and the terminal output and stores it locally (and if configured remotely). All of this happens transparently, so you don’t have to worry about it.\u003c/p\u003e\u003ch2 id=\"Creating-an-Nx-Workspace-Using-a-React-Preset\"\u003eCreating an Nx Workspace Using a React Preset\u003c/h2\u003e\u003cp\u003eNow that you know how Nx works, let’s try it out by building a small application that lists Star Wars characters.\u003c/p\u003e\u003cp\u003eStart with creating the Nx workspace with a React application using the \u003ccode\u003ereact\u003c/code\u003e preset. \u003c/p\u003e\u003cpre\u003e\u003ccode\u003enpx create-nx-workspace sw-org --preset react --appName myapp\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAfter running this command, you’ll be asked to select a stylesheet format. You can choose the default for this demo. You also have the option to connect your workspace to \u003ca href=\"https://nx.app/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNx Cloud\u003c/a\u003e if you’d like.\u003c/p\u003e\u003cp\u003eAfter you make your selections, this command does the following:\u003c/p\u003e\u003cul\u003e\u003cli\u003eGenerates a new Nx workspace\u003c/li\u003e\u003cli\u003eScaffolds out a new React application with modern tooling, including \u003ca href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJest for unit tests\u003c/a\u003e, and \u003ca href=\"https://www.cypress.io/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCypress for E2E tests\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThere are other presets available, such as \u003ccode\u003enext\u003c/code\u003e for \u003ca href=\"https://nextjs.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNext.js\u003c/a\u003e projects, and \u003ccode\u003ereact\u003cspan\u003e-\u003c/span\u003eexpress\u003c/code\u003e for a workspace with React and Express pre-configured.\u003c/p\u003e\u003cp\u003eEvery Nx workspace has a file structure similar to this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003emyorg/\n├── apps/\n├── libs/\n├── tools/\n├── workspace.json\n├── nx.json\n├── package.json\n└── tsconfig.base.json\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eapps\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e contains the application projects. This is the main entry point for each runnable application.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003elibs\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e contains the library projects. Each library defines its external API so that boundaries between libraries remain clear.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003etools\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e contains scripts that act on your codebase.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eworkspace\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e contains the configuration for each project in your workspace.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e/\u003c/span\u003enx\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e adds extra information about projects, including implicit dependencies and tags that can be used to restrict the ways projects are allowed to depend on each other.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e/\u003c/span\u003etsconfig\u003cspan\u003e.\u003c/span\u003ebase\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e sets up the global TypeScript settings and aliases.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eTo serve up the application, enter into the \u003ccode\u003esw\u003cspan\u003e-\u003c/span\u003eorg\u003c/code\u003e directory and run the \u003ccode\u003eserve\u003c/code\u003e command using the Nx CLI:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003enx serve\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003eNote: If you don\u0026#39;t want to install Nx globally, you can use \u003ccode\u003enpx nx serve\u003c/code\u003e instead.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eThe initial application page is displayed.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2EUaKnrpRkLehJempAp06f/a99c92b3282e79e42b16877c98cac1c9/Uploaded_from_Streamlining_a_React_Monorepo\"/\u003e\u003c/p\u003e\u003ch2 id=\"Generating-a-Feature-Library\"\u003eGenerating a Feature Library\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://nx.dev/latest/react/structure/library-types#feature-libraries\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGenerating libraries\u003c/a\u003e in an Nx workspace is done by using the \u003ccode\u003egenerate\u003c/code\u003e command with the Nx CLI. Feature libraries are used to display UI to the user, which could including routing information, and could use other libraries such as shared components.\u003c/p\u003e\u003cp\u003eCreate one now by running:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003enx generate lib people\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e \u003ca href=\"https://nx.dev/latest/angular/getting-started/console\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNx Console\u003c/a\u003e also provides a full l GUI to run Nx CLI commands in your editor with native VSCode and WebStorm support.\u003c/p\u003e\u003ch2 id=\"Generating-a-Data-Access-Library\"\u003eGenerating a Data Access Library\u003c/h2\u003e\u003cp\u003eA \u0026#34;data access\u0026#34; library is where functionality for fetching and storing data for a feature exists. So any services necessary to manage the quotes are placed in this library. Throughout building applications, there will be data access libraries across multiple features.\u003c/p\u003e\u003cp\u003eCreate the data access library by running:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003enx generate lib data-access\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e You can also create your custom generators similar to the \u003ccode\u003elibrary\u003c/code\u003e generator inside an Nx workspace. This provides more flexibility to create more standards around your development processes and guidelines. Read more about workspace generators in our \u003ca href=\"https://nx.dev/latest/angular/generators/workspace-generators\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eWorkspace Generators\u003c/a\u003e guide.\u003c/p\u003e\u003cp\u003eUpdate the data-access library to fetch the characters from the Star Wars API.\u003c/p\u003e\u003cp\u003eOpen up \u003ccode\u003edata\u003cspan\u003e-\u003c/span\u003eaccess\u003cspan\u003e.\u003c/span\u003etsx\u003c/code\u003e and replace it with the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e useEffect\u003cspan\u003e,\u003c/span\u003e useState \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;react\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003einterface\u003c/span\u003e \u003cspan\u003eIPerson\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n birth_year\u003cspan\u003e:\u003c/span\u003e string\u003cspan\u003e;\u003c/span\u003e\n eye_color\u003cspan\u003e:\u003c/span\u003e string\u003cspan\u003e;\u003c/span\u003e\n films\u003cspan\u003e:\u003c/span\u003e string\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n gender\u003cspan\u003e:\u003c/span\u003e string\u003cspan\u003e;\u003c/span\u003e\n hair_color\u003cspan\u003e:\u003c/span\u003e string\u003cspan\u003e;\u003c/span\u003e\n height\u003cspan\u003e:\u003c/span\u003e string\u003cspan\u003e;\u003c/span\u003e\n homeworld\u003cspan\u003e:\u003c/span\u003e string\u003cspan\u003e;\u003c/span\u003e\n mass\u003cspan\u003e:\u003c/span\u003e string\u003cspan\u003e;\u003c/span\u003e\n name\u003cspan\u003e:\u003c/span\u003e string\u003cspan\u003e;\u003c/span\u003e\n skin_color\u003cspan\u003e:\u003c/span\u003e string\u003cspan\u003e;\u003c/span\u003e\n created\u003cspan\u003e:\u003c/span\u003e Date\u003cspan\u003e;\u003c/span\u003e\n edited\u003cspan\u003e:\u003c/span\u003e Date\u003cspan\u003e;\u003c/span\u003e\n species\u003cspan\u003e:\u003c/span\u003e string\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n starships\u003cspan\u003e:\u003c/span\u003e string\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n url\u003cspan\u003e:\u003c/span\u003e string\u003cspan\u003e;\u003c/span\u003e\n vehicles\u003cspan\u003e:\u003c/span\u003e string\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003einterface\u003c/span\u003e \u003cspan\u003eResponse\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eT\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n count\u003cspan\u003e:\u003c/span\u003e number\u003cspan\u003e;\u003c/span\u003e\n next\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e string\u003cspan\u003e;\u003c/span\u003e\n previous\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e string\u003cspan\u003e;\u003c/span\u003e\n results\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eT\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eusePeople\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epage\u003cspan\u003e:\u003c/span\u003e number\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003epeople\u003cspan\u003e,\u003c/span\u003e setPeople\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e useState\u003cspan\u003e\u0026lt;\u003c/span\u003eIPerson\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n \u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n   \u003cspan\u003efetch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003ehttps://swapi.dev/api/people/?page=\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003epage\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003er\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n   r\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e data\u003cspan\u003e.\u003c/span\u003eresults\u003cspan\u003e)\u003c/span\u003e\n \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n     \u003cspan\u003esetPeople\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003edata\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n   \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n \u003cspan\u003ereturn\u003c/span\u003e people\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow update the people feature at \u003ccode\u003epeople\u003cspan\u003e.\u003c/span\u003etsx\u003c/code\u003e to list out the characters:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e usePeople \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;@sw-org/data-access\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;./people.module.css\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003ePeople\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n \u003cspan\u003econst\u003c/span\u003e people \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eusePeople\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\n   \u003cspan\u003e\u0026lt;\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n     \u003cspan\u003e\u0026lt;\u003c/span\u003eh1\u003cspan\u003e\u0026gt;\u003c/span\u003eStar Wars People\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eh1\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\n     \u003cspan\u003e\u0026lt;\u003c/span\u003eul\u003cspan\u003e\u0026gt;\u003c/span\u003e\n       \u003cspan\u003e{\u003c/span\u003e\n         people\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eperson\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\n           \u003cspan\u003e\u0026lt;\u003c/span\u003eli key\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eperson\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n             \u003cspan\u003e{\u003c/span\u003eperson\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e}\u003c/span\u003e\n           \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eli\u003cspan\u003e\u0026gt;\u003c/span\u003e\n         \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n       \u003cspan\u003e}\u003c/span\u003e\n     \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eul\u003cspan\u003e\u0026gt;\u003c/span\u003e\n   \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003edefault\u003c/span\u003e People\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eReplace the \u003ccode\u003eApp\u003c/code\u003e template with the \u003ccode\u003ePeople\u003c/code\u003e component\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e styles \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;./app.module.css\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e People \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;@sw-org/people\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\n   \u003cspan\u003e\u0026lt;\u003c/span\u003ediv className\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003estyles\u003cspan\u003e.\u003c/span\u003eapp\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n     \u003cspan\u003e\u0026lt;\u003c/span\u003ePeople\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n   \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003edefault\u003c/span\u003e App\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRefreshing the application shows a list of characters.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3wmVIH8Sqz1ejavorzIzsI/99c44e96e4e44149da2e72e5e328baad/Uploaded_from_Streamlining_a_React_Monorepo\"/\u003e\u003c/p\u003e\u003cp\u003eThe list of characters is simple. The business and data logic is kept in libraries. As your applications grow, the number of libraries grows along with it, but the applications remain relatively small and are only used for integrating core functionality for the app to run.\u003c/p\u003e\u003ch2 id=\"Dependency-Graph\"\u003eDependency Graph\u003c/h2\u003e\u003cp\u003eNx knows the dependencies between projects in your workspace and can generate your dependency graph visually at any point in time. \u003c/p\u003e\u003cp\u003eRun the \u003cstrong\u003enx dep-graph\u003c/strong\u003e command to see the current state of the workspace.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003enx dep-graph\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis displays the application, E2E project, and the two libraries. \u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4oiIpWdF5wIpz6y5qJkGA4/9a8802092e0de9c1a0e5c9e25d9828d7/Uploaded_from_Streamlining_a_React_Monorepo\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: You can also have the dependency graph auto-refresh with the \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003ewatch\u003c/code\u003e flag.\u003c/p\u003e\u003cp\u003eYou can also see what projects are impacted by a given change. Make a change to the App.tsx, such as removing the \u003ccode\u003eclassName\u003c/code\u003e, save, and run the \u003cstrong\u003enx affected:dep-graph\u003c/strong\u003e command.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003enx affected:dep-graph\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis displays the \u003cstrong\u003emyapp\u003c/strong\u003e and \u003cstrong\u003emyapp-e2e\u003c/strong\u003e highlighted in red as affected projects.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2S5DueXJUNdbbguneKUjGJ/cc397167e5dc78a1835ab2db57b6dacb/Uploaded_from_Streamlining_a_React_Monorepo\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e The \u003cstrong\u003emyapp-e2e\u003c/strong\u003e application is directly tied to mapp, but is implicitly linked through the \u003cstrong\u003enx.json\u003c/strong\u003e file. Read more about Nx configuration here.\u003c/p\u003e\u003ch3 id=\"Using-Affected-Commands\"\u003eUsing Affected Commands\u003c/h3\u003e\u003cp\u003eNx provides affected commands to run certain tasks against affected projects. For example, make a change to the \u003ccode\u003edata\u003cspan\u003e-\u003c/span\u003eaccess\u003c/code\u003e library, and run \u003cstrong\u003enx affected:build\u003c/strong\u003e. \u003c/p\u003e\u003cpre\u003e\u003ccode\u003enx affected:build\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNx finds the affected applications impacted by changing the \u003cstrong\u003edata-access \u003c/strong\u003elibrary and runs the \u003cstrong\u003ebuild\u003c/strong\u003e target for each one of them. That way, \u003cstrong\u003eonly\u003c/strong\u003e the affected projects are built for the given change, and not every project in the monorepo. The same commands work for \u003cstrong\u003etest\u003c/strong\u003e, \u003cstrong\u003elint\u003c/strong\u003e, and \u003cstrong\u003ee2e\u003c/strong\u003e, and others.\u003c/p\u003e\u003cp\u003eThere is also the \u003cstrong\u003enx affected\u003c/strong\u003e command that works with any defined target. The alias for \u003cstrong\u003enx affected:build\u003c/strong\u003e is:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003enx affected --target\u003cspan\u003e=\u003c/span\u003ebuild\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis allows you to run any target based on the affected projects.\u003c/p\u003e\u003ch3 id=\"Using-Computation-Caching\"\u003eUsing Computation Caching\u003c/h3\u003e\u003cp\u003eAlong with affected commands, Nx supports\u003ca href=\"https://nx.dev/latest/angular/core-extended/computation-caching\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e computation caching\u003c/a\u003e to never execute the same computation twice. This computation cache is pluggable and can be distributed. Taking \u003ccode\u003e\u003cspan\u003e**\u003c/span\u003emyapp\u003c/code\u003e\u003cem\u003e\u003c/em\u003e as an example, run the build for \u003ccode\u003emyapp\u003c/code\u003e twice.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003enx build myapp\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhen running the same command the second time without changes, you immediately get the cached results from the previous computation. The computation cache is done locally, but can also be distributed and extended to the rest of your team and organization. \u003c/p\u003e\u003cp\u003e\u003ca href=\"https://nx.app\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNx Cloud\u003c/a\u003e is one such option to distribute your computation cache. It includes a free tier with 5 hours of saved time per month, enterprise options, and is free for open-source projects.\u003c/p\u003e\u003ch2 id=\"Summary\"\u003eSummary\u003c/h2\u003e\u003cp\u003eNx provides modern tooling including code analysis, code generation, code analysis, affected commands, and computation caching to scale your application development using a monorepo.\u003c/p\u003e\u003cp\u003eWhat did we cover?\u003c/p\u003e\u003cul\u003e\u003cli\u003eMonorepos and why you should use one\u003c/li\u003e\u003cli\u003eNx workspace structure and standardization\u003c/li\u003e\u003cli\u003eSmarter tooling with code analysis, affected commands, dependency visualization, and computation caching.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eFind out more with the following resources:\u003c/p\u003e\u003cul\u003e\u003cli\u003eDocumentation at \u003ca href=\"https://nx.dev\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://nx.dev\u003c/a\u003e\u003c/li\u003e\u003cli\u003eFree \u003ca href=\"https://egghead.io/playlists/scale-react-development-with-nx-4038\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eEgghead course\u003c/a\u003e on Scaling React Development\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Whether you have a single application or a suite of applications, code reuse, standards around structure, process, and feature development help to ensure your codebase remains healthy in the long term.",
      "date_published": "2021-09-16T15:47:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/four-authentication-tools-that-increase-retail-conversion-rates/",
      "title": "4 Authentication Tools That Increase Retail Conversion Rates",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eWhen consumers create e-commerce accounts, retailers can use their purchasing history to offer a more personalized shopping experience, which can boost \u003ca href=\"https://www.mckinsey.com/industries/retail/our-insights/personalizing-the-customer-experience-driving-differentiation-in-retail\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eretail conversion rates\u003c/a\u003e by up to 15%. However, it is tough for retailers to convince people to actually sign up — case in point, \u003ca href=\"https://baymard.com/lists/cart-abandonment-rate\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ea 2021 DMI survey\u003c/a\u003e found that 24% of U.S. shoppers abandoned an order just because they were asked to make an account.\u003c/p\u003e\u003cp\u003eWe \u003ca href=\"https://images.ctfassets.net/2ntc334xpx65/7o4UAUaHOMHJeV5fmgK9S1/b4c300762c64becf6cef5989046aaf8f/Infograph_2_2x.jpg\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esurveyed\u003c/a\u003e over 8,000 consumers across six global markets (the UK, France, Germany, Australia, Singapore, and Japan) to learn about the login experience they preferred and discovered widespread frustration with standard username/password (UP) login methods and businesses that fail to meet their ease-of-login expectations.\u003c/p\u003e\u003cp\u003eOur survey found five problems that stop consumers from signing up for an online account:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eCompleting long login or sign-up forms (49%)\u003c/li\u003e\u003cli\u003eMeeting minimum password requirements (47%)\u003c/li\u003e\u003cli\u003eEntering private information (46%)\u003c/li\u003e\u003cli\u003eCreating a new ID and password for every app or online service (43%)\u003c/li\u003e\u003cli\u003eVerifying their account with one-time passwords (OTP) (23%)\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eSuch frustrations lead to some of the worst security hygiene offenses, in particular, reuse of passwords across multiple accounts. Our survey found that 85% of international consumers reuse passwords, with 41% of them doing so “frequently or all the time” and 29% “sometimes”.\u003c/p\u003e\u003cp\u003eWe asked consumers about the kind of login experience that would increase their chances of signing up for an account and found that adding certain authentication features would actually encourage them to do so. Our survey results indicated that, when available, consumers are more likely to complete the signup process if given more secure and easy-to-use login experiences.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/24uCeR7yhZbNmMpbFE7v3v/c2245aa707cc9d83b5242357ed06ac39/Passwordless-Authentication-sep1.jpg\" alt=\"Authentication 01\"/\u003e\u003c/p\u003e\u003cp\u003eBelow are four authentication tools that can improve your retail conversion rate by creating a more streamlined, secure login experience that satisfies users.\u003c/p\u003e\u003ch2 id=\"1--Multi-factor-Authentication--MFA-\"\u003e1. Multi-factor Authentication (MFA)\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://auth0.com/learn/get-started-with-mfa/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMFA\u003c/a\u003e requires users to verify their identity in more than one way, which helps reduce the potential for unauthorized access to their data. For instance, a user may submit a password and then have to additionally verify a secondary account or device they own using a link sent to their email address or phone.\u003c/p\u003e\u003cp\u003eConsumers want to know that companies are protecting their data. In a 2020 survey with 1,000 North American consumers asked about privacy and data collection, management consulting firm McKinsey \u0026amp; Company found that \u003ca href=\"https://www.mckinsey.com/business-functions/risk-and-resilience/our-insights/the-consumer-data-opportunity-and-the-privacy-imperative\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e87% of respondents said\u003c/a\u003e they “would not do business with a company if they had concerns about its security practices.” MFA helps retailers provide consumers with greater confidence their data is protected because it blocks \u003ca href=\"https://www.microsoft.com/security/blog/2019/08/20/one-simple-action-you-can-take-to-prevent-99-9-percent-of-account-attacks/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e99.9% of attacks\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eWhile 49% of our surveyed consumers noted they were more likely to sign up for an online account if a business offered MFA, only 28% of surveyed businesses currently offered it as part of their login process. This discrepancy arises from the perception that the multiple steps in MFA mean extra hassle for both users and the business.\u003c/p\u003e\u003cp\u003eHowever, MFA is actually fairly easy to implement — many companies \u003ca href=\"https://www.brighttalk.com/webcast/15793/483340/451-research-report-remote-work-during-covid-19-drives-mfa-adoption\" target=\"_blank\" rel=\"noreferrer noopener\"\u003equickly adopted it\u003c/a\u003e when COVID-19 forced them to pivot to a remote workforce in 2020.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eCompany use example\u003c/strong\u003e: According to \u003ca href=\"https://auth0.com/case-studies/ecobee/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJordan Christensen\u003c/a\u003e, VP of Technology at \u003ca href=\"https://www.ecobee.com/en-us/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eecobee\u003c/a\u003e, the smart device retailer wanted to protect consumers using ecobee’s home monitoring products, so they outsourced MFA implementation. His team was thrilled they were able to bring MFA to customers “without needing to reinvent the wheel.”\u003c/p\u003e\u003ch2 id=\"2--Biometrics\"\u003e2. Biometrics\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://auth0.com/blog/what-are-biometrics-the-proscons-of-biometric-security/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eBiometrics\u003c/a\u003e uses measurable human traits, characteristics, or behaviors to confirm user identity. Fingerprint scans and facial recognition are two of the most common forms of biometrics, but there’s a growing list that includes options like voice, gait, and even DNA recognition.\u003c/p\u003e\u003cp\u003eBiometric traits are harder for hackers to fake than usernames and passwords, so they can help mitigate security concerns that could keep consumers from signing up. \u003ca href=\"https://usa.visa.com/visa-everywhere/security/how-fingerprint-authentication-works.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eConsumers\u003c/a\u003e also like it because it’s faster than username/password authentication, and they don’t have to struggle with remembering login credentials.\u003c/p\u003e\u003cp\u003eWhile 46% of our surveyed consumers responded that they’d be more likely to log in if they could use biometrics, only 21% of the businesses we surveyed currently offered it — the biggest consumer-business gap we found in the study. Taking steps to close the gap between consumer expectations and current business practices will result in a better customer experience and better retail conversion rates.\u003c/p\u003e\u003cp\u003eSteven Rees-Pullman, SVP, International at Auth0, explains that it can be a \u003ca href=\"https://auth0.com/blog/businesses-fall-short-of-consumer-expectations-for-login-experiences-auth0-survey-reveals/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e“heavy lift”\u003c/a\u003e for businesses to develop biometric authentication in-house due to factors like limited bandwidth of IT employees or a lack of expertise with the process. To prevent diverting company resources and adding additional stress on already busy IT teams, some companies are instead choosing to outsource implementation to third-party providers that specialize in identity management and already have \u003ca href=\"https://auth0.com/docs/mfa/configure-webauthn-device-biometrics-for-mfa\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eexperience with biometrics\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eCompany use example\u003c/strong\u003e: Consumer use of \u003ca href=\"https://www.microsoft.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMicrosoft’s\u003c/a\u003e biometric authentication tool Windows Hello, which lets users log in with a face, iris, or fingerprint scan instead of a password, jumped from \u003ca href=\"https://www.microsoft.com/security/blog/2020/12/17/a-breakthrough-year-for-passwordless-technology/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e69.4% to 84.7%\u003c/a\u003e in 2019 alone. Additionally, \u003ca href=\"https://www.disney.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDisney\u003c/a\u003e started experimenting with a \u003ca href=\"https://insidethemagic.net/2021/04/disney-world-facial-recognition-ks1/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003efacial recognition system\u003c/a\u003e at Walt Disney World’s Magic Kingdom theme park this year and was using \u003ca href=\"https://insidethemagic.net/2020/10/disney-fingerprint-scanning-kj1/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003efingerprint scanning\u003c/a\u003e to prevent ticket fraud before COVID-19 hit.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://auth0.com/learn/social-login/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSocial logins\u003c/a\u003e use existing login information from a social network provider that allows consumers to access a third-party website account without having to create another one. While the number of social providers \u003ca href=\"https://www.theverge.com/2021/5/7/22422980/tiktok-log-in-sound-kit-app-integration-developers\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ekeeps growing\u003c/a\u003e, staple networks include Facebook, Google, and Twitter.\u003c/p\u003e\u003cp\u003eConsumers prefer social logins to traditional UP authentication because they typically allow them to create and log in to accounts with just one click. As a result, social logins generally \u003ca href=\"https://auth0.com/blog/how-to-use-social-login-to-drive-your-apps-growth/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eboost conversion rates\u003c/a\u003e by up to 20% — though some companies report seeing \u003ca href=\"https://www.quora.com/What-impact-does-social-login-have-on-conversion-rates\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eas high as 40%\u003c/a\u003e. Social logins also provide access to rich user data, allowing you to use more customized, targeted marketing with individual consumers.\u003c/p\u003e\u003cp\u003eOur survey found there wasn’t a huge gap between consumers and businesses with social logins, with 37% of consumers noting they were more likely to sign up with it and 31% of businesses currently offering it.\u003c/p\u003e\u003cp\u003eSocial logins are typically connected to larger companies with established data privacy measures, but security can be compromised if users are reusing passwords. Martin Gontovnikas, former VP of Marketing at Auth0, says consumers using social logins should \u003ca href=\"https://auth0.com/blog/social-login-on-the-rise/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003evary their passwords across platforms\u003c/a\u003e, and you can choose to boost the security strength of social logins by combining it with MFA.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eCompany use example:\u003c/strong\u003e Kevin Ho, VP of Marketing for marketing agency \u003ca href=\"https://www.wishpond.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eWishPond\u003c/a\u003e, found that after featuring a social login option more prominently than UP authentication, the company saw an \u003ca href=\"https://blog.wishpond.com/post/115675436270/how-we-improved-sign-up-rates-by-8-5-with-this-simple-test\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e8.5% increase\u003c/a\u003e in their conversions.\u003c/p\u003e\u003ch2 id=\"4--Passwordless\"\u003e4. Passwordless\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://assets.ctfassets.net/2ntc334xpx65/3Ew2LXo2UJDQdlSukeQxwq/de57802e6a5da4a58de15ee68b42ccf5/Passwordless-Whitepaper-Auth0.pdf\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ePasswordless\u003c/a\u003e authentication is exactly what it sounds like: confirming a consumer’s identity with something different from a password. Outside of biometrics, typical passwordless options include magic links, where a user is sent a link to log in after submitting their email, one-time codes, and push notifications.\u003c/p\u003e\u003cp\u003eWith the average consumer having \u003ca href=\"https://tech.co/news/average-person-100-passwords#:~:text=According%20to%20new%20research%20from,has%20100%20passwords%20to%20remember!\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eapproximately 100 passwords\u003c/a\u003e, passwordless authentication reduces potential user frustration with logins. Not having traditional UP authentication also means increased data security, with Verizon noting in its \u003ca href=\"https://www.verizon.com/business/resources/reports/dbir/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e2021 Data Breach Investigations Report\u003c/a\u003e that stolen login credentials are the main way organizations get hacked. Next Move Strategy Consulting published a report \u003ca href=\"https://www.nextmsc.com/report/passwordless-authentication-market\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis month\u003c/a\u003e predicting that the global passwordless authentication market will grow by 29.1% by 2030.\u003c/p\u003e\u003cp\u003eEven so, passwordless authentication came in last in our survey in terms of both consumer likelihood to sign up with it (34%) and business use (20%). Traditionally, \u003ca href=\"https://www.forbes.com/sites/forbestechcouncil/2021/04/20/why-is-passwordless-authentication-met-with-reluctance/?sh=5a946c366d06\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eIT infrastructure\u003c/a\u003e at large companies has been set up for UP authentication, so it can be a complex process for businesses to implement passwordless tech on a wide scale.\u003c/p\u003e\u003cp\u003eAccording to Cybersecurity Insiders’ 2021 \u003ca href=\"https://media.fidoalliance.org/wp-content/uploads/2021/03/The_State_Of_Passwordless_Authentication_2021_Report.pdf\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e“The State of Passwordless Authentication”\u003c/a\u003e report, many organizations that have chosen to implement passwordless authentication have done so because of its proven security, ease of use, and ability to “help consumer-facing businesses increase revenue.” Microsoft also reported that \u003ca href=\"https://www.microsoft.com/security/blog/2020/12/17/a-breakthrough-year-for-passwordless-technology/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emore than 150 million users\u003c/a\u003e were using passwordless authentication on Windows in May 2020.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eCompany use example:\u003c/strong\u003e Kunal Chakraborty, Global Vice President for Customer Experience and Digital at \u003ca href=\"https://www.grandvision.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGrandVision\u003c/a\u003e, the optical retailer, said the company made \u003ca href=\"https://auth0.com/case-studies/grandvision/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e“the checkout process as customer-friendly as possible”\u003c/a\u003e by having a third-party provider implement passwordless authentication — accounts are created just by clicking a box. As a result, GrandVision saw a \u003ca href=\"https://techbeacon.com/security/your-passwordless-future-make-it-sooner-rather-later\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eboost in their conversions by up to 54%\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3DuYOoznWG10geDOeYwBVm/02b5dbc23075eebf4d984f22dbaaec76/Passwordless-Authentication-sep2.jpg\" alt=\"Authentication 02\"/\u003e\u003c/p\u003e\u003ch2 id=\"Authentication-Technologies-Enhance-User-Experience\"\u003eAuthentication Technologies Enhance User Experience\u003c/h2\u003e\u003cp\u003eWhile it may seem like adding a new element to your login box would drive consumers away, it’s actually the opposite. By using one of the authentication tools above to provide consumers with a simple, secure login experience, you can satisfy users and continue to strengthen their ties to your brand with personalized marketing — strengthening your retail conversion rate in the process.\u003c/p\u003e\u003cp\u003eAuth0 makes implementing the authentication technologies above simple — learn more \u003ca href=\"https://auth0.com/authentication\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eabout Auth0’s platform\u003c/a\u003e here.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "How to decrease abandoned carts by improving the simplicity and security of your user login process.",
      "date_published": "2021-09-15T15:03:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/backend-for-frontend-pattern-with-auth0-and-dotnet/",
      "title": "Backend For Frontend Authentication Pattern with Auth0 and ASP.NET Core",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eTL;DR:\u003c/strong\u003e This article discusses the Backend For Frontend authentication pattern and how it can be used in practice in SPAs implemented with React that use ASP.NET Core 5 as backend. Basic knowledge of the OAuth 2.0 and OpenID Connect is desirable but not required.\u003c/p\u003e\u003ch2 id=\"What-Is-the-Backend-For-Frontend-Authentication-Pattern-\"\u003eWhat Is the Backend For Frontend Authentication Pattern?\u003c/h2\u003e\u003cp\u003eAs you start looking into the different \u003ca href=\"https://auth0.com/docs/flows\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOAuth flows\u003c/a\u003e and the scenarios they cover, client type is one of those relevant aspects mentioned everywhere. The \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc6749\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOAuth 2.0 specification\u003c/a\u003e defines two different client types, public and confidential clients, under \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc6749#section-2.1\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esection #2.1\u003c/a\u003e.\u003c/p\u003e\u003cp\u003ePublic clients are those that run in places where secrets could be exposed as part of the source code or if the binaries are decompiled. These usually are single-page apps running in a browser or native apps running in user devices such as mobile phones or smart TVs. \u003c/p\u003e\u003cp\u003eOn the other hand, confidential clients are the ones that can keep secrets in a private store, like, for example, a web application running in a web server, which can store secrets on the backend. \u003c/p\u003e\u003cp\u003eThe client type will determine one or more OAuth flows suitable for the application implementation. By sticking to one of those flows, you can also lower the risks of getting the application compromised from an authentication and authorization standpoint.\u003c/p\u003e\u003cp\u003eThe \u003cstrong\u003eBackend For Frontend\u003c/strong\u003e (a.k.a BFF) pattern for authentication emerged to mitigate any risk that may occur from negotiating and handling access tokens from public clients running in a browser.  The name also implies that a dedicated backend must be available for performing all the authorization code exchange and handling of the access and refresh tokens. This pattern relies on \u003ca href=\"https://openid.net/connect/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOpenID Connect\u003c/a\u003e, which is an authentication layer that runs on top of OAuth to request and receive identity information about authenticated users.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eThis pattern does not work for a pure SPA that relies on calling external APIs directly from javascript or a serverless backend (e.g., AWS Lamba or Azure Functions).\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eThe following diagram illustrates how this pattern works in detail:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7b2OEjgWLrP5EBOnPNK4MH/b9970c5cce10ee594477493785b17efb/BFF-Sequence.png\" alt=\"BFF sequence diagram\"/\u003e\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eWhen the frontend needs to authenticate the user, it calls an API endpoint (\u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003elogin\u003c/code\u003e) on the backend to start the login handshake.\u003c/li\u003e\u003cli\u003eThe backend uses OpenID connect with Auth0 to authenticate the user and getting the id, access, and refresh tokens.\u003c/li\u003e\u003cli\u003eThe backend stores the user\u0026#39;s tokens in a cache.\u003c/li\u003e\u003cli\u003eAn encrypted cookie is issued for the frontend representing the user authentication session.\u003c/li\u003e\u003cli\u003eWhen the frontend needs to call an external API, it passes the encrypted cookie to the backend together with the URL and data to invoke the API.\u003c/li\u003e\u003cli\u003eThe backend retrieves the access token from the cache and makes a call to the external API including that token on the authorization header.\u003c/li\u003e\u003cli\u003eWhen the external API returns a response to the backend, this one forwards that response back to the frontend.\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"Backend-For-FrontEnd-in-ASP-NET-Core\"\u003eBackend For FrontEnd in ASP.NET Core\u003c/h2\u003e\u003cp\u003eVisual Studio ships with three templates for SPAs with an ASP.NET Core backend. As shown in the following picture, those templates are ASP.NET Core with Angular, ASP.NET Core with React.js, and ASP.NET Core with React.js and Redux, which includes all the necessary plumbing for using Redux.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4m19OOAccdvvxPsriVyior/9062c17f8c3a39820932ab0ff2789185/visualstudio-aspnet-templates.png\" alt=\"Available templates for SPA and ASP.NET Core\"/\u003e\u003c/p\u003e\u003cp\u003eAs part of this article, we will be discussing how to implement this pattern with the ASP.NET Core with React.js template.\u003c/p\u003e\u003cp\u003eYou can use \u003ca href=\"https://github.com/auth0-blog/bff-auth0-dotnet\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis GitHub repository\u003c/a\u003e as a reference for the project you are about to build. \u003c/p\u003e\u003ch3 id=\"The-structure-of-the-project\"\u003eThe structure of the project\u003c/h3\u003e\u003cp\u003eProjects created with that template from Visual Studio will have the following folder structure.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eClientApp\u003c/code\u003e, this folder contains a sample SPA implemented with React.js. This is the app that we will modify to support the BFF pattern.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eControllers\u003c/code\u003e, this folder contains the controllers implemented with ASP.NET Core for the API consumed from the SPA. In other words, it\u0026#39;s the backend.\u003c/li\u003e\u003cli\u003e\u003ccode\u003ePages\u003c/code\u003e, this folder contains server-side pages, which are mostly used for rendering errors on the backend.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eStartups\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e, this is the file containing the main class where the ASP.NET Core middleware classes are configured as well as the dependency injection container.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eBefore modifying any code, we will proceed to configure first our application in Auth0. That configuration will give us access to the keys and authentication endpoints for the OpenID middleware in .NET Core.\u003c/p\u003e\u003ch2 id=\"Auth0-Configuration\"\u003eAuth0 Configuration\u003c/h2\u003e\u003cp\u003eTo start, you need to access your \u003ca href=\"https://manage.auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Dashboard\u003c/a\u003e. If you don\u0026#39;t have an Auth0 account, you can \u003ca href=\"https://auth0.com/signup\" data-amp-replace=\"CLIENT_ID\" data-amp-addparams=\"anonId=CLIENT_ID(cid-scope-cookie-fallback-name)\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esign up for a free one\u003c/a\u003e right now!\u003c/p\u003e\u003ch3 id=\"Create-an-application-in-the-Auth0-Dashboard\"\u003eCreate an application in the Auth0 Dashboard\u003c/h3\u003e\u003cp\u003eThe first thing we will do is to create a new brand application in the Auth0 Dashboard. An Auth0 application is an entry point for getting the keys and endpoints we will need in our web application.\nGo to your dashboard, click on the \u003cem\u003eApplications\u003c/em\u003e menu on the left, and then \u003cem\u003eCreate Application\u003c/em\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/MTviQ3xdr6MFQQtkMFQ0n/123341f4c3cafaa17da2a8bac62e775e/auth0-dashboard-applications.png\" alt=\"Applications section in the Auth0 Dashboard\"/\u003e\u003c/p\u003e\u003cp\u003eThe \u003cem\u003eCreate Application\u003c/em\u003e button will start a wizard to define the configuration of our application. Pick a name for your web application, and select the option \u003cem\u003eRegular Web Applications\u003c/em\u003e. Do not confuse your application with a Single Page Web Application. Even if we are going to implement a SPA with React, we will rely on the .NET Core backend to negotiate the ID tokens. When choosing \u003cem\u003eRegular Web Applications\u003c/em\u003e, we are telling Auth0 that our application will use the \u003ca href=\"https://auth0.com/docs/flows/authorization-code-flow\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuthorization Code Flow\u003c/a\u003e, which requires a backend channel to receive the ID token for OpenID Connect, and that is exactly what we need to get that magic happening in our ASP.NET Core backend.\u003c/p\u003e\u003cp\u003e \u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/34sDIegR1jupeg8G8tJyjE/8bcef77e2d95415396876b996d8547c6/auth0-dashboard-create-application.png\" alt=\"Creating applications in the Auth0 Dashboard\"/\u003e\u003c/p\u003e\u003cp\u003eOnce the application is created, go to the \u003cem\u003eSettings\u003c/em\u003e tab and take note of the following settings:\u003c/p\u003e\u003cul\u003e\u003cli\u003eDomain\u003c/li\u003e\u003cli\u003eClient ID\u003c/li\u003e\u003cli\u003eClient Secret\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2YsEWLtSCwuUKt8ba2kRSx/e5d403296c36a4c506d87ce7b5dd711f/auth0-app-configuration-settings.png\" alt=\"Auth0 app configuration settings\"/\u003e\u003c/p\u003e\u003cp\u003eThose are the ones you will need to configure the OpenID middleware in the web application.\u003c/p\u003e\u003ch3 id=\"Configure-the-Callback-URL\"\u003eConfigure the Callback URL\u003c/h3\u003e\u003cp\u003eThe next thing is to configure the Callback URL for our web application. This is the URL where Auth0 will post the authorization code and ID token for OpenID Connect. \nThis URL can be added in the Allowed URLs field for our application. For our sample, we will use \u003ca href=\"https://localhost:5001/callback\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://localhost:5001/callback\u003c/a\u003e. If you are planning to deploy the application to a different URL, you will also need to ensure it is listed here.\u003c/p\u003e\u003ch3 id=\"Configure-the-Logout-URL\"\u003eConfigure the Logout URL\u003c/h3\u003e\u003cp\u003eThe logout URL is where Auth0 will redirect the user after the logout process has been completed. Our web application will pass this URL to Auth0 as part of \u003ca href=\"https://auth0.com/docs/logout/redirect-users-after-logout\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe \u003ccode\u003ereturnTo\u003c/code\u003e query string parameter\u003c/a\u003e. The logout URL for your app must be added to the \u003cem\u003eAllowed Logout URLs\u003c/em\u003e field under the application settings, or Auth0 will return an error otherwise when the user tries to do a logout. For our sample, we will use \u003ca href=\"https://localhost:5001\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://localhost:5001\u003c/a\u003e.\u003c/p\u003e\u003ch3 id=\"Create-an-API-in-the-Auth0-Dashboard\"\u003eCreate an API in the Auth0 Dashboard\u003c/h3\u003e\u003cp\u003eWe also need to create an Auth0 API in the Auth0 Dashboard. So, go to the APIs section and click on \u003cem\u003eCreate API\u003c/em\u003e, as shown in the following picture:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/41FoW31W6boGVYrtkfnyhK/2efc80b19495ecb27699ccc62052f14d/auth0-dashboard-create-api.png\" alt=\"Creating an API in the Auth0 Dashboard\"/\u003e\u003c/p\u003e\u003cp\u003eThis will open a new window for configuring the API. Configure the following fields under the settings tab in that window.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eName\u003c/strong\u003e, a friendly name or description for the API. Enter \u003cstrong\u003eWeather Forecast API\u003c/strong\u003e for this sample.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eIdentifier\u003c/strong\u003e or \u003cstrong\u003eAudience\u003c/strong\u003e, which is an identifier that the client application uses to request access tokens for the API. Enter the string \u003ccode\u003ehttps\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eweatherforecast\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eUnder the permissions tab, add a new permission \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eweather\u003c/code\u003e with the description \u003cem\u003eIt allows getting the weather forecast\u003c/em\u003e. This is the scope that Auth0 will inject in the access token if the user approves it in the consent screen. \u003c/p\u003e\u003cp\u003eFinally, click on the Save button to save the changes. At this point, our API is ready to be used from .NET Core.\u003c/p\u003e\u003ch2 id=\"Configuring-the-ASP-NET-Core-Application\"\u003eConfiguring the ASP.NET Core Application\u003c/h2\u003e\u003cp\u003eOur application will use two middleware: \u003c/p\u003e\u003cul\u003e\u003cli\u003eThe OpenID Connect middleware for handling all the authentication handshake with Auth0.\u003c/li\u003e\u003cli\u003eThe Authentication Cookie middleware for persisting the authentication session in a cookie also sharing it with the frontend running React.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eOpen the Package Manager Console for NuGet in Visual Studio and run the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eInstall-Package Microsoft.AspNetCore.Authentication.Cookies\nInstall-Package Microsoft.AspNetCore.Authentication.OpenIdConnect\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce the Nuget packages are installed in our project, we can go ahead and configure the middleware in the \u003ccode\u003eStartup\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e class under the root folder of the ASP.NET Core project.\u003c/p\u003e\u003cp\u003eModify the \u003ccode\u003eConfigureServices\u003c/code\u003e method in that class to include the following code.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// BFF/Startup.cs\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIServiceCollection\u003c/span\u003e services\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        options\u003cspan\u003e.\u003c/span\u003eDefaultAuthenticateScheme \u003cspan\u003e=\u003c/span\u003e CookieAuthenticationDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n        options\u003cspan\u003e.\u003c/span\u003eDefaultSignInScheme \u003cspan\u003e=\u003c/span\u003e CookieAuthenticationDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n        options\u003cspan\u003e.\u003c/span\u003eDefaultChallengeScheme \u003cspan\u003e=\u003c/span\u003e CookieAuthenticationDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddCookie\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eo \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        o\u003cspan\u003e.\u003c/span\u003eCookie\u003cspan\u003e.\u003c/span\u003eSecurePolicy \u003cspan\u003e=\u003c/span\u003e CookieSecurePolicy\u003cspan\u003e.\u003c/span\u003eAlways\u003cspan\u003e;\u003c/span\u003e\n        o\u003cspan\u003e.\u003c/span\u003eCookie\u003cspan\u003e.\u003c/span\u003eSameSite \u003cspan\u003e=\u003c/span\u003e SameSiteMode\u003cspan\u003e.\u003c/span\u003eStrict\u003cspan\u003e;\u003c/span\u003e\n        o\u003cspan\u003e.\u003c/span\u003eCookie\u003cspan\u003e.\u003c/span\u003eHttpOnly \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddOpenIdConnect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e options \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003eConfigureOpenIdConnect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \n    services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddHttpClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n   \u003cspan\u003e// ...existing code...\u003c/span\u003e\n \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureOpenIdConnect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eOpenIdConnectOptions\u003c/span\u003e options\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Set the authority to your Auth0 domain\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eAuthority \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e$\u0026#34;https://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eConfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e// Configure the Auth0 Client ID and Client Secret\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eClientId \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientId\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eClientSecret \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientSecret\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e// Set response type to code\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eResponseType \u003cspan\u003e=\u003c/span\u003e OpenIdConnectResponseType\u003cspan\u003e.\u003c/span\u003eCodeIdToken\u003cspan\u003e;\u003c/span\u003e\n\n    options\u003cspan\u003e.\u003c/span\u003eResponseMode \u003cspan\u003e=\u003c/span\u003e OpenIdConnectResponseMode\u003cspan\u003e.\u003c/span\u003eFormPost\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e// Configure the scope\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eScope\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eClear\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eScope\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAdd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;openid\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eScope\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAdd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;offline_access\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eScope\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAdd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;read:weather\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \n    \u003cspan\u003e// Set the callback path, so Auth0 will call back to http://localhost:3000/callback\u003c/span\u003e\n    \u003cspan\u003e// Also ensure that you have added the URL as an Allowed Callback URL in your Auth0 dashboard\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eCallbackPath \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003ePathString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/callback\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e// Configure the Claims Issuer to be Auth0\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eClaimsIssuer \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e// This saves the tokens in the session cookie\u003c/span\u003e\n    options\u003cspan\u003e.\u003c/span\u003eSaveTokens \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \n    options\u003cspan\u003e.\u003c/span\u003eEvents \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eOpenIdConnectEvents\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e// handle the logout redirection\u003c/span\u003e\n        OnRedirectToIdentityProviderForSignOut \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e logoutUri \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e$\u0026#34;https://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eConfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/v2/logout?client_id=\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eConfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ClientId\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n            \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e postLogoutUri \u003cspan\u003e=\u003c/span\u003e context\u003cspan\u003e.\u003c/span\u003eProperties\u003cspan\u003e.\u003c/span\u003eRedirectUri\u003cspan\u003e;\u003c/span\u003e\n            \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eIsNullOrEmpty\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003epostLogoutUri\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003epostLogoutUri\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eStartsWith\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003e{\u003c/span\u003e\n                    \u003cspan\u003e// transform to absolute\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e request \u003cspan\u003e=\u003c/span\u003e context\u003cspan\u003e.\u003c/span\u003eRequest\u003cspan\u003e;\u003c/span\u003e\n                    postLogoutUri \u003cspan\u003e=\u003c/span\u003e request\u003cspan\u003e.\u003c/span\u003eScheme \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e\u0026#34;://\u0026#34;\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e request\u003cspan\u003e.\u003c/span\u003eHost \u003cspan\u003e+\u003c/span\u003e request\u003cspan\u003e.\u003c/span\u003ePathBase \u003cspan\u003e+\u003c/span\u003e postLogoutUri\u003cspan\u003e;\u003c/span\u003e\n                \u003cspan\u003e}\u003c/span\u003e\n                logoutUri \u003cspan\u003e+=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e$\u0026#34;\u0026amp;returnTo=\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e Uri\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eEscapeDataString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003epostLogoutUri\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n            context\u003cspan\u003e.\u003c/span\u003eResponse\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eRedirect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003elogoutUri\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            context\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eHandleResponse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n            \u003cspan\u003ereturn\u003c/span\u003e Task\u003cspan\u003e.\u003c/span\u003eCompletedTask\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        OnRedirectToIdentityProvider \u003cspan\u003e=\u003c/span\u003e context \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            context\u003cspan\u003e.\u003c/span\u003eProtocolMessage\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSetParameter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;audience\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ApiAudience\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e Task\u003cspan\u003e.\u003c/span\u003eCompletedTask\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis code configures the OpenID Connect middleware to point to Auth0 for authentication and the Cookie middleware for persisting the authentication session in cookies. Let\u0026#39;s discuss different parts of this code more in detail so you can understand what it does.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eservices\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        options\u003cspan\u003e.\u003c/span\u003eDefaultAuthenticateScheme \u003cspan\u003e=\u003c/span\u003e CookieAuthenticationDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n        options\u003cspan\u003e.\u003c/span\u003eDefaultSignInScheme \u003cspan\u003e=\u003c/span\u003e CookieAuthenticationDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n        options\u003cspan\u003e.\u003c/span\u003eDefaultChallengeScheme \u003cspan\u003e=\u003c/span\u003e CookieAuthenticationDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddCookie\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eo \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        o\u003cspan\u003e.\u003c/span\u003eCookie\u003cspan\u003e.\u003c/span\u003eSecurePolicy \u003cspan\u003e=\u003c/span\u003e CookieSecurePolicy\u003cspan\u003e.\u003c/span\u003eAlways\u003cspan\u003e;\u003c/span\u003e\n        o\u003cspan\u003e.\u003c/span\u003eCookie\u003cspan\u003e.\u003c/span\u003eSameSite \u003cspan\u003e=\u003c/span\u003e SameSiteMode\u003cspan\u003e.\u003c/span\u003eStrict\u003cspan\u003e;\u003c/span\u003e\n        o\u003cspan\u003e.\u003c/span\u003eCookie\u003cspan\u003e.\u003c/span\u003eHttpOnly \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt configures authentication to rely on the session cookie as the primary authentication mechanism if no other is specified in one of the web application\u0026#39;s controllers. It also injects the cookie middleware with a few settings that restrict how the cookie can be used on the browsers. In our case, the cookie can only be used under HTTPS (\u003ccode\u003eCookieSecurePolicy\u003cspan\u003e.\u003c/span\u003eAlways\u003c/code\u003e), it\u0026#39;s not available on the client side (\u003ccode\u003eHttpOnly \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003c/code\u003e), and uses a site policy equals to strict (\u003ccode\u003eSameSiteMode\u003cspan\u003e.\u003c/span\u003eStrict\u003c/code\u003e). This last one implies the cookie will only be sent if the domain for the cookie matches exactly the domain in the browser\u0026#39;s URL. All these settings help to prevent potential attacks with scripting on the client side.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eoptions\u003cspan\u003e.\u003c/span\u003eResponseType \u003cspan\u003e=\u003c/span\u003e OpenIdConnectResponseType\u003cspan\u003e.\u003c/span\u003eCodeIdToken\u003cspan\u003e;\u003c/span\u003e\noptions\u003cspan\u003e.\u003c/span\u003eResponseMode \u003cspan\u003e=\u003c/span\u003e OpenIdConnectResponseMode\u003cspan\u003e.\u003c/span\u003eFormPost\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe OpenID Connect middleware is configured to use \u003ccode\u003eResponseType\u003c/code\u003e equals to \u003ccode\u003eCodeIdToken\u003c/code\u003e (\u003ca href=\"https://auth0.com/docs/flows/hybrid-flow\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eHybrid flow\u003c/a\u003e), which means our web application will receive an authorization code and ID token directly from the authorization endpoint right after the user is authenticated. We will use the authorization code in exchange for an access token for calling a backend API hosted on a different site. \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Configure the scope\u003c/span\u003e\noptions\u003cspan\u003e.\u003c/span\u003eScope\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eClear\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\noptions\u003cspan\u003e.\u003c/span\u003eScope\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAdd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;openid\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\noptions\u003cspan\u003e.\u003c/span\u003eScope\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAdd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;offline_access\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\noptions\u003cspan\u003e.\u003c/span\u003eScope\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAdd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;read:weather\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003eopenid\u003c/code\u003e scope is required as part of the OpenID Connect authentication flow. The \u003ccode\u003eoffline_access\u003c/code\u003e is for requesting a \u003ca href=\"https://auth0.com/docs/tokens/refresh-tokens\" target=\"_blank\" rel=\"noreferrer noopener\"\u003erefresh token\u003c/a\u003e and \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eweather\u003c/code\u003e is specific to the API we will call later as part of this sample.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eoptions\u003cspan\u003e.\u003c/span\u003eSaveTokens \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003eSaveTokens\u003c/code\u003e option tells the OpenID Connect middleware that all the tokens (id token, refresh token, and access token) received from the authorization endpoint during the initial handshake must be persisted for later use. By default, the middleware persists those tokens in the encrypted session cookie, and we will use that for our sample.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eOnRedirectToIdentityProvider \u003cspan\u003e=\u003c/span\u003e context \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    context\u003cspan\u003e.\u003c/span\u003eProtocolMessage\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSetParameter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;audience\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:ApiAudience\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e Task\u003cspan\u003e.\u003c/span\u003eCompletedTask\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe OpenID Connect middleware does not have any property to configure the \u003ccode\u003eaudience\u003c/code\u003e parameter that Auth0 requires for returning an authorization code for an API. We are attaching some code to the \u003ccode\u003eOnRedirectToIdentityProvider\u003c/code\u003e event for setting that parameter before the user is redirected to Auth0 for authentication.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eservices\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddHttpClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe extension method \u003ccode\u003eAddHttpClient\u003c/code\u003e injects an \u003ccode\u003eIHttpClientFactory\u003c/code\u003e with default settings to create instances of the class \u003ccode\u003eHttpClient\u003c/code\u003e. We will use it to make calls to the external API.\u003c/p\u003e\u003cp\u003eThe next step is to modify the \u003ccode\u003eConfigure\u003c/code\u003e method to tell ASP.NET Core that we want to use the authentication and authorization middleware. Those middleware will integrate automatically with the authentication session cookies.\u003c/p\u003e\u003cp\u003eInsert the following code as it is shown below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Startup.cs\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIApplicationBuilder\u003c/span\u003e app\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eIWebHostEnvironment\u003c/span\u003e env\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// ...existing code...\u003c/span\u003e\n    app\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseRouting\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e// Code goes here\u003c/span\u003e\n    app\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    app\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthorization\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    app\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseEndpoints\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eendpoints \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n      endpoints\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eMapControllerRoute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;default\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003epattern\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;{controller}/{action=Index}/{id?}\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n     \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \n    \u003cspan\u003e// ...existing code...\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUpdate the existing \u003ccode\u003eappSettings\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e file and include the settings we got from the Auth0 Dashboard before. Those are \u003cem\u003eDomain\u003c/em\u003e, \u003cem\u003eClient ID\u003c/em\u003e, \u003cem\u003eClient Secret\u003c/em\u003e, and \u003cem\u003eApiAudience\u003c/em\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;Logging\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;LogLevel\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;Default\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Information\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;Microsoft\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Warning\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;Microsoft.Hosting.Lifetime\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Information\u0026#34;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;AllowedHosts\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026lt;domain\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;ClientId\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026lt;client id\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;ClientSecret\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026lt;client secret\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;ApiAudience\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;https://weatherforecast\u0026#34;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Add-the-ASP-NET-Core-Controllers-for-handling-authentication\"\u003eAdd the ASP.NET Core Controllers for handling authentication\u003c/h3\u003e\u003cp\u003eCreate a new ASP.NET controller in the \u003ccode\u003eControllers\u003c/code\u003e folder and call it \u003ccode\u003eAuthController\u003c/code\u003e. This controller has three actions.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eLogin\u003c/code\u003e for initiating the OpenID Connect login handshake with Auth0.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eLogout\u003c/code\u003e for logging out from the web application and also from Auth0.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eGetUser\u003c/code\u003e for getting data about the authenticated user in the current session. This is an API that the React application will invoke to get the authentication context for the user.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis is the code for the \u003ccode\u003eLogin\u003c/code\u003e action:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// BFF/Controllers/AuthController.cs\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eActionResult\u003c/span\u003e \u003cspan\u003eLogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e returnUrl \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eChallengeResult\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eAuthenticationProperties\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e RedirectUri \u003cspan\u003e=\u003c/span\u003e returnUrl \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt is an action that returns a \u003ccode\u003eChallengeResult\u003c/code\u003e with the authentication schema to be used. In this case, it is Auth0, which is the schema we associated with our OpenID Connect middleware in the \u003ccode\u003eStartup\u003c/code\u003e class. This result is a built-in class shipped with ASP.NET Core to initiate an authentication handshake from the authentication middleware.\u003c/p\u003e\u003cp\u003eThe logout action looks as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// BFF/Controllers/AuthController.cs\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\n\n\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eAuthorize\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eActionResult\u003c/span\u003e \u003cspan\u003eLogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eSignOutResult\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eAuthenticationProperties\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    RedirectUri \u003cspan\u003e=\u003c/span\u003e Url\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAction\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Index\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;Home\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt returns a \u003ccode\u003eSignOutResult\u003c/code\u003e that will log the user out of the application and also initiate the sign-out process with Auth0. As it happened with the \u003ccode\u003eChallengeResult\u003c/code\u003e, this \u003ccode\u003eSignOutResult\u003c/code\u003e is also a built-in result that the authentication middleware will process. We also decorated the action with the \u003ccode\u003e\u003cspan\u003e[\u003c/span\u003eAuthorize\u003cspan\u003e]\u003c/span\u003e\u003c/code\u003e attribute as it should only be invoked if the user is authenticated.\u003c/p\u003e\u003cp\u003eFinally, the \u003ccode\u003eGetUser\u003c/code\u003e API code is the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// BFF/Controllers/AuthController.cs\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eActionResult\u003c/span\u003e \u003cspan\u003eGetUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eUser\u003cspan\u003e.\u003c/span\u003eIdentity\u003cspan\u003e.\u003c/span\u003eIsAuthenticated\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e claims \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eClaimsIdentity\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eUser\u003cspan\u003e.\u003c/span\u003eIdentity\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eClaims\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSelect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ec \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n                    \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e type \u003cspan\u003e=\u003c/span\u003e c\u003cspan\u003e.\u003c/span\u003eType\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003evalue\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e c\u003cspan\u003e.\u003c/span\u003eValue \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eToArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e isAuthenticated \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e claims \u003cspan\u003e=\u003c/span\u003e claims \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n \u003cspan\u003e}\u003c/span\u003e\n\n \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eJson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e isAuthenticated \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf the user is authenticated, it returns the user identity as a set of claims serialized as JSON. Otherwise, it just returns a flag indicating the user is not authenticated.\u003c/p\u003e\u003ch3 id=\"Require-authentication-in-other-controllers\"\u003eRequire authentication in other controllers\u003c/h3\u003e\u003cp\u003eThe \u003ccode\u003eWeatherForecast\u003c/code\u003e controller included in the template allows anonymous calls. To make it more interesting in our sample, we will convert it to require authenticated calls. Fortunately, that is as simple as adding a top-level \u003ccode\u003eAuthorize\u003c/code\u003e attribute in the class definition.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// BFF/Controllers/WeatherForecastController.cs\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\n\n\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eApiController\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eAuthorize\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eRoute\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;[controller]\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eWeatherForecastController\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eControllerBase\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Negotiate-an-Access-Token-and-call-a-remote-API\"\u003eNegotiate an Access Token and call a remote API\u003c/h3\u003e\u003cp\u003eWe will convert the \u003ccode\u003eWeatherForecast\u003c/code\u003e controller in our web application to act as a reverse proxy and call the equivalent API hosted remotely on a different site. This API will require an access token, so the controller will have to negotiate first the authorization code that is persisted in the session cookie.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eWeatherForecastController\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003eIHttpClientFactory\u003c/span\u003e httpClientFactory\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003eIConfiguration\u003c/span\u003e configuration\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    _httpClientFactory \u003cspan\u003e=\u003c/span\u003e httpClientFactory\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;WeatherApiEndpoint\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003ethrow\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eArgumentNullException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;The Weather Api Endpoint is missing from the configuration\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    _apiEndpoint \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eUri\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003econfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;WeatherApiEndpoint\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e UriKind\u003cspan\u003e.\u003c/span\u003eAbsolute\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe constructor on this controller receives an instance of an \u003ccode\u003eIHttpClientFactory\u003c/code\u003e that we previously registered in the \u003ccode\u003eStartup\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e file for creating \u003ccode\u003eHttpClient\u003c/code\u003e instances and an instance of \u003ccode\u003eIConfiguration\u003c/code\u003e to retrieve settings from the configuration file. The endpoint for the Weather API is retrieved from the configuration using the \u003ccode\u003eWeatherApiEndpoint\u003c/code\u003e key. That key in the \u003ccode\u003eappSettings\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e only references the URL for the remote API as it is shown below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// appSettings.json\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e// ... other settings ...\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;WeatherApiEndpoint\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;https://localhost:44385/\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe following code shows the implementation of the \u003ccode\u003eGet\u003c/code\u003e method. This is the actual remote API invoked by passing the expected authorization headers:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// BFF/Controllers/WeatherForecastController.cs\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\n\n\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eHttpGet\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003eTask\u003c/span\u003e \u003cspan\u003eGet\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e accessToken \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e HttpContext\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eGetTokenAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;access_token\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e httpClient \u003cspan\u003e=\u003c/span\u003e _httpClientFactory\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eCreateClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e request \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eHttpRequestMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eHttpMethod\u003cspan\u003e.\u003c/span\u003eGet\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eUri\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e_apiEndpoint\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;WeatherForecast\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    request\u003cspan\u003e.\u003c/span\u003eHeaders\u003cspan\u003e.\u003c/span\u003eAuthorization \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eAuthenticationHeaderValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Bearer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e accessToken\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e response \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e httpClient\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSendAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003erequest\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    response\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eEnsureSuccessStatusCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003eawait\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003eContent\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eCopyToAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eHttpContext\u003cspan\u003e.\u003c/span\u003eResponse\u003cspan\u003e.\u003c/span\u003eBody\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe trick for getting the access token is in the following line,\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e accessToken \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e HttpContext\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eGetTokenAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;access_token\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eGetTokenAsync\u003c/code\u003e is an extension method available as part of the authentication middleware in ASP.NET Core. The first argument specifies the authentication schema to be used to get the token, which is our OpenID Connect middleware configured with the name \u0026#34;Auth0\u0026#34;. The second argument is the token to be used. In the case of OpenID Connect, the possible values are \u0026#34;access_token\u0026#34; or \u0026#34;id_token\u0026#34;. If the access token is not available or already expired, the middleware will use the refresh token and authorization code to get one. Since our middleware was pointing to the \u003ccode\u003eWeatherForecast\u003c/code\u003e API with the audience attribute and the scope we previously configured, Auth0 will return an access token for that API.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e httpClient \u003cspan\u003e=\u003c/span\u003e _httpClientFactory\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eCreateClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e request \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eHttpRequestMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eHttpMethod\u003cspan\u003e.\u003c/span\u003eGet\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eUri\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e_apiEndpoint\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;WeatherForecast\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\nrequest\u003cspan\u003e.\u003c/span\u003eHeaders\u003cspan\u003e.\u003c/span\u003eAuthorization \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eAuthenticationHeaderValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Bearer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e accessToken\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e response \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e httpClient\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSendAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003erequest\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\nresponse\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eEnsureSuccessStatusCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eawait\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003eContent\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eCopyToAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eHttpContext\u003cspan\u003e.\u003c/span\u003eResponse\u003cspan\u003e.\u003c/span\u003eBody\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe code above forwards the request to the remote API using a new instance of \u003ccode\u003eHttpClient\u003c/code\u003e created with the \u003ccode\u003eIHttpClientFactory\u003c/code\u003e injected in the constructor. The access token is passed as a \u003cem\u003eBearer\u003c/em\u003e token in the authorization header.\u003c/p\u003e\u003ch2 id=\"Configuring-the-Remote-API\"\u003eConfiguring the Remote API\u003c/h2\u003e\u003cp\u003eAs the remote API, we will use the one provided with Visual Studio\u0026#39;s ASP.NET Web API template that returns the weather forecast data.\u003c/p\u003e\u003ch3 id=\"Create-the-ASP-NET-Core-API-in-Visual-Studio\"\u003eCreate the ASP.NET Core API in Visual Studio\u003c/h3\u003e\u003cp\u003eVisual Studio ships with a single template for .NET Core APIs. That is \u003cem\u003eASP.NET Core Web API\u003c/em\u003e, as it is shown in the image below.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2BaHhqSQTjwbHWK9jjcP9X/31a204c719db633e53220a2563d68208/aspnet-visual-studio-template.png\" alt=\"ASP.NET template in Visual Studio\"/\u003e\u003c/p\u003e\u003ch3 id=\"The-structure-of-the-project\"\u003eThe structure of the project\u003c/h3\u003e\u003cp\u003eProjects created with that template from Visual Studio will have the following structure:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eControllers\u003c/code\u003e, this folder contains the controllers for the API implementation.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eStartup\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e, this is the main class where the ASP.NET Core middleware classes and the dependency injection container are configured.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Configuring-the-project\"\u003eConfiguring the project\u003c/h3\u003e\u003cp\u003eOur application will only use the middleware for supporting authentication with JWT as bearer tokens.\u003c/p\u003e\u003cp\u003eOpen the Package Manager Console for NuGet in Visual Studio and run the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eInstall-Package Microsoft.AspNetCore.Authentication.JwtBearer\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce the NuGet packages are installed in our project, we can go ahead and configure them in the \u003ccode\u003eStartup\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e class file.\u003c/p\u003e\u003cp\u003eModify the \u003ccode\u003eConfigureServices\u003c/code\u003e method in that class to include the following code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Api/Startup.cs\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIServiceCollection\u003c/span\u003e services\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e authentication \u003cspan\u003e=\u003c/span\u003e services\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eJwtBearerDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddJwtBearer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Bearer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e c \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n        c\u003cspan\u003e.\u003c/span\u003eAuthority \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e$\u0026#34;https://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eConfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        c\u003cspan\u003e.\u003c/span\u003eTokenValidationParameters \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eTokenValidationParameters\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            ValidateAudience \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            ValidAudiences \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Audience\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSplit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            ValidateIssuer \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            ValidIssuer \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e$\u0026#34;https://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eConfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddControllers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \n    services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddSwaggerGen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ec \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        c\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSwaggerDoc\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eOpenApiInfo\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e Title \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Api\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e Version \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    services\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuthorization\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eo \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        o\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddPolicy\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;read:weather\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e p \u003cspan\u003e=\u0026gt;\u003c/span\u003e p\u003cspan\u003e.\u003c/span\u003e\n            \u003cspan\u003eRequireAuthenticatedUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n            \u003cspan\u003eRequireScope\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;read:weather\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis code performs two things. It configures the JWT middleware to accept access tokens issued by Auth0 and defines an authorization policy for checking the scope set on the token. \nThe policy checks for a claim or attribute called \u003cem\u003escope\u003c/em\u003e with a value \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eweather\u003c/code\u003e, which is the scope we previously configured for our API in the Auth0 dashboard. \n\u003ccode\u003eRequireScope\u003c/code\u003e is a custom extension we will write as part of this sample to check for the scope present in the JWT access token.\u003c/p\u003e\u003cp\u003eThe next step is to modify the \u003ccode\u003eConfigure\u003c/code\u003e method to tell ASP.NET Core that we want to use the authentication and authorization middleware. That middleware will integrate automatically with the authentication session cookies.\u003c/p\u003e\u003cp\u003eInsert the new code as shown below in the \u003ccode\u003eStartup\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Api/Startup.cs\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eConfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eIApplicationBuilder\u003c/span\u003e app\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eIWebHostEnvironment\u003c/span\u003e env\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e// ...existing code...\u003c/span\u003e\n  \n  app\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseRouting\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \n  app\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  app\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthorization\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  app\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseEndpoints\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eendpoints \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    endpoints\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eMapControllers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUpdate the existing \u003ccode\u003eappSettings\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e file and include the settings we got from the Auth0 dashboard before. Those are \u003cem\u003eDomain\u003c/em\u003e and API\u0026#39;s \u003cem\u003eAudience\u003c/em\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;Logging\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;LogLevel\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;Default\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Information\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;Microsoft\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Warning\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;Microsoft.Hosting.Lifetime\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Information\u0026#34;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;AllowedHosts\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026lt;domain\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;Audience\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;https://weatherforecast\u0026#34;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"RequireScope-policy\"\u003eRequireScope policy\u003c/h3\u003e\u003cp\u003eASP.NET Core does not include any policy out of the box for checking an individual scope in a JWT access token. To overcome this shortcoming, we will create a custom policy. For this purpose, create a new \u003ccode\u003eAuthorization\u003c/code\u003e folder. Then add three new files on it, \u003ccode\u003eScopeHandler\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e, \u003ccode\u003eScopeRequirement\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e, and  \u003ccode\u003eAuthorizationPolicyBuilderExtensions\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e. We will discuss the purpose of each one next. \u003c/p\u003e\u003cp\u003eAdd a new file \u003ccode\u003eScopeHandler\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e to the \u003ccode\u003eAuthorization\u003c/code\u003e folder with the following content:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Api/Authorization/ScopeHandler.cs\u003c/span\u003e\n\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eMicrosoft\u003cspan\u003e.\u003c/span\u003eAspNetCore\u003cspan\u003e.\u003c/span\u003eAuthorization\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eCollections\u003cspan\u003e.\u003c/span\u003eGeneric\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eLinq\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eThreading\u003cspan\u003e.\u003c/span\u003eTasks\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003eApi\u003cspan\u003e.\u003c/span\u003eAuthorization\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eScopeHandler\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e\n             \u003cspan\u003e\u003cspan\u003eAuthorizationHandler\u003cspan\u003e\u0026lt;\u003c/span\u003eScopeRequirement\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eprotected\u003c/span\u003e \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003eTask\u003c/span\u003e \u003cspan\u003eHandleRequirementAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          \u003cspan\u003eAuthorizationHandlerContext\u003c/span\u003e context\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003eScopeRequirement\u003c/span\u003e requirement\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtext \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003ethrow\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eArgumentNullException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enameof\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003econtext\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n\n            \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e success \u003cspan\u003e=\u003c/span\u003e context\u003cspan\u003e.\u003c/span\u003eUser\u003cspan\u003e.\u003c/span\u003eClaims\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAny\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ec \u003cspan\u003e=\u0026gt;\u003c/span\u003e c\u003cspan\u003e.\u003c/span\u003eType \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#34;scope\u0026#34;\u003c/span\u003e \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \n                c\u003cspan\u003e.\u003c/span\u003eValue\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eContains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003erequirement\u003cspan\u003e.\u003c/span\u003eScope\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n            \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003esuccess\u003cspan\u003e)\u003c/span\u003e\n                context\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSucceed\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003erequirement\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n            \n            \u003cspan\u003ereturn\u003c/span\u003e Task\u003cspan\u003e.\u003c/span\u003eCompletedTask\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe authentication middleware parses the JWT access token and converts each attribute in the token as a claim attached to the current user in context. Our policy handler uses the claim associated with the scope for checking that the expected scope is there (\u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eweather\u003c/code\u003e).\u003c/p\u003e\u003cp\u003eEvery implementation of \u003ccode\u003eAuthorizationHandler\u003c/code\u003e must be associated with an implementation of \u003ccode\u003eIAuthorizationRequirement\u003c/code\u003e that describes the authorization requirements for the handler. In our case, the implementation looks as it is described in the following.\u003c/p\u003e\u003cp\u003eAdd the following content in the \u003ccode\u003eScopeRequirement\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e file,\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Api/Authorization/ScopeRequirement.cs\u003c/span\u003e\n\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eMicrosoft\u003cspan\u003e.\u003c/span\u003eAspNetCore\u003cspan\u003e.\u003c/span\u003eAuthorization\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eCollections\u003cspan\u003e.\u003c/span\u003eGeneric\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eLinq\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eThreading\u003cspan\u003e.\u003c/span\u003eTasks\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003eApi\u003cspan\u003e.\u003c/span\u003eAuthorization\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eScopeRequirement\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eIAuthorizationRequirement\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e Scope \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eScopeRequirement\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e scope\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            Scope \u003cspan\u003e=\u003c/span\u003e scope\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt\u0026#39;s a very simple implementation that describes a requirement in terms of a scope. That\u0026#39;s the expected scope in the JWT Access Token.\u003c/p\u003e\u003cp\u003eFinally, the class \u003ccode\u003eAuthorizationPolicyBuilderExtensions\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e includes the \u003ccode\u003eRequireScope\u003c/code\u003e extension method for injecting the \u003ccode\u003eScopeHandler\u003c/code\u003e instance in the \u003ccode\u003eStartup\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e class when the policy is configured.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Api/Authorization/AuthorizationPolicyBuilderExtensions.cs\u003c/span\u003e\n\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eMicrosoft\u003cspan\u003e.\u003c/span\u003eAspNetCore\u003cspan\u003e.\u003c/span\u003eAuthorization\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eCollections\u003cspan\u003e.\u003c/span\u003eGeneric\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eLinq\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eThreading\u003cspan\u003e.\u003c/span\u003eTasks\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003eApi\u003cspan\u003e.\u003c/span\u003eAuthorization\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthorizationPolicyBuilderExtensions\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003eAuthorizationPolicyBuilder\u003c/span\u003e \u003cspan\u003eRequireScope\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e \u003cspan\u003eAuthorizationPolicyBuilder\u003c/span\u003e builder\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e scope\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e builder\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddRequirements\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eScopeRequirement\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003escope\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Require-authentication-in-the-API-controller\"\u003eRequire authentication in the API controller\u003c/h3\u003e\u003cp\u003eThe \u003ccode\u003eWeatherForecast\u003c/code\u003e controller included in the template allows anonymous calls. We will convert it to require authenticated calls using the \u003ccode\u003eAuthorize\u003c/code\u003e attribute. That attribute will also reference the policy we previously defined in the \u003ccode\u003eStartup\u003cspan\u003e.\u003c/span\u003ecs\u003c/code\u003e file.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Api/Controllers/WeatherForecastController.cs\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\n\n\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eApiController\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eRoute\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;[controller]\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eWeatherForecastController\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eControllerBase\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eHttpGet\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eAuthorize\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;read:weather\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eIEnumerable\u003cspan\u003e\u0026lt;\u003c/span\u003eWeatherForecast\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eGet\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    \n\u003cspan\u003e// ...existing code...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis attribute will do two things,\u003c/p\u003e\u003cul\u003e\u003cli\u003eIt will activate the authorization middleware that will check if the call was authenticated and there is one user identity set in the current execution context.\u003c/li\u003e\u003cli\u003eIt will run the \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eweather\u003c/code\u003e policy to make sure the user identity contains the required permissions. In our case, it will check the access token includes a scope called \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eweather\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eOnce we run this project in Visual Studio, the API will only accept authenticated calls with access tokens coming from Auth0.\u003c/p\u003e\u003ch2 id=\"Securing-the-React-Application\"\u003eSecuring the React Application\u003c/h2\u003e\u003cp\u003eSo far, we have added all the plumbing code on the backend to enable authentication with Auth0 using OpenID Connect. The backend handles user authentication and configures a cookie that we can share with the React app. We also added a \u003ccode\u003eGetUser\u003c/code\u003e API that can be used to determine whether the user is authenticated and get basic identity information about them. Let\u0026#39;s now see the needed changes for the React client application.\u003c/p\u003e\u003ch3 id=\"React-Context-for-Authentication\"\u003eReact Context for Authentication\u003c/h3\u003e\u003cp\u003eAs authentication is a core concern that we will use across all the components in the React application, it makes sense to make it available as a global context using \u003ca href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe context pattern\u003c/a\u003e. \nMove into \u003ccode\u003e\u003cspan\u003eBFF\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eClientApp\u003cspan\u003e/\u003c/span\u003esrc\u003c/code\u003e folder and create a \u003ccode\u003econtext\u003c/code\u003e folder. Then add a file \u003ccode\u003eAuthContext\u003cspan\u003e.\u003c/span\u003ejs\u003c/code\u003e to the newly created folder. Paste the following code on the file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// BFF/ClientApp/src/context/AuthContext.js\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e React\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e useState\u003cspan\u003e,\u003c/span\u003e useEffect\u003cspan\u003e,\u003c/span\u003e useContext \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;react\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003econst\u003c/span\u003e AuthContext \u003cspan\u003e=\u003c/span\u003e React\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateContext\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003euseAuth\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003euseContext\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eAuthContext\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eAuthProvider\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\n    children\n\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eisAuthenticated\u003cspan\u003e,\u003c/span\u003e setIsAuthenticated\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003euser\u003cspan\u003e,\u003c/span\u003e setUser\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eisLoading\u003cspan\u003e,\u003c/span\u003e setIsLoading\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003egetUser\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003econst\u003c/span\u003e response \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e \u003cspan\u003efetch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/auth/getUser\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003econst\u003c/span\u003e json \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003esetIsAuthenticated\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ejson\u003cspan\u003e.\u003c/span\u003eisAuthenticated\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003esetIsLoading\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ejson\u003cspan\u003e.\u003c/span\u003eisAuthenticated\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003esetUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ejson\u003cspan\u003e.\u003c/span\u003eclaims\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003egetUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003elogin\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        window\u003cspan\u003e.\u003c/span\u003elocation\u003cspan\u003e.\u003c/span\u003ehref \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;/auth/login\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003elogout\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        window\u003cspan\u003e.\u003c/span\u003elocation\u003cspan\u003e.\u003c/span\u003ehref \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;/auth/logout\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003eAuthContext\u003cspan\u003e.\u003c/span\u003eProvider\n            value\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n                isAuthenticated\u003cspan\u003e,\u003c/span\u003e\n                user\u003cspan\u003e,\u003c/span\u003e\n                isLoading\u003cspan\u003e,\u003c/span\u003e\n                login\u003cspan\u003e,\u003c/span\u003e\n                logout\n            \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003echildren\u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eAuthContext\u003cspan\u003e.\u003c/span\u003eProvider\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis context object provides methods for starting the login and logout handshake with the backend and getting the authenticated user.\u003c/p\u003e\u003cp\u003eModify the \u003ccode\u003eindex\u003cspan\u003e.\u003c/span\u003ejs\u003c/code\u003e file to reference this context provider.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// BFF/ClientApp/src/index.js\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\n\nReactDOM\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003eAuthProvider\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003eBrowserRouter basename\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003ebaseUrl\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;\u003c/span\u003eApp \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eBrowserRouter\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eAuthProvider\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    rootElement\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Add-the-login-and-logout-routes\"\u003eAdd the login and logout routes\u003c/h3\u003e\u003cp\u003eThe React Router configuration uses the authentication context to redirect the user to login and logout URLs on the backend. It also forces the user authentication for routes that are protected, such as the one for fetching the weather data. \u003c/p\u003e\u003cp\u003eTo add these protected routes, modify the \u003ccode\u003eApp\u003cspan\u003e.\u003c/span\u003ejs\u003c/code\u003e file to include this code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// BFF/ClientApp/src/App.js\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e Redirect\u003cspan\u003e,\u003c/span\u003e Route \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;react-router\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e Layout \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;./components/Layout\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e Home \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;./components/Home\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e FetchData \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;./components/FetchData\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e useAuth \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;./context/AuthContext\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#39;./custom.css\u0026#39;\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eApp\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e isAuthenticated\u003cspan\u003e,\u003c/span\u003e login\u003cspan\u003e,\u003c/span\u003e logout \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003euseAuth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003eLayout\u003cspan\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;\u003c/span\u003eRoute exact path\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;/\u0026#39;\u003c/span\u003e component\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eHome\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;\u003c/span\u003eRoute path\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;/fetch-data\u0026#39;\u003c/span\u003e component\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eisAuthenticated \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003eFetchData \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;\u003c/span\u003eRoute path\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;/login\u0026#39;\u003c/span\u003e component\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003elogin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;\u003c/span\u003eRoute path\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;/logout\u0026#39;\u003c/span\u003e component\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003elogout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eRoute\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eLayout\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003edefault\u003c/span\u003e App\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003efetch\u003cspan\u003e-\u003c/span\u003edata\u003c/code\u003e route, for example, checks if the user is authenticated before returning the \u003ccode\u003eFetchData\u003c/code\u003e component. If the user is not authenticated, it calls the \u003ccode\u003elogin\u003c/code\u003e function in the authentication context, which ultimately redirects the user to the \u003ccode\u003eLogin\u003c/code\u003e endpoint in the backend.\u003c/p\u003e\u003cp\u003eAnother very common feature in web applications is to make menu options visible or not, depending on the user authentication status.\nAs we did in the React Router, the same thing can be accomplished for the menu options using the \u003ccode\u003eisAuthenticated\u003c/code\u003e function from the authentication context.\u003c/p\u003e\u003cp\u003eSo, move to the \u003ccode\u003eClientApp\u003cspan\u003e/\u003c/span\u003esrc\u003cspan\u003e/\u003c/span\u003ecomponents\u003c/code\u003e folder. Then modify the \u003ccode\u003eNavMenu\u003cspan\u003e.\u003c/span\u003ejs\u003c/code\u003e file to check the authentication status as it is shown below.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// BFF/ClientApp/src/components/NavMenu.js\u003c/span\u003e\n\n\u003cspan\u003e// ...existing code...\u003c/span\u003e\n\n\u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003eheader\u003cspan\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;\u003c/span\u003eNavbar className\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\u0026#34;\u003c/span\u003e light\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                \u003cspan\u003e\u0026lt;\u003c/span\u003eContainer\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                    \u003cspan\u003e\u0026lt;\u003c/span\u003eNavbarBrand tag\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eLink\u003cspan\u003e}\u003c/span\u003e to\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003eAuth0 Backend For FrontEnd Authentication\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eNavbarBrand\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                    \u003cspan\u003e\u0026lt;\u003c/span\u003eNavbarToggler onClick\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003etoggleNavbar\u003cspan\u003e}\u003c/span\u003e className\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;mr-2\u0026#34;\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                    \u003cspan\u003e\u0026lt;\u003c/span\u003eCollapse className\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;d-sm-inline-flex flex-sm-row-reverse\u0026#34;\u003c/span\u003e isOpen\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003ecollapsed\u003cspan\u003e}\u003c/span\u003e navbar\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                        \u003cspan\u003e\u0026lt;\u003c/span\u003eul className\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;navbar-nav flex-grow\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                            \u003cspan\u003e\u0026lt;\u003c/span\u003eNavItem\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                                \u003cspan\u003e\u0026lt;\u003c/span\u003eNavLink tag\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eLink\u003cspan\u003e}\u003c/span\u003e className\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;text-dark\u0026#34;\u003c/span\u003e to\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003eHome\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eNavLink\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                            \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eNavItem\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                            \u003cspan\u003e\u0026lt;\u003c/span\u003eNavItem\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                                \u003cspan\u003e\u0026lt;\u003c/span\u003eNavLink tag\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eLink\u003cspan\u003e}\u003c/span\u003e className\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;text-dark\u0026#34;\u003c/span\u003e to\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;/fetch-data\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003eFetch data\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eNavLink\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                            \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eNavItem\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                            \u003cspan\u003e\u0026lt;\u003c/span\u003eNavItem\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                            \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003eisAuthenticated \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003eNavItem\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                                \u003cspan\u003e\u0026lt;\u003c/span\u003eNavLink tag\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eLink\u003cspan\u003e}\u003c/span\u003e className\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;text-dark\u0026#34;\u003c/span\u003e to\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;/login\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003eLogin\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eNavLink\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                            \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eNavItem\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n                            \u003cspan\u003e{\u003c/span\u003eisAuthenticated \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003eNavItem\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                                \u003cspan\u003e\u0026lt;\u003c/span\u003eNavLink tag\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eLink\u003cspan\u003e}\u003c/span\u003e className\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;text-dark\u0026#34;\u003c/span\u003e to\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;/logout\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003eLogout\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eNavLink\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                            \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eNavItem\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n                        \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eul\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                    \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eCollapse\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eContainer\u003cspan\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eNavbar\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eheader\u003cspan\u003e\u0026gt;\u003c/span\u003e\n \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n                             \n\u003cspan\u003e// ...existing code...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Add-a-component-to-show-user-data\"\u003eAdd a component to show user data\u003c/h3\u003e\u003cp\u003eThe authentication context provides a \u003ccode\u003egetUser\u003c/code\u003e function in case you want to show the user\u0026#39;s basic data coming from Auth0 on the React application. That function returns a collection of claims about the user\u0026#39;s identity coming from the backend API \u003ccode\u003eGetUser\u003c/code\u003e. \u003c/p\u003e\u003cp\u003eThe following code shows a component that enumerates those claims.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// BFF/ClientApp/src/components/User.js\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e React\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e useEffect\u003cspan\u003e,\u003c/span\u003e useState \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;react\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e useAuth \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;../context/AuthContext\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e user \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003euseAuth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003erenderClaimsTable\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eclaims\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;\u003c/span\u003etable className\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;table table-striped\u0026#39;\u003c/span\u003e aria\u003cspan\u003e-\u003c/span\u003elabelledby\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;tabelLabel\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                \u003cspan\u003e\u0026lt;\u003c/span\u003ethead\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                    \u003cspan\u003e\u0026lt;\u003c/span\u003etr\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                        \u003cspan\u003e\u0026lt;\u003c/span\u003eth\u003cspan\u003e\u0026gt;\u003c/span\u003eType\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eth\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                        \u003cspan\u003e\u0026lt;\u003c/span\u003eth\u003cspan\u003e\u0026gt;\u003c/span\u003eValue\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eth\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                    \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003etr\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ethead\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                \u003cspan\u003e\u0026lt;\u003c/span\u003etbody\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                    \u003cspan\u003e{\u003c/span\u003eclaims\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eclaim\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n                        \u003cspan\u003e\u0026lt;\u003c/span\u003etr key\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eclaim\u003cspan\u003e.\u003c/span\u003etype\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                            \u003cspan\u003e\u0026lt;\u003c/span\u003etd\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eclaim\u003cspan\u003e.\u003c/span\u003etype\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003etd\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                            \u003cspan\u003e\u0026lt;\u003c/span\u003etd\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eclaim\u003cspan\u003e.\u003c/span\u003evalue\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003etd\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                        \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003etr\u003cspan\u003e\u0026gt;\u003c/span\u003e\n                    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n                \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003etbody\u003cspan\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003etable\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;\u003c/span\u003eh1 id\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;tabelLabel\u0026#34;\u003c/span\u003e \u003cspan\u003e\u0026gt;\u003c/span\u003eUser claims\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eh1\u003cspan\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;\u003c/span\u003ep\u003cspan\u003e\u0026gt;\u003c/span\u003eThis component demonstrates fetching user identity claims \u003cspan\u003efrom\u003c/span\u003e the server\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ep\u003cspan\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003erenderClaimsTable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003euser\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Run-the-Web-Application\"\u003eRun the Web Application\u003c/h2\u003e\u003cp\u003eFrom Visual Studio, click on the Run button but select your project name from the dropdown option instead of \u0026#34;IIS Express\u0026#34;. That will run the application using the Kestrel, the built-in web server included in .NET Core. Kestrel runs on \u0026#34;\u003ca href=\"https://localhost:5001\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://localhost:5001\u003c/a\u003e\u0026#34;, which is the URL we previously configured in Auth0.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1VJBYyC1Z9GUCS5VQRA1dT/4b16fd875e261f2aa17cb968f1f01187/run-bff-application.png\" alt=\"Running your application\"/\u003e\u003c/p\u003e\u003ch2 id=\"About-the-Login-Flow\"\u003eAbout the Login Flow\u003c/h2\u003e\u003cp\u003eHere is what happens when the user authenticates with the application we have built:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe user clicks on the \u003cem\u003eLog In\u003c/em\u003e button and is directed to the \u003ccode\u003eLogin\u003c/code\u003e route.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003eChallengeResult\u003c/code\u003e response tells the ASP.NET authentication middleware to issue a challenge to the authentication handler registered with the Auth0 authentication scheme parameter. The parameter uses the \u0026#34;Auth0\u0026#34; value you passed in the call to \u003ccode\u003eAddOpenIdConnect\u003c/code\u003e in the \u003ccode\u003eStartup\u003c/code\u003e class.\u003c/li\u003e\u003cli\u003eThe OIDC handler redirects the user to the Auth0\u0026#39;s \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eauthorize\u003c/code\u003e endpoint, which displays the \u003ca href=\"https://auth0.com/docs/universal-login\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eUniversal Login page\u003c/a\u003e. The user can log in with their username and password, social provider, or any other identity provider.\u003c/li\u003e\u003cli\u003eOnce the user has logged in, Auth0 calls back to the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003ecallback\u003c/code\u003e endpoint in your application and passes along an authorization code.\u003c/li\u003e\u003cli\u003eThe OIDC handler intercepts requests made to the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003ecallback\u003c/code\u003e path.\u003c/li\u003e\u003cli\u003eThe handler looks for the authorization code, which Auth0 sent in the query string.\u003c/li\u003e\u003cli\u003eThe OIDC handler calls the Auth0\u0026#39;s \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eoauth\u003cspan\u003e/\u003c/span\u003etoken\u003c/code\u003e endpoint to exchange the authorization code for the user\u0026#39;s ID and access token.\u003c/li\u003e\u003cli\u003eThe OIDC middleware extracts the user information from the claims in the ID token.\u003c/li\u003e\u003cli\u003eThe OIDC middleware returns a successful authentication response and sets a cookie that indicates that the user is authenticated. The cookie contains the claims with the user\u0026#39;s information. The cookie is stored so that the cookie middleware will automatically authenticate the user on any future requests. The OIDC middleware receives no more requests unless it is explicitly challenged.\u003c/li\u003e\u003cli\u003eThe React application uses the authentication context to issue an API call to the \u003ccode\u003eGetUser\u003c/code\u003e API. This API returns the user claims from the authentication cookie.\u003c/li\u003e\u003cli\u003eThe React application renders the UI Component using the authenticated user\u0026#39;s identity.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eThe BFF pattern is an ideal solution for authentication if you can afford to pay extra money for a dedicated backend. It will help you avoid headaches when dealing with access tokens and how to keep them safe on your client-side application. The backend will do all the heavy lifting, so that you can focus only on UI/UX concerns in the frontend.\u003c/p\u003e\u003cp\u003eYou can download from \u003ca href=\"https://github.com/auth0-blog/bff-auth0-dotnet\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis GitHub repository\u003c/a\u003e the full source code of the sample project built in this article.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Understand the Backend For Frontend authentication pattern and how it can be implemented in ASP.NET with Auth0.",
      "date_published": "2021-09-14T15:04:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/what-smart-on-fhir-means-for-the-future-of-healthcare/",
      "title": "What SMART on FHIR Means for the Future of Healthcare",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eMost health systems know that seamless omnichannel customer engagement (a “digital front door”) is essential in order to deliver the personalized, value-based \u003ca href=\"https://www2.deloitte.com/us/en/insights/industry/health-care/consumer-health-trends.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehealthcare today’s consumers expect\u003c/a\u003e. In practice, however, implementing this digital front door strategy is challenging for \u003ca href=\"https://www.healthit.gov/sites/default/files/page/2021-02/Use-of-Certified-Health-IT-and-Methods-to-Enable-Interoperability-by-U.S.-Non-Federal-Acute-Care-Hospitals-2019.pdf\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emost healthcare systems\u003c/a\u003e, due to the \u003ca href=\"https://www.chiefhealthcareexecutive.com/view/consequences-of-fragmented-healthcare-information-systems\" target=\"_blank\" rel=\"noreferrer noopener\"\u003efragmented nature\u003c/a\u003e of healthcare information.\u003c/p\u003e\u003cp\u003eThe Substitutable Medical Applications and Reusable Technologies (SMART) platform promises to solve these data fragmentation challenges by standardizing how patient data is accessed and shared. And given SMART’s inclusion in the \u003ca href=\"https://www.federalregister.gov/documents/2020/05/01/2020-07419/21st-century-cures-act-interoperability-information-blocking-and-the-onc-health-it-certification\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e21st Century Cures Act\u003c/a\u003e, the platform will become the standard protocol for accessing electronic health records (EHRs) in the near future.\u003c/p\u003e\u003cp\u003eBelow, we explain what SMART means for the healthcare ecosystem and how it will improve both health data interoperability and the value of healthcare technology as a whole.\u003c/p\u003e\u003ch2 id=\"What-is-SMART-on-FHIR-\"\u003eWhat is SMART on FHIR?\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://smarthealthit.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSMART\u003c/a\u003e is an open-source, standards-based \u003ca href=\"https://auth0.com/blog/what-is-an-api-how-apis-work-for-non-developers/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAPI\u003c/a\u003e that leverages the \u003ca href=\"https://auth0.com/intro-to-iam/what-is-oauth-2/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOAuth 2.0\u003c/a\u003e standard to provide secure, universal access to EHRs. The SMART platform builds on the existing Fast Health Interoperability Resources (hence the name \u0026#34;SMART on FHIR\u0026#34;).\u003c/p\u003e\u003cp\u003eTogether, these two standards contain everything developers need to build applications that will work anywhere within the healthcare ecosystem:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003cstrong\u003eOpen standards\u003c/strong\u003e for protocols for authentication, authorization, and UI integration that define how to build applications with universal access to EHRs\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eOpen-source tools and libraries\u003c/strong\u003e for developers that make it easier to use SMART standards during application development. The platform also offers a free sandbox that helps developers test their apps before deployment\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAn application gallery\u003c/strong\u003e that highlights all of the existing healthcare applications and software that currently uses SMART on FHIR\u0026#39;s platform\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eThe original idea behind SMART was first introduced in \u003ca href=\"https://www.nejm.org/doi/full/10.1056/NEJMp0900411\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ean article\u003c/a\u003e in the New England Journal of Medicine back in 2009. With the help of federal funding in 2010, SMART developed into the platform it is today, which is currently used by both \u003ca href=\"https://azure.microsoft.com/en-us/blog/azure-api-for-fhir-moves-to-general-availability/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMicrosoft Azure\u003c/a\u003e and \u003ca href=\"https://www.apple.com/ios/health/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eApple\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"How-SMART-Improves-Healthcare-Interoperability-and-Delivery\"\u003eHow SMART Improves Healthcare Interoperability and Delivery\u003c/h2\u003e\u003cp\u003eSMART improves healthcare interoperability in the same way standard electrical sockets and plugs simplify the process of powering different devices in your home.\u003c/p\u003e\u003cp\u003eToday, most EHR databases use a proprietary API (their own unique plug and socket configuration). As a result, tech companies have to build a custom connection to each database in order to access medical data. Not only is this costly, but it also hinders the ability of healthcare providers and patients to access their data with the technology that works best for them.\u003c/p\u003e\u003cp\u003eSMART, on the other hand, provides a standard, universal API for accessing EHRs. Any technology built with SMART works with any EHR database that uses SMART as well. As a result, healthcare technology becomes interchangeable, allowing health systems and patients to access medical data on the applications that best suit their needs, rather than only the ones that work with the EHR database they use.\u003c/p\u003e\u003ch2 id=\"How-Improved-Interoperability-Improves-The-Value-of-Healthcare-Technology\"\u003eHow Improved Interoperability Improves The Value of Healthcare Technology\u003c/h2\u003e\u003cp\u003eInteroperability is valuable for healthcare tech companies because it \u0026#34;ensures [their] innovations can be broadly understood and developed,\u0026#34; as Dave Pickles, Founder and CTO of The Trade Desk, tells \u003ca href=\"https://www.forbes.com/sites/forbestechcouncil/2019/08/08/interoperability-and-the-future-of-software-development/?sh=2b59504d4767\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eForbes\u003c/a\u003e. And since SMART improves interoperability, it also encourages healthcare technology innovation.\u003c/p\u003e\u003cp\u003eFor example, SMART decouples the protocols for accessing EHRs from a piece of software itself. So it allows healthcare technology companies to improve their products and services without worrying about how it will impact the way patients and providers access their data. The result is faster development of healthcare applications, which improves the quality of the entire marketplace (and care for consumers) as a whole.\u003c/p\u003e\u003cp\u003eSMART also simplifies app development for tech companies. Developers no longer need to build custom connections to each EHR database — they can develop their apps once using SMART, and those apps will work with any EHR databases built with SMART. As a result, their apps become more useful to a broader audience of health organizations and consumers.\u003c/p\u003e\u003ch2 id=\"What-SMART-s-Inclusion-in-the-21st-Century-Cures-Act-Means\"\u003eWhat SMART\u0026#39;s Inclusion in the 21st Century Cures Act Means\u003c/h2\u003e\u003cp\u003eThe 21st Century Cures Act (passed in 2016) called for the adoption of a universal API that would \u0026#34;allow individuals to securely and easily access structured electronic health information using smartphone applications.\u0026#34; The Office of the National Coordinator for Health Information Technology’s (ONC’s) \u003ca href=\"https://www.healthit.gov/curesrule/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eFinal Rule on Interoperability\u003c/a\u003e (published in 2020) later named SMART as that universal API.\u003c/p\u003e\u003cp\u003eFor \u003ca href=\"https://www.healthit.gov/topic/certification-ehrs/about-onc-health-it-certification-program\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eONC-certified health IT\u003c/a\u003e (primarily government applications), this means SMART\u0026#39;s API is now a requirement. However, since the ONC certification program is voluntary for the private sector, SMART\u0026#39;s API isn\u0026#39;t legally required for companies whose technologies are not used in government applications.\u003c/p\u003e\u003cp\u003eThe Centers For Medicare and Medicaid Services (CMS) also includes policies in their regulations “which require or encourage payers to implement Application Programming Interfaces (APIs) to improve the electronic exchange of health care data.” SMART on FHIR is \u003ca href=\"https://www.cms.gov/Regulations-and-Guidance/Guidance/Interoperability/index\" target=\"_blank\" rel=\"noreferrer noopener\"\u003enamed as the preferred technical standard\u003c/a\u003e for doing so, meaning any health system that accepts Medicare or Medicaid must also adopt SMART.\u003c/p\u003e\u003ch2 id=\"SMART-on-FHIR-is-a-Must-For-Healthcare-Providers\"\u003eSMART on FHIR is a Must For Healthcare Providers\u003c/h2\u003e\u003cp\u003eGiven the benefits, as well as its inclusion in the Cures Act, adopting SMART is practically a necessity for any health system. For this reason, major EHR players like \u003ca href=\"https://smarthealthit.org/an-app-platform-for-healthcare/who-is-using-smart/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eEpic, Cerner, and Allscripts\u003c/a\u003e are already using SMART.\u003c/p\u003e\u003cp\u003eHowever, there are only 58 apps listed on \u003ca href=\"https://apps.smarthealthit.org/apps/featured\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSMART\u0026#39;s App Gallery\u003c/a\u003e as of the writing of this article, meaning few companies have incorporated the standard into their tech at this time. As a result, SMART adoption could be a sales advantage for some tech companies.\u003c/p\u003e\u003cp\u003eOutside of mandates, early adoption of SMART could also help healthcare tech companies ensure their applications become more widely adopted in the long run. Learn more about utilizing SMART on FHIR\u0026#39;s platform, tools, and API \u003ca href=\"https://smarthealthit.org/developer-resources/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "SMART on FHIR is poised to transform data interoperability — here's how it will improve healthcare.",
      "date_published": "2021-09-07T15:00:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/testing-aws-chalice-applications/",
      "title": "Testing AWS Chalice Applications",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eTL;DR:\u003c/strong\u003e In this tutorial, we will learn how to write unit tests and integration tests with Pytest in AWS Chalice applications. We will also learn how to measure test coverage.\u003c/p\u003e\u003ch2 id=\"Introduction\"\u003eIntroduction\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://aws.github.io/chalice/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAWS Chalice\u003c/a\u003e is a Python-based web micro-framework that leverages on the \u003ca href=\"https://aws.amazon.com/lambda/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAWS Lambda\u003c/a\u003e and \u003ca href=\"https://aws.amazon.com/api-gateway/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAPI Gateway\u003c/a\u003e services. It is used to create serverless applications. The Chalice experience is \u003ca href=\"https://flask.palletsprojects.com/en/2.0.x/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eFlask\u003c/a\u003e-like by way of features like semantics and syntax. For more details on creating and deploying Chalice applications, you can go through the article on \u003ca href=\"https://auth0.com/blog/how-to-create-crud-rest-api-with-aws-chalice/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehow to create CRUD REST API with AWS Chalice\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eWhen building applications, there is a need to \u003ca href=\"https://en.wikipedia.org/wiki/Software_testing\" target=\"_blank\" rel=\"noreferrer noopener\"\u003etest\u003c/a\u003e the code to avoid shipping bugs and unstable code. It also saves one a lot of debugging hours and makes deployments less stressful.\u003c/p\u003e\u003cp\u003eCommon forms of tests in software development include:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Unit_testing\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eUnit test\u003c/a\u003e: This tests a particular function, component, or logic in the code. This way, edge cases can easily be identified, isolated, and fixed. Unit tests usually involve inspecting the output of a function against a known or expected output.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Integration_testing\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eIntegration Test\u003c/a\u003e: examines multiple parts or the entire application in an end-to-end manner. It considers how each function or component works with the other.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eHowever, Chalice currently provides a test client for just unit tests. Therefore, the integration tests are written in a manner similar to unit tests with no major difference other than the fact that integration tests consist of multiple unit tests.\u003c/p\u003e\u003ch2 id=\"Where-to-Write-Tests\"\u003eWhere to Write Tests\u003c/h2\u003e\u003cp\u003eIn Python-based applications, tests are usually housed in \u003ccode\u003etest\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e files. These are the test files that will import the application logic to be tested.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s assume we have a simple Chalice application with a folder structure that looks like the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e├── app.py\n├── .chalice\n├── requirements.txt\n└── test.py\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHowever, as the application becomes bigger, a single \u003ccode\u003etest\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file would become bulky and can become difficult to work with. Hence, it is necessary to create a folder of tests called \u003ccode\u003etests\u003c/code\u003e and then split the tests into multiple test files inside the test folder.\u003c/p\u003e\u003cp\u003eNow, we\u0026#39;ll need to create a new folder called \u003ccode\u003etests\u003c/code\u003e and an empty \u003ccode\u003e__init__\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file inside the folder. The \u003ccode\u003e__init__\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e will allow Python to recognize the test directory as a package that could be run:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003emkdir\u003c/span\u003e tests \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan\u003ecd\u003c/span\u003e tests\n\u003cspan\u003etouch\u003c/span\u003e __init__.py\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, let\u0026#39;s create a test file for our application inside the test folder:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003etouch\u003c/span\u003e test_unit.py\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, the folder structure will look like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e├── app.py\n├── .chalice\n├── requirements.txt\n└── tests\n    ├── __init__.py\n    └── test_unit.py\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe can then create as many test files as we need in the \u003ccode\u003etests\u003c/code\u003e folder.\u003c/p\u003e\u003ch2 id=\"How-to-Do-Unit-Tests\"\u003eHow to Do Unit Tests\u003c/h2\u003e\u003cp\u003eSince the release of v.1.17.0, AWS Chalice has shipped with a test client that serves as a test runner to write tests in Chalice applications. We no longer need to set up boilerplates and logic for testing. We only need to import the test client into our test file.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s assume we have our Chalice application has an \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file that looks like the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efrom\u003c/span\u003e chalice \u003cspan\u003eimport\u003c/span\u003e Chalice\n\napp \u003cspan\u003e=\u003c/span\u003e Chalice\u003cspan\u003e(\u003c/span\u003eapp_name\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;chalice-api-sample\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\n\u003cspan\u003e@app\u003cspan\u003e.\u003c/span\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eindex\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;hello\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;world\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, we\u0026#39;ll modify the \u003ccode\u003etest_unit\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e app\n\u003cspan\u003efrom\u003c/span\u003e chalice\u003cspan\u003e.\u003c/span\u003etest \u003cspan\u003eimport\u003c/span\u003e Client\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the above code, we have just imported the \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e and the chalice test Client. Let\u0026#39;s add the following test code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003etest_index\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ewith\u003c/span\u003e Client\u003cspan\u003e(\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003eapp\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e client\u003cspan\u003e:\u003c/span\u003e\n        response \u003cspan\u003e=\u003c/span\u003e client\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eassert\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003estatus_code \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e\n        \u003cspan\u003eassert\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003ejson_body \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;hello\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;world\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the above test code:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003ewe instantiated the test Client to be used within the context of the particular test function. That implies that whenever we run the test, a test environment with resources and environment variables will be set up and then cleaned up after running the test.\u003c/li\u003e\u003cli\u003eWe made a \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e\u003c/code\u003e request via HTTP using the \u003ccode\u003eclient\u003cspan\u003e.\u003c/span\u003ehttp\u003c/code\u003e attribute.\u003c/li\u003e\u003cli\u003eWe assert that a \u003ccode\u003e\u003cspan\u003e200\u003c/span\u003e\u003c/code\u003e status code is returned in the response with a JSON response body—\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;hello\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;world\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eWe will install \u003ca href=\"https://docs.pytest.org/en/6.2.x/getting-started.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ePytest\u003c/a\u003e runner to run our test:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epip \u003cspan\u003einstall\u003c/span\u003e pytest\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, we will run with the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epy.test tests/test_unit.py\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe should get a response that looks like the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e \u003cspan\u003etest\u003c/span\u003e session starts \u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\nplatform win32 -- Python \u003cspan\u003e3.7\u003c/span\u003e.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1\nrootdir: C:\u003cspan\u003e\\\u003c/span\u003eaws-chalice-api-sample\ncollected \u003cspan\u003e1\u003c/span\u003e item\n\ntests\u003cspan\u003e\\\u003c/span\u003etest_unit.py \u003cspan\u003e.\u003c/span\u003e                                                                           \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e100\u003c/span\u003e%\u003cspan\u003e]\u003c/span\u003e\n\n\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e passed \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e.11s \u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Creating-mocks\"\u003eCreating mocks\u003c/h3\u003e\u003cp\u003eWe can try to \u003ca href=\"https://en.wikipedia.org/wiki/Mock_object\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emock\u003c/a\u003e an external API in order to learn how to \u003ca href=\"https://docs.python.org/3/library/unittest.mock.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003etest with mock variables\u003c/a\u003e. We will test a request from our app to an endpoint of \u003ca href=\"https://jsonplaceholder.typicode.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJSONPlaceholder\u003c/a\u003e API data service to get a list of dummy posts. Firstly, let us install the Python requests module:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epip \u003cspan\u003einstall\u003c/span\u003e requests\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, let\u0026#39;s add a function inside \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file to make a \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e\u003c/code\u003e request to the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003epost\u003c/code\u003e endpoint of JSONPlaceholder and return a list of posts:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e requests\n\n\u003cspan\u003e@app\u003cspan\u003e.\u003c/span\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/post\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eget_post\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    response \u003cspan\u003e=\u003c/span\u003e requests\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;https://jsonplaceholder.typicode.com/posts/1\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003eok\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003ejson\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the above code, we wrote a function called \u003ccode\u003eget_post\u003c/code\u003e that makes an HTTP request to the DummyAPI server and returns the response of the request in JSON form.\u003c/p\u003e\u003cp\u003eSo, we\u0026#39;ll add a mock inside the \u003ccode\u003etest_unit\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003efrom\u003c/span\u003e unittest\u003cspan\u003e.\u003c/span\u003emock \u003cspan\u003eimport\u003c/span\u003e patch\n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003e@patch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;app.requests.get\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003etest_get_post\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003emock_get\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;Mocking with the patch decorator to get a post from an External API\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n    mock_get\u003cspan\u003e.\u003c/span\u003ereturn_value\u003cspan\u003e.\u003c/span\u003eok \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eTrue\u003c/span\u003e\n    response \u003cspan\u003e=\u003c/span\u003e app\u003cspan\u003e.\u003c/span\u003eget_post\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eassert\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003eok\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the above code, we imported the patch function of the mock module. Then, we defined the patch function as a decorator with reference to the project\u0026#39;s \u003ccode\u003erequest\u003cspan\u003e.\u003c/span\u003eget\u003c/code\u003e. Then, we created a function called \u003ccode\u003etest_get_post\u003c/code\u003e with a parameter called \u003ccode\u003emock_get\u003c/code\u003e to test the \u003ccode\u003eget_post\u003c/code\u003e function inside the \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file. If the returned status of \u003ccode\u003emock_get\u003c/code\u003e is \u003ccode\u003eok\u003c/code\u003e, then a fake request to the JSONPlaceholder is made, after which an assertion of the status code of the response to the request is made. We ensured that the mock acts like it is making a real \u003ccode\u003erequest\u003cspan\u003e.\u003c/span\u003eget\u003c/code\u003e request to the JSONPlaceholder server, whereas it is a fake request. This allows us to test our code without dependence on the JSONPlaceholder external API server. \u003c/p\u003e\u003cp\u003eIf we run our test again with the following bash command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epy.test tests/test_unit.py\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe should get an output similar to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etest\u003c/span\u003e session starts \u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\nplatform win32 -- Python \u003cspan\u003e3.7\u003c/span\u003e.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1\nrootdir: C:\u003cspan\u003e\\\u003c/span\u003eaws-chalice-api-sample\nplugins: cov-2.12.1\ncollected \u003cspan\u003e2\u003c/span\u003e items\n\ntests\u003cspan\u003e\\\u003c/span\u003eunit\u003cspan\u003e\\\u003c/span\u003etest_unit.py \u003cspan\u003e..\u003c/span\u003e                                                                     \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e100\u003c/span\u003e%\u003cspan\u003e]\u003c/span\u003e\n\n\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003e passed \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e.85s \u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHow can we test when the desired response is not returned? That\u0026#39;s why we have an \u003ccode\u003e\u003cspan\u003eelse\u003c/span\u003e\u003c/code\u003e statement in the \u003ccode\u003e\u003cspan\u003eget_post\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e function inside the \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file, right? To accommodate situations when no post is returned when we request for a post from JSONPlaceholder. Therefore, we will add a test that will check when no post is returned. Let\u0026#39;s add the following code in the \u003ccode\u003etest_unit\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003e@patch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;app.requests.get\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003etest_no_get_post\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003emock_get\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;Mock testing to check when no post is returned\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n    mock_get\u003cspan\u003e.\u003c/span\u003ereturn_value\u003cspan\u003e.\u003c/span\u003eok \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eFalse\u003c/span\u003e\n    response \u003cspan\u003e=\u003c/span\u003e app\u003cspan\u003e.\u003c/span\u003eget_post\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eassert\u003c/span\u003e response \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the above file, we asked the test to check if the returned value of the mock \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e\u003c/code\u003e request is not \u003ccode\u003eok\u003c/code\u003e in the line \u003ccode\u003emock_get\u003cspan\u003e.\u003c/span\u003ereturn_value\u003cspan\u003e.\u003c/span\u003eok \u003cspan\u003e=\u003c/span\u003e False\u003c/code\u003e. We also asserted that a \u003ccode\u003eNone\u003c/code\u003e response is returned. So, we have been able to handle situations where a post is not returned.\u003c/p\u003e\u003cp\u003eWe can then run the \u003ccode\u003etest_unit\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file again as thus:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epy.test tests/test_unit.py\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe will get the following output:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etest\u003c/span\u003e session starts \u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e \nplatform win32 -- Python \u003cspan\u003e3.7\u003c/span\u003e.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1\nrootdir: \u003cspan\u003e\\\u003c/span\u003eaws-chalice-api-sample\nplugins: cov-2.12.1\ncollected \u003cspan\u003e3\u003c/span\u003e items\n\ntests\u003cspan\u003e\\\u003c/span\u003eunit\u003cspan\u003e\\\u003c/span\u003etest_unit.py \u003cspan\u003e..\u003c/span\u003e.                                                                    \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e100\u003c/span\u003e%\u003cspan\u003e]\u003c/span\u003e \n\n\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e passed \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e.17s \u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eCool!\u003c/p\u003e\u003cp\u003eThe full code of the \u003ccode\u003etest_unit\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file is thus:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efrom\u003c/span\u003e unittest\u003cspan\u003e.\u003c/span\u003emock \u003cspan\u003eimport\u003c/span\u003e patch\n\u003cspan\u003eimport\u003c/span\u003e app\n\u003cspan\u003efrom\u003c/span\u003e chalice\u003cspan\u003e.\u003c/span\u003etest \u003cspan\u003eimport\u003c/span\u003e Client\n\u003cspan\u003eimport\u003c/span\u003e json\n\n\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003etest_index\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ewith\u003c/span\u003e Client\u003cspan\u003e(\u003c/span\u003eapp\u003cspan\u003e.\u003c/span\u003eapp\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e client\u003cspan\u003e:\u003c/span\u003e\n        response \u003cspan\u003e=\u003c/span\u003e client\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eassert\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003estatus_code \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e\n        \u003cspan\u003eassert\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003ejson_body \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;hello\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;world\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e@patch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;app.requests.get\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003etest_get_post\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003emock_get\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;Mocking with the patch decorator to get a post from an External API\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n    mock_get\u003cspan\u003e.\u003c/span\u003ereturn_value\u003cspan\u003e.\u003c/span\u003eok \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eTrue\u003c/span\u003e\n    response \u003cspan\u003e=\u003c/span\u003e app\u003cspan\u003e.\u003c/span\u003eget_post\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eassert\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003eok\n\n\u003cspan\u003e@patch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;app.requests.get\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003etest_no_get_post\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003emock_get\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;Mock testing to check when no post is returned\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n    mock_get\u003cspan\u003e.\u003c/span\u003ereturn_value\u003cspan\u003e.\u003c/span\u003eok \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eFalse\u003c/span\u003e\n    response \u003cspan\u003e=\u003c/span\u003e app\u003cspan\u003e.\u003c/span\u003eget_post\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eassert\u003c/span\u003e response \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"How-to-Write-Integration-Tests\"\u003eHow to Write Integration Tests\u003c/h2\u003e\u003cp\u003eIntegration tests check multiple components to see if they work together. These tests are usually written like unit tests, but they involve verifying multiple parts of the application at once. An integration test might require establishing a network connection, setting up a database, etc. These can be configured as fixtures. Fixtures are functions that set up the initial states/environment that you can create in your tests once and use multiple times.\u003c/p\u003e\u003cp\u003eIt is a good habit to separate unit tests from integration tests by putting them in separate folders. Hence, we will create two folders inside the \u003ccode\u003etest\u003c/code\u003e directory and call them \u003ccode\u003eunit\u003c/code\u003e and \u003ccode\u003eintegration\u003c/code\u003e, respectively. Then,\u003c/p\u003e\u003cul\u003e\u003cli\u003ewe will move the \u003ccode\u003etest_unit\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file into the \u003ccode\u003eunit\u003c/code\u003e folder.\u003c/li\u003e\u003cli\u003ealso, we will create a new \u003ccode\u003etest_integration\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file in the \u003ccode\u003eintegration\u003c/code\u003e folder\u003c/li\u003e\u003cli\u003enext, we will create a \u003ccode\u003econftest\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file in the \u003ccode\u003etest\u003c/code\u003e folder to house our fixtures.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eSo, the folder structure will look like the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e├── app.py\n├── .chalice\n├── requirements.txt\n└── tests\n    ├── __init__.py\n    ├── conftest.py\n    ├── unit/\n    │   ├── __init__.py\n    │   └── test_unit.py\n    │\n    └── integration/\n        ├── __init__.py\n        └── test_integration.py\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo start with, we will create a fixture called \u003ccode\u003eapp\u003c/code\u003e. This fixture will be the instance of our Chalice application. Let\u0026#39;s go to the \u003ccode\u003econftest\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file and change it thus:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e pytest\n\u003cspan\u003efrom\u003c/span\u003e chalice \u003cspan\u003eimport\u003c/span\u003e Chalice\n\u003cspan\u003eimport\u003c/span\u003e app \u003cspan\u003eas\u003c/span\u003e chalice_app\n\u003cspan\u003efrom\u003c/span\u003e chalice\u003cspan\u003e.\u003c/span\u003etest \u003cspan\u003eimport\u003c/span\u003e Client\n\n\n\u003cspan\u003e@pytest\u003cspan\u003e.\u003c/span\u003efixture\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e Chalice\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e chalice_app\n\n\n\u003cspan\u003e@pytest\u003cspan\u003e.\u003c/span\u003efixture\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003etest_client\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ewith\u003c/span\u003e Client\u003cspan\u003e(\u003c/span\u003echalice_app\u003cspan\u003e.\u003c/span\u003eapp\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e client\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eyield\u003c/span\u003e client\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the code above, we\u0026#39;ve abstracted an instance of our Chalice application as a fixture. We also created a fixture for our test client.\u003c/p\u003e\u003cp\u003eGoing forward, let\u0026#39;s assume that we have set up a REST API for a bookshelf application in the \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e with CRUD endpoints like the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003e# POST endpoint to add books to the bookshelf\u003c/span\u003e\n\n\u003cspan\u003e@app\u003cspan\u003e.\u003c/span\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/book\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e methods\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;POST\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ecreate_book\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    book_as_json \u003cspan\u003e=\u003c/span\u003e app\u003cspan\u003e.\u003c/span\u003ecurrent_request\u003cspan\u003e.\u003c/span\u003ejson_body\n    \u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        Item \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#39;id\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;id\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;title\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;author\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;author\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;id\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;title\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;author\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;author\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003eexcept\u003c/span\u003e Exception \u003cspan\u003eas\u003c/span\u003e e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ee\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n\n\u003cspan\u003e# PUT endpoint to update a book item based on the given ID\u003c/span\u003e\n\n\u003cspan\u003e@app\u003cspan\u003e.\u003c/span\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/book/{id}\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e methods\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;PUT\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eupdate_book\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    book_as_json \u003cspan\u003e=\u003c/span\u003e app\u003cspan\u003e.\u003c/span\u003ecurrent_request\u003cspan\u003e.\u003c/span\u003ejson_body\n    \u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        Item \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;id\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;title\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;ok - UPDATED\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;status\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e201\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003eexcept\u003c/span\u003e Exception \u003cspan\u003eas\u003c/span\u003e e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ee\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n\n\u003cspan\u003e# DELETE endpoint to delete a particular book based on the given ID\u003c/span\u003e\n\n\u003cspan\u003e@app\u003cspan\u003e.\u003c/span\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/book/{id}\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e methods\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;DELETE\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003edelete_book\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    book_as_json \u003cspan\u003e=\u003c/span\u003e app\u003cspan\u003e.\u003c/span\u003ecurrent_request\u003cspan\u003e.\u003c/span\u003ejson_body\n    \u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        Item \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;id\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;author\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;author\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;ok - DELETED\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;status\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e201\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003eexcept\u003c/span\u003e Exception \u003cspan\u003eas\u003c/span\u003e e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ee\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe code above consists of:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003eadd_book\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e: function for \u003ccode\u003e\u003cspan\u003ePOST\u003c/span\u003e\u003c/code\u003e method to add books to the catalog\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003eupdate_book\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eid\u003c/code\u003e: uses the \u003ccode\u003e\u003cspan\u003eUPDATE\u003c/span\u003e\u003c/code\u003e method to update a specified book entry with a new title\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003edelete_book\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eid\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e: deletes a particular book entry from the catalog\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eNow, we can write tests for them using the Chalice \u003ca href=\"https://aws.github.io/chalice/api.html#Client.http\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eTestHTTPClient class\u003c/a\u003e inside the \u003ccode\u003etest_integration\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file like the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e json\n\n\u003cspan\u003e#  test for the create_book endpoint\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003etest_add_book\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etest_client\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    response \u003cspan\u003e=\u003c/span\u003e test_client\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003epost\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003e\u0026#39;/book\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        headers\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;Content-Type\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;application/json\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        body\u003cspan\u003e=\u003c/span\u003ejson\u003cspan\u003e.\u003c/span\u003edumps\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;123\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                \u003cspan\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Javascript Know It All\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                \u003cspan\u003e\u0026#34;author\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Chukwuma Obinna\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eassert\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003ejson_body \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;123\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Javascript Know It All\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;author\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Chukwuma Obinna\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n\n\u003cspan\u003e#  test for the update_book endpoint\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003etest_update_book\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etest_client\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    response \u003cspan\u003e=\u003c/span\u003e test_client\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003eput\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003e\u0026#39;/book/{id}\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        headers\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;Content-Type\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;application/json\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        body\u003cspan\u003e=\u003c/span\u003ejson\u003cspan\u003e.\u003c/span\u003edumps\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;123\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                \u003cspan\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Chalice Book\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eassert\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003ejson_body \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;ok - UPDATED\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e201\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n\n\u003cspan\u003e#  test for the delete_book endpoint\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003etest_delete_book\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etest_client\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    response \u003cspan\u003e=\u003c/span\u003e test_client\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003edelete\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/book/{id}\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         headers\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;Content-Type\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;application/json\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n         body\u003cspan\u003e=\u003c/span\u003ejson\u003cspan\u003e.\u003c/span\u003edumps\u003cspan\u003e(\u003c/span\u003e\n              \u003cspan\u003e{\u003c/span\u003e\n                    \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;123\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                    \u003cspan\u003e\u0026#34;author\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Chukwuma Obinna\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n              \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eassert\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003ejson_body \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;ok - DELETED\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e201\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the above code:\u003c/p\u003e\u003cul\u003e\u003cli\u003eWe wrote the tests for each of our CRUD endpoints.\u003c/li\u003e\u003cli\u003eIn each test function, we used the \u003ccode\u003etest_client\u003c/code\u003e that we defined as a fixture earlier on in the \u003ccode\u003econftest\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file.\u003c/li\u003e\u003cli\u003edefined the header and body to be passed in each test request\u003c/li\u003e\u003cli\u003eWe asserted known responses to the test requests\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eNote: the database functionality is not included in the API used in order to simplify the example. Otherwise, we would have to write a fixture to setup a mock database for the integration test.\u003c/p\u003e\u003cp\u003eTo run the above test, we\u0026#39;d use the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epy.test tests/test_integration.py\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe should get a response that looks like the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etest\u003c/span\u003e session starts \u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\nplatform win32 -- Python \u003cspan\u003e3.7\u003c/span\u003e.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1\ncachedir: .pytest_cache\nrootdir: C:\u003cspan\u003e\\\u003c/span\u003eaws-chalice-api-sample\ncollected \u003cspan\u003e4\u003c/span\u003e items\n\ntests/integration/test_integration.py::test_index PASSED                                     \u003cspan\u003e[\u003c/span\u003e \u003cspan\u003e25\u003c/span\u003e%\u003cspan\u003e]\u003c/span\u003e\ntests/integration/test_integration.py::test_add_book PASSED                                  \u003cspan\u003e[\u003c/span\u003e \u003cspan\u003e50\u003c/span\u003e%\u003cspan\u003e]\u003c/span\u003e\ntests/integration/test_integration.py::test_update_book PASSED                               \u003cspan\u003e[\u003c/span\u003e \u003cspan\u003e75\u003c/span\u003e%\u003cspan\u003e]\u003c/span\u003e\ntests/integration/test_integration.py::test_delete_book PASSED                               \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e100\u003c/span\u003e%\u003cspan\u003e]\u003c/span\u003e\n\n\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e4\u003c/span\u003e passed \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e.01s \u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eGenerally, integration tests usually take a longer time to run than unit tests. Therefore, it is advisable to not run them every time but whenever one needs to deploy.\u003c/p\u003e\u003cp\u003eThe full code of the \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file is thus:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efrom\u003c/span\u003e requests\u003cspan\u003e.\u003c/span\u003emodels \u003cspan\u003eimport\u003c/span\u003e Response\n\u003cspan\u003efrom\u003c/span\u003e chalice \u003cspan\u003eimport\u003c/span\u003e Chalice\n\u003cspan\u003eimport\u003c/span\u003e requests\n\u003cspan\u003eimport\u003c/span\u003e json\n\napp \u003cspan\u003e=\u003c/span\u003e Chalice\u003cspan\u003e(\u003c/span\u003eapp_name\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;aws-chalice-api-sample\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\n\u003cspan\u003e@app\u003cspan\u003e.\u003c/span\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eindex\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;hello\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;world\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e# Function to make External API Call\u003c/span\u003e\n\u003cspan\u003e@app\u003cspan\u003e.\u003c/span\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/post\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eget_post\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    response \u003cspan\u003e=\u003c/span\u003e requests\u003cspan\u003e.\u003c/span\u003eget\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;https://jsonplaceholder.typicode.com/posts/1\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003eok\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e response\u003cspan\u003e.\u003c/span\u003ejson\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\n\n\u003cspan\u003e# Function to make POST request to create a book\u003c/span\u003e\n@ app\u003cspan\u003e.\u003c/span\u003eroute\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/book\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e methods\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;POST\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ecreate_book\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n\n    book_as_json \u003cspan\u003e=\u003c/span\u003e app\u003cspan\u003e.\u003c/span\u003ecurrent_request\u003cspan\u003e.\u003c/span\u003ejson_body\n    \u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        Item \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#39;id\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;id\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;title\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;author\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;author\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;id\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;title\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;author\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;author\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003eexcept\u003c/span\u003e Exception \u003cspan\u003eas\u003c/span\u003e e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ee\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e# Function to make POST request to update a book\u003c/span\u003e\n\u003cspan\u003e@app\u003cspan\u003e.\u003c/span\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/book/{id}\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e methods\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;PUT\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eupdate_book\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    book_as_json \u003cspan\u003e=\u003c/span\u003e app\u003cspan\u003e.\u003c/span\u003ecurrent_request\u003cspan\u003e.\u003c/span\u003ejson_body\n    \u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        Item \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;id\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;title\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;ok - UPDATED\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;status\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e201\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003eexcept\u003c/span\u003e Exception \u003cspan\u003eas\u003c/span\u003e e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ee\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e# Function to make POST request to delete a particular book a book\u003c/span\u003e\n\u003cspan\u003e@app\u003cspan\u003e.\u003c/span\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/book/{id}\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e methods\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;DELETE\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003edelete_book\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    book_as_json \u003cspan\u003e=\u003c/span\u003e app\u003cspan\u003e.\u003c/span\u003ecurrent_request\u003cspan\u003e.\u003c/span\u003ejson_body\n    \u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        Item \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;id\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;author\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e book_as_json\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;author\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;ok - DELETED\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#39;status\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e201\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003eexcept\u003c/span\u003e Exception \u003cspan\u003eas\u003c/span\u003e e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#39;message\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ee\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Measuring-Code-Coverage\"\u003eMeasuring Code Coverage\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Code_coverage\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCode coverage\u003c/a\u003e is simply a means of quantifying how much of our code is being tested. We will use \u003ca href=\"https://pypi.org/project/pytest-cov/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epytest-cov\u003c/a\u003e package to measure test coverage in this tutorial. It is a tool built off the \u003ca href=\"https://coverage.readthedocs.io/en/coverage-5.5/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecoverage.py\u003c/a\u003e tool used in measuring coverage in Python code. Fortunately, pytest-cov works well with pytest.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s install pytest-cov:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epip \u003cspan\u003einstall\u003c/span\u003e pytest-cov\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0026#39;s measure the test coverage by using the \u003ccode\u003e\u003cspan\u003e-\u003c/span\u003ecov\u003c/code\u003e argument with pytest. We will measure the coverage over our source code in the \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epytest --cov\u003cspan\u003e=\u003c/span\u003eapp  --cov-report term-missing\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe used the \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003ecov\u003cspan\u003e-\u003c/span\u003ereport\u003c/code\u003e \u003ccode\u003eterm\u003cspan\u003e-\u003c/span\u003emissing\u003c/code\u003e command to specify that we want our coverage report to indicate the lines of code that are not covered by our tests.\u003c/p\u003e\u003cp\u003eWe will get a terminal output that looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etest\u003c/span\u003e session starts \u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\nplatform win32 -- Python \u003cspan\u003e3.7\u003c/span\u003e.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1\nrootdir: \u003cspan\u003e\\\u003c/span\u003eaws-chalice-api-sample\nplugins: cov-2.12.1\ncollected \u003cspan\u003e7\u003c/span\u003e items\n\ntests\u003cspan\u003e\\\u003c/span\u003eintegration\u003cspan\u003e\\\u003c/span\u003etest_integration.py \u003cspan\u003e..\u003c/span\u003e\u003cspan\u003e..\u003c/span\u003e                                                    \u003cspan\u003e[\u003c/span\u003e \u003cspan\u003e57\u003c/span\u003e%\u003cspan\u003e]\u003c/span\u003e \ntests\u003cspan\u003e\\\u003c/span\u003eunit\u003cspan\u003e\\\u003c/span\u003etest_unit.py \u003cspan\u003e..\u003c/span\u003e.                                                                   \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e100\u003c/span\u003e%\u003cspan\u003e]\u003c/span\u003e \n\n----------- coverage: platform win32, python \u003cspan\u003e3.7\u003c/span\u003e.7-final-0 -----------\nName     Stmts   Miss  Cover   Missing\n--------------------------------------\napp.py      \u003cspan\u003e33\u003c/span\u003e      \u003cspan\u003e6\u003c/span\u003e    \u003cspan\u003e82\u003c/span\u003e%   \u003cspan\u003e46\u003c/span\u003e-47, \u003cspan\u003e59\u003c/span\u003e-60, \u003cspan\u003e72\u003c/span\u003e-73\n--------------------------------------\nTOTAL       \u003cspan\u003e33\u003c/span\u003e      \u003cspan\u003e6\u003c/span\u003e    \u003cspan\u003e82\u003c/span\u003e%\n\n\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e7\u003c/span\u003e passed \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003e.16s \u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote: The 6 missed exception statements in lines 46-47, 59-60, and 72-73 above are in the \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e file. The missing seemed to occur while running as a result of a pytest \u003ca href=\"https://github.com/nedbat/coveragepy/issues/605\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eerror\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eIn this article, we have considered how to run unit and integration tests in Chalice applications and APIs. We also learned how to use Pytest for testing and Pytest-cov for measuring code coverage. We can now go ahead and build \u003ca href=\"https://developer.ibm.com/devpractices/software-development/articles/5-steps-of-test-driven-development/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003etest-driven\u003c/a\u003e Chalice applications with the knowledge gained.\nThanks for following through. We\u0026#39;d be glad to have your thoughts and suggestions in the comment section. Thanks.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "A tutorial to learn how to write unit tests and integration tests for REST APIs in AWS Chalice. Additionally, we will see how to measure test coverage.",
      "date_published": "2021-09-06T14:48:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/welcome-to-the-new-auth0-careers-hub/",
      "title": "Welcome to the New Auth0 Careers Hub",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eAt Auth0, our core philosophy is based on the principles of collaboration, experimentation, learning, transparency, and passion. Our culture revolves around our core values, and we want to recruit others who share the same beliefs and passion for what we do. In that spirit, we are excited to present our new Auth0 Careers Hub.\u003c/p\u003e\u003cp\u003eMore than just a refresh, our team set out to create new pages to reflect our brand, include a larger emphasis on diversity and inclusion, and share real stories from our employees. Our message with this new launch is that here at Auth0, we invest in a culture of inclusion where every Auziro can show up as their authentic self.\u003c/p\u003e\u003ch2 id=\"Real-Stories-from-Real-Employees\"\u003eReal Stories from Real Employees\u003c/h2\u003e\u003cp\u003eWhat better way to showcase our culture authentically than through stories from Auziros themselves? With a new page dedicated to Life at Auth0, highlighting our Employee Resource Groups, global, remote-friendly culture, and more, we showcase more than 60 stories from employees that highlight how we live and breathe our values. Hear from our teams on how we make remote work really work for our Auziros — from team meetings to performance reviews.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2iKl8xMHCzupRhjLbiujWz/a438b6f175a642b99c198cf2011a88d6/careers_blogpost_02.jpg\" alt=\"Real Stories from Real Employees\"/\u003e\u003c/p\u003e\u003ch2 id=\"A-Transparent-Recruiting-Process\"\u003eA Transparent Recruiting Process\u003c/h2\u003e\u003cp\u003eThroughout the design process, we kept all candidate personas in mind when crafting the new content flow and structures. No matter which position a candidate may be looking for, we strive to provide clarity into our process and programs for those interested in learning more before embarking on this journey — so there are no surprises along the way.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2Sg9MZoRU09PtJAw6DKZxt/86593684a762e53ca71938c1c3d6c09e/careers_blogpost_03.png\" alt=\"A Transparent Recruiting Process\"/\u003e\u003c/p\u003e\u003ch2 id=\"One-Team--One-Score\"\u003eOne Team, One Score\u003c/h2\u003e\u003cp\u003eLike everything we do, this refresh was truly an embodiment of our core values in the amazing collaboration that was crucial in bringing this to life. And as we \u003ca href=\"https://auth0.com/blog/okta-acquisition-announcement/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eheard from Eugenio\u003c/a\u003e on the recent Okta acquisition, the Auth0 brand and product will continue to be part of the larger strategy, and hiring will always be an important focus. We hope this will resonate with all future Auziros that have yet to join our amazing team. \u003c/p\u003e\u003cp\u003eIf this sounds like you, \u003ca href=\"https://auth0.com/careers\" target=\"_blank\" rel=\"noreferrer noopener\"\u003echeck out our careers hub\u003c/a\u003e and help us make the internet safer.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Our redefined destination for exploring what makes Auth0 a great place to work.",
      "date_published": "2021-09-02T21:02:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/state-pattern-in-python/",
      "title": "State Pattern in Python",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Software_design_pattern\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDesign patterns\u003c/a\u003e are conventional solutions to common challenges in software development using \u003ca href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eObject-oriented programming\u003c/a\u003e. One of the famous design patterns for developing scalable and flexible software is the state pattern. You\u0026#39;ll learn about the state pattern and how to apply it to improve your software project in this article.\u003c/p\u003e\u003ch2 id=\"Finite-State-Machine\"\u003eFinite State Machine\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s define a \u003ca href=\"https://en.wikipedia.org/wiki/Finite-state_machine\" target=\"_blank\" rel=\"noreferrer noopener\"\u003efinite state machine\u003c/a\u003e (FSM) before moving on to the state design pattern. It is well known that the concepts of state patterns and finite-state machines have a close relationship. An FSM is something that behaves differently depending on its internal state. In computer programming, the behavior of an object in an application varies depending on its state. A switch and a lightbulb are simple examples of FSM. \u0026#34;ON\u0026#34; and \u0026#34;OFF\u0026#34; are the two possible states of the light bulb. To change the state of the bulb \u0026#39;ON\u0026#39; or \u0026#39;OFF\u0026#39;, simply flip the switch. Transition is the process of moving from one state to another. Transition is affected by several factors. In the case of the light bulb, it is dependent on the input from the switch. The state diagram, which is shown below, graphically depicts the states and transitions.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6Y4Ljm8KBa45GF54np9a8i/b5bff5c1cf9b5a8ead644a110f9db059/01_bulb_state_diagram.png\" alt=\"light bulb state diagram\"/\u003e\u003c/p\u003e\u003cp\u003eWe can implement the state machine using any programming language. Depending on a few factors, our code behaves differently. You can implement the preceding light bulb example as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eLightBulb\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  _state \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;OFF\u0026#39;\u003c/span\u003e    \u003cspan\u003e# initial state of bulb\u003c/span\u003e\n  \n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eonOff\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e,\u003c/span\u003e switch\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e switch \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#39;ON\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003e_state \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;ON\u0026#39;\u003c/span\u003e\n    \u003cspan\u003eelif\u003c/span\u003e switch \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#39;OFF\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003e_state \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;OFF\u0026#39;\u003c/span\u003e\n    \u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003econtinue\u003c/span\u003e          \u003cspan\u003e# if we get wrong input\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFor small systems, such as the one described above, the code appears to be straightforward and simple. However, if there are many states and transitions, our code will get flabby with conditional statements. The code becomes more extensive, and it won\u0026#39;t be easy to maintain the application. If you want to add additional states or transitions to the program, you\u0026#39;ll have to change the entire code base. You can use the \u003cstrong\u003eState Design Pattern\u003c/strong\u003e in these cases.\u003c/p\u003e\u003ch2 id=\"State-Pattern\"\u003eState Pattern\u003c/h2\u003e\u003cp\u003eIt is a behavioral design pattern. You can use the state pattern to implement state-specific behavior in which objects can change their functionality at runtime. You can use it to avoid using conditional statements when changing an object\u0026#39;s behavior based on its state. In the state pattern, you should \u003ca href=\"https://en.wikipedia.org/wiki/Encapsulation_(computer_programming\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eencapsulate\u003c/a\u003e) different states in separate \u003ccode\u003eState\u003c/code\u003e classes. The original class keeps a reference to a state object based on its current state rather than using conditional statements to implement state-dependent functionality.\u003c/p\u003e\u003ch2 id=\"UML-Diagram\"\u003eUML Diagram\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7EXrJIISe60aDo65BUFXgW/caabc74e7fe1d13bc1150ce6baa98edb/02_UML_state_class.png\" alt=\"UML class diagram of state pattern\"/\u003e\u003c/p\u003e\u003cp\u003e1) \u003cstrong\u003eContext\u003c/strong\u003e - it is the original class of our application. It maintains a reference to one of the concrete states on which its behavior depends. It also has a method to modify the internal state.\u003c/p\u003e\u003cp\u003e2) \u003cstrong\u003eState interface\u003c/strong\u003e - All supported states share the same state interface. Only the state interface allows \u003cem\u003eContext\u003c/em\u003e to communicate with state objects. \u003cem\u003eContext\u003c/em\u003e can only communicate with state objects via the state interface.\u003c/p\u003e\u003cp\u003e3) \u003cstrong\u003eConcrete states\u003c/strong\u003e - For each state, these objects implement the \u0026#39;State\u0026#39; interface. These are the main objects which contain the state-specific methods.\u003c/p\u003e\u003ch2 id=\"How-does-it-work-\"\u003eHow does it work?\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/9jQ2UH5r4b4amneAHwIxG/fa3b9affd7c467bc6513b64cd1362114/03_UML_state_sequence.png\" alt=\"UML sequence diagram of state pattern\"/\u003e\u003c/p\u003e\u003cp\u003eAssume the \u003cem\u003eContext\u003c/em\u003e is configured with an initial state, \u003ccode\u003econcreteStateA\u003c/code\u003e.  It behaves according to its initial state. The \u003cem\u003eContext\u003c/em\u003e now implements the \u003ccode\u003edoSomething\u003c/code\u003e method according to \u003ccode\u003econcreteStateA\u003c/code\u003e. The concrete states should contain a back reference to call back and change \u003cem\u003eContext\u0026#39;s\u003c/em\u003e current state object. If a state transition occurs, the \u003cem\u003eContext\u0026#39;s\u003c/em\u003e \u003ccode\u003esetSate\u003c/code\u003e method is invoked, referencing the new state, \u003ccode\u003econcreteStateB\u003c/code\u003e. The \u003cem\u003eContext\u003c/em\u003e changed its internal state and behavior. Now, it uses the \u003ccode\u003econcreteStateB\u003c/code\u003e to implement the \u003ccode\u003edoSomething\u003c/code\u003e method. The basic idea is that the states can change the context\u0026#39;s state automatically. As a developer, you can modify the states by using any number of instances of \u003ccode\u003esetState\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eIf you want to add another state, simply create a new concrete state object without changing the \u003cem\u003eContext\u003c/em\u003e of the application.\u003c/p\u003e\u003ch2 id=\"Implementation\"\u003eImplementation\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s take a step-by-step look at implementing the state pattern.\u003c/p\u003e\u003cp\u003e1) Find an existing class that contains state-dependent code, or create a suitable context class. It should include a reference to a specific state as well as a method for switching between states.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efrom\u003c/span\u003e __future__ \u003cspan\u003eimport\u003c/span\u003e annotations\n\u003cspan\u003efrom\u003c/span\u003e abc \u003cspan\u003eimport\u003c/span\u003e ABC\u003cspan\u003e,\u003c/span\u003e abstractmethod\n\n\u003cspan\u003e# the context class contains a _state that references the concrete state and setState method to change between states.\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eContext\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n\n    _state \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e__init__\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e,\u003c/span\u003e state\u003cspan\u003e:\u003c/span\u003e State\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003esetState\u003cspan\u003e(\u003c/span\u003estate\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e,\u003c/span\u003e state\u003cspan\u003e:\u003c/span\u003e State\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n\n        \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ef\u0026#34;Context: Transitioning to \u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estate\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e__name__\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003e_state \u003cspan\u003e=\u003c/span\u003e state\n        self\u003cspan\u003e.\u003c/span\u003e_state\u003cspan\u003e.\u003c/span\u003econtext \u003cspan\u003e=\u003c/span\u003e self\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003edoSomething\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003e_state\u003cspan\u003e.\u003c/span\u003edoSomething\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e2) Create a common State interface for all concrete states. The State interface specifies all of the methods that all Concrete States must implement and a backreference to the \u003cem\u003eContext\u003c/em\u003e object. States can change the \u003cem\u003eContext\u003c/em\u003e to another state by using this backreference.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eABC\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e@property\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003econtext\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e Context\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e self\u003cspan\u003e.\u003c/span\u003e_context\n\n    \u003cspan\u003e@context\u003cspan\u003e.\u003c/span\u003esetter\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003econtext\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e,\u003c/span\u003e context\u003cspan\u003e:\u003c/span\u003e Context\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003e_context \u003cspan\u003e=\u003c/span\u003e context\n\n    \u003cspan\u003e@abstractmethod\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003edoSomething\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003epass\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou should define the \u003cem\u003eContext\u003c/em\u003e as a \u003ca href=\"https://www.geeksforgeeks.org/protected-variable-in-python/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eprotected parameter\u003c/a\u003e. Above, \u003ca href=\"https://www.programiz.com/python-programming/property\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@property\u003c/code\u003e\u003c/a\u003e decorator is used to make the \u003ccode\u003e\u003cspan\u003econtext\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method as property and \u003ccode\u003e@context\u003cspan\u003e.\u003c/span\u003esetter\u003c/code\u003e decorator to another overload of the \u003ccode\u003e\u003cspan\u003econtext\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method as property setter method. Now, \u003ccode\u003e_context\u003c/code\u003e is protected.\u003c/p\u003e\u003cp\u003e3) You can define the concrete states in the classes that implement the state interface. After the \u003ccode\u003edoSomething\u003c/code\u003e method is called, the state of the \u003cem\u003eContext\u003c/em\u003e changes. You can also change the state by defining a specific method. The state transitions use the \u003ccode\u003esetState\u003c/code\u003e method of the \u003cem\u003eContext\u003c/em\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eConcreteStateA\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eState\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003edoSomething\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;The context is in the state of ConcreteStateA.\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;ConcreteStateA now changes the state of the context.\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003esetState\u003cspan\u003e(\u003c/span\u003eConcreteStateB\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eConcreteStateB\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eState\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003edoSomething\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;The context is in the state of ConcreteStateB.\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;ConcreteStateB wants to change the state of the context.\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003esetState\u003cspan\u003e(\u003c/span\u003eConcreteStateA\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e4) You can now initiate your application with an initial state and execute the methods.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# sample application\u003c/span\u003e\napp \u003cspan\u003e=\u003c/span\u003e Context\u003cspan\u003e(\u003c/span\u003eConcreteStateA\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\napp\u003cspan\u003e.\u003c/span\u003edoSomething\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e    \u003cspan\u003e# this method is executed as in state 1\u003c/span\u003e\napp\u003cspan\u003e.\u003c/span\u003edoSomething\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e    \u003cspan\u003e# this method is executed as in state 2\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe output of the above code looks something like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eContext\u003cspan\u003e:\u003c/span\u003e Transitioning to ConcreteStateA\nThe context is \u003cspan\u003ein\u003c/span\u003e the state \u003cspan\u003eof\u003c/span\u003e ConcreteStateA\u003cspan\u003e.\u003c/span\u003e\nConcreteStateA now changes the state \u003cspan\u003eof\u003c/span\u003e the context\u003cspan\u003e.\u003c/span\u003e\nContext\u003cspan\u003e:\u003c/span\u003e Transitioning to ConcreteStateB\nThe context is \u003cspan\u003ein\u003c/span\u003e the state \u003cspan\u003eof\u003c/span\u003e ConcreteStateB\u003cspan\u003e.\u003c/span\u003e\nConcreteStateB wants to change the state \u003cspan\u003eof\u003c/span\u003e the context\u003cspan\u003e.\u003c/span\u003e\nContext\u003cspan\u003e:\u003c/span\u003e Transitioning to ConcreteStateA\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Example\"\u003eExample\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s create a simple state machine that represents a real-world scenario. Consider an elevator system with buttons in the elevator cabin that allow you to go up or down. Consider that this lift only travels between two floors to keep things simple. There are primarily two possible states for the elevator: \u003ccode\u003e\u003cspan\u003e1\u003c/span\u003est floor\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003e2\u003c/span\u003end floor\u003c/code\u003e. The input from the two buttons determines the transition between states. The elevator performs different actions based on its state.\u003c/p\u003e\u003cp\u003eThe following code is the implementation of the elevator example. Follow along with the comments for more descriptions about each method.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efrom\u003c/span\u003e __future__ \u003cspan\u003eimport\u003c/span\u003e annotations\n\u003cspan\u003efrom\u003c/span\u003e abc \u003cspan\u003eimport\u003c/span\u003e ABC\u003cspan\u003e,\u003c/span\u003e abstractmethod\n\n\u003cspan\u003e# The Elevator class is the context. It should be initiated with a default state.\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eElevator\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n\n    _state \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e__init__\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e,\u003c/span\u003e state\u003cspan\u003e:\u003c/span\u003e State\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003esetElevator\u003cspan\u003e(\u003c/span\u003estate\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003e# method to change the state of the object\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003esetElevator\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e,\u003c/span\u003e state\u003cspan\u003e:\u003c/span\u003e State\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n\n        self\u003cspan\u003e.\u003c/span\u003e_state \u003cspan\u003e=\u003c/span\u003e state\n        self\u003cspan\u003e.\u003c/span\u003e_state\u003cspan\u003e.\u003c/span\u003eelevator \u003cspan\u003e=\u003c/span\u003e self\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003epresentState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ef\u0026#34;Elevator is in \u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e.\u003c/span\u003e_state\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e__name__\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003e# the methods for executing the elevator functionality. These depends on the current state of the object.\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003epushDownBtn\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003e_state\u003cspan\u003e.\u003c/span\u003epushDownBtn\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003epushUpBtn\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003e_state\u003cspan\u003e.\u003c/span\u003epushUpBtn\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003e# if both the buttons are pushed at a time, nothing should happen\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003epushUpAndDownBtns\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Oops.. you should press one button at a time\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003e# if no button was pushed, it should just wait open for guests\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003enoBtnPushed\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Press any button. Up or Down\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\n\u003cspan\u003e# The common state interface for all the states\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eABC\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e@property\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eelevator\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e Elevator\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e self\u003cspan\u003e.\u003c/span\u003e_elevator\n\n    \u003cspan\u003e@elevator\u003cspan\u003e.\u003c/span\u003esetter\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eelevator\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e,\u003c/span\u003e elevator\u003cspan\u003e:\u003c/span\u003e Elevator\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003e_elevator \u003cspan\u003e=\u003c/span\u003e elevator\n\n    \u003cspan\u003e@abstractmethod\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003epushDownBtn\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003epass\u003c/span\u003e\n\n    \u003cspan\u003e@abstractmethod\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003epushUpBtn\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003epass\u003c/span\u003e\n\n\n\u003cspan\u003e# The concrete states\u003c/span\u003e\n\u003cspan\u003e# We have two states of the elevator: when it is on the First floor and the Second floor\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003efirstFloor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eState\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n\n    \u003cspan\u003e# If the down button is pushed when it is already on the first floor, nothing should happen\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003epushDownBtn\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Already in the bottom floor\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003e# if up button is pushed, move upwards then it changes its state to second floor.\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003epushUpBtn\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Elevator moving upward one floor.\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003eelevator\u003cspan\u003e.\u003c/span\u003esetElevator\u003cspan\u003e(\u003c/span\u003esecondFloor\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003esecondFloor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eState\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n\n    \u003cspan\u003e# if down button is pushed it should move one floor down and open the door\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003epushDownBtn\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Elevator moving down a floor...\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        self\u003cspan\u003e.\u003c/span\u003eelevator\u003cspan\u003e.\u003c/span\u003esetElevator\u003cspan\u003e(\u003c/span\u003efirstFloor\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003e# if up button is pushed nothing should happen\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003epushUpBtn\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Already in the top floor\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\n\u003cspan\u003eif\u003c/span\u003e __name__ \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e# The client code.\u003c/span\u003e\n\n    myElevator \u003cspan\u003e=\u003c/span\u003e Elevator\u003cspan\u003e(\u003c/span\u003efirstFloor\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    myElevator\u003cspan\u003e.\u003c/span\u003epresentState\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003e# Up button is pushed\u003c/span\u003e\n    myElevator\u003cspan\u003e.\u003c/span\u003epushUpBtn\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    myElevator\u003cspan\u003e.\u003c/span\u003epresentState\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe output of the above code looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eElevator is \u003cspan\u003ein\u003c/span\u003e firstFloor\nElevator moving upward one floor\u003cspan\u003e.\u003c/span\u003e\nElevator is \u003cspan\u003ein\u003c/span\u003e secondFloor\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can implement many buttons and states elevator like in real-life one for the floor. Try using the state pattern to implement the light bulb example from the Finite state machine.\u003c/p\u003e\u003ch2 id=\"Advantages-and-Disadvantages\"\u003eAdvantages and Disadvantages\u003c/h2\u003e\u003cp\u003eThe state pattern, like any other programming concept, has a number of benefits as well as some drawbacks. You can avoid writing massive conditional blocks for switching between states by using the state pattern instead of hard-coding state-specific behavior. It allows you to develop a flexible and maintainable application. You can add new states and transitions to the \u003cem\u003eContext\u003c/em\u003e without changing it.\u003c/p\u003e\u003cp\u003eIt\u0026#39;s a good idea to use the state pattern if the logic of each state is complex and the states change frequently. Otherwise, it complicates simple things by bringing a plethora of classes and objects. The state pattern adds another level of indirection by imposing clients to rely on a State object, and it extends the context class to allow State objects to change the state of the \u003cem\u003eContext\u003c/em\u003e.\u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eIn this article, you learned how to use the state pattern in Python programming to design state machines. Without using larger conditional blocks to implement state-specific behavior, the state pattern makes the development process a lot easier. You can also add new states that are not dependent on other states, giving your application more flexibility. The state pattern is very similar to the \u003ca href=\"https://en.wikipedia.org/wiki/Strategy_pattern\" target=\"_blank\" rel=\"noreferrer noopener\"\u003estrategy pattern\u003c/a\u003e, which alters strategies based on user choices. The main distinction is that concrete states are aware of other states, whereas the strategies do not. Why do we say that states are aware of other states? because each state has to know to which state they should move. For example, the first-floor state knows that they should change to the second-floor state. Another important difference with strategy pattern is that in the case of Strategy pattern, it\u0026#39;s the client, which provides a different strategy to Context, on State pattern, the state transition is managed by Context or State itself. Try to make use of the state pattern in your software to make the development process go more smoothly.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn to implement state pattern and finite state machines using Python.",
      "date_published": "2021-09-02T15:02:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/tinygo-good-things-come-in-small-packages/",
      "title": "TinyGo: Good Things Come in Small Packages",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eTL;DR:\u003c/strong\u003e The concept of coding for IoT devices, CLIs and WebAssembly is not a new concept. However, what if I told you that it is possible to use Golang for all three. \u003ca href=\"https://tinygo.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eTinyGo\u003c/a\u003e is a specialized project specifically designed and used for development in small places. This article explains the benefits of TinyGo, what it is, and how you can use it. It also provides you with a Golang IoT code example for you to see TinyGo in action.\u003c/p\u003e\u003ch2 id=\"What-Is-TinyGo-\"\u003eWhat Is TinyGo?\u003c/h2\u003e\u003cp\u003eTinyGo is Golang\u0026#39;s baby brother. It is a compiler that allows a user to write the Golang code they are familiar with and run it in places people wouldn\u0026#39;t have thought were possible. What this means is that the barriers to entry into some tech spaces are being gradually lowered. I say this because I am writing through experience.\u003c/p\u003e\u003ch2 id=\"How-Is-TinyGo-Different-from-Golang-\"\u003eHow Is TinyGo Different from Golang?\u003c/h2\u003e\u003cp\u003eOut of the box, Golang is a feature-rich, highly-performant, compiled language, which means that Golang is compiled to machine-readable code (those funky \u003ccode\u003e\u003cspan\u003e1\u003c/span\u003e\u003c/code\u003e \u0026#39;s and \u003ccode\u003e\u003cspan\u003e0\u003c/span\u003e\u003c/code\u003e \u0026#39;s everyone talks about).\u003c/p\u003e\u003cp\u003eIn turn, being compiled to machine code allows it to run directly on the hardware — all that CPU/RAM power! Another really cool feature of Golang is that when building a binary of the written program, it includes extensive cross-compatibility for a wide from of different system architectures.\u003c/p\u003e\u003cp\u003eOnce a binary has been built, it can be run on any compatible distribution/architecture, providing it has been specified during the build process. To find the list of supported architectures (after installing Go on your machine), run this command into your terminal: \u003ccode\u003ego tool dist list\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eThe output will look something like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eaix/ppc64\nandroid/386\nandroid/amd64\nandroid/arm\nandroid/arm64\ndarwin/amd64\ndarwin/arm64\ndragonfly/amd64\nfreebsd/386\n\u003cspan\u003e..\u003c/span\u003e.\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo, how is TinyGo different? Well, it\u0026#39;s the same Golang you know and love, but TinyGo is a smaller compiler based on \u003ca href=\"https://llvm.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLLVM\u003c/a\u003e technologies. It has essentially cherry-picked a number of important and available libraries and trimmed a lot of the fat from the core language.\u003c/p\u003e\u003cp\u003eBy doing that, TinyGo becomes an even more powerful and efficient language that you can run in unexpected places. As an example of fat that\u0026#39;s been trimmed, the library \u003ccode\u003ehtml\u003cspan\u003e/\u003c/span\u003etemplate\u003c/code\u003e cannot be imported by TinyGo as it relies upon other dependencies, which in turn are not able to be imported.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eTo read up on the packages supported by TinyGo, visit the \u003ca href=\"https://tinygo.org/docs/reference/lang-support/stdlib/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edocumentation pages\u003c/a\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Where-Can-You-Use-TinyGo-\"\u003eWhere Can You Use TinyGo?\u003c/h2\u003e\u003ch3 id=\"Use-TinyGo-with-WebAssembly\"\u003eUse TinyGo with WebAssembly\u003c/h3\u003e\u003ch4 id=\"What-is-WebAssembly-\"\u003eWhat is WebAssembly?\u003c/h4\u003e\u003cp\u003eWeb development might usually be associated with JavaScript, but this isn\u0026#39;t always the case. WebAssembly is an official W3C standard and allows people to develop applications for the web without using JavaScript.\u003c/p\u003e\u003cp\u003eI first must stress, WebAssembly is not a replacement for JavaScript but can be an excellent complement. The two technologies can work well together to deliver web content. In one small sentence, WebAssembly is a format for writing code for the web. WebAssembly is designed to be highly performant, which is why a language with a small overhead is preferable.\u003c/p\u003e\u003cp\u003eWebAssembly allows developers to write code in a familiar language and run it through a web browser for end-users. Through this method, near-native performance is achieved, and the required support is already in your modern browser.\u003c/p\u003e\u003cp\u003eIn essence, you can write your code in TinyGo and pass it through the WASM compiler, which turns that Golang code into machine-readable code. Then, you can run the application through a web browser easily.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/A4oW5u3cr5j5St4Z1bA0o/7714e2411c109a2e74347557be305cc1/01_tiny.png\" alt=\"WebAssembly diagram\"/\u003e\u003c/p\u003e\u003ch3 id=\"Use-TinyGo-to-build-a-CLI\"\u003eUse TinyGo to build a CLI\u003c/h3\u003e\u003ch4 id=\"What-is-a-CLI-\"\u003eWhat is a CLI?\u003c/h4\u003e\u003cp\u003eA Command Line Interface (CLI) is a standardized way for a user to interact textually with a system or application. The first primary use cases of CLIs were back in the 1960\u0026#39;s where users could use a terminal to interact with the operating system. This was a continuous trend throughout the following decades which enabled systems to become more complex and give users more freedom on the computer they are using.\u003c/p\u003e\u003ch4 id=\"Why-does-a-CLI-need-to-be-small-\"\u003eWhy does a CLI need to be small?\u003c/h4\u003e\u003cp\u003eSome CLIs interact with the operating system directly, which in turn means they will need some low-level permissions and a secure library set. Initially, people might think of a C language or Python to accomplish that task. They are established, low-level languages that have been used in some high-profile CLIs in the past.\u003c/p\u003e\u003cp\u003e\u003cem\u003eGolang enters the room\u003c/em\u003e.\u003c/p\u003e\u003cp\u003eHowever, for those that don\u0026#39;t know, Go is derived from C. In fact, it\u0026#39;s so close that you can call C code from within a Go program — it\u0026#39;s called Cgo.\u003c/p\u003e\u003cp\u003eIn recent years, Go has been the go-to language to create CLIs. Some of the most popular and most used CLIs are written in Go: Docker CLI, Kubernetes CLI (\u003ccode\u003ekubectl\u003c/code\u003e), GitHub CLI, just to name a few. This has been made possible by the creation of third-party libraries and imports that take care of the complex tasks developers would otherwise have to take care of themselves. \u003c/p\u003e\u003cp\u003eSecond to this is the power hidden under the hood of the language. Go has concurrency in the form of go-routines making asynchronous programming simplistic and a garbage collector helping with memory management. All of these features (and more) help reduce the size and space taken up by an integral program, all working towards keeping programs as performant as possible.\u003c/p\u003e\u003cp\u003eHowever, if a small project needs a CLI to be written for it or the CLI is only performing some basic tasks, sometimes these large libraries and imports can be overkill. Unless the end goal is to write a complex, multi-functional CLI like the ones mentioned before, a great number of the available libraries may not even be used, resulting in overhead the project could do without. To keep a CLI small and precise, reducing waste is a top priority. This makes TinyGo a great choice for small CLIs.\u003c/p\u003e\u003ch3 id=\"TinyGo-can-power-microcontrollers\"\u003eTinyGo can power microcontrollers\u003c/h3\u003e\u003ch4 id=\"What-is-a-microcontroller-\"\u003eWhat is a microcontroller?\u003c/h4\u003e\u003cp\u003eA microcontroller is usually a single chip on a small circuit board that allows input and output (I/O). A common and well-known example is an Arduino, which is fantastic for home automation and other smaller projects around the house.\u003c/p\u003e\u003cp\u003eWith the IoT boom in recent years, Arduinos have also seen a rise in popularity. The trouble with this is that Arduinos are usually coded in C++. To some, this can be seen as a barrier to entry as it is a complex language, and not everyone wants to learn or use it when alternatives are available.\u003c/p\u003e\u003cp\u003eWhen I began to play with IoT, I purchased a bunch of Arduinos, thinking I could do some cool projects. Then I was personally struck with the C++ barrier. Most of my work is either in Node.js or Golang. With this being the case, I took a seat and thought about how I could write the code I know and love to create these cool projects I had in mind. This is where I came across TinyGo.\u003c/p\u003e\u003ch4 id=\"How-many-boards-does-TinyGo-support-\"\u003eHow many boards does TinyGo support?\u003c/h4\u003e\u003cp\u003eTinyGo is a growing project. At the time of writing, TinyGo supports over 60 microcontroller boards. These range from \u003ca href=\"https://www.espressif.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eEspressif boards (ESP\u0026#39;s)\u003c/a\u003e to \u003ca href=\"https://www.adafruit.com/category/851\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAdafruits\u003c/a\u003e and as previously mentioned, Arduinos, opening so many doors for people to begin their journey into IoT whilst coding in a familiar language.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eCheck the \u003ca href=\"https://tinygo.org/docs/reference/microcontrollers/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edocumentation for each microcontroller board supported by TinyGo\u003c/a\u003e for more details.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Why-Is-TinyGo-a-Great-Alternative-to-C---and-MicroPython-\"\u003eWhy Is TinyGo a Great Alternative to C++ and MicroPython?\u003c/h2\u003e\u003cp\u003eI am not going to the language bash. C, Python, and Go are all great languages in their own way. With that being said, there is plenty of room for this project to grow and come to fruition with the right support.\u003c/p\u003e\u003cp\u003eGolang has significantly grown in popularity over the past few years. It is quickly becoming the de facto choice of language for cloud-native development due to its \u0026#34;first-class\u0026#34; support. In the \u003ca href=\"https://insights.stackoverflow.com/survey/2017#most-popular-technologies\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eStack Overflow Developer Survey 2017 for Most popular technologies\u003c/a\u003e, Go entered the list for the first time and only scored 4.4%. In contrast to 2020, only 3 years later, it scored \u003ca href=\"https://insights.stackoverflow.com/survey/2020#technology-programming-scripting-and-markup-languages-all-respondents\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e8.8%\u003c/a\u003e. Let\u0026#39;s the couple that with Golang being associated with some of the most sought-after skills and top paying salaries worldwide. It is only right to assume this growth will continue.\u003c/p\u003e\u003cp\u003eIn addition, looking at the IoT market, we can see yet another upwards trend. In 2017, Garner forecasted 8.4 billion IoT devices to be connected. Fast-track to 2025, and there is a prediction of up to 30 billion devices being connected. This is a huge leap! The growth of Golang and its baby sibling, TinyGo, can help fuel the IoT fire.\u003c/p\u003e\u003ch2 id=\"TinyGo-in-Action\"\u003eTinyGo in Action\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s look at how Golang IoT shapes up with some code!\u003c/p\u003e\u003cp\u003eFor this blog post, I have created a small program for you to create that turns 4 LEDs on when a phototransistor detects no light. This is essentially how outdoor night lights work.\u003c/p\u003e\u003cp\u003eTo do this, I have used:\u003c/p\u003e\u003cul\u003e\u003cli\u003eVisual Studio Code + TinyGo plugin\u003c/li\u003e\u003cli\u003eTinyGo version \u003ccode\u003e\u003cspan\u003e0.18\u003c/span\u003e\u003cspan\u003e.0\u003c/span\u003e darwin\u003cspan\u003e/\u003c/span\u003eamd64\u003c/code\u003e (using Golang version \u003ccode\u003e\u003cspan\u003e1.16\u003c/span\u003e\u003c/code\u003e and LLVM version \u003ccode\u003e\u003cspan\u003e11.0\u003c/span\u003e\u003cspan\u003e.0\u003c/span\u003e\u003c/code\u003e)\u003c/li\u003e\u003cli\u003e1 x Arduino Uno R3\u003c/li\u003e\u003cli\u003e1 x  Breadboard\u003c/li\u003e\u003cli\u003e8 x Male-Male wires\u003c/li\u003e\u003cli\u003e5 x Resistors (1 x 10kΩ / 4 x 220Ω)\u003c/li\u003e\u003cli\u003e1 x Phototransistor\u003c/li\u003e\u003cli\u003e4 LEDs\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Step-1-\"\u003eStep 1:\u003c/h3\u003e\u003cp\u003eIf you haven\u0026#39;t already, \u003ca href=\"https://golang.org/doc/install\" target=\"_blank\" rel=\"noreferrer noopener\"\u003einstall Go\u003c/a\u003e and then download and \u003ca href=\"https://tinygo.org/getting-started/install/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003einstall TinyGo\u003c/a\u003e on your machine.\u003c/p\u003e\u003cp\u003eTo check if Go is installed, run the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ego version\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo check if TinyGo is installed, run the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003etinygo version\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, install the TinyGo Visual Studio Code Plugin.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/TPJESp0S9pdn3L8uAvDKn/820fe16c173b0ba789be43ad7a7be94c/02_tiny.png\" alt=\"install tinygo vscode editor plugin\"/\u003e\u003c/p\u003e\u003ch3 id=\"Step-2-\"\u003eStep 2:\u003c/h3\u003e\u003cp\u003ePlugin the board with a USB cable (in this example, I am using an Arduino R3) and target it with the editor. Once targeted, the editor will prompt a reload of the window.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3fruuXSiUdJFWW9F3vvqAh/149c1725df6a52ae2e91546e74cc1b18/03_tiny.png\" alt=\"tinygo select the target board\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6QR634B8bipgZAIBUJvdoT/8e89bc62d7c9a858b1995ad732e78e58/04_tiny.png\" alt=\"reload the vscode editor\"/\u003e\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e🚨 Warning 🚨:\u003c/strong\u003e The editor might prompt you to update the \u003ccode\u003ego dev\u003c/code\u003e tools within the editor. If you execute the update, you may get an error due to a known bug. Until this is fixed, it is advised to not update the tools.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/UgrMtLf7UmXwLxhenjy6X/a6e66e3910ca85f98752fe33234b8c5b/05_tiny.png\" alt=\"vscode update tools notification\"/\u003e\u003c/p\u003e\u003ch3 id=\"Step-3-\"\u003eStep 3:\u003c/h3\u003e\u003col start=\"1\"\u003e\u003cli\u003eCreate a project in the directory \u003ccode\u003e$\u003cspan\u003eHOME\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ego\u003cspan\u003e/\u003c/span\u003esrc\u003cspan\u003e/\u003c/span\u003egithub\u003cspan\u003e.\u003c/span\u003ecom\u003cspan\u003e/\u003c/span\u003etinygo\u003c/code\u003e\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode\u003e$ \u003cspan\u003emkdir\u003c/span\u003e light-sensor\u003c/code\u003e\u003c/pre\u003e\u003col start=\"2\"\u003e\u003cli\u003eChange into the newly created project directory\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode\u003e$ \u003cspan\u003ecd\u003c/span\u003e light-sensor\u003c/code\u003e\u003c/pre\u003e\u003col start=\"3\"\u003e\u003cli\u003eCreate a new \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003ego\u003c/code\u003e file for the application within the project directory\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode\u003e$ \u003cspan\u003etouch\u003c/span\u003e light-sensor.go\u003c/code\u003e\u003c/pre\u003e\u003col start=\"4\"\u003e\u003cli\u003eCreate a go mod file if you are using go modules\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode\u003e$ go mod init\u003c/code\u003e\u003c/pre\u003e\u003col start=\"5\"\u003e\u003cli\u003eFinally, open the project in Visual Studio Code\u003c/li\u003e\u003c/ol\u003e\u003ch3 id=\"Step-4-\"\u003eStep 4:\u003c/h3\u003e\u003cp\u003eFirst, read the code and comments below, and then secondly, write it out. Don\u0026#39;t copy and paste!\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epackage\u003c/span\u003e main\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;machine\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003e// Initialise Analog pins\u003c/span\u003e\n    machine\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eInitADC\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003e// Set the light sensor to Analog pin 0\u003c/span\u003e\n    lightSensor \u003cspan\u003e:=\u003c/span\u003e machine\u003cspan\u003e.\u003c/span\u003eADC\u003cspan\u003e{\u003c/span\u003ePin\u003cspan\u003e:\u003c/span\u003e machine\u003cspan\u003e.\u003c/span\u003eADC0\u003cspan\u003e}\u003c/span\u003e\n    lightSensor\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eConfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003emachine\u003cspan\u003e.\u003c/span\u003eADCConfig\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e// Set the LEDs to the corresponding pins\u003c/span\u003e\n    leds \u003cspan\u003e:=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003emachine\u003cspan\u003e.\u003c/span\u003ePin\u003cspan\u003e{\u003c/span\u003e\n        machine\u003cspan\u003e.\u003c/span\u003eD7\u003cspan\u003e,\u003c/span\u003e\n        machine\u003cspan\u003e.\u003c/span\u003eD8\u003cspan\u003e,\u003c/span\u003e\n        machine\u003cspan\u003e.\u003c/span\u003eD9\u003cspan\u003e,\u003c/span\u003e\n        machine\u003cspan\u003e.\u003c/span\u003eD10\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e// Configure each LED as an output\u003c/span\u003e\n    \u003cspan\u003efor\u003c/span\u003e \u003cspan\u003e_\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e led \u003cspan\u003e:=\u003c/span\u003e \u003cspan\u003erange\u003c/span\u003e leds \u003cspan\u003e{\u003c/span\u003e\n        led\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eConfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003emachine\u003cspan\u003e.\u003c/span\u003ePinConfig\u003cspan\u003e{\u003c/span\u003eMode\u003cspan\u003e:\u003c/span\u003e machine\u003cspan\u003e.\u003c/span\u003ePinOutput\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e// Constantly loop to get the light sensor reading every 0.1 seconds\u003c/span\u003e\n    \u003cspan\u003efor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e// 30000 is the lighting threshold for my environment\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e lightSensor\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eGet\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e30000\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e// Turn the LEDs off\u003c/span\u003e\n            \u003cspan\u003efor\u003c/span\u003e \u003cspan\u003e_\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e led \u003cspan\u003e:=\u003c/span\u003e \u003cspan\u003erange\u003c/span\u003e leds \u003cspan\u003e{\u003c/span\u003e\n                led\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSet\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e// Turn the LEDs on\u003c/span\u003e\n            \u003cspan\u003efor\u003c/span\u003e \u003cspan\u003e_\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e led \u003cspan\u003e:=\u003c/span\u003e \u003cspan\u003erange\u003c/span\u003e leds \u003cspan\u003e{\u003c/span\u003e\n                led\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSet\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003e// Time to wait before next light sensor reading is collected\u003c/span\u003e\n        time\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSleep\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etime\u003cspan\u003e.\u003c/span\u003eMillisecond \u003cspan\u003e*\u003c/span\u003e \u003cspan\u003e100\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Step-5-\"\u003eStep 5:\u003c/h3\u003e\u003cp\u003eConnect the components, so they resemble the circuit board shown below.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2DfJWFFXVvp38jclNPNH0m/21c2eae0341fc09b98f8daff298063ed/06_tiny.png\" alt=\"circuit board diagram\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5CWIRVVG7BAMXeryu8d1EU/1be865f5accd679cd8ba55ca33576d12/07_tiny_pic.jpg\" alt=\"circuit board\"/\u003e\u003c/p\u003e\u003ch3 id=\"Step-6-\"\u003eStep 6:\u003c/h3\u003e\u003cp\u003eNext, find what port the connected device is running on. To do that, enter the following command into a terminal or navigate to the device manager.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMac:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ \u003cspan\u003els\u003c/span\u003e /dev/cu*\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eLinux:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ \u003cspan\u003els\u003c/span\u003e /dev/tty*\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eWindows:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eOpen Device Manager and expand the Ports (COM \u0026amp; LPT) list. Find your connected device and make a note of the port number. You will need this to flash the device in the next step.\u003c/p\u003e\u003cp\u003eAlternatively, visit \u003ca href=\"https://www.mathworks.com/help/supportpkg/arduinoio/ug/find-arduino-port-on-windows-mac-and-linux.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMathWorks\u003c/a\u003e website for more information on how to find the port number of your connected device.\u003c/p\u003e\u003ch3 id=\"Step-7-\"\u003eStep 7:\u003c/h3\u003e\u003cp\u003eNow you have the port number, the device is connected and targeted through the editor, and you have written the code. The next step is to flash the board. To do this, enter the command below into a terminal.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003etinygo flash -target\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eboard-you-are-targeting\u003cspan\u003e\u0026gt;\u003c/span\u003e -port\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edevice-port-from-step-\u003cspan\u003e\u003cspan\u003e6\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003ename-of-file\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eExample command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003etinygo flash -target\u003cspan\u003e=\u003c/span\u003eArduino -port\u003cspan\u003e=\u003c/span\u003e/dev/cu.usbmodem143201 light-sensor.go\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce you have completed the device flash, it should look like this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://imgur.com/srh5UM1.gif\"/\u003e\u003c/p\u003e\u003ch2 id=\"Takeaways\"\u003eTakeaways\u003c/h2\u003e\u003col start=\"1\"\u003e\u003cli\u003eTinyGo is an excellent alternative for embedded systems and WebAssembly development.\u003c/li\u003e\u003cli\u003eBeing a smaller compiler for the Go language, existing Go developers can enter the IoT space with their current skills.\u003c/li\u003e\u003cli\u003eAdoption is continuously growing, and TinyGo is supported by the most common microcontroller boards already, reducing the barriers to entry for newcomers and hobbyists.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eTinyGo is still a very experimental project which has come on leaps and bounds over a short period of time. With Go\u0026#39;s impact in the software world continuing to grow, TinyGo could be a project to keep an eye on. Having multiple lightweight alternatives to the main language is needed for IoT and edge computing since there is often limited compute power available and overall needs exploding. TinyGo is just another example of a great slimmed-down alternative to the dominant languages for microcontrollers. I, for one, will certainly be keeping an eye out for a linear adoption pattern and continue to monitor and research exciting projects like this.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "A beginners guide into the world of IoT with TinyGo.",
      "date_published": "2021-08-31T14:10:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/best-practices-for-flask-api-development/",
      "title": "Best Practices for Flask API Development",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003ePython is my favorite programming language. Its adaptability, readability, and coding speed are unique and make \u003ca href=\"https://livecodestream.dev/post/what-is-python-best-for/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epython a powerful choice in various projects\u003c/a\u003e, from data science projects to scripting and, of course, APIs.\u003c/p\u003e\u003cp\u003ePython is a popular choice for API development, not only because it is one of the \u003ca href=\"https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emost loved programming languages\u003c/a\u003e, but also because of its rich ecosystem of libraries and frameworks that serve that goal, libraries with immense popularity such as \u003ca href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDjango\u003c/a\u003e, \u003ca href=\"https://flask.palletsprojects.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eFlask\u003c/a\u003e, and \u003ca href=\"https://fastapi.tiangolo.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eFastAPI\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eBut which framework should you use to build your APIs with Python? It’s 100% up to you, but there are important considerations to keep in mind. After all, some of these frameworks are different, even from the ideology.\u003c/p\u003e\u003cul\u003e\u003cli\u003eDjango is an all-inclusive framework. It provides tools and modules for handling API requests, serialization, database connections, automatic admin UI generation, and so much more.\u003c/li\u003e\u003cli\u003eFlask, on the contrary, is a minimalist framework, it provides only the necessary tools, but it extends its functionality with additional libraries and frameworks. The great part is, you decide exactly what you need for your project, nothing more.\u003c/li\u003e\u003cli\u003eFastAPI is a relatively new framework. It makes use of newer python features such as type-hints, concurrency handling (with async), and it’s super fast.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eI work a lot with Flask and FastAPI, and I love both. I love the flexibility and adaptability of these frameworks, and for today\u0026#39;s article, we will be focusing on Flask.\u003c/p\u003e\u003cp\u003eThe following tips and practices are the result of research and more than eight years of experience building and shipping production-grade APIs with Python:\u003c/p\u003e\u003cul\u003e\u003cli\u003eDesign your API endpoints with proper names and HTTP verbs\u003c/li\u003e\u003cli\u003eHow to properly structure your application\u003c/li\u003e\u003cli\u003eBuild your documentation from the code\u003c/li\u003e\u003cli\u003eTesting\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eLet’s get started!\u003c/strong\u003e 🚀\u003c/p\u003e\u003ch2 id=\"Design-Your-API-Endpoints-with-Proper-Names-and-HTTP-Verbs\"\u003eDesign Your API Endpoints with Proper Names and HTTP Verbs\u003c/h2\u003e\u003cp\u003eAn adequately designed API is easy and straightforward for developers to understand. By reading the \u003ca href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eURI\u003c/a\u003e and HTTP verb (more on this later), a developer can pretty much have a good understanding of what to expect to happen when calling a particular method.\u003c/p\u003e\u003cp\u003eBut how does that work? Let’s start with naming URIs. In REST, we called \u003ccode\u003eResource\u003c/code\u003e to a first-level data representation. Naming these resources \u003cstrong\u003econsistently\u003c/strong\u003e throughout your API will turn out to be one of the best decisions for the long term.\u003c/p\u003e\u003cp\u003eNote that I highlighted consistently in the previous sentence, as it’s a key factor. Sure, there are particular ways to name your resources, and we will cover them, but being consistent is more important to the actual convention you choose.\u003c/p\u003e\u003cp\u003eLet’s start getting practical by modeling a simple eCommerce website with customers, orders, and a checkout process.\u003c/p\u003e\u003cp\u003eOur primary resource is \u003ccode\u003ecustomers\u003c/code\u003e, which is a collection of the instance \u003ccode\u003ecustomer\u003c/code\u003e. With this information, we can identify the collection resource by the URI \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003ecustomers\u003c/code\u003e or a single resource by using the URI \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003ecustomers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003ecustomerId\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e. Subsequently, we can identify sub-resources such as \u003ccode\u003eorders\u003c/code\u003e, and we can identify them as \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003ecustomers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003ecustomerId\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eorders\u003c/code\u003e, or a single order resource by \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003ecustomers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003ecustomerId\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eorders\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eorderId\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003ch3 id=\"Best-practices-naming-resources\"\u003eBest practices naming resources\u003c/h3\u003e\u003col start=\"1\"\u003e\u003cli\u003eUse nouns in their plural form to represent resources, eg:\n \u003cul\u003e\u003cli\u003e✅ Users of a system: \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/li\u003e\u003cli\u003e✅ User’s playlists: \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eplaylists\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eplaylists\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eplaylistId\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003eUse hyphens “-” to separate words and improve redeability\n \u003cul\u003e\u003cli\u003e✅ \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003emobile\u003cspan\u003e-\u003c/span\u003edevices\u003c/code\u003e\u003c/li\u003e\u003cli\u003e❌ \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003emobileDevices\u003c/code\u003e\u003c/li\u003e\u003cli\u003e❌ \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003emobile_devices\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003eUse forward slashes “/’ to indicate hierarchy\n \u003cul\u003e\u003cli\u003e✅ \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003emobile\u003cspan\u003e-\u003c/span\u003edevices\u003c/code\u003e\u003c/li\u003e\u003cli\u003e❌ \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e-\u003c/span\u003emobile\u003cspan\u003e-\u003c/span\u003edevices\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/li\u003e\u003cli\u003e❌ \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e-\u003c/span\u003emobile\u003cspan\u003e-\u003c/span\u003edevices\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003euserId\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003eUse only lowercase letters in URIs\n \u003cul\u003e\u003cli\u003e✅ \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003emobile\u003cspan\u003e-\u003c/span\u003edevices\u003c/code\u003e\u003c/li\u003e\u003cli\u003e❌ \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eUsers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eMobile\u003cspan\u003e-\u003c/span\u003eDevices\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eNow that we understand how to name resources, we need to think about actions. There are methods in our APIs that are procedural by nature and are not related to a specific resource, e.g., checkout, run, play, etc.\u003c/p\u003e\u003ch3 id=\"Best-practices-naming-actions\"\u003eBest practices naming actions\u003c/h3\u003e\u003col start=\"1\"\u003e\u003cli\u003eUse verbs to represent actions, e.g.:\n \u003cul\u003e\u003cli\u003e✅ Execute a checkout action: \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ecart\u003cspan\u003e/\u003c/span\u003echeckout\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003eSame as resources, use hyphens, forward slashes, and lowercase letters.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eOne crucial point here is to differentiate between CRUD functions and actions, as both are actions. In REST, CRUD operations, such as Create, Read, Update and Delete, are handled through HTTP verbs and not by the URI.\u003c/p\u003e\u003ch3 id=\"But-what-are-HTTP-verbs-or-HTTP-request-methods-\"\u003eBut what are HTTP verbs or HTTP request methods?\u003c/h3\u003e\u003cp\u003eHTTP defines a set of request methods to indicate an action to be performed for a resource (sounds familiar?). The list includes several, but we will be focusing on 5:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eGET\u003c/strong\u003e: should be for data retrieval.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePOST\u003c/strong\u003e: should be used to create a new resource.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePUT\u003c/strong\u003e: should be used to update information about a specific resource.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eDELETE\u003c/strong\u003e: should be used to delete a particular resource.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePATCH\u003c/strong\u003e: should be used to update partial information about a particular resource.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Example-for-our-eCommerce-website\"\u003eExample for our eCommerce website\u003c/h3\u003e\u003cul\u003e\u003cli\u003e✅ \u003cstrong\u003eGET\u003c/strong\u003e \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003c/code\u003e: lists of all users.\u003c/li\u003e\u003cli\u003e✅ \u003cstrong\u003ePOST\u003c/strong\u003e \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003c/code\u003e: creates a new user.\u003c/li\u003e\u003cli\u003e✅ \u003cstrong\u003ePUT\u003c/strong\u003e \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e: updates a user.\u003c/li\u003e\u003cli\u003e✅ \u003cstrong\u003eDELETE\u003c/strong\u003e \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e: deletes a specific user.\u003c/li\u003e\u003cli\u003e✅ \u003cstrong\u003ePATCH\u003c/strong\u003e \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e: partially updates a user.\u003c/li\u003e\u003cli\u003e✅ \u003cstrong\u003eGET\u003c/strong\u003e \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eorders\u003c/code\u003e: lists of all orders for a particular user.\u003c/li\u003e\u003cli\u003e✅ \u003cstrong\u003ePOST\u003c/strong\u003e \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ecart\u003cspan\u003e/\u003c/span\u003echeckout\u003c/code\u003e: runs the checkout process.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWhat you shouldn\u0026#39;t do:\u003c/p\u003e\u003cul\u003e\u003cli\u003e❌ \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003eget\u003cspan\u003e-\u003c/span\u003eall\u003c/code\u003e\u003c/li\u003e\u003cli\u003e❌ \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003ecreate\u003c/code\u003e\u003c/li\u003e\u003cli\u003e❌ \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eusers\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003euserId\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elist\u003cspan\u003e-\u003c/span\u003eorders\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIn any form of GET, POST, or another verb.\u003c/p\u003e\u003ch2 id=\"How-to-Properly-Structure-Your-Application\"\u003eHow to Properly Structure Your Application\u003c/h2\u003e\u003cp\u003eI’d like to start this section by saying that there’s no one correct way to structure your application depending on application size, modules, requirements, or even personal preferences. This could vary. However, I’d like to introduce you to how my team structures Flask applications, and we used this setup for multiple production projects.\u003c/p\u003e\u003cp\u003eYou can follow the explanation of the structure in the article, and you can also find this structure ready to use in the \u003ca href=\"https://github.com/bajcmartinez/flask-api-starter-kit\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eFlask API starter kit on github\u003c/a\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eproject/\n    api/\n        model/\n            __init__.py\n            welcome.py\n        route/\n            home.py\n        schema/\n            __init__.py\n            welcome.py\n        service\n            __init__.py\n            welcome.py\n\n    test/\n        route/\n            __init__.py\n            test_home.py\n        __init.py\n\n    .gitignore\n    app.py\n    Pipfile\n    Pipfile.lock\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet’s now break it down and explain each module.\u003c/p\u003e\u003cp\u003eAll the application magic happens inside the API module (\u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003c/code\u003e), there, we split the code into 4 main parts:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe \u003ccode\u003emodels\u003c/code\u003e are the data descriptor of our application, in many cases related to the database model. How each model is defined will heavily depend on the library you use to connect to your database.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003eroutes\u003c/code\u003e are the URIs to our application, where we define our resources and actions.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003eschemas\u003c/code\u003e are the definitions for inputs and outputs of our API, what parameters are allowed, what information we will output. They correlate to our resources, but they are not necessarily the same as our models.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003eservices\u003c/code\u003e are modules that define application logic or interact with other services or the db layer. Routes should be as simple as possible and delegate all logic to the services.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eEach endpoint in Flask can be defined on its own or by groups called \u003ca href=\"https://flask.palletsprojects.com/en/2.0.x/blueprints/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eblueprints\u003c/a\u003e. In my case, I like the grouping Blueprints provide, and I use them for each resource. Let’s take a look at what an example of our welcome route (\u003ccode\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003eroute\u003cspan\u003e/\u003c/span\u003ehome\u003cspan\u003e.\u003c/span\u003epy\u003c/code\u003e) would look like:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efrom\u003c/span\u003e http \u003cspan\u003eimport\u003c/span\u003e HTTPStatus\n\u003cspan\u003efrom\u003c/span\u003e flask \u003cspan\u003eimport\u003c/span\u003e Blueprint\n\u003cspan\u003efrom\u003c/span\u003e flasgger \u003cspan\u003eimport\u003c/span\u003e swag_from\n\u003cspan\u003efrom\u003c/span\u003e api\u003cspan\u003e.\u003c/span\u003emodel\u003cspan\u003e.\u003c/span\u003ewelcome \u003cspan\u003eimport\u003c/span\u003e WelcomeModel\n\u003cspan\u003efrom\u003c/span\u003e api\u003cspan\u003e.\u003c/span\u003eschema\u003cspan\u003e.\u003c/span\u003ewelcome \u003cspan\u003eimport\u003c/span\u003e WelcomeSchema\n\nhome_api \u003cspan\u003e=\u003c/span\u003e Blueprint\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;api\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e __name__\u003cspan\u003e)\u003c/span\u003e\n\n\n\u003cspan\u003e@home_api\u003cspan\u003e.\u003c/span\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e@swag_from\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#39;responses\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        HTTPStatus\u003cspan\u003e.\u003c/span\u003eOK\u003cspan\u003e.\u003c/span\u003evalue\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#39;description\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;Welcome to the Flask Starter Kit\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#39;schema\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e WelcomeSchema\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ewelcome\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n    1 liner about the route\n    A more detailed description of the endpoint\n    ---\n    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n    result \u003cspan\u003e=\u003c/span\u003e WelcomeModel\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e WelcomeSchema\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edump\u003cspan\u003e(\u003c/span\u003eresult\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet’s break all of it into 3 pieces:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ehome_api \u003cspan\u003e=\u003c/span\u003e Blueprint\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;api\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e __name__\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere is where we declared our Blueprint, which we can consequently use to declare our endpoints or routes. In this case, our grouping is pretty basic, but we can do much more with grouping, like defining prefixes, resource folders, and more.\u003c/p\u003e\u003cp\u003eFor example if we would like to have our \u003ccode\u003ehome\u003c/code\u003e blueprint always as a nested route of \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003ehome\u003cspan\u003e-\u003c/span\u003eservice\u003c/code\u003e, we could do:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ehome_api \u003cspan\u003e=\u003c/span\u003e Blueprint\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;api\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e __name__\u003cspan\u003e,\u003c/span\u003e url_prefix\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;/home-service\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext we declare one route, but we split it in 2 parts:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@home_api\u003cspan\u003e.\u003c/span\u003eroute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e@swag_from\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#39;responses\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        HTTPStatus\u003cspan\u003e.\u003c/span\u003eOK\u003cspan\u003e.\u003c/span\u003evalue\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e\u0026#39;description\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;Welcome to the Flask Starter Kit\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#39;schema\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e WelcomeSchema\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe use annotations on top of functions to convert them into endpoints and provide additional information, e.g., documentation information, more on that in the next section.\u003c/p\u003e\u003cp\u003eAnd finally, our route code, which is just a Python function.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ewelcome\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n    1 liner about the route\n    A more detailed description of the endpoint\n    ---\n    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n    result \u003cspan\u003e=\u003c/span\u003e WelcomeModel\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e WelcomeSchema\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edump\u003cspan\u003e(\u003c/span\u003eresult\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote that we don’t simply return a string or JSON object directly, but we use our schemas instead. In our example, I’m using \u003ca href=\"https://flask-marshmallow.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eflask-marshmallow\u003c/a\u003e serialization library for its purposes.\u003c/p\u003e\u003ch2 id=\"Build-Your-Documentation-from-the-Code\"\u003eBuild Your Documentation from the Code\u003c/h2\u003e\u003cp\u003eYou build your API, you shipped to production, and developers are eager to consume it, but how would they know what endpoints are available and how to use them? The simple answer is by reading the documentation.\u003c/p\u003e\u003cp\u003eThe documentation can be built in 2 ways, you can open up an editor and write it “manually”, or you can use the code to generate your documentation. If you like the idea of automatic documentation, you will love \u003ca href=\"https://swagger.io/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eswagger\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eSwagger is an open-source specification that allows you to describe each element of your API so that any machine or system can interpret it and interact with it. Thanks to this specification, many tools have been developed to provide rich interfaces to make our documentation dynamic and interactive, but also to provide developers with tools to easily generate these swagger files.\u003c/p\u003e\u003cp\u003eFor Flask, there are multiple libraries for automatic Swagger generation, but my favorite is \u003ca href=\"https://github.com/flasgger/flasgger\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eflasgger\u003c/a\u003e. Flassger provides annotations and other tools to generate your documentation, and it also provides a pretty web interface where you can see each endpoint, its inputs, and outputs and even run the endpoints directly from the docs.\u003c/p\u003e\u003cp\u003eHere is an image of it in action:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3Dz9nOtHkd2JlQxbcCKKKQ/b65d997f2bf20418a7143279e096940b/swagger_demo.png\" alt=\"Swagger demo page\"/\u003e\u003c/p\u003e\u003cp\u003eIt’s highly configurable and compatible with our serialization library by using an additional library called \u003ca href=\"https://apispec.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eapispec\u003c/a\u003e. It’s all pretty easy to set up, but you can also make use of the \u003ca href=\"https://github.com/bajcmartinez/flask-api-starter-kit\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eFlask starter kit\u003c/a\u003e, and you will have it all done for you.\u003c/p\u003e\u003cp\u003eBut once you have it up and running, where is the information taken for the docs? From 2 places:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003eRemember our swag_from function annotation? There we can provide detailed information about the inputs and outputs\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e  \u003cspan\u003e@swag_from\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\u0026#39;responses\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n          HTTPStatus\u003cspan\u003e.\u003c/span\u003eOK\u003cspan\u003e.\u003c/span\u003evalue\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n              \u003cspan\u003e\u0026#39;description\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;Welcome to the Flask Starter Kit\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n              \u003cspan\u003e\u0026#39;schema\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e WelcomeSchema\n          \u003cspan\u003e}\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eWe can also use string literals in functions to provide a description for the endpoint, similar to what we did here:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ewelcome\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n      1 liner about the route\n      A more detailed description of the endpoint\n      ---\n      \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThere are many more options and customizations; it’s all well documented on their \u003ca href=\"https://github.com/flasgger/flasgger\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eofficial docs\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"Testing\"\u003eTesting\u003c/h2\u003e\u003cp\u003eIf you are like me, perhaps you hate writing tests, but if you are like me, you know it’s worth it. Testing, when done properly, increases efficiency and quality in the long run. They also reassure developers when making changes, refactoring, or building new features on existing systems.\u003c/p\u003e\u003cp\u003eBuilding tests shouldn’t be too hard, and it should happen naturally during development. I struggled a lot with it in the past because I’d always first develop the feature, the endpoint, or the function and then write the tests, just to get it done.\u003c/p\u003e\u003cp\u003eI’m not saying that approach is wrong, but there’s a better way. TDD, or test-driven development, it’s a concept idea where you write tests first, and just then you write the actual code we want to test.\u003c/p\u003e\u003cp\u003eHow does it work? Let’s suppose we need to write a function that will add 2 numbers and return the result; exciting, right?\u003c/p\u003e\u003cp\u003eWith TDD, our approach would be first to write the tests.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003etest_answer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003eassert\u003c/span\u003e sum_two_numbers\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e8\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, we run the tests, and it fails because our function doesn’t even exist yet. So next, we write our function:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003esum_two_numbers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003enum1\u003cspan\u003e,\u003c/span\u003e num2\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e num1 \u003cspan\u003e*\u003c/span\u003e num2\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, we rerun our tests, and they still fail. Our assertion fails, but why? It turns out that I made a simple mistake. As clumsy as I am, I put a * instead of a +; this would have been very hard to notice without our tests, but thanks god, we have them.\u003c/p\u003e\u003cp\u003eWe fix our function, and now everything runs perfectly.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003esum_two_numbers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003enum1\u003cspan\u003e,\u003c/span\u003e num2\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e num1 \u003cspan\u003e+\u003c/span\u003e num2\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the exercise we did, it sounds kind of silly, but with more complex functions and code mistakes happen, and having tests first will help a lot; I say that from experience.\u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eBest practices can be different for different frameworks, problems to solve, or even people, there’s no one way of doing things right, and that’s something I love about programming. However, having basic principles to rely on when designing and developing APIs can help your team, and other developers consume your API products.\u003c/p\u003e\u003cp\u003eBeing consistent in naming, separating concepts in modules or folders in your project, documenting directly from your code, and properly testing are just examples of things that can make your life easier, more productive, and take you to the next level.\u003c/p\u003e\u003cp\u003eI hope you enjoyed reading this article!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn how to design and build REST APIs with Python and Flask following best practices.",
      "date_published": "2021-08-30T14:56:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/introduction-to-async-programming-in-csharp/",
      "title": "Introduction to Async Programming in C#",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eYou probably already read about asynchronous programming. \u003ccode\u003e\u003cspan\u003easync\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003eawait\u003c/span\u003e\u003c/code\u003e words are used everywhere, no matter which programming language we choose. Talking about .NET framework, and C# in particular, we have some native functions, classes, and reserved words that we can use to implement asynchronous tasks and workflows in our projects.\u003c/p\u003e\u003cp\u003eIn this article, we will talk about synchronism, parallelism, concurrency, and how to implement asynchronous algorithms in our C# applications.\u003c/p\u003e\u003ch2 id=\"Synchronous-and-Asynchronous-Tasks\"\u003eSynchronous and Asynchronous Tasks\u003c/h2\u003e\u003cp\u003eAs a developer, you surely faced scenarios where certain actions or operations took a considerable amount of time to execute. We regularly have to do long-running tasks such as reading a file, calling an API, or downloading a big file. We could wait for one of these tasks to be finished before executing another task. If that\u0026#39;s the case, we say we are working in a \u0026#34;synchronous\u0026#34; way. By doing this, the whole application gets blocked and stops responding until the whole task is completed, and we can move on to a new one.\u003c/p\u003e\u003cp\u003eIn some cases, we don\u0026#39;t have any alternative. If we have Task1 and Task2 that depend on the result of the first action, we will have to wait until Task1 finishes executing to start Task2. But we could have the scenario where the subsequent tasks (or some of them) don\u0026#39;t depend on the result of the previous long-running task. If that\u0026#39;s the case, we have different strategies and approaches that we could take to make our application faster and in a more performant way.\u003c/p\u003e\u003cp\u003eFor example, we could have an application that runs concurrent tasks internally. There is a button and a task executed when it is clicked. Right after the user clicks on the button, the application can trigger a separate thread to run the requested task. In the meantime, the main thread becomes available to execute other actions while the button\u0026#39;s task is executed in the background. Doing this, we keep the UI responsive in case the user wants to interact with it.\u003c/p\u003e\u003cp\u003eAnother scenario would be needing to run multiple copies of a certain group of actions or instructions. An example of this would be uploading many files at the same time. In this case, our application could trigger one thread per file and execute the necessary code inside of them. Doing this, we would be processing the files in a \u0026#34;parallel\u0026#34; way. In a nutshell, here is the difference between the two concepts: concurrency means the application is making progress on more than one task at the same time, while parallelism is about running multiple tasks simultaneously.\u003c/p\u003e\u003cp\u003eBut let\u0026#39;s say we have to read a big file, call an API, and do some complex calculations. There is no dependency between the three tasks, but we need the result of all of them to continue the execution of our application and update the UI. In this case, we could execute our tasks \u0026#34;asynchronously\u0026#34; with the three ones running simultaneously and wait for their result to do the subsequent tasks.\u003c/p\u003e\u003ch2 id=\"What-Is-Asynchronous-Programming-\"\u003eWhat Is Asynchronous Programming?\u003c/h2\u003e\u003cp\u003eWe could define asynchronous programming as the way of executing programming code in a thread without having to wait for an I/O-bound or CPU-bound task to finish. I/O-bound operations could be file-system accesses, HTTP requests, API calls, or database queries. And CPU-bound operations would be actions like encrypting data, complex calculations, image or document management.\u003c/p\u003e\u003cp\u003eOne of the ideas of asynchronous programming is to divide our logic into \u003cem\u003eawaitable\u003c/em\u003e tasks so that we don\u0026#39;t block the execution of our application. We can call an async method and get a task object that represents it. In the meantime, we can do some not related and not dependant work. After we execute those operations, we await the async task, which may already be finished or not. If the execution is finished, we will get the resulting value from the task and use it in the next dependant operations.\u003c/p\u003e\u003ch3 id=\"Benefits\"\u003eBenefits\u003c/h3\u003e\u003cp\u003eSome of the benefits we have working with asynchronous tasks are:\u003c/p\u003e\u003cul\u003e\u003cli\u003eWe keep the UI of our app responsive.\u003c/li\u003e\u003cli\u003eWe improve the performance of our application.\u003c/li\u003e\u003cli\u003eWe avoid \u003ca href=\"https://medium.com/criteo-engineering/net-threadpool-starvation-and-how-queuing-makes-it-worse-512c8d570527\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethread pool starvation\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Drawbacks\"\u003eDrawbacks\u003c/h3\u003e\u003cp\u003eAlthough, there are some drawbacks when working with async programming:\u003c/p\u003e\u003cul\u003e\u003cli\u003eCode gets more complex and harder to maintain.\u003c/li\u003e\u003cli\u003eThere is increased memory allocation, as some objects have to stay alive longer while awaiting other code to be executed.\u003c/li\u003e\u003cli\u003eIt can get hard to find bugs occurring in asynchronous tasks.\u003c/li\u003e\u003cli\u003eWhen we\u0026#39;re writing an asynchronous piece of code, all our application code tends to become asynchronous.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Asynchronous-Programming-Patterns\"\u003eAsynchronous Programming Patterns\u003c/h2\u003e\u003cp\u003eTo perform asynchronous operations in .NET, we can follow three different patterns:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAsynchronous Programming Model (APM)\u003c/strong\u003e: Let\u0026#39;s say we have two methods, and we name them \u003ccode\u003eBeginOperation\u003c/code\u003e and \u003ccode\u003eEndOperation\u003c/code\u003e. After calling \u003ccode\u003eBeginOperation\u003c/code\u003e, our application can continue executing tasks on the calling thread while the async task is executed on a different thread. For each call to \u003ccode\u003eBeginOperation\u003c/code\u003e, our app should also call \u003ccode\u003eEndOperation\u003c/code\u003e method to get the results. In .NET, it can be implemented using \u003ccode\u003eIAsyncResult\u003c/code\u003e. Let\u0026#39;s see an example of this model:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eIO\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eThreading\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003esealed\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eProgram\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eMain\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e buffer \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ebyte\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e100\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e fs \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eFileStream\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;bigFile.txt\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e FileMode\u003cspan\u003e.\u003c/span\u003eOpen\u003cspan\u003e,\u003c/span\u003e FileAccess\u003cspan\u003e.\u003c/span\u003eRead\u003cspan\u003e,\u003c/span\u003e FileShare\u003cspan\u003e.\u003c/span\u003eRead\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e1024\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e FileOptions\u003cspan\u003e.\u003c/span\u003eAsynchronous\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003eIAsyncResult\u003c/span\u003e result \u003cspan\u003e=\u003c/span\u003e fs\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eBeginRead\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ebuffer\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e buffer\u003cspan\u003e.\u003c/span\u003eLength\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003e// Do other things...\u003c/span\u003e\n\n        \u003cspan\u003e\u003cspan\u003eint\u003c/span\u003e\u003c/span\u003e numBytes \u003cspan\u003e=\u003c/span\u003e fs\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eEndRead\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eresult\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        fs\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eClose\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        Console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eWriteLine\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Read {0}  Bytes:\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e numBytes\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eEvent-based Asynchronous Pattern (EAP)\u003c/strong\u003e: We start an async method that will trigger a \u003ccode\u003eCompleted\u003c/code\u003e event when the task is completed, making the result available to our application. This would be an example of this model:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eExampleHandler\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eevent\u003c/span\u003e \u003cspan\u003eEventHandler\u003c/span\u003e OnTriggerCompleted\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eStart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eint\u003c/span\u003e\u003c/span\u003e timeout\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e timer \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eTimer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eTimerCallback\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estate\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            OnTriggerCompleted\u003cspan\u003e?.\u003c/span\u003e\u003cspan\u003eInvoke\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        timer\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eChange\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etimeout\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eProgram\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eMain\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e handler \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eExampleHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        handler\u003cspan\u003e.\u003c/span\u003eOnTriggerCompleted \u003cspan\u003e+=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003esender\u003cspan\u003e,\u003c/span\u003e e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\n            Console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eWriteLine\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e$\u0026#34;Triggered at: \u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e DateTime\u003cspan\u003e.\u003c/span\u003eNow\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eToLongTimeString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        handler\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eStart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e3000\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        Console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eWriteLine\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e$\u0026#34;Start waiting at \u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eDateTime\u003cspan\u003e.\u003c/span\u003eNow\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eToLongTimeString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        Console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eWriteLine\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e$\u0026#34;Processing...\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        Console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eReadLine\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eTask-based Asynchronous Pattern (TAP)\u003c/strong\u003e: We have an \u003ccode\u003eOperationAsync\u003c/code\u003e method that returns a \u003ccode\u003eTask\u003c/code\u003e object, as in the following example:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eClassName\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eTask\u003c/span\u003e \u003cspan\u003eOperationAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ebyte\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e buffer\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eint\u003c/span\u003e\u003c/span\u003e offset\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eint\u003c/span\u003e\u003c/span\u003e count\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe can await that method, using \u003ccode\u003e\u003cspan\u003easync\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003eawait\u003c/span\u003e\u003c/code\u003e keywords. We will go deeper into this approach in a while.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eKeep in mind that \u003cstrong\u003ethe APM and EAP approaches are legacy models and they are no longer recommended\u003c/strong\u003e. Microsoft recommends using the \u003cem\u003eTask-based Asynchronous Pattern\u003c/em\u003e to implement async programming in our applications.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Asynchronous-Programming-in-C-\"\u003eAsynchronous Programming in C#\u003c/h2\u003e\u003cp\u003eAs we mentioned, async programming in C# can be accomplished by implementing the \u003cem\u003eTask-based Asynchronous Pattern\u003c/em\u003e. We will have methods that return a \u003ccode\u003eTask\u003c/code\u003e or \u003ccode\u003eTask\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eT\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e object. Defining those methods as async operations will enable us to await them and keep using the same execution thread to run other operations that are not linked to the awaited task.\u003c/p\u003e\u003cp\u003eC# provides us two keywords to handle \u003ccode\u003eTask\u003c/code\u003e objects in an easier way: \u003ccode\u003e\u003cspan\u003easync\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003eawait\u003c/span\u003e\u003c/code\u003e. Adding the keyword \u003ccode\u003e\u003cspan\u003easync\u003c/span\u003e\u003c/code\u003e to a method signature allows us to use the \u003ccode\u003e\u003cspan\u003eawait\u003c/span\u003e\u003c/code\u003e keyword inside the method while instructs the compiler to create a state machine to handle the asynchronicity. On the other hand, the \u003ccode\u003e\u003cspan\u003eawait\u003c/span\u003e\u003c/code\u003e keyword is used to pause the execution of a method and asynchronously wait for a \u003ccode\u003eTask\u003c/code\u003e to finish, while the current thread is sent back to the thread pool instead of keeping it in a blocked state. Everything happens in the background, avoiding us to implement and maintain the complexity of thread management and the state of the calls.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s analyze this piece of code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003eTask\u003cspan\u003e\u0026lt;\u003c/span\u003eUser\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eGetLoggedUserEmailAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u003cspan\u003eint\u003c/span\u003e\u003c/span\u003e userId \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eGetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e email \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e \u003cspan\u003eGetEmailAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003euserId\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eUser\u003c/span\u003e user \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eGetUserByEmail\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eemail\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003ereturn\u003c/span\u003e user\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003eTask\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eGetEmailAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eint\u003c/span\u003e\u003c/span\u003e userId\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e// Do something\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAn async method should return \u003ccode\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003eTask\u003c/code\u003e, or \u003ccode\u003eTask\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eT\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e, where \u003ccode\u003e\u003cspan\u003eT\u003c/span\u003e\u003c/code\u003e is the return data type that we need. Returning \u003ccode\u003e\u003cspan\u003evoid\u003c/span\u003e\u003c/code\u003e is normally used for event handlers. The keyword \u003ccode\u003e\u003cspan\u003easync\u003c/span\u003e\u003c/code\u003e enables us to use the command \u003ccode\u003e\u003cspan\u003eawait\u003c/span\u003e\u003c/code\u003e within the method so that we can wait for the asynchronous method processing as expected.\u003c/p\u003e\u003cp\u003eNotice that the methods end with \u0026#34;Async\u0026#34;. Although it is not mandatory, there is a naming convention that an asynchronous method name should end with the word \u0026#34;Async\u0026#34;. This convention aims to make it clear to the consumer of the functionality that the method won\u0026#39;t complete all of its work synchronously.\u003c/p\u003e\u003cp\u003eIn our previous example, \u003ccode\u003e\u003cspan\u003eGetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e is called synchronously. When the execution thread encounters the \u003ccode\u003e\u003cspan\u003eawait\u003c/span\u003e\u003c/code\u003e keyword on \u003ccode\u003e\u003cspan\u003eawait\u003c/span\u003e \u003cspan\u003eGetEmailAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003euserId\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, it creates a \u003ccode\u003eTask\u003cspan\u003e\u0026lt;\u003c/span\u003eUser\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e that contains the remainder of the \u003ccode\u003eGetLoggedUserEmailAsync\u003c/code\u003e method. This task is executed asynchronously after the \u003ccode\u003eTask\u003cspan\u003e\u0026lt;\u003c/span\u003estring\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e returned by \u003ccode\u003eGetEmailAsync\u003c/code\u003e. So, the \u003ccode\u003eUser\u003c/code\u003e object is returned from the \u003ccode\u003eTask\u003cspan\u003e\u0026lt;\u003c/span\u003eUser\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e created by the \u003ccode\u003e\u003cspan\u003eawait\u003c/span\u003e\u003c/code\u003e keyword.\u003c/p\u003e\u003ch2 id=\"Asynchronous-Code-in-Action\"\u003eAsynchronous Code in Action\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s see a short example to review the concepts previously explained. Having the following console application:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eIO\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003eSystem\u003cspan\u003e.\u003c/span\u003eThreading\u003cspan\u003e.\u003c/span\u003eTasks\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eProgram\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n   \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003eTask\u003c/span\u003e \u003cspan\u003eMain\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e args\u003cspan\u003e)\u003c/span\u003e\n   \u003cspan\u003e{\u003c/span\u003e\n       \u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e filePath \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;bigFile.txt\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n       \u003cspan\u003e// Create a big file\u003c/span\u003e\n       \u003cspan\u003eFileStream\u003c/span\u003e fs \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eFileStream\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efilePath\u003cspan\u003e,\u003c/span\u003e FileMode\u003cspan\u003e.\u003c/span\u003eCreateNew\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       fs\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSeek\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e1024\u003c/span\u003e \u003cspan\u003e*\u003c/span\u003e \u003cspan\u003e1024\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e SeekOrigin\u003cspan\u003e.\u003c/span\u003eBegin\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       fs\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eWriteByte\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       fs\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eClose\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n       \u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/span\u003e task \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eReadFileAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efilePath\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n       Console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eWriteLine\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;A synchronous message\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n       \u003cspan\u003e\u003cspan\u003eint\u003c/span\u003e\u003c/span\u003e length \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e task\u003cspan\u003e;\u003c/span\u003e\n\n       Console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eWriteLine\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Total file length: \u0026#34;\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e length\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       Console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eWriteLine\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;After reading message\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       Console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eReadLine\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n   \u003cspan\u003e}\u003c/span\u003e\n\n   \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003eTask\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eint\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eReadFileAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e file\u003cspan\u003e)\u003c/span\u003e\n   \u003cspan\u003e{\u003c/span\u003e\n       Console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eWriteLine\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Start reading file\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n       \u003cspan\u003e\u003cspan\u003eint\u003c/span\u003e\u003c/span\u003e length \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n       \u003cspan\u003eusing\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eStreamReader\u003c/span\u003e reader \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eStreamReader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efile\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n       \u003cspan\u003e{\u003c/span\u003e\n           \u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e fileContent \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eawait\u003c/span\u003e reader\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eReadToEndAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n           length \u003cspan\u003e=\u003c/span\u003e fileContent\u003cspan\u003e.\u003c/span\u003eLength\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003e}\u003c/span\u003e\n\n       Console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eWriteLine\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Finished reading file\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n       \u003cspan\u003ereturn\u003c/span\u003e length\u003cspan\u003e;\u003c/span\u003e\n   \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn this application, we read a big file, count the number of characters it has, and print different messages in the console. The method that triggers the file reading operation is defined as asynchronous, and it\u0026#39;s the one that starts the asynchronous thread reading the text. While the message \u0026#34;A synchronous message\u0026#34; is printed, the reading of the file continues. If we execute the application, we can see how the execution thread behaves based on the output messages:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6QF3i0BPAoDOSdF0T1jm07/269b11a895d0f74b415d49aa5b23d106/async-program-console.png\" alt=\"Asynchronous sample application output\"/\u003e\u003c/p\u003e\u003ch2 id=\"Summary\"\u003eSummary\u003c/h2\u003e\u003cp\u003eIn this article, we talked about how we can manage and organize the tasks in our application based on the dependency and order of execution. We talked about synchronism, parallelism, concurrency, and asynchronism. We described async programming, its benefits, and how we can implement it in our C# applications. You can find the code shown in this article in \u003ca href=\"https://github.com/auth0-blog/c-sharp-async-intro\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis GitHub repository\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIf you want to learn more about asynchronous programming in C# and what advanced features we have available, you can go to:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://docs.microsoft.com/en-us/dotnet/standard/async-in-depth\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAsync in depth\u003c/a\u003e by Microsoft.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAsynchronous programming with async and await\u003c/a\u003e by Microsoft.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAsynchronous Programming Guidance\u003c/a\u003e by David Fowler.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://docs.microsoft.com/en-us/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAsync/Await - Best Practices in Asynchronous Programming\u003c/a\u003e by Microsoft.\u003c/li\u003e\u003c/ul\u003e\u003cdiv\u003e\u003ch2 id=\"Aside--Securing-ASP-NET-Core-with-Auth0\"\u003eAside: Securing ASP.NET Core with Auth0\u003c/h2\u003e\u003cp\u003eSecuring ASP.NET Core applications with Auth0 is easy and brings a lot of great features to the table. With \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0\u003c/a\u003e, you only have to write a few lines of code to get a solid \u003ca href=\"https://auth0.com/user-management\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eidentity management solution\u003c/a\u003e, \u003ca href=\"https://auth0.com/docs/sso/single-sign-on\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esingle sign-on\u003c/a\u003e, support for \u003ca href=\"https://auth0.com/docs/identityproviders\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esocial identity providers (like Facebook, GitHub, Twitter, etc.)\u003c/a\u003e, and support for \u003ca href=\"https://auth0.com/enterprise\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eenterprise identity providers (like Active Directory, LDAP, SAML, custom, etc.)\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eOn ASP.NET Core, you need \u003ca href=\"https://auth0.com/docs/apis\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eto create an API in your Auth0 Management Dashboard\u003c/a\u003e and change a few things on your code. To create an API, you need to \u003ca href=\"https://auth0.com/signup\" data-amp-replace=\"CLIENT_ID\" data-amp-addparams=\"anonId=CLIENT_ID(cid-scope-cookie-fallback-name)\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esign up for a free Auth0 account\u003c/a\u003e. After that, you need to go to \u003ca href=\"https://manage.auth0.com/#/apis\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe API section of the dashboard\u003c/a\u003e and click on \u0026#34;Create API\u0026#34;. On the dialog shown, you can set the \u003cem\u003eName\u003c/em\u003e of your API as \u0026#34;Books\u0026#34;, the \u003cem\u003eIdentifier\u003c/em\u003e as \u0026#34;\u003ca href=\"http://books.mycompany.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttp://books.mycompany.com\u003c/a\u003e\u0026#34;, and leave the \u003cem\u003eSigning Algorithm\u003c/em\u003e as \u0026#34;RS256\u0026#34;.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6HrObJ2eGY7YehLzbBM0sH/066be814a124d98f03224d9b177caa22/net-core-2_creating-api-on-auth0.png\" alt=\"Creating API on Auth0\"/\u003e\u003c/p\u003e\u003cp\u003eAfter that, you have to add the call to \u003ccode\u003eservices\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e in the \u003ccode\u003e\u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method of the \u003ccode\u003eStartup\u003c/code\u003e class as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e authority \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e$\u0026#34;https://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eConfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e audience \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Audience\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\nservices\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  options\u003cspan\u003e.\u003c/span\u003eDefaultAuthenticateScheme \u003cspan\u003e=\u003c/span\u003e JwtBearerDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n  options\u003cspan\u003e.\u003c/span\u003eDefaultChallengeScheme \u003cspan\u003e=\u003c/span\u003e JwtBearerDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddJwtBearer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  options\u003cspan\u003e.\u003c/span\u003eAuthority \u003cspan\u003e=\u003c/span\u003e authority\u003cspan\u003e;\u003c/span\u003e\n  options\u003cspan\u003e.\u003c/span\u003eAudience \u003cspan\u003e=\u003c/span\u003e audience\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the body of the \u003ccode\u003e\u003cspan\u003eConfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method of the \u003ccode\u003eStartup\u003c/code\u003e class, you also need to add an invocation to \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthorization\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e as shown below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseRouting\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\napp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\napp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthorization\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\napp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseEndpoints\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eendpoints \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    endpoints\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eMapControllers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003eMake sure you invoke these methods in the order shown above. It is essential so that everything works properly.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eFinally, add the following element to the \u003ccode\u003eappsettings\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e configuration file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;Logging\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// ...\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;YOUR_DOMAIN\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;Audience\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;YOUR_AUDIENCE\u0026#34;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Replace the placeholders \u003ccode\u003e\u003cspan\u003eYOUR_DOMAIN\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003eYOUR_AUDIENCE\u003c/span\u003e\u003c/code\u003e with the actual values for the domain that you specified when creating your Auth0 account and the \u003cem\u003eIdentifier\u003c/em\u003e you assigned to your API.\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Most languages and frameworks support asynchronous programming. But, what is it exactly? Learn about async programming and how to implement it in C#.",
      "date_published": "2021-08-26T14:55:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/auth0-no-code-actions-integrations-now-available-in-beta/",
      "title": "Auth0 No-Code Actions Integrations Now Available in Beta",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://auth0.com/blog/actions-now-generally-available/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eActions launched recently\u003c/a\u003e as the next evolution of extensibility with Auth0, picking up where our legacy extensibility tools Rules and Hooks leave off. Actions unifies the Auth0 extensibility experience in one place. With it, we took the power of Rules and Hooks and created a greatly improved developer experience with features such as an industry-standard VS Code style editor, typescript, draft mode, version control, improved secret management, and an expanded library of NPM modules. Actions gives developers the ability to customize Auth0 using the full spectrum of coding options from pro-code to \u003ca href=\"https://auth0.com/blog/what-is-low-code-how-low-code-can-speed-digital-transformation/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003elow-code\u003c/a\u003e, with the addition of no-code Actions Integrations.\u003c/p\u003e\u003cp\u003eActions Integrations, as our new zero-code layer, offers an easy experience to extend Auth0 with partner-built innovations with no coding required. Now you can implement key integrations such as Identity Verification or Consent Management to your workflow without writing or maintaining a single line of code, the provider of the integration takes care of that. To use Actions Integrations, simply install an integration from the Auth0 Marketplace and drag-and-drop it into your Actions workflow. Then with only a few configuration settings, the integration is part of your tenant.\u003c/p\u003e\u003cp\u003eActions Integrations, currently in Beta, are now available through the \u003ca href=\"https://marketplace.auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Marketplace\u003c/a\u003e and in Actions in the Auth0 Dashboard. This marks an essential milestone in how you can leverage innovations from Marketplace Partners into your Customer Identity Access Management (CIAM) workflows. Through Actions and Marketplace, we are creating an ecosystem of sustainable, and ever-growing plug-and-play partner integrations that allows developers to solve many identity extensibility scenarios faster and without extra code.\u003c/p\u003e\u003cp\u003ePro-Code custom Actions will continue to be a core feature of Auth0, with all the support you’ve come to expect. By adding Actions Integrations to our offerings, we give you the option to replace the custom code for common solutions with no-code integrations and leave the custom code layer for unique use cases to you. This reduces your overall maintenance and risks associated with custom code.\u003c/p\u003e\u003ch2 id=\"Plug---Play-Extensibility\"\u003ePlug \u0026amp; Play Extensibility\u003c/h2\u003e\u003ch3 id=\"Endless-innovation--centrally-maintained\"\u003eEndless innovation, centrally maintained\u003c/h3\u003e\u003cp\u003eSatisfy your identity requirements right out-of-the-box without having to write custom code. Actions Integrations are reusable modules that are centrally maintained by a vetted Marketplace Partner. Integrations are designed to be maintained by the Partners with updates propagating automatically to all instances.This results in faster time-to-market while greatly reducing maintenance costs and resource drain associated with code updates that can result in having to rebuild Rules and Hooks.\u003c/p\u003e\u003ch3 id=\"Common-use-cases\"\u003eCommon use cases\u003c/h3\u003e\u003cp\u003eActions Integrations exist for the most common use cases of custom extensibility. These currently include:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eID DataWeb:\u003c/strong\u003e Real time and self service global identity verification\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eEva:\u003c/strong\u003e Second-factor voice biometric\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eScaled Access:\u003c/strong\u003e Delegated user access management\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eOne Trust:\u003c/strong\u003e Consent and user preferences management\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eIncognia:\u003c/strong\u003e Mobile identity proofing with address verification\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eIncognia:\u003c/strong\u003e Mobile login with location behavioral biometrics\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSecZetta:\u003c/strong\u003e Real-time, risk-based authentication\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eYoonik:\u003c/strong\u003e Second-factor facial biometric\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eInfobip:\u003c/strong\u003e Global SMS messaging\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAmazon:\u003c/strong\u003e Simple Notification Service (SNS) for microservices and serverless applications by Amazon\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eClickSend:\u003c/strong\u003e Global SMS messaging\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eCumul.io:\u003c/strong\u003e Self-service data visualization platform\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eDataGuard:\u003c/strong\u003e Consent and user preference management\u003c/li\u003e\u003cli\u003e\u003cem\u003e\u003c/em\u003eEsendex: SMS authentication\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eMitto:\u003c/strong\u003e Global SMS messaging\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePlivo:\u003c/strong\u003e SMS authentication\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eTelesign:\u003c/strong\u003e Global SMS messaging\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eVonage:\u003c/strong\u003e Global SMS messaging\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWith Marketplace, we are building partnerships to deliver innovations that further reduce your need to code features from scratch. After the public launch of Actions Integrations, we will continue to grow our Marketplace catalog, adding more services and modules to help you expand and customize your CIAM implementation.\u003c/p\u003e\u003cp\u003eWe encourage you to start using Actions integrations to satisfy any of the common use cases that apply to you. And of course, if you encounter any questions or have any comments, please direct them to our team of identity specialists.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Actions Integrations reduce the amount of custom code you need to write, maintain, and update.",
      "date_published": "2021-08-25T16:57:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/secure-software-supply-chain-with-github-security-features/",
      "title": "Secure Software Supply Chain with GitHub Security Features",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eTL;DR:\u003c/strong\u003e \nOne of the most critical aspects of modern software delivery is security. In the era of open-source projects, it is challenging and not easy to control every vulnerability and make sure that our solution does not use a package with serious vulnerabilities.  Today\u0026#39;s threat to supply chain security is unpatched software. In this article, we will learn how to improve code security with GitHub security features.\u003c/p\u003e\u003ch2 id=\"Security-Role-in-the-Software-Supply-Chain\"\u003eSecurity Role in the Software Supply Chain\u003c/h2\u003e\u003cp\u003eApplication implementation nowadays looks slightly different than a few years ago. Open-source software has become a standard. Using open-source libraries in different kinds of projects is something normal nowadays, and we do not have to write every part of our application from scratch.\u003c/p\u003e\u003cp\u003eWhen using some open-source code or a library, it is worth not forgetting about security aspects. Industry data suggests that 99 percent of codebases contain open-source code. This is a lot! With this fact, we have to remember about dangers related to vulnerabilities and bugs that can lead to bad consequences. Many examples can be provided where an open-source library was used, but then serious vulnerability was discovered, and in the end, there were problems with keeping security at the right level.\u003c/p\u003e\u003cp\u003eBefore we discuss the role of security in the software supply chain, we have to find out what it is. \u003cstrong\u003eSoftware supply chain\u003c/strong\u003e is anything that goes into or affects the source code from development through Continuous Integration and Delivery pipelines until it gets deployed into production and used broadly. Any examples? The software supply chain includes information about who wrote a specific fragment of code, which tools were used to apply security scanning, what is the infrastructure used to host our solution, or what dependencies are used.\u003c/p\u003e\u003cp\u003eWhen a solution is being developed, often security part is missed or left as the last step in the whole process of the software supply chain. One of the biggest threats to supply chain security nowadays is unpatched software. This is why we should not include security assessment as the last step of our software supply chain. Security should be an ongoing part of software development to make sure that any potential vulnerabilities can be quickly mitigated.\u003c/p\u003e\u003cp\u003eKeeping an eye on every security aspect can be challenging, especially for developers who are focused on the code implementation rather than scanning and searching for vulnerabilities. Also, it is important to provide security feedback to developers right away so that any potential vulnerabilities are eliminated as quickly as possible.\u003c/p\u003e\u003cp\u003eIn the following, we will focus on the security features available on GitHub to make sure that our software supply chain is more secure.\u003c/p\u003e\u003ch2 id=\"The-Sample-Application\"\u003eThe Sample Application\u003c/h2\u003e\u003cp\u003eTo present some of the security features in action, you can use the sample application that is available on \u003ca href=\"https://github.com/auth0-blog/Globomantics-Games\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis GitHub repository\u003c/a\u003e. This repository contains a simple web game written as an ASP .NET Core MVC application in .NET 5. We will not focus on the implementation details in this article. Our goal is to discover and understand different security features available on GitHub and see security scanning in action. With this repository, you can try security features on your own. Use the \u003ca href=\"https://github.com/auth0-blog/Globomantics-Games/tree/for-security-features-testing\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003esecurity\u003cspan\u003e-\u003c/span\u003efeatures\u003cspan\u003e-\u003c/span\u003etesting\u003c/code\u003e\u003c/a\u003e branch as a starting point by running the following command on your machine:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003egit\u003c/span\u003e clone -b for-security-features-testing https://github.com/auth0-blog/Globomantics-Games.git\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"GitHub-Security-Features-to-Keep-Secure-Your-Repository\"\u003eGitHub Security Features to Keep Secure Your Repository\u003c/h2\u003e\u003cp\u003eGitHub provides a few built-in tools to keep our source code security at the right level. However, we can also integrate third-party tools. Let\u0026#39;s start by discussing GitHub\u0026#39;s built-in security features first.\u003c/p\u003e\u003ch3 id=\"Repository-dependency-graph\"\u003eRepository dependency graph\u003c/h3\u003e\u003cp\u003eWhen using open-source libraries in our project, it is sometimes hard to track all dependencies. Of course, we can open our package managers (like NuGet) and see all the open-source packages added to the project. But what about a deeper knowledge about other packages used by the packages we referenced? Confusing and challenging, right? This is where the GitHub repository dependency graph can be helpful. With a dependency graph, we can recursively track all of the dependencies used in the project. \u003c/p\u003e\u003cp\u003eWe can find the dependency graph by opening our repository\u0026#39;s main page on GitHub, under the \u003cem\u003eInsights\u003c/em\u003e tab as in the picture below.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7s3HZp8ib6ApzkU5U6rJg7/80b3b277a0789dce93b8457d2a2b9b14/github-dependency-graph-example.png\" alt=\"GitHub dependency graph\"/\u003e\u003c/p\u003e\u003cp\u003eThe dependency graph is enabled by default for each repository hosted on GitHub. It can scan common package manifests like:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003epackage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003erequirements\u003cspan\u003e.\u003c/span\u003etxt\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003epackages\u003cspan\u003e.\u003c/span\u003econfig\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003e.\u003c/span\u003ecsproj\u003c/code\u003e files\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Automated-dependency-scanning\"\u003eAutomated dependency scanning\u003c/h3\u003e\u003cp\u003eOnce we know what dependencies are used in our project, it would be nice to scan them automatically and detect potential vulnerabilities. This is where automated dependency scanning can help. GitHub provides automated dependency alerts (using \u003ca href=\"https://dependabot.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDependabot\u003c/a\u003e) that watch dependency graphs. It cross-references the target versions of your project\u0026#39;s dependencies with the versions on known vulnerability lists aggregated in the \u003ca href=\"https://github.com/advisories\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGitHub Advisory Database\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eWhen a risk is detected, the project is alerted as presented in the picture below.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4W7rjQeVo8dH6lH51bfRdn/ea2f3f83ebd48ff46c4af4326ae0e1fb/dependency-scanning-example.png\" alt=\"GitHub dependency scanning\"/\u003e\u003c/p\u003e\u003cp\u003eThis is not enough. To make it easier for developers, once a vulnerability is detected in one of the libraries used, an automatic pull request is created, which contains the upgraded version of that library.\u003c/p\u003e\u003cp\u003eWe can enable the \u003cem\u003eDependabot alerts\u003c/em\u003e and the \u003cem\u003eDependabot security updates\u003c/em\u003e features accessing the \u003cem\u003eSecurity \u0026amp; analysis\u003c/em\u003e section under the \u003cem\u003eSettings\u003c/em\u003e tab on GitHub, as in the picture below:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/bwJP4ppPL73UEvIp1r9cD/b9a3883afba99ca0aa4e225c3fb53d1c/dependabot-alerts-configuration.png\" alt=\"GitHub security updates\"/\u003e\u003c/p\u003e\u003ch3 id=\"Secret-scanning\"\u003eSecret scanning\u003c/h3\u003e\u003cp\u003eStoring secrets and credentials in any source code repository is a bad practice. When a push is done to a public repository, GitHub scans the content of the commits for secrets and credentials.\u003c/p\u003e\u003cp\u003eWhat is more, GitHub detects known types of secrets from different providers like Adobe, Microsoft Azure, Atlassian, Dropbox, and so on.\u003c/p\u003e\u003cp\u003eWhen a secret is detected, the repository owner is alerted. The below picture presents the scanning flow.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3r4yctOqQmbX9K7TEyfKyS/e0697600af24c0de9c62e62cf2f49edd/secret-scanning-example-flow.png\" alt=\"GitHub secret scanning\"/\u003e\u003c/p\u003e\u003cp\u003e[\u003ca href=\"https://docs.github.com/en/developers/overview/secret-scanning-partner-program#how-secret-scanning-works-in-a-public-repository\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cem\u003eSource: GitHub\u003c/em\u003e\u003c/a\u003e]\u003c/p\u003e\u003cp\u003eOnce a new push with a secret embedded in the source code is done, GitHub applies regex scanning to verify if there is any secret with a known pattern. If a secret is detected, GitHub sends the found secret value to a service provider\u0026#39;s verify endpoint. If verification is successful, the secret is revoked and an email alert is sent to the source code repository owner.\u003c/p\u003e\u003cp\u003eSecret scanning is available for all public repositories and for private repositories owned by organizations where \u003cem\u003eGitHub Advanced Security\u003c/em\u003e is enabled. You can read more about \u003ca href=\"https://docs.github.com/en/developers/overview/secret-scanning-partner-program\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe secret scanning partner program here\u003c/a\u003e.\u003c/p\u003e\u003ch3 id=\"Security-policy\"\u003eSecurity policy\u003c/h3\u003e\u003cp\u003eAutomated scanning is helpful, but it is also important to provide a way for other developers and people who use/contribute to our project, in general, to report found vulnerabilities. We can facilitate reporting security issues by providing a \u003ccode\u003e\u003cspan\u003eSECURITY\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003emd\u003c/code\u003e file in the repository\u0026#39;s \u003ccode\u003eroot\u003c/code\u003e, \u003ccode\u003edocs\u003c/code\u003e, or \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003egithub\u003c/code\u003e folders. This file provides guidance on how to report vulnerability and contact the repository owner or which versions are supported with security updates. Providing guidance through this file can speed up the resolution of critical issues. When someone creates an issue in our repository, they will see a link to our project\u0026#39;s security policy.\u003c/p\u003e\u003cp\u003eThe following picture shows the document you can find in our sample project:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/37g2XyZ40VmAOoxWCaoSob/ed480113688b023108dcf774e14e9aaa/security-policy-document.png\" alt=\"GitHub security policy\"/\u003e\u003c/p\u003e\u003cp\u003eBy convention, the \u003ccode\u003e\u003cspan\u003eSECURITY\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003emd\u003c/code\u003e file lives in the root of our GitHub repository. There is no default template for security policy. However, we should try to put at least our contact information and explain how reported security issues can be verified. The security policy file is part of \u003ca href=\"https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edefault community health files\u003c/a\u003e on GitHub, so it means that we have to name it exactly in this way: \u003ccode\u003e\u003cspan\u003eSECURITY\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003emd\u003c/code\u003e.\u003c/p\u003e\u003ch3 id=\"Automated-code-scanning\"\u003eAutomated code scanning\u003c/h3\u003e\u003cp\u003eWith \u003ca href=\"https://github.com/features/actions\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGitHub Actions\u003c/a\u003e, we can enable automated code scanning so that each time a new merge is done, our code will be scanned. With code scanning enabled, we can analyze and find security vulnerabilities and errors in the code hosted in our GitHub repository.\u003c/p\u003e\u003cp\u003eGitHub provides a built-in code scanning tool called CodeQL, but we can integrate other third-party tools, of course. Adding code scanning is useful to help prevent developers from introducing any new security problems into the source code. Code scanning can also help improve our code quality.\u003c/p\u003e\u003cp\u003eAt a high level, CodeQL is an analysis engine used by developers to automate security checks, and by security researchers to perform variant analysis. In the following section, we will discover how to enable code scanning with CodeQL and what configuration options are available. To learn more about CodeQL, \u003ca href=\"https://codeql.github.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003echeck out the official documentation\u003c/a\u003e. \u003c/p\u003e\u003ch2 id=\"Repository-Code-Scanning-with-CodeQL\"\u003eRepository Code Scanning with CodeQL\u003c/h2\u003e\u003cp\u003eWhen using CodeQL, our source code is treated as data. Security vulnerabilities, bugs, and other errors are modeled as queries that can be executed against databases extracted from source code. There are three main steps in CodeQL analysis:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003cem\u003ePreparation\u003c/em\u003e, preparing the code by creating a CodeQL database.\u003c/li\u003e\u003cli\u003e\u003cem\u003eAnalysis\u003c/em\u003e, running CodeQL queries against the database.\u003c/li\u003e\u003cli\u003e\u003cem\u003eInterpretation\u003c/em\u003e, interpreting the query results to check if any vulnerabilities or code bugs were found.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eCodeQL can be used to scan many different languages like C++, C#, Java, or Phyton. We can use multiple queries when CodeQL scanning is done. To make it easier, we can use \u003ca href=\"https://codeql.github.com/docs/codeql-cli/creating-codeql-query-suites/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003equery suites\u003c/a\u003e. CodeQL query suites are \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003eqls\u003c/code\u003e files that allow us to pass multiple queries to CodeQL without having to specify the path to each query file individually.\u003c/p\u003e\u003cp\u003eIn the following, we are going to see how to use the \u003cem\u003eSecurity and Quality\u003c/em\u003e query suite to detect bugs and security issues in the source code.\u003c/p\u003e\u003cp\u003eTo enable CodeQL scanning, we open the \u003cem\u003eSecurity\u003c/em\u003e section and select \u003cem\u003eCode scanning alerts\u003c/em\u003e. Then we click the \u003cem\u003eSetup this workflow\u003c/em\u003e button within the \u003cem\u003eCodeQL Analysis\u003c/em\u003e item.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2dyxIKUmdQ8IfK0SZlxEST/fc4fd8563df833edb5c862731cb0bd32/codeql-setup.png\" alt=\"GitHub security policy\"/\u003e\u003c/p\u003e\u003cp\u003eNow, replace the default code of the workflow with the following.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Build and scan project with CodeQL\u0026#34;\u003c/span\u003e\n\n\u003cspan\u003eon\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003epull_request\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ebranches\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e main \u003cspan\u003e]\u003c/span\u003e\n\n\u003cspan\u003ejobs\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003eanalyze\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e analyze\n    \u003cspan\u003eruns-on\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ubuntu\u003cspan\u003e-\u003c/span\u003elatest\n    \u003cspan\u003epermissions\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003eactions\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e read\n      \u003cspan\u003econtents\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e read\n      \u003cspan\u003esecurity-events\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e write\n\n    \u003cspan\u003estrategy\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003efail-fast\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n      \u003cspan\u003ematrix\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003elanguage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e \u003cspan\u003e\u0026#39;csharp\u0026#39;\u003c/span\u003e \u003cspan\u003e]\u003c/span\u003e\n\n    \u003cspan\u003esteps\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Checkout repository\n      \u003cspan\u003euses\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e actions/checkout@v2\n\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Initialize CodeQL\n      \u003cspan\u003euses\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e github/codeql\u003cspan\u003e-\u003c/span\u003eaction/init@v1\n      \u003cspan\u003ewith\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003elanguages\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e $\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e matrix.language \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003econfig-file\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e .github/workflows/codeql/codeql\u003cspan\u003e-\u003c/span\u003econfig.yml\n\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Autobuild\n      \u003cspan\u003euses\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e github/codeql\u003cspan\u003e-\u003c/span\u003eaction/autobuild@v1\n\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Perform CodeQL Analysis\n      \u003cspan\u003euses\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e github/codeql\u003cspan\u003e-\u003c/span\u003eaction/analyze@v1\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce replacing the existing code, we can commit the \u003ca href=\"https://github.com/Daniel-Krzyczkowski/Globomantics-Games/blob/main/.github/workflows/codeql-analysis.yml\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003ecodeql\u003cspan\u003e-\u003c/span\u003eanalysis\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e\u003c/a\u003e generated file. Now, let\u0026#39;s discuss its structure.\u003c/p\u003e\u003cp\u003eFirst of all, we can decide when to run the scanning. In our case, the scanning is executed once a pull request is created to merge changes into the \u003ccode\u003emain\u003c/code\u003e branch. In the \u003ccode\u003ejobs\u003c/code\u003e section, we declare a runner environment specified by \u003ccode\u003eruns\u003cspan\u003e-\u003c/span\u003eon\u003c/code\u003e. By specifying the permission within a job definition, you can configure a different set of permissions for the \u003ca href=\"https://docs.github.com/en/actions/reference/authentication-in-a-workflow#about-the-github_token-secret\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e\u003cspan\u003eGITHUB_TOKEN\u003c/span\u003e\u003c/code\u003e\u003c/a\u003e for each job, if required. You can read more about job permissions in the \u003ca href=\"https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eofficial documentation\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn the \u003ccode\u003estrategy\u003c/code\u003e section, we can declare the languages for which scanning should be applied in the project. In our case, we want to scan for the C# language. We declare the languages in the \u003ccode\u003ematrix\u003c/code\u003e section. With \u003ccode\u003efail\u003cspan\u003e-\u003c/span\u003efast\u003c/code\u003e set to \u003ccode\u003e\u003cspan\u003efalse\u003c/span\u003e\u003c/code\u003e, we avoid breaking the whole workflow if scanning fails for one of the declared languages.\u003c/p\u003e\u003cp\u003eIn the \u003ccode\u003esteps\u003c/code\u003e section, there are the steps of the full process:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003cem\u003eCheckout repository\u003c/em\u003e, to checkout project\u0026#39;s code for scanning.\u003c/li\u003e\u003cli\u003e\u003cem\u003eInitialize CodeQL\u003c/em\u003e, to initialize CodeQL scanning for the languages declared in the \u003ccode\u003ematrix\u003c/code\u003e section. In the \u003ca href=\"https://github.com/auth0-blog/Globomantics-Games/tree/main/.github/workflows/codeql\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003econfig\u003cspan\u003e-\u003c/span\u003efile\u003c/code\u003e\u003c/a\u003e section, we can provide a path to the \u003ccode\u003ecodeql\u003cspan\u003e-\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e file where we declare the query suites which to use during the scanning. In this case, we use the \u003ccode\u003esecurity\u003cspan\u003e-\u003c/span\u003eand\u003cspan\u003e-\u003c/span\u003equality\u003c/code\u003e query suite. The \u003ccode\u003ecodeql\u003cspan\u003e-\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e file is not mandatory, but it helps to keep the CodeQL scanning script more readable. We can also use this file to disable the default queries and to specify which directories to scan during the analysis.\u003c/li\u003e\u003cli\u003e\u003cem\u003eAutobuild\u003c/em\u003e, to build source code.\u003c/li\u003e\u003cli\u003e\u003cem\u003ePerform CodeQL Analysis\u003c/em\u003e, to perform the analysis and publish the report.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eHere is the content of the \u003ccode\u003ecodeql\u003cspan\u003e-\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Security and Quality\u0026#34;\u003c/span\u003e\n\n\u003cspan\u003equeries\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Security and Quality\n    \u003cspan\u003euses\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e security\u003cspan\u003e-\u003c/span\u003eand\u003cspan\u003e-\u003c/span\u003equality\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce the scanning is completed, we can check the report under the \u003cem\u003eSecurity\u003c/em\u003e tab in the \u003cem\u003eCode scanning alerts\u003c/em\u003e section:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4vrcomaZxQHXWWRAxL0evU/bf5028ce02c9da560b855c108f28eca8/codeql-analysis-result-example.png\" alt=\"CodeQL Analysis result\"/\u003e\u003c/p\u003e\u003cp\u003eIn the report above, we can see a recommendation to check if the variable is null first and then try to access it instead of catching a \u003ccode\u003eNullReferenceException\u003c/code\u003e. With CodeQL, we can discover many different security issues and get hints on how to improve our code quality and eliminate potential bugs. I recommend learning more about CodeQL analysis by reading the \u003ca href=\"https://docs.github.com/en/code-security/secure-coding/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eofficial documentation\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"License-Compliance-Management\"\u003eLicense Compliance Management\u003c/h2\u003e\u003cp\u003eWhen talking about open-source software, it is important to remember about license compliance. There are many different types of licenses, and we have to carefully verify them before we use an open-source library in one of our projects. The most commonly used open-source licenses are:\u003c/p\u003e\u003cul\u003e\u003cli\u003eGNU General Public License (GPL)\u003c/li\u003e\u003cli\u003eThe Apache License\u003c/li\u003e\u003cli\u003eMIT License\u003c/li\u003e\u003cli\u003eGNU Less General Public License (LGPL)\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eFor instance, GPL is a copyleft license. Using a copyleft license means that software products containing an open source copyleft license must be released with the same copyleft license. So, if we use a GPL-licensed library in our software, we cannot distribute it with an MIT license, for example.\u003c/p\u003e\u003cp\u003eMIT is a permissive license. Software licensed under the MIT license can be used and modified without limits —  as long as a copy of the original MIT license and a copyright notice are added to it.\u003c/p\u003e\u003cp\u003eSo, we have to be careful in this case because this can be problematic when we want to commercialize our software product.\u003c/p\u003e\u003cp\u003eGitHub does not provide a license scanning feature by default. Third-party tools can be used to set up license scanning. For example, \u003ca href=\"https://snyk.io/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSnyk\u003c/a\u003e is one of these third-party tools. With \u003ca href=\"https://snyk.io/product/open-source-license-compliance/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSnyk Open Source License Compliance Management\u003c/a\u003e, we can scan our project and verify what licenses are used in the libraries we use.\u003c/p\u003e\u003cp\u003eSnyk license scanning is available in the paid plan, but a 14 days trial version is also available. Once we sign in to \u003ca href=\"https://app.snyk.io/login\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eapp.snyk.io\u003c/a\u003e using a GitHub account, we can select which project we would like to scan. In our case, let\u0026#39;s continue using Snyk without granting direct permissions to the repository on GitHub. We will see how to connect GitHub to the Snyk API in a while. So, let\u0026#39;s click \u003cem\u003eContinue without permissions\u003c/em\u003e as presented below:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2A2DFxw6sExHnkNarFmWhf/6a976312ba2f07f2ad55de49ad18b73e/snyk-setup-page.png\" alt=\"Snyk setup\"/\u003e\u003c/p\u003e\u003cp\u003eIn the next section, we provide the URL to our public repository on GitHub. In our case, it is \u003ca href=\"https://github.com/Daniel-Krzyczkowski/Globomantics-Games\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://github.com/auth0-blog/Globomantics-Games)\u003c/a\u003e. Then, let\u0026#39;s click the \u003cem\u003eImport 1 repository\u003c/em\u003e button. Once we are signed in, we can activate the 14 days trial by clicking the \u003cem\u003eStart free trial\u003c/em\u003e button. \u003c/p\u003e\u003cp\u003eAt this point, let\u0026#39;s click the gear icon in the right top corner of the Snyk website. From the left bar, we have to switch to \u003cem\u003eLicenses\u003c/em\u003e. This is where we can see the list of all available licenses discovered in our project once the Snyk license scanning is applied.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/57l8aP1R9XKBS0omyVJZje/55e437274f187016d4a2b6d227adf2ee/snyk-detected-licenses.png\" alt=\"Snyk license scanning\"/\u003e\u003c/p\u003e\u003cp\u003eAs we can see in the picture above, we can assign different levels of severity to specific license types (\u003ccode\u003eNone\u003c/code\u003e, \u003ccode\u003eLow\u003c/code\u003e, \u003ccode\u003eMedium\u003c/code\u003e, or \u003ccode\u003eHigh\u003c/code\u003e). Let\u0026#39;s select the \u003ccode\u003eApache\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2.0\u003c/span\u003e\u003c/code\u003e license from the list. We can add instructions on what should be exactly verified when this type of license is found in our project. Notice that \u003cem\u003eSeverity\u003c/em\u003e is set to \u003ccode\u003eMedium\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5PgRmN2iL2QbATBMRD0iN/4ad13bdd82078dc048ad688b95a81c16/apache-license-snyk.png\" alt=\"Apache license in Snyk\"/\u003e\u003c/p\u003e\u003cp\u003eNow, to enable Snyk scanning on our code, we need to obtain an access token from Synk and store it under the \u003cem\u003eSecrets\u003c/em\u003e section on GitHub. So, let\u0026#39;s click the avatar in the right top corner, and from the list, select \u003cem\u003eAccount settings\u003c/em\u003e. Under the \u003cem\u003eAuth Token\u003c/em\u003e section, let\u0026#39;s click \u003ccode\u003eClick to show\u003c/code\u003e to display the token. Finally, let\u0026#39;s copy the token so that we can use it in the GitHub Actions workflow responsible for the license scanning.\u003c/p\u003e\u003cp\u003eBack on GitHub, we click the \u003cem\u003eSecrets\u003c/em\u003e tab and select \u003cem\u003eSecrets\u003c/em\u003e. We paste the token obtained from Snyk by using  the \u003cem\u003eNew repository secret\u003c/em\u003e button. Once the secret is saved, it should be displayed on the list.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/DOmT8mdLi0bfEPL06C5ei/3be9cc44abfd0909589e16fc95f49196/snyk-token-secret-on-github.png\" alt=\"Snyk token configuration on GitHub\"/\u003e\u003c/p\u003e\u003cp\u003eNow it is time to add the Snyk scanning workflow using GitHub Actions. Under the \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003egithub\u003cspan\u003e/\u003c/span\u003eworkflows\u003c/code\u003e folder (the same where we put \u003ccode\u003ecodeql\u003cspan\u003e-\u003c/span\u003eanalysis\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e file for CodeQL scanning), we have to place the \u003ca href=\"https://github.com/auth0-blog/Globomantics-Games/blob/main/.github/workflows/snyk-license-scanning.yml\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003esnyk\u003cspan\u003e-\u003c/span\u003elicense\u003cspan\u003e-\u003c/span\u003escanning\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e\u003c/a\u003e file with the following content:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Build and scan project with Snyk\u0026#34;\u003c/span\u003e\n\n\u003cspan\u003eon\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ebranches\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e main \u003cspan\u003e]\u003c/span\u003e\n\n\u003cspan\u003ejobs\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003ebuild-and-scan\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003eruns-on\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ubuntu\u003cspan\u003e-\u003c/span\u003elatest\n\n    \u003cspan\u003esteps\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003euses\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e actions/checkout@v2\n\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Setup .NET\n      \u003cspan\u003euses\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e actions/setup\u003cspan\u003e-\u003c/span\u003edotnet@v1\n      \u003cspan\u003ewith\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003edotnet-version\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e 5.0.x\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Restore dependencies\n      \u003cspan\u003erun\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e dotnet restore ./src/web\u003cspan\u003e-\u003c/span\u003egame/Globomantics.sln\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Build\n      \u003cspan\u003erun\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e dotnet build ./src/web\u003cspan\u003e-\u003c/span\u003egame/Globomantics.sln \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eno\u003cspan\u003e-\u003c/span\u003erestore\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Test\n      \u003cspan\u003erun\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e dotnet test ./src/web\u003cspan\u003e-\u003c/span\u003egame/Globomantics.sln \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eno\u003cspan\u003e-\u003c/span\u003ebuild \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003everbosity normal\n\n\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Run Snyk to check for vulnerabilities\n      \u003cspan\u003euses\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e snyk/actions/dotnet@master\n      \u003cspan\u003econtinue-on-error\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e \u003cspan\u003e# To make sure that SARIF upload gets called\u003c/span\u003e\n      \u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eSNYK_TOKEN\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e $\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e secrets.SNYK_TOKEN \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n      \u003cspan\u003ewith\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003esarif\u003cspan\u003e-\u003c/span\u003efile\u003cspan\u003e-\u003c/span\u003eoutput=snyk.sarif \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003efile=./src/web\u003cspan\u003e-\u003c/span\u003egame/Globomantics.sln \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003eseverity\u003cspan\u003e-\u003c/span\u003ethreshold=medium\n\n\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Upload result to GitHub Code Scanning\n      \u003cspan\u003euses\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e github/codeql\u003cspan\u003e-\u003c/span\u003eaction/upload\u003cspan\u003e-\u003c/span\u003esarif@v1\n      \u003cspan\u003ewith\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003esarif_file\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e snyk.sarif\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0026#39;s discuss its structure. We want to execute the scanning when a push to the \u003ccode\u003emain\u003c/code\u003e branch occurs. In the \u003ccode\u003ejobs\u003c/code\u003e section, we declare a runner environment specified by \u003ccode\u003eruns\u003cspan\u003e-\u003c/span\u003eon\u003c/code\u003e. In the \u003ccode\u003esteps\u003c/code\u003e section, there are a few required steps:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003cem\u003eCheckout repository\u003c/em\u003e, to checkout project\u0026#39;s code for scanning.\u003c/li\u003e\u003cli\u003e\u003cem\u003eSetup .NET\u003c/em\u003e, which includes restoring dependencies with the \u003ccode\u003edotnet restore\u003c/code\u003e command, then \u003ccode\u003edotnet build\u003c/code\u003e to build project, and \u003ccode\u003edotnet test\u003c/code\u003e to run tests if they exist in the solution.\u003c/li\u003e\u003cli\u003e\u003cem\u003eRun Snyk to check for vulnerabilities\u003c/em\u003e, which communicates with the Snyk API to apply the code scanning. Notice that we have to fill \u003ccode\u003e\u003cspan\u003eSNYK_TOKEN\u003c/span\u003e\u003c/code\u003e with the value we put in the \u003ccode\u003eSecrets\u003c/code\u003e section. There are also a few arguments: \n\u003cul\u003e\u003cli\u003eThe \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003esarif\u003cspan\u003e-\u003c/span\u003efile\u003cspan\u003e-\u003c/span\u003eoutput\u003cspan\u003e=\u003c/span\u003esnyk\u003cspan\u003e.\u003c/span\u003esarif\u003c/code\u003e argument provides the name of the file which contains the scanning report.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003efile\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003esrc\u003cspan\u003e/\u003c/span\u003eweb\u003cspan\u003e-\u003c/span\u003egame\u003cspan\u003e/\u003c/span\u003eGlobomantics\u003cspan\u003e.\u003c/span\u003esln\u003c/code\u003e argument provides the path to the project/solution.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003eseverity\u003cspan\u003e-\u003c/span\u003ethreshold\u003cspan\u003e=\u003c/span\u003emedium\u003c/code\u003e- parameter is used to report alerts with severity \u003ccode\u003eMedium\u003c/code\u003e and above.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cem\u003eUpload result to GitHub Code Scanning\u003c/em\u003e, which is responsible for uploading the scanning result so that we can see it under the \u003cem\u003eSecurity\u003c/em\u003e tab.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eOnce we push any changes to the \u003ccode\u003emain\u003c/code\u003e branch, the scanning will be triggered. Let\u0026#39;s check the scanning report shown below:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2lM81Cue8ALxnT6u9sFDUs/48b9c563e78651709486ce66c97d5b43/snyk-license-scanning-result.png\" alt=\"License scanning report\"/\u003e\u003c/p\u003e\u003cp\u003eAs we can see above, the \u003ccode\u003eApache\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2.0\u003c/span\u003e\u003c/code\u003e license was found in one of the libraries we use: \u003ccode\u003eSerilog\u003c/code\u003e. Once we click on the alert, we can see the details shown below:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7MCT0ERLSfTmqB3ztLalum/0a3209ecfbeb15549b351938e2e5b10e/snyk-license-scanning-details.png\" alt=\"License scanning details\"/\u003e\u003c/p\u003e\u003cp\u003eWe can see that the \u003ccode\u003eSerilog\u003c/code\u003e library uses \u003ccode\u003eApache\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e2.0\u003c/span\u003e\u003c/code\u003e license, and we included this package in the \u003ccode\u003eGlobomantics\u003cspan\u003e.\u003c/span\u003eCloudGame\u003c/code\u003e project using the NuGet package manager. The reason why we see this alert is the fact that we set the \u003ccode\u003e\u003cspan\u003e--\u003c/span\u003eseverity\u003cspan\u003e-\u003c/span\u003ethreshold\u003c/code\u003e parameter to \u003ccode\u003eMedium\u003c/code\u003e. In this case, we will be alerted whenever there is a library used in our project with the license for which we set the severity to \u003ccode\u003eMedium\u003c/code\u003e in the Snyk configuration.\u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eIn this article, we discovered how to enable and use GitHub security features to improve code security and software supply chain. We learned how to enable automated dependency scanning and updates, enable scanning with CodeQL, and verify license compliance using Snyk.\u003c/p\u003e\u003cp\u003eIf you want to know more about what learned in this article, please check out the following documentation:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=hln5v7odguE\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAchieving DevSecOps with GitHub Advanced Security\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://docs.github.com/en/code-security/secure-coding/using-codeql-code-scanning-with-your-existing-ci-system/configuring-codeql-runner-in-your-ci-system\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eConfiguring CodeQL runner in your CI system\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/devsecops-in-github\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDevSecOps in GitHub\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://docs.microsoft.com/en-us/learn/modules/maintain-secure-repository-github/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMaintain a secure repository by using GitHub best practices\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cdiv\u003e\u003ch2 id=\"Aside--Securing-ASP-NET-Core-with-Auth0\"\u003eAside: Securing ASP.NET Core with Auth0\u003c/h2\u003e\u003cp\u003eSecuring ASP.NET Core applications with Auth0 is easy and brings a lot of great features to the table. With \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0\u003c/a\u003e, you only have to write a few lines of code to get a solid \u003ca href=\"https://auth0.com/user-management\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eidentity management solution\u003c/a\u003e, \u003ca href=\"https://auth0.com/docs/sso/single-sign-on\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esingle sign-on\u003c/a\u003e, support for \u003ca href=\"https://auth0.com/docs/identityproviders\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esocial identity providers (like Facebook, GitHub, Twitter, etc.)\u003c/a\u003e, and support for \u003ca href=\"https://auth0.com/enterprise\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eenterprise identity providers (like Active Directory, LDAP, SAML, custom, etc.)\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eOn ASP.NET Core, you need \u003ca href=\"https://auth0.com/docs/apis\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eto create an API in your Auth0 Management Dashboard\u003c/a\u003e and change a few things on your code. To create an API, you need to \u003ca href=\"https://auth0.com/signup\" data-amp-replace=\"CLIENT_ID\" data-amp-addparams=\"anonId=CLIENT_ID(cid-scope-cookie-fallback-name)\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esign up for a free Auth0 account\u003c/a\u003e. After that, you need to go to \u003ca href=\"https://manage.auth0.com/#/apis\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe API section of the dashboard\u003c/a\u003e and click on \u0026#34;Create API\u0026#34;. On the dialog shown, you can set the \u003cem\u003eName\u003c/em\u003e of your API as \u0026#34;Books\u0026#34;, the \u003cem\u003eIdentifier\u003c/em\u003e as \u0026#34;\u003ca href=\"http://books.mycompany.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttp://books.mycompany.com\u003c/a\u003e\u0026#34;, and leave the \u003cem\u003eSigning Algorithm\u003c/em\u003e as \u0026#34;RS256\u0026#34;.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6HrObJ2eGY7YehLzbBM0sH/066be814a124d98f03224d9b177caa22/net-core-2_creating-api-on-auth0.png\" alt=\"Creating API on Auth0\"/\u003e\u003c/p\u003e\u003cp\u003eAfter that, you have to add the call to \u003ccode\u003eservices\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e in the \u003ccode\u003e\u003cspan\u003eConfigureServices\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method of the \u003ccode\u003eStartup\u003c/code\u003e class as follows:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e authority \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e$\u0026#34;https://\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eConfiguration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e audience \u003cspan\u003e=\u003c/span\u003e Configuration\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Auth0:Audience\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\nservices\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  options\u003cspan\u003e.\u003c/span\u003eDefaultAuthenticateScheme \u003cspan\u003e=\u003c/span\u003e JwtBearerDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n  options\u003cspan\u003e.\u003c/span\u003eDefaultChallengeScheme \u003cspan\u003e=\u003c/span\u003e JwtBearerDefaults\u003cspan\u003e.\u003c/span\u003eAuthenticationScheme\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAddJwtBearer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eoptions \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  options\u003cspan\u003e.\u003c/span\u003eAuthority \u003cspan\u003e=\u003c/span\u003e authority\u003cspan\u003e;\u003c/span\u003e\n  options\u003cspan\u003e.\u003c/span\u003eAudience \u003cspan\u003e=\u003c/span\u003e audience\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the body of the \u003ccode\u003e\u003cspan\u003eConfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method of the \u003ccode\u003eStartup\u003c/code\u003e class, you also need to add an invocation to \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthorization\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e as shown below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eapp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseRouting\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\napp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthentication\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\napp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseAuthorization\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\napp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eUseEndpoints\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eendpoints \u003cspan\u003e=\u0026gt;\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n    endpoints\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eMapControllers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003eMake sure you invoke these methods in the order shown above. It is essential so that everything works properly.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eFinally, add the following element to the \u003ccode\u003eappsettings\u003cspan\u003e.\u003c/span\u003ejson\u003c/code\u003e configuration file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;Logging\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// ...\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;Auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;Domain\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;YOUR_DOMAIN\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;Audience\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;YOUR_AUDIENCE\u0026#34;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Replace the placeholders \u003ccode\u003e\u003cspan\u003eYOUR_DOMAIN\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003eYOUR_AUDIENCE\u003c/span\u003e\u003c/code\u003e with the actual values for the domain that you specified when creating your Auth0 account and the \u003cem\u003eIdentifier\u003c/em\u003e you assigned to your API.\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn what software supply chain is and how to improve security with GitHub security features.",
      "date_published": "2021-08-23T17:03:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/what-is-lgpd-a-business-guide-to-brazils-data-protection-law/",
      "title": "What Is LGPD? A Business Guide To Brazil's Data Protection Law",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eLei Geral de Proteção de Dados Pessoais (LGPD or General Personal Data Protection Law) is Brazil’s data protection and privacy law that is closely modeled on the General Data Protection Regulation (GDPR) in the European Union. LGPD was passed by the National Congress of Brazil on July 10, 2018, in an effort to unify and enhance 40+ data privacy instruments within the country into a single piece of legislation. LGPD went into effect on September 18, 2020. Like the GDPR, the law impacts global organizations beyond Brazil’s borders.\u003c/p\u003e\u003cp\u003eThe extent to which LGPD applies to your organization will depend on the specific nature of your business, so you should always seek skilled legal counsel to help you navigate compliance requirements. However, if your organization does business in Brazil or collects/processes the data of any individual within Brazil, you should familiarize yourself with LGPD’s requirements (summarized below) to understand what impact these regulations may have on you.\u003c/p\u003e\u003cdiv\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003e\u003cpath d=\"M22 11.08V12a10 10 0 11-5.93-9.14\"\u003e\u003c/path\u003e\u003cpath d=\"M22 4L12 14.01l-3-3\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003cp\u003e\u003cstrong\u003eImportant Information\u003c/strong\u003e\u003cbr/\u003e\u003cb\u003e\u003c/b\u003e\u003c/p\u003e\u003cp\u003eThe following information is not intended as legal advice, and readers should consult with their attorneys about matters of compliance.\u003cbr/\u003e \u003c/p\u003e\u003c/div\u003e\u003ch2 id=\"Why-LGPD-Was-Passed\"\u003eWhy LGPD Was Passed\u003c/h2\u003e\u003cp\u003eLGPD was passed to demonstrate and protect individuals’ right to privacy. Despite Brazil being \u003ca href=\"https://www.launchwaymedia.com/blog/brazil-latin-americas-technology-leader\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLatin America’s technology leader\u003c/a\u003e and \u003ca href=\"https://www.zdnet.com/article/it-investments-in-brazil-surpass-world-average/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eone of the top 10 tech markets\u003c/a\u003e in the world, its data protection laws have failed to keep pace with this technological growth. As a side-effect of that rapid growth, Brazil has experienced a number of recent \u003ca href=\"https://portswigger.net/daily-swig/brazil-reaches-towards-cybersecurity-maturity\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehigh-profile data breaches\u003c/a\u003e. LGPD establishes a clear requirement for organizations to implement controls that protect individuals’ personal data, with the end goal of reducing the impact of breaches on individuals.\u003c/p\u003e\u003cp\u003eIn addition to introducing privacy regulations, the LGPD also established a separate national authority, the Autoridade Nacional de Proteção de Dados (ANPD or National Data Protection Authority in English), which is responsible for enforcing the law, including issuing penalties and fines. The creation of the ANPD was originally vetoed by President Jair Bolsonaro but later reinstated via \u003ca href=\"https://www.mondaq.com/brazil/data-protection/818496/provisional-measure-no-86918-creates-the-brazilian-data-protection-authority-and-amends-several-articles-of-the-brazilian-general-data-protection-law\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eexecutive order\u003c/a\u003e in August of 2020.\u003c/p\u003e\u003ch2 id=\"Who-LGPD-Applies-To\"\u003eWho LGPD Applies To\u003c/h2\u003e\u003cp\u003eLGPD applies to any organization (or individual) regardless of size, industry, public or private status, or country of residence.\u003c/p\u003e\u003cp\u003eAny legal entity or natural person processing data collected from persons in Brazil (“data controller”) is subject to LGPD if:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe data collected/processed is about people in Brazil.\u003c/li\u003e\u003cli\u003eThe processing is carried out \u003cstrong\u003einside Brazil;\u003c/strong\u003e or\u003c/li\u003e\u003cli\u003eThe processing is for the purposes of offering and selling goods or services to individuals in Brazil.\u003c/li\u003e\u003cli\u003eThe processing is of personal data collected within Brazil.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Exceptions\"\u003eExceptions\u003c/h3\u003e\u003cp\u003eThere are some limited exceptions to the applicability of LGPD. Exceptions include situations where the data is being collected and/or processed:\u003c/p\u003e\u003cul\u003e\u003cli\u003eBy a natural person for private and non-commercial purposes.\u003c/li\u003e\u003cli\u003eFor journalistic, artistic, or academic purposes, regardless of who does the collecting.\u003c/li\u003e\u003cli\u003eFor the purposes of national security, defense, or public safety.\u003c/li\u003e\u003cli\u003eFor investigating and prosecuting criminal offenses.\u003c/li\u003e\u003cli\u003eIf the personal data originates in other countries and only passes through Brazil without any processing being carried out.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"LGPD-Includes-a-Broad-Definition-of-Personal-Data\"\u003eLGPD Includes a Broad Definition of Personal Data\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://iapp.org/resources/article/brazilian-data-protection-law-lgpd-english-translation/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLGPD defines\u003c/a\u003e personal data broadly as any information that could be used to identify an individual. This includes any information that could be combined with other information to identify an individual. That means information such as email, IP addresses, phone numbers, geolocation, and credit card numbers can all be considered personal information under LGPD.\u003c/p\u003e\u003ch3 id=\"Sensitive-Personal-Data\"\u003eSensitive Personal Data\u003c/h3\u003e\u003cp\u003eBrazil has a culturally and racially diverse population. Like Europe’s GDPR, LGPD recognizes that additional protections are sometimes needed to protect individuals against discrimination. These potentially higher-risk attributes are defined as “sensitive personal data” under LGPD and include:\u003c/p\u003e\u003cul\u003e\u003cli\u003eHealth information\u003c/li\u003e\u003cli\u003eGenetic information\u003c/li\u003e\u003cli\u003eSexual information\u003c/li\u003e\u003cli\u003eMedical information\u003c/li\u003e\u003cli\u003eBiometric characteristics\u003c/li\u003e\u003cli\u003eRacial or ethnic origin information\u003c/li\u003e\u003cli\u003ePolitical affiliations\u003c/li\u003e\u003cli\u003eReligious affiliations\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"LGPD-Compliance-Obligations\"\u003eLGPD Compliance Obligations\u003c/h2\u003e\u003cp\u003eLGPD is a significant enhancement and consolidation of Brazil’s previous data privacy laws, and the changes will affect organizations in every industry. Below are some of the key compliance considerations businesses will need to consider.\u003c/p\u003e\u003ch3 id=\"1--Define-and-Document-Lawful-Basis-for-Processing-Personal-Data\"\u003e1. Define and Document Lawful Basis for Processing Personal Data\u003c/h3\u003e\u003cp\u003eLGPD requires every organization that collects or processes personal data to have at least one of the following legally acceptable reasons for doing so, as well as to document those reasons for auditing purposes.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eConsent from an individual to process their data.\u003c/strong\u003e Any individual over the age of 18 can consent to the processing of their personal data.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eTo follow applicable regulatory requirements and public policies.\u003c/strong\u003e Organizations can collect and process data if it is required in order to follow laws and regulations that apply to them.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eFor the purpose of conducting a study or research.\u003c/strong\u003e Research is a legal basis for personal data processing, as long as organizations take reasonable steps to anonymize that data.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eTo fulfill a contractual agreement.\u003c/strong\u003e Processing an individual\u0026#39;s personal data is acceptable if you’ve signed a contract with that individual to deliver goods or services and need to process their data to provide it to them.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eLegal proceedings.\u003c/strong\u003e Personal data may be processed for the sake of a court case, arbitration, or other legal proceedings.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eTo protect the life or physical safety of an individual or a third party.\u003c/strong\u003e For example, national security is a legally acceptable reason to process personal data.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eTo protect an individual’s health in healthcare procedures.\u003c/strong\u003e For example, it’s acceptable to process personal data to ensure you’re not putting a patient at risk during surgery.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eFor the legitimate interests of your organization or a third party.\u003c/strong\u003e Your organization’s interests are a legal basis for processing personal data, as long as those interests do not conflict with the rights, freedoms, or interests of an individual.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eFor the sake of protecting an individual’s credit.\u003c/strong\u003e Protecting an individual’s credit is an acceptable basis for processing data, as long as that processing is done in accordance with the provisions laid out in other relevant legislation in addition to LGPD.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"2--Honor-the-Privacy-Rights-of-Individuals\"\u003e2. Honor the Privacy Rights of Individuals\u003c/h3\u003e\u003cp\u003eLike GDPR, LGPD provides individuals with several rights that they can request organizations to recognize and uphold at any time. Organizations must have internal procedures and processes in place to respond to requests from individuals who exercise these rights, which include:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eConfirmation of processing.\u003c/strong\u003e Individuals have the right to confirm whether their personal data has been or is being processed.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAccess to personal data.\u003c/strong\u003e Individuals may request access to any of their personal data that an organization processes.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eData portability.\u003c/strong\u003e Individuals may request that their personal data be transferred to another service or product provider, as long as that request is in accordance with other national regulations, doesn’t compromise any commercial or industrial secrets, and the data hasn’t already been anonymized.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eRectification of inaccurate information.\u003c/strong\u003e Individuals may request that inaccurate, outdated, or incomplete personal data be corrected or updated.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAnonymization, blocking, or deletion of data.\u003c/strong\u003e Individuals can request that unnecessary or excessive personal data, or personal data processed in a non-compliant manner, be anonymized, blocked, or deleted.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eDeletion of data.\u003c/strong\u003e Individuals may request to have their personal data deleted at any time where processing is based on consent.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eRight to be informed.\u003c/strong\u003e Individuals have the right to be informed about third parties granted access to their personal data. Individuals also have the right to be informed regarding their right to refuse consent.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eWithdrawal of consent.\u003c/strong\u003e Individuals have the right to revoke their consent to process or collect data at any time.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eReview of automated decisions.\u003c/strong\u003e Individuals have the right to request the review of decisions solely based on automated processing that affects their interests, including profiling.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eFiling complaints.\u003c/strong\u003e Individuals may file a complaint against an organization with the ANPD if they feel that any of these rights have been violated.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"3--Appoint-a-Data-Protection-Officer--DPO-\"\u003e3. Appoint a Data Protection Officer (DPO)\u003c/h3\u003e\u003cp\u003eThe LGPD requires every organization under its jurisdiction to appoint a data protection officer (DPO) to be their point person for data protection efforts. The DPO does not have to be an individual person; a committee can provide this service, as can an outside consultant. The DPO is responsible for ensuring that the organization takes appropriate action to protect personal data and for communicating with end-users and government authorities on matters related to data privacy. The identity and contact information of the DPO must be available to the public (preferably on your website).\u003c/p\u003e\u003ch3 id=\"4--Prepare--Inventory--and-Conduct-Data-Protection-Impact-Assessments--DPIA-\"\u003e4. Prepare, Inventory, and Conduct Data Protection Impact Assessments (DPIA)\u003c/h3\u003e\u003cp\u003eTo comply with LGPD, you must document the types of data you’re collecting, the methods used, along the steps taken to secure that data. You must also identify potential risks and document what you’ve done to mitigate them. Every organization that falls under LGPD’s jurisdiction should have these records on hand to show to a regulator upon request.\u003c/p\u003e\u003ch3 id=\"5--Follow-Data-Security-Requirements-and-Data-Breach-Notification-Protocols\"\u003e5. Follow Data Security Requirements and Data Breach Notification Protocols\u003c/h3\u003e\u003cp\u003eOrganizations must implement adequate organizational and technical controls in order to secure personal data from unauthorized access, deletion, alteration, sharing, or processing. In the event that a breach occurs that presents a risk or causes damage to individuals, organizations must notify the ANPD and individuals affected by the breach within a reasonable time period and include the following information:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe type of personal data that was exposed and the individuals affected\u003c/li\u003e\u003cli\u003eThe risks associated with the exposure of that data\u003c/li\u003e\u003cli\u003eThe security measures in place to protect personal data (unless sharing this information would disclose industrial or commercial secrets)\u003c/li\u003e\u003cli\u003eWhat your organization is doing to mitigate the effects of the breach on the individuals at risk\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe ANPD may require an organization to take further steps, such as alerting the media about the breach or taking specific steps to mitigate the effects of the breach on affected individuals. These actions are assessed on a case-by-case basis.\u003c/p\u003e\u003ch3 id=\"6--Implement-Privacy-by-Design\"\u003e6. Implement Privacy by Design\u003c/h3\u003e\u003cp\u003eLike GDPR, LGPD requires organizations under its jurisdiction to design their data processing systems and procedures so that privacy is the default setting (the approach known as privacy by design) rather than adding privacy controls to those systems as an afterthought. Organizations should also be prepared to demonstrate the effectiveness of their data protection measures to the ANPD, as an audit could be conducted at any time.\u003c/p\u003e\u003ch3 id=\"7--Comply-with-Cross-Border-Data-Transfer-Requirements\"\u003e7. Comply with Cross-Border Data Transfer Requirements\u003c/h3\u003e\u003cp\u003eLGPD allows organizations to transfer protected personal data outside of Brazil if the laws of the country the data is transferred to provide adequate protection for that data. Adequacy of protection is determined by the ANPD. In the event that the protections offered by the receiving country are deemed inadequate by the ANPD, transfers may still be allowed if \u003ca href=\"https://iapp.org/resources/article/brazilian-data-protection-law-lgpd-english-translation/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecertain conditions\u003c/a\u003e are met.\u003c/p\u003e\u003ch2 id=\"Penalties-for-Non-Compliance\"\u003ePenalties for Non-Compliance\u003c/h2\u003e\u003cp\u003eUnder LGPD, penalties for non-compliance are assessed by the ANPD and can include fines of up to 2% of a company’s annual revenue to a maximum of 50 million Brazilian reais per violation (approximately €7.5 million or $9M USD at the time of writing). The ANPD also has the authority to block access to or delete personal data from related databases and to partially or fully prohibit data processing activities in the event that a violation occurs. Additionally, the LGPD provides individuals with the right to seek civil damages for violations of their privacy, meaning organizations could face legal action from consumers in addition to fines assessed by regulators.\u003c/p\u003e\u003ch2 id=\"Go-Beyond-Compliance\"\u003eGo Beyond Compliance\u003c/h2\u003e\u003cp\u003eRegulations like LGPD and GDPR are landmark steps toward the protection of individuals’ right to privacy. But their similarities should also serve as a wake-up call to organizations everywhere that data privacy will require a lot more than plugging in a new set of controls for their existing systems in the future.\u003c/p\u003e\u003cp\u003eInstead, businesses should look to build privacy functionality into their systems from the outset, considering the well-being of the end-user rather than just the legal requirements. Not only will this help them earn the \u003ca href=\"https://hbr.org/2020/01/do-you-care-about-privacy-as-much-as-your-customers-do\" target=\"_blank\" rel=\"noreferrer noopener\"\u003etrust of consumers\u003c/a\u003e, but it will also likely simplify the process of complying with new regulations as they emerge.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "LGPD carries implications for businesses beyond Brazil’s borders. Here’s what execs need to know.",
      "date_published": "2021-08-19T14:55:00Z",
      "author": {
        "name": "LGPD Establishes the National Data Protection Authority"
      }
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/salesforce-powers-customer-identity-plus-with-auth0/",
      "title": "Salesforce Powers Customer Identity Plus with Auth0",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIn July of 2020, \u003ca href=\"https://auth0.com/blog/auth0-announces-120m-seriesf-funding/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSalesforce Ventures led Auth0’s Series F funding round\u003c/a\u003e to fuel continued innovation and go-to-market expansion, responding to global demand for a simple, extensible identity platform that provides secure access to any application. Since that time, Auth0 worked in conjunction with Salesforce to explore ways to work together to better harness the power of both companies and bring additional value to our combined customer base and to the broader market.\u003c/p\u003e\u003cp\u003eAuth0 is proud to announce our partnership with Salesforce to power identity for Salesforce Customer Identity Plus, \u003ca href=\"https://www.salesforce.com/news/stories/salesforce-customer-identity-plus-helps-eliminate-identity-silos/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ea new offering announced by Salesforce\u003c/a\u003e that is available starting July 20, 2021, to Salesforce customers.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3CxRl1pNZ0M6LMcWnY5bwY/36f1b84872a53900c0eedc5137ee788e/Salesforce.png\" alt=\"Salesforce\"/\u003e\u003c/p\u003e\u003cp\u003eWith enterprises striving to meet the evolving demands of digital engagement, the companies who are winning will deliver frictionless, secure user identity. This Salesforce and Auth0 partnership will help bridge identity data silos across channels to provide a single view of the customer, with a developer-friendly, extensible identity solution that scales to meet the needs of the world’s largest companies.  \u003c/p\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Person\" itemprop=\"author\"\u003e\u003cp\u003e“We’re proud to be partnering with Auth0, the leader in consumer identity as a service, to deliver Salesforce Customer Identity Plus. This will enable our customers to accelerate their digital transformation and provide their customers with frictionless pixel-perfect login \u0026amp; registration experiences.”\u003c/p\u003e\u003cp\u003eDavid Brossard\u003c/p\u003e\u003cp\u003eSenior Director of Product Management\u003c/p\u003e\u003cp\u003eSalesforce\u003c/p\u003e\u003c/div\u003e\u003cp\u003eSalesforce as organizations increase the number of digital touchpoints like mobile apps and web portals, customers are forced to create new logins for each, making it difficult for organizations to gain a single, 360-degree view of the customer. Customer Identity Plus enables developers to easily integrate an identity layer into existing apps, creating a consistent customer experience.\u003c/p\u003e\u003cp\u003eBuilding on Salesforce’s vision to be the \u003ca href=\"https://www.salesforce.com/products/platform/features/single-source-of-truth/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esingle source of truth for customer data\u003c/a\u003e, Customer Identity Plus is a next generation CIAM (customer identity and access management) solution that provides the services to manage customer identities, enabling businesses to connect to all of your customers, apps, and products.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://www.salesforce.com/products/platform/products/identity/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCustomer Identity Plus\u003c/a\u003e bridges data silos so you can build a unified view of the customer to enrich digital interactions. Customer identities and profile data including opportunities, and customer service cases, are stored and maintained in Salesforce, which allows you to create consistent experiences with customers and partners across all lines of business, marketing, mobile, and web properties. Companies can now build deeper, richer relationships with customers and partners by creating and maintaining a single identity for interactions across all channels — sales, service, and marketing user journeys.\u003c/p\u003e\u003cp\u003eFor companies looking to accelerate their digital transformation strategies and need B2C (business-to-consumer) and B2B (business-to-business) scale from day one, Customer Identity Plus enables maximum performance and scalability. With Customer Identity Plus, developers get a \u003ca href=\"https://auth0.com/docs/libraries\" target=\"_blank\" rel=\"noreferrer noopener\"\u003evariety of SDKs right out of the box\u003c/a\u003e, providing the flexibility to seamlessly integrate an identity layer into existing applications.\u003c/p\u003e\u003cp\u003eCustomer Identity Plus brings the power and flexibility of Auth0’s identity-as-a-service (IDaaS) to complement Salesforce’s customer-focused cloud offerings, including Sales Cloud, Experience Cloud, and Commerce Cloud.\u003c/p\u003e\u003cp\u003eAuth0 accelerates and extends customer identity for Salesforce customers, enabling you to:\u003c/p\u003e\u003cul\u003e\u003cli\u003eCreate a Seamless Customer Experience — Allow consumers to quickly register and log into your applications with \u003ca href=\"https://auth0.com/docs/connections/passwordless\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epasswordless login\u003c/a\u003e or \u003ca href=\"https://auth0.com/docs/connections/identity-providers-social\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esocial login\u003c/a\u003e, all out of the box.\u003c/li\u003e\u003cli\u003eEnable a Single View of the Customer — Unify digital identities from multiple sources so you can build a single view of the customer to enrich digital transactions and report on login activities.\u003c/li\u003e\u003cli\u003eAdminister Contextual Security — Balance great UX with adaptive security to \u003ca href=\"https://auth0.com/docs/attack-protection\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eprevent automated threats\u003c/a\u003e from bots, breached credentials, or brute force attacks.\u003c/li\u003e\u003cli\u003eBuild a Developer Centric Framework that Scales — Leverage support for multiple application types and an extensive library of SDKs for any language and platform and scale.\u003c/li\u003e\u003c/ul\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Person\" itemprop=\"author\"\u003e\u003cp\u003e“Partnering with a CRM pioneer like Salesforce to integrate Auth0’s customer identity brings an incredible opportunity to deliver a one-stop solution for end-to-end CIAM. Auth0 is proud to power identity for Customer Identity Plus, and we look forward to continued collaboration and innovation together”\u003c/p\u003e\u003cp\u003eRandy Nasson\u003c/p\u003e\u003cp\u003eDirector of Product Management\u003c/p\u003e\u003cp\u003eAuth0\u003c/p\u003e\u003c/div\u003e\u003ch2 id=\"Partner-with-Auth0\"\u003ePartner with Auth0\u003c/h2\u003e\u003cp\u003eAuth0 offers a range of partnership opportunities from strategic alliances and working independent software vendors (ISVs) through to system integrators and resellers. We are able to scale according to your need and opportunity. If you’d like to learn more about how you might partner with Auth0 to add value to your customer base and the broader market, please reach out to our \u003ca href=\"https://auth0.com/partners\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epartner team\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Salesforce/Auth0 partnership to help bridge identity silos for Salesforce customers",
      "date_published": "2021-08-18T22:17:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/auth0-publishes-documentation-to-help-with-new-standard-contractual-clauses/",
      "title": "Auth0 Publishes Documentation to Help with New Standard Contractual Clauses",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"post-content\" itemprop=\"articleBody\"\u003e\u003cp\u003eAt Auth0, our continuing mission is to secure the world’s identities so innovators can innovate. The core to delivering this mission is trust, including Auth0’s commitment to security and privacy.\u003c/p\u003e\u003cp\u003eFollowing our post in June, we are pleased to announce we have updated our Data Processing Agreement (DPA) to include the new \u003ca href=\"https://auth0.com/blog/auth0-statement-on-new-standard-contractual-clauses-issued-by-european-commission/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eStandard Contractual Clauses\u003c/a\u003e (“new SCCs”) to support our customers with European users. We’ve also made changes to our Subscription Agreement, including adding a direct reference to our updated DPA, and clarifying some of the language related to our personal data processing.\u003c/p\u003e\u003cp\u003eThe new clauses and information about the changes can be found here \u003ca href=\"http://auth0.com/legal\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eauth0.com/legal\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAll new customers can take advantage of these new terms immediately.\u003c/p\u003e\u003cp\u003eFor existing customers – your Tenant Administrators will receive a notification about how you can transition to the updated DPA and new SCCs. If you have any questions or have not received this notification, please contact your account manager, or if you are a self service customer, reach out to the Self Service Team at \u003ca href=\"mailto:selfserviceteam@auth0.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eselfserviceteam@auth0.com\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAt Auth0, we know that privacy regulation is complex and changing rapidly. We are working to help our customers respond to this dynamic and fast-paced environment by continuously improving the resources and information we make available.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Enabling Auth0 customers to comply with dynamic privacy requirements",
      "date_published": "2021-08-18T14:54:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/state-management-in-svelte-applications/",
      "title": "State Management in Svelte Applications",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eTL;DR:\u003c/strong\u003e As a Front-end developer, one of the most crucial skills to possess is how to manage state in your applications. The ability to synchronize application state with data changes and manage shared state amongst different components is a strong requirement in building modern frontend applications. Several state management libraries have been developed with certain frameworks having a de-facto state management library that they naturally work well with (e.g., \u003ca href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eRedux\u003c/a\u003e for \u003ca href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eReactjs\u003c/a\u003e).\u003c/p\u003e\u003cp\u003eIn this tutorial, you will learn how to perform state management in \u003ca href=\"https://svelte.dev/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSvelte\u003c/a\u003e applications using Svelte\u0026#39;s built-in state management \u003ca href=\"https://svelte.dev/tutorial/writable-stores\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eStores\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"What-We-ll-Build\"\u003eWhat We\u0026#39;ll Build\u003c/h2\u003e\u003cp\u003eIn this tutorial, you will be implementing state management in a shopping cart built with Svelte. You will begin with a pre-built e-commerce application that sells different types of wares. However, this application is not yet complete, as its shopping features for adding products to the cart and managing cart items have not been implemented. Using the Svelte store, you will be adding the following features to the application:\u003c/p\u003e\u003cul\u003e\u003cli\u003eLoad the products from a central state store\u003c/li\u003e\u003cli\u003eAdd items to the shopping cart\u003c/li\u003e\u003cli\u003eDisplay items added to the shopping cart\u003c/li\u003e\u003cli\u003eCalculate the total price of items in the cart\u003c/li\u003e\u003cli\u003eIncrease and decrease the quantity of the items in the cart\u003c/li\u003e\u003cli\u003eRemove items from the cart\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Prerequisites\"\u003ePrerequisites\u003c/h2\u003e\u003cp\u003eThere are a few requirements to follow along with this exercise:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://nodejs.org\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNode.js\u003c/a\u003e installed on your system. You can visit the website and install a suitable version for your operating system \u003ca href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/li\u003e\u003cli\u003eBasic knowledge of \u003ca href=\"https://svelte.dev\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSvelte\u003c/a\u003e and using \u003ca href=\"https://svelte.dev/tutorial/nested-components\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSvelte components\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWith all these in place, you can proceed with the exercise.\u003c/p\u003e\u003ch2 id=\"Cloning-the-Demo-E-commerce-Project\"\u003eCloning the Demo E-commerce Project\u003c/h2\u003e\u003cp\u003eTo begin, you will clone the starting point for the project and run it. Run the following command to clone a copy of the e-commerce project unto your machine:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003egit\u003c/span\u003e clone --single-branch --branch base-project https://github.com/coderonfleek/svelte-store\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce you have the project on your system, go into the root of the project and install the dependencies with the following commands:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecd\u003c/span\u003e svelte-store\n\u003cspan\u003enpm\u003c/span\u003e \u003cspan\u003einstall\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWith all dependencies installed, you can then run the project using the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003enpm\u003c/span\u003e run dev\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis command will boot up a local development server at \u003ca href=\"http://localhost:5000\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003ehttp\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e5000\u003c/span\u003e\u003c/code\u003e\u003c/a\u003e. Navigate to this address on your browser, and you will see the page displayed below:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/nwLSAkqqjS7tFnYJhSUB5/eb8586b16288ada93d2c56fbf3fb00a2/svelte_01.jpg\" alt=\"\u0026#34;Homepage - E-commerce App\u0026#34;\"/\u003e\u003c/p\u003e\u003cp\u003eAt the moment, when you click \u003ccode\u003eAdd to Cart\u003c/code\u003e on any of the products, the button does nothing. The source code for the homepage is located in the file \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003eviews\u003cspan\u003e/\u003c/span\u003eHome\u003cspan\u003e.\u003c/span\u003esvelte\u003c/code\u003e. The products are currently loaded from a \u003ccode\u003eproducts\u003c/code\u003e array on the page using a \u003ccode\u003eProduct\u003c/code\u003e component to display the products:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003emain\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n  \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ediv\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehome container\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ediv\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003erow\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ediv\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecol-md-9 pt-5\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ediv\u003c/span\u003e\n          \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003erow row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-3 row-cols-xl-3\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n          {#each products as product}\n          \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eProduct\u003c/span\u003e \u003cspan\u003e{product}\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n          {/each}\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ediv\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecol-md-3 pt-5\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eCart\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n  \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003emain\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOn the right column, a \u003ccode\u003eCart\u003c/code\u003e component is used to display items that have been added to the cart and their respective quantities, which is also hard-coded into the component at the moment. The \u003ccode\u003eCart\u003c/code\u003e component also consists of a \u003ccode\u003eCheckout\u003c/code\u003e button which will navigate to the full shopping cart details page shown below when clicked:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5sW3mmLvYraDwX9d71RZQY/0582cbbb68c9e9c1c697473e8779237e/svelte_02.jpg\" alt=\"\u0026#34;Cart details page - E-commerce App\u0026#34;\"/\u003e\u003c/p\u003e\u003cp\u003eThe cart details page source code can be found in \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003eviews\u003cspan\u003e/\u003c/span\u003eShoppingCart\u003cspan\u003e.\u003c/span\u003esvelte\u003c/code\u003e. It uses a \u003ccode\u003eCartItem\u003c/code\u003e component to display any item added to the cart with buttons to increase or decrease the quantity of the item in the cart or remove it completely. The \u003ccode\u003eCart\u003c/code\u003e component is also displayed on the right column, just as it was on the homepage. At the moment, these buttons do nothing when clicked.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003emain\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n  \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ediv\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehome container\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ediv\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003erow\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ediv\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecol-md-8 pt-5\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        {#each cart as product}\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eCartItem\u003c/span\u003e \u003cspan\u003e{product}\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        {/each}\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ediv\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecol-md-4 pt-5\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eCart\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n  \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003emain\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe cart items displayed on this page are loaded from a \u003ccode\u003ecart\u003c/code\u003e array and are currently hard-coded on the page. What\u0026#39;s more, clicking any of the buttons does nothing at the moment. All components used in the application are contained in the \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003ecomponents\u003c/code\u003e folder.\u003c/p\u003e\u003ch2 id=\"Creating-the-State-Management-Store\"\u003eCreating the State Management Store\u003c/h2\u003e\u003cp\u003eTo begin implementing the features listed in the above section, you will need to set up a central state management store in the application. Create a \u003ccode\u003estore\u003cspan\u003e.\u003c/span\u003ejs\u003c/code\u003e file inside the \u003ccode\u003esrc\u003c/code\u003e folder, then add the following code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e writable\u003cspan\u003e,\u003c/span\u003e derived \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;svelte/store\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003econst\u003c/span\u003e products \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ewritable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    id\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    name\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Chelsea Shoes\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    price\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    shortdesc\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Best Drip in the Market\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    url\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;images/chelsea-shoes.png\u0026#34;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    id\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    name\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Kimono\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    price\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e50\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    shortdesc\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Classy, Stylish, Dope\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    url\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;images/kimono.png\u0026#34;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    id\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    name\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Watch\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    price\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e2500\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    shortdesc\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Elegance built in\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    url\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;images/rolex.png\u0026#34;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    id\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e4\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    name\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Wallet\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    price\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e80\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    shortdesc\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Sleek, Trendy, Clean\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    url\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;images/wallet.png\u0026#34;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    id\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    name\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Lady Handbags\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    price\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e230\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    shortdesc\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Fabulous, Exotic, Classy\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    url\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;images/handbag.png\u0026#34;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e{\u003c/span\u003e\n    id\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e6\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    name\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Casual Shirts\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    price\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e30\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    shortdesc\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Neat, Sleek, Smart\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    url\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;images/shirt.png\u0026#34;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003econst\u003c/span\u003e cart \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ewritable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe store above contains two writable properties:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe \u003ccode\u003eproducts\u003c/code\u003e property holds all products contained in the e-commerce application. In a production scenario, you would want to load products from a remote API.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003ecart\u003c/code\u003e property is an array that holds the items a user adds to their cart. This is empty by default.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThese properties are all that is needed to implement the features listed above.\u003c/p\u003e\u003ch2 id=\"Loading-Products-to-the-Home-Page-from-the-Store\"\u003eLoading Products to the Home Page from the Store\u003c/h2\u003e\u003cp\u003eThe first task is to ensure that the products are loaded from the store instead of being hard-coded on the \u003ccode\u003eHome\u003cspan\u003e.\u003c/span\u003esvelte\u003c/code\u003e homepage. Locate \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003eviews\u003cspan\u003e/\u003c/span\u003eHome\u003cspan\u003e.\u003c/span\u003esvelte\u003c/code\u003e and replace its content with the following code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003escript\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003eimport\u003c/span\u003e Product \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;../components/Product.svelte\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eimport\u003c/span\u003e Cart \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;../components/Cart.svelte\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e products \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;../store\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003escript\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u0026lt;\u003c/span\u003emain\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;home container\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;row\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;col-md-9 pt-5\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003ediv\n          \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-3 row-cols-xl-3\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e\u0026gt;\u003c/span\u003e\n          \u003cspan\u003e{\u003c/span\u003e#each $products \u003cspan\u003eas\u003c/span\u003e product\u003cspan\u003e}\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;\u003c/span\u003eProduct \u003cspan\u003e{\u003c/span\u003eproduct\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n          \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eeach\u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;col-md-3 pt-5\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003eCart \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003emain\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the update above, the \u003ccode\u003eproducts\u003c/code\u003e variable has now been replaced with store property \u003ccode\u003eproducts\u003c/code\u003e that references the store to load the products. Now refresh your homepage, and you will not see any change, but you know that your products are now being loaded from the store.\u003c/p\u003e\u003cp\u003eThe next task is to implement the functionality that allows users to click \u003ccode\u003eAdd to Cart\u003c/code\u003e on a product on the homepage and see it added to the cart widget on the right column. As mentioned earlier, products displayed on the page are managed using a \u003ccode\u003eProduct\u003c/code\u003e component. Locate this component at \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003ecomponents\u003cspan\u003e/\u003c/span\u003eProduct\u003cspan\u003e.\u003c/span\u003esvelte\u003c/code\u003e and replace its content with the following code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003escript\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e cart \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;../store\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e product\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003elet\u003c/span\u003e inCart \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  $\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    $cart\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eforEach\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eitem\u003cspan\u003e.\u003c/span\u003eid \u003cspan\u003e==\u003c/span\u003e product\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        inCart \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eaddToCart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003einCart\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003elet\u003c/span\u003e updatedCart \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e...\u003c/span\u003e$cart\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e...\u003c/span\u003eproduct\u003cspan\u003e,\u003c/span\u003e quantity\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n      cart\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eupdatedCart\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Item already added to Cart\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003escript\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u0026lt;\u003c/span\u003emain\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;col mb-4\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;card\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003eimg src\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eproduct\u003cspan\u003e.\u003c/span\u003eurl\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;card-img-top\u0026#34;\u003c/span\u003e alt\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;...\u0026#34;\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;card-body\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003eh5 \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;card-title\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eproduct\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eh5\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003ep \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;card-text\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n          $\u003cspan\u003e{\u003c/span\u003eproduct\u003cspan\u003e.\u003c/span\u003eprice\u003cspan\u003e}\u003c/span\u003e\n          \u003cspan\u003e\u0026lt;\u003c/span\u003ebr \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n          \u003cspan\u003e\u0026lt;\u003c/span\u003esmall\u003cspan\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e{\u003c/span\u003eproduct\u003cspan\u003e.\u003c/span\u003eshortdesc\u003cspan\u003e}\u003c/span\u003e\n          \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003esmall\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ep\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003ebutton\n          on\u003cspan\u003e:\u003c/span\u003eclick\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003eaddToCart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n          \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;btn btn-primary\u0026#34;\u003c/span\u003e\n          disabled\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003einCart\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003einCart \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e\u0026#34;Added\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Add to Cart\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ebutton\n        \u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003emain\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe updates to this file add two properties to the component:\u003c/p\u003e\u003cul\u003e\u003cli\u003eA reference to the \u003ccode\u003ecart\u003c/code\u003e property in the store\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003einCart\u003c/code\u003e checks if the product using this component has been added to the store or not\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe \u003ccode\u003eaddToCart\u003c/code\u003e function adds an item to the cart when the \u003ccode\u003eAdd to Cart\u003c/code\u003e button is clicked by updating the \u003ccode\u003ecart\u003c/code\u003e property in the store with the new item. This function first checks if the product is already in the cart. If so, an alert is displayed indicating that the product has already been added. If not, the product is added to the cart.\u003c/p\u003e\u003cp\u003eThe \u003ccode\u003einCart\u003c/code\u003e property is also used in the template to disable the \u003ccode\u003eAdd to Cart\u003c/code\u003e button if the product has already been added.\u003c/p\u003e\u003cp\u003eNext, the \u003ccode\u003eCart\u003c/code\u003e component needs to display the products that have been added to the cart and also the total price. Locate the \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003ecomponents\u003cspan\u003e/\u003c/span\u003eCart\u003cspan\u003e.\u003c/span\u003esvelte\u003c/code\u003e file and replace its content with the following code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003escript\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e link \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;svelte-spa-router\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e cart \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;../store\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  $\u003cspan\u003e:\u003c/span\u003e totalPrice \u003cspan\u003e=\u003c/span\u003e $cart\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereduce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etotal\u003cspan\u003e,\u003c/span\u003e next\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    console\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e$cart\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e total \u003cspan\u003e+\u003c/span\u003e next\u003cspan\u003e.\u003c/span\u003equantity \u003cspan\u003e*\u003c/span\u003e next\u003cspan\u003e.\u003c/span\u003eprice\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003escript\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u0026lt;\u003c/span\u003emain\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;card\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;card-body\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003eh5 \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;card-title\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003eYour Cart\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eh5\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e#\u003cspan\u003eif\u003c/span\u003e $cart\u003cspan\u003e.\u003c/span\u003elength \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003ep\u003cspan\u003e\u0026gt;\u003c/span\u003eYour Cart is Empty\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ep\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003eul \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;list-group list-group-flush\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e#each $cart \u003cspan\u003eas\u003c/span\u003e item\u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003eli\n          \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;list-group-item d-flex justify-content-between align-items-center\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e\u0026gt;\u003c/span\u003e\n          \u003cspan\u003e{\u003c/span\u003eitem\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e}\u003c/span\u003e\n          \u003cspan\u003e\u0026lt;\u003c/span\u003espan \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;badge badge-primary badge-pill\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eitem\u003cspan\u003e.\u003c/span\u003equantity\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003espan\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eli\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eeach\u003cspan\u003e}\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003eli\n        \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;list-group-item d-flex justify-content-between align-items-center\u0026#34;\u003c/span\u003e\n      \u003cspan\u003e\u0026gt;\u003c/span\u003e\n        Price \u003cspan\u003e\u0026lt;\u003c/span\u003eb\u003cspan\u003e\u0026gt;\u003c/span\u003e$\u003cspan\u003e{\u003c/span\u003etotalPrice\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eb\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eli\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eul\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\n    \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;card-body\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003ea use\u003cspan\u003e:\u003c/span\u003elink href\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;/shop\u0026#34;\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;btn btn-primary btn-block\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003eCheckout\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ea\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003emain\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe update to this file first replaces the hard-coded cart items with reference to that \u003ccode\u003ecart\u003c/code\u003e state in the store. A \u003ccode\u003etotalPrice\u003c/code\u003e property is also used to evaluate the total cost of all items currently added to the shopping cart. In the template, the length of \u003ccode\u003ecart\u003c/code\u003e is used to display a message to the user to add items to the shopping cart when the cart is empty.\u003c/p\u003e\u003cp\u003eReturn to the browser and reload the homepage if it hasn\u0026#39;t been reloaded. You will see the view below. Notice the new look of the cart widget on the right column:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3OzDAoyWDYhkPpma41kAlK/34958e5b49a984b65df3857f763f9cc3/svelte_03.jpg\" alt=\"\u0026#34;Updated Cart - E-commerce App\u0026#34;\"/\u003e\u003c/p\u003e\u003cp\u003eNow click on \u003ccode\u003eAdd to Cart\u003c/code\u003e to add at least 2 items to the cart and observe the cart widget update based on your selections like below:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/UyhS5wLpRtIr7zRjiOXsT/cacc42d088fe9417a084e78e76a8f3e7/svelte_04.jpg\" alt=\"\u0026#34;Items selection - E-commerce App\u0026#34;\"/\u003e\u003c/p\u003e\u003ch2 id=\"Changing-Items-Quantity-and-Removing-Items-from-the-Cart\"\u003eChanging Items Quantity and Removing Items from the Cart\u003c/h2\u003e\u003cp\u003eNotice how the default quantity of each product added to the cart is set to one (1)? This is because every count has to start from 1. In a proper shopping cart application, users should be allowed to increase the quantity of each selected item.\u003c/p\u003e\u003cp\u003eThe next task is to add features for increasing and decreasing the number of cart items. You will also add the ability to completely remove an item from the cart.\u003c/p\u003e\u003cp\u003eFrom the shopping cart details page shown earlier, each cart item displayed with buttons to manage its quantity uses the \u003ccode\u003eCartItem\u003c/code\u003e component. Locate this component at \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003ecomponents\u003cspan\u003e/\u003c/span\u003eCartItem\u003cspan\u003e.\u003c/span\u003esvelte\u003c/code\u003e and replace the code in it with the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003escript\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003eimport\u003c/span\u003e Product \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;../components/Product.svelte\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e cart \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;../store\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e product\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003elet\u003c/span\u003e itemQuantity \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  $\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e get_product \u003cspan\u003e=\u003c/span\u003e $cart\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e item\u003cspan\u003e.\u003c/span\u003eid \u003cspan\u003e==\u003c/span\u003e product\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    itemQuantity \u003cspan\u003e=\u003c/span\u003e get_product\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003equantity\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003echangeQuantity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eaction \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;add\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eaction \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#34;add\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      product\u003cspan\u003e.\u003c/span\u003equantity \u003cspan\u003e=\u003c/span\u003e product\u003cspan\u003e.\u003c/span\u003equantity \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n      \u003cspan\u003eupdateCart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eproduct\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eproduct\u003cspan\u003e.\u003c/span\u003equantity \u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        product\u003cspan\u003e.\u003c/span\u003equantity \u003cspan\u003e=\u003c/span\u003e product\u003cspan\u003e.\u003c/span\u003equantity \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eupdateCart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eproduct\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e//Remove the item\u003c/span\u003e\n\n        \u003cspan\u003eremoveItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eproduct\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eremoveItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eproduct\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e removedItemCart \u003cspan\u003e=\u003c/span\u003e $cart\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecartItem\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ereturn\u003c/span\u003e cartItem\u003cspan\u003e.\u003c/span\u003eid \u003cspan\u003e!=\u003c/span\u003e product\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    cart\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eremovedItemCart\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eupdateCart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eproduct\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003elet\u003c/span\u003e updatedCart \u003cspan\u003e=\u003c/span\u003e $cart\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecartItem\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ecartItem\u003cspan\u003e.\u003c/span\u003eid \u003cspan\u003e==\u003c/span\u003e product\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e product\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n\n      \u003cspan\u003ereturn\u003c/span\u003e cartItem\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    cart\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eupdatedCart\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003escript\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u0026lt;\u003c/span\u003emain\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;row cart-item-row\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;col-md-6\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003eProduct \u003cspan\u003e{\u003c/span\u003eproduct\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;col-md-4\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;row\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;col-md-5\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n          \u003cspan\u003e\u0026lt;\u003c/span\u003ebutton\n            on\u003cspan\u003e:\u003c/span\u003eclick\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003echangeQuantity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n            \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;btn btn-primary btn-block\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ebutton\n          \u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;col-md-2 text-center\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eproduct\u003cspan\u003e.\u003c/span\u003equantity\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;col-md-5\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n          \u003cspan\u003e\u0026lt;\u003c/span\u003ebutton\n            on\u003cspan\u003e:\u003c/span\u003eclick\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003echangeQuantity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;remove\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n            \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;btn btn-warning btn-block\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ebutton\n          \u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;row cart-remove-button\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;col-md-12\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n          \u003cspan\u003e\u0026lt;\u003c/span\u003ebutton on\u003cspan\u003e:\u003c/span\u003eclick\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003eremoveItem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;btn btn-danger btn-block\u0026#34;\u003c/span\u003e\n            \u003cspan\u003e\u0026gt;\u003c/span\u003eRemove Item\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ebutton\n          \u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003emain\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u0026lt;\u003c/span\u003estyle scoped\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003ecart\u003cspan\u003e-\u003c/span\u003eitem\u003cspan\u003e-\u003c/span\u003erow \u003cspan\u003e{\u003c/span\u003e\n    border\u003cspan\u003e-\u003c/span\u003ebottom\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003epx solid #ccc\u003cspan\u003e;\u003c/span\u003e\n    margin\u003cspan\u003e-\u003c/span\u003etop\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e20\u003c/span\u003epx\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003ecart\u003cspan\u003e-\u003c/span\u003eremove\u003cspan\u003e-\u003c/span\u003ebutton \u003cspan\u003e{\u003c/span\u003e\n    margin\u003cspan\u003e-\u003c/span\u003etop\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e10\u003c/span\u003epx\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003estyle\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis update adds two computed properties, \u003ccode\u003ecart\u003c/code\u003e, which is a reference to the \u003ccode\u003ecart\u003c/code\u003e state property in the store, and \u003ccode\u003eitemQuantity\u003c/code\u003e, which gets the current quantity of the item in the shopping cart.\u003c/p\u003e\u003cp\u003eThree methods are also added which do the following:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003echangeQuantity\u003c/code\u003e: takes in an \u003ccode\u003eaction\u003c/code\u003e argument that is either set to \u003ccode\u003eadd\u003c/code\u003e or \u003ccode\u003edecrease\u003c/code\u003e to determine whether to increase or decrease the item quantity by 1. If the current quantity is 1 and the function is asked to decrease the item, the item would be removed completely.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eremoveItem\u003c/code\u003e: completely removes an item from the shopping cart.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eupdateCart\u003c/code\u003e: A utility function for reusing the update logic for \u003ccode\u003ecart\u003c/code\u003e in the store\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eNext, locate the shopping cart details page at \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003eviews\u003cspan\u003e/\u003c/span\u003eShoppingCart\u003cspan\u003e.\u003c/span\u003esvelte\u003c/code\u003e and replace its content with the following code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003escript\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003eimport\u003c/span\u003e Cart \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;../components/Cart.svelte\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eimport\u003c/span\u003e CartItem \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;../components/CartItem.svelte\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n  \u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e cart \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;../store\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003escript\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u0026lt;\u003c/span\u003emain\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;home container\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;row\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;col-md-8 pt-5\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e#each $cart \u003cspan\u003eas\u003c/span\u003e product\u003cspan\u003e}\u003c/span\u003e\n          \u003cspan\u003e\u0026lt;\u003c/span\u003eCartItem \u003cspan\u003e{\u003c/span\u003eproduct\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eeach\u003cspan\u003e}\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003ediv \u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;col-md-4 pt-5\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003c/span\u003eCart \u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003ediv\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003emain\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis update replaces the hard-coded cart items with reference to the \u003ccode\u003ecart\u003c/code\u003e property in the store.\u003c/p\u003e\u003ch2 id=\"Running-the-Application\"\u003eRunning the Application\u003c/h2\u003e\u003cp\u003eWith these changes, your app should be reloaded once again. Add a few items to the shopping cart if the reload has reset the cart back to being empty, then click \u0026#34;Checkout\u0026#34; to go to the shopping cart details page. On this page, increment and decrement some of the items in the cart and try removing one of them by clicking \u0026#34;Remove\u0026#34;. You will see the cart widget update accordingly on the right column like below:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7xFFbT1x3IfKUxCFT7IDvl/b42328e5782e261ffb3d1a454eba2a8c/svelte_05.jpg\" alt=\"\u0026#34;Update Cart Items - E-commerce App\u0026#34;\"/\u003e\u003c/p\u003e\u003cp\u003ePerfect!\u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eIn this tutorial, you have been able to implement state management in a Svelte application using a shopping cart demo application.\u003c/p\u003e\u003cp\u003eState management involves a design thinking process where you have to decide which state properties are global (reside in the store) and which state properties are to be localized to the respective components that make use of them. Knowing which state should be local and which state properties should reside in the central store will help you make good design decisions.\u003c/p\u003e\u003cp\u003eIf any part of your demonstration is not working as expected, I advise you to go through the article once again to see if there is any step you may have missed. If you need additional help, feel free to reach out in the comments.\u003c/p\u003e\u003cp\u003eHappy coding :)\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "A tutorial on how to use the Svelte state management store to manage state in Svelte applications.",
      "date_published": "2021-08-17T15:01:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/auth0-marketplace-now-offers-netid-solution/",
      "title": "Auth0 Marketplace Now Offers netID Solution",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eLondon/Montabaur, Germany – August 17, 2021 –\u003c/strong\u003e \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0\u003c/a\u003e, the modern identity platform, and the \u003ca href=\"https://enid.foundation/en/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eEuropean netID Foundation\u003c/a\u003e today announced the availability of netID Single Sign-On on \u003ca href=\"https://marketplace.auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Marketplace\u003c/a\u003e, a catalog of trusted technology integrations to extend the functionality of Auth0’s identity management platform. \u003c/p\u003e\u003cp\u003e\u003ca href=\"https://marketplace.auth0.com/integrations/netid-single-sign-on\" target=\"_blank\" rel=\"noreferrer noopener\"\u003enetID\u003c/a\u003e enables users to sign into apps and websites with their netID account and to decide privately and transparently which data to share. As an independent European identity provider with more than 38 million active user accounts in Germany, netID provides the necessary infrastructure for \u003ca href=\"https://auth0.com/blog/what-is-single-sign-on-a-non-developer-s-guide/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSingle Sign-On (SSO)\u003c/a\u003e but does not store any user data itself. Users can manage the consents they’ve given at any time in netID’s Privacy Center.\u003c/p\u003e\u003cp\u003e“Whether in finance, e-commerce, or online publishing, engaging with users in an all trusted and transparent way is key to driving success. We are excited about the partnership with Auth0 and the availability of the netID Single Sign-On integration. Joint customers can now seamlessly integrate our product and offer users a European alternative to U.S. social login providers,” says Achim Schlosser, board member, and chief technology officer of the European netID Foundation.\u003c/p\u003e\u003cp\u003e“After speaking with many customers, we have identified the integrations that matter to them. The availability of netID on Auth0 Marketplace is a direct response to the growing need for privacy-enhancing technologies in Europe and part of our continued commitment to international markets,” said Cassio Sampaio, SVP of Product at Auth0. “We are thrilled to have netID as a vetted and valuable vendor in Auth0 Marketplace.” \u003c/p\u003e\u003cp\u003eAuth0 reviews partner integration functionality and makes available integrations that are easy to discover and integrate for customers. Partners can participate in the growing demand for digital identity solutions and increase their visibility as part of the Auth0 Marketplace and can learn more here: \u003ca href=\"https://auth0.com/partners\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://auth0.com/partners\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://auth0.com/blog/okta-acquisition-announcement/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0, recently acquired by Okta\u003c/a\u003e, provides a modern identity platform that helps organizations meet the security, privacy, and convenience needs of their users. Please visit \u003ca href=\"https://auth0.com/identity-os\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 identity OS\u003c/a\u003e to learn more.\u003c/p\u003e\u003ch2 id=\"About-the-European-netID-Foundation\"\u003eAbout the European netID Foundation\u003c/h2\u003e\u003cp\u003eThe European netID Foundation was established in March 2018 by Mediengruppe RTL Deutschland, ProSiebenSat.1, and United Internet with its brands WEB.DE and GMX. With an independent market solution, the foundation supports Internet offerings from all industry sectors with the implementation of the new European data protection law and, for this purpose, has created the open login standard netID. The initiators of the foundation together reach around 50 million unique users every month and together have more than 38 million active accounts. The foundation is explicitly open to additional partners and initiatives. Further information is available at \u003ca href=\"https://auth0.com/blog/auth0-marketplace-now-offers-netid-solution/www.enid.eu\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ewww.enid.eu\u003c/a\u003e.\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eAuth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003ch3 id=\"Media-Contacts\"\u003eMedia Contacts\u003c/h3\u003e\u003cp\u003eAlexandra Roszkowski\u003cbr/\u003e\u003ca href=\"mailto:presse@enid.eu\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epresse@enid.eu\u003c/a\u003e\u003cbr/\u003e+49 162 25 27-188\u003cbr/\u003e\u003c/p\u003e\u003cp\u003eSarah Konarski \u0026amp; Nele Mascher\u003cbr/\u003eFinn Partners for Auth0, DACH\u003cbr/\u003e\u003ca href=\"mailto:auth0de@finnpartners.com\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eauth0de@finnpartners.com\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Auth0 integrates netID to support customer privacy needs in Europe",
      "date_published": "2021-08-17T01:20:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/the-7-most-common-types-of-cybersecurity-attacks-in-2021/",
      "title": "The 7 Most Common Types of Cybersecurity Attacks in 2021",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eWith more people working remotely or online post-2020, the \u003ca href=\"https://thehill.com/policy/cybersecurity/493198-fbi-sees-spike-in-cyber-crime-reports-during-coronavirus-pandemic\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eFBI reports\u003c/a\u003e that cybercriminals are quadrupling the number of cyberattacks they use to disrupt online activities. Research also shows the impact to organizations and their users from a single successful cyberattack is growing each year.\u003c/p\u003e\u003cp\u003eFor example, in 2017, nearly \u003ca href=\"https://www.statista.com/statistics/273550/data-breaches-recorded-in-the-united-states-by-number-of-breaches-and-records-exposed/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cem\u003e197 million records\u003c/em\u003e\u003c/a\u003e were exposed due to data breaches. In 2020, that number \u003ca href=\"https://pages.riskbasedsecurity.com/hubfs/Reports/2020/2020%20Year%20End%20Data%20Breach%20QuickView%20Report.pdf\" target=\"_blank\" rel=\"noreferrer noopener\"\u003egrew to 37 billion\u003c/a\u003e, even though the overall number of data breaches had decreased. And IBM reports that the costs are growing for organizations that fall victim to these attacks in countries like the United States, where the average cost of a data breach grew from $7.91M to $8.64M between \u003ca href=\"https://www.ibm.com/downloads/cas/861MNWN2\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e2018\u003c/a\u003e and \u003ca href=\"https://www.ibm.com/security/data-breach\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e2020\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eMany of the methods cybercriminals use to breach organizations rely on human error. Even your sharpest employees can become your greatest weakness if they click on a malicious link without realizing it. However, other cyberattacks exploit gaps in your \u003ca href=\"https://auth0.com/blog/what-is-data-security/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edata security\u003c/a\u003e efforts to gain access to sensitive data.\u003c/p\u003e\u003cp\u003eBelow are seven of the most common cyberattacks your organization will face in 2021 and the ways to protect yourself against the data breaches they have the potential to cause.\u003c/p\u003e\u003ch2 id=\"1--Malware-Attacks\"\u003e1. Malware Attacks\u003c/h2\u003e\u003cp\u003eMalware refers to many different types of malicious software designed to infiltrate, spy on, or create a backdoor and control an organization’s systems or data. This includes ransomware, worms, trojans, adware, and spyware. \u003ca href=\"https://monstercloud.com/blog/2020/03/23/coronavirus-alert-ransomware-attacks-up-by-800/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eExperts report\u003c/a\u003e that malware usage is up almost 800% since early 2020.\u003c/p\u003e\u003cp\u003eMalware has the potential to cause major data breaches and severely disrupt business operations. Microsoft was the victim of a major ransomware attack, where WannaCry \u003ca href=\"https://en.wikipedia.org/wiki/WannaCry_ransomware_attack\" target=\"_blank\" rel=\"noreferrer noopener\"\u003etook advantage of a weak spot in their operating system\u003c/a\u003e and displayed the following message to banks, health care providers, manufacturers, and other businesses across the globe:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1eCk2eoRxo2dlqfakT2rLF/3d36517813cea24b63b795f7fe3a256c/Uploaded_from_The_7_Most_Common_Types_of_Cybersecurity_Attacks_in_2021\" alt=\"image.png\"/\u003e\n\u003c/p\u003e\u003cp\u003e\u003ci\u003e\u003ca href=\"https://blog.malwarebytes.com/cybercrime/2017/05/wanacrypt0r-ransomware-hits-it-big-just-before-the-weekend/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSource\u003c/a\u003e\u003c/i\u003e\u003c/p\u003e\u003cp\u003eTo regain access to their computers, along with any files that hadn’t been backed up, businesses had to pay a ransom to the creators of the WannaCry program in \u003ca href=\"https://bitcoin.org/en/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eBitcoin\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eMalware is typically downloaded unwittingly by clicking a malicious link or by tricking a user into thinking they\u0026#39;re downloading something legitimate when they’re not.\u003c/p\u003e\u003ch3 id=\"How-to-Protect-Against-Malware-Attacks\"\u003eHow to Protect Against Malware Attacks\u003c/h3\u003e\u003cp\u003eTeaching your employees how to spot suspicious links and pop-ups that could contain malware will help reduce the chance that it could infect your systems.\u003c/p\u003e\u003cp\u003eAdditional ways to protect against malware include keeping your operating systems up to date to ensure known security gaps are patched and using anti-virus software. For example, the \u003ca href=\"https://www.wired.com/story/equifax-breach-no-excuse/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eEquifax\u003c/a\u003e data breach could have been prevented had a known patch been installed in time.\u003c/p\u003e\u003ch2 id=\"2--Phishing-Attacks\"\u003e2. Phishing Attacks\u003c/h2\u003e\u003cp\u003ePhishing attacks attempt to steal information from users or trick them into downloading malware by sending malicious emails or text messages (SMS) that look like real requests but are, in fact, a Scam. Here’s a Dropbox email asking users to verify their email address that’s actually a phishing attack:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2ISbM89J8qjqwVy4kUpgOf/a1b52597302c386ee8381bfd6f6948d9/Uploaded_from_The_7_Most_Common_Types_of_Cybersecurity_Attacks_in_2021\" alt=\"image.png\"/\u003e \n\u003c/p\u003e\u003cp\u003e\u003ci\u003e\u003ca href=\"https://www.bankinfosecurity.com/locky-returns-via-spam-dropbox-themed-phishing-attacks-a-10250\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSource\u003c/a\u003e\u003c/i\u003e\u003c/p\u003e\u003cp\u003eAccording to \u003ca href=\"https://enterprise.verizon.com/resources/reports/dbir/2020/results-and-analysis/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eVerizon’s 2020 Data Breach Investigations Report\u003c/a\u003e, phishing attacks are the most common cause of data breaches globally and have been the root cause of notable instances of cybercrime in the last decade.\u003c/p\u003e\u003cp\u003eThe cybercriminals who breached the AP News Twitter account and falsely \u003ca href=\"https://www.bbc.com/news/world-us-canada-21508660\" target=\"_blank\" rel=\"noreferrer noopener\"\u003etweeted\u003c/a\u003e that the White House was under attack used a targeted phishing attack (spear-phishing) to gain access to the account, as did the bad actors who leaked sensitive emails from Hillary Clinton’s campaign chairman \u003ca href=\"https://www.cbsnews.com/news/the-phishing-email-that-hacked-the-account-of-john-podesta/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ebefore the 2016 election\u003c/a\u003e.\u003c/p\u003e\u003ch3 id=\"How-to-Protect-Against-Phishing-Attacks\"\u003eHow to Protect Against Phishing Attacks\u003c/h3\u003e\u003cp\u003eThe best way to protect your organization against phishing attacks is to educate your employees on how to spot a questionable email or text message. The training programs below can help you do this:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cem\u003eDigital Defense’s\u003c/em\u003e \u003ca href=\"https://www.digitaldefense.com/professional-services/secured-training/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cem\u003eSecurED training program\u003c/em\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003cem\u003eInspired eLearning’s\u003c/em\u003e \u003ca href=\"https://inspiredelearning.com/security-awareness/awareness-c-suite/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cem\u003eSecurity Awareness\u003c/em\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eAdditionally, CSO has compiled a list of resources that can help you train your teams to spot phishing attacks \u003ca href=\"https://www.csoonline.com/article/3225471/please-dont-send-me-to-cybersecurity-training.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"3--Distributed-Denial-of-Service-Attacks\"\u003e3. Distributed Denial of Service Attacks\u003c/h2\u003e\u003cp\u003eDistributed denial of service (DDoS) attacks disrupt the traffic to a website, application, server, service, or network by overwhelming it with a flood of traffic from compromised computer networks (\u003ca href=\"https://usa.kaspersky.com/resource-center/threats/botnet-attacks\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ebotnets\u003c/a\u003e) that prevents real users from accessing it. In 2018, GitHub experienced the largest DDoS attack ever when it was hit with 1.35 terabits of traffic per second and was \u003ca href=\"https://www.wired.com/story/github-ddos-memcached/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eoffline for almost 20 minutes as a result\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eDDoS attacks are common and increased by 50% in 2020 compared to 2019, with a large surge occurring in early 2020 during the pandemic, according to security company \u003ca href=\"https://securelist.com/ddos-attacks-in-q3-2020/99171/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eKaspersky\u003c/a\u003e.\u003c/p\u003e\u003ch3 id=\"How-to-Protect-Against-DDoS-Attacks\"\u003eHow to Protect Against DDoS Attacks\u003c/h3\u003e\u003cp\u003eDDoS attacks are tricky to identify because they’re often hard to distinguish from legitimate traffic. Some \u003ca href=\"https://www.cloudflare.com/learning/ddos/what-is-a-ddos-attack/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emethods of protecting against DDoS attacks\u003c/a\u003e include blocking all traffic for a short period of time, rate-limiting traffic to a website, using a web application firewall to detect suspicious traffic patterns, or scattering traffic across a network of servers to reduce the attack’s impact.\u003c/p\u003e\u003ch2 id=\"4--Man-in-the-Middle-Attacks\"\u003e4. Man-in-the-Middle Attacks\u003c/h2\u003e\u003cp\u003eMan-in-the-middle (MitM) attacks are when bad actors spy on or intercept communication between you and your users or employees. MitM attacks are most commonly used to steal personal or company information or to redirect that information to another destination or in espionage situations, such as when \u003ca href=\"https://www.theguardian.com/world/2018/oct/04/how-russian-spies-bungled-cyber-attack-on-weapons-watchdog\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eRussian hackers\u003c/a\u003e attempted to breach the Organisation for the Prohibition of Chemical Weapons (OPCW).\u003c/p\u003e\u003cp\u003eMitM attacks are \u003ca href=\"https://www.csoonline.com/article/3340117/what-is-a-man-in-the-middle-attack-how-mitm-attacks-work-and-how-to-prevent-them.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003enot the most common cyberattack\u003c/a\u003e because many of the same objectives can be achieved using malware. However, MitM attacks do present a threat for organizations because they’re often hard to spot and because \u003ca href=\"https://www.businesswire.com/news/home/20201215005287/en/Upwork-Study-Finds-22-of-American-Workforce-Will-Be-Remote-by-2025\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emore employees are working remotely\u003c/a\u003e post-2020.\u003c/p\u003e\u003cp\u003eFor example, fake WiFi networks are \u003ca href=\"https://hackernoon.com/a-hacker-intercepted-your-wifi-traffic-stole-your-contacts-passwords-financial-data-heres-how-4fc0df9ff152\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eeasy to deploy\u003c/a\u003e in public places like coffee shops where remote employees often work. People often connect to these networks without realizing it, allowing bad actors to spy on them while they use the network.\u003c/p\u003e\u003ch3 id=\"How-to-Protect-Against-MitM-Attacks\"\u003eHow to Protect Against MitM Attacks\u003c/h3\u003e\u003cp\u003eEnd-to-end encryption protocols like \u003ca href=\"https://www.cloudflare.com/learning/ssl/transport-layer-security-tls/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eTransport Layer Security\u003c/a\u003e (TLS) are the best way to protect against MitM attacks. Additionally, requiring your employees to use a VPN to access company networks over public WiFi will ensure that any information shared during their session remains private, regardless of whether the network belongs to a bad actor or if their coffee shop’s WiFi is simply unsecured.\u003c/p\u003e\u003ch2 id=\"5--Credential-Stuffing-Attacks\"\u003e5. Credential Stuffing Attacks\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://auth0.com/blog/what-is-credential-stuffing/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCredential stuffing\u003c/a\u003e is a type of brute-force cyber-attack where bad actors use stolen usernames and passwords from one data breach to access user accounts at another organization.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1WPDZfXKzHLheBp0XbP2em/6769d8d365597a77b9de207e48c303d8/Uploaded_from_The_7_Most_Common_Types_of_Cybersecurity_Attacks_in_2021\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eCredential stuffing is possible because, statistically, \u003ca href=\"https://services.google.com/fh/files/blogs/google_security_infographic.pdf\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e65% of all people\u003c/a\u003e reuse the same password across multiple accounts. As a result, credential stuffing attacks are one of the \u003ca href=\"https://enterprise.verizon.com/resources/reports/dbir/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emost common\u003c/a\u003e causes of data breaches globally.\u003c/p\u003e\u003ch3 id=\"How-to-Protect-Against-Credential-Stuffing-Attacks\"\u003eHow to Protect Against Credential Stuffing Attacks\u003c/h3\u003e\u003cp\u003eThe best way to protect against credential stuffing attacks is by either implementing \u003ca href=\"https://auth0.com/passwordless/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epasswordless authentication\u003c/a\u003e or \u003ca href=\"https://auth0.com/multifactor-authentication\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emulti-factor authentication\u003c/a\u003e (MFA). Passwordless authentication prevents bad actors from using stolen credentials by eliminating them altogether, while MFA requires bad actors to verify their identity in one or more ways in addition to the stolen credentials they’re using to log in.\u003c/p\u003e\u003ch2 id=\"6--Password-Spraying-Attacks\"\u003e6. Password Spraying Attacks\u003c/h2\u003e\u003cp\u003ePassword spraying is also a type of brute-force attack where bad actors attempt to guess a user’s password from a list of common passwords like “123456” or “password.”\u003c/p\u003e\u003cp\u003eLike credential stuffing, password spraying is quite common. For example, Verizon’s 2020 Data Breach Report showed that over \u003ca href=\"https://enterprise.verizon.com/content/verizonenterprise/us/en/index/resources/reports/2020-data-breach-investigations-report.pdf\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e80% of all hacking-related data breaches\u003c/a\u003e involved brute-force methods like password spraying.\u003c/p\u003e\u003ch3 id=\"How-to-Protect-Against-Password-Spraying-Attacks\"\u003eHow to Protect Against Password Spraying Attacks\u003c/h3\u003e\u003cp\u003ePassword spraying attacks can be prevented by using passwordless authentication or MFA, just like credential stuffing attacks can be. However, you can also reduce the risk and impact of a data breach via password spraying by following the \u003ca href=\"https://auth0.com/blog/dont-pass-on-the-new-nist-password-guidelines/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNIST Password Guidelines\u003c/a\u003e, which are considered the best password standards in the world.\u003c/p\u003e\u003ch2 id=\"7--Mobile-Device-Attacks\"\u003e7. Mobile Device Attacks\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://www.t-mobile.com/content/dam/tfb/pdf/T-Mobile-for-Business-2020-Workplace-Mobility-Report.pdf?icid=TFB_TMO_P_TFBFTRWRKS_7LCBNVDVYBXY27WF321599\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMany organizations are working to increase the mobility\u003c/a\u003e of their workforce because it improves operational efficiency and productivity. However, cybercriminals are well aware of this fact and are targeting mobile devices more frequently \u003ca href=\"https://www.zdnet.com/article/mobile-malware-attacks-are-booming-in-2019-these-are-the-most-common-threats/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eyear\u003c/a\u003e over \u003ca href=\"https://www.mcafee.com/content/dam/consumer/en-us/docs/2020-Mobile-Threat-Report.pdf\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eyear\u003c/a\u003e with a variety of attacks on this list, which puts organizations at risk for a data breach through more devices than before.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://blog.lookout.com/lookout-trident-pegasus-enterprise-discovery\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eThe Pegasus attack\u003c/a\u003e on Apple’s iOS software is a prime example. Pegasus infected iPhones through phishing text messages that asked recipients to click on a link inside the text message. Clicking the link triggered the installation of spyware capable of monitoring people through their camera and microphone. And once infected, users had their login credentials stolen from WhatsApp, Gmail, and other sensitive communication applications.\u003c/p\u003e\u003ch3 id=\"How-to-Protect-Against-Mobile-Device-Attacks\"\u003eHow to Protect Against Mobile Device Attacks\u003c/h3\u003e\u003cp\u003eProtecting your organization against mobile security threats requires a strong enterprise mobility management (EMM) program, as well as mobile device management (MDM) tools that help you protect any company data that may be on your employees’ personal or work devices. Identity and access management tools like multi-factor authentication can also help secure any work applications that contain sensitive information from unauthorized access.\u003c/p\u003e\u003ch2 id=\"Create-Additional-Layers-of-Security-at-the-Login-Stage\"\u003eCreate Additional Layers of Security at the Login Stage\u003c/h2\u003e\u003cp\u003eThe impact of many cyberattacks on this list (as well as \u003ca href=\"https://www.google.com/url?q=https://auth0.com/resources/whitepapers/state-of-security-identity-report\u0026amp;sa=D\u0026amp;source=editors\u0026amp;ust=1624045583510000\u0026amp;usg=AOvVaw0jtWJoRiARLi1pwCySdu1J\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eothers that many companies face\u003c/a\u003e) can be mitigated or prevented with strong authentication protocols.\u003c/p\u003e\u003cp\u003eFirst and foremost, this means good password policies and sound employee education. However, taking the next step to \u003ca href=\"https://www.google.com/url?q=https://auth0.com/login-security\u0026amp;sa=D\u0026amp;source=editors\u0026amp;ust=1624045583512000\u0026amp;usg=AOvVaw2FeIurZ9Qr026LNUW7RDFZ\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esecure login procedures\u003c/a\u003e with security functionality like multi-factor authentication, \u003ca href=\"https://auth0.com/docs/attack-protection/brute-force-protection\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ebrute-force protection\u003c/a\u003e, or passwordless authentication can add a new dimension of safety to your system.\u003c/p\u003e\u003cp\u003eAuth0 makes it easy to build secure authentication for the right people without compromising on user experience — \u003ca href=\"https://auth0.com/resources/videos/platform-introduction-video-2020\" target=\"_blank\" rel=\"noreferrer noopener\"\u003elearn more about Auth0’s platform here\u003c/a\u003e.\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eAuth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn which cybersecurity tactics and tools will help you combat today's common cyberattacks.",
      "date_published": "2021-08-16T15:44:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/async-await-in-swift/",
      "title": "Async Await in Swift",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eThis year, WWDC came with a bunch of new features and updates. Maybe one of the most expected was the introduction of the new concurrency system by using async/await syntax. This is a huge improvement in the way that we write asynchronous code. \u003c/p\u003e\u003ch2 id=\"Before-Async-Await\"\u003eBefore Async/Await\u003c/h2\u003e\u003cp\u003eImagine that we are working on an app for a grocery store and, we want to display its list of products. We are probably going to have something like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e completion\u003cspan\u003e:\u003c/span\u003e @\u003cspan\u003eescaping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eProduct\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eVoid\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003evar\u003c/span\u003e products \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eProduct\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\nfetchProducts \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eweak\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e products \u003cspan\u003ein\u003c/span\u003e\n    \u003cspan\u003eguard\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e strongSelf \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    strongSelf\u003cspan\u003e.\u003c/span\u003eproducts\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappend\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003econtentsOf\u003cspan\u003e:\u003c/span\u003e products\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eA pretty standard and well-known code using completion blocks. Now suppose that the grocery store has, once in a while, some kind of offers for some products (e.g., \u0026#34;Take 2, pay 1\u0026#34;). And, we want to hold a list with these offers. Let\u0026#39;s adjust our code by creating a new function to retrieve a String with the promotion text, given a specific product.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e completion\u003cspan\u003e:\u003c/span\u003e @\u003cspan\u003eescaping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eProduct\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eVoid\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003egetOffer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e product\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInt\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e @\u003cspan\u003eescaping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eVoid\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003etypealias\u003c/span\u003e \u003cspan\u003eProductOffer\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eproductId\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInt\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e offer\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003evar\u003c/span\u003e products \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eProduct\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003evar\u003c/span\u003e offers \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eProductOffer\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\nfetchProducts \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eweak\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e products \u003cspan\u003ein\u003c/span\u003e\n    \u003cspan\u003eguard\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e strongSelf \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003efor\u003c/span\u003e product \u003cspan\u003ein\u003c/span\u003e products \u003cspan\u003e{\u003c/span\u003e\n        strongSelf\u003cspan\u003e.\u003c/span\u003eproducts\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappend\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eproduct\u003cspan\u003e)\u003c/span\u003e\n\n        \u003cspan\u003egetOffer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e product\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eweak\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e offerText \u003cspan\u003ein\u003c/span\u003e\n            \u003cspan\u003eguard\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e strongSelf \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n            \u003cspan\u003elet\u003c/span\u003e productOffer \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eProductOffer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eproductId\u003cspan\u003e:\u003c/span\u003e product\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e,\u003c/span\u003e offer\u003cspan\u003e:\u003c/span\u003e offerText\u003cspan\u003e)\u003c/span\u003e\n            strongSelf\u003cspan\u003e.\u003c/span\u003eoffers\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappend\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eproductOffer\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe only have two nested closures for a simple feature, and you can see that our code starts to get a little messed up.\u003c/p\u003e\u003ch2 id=\"Async-Await\"\u003eAsync/Await\u003c/h2\u003e\u003cp\u003eFrom Swift 5.5 onwards, we can start using async/await functions to write asynchronous code without using completion handlers to returns values. Instead, we are allowed to return the values in the return object directly.\u003c/p\u003e\u003cp\u003eTo mark a function as asynchronous, we only have to put the keyword \u003cstrong\u003easync\u003c/strong\u003e before the return type.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e async \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eProduct\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003egetOffer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e product\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInt\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e async \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is much easier and simple to read, but the best part comes from the caller\u0026#39;s side. When we want to use the result of a function marked as \u003cstrong\u003easync,\u003c/strong\u003e we need to make sure that its execution is already completed. To make this possible, we need to write the \u003cstrong\u003eawait\u003c/strong\u003e keyword in front of the function call. By doing this, the current execution will be paused until the result is available for its use.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003elet\u003c/span\u003e products \u003cspan\u003e=\u003c/span\u003e await \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003efor\u003c/span\u003e product \u003cspan\u003ein\u003c/span\u003e products \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e offerText \u003cspan\u003e=\u003c/span\u003e await \u003cspan\u003egetOffer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e product\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003eofferText\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisEmpty\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003elet\u003c/span\u003e productOffer \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eProductOffer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eproductId\u003cspan\u003e:\u003c/span\u003e product\u003cspan\u003e.\u003c/span\u003eid\u003cspan\u003e,\u003c/span\u003e offer\u003cspan\u003e:\u003c/span\u003e offerText\u003cspan\u003e)\u003c/span\u003e\n        offers\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappend\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eproductOffer\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAlthough, if we want to execute other tasks while the async function is being executed, we should put the keyword \u003cstrong\u003easync\u003c/strong\u003e in front of the variable (or let) declaration. In this case, the \u003cstrong\u003eawait\u003c/strong\u003e keyword will need to be placed in front of the variable (or let) where we are accessing the result of the async function.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003easync \u003cspan\u003elet\u003c/span\u003e products \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003e// Do some work\u003c/span\u003e\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eawait products\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Parallel-Asynchronous-Functions\"\u003eParallel Asynchronous Functions\u003c/h3\u003e\u003cp\u003eNow imagine that in our app, we want to fetch products by category—for example, just the frozen products. Let\u0026#39;s go ahead and make the adjustments to our code.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eenum\u003c/span\u003e \u003cspan\u003eProductCategory\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ecase\u003c/span\u003e frozen\n    \u003cspan\u003ecase\u003c/span\u003e meat\n    \u003cspan\u003ecase\u003c/span\u003e vegetables\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromCategory category\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eProductCategory\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e async \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eProduct\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003elet\u003c/span\u003e frozenProducts \u003cspan\u003e=\u003c/span\u003e await \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromCategory\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003efrozen\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003elet\u003c/span\u003e meatProducts \u003cspan\u003e=\u003c/span\u003e await \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromCategory\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003emeat\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003elet\u003c/span\u003e vegetablesProducts \u003cspan\u003e=\u003c/span\u003e await \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromCategory\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003evegetals\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is ok, but the code will run in serial mode,  which means that we won\u0026#39;t start fetching the meat products until the frozen products are retrieved. Same for the vegetables. Remember, we write the \u003cstrong\u003eawait\u003c/strong\u003e keyword if we want to pause our execution until the function completes its work. However, in this particular scenario, we could start fetching the three categories at the same time, running in parallel.\u003c/p\u003e\u003cp\u003eIn order to accomplish this, we need to write the \u003cstrong\u003easync\u003c/strong\u003e keyword in front of the var (or let) declaration and use the \u003cstrong\u003eawait\u003c/strong\u003e keyword when we want to use it.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003easync \u003cspan\u003elet\u003c/span\u003e frozenProducts \u003cspan\u003e=\u003c/span\u003e await \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromCategory\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003efrozen\u003cspan\u003e)\u003c/span\u003e\nasync \u003cspan\u003elet\u003c/span\u003e meatProducts \u003cspan\u003e=\u003c/span\u003e await \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromCategory\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003emeat\u003cspan\u003e)\u003c/span\u003e\nasync \u003cspan\u003elet\u003c/span\u003e vegetablesProducts \u003cspan\u003e=\u003c/span\u003e await \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromCategory\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003evegetables\u003cspan\u003e)\u003c/span\u003e \n\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\n\u003cspan\u003elet\u003c/span\u003e products \u003cspan\u003e=\u003c/span\u003e await \u003cspan\u003e[\u003c/span\u003efrozenProducts\u003cspan\u003e,\u003c/span\u003e meatProducts\u003cspan\u003e,\u003c/span\u003e vegetablesProducts\u003cspan\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Error-handlers\"\u003eError handlers\u003c/h3\u003e\u003cp\u003eOur fetching functions might have some errors that make it impossible to return the expected data values. How do we handle this in our async/await context?\u003c/p\u003e\u003cp\u003eWe have a couple of options. The first one is to return the well-known Result object.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e async \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eResult\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eProduct\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eError\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003elet\u003c/span\u003e result \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etry\u003c/span\u003e await \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eswitch\u003c/span\u003e result \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elet\u003c/span\u003e products\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003e// Handle success\u003c/span\u003e\n    \u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elet\u003c/span\u003e error\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003e// Handle error\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnother one is to use the try/catch approach.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e async \u003cspan\u003ethrows\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eProduct\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e products \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etry\u003c/span\u003e await \u003cspan\u003efetchProducts\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003ecatch\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Handle the error\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe main benefit that we had when using the Result type was to improve our completion handlers. In addition to that, we got a cleaner code at the moment we used the result, being able to switch between success and failure cases.\u003c/p\u003e\u003cp\u003eOn the other hand, the use of throw errors adds extra readability in the function\u0026#39;s definition because we only need to put the result type that the function will return. The errors handling is hidden in the function\u0026#39;s implementation.\u003c/p\u003e\u003ch3 id=\"Asynchronous-Sequences\"\u003eAsynchronous Sequences\u003c/h3\u003e\u003cp\u003eLet\u0026#39;s say that we have a requirement to load a list of products from some .csv file. A traditional way to do this is to load all the lines at once and then start processing them. But, what happens if we want to start doing some work as soon as we have one of the lines available? We can now do this using an asynchronous sequence.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003elet\u003c/span\u003e url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eURL\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estring\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;http://www.grocery.com/products.csv\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003efor\u003c/span\u003e \u003cspan\u003etry\u003c/span\u003e await \u003cspan\u003ein\u003c/span\u003e url\u003cspan\u003e.\u003c/span\u003elines \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Do some work\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUsing this new feature also allows us to handle this particular case (reading a file) in a simpler way than before. You can check this \u003ca href=\"https://stackoverflow.com/questions/24581517/read-a-file-url-line-by-line-in-swift\" target=\"_blank\" rel=\"noreferrer noopener\"\u003estackoverflow discussion\u003c/a\u003e to see how we had to do this and see the advantages that this approach has over the previous one.\u003c/p\u003e\u003ch3 id=\"Async-Await-vs--Completion-Handlers\"\u003eAsync/Await vs. Completion Handlers\u003c/h3\u003e\u003cp\u003eAs we saw in the previous sections, the use of async/await syntax comes with a lot of improvements in contrast with using completion blocks. Let\u0026#39;s make a quick recap.\u003c/p\u003e\u003ch4 id=\"Advantages\"\u003eAdvantages\u003c/h4\u003e\u003cul\u003e\u003cli\u003eAvoid the Pyramid of Doom problem with nested closures\u003c/li\u003e\u003cli\u003eReduction of code\u003c/li\u003e\u003cli\u003eEasier to read\u003c/li\u003e\u003cli\u003eSafety. With async/await, a result is guaranteed, while completion blocks might or might not be called.\u003c/li\u003e\u003c/ul\u003e\u003ch4 id=\"Disadvantages\"\u003eDisadvantages\u003c/h4\u003e\u003cul\u003e\u003cli\u003eIt\u0026#39;s only available from Swift 5.5 and iOS 15 onwards.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Actors\"\u003eActors\u003c/h2\u003e\u003cp\u003eTake a look at the following example, just a simple Order class in which we will be adding products and eventually make the checkout.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eOrder\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e products \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eProduct\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e finalPrice \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\n\n    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003eaddProduct\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e product\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eProduct\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        products\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappend\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eproduct\u003cspan\u003e)\u003c/span\u003e\n        finalPrice \u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e product\u003cspan\u003e.\u003c/span\u003eprice\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf we are in a single-thread application, this code is just fine. But what happens if we have multiple threads that can access our order\u0026#39;s final price? \u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eWe are on the product list and add some specific products to our order. The app will call the \u003cstrong\u003eaddProduct\u003c/strong\u003e function.\u003c/li\u003e\u003cli\u003eThe product is added to our order\u0026#39;s product list\u003c/li\u003e\u003cli\u003eBefore the final price gets updated, the user tries to checkout.\u003c/li\u003e\u003cli\u003eThe app will read the final price of our order\u003c/li\u003e\u003cli\u003eThe \u003cstrong\u003eaddProduct\u003c/strong\u003e function completes and updates the final price. But the user already checkout and paid less than they should.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eThis problem is known as \u003ca href=\"https://en.wikipedia.org/wiki/Race_condition\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cstrong\u003eData Races\u003c/strong\u003e\u003c/a\u003e when some particular resource could be accessed from multiple parts of the app\u0026#39;s code.\u003c/p\u003e\u003cp\u003eActors, also introduced in Swift 5.5 and iOS 15, resolve this problem for us. An Actor is basically like a class but with a few key differences that make them \u003cem\u003ethread-safe\u003c/em\u003e:\u003c/p\u003e\u003cul\u003e\u003cli\u003eOnly allow accessing their state by one task at a time\u003c/li\u003e\u003cli\u003eStored properties and functions can only be access from outside the Actor if the operation is performed asynchronously.\u003c/li\u003e\u003cli\u003eStored properties can\u0026#39;t be written from outside the Actor.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eOn the downside:\u003c/p\u003e\u003cul\u003e\u003cli\u003eActors do not support inheritance\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou can think about the Actors like a similar solution of the \u003ca href=\"https://en.wikipedia.org/wiki/Semaphore_(programming\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esemaphores\u003c/a\u003e) concept.\u003c/p\u003e\u003cp\u003eTo create one, we just need to use the \u003cstrong\u003eactor\u003c/strong\u003e keyword.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eactor \u003cspan\u003eOrder\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e products \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eProduct\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e finalPrice \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\n\n    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003eaddProduct\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e product\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eProduct\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        products\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappend\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eproduct\u003cspan\u003e)\u003c/span\u003e\n        finalPrice \u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e product\u003cspan\u003e.\u003c/span\u003eprice\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd we can create an instance using the same initializer syntax as structures and classes. If we want to access the final price, we must do it using the keyword await (because outside the actor\u0026#39;s scope, we are only allowed to access the properties asynchronously).\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eawait order\u003cspan\u003e.\u003c/span\u003efinalPrice\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eDefinitely \u003cstrong\u003easync/await\u003c/strong\u003e brings to the table an easier way to write asynchronous code, removing the need to use completion blocks. In addition, we get more readable and flexible code if our application starts scaling up. \u003c/p\u003e\u003cp\u003eHowever, the minimum iOS deployment target will be an entry barrier for most of us unless you start a project from scratch, in which case is highly recommended to wait until the official release of iOS 15 + Xcode 13 + Swift 5.5  to take full advantage of the new concurrency system.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "A guide to fully understand the new concurrency system in Swift.",
      "date_published": "2021-08-12T15:07:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/build-and-secure-an-api-with-spring-boot/",
      "title": "Build and Secure an API with Spring Boot and Kotlin",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eTL;DR:\u003c/strong\u003e In this article, you’ll learn how to quickly build a RESTful API using the Spring Boot framework and the Kotlin programming language. You’ll then use Auth0 to secure the API so that only authorized parties can use its key functions. You can find the final code for the project developed throughout this article in \u003ca href=\"https://github.com/AccordionGuy/HotSauces\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis GitHub repository\u003c/a\u003e.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eLook for the 🌶 emoji if you’d like to skim through the content while focusing on the build and execution steps.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Spring-Framework--Spring-Boot--and-Kotlin--An-Overview\"\u003eSpring Framework, Spring Boot, and Kotlin: An Overview\u003c/h2\u003e\u003cp\u003eBefore we start building the project, let’s look at the frameworks and language you’ll use.\u003c/p\u003e\u003ch3 id=\"Spring-Framework\"\u003eSpring Framework\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6WdgKiAbhNyVIQWDECzf48/fc4dd3f38700ba0f9a143bdaee8c9479/spring_icon.png\" alt=\"Spring Framework icon\"/\u003e\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://spring.io/projects/spring-framework\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring Framework\u003c/a\u003e, often shortened to just “Spring”, is a popular open source application framework for the Java platform. It’s built on the principle of \u003ca href=\"https://dzone.com/articles/understanding-inversion-of-control-and-dependency\" target=\"_blank\" rel=\"noreferrer noopener\"\u003einversion of control\u003c/a\u003e, whose name implies that control of a Spring application is the opposite of how program control works in traditional applications. Instead of your code directing the application and calling on functionality from a library, the framework directs the application and calls on functionality from your code.\u003c/p\u003e\u003cp\u003eThis approach makes it possible to write an application as a collection of components, with the connections between them maintained by Spring. Spring provides a lot of ready-built components called \u003cem\u003edependencies\u003c/em\u003e that provide functionality that applications commonly require. The end result is a system for building applications that are modular, flexible, quicker to write, and easy to maintain.\u003c/p\u003e\u003cp\u003eSpring is often described — especially by Java developers, who’ve grown used to working with unwieldy frameworks — as lightweight. It provides a set of built-in often-needed capabilities such as MVC, caching, messaging, security, and data access. It significantly reduces the amount of code you have to write and lets you focus on the functionality specific to your application.\u003c/p\u003e\u003cp\u003eWhile Spring is often used for web and server-based applications, it’s a general application framework and it can be used to write desktop and mobile applications as well.\u003c/p\u003e\u003ch3 id=\"Spring-Boot\"\u003eSpring Boot\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/17rXel2g1r2rxiGkpeHNSy/dd64d06b65c7e095b6bcdeffecbd0a9f/spring_boot_icon.png\" alt=\"Spring Boot icon\"/\u003e\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://spring.io/projects/spring-boot\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring Boot\u003c/a\u003e is a framework built on top of Spring that simplifies Spring development. It does this by enforcing an \u003ca href=\"https://www.quora.com/What-is-a-Opinionated-Framework\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eopinionated\u003c/a\u003e approach to Spring application development through \u003ca href=\"https://facilethings.com/blog/en/convention-over-configuration\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e“convention over configuration”\u003c/a\u003e, the use of default setups that applications are likely to use, and a standardized application structure created by a generator that goes by the decidedly “Web 2.0” name of \u003ca href=\"https://www.tiobe.com/tiobe-index/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring Initializr\u003c/a\u003e. Thanks to this “it just works” approach, it’s the fastest way to develop applications with the Spring framework.\u003c/p\u003e\u003ch3 id=\"Kotlin\"\u003eKotlin\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1lE1Sn0pHAIa082QVEhJ0f/b4c6184a9387900f457d260d6e0aeb38/kotlin_icon.png\" alt=\"Kotlin icon\"/\u003e\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://kotlinlang.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eKotlin\u003c/a\u003e is part of the wave of programming languages that appeared in the 2010s, which includes \u003ca href=\"https://dart.dev/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDart\u003c/a\u003e, \u003ca href=\"https://golang.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGo\u003c/a\u003e, \u003ca href=\"https://www.rust-lang.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eRust\u003c/a\u003e, and \u003ca href=\"https://developer.apple.com/swift/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSwift\u003c/a\u003e. These languages have a number of common traits including their own takes on object-oriented programming from the lessons of the 1990s and functional programming from the lessons of the 2000s, inferred strong static typing, and meteoric rises in popularity (all of them are in \u003ca href=\"https://www.tiobe.com/tiobe-index/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eTIOBE’s index of popular programming languages\u003c/a\u003e, and all of them except Kotlin are in the top 20).\u003c/p\u003e\u003cp\u003eAs a programming language designed by \u003ca href=\"https://developer.apple.com/swift/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ea company that makes developer tools\u003c/a\u003e, Kotlin is unique in its origin. It was designed to be an \u003ca href=\"https://kotlinlang.org/docs/reference/comparison-to-java.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eimprovement on Java\u003c/a\u003e, with many of the language features of \u003ca href=\"https://www.scala-lang.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eScala\u003c/a\u003e (but faster compile times) and with the power and convenience that comes from interoperability with Java and the Java platform. It has grown to become the preferred language for Android app development; as of July 2021, \u003ca href=\"https://developer.android.com/kotlin/stories?linkId=94116374\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e80% of the top 1,000 apps in Google Play were written in Kotlin.\u003c/a\u003e According to JetBrains’ \u003ca href=\"https://www.jetbrains.com/lp/devecosystem-2020/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cem\u003eState of Developer Ecosystem 2020\u003c/em\u003e report,\u003c/a\u003e Kotlin is also making serious inroads into web and enterprise development territory.\u003c/p\u003e\u003cp\u003eSince Spring and Spring Boot are based on the Java platform, you can use them to build applications using any JVM-based programming language, including Kotlin. If Java’s verbosity is bringing you down, or if you’re an Android developer who wants to write the back end for your app but don’t want to switch languages, Spring and Spring Boot development in Kotlin is for you!\u003c/p\u003e\u003ch2 id=\"What-You-ll-Build--A-Hot-Sauce-API\"\u003eWhat You’ll Build: A Hot Sauce API\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5VZbuSuMi49Zp9x0bmAK7b/fdd5ca6bac1efdd66ce9e5984e62b0ae/a-hot-sauce-api.jpg\" alt=\"A Hot Sauce API (A tray of hot sauce bottles, viewed from above))\"/\u003e\u003c/p\u003e\u003cp\u003eYou’ll build an API that acts as a catalog of \u003ca href=\"https://en.wikipedia.org/wiki/Hot_sauce\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehot sauces\u003c/a\u003e. It will be a simple one, exposing a single resource named \u003cstrong\u003ehotsauces\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eThe API will provide endpoints for:\u003c/p\u003e\u003cul\u003e\u003cli\u003eConfirming that it is operational\u003c/li\u003e\u003cli\u003eGetting a list of all the hot sauces in the catalog\u003c/li\u003e\u003cli\u003eGetting the number of hot sauces in the catalog\u003c/li\u003e\u003cli\u003eAdding a hot sauce to the catalog\u003c/li\u003e\u003cli\u003eEditing any hot sauce in the catalog\u003c/li\u003e\u003cli\u003eDeleting a hot sauce from the catalog\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIn the first part of the project, you’ll build the API. Once built, you’ll secure it so that the endpoints for CRUD operations will require authentication. The endpoint for testing to see if the API is operational will remain public.\u003c/p\u003e\u003ch2 id=\"Prerequisites\"\u003ePrerequisites\u003c/h2\u003e\u003cp\u003eTo follow along with this article, you’ll need the following installed on your local machine:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://www.oracle.com/java/technologies/javase-jdk11-downloads.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJDK 11\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\u003cli\u003eYou’ll need some command-line tool for issuing HTTP requests. The examples in this article will use the following:\n\u003cul\u003e\u003cli\u003eFor macOS and Linux, the \u003ca href=\"https://curl.haxx.se/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecurl\u003c/a\u003e command line tool\u003c/li\u003e\u003cli\u003eFor Windows, \u003ca href=\"https://docs.microsoft.com/en-us/powershell/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ePowerShell\u003c/a\u003e and its \u003ccode\u003eInvoke\u003cspan\u003e-\u003c/span\u003eRestMethod\u003c/code\u003e and \u003ccode\u003eInvoke\u003cspan\u003e-\u003c/span\u003eWebRequest\u003c/code\u003e \u003ca href=\"https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/cmdlet-overview?view=powershell-7.1\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecmdlets\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003eYour favorite code editor\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou’ll also need internet access, as you’ll be using the Spring Initializr web page and the \u003ca href=\"https://gradle.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGradle\u003c/a\u003e build tool, which goes online to download project dependencies.\u003c/p\u003e\u003ch2 id=\"Building-the-API\"\u003eBuilding the API\u003c/h2\u003e\u003ch3 id=\"Scaffolding-with-Spring-Initializr\"\u003eScaffolding with Spring Initializr\u003c/h3\u003e\u003cp\u003eThe preferred way to set up a new Spring Boot project is to use \u003cstrong\u003e\u003ca href=\"https://start.spring.io\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring Initializr\u003c/a\u003e\u003c/strong\u003e, a web application that generates a basic Spring Boot project, complete with all the necessary configurations, your choice of dependencies, and Gradle or Maven build files. It’s available online at \u003ca href=\"https://start.spring.io/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003estart.spring.io\u003c/a\u003e and built into the Ultimate Edition of \u003ca href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eIntelliJ IDEA\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eYou \u003cem\u003ecould\u003c/em\u003e create a new project manually using Spring Boot’s command-line interface, but Spring Initializr organizes its projects using a standardized directory layout for JVM-based projects. This makes your projects easier to maintain, and lets you focus on what your application actually \u003cem\u003edoes\u003c/em\u003e.\u003c/p\u003e\u003cp\u003e🌶 Point your favorite browser at the \u003ca href=\"https://start.spring.io/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring Initializr page\u003c/a\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2Tay8vTcNWBA7HRyPUakuI/b2dbcee51217aff5aa7526ddc2d3724e/spring_initializr_blank.png\" alt=\"The Spring Initializr webpage\"/\u003e\u003c/p\u003e\u003cp\u003eHere’s how you should fill it out:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cem\u003eProject:\u003c/em\u003e Select \u003cstrong\u003eGradle Project\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003e\u003cem\u003eLanguage:\u003c/em\u003e Select \u003cstrong\u003eKotlin\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003e\u003cem\u003eSpring Boot:\u003c/em\u003e Select the latest stable version. At the time of writing, it’s version \u003cstrong\u003e2.5.3\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003e\u003cem\u003eProject Metadata:\u003c/em\u003e\n\u003cul\u003e\u003cli\u003e\u003cem\u003eGroup:\u003c/em\u003e This should be something that uniquely identifies yourself or your organization. Typically, you’d enter your domain name in reverse notation (for example, if your domain is \u003cstrong\u003eabc123.com\u003c/strong\u003e, enter \u003cstrong\u003ecom.abc123\u003c/strong\u003e. If you don’t have a domain name, just enter \u003cstrong\u003ecom.auth0\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003e\u003cem\u003eArtifact:\u003c/em\u003e This should be something that identifies the project. Enter \u003cstrong\u003ehotsauces\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003e\u003cem\u003eName:\u003c/em\u003e This will autofill based on what you entered for \u003cem\u003eArtifact\u003c/em\u003e; just use the value in this field.\u003c/li\u003e\u003cli\u003e\u003cem\u003eDescription:\u003c/em\u003e Enter \u003cstrong\u003eA Spring Boot/Auth0 API project\u003c/strong\u003e into this field.\u003c/li\u003e\u003cli\u003e\u003cem\u003ePackage name:\u003c/em\u003e This will autofill based on what you entered for \u003cem\u003eGroup\u003c/em\u003e and \u003cem\u003eArtifact\u003c/em\u003e; just use the value in this field.\u003c/li\u003e\u003cli\u003e\u003cem\u003ePackaging:\u003c/em\u003e Select \u003cstrong\u003eJar\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003e\u003cem\u003eJava:\u003c/em\u003e Select \u003cstrong\u003e11\u003c/strong\u003e.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cem\u003eDependencies:\u003c/em\u003e Click the \u003cstrong\u003eADD DEPENDENCIES...\u003c/strong\u003e button and choose the following:\n\u003cul\u003e\u003cli\u003e\u003cstrong\u003eSpring Boot DevTools\u003c/strong\u003e: A set of convenient tools for development.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSpring Web\u003c/strong\u003e: Provides a web server and facilities for building RESTful web applications and APIs.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSpring Data JPA\u003c/strong\u003e: Makes the process of building a data access layer almost trivial.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eH2 Database\u003c/strong\u003e: This project will use the \u003ca href=\"https://www.h2database.com/html/main.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eH2\u003c/a\u003e in-memory database.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSpring Boot Actuator\u003c/strong\u003e: Adds a handy collection of diagnostic tools to a Spring Boot project.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eOnce filled out, the form should look like this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6kuJ07yRPE8vXdHRerx2ve/76fcdd422c6a1a9bdd8350277b53e40c/spring_initializr_filled.png\" alt=\"The Spring Initializr webpage, filled out with this project\u0026#39;s details\"/\u003e\u003c/p\u003e\u003cp\u003e🌶 With the form filled out, click the \u003cstrong\u003eGENERATE\u003c/strong\u003e button. The site will generate a .zip file, and it will automatically be downloaded to your local machine. Unzip the file to reveal the \u003cstrong\u003ehotsauces\u003c/strong\u003e project folder.\u003c/p\u003e\u003cp\u003eWithin the \u003cstrong\u003ehotsauces\u003c/strong\u003e folder, you’ll work in two specific areas for this exercise:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e/src/main/kotlin/com/auth0/hotsauces/\u003c/strong\u003e: The code for the project goes into this directory. At the moment, it contains a single file, \u003cstrong\u003eHotSaucesApplication.kt\u003c/strong\u003e. This contains a simple application class, which is the first code in the project that is executed when the application is run.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e/build.gradle.kts\u003c/strong\u003e: This is the project’s Gradle build file. Among other things, it specifies which dependencies will be used by the project. You’ll add some security-related dependencies to this file when securing the API.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Defining--HotSauces---the-Class-Behind-the-API-s-Resource\"\u003eDefining \u003ccode\u003eHotSauces\u003c/code\u003e, the Class Behind the API’s Resource\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2qejaKSqZDNvVhRZwUAHTH/ec35c47e1bdb1a910909e9ff097a91c8/wide-hot-sauces-tray.png\" alt=\"A tray of different bottles of hot sauce\"/\u003e\u003c/p\u003e\u003cp\u003eThe first piece of code you’ll write is the model behind the API’s only resource: hot sauces.\u003c/p\u003e\u003cp\u003eEach hot sauce has the following attributes:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eid\u003c/code\u003e\u003c/strong\u003e — (number) The unique identifier for the hot sauce, and primary key.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ebrandName\u003c/code\u003e\u003c/strong\u003e — (string) The name of the producer of the hot sauce.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esauceName\u003c/code\u003e\u003c/strong\u003e — (string) The name of the hot sauce.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003edescription\u003c/code\u003e\u003c/strong\u003e — (string) A description of the hot sauce, with the appropriate keywords. This may be lengthy.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eurl\u003c/code\u003e\u003c/strong\u003e — (number) The URL for the web page for the hot sauce.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eheat\u003c/code\u003e\u003c/strong\u003e — (number) The spiciness of the hot sauce, expressed in \u003ca href=\"https://pepperheadsforlife.com/the-scoville-scale/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eScoville heat units (SHUs).\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🌶 Create a new file named \u003cstrong\u003eHotSauce.kt\u003c/strong\u003e in the \u003cstrong\u003e/src/main/kotlin/com/auth0/hotsauces/\u003c/strong\u003e directory:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /src/main/kotlin/com/auth0/hotsauces/HotSauce.kt\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003ehotsauces\n\n\u003cspan\u003eimport\u003c/span\u003e javax\u003cspan\u003e.\u003c/span\u003epersistence\u003cspan\u003e.\u003c/span\u003eEntity\n\u003cspan\u003eimport\u003c/span\u003e javax\u003cspan\u003e.\u003c/span\u003epersistence\u003cspan\u003e.\u003c/span\u003eGeneratedValue\n\u003cspan\u003eimport\u003c/span\u003e javax\u003cspan\u003e.\u003c/span\u003epersistence\u003cspan\u003e.\u003c/span\u003eGenerationType\n\u003cspan\u003eimport\u003c/span\u003e javax\u003cspan\u003e.\u003c/span\u003epersistence\u003cspan\u003e.\u003c/span\u003eId\n\u003cspan\u003eimport\u003c/span\u003e javax\u003cspan\u003e.\u003c/span\u003epersistence\u003cspan\u003e.\u003c/span\u003eLob\n\n\u003cspan\u003e@Entity\u003c/span\u003e\n\u003cspan\u003edata\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n\n    \u003cspan\u003e// This property maps to the primary key in the database.\u003c/span\u003e\n    \u003cspan\u003e@Id\u003c/span\u003e \u003cspan\u003e@GeneratedValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estrategy \u003cspan\u003e=\u003c/span\u003e GenerationType\u003cspan\u003e.\u003c/span\u003eAUTO\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e id\u003cspan\u003e:\u003c/span\u003e Long \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\n    \u003cspan\u003e// These properties are NOT likely to be longer than 256 characters.\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e brandName\u003cspan\u003e:\u003c/span\u003e String \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e sauceName\u003cspan\u003e:\u003c/span\u003e String \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\n    \u003cspan\u003e// These properties might be longer than 256 characters.\u003c/span\u003e\n    \u003cspan\u003e@Lob\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e description\u003cspan\u003e:\u003c/span\u003e String \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e@Lob\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e url\u003cspan\u003e:\u003c/span\u003e String \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\n    \u003cspan\u003evar\u003c/span\u003e heat\u003cspan\u003e:\u003c/span\u003e Int \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\n\n\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eHotSauce\u003c/code\u003e is a Kotlin \u003cstrong\u003e\u003ca href=\"https://kotlinlang.org/docs/reference/data-classes.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edata class\u003c/a\u003e\u003c/strong\u003e, whose job is to hold data. Data classes are all properties and no methods — or at least no \u003cem\u003eexplicitly\u003c/em\u003e defined methods, anyway. The compiler automatically provides a handful of “behind the scenes” methods to data classes, including \u003ccode\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, and \u003ccode\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eKotlin classes, data classes included, have a constructor built into the class header. This constructor, called the \u003cstrong\u003eprimary constructor\u003c/strong\u003e, takes its parameters in the parentheses that follow the class name. \u003ccode\u003eHotSauce\u003c/code\u003e, like many data classes, is just a class header and primary constructor, and nothing else.\u003c/p\u003e\u003cp\u003eEven though there isn’t much to the class, it uses some annotations to pull in a lot of extra functionality:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eHotSauce\u003c/code\u003e is annotated with \u003ccode\u003e@Entity\u003c/code\u003e, which informs the Java Persistence API (JPA, one of the dependencies that you added in Spring Initializr) that its instances will be persisted in the database.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003eid\u003c/code\u003e property is annotated with both \u003ccode\u003e@Id\u003c/code\u003e and \u003ccode\u003e@GeneratedValue\u003c/code\u003e, which makes sense, as it will map to the \u003ccode\u003eid\u003c/code\u003e field in the corresponding database table.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003e@Lob\u003c/code\u003e annotation is short for “large object”. It’s being used to annotate the \u003ccode\u003edescription\u003c/code\u003e and \u003ccode\u003eurl\u003c/code\u003e properties because they could contain strings longer than 256 characters. By default, JPA maps \u003ccode\u003eString\u003c/code\u003es in entities to the \u003ccode\u003e\u003cspan\u003eVARCHAR\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e256\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e type in the database; marking a \u003ccode\u003eString\u003c/code\u003e as \u003ccode\u003e@Lob\u003c/code\u003e tells JPA to map it to the \u003ccode\u003e\u003cspan\u003eTEXT\u003c/span\u003e\u003c/code\u003e type instead.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIf you’re new to Kotlin, make note of the keywords in the class’ property declarations:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eval\u003c/code\u003e is short for “value” and declares a constant. A hot sauce’s \u003ccode\u003eid\u003c/code\u003e value shouldn’t be changed after it’s been created, so we’re declaring it with \u003ccode\u003eval\u003c/code\u003e.\u003c/li\u003e\u003cli\u003e\u003ccode\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/code\u003e is short for “variable” and that’s what it declares. All the other class properties should be editable, so we’re declaring them with \u003ccode\u003e\u003cspan\u003evar\u003c/span\u003e\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou might be wondering about assigning the value \u003ccode\u003e\u003cspan\u003e0\u003c/span\u003e\u003c/code\u003e to \u003ccode\u003eid\u003c/code\u003e, which is a constant:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e@Id @\u003cspan\u003eGeneratedValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estrategy \u003cspan\u003e=\u003c/span\u003e GenerationType\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAUTO\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\nval id\u003cspan\u003e:\u003c/span\u003e Long \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe line \u003ccode\u003eval id\u003cspan\u003e:\u003c/span\u003e Long \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/code\u003e might make you think that every hot sauce will have an unchangeable \u003ccode\u003eid\u003c/code\u003e set to \u003ccode\u003e\u003cspan\u003e0\u003c/span\u003e\u003c/code\u003e. As a constant, the value of \u003ccode\u003eid\u003c/code\u003e can’t be changed by any code that \u003cem\u003eyou\u003c/em\u003e write, but the \u003ccode\u003e@GeneratedValue\u003c/code\u003e annotation allows Spring to use \u003ca href=\"https://kotlinlang.org/docs/reflection.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ereflection\u003c/a\u003e to get around that limitation and assign a unique \u003ccode\u003eid\u003c/code\u003e value for every sauce. Every modern application framework incorporates “magic” like this; I’ve found that it’s simplest just to know where such instances are and to accept them.\u003c/p\u003e\u003cp\u003eWith \u003ccode\u003eHotSauce\u003c/code\u003e defined, you have a \u003cstrong\u003emodel\u003c/strong\u003e that represents hot sauces in the real world. By annotating it with \u003ccode\u003e@Entity\u003c/code\u003e, you’ve specified that instances of \u003ccode\u003eHotSauce\u003c/code\u003e should be converted into \u003cstrong\u003eentities\u003c/strong\u003e — that is, instances that have been saved to a database.\u003c/p\u003e\u003cp\u003eIt’s time to set up something to save \u003ccode\u003eHotSauce\u003c/code\u003e instances.\u003c/p\u003e\u003ch3 id=\"Adding-Data-Access-with-a--CrudRepository-\"\u003eAdding Data Access with a \u003ccode\u003eCrudRepository\u003c/code\u003e\u003c/h3\u003e\u003cp\u003eThe \u003ca href=\"https://deviq.com/repository-pattern/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eRepository pattern\u003c/a\u003e provides a layer of abstraction between an application’s models and the system used to store data. A repository provides a collection-style interface to the models, with methods for retrieving the whole collection, retrieving a specific item, and adding, editing, and deleting items. The repository insulates the models from the usual database concerns, such as connecting with it, setting up a reader, or worrying about things like cursors.\u003c/p\u003e\u003cp\u003eSpring provides a number of repository interfaces. In this project, you’ll use the \u003ca href=\"https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eCrudRepository\u003c/code\u003e\u003c/a\u003e interface to act as the intermediary between \u003ccode\u003eHotSauce\u003c/code\u003e and the H2 database (another one of the dependencies you added in Spring Initializr) as shown below:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2CCk6CDxAKOrF7RJ6F05nw/8a14bb24936eaa0efc2364a31cb551bc/repository-pattern.png\" alt=\"Repository Pattern\"/\u003e\u003c/p\u003e\u003cp\u003eIn this exercise, the underlying data store is the H2 in-memory database. The Repository pattern makes it so that changing the database doesn’t require you to make any changes to \u003ccode\u003eHotSauce\u003c/code\u003e, and Spring’s inversion of control architecture makes it so that such a change doesn’t even require a change to the \u003ccode\u003eCrudRepository\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e🌶 Create a new file named \u003cstrong\u003eHotSauceRepository.kt\u003c/strong\u003e in the \u003cstrong\u003e/src/main/kotlin/com/auth0/hotsauces/\u003c/strong\u003e directory:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /src/main/kotlin/com/auth0/hotsauces/HotSauceRepository.kt\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003ehotsauces\n\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003edata\u003cspan\u003e.\u003c/span\u003erepository\u003cspan\u003e.\u003c/span\u003eCrudRepository\n\n\u003cspan\u003einterface\u003c/span\u003e HotSauceRepository\u003cspan\u003e:\u003c/span\u003e CrudRepository\u003cspan\u003e\u0026lt;\u003c/span\u003eHotSauce\u003cspan\u003e,\u003c/span\u003e Long\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis code sets up an interface named \u003ccode\u003eHotSauceRepository\u003c/code\u003e that’s based on a \u003ccode\u003eCrudRepository\u003c/code\u003e of entities based on the \u003ccode\u003eHotSauce\u003c/code\u003e model, each of which is uniquely identified by a \u003ccode\u003eLong\u003c/code\u003e (namely, the \u003ccode\u003eid\u003c/code\u003e property of \u003ccode\u003eHotSauce\u003c/code\u003e).\u003c/p\u003e\u003cp\u003e\u003ccode\u003eCrudRepository\u003c/code\u003e provides a set of methods for performing the standard set of CRUD operations. Here’s the subset that you’ll use in this project:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/strong\u003e — Returns the number of entities.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u003cspan\u003edeleteById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/strong\u003e — Deletes the entity with the given id.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u003cspan\u003eexistsById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/strong\u003e — Returns \u003ccode\u003e\u003cspan\u003etrue\u003c/span\u003e\u003c/code\u003e if the entity with the given id exists.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u003cspan\u003efindAll\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/strong\u003e — Retrieves all the entities.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u003cspan\u003efindById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/strong\u003e — Retrieves the entity with the given id.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u003cspan\u003esave\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/strong\u003e — Saves the given entity.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou’ll use these methods in the controller, which you’ll build next.\u003c/p\u003e\u003cp\u003eNote that you didn’t have to do anything to connect the repository to the database. Spring Boot’s inversion of control took care of that for you.\u003c/p\u003e\u003ch3 id=\"Building-the-controller\"\u003eBuilding the controller\u003c/h3\u003e\u003cp\u003eThe controller should expose the following API endpoints:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e api\u003cspan\u003e/\u003c/span\u003ehotsauces\u003c/code\u003e\u003c/strong\u003e: Returns the entire collection of hot sauces. Accepts these optional named parameters:\n\u003cul\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ebrandname\u003c/code\u003e\u003c/strong\u003e: Limits the results to only those sauces whose \u003ccode\u003ebrandName\u003c/code\u003e contains the given string.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esaucename\u003c/code\u003e\u003c/strong\u003e Limits the results to only those sauces whose \u003ccode\u003esauceName\u003c/code\u003e contains the given string.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003edesc\u003c/code\u003e\u003c/strong\u003e Limits the results to only those sauces whose \u003ccode\u003edescription\u003c/code\u003e contains the given string.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eminheat\u003c/code\u003e\u003c/strong\u003e Limits the results to only those sauces whose \u003ccode\u003eheat\u003c/code\u003e rating is greater than or equal to the given number.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003emaxheat\u003c/code\u003e\u003c/strong\u003e Limits the results to only those sauces whose \u003ccode\u003eheat\u003c/code\u003e rating is less than or equal to the given number.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e api\u003cspan\u003e/\u003c/span\u003ehotsauces\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/strong\u003e: Returns the hot sauce with the given id.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e api\u003cspan\u003e/\u003c/span\u003ehotsauces\u003cspan\u003e/\u003c/span\u003ecount\u003c/code\u003e\u003c/strong\u003e: Returns the number of hot sauces.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u003cspan\u003ePOST\u003c/span\u003e api\u003cspan\u003e/\u003c/span\u003ehotsauce\u003c/code\u003e\u003c/strong\u003e: Adds a hot sauce whose details are included in the request.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u003cspan\u003ePUT\u003c/span\u003e api\u003cspan\u003e/\u003c/span\u003ehotsauces\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/strong\u003e: Updates the hot sauce with the given id using the details included in the request.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u003cspan\u003eDELETE\u003c/span\u003e api\u003cspan\u003e/\u003c/span\u003ehotsauces\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/strong\u003e: Deletes the hot sauce with the given id.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🌶 Create a new file named \u003cstrong\u003eHotSauceController.kt\u003c/strong\u003e in the \u003cstrong\u003e/src/main/kotlin/com/auth0/hotsauces/\u003c/strong\u003e directory:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /src/main/kotlin/com/auth0/hotsauces/HotSauceController.kt\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003ehotsauces\n\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003eHttpStatus\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003eResponseEntity\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003ebind\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e java\u003cspan\u003e.\u003c/span\u003eutil\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\n\n\u003cspan\u003e@RestController\u003c/span\u003e\n\u003cspan\u003e@RequestMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/hotsauces\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eHotSauceController\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e hotSauceRepository\u003cspan\u003e:\u003c/span\u003e HotSauceRepository\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003e// GET api/hotsauces\u003c/span\u003e\n    \u003cspan\u003e@GetMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003egetAll\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e@RequestParam\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003evalue\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;brandname\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e required \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e defaultValue \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e brandNameFilter\u003cspan\u003e:\u003c/span\u003e String\u003cspan\u003e,\u003c/span\u003e\n               \u003cspan\u003e@RequestParam\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003evalue\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;saucename\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e required \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e defaultValue \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e sauceNameFilter\u003cspan\u003e:\u003c/span\u003e String\u003cspan\u003e,\u003c/span\u003e\n               \u003cspan\u003e@RequestParam\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003evalue\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;desc\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e required \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e defaultValue \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e descFilter\u003cspan\u003e:\u003c/span\u003e String\u003cspan\u003e,\u003c/span\u003e\n               \u003cspan\u003e@RequestParam\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003evalue\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;minheat\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e required \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e defaultValue \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e minHeat\u003cspan\u003e:\u003c/span\u003e String\u003cspan\u003e,\u003c/span\u003e\n               \u003cspan\u003e@RequestParam\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003evalue\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;maxheat\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e required \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e defaultValue \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e maxHeat\u003cspan\u003e:\u003c/span\u003e String\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ResponseEntity\u003cspan\u003e\u0026lt;\u003c/span\u003eList\u003cspan\u003e\u0026lt;\u003c/span\u003eHotSauce\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eval\u003c/span\u003e MAX_SCOVILLE \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e3_000_000\u003c/span\u003e \u003cspan\u003e// At this point, it\u0026#39;s no longer food, but a weapon\u003c/span\u003e\n        \u003cspan\u003eval\u003c/span\u003e minHeatFilter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003eminHeat\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisNullOrBlank\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e minHeat\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoInt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\n        \u003cspan\u003eval\u003c/span\u003e maxHeatFilter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003emaxHeat\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisNullOrBlank\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e maxHeat\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoInt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e MAX_SCOVILLE\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehotSauceRepository\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efindAll\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e it\u003cspan\u003e.\u003c/span\u003ebrandName\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ebrandNameFilter\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e it\u003cspan\u003e.\u003c/span\u003esauceName\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esauceNameFilter\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e it\u003cspan\u003e.\u003c/span\u003edescription\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003edescFilter\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e it\u003cspan\u003e.\u003c/span\u003eheat \u003cspan\u003e\u0026gt;=\u003c/span\u003e minHeatFilter \u003cspan\u003e}\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e it\u003cspan\u003e.\u003c/span\u003eheat \u003cspan\u003e\u0026lt;=\u003c/span\u003e maxHeatFilter \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            HttpStatus\u003cspan\u003e.\u003c/span\u003eOK\n        \u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e// GET api/hotsauces/{id}\u003c/span\u003e\n    \u003cspan\u003e@GetMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/count\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003egetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ResponseEntity\u003cspan\u003e\u0026lt;\u003c/span\u003eLong\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehotSauceRepository\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            HttpStatus\u003cspan\u003e.\u003c/span\u003eOK\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003e// GET api/hotsauces/count\u003c/span\u003e\n    \u003cspan\u003e@GetMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/{id}\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003egetHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e@PathVariable\u003c/span\u003e id\u003cspan\u003e:\u003c/span\u003e Long\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ResponseEntity\u003cspan\u003e\u0026lt;\u003c/span\u003eOptional\u003cspan\u003e\u0026lt;\u003c/span\u003eHotSauce\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ehotSauceRepository\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eexistsById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eid\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehotSauceRepository\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efindById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eid\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e HttpStatus\u003cspan\u003e.\u003c/span\u003eOK\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eHttpStatus\u003cspan\u003e.\u003c/span\u003eNOT_FOUND\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e// POST api/hotsauce\u003c/span\u003e\n    \u003cspan\u003e@PostMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ecreateHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e@RequestBody\u003c/span\u003e hotSauce\u003cspan\u003e:\u003c/span\u003e HotSauce\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ResponseEntity\u003cspan\u003e\u0026lt;\u003c/span\u003eHotSauce\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehotSauceRepository\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esave\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehotSauce\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e HttpStatus\u003cspan\u003e.\u003c/span\u003eCREATED\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e// PUT api/hotsauces/{id}\u003c/span\u003e\n    \u003cspan\u003e@PutMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/{id}\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eupdateHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e@PathVariable\u003c/span\u003e id\u003cspan\u003e:\u003c/span\u003e Long\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e@RequestBody\u003c/span\u003e sauceChanges\u003cspan\u003e:\u003c/span\u003e HotSauce\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ResponseEntity\u003cspan\u003e\u0026lt;\u003c/span\u003eHotSauce\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ehotSauceRepository\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eexistsById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eid\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eval\u003c/span\u003e originalSauce \u003cspan\u003e=\u003c/span\u003e hotSauceRepository\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efindById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eid\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003eval\u003c/span\u003e updatedSauce \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                id \u003cspan\u003e=\u003c/span\u003e id\u003cspan\u003e,\u003c/span\u003e\n                brandName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003esauceChanges\u003cspan\u003e.\u003c/span\u003ebrandName \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e sauceChanges\u003cspan\u003e.\u003c/span\u003ebrandName \u003cspan\u003eelse\u003c/span\u003e originalSauce\u003cspan\u003e.\u003c/span\u003ebrandName\u003cspan\u003e,\u003c/span\u003e\n                sauceName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003esauceChanges\u003cspan\u003e.\u003c/span\u003esauceName \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e sauceChanges\u003cspan\u003e.\u003c/span\u003esauceName \u003cspan\u003eelse\u003c/span\u003e originalSauce\u003cspan\u003e.\u003c/span\u003esauceName\u003cspan\u003e,\u003c/span\u003e\n                description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003esauceChanges\u003cspan\u003e.\u003c/span\u003edescription \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e sauceChanges\u003cspan\u003e.\u003c/span\u003edescription \u003cspan\u003eelse\u003c/span\u003e originalSauce\u003cspan\u003e.\u003c/span\u003edescription\u003cspan\u003e,\u003c/span\u003e\n                url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003esauceChanges\u003cspan\u003e.\u003c/span\u003eurl \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e sauceChanges\u003cspan\u003e.\u003c/span\u003eurl \u003cspan\u003eelse\u003c/span\u003e originalSauce\u003cspan\u003e.\u003c/span\u003eurl\u003cspan\u003e,\u003c/span\u003e\n                heat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003esauceChanges\u003cspan\u003e.\u003c/span\u003eheat \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e sauceChanges\u003cspan\u003e.\u003c/span\u003eheat \u003cspan\u003eelse\u003c/span\u003e originalSauce\u003cspan\u003e.\u003c/span\u003eheat\n            \u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehotSauceRepository\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esave\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eupdatedSauce\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e HttpStatus\u003cspan\u003e.\u003c/span\u003eOK\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eHttpStatus\u003cspan\u003e.\u003c/span\u003eNOT_FOUND\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e// DELETE api/hotsauces/{id}\u003c/span\u003e\n    \u003cspan\u003e@DeleteMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/{id}\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003edeleteHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e@PathVariable\u003c/span\u003e id\u003cspan\u003e:\u003c/span\u003e Long\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ResponseEntity\u003cspan\u003e\u0026lt;\u003c/span\u003eHotSauce\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ehotSauceRepository\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eexistsById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eid\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            hotSauceRepository\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edeleteById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eid\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eHttpStatus\u003cspan\u003e.\u003c/span\u003eNO_CONTENT\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eResponseEntity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eHttpStatus\u003cspan\u003e.\u003c/span\u003eNOT_FOUND\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe code is considerably less complex than it could be, thanks to some annotations which take care of a lot of tedious REST work:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eHotSauceController\u003c/code\u003e is annotated with \u003ccode\u003e@RestController\u003c/code\u003e, which informs Spring Web (yet another one of the dependencies that you added in Spring Initializr) that this class is a REST controller and that it should include the necessary underlying REST functionality.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eHotSauceController\u003c/code\u003e is also annotated with \u003ccode\u003e@\u003cspan\u003eRequestMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/hotsauces\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e which means that every method in the class that responds to a request responds to requests whose endpoint ends with \u003ccode\u003eapi\u003cspan\u003e/\u003c/span\u003ehotsauces\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eAny method annotated with \u003ccode\u003e@\u003cspan\u003eGetMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e responds to \u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e\u003c/code\u003e requests. If \u003ccode\u003e@\u003cspan\u003eGetMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e takes a parameter, it means that it responds to requests whose endpoint begins with that parameter. Parameters in braces (\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e) are variable parameters.\u003c/li\u003e\u003cli\u003eAny method annotated with \u003ccode\u003e@\u003cspan\u003ePostMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e@\u003cspan\u003ePutMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, and \u003ccode\u003e@\u003cspan\u003eDeleteMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e is similar to a method annotated with \u003ccode\u003e@\u003cspan\u003eGetMapping\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e except that they respond to \u003ccode\u003e\u003cspan\u003ePOST\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003ePUT\u003c/span\u003e\u003c/code\u003e, and \u003ccode\u003e\u003cspan\u003eDELETE\u003c/span\u003e\u003c/code\u003e requests respectively.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eEvery method in the class returns a \u003ca href=\"https://www.baeldung.com/spring-response-entity\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eResponseEntity\u003c/code\u003e\u003c/a\u003e object, which represents a complete HTTP response, complete with status code, headers, and body.\u003c/p\u003e\u003cp\u003eTake a look at each of these methods to see what kind of \u003ccode\u003eResponseEntity\u003c/code\u003e they return. Sometimes, they’ll simply return an HTTP status code, as is the case with \u003ccode\u003e\u003cspan\u003edeleteHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, which returns either \u003ccode\u003e\u003cspan\u003eNO_CONTENT\u003c/span\u003e\u003c/code\u003e if the hot sauce was found and deleted or \u003ccode\u003e\u003cspan\u003eNOT_FOUND\u003c/span\u003e\u003c/code\u003e if the hot sauce requested for deletion was not in the database. Other methods may return a more complex \u003ccode\u003eResponseEntity\u003c/code\u003e, such as \u003ccode\u003e\u003cspan\u003egetHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, which returns an \u003ccode\u003e\u003cspan\u003eOK\u003c/span\u003e\u003c/code\u003e status code and a \u003ccode\u003eHotSauce\u003c/code\u003e object if the given \u003ccode\u003eid\u003c/code\u003e matches a hot sauce in the database.\u003c/p\u003e\u003cp\u003eYou may have noticed the \u003ccode\u003e@RequestParam\u003c/code\u003e annotations in the signature of the \u003ccode\u003e\u003cspan\u003egetAll\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method. These map the parameters in the HTTP GET query string to \u003ccode\u003e\u003cspan\u003egetAll\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e’s parameters. The first annotation declares that value in \u003ccode\u003ebrandname\u003c/code\u003e query parameter is mapped to the \u003ccode\u003e\u003cspan\u003egetAll\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method’s \u003ccode\u003ebrandNameFilter\u003c/code\u003e parameter, that \u003ccode\u003ebrandname\u003c/code\u003e is an optional query parameter, and if it isn’t used, its value should default to the empty string. The other \u003ccode\u003e@RequestParam\u003c/code\u003e annotations work in a similar manner.\u003c/p\u003e\u003ch3 id=\"Initializing-the-database\"\u003eInitializing the database\u003c/h3\u003e\u003cp\u003eYou could run the app right now and it would work. There’s just one problem: Since the database is in-memory and unitialized, you don’t have any data to work with! Let’s add a class to preload the database with some initial hot sauces.\u003c/p\u003e\u003cp\u003e🌶 Create a new file named \u003cstrong\u003eDataLoader.kt\u003c/strong\u003e in the \u003cstrong\u003e/src/main/kotlin/com/auth0/hotsauces/\u003c/strong\u003e directory:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /src/main/kotlin/com/auth0/hotsauces/DataLoader.kt\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003ehotsauces\n\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003estereotype\u003cspan\u003e.\u003c/span\u003eComponent\n\u003cspan\u003eimport\u003c/span\u003e javax\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003ePostConstruct\n\n\u003cspan\u003e@Component\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eDataLoader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003evar\u003c/span\u003e hotSauceRepository\u003cspan\u003e:\u003c/span\u003e HotSauceRepository\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003efun\u003c/span\u003e String\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrimIndentsAndRemoveNewlines\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrimIndent\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereplace\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003e@PostConstruct\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eloadData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        hotSauceRepository\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esaveAll\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elistOf\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003eHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                brandName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Truff\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                sauceName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Hot Sauce\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n                    Our sauce is a curated blend of ripe chili peppers, organic agave nectar, black truffle, and\n                    savory spices. This combination of ingredients delivers a flavor profile unprecedented to hot sauce.\n                    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrimIndentsAndRemoveNewlines\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;https://truffhotsauce.com/collections/sauce/products/truff\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                heat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e2_500\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003eHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                brandName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Truff\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                sauceName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Hotter Sauce\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n                    TRUFF Hotter Sauce is a jalapeño rich blend of red chili peppers, Black Truffle and Black Truffle\n                    Oil, Organic Agave Nectar, Red Habanero Powder, Organic Cumin and Organic Coriander. Perfectly\n                    balanced and loaded with our same iconic flavor, TRUFF Hotter Sauce offers a “less sweet, more heat”\n                    rendition of the Flagship original.\n                    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrimIndentsAndRemoveNewlines\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;https://truffhotsauce.com/collections/sauce/products/hotter-truff-hot-sauce\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                heat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e4_000\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003eHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                brandName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Cholula\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                sauceName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Original\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n                    Cholula Original Hot Sauce is created from a generations old recipe that features carefully-selected\n                    arbol and piquin peppers and a blend of signature spices. We love it on burgers and chicken but have\n                    heard it’s amazing on pizza. Uncap Real Flavor with Cholula Original.\n                    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrimIndentsAndRemoveNewlines\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;https://www.cholula.com/original.html\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                heat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e3_600\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003eHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                brandName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Mad Dog\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                sauceName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;357\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n                   Finally, a super hot sauce that tastes like real chile peppers. This sauce is blended\n                   with ingredients that create a sauce fit to take your breath away. About five seconds after you\n                   taste the recommended dose of one drop, prepare your mouth and mind for five to 20 minutes of agony\n                   that all true chileheads fully understand and appreciate.\n                   \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrimIndentsAndRemoveNewlines\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;https://www.saucemania.com.au/mad-dog-357-hot-sauce-148ml/\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                heat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e357_000\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003eHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                brandName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Hot Ones\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                sauceName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Fiery Chipotle\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n                    This hot sauce was created with one goal in mind: to get celebrity interviewees on Hot Ones to say\n                    \u0026#34;damn that\u0026#39;s tasty, and DAMN that\u0026#39;s HOT!\u0026#34; and then spill their deepest secrets to host Sean Evans.\n                    The tongue tingling flavors of chipotle, pineapple and lime please the palate while the mix of ghost\n                    and habanero peppers make this sauce a scorcher. Hot Ones Fiery Chipotle Hot Sauce is a spicy\n                    masterpiece.\n                    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrimIndentsAndRemoveNewlines\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;https://chillychiles.com/products/hot-ones-fiery-chipotle-hot-sauce\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                heat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e15_600\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003eHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                brandName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Hot Ones\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                sauceName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;The Last Dab\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n                    More than simple mouth burn, Pepper X singes your soul. Starting with a pleasant burn in the mouth,\n                    the heat passes quickly, lulling you into a false confidence. You take another bite, enjoying the\n                    mustard and spice flavours. This would be great on jerk chicken, or Indian food! But then, WHAM!\n                    All of a sudden your skin goes cold and your stomach goes hot, and you realize the power of X.\n                    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrimIndentsAndRemoveNewlines\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;https://www.saucemania.com.au/hot-ones-the-last-dab-hot-sauce-148ml/\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                heat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e1_000_000\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003eHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                brandName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Torchbearer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                sauceName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Zombie Apocalypse\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n                    The Zombie Apocalypse Hot Sauce lives up to its name, combining Ghost Peppers and Habaneros with a\n                    mix of spices, vegetables, and vinegar to create a slow burning blow torch. Some people will feel\n                    the heat right away, but others can take a few minutes for the full impact to set in. The heat can\n                    last up to 20 minutes, creating a perfect match between very high heat and amazing flavor. Try it\n                    on all your favorite foods - wings, chili, soups, steak or even a sandwich in need of a major kick.\n                    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrimIndentsAndRemoveNewlines\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;https://heatonist.com/products/zombie-apocalypse\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                heat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e100_000\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003eHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                brandName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Heartbeat\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                sauceName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Pineapple Habanero\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n                    Pineapple Habanero is Heartbeat Hot Sauce’s most recent offering and their spiciest to date! They’ve\n                    yet again collaborated with an Ontario craft brewery, this time from their home town of Thunder Bay.\n                    Made with the help of Sleeping Giant Brewery’s award winning Beaver Duck session IPA, this sauce has\n                    a boldly pronounced fruitiness and a bright but savoury vibe from start to finish.\n                    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrimIndentsAndRemoveNewlines\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;https://www.saucemania.com.au/heartbeat-pineapple-habanero-hot-sauce-177ml/\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                heat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e12_200\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003eHotSauce\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                brandName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Karma Sauce\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                sauceName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Burn After Eating\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n                    Karma Sauce Burn After Eating Hot Sauce is imbued with a unique flavour thanks to green mango,\n                    ajwain and hing powder. Forged with a top-secret blend of super hots that may or may not include\n                    Bhut Jolokia (Ghost), Scorpion, Carolina Reaper, 7-Pot Brown and 7-Pot Primo. This isn’t a sauce you\n                    eat, it’s one you survive.\n                    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrimIndentsAndRemoveNewlines\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;https://www.saucemania.com.au/karma-sauce-burn-after-eating-hot-sauce-148ml/\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                heat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e669_000\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis class has a couple of annotations:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eDataLoader\u003c/code\u003e is annotated with \u003ccode\u003e@Component\u003c/code\u003e, which marks it so that Spring will autodetect the class when it’s needed. Since the code in this class references the application’s instance of \u003ccode\u003eHotSauceRepository\u003c/code\u003e, this class will be instantiated when an instance of \u003ccode\u003eHotSauceRepository\u003c/code\u003e is created.\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003e\u003cspan\u003eloadData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method is annotated with \u003ccode\u003e@PostConstruct\u003c/code\u003e, which specifies that it should be called as soon as the class has been initialized. This annotation is often used to populate databases when a Spring application is launched.\u003c/li\u003e\u003c/ul\u003e\u003ch4 id=\"Kotlin-Extensions\"\u003eKotlin Extensions\u003c/h4\u003e\u003cp\u003eThis class also makes use of a handy Kotlin feature: \u003cstrong\u003e\u003ca href=\"https://kotlinlang.org/docs/reference/extensions.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eExtensions\u003c/a\u003e\u003c/strong\u003e. These are properties or functions that can be added to classes to extend their capabilities without having to access their code.\u003c/p\u003e\u003cp\u003eAt the beginning of the class, you added an extension to the \u003ccode\u003eString\u003c/code\u003e class:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efun\u003c/span\u003e String\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrimIndentsAndRemoveNewlines\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrimIndent\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereplace\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis adds the method \u003ccode\u003e\u003cspan\u003etrimIndentsAndRemoveNewlines\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e to the \u003ccode\u003eString\u003c/code\u003e class, which removes indentations and newline characters from multiline strings. The assignments to each hot sauce’s \u003ccode\u003edescription\u003c/code\u003e property is done using multiline strings (which are delimited with triple-quotes — \u003ccode\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u0026#34;\u003c/code\u003e) to make the code easier to read.\u003c/p\u003e\u003ch4 id=\"What-s-With-the-Numbers-\"\u003eWhat’s With the Numbers?\u003c/h4\u003e\u003cp\u003eYou may have noticed that some of the numbers in the code contain underscore characters, such as on this line of code for the final sauce in the list:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eheat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e669_000\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eKotlin — like some other languages, including Python, Ruby, and Swift — ignores undescore characters in numbers. This allows you to use them the way we typically use “separator characters” to make numbers easier to read.\u003c/p\u003e\u003cp\u003eFor example, in the U.S., we tend to write the number for “one million” as \u003cstrong\u003e1,000,000\u003c/strong\u003e, which is easier to read than 1000000. In India, the preference is to write this number as \u003cstrong\u003e10,00,000\u003c/strong\u003e, and in some countries in Europe, it’s \u003cstrong\u003e1.000.000\u003c/strong\u003e. By allowing the underscore as the grouping character for numbers and ignoring it, Kotlin lets you group digits in numbers as you see fit.\u003c/p\u003e\u003ch2 id=\"Trying-Out-the-API\"\u003eTrying Out the API\u003c/h2\u003e\u003cp\u003eYou’re now ready to take the API for a trial run!\u003c/p\u003e\u003cp\u003e🌶 Run the application by opening a terminal if you’re on macOS of Linux or opening PowerShell if you’re on Windows), navigating to the the application’s directory, and entering the following command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e./gradlew bootRun\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis command was included in the set of files that Spring Initilizr generated. It sets Gradle in motion, causing it to download any needed plugins and dependencies, after which it launches the application.\u003c/p\u003e\u003cp\u003eWhen it starts, you’ll see a lot of status messages. Eventually, they’ll end with this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e :bootRun\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you don’t see an error message and the last line of the output is \u003ccode\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003ebootRun\u003c/code\u003e, it means that the project is running properly and listening to \u003cstrong\u003elocalhost:8080\u003c/strong\u003e for incoming requests. You can now start making API calls.\u003c/p\u003e\u003ch3 id=\"Is-this-thing-on-\"\u003eIs this thing on?\u003c/h3\u003e\u003cp\u003eOne of the dependencies that you included when setting up this project with Spring Initializr was Spring Boot Actuator. This automatically adds a number of endpoints to your application that let you monitor and interact with it.\u003c/p\u003e\u003cp\u003eLet’s use Actuator’s \u003ccode\u003ehealth\u003c/code\u003e endpoint to get client-side confirmation that your application is up and running.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on macOS or Linux,\u003c/strong\u003e enter this into Terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e \u003cspan\u003e\u0026#34;http://localhost:8080/actuator/health\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on Windows,\u003c/strong\u003e enter this into PowerShell:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eInvoke\u003cspan\u003e-\u003c/span\u003eRestMethod \u003cspan\u003e\u0026#34;http://localhost:8080/actuator/health\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003emacOS and Linux users should see this response...\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;UP\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e...while Windows users should see this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003estatus\n\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\n\u003cspan\u003eUP\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003ehealth\u003c/code\u003e endpoint is just one of of over 20 endpoints that a Spring Boot application provides when it includes the Actuator dependency. It’s indispensable for managing and monitoring apps during both development and production, as it provides logging, metrics, auditing, HTTP tracing, and process monitoring features, \u003ca href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eall of which are covered in the Spring documentation.\u003c/a\u003e\u003c/p\u003e\u003ch3 id=\"Count-hot-sauces\"\u003eCount hot sauces\u003c/h3\u003e\u003cp\u003eTo get the number of hot sauces in the database, send a GET request to the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003ehotsauces\u003cspan\u003e/\u003c/span\u003ecount\u003c/code\u003e endpoint.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on macOS or Linux,\u003c/strong\u003e enter this into Terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/count\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on Windows,\u003c/strong\u003e enter this into PowerShell:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eInvoke\u003cspan\u003e-\u003c/span\u003eRestMethod \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/count\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you haven’t added or removed any hot sauces since starting the application, the API should report that there are 9.\u003c/p\u003e\u003ch3 id=\"List-hot-sauces\"\u003eList hot sauces\u003c/h3\u003e\u003cp\u003eTo get the complete list of hot sauces, send a GET request to the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003ehotsauces\u003c/code\u003e endpoint.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on macOS or Linux,\u003c/strong\u003e enter this into Terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on Windows,\u003c/strong\u003e enter this into PowerShell:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eInvoke\u003cspan\u003e-\u003c/span\u003eRestMethod \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003emacOS and Linux users will be presented with a JSON array of dictionaries, with each dictionary representing a hot sauce. Windows users will see a nicely formatted list of hot sauces and their properties.\u003c/p\u003e\u003ch3 id=\"Filtering-hot-sauces-with-parameters\"\u003eFiltering hot sauces with parameters\u003c/h3\u003e\u003cp\u003eTry using the optional parameters to limit the results. In the example below, the \u003ccode\u003emaxheat\u003c/code\u003e parameter is being used to limit the response to only those hot sauces with a Scoville rating of 10,000 or less.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on macOS or Linux,\u003c/strong\u003e enter this into Terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces?maxheat=10000\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on Windows,\u003c/strong\u003e enter this into PowerShell:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eInvoke\u003cspan\u003e-\u003c/span\u003eRestMethod \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces?maxheat=10000\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you haven’t added or removed any hot sauces since starting the application, the API should return three hot sauces: Truff Hot Sauce, Truff Hotter Sauce, and Cholula.\u003c/p\u003e\u003ch3 id=\"Add-a-new-hot-sauce\"\u003eAdd a new hot sauce\u003c/h3\u003e\u003cp\u003eAdd a new sauce to the database by sending a POST request to \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003ehotsauces\u003cspan\u003e/\u003c/span\u003e\u003c/code\u003e, along with the attributes of the new sauce — except \u003ccode\u003eid\u003c/code\u003e, which will automatically be assigned to the new sauce. The attributes should be in JSON dictionary form.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on macOS or Linux,\u003c/strong\u003e enter this command into the terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e --request POST \u003cspan\u003e\\\u003c/span\u003e\n    --url http://localhost:8080/api/hotsauces/ \u003cspan\u003e\\\u003c/span\u003e\n    -H \u003cspan\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n    --data \u003cspan\u003e\u0026#39;{\u0026#34;brandName\u0026#34;: \u0026#34;Dave’s Gourmet\u0026#34;, \u0026#34;sauceName\u0026#34;: \u0026#34;Temporary Insanity\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;This sauce has all the flavor of Dave’s Original Insanity with less heat. Finally, there’s sauce for when you only want to get a little crazy in the kitchen. Add to stews, burgers, burritos, and pizza, or any food that needs an insane boost. As with all super hot sauces, this sauce is best enjoyed one drop at a time!\u0026#34;, \u0026#34;heat\u0026#34;: 57000}\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on Windows,\u003c/strong\u003e enter this command into PowerShell:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$body \u003cspan\u003e=\u003c/span\u003e @\u003cspan\u003e{\u003c/span\u003e\n    brandName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Dave\\\u0026#39;s Gourmet\u0026#34;\u003c/span\u003e\n    sauceName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Temporary Insanity\u0026#34;\u003c/span\u003e\n    url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE\u0026#34;\u003c/span\u003e\n    description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;This sauce has all the flavor of Dave\\\u0026#39;s Original Insanity with less heat. Finally, there\u0026#39;s sauce for when you only want to get a little crazy in the kitchen. Add to stews, burgers, burritos, and pizza, or any food that needs an insane boost. As with all super hot sauces, this sauce is best enjoyed one drop at a time!\u0026#34;\u003c/span\u003e\n    heat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e57000\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e ConvertTo\u003cspan\u003e-\u003c/span\u003eJson\nInvoke\u003cspan\u003e-\u003c/span\u003eRestMethod \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/\u0026#34;\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\n    -Method POST \u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e-\u003c/span\u003eContentType \u003cspan\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e `\n    \u003cspan\u003e-\u003c/span\u003eBody $body\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe hot sauce will be added to the database, and the API will respond with information about the newly added sauce.\u003c/p\u003e\u003cp\u003eYou can confirm that the hot sauce has been added to the database by requesting the complete list, or by requesting it by id.\u003c/p\u003e\u003ch3 id=\"Edit-a-hot-sauce\"\u003eEdit a hot sauce\u003c/h3\u003e\u003cp\u003eMake changes to a hot sauce in the database by sending a PUT request to \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003ehotsauces\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e where \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e is the hot sauce’s \u003ccode\u003eid\u003c/code\u003e value, along with the attributes you wish to change in JSON dictionary form.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on macOS or Linux,\u003c/strong\u003e enter this command into the terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e --request PUT \u003cspan\u003e\\\u003c/span\u003e\n    --url http://localhost:8080/api/hotsauces/10 \u003cspan\u003e\\\u003c/span\u003e\n    -H \u003cspan\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n    --data \u003cspan\u003e\u0026#39;{\u0026#34;brandName\u0026#34;: \u0026#34;NewCo\u0026#34;, \u0026#34;sauceName\u0026#34;: \u0026#34;Generic Hot Sauce\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;It’s hot. It’s sauce. That’s it.\u0026#34;, \u0026#34;heat\u0026#34;: 1000}\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on Windows,\u003c/strong\u003e enter this command into PowerShell:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$body \u003cspan\u003e=\u003c/span\u003e @\u003cspan\u003e{\u003c/span\u003e\n    brandName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;NewCo\u0026#34;\u003c/span\u003e\n    sauceName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Generic Hot Sauce\u0026#34;\u003c/span\u003e\n    url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE\u0026#34;\u003c/span\u003e\n    description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;It\u0026#39;s hot. It\u0026#39;s sauce. That\u0026#39;s it.\u0026#34;\u003c/span\u003e\n    heat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e1000\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e ConvertTo\u003cspan\u003e-\u003c/span\u003eJson\nInvoke\u003cspan\u003e-\u003c/span\u003eRestMethod \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/10\u0026#34;\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\n    -Method PUT \u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e-\u003c/span\u003eContentType \u003cspan\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e `\n    \u003cspan\u003e-\u003c/span\u003eBody $body\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe hot sauce will be updated with your changes and the API will respond with information showing the changes you made.\u003c/p\u003e\u003ch3 id=\"Delete-a-hot-sauce\"\u003eDelete a hot sauce\u003c/h3\u003e\u003cp\u003eDelete a hot sauce by sending a DELETE request to \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003ehotsauces\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e where \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003eid\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e is the hot sauce’s \u003ccode\u003eid\u003c/code\u003e value.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on macOS or Linux,\u003c/strong\u003e enter this command into Terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e --request DELETE \u003cspan\u003e\\\u003c/span\u003e\n    --url http://localhost:8080/api/hotsauces/10\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on Windows,\u003c/strong\u003e enter this command into PowerShell:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eInvoke-RestMethod \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/10\u0026#34;\u003c/span\u003e `\n    -Method DELETE\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can confirm that the hot sauce has been removed from the database by requesting the complete list (using \u003ccode\u003ecurl http\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003ehotsauces\u003cspan\u003e/\u003c/span\u003e\u003c/code\u003e) or a count of hot sauces (using \u003ccode\u003ecurl http\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003elocalhost\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e8080\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003ehotsauces\u003cspan\u003e/\u003c/span\u003ecount\u003c/code\u003e).\u003c/p\u003e\u003ch2 id=\"Securing-the-API\"\u003eSecuring the API\u003c/h2\u003e\u003cp\u003eRight now, the entire API is unsecured. All its endpoints are available to anyone with the URL and the ability to send HTTP requests.\u003c/p\u003e\u003cp\u003eSuppose that we want to allow only authorized applications to have access to the endpoints of the API that allow accessing, adding, editing, and deleting hot sauces. The remaining endpoints — the test endpoint and the one that reports the number of hot sauces — can remain generally available.\u003c/p\u003e\u003cp\u003eYou’ll use Auth0 to secure the API’s CRUD endpoints, but before that happens, let’s take a look at how API authentication works.\u003c/p\u003e\u003ch3 id=\"The-Nightclub-Metaphor\"\u003eThe Nightclub Metaphor\u003c/h3\u003e\u003cp\u003eThere’s no shortage of essays and articles on the internet that try to explain API authentication. Let’s make it a little more fun and easier to grasp way by using The Nightclub Metaphor!\u003c/p\u003e\u003cp\u003eA number of nightclubs have a two-step process to control who gets in and who doesn’t. First, there’s an initial phase where the club-goer goes to a window and shows some ID...\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6oCWbsxHYlaAJXpelHJOS1/6d7fd315a5bb60f932be7c765f198106/mclovin_drivers_license.png\" alt=\"A fake ID\"/\u003e\u003c/p\u003e\u003cp\u003e...and if the ID passes inspection, the club-goer is given something that’s easy to see in a nightclub environment. Often, it’s a wristband:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3antgKjLDw9hqJ93J97thU/7199be675a2da2164ab71fc4532831ad/wristbands.png\" alt=\"Club wristbands\"/\u003e\u003c/p\u003e\u003cp\u003eThe wristband is visible permission — an \u003cem\u003eaccess token\u003c/em\u003e — that the club-goer wearing it has been cleared to enter the club. In order to be let into the club, the club-goer has to show their wristband to the bouncers guarding the entrance.\u003c/p\u003e\u003cp\u003eThe better-run nightclubs change their wristbands every night. One night, it’ll be blue, and on the next night, it’ll be a different color. This prevents club-goers from reusing the previous night’s wristband to get in.\u003c/p\u003e\u003cp\u003eAPI security with Auth0 works in a similar way:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eShowing ID at the window:\u003c/strong\u003e You first assemble a set of credentials, which you submit to Auth0’s servers to obtain an access token.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eShowing your wristband to the bouncers:\u003c/strong\u003e When accessing an API endpoint that requires authorization, you include the access token as part of your request. The API communicates with Auth0 to validate the access token, and if it’s valid, provides the response to your request.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eChanging wristbands every night:\u003c/strong\u003e Like the wristbands at the better-run nightclubs, access tokens aren’t valid forever. By default, Auth0 access tokens expire 24 hours after they’re issued.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIt’s time to secure the API. This needs to be done both on the Auth0 side as well as in the application.\u003c/p\u003e\u003ch2 id=\"Setting-Up-API-Authentication-on-the-Auth0-Side\"\u003eSetting Up API Authentication on the Auth0 Side\u003c/h2\u003e\u003ch3 id=\"Registering-the-API\"\u003eRegistering the API\u003c/h3\u003e\u003cp\u003eThe first step in setting up API authentication is to register it.\u003c/p\u003e\u003cp\u003e🌶 Log into Auth0.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eIf you don’t have an Auth0 account yet, go ahead and \u003ca href=\"https://auth0.com/signup\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esign up for a free one.\u003c/a\u003e You’ll find it useful for prototyping logins and API security in your projects.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e🌶 Once you’ve logged in, \u003ca href=\"https://manage.auth0.com/?\u0026amp;_ga=2.55268258.821728906.1599742219-782382229.1597890849#/apis\" target=\"_blank\" rel=\"noreferrer noopener\"\u003enavigate to the \u003cem\u003eAPIs\u003c/em\u003e page\u003c/a\u003e...\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/48uwB1BEZbrHDz9zzeRWxO/4add50dd5a0b7317b991fd3fe1a413da/apis.png\" alt=\"Auth0 dashboard APIs page\"/\u003e\u003c/p\u003e\u003cp\u003e🌶 ...and click the \u003cstrong\u003eCreate API\u003c/strong\u003e button located near the upper right corner of the page. A form will appear, asking for basic information about the API:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4XmypcreWQ9C4HGTmKHkul/6dfbe34de3f0fd09464f3ae89440f533/new-api.png\" alt=\"New API pop-up form\"/\u003e\u003c/p\u003e\u003cp\u003e🌶 Fill it out like so:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cem\u003eName:\u003c/em\u003e Enter \u003cstrong\u003eHotSauces\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003e\u003cem\u003eIdentifier:\u003c/em\u003e Enter \u003cstrong\u003e\u003ca href=\"http://hotsauces.demo\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttp://hotsauces.demo\u003c/a\u003e\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003e\u003cem\u003eSigning Algorithm:\u003c/em\u003e Select \u003cstrong\u003eRS256\u003c/strong\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🌶 When you’re done providing this information, click the \u003cstrong\u003eCreate\u003c/strong\u003e button. The API will now be registered, which means that Auth0 can now be used to authorize access to it.\u003c/p\u003e\u003ch3 id=\"Getting-the-Credentials\"\u003eGetting the Credentials\u003c/h3\u003e\u003cp\u003eThe next step is to gather the necessary Auth0 credentials that will be needed to request an access token from Auth0 and to validate any access tokens.\u003c/p\u003e\u003cp\u003eImmediately after registering your API, you were taken to the API’s newly-created \u003cstrong\u003eQuick Start\u003c/strong\u003e page, pictured below:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6Wr7wbTVoKREeDqP2PPccC/6e06c065b4bd2edbfb203cebf64ce3d3/hotsauces-quick-start-page.png\" alt=\"Auth0 Quick Start page for the API\"/\u003e\u003c/p\u003e\u003cp\u003eThis is technically a machine-to-machine application, which means that the API you created (a machine) wouldn’t normally be accessed directly by a human, but by an application (another machine). You’ll need to gather the credentials from the Machine to Machine Applications section.\u003c/p\u003e\u003cp\u003e🌶 Click on \u003cstrong\u003eMachine to Machine Applications\u003c/strong\u003e, which will take you to this page:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6I4WwRBhedzzWiKaZL9Mry/b78eb788f07e9e3cf94a603fb45de80b/machine-to-machine.png\" alt=\"Auth0 Settings page\"/\u003e\u003c/p\u003e\u003cp\u003eThis is the first of two pages that provide information that you need in order to get the access token.\u003c/p\u003e\u003cp\u003e🌶 You’ll be copying four items, and you may find it helpful to open a text editor so that you have some place in which to paste them.\u003c/p\u003e\u003cp\u003e🌶 Copy the \u003cem\u003eAPI Identifier\u003c/em\u003e value, which is located just below the page’s headline...\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5dyz7Uq4McFi1wk8hiLdMI/7131755fbdc21bf2797f98d7b1c78d4f/machine-to-machine_identifier.png\" alt=\"Identifier\"/\u003e\u003c/p\u003e\u003cp\u003e🌶 ...and paste it into the text editor.\u003c/p\u003e\u003cp\u003eYour text editor should look something like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eAPI Identifier: \u003cspan\u003e{\u003c/span\u003eAPI Identifier\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you’ve been following the steps in this exercise, {API Identifier} will be \u003cstrong\u003e\u003ca href=\"http://hotsauces.demo\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttp://hotsauces.demo\u003c/a\u003e\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eThere will be a list of applications at the bottom of the page. One of them will be \u003cstrong\u003eHotSauces\u003c/strong\u003e. Click on its name. You’ll be taken to HotSauces’ \u003cstrong\u003eMachine to Machine → Settings\u003c/strong\u003e page, which contains information that you’ll need to get the token:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/41YnIqmEdUcsVSYSNtCqmO/82596c6774a38590976f59ff61c538db/machine-to-machine_settings.png\" alt=\"Auth0 Machine to Machine page\"/\u003e\u003c/p\u003e\u003cp\u003e🌶 Use the “copy” buttons on the right side of these fields to copy and paste their contents into the same text editor where you pasted the API Identifier:\u003c/p\u003e\u003cul\u003e\u003cli\u003eDomain\u003c/li\u003e\u003cli\u003eClient ID\u003c/li\u003e\u003cli\u003eClient Secret\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYour text editor should now look something like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eAPI Identifier: \u003cspan\u003e{\u003c/span\u003eAPI Identifier\u003cspan\u003e}\u003c/span\u003e\nDomain: \u003cspan\u003e{\u003c/span\u003eDomain\u003cspan\u003e}\u003c/span\u003e\nClient ID: \u003cspan\u003e{\u003c/span\u003eClient ID\u003cspan\u003e}\u003c/span\u003e\nClient Secret: \u003cspan\u003e{\u003c/span\u003eClient Secret\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou’ve done all the necessary setup on the Auth0 side. It’s now time to do the same on the application side.\u003c/p\u003e\u003ch2 id=\"Setting-Up-API-Authentication-on-the-Application-Side\"\u003eSetting Up API Authentication on the Application Side\u003c/h2\u003e\u003ch3 id=\"Adding-Security-Dependencies\"\u003eAdding Security Dependencies\u003c/h3\u003e\u003cp\u003eThe first step is to add the necessary security dependencies to the Gradle build file.\u003c/p\u003e\u003cp\u003e🌶 Update the \u003ccode\u003edependencies\u003c/code\u003e block in \u003cstrong\u003e/build.gradle.kts\u003c/strong\u003e so that it looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /build.gradle.kts (excerpt)\u003c/span\u003e\n\ndependencies \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eimplementation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;org.springframework.boot:spring-boot-starter-actuator\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eimplementation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;org.springframework.boot:spring-boot-starter-data-jpa\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eimplementation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;org.springframework.boot:spring-boot-starter-web\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eimplementation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;com.fasterxml.jackson.module:jackson-module-kotlin\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eimplementation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;org.jetbrains.kotlin:kotlin-reflect\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eimplementation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;org.jetbrains.kotlin:kotlin-stdlib-jdk8\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003edevelopmentOnly\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;org.springframework.boot:spring-boot-devtools\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eruntimeOnly\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;com.h2database:h2\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003etestImplementation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;org.springframework.boot:spring-boot-starter-test\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003eimplementation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;org.springframework.boot:spring-boot-starter-security\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eimplementation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;org.springframework.security:spring-security-oauth2-resource-server\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eimplementation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;org.springframework.security:spring-security-oauth2-jose\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eimplementation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;org.springframework.security:spring-security-config\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis adds four dependencies. Note that they all have “security” in their name and that two of them also include “oauth2”, a reference to the OAuth2 protocol that Auth0 uses for authorization.\u003c/p\u003e\u003cp\u003eThe first time you run the application after adding these lines to the Gradle build file, Gradle will download and install these dependencies.\u003c/p\u003e\u003ch3 id=\"Adding-a-Configuration-File\"\u003eAdding a Configuration File\u003c/h3\u003e\u003cp\u003eThe next step is to create a file that configures the application to use the correct API identifier and domain when authenticating with Auth0.\u003c/p\u003e\u003cp\u003e🌶 Create a new file named \u003cstrong\u003eapplication.yml\u003c/strong\u003e in the \u003cstrong\u003e/src/main/resources/\u003c/strong\u003e directory. It should contain the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# /src/main/resources/application.yml\u003c/span\u003e\n\n\u003cspan\u003eauth0\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003eaudience\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e Domain \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003espring\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003esecurity\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003eoauth2\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003eresourceserver\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ejwt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n          \u003cspan\u003eissuer-uri\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e https\u003cspan\u003e:\u003c/span\u003e//\u003cspan\u003e{\u003c/span\u003eAPI Identifier\u003cspan\u003e}\u003c/span\u003e/\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003eIndentation is important in this file: Don’t remove any indents, and use space characters to make the indents. \u003cstrong\u003eDo NOT use tab characters!\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e🌶 In the file shown above, replace \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eAPI\u003c/span\u003e Identifier\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003eDomain\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e with the values that you copied into your text editor. If you’ve been following the steps in this exercise, \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eAPI\u003c/span\u003e Identifier\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e will be \u003cstrong\u003e\u003ca href=\"http://hotsauces.demo\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttp://hotsauces.demo\u003c/a\u003e\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eThe \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eAPI\u003c/span\u003e Identifier\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e value will be used to tell Auth0 which API is asking for authentication, and the \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003eDomain\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e value allows Spring’s security to get the authorization server’s public keys and validate the access token.\u003c/p\u003e\u003ch3 id=\"Adding-Security-Classes\"\u003eAdding Security Classes\u003c/h3\u003e\u003cp\u003eThe final step in securing the API is adding a couple of security classes. These classes enable the application to make use of Auth0’s OAuth2 authorization.\u003c/p\u003e\u003cp\u003eSince these classes don’t directly have anything to do with the application’s main functionality, they’re often put into their own directory.\u003c/p\u003e\u003cp\u003e🌶 Create a new directory, \u003cstrong\u003esecurity\u003c/strong\u003e, as a subdirectory of \u003cstrong\u003e/src/main/kotlin/com/auth0/hotsauces/\u003c/strong\u003e. The project’s directory structure should now look like this:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/OmSevxxVhzfafimLdeArh/c3228767798e5f33e0866f34011d8c63/hotsauces-project-structure-2.png\" alt=\"Project structure, pointing out the security folder and application.yml\"/\u003e\u003c/p\u003e\u003cp\u003eThe first security class that you’ll add is an audience validator. It confirms that the access token is actually the one for the API.\u003c/p\u003e\u003cp\u003e🌶 Create a new file named \u003cstrong\u003eAudienceValidator.kt\u003c/strong\u003e in the \u003cstrong\u003e/src/main/kotlin/com/auth0/hotsauces/security/\u003c/strong\u003e directory:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /src/main/kotlin/com/auth0/hotsauces/security/AudienceValidator.kt\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003ehotsauces\u003cspan\u003e.\u003c/span\u003esecurity\n\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eoauth2\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003eOAuth2Error\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eoauth2\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003eOAuth2TokenValidator\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eoauth2\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003eOAuth2TokenValidatorResult\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eoauth2\u003cspan\u003e.\u003c/span\u003ejwt\u003cspan\u003e.\u003c/span\u003eJwt\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAudienceValidator\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e audience\u003cspan\u003e:\u003c/span\u003e String\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e OAuth2TokenValidator\u003cspan\u003e\u0026lt;\u003c/span\u003eJwt\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003evalidate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ejwt\u003cspan\u003e:\u003c/span\u003e Jwt\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e OAuth2TokenValidatorResult \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eval\u003c/span\u003e error \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eOAuth2Error\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;invalid_token\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;The required audience is missing\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ejwt\u003cspan\u003e.\u003c/span\u003eaudience\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eaudience\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            OAuth2TokenValidatorResult\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e OAuth2TokenValidatorResult\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eerror\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe second security class configures API security in two ways:\u003c/p\u003e\u003cul\u003e\u003cli\u003eIt validates the access token, and\u003c/li\u003e\u003cli\u003eIt specifies the levels of access you grant to the API endpoints.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e🌶 Create a new file named \u003cstrong\u003eSecurityConfig.kt\u003c/strong\u003e in the \u003cstrong\u003e/src/main/kotlin/com/auth0/hotsauces/security/\u003c/strong\u003e directory:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// /src/main/kotlin/com/auth0/hotsauces/security/SecurityConfig.kt\u003c/span\u003e\n\n\u003cspan\u003epackage\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003ehotsauces\u003cspan\u003e.\u003c/span\u003esecurity\n\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ebeans\u003cspan\u003e.\u003c/span\u003efactory\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003eValue\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003eBean\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003ebuilders\u003cspan\u003e.\u003c/span\u003eHttpSecurity\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003econfiguration\u003cspan\u003e.\u003c/span\u003eEnableWebSecurity\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003eweb\u003cspan\u003e.\u003c/span\u003econfiguration\u003cspan\u003e.\u003c/span\u003eWebSecurityConfigurerAdapter\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eoauth2\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003eDelegatingOAuth2TokenValidator\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eoauth2\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003eOAuth2TokenValidator\n\u003cspan\u003eimport\u003c/span\u003e org\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eoauth2\u003cspan\u003e.\u003c/span\u003ejwt\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\n\n\u003cspan\u003e@EnableWebSecurity\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e SecurityConfig \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eWebSecurityConfigurerAdapter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003e@Value\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\\\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003eaudience\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e audience\u003cspan\u003e:\u003c/span\u003e String \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003e@Value\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\\\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003espring\u003cspan\u003e.\u003c/span\u003esecurity\u003cspan\u003e.\u003c/span\u003eoauth2\u003cspan\u003e.\u003c/span\u003eresourceserver\u003cspan\u003e.\u003c/span\u003ejwt\u003cspan\u003e.\u003c/span\u003eissuer\u003cspan\u003e-\u003c/span\u003euri\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e issuer\u003cspan\u003e:\u003c/span\u003e String \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003e@Bean\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ejwtDecoder\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e JwtDecoder \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eval\u003c/span\u003e jwtDecoder \u003cspan\u003e=\u003c/span\u003e JwtDecoders\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efromOidcIssuerLocation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eissuer\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e NimbusJwtDecoder\n        \u003cspan\u003eval\u003c/span\u003e audienceValidator\u003cspan\u003e:\u003c/span\u003e OAuth2TokenValidator\u003cspan\u003e\u0026lt;\u003c/span\u003eJwt\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAudienceValidator\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eaudience\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eval\u003c/span\u003e withIssuer\u003cspan\u003e:\u003c/span\u003e OAuth2TokenValidator\u003cspan\u003e\u0026lt;\u003c/span\u003eJwt\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e JwtValidators\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateDefaultWithIssuer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eissuer\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eval\u003c/span\u003e withAudience\u003cspan\u003e:\u003c/span\u003e OAuth2TokenValidator\u003cspan\u003e\u0026lt;\u003c/span\u003eJwt\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eDelegatingOAuth2TokenValidator\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ewithIssuer\u003cspan\u003e,\u003c/span\u003e audienceValidator\u003cspan\u003e)\u003c/span\u003e\n        jwtDecoder\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetJwtValidator\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ewithAudience\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e jwtDecoder\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@Throws\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eException\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003econfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehttp\u003cspan\u003e:\u003c/span\u003e HttpSecurity\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        http\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthorizeRequests\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emvcMatchers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/hotsauces/count\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epermitAll\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emvcMatchers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/hotsauces\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthenticated\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emvcMatchers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/hotsauces/*\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthenticated\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eand\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eoauth2ResourceServer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejwt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTake a closer look at the \u003ccode\u003e\u003cspan\u003econfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method you just entered:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Throws\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eException\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003econfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehttp\u003cspan\u003e:\u003c/span\u003e HttpSecurity\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    http\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthorizeRequests\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emvcMatchers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/hotsauces/count\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epermitAll\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emvcMatchers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/hotsauces\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthenticated\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emvcMatchers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/hotsauces/*\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthenticated\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eand\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eoauth2ResourceServer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejwt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThese lines specify that the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003ehotsauces\u003cspan\u003e/\u003c/span\u003ecount\u003c/code\u003e endpoints will be accessible to everyone...\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emvcMatchers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/hotsauces/count\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epermitAll\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e...while these specify that the \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003ehotsauces\u003c/code\u003e endpoint and any other endpoint beginning with \u003ccode\u003e\u003cspan\u003e/\u003c/span\u003eapi\u003cspan\u003e/\u003c/span\u003ehotsauces\u003cspan\u003e/\u003c/span\u003e\u003c/code\u003e require authentication.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emvcMatchers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/hotsauces\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthenticated\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emvcMatchers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/hotsauces/*\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthenticated\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn other words, any request to these endpoints must include a valid access token in order to work. Otherwise, those requests will get an HTTP 401 — Unauthorized — response.\u003c/p\u003e\u003cp\u003eHere’s what the project’s final directory structure looks like:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4LJ2qRCHiTke0NprOsST7J/084c4abc7157d44c317b50158de1fef6/hotsauces-project-structure-3.png\" alt=\"Project file structure, showing the newly-added AudienceValidator and SecurityConfig files\"/\u003e\u003c/p\u003e\u003ch2 id=\"Trying-Out-the-Secured-API\"\u003eTrying Out the Secured API\u003c/h2\u003e\u003cp\u003eNow that you’ve secured the API, it’s time to try it out!\u003c/p\u003e\u003ch3 id=\"Acquiring-an-access-token\"\u003eAcquiring an access token\u003c/h3\u003e\u003cp\u003eYou now have the necessary pieces of information needed to request a token. You’ll request the token by sending a POST request containing the information.\u003c/p\u003e\u003cp\u003eYou might find it easier to assemble the POST request in the same text editor where you pasted the information.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on macOS or Linux,\u003c/strong\u003e start with this cURL command, replacing the \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003eDomain\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003eClient \u003cspan\u003eID\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003eClient Secret\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e, and \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eAPI\u003c/span\u003e Identifier\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e with the corresponding values you copied.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e --request POST \u003cspan\u003e\\\u003c/span\u003e\n    --url https://\u003cspan\u003e{\u003c/span\u003eDomain\u003cspan\u003e}\u003c/span\u003e/oauth/token \u003cspan\u003e\\\u003c/span\u003e\n    --header \u003cspan\u003e\u0026#39;content-type: application/json\u0026#39;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n    --data \u003cspan\u003e\u0026#39;{\n        \u0026#34;client_id\u0026#34;: \u0026#34;{Client ID}\u0026#34;,\n        \u0026#34;client_secret\u0026#34;: \u0026#34;{Client Secret}\u0026#34;,\n        \u0026#34;audience\u0026#34;: \u0026#34;{API Identifier}\u0026#34;,\n        \u0026#34;grant_type\u0026#34;: \u0026#34;client_credentials\u0026#34;\n    }\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on Windows,\u003c/strong\u003e use this command instead. As with the macOS/Linux version, replace the \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003eDomain\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003eClient \u003cspan\u003eID\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003eClient Secret\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e, and \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eAPI\u003c/span\u003e Identifier\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e with the corresponding values you copied.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e$Body\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e @\u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;client_id\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;{Client ID}\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;client_secret\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;{Client Secret}\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;audience\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;{API Identifier}\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;grant_type\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;client_credentials\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e$response\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e Invoke-RestMethod \u003cspan\u003e\u0026#34;https://{Domain}/oauth/token\u0026#34;\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\n    -Method POST \u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\n    -Body \u003cspan\u003e$Body\u003c/span\u003e\n\u003cspan\u003e$response\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e ConvertTo-Json\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn response, you should receive a JSON dictionary that looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;access_token\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;{Access Token (a 720-character string)}\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;expires_in\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e86400\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;token_type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Bearer\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote that one of the dictionary keys is \u003ccode\u003eexpires_in\u003c/code\u003e, which specifies that the token will expire in 86,400 seconds, or in more convenient units, 24 hours. After that time has elapsed, the token will be invalid and you’ll have to request a new one following the same steps above.\u003c/p\u003e\u003cp\u003eCopy the \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003eAccess token\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e value and paste it into the text editor with the other values.\u003c/p\u003e\u003cp\u003eYour text editor should now look something like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eAPI Identifier: \u003cspan\u003e{\u003c/span\u003eAPI Identifier\u003cspan\u003e}\u003c/span\u003e\nDomain: \u003cspan\u003e{\u003c/span\u003eDomain\u003cspan\u003e}\u003c/span\u003e\nClient ID: \u003cspan\u003e{\u003c/span\u003eClient ID\u003cspan\u003e}\u003c/span\u003e\nClient Secret: \u003cspan\u003e{\u003c/span\u003eClient Secret\u003cspan\u003e}\u003c/span\u003e\n\nAccess Token: \u003cspan\u003e{\u003c/span\u003eAccess Token\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"Trying-the-Public-Endpoints\"\u003eTrying the Public Endpoints\u003c/h3\u003e\u003cp\u003e🌶 Open a terminal or PowerShell window, navigate to the project directory, and enter \u003ccode\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003egradlew bootRun\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eStart with the endpoint that remained public: The one that returns the number of hot sauces in the database.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on macOS or Linux,\u003c/strong\u003e enter this command into Terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e -i http://localhost:8080/api/hotsauces/count\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003e\u003cspan\u003e-\u003c/span\u003ei\u003c/code\u003e option tells cURL to \u003ccode\u003ei\u003c/code\u003enclude the HTTP response headers in its output. By using it, you can see the HTTP status code for the API’s reponse.\u003c/p\u003e\u003cp\u003eThe response should still be the number of hot sauces. It will be preceded by the response header, which should look like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eHTTP/1.1 \u003cspan\u003e200\u003c/span\u003e\nX-Content-Type-Options: nosniff\nX-XSS-Protection: \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003emode\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003eblock\nCache-Control: no-cache, no-store, max-age\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e, must-revalidate\nPragma: no-cache\nExpires: \u003cspan\u003e0\u003c/span\u003e\nX-Frame-Options: DENY\nContent-Type: application/json\nTransfer-Encoding: chunked\nDate: \u003cspan\u003e{\u003c/span\u003eDate and \u003cspan\u003etime\u003c/span\u003e when the response was issued\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe status code is the number at the end of the header’s first line: \u003cstrong\u003e200\u003c/strong\u003e, or “OK”.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on Windows,\u003c/strong\u003e enter this command into PowerShell:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eInvoke\u003cspan\u003e-\u003c/span\u003eWebRequest \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/count\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou\u0026#39;re using PowerShell\u0026#39;s \u003ccode\u003eInvoke\u003cspan\u003e-\u003c/span\u003eWebRequest\u003c/code\u003e this time, which means that the response will look like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eStatusCode        \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e\nStatusDescription \u003cspan\u003e:\u003c/span\u003e\nContent           \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e9\u003c/span\u003e\nRawContent        \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eHTTP\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e1.1\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e\n                    Transfer\u003cspan\u003e-\u003c/span\u003eEncoding\u003cspan\u003e:\u003c/span\u003e chunked\n                    Keep\u003cspan\u003e-\u003c/span\u003eAlive\u003cspan\u003e:\u003c/span\u003e timeout\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e60\u003c/span\u003e\n                    Connection\u003cspan\u003e:\u003c/span\u003e keep\u003cspan\u003e-\u003c/span\u003ealive\n                    Content\u003cspan\u003e-\u003c/span\u003eType\u003cspan\u003e:\u003c/span\u003e application\u003cspan\u003e/\u003c/span\u003ejson\n                    Date\u003cspan\u003e:\u003c/span\u003e Fri\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e23\u003c/span\u003e Jul \u003cspan\u003e2021\u003c/span\u003e \u003cspan\u003e14\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e05\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e52\u003c/span\u003e \u003cspan\u003eGMT\u003c/span\u003e\n\n                    \u003cspan\u003e9\u003c/span\u003e\nForms             \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\nHeaders           \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003eTransfer\u003cspan\u003e-\u003c/span\u003eEncoding\u003cspan\u003e,\u003c/span\u003e chunked\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eKeep\u003cspan\u003e-\u003c/span\u003eAlive\u003cspan\u003e,\u003c/span\u003e timeout\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e60\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eConnection\u003cspan\u003e,\u003c/span\u003e keep\u003cspan\u003e-\u003c/span\u003ealive\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eContent\u003cspan\u003e-\u003c/span\u003eType\u003cspan\u003e,\u003c/span\u003e\n                    application\u003cspan\u003e/\u003c/span\u003ejson\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e...\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\nImages            \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\nInputFields       \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\nLinks             \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\nParsedHtml        \u003cspan\u003e:\u003c/span\u003e System\u003cspan\u003e.\u003c/span\u003e__ComObject\nRawContentLength  \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe number of sauces is the value in the \u003ccode\u003eContent\u003c/code\u003e line, and as with the macOS/Linux version, the status code is the number at the end of the header’s first line: \u003cstrong\u003e200\u003c/strong\u003e, or “OK”.\u003c/p\u003e\u003ch3 id=\"Trying-the-Protected-Endpoints\"\u003eTrying the Protected Endpoints\u003c/h3\u003e\u003cp\u003eIt’s time to try the endpoints that require authorization. Before using the token, try requesting a list of all the hot sauces without it.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on macOS or Linux,\u003c/strong\u003e enter this command into Terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e -i http://localhost:8080/api/hotsauces/\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eInstead of a JSON list of dictionaries of hot sauces, you’ll get an empty reply. The first line of the header should be your hint as to why:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eHTTP\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e1.1\u003c/span\u003e \u003cspan\u003e401\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on Windows,\u003c/strong\u003e enter this command into PowerShell:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eInvoke-WebRequest\u003c/span\u003e \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou\u0026#39;ll see this reply:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eInvoke\u003cspan\u003e-\u003c/span\u003eWebRequest \u003cspan\u003e:\u003c/span\u003e The remote server returned an error\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e401\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e Unauthorized\u003cspan\u003e.\u003c/span\u003e\nAt line\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e char\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\n\u003cspan\u003e+\u003c/span\u003e Invoke\u003cspan\u003e-\u003c/span\u003eWebRequest \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/\u0026#34;\u003c/span\u003e\n\u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\u003cspan\u003e~\u003c/span\u003e\n    \u003cspan\u003e+\u003c/span\u003e CategoryInfo          \u003cspan\u003e:\u003c/span\u003e InvalidOperation\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eSystem\u003cspan\u003e.\u003c/span\u003eNet\u003cspan\u003e.\u003c/span\u003eHttpWebRequest\u003cspan\u003e:\u003c/span\u003eHttpWebRequest\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eInvoke\u003cspan\u003e-\u003c/span\u003eWebRequest\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e WebExc\n   eption\n    \u003cspan\u003e+\u003c/span\u003e FullyQualifiedErrorId \u003cspan\u003e:\u003c/span\u003e WebCmdletWebResponseException\u003cspan\u003e,\u003c/span\u003eMicrosoft\u003cspan\u003e.\u003c/span\u003ePowerShell\u003cspan\u003e.\u003c/span\u003eCommands\u003cspan\u003e.\u003c/span\u003eInvokeWebRequestCommand\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003cstrong\u003e401\u003c/strong\u003e status code means “Unauthorized”. To refer back to the nightclub metaphor, you’re trying to get into the club without a wristband.\u003c/p\u003e\u003ch4 id=\"Getting-a-list-of-all-the-hot-sauces-from-the-secured-API\"\u003eGetting a list of all the hot sauces from the secured API\u003c/h4\u003e\u003cp\u003eMake the request again, this time including the access token.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on macOS or Linux,\u003c/strong\u003e enter this command into the terminal, making sure to replace \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003eAccess Token\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e with the value that you copied into your text editor:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e -i --request GET \u003cspan\u003e\\\u003c/span\u003e\n     --url http://localhost:8080/api/hotsauces/ \u003cspan\u003e\\\u003c/span\u003e\n     -H \u003cspan\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n     -H \u003cspan\u003e\u0026#34;authorization: Bearer {Access Token}\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on Windows,\u003c/strong\u003e enter this command into PowerShell, making sure to replace \u003ccode\u003e\u003cspan\u003e{\u003c/span\u003eAccess Token\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e with the value that you copied into your text editor:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$accessToken \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;{Access Token}\u0026#34;\u003c/span\u003e\n$headers \u003cspan\u003e=\u003c/span\u003e @\u003cspan\u003e{\u003c/span\u003e\n    Authorization \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Bearer $accessToken\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n$response \u003cspan\u003e=\u003c/span\u003e Invoke\u003cspan\u003e-\u003c/span\u003eRestMethod \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/\u0026#34;\u003c/span\u003e `\n    \u003cspan\u003e-\u003c/span\u003eHeaders $headers\n$response \u003cspan\u003e|\u003c/span\u003e ConvertTo\u003cspan\u003e-\u003c/span\u003eJson\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis time, when you make the request, you’ll get the list of all the hot sauces.\u003c/p\u003e\u003ch4 id=\"Adding-a-hot-sauce-using-the-secured-API\"\u003eAdding a hot sauce using the secured API\u003c/h4\u003e\u003cp\u003eTry adding add a hot sauce using the access token.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on macOS or Linux,\u003c/strong\u003e enter this command into the terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e -i --request POST \u003cspan\u003e\\\u003c/span\u003e\n    --url http://localhost:8080/api/hotsauces/ \u003cspan\u003e\\\u003c/span\u003e\n    -H \u003cspan\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n    --data \u003cspan\u003e\u0026#39;{\u0026#34;brandName\u0026#34;: \u0026#34;Dave’s Gourmet\u0026#34;, \u0026#34;sauceName\u0026#34;: \u0026#34;Temporary Insanity\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;This sauce has all the flavor of Dave’s Original Insanity with less heat. Finally, there’s sauce for when you only want to get a little crazy in the kitchen. Add to stews, burgers, burritos, and pizza, or any food that needs an insane boost. As with all super hot sauces, this sauce is best enjoyed one drop at a time!\u0026#34;, \u0026#34;heat\u0026#34;: 57000}\u0026#39;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n    -H \u003cspan\u003e\u0026#34;authorization: Bearer {Access Token}\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on Windows,\u003c/strong\u003e enter this command into PowerShell:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$body \u003cspan\u003e=\u003c/span\u003e @\u003cspan\u003e{\u003c/span\u003e\n    brandName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Dave\u0026#39;s Gourmet\u0026#34;\u003c/span\u003e\n    sauceName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Temporary Insanity\u0026#34;\u003c/span\u003e\n    url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE\u0026#34;\u003c/span\u003e\n    description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;This sauce has all the flavor of Dave\\\u0026#39;s Original Insanity with less heat. Finally, there\u0026#39;s sauce for when you only want to get a little crazy in the kitchen. Add to stews, burgers, burritos, and pizza, or any food that needs an insane boost. As with all super hot sauces, this sauce is best enjoyed one drop at a time!\u0026#34;\u003c/span\u003e\n    heat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e57000\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e ConvertTo\u003cspan\u003e-\u003c/span\u003eJson\n$response \u003cspan\u003e=\u003c/span\u003e Invoke\u003cspan\u003e-\u003c/span\u003eRestMethod \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/\u0026#34;\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\n    -Method POST \u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e-\u003c/span\u003eContentType \u003cspan\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\n    -Headers $headers \u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e-\u003c/span\u003eBody $body\n$response \u003cspan\u003e|\u003c/span\u003e ConvertTo\u003cspan\u003e-\u003c/span\u003eJson\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Editing-a-hot-sauce-using-the-secured-API\"\u003eEditing a hot sauce using the secured API\u003c/h4\u003e\u003cp\u003eTry editing the hot sauce with \u003ccode\u003eid\u003c/code\u003e 10.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on macOS or Linux,\u003c/strong\u003e enter this command into the terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e -i --request PUT \u003cspan\u003e\\\u003c/span\u003e\n    --url http://localhost:8080/api/hotsauces/10 \u003cspan\u003e\\\u003c/span\u003e\n    -H \u003cspan\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n    --data \u003cspan\u003e\u0026#39;{\u0026#34;brandName\u0026#34;: \u0026#34;NewCo\u0026#34;, \u0026#34;sauceName\u0026#34;: \u0026#34;Generic Hot Sauce\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;It’s hot. It’s sauce. That’s it.\u0026#34;, \u0026#34;heat\u0026#34;: 1000}\u0026#39;\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\n    -H \u003cspan\u003e\u0026#34;authorization: Bearer {Access Token}\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on Windows,\u003c/strong\u003e enter this command into PowerShell:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$body \u003cspan\u003e=\u003c/span\u003e @\u003cspan\u003e{\u003c/span\u003e\n    brandName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;NewCo\u0026#34;\u003c/span\u003e\n    sauceName \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;Generic Hot Sauce\u0026#34;\u003c/span\u003e\n    description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;It’s hot. It’s sauce. That’s it.\u0026#34;\u003c/span\u003e\n    heat \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e1000\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e ConvertTo\u003cspan\u003e-\u003c/span\u003eJson\n$response \u003cspan\u003e=\u003c/span\u003e Invoke\u003cspan\u003e-\u003c/span\u003eRestMethod \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/10\u0026#34;\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\n    -Method PUT \u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e-\u003c/span\u003eContentType \u003cspan\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e\n    -Headers $headers \u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e-\u003c/span\u003eBody $body\n$response \u003cspan\u003e|\u003c/span\u003e ConvertTo\u003cspan\u003e-\u003c/span\u003eJson\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote that since you didn’t change the \u003ccode\u003eurl\u003c/code\u003e property of the sauce, it remains the same.\u003c/p\u003e\u003ch4 id=\"Deleting-a-hot-sauce-using-the-secured-API\"\u003eDeleting a hot sauce using the secured API\u003c/h4\u003e\u003cp\u003eThen try deleting the hot sauce with \u003ccode\u003eid\u003c/code\u003e 10.\u003c/p\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on macOS or Linux,\u003c/strong\u003e enter this command into the terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecurl\u003c/span\u003e -i --request DELETE \u003cspan\u003e\\\u003c/span\u003e\n    --ur l http://localhost:8080/api/hotsauces/10\n    -H \u003cspan\u003e\u0026#34;authorization: Bearer {Access Token}\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🌶 \u003cstrong\u003eIf you’re on Windows,\u003c/strong\u003e enter this command into PowerShell:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eInvoke-RestMethod \u003cspan\u003e\u0026#34;http://localhost:8080/api/hotsauces/10\u0026#34;\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e`\u003c/span\u003e\n    -Method DELETE \u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\n    -Headers \u003cspan\u003e$headers\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eList the hot sauces or get a count to confirm that the sauce is no longer in the list.\u003c/p\u003e\u003cp\u003eIf you’ve made it this far, congratulations! You’ve just developed and secured an API with Spring Boot, Kotlin, and Auth0!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "See how easy it is to bootstrap a CRUD API with Spring Initializr, build it with Spring Boot and Kotlin, and secure it with Auth0.",
      "date_published": "2021-08-11T22:32:00Z",
      "author": {
        "name": "A closer look at the authorizations you just defined"
      }
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/strategy-design-pattern-in-python/",
      "title": "Strategy Design Pattern in Python",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eWhile you are developing software applications, you might run into some problems implementing the feature you need. Software design patterns are typical solutions for some of these commonly occurring problems while developing software applications using Object-oriented design. In this article, let\u0026#39;s learn about one of the popular design patterns, \u003cstrong\u003eStrategy\u003c/strong\u003e pattern, and its implementation in Python.\u003c/p\u003e\u003ch2 id=\"Introduction\"\u003eIntroduction\u003c/h2\u003e\u003cp\u003eBefore diving into the strategy pattern, you should be familiar with some of the basics concepts of \u003ca href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eObject-Oriented Programming\u003c/a\u003e (OOP). The entire concept of design patterns revolves around \u003cem\u003eclasses\u003c/em\u003e and \u003cem\u003eobjects\u003c/em\u003e. The design patterns are more high-level solutions for commonly occurring problems. They are like the blueprint to solve a specific problem. They are not confined to a single programming language. You can use design patterns in any programming language that supports object-oriented programming; the process will be the same while the syntax changes.\n\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4tPzU9nvm5jUwrXAeeHH3e/1badc171178aa953f7df05f08960f228/01_design-types.jpg\" alt=\"design patterns\"/\u003e\nThere are several types of design patterns, including \u003cstrong\u003eCreational\u003c/strong\u003e, \u003cstrong\u003eStructural\u003c/strong\u003e, and \u003cstrong\u003eBehavioral\u003c/strong\u003e patterns. Creational patterns are about different ways to create objects that increase the flexibility of our code. Structural patterns are about relations between the objects, making larger structures flexible using objects and classes. Behavioral patterns are about effective communications and interactions between objects.\u003c/p\u003e\u003ch2 id=\"Strategy\"\u003eStrategy\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eStrategy Pattern\u003c/strong\u003e is a design pattern that enables our application to select algorithms at runtime, making our application flexible. The original book on \u003ca href=\"https://en.wikipedia.org/wiki/Design_Patterns\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edesign patterns\u003c/a\u003e written by \u003ca href=\"http://wiki.c2.com/?GangOfFour\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGoF\u003c/a\u003e states that \u0026#34;Strategy pattern intends to define a family of algorithms, \u003ca href=\"https://auth0.com/blog/strategy-design-pattern-in-python/shorturl.at/rHJR7\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eencapsulates\u003c/a\u003e each one, and\nmake them interchangeable.\u0026#34; More specifically, it lets you define a set of algorithms that are interchangeable according to some factors at runtime. Strategy Pattern falls under the category of behavioral design patterns as it enables an algorithm\u0026#39;s behavior to be selected at runtime.\u003c/p\u003e\u003ch2 id=\"Usage\"\u003eUsage\u003c/h2\u003e\u003cp\u003eWhile developing software applications, you may have a few alternatives to accomplish something in your code. Depending on your client choices, data sources, or other factors, you want to do something different without changing the code. You often tend to define algorithms using conditional statements for different situations in the main class of the code. But it is not an elegant way of writing better code. It makes the main class of your code quite long, and it becomes too hard to maintain the application.\u003c/p\u003e\u003cp\u003eIn situations like these, the strategy pattern is an ideal solution. The strategy pattern suggests you define classes, called \u003cem\u003estrategies\u003c/em\u003e, for your algorithms of different situations. The strategy is referenced inside the main class, called \u003cem\u003econtext\u003c/em\u003e, and the code works according to that situation. The context does not select an appropriate strategy for the case. Instead, the client passes the desired strategy to the context.\u003c/p\u003e\u003cp\u003eFor example, if you have a chess application, you can select the difficulty level between easy, medium, or hard. The computer chooses an algorithm according to the level you choose. It is one of the best examples where the strategy pattern is used.\u003c/p\u003e\u003cp\u003eStrategy pattern follows the \u003ca href=\"https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOpen/close principle\u003c/a\u003e; a software application is open for extension but closed for modification. It means you can add any number of additional strategies without modifying the main class. It makes your code more flexible and easy to maintain.\u003c/p\u003e\u003ch2 id=\"UML-Diagrams\"\u003eUML Diagrams\u003c/h2\u003e\u003cp\u003eThe following is the UML diagram of the Strategy pattern.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/21fvYspoS3Voqv7pKyDE4E/e89c3e5f81d51b3d15a436cd81e795f7/02_UML-Strategy.jpg\" alt=\"UML Strategy\"/\u003e\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003cstrong\u003eContext\u003c/strong\u003e — It is the primary class of our application. It maintains a reference to one of the concrete strategies.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eStrategy\u003c/strong\u003e — Strategy interface is common to all supported strategies. Context can communicate with other strategies only through the strategy interface.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eConcreteStrategies\u003c/strong\u003e — These are the classes that implement the algorithm using the Strategy interface.\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"Implementation\"\u003eImplementation\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s see the step-by-step process of implementing a strategy pattern.\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eYou should first identify algorithms you want to execute as concrete strategies in the primary class.\u003c/li\u003e\u003cli\u003eDefine the \u003cem\u003econtext\u003c/em\u003e (primary class) and add a reference to the strategy, a method to set the strategy, and another method to execute the strategy. You may also define a default strategy to switch between strategies only if they do not like the default one.\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e## context - the primary class\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eContext\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    strategy\u003cspan\u003e:\u003c/span\u003e Strategy  \u003cspan\u003e## the strategy interface\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003esetStrategy\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e,\u003c/span\u003e strategy\u003cspan\u003e:\u003c/span\u003e Strategy \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e strategy \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003enot\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n            self\u003cspan\u003e.\u003c/span\u003estrategy \u003cspan\u003e=\u003c/span\u003e strategy\n        \u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n            self\u003cspan\u003e.\u003c/span\u003estrategy \u003cspan\u003e=\u003c/span\u003e Default\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eexecuteStrategy\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e.\u003c/span\u003estrategy\u003cspan\u003e.\u003c/span\u003eexecute\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFirst, we define the \u003ccode\u003estrategy\u003c/code\u003e field for storing a reference to a strategy object, and two methods, \u003ccode\u003esetStrategy\u003c/code\u003e and \u003ccode\u003eexecuteStrategy\u003c/code\u003e. The \u003ccode\u003esetStrategy\u003c/code\u003e sets the strategy selected if a user selects an option, or else the \u003ccode\u003e\u003cspan\u003edefault\u003c/span\u003e\u003c/code\u003e one.\u003c/p\u003e\u003col start=\"3\"\u003e\u003cli\u003eDefine the \u003cem\u003eStrategy Interface\u003c/em\u003e, which is common to all the concrete strategies. The \u003ccode\u003eStrategy\u003c/code\u003e interface has an abstract method that you can alter in concrete strategies.\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efrom\u003c/span\u003e abc \u003cspan\u003eimport\u003c/span\u003e ABC\u003cspan\u003e,\u003c/span\u003e abstractmethod\n\n\u003cspan\u003e## Strategy interface\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eStrategy\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eABC\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e@abstractmethod\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eexecute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003epass\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003col start=\"4\"\u003e\u003cli\u003eDefine the concrete strategies which should implement the \u003ccode\u003eStrategy\u003c/code\u003e interface. These concrete strategies must have a common method that overrides the \u003ccode\u003eexecute\u003c/code\u003e method of the \u003ccode\u003eStrategy\u003c/code\u003e interface.\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e## Concrete strategies\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eConcreteStrategyA\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eStrategy\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eexecute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#34;ConcreteStrategy A\u0026#34;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eConcreteStrategyB\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eStrategy\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eexecute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#34;ConcreteStrategy B\u0026#34;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eDefault\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eStrategy\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eexecute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#34;Default\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003col start=\"5\"\u003e\u003cli\u003eNow, users can select the strategy they want at the runtime. Create an object of \u003cem\u003econtext\u003c/em\u003e and pass a concrete strategy.\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e## Example application\u003c/span\u003e\nappA \u003cspan\u003e=\u003c/span\u003e Context\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\nappB \u003cspan\u003e=\u003c/span\u003e Context\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\nappC \u003cspan\u003e=\u003c/span\u003e Context\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e## selecting stratigies\u003c/span\u003e\nappA\u003cspan\u003e.\u003c/span\u003esetStrategy\u003cspan\u003e(\u003c/span\u003eConcreteStrategyA\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\nappB\u003cspan\u003e.\u003c/span\u003esetStrategy\u003cspan\u003e(\u003c/span\u003eConcreteStrategyB\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\nappC\u003cspan\u003e.\u003c/span\u003esetStrategy\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e    \u003cspan\u003e## sets to default strategy\u003c/span\u003e\n\n\u003cspan\u003e## each object below execute different strategy with same method\u003c/span\u003e\nappA\u003cspan\u003e.\u003c/span\u003eexecuteStrategy\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\nappB\u003cspan\u003e.\u003c/span\u003eexecuteStrategy\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\nappC\u003cspan\u003e.\u003c/span\u003eexecuteStrategy\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe output of the above code will be as follow:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eConcreteStrategy \u003cspan\u003eA\u003c/span\u003e\nConcreteStrategy \u003cspan\u003eB\u003c/span\u003e\nDefault\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you want to use another strategy, replace the ConcreteStrategy instance with the strategy you want. You can add a new concrete strategy without changing anything in the context.\u003c/p\u003e\u003ch2 id=\"Example\"\u003eExample\u003c/h2\u003e\u003cp\u003eLet\u0026#39;s design a \u003ca href=\"https://en.wikipedia.org/wiki/Rock_paper_scissors\" target=\"_blank\" rel=\"noreferrer noopener\"\u003erock paper scissors\u003c/a\u003e game using strategy pattern. You can select any strategy among rock, paper, scissors, and random to play against the computer. The below example code uses the strategy pattern to implement various strategies.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e## Changing the strategy among Rock, Paper, Scissors, and Random\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e random\n\u003cspan\u003efrom\u003c/span\u003e abc \u003cspan\u003eimport\u003c/span\u003e ABC\u003cspan\u003e,\u003c/span\u003e abstractmethod\n\n\u003cspan\u003e## Strategy interface \u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eStrategy\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eABC\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e@abstractmethod\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eselection\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003epass\u003c/span\u003e\n\n\u003cspan\u003e## Concrete strategies\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eRock\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eStrategy\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e## actual application will have the algorithm instead this method\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eselection\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#34;Rock\u0026#34;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003ePaper\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eStrategy\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eselection\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#34;Paper\u0026#34;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eScissors\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eStrategy\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eselection\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#34;Scissors\u0026#34;\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eRandom\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eStrategy\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eselection\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        options \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;Rock\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;Paper\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;Scissors\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e random\u003cspan\u003e.\u003c/span\u003echoice\u003cspan\u003e(\u003c/span\u003eoptions\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e## Context class\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eGame\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    strategy\u003cspan\u003e:\u003c/span\u003e Strategy\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003e__init__\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e,\u003c/span\u003e strategy\u003cspan\u003e:\u003c/span\u003e Strategy \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e strategy \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003enot\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n            self\u003cspan\u003e.\u003c/span\u003estrategy \u003cspan\u003e=\u003c/span\u003e strategy\n        \u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n            self\u003cspan\u003e.\u003c/span\u003estrategy \u003cspan\u003e=\u003c/span\u003e Random\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eplay\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eself\u003cspan\u003e,\u003c/span\u003e sec\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eNone\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        s1 \u003cspan\u003e=\u003c/span\u003e self\u003cspan\u003e.\u003c/span\u003estrategy\u003cspan\u003e.\u003c/span\u003eselection\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        s2 \u003cspan\u003e=\u003c/span\u003e sec\u003cspan\u003e.\u003c/span\u003estrategy\u003cspan\u003e.\u003c/span\u003eselection\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e s1 \u003cspan\u003e==\u003c/span\u003e s2\u003cspan\u003e:\u003c/span\u003e\n            \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;It\u0026#39;s a tie\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eelif\u003c/span\u003e s1 \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#34;Rock\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n            \u003cspan\u003eif\u003c/span\u003e s2 \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#34;Scissors\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n                \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Player 1 wins!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n                \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Player 2 wins!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eelif\u003c/span\u003e s1 \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#34;Scissors\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n            \u003cspan\u003eif\u003c/span\u003e s2 \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#34;Paper\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n                \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Player 1 wins!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n                \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Player 2 wins!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eelif\u003c/span\u003e s1 \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#34;Paper\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n            \u003cspan\u003eif\u003c/span\u003e s2 \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e\u0026#34;Rock\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n                \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Player 1 wins!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n                \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Player 2 wins!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e## Example application\u003c/span\u003e\n\u003cspan\u003e## PLayer 1 can select his strategy\u003c/span\u003e\nplayer1 \u003cspan\u003e=\u003c/span\u003e Game\u003cspan\u003e(\u003c/span\u003ePaper\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e# Player 2 gets to select\u003c/span\u003e\nplayer2 \u003cspan\u003e=\u003c/span\u003e Game\u003cspan\u003e(\u003c/span\u003eRock\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e# After the second player choice, we call the play method\u003c/span\u003e\nplayer1\u003cspan\u003e.\u003c/span\u003eplay\u003cspan\u003e(\u003c/span\u003eplayer2\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAccording to the strategies chosen by the two players, the expected output would be:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ePlayer \u003cspan\u003e1\u003c/span\u003e wins\u003cspan\u003e!\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTest all the other cases of the game using all the other strategies. To add extra fun to the game, try creating two more strategies to the above example according to \u003ca href=\"https://bigbangtheory.fandom.com/wiki/Rock,_Paper,_Scissors,_Lizard,_Spock\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe Lizard-Spock expansion\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eIn this article, you have seen where and how to use the strategy pattern in your code. You can build flexible and maintainable software applications using the strategy pattern. You can switch between algorithms at runtime according to the user\u0026#39;s decision without changing the code. But if your code only has a couple of algorithms, there is no need to use strategy. It just makes your code look complex with numerous classes and objects. The Strategy pattern can work as an alternative for conditional statements for selecting the behavior of the application. But the potential drawback of strategy pattern is that the users must know how strategies differ from each other to select what they need. So it would be best if you use the strategy pattern only when the variation in behavior of the application is relevant to the users. So try to make your software applications flexible using the strategy pattern.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn strategy design pattern to write better code in Python",
      "date_published": "2021-08-10T14:58:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/developerday-helps-developers-build-the-future-of-identity/",
      "title": "Developer Day Helps Developers Build the Future of Identity",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eYou’ve probably heard by now that \u003ca href=\"https://auth0.com/blog/developers-explore-okta-auth0/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOkta and Auth0 have joined forces\u003c/a\u003e. As a developer advocate for Auth0, I’m really excited to see how we can combine our forces to make identity even better for the developer community.\u003c/p\u003e\u003cp\u003eYou might not be aware that I’m a huge fan of creating events that directly address the needs of developer communities. From the first conference I ran in 2004 to the user group meetings that are still going to this day, you can imagine my excitement when I heard we (Auth0 and Okta) were going to run an online event together!\u003c/p\u003e\u003cp\u003eThis time, members of my team are taking the lead, so I\u0026#39;ll be in the same boat as many of you experiencing Developer Day as it happens, so I thought it might be helpful to share my thoughts on the event and what I’m looking forward to the most.\u003c/p\u003e\u003cp\u003eHit up the \u003ca href=\"http://community.auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecommunity forum\u003c/a\u003e if I miss something that’s important to you — there’s so much for everyone, I’m sure you’ll help others out too.\u003c/p\u003e\u003ch2 id=\"What-Is-Developer-Day-\"\u003eWhat Is Developer Day?\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://www.okta.com/developerday/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDeveloper Day\u003c/a\u003e creates a space for all developers to discover how the identity space is evolving, learn best practices in privacy and security, and gain insights from developer experiences. It brings speakers from across these sectors right to your desktop, and best of all — it’s free!\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eSpeaking of free, did you know you can also \u003ca href=\"https://auth0.com/signup\" data-amp-replace=\"CLIENT_ID\" data-amp-addparams=\"anonId=CLIENT_ID(cid-scope-cookie-fallback-name)\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esign up for a free Auth0 account\u003c/a\u003e at any time? Why not try it out today?\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/12g1Ga4gP8X04Xn0H0nnFt/5b4ae4b06847a028d9a784a46ec48b26/cassidy-alyssa-kapehe.png\" alt=\"Developer Day speakers Cassidy Williams, Alyssa Miller, and Kapehe\"/\u003e\u003c/p\u003e\u003cp\u003eMore specifically, it’s a one-day, single-track, virtual event, and while I’m proud to see some of my colleagues’ names in the speaker list, the lineup also features the likes of \u003cstrong\u003eCassidy Williams\u003c/strong\u003e (Director of Developer Experience at Netlify), \u003cstrong\u003eAlyssa Miller\u003c/strong\u003e (Hacker, Researcher, and Security Advocate), and \u003cstrong\u003eKapehe\u003c/strong\u003e (Developer Relations at Sanity.io, and yes, you might remember she used to \u003ca href=\"https://auth0.com/blog/authors/kapehe-jorgenson/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ework at Auth0\u003c/a\u003e too).\u003c/p\u003e\u003ch2 id=\"What-Can-I-Learn-\"\u003eWhat Can I Learn?\u003c/h2\u003e\u003cp\u003eThe first place I tend to go when looking at an event is the agenda, and skimming over this one, we’re in for a breadth and depth of information.\u003c/p\u003e\u003cp\u003eThe keynote is where the day’s journey starts, and Alyssa’s \u003cstrong\u003eupdates from the world of cyber security\u003c/strong\u003e are sure to offer a great insight that sets the foundation for the day. I’m a huge advocate for helping all developers understand security principles and states of play. Even if you never have to deal with part of it yourself, you’ll always benefit from knowing why something is done and how you’re being protected.\u003c/p\u003e\u003ch2 id=\"From-APIs-to-IoT--Live-Demos-and-Security-Fundamentals\"\u003eFrom APIs to IoT: Live Demos and Security Fundamentals\u003c/h2\u003e\u003cp\u003eFrom there, we meander down a path from securing Python APIs to securing your Home Automation and IoT devices. Personally, I’m a sucker for anything IoT-related, so I’ll be paying attention to this one.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/hd4kE3aQJFlX45nvwu3xF/6496580a2a7c7da50a6591f781035097/aaron-vittorio.png\" alt=\"Developer Day speakers Aaron Parecki and Vittorio Bertocci\"/\u003e\u003c/p\u003e\u003cp\u003eHaving grown up on YouTube videos (okay, I’m not that young...) about identity from both Aaron Parecki (or as I like to call him, Mr OAuth, but don’t tell him I told you) and Vittorio Bertocci (the man whose identity knowledge is dwarfed only by his magnificent hair), what better than a talk from both of them? The talk will not only cover where we’ve come from, but what the future of OAuth has in store for us.\u003c/p\u003e\u003ch2 id=\"Advanced-Topics-like-Verifiable-Credentials-and-Integration-with-Third-Parties\"\u003eAdvanced Topics like Verifiable Credentials and Integration with Third Parties\u003c/h2\u003e\u003cp\u003eBut identity isn’t just about logging in and loading your glamour shot from Gravatar. I just recently learned about verifiable credentials, and wow - it’s such a powerful concept with so many use cases, I just can’t even! The topic deserves its own article, but one example is around payments, and Uchi Uchibeke’s talk is going to be fascinating, to be sure.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/71FxWB7JqseFrDM9mF63Go/bd98bfcda1f9662b1c7de0bfab486599/uchi.png\" alt=\"Developer Day speaker Uchi Uchibeke\"/\u003e\u003c/p\u003e\u003cp\u003eUchi is flanked by demos on integrating Auth0 with NextJS for securing your webapps and Okta with Kong for securing continuous integration, delivery, and deployment. I think this highlights that the team who worked on the agenda really put a lot of thought into the balance between talks that can have immediate benefit to us developers, as well as enough advanced topics to keep our creative juices flowing.\u003c/p\u003e\u003cp\u003eTalking of immediately applicable information, if you want to learn how to validate REST API authentication and authorization, the JFrog talk is for you.\u003c/p\u003e\u003ch2 id=\"Authentication-in-Gaming-and-Extended-Realities\"\u003eAuthentication in Gaming and Extended Realities\u003c/h2\u003e\u003cp\u003eIf you thought the IoT talk was a bit out of the box, the Gaming and XR talk might just be in a whole other room! Not literally. I mean — it’s a virtual event. There aren’t any rooms. There aren’t any boxes either, for that matter. I digress.\u003c/p\u003e\u003cp\u003eI won’t admit to being a huge gamer. I load up Poly Bridge 2 every now and then. Does Minesweeper count? One thing I do know, though, is that the authentication experience in games can be awful, and when you get into any extended reality (XR), well. Let’s not go there.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2REEADn8ARvYmok2WNAt5O/9185928ac397dced701f3cb2d252e4b9/nick.png\" alt=\"Developer Day speaker Nick Gamb\"/\u003e\u003c/p\u003e\u003cp\u003eWe’ll let Okta\u0026#39;s Nick Gamb go there instead, as he tells us about the propensity for this industry to be targeted by hackers. Follow his advice, and maybe we can all keep playing in the knowledge that our Minedimes are safe. (See — I told you I’m not a huge gamer.)\u003c/p\u003e\u003ch2 id=\"Adding-Pixie-Dust-to-Enhance-Security\"\u003eAdding Pixie Dust to Enhance Security\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2tBAGZHtBlb4Dt1P21WzAS/2cd4c6438265b64c39bb39b89e6945b9/milecia.png\" alt=\"Developer Day speaker Milecia McGregor\"/\u003e\u003c/p\u003e\u003cp\u003eWith two talks left for the day, I’m personally keen to catch Milecia McGregor from Mediavine talk about pixies! Stop it, autocorrect. PKCE! While most SDKs magically hide away much of the implementation, it’s still worth understanding how authentication flows work and how they can be improved. The most common OAuth flow is debatably the Authcode flow, but PKCE makes it even better! Come along to find out how. I’ll be at the front taking notes.\u003c/p\u003e\u003ch2 id=\"Closing-Keynote\"\u003eClosing Keynote\u003c/h2\u003e\u003cp\u003eIt’s a packed event — thank goodness there are a couple of breaks during the day — and we finish with a closing keynote from Cassidy Williams. The agenda teases us with the mere existence of this session, and perhaps we’ll find out more before the event. In any case, I’ll not be missing it.\u003c/p\u003e\u003cp\u003eTell us in the \u003ca href=\"http://community.auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecommunity forum\u003c/a\u003e what you’re looking forward to the most, and I hope to see some of you in the chat room on the day!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "What is Developer Day? Developer Advocate, Ben Dechrai, explores the lineup and shares his thoughts from a delegate's perspective.",
      "date_published": "2021-08-09T16:30:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/here-s-something-new-for-you-identity-os/",
      "title": "Here’s Something New for You: Identity OS",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eAuthentication has become so much more than just a login box.\u003c/p\u003e\u003cp\u003eSure, that’s still what consumers see when they are eagerly clicking towards whatever pizza, handbag, or Playstation pre-sale link they want to get to ASAP.\u003c/p\u003e\u003cp\u003eBut it’s the expectation around what is happening when they click that has increased. Consumers demand the convenience of a seamless login but also want to know that their card details are secure and that their identity is protected against any breaches of privacy.\u003c/p\u003e\u003cp\u003eIn the past, it was about trade-offs. But consumers don’t expect trade-offs, so that’s why we wanted to develop an identity operating system that lets everyone —  from IT teams to devs — build authentication that works now and with whatever the future throws at it.\u003c/p\u003e\u003cp\u003eOkay, So That’s Why We Need a New Way, but...\u003c/p\u003e\u003ch2 id=\"What-Is-an-Identity-OS-\"\u003eWhat Is an Identity OS?\u003c/h2\u003e\u003cp\u003eThe Auth0 identity operating system (identity OS) is a cloud-native, adaptable platform for development teams. Built with extensible building blocks, the Auth0 identity OS enables organizations to manage the complexities of today’s identity management while also prioritizing the security, privacy, and convenience of their end-users. \u003c/p\u003e\u003cp\u003eStriking the perfect balance among these priorities requires identity to integrate a myriad of different services and creates a significant integration hurdle. Identity ecosystem operators can now manage these complex integration needs with the flexibility of full-spectrum code (pro-code, low-code, and no code solutions). \u003c/p\u003e\u003cp\u003eCustomizing to the requirements of different development teams removes their need to focus on identity infrastructure when building differentiated applications. This level of adaptability is a huge benefit for enterprises that are confronted with converging use cases and managing the eroding lines between identity for employees, business partners, and consumers.\u003c/p\u003e\u003cp\u003eSounds good, but...\u003c/p\u003e\u003ch2 id=\"What-s-the-Three-Benefits-I-Should-Really-Care-About-\"\u003eWhat’s the Three Benefits I Should Really Care About?\u003c/h2\u003e\u003ch3 id=\"1--It-s-all-about-adaptability\"\u003e1. It’s all about adaptability\u003c/h3\u003e\u003cp\u003eIf anyone reading this has never had to change their product roadmap quickly, then you are one of the lucky ones. With the explosion of consumer-friendly services made possible through digital applications, consumer expectations are constantly changing. That beautiful Netflix UX is what they expect from everything (even public sector services these days are stepping their game up). So the Auth0 identity OS is built to be as adaptable as your business needs to be, without forcing you into clunky legacy features that you will take years to strip out.\u003c/p\u003e\u003ch3 id=\"2--We-re-living-in-a-modular-world\"\u003e2. We’re living in a modular world\u003c/h3\u003e\u003cp\u003eThe best technology is the most open. There are so many amazing integrations and APIs being made by devs, so the Auth0 identity OS provides modular identity building blocks with integrations and industry blueprints.\u003c/p\u003e\u003ch3 id=\"3--Breadth-rather-than-tiny-boxes\"\u003e3. Breadth rather than tiny boxes\u003c/h3\u003e\u003cp\u003eIdentity is converging, and the lines between “use cases” are collapsing. When we talk about use cases, we mean allowing employees secure access to files and apps through Single Sign On (SSO); or allowing a subscriber of a media service access via their social accounts.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eThe Auth0 identity OS provides support for the full breadth of identity needs. \u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eTraditionally the identity industry has created single-purpose products for Workforce Identity, Business Identity, and Consumer Identity. But the company needs rarely fit into simple, separated boxes. The lines between identity use cases are eroding because rarely does a company only require one type. \u003c/p\u003e\u003ch2 id=\"Anything-Else-I-Should-Know-\"\u003eAnything Else I Should Know?\u003c/h2\u003e\u003cp\u003eIf you’ve made it this far, then you seem like the kind of person who would appreciate some of the more technical, finer points.\u003c/p\u003e\u003cp\u003eHere’s what the Auth0 identity OS offers:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eA customizable cut-of-the-box login experience\u003c/strong\u003e — Universal Login is our first huge benefit to developers. It’s an embeddable client experience that requires zero custom code to set up while allowing developers to quickly add capabilities to it, including social login and multi-factor authentication (MFA), without making any changes to your app’s code.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eUser management built-in\u003c/strong\u003e — Auth0 gives you a secure and intuitive way of managing your user identities, including password resets, creating, blocking, and deleting users via the Users Dashboard or via the Auth0 API.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eControl \u0026amp; customization\u003c/strong\u003e — Extend with code: All applications and scenarios are different. Auth0’s Actions extend the functionality of Auth0’s base product to adapt it to your company needs and integrate it with other applications and services.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eCalling APIs and external resources\u003c/strong\u003e — Once your user authenticates, Auth0 will generate an ID Token and an Access Token that will be passed back to your application. The Access Token can then be used to call your API and/or any external resource.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"And-That-s-It--Now-It-s-up-to-You-to-Build-Something-Awesome\"\u003eAnd That’s It, Now It’s up to You to Build Something Awesome\u003c/h2\u003e\u003cp\u003eThe Auth0 identity OS is here to give you the tools to build more convenient, secure, and private authentication experiences for your customers and employees. \u003c/p\u003e\u003cp\u003eRead more at \u003ca href=\"https://auth0.com/identity-os\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://auth0.com/identity-os\u003c/a\u003e \u003c/p\u003e\u003cp\u003eOr get in touch today to let us know what you think.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Introducing the new way to think about and build identity",
      "date_published": "2021-08-09T14:54:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/deployment-strategies-in-kubernetes/",
      "title": "Deployment Strategies In Kubernetes",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eTL;DR:\u003c/strong\u003e In this article, we will learn what are the deployment strategies while deploying containers using Kubernetes container-orchestration system. At the end of this article, we will have learned how to do deployment using different ways in Kubernetes cluster. If you find this topic interesting, keep reading! \nThe code for this tutorial is available here on \u003ca href=\"https://github.com/akhil90s/auth0/tree/main/Deployment%20Strategies%20In%20Kubernetes/Declarative%20Templates\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGithub\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"Quick-Introduction-to-Kubernetes\"\u003eQuick Introduction to Kubernetes\u003c/h2\u003e\u003cp\u003eWith containerization gaining popularity over time and revolutionizing the process of building, shipping, and maintaining applications, there was a need to effectively manage these containers. Many container orchestration tools were introduced to manage the lifecycle of these containers in large-scale systems.\u003c/p\u003e\u003cp\u003eKubernetes is one such orchestration tool that takes care of provisioning and deployment, allocation of resources, load balancing, service discovery, providing high availability, and other important aspects of any system. With this platform, we can decompose our applications into smaller systems (called microservices) while developing; then, we can compose (or orchestrate) these systems together while deploying. \u003c/p\u003e\u003cp\u003eThe adoption of cloud-native approach has increased development of applications based on microservice architecture. For such applications, one of the biggest challenges organizations face is deployment. Having a proper strategy in terms of deployment is necessary. In Kubernetes, there are different ways to release an application; it is necessary to choose the right strategy to make your infrastructure reliable during an application deployment or update. For instance, in a production environment, it is always required to ensure that end-user shouldn\u0026#39;t experience any downtime. In Kubernetes orchestration, right strategy ensures proper management of different versions of container images. To sum up, this article will mainly be around the different deployment strategies in Kubernetes.\u003c/p\u003e\u003ch2 id=\"Prerequisites\"\u003ePrerequisites\u003c/h2\u003e\u003cp\u003eTo follow along with this article, we will need some previous experience with Kubernetes. If new to this platform, kindly check out the \u003ca href=\"https://auth0.com/blog/kubernetes-tutorial-step-by-step-introduction-to-basic-concepts/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eStep by Step Introduction to Basic Kubernetes Concepts\u003c/a\u003e tutorial. There, you can learn everything you need to follow the instructions here. We would also recommend going through the \u003ca href=\"https://kubernetes.io/docs/home/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eKubernetes documentation\u003c/a\u003e if and when required.\u003c/p\u003e\u003cp\u003eBesides that, we will need kubectl, a Command-Line Interface (CLI) tool that will enable us to control your cluster from a terminal. If you don\u0026#39;t have this tool, check the instructions on the \u003ca href=\"https://auth0.com/blog/kubernetes-tutorial-step-by-step-introduction-to-basic-concepts/#Installing.Kube.Control..kubectl.\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eInstalling Kube Control (kubectl)\u003c/a\u003e.We will also need a basic understanding of Linux and YAML.\u003c/p\u003e\u003ch2 id=\"What-Is-A-Deployment-In-Kubernetes-\"\u003eWhat Is A Deployment In Kubernetes?\u003c/h2\u003e\u003cp\u003eA Deployment is a resource object in Kubernetes that defines the desired state for our program. Deployments are declarative, meaning that we don\u0026#39;t dictate how to achieve the state. Instead, we declare the desired state and allow the Deployment-controller to automatically reach that end goal in the most efficient way. A deployment allows us to describe an application\u0026#39;s life cycle, such as which images to use for the app, the number of pods there should be, and the way in which they should be updated.\u003c/p\u003e\u003ch2 id=\"Benefits-Of-Using-Kubernetes-Deployment\"\u003eBenefits Of Using Kubernetes Deployment\u003c/h2\u003e\u003cp\u003eThe process of manually updating containerized applications can be time consuming and tedious. A Kubernetes deployment makes this process automated and repeatable. Deployments are entirely managed by the Kubernetes backend, and the whole update process is performed on the server side without client interaction.\u003c/p\u003e\u003cp\u003eMoreover, the Kubernetes deployment controller is always monitoring the health of pods and nodes. It replaces a failed pod or bypass down nodes, ensuring continuity of critical applications.\u003c/p\u003e\u003ch2 id=\"Deployment-Strategies\"\u003eDeployment Strategies\u003c/h2\u003e\u003ch3 id=\"Rolling-Update-Deployment\"\u003eRolling Update Deployment\u003c/h3\u003e\u003cp\u003eThe rolling deployment is the default deployment strategy in Kubernetes. It replaces pods, one by one, of the previous version of our application with pods of the new version without any cluster downtime. A rolling deployment slowly replaces instances of the previous version of an application with instances of the new version of the application.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/LxDl5amQZC2znii0JLZuw/87f42c35b5ba35ac1550f572d23ba943/01_rolling-deployment.jpg\" alt=\"Alt text\"/\u003e\u003c/p\u003e\u003cp\u003eWhen using the RollingUpdate strategy, there are two more options that let us fine-tune the update process:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003cp\u003e\u003cstrong\u003emaxSurge\u003c/strong\u003e: \nThe number of pods that can be created above the desired amount of pods during an update. This can be an absolute number or percentage of the replicas count. The default is 25%.\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003cstrong\u003emaxUnavailable\u003c/strong\u003e: \nThe number of pods that can be unavailable during the update process. This can be an absolute number or a percentage of the replicas count; the default is 25%.\u003c/p\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eFirst, we create our \u003cem\u003erollingupdate.yaml\u003c/em\u003e deployment template. In the template below, we set \u003cem\u003emaxSurge\u003c/em\u003e to 2 and \u003cem\u003emaxUnavailable\u003c/em\u003e to 1.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eapiVersion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e apps/v1\n\u003cspan\u003ekind\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Deployment\n\u003cspan\u003emetadata\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e rollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\n  \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1709\u003c/span\u003e\n\u003cspan\u003espec\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003estrategy\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e RollingUpdate\n    \u003cspan\u003erollingUpdate\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003emaxSurge\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003e\n      \u003cspan\u003emaxUnavailable\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\n  \u003cspan\u003eselector\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ematchLabels\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e web\u003cspan\u003e-\u003c/span\u003eapp\u003cspan\u003e-\u003c/span\u003erollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\n      \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1709\u003c/span\u003e\n  \u003cspan\u003ereplicas\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e\n  \u003cspan\u003etemplate\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003emetadata\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003elabels\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e web\u003cspan\u003e-\u003c/span\u003eapp\u003cspan\u003e-\u003c/span\u003erollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\n        \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1709\u003c/span\u003e\n    \u003cspan\u003espec\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003econtainers\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e web\u003cspan\u003e-\u003c/span\u003eapp\u003cspan\u003e-\u003c/span\u003erollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\n          \u003cspan\u003eimage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e hello\u003cspan\u003e-\u003c/span\u003eworld\u003cspan\u003e:\u003c/span\u003enanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1709\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe can then create the deployment using the kubectl command.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply \u003cspan\u003e-\u003c/span\u003ef rollingupdate\u003cspan\u003e.\u003c/span\u003eyaml\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce we have a deployment template, we can provide a way to access the instances of the deployment by creating a Service. Note that we are deploying the image \u003cem\u003ehello-world\u003c/em\u003e with version \u003cem\u003enanoserver-1709\u003c/em\u003e. So in this case we have two labels, \u0026#39;name= \u003cem\u003eweb-app-rollingupdate-strategy\u003c/em\u003e\u0026#39; and \u0026#39;version=\u003cem\u003enanoserver-1709\u003c/em\u003e\u0026#39;. We will set these as the label selector for the service below. Save this to \u0026#39;\u003cem\u003eservice.yaml\u003c/em\u003e\u0026#39; file.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eapiVersion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e v1\n\u003cspan\u003ekind\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Service\n\u003cspan\u003emetadata\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \n  \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e web\u003cspan\u003e-\u003c/span\u003eapp\u003cspan\u003e-\u003c/span\u003erollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\n  \u003cspan\u003elabels\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \n    \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e web\u003cspan\u003e-\u003c/span\u003eapp\u003cspan\u003e-\u003c/span\u003erollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\n    \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1709\u003c/span\u003e\n\u003cspan\u003espec\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003eports\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e http\n      \u003cspan\u003eport\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e80\u003c/span\u003e\n      \u003cspan\u003etargetPort\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e80\u003c/span\u003e\n  \u003cspan\u003eselector\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \n    \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e web\u003cspan\u003e-\u003c/span\u003eapp\u003cspan\u003e-\u003c/span\u003erollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\n    \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1709\u003c/span\u003e\n  \u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e LoadBalancer\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow creating the service will create a load balancer that is accessible outside the cluster.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply \u003cspan\u003e-\u003c/span\u003ef service\u003cspan\u003e.\u003c/span\u003eyaml\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRun \u003cem\u003ekubectl get deployments\u003c/em\u003e to check if the Deployment is created. If the Deployment is still being created, the output should be similar to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl \u003cspan\u003eget\u003c/span\u003e deployments\n\n\u003cspan\u003eNAME\u003c/span\u003e                             \u003cspan\u003eREADY\u003c/span\u003e   \u003cspan\u003eUP\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eTO\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eDATE\u003c/span\u003e   \u003cspan\u003eAVAILABLE\u003c/span\u003e   \u003cspan\u003eAGE\u003c/span\u003e\nrollingupdate\u003cspan\u003e-\u003c/span\u003estrategy   \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e     \u003cspan\u003e0\u003c/span\u003e            \u003cspan\u003e0\u003c/span\u003e           \u003cspan\u003e1\u003c/span\u003es\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf we run the \u003cem\u003ekubectl get deployments\u003c/em\u003e again a few seconds later. The output should be similar to this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl \u003cspan\u003eget\u003c/span\u003e deployments\n\n\u003cspan\u003eNAME\u003c/span\u003e                             \u003cspan\u003eREADY\u003c/span\u003e   \u003cspan\u003eUP\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eTO\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eDATE\u003c/span\u003e   \u003cspan\u003eAVAILABLE\u003c/span\u003e   \u003cspan\u003eAGE\u003c/span\u003e\nrollingupdate\u003cspan\u003e-\u003c/span\u003estrategy   \u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e     \u003cspan\u003e0\u003c/span\u003e            \u003cspan\u003e0\u003c/span\u003e           \u003cspan\u003e7\u003c/span\u003es\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo see the ReplicaSet (rs) created by the Deployment, run \u003cem\u003ekubectl get rs\u003c/em\u003e. The output should be similar to this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl \u003cspan\u003eget\u003c/span\u003e rs\n\n\u003cspan\u003eNAME\u003c/span\u003e                                    \u003cspan\u003eDESIRED\u003c/span\u003e   \u003cspan\u003eCURRENT\u003c/span\u003e   \u003cspan\u003eREADY\u003c/span\u003e   \u003cspan\u003eAGE\u003c/span\u003e\nrollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e87875\u003c/span\u003ef5897   \u003cspan\u003e3\u003c/span\u003e         \u003cspan\u003e3\u003c/span\u003e         \u003cspan\u003e3\u003c/span\u003e       \u003cspan\u003e18\u003c/span\u003es\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo see the 3 pods running for deployment, run \u003cem\u003ekubectl get pods\u003c/em\u003e. The created ReplicaSet ensures that there are three Pods running. The output should be similar to the below.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl \u003cspan\u003eget\u003c/span\u003e pods\n\n\u003cspan\u003eNAME\u003c/span\u003e                                      \u003cspan\u003eREADY\u003c/span\u003e     \u003cspan\u003eSTATUS\u003c/span\u003e    \u003cspan\u003eRESTARTS\u003c/span\u003e   \u003cspan\u003eAGE\u003c/span\u003e       \nrollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e87875\u003c/span\u003ef5897\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e55\u003c/span\u003ei7o   \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e       Running   \u003cspan\u003e0\u003c/span\u003e          \u003cspan\u003e12\u003c/span\u003es       \nrollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e87875\u003c/span\u003ef5897\u003cspan\u003e-\u003c/span\u003eabszs   \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e       Running   \u003cspan\u003e0\u003c/span\u003e          \u003cspan\u003e12\u003c/span\u003es       \nrollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e87875\u003c/span\u003ef5897\u003cspan\u003e-\u003c/span\u003eqazrt   \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e       Running   \u003cspan\u003e0\u003c/span\u003e          \u003cspan\u003e12\u003c/span\u003es\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0026#39;s update the \u003cem\u003erollingupdate.yaml\u003c/em\u003e deployment template to use the \u003cem\u003ehello-world:nanoserver-1809\u003c/em\u003e image instead of the \u003cem\u003ehello-world:nanoserver-1709\u003c/em\u003e image. Then update the image of the existing running deployment using the kubectl command.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl \u003cspan\u003eset\u003c/span\u003e image deployment\u003cspan\u003e/\u003c/span\u003erollingupdate\u003cspan\u003e-\u003c/span\u003estrategy web\u003cspan\u003e-\u003c/span\u003eapp\u003cspan\u003e-\u003c/span\u003erollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\u003cspan\u003e=\u003c/span\u003ehello\u003cspan\u003e-\u003c/span\u003eworld\u003cspan\u003e:\u003c/span\u003enanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1809\u003c/span\u003e \u003cspan\u003e--\u003c/span\u003erecord\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe output is similar to the below.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edeployment\u003cspan\u003e.\u003c/span\u003eapps\u003cspan\u003e/\u003c/span\u003erollingupdate\u003cspan\u003e-\u003c/span\u003estrategy image updated\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe are now deploying the image \u003cem\u003ehello-world\u003c/em\u003e with version \u003cem\u003enanoserver-1809\u003c/em\u003e. So, in this case, we will have to update the labels in the \u0026#39;\u003cem\u003eservice.yaml\u003c/em\u003e\u0026#39;. The label will be updated to \u0026#39;version=\u003cem\u003enanoserver-1809\u003c/em\u003e\u0026#39;. We will run the below kubectl command again to update the service so that it can pick new pods running on the newer image.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply \u003cspan\u003e-\u003c/span\u003ef service\u003cspan\u003e.\u003c/span\u003eyaml\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo see the rollout status run the kubectl command below.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl rollout status deployment\u003cspan\u003e/\u003c/span\u003erollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\n\nWaiting \u003cspan\u003efor\u003c/span\u003e rollout to finish\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003e out \u003cspan\u003eof\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003ereplicas\u003c/span\u003e have been updated\u003cspan\u003e...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRun again to verify the rollout is successful.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl rollout status deployment\u003cspan\u003e/\u003c/span\u003erollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\n\ndeployment \u003cspan\u003e\u0026#34;rollingupdate-strategy\u0026#34;\u003c/span\u003e successfully rolled out\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAfter the rollout is successful, we can view the Deployment by running the command \u003cem\u003ekubectl get deployments\u003c/em\u003e. The output is similar to this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl \u003cspan\u003eget\u003c/span\u003e deployments\n\n\u003cspan\u003eNAME\u003c/span\u003e                             \u003cspan\u003eREADY\u003c/span\u003e   \u003cspan\u003eUP\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eTO\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eDATE\u003c/span\u003e   \u003cspan\u003eAVAILABLE\u003c/span\u003e   \u003cspan\u003eAGE\u003c/span\u003e\nrollingupdate\u003cspan\u003e-\u003c/span\u003estrategy   \u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e     \u003cspan\u003e0\u003c/span\u003e            \u003cspan\u003e0\u003c/span\u003e           \u003cspan\u003e7\u003c/span\u003es\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRun \u003cem\u003ekubectl get rs\u003c/em\u003e to see that the Deployment is updated. The new Pods are created in a new ReplicaSet and are scaled up to 3 replicas. The old ReplicaSet is scaled down to 0 replicas.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl \u003cspan\u003eget\u003c/span\u003e rs\n\n\u003cspan\u003eNAME\u003c/span\u003e                                    \u003cspan\u003eDESIRED\u003c/span\u003e   \u003cspan\u003eCURRENT\u003c/span\u003e   \u003cspan\u003eREADY\u003c/span\u003e   \u003cspan\u003eAGE\u003c/span\u003e\nrollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e87875\u003c/span\u003ef5897   \u003cspan\u003e3\u003c/span\u003e         \u003cspan\u003e3\u003c/span\u003e         \u003cspan\u003e3\u003c/span\u003e       \u003cspan\u003e55\u003c/span\u003es\nrollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e89999\u003c/span\u003ef7895   \u003cspan\u003e0\u003c/span\u003e         \u003cspan\u003e0\u003c/span\u003e         \u003cspan\u003e0\u003c/span\u003e       \u003cspan\u003e12\u003c/span\u003es\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRun \u003cem\u003ekubectl get pods\u003c/em\u003e it should now show only the new Pods in the new ReplicaSet.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl \u003cspan\u003eget\u003c/span\u003e pods\n\n\u003cspan\u003eNAME\u003c/span\u003e                                      \u003cspan\u003eREADY\u003c/span\u003e     \u003cspan\u003eSTATUS\u003c/span\u003e    \u003cspan\u003eRESTARTS\u003c/span\u003e   \u003cspan\u003eAGE\u003c/span\u003e       \nrollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e89999\u003c/span\u003ef7895\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e55\u003c/span\u003ei7o   \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e       Running   \u003cspan\u003e0\u003c/span\u003e          \u003cspan\u003e12\u003c/span\u003es       \nrollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e89999\u003c/span\u003ef7895\u003cspan\u003e-\u003c/span\u003eabszs   \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e       Running   \u003cspan\u003e0\u003c/span\u003e          \u003cspan\u003e12\u003c/span\u003es       \nrollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e89999\u003c/span\u003ef7895\u003cspan\u003e-\u003c/span\u003eqazrt   \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e       Running   \u003cspan\u003e0\u003c/span\u003e          \u003cspan\u003e12\u003c/span\u003es\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe kubectl\u0026#39;s rollout command is very useful here. We can use it to check how our deployment is doing. The command, by default, waits until all of the Pods in the deployment have been started successfully. When the deployment succeeds, the command exits with return code zero to indicate success. If the deployment fails, the command exits with a non-zero code.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl rollout status deployment rollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\n\nWaiting \u003cspan\u003efor\u003c/span\u003e deployment \u003cspan\u003e\u0026#34;rollingupdate-strategy\u0026#34;\u003c/span\u003e rollout to finish\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003eof\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e updated replicas are available…\nWaiting \u003cspan\u003efor\u003c/span\u003e deployment \u003cspan\u003e\u0026#34;rollingupdate-strategy\u0026#34;\u003c/span\u003e rollout to finish\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e \u003cspan\u003eof\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e updated replicas are available…\nWaiting \u003cspan\u003efor\u003c/span\u003e deployment \u003cspan\u003e\u0026#34;rollingupdate-strategy\u0026#34;\u003c/span\u003e rollout to finish\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003e \u003cspan\u003eof\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e updated replicas are available…\n\ndeployment \u003cspan\u003e\u0026#34;rollingupdate-strategy\u0026#34;\u003c/span\u003e successfully rolled out\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf the deployment fails in Kubernetes, the deployment process stops, but the pods from the failed deployment are kept around. On deployment failure, our environment may contain pods from both the old and new deployments. To get back to a stable, working state, we can use the rollout undo command to bring back the working pods and clean up the failed deployment.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl rollout undo deployment rollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\n\ndeployment\u003cspan\u003e.\u003c/span\u003eextensions\u003cspan\u003e/\u003c/span\u003erollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen we will verify the status of the deployment again.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl rollout status deployment rollingupdate\u003cspan\u003e-\u003c/span\u003estrategy\n\ndeployment \u003cspan\u003e\u0026#34;rollingupdate-strategy\u0026#34;\u003c/span\u003e successfully rolled out\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn order for Kubernetes to know when an application is ready, it needs some help from the application. Kubernetes uses readiness probes to examine how the application is doing. Once an application instance starts responding to the readiness probe with a positive response, the instance is considered ready for use. Readiness probes tell Kubernetes when an application is ready, but not if the application will ever become ready. If the application keeps failing, it may never respond with a positive response to Kubernetes. \u003c/p\u003e\u003cp\u003eA rolling deployment typically waits for new pods to become ready via a readiness check before scaling down the old components. If a significant issue occurs, the rolling deployment can be aborted. If there is a problem, the rolling update or deployment can be aborted without bringing the whole cluster down.\u003c/p\u003e\u003ch3 id=\"Recreate-Deployment\"\u003eRecreate Deployment\u003c/h3\u003e\u003cp\u003eIn recreate deployment, we fully scale down the existing application version before we scale up the new application version. In the below diagram, Version 1 represents the current application version, and Version 2 represents the new application version. When updating the current application version, we first scale down the existing replicas of Version 1 to zero and then concurrently deploy replicas with the new version.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1FVQm06ERSn67QJkI2zlfj/49ef78e46445aa7e6a7e54349e85e2b7/02_recreate-deployment.jpg\" alt=\"Alt text\"/\u003e\u003c/p\u003e\u003cp\u003eThe below template shows deployment using the recreate strategy: First, we create our \u003cem\u003erecreate\u003c/em\u003e deployment by saving the following yaml to a file recreate.yaml\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eapiVersion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e apps/v1\n\u003cspan\u003ekind\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Deployment\n\u003cspan\u003emetadata\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e recreate\u003cspan\u003e-\u003c/span\u003estrategy\n\u003cspan\u003espec\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003estrategy\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Recreate\n  \u003cspan\u003eselector\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ematchLabels\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e web\u003cspan\u003e-\u003c/span\u003eapp\u003cspan\u003e-\u003c/span\u003erecreate\u003cspan\u003e-\u003c/span\u003estrategy\n      \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1809\u003c/span\u003e\n  \u003cspan\u003ereplicas\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e\n  \u003cspan\u003etemplate\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003emetadata\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003elabels\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e web\u003cspan\u003e-\u003c/span\u003eapp\u003cspan\u003e-\u003c/span\u003erecreate\u003cspan\u003e-\u003c/span\u003estrategy\n    \u003cspan\u003espec\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003econtainers\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e web\u003cspan\u003e-\u003c/span\u003eapp\u003cspan\u003e-\u003c/span\u003erecreate\u003cspan\u003e-\u003c/span\u003estrategy\n          \u003cspan\u003eimage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e hello\u003cspan\u003e-\u003c/span\u003eworld\u003cspan\u003e:\u003c/span\u003enanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1809\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe can then create the deployment using the kubectl command.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply \u003cspan\u003e-\u003c/span\u003ef recreate\u003cspan\u003e.\u003c/span\u003eyaml\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce we have a deployment template, we can provide a way to access the instances of the deployment by creating a Service. Note that we are deploying the image \u003cem\u003ehello-world\u003c/em\u003e with version \u003cem\u003enanoserver-1809\u003c/em\u003e. So in this case we have two labels, \u0026#39;name= \u003cem\u003eweb-app-recreate-strategy\u003c/em\u003e\u0026#39; and \u0026#39;version=\u003cem\u003enanoserver-1809\u003c/em\u003e\u0026#39;. We will set these as the label selector for the service below. Save this to \u003cem\u003eservice.yaml\u003c/em\u003e file.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eapiVersion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e v1\n\u003cspan\u003ekind\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Service\n\u003cspan\u003emetadata\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \n  \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e web\u003cspan\u003e-\u003c/span\u003eapp\u003cspan\u003e-\u003c/span\u003erecreate\u003cspan\u003e-\u003c/span\u003estrategy\n  \u003cspan\u003elabels\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \n    \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e web\u003cspan\u003e-\u003c/span\u003eapp\u003cspan\u003e-\u003c/span\u003erecreate\u003cspan\u003e-\u003c/span\u003estrategy\n    \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1809\u003c/span\u003e\n\u003cspan\u003espec\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003eports\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e http\n      \u003cspan\u003eport\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e80\u003c/span\u003e\n      \u003cspan\u003etargetPort\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e80\u003c/span\u003e\n  \u003cspan\u003eselector\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \n    \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e web\u003cspan\u003e-\u003c/span\u003eapp\u003cspan\u003e-\u003c/span\u003erecreate\u003cspan\u003e-\u003c/span\u003estrategy\n    \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1809\u003c/span\u003e\n  \u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e LoadBalancer\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow creating the service will create a load balancer that is accessible outside the cluster.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply \u003cspan\u003e-\u003c/span\u003ef service\u003cspan\u003e.\u003c/span\u003eyaml\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe recreate method involves some downtime during the update process. Downtime is not an issue for applications that can handle maintenance windows or outages. However, if there is a mission-critical application with high service level agreements (SLAs) and availability requirements, choosing a different deployment strategy would be the right approach. Recreate deployment is generally used in the development stage by the developers as it is easy to set up, and the application state is entirely renewed with the new version. What\u0026#39;s more, we don\u0026#39;t have to manage more than one application version in parallel, and therefore we avoid backward compatibility challenges for data and applications. \u003c/p\u003e\u003ch3 id=\"Blue-Green-Deployment\"\u003eBlue-Green Deployment\u003c/h3\u003e\u003cp\u003eIn a blue/green deployment strategy (sometimes also referred to as red/black), the blue represents the current application version, and green represents the new application version. In this, only one version is live at a time. Traffic is routed to the blue deployment while the green deployment is created and tested. After we are finished testing, we then route traffic to the new version.\u003c/p\u003e\u003cp\u003eAfter the deployment succeeds, we can either keep the blue deployment for a possible rollback or decommission it. Alternatively, it is possible to deploy a newer version of the application on these instances. In that case, the current (blue) environment serves as the staging area for the next release.\u003c/p\u003e\u003cp\u003eThis technique can eliminate downtime as we faced in the recreate deployment strategy. In addition, blue-green deployment reduces risk: if something unexpected happens with our new version on Green, we can immediately roll back to the last version by switching back to Blue. There is instant rollout/rollback. We can also avoid versioning issues; the entire application state is changed in one deployment.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/5vHYgyomFFI2h4okBQyUTH/98d685900acef7c6c1abdea444b947e1/03_blue-green.jpg\" alt=\"Alt text\"/\u003e\u003c/p\u003e\u003cp\u003eThe Blue-Green deployment is expensive as it requires double the resources. A proper test of the entire platform should be done before releasing it to production. Moreover, handling stateful applications is hard.\u003c/p\u003e\u003cp\u003eFirst, we create our \u003cem\u003eblue\u003c/em\u003e deployment by saving the following yaml to a \u0026#39;blue.yaml\u0026#39; file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eapiVersion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e apps/v1\n\u003cspan\u003ekind\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Deployment\n\u003cspan\u003emetadata\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e blue\u003cspan\u003e-\u003c/span\u003edeployment\n\u003cspan\u003espec\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003eselector\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ematchLabels\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e blue\u003cspan\u003e-\u003c/span\u003edeployment\n      \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1709\u003c/span\u003e\n  \u003cspan\u003ereplicas\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e\n  \u003cspan\u003etemplate\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003emetadata\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003elabels\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e blue\u003cspan\u003e-\u003c/span\u003edeployment\n        \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1709\u003c/span\u003e\n    \u003cspan\u003espec\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003econtainers\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e blue\u003cspan\u003e-\u003c/span\u003edeployment\n          \u003cspan\u003eimage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e hello\u003cspan\u003e-\u003c/span\u003eworld\u003cspan\u003e:\u003c/span\u003enanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1709\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe can then create the deployment using the kubectl command.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply \u003cspan\u003e-\u003c/span\u003ef blue\u003cspan\u003e.\u003c/span\u003eyaml\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce we have a deployment template, we can provide a way to access the instances of the deployment by creating a Service. Note that we are deploying the image \u003cem\u003ehello-world\u003c/em\u003e with version \u003cem\u003enanoserver-1809\u003c/em\u003e. So in this case we have two labels, \u0026#39;name= \u003cem\u003eblue-deployment\u003c/em\u003e\u0026#39; and \u0026#39;version=\u003cem\u003enanoserver-1709\u003c/em\u003e\u0026#39;. We will set these as the label selector for the service below. Save this to \u003cem\u003eservice.yaml\u003c/em\u003e file.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eapiVersion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e v1\n\u003cspan\u003ekind\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Service\n\u003cspan\u003emetadata\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \n  \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e blue\u003cspan\u003e-\u003c/span\u003egreen\u003cspan\u003e-\u003c/span\u003eservice\n  \u003cspan\u003elabels\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \n    \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e blue\u003cspan\u003e-\u003c/span\u003edeployment\n    \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1709\u003c/span\u003e\n\u003cspan\u003espec\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003eports\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e http\n      \u003cspan\u003eport\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e80\u003c/span\u003e\n      \u003cspan\u003etargetPort\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e80\u003c/span\u003e\n  \u003cspan\u003eselector\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \n    \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e blue\u003cspan\u003e-\u003c/span\u003edeployment\n    \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1709\u003c/span\u003e\n  \u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e LoadBalancer\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow creating the service will create a load balancer that is accessible outside the cluster.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply \u003cspan\u003e-\u003c/span\u003ef service\u003cspan\u003e.\u003c/span\u003eyaml\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe now have the below setup in place.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/2mRPpKDjZb7W9UPlmh0dlF/eec0754c5c458b9017bda1ca7c863bc9/04_blue.jpg\" alt=\"Alt text\"/\u003e\u003c/p\u003e\u003cp\u003eFor the \u003cem\u003egreen\u003c/em\u003e deployment we will deploy a new deployment in parallel with the \u003cem\u003eblue\u003c/em\u003e deployment. The below template is a content of the \u003ccode\u003egreen\u003cspan\u003e.\u003c/span\u003eyaml\u003c/code\u003e file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eapiVersion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e apps/v1\n\u003cspan\u003ekind\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Deployment\n\u003cspan\u003emetadata\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e green\u003cspan\u003e-\u003c/span\u003edeployment\n\u003cspan\u003espec\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003eselector\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ematchLabels\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e green\u003cspan\u003e-\u003c/span\u003edeployment\n      \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1809\u003c/span\u003e\n  \u003cspan\u003ereplicas\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e\n  \u003cspan\u003etemplate\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003emetadata\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003elabels\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e green\u003cspan\u003e-\u003c/span\u003edeployment\n        \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1809\u003c/span\u003e\n    \u003cspan\u003espec\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003econtainers\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e green\u003cspan\u003e-\u003c/span\u003edeployment\n          \u003cspan\u003eimage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e hello\u003cspan\u003e-\u003c/span\u003eworld\u003cspan\u003e:\u003c/span\u003enanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1809\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote that image \u003cem\u003ehello-world:nanoserver-1809\u003c/em\u003e tag-name has changed to 2. So we have made a separate deployment with two labels, name= \u003cem\u003egreen-deployment\u003c/em\u003e and version=\u003cem\u003enanoserver-1809\u003c/em\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply \u003cspan\u003e-\u003c/span\u003ef green\u003cspan\u003e.\u003c/span\u003eyaml\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo cut over to the \u003cem\u003egreen\u003c/em\u003e deployment, we will update the selector for the existing service. Edit the service.yaml and change the selector version to \u003cem\u003e2\u003c/em\u003e and name to \u003cem\u003egreen-deployemnt\u003c/em\u003e. That will make it so that it matches the pods on the \u003cem\u003egreen\u003c/em\u003e\u0026#34; deployment.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eapiVersion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e v1\n\u003cspan\u003ekind\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Service\n\u003cspan\u003emetadata\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \n  \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e blue\u003cspan\u003e-\u003c/span\u003egreen\u003cspan\u003e-\u003c/span\u003eservice\n  \u003cspan\u003elabels\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \n    \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e green\u003cspan\u003e-\u003c/span\u003edeployment\n    \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1809\u003c/span\u003e\n\u003cspan\u003espec\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003eports\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e http\n      \u003cspan\u003eport\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e80\u003c/span\u003e\n      \u003cspan\u003etargetPort\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e80\u003c/span\u003e\n  \u003cspan\u003eselector\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \n    \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e green\u003cspan\u003e-\u003c/span\u003edeployment\n    \u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e nanoserver\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1809\u003c/span\u003e\n  \u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e LoadBalancer\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe create the service  again using the kubectl command:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ kubectl apply \u003cspan\u003e-\u003c/span\u003ef service\u003cspan\u003e.\u003c/span\u003eyaml\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3vxIwBo5DZHGWoELo2khCL/aa6a898dcbc97234cc29f6bac6f31c52/05_green.jpg\" alt=\"Alt text\"/\u003e\u003c/p\u003e\u003cp\u003eHence concluding, we can see the blue-green deployment is all-or-nothing, unlike a rolling update deployment, where we aren\u0026#39;t able to gradually roll out the new version. All users will receive the update at the same time, although existing sessions will be allowed to finish their work on the old instances. Hence the stakes are a bit higher than everything should work once we initiate the change. It also requires allocating more server resources since we will need to run two copies of every pod.\u003c/p\u003e\u003cp\u003eFortunately, the rollback procedure is just as easy: We simply have to flip the switch again, and the previous version is swapped back into place. That\u0026#39;s because the old version is still running on the old pods. It is simply that traffic is no longer being routed to them. When we are confident that the new version is here to stay, we should decommission those pods.\u003c/p\u003e\u003ch3 id=\"Canary-Deployment\"\u003eCanary Deployment\u003c/h3\u003e\u003cp\u003eThe canary update strategy is a partial update process that allows us to test our new program version on a real user base without a commitment to a full rollout. Similar to blue/green deployments, but they are more controlled, and they use a more progressive delivery where deployment is in a phased approach. There are a number of strategies that fall under the umbrella of canary, including dark launches or A/B testing.\u003c/p\u003e\u003cp\u003eIn canary deployment, the new version of the application is gradually deployed to the Kubernetes cluster while getting a very small amount of live traffic (i.e., a subset of live users are connecting to the new version while the rest are still using the previous version).In this approach, we have two almost identical servers: one that goes to all the current active users and another with the new features that gets rolled out to a subset of users and then compared. When no errors are reported and the confidence increases, the new version can gradually roll out to the rest of the infrastructure. In the end, all live traffic goes to canaries, making the canary version the new \u003cem\u003eproduction version\u003c/em\u003e.\u003c/p\u003e\u003cp\u003eThe below picture shows the most straightforward and simple way to do a canary deployment. A new version is deployed to a subset of servers.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4thRldlIQuLdnmwSjEcmIq/85ed566fcaa6038e74de978112a79df0/06_canary-deployment-1.jpg\" alt=\"Alt text\"/\u003e\u003c/p\u003e\u003cp\u003eWhile this happens, we watch how the upgraded machines are doing. We check for errors and performance problems, and we listen for user feedback. As we grow confident in the canary, we continue installing it on the rest of the machines until they are all running the latest release.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4dsHDsWT30QXUL17T0uphC/5048ee861491e78ae2baa43682446a83/07_canary-deployment-2.png\" alt=\"Alt text\"/\u003e\u003c/p\u003e\u003cp\u003eWe have to take into account various things when planning a canary deployment:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003cstrong\u003eStages\u003c/strong\u003e: how many users will we send to the canary at first, and in how many stages.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eDuration\u003c/strong\u003e: how long will we plan to run the canary? Canary releases are different, as we must wait for enough clients to be updated before we can assess the results. This can happen over several days or even weeks.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eMetrics\u003c/strong\u003e: what are the metrics to record to analyze progress, including application performance and error reports? Well-chosen parameters are essential for a successful canary deployment. For instance, a very simple way to measure deployment is through HTTP status codes. We can have a simple ping service that returns 200 when the deployment is successful. It will return server end error (5xx) if there is an issue in the deployment.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eEvaluation\u003c/strong\u003e: what criteria will we use to determine if the canary is successful\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eA canary is used in scenarios where we have to test a new functionality typically on the backend of our application. Canary deployment should be used when we are not 100% confident in the new version; we predict we might have a low chance of failure. This strategy is usually used when we have a major update, like adding a new functionality or experimental feature.\u003c/p\u003e\u003ch2 id=\"Summary-K8s-Deployments-Strategies\"\u003eSummary K8s Deployments Strategies\u003c/h2\u003e\u003cp\u003eTo sum up, there are different ways to deploy an application; when releasing to development/staging environments, a recreate or ramped deployment is usually a good choice. When it comes to production, a ramped or blue/green deployment is usually a good fit, but proper testing of the new platform is necessary. If we are not confident with the stability of the platform and what could be the impact of releasing a new software version, then a canary release should be the way to go. By doing so, we let the consumer test the application and its integration into the platform. In this article, we have only scratched the surface of the capabilities of Kubernetes deployments. By combining deployments with all the other Kubernetes features, users can create more robust containerized applications to suit any need.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn what are the different deployment strategies available in Kubernetes and how to use them.",
      "date_published": "2021-08-06T14:59:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/spring-cloud-messaging-with-aws-and-localstack/",
      "title": "Spring Cloud Messaging With AWS and LocalStack",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eTL;DR:\u003c/strong\u003e This article demonstrates the use of LocalStack and how it can simulate many of the AWS services locally. We will use Spring Cloud Messaging to create a publisher-subscriber sample application. We will use Amazon SNS and SQS to do that.\u003c/p\u003e\u003cp\u003eThe sample app can be found \u003ca href=\"https://github.com/maniish-jaiin/spring-cloud-messaging-sample\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"Spring-Cloud-Messaging-With-AWS-and-LocalStack\"\u003eSpring Cloud Messaging With AWS and LocalStack\u003c/h2\u003e\u003ch3 id=\"Introduction\"\u003eIntroduction\u003c/h3\u003e\u003cp\u003eWith an ever-growing demand for cloud services, Spring provides amazing support to integrate with Cloud providers and relevant services. \u003ca href=\"https://spring.io/projects/spring-cloud-aws\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring Cloud for Amazon Web Services\u003c/a\u003e is one such project that makes it easy to integrate with AWS services using familiar Spring APIs.\u003c/p\u003e\u003cp\u003eIn this article, we will look into a simple application that acts as a message producer and a consumer using Amazon SNS and SQS. On top of that, we will not create an AWS account or use AWS services directly from AWS. We will instead use LocalStack, which will allow us to create AWS resources locally.\u003c/p\u003e\u003cp\u003eThe sample app can be found \u003ca href=\"https://github.com/maniish-jaiin/spring-cloud-messaging-sample\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch3 id=\"Pre-requisites-\"\u003ePre-requisites:\u003c/h3\u003e\u003col start=\"1\"\u003e\u003cli\u003eBasic knowledge of AWS, \u003ca href=\"https://github.com/aws/aws-cli\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAWS CLI\u003c/a\u003e, and related services like Amazon SQS.\u003c/li\u003e\u003cli\u003eBasic knowledge of \u003ca href=\"https://docs.oracle.com/en/java/javase/11/docs/api/index.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJava 11\u003c/a\u003e and Spring Boot \u003ccode\u003e\u003cspan\u003e2.4\u003c/span\u003e\u003cspan\u003e.7\u003c/span\u003e\u003c/code\u003e.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://docs.docker.com/get-docker/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDocker\u003c/a\u003e and \u003ca href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDocker Compose\u003c/a\u003e for the setup.\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"Introduction-to-Amazon-SNS-and-SQS\"\u003eIntroduction to Amazon SNS and SQS\u003c/h2\u003e\u003ch3 id=\"Amazon-SNS\"\u003eAmazon SNS\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://aws.amazon.com/sns/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAmazon SNS\u003c/a\u003e is an acronym for Simple Notification Service. It provides developers with the highly scalable, cost-effective, and flexible capability to publish messages from an application and send them to other applications. It follows the pub-sub architecture to deliver messages from publishers to the subscribers. It is a highly decoupled service that can be linked to a variety of sources. It can be used to publish emails, messages to SQS, SMS, etc.\u003c/p\u003e\u003cp\u003eThe Publisher (e.g., CloudWatch Alarm, S3 events, SNS, Micro-service) publishes the message on a Topic which is then published to all the Subscribers (web servers, email addresses, Amazon SQS queues, AWS Lambda)  of that particular topic.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/35P87aEWHIcpTOQxYTGWbz/03840ff6c13fdc4a94552ec8188c131e/sns_architecture.jpg\" alt=\"SNS Architecture\"/\u003e\u003c/p\u003e\u003ch3 id=\"Amazon-SQS\"\u003eAmazon SQS\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://aws.amazon.com/sqs/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAmazon SQS\u003c/a\u003e is an acronym for Simple Queue Service, and the names convey a lot as it is really simple to use as it is a fully managed service from AWS. It follows similar messaging semantics of the producer putting a message on the queue and consumer reading from it.\u003c/p\u003e\u003cp\u003eOnce consumed, the message has to be deleted from the queue. Deleting is important because SQS assumes that processing can fail. To prevent that, after the consumer receives a message, it is hidden from the queue for a defined period of time, and after that, if it is not deleted, the message shows up in the queue again.\u003c/p\u003e\u003cp\u003eBoth SNS and SQS are fully managed lightweight, easy-to-use APIs. You can use Amazon SQS and SNS to decouple and scale microservices, distributed systems, and serverless applications and improve reliability.\u003c/p\u003e\u003ch3 id=\"Introduction-to-LocalStack\"\u003eIntroduction to LocalStack\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://github.com/localstack/localstack\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLocalStack\u003c/a\u003e is an open-source mock of the real AWS services. It provides a testing environment on our local machine with the same APIs as the real AWS services. We switch to using the real AWS services only in the integration environment and beyond. There are plenty of reasons to use LocalStack, few out of which are more important than others, such as:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eThe ability to play with AWS services without interacting with AWS. All developers love to get their hands dirty, and what better way to learn something than to try. Localstack allows you to play with S3, SQS, DynamoDB, SNS, and the list goes on.\u003c/li\u003e\u003cli\u003eThe ability to test the applications in the local dev environment. You can write integration tests for your application using LocalStack, driving down your costs and increasing the confidence in your code.\u003c/li\u003e\u003c/ol\u003e\u003ch3 id=\"Spring-Cloud-Messaging-app-linked-to-LocalStack\"\u003eSpring Cloud Messaging app linked to LocalStack\u003c/h3\u003e\u003cp\u003eSpring Cloud AWS provides \u003ca href=\"https://aws.amazon.com/sqs/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAmazon SQS\u003c/a\u003e and \u003ca href=\"https://aws.amazon.com/sns/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAmazon SNS\u003c/a\u003e integration that simplifies the publication and consumption of messages. It reduces a lot of boilerplate code and does the heavy lifting for configuring and SNS and SQS. Let\u0026#39;s set up a Spring boot project with support for SNS and SQS.\u003c/p\u003e\u003ch4 id=\"Setting-up-Spring-Boot-app\"\u003eSetting up Spring Boot app\u003c/h4\u003e\u003cp\u003eLet us first create a Spring Boot project with the help of the \u003ca href=\"https://start.spring.io/#!type=maven-project\u0026amp;language=java\u0026amp;platformVersion=2.4.5.RELEASE\u0026amp;packaging=jar\u0026amp;jvmVersion=11\u0026amp;groupId=io.pratik\u0026amp;artifactId=springcloudsqs\u0026amp;name=springcloudsqs\u0026amp;description=Demo%20project%20for%20Spring%20cloud%20sqs\u0026amp;packageName=io.pratik.springcloudsqs\u0026amp;dependencies=web,lombok\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eSpring boot Initializr\u003c/a\u003e, and then open the project in our favorite IDE. Select Maven project and Java language. Last but not least, select Spring boot version \u003ccode\u003e\u003cspan\u003e2.4\u003c/span\u003e\u003cspan\u003e.7\u003c/span\u003e\u003c/code\u003e. Fill in the project metadata and click generate.\u003c/p\u003e\u003cp\u003eFor Spring Cloud, We need to configure Spring Cloud AWS BOM in our \u003ccode\u003epom\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e file using this dependencyManagement block:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edependencyManagement\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edependencies\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eio.awspring.cloud\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003espring-cloud-aws-dependencies\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e2.3.1\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003etype\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003epom\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003etype\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003escope\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eimport\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003escope\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edependencies\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edependencyManagement\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFor adding the support for messaging, we need to include the module dependency for Spring Cloud AWS Messaging into our Maven configuration. We do this by adding the starter module \u003ccode\u003espring\u003cspan\u003e-\u003c/span\u003ecloud\u003cspan\u003e-\u003c/span\u003estarter\u003cspan\u003e-\u003c/span\u003eaws\u003cspan\u003e-\u003c/span\u003emessaging\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eio.awspring.cloud\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003espring-cloud-starter-aws-messaging\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThese are the dependencies required for Spring Cloud AWS. Next, we add some other dependencies such as Spring boot starter web and \u003ca href=\"https://projectlombok.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLombok\u003c/a\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edependencies\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eorg.springframework.boot\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003espring-boot-starter-web\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e2.4.7\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eorg.projectlombok\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003elombok\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e1.18.20\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003escope\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eprovided\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003escope\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edependencies\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis completes our setup process for the Spring boot project.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s jump into adding the SNS and SQS configs and start publishing our first message.\u003c/p\u003e\u003cp\u003eAmazon SNS Config:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eamazonaws\u003cspan\u003e.\u003c/span\u003eauth\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAWSStaticCredentialsProvider\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eamazonaws\u003cspan\u003e.\u003c/span\u003eauth\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eBasicAWSCredentials\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eamazonaws\u003cspan\u003e.\u003c/span\u003eclient\u003cspan\u003e.\u003c/span\u003ebuilder\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAwsClientBuilder\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eamazonaws\u003cspan\u003e.\u003c/span\u003eservices\u003cspan\u003e.\u003c/span\u003esns\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAmazonSNS\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eamazonaws\u003cspan\u003e.\u003c/span\u003eservices\u003cspan\u003e.\u003c/span\u003esns\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAmazonSNSClientBuilder\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eio\u003cspan\u003e.\u003c/span\u003eawspring\u003cspan\u003e.\u003c/span\u003ecloud\u003cspan\u003e.\u003c/span\u003emessaging\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eNotificationMessagingTemplate\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eBean\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eConfiguration\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003ePrimary\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eauthga\u003cspan\u003e.\u003c/span\u003espringcloudaws\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAWSConfigConstants\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eACCESS_KEY\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eauthga\u003cspan\u003e.\u003c/span\u003espringcloudaws\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAWSConfigConstants\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eSECRET_KEY\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@Configuration\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eSnsConfig\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003e@Bean\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eNotificationMessagingTemplate\u003c/span\u003e \u003cspan\u003enotificationMessagingTemplate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eAmazonSNS\u003c/span\u003e amazonSNS\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eNotificationMessagingTemplate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eamazonSNS\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@Bean\u003c/span\u003e\n    \u003cspan\u003e@Primary\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eAmazonSNS\u003c/span\u003e \u003cspan\u003eamazonSNS\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eAwsClientBuilder\u003cspan\u003e.\u003c/span\u003eEndpointConfiguration\u003c/span\u003e endpointConfiguration\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eBasicAWSCredentials\u003c/span\u003e credentials \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eBasicAWSCredentials\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eACCESS_KEY\u003cspan\u003e,\u003c/span\u003e SECRET_KEY\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eAmazonSNSClientBuilder\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estandard\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithEndpointConfiguration\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eendpointConfiguration\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithCredentials\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eAWSStaticCredentialsProvider\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecredentials\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere, we create a simple \u003ccode\u003eAmazonSNSClient\u003c/code\u003e with a custom endpoint and credentials. Spring has an auto-configured \u003ccode\u003eAmazonSNSClient\u003c/code\u003e, but that requires valid AWS credentials and actual resources. We instead want to run our service locally with AWS resources using LocalStack. More on this later. Let\u0026#39;s finish this setup.\u003c/p\u003e\u003cp\u003eAmazon SQS Config:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eamazonaws\u003cspan\u003e.\u003c/span\u003eauth\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAWSStaticCredentialsProvider\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eamazonaws\u003cspan\u003e.\u003c/span\u003eauth\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eBasicAWSCredentials\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eamazonaws\u003cspan\u003e.\u003c/span\u003eclient\u003cspan\u003e.\u003c/span\u003ebuilder\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAwsClientBuilder\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eamazonaws\u003cspan\u003e.\u003c/span\u003eservices\u003cspan\u003e.\u003c/span\u003esqs\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAmazonSQSAsync\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eamazonaws\u003cspan\u003e.\u003c/span\u003eservices\u003cspan\u003e.\u003c/span\u003esqs\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAmazonSQSAsyncClientBuilder\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eio\u003cspan\u003e.\u003c/span\u003eawspring\u003cspan\u003e.\u003c/span\u003ecloud\u003cspan\u003e.\u003c/span\u003emessaging\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eQueueMessageHandlerFactory\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eio\u003cspan\u003e.\u003c/span\u003eawspring\u003cspan\u003e.\u003c/span\u003ecloud\u003cspan\u003e.\u003c/span\u003emessaging\u003cspan\u003e.\u003c/span\u003esupport\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eNotificationMessageArgumentResolver\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eBean\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eConfiguration\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003econtext\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003ePrimary\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003emessaging\u003cspan\u003e.\u003c/span\u003econverter\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eMappingJackson2MessageConverter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003emessaging\u003cspan\u003e.\u003c/span\u003econverter\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eMessageConverter\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eutil\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eList\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eauthga\u003cspan\u003e.\u003c/span\u003espringcloudaws\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAWSConfigConstants\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e*\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@Configuration\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eSqsConfig\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003e@Bean\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eAwsClientBuilder\u003cspan\u003e.\u003c/span\u003eEndpointConfiguration\u003c/span\u003e \u003cspan\u003eendpointConfiguration\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eAwsClientBuilder\u003cspan\u003e.\u003c/span\u003eEndpointConfiguration\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eENDPOINT\u003cspan\u003e,\u003c/span\u003e EU_CENTRAL_1\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@Bean\u003c/span\u003e\n    \u003cspan\u003e@Primary\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eAmazonSQSAsync\u003c/span\u003e \u003cspan\u003eamazonSQSAsync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eAwsClientBuilder\u003cspan\u003e.\u003c/span\u003eEndpointConfiguration\u003c/span\u003e endpointConfiguration\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eBasicAWSCredentials\u003c/span\u003e credentials \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eBasicAWSCredentials\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eACCESS_KEY\u003cspan\u003e,\u003c/span\u003e SECRET_KEY\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eAmazonSQSAsyncClientBuilder\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estandard\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithEndpointConfiguration\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eendpointConfiguration\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewithCredentials\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eAWSStaticCredentialsProvider\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecredentials\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@Bean\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eQueueMessageHandlerFactory\u003c/span\u003e \u003cspan\u003equeueMessageHandlerFactory\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eMessageConverter\u003c/span\u003e messageConverter\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003evar\u003c/span\u003e factory \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eQueueMessageHandlerFactory\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        factory\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetArgumentResolvers\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eList\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eof\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eNotificationMessageArgumentResolver\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003emessageConverter\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e factory\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@Bean\u003c/span\u003e\n    \u003cspan\u003eprotected\u003c/span\u003e \u003cspan\u003eMessageConverter\u003c/span\u003e \u003cspan\u003emessageConverter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003evar\u003c/span\u003e converter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eMappingJackson2MessageConverter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        converter\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetSerializedPayloadClass\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        converter\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetStrictContentTypeMatch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e converter\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the code above, we did the following:\u003c/p\u003e\u003cul\u003e\u003cli\u003eSimilar to the \u003ccode\u003eAmazonSNSClient\u003c/code\u003e, we create the \u003ccode\u003eAmazonSQSClient\u003c/code\u003e with a custom endpoint and credentials.\u003c/li\u003e\u003cli\u003eSetup \u003ccode\u003eQueueMessageHandlerFactory\u003c/code\u003e so it can convert incoming messages from SQS as String to the actual object we want, in this case, \u003ccode\u003eEvent\u003c/code\u003e, using a \u003ccode\u003eMessageConverter\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eThe converter will take care of converting the \u003ccode\u003eString\u003c/code\u003e message to the actual \u003ccode\u003eEvent\u003c/code\u003e object.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe \u003ccode\u003eEvent\u003c/code\u003e model is described below. I am using \u003ca href=\"https://projectlombok.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLombok\u003c/a\u003e to reduce the boilerplate code.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eEvent\u003cspan\u003e.\u003c/span\u003ejava\u003c/code\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003elombok\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAllArgsConstructor\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003elombok\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eBuilder\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003elombok\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eData\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003elombok\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eNoArgsConstructor\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@Data\u003c/span\u003e\n\u003cspan\u003e@AllArgsConstructor\u003c/span\u003e\n\u003cspan\u003e@NoArgsConstructor\u003c/span\u003e\n\u003cspan\u003e@Builder\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eEvent\u003c/span\u003e \u003cspan\u003eimplements\u003c/span\u003e \u003cspan\u003eComparable\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eEvent\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e eventId\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e version\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e occurredAt\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eEventData\u003c/span\u003e data\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e@Override\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003ecompareTo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eEvent\u003c/span\u003e o\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eint\u003c/span\u003e otherVersion \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eInteger\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparseInt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetVersion\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eint\u003c/span\u003e thisVersion \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eInteger\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparseInt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetVersion\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eInteger\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecompare\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ethisVersion\u003cspan\u003e,\u003c/span\u003e otherVersion\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eEventData\u003cspan\u003e.\u003c/span\u003ejava\u003c/code\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003elombok\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAllArgsConstructor\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003elombok\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eBuilder\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003elombok\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eData\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003elombok\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eNoArgsConstructor\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@Data\u003c/span\u003e\n\u003cspan\u003e@AllArgsConstructor\u003c/span\u003e\n\u003cspan\u003e@NoArgsConstructor\u003c/span\u003e\n\u003cspan\u003e@Builder\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eEventData\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e orderId\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e owner\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eEventType\u003c/span\u003e eventType\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eEventType\u003cspan\u003e.\u003c/span\u003ejava\u003c/code\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ejava\u003cspan\u003e.\u003c/span\u003eio\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eSerializable\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eenum\u003c/span\u003e \u003cspan\u003eEventType\u003c/span\u003e \u003cspan\u003eimplements\u003c/span\u003e \u003cspan\u003eSerializable\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    ORDER_CREATED\u003cspan\u003e,\u003c/span\u003e ORDER_CANCELLED\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eProducer code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eauthga\u003cspan\u003e.\u003c/span\u003espringcloudaws\u003cspan\u003e.\u003c/span\u003emodel\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eEvent\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eio\u003cspan\u003e.\u003c/span\u003eawspring\u003cspan\u003e.\u003c/span\u003ecloud\u003cspan\u003e.\u003c/span\u003emessaging\u003cspan\u003e.\u003c/span\u003ecore\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eNotificationMessagingTemplate\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003elombok\u003cspan\u003e.\u003c/span\u003eextern\u003cspan\u003e.\u003c/span\u003eslf4j\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eSlf4j\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003ebeans\u003cspan\u003e.\u003c/span\u003efactory\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAutowired\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003estereotype\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eService\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eauthga\u003cspan\u003e.\u003c/span\u003espringcloudaws\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAWSConfigConstants\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eORDER_CREATED_TOPIC\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@Slf4j\u003c/span\u003e\n\u003cspan\u003e@Service\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eSimpleMessageProducer\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003e@Autowired\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eNotificationMessagingTemplate\u003c/span\u003e notificationMessagingTemplate\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003epublish\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eEvent\u003c/span\u003e event\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        notificationMessagingTemplate\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econvertAndSend\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eORDER_CREATED_TOPIC\u003cspan\u003e,\u003c/span\u003e event\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\u003cli\u003eWe use the \u003ccode\u003eNotificationMessagingTemplate\u003c/code\u003e created in the config above. It gives us several methods to send messages on an SNS topic. We will use the default \u003ccode\u003e\u003cspan\u003econvertAndSend\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method that takes care of converting our object to a Message using the \u003ccode\u003eMessageConverter\u003c/code\u003e that we provide in the \u003ccode\u003eSqsConfig\u003c/code\u003e class.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eConsumer code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eauthga\u003cspan\u003e.\u003c/span\u003espringcloudaws\u003cspan\u003e.\u003c/span\u003emodel\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eEvent\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eio\u003cspan\u003e.\u003c/span\u003eawspring\u003cspan\u003e.\u003c/span\u003ecloud\u003cspan\u003e.\u003c/span\u003emessaging\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eNotificationMessage\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eio\u003cspan\u003e.\u003c/span\u003eawspring\u003cspan\u003e.\u003c/span\u003ecloud\u003cspan\u003e.\u003c/span\u003emessaging\u003cspan\u003e.\u003c/span\u003elistener\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eSqsMessageDeletionPolicy\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eio\u003cspan\u003e.\u003c/span\u003eawspring\u003cspan\u003e.\u003c/span\u003ecloud\u003cspan\u003e.\u003c/span\u003emessaging\u003cspan\u003e.\u003c/span\u003elistener\u003cspan\u003e.\u003c/span\u003eannotation\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eSqsListener\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003elombok\u003cspan\u003e.\u003c/span\u003eextern\u003cspan\u003e.\u003c/span\u003eslf4j\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eSlf4j\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eorg\u003cspan\u003e.\u003c/span\u003espringframework\u003cspan\u003e.\u003c/span\u003estereotype\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eController\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003ecom\u003cspan\u003e.\u003c/span\u003eauthga\u003cspan\u003e.\u003c/span\u003espringcloudaws\u003cspan\u003e.\u003c/span\u003econfig\u003cspan\u003e.\u003c/span\u003e\u003c/span\u003e\u003cspan\u003eAWSConfigConstants\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eORDER_QUEUE\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e@Slf4j\u003c/span\u003e\n\u003cspan\u003e@Controller\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eSimpleMessageConsumer\u003c/span\u003e \u003cspan\u003eimplements\u003c/span\u003e \u003cspan\u003eMessageConsumer\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003e@Override\u003c/span\u003e\n    \u003cspan\u003e@SqsListener\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003evalue \u003cspan\u003e=\u003c/span\u003e ORDER_QUEUE\u003cspan\u003e,\u003c/span\u003e deletionPolicy \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eSqsMessageDeletionPolicy\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eON_SUCCESS\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003econsume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e@NotificationMessage\u003c/span\u003e \u003cspan\u003eEvent\u003c/span\u003e event\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eevent \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            log\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einfo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Received order event for consumer 1: \u0026#34;\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e event\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\u003cli\u003eWe only need \u003ccode\u003e@SqsListener\u003c/code\u003e annotation that automatically makes our consume method get the messages from the queue.\u003c/li\u003e\u003cli\u003eWe also add \u003ccode\u003e@NotificationMessage\u003c/code\u003e annotation to have the correct deserialization and extract our Event from the SNS message because the SNS message is wrapped inside a \u003ccode\u003eMessage\u003c/code\u003e object.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"Setup-LocalStack-and-create-resources\"\u003eSetup LocalStack and create resources\u003c/h3\u003e\u003cp\u003eSetting up LocalStack is dead simple; you just need to use the docker-compose file below, and it will start SNS and SQS services locally. Add the \u003ccode\u003edocker compose\u003cspan\u003e.\u003c/span\u003eyml\u003c/code\u003e to the repository\u0026#39;s root directory. Start the LocalStack using: \u003ccode\u003edocker\u003cspan\u003e-\u003c/span\u003ecompose up\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eversion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;3.0\u0026#39;\u003c/span\u003e\n\n\u003cspan\u003eservices\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n\n  \u003cspan\u003elocalstack\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003eimage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e localstack/localstack\u003cspan\u003e:\u003c/span\u003elatest\n    \u003cspan\u003eenvironment\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003e-\u003c/span\u003e AWS_DEFAULT_REGION=eu\u003cspan\u003e-\u003c/span\u003ecentral\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\n      \u003cspan\u003e-\u003c/span\u003e EDGE_PORT=4566\n      \u003cspan\u003e-\u003c/span\u003e SERVICES=sqs\u003cspan\u003e,\u003c/span\u003esns\n    \u003cspan\u003eports\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003e\u0026#39;4566:4566\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce it is up and running, we can create the required AWS resources. We will create one SNS topic to which two SQS queues will be listening. The code to or publishing and listening is simple. Go to your command line, e.g., terminal, and execute the following commands.\u003c/p\u003e\u003cp\u003eTo create the topic:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eaws --endpoint-url\u003cspan\u003e=\u003c/span\u003ehttp://localhost:4566  sns create-topic  --name  order-created-topic\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo create the queues:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eaws --endpoint-url\u003cspan\u003e=\u003c/span\u003ehttp://localhost:4566  sqs create-queue  --queue-name  order-queue\naws --endpoint-url\u003cspan\u003e=\u003c/span\u003ehttp://localhost:4566  sqs create-queue  --queue-name  order-queue-2\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo subscribe the queues to the topic:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eaws --endpoint-url\u003cspan\u003e=\u003c/span\u003ehttp://localhost:4566 sns subscribe\n--topic-arn arn:aws:sns:eu-central-1:000000000000:order-created-topic\n--protocol sqs\n--notification-endpoint arn:aws:sqs:eu-central-1:000000000000:order-queue\n\naws --endpoint-url\u003cspan\u003e=\u003c/span\u003ehttp://localhost:4566 sns subscribe\n--topic-arn arn:aws:sns:eu-central-1:000000000000:order-created-topic\n--protocol sqs\n--notification-endpoint arn:aws:sqs:eu-central-1:000000000000:order-queue-2\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo verify you can list queues and subscriptions:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eaws --endpoint-url\u003cspan\u003e=\u003c/span\u003ehttp://localhost:4566  sqs list-queues\naws --endpoint-url\u003cspan\u003e=\u003c/span\u003ehttp://localhost:4566  sns list-subscriptions\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat\u0026#39;s it!\u003c/p\u003e\u003ch3 id=\"Verify-sending-and-receiving-of-events\"\u003eVerify sending and receiving of events\u003c/h3\u003e\u003cp\u003eRun the Spring Boot app:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003eClone the sample code from the repo. Go to the root directory.\u003c/li\u003e\u003cli\u003eUse Maven plugin to run your Spring Boot app using the command in the project directory.\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003ccode\u003emvn spring-boot:run\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe groundwork is complete now. With the app running, we can send messages to the Amazon SNS Topic and read those messages from the queues. In the repo, I have created a controller to trigger the publishing of events. If you download the sample app, you should be able to run it, and going to \u003ca href=\"http://localhost:8080/create-order\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttp://localhost:8080/create-order\u003c/a\u003e will trigger the publisher, which in turn will trigger the consumers. In the application logs, you should be able to see. This means that our producer code publishes the code to the SNS topic. The two queues that are subscribed to the topic receive those messages, and finally, the consumer receives those messages and prints the event.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eReceived order event \u003cspan\u003efor\u003c/span\u003e consumer \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\nEvent\u003cspan\u003e{\u003c/span\u003eeventId\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;386cca76-3669-4d36-b2db-01f388bbce5f\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e version\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;0\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\noccurredAt\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;2021-06-19T13:42:32.946781Z\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e data\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003eEventData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eorderId\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e9\u003c/span\u003ea002b95\u003cspan\u003e-\u003c/span\u003ef10b\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e428e-8\u003c/span\u003ed39\u003cspan\u003e-\u003c/span\u003ecae90d1e631d\u003cspan\u003e,\u003c/span\u003e\nowner\u003cspan\u003e=\u003c/span\u003eSampleProducer\u003cspan\u003e,\u003c/span\u003e eventType\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003eORDER_CREATED\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\nReceived order event \u003cspan\u003efor\u003c/span\u003e consumer \u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\nEvent\u003cspan\u003e{\u003c/span\u003eeventId\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;386cca76-3669-4d36-b2db-01f388bbce5f\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e version\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;0\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e occurredAt\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;2021-06-19T13:42:32.946781Z\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\ndata\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003eEventData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eorderId\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e9\u003c/span\u003ea002b95\u003cspan\u003e-\u003c/span\u003ef10b\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e428e-8\u003c/span\u003ed39\u003cspan\u003e-\u003c/span\u003ecae90d1e631d\u003cspan\u003e,\u003c/span\u003e owner\u003cspan\u003e=\u003c/span\u003eSampleProducer\u003cspan\u003e,\u003c/span\u003e eventType\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003eORDER_CREATED\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eLocalStack provides a simple and convenient way to simulate AWS services without having an actual AWS account. You can build applications using various AWS services like Amazon SNS, SQS, S3 DynamoDB, and many more.\u003c/p\u003e\u003cp\u003eIn this article, we have learned how to build a Spring Cloud Messaging app that utilizes LocalStack. We saw how Spring Cloud Messaging provides a layer of abstraction to create an Amazon SQS listener and SNS publisher with just a few lines of code. Furthermore, we saw how to use Amazon SNS and SQS to create an event-driven application.\u003c/p\u003e\u003cp\u003eYou can refer to the repository used in the article on \u003ca href=\"https://github.com/maniish-jaiin/spring-cloud-messaging-sample\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGithub\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn how to simulate AWS services locally using LocalStack with a Spring Boot application.",
      "date_published": "2021-08-05T14:53:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/node-16-support-now-available-in-actions/",
      "title": "Node 16 Support Now Available in Actions",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eAs our next-generation extensibility platform, designed to replace Rules \u0026amp; Hooks, our plan is to support every current and long-term supported Node version through Actions exclusively. \u003c/p\u003e\u003cp\u003eWe recently introduced Node 16 support in Actions. Node 16 is the \u003cem\u003e\u003ca href=\"https://nodejs.org/en/about/releases/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecurrent version published by Node\u003c/a\u003e\u003c/em\u003e. This version does not introduce any breaking changes.  \u003c/p\u003e\u003ch2 id=\"What-Does-This-Mean-for-Our-Developers-\"\u003eWhat Does This Mean for Our Developers?\u003c/h2\u003e\u003cp\u003eWe will continue to support Node 12 through the Long Term Support (LTS) end coming in April 2022 for all of our extensibility products - Actions, Rules, and Hooks.  However, we encourage developers to stay current in their Node version for security and compliance purposes.  \u003c/p\u003e\u003ch3 id=\"Developers-using-Actions\"\u003eDevelopers using Actions\u003c/h3\u003e\u003cp\u003eAll new Actions will be set to the Node 16 runtime by default. However, you do not need to migrate every Action immediately to Node 16.  \u003c/p\u003e\u003cp\u003eUnlike Rules and Hooks, Actions is designed to run actions of varying Node runtimes side by side. With Actions, you no longer need to migrate all code to a single, tenant-level Node runtime. Existing Actions can be upgraded to Node 16 by creating and \u003ca href=\"https://auth0.com/docs/actions/manage-versions\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edeploying a new version\u003c/a\u003e to Node 16. If needed, existing Actions built on Node 12 can be upgraded to Node 16 and reverted to Node 12.\u003c/p\u003e\u003ch3 id=\"Developers-using-legacy-extensibility-products\"\u003eDevelopers using legacy extensibility products\u003c/h3\u003e\u003cp\u003eOur legacy extensibility products (Rules and Hooks) will continue to support Node 12. Node 16 will only roll out to Actions.\u003c/p\u003e\u003cp\u003eWe strongly encourage developers using Rules and Hooks to migrate to Actions, wherever possible, to start taking advantage of the greatly \u003ca href=\"https://auth0.com/blog/introducing-auth0-actions/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eimproved developer experience\u003c/a\u003e that comes with Actions, such as an industry standard VS Code style editor, typescript, draft mode, version control, improved secret management, an expanded library of NPM modules, and more. \u003c/p\u003e\u003cp\u003eFor developers using Node 8, if there are Rules and Hooks that cannot be immediately migrated to Actions Node 16, at a minimum, update your code to Node 12. Node 8 reached the end of LTS back in December 2019 and since then has not been updated to address critical bugs, security fixes, patches, or other important updates.\u003c/p\u003e\u003cp\u003eWe want to hear from you. Please share any feedback on your experience with Actions and the Node 16 update in our \u003ca href=\"https://community.auth0.com/c/actions/91\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDeveloper Community\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Starting Aug 4, 2021, we are rolling out Node 16 as the default runtime for Actions.",
      "date_published": "2021-08-04T16:02:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/adding-auth0-rbac-authorization-to-a-ktor-api/",
      "title": "Adding Auth0 RBAC Authorization to a Ktor API",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIn the previous post, we created an Auth0 API to represent the Ktor HTTP API and an Auth0 application to allow the frontend application to authenticate users. This allowed us to query the backend API from the frontend application with a valid access token. We also updated the backend API to require a valid access token for the \u003ccode\u003e\u003cspan\u003eprotected\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003eadmin\u003c/code\u003e endpoints.\u003c/p\u003e\u003cp\u003eIn this post, we\u0026#39;ll complete the journey by enabling Role-Based Access Controls (RBAC) within Auth0 and restrict access to the \u003ccode\u003eadmin\u003c/code\u003e endpoint in our backend API to those users with the correct permissions.\u003c/p\u003e\u003ch2 id=\"RBAC-and-permissions\"\u003eRBAC and permissions\u003c/h2\u003e\u003cp\u003eWe start by enabling RBAC within our Auth0 API.\u003c/p\u003e\u003cp\u003eUnder the \u003cstrong\u003eSettings\u003c/strong\u003e tab in the API, switch the \u003cstrong\u003eEnable RBAC\u003c/strong\u003e and \u003cstrong\u003eAdd permissions in the Access Token\u003c/strong\u003e sliders to the on the setting. Doing so will ensure a \u003ccode\u003epermissions\u003c/code\u003e claim is added to the access token with any scopes that have been assigned to the logged-in user.\u003c/p\u003e\u003cp\u003eA detailed discussion on why scopes should not be used to grant permissions is presented in the post \u003ca href=\"https://auth0.com/blog/on-the-nature-of-oauth2-scopes/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOn The Nature of OAuth2\u0026#39;s Scopes\u003c/a\u003e. The summary is that a scope constrains the actions that an OAuth client \u003cem\u003emay\u003c/em\u003e attempt to perform on behalf of a user, but \u003cem\u003edoes not\u003c/em\u003e imply that the user has the permission to access any particular resource.\u003c/p\u003e\u003cp\u003eThis has some subtle but significant implications on the claims returned in an Auth0 access token.\u003c/p\u003e\u003cp\u003eWithout enabling the RBAC settings, any scope requested by the OAuth client and consented to by the user will be returned in the \u003ccode\u003escope\u003c/code\u003e claim. It doesn\u0026#39;t matter if that scope has been assigned to the user or not - it is returned regardless. It is then the responsibility of the OAuth resource server to allow or deny access to a given resource based on the user\u0026#39;s identity and the action being performed.\u003c/p\u003e\u003cp\u003eWhen RBAC is enabled, only scopes that have been requested by the client, \u003cem\u003eand\u003c/em\u003e consented to by the user, \u003cem\u003eand\u003c/em\u003e assigned to a user will be returned in the \u003ccode\u003escope\u003c/code\u003e claim. In this scenario, the resource server can assume the absence of a scope means the client did not request it, the user did not consent to it, or it has not been assigned to the user, and so can quickly deny access.\u003c/p\u003e\u003cp\u003eBy adding the \u003ccode\u003epermissions\u003c/code\u003e claim, each scope assigned to the user is calculated and included in the access token. The \u003ccode\u003epermissions\u003c/code\u003e claim is populated without asking for consent from the user, which supports more traditional RBAC style applications, where clients have delegated all the permissions of their users, and the users don\u0026#39;t pick and choose scopes with each login.\u003c/p\u003e\u003cp\u003eOur sample application will make use of the scopes in the \u003ccode\u003epermissions\u003c/code\u003e claim to determine access to the API.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/4ZpaxCFDvKa7It8aToFSBP/06e7bd6600e3146032475a399a0d068a/01_build-a-ktor-api-pt-3.png\" alt=\"RBAC\"/\u003e\n\u003cem\u003eEnabling RBAC and permissions in the access token.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eUnder the \u003cstrong\u003ePermissions\u003c/strong\u003e tab, define a new \u003cstrong\u003ePermission (Scope)\u003c/strong\u003e of \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eadmin\u003cspan\u003e-\u003c/span\u003emessages\u003c/code\u003e and a \u003cstrong\u003eDescription\u003c/strong\u003e of \u003cstrong\u003eThe ability to access the admin endpoint\u003c/strong\u003e. Click the \u003cstrong\u003eAdd\u003c/strong\u003e button to save the new permission:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1DJaaadYXA4vGKV9i9R8LK/4564b6449b1b1d190f2345638431b92d/02_build-a-ktor-api-pt-3.png\" alt=\"API\"/\u003e\n\u003cem\u003eCreating an API permission.\u003c/em\u003e\u003c/p\u003e\u003ch3 id=\"Creating-the-role\"\u003eCreating the role\u003c/h3\u003e\u003cp\u003eWe now create a role to hold the permissions required by our API. Click the \u003cstrong\u003eUser Management -\u0026gt; Roles\u003c/strong\u003e option and click the \u003cstrong\u003eCreate Role\u003c/strong\u003e button.\u003c/p\u003e\u003cp\u003eIn the \u003cstrong\u003eNew Role\u003c/strong\u003e dialog, enter a name of \u003cstrong\u003emessages-admin\u003c/strong\u003e, enter a description, and click the \u003cstrong\u003eCreate\u003c/strong\u003e button:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/7EQTp4sJS03bScEWno7kEa/a1c2586b32a480c4b166fb4ce5ba09b5/03_build-a-ktor-api-pt-3.png\" alt=\"Roles\"/\u003e\n\u003cem\u003eCreating a new role.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eUnder the \u003cstrong\u003ePermissions\u003c/strong\u003e tab click the \u003cstrong\u003eAdd Permissions\u003c/strong\u003e button. In the \u003cstrong\u003eAdd Permissions\u003c/strong\u003e dialog select the API we created earlier, select the \u003cstrong\u003eread:admin-messages\u003c/strong\u003e permission, and click the \u003cstrong\u003eAdd Permission\u003c/strong\u003e button:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/ZBB0FviUiLxmOzXoeDvJV/20ce7562521525551515e16e1c23bbe2/04_build-a-ktor-api-pt-3.png\" alt=\"Permissions\"/\u003e\n\u003cem\u003eAdding permissions to a role.\u003c/em\u003e\u003c/p\u003e\u003ch3 id=\"Assigning-the-role-to-a-user\"\u003eAssigning the role to a user\u003c/h3\u003e\u003cp\u003eFor the purposes of this demo, I\u0026#39;ll assume you have already \u003ca href=\"https://auth0.com/docs/users/create-users\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecreated an Auth0 user\u003c/a\u003e. I\u0026#39;ll also assume this user is linked to the application that was created earlier.\u003c/p\u003e\u003cp\u003eSelect the user, click the \u003cstrong\u003eRoles\u003c/strong\u003e tab, and click the \u003cstrong\u003eAssign Roles\u003c/strong\u003e button.\u003c/p\u003e\u003cp\u003eIn the \u003cstrong\u003eAdd Roles\u003c/strong\u003e dialog, select the \u003cstrong\u003emessages-admin\u003c/strong\u003e role and click the \u003cstrong\u003eAssign\u003c/strong\u003e button:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/6X6s3poUPbop1eG6LShtqM/b8147045f0f291e2e853b6f8027a1e74/05_build-a-ktor-api-pt-3.png\" alt=\"User\"/\u003e\n\u003cem\u003eAssigning a role to a user.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eAuth0 is now configured and ready to authenticate our frontend application. We can move on to updating our Ktor HTTP API to check for the presence of these permissions when accessing the \u003ccode\u003eadmin\u003c/code\u003e endpoint.\u003c/p\u003e\u003ch2 id=\"The-sample-application-code\"\u003eThe sample application code\u003c/h2\u003e\u003cp\u003eTo build the backend application, you\u0026#39;ll need to have JDK 11 or above, which is available from many sources, including \u003ca href=\"https://openjdk.java.net/install/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOpenJDK\u003c/a\u003e, \u003ca href=\"https://adoptopenjdk.net/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAdoptOpenJDK\u003c/a\u003e, \u003ca href=\"https://www.azul.com/downloads/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAzul\u003c/a\u003e, or \u003ca href=\"https://www.oracle.com/au/java/technologies/javase-jdk11-downloads.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eOracle\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe final code for the Ktor application can be found \u003ca href=\"https://github.com/mcasperson/Auth0Ktor\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e. The code discussed in each post is matched by a branch:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://github.com/mcasperson/Auth0Ktor/tree/starter\" target=\"_blank\" rel=\"noreferrer noopener\"\u003estarter\u003c/a\u003e \u003cul\u003e\u003cli\u003ethe base API with no authentication or authorization.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/mcasperson/Auth0Ktor/tree/add-authorization\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eadd-authorization\u003c/a\u003e \u003cul\u003e\u003cli\u003ethe API requiring a valid access token for the \u003ccode\u003e\u003cspan\u003eprotected\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003eadmin\u003c/code\u003e endpoints.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/mcasperson/Auth0Ktor/tree/add-rbac\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eadd-rbac\u003c/a\u003e \u003cul\u003e\u003cli\u003ethe API requiring special permissions to access the \u003ccode\u003eadmin\u003c/code\u003e endpoint. This branch is discussed in this post.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe frontend application code can be found \u003ca href=\"https://github.com/auth0-sample-gallery/spa_react_javascript_hello-world\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"Updating-the-API\"\u003eUpdating the API\u003c/h2\u003e\u003cp\u003eThe backend API must now be updated to ensure the \u003ccode\u003eadmin\u003c/code\u003e endpoint requires the access token, including the \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eadmin\u003cspan\u003e-\u003c/span\u003emessages\u003c/code\u003e permission. The complete code for the \u003ccode\u003esrc\u003cspan\u003e/\u003c/span\u003eApplication\u003cspan\u003e.\u003c/span\u003ekt\u003c/code\u003e file is shown below:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epackage\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003ematthewcasperson\n\n\u003cspan\u003eimport\u003c/span\u003e com\u003cspan\u003e.\u003c/span\u003eauth0\u003cspan\u003e.\u003c/span\u003ejwk\u003cspan\u003e.\u003c/span\u003eJwkProviderBuilder\n\u003cspan\u003eimport\u003c/span\u003e io\u003cspan\u003e.\u003c/span\u003ektor\u003cspan\u003e.\u003c/span\u003eapplication\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e io\u003cspan\u003e.\u003c/span\u003ektor\u003cspan\u003e.\u003c/span\u003eauth\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e io\u003cspan\u003e.\u003c/span\u003ektor\u003cspan\u003e.\u003c/span\u003eauth\u003cspan\u003e.\u003c/span\u003ejwt\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e io\u003cspan\u003e.\u003c/span\u003ektor\u003cspan\u003e.\u003c/span\u003efeatures\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e io\u003cspan\u003e.\u003c/span\u003ektor\u003cspan\u003e.\u003c/span\u003ehttp\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e io\u003cspan\u003e.\u003c/span\u003ektor\u003cspan\u003e.\u003c/span\u003eresponse\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e io\u003cspan\u003e.\u003c/span\u003ektor\u003cspan\u003e.\u003c/span\u003erouting\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\n\u003cspan\u003eimport\u003c/span\u003e java\u003cspan\u003e.\u003c/span\u003eutil\u003cspan\u003e.\u003c/span\u003econcurrent\u003cspan\u003e.\u003c/span\u003eTimeUnit\n\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eargs\u003cspan\u003e:\u003c/span\u003e Array\u003cspan\u003e\u0026lt;\u003c/span\u003eString\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Unit \u003cspan\u003e=\u003c/span\u003e io\u003cspan\u003e.\u003c/span\u003ektor\u003cspan\u003e.\u003c/span\u003eserver\u003cspan\u003e.\u003c/span\u003enetty\u003cspan\u003e.\u003c/span\u003eEngineMain\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eargs\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003evalidateCreds\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecredential\u003cspan\u003e:\u003c/span\u003e JWTCredential\u003cspan\u003e,\u003c/span\u003e permission\u003cspan\u003e:\u003c/span\u003e String\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e JWTPrincipal\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e containsAudience \u003cspan\u003e=\u003c/span\u003e credential\u003cspan\u003e.\u003c/span\u003epayload\u003cspan\u003e.\u003c/span\u003eaudience\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eSystem\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetenv\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;AUDIENCE\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e containsScope \u003cspan\u003e=\u003c/span\u003e permission\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisNullOrBlank\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e\n            credential\u003cspan\u003e.\u003c/span\u003epayload\u003cspan\u003e.\u003c/span\u003eclaims\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;permissions\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003easArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eString\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ejava\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003epermission\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtainsAudience \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e containsScope\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eJWTPrincipal\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecredential\u003cspan\u003e.\u003c/span\u003epayload\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003efun\u003c/span\u003e Application\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emodule\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003eval\u003c/span\u003e jwkProvider \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eJwkProviderBuilder\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eSystem\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetenv\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;ISSUER\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecached\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e10\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e24\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e TimeUnit\u003cspan\u003e.\u003c/span\u003eHOURS\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erateLimited\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e10\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e TimeUnit\u003cspan\u003e.\u003c/span\u003eMINUTES\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003einstall\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eAuthentication\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ejwt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003everifier\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ejwkProvider\u003cspan\u003e,\u003c/span\u003e System\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetenv\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;ISSUER\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            validate \u003cspan\u003e{\u003c/span\u003e credential \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003evalidateCreds\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecredential\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003ejwt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;auth0-admin\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003everifier\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ejwkProvider\u003cspan\u003e,\u003c/span\u003e System\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetenv\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;ISSUER\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            validate \u003cspan\u003e{\u003c/span\u003e credential \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003evalidateCreds\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecredential\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;read:admin-messages\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003einstall\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eCORS\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eanyHost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003emethod\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eHttpMethod\u003cspan\u003e.\u003c/span\u003eOptions\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003emethod\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eHttpMethod\u003cspan\u003e.\u003c/span\u003eGet\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;authorization\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        allowCredentials \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n        allowNonSimpleContentTypes \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n\n    \u003cspan\u003e}\u003c/span\u003e\n\n\n    routing \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/messages/public\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            call\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erespondText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;{\u0026#34;message\u0026#34;: \u0026#34;The API doesn\u0026#39;t require an access token to share this message.\u0026#34;}\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                contentType \u003cspan\u003e=\u003c/span\u003e ContentType\u003cspan\u003e.\u003c/span\u003eApplication\u003cspan\u003e.\u003c/span\u003eJson\n            \u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    routing \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eauthenticate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;auth0\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/messages/protected\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                call\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erespondText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;{\u0026#34;message\u0026#34;: \u0026#34;The API successfully validated your access token.\u0026#34;}\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                    contentType \u003cspan\u003e=\u003c/span\u003e ContentType\u003cspan\u003e.\u003c/span\u003eApplication\u003cspan\u003e.\u003c/span\u003eJson\n                \u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    routing \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eauthenticate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;auth0-admin\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/messages/admin\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                call\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erespondText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;{\u0026#34;message\u0026#34;: \u0026#34;The API successfully recognized you as an admin.\u0026#34;}\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                    contentType \u003cspan\u003e=\u003c/span\u003e ContentType\u003cspan\u003e.\u003c/span\u003eApplication\u003cspan\u003e.\u003c/span\u003eJson\n                \u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0026#39;s highlight the changes required from the code presented in the previous blog post.\u003c/p\u003e\u003cp\u003eWe\u0026#39;ve updated the \u003ccode\u003evalidateCreds\u003c/code\u003e function to include an optional \u003ccode\u003epermission\u003c/code\u003e parameter. If a permission has been supplied, we ensure it is present in the \u003ccode\u003epermissions\u003c/code\u003e claim on the access token:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003evalidateCreds\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecredential\u003cspan\u003e:\u003c/span\u003e JWTCredential\u003cspan\u003e,\u003c/span\u003e permission\u003cspan\u003e:\u003c/span\u003e String\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e JWTPrincipal\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e containsAudience \u003cspan\u003e=\u003c/span\u003e credential\u003cspan\u003e.\u003c/span\u003epayload\u003cspan\u003e.\u003c/span\u003eaudience\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eSystem\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetenv\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;AUDIENCE\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e containsScope \u003cspan\u003e=\u003c/span\u003e permission\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisNullOrBlank\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e\n            credential\u003cspan\u003e.\u003c/span\u003epayload\u003cspan\u003e.\u003c/span\u003eclaims\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;permissions\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003easArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eString\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ejava\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003epermission\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003econtainsAudience \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e containsScope\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eJWTPrincipal\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecredential\u003cspan\u003e.\u003c/span\u003epayload\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe then define a second authentication mechanism called \u003ccode\u003eauth0\u003cspan\u003e-\u003c/span\u003eadmin\u003c/code\u003e requiring the permission \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eadmin\u003cspan\u003e-\u003c/span\u003emessages\u003c/code\u003e in order to pass validation:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003einstall\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eAuthentication\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e// ...\u003c/span\u003e\n        \u003cspan\u003ejwt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;auth0-admin\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003everifier\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ejwkProvider\u003cspan\u003e,\u003c/span\u003e System\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetenv\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;ISSUER\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            validate \u003cspan\u003e{\u003c/span\u003e credential \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003evalidateCreds\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecredential\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;read:admin-messages\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFinally, the route exposing the \u003ccode\u003eadmin\u003c/code\u003e endpoint is updated to use the new \u003ccode\u003eauth0\u003cspan\u003e-\u003c/span\u003eadmin\u003c/code\u003e authentication mechanism:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e    routing \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eauthenticate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;auth0-admin\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/api/messages/admin\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                call\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erespondText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;{\u0026#34;message\u0026#34;: \u0026#34;The API successfully recognized you as an admin.\u0026#34;}\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                    contentType \u003cspan\u003e=\u003c/span\u003e ContentType\u003cspan\u003e.\u003c/span\u003eApplication\u003cspan\u003e.\u003c/span\u003eJson\n                \u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Inspecting-the-access-token\"\u003eInspecting the access token\u003c/h2\u003e\u003cp\u003eBy capturing the network traffic sent by the frontend (as we did in the previous post), we can copy the access token to \u003ca href=\"https://jwt.io\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ejwt.io\u003c/a\u003e to inspect the JWT contents.\u003c/p\u003e\u003cp\u003eNote that the token includes the \u003ccode\u003epermissions\u003c/code\u003e claim, which defines the \u003ccode\u003eread\u003cspan\u003e:\u003c/span\u003eadmin\u003cspan\u003e-\u003c/span\u003emessages\u003c/code\u003e permission:\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/eFammxKcqhwLSKDPgfxRU/8b24e9b2c662143d983b4033aef61197/Assigning_the_role_to_a_user.jpg\" alt=\"Inspecting the access token\"/\u003e\n\u003cem\u003eA parsed JWT token.\u003c/em\u003e\u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eIn this post, we completed our three-part journey creating an HTTP API with Ktor, requiring authentication via Auth0, and finally enabling RBAC. By embedding the permissions assigned to a user in the \u003ccode\u003epermissions\u003c/code\u003e scope and verifying the presence of a known permission for any queries to the \u003ccode\u003eadmin\u003c/code\u003e endpoint, we can be sure that only authorized users can access the restricted endpoints in our HTTP API.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Learn how to add Auth0 RBAC authorization to Ktor HTTP API endpoints",
      "date_published": "2021-08-03T15:12:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/time-to-prepare-be-ready-to-scale-your-workforce-and-app/",
      "title": "Time to Prepare: Be Ready to Scale Your Workforce and App",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIf you sped through your digital road map during the pandemic and are looking to fill security and privacy gaps right now, go back and check out my earlier posts:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://auth0.com/blog/accelerated-your-road-map-go-fix-workforce-and-app-security\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAccelerated Your Road Map? Go Fix Workforce and App Security\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://auth0.com/blog/workforce-and-app-privacy-have-changed-so-should-you\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eWorkforce and App Privacy Have Changed, So Should You\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis post is about making the shift from reaction to preparation so that you are ready for the next moment that requires speed – and set up to scale.\u003c/p\u003e\u003ch2 id=\"Find-Your-Balance\"\u003eFind Your Balance\u003c/h2\u003e\u003cp\u003eIn all of these posts, we mention speed and imply pressure. There is always going to be a business reason to get an app to market as quickly as possible. You will discover vulnerabilities that require your immediate attention. And regulations will set deadlines for you. \u003c/p\u003e\u003cp\u003eSo there is always going to be more you could do to improve security for your customers, your business, and the rest of the internet. Even for veteran security professionals, the pandemic was a reminder that we still need to pick and choose priorities. If you have an internal security team, lean into their expertise. Give them the time and space to guide you on priorities. Listen to their assessments of risk and let them set a pace that works for your business.\u003c/p\u003e\u003cp\u003eLonger-term security and privacy improvements can have big payoffs. Like the previous posts, these things require action. You’re also going to need to support your existing security team or create one. By support, I mean backing conversations about risks with budget for tools, external vendors, and hiring internal talent.\u003c/p\u003e\u003cp\u003eIf you don’t currently have security or privacy teams, we’ll cover a bit of advice on what to look for as well.\u003c/p\u003e\u003ch2 id=\"Consumers-Expect-and-Deserve-Strong-Security-and-Privacy\"\u003eConsumers Expect and Deserve Strong Security and Privacy\u003c/h2\u003e\u003cp\u003eLet’s also set some context.\u003c/p\u003e\u003cp\u003eThere was a time when businesses leaned heavily into just shipping the product. Speed often won over security or privacy.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eConsumers are telling us that time is over.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eIn a \u003ca href=\"https://www.mckinsey.com/business-functions/risk/our-insights/the-consumer-data-opportunity-and-the-privacy-imperative\" target=\"_blank\" rel=\"noreferrer noopener\"\u003erecent global survey\u003c/a\u003e, McKinsey found that 87% of consumer respondents said security practice concerns would mean they wouldn’t do business with a company, and 71% would stop doing business if it gave away sensitive data without their permission. \u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eThe more secure and private app is now the one that keeps and attracts customers. \u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"Security--Longer-Term-Planning\"\u003eSecurity: Longer-Term Planning\u003c/h2\u003e\u003cp\u003eIf you’re looking to make a dramatic improvement in your cybersecurity, these best practices will help get you there.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eIncrease pen test frequency.\u003c/strong\u003e Penetration testing (pen testing) includes hiring an external vendor to test your application and site for vulnerabilities and provide you with a report cataloged by severity. Many companies do this once a year and call it good. In today’s evolving threat environment, that’s not enough. If you can up your pen testing to every quarter — and take action on what you learn — you’ll see a big increase in security. Adding a pen test after every major operating system upgrade, library update, or major code push will do even more.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eImprove your software development life cycle (SLDC).\u003c/strong\u003e Many shops are still doing security after the product is completely coded, but this creates an automatic security backlog that can not only slow getting your product to market it can put pressure on your execs to allow unnecessary risks into the wild. Involving security and privacy teams as software is being developed allows them to raise questions that influence architecture before burning hours of engineering time. Few people like to put hours and hours into something only to have to take it apart, so your devs are rarely pleased to see this analysis tacked on at the end of the SLDC., which leads me to my next point.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eEncourage ownership and collaboration between devs and security.\u003c/strong\u003e How you introduce the idea of static and dynamic code analysis as well as overall participation of security in the SLDC matters. Explaining that humans are fallible, so all code is going to have vulnerabilities, and there are going to be remote code executions (RCEs) is a good place to start. As a dev, they don’t want RCEs creating headaches, and they don’t want to get paged and work nights because problems have been discovered and exploited. You can encourage ownership by asking your dev team to review the security team handling analyses. Ultimately, this can go a long way towards establishing security-dev collaboration, leading to apps that get to market more securely as well quickly.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eCreate a golden image.\u003c/strong\u003e A \u003ca href=\"https://www.cisecurity.org/cis-hardened-images/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003egolden Image\u003c/a\u003eis a single machine image that has been tested and hardened. When there is an operating system or library update, the AMI gets updated and tested. This allows you to see how your customers might be impacted before you push that patch update out to thousands of users. It also provides an approved starting point for new business units or apps. The time it takes to create and maintain this image pays off in protected services and reduced downtimes. Using \u003ca href=\"https://en.wikipedia.org/wiki/Hardening_(computing\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehardened\u003c/a\u003e) images also increases reliability and consistency.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Hiring-Security-Talent\"\u003eHiring Security Talent\u003c/h2\u003e\u003cp\u003eSecurity can seem like an area that is purely technical — and your team does need to have a deep understanding of your product and how it works, but sooner or later, a human is going to touch or use your product. Strong security talent needs to understand human behavior from bad actors to customers. Your chief information security officer (CISO) also needs to be able to explain technical risks and benefits to non-technical executive teams.\u003c/p\u003e\u003cp\u003eThere’s a cybersecurity talent shortage globally. According to an International Information System Security Certification Consortium (ISC)² \u003ca href=\"https://www.isc2.org/Research/Workforce-Study#\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ereport\u003c/a\u003e, that shortage shrank slightly during the pandemic, from 4 million open jobs in 2019 to 3.1 million. You’re going to need to compete for talent.\u003c/p\u003e\u003cp\u003eYour new CISO also needs to understand your industry because threats are often industry-specific. Here are some questions to ask your hiring team when considering a potential candidate:\u003c/p\u003e\u003cul\u003e\u003cli\u003eAre they passionate about not only security but also your company?\u003c/li\u003e\u003cli\u003eDo they have experience in your industry? If not, how adept are they at cross-applying knowledge?\u003c/li\u003e\u003cli\u003eAreas of expertise? If you need them to be a generalist, do they understand how to source third-party support (and are you willing to fund that support)?\u003c/li\u003e\u003cli\u003eDo they welcome diversity?\u003c/li\u003e\u003cli\u003eDo they contribute to open source security?\u003c/li\u003e\u003cli\u003eDo they regularly attend and speak at conferences?\u003c/li\u003e\u003cli\u003eCan they explain the business case for your product?\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Privacy--Longer-Term-Planning\"\u003ePrivacy: Longer-Term Planning\u003c/h2\u003e\u003cp\u003eConsumers are demanding a secure and contextual private experience — and we’re seeing regulators back them up with a variety of data privacy regulations.\u003c/p\u003e\u003cp\u003e\u0026#34;\u003cem\u003eBy industry, consumers are most comfortable sharing data with providers in healthcare and financial services, though no industry reached a trust rating of 50 percent for data protection,\u003c/em\u003e” notes \u003ca href=\"https://www.mckinsey.com/business-functions/risk/our-insights/the-consumer-data-opportunity-and-the-privacy-imperative\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMcKinsey\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThis isn’t one of those things that is going away, says Auth0’s Vice President of Privacy Lucy McGrath. Globally, we’re seeing consumer groups becoming more vocal about data privacy concerns and violations with filings against companies like \u003ca href=\"https://www.beuc.eu/publications/consumer-groups-file-complaint-against-whatsapp-unfairly-pressuring-users-accept-its/html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eWhat’sApp\u003c/a\u003e. \u003c/p\u003e\u003cp\u003e“\u003cem\u003eData privacy is going to continue to evolve with consumers’ awareness and expectations,\u003c/em\u003e” says Lucy. “\u003cem\u003eTo adapt, companies are going to have to think beyond just meeting the bare minimum of legal requirements. They need to ask themselves hard questions about what protections are appropriate given the context and the humans you’re interacting with and work through the answers. We need to be building proactive privacy programs that reflect these data privacy conversations. Creating consumer trust requires listening and deliberate action.\u003c/em\u003e”\u003c/p\u003e\u003cp\u003eStart with these questions:\u003c/p\u003e\u003cul\u003e\u003cli\u003eHave I taken the time to understand the relationship my digital properties (app, site) create with my customers? How do I want them to feel at login? What about as they continue through my app or site?\u003c/li\u003e\u003cli\u003eAm I encouraging or discouraging trust by how I gather consent and data?\u003c/li\u003e\u003cli\u003eHave I created a transparent customer experience (CX) with clear consent and options?\u003c/li\u003e\u003cli\u003eIf I am really honest with myself, do I need to change something? Do I really need this data?\u003c/li\u003e\u003cli\u003eWho are my customers? What does privacy mean to them in the context of my services?\u003c/li\u003e\u003cli\u003eDo I have appropriate basic security and data governance processes in place?\u003c/li\u003e\u003cli\u003eHave I invested extra resources and time to protect the most sensitive/high-risk data such as health, financial, religious, or sexual orientation information?\u003c/li\u003e\u003cli\u003eDo I have any customers in regulated jurisdictions such as the European Union (EU) or California? If so, when was the last time I checked in with my legal counsel to make sure I’m in line with current requirements?\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Provide-Cues-for-Safety-and-Trust\"\u003eProvide Cues for Safety and Trust\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://www.wired.com/story/apple-app-privacy-labels/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eApple’s nutrition labels for data privacy\u003c/a\u003e make good on efforts that have been around since the 2010s. If your new app is going to be in the App Store, Apple requires that you report publicly on data you’re using to track your customers, data linked to them, and data gathered but not linked to them. Even though Apple is relying on app developers to self-report, the labels increase consumer awareness and expectation, says Lucy. Given Apple’s size ($274.5 billion reported revenue in 2020 makes it the world’s largest company), these nutrition labels signal that data privacy is now an everyday consumer concern.\u003c/p\u003e\u003cp\u003e“\u003cem\u003eBusinesses who don’t respond could miss out\u003c/em\u003e”, says Lucy. “\u003cem\u003eThe threats of data privacy fines and unhappy customers are real, but so is the opportunity to create customer experiences (CX) that drive brand loyalty. The entire tech industry is coming together to work on these data privacy challenges. Companies that act on the side of the consumer stand out.\u003c/em\u003e”\u003c/p\u003e\u003ch2 id=\"Hiring-Data-Privacy-Talent\"\u003eHiring Data Privacy Talent\u003c/h2\u003e\u003cp\u003eLike security, data privacy professionals need to understand and express the intersection of humans and technology. They need to be able to communicate risks and benefits across an entire organization, with an emphasis on engineering, marketing, and senior leadership. Critical and analytical thinking, empathy, and consideration of different motivations and perspectives are key. Technical knowledge around privacy laws can be taught, but an ability to engage, listen and understand the context of the business and their customers is essential. Privacy isn’t “done” by privacy professionals - they support all parts of the business to build privacy protections into their individual business processes.\u003c/p\u003e\u003cp\u003eLucy recommends that you ask candidates questions to show how they think about privacy issues in the context of the businesses in which they work. Examples of such questions include: \u003c/p\u003e\u003cul\u003e\u003cli\u003eHow would you demonstrate the value of good privacy practices to the chief financial officer (CFO)?\u003c/li\u003e\u003cli\u003eHow do you respond to the statement: privacy slows the business down?\u003c/li\u003e\u003cli\u003eWhat can you do to support developers to integrate privacy controls into their development lifecycle?\u003c/li\u003e\u003cli\u003eProvide examples of when you have translated legal obligations into plain English requirements that the business can implement?\u003c/li\u003e\u003cli\u003eWhich company does privacy well? Why? How would you implement similar standards here?\u003c/li\u003e\u003cli\u003eWhat are the key privacy risks that need to be prioritized? What actions are required to mitigate these risks?\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"You-re-Helping-Make-the-Internet-Safer\"\u003eYou’re Helping Make the Internet Safer\u003c/h2\u003e\u003cp\u003eThank you for checking out this series. One of the things that came up while working on this content is how the pandemic has made everything even more connected. The \u003ca href=\"https://auth0.com/resources/whitepapers/state-of-security-identity-report\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethreat landscape\u003c/a\u003e and regulatory requirements can seem overwhelming, but taking the time to secure your personal data, your customer’s data, and your businesses make it harder for bad actors.\u003c/p\u003e\u003cp\u003eIdentity can be a weak spot for both security and privacy if it’s not handled by experts. A strong Customer Identity Access Management (CIAM) solution like Auth0 can increase your security, support your data privacy strategy, and comes with certifications for various compliance requirements like \u003ca href=\"https://auth0.com/blog/what-is-iso-27001-2013-a-guide-for-businesses/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eISO 27001:2013\u003c/a\u003e and \u003ca href=\"https://auth0.com/blog/what-is-iso-27018-2019-everything-executives-need-to-know/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eISO 27018:2019\u003c/a\u003e and \u003ca href=\"https://auth0.com/blog/the-csa-star-program-a-business-guide-to-certification/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCSA Star\u003c/a\u003e. If you’d like to learn more about how Auth0 can help make your business more secure and stay ahead of your customers’ evolving expectations, please \u003ca href=\"https://auth0.com/contact-us?place=header\u0026amp;type=button\u0026amp;text=contact%20sales\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ereach out to the team at Auth0\u003c/a\u003e.\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eAuth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "The consumer speaks — how readiness to scale wins the security and privacy battle for the customer",
      "date_published": "2021-07-30T16:32:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/latam-response-to-rapid-digital-change/",
      "title": "LATAM Response to Rapid Digital Change",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eThe market in Latin America is growing faster than ever, with new venture capital deals nearly doubling to 488 between 2017 and 2020, according to \u003ca href=\"https://www.bloomberg.com/news/articles/2021-03-16/latin-american-startups-had-record-venture-capital-deals-in-2020\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eBloomberg\u003c/a\u003e. Beyond VC, a \u003ca href=\"https://publications.iadb.org/publications/english/document/Tecnolatinas-2021-The-LAC-Startup-Ecosystem-Comes-of-Age.pdf\" target=\"_blank\" rel=\"noreferrer noopener\"\u003estudy by IDB lab\u003c/a\u003e revealed that the tech-enabled startup market hit a valuation of more than $220 billion USD in 2020.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/Gz6t31FLxbPc7r8T996gE/caed742f057acf90192df17560dbf527/Latam11.jpg\" alt=\"LATAM\"/\u003e\u003c/p\u003e\u003cp\u003eGlobally, the pandemic has \u003ca href=\"https://auth0.com/blog/how-brick-and-mortar-approaches-improve-digital-experiences/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eaccelerated digital road maps across industries\u003c/a\u003e and businesses now have to respond to changes in digital expectations and buying patterns.\n\u003c/p\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Person\" itemprop=\"author\"\u003e\u003cp\u003e“Companies cannot predict exactly what their business and customers will need tomorrow, especially in response to today’s rapidly changing digital environment.”\u003c/p\u003e\u003cp\u003eGabriel Camargo\u003c/p\u003e\u003cp\u003eProduct Director\u003c/p\u003e\u003cp\u003eCLM\u003c/p\u003e\u003c/div\u003e\u003cp\u003ePartnering with \u003ca href=\"https://auth0.com/blog/auth0-expands-global-partner-network-in-latin-america-with-clm/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCLM\u003c/a\u003e on distribution in Latin America (LATAM) extends Auth0’s reach into Brazil, Colombia, Ecuador, and Peru.\u003c/p\u003e\u003cp\u003eOver the years of working within Latin America, we’ve learned that \u003ca href=\"https://auth0.com/blog/building-an-identity-solution-quantity-doesnt-equal-quality\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eidentity expertise\u003c/a\u003e and \u003ca href=\"https://auth0.com/blog/can-your-identity-solution-grow-with-your-company\" target=\"_blank\" rel=\"noreferrer noopener\"\u003escalability\u003c/a\u003e are two critical areas of concern for businesses in the region. You can check out our earlier posts in this series for details, but here, we wanted to look more closely at how we were able to help two companies within the region.\u003c/p\u003e\u003ch2 id=\"Naranja---From-Leading-Credit-Card-Issuer-in-Argentina--To-Complete-Consumer-Ecosystem\"\u003eNaranja — From Leading Credit Card Issuer in Argentina, To Complete Consumer Ecosystem\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://auth0.com/case-studies/naranja/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eFintech leader Naranja\u003c/a\u003e has been providing credit cards to the Argentinian market for over 30 years. In that time, they’ve grown to cover over 5 million customers by keeping those customers’ needs their top priority. As they grew, Naranja also began to integrate additional verticals into their business model. Pretty soon, they were offering payment services, financing, travel, media, and other services beyond their credit card programs.\u003c/p\u003e\u003cp\u003eAs they added these verticals, Naranja’s head of engineering Javier Voos soon realized they would need to consolidate their identity solution to cover all aspects of their growing ecosystem. He knew that in order to continue putting the customer experience first, they would need to find the right IDaaS provider that would be able to scale along with their planned expansion.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=kqouiuVk07Q\u0026amp;feature=emb_imp_woyt\" target=\"_blank\" rel=\"noreferrer noopener\"\u003elink to video\u003c/a\u003e\u003c/p\u003e\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kqouiuVk07Q\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Person\" itemprop=\"author\"\u003e\u003cp\u003e“The main idea behind the Naranja ecosystem is to provide the best experience to our customers, making sure that our digital platform provides all the resources that an online business needs for success, and hence support the ecosystem evolution.”\u003c/p\u003e\u003cp\u003eJavier Voos\u003c/p\u003e\u003cp\u003eHead of Engineerin\u003c/p\u003e\u003cp\u003eNaranja\u003c/p\u003e\u003c/div\u003e\u003cp\u003eVoos’ priority was to find a platform that provided secure APIs for identity so they could focus their expansion efforts on B2B services alongside their expanded consumer offerings. Finding Auth0 meant that his team could implement one identity solution that would allow both B2B and B2C customers access to the platforms they needed access to while ensuring data privacy and a low-friction user experience.\n\u003c/p\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Person\" itemprop=\"author\"\u003e\u003cp\u003e“Auth0 gave our company the tools to secure the access to our API for first- and third-party consumers, in a way that can scale through time and put us in a better position to ally with new partners and work our way to a fully functional Naranja API Market.”\u003c/p\u003e\u003cp\u003eDanilo Asis\u003c/p\u003e\u003cp\u003eSolution Architect\u003c/p\u003e\u003cp\u003eNaranja\u003c/p\u003e\u003c/div\u003e\u003ch2 id=\"WABI---South-America-s-E-Commerce-Portal\"\u003eWABI — South America’s E-Commerce Portal\u003c/h2\u003e\u003cp\u003eWith a half-dozen offerings already on offer, \u003ca href=\"https://auth0.com/case-studies/wabipay/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eWABI\u003c/a\u003e is looking to the future. Their ambitious goal is to become Latin America’s go-to e-commerce portal. Their offerings already include WABI, a smartphone-based grocery service; Wabipay, an e-wallet app; and four additional applications. The end-goal WABI envisions is for customers to log in one time and have access to a complete, end-to-end e-commerce experience. They’ll be able to shop, pay, and track delivery all in one place.\u003c/p\u003e\u003cp\u003eJuan Manuel Mingo, former WABI Business Manager, sums up the hurdle they faced when it came to identity and customer authentication, “We had different platforms with different user registration processes,” he says. “Our aim was to unify all the user registration of the different platforms in order to get a better user experience and to have a more organized user database.” The disjointed customer experience was the first thing WABI knew they would have to solve before they could continue growing and expanding their e-commerce ecosystem. \u003c/p\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Person\" itemprop=\"author\"\u003e\u003cp\u003e“Our endgame is that you enter the ecosystem through Wabi. You log in to Wabi, order your things, and when you want to pay, you simply go to WabiPay, and you’re already logged in.”\u003c/p\u003e\u003cp\u003eFrederico Galli\u003c/p\u003e\u003cp\u003eGeneral Manager\u003c/p\u003e\u003cp\u003eWABI\u003c/p\u003e\u003c/div\u003e\u003cp\u003eLike Naranja, WABI has always had a customer-first attitude. That meant that customer-facing features like single sign-on were top priorities. As Frederico Galli stated, their endgame is for customers to sign in once and have access to the entire ecosystem of WABI offerings. Not only that, but with further expansion plans in the works, they needed an identity solution that was with them for the long haul. Juan Manual Mingo put it like this, “WABI is scalable, and we need a partner that is, too. We believe Auth0 will support us in getting there.”\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/P45m9X6Z8ag9oOTv8R4kW/cc92f6325cb89fd84f233aa6c6992218/Latam12.jpg\" alt=\"LATAM\"/\u003e\u003c/p\u003e\u003ch2 id=\"Learn-how-Auth0-can-help-your-business\"\u003eLearn how Auth0 can help your business\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://www.forbesargentina.com/editorial/la-increible-historia-auth0-cliente-us-27-quinto-unicornio-hoy-vale-us-1100-n1352\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eArgentinian talent Eugenio Pace and Matias Wolowski\u003c/a\u003e founded Auth0, so we know the ins and outs of the South American market. When you’re ready to bring your identity solution in line with your broader organizational expansion goals, reach out to our \u003ca href=\"https://auth0.com/contact-us\" target=\"_blank\" rel=\"noreferrer noopener\"\u003emarket experts\u003c/a\u003e to start the discussion about how we can help.\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eAuth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Why Naranja and Wabi turned to Auth0 to ensure identity expertise and scaling",
      "date_published": "2021-07-30T12:45:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/a-complete-guide-to-lombok/",
      "title": "A Complete Guide to Lombok",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eJava is a great but verbose language. You may be ending up writing many lines of code even to achieve the most common goals. Plus, it definitely involves repetitive code, like getters and setters. This leads to a huge amount of boilerplate and avoidable code. Not only does this add nothing to the business logic of your application, but writing it is an unnecessarily boring and time-consuming process. This is why you should start employing tools and libraries to make you more productive by avoiding this. That’s where Lombok comes into play!\u003c/p\u003e\u003cp\u003eThis Java library provides you with several annotations aimed at avoiding writing Java code known to be repetitive and/or boilerplate. Project Lombok works by plugging into your build process. Then, it will auto-generate the Java bytecode into your \u003cem\u003e.class\u003c/em\u003e files required to implement the desired behavior, based on the annotations you used. Thus, each annotation offered by Project Lombok allows you to skip writing methods and logic you would like to avoid, like constructors, equals, and hash code functions. This will save you a lot of time and let you focus on the business logic of your project. Plus, you will be able to keep your codebase smaller, cleaner, and easier to be read and maintained.\u003c/p\u003e\u003cp\u003eFirst, we will see what Project Lombok is and how it works. Then, we will study the most common and relevant Lombok’s annotations, understanding what the most important ones are, where, and how to use them. Next, it will be time to see how to integrate it in your IDE (\u003ca href=\"https://en.wikipedia.org/wiki/Integrated_development_environment\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eIntegrated Development Environment\u003c/a\u003e) and why you should not be afraid of using it.\u003c/p\u003e\u003ch2 id=\"Prerequisites\"\u003ePrerequisites\u003c/h2\u003e\u003cp\u003eThis is the list of all the prerequisites to replicate the examples that will be shown next:\u003c/p\u003e\u003cul\u003e\u003cli\u003eJava \u0026gt;= 1.8\u003c/li\u003e\u003cli\u003eGradle \u0026gt;= 4.x or Maven 3.6.x\u003c/li\u003e\u003cli\u003eProject Lombok \u0026gt;= 1.18.20\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"What-is-Lombok\"\u003eWhat is Lombok\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://projectlombok.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eProject Lombok\u003c/a\u003e (from now on, \u003cem\u003eLombok\u003c/em\u003e) is an annotation-based Java library that allows you to reduce boilerplate code. Lombok offers various annotations aimed at replacing Java code that is well known for being boilerplate, repetitive, or tedious to write. For example, by using Lombok, you can avoid writing constructors with no arguments, \u003ccode\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, and \u003ccode\u003e\u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e methods by simply adding a few annotations. The magic happens during the compile-time when the library injects the bytecode representing the desired and boilerplate code into your \u003cem\u003e.class\u003c/em\u003e files. Plus, as we will see, the library can be plugged into your IDE, letting you have the same experience as if you had written all the boilerplate code yourself.\u003c/p\u003e\u003cp\u003eYou can easily install Lombok by adding \u003ca href=\"https://mvnrepository.com/artifact/org.projectlombok/lombok/1.18.20\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003elombok\u003c/code\u003e\u003c/a\u003e to your dependencies.\nIf you are a \u003ca href=\"https://projectlombok.org/setup/gradle\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eGradle user\u003c/a\u003e, add these two lines to the dependencies section of your \u003ccode\u003ebuild\u003cspan\u003e.\u003c/span\u003egradle\u003c/code\u003e file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ecompileOnly \u003cspan\u003e\u0026#39;org.projectlombok:lombok:1.18.20\u0026#39;\u003c/span\u003e\nannotationProcessor \u003cspan\u003e\u0026#39;org.projectlombok:lombok:1.18.20\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhile if you are a \u003ca href=\"https://projectlombok.org/setup/maven\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMaven user\u003c/a\u003e, add the following dependency to your \u003ccode\u003epom\u003cspan\u003e.\u003c/span\u003exml\u003c/code\u003e file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eorg.projectlombok\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003elombok\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e1.18.20\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003escope\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eprovided\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003escope\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003edependency\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePlus, add the Lombok dependency to the \u003ca href=\"https://maven.apache.org/plugins/maven-compiler-plugin/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003emaven\u003cspan\u003e-\u003c/span\u003ecompiler\u003cspan\u003e-\u003c/span\u003eplugin\u003c/code\u003e\u003c/a\u003e configuration section as follows :\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ebuild\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eplugins\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e      \n            \n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eplugin\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                  \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eorg.apache.maven.plugins\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                  \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003emaven-compiler-plugin\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                  \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e3.5.1\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                  \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003econfiguration\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003esource\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e11\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003esource\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e\u0026lt;!-- depending on your project --\u0026gt;\u003c/span\u003e\n                        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003etarget\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e11\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003etarget\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e\u0026lt;!-- depending on your project --\u0026gt;\u003c/span\u003e\n                        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eannotationProcessorPaths\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                              \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003epath\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                                    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003eorg.projectlombok\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003egroupId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                                    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003elombok\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eartifactId\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                                    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e1.18.20\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eversion\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                              \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003epath\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e                              \n                        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eannotationProcessorPaths\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n                  \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003econfiguration\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eplugin\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n            \n            \u003cspan\u003e\u0026lt;!-- ... --\u0026gt;\u003c/span\u003e  \n            \n      \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eplugins\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003ebuild\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, you have all you need to start using Lombok.\u003c/p\u003e\u003ch2 id=\"Most-Common-Lombok-Annotations\"\u003eMost Common Lombok Annotations\u003c/h2\u003e\u003cp\u003eHere you can find the most common and important Lombok annotations. Each of them will be explained and then seen in use compared to the equivalent Java vanilla translation. To see examples and get more support, click on each annotation and visit its page on the \u003ca href=\"https://projectlombok.org/features/all\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLombok official documentation\u003c/a\u003e.\u003c/p\u003e\u003ch3 id=\"---Getter---https---projectlombok-org-features-GetterSetter------Setter---https---projectlombok-org-features-GetterSetter-\"\u003e\u003ca href=\"https://projectlombok.org/features/GetterSetter\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Getter\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://projectlombok.org/features/GetterSetter\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Setter\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWhen a field is annotated with \u003ccode\u003e@Getter\u003c/code\u003e and/or \u003ccode\u003e@Setter\u003c/code\u003e, Lombok will automatically generate the default getter and/or setter, respectively. The default implementation for getters simply takes care of returning the annotated field. Similarly, the default implementation for setters takes one parameter of the same type as the annotated field and simply sets it with the received value. When a field called \u003ccode\u003evalue\u003c/code\u003e is annotated with both \u003ccode\u003e@Getter\u003c/code\u003e and \u003ccode\u003e@Setter\u003c/code\u003e, Lombok will define a \u003ccode\u003e\u003cspan\u003egetValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e (or \u003ccode\u003e\u003cspan\u003eisValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e if the field is \u003ccode\u003eboolean\u003c/code\u003e), and a \u003ccode\u003e\u003cspan\u003esetValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method. The generated getter/setter method will be \u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e\u003c/code\u003e, unless a particular \u003ccode\u003eAccessLevel\u003c/code\u003e is specified. The allowed \u003ccode\u003eAccessLevel\u003c/code\u003e values are \u003ccode\u003e\u003cspan\u003ePUBLIC\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003ePROTECTED\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003ePACKAGE\u003c/span\u003e\u003c/code\u003e, and \u003ccode\u003e\u003cspan\u003ePRIVATE\u003c/span\u003e\u003c/code\u003e. Please, note that you can also annotate the entire class. In this case, this logic will be applied to each field.\u003c/p\u003e\u003ch4 id=\"With-Lombok\"\u003eWith Lombok\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Getter\u003c/span\u003e\n\u003cspan\u003e@Setter\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e@Setter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eAccessLevel\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ePROTECTED\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Java-Vanilla\"\u003eJava Vanilla\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003esetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eid \u003cspan\u003e=\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003esetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename \u003cspan\u003e=\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eprotected\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003esetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esurname \u003cspan\u003e=\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"---NoArgsConstructor---https---projectlombok-org-features-constructor------RequiredArgsConstructor---https---projectlombok-org-features-constructor------AllArgsConstructor---https---projectlombok-org-features-constructor-\"\u003e\u003ca href=\"https://projectlombok.org/features/constructor\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@NoArgsConstructor\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://projectlombok.org/features/constructor\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@RequiredArgsConstructor\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://projectlombok.org/features/constructor\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@AllArgsConstructor\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWhen a class is annotated with \u003ccode\u003e@NoArgsConstructor\u003c/code\u003e, Lombok will take care of automatically generating a constructor with no parameters. Likewise, when annotated with \u003ccode\u003e@AllArgsConstructor\u003c/code\u003e, a constructor with one parameter for each field in your class will be generated. Similarly, \u003ccode\u003e@RequiredArgsConstructor\u003c/code\u003e leads to a constructor with a parameter for each field requiring special handling. In particular, this involves non-initialized \u003ccode\u003efinal\u003c/code\u003e fields, as well as any fields marked as \u003ccode\u003e@NonNull\u003c/code\u003e that are not initialized where declared. Please, do not forget that static fields will be ignored by these annotations.\u003c/p\u003e\u003ch4 id=\"With-Lombok\"\u003eWith Lombok\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@NoArgsConstructor\u003c/span\u003e\n\u003cspan\u003e@AllArgsConstructor\u003c/span\u003e\n\u003cspan\u003e@RequiredArgsConstructor\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e birthPlace\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Java-Vanilla\"\u003eJava Vanilla\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e birthPlace\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e// @NoArgsConstructor\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e// @AllArgsConstructor\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e birthPlace\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eid \u003cspan\u003e=\u003c/span\u003e id\n      \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename \u003cspan\u003e=\u003c/span\u003e name\n      \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esurname \u003cspan\u003e=\u003c/span\u003e surname\n      \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ebirthPlace \u003cspan\u003e=\u003c/span\u003e birthPlace\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e// @RequiredArgsConstructor\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e birthPlace\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ebirthPlace \u003cspan\u003e=\u003c/span\u003e birthPlace\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"---ToString---https---projectlombok-org-features-ToString-\"\u003e\u003ca href=\"https://projectlombok.org/features/ToString\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@ToString\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWhen a class is annotated with \u003ccode\u003e@ToString\u003c/code\u003e, Lombok will take care of generating a proper implementation of the \u003ccode\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method. By default, a String containing the class name, followed by each field\u0026#39;s value separated by a comma, will be returned. By setting the \u003ccode\u003eincludeFieldNames\u003c/code\u003e parameter to \u003cem\u003etrue\u003c/em\u003e, the name of each field will be placed before its value. By default, all non-static fields will be considered when generating the \u003ccode\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e method. Annotate a field with \u003ccode\u003e@ToString\u003cspan\u003e.\u003c/span\u003eExclude\u003c/code\u003e to make Lombok ignore it. Alternatively, you can specify which fields you wish to be taken into account by using \u003ccode\u003e@\u003cspan\u003eToString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eonlyExplicitlyIncluded \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e. Then, mark each field you want to include with \u003ccode\u003e@ToString\u003cspan\u003e.\u003c/span\u003eInclude\u003c/code\u003e.\u003c/p\u003e\u003ch4 id=\"With-Lombok\"\u003eWith Lombok\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@ToString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eincludeFieldNames\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Java-Vanilla\"\u003eJava Vanilla\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e@Override\u003c/span\u003e \n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#34;Author(id=\u0026#34;\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eid \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e\u0026#34;, name=\u0026#34;\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e\u0026#34;, surnname=\u0026#34;\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esurname \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e\u0026#34;)\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"---EqualsAndHashCode---https---projectlombok-org-features-EqualsAndHashCode-\"\u003e\u003ca href=\"https://projectlombok.org/features/EqualsAndHashCode\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@EqualsAndHashCode\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eAnnotate a class with \u003ccode\u003e@EqualsAndHashCode\u003c/code\u003e, and Lombok will automatically implement the \u003ccode\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e methods for you. By default, all non-static, non-transient fields will be taken into account. You can modify which fields are used by annotating them with \u003ccode\u003e@EqualsAndHashCode\u003cspan\u003e.\u003c/span\u003eInclude\u003c/code\u003e or \u003ccode\u003e@EqualsAndHashCode\u003cspan\u003e.\u003c/span\u003eExclude\u003c/code\u003e. Alternatively, you can annotate your class with \u003ccode\u003e@\u003cspan\u003eEqualsAndHashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eonlyExplicitlyIncluded \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and then specify exactly which fields or methods you want to be used by marking them with \u003ccode\u003e@EqualsAndHashCode\u003cspan\u003e.\u003c/span\u003eInclude\u003c/code\u003e. Please, note that the \u003ca href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/a\u003e) and \u003ca href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode(\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e\u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/a\u003e) methods will be generated by Lombok without breaking the contract between them. Follow the link on the two methods to the official Java documentation to learn more about the contracts that \u003ccode\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e implementations should fulfill.\u003c/p\u003e\u003ch4 id=\"With-Lombok\"\u003eWith Lombok\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Getter\u003c/span\u003e\n\u003cspan\u003e@Setter\u003c/span\u003e\n\u003cspan\u003e@EqualsAndHashCode\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Java-Vanilla\"\u003eJava Vanilla\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \n    \u003cspan\u003e// gettes and setters ...\u003c/span\u003e\n\n    \u003cspan\u003e@Override\u003c/span\u003e \n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n       \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e PRIME \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e31\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003eint\u003c/span\u003e result \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       result \u003cspan\u003e=\u003c/span\u003e prime \u003cspan\u003e*\u003c/span\u003e result \u003cspan\u003e+\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n       result \u003cspan\u003e=\u003c/span\u003e prime \u003cspan\u003e*\u003c/span\u003e result \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e name\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       result \u003cspan\u003e=\u003c/span\u003e prime \u003cspan\u003e*\u003c/span\u003e result \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esurname \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e surname\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003ereturn\u003c/span\u003e result\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@Override\u003c/span\u003e \n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eboolean\u003c/span\u003e \u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eObject\u003c/span\u003e o\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n       \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eo \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eo \u003cspan\u003einstanceof\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003eAuthor\u003c/span\u003e other \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eAuthor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e o\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003eother\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecanEqual\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eObject\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e other\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eother\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e other\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eother\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e other\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eother\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"---NonNull---https---projectlombok-org-features-NonNull-\"\u003e\u003ca href=\"https://projectlombok.org/features/NonNull\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@NonNull\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eYou can annotate with \u003ccode\u003e@NonNull\u003c/code\u003e a record component, a parameter of a method, or an entire constructor. This way, Lombok will generate null-check statements for you accordingly.\u003c/p\u003e\u003ch4 id=\"With-Lombok\"\u003eWith Lombok\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      \u003cspan\u003e@NonNull\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e@NonNull\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003eString\u003c/span\u003e surname\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eid \u003cspan\u003e=\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename \u003cspan\u003e=\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n      \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esurname \u003cspan\u003e=\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e \n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Java-Vanilla\"\u003eJava Vanilla\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003eString\u003c/span\u003e surname\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eid \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n          \u003cspan\u003ethrow\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eNullPointerException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;id is marked @NonNull but is null\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eid \u003cspan\u003e=\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003ename \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n          \u003cspan\u003ethrow\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eNullPointerException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;name is marked @NonNull but is null\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename \u003cspan\u003e=\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esurname \u003cspan\u003e=\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e \n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"---Data---https---projectlombok-org-features-Data-\"\u003e\u003ca href=\"https://projectlombok.org/features/Data\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Data\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e@Data\u003c/code\u003e is a shortcut annotation that combines the features of \u003ca href=\"https://projectlombok.org/features/ToString\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@ToString\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://projectlombok.org/features/EqualsAndHashCode\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@EqualsAndHashCode\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://projectlombok.org/features/GetterSetter\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Getter\u003c/code\u003e\u003c/a\u003e \u003ca href=\"https://projectlombok.org/features/GetterSetter\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Setter\u003c/code\u003e\u003c/a\u003e, and \u003ca href=\"https://projectlombok.org/features/constructor\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@RequiredArgsConstructor\u003c/code\u003e\u003c/a\u003e together. So, \u003ccode\u003e@Data\u003c/code\u003e generates all the boilerplate involved in POJOs (\u003ca href=\"https://en.wikipedia.org/wiki/Plain_old_Java_object\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ePlain Old Java Objects\u003c/a\u003e). This means, in particular, getters for all fields, setters for all non-final fields, proper \u003ccode\u003etoString\u003c/code\u003e, \u003ccode\u003eequals\u003c/code\u003e, and \u003ccode\u003ehashCode\u003c/code\u003e implementations involving every field of the class, and a constructor for all final fields.\u003c/p\u003e\u003ch4 id=\"With-Lombok\"\u003eWith Lombok\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Data\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Java-Vanilla\"\u003eJava Vanilla\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eid \u003cspan\u003e=\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e    \n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003esetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename \u003cspan\u003e=\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003esetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esurname \u003cspan\u003e=\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@Override\u003c/span\u003e \n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n       \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e PRIME \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e31\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003eint\u003c/span\u003e result \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       result \u003cspan\u003e=\u003c/span\u003e prime \u003cspan\u003e*\u003c/span\u003e result \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       result \u003cspan\u003e=\u003c/span\u003e prime \u003cspan\u003e*\u003c/span\u003e result \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       result \u003cspan\u003e=\u003c/span\u003e prime \u003cspan\u003e*\u003c/span\u003e result \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003ereturn\u003c/span\u003e result\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@Override\u003c/span\u003e \n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eboolean\u003c/span\u003e \u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eObject\u003c/span\u003e o\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n       \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eo \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eo \u003cspan\u003einstanceof\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003eAuthor\u003c/span\u003e other \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eAuthor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e o\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003eother\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecanEqual\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eObject\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e other\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eother\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e other\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eother\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e other\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eother\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n       \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"---Value---https---projectlombok-org-features-Value-\"\u003e\u003ca href=\"https://projectlombok.org/features/Value\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Value\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e@Value\u003c/code\u003e is the immutable variant of \u003ca href=\"https://projectlombok.org/features/Data\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Data\u003c/code\u003e\u003c/a\u003e. This means that all fields are made \u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003efinal\u003c/code\u003e by Lombok by default. Plus, setters will not be generated, and the class itself will be marked as \u003ccode\u003efinal\u003c/code\u003e. This way, the class will not be inheritable. Just like what happens with \u003ccode\u003e@Data\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e implementations are also created.\u003c/p\u003e\u003ch4 id=\"With-Lombok\"\u003eWith Lombok\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Data\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Java-Vanilla\"\u003eJava Vanilla\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eint\u003c/span\u003e id\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e name\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e surname\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eid \u003cspan\u003e=\u003c/span\u003e id\n      \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename \u003cspan\u003e=\u003c/span\u003e name\n      \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esurname \u003cspan\u003e=\u003c/span\u003e surname\n    \u003cspan\u003e}\u003c/span\u003e  \n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e id\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e name\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e surname\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@Override\u003c/span\u003e \n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e PRIME \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e31\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eint\u003c/span\u003e result \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        result \u003cspan\u003e=\u003c/span\u003e prime \u003cspan\u003e*\u003c/span\u003e result \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        result \u003cspan\u003e=\u003c/span\u003e prime \u003cspan\u003e*\u003c/span\u003e result \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        result \u003cspan\u003e=\u003c/span\u003e prime \u003cspan\u003e*\u003c/span\u003e result \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehashCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e result\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e@Override\u003c/span\u003e \n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eboolean\u003c/span\u003e \u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eObject\u003c/span\u003e o\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eo \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eo \u003cspan\u003einstanceof\u003c/span\u003e \u003cspan\u003eAuthor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eAuthor\u003c/span\u003e other \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eAuthor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e o\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003eother\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecanEqual\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eObject\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e other\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eother\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetId\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e other\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eother\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e other\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eequals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eother\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetSurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"Advanced-Lombok-Annotations\"\u003eAdvanced Lombok Annotations\u003c/h2\u003e\u003cp\u003eHere you can find the most complex Lombok annotations. Each of them will be explained and then seen in use compared to the equivalent Java vanilla translation. To see examples and get more support, click on each annotation and visit its page on the \u003ca href=\"https://projectlombok.org/features/all\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLombok official documentation\u003c/a\u003e.\u003c/p\u003e\u003ch3 id=\"---Cleanup---https---projectlombok-org-features-Cleanup-\"\u003e\u003ca href=\"https://projectlombok.org/features/Cleanup\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Cleanup\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e@Cleanup\u003c/code\u003e can be used to ensure a given resource is automatically cleaned up before leaving the current scope. By default, the cleanup method of the annotated resource is assumed to be \u003ccode\u003e\u003cspan\u003eclose\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e, but you can specify the name of the desired method to be called instead. Note that this annotation works by harnessing the \u003ca href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003etry-with-resources statement\u003c/a\u003e.\u003c/p\u003e\u003ch4 id=\"With-Lombok\"\u003eWith Lombok\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCleanupDemo\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e args\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ethrows\u003c/span\u003e \u003cspan\u003eIOException\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e@Cleanup\u003c/span\u003e \n    \u003cspan\u003eInputStream\u003c/span\u003e input \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eFileInputStream\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eargs\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003e@Cleanup\u003c/span\u003e \n    \u003cspan\u003eOutputStream\u003c/span\u003e output \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eFileOutputStream\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eargs\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003ebyte\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e b \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003ebyte\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e10000\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n    \u003cspan\u003ewhile\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003eint\u003c/span\u003e r \u003cspan\u003e=\u003c/span\u003e input\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eread\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eb\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n      \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003er \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \n        \u003cspan\u003ebreak\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n      output\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewrite\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eb\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e r\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Java-Vanilla\"\u003eJava Vanilla\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCleanupDemo\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e args\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ethrows\u003c/span\u003e \u003cspan\u003eIOException\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eOutputStream\u003c/span\u003e output \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eFileOutputStream\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eargs\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eInputStream\u003c/span\u003e input \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eFileInputStream\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eargs\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ebyte\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e b \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003ebyte\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e10000\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n        \u003cspan\u003ewhile\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n          \u003cspan\u003eint\u003c/span\u003e r \u003cspan\u003e=\u003c/span\u003e input\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eread\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eb\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n          \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003er \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \n            \u003cspan\u003ebreak\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n          output\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewrite\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eb\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e r\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e       \n    \u003cspan\u003e}\u003c/span\u003e \n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"---Synchronized---https---projectlombok-org-features-Synchronized-\"\u003e\u003ca href=\"https://projectlombok.org/features/Synchronized\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Synchronized\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e@Synchronized\u003c/code\u003e allows you to achieve something similar to the \u003ca href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003esynchronized\u003c/code\u003e\u003c/a\u003e keyword, but locking on different objects. The keyword locks on \u003ccode\u003e\u003cspan\u003ethis\u003c/span\u003e\u003c/code\u003e, while the annotation locks on a special private field named \u003ccode\u003e$lock\u003c/code\u003e. If this field does not exist, it will be created by Lombok. This is the default behavior, but you can also specify lock objects yourself. When dealing with \u003ccode\u003e\u003cspan\u003estatic\u003c/span\u003e\u003c/code\u003e methods, the annotation will lock on a static field named \u003ccode\u003e$\u003cspan\u003eLOCK\u003c/span\u003e\u003c/code\u003e. Please, consider that just like \u003ccode\u003esynchronized\u003c/code\u003e, the annotation can only be used on static and instance methods. \u003c/p\u003e\u003ch4 id=\"With-Lombok\"\u003eWith Lombok\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eSynchronizedDemo\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e objectToLock \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \n  \u003cspan\u003e@Synchronized\u003c/span\u003e\n  \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eout\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Hello!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n  \n  \u003cspan\u003e@Synchronized\u003c/span\u003e\n  \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003egetOne\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n  \n  \u003cspan\u003e@Synchronized\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;objectToLock\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003eprintObject\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eout\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eobjectToLock\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"Java-Vanilla\"\u003eJava Vanilla\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eSynchronizedDemo\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e $LOCK \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e $lock \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e readLock \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \n  \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003esynchronized\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e$LOCK\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eout\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n  \n  \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003egetOne\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003esynchronized\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e$lock\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n  \n  \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003eprintObject\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003esynchronized\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ereadLock\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eout\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eobjectToLock\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"---SneakyThrows---https---projectlombok-org-features-SneakyThrows-\"\u003e\u003ca href=\"https://projectlombok.org/features/SneakyThrows\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@SneakyThrows\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e@SneakyThrows\u003c/code\u003e can be used to sneakily throw checked exceptions without actually declaring them in your method\u0026#39;s \u003ccode\u003ethrows\u003c/code\u003e clause, as you normally would. So, this annotation allows you to avoid the required \u003ccode\u003e\u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003ecatch\u003c/code\u003e blocks completely by handling all the checked exceptions quietly. Lombok will not ignore, wrap, replace, or modify the thrown checked exception. On the contrary, it will mislead the compiler. In fact, at the JVM (\u003ca href=\"https://en.wikipedia.org/wiki/Java_virtual_machine\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eJava Virtual Machine\u003c/a\u003e) class file level, all exceptions can be thrown regardless of the \u003ccode\u003ethrows\u003c/code\u003e clause of your methods, which is why this works. This annotation can be dangerous and should be used carefully. This is why you should read \u003ca href=\"https://projectlombok.org/features/SneakyThrows\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis\u003c/a\u003e page from the Lombok official documentation to learn more about when and how to use it.\u003c/p\u003e\u003ch3 id=\"---Builder---https---projectlombok-org-features-Builder-\"\u003e\u003ca href=\"https://projectlombok.org/features/Builder\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Builder\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eYou may need to develop a builder object allowing you to create objects by following a step-by-step construction pattern, such as \u003ccode\u003eAuthor\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuilder\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;1\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Maria\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esurname\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Williams\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e. This is particularly useful when dealing with large classes with several fields. Instead of using a constructor with many parameters, you can use this more readable approach.\nBy using the \u003ccode\u003e@Builder\u003c/code\u003e annotation, you let Lombok generate the builders for you. By annotating a class with \u003ccode\u003e@Builder\u003c/code\u003e, Lombok will produce a class implementing the aforementioned builder pattern. For example, by annotating the \u003ccode\u003eAuthor\u003c/code\u003e class, an \u003ccode\u003eAuthorBuilder\u003c/code\u003e class will be automatically generated. Since the behavior of your builder may be complex or highly-tailored, Lombok offers many parameters to achieve the desired result. You can find out them all \u003ca href=\"https://projectlombok.org/features/Builder\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch3 id=\"---Log---https---projectlombok-org-features-log-\"\u003e\u003ca href=\"https://projectlombok.org/features/log\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003e@Log\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe majority of loggers require you to set up a logger instance in every class where you want to log. This definitely involves boilerplate code. By annotating a class with \u003ccode\u003e@Log\u003c/code\u003e, Lombok will automatically add a static final \u003ccode\u003elog\u003c/code\u003e field, initialized as required by your logging library. This is why Lombok provides developers with an annotation per each of the most popular logging frameworks. You can find the entire list \u003ca href=\"https://projectlombok.org/features/log\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"The-Lombok-Plugin\"\u003eThe Lombok Plugin\u003c/h2\u003e\u003cp\u003eThe most popular and widely used IDEs come with an official Lombok plugin designed to help developers use Lombok. In particular, it supports you by offering shortcuts to the most common Lombok annotation. Plus, it suggests to you the annotations you may require or be looking for based on where you clicked. At the time of writing \u003ca href=\"https://projectlombok.org/setup/intellij\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eIntelliJ IDEA\u003c/a\u003e, \u003ca href=\"https://projectlombok.org/setup/eclipse\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eEclipse, Spring Tool Suite, (Red Hat) JBoss Developer Studio, MyEclipse\u003c/a\u003e, \u003ca href=\"https://projectlombok.org/setup/vscode\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMicrosoft Visual Studio Code\u003c/a\u003e, and \u003ca href=\"https://projectlombok.org/setup/netbeans\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNetbeans\u003c/a\u003e are officially supported. Follow the link related to your IDE to get support on how to install it.\nVisit the \u003ca href=\"https://projectlombok.org/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eLombok\u003c/a\u003e website for the complete list of all supported IDEs.\u003c/p\u003e\u003ch2 id=\"Is-Using-Lombok-A-Risk-\"\u003eIs Using Lombok A Risk?\u003c/h2\u003e\u003cp\u003eYou may be concerned about spreading Lombok annotations throughout your codebase. In fact, what would happen if you decided to avoid using it? You might be finding yourself stuck. Well, this is not a real problem because Lombok comes with a \u003cem\u003edelombok\u003c/em\u003e tool. \nAs stated \u003ca href=\"https://projectlombok.org/features/delombok\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ein the official documentation\u003c/a\u003e, although not covering all possible IDEs and cases, it makes the process of freeing your code from Lombok easier. What this tool does is auto-generate Java source code containing the same features contained in the bytecode Lombok would have injected. This way, your Lombok annotated codebase will be simply replaced with a standard, non-Lombok Java one. \nAs a result, your entire project will no longer depend on Lombok. So, to answer the original question, no, not at all. Using Lombok does not represent a risk for the future or your project.\u003c/p\u003e\u003ch2 id=\"Conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eIn this article, we looked at how to use Project Lombok, a Java library that automatically plugs into your editor and builds tools, to avoid writing boilerplate, boring, and repetitive code Java is well known for. As shown, this is an easy way to make you a more productive developer and do not waste your time on cumbersome activities. By starting to take advantage of its most relevant annotations, you can avoid writing thousand of lines of code with no real value from the business logic point of view of your project. Plus, there is always the possibility to make your project no longer depend on Project Lombok easily. So, it using it does not represent a risk of finding yourself locked in. In conclusion, every Java developer should use Project Lombok, and explaining everything you need to start using it is what this article was aimed at.\u003c/p\u003e\u003cp\u003eThanks for reading! I hope that you found this article helpful. Feel free to reach out to me with any questions, comments, or suggestions.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Let’s see everything you should know to start using Project Lombok. We will have a look at how to integrate it into your IDE and use it to avoid boilerplate code.",
      "date_published": "2021-07-29T16:55:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/workforce-and-app-privacy-have-changed-so-should-you/",
      "title": "Workforce and App Privacy Have Changed, So Should You",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eAccelerating digital road maps by seven to 10 years likely left you with some things to review from a security perspective. Please check out the \u003ca href=\"https://auth0.com/blog/accelerated-your-road-map-go-fix-workforce-and-app-security\" target=\"_blank\" rel=\"noreferrer noopener\"\u003efirst post in this series\u003c/a\u003e for what you might need to review to securely support your remote or hybrid workforce, as well as a checklist for consumer-facing apps.\u003c/p\u003e\u003cp\u003eSecurity isn’t the only thing that can get overlooked when we go fast.  As well as implementing technical protections — we also need to understand what and how the data and how impacts the humans that use technology. This is where privacy comes in. Privacy is having a critical global impact on software development because consumers, businesses, and governments are demanding that technology operates in a way that complies with legislation like GDPR (General Data Privacy Regulation), CPRA (California Public Records Act), APPI (Act on the Protection of Personal Information), and LGPD (Lei Geral de Proteção de Dados Pessoais). This is an opportunity to rethink exactly what and how much data is collected, how it’s used, and who gets to see it. It’s a turning point where individuals are no longer blithely accepting that massive amounts of data about them are being created, shared, and used.\u003c/p\u003e\u003cp\u003eAt Auth0, I regularly collaborate with our vice president of privacy, Lucy McGrath, and she is a part of my organization. For this series, I asked Lucy for her perspective on data privacy mistakes companies can make when they move fast.\u003c/p\u003e\u003cp\u003eAn integrated approach is essential for security and privacy. There’s a saying if you want to go fast, go alone, but if you want to go far, go together. This is changing — you can’t protect privacy alone. If you go alone, you won’t go anywhere. “Ultimately, data privacy is about trust,” says Lucy. “And it’s a collaborative effort. You can’t think about security or data governance, or privacy in isolation. You need to work across departments within your organization and also listen to your staff and your consumers/users. From a practical standpoint, you need to work with others even beyond your immediate business — data privacy regulations are changing rapidly —technical solutions are essential in order to scale privacy compliant technology. If you don’t collaborate, you’ll be left behind.”\u003c/p\u003e\u003cp\u003eLucy’s insights on remote/hybrid workforces and consumer-facing apps can improve your workplace culture and improve your relationships with your customers — and keep you focused on your business rather than dealing with regulators and potentially incurring large fines.\u003c/p\u003e\u003ch2 id=\"Put-Your-Focus-on-the-Human\"\u003ePut Your Focus on the Human\u003c/h2\u003e\u003cp\u003e“Probably the most important thing to remember when thinking through data privacy is that you’re delivering a service that impacts humans,” says Lucy. “We can get dazzled by what technology can do, but the technology is really there to help the humans accomplish something. Centering on the human who needs to use or benefit from the technology helps you to focus.  — and align with existing and emerging data privacy regulations.”\u003c/p\u003e\u003cp\u003eAs always, this information is shared from the perspective of business impact and planning. For how data privacy regulations apply to your specific business situation, please reach out to your legal counsel.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eAuth0 recommends you always consult legal counsel for specific advice about compliance with legal requirements.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e\u003cstrong\u003eThe workforce mix: remote, hybrid, in office\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIf your company relies on a globally dispersed workforce (or acquired one during the pandemic), you’re likely dealing with a mix of employees who welcome some office quietly, some still struggling with lockdown requirements, and others who may not expect to see vaccines become available until fall. “As you look at creating or reviewing policies, it’s especially important to remember that there’s a human on the other side of the Zoom screen”, says Lucy. “This is a good time for your HR team to check back in with staff. Circumstances and perspectives have changed for many people as a result of the pandemic. One size definitely will not fit all.”\u003c/p\u003e\u003cp\u003eUnderstanding that worker privacy rights vary globally, here are some areas to review:\u003c/p\u003e\u003ch3 id=\"1--How-you-measure-productivity\"\u003e1. How you measure productivity\u003c/h3\u003e\u003cp\u003eFor organizations used to seeing people in chairs, the shift to Zoom screens caused some anxiety. Interestingly, \u003ca href=\"https://www.bcg.com/publications/2020/valuable-productivity-gains-covid-19\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e75% of 12,000 workers surveyed by BCG\u003c/a\u003e in the United States, Germany, and India felt they were able to maintain or increase productivity on individual tasks during the pandemic. \u003c/p\u003e\u003cp\u003eSome of that may have been accomplished by blurring the lines between home and work, says Lucy. \u003c/p\u003e\u003cp\u003eSurveillance technologies like keyloggers, video monitoring, and attention tracking via biometrics have been rising in adoption even before the pandemic. We’re hearing this often says, Lucy: “I like my boss — a lot —  but I would find it a bit creepy if she was tracking every word I write, tracking when I popped off to the loo and listening to my family conversations. And it would make it harder to do my job because I would feel unnecessarily surveilled. It’s really important to assess the correct way to protect data and maintain trust with your employees as humans. Especially with workers working from home in potentially cramped situations, you could be gathering data you don’t need and shouldn’t have.\u003c/p\u003e\u003cp\u003e“Workers generally know that emails are subject to company oversight nearly everywhere, but it’s essential to be transparent about monitoring activities across all applications and devices. Transparency also encourages trust and increases the likelihood that individuals will report issues/mistakes they encounter. Tell them about how long you retain the data, and why and be sure to check local rules about internal and external data sharing — they can vary by region and even by state in the United States. It’s important to only keep what you really need to perform a task,” says Lucy.\u003c/p\u003e\u003ch3 id=\"2--How-do-you-encourage-collaboration-\"\u003e2. How do you encourage collaboration?\u003c/h3\u003e\u003cp\u003eNearly everyone became Zoom-literate in 2020. Many people were introduced to Slack or other collaboration tools, and some folks also mixed in personal texts. “As great as these technologies are — and I am speaking as someone who enjoys working with a globally distributed workforce — they’re not going to replicate the physical space. From a privacy perspective, some small changes can mean a lot to employees,” says Lucy.\u003c/p\u003e\u003cp\u003e“Some people enjoy having dogs and kids flow in and out of their workplace. Others prefer to keep things separated. Over the last several months, I’ve noticed some colleagues making different choices.”\u003c/p\u003e\u003cp\u003eThings like Zoom backgrounds can protect employee privacy, but only if they know how to use the tools. If you’re using a collaboration tool like Zoom or Slack, document expected uses, alternatives on offer (as applicable) and make sure employees know how to use tools like Zoom backgrounds. \u003c/p\u003e\u003ch3 id=\"3--Onboarding-can-protect-against-data-breaches\"\u003e3. Onboarding can protect against data breaches\u003c/h3\u003e\u003cp\u003eNormally, we bring our new employees to our Bellevue, Wash. offices for onboarding. This in-person connection brings all kinds of benefits, including protecting data. “Onboarding may seem like an odd place to bring up data privacy, but people are more likely to feel comfortable reporting potential problems or even breaches when they have formed a connection to their colleagues,” says Lucy.\u003c/p\u003e\u003cp\u003eEstablishing connections may mean creating social events (likely on Zoom) or connecting employees for non-work meetings. We have an app that randomly pairs employees for casual chat sessions we call “donuts.” It’s a surprisingly effective way to establish connection and get to know about the day-to-day work life of far-flung colleagues.\u003c/p\u003e\u003ch3 id=\"4--Security-and-Privacy-of-Customers-is-Key\"\u003e4. Security and Privacy of Customers is Key\u003c/h3\u003e\u003cp\u003e“We’ve had workers who used to be home by themselves all day, suddenly have teenaged children pass through meetings on the way to the fridge,” says Lucy. “It’s charming, but it also means that family members might see things they’re not meant to see. You need to recognize that not everyone has the luxury of a room with a door and a lock. Protecting customer security and privacy is key.”\u003c/p\u003e\u003cp\u003eTo your security protocols, Lucy would also suggest adding:\u003c/p\u003e\u003cul\u003e\u003cli\u003eHeadphones so you can control what can be overheard (and coaching that awareness with your teams)\u003c/li\u003e\u003cli\u003ePrivacy screens for monitors\u003c/li\u003e\u003cli\u003ePrinted material (and the printer) needs to be kept in a space that remains locked when not in use\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Data-Privacy-Checklist-for-Consumer-Facing-Apps\"\u003eData Privacy Checklist for Consumer-Facing Apps\u003c/h2\u003e\u003cp\u003eCOVID has brought populations that are used to trust in physical environments online, says Lucy. This is part of why in the UK we’re seeing \u003ca href=\"https://www.theguardian.com/money/2021/may/18/delivery-text-scams-the-nasty-new-wave-sweeping-the-uk\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eincrease in delivery text phishing scams\u003c/a\u003e where additional funds are requested for delivery. Many of these ploys play on user trust and the expectation that information is being shared securely. We’ll get deeper into how consumers are demanding a secure and contextual private experience in the final post. As preparation, here is a data privacy checklist. Please follow up with your legal counsel on your specifics.\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003cstrong\u003eReview what you’ve got and why you’ve got it and how you’re getting it.\u003c/strong\u003e It’s not uncommon for apps to gather more information than is necessary to do the job. You need to know what data you have and why you’re collecting it as well how it’s stored to comply with regulations — and to know how to safeguard your customers’ data. \u003cstrong\u003eThis includes third-party vendors and your marketing teams.\u003c/strong\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eMake sure your code only collects data you really need\u003c/strong\u003e. The days of data gluttony are coming to an end. Individuals are rightly fed up with the attitude of “just because you can collect as much data as possible, you do. Ask yourself: do you use all the data you collect? Don’t be afraid to reduce the amount of data you collect when you update your app or add new products. Look for opportunities to innovate by using privacy-enhancing technologies to mask or anonymize, or de-identify data. And safely delete the information you don’t use.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eKnow where your customers are and check out the regulations.\u003c/strong\u003e While the EU’s General Data Privacy Regulation (GDPR) has become the benchmark for data privacy, not every regulation is GDPR. There are differences. Children also often have extra protections. Once you’ve identified where and who your customers are, work closely with your legal counsel to design the right approach.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSecurely delete info and keep a record.\u003c/strong\u003e Maybe you’re deleting information due to a verified request or because you have data you actually don’t need; either way, you need to keep a record.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eMake sure you have someone responsible for privacy who respects the humans interacting with your app.\u003c/strong\u003e This stuff is not simple. You need someone who looks after it.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eLook out for service departments or social media complaints.\u003c/strong\u003e Complaints can show you how the public perceives their data is being used — and identify areas that need your attention.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eCommunicate clearly with your users.\u003c/strong\u003e Users often need to know how to unsubscribe and other rights as part of data privacy regulations.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eDo as you would be done by.\u003c/strong\u003e Think through how you’d like your data to be treated. That’s a good guideline. But also think about the specific customer base - what’s their perspective and might they require additional protections (e.g., if they are a vulnerable group).\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eConsult your legal counsel.\u003c/strong\u003e Data privacy is a rapidly evolving field. Lawyers really are your friends! Please check in with your legal counsel regularly, and especially if you’re thinking of expanding into a new region.\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"Learn-More-about-Identity-s-Role-in-Your-Data-Privacy-Strategy\"\u003eLearn More about Identity’s Role in Your Data Privacy Strategy\u003c/h2\u003e\u003cp\u003eAs Lucy says, you can have security without privacy, but you can’t have privacy without security if you’d like to learn more about how a robust identity solution can support your data privacy and security strategies, \u003ca href=\"https://auth0.com/contact-us\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eplease reach out to the team at Auth0\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn the final post in the Acceleration Response Series, we’ll look at how creating a long-term plan for security and privacy can help you meet consumers’ demands.\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eAuth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "Go fast but not alone — our leaders are here to help secure your workforce and app privacy.",
      "date_published": "2021-07-29T15:08:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/can-your-identity-solution-grow-with-your-company/",
      "title": "Can Your Identity Solution Grow With Your Company?",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eThe number of Venture Capital deals signed in Latin America hit a record high of 488 in 2020. That’s nearly double the 2017 number according to \u003ca href=\"https://www.bloomberg.com/news/articles/2021-03-16/latin-american-startups-had-record-venture-capital-deals-in-2020\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eBloomberg\u003c/a\u003e. The growth in the tech market in LatAm isn’t only apparent in new startup deals; companies who already have a presence in the region are expanding both through mergers and acquisitions and by looking into new countries to grow their footprint in the region. \u003c/p\u003e\u003cp\u003eEach scenario brings its own challenges for your IT infrastructure, particularly your\u003ca href=\"https://auth0.com/blog/how-to-scale-quickly-with-identity/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e identity solution\u003c/a\u003e. If you’re expanding into a new country, there’s likely to be a different data privacy regulation you’ll have to comply with. And that startup you’re eyeing probably has a vastly different infrastructure than yours, whether private or public cloud or even legacy on-prem. An Identity management solution has to be able to expand and flex in order to grow with your company, regardless of the specific scenario.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1HnNeEEQ4hCBb2M4y2ZerT/5b5a1de004ea8021fdc38d042a85a672/Latam05.jpg\" alt=\"Business Expansion\"/\u003e\u003c/p\u003e\u003ch2 id=\"With-Business-Expansion-Come-Business-Questions\"\u003eWith Business Expansion Come Business Questions\u003c/h2\u003e\u003cp\u003eLet’s take a look at those two potential growth scenarios and what they mean for your business’s identity solution. First up is the acquisition of a competitor or related smaller entity. \u003ca href=\"https://auth0.com/blog/why-your-ma-strategy-has-to-include-an-iam-solution/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMergers and acquisitions\u003c/a\u003e (M\u0026amp;A) always bring an array of unique challenges, but for this article, we’re going to focus on the identity challenges associated with the merging of IT infrastructure.\u003c/p\u003e\u003cp\u003eYour web app may be hosted on a public cloud, but the company you just bought has been in business for a while and is still using on-prem hosting for theirs. In order for you to bring both properties together under one identity solution, you need one that can bridge the gap between the two, allowing your new audience access to both apps without managing multiple sets of credentials.\u003c/p\u003e\u003cp\u003eIn our second scenario, your organization is considering an expansion into a neighboring country to take advantage of the easing of business restrictions and the growing market for your product that your marketing team has identified. You already comply with the privacy regulations in your country, but are you ready to comply with those abroad? \u003c/p\u003e\u003cp\u003eIs your organization ready to answer questions like these:\u003c/p\u003e\u003cul\u003e\u003cli\u003eCan our existing in-house identity platform scale to include our hybrid-cloud infrastructure and the legacy system our latest acquisition uses?\u003c/li\u003e\u003cli\u003eIs our identity solution ready to handle the influx of new user accounts and login requests when we roll out to our new market?\u003c/li\u003e\u003cli\u003eIs our consent gathering process in compliance with the regulations in the country we’re expanding into?\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIf not, or if the answer to any of these questions is “no,” it may be time to consult with an identity specialist. \u003c/p\u003e\u003cblockquote\u003e\u003ca href=\"https://twitter.com/intent/tweet?text=\u0026#34;Auth0%20recommends%20you%20always%20consult%20legal%20counsel%20when%20it%20comes%20to%20complying%20with%20data%20privacy%20regulations.\u0026#34; via @auth0 https://auth0.com/blog/can-your-identity-solution-grow-with-your-company\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cp\u003e\u0026#34;Auth0 recommends you always consult legal counsel when it comes to complying with data privacy regulations.\u0026#34;\u003c/p\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Tweet\" src=\"https://cdn.auth0.com/blog/resources/twitter.svg\"/\u003e\u003c/p\u003e\u003ch4\u003eTweet This\u003c/h4\u003e\u003c/div\u003e\u003c/a\u003e\u003c/blockquote\u003e\u003ch2 id=\"Auth0-Is-the-Identity-Solution-That-Scales-With-You\"\u003eAuth0 Is the Identity Solution That Scales With You\u003c/h2\u003e\u003cp\u003eBoth of these scenarios mean you’re going to be scaling your infrastructure, adding users to existing web apps, and even adding new web apps. Having an identity solution in place that can easily expand to include controlling access to these new properties can help reign in costs and speed your time to market post-expansion. Our customers tell us that by using Auth0 for their authentication and identity needs, they took their time-to-value from months or years down to weeks or even days.\u003c/p\u003e\u003cp\u003eCredit card company \u003ca href=\"https://www.marketwatch.com/story/visa-sees-massive-digital-acceleration-with-millions-trying-e-commerce-for-the-first-time-2020-05-13\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eVisa reported\u003c/a\u003e that during just the first month of the COVID-19 pandemic, more than 13 million cardholders in Latin America made their very first e-commerce transaction. That’s 13 million new accounts being created, 13 million new logins, and 13 million opportunities for identity to go wrong if your solution isn’t scalable. There are many aspects to what makes something scalable. When it comes to identity, we see five as being the most important.\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003cstrong\u003eBridging legacy and cloud systems\u003c/strong\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eOne of the downsides to M\u0026amp;A is that your IT department inherits the backend infrastructure of the other company, for better or worse. Auth0’s extensive SDK libraries and robust APIs mean it’s a simple matter to bridge the gap between legacy systems and modern cloud-first ones. One login box can take your current and new customers to both web apps, no matter where they’re hosted. This ability also speeds your time to value because your developers can maintain focus on their core product delivery rather than piecing together connectivity solutions that may only work for a short time.\u003c/p\u003e\u003col start=\"2\"\u003e\u003cli\u003e\u003cstrong\u003eSingle source of truth for customer data\u003c/strong\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eBringing all of your customer data together into one single source of truth (SSoT) makes it that much easier to protect. It also speeds access when a user logs in, as no matter which property they’re using, it has only one place to look to find their credentials, rather than scouring multiple data silos.\u003c/p\u003e\u003col start=\"3\"\u003e\u003cli\u003e\u003cstrong\u003eSingle sign-on\u003c/strong\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eCustomers want low-friction experiences online, and being able to create an account using credentials they already have is a great way to win them over. Single sign-on (using account information from a provider like Apple, Facebook, or Twitter) allows a customer to create an account on your site quickly and easily, and without the need to create and remember a new password.\u003c/p\u003e\u003col start=\"4\"\u003e\u003cli\u003e\u003cstrong\u003eBreach protection\u003c/strong\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eThe issue of passwords brings us to a major sticking point for many identity solutions, protecting user information from data breaches. According to the most recent \u003ca href=\"https://www.ibm.com/security/data-breach\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eIBM/Ponemon Cost of a Data Breach Study\u003c/a\u003e, the global average cost of a breach is now $3.86 million (USD). And Verizon reports in their \u003ca href=\"https://www.verizon.com/business/resources/reports/dbir/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e2021 Data Breach Investigations Report\u003c/a\u003e that 61% of breaches involve misuse of credentials. Put those together, and you see why protecting your customers’ information is such a major piece of scaling your online business presence and why a robust identity solution needs to take this aspect into account.\u003c/p\u003e\u003col start=\"5\"\u003e\u003cli\u003e\u003cstrong\u003eProtection from staffing fluctuations\u003c/strong\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eAn often overlooked aspect of identity projects is the simple fact that people change jobs. If you have an identity tool that was developed in-house two years ago, there’s a good chance you won’t have anyone on staff who can expand it to cover your new properties. That will delay roll-out and extend your time-to-market. \u003c/p\u003e\u003cp\u003e\u003ca href=\"https://auth0.com/case-studies/wabipay/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 customer WABI\u003c/a\u003e is modernizing e-commerce in Latin America. They’re currently active in 11 countries and have expansion plans to add four more in 2021. And they’re trusting Auth0 to scale their identity solution to match these ambitious plans. “WABI is scalable, and we need a partner that is, too. We believe Auth0 will support us in getting there.” Says WABI Business Manager Juan Manuel Mingo. With their planned expansion opening their market to millions of potential new customers, WABI knows they need a robust identity platform that’s ready to handle the influx of new users.\u003c/p\u003e\u003ch2 id=\"Auth0-Brings-Global-Experience-to-Your-Latin-America-Growth-Plans\"\u003eAuth0 Brings Global Experience to Your Latin America Growth Plans\u003c/h2\u003e\u003cp\u003eOur founders are from Argentina, the company was started in the United States, and we currently have people in 30+ countries with more being added every day. Our \u003ca href=\"https://auth0.com/blog/auth0-expands-global-partner-network-in-latin-america-with-clm/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003einternational team\u003c/a\u003e of identity specialists can help you work out your identity needs and help get you set up with an identity as a service (IDaaS) platform that is ready to grow with your company, no matter what your expansion plans look like. We know that having an identity solution designed to be extensible and flexible to move with your business can mean the difference between a successful rollout or a failed acquisition attempt. \u003c/p\u003e\u003cp\u003eAuth0 is built on open standards, making it easy to connect with existing systems and varying infrastructure scenarios. Bridging the gap between a public cloud-based web app and an on-prem user database is only the beginning. Our extensive marketplace of integrations means you can connect with your existing business software solutions as well.\u003c/p\u003e\u003cp\u003eOur breach protection includes features such as \u003ca href=\"https://auth0.com/docs/attack-protection/bot-detection\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ebot detection\u003c/a\u003e, \u003ca href=\"https://auth0.com/multifactor-authentication\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eadaptive MFA\u003c/a\u003e, \u003ca href=\"https://auth0.com/single-sign-on\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esingle sign-on\u003c/a\u003e, and \u003ca href=\"https://auth0.com/passwordless\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epasswordless\u003c/a\u003e flows. And the \u003ca href=\"https://marketplace.auth0.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAuth0 Marketplace\u003c/a\u003e has what you need to handle everything from consent management to business process software integrations. The protections and extensibility we offer is a key factor in our scalability. \u003c/p\u003e\u003cp\u003eWhen the time comes to expand across borders, Auth0 is ready. We’re certified by a third party as compliant with the International Standards Organization (ISO) standards \u003ca href=\"https://www.iso.org/obp/ui/#iso:std:iso-iec:27001:ed-2:v1:en\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eISO27001\u003c/a\u003e and \u003ca href=\"https://www.iso.org/standard/61498.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eISO27018\u003c/a\u003e for handling information security and personally identifiable information (PII) as a cloud provider.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/1sBMtrIri0sAw0OBkWE4QV/41d7fc8b0740ac05ec3c82145fd1478f/Latam06.jpg\" alt=\"Growing\"/\u003e\u003c/p\u003e\u003ch2 id=\"Auth0-is-the-Identity-Solution-That-Can-Keep-Up-With-The-Growing-LatAm-Market\"\u003eAuth0 is the Identity Solution That Can Keep Up With The Growing LatAm Market\u003c/h2\u003e\u003cp\u003eTo provide your customers with a continuous, low-friction, and intuitive login flow requires a robust identity solution. Whether you’re scaling internationally or your growth plans call for staying closer to home, Auth0 can provide the IDaaS platform you need to maintain a great customer experience while ensuring the security and privacy of your customer data. And don’t worry if you’ve already started an identity project and hit a stumbling block, \u003ca href=\"https://auth0.com/contact-us\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eour experts can help\u003c/a\u003e. \u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eAuth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
      "summary": "The tech market in Latin America is growing; Auth0 can help you keep up with a scalable identity solution.",
      "date_published": "2021-07-29T11:56:00Z",
      "author": {}
    },
    {
      "id": "",
      "url": "https://auth0.com/blog/accelerated-your-road-map-go-fix-workforce-and-app-security/",
      "title": "Accelerated Your Road Map? Go Fix Workforce and App Security",
      "content_html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection itemscope=\"\" itemtype=\"http://schema.org/BlogPosting\" itemprop=\"mainEntity\"\u003e\u003cheader\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cp\u003e\u003cspan\u003eACCELERATION RESPONSE SERIES\u003c/span\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eRapid change introduces workforce and app risks. Auth0 Security team’s advice on what to fix now.\u003c/p\u003e\u003c/div\u003e\u003cp\u003eLast Updated On: July 28, 2021\u003c/p\u003e\u003cmeta itemprop=\"datePublished\" content=\"2021-07-28\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2021-07-28\"/\u003e\u003c/div\u003e\u003c/header\u003e\u003cheader\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/lpo0yom5xDZonfNzlOkHc/c55bd864b5d7360bf8a2c307f99c8e40/Security_and_Identity_4x.jpg\"/\u003e\u003c/p\u003e\u003cdiv\u003e\u003cp\u003e\u003cspan\u003eACCELERATION RESPONSE SERIES\u003c/span\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eRapid change introduces workforce and app risks. Auth0 Security team’s advice on what to fix now.\u003c/p\u003e\u003cp\u003eLast Updated On: July 28, 2021\u003c/p\u003e\u003cmeta itemprop=\"datePublished\" content=\"2021-07-28\"/\u003e\u003cmeta itemprop=\"dateModified\" content=\"2021-07-28\"/\u003e\u003c/div\u003e\u003c/div\u003e\u003c/header\u003e\u003carticle\u003e\u003cmain id=\"post-content\" itemprop=\"articleBody\"\u003e\u003cdiv\u003e\u003cp\u003eFast response allowed many organizations to survive and thrive in 2020. Orgs went remote overnight; businesses launched consumer-facing apps, and \u003ca href=\"https://auth0.com/blog/how-brick-and-mortar-approaches-improve-digital-experiences/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003econsumers shifted buying patterns online\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eGoing fast gets products to market, it gives consumers choices, and it helps companies scale. But when you jump ahead seven to 10 years in your digital road map, you risk leaving a few security and data privacy concerns behind. I reached out to key members of my security team, as well as our data privacy team, to put together this three-part series based on our industry experience and observations.\u003c/p\u003e\u003cp\u003eEach post will focus on protecting and securing two critical areas: your workforce and your consumer-facing apps. The first post will focus on security details to check and mitigate now. The second will focus on immediate data privacy concerns with the help of Auth0 Vice President, Privacy Lucy McGrath. And the third post will help you put together a plan for the future that will make it easier the next time you want to turn on the speed — and to remain current in an ever-changing security landscape.\u003c/p\u003e\u003cp\u003eThe thing is that security is a global team sport.  As more of us shift to working and living online, everything is more connected — and that can be a good thing. Securing your personal identity, your business identity, and helping increase security at your business can actually make an impact. Here’s what you can do to help make the internet safer for everyone.\u003c/p\u003e\u003ch2 id=\"Why-Remote-Work-Forced-a-Change-in-Security-Thinking\"\u003eWhy Remote Work Forced a Change in Security Thinking\u003c/h2\u003e\u003cp\u003eBefore the world started working remotely, a lot of companies used a castle-and-moat approach to security. They relied on a combination of physical security and internal networks to ensure that employees and outsiders only accessed necessary information. They might even have relied on SaaS companies to provide some of their protections, but the thinking was still pretty much “protect the castle.”\u003c/p\u003e\u003cp\u003eSuddenly workers were working anywhere in the world, maybe on their own devices. Without remote experience, your security team might not have had time to think through all of the security issues inherent with having remote endpoints. For example, to ensure that they properly protect these assets against current threats like ransomware and malware, it would be appropriate to install leading next-gen antivirus on these machines.\u003c/p\u003e\u003cp\u003eRole-based privileges and policies also abruptly needed to follow the user. I know I work for an identity company, but it was identity and policy \u003ca href=\"https://auth0.com/blog/why-identity-federation-matters/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003efederation\u003c/a\u003e that anticipated this need and allowed for a rapid response.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://www.businessinsider.com/companies-asking-employees-to-work-from-home-due-to-coronavirus-2020\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNow some companies are making work from home a permanent\u003c/a\u003e part of their employee offering. Since Auth0 was built as a remote-friendly, globally dispersed company, we’ve had some time to think through the security concerns. Here’s what you need to consider to protect your customers, your business, and your employees:\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003cstrong\u003eSecure the endpoints.\u003c/strong\u003e Services like CarbonBlack or CrowdStrike can help prevent malware or breaches occurring from endpoints.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eUpdate bring your own device policies.\u003c/strong\u003e Rethink how and where employees are accessing business and customer data. Do you need to restrict access in public spaces? Adjust policies?\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eUpdate action policies\u003c/strong\u003e. What do your employees do if a work computer is stolen? What steps do they need to take if the information is exposed at home? A \u003ca href=\"https://www.darkreading.com/51--of-wfh-parents-say-children-have-accessed-work-accounts/d/d-id/1339754\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e1Password survey\u003c/a\u003e found that 51% of work from home (WFH) parents surveyed said their children had accessed their work accounts, sometimes accidentally deleting necessary files.  How can you support your employees??\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eHuman risk is increased.\u003c/strong\u003e Have a look at the next section.\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"The-Human-Element\"\u003eThe Human Element\u003c/h2\u003e\u003cp\u003eThis is the critical part of this series — \u003cstrong\u003ethe human element is the most important aspect of security and data privacy.\u003c/strong\u003e\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eSecurity awareness training needs to happen at every single level of your organization.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eA malicious actor is going to use everything you need to do business — email address patterns, information on your website, social media posts, and items gleaned from news articles all to try to gain entry to your system. While the attacks will vary, they usually follow this pattern: \u003cstrong\u003ehuman factor\u003c/strong\u003e + inject something into the code + lack of input validation + insufficient logging and monitoring.\u003c/p\u003e\u003cp\u003eIf something looks like it’s coming from your CEO or payroll, an employee might fall for it and supply a way into your system. And once a bad actor is in, there’s lots they can do.\u003c/p\u003e\u003cp\u003eBut if you train your entire team to watch out for phishing attacks, you can stop them at the first step. \u003ca href=\"https://auth0.com/blog/protecting-against-phishing-attacks/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eThis post is a good place to start.\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAttacks evolve, so even though security awareness is something you should pause and do now, it’s something you’re going to need to do regularly. Developing a security culture throughout your org provides great protection. To do business with some industries like finance or healthcare, the training will be required to cover specific areas and will need to be documented. The training you provide can also help protect your employees in their personal lives.\u003c/p\u003e\u003ch2 id=\"Top-7-Things-to-Do-Now-to-Check-Your-App-s-Security\"\u003eTop 7 Things to Do Now to Check Your App’s Security\u003c/h2\u003e\u003cp\u003eThis can seem like a lot if you don’t have an in-house security team (and maybe if you do). One principle of security is encouraging diversity of thought not only because it’s the right thing to do but because studies show it makes teams more productive. In security, \u003ca href=\"https://www.mckinsey.com/business-functions/strategy-and-corporate-finance/our-insights/innovation-in-a-crisis-why-it-is-more-critical-than-ever\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ediversity of thought\u003c/a\u003e makes it easier to spot potential threats. This is part of why even large teams rely on external testing vendors and may even need to provide proof of outside testing for certifications like \u003ca href=\"https://auth0.com/blog/the-csa-star-program-a-business-guide-to-certification/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCSA Star\u003c/a\u003e and \u003ca href=\"https://auth0.com/blog/what-is-pci-a-business-guide-to-compliance/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ePCI\u003c/a\u003e.\u003c/p\u003e\u003col start=\"1\"\u003e\u003cli\u003e\u003cstrong\u003eGet an external third-party pen test — and implement the recommendations\u003c/strong\u003e. A penetration test is where you hire a verified third party to attempt to find your app’s vulnerabilities. They will sign a non-disclosure agreement (NDA) and provide a detailed report outlining their findings and usually with recommended fixes cataloged by severity. Discovering vulnerabilities can be scary, and there is the temptation to use fear to drive organizational change, but we’ve found that partnering and collaborating with other teams and leadership can often get changes implemented faster.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eReview best practices for your cloud-based services.\u003c/strong\u003e When people go really fast, they may not take the time to fully understand the technology and security controls. This is a great time to go back and pay really close attention to the docs provided by your third-party vendors.\u003c/li\u003e\u003c/ol\u003e\u003cblockquote\u003e\u003cp\u003e“Many common AWS security issues, for example, happen as a result of not following AWS security best practice guidelines when setting up the infrastructure. This can lead to open and accessible EC2 security groups, public S3 buckets, unprotected EMR clusters, and more,” says Auth0 Detection and Response Security Engineer Troy Wegner (formerly of AWS and Amazon.com).\u003c/p\u003e\u003c/blockquote\u003e\u003col start=\"3\"\u003e\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://www.overops.com/blog/static-vs-dynamic-code-analysis-how-to-choose-between-them/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ePerform static\u003c/a\u003e and \u003ca href=\"https://www.overops.com/blog/static-vs-dynamic-code-analysis-how-to-choose-between-them/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edynamic code analysis\u003c/a\u003e\u003c/strong\u003e. Static analysis reviews the code as it exists. Dynamic analysis looks for vulnerabilities while the code is being executed and for unexpected outcomes. Ideally, you want to move towards baking both into your Software Development Lifecycle (SDLC). Devs may not always enjoy adding this to part of their process—more on how to add this analysis to your long-term software development plans in the final post.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eThink through vulnerability management and updates\u003c/strong\u003e. Since humans are fallible and it’s humans who make code, it’s inevitable that you’re going to run into vulnerabilities. If you don’t have a plan for pushing updates, now’s the time to make one so you don’t hear about something BIG like the \u003ca href=\"https://www.vox.com/2014/6/19/18076318/heartbleed\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eHeartbleed Bug\u003c/a\u003e and find yourself painfully updating ad-hoc.\u003c/li\u003e\u003c/ol\u003e\u003cblockquote\u003e\u003cp\u003eIn general, you’re going to need to test every time your devs update something and whenever your tech stack libraries or any of the main operating systems updates. Services like Chef, Puppet and Terraform can make this easier by pushing updates from a central server to connected servers. In the final post, we’ll get into longer-term strategies for updates, like maintaining a Golden Amazon Machine Image (AMI) if you’re on AWS. For now, just document how and when you’re going to update and test.\u003c/p\u003e\u003c/blockquote\u003e\u003col start=\"5\"\u003e\u003cli\u003e\u003cstrong\u003eThreat model\u003c/strong\u003e. A lot of security is determining risks. Ideally, you’ve threat modeled before building your app, but in some ways, it’s easier to model after it’s live. Yes, you can hire a trusted third party to do this for you. To give you a sense of the thought process, I asked Troy to threat model this restaurant scenario. Security engineers often diagram vulnerabilities, so we also include Troy’s whiteboard as a reference.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eLet’s say you’re a local restaurant who responded to COVID by offering the ingredients to make your tastiest dishes and recipes to your customers via curbside pickup. You hired someone to put the app together quickly, but now your region is opening up, and you’ve decided this channel of operations should continue contributing to your bottom line. \u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/23aumh6u8s0i/3qWEruezG4YZw2AwS2w4Nf/ccb3121e94d794c8baa0ec470e4b084d/diagram.jpg\" alt=\"Whiteboard\"/\u003e\n\u003cstrong\u003eFigure 1:\u003c/strong\u003e \u003cem\u003eAuth0 Senior Security Engineer - Detection and Response Troy Wegner’s whiteboard of our restaurant scenario.\u003c/em\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003eStart with authentication because you know customers need to authenticate in order to interact with your app. How are they authenticating? Are they only using a username and password? If they are only using a username and password for authentication, then you have just hit on your first major risk (user compromise/phishing/user impersonation).\u003c/li\u003e\u003cli\u003eAs a way to address the first risk identified, you have chosen to go with two-factor authentication for your users. But here is where things get interesting; which 2-factor options do you want to support? There are authenticator apps, FIDO U2F, Push-based 2FA, and SMS (the weakest available option). Each option has its own pros and cons to consider.\u003c/li\u003e\u003cli\u003eSince this is a restaurant, you’re also somehow connecting the app to the food supply. How are you measuring and validating your existing ingredients inventory to ensure you do not oversell based on your total ingredients available? Are you using a database to store this information? If so, where does this database live, is it protected or hardened information security wise, and if so, how is it hardened? How do you authenticate to the database, is it updated regularly, do you perform backups, etc.\u003c/li\u003e\u003cli\u003eIf your service has gotten really popular, too many people might try to order at once, and that could overwhelm the app’s limits. The app could go down due to resource constraints based on how it is architected. This is basically the risk a DOS/DDOS would present in bringing your app down and making it no longer available to your customers. In order to mitigate a DDOS risk, you might have a plan to make your app more fault tolerant and highly available by using load balancing, increasing back-end servers to handle the load, or using a front-end CDN to help distribute load across various edge locations.\u003c/li\u003e\u003cli\u003eMost likely, your app is taking payment and processing it in order to fulfill orders; how are customer payment and other sensitive information being handled/stored? If you accept credit cards or debit cards, PCI compliance is a concern you should address.\u003c/li\u003e\u003cli\u003eHere is where you would now want to think through and fully diagram out the rest of how the app works and uncover any other risks or bottlenecks that currently exist with your app, place a severity on those risks, and determine by severity which risks you want to fix, and which ones you are ok accepting.\u003c/li\u003e\u003c/ul\u003e\u003col start=\"6\"\u003e\u003cli\u003e\u003cstrong\u003eTurn on your logs — and make sure they’re monitored\u003c/strong\u003e. Turning on logs can seem like common sense, but because there’s often an expense attached to logging and getting the data analyzed, the logs might not always be turned on. It’s really hard to know what to fix after a malware outbreak or other issues occur, especially if your logs aren’t turned on and are being actively analyzed.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eSo this is where we tell you to turn on the logs for all the services you’re using. You should also make sure that a trusted third-party vendor or trained security engineer is watching your logs and building actionable detections based on those log sources to look for suspicious or anomalous activity.\u003c/p\u003e\u003col start=\"7\"\u003e\u003cli\u003e\u003cstrong\u003eTake action\u003c/strong\u003e. Logs, vulnerability assessments, pen tests — these things can help you identify what needs to be fixed, but you still need to fix it. Breaches and ransomware are the obvious security problems you want to avoid. How your security challenges impact consumer behavior might not be as clear. Lost conversions, abandoned shopping carts, and low time on site are all indications that your target audience may not feel comfortable sharing their data with you. Our customers tell us that an app or site that feels secure (think smooth login, logical and smooth payment process) supports their business goals.\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"If-You-Need-More-Help\"\u003eIf You Need More Help\u003c/h2\u003e\u003cp\u003eAuthentication is often a critical part of securing an app or workplace. If you’d like to understand how Auth0’s solutions might help make your app more secure, please reach out to the \u003ca href=\"https://auth0.com/contact-us\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eteam at Auth0\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eMy next post will focus on immediate data privacy concerns with the help of Auth0 Vice President of Privacy Lucy McGrath.\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"About-Auth0\"\u003eAbout Auth0 \u003c/h2\u003e\u003cp\u003eAuth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit \u003ca href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://auth0.com\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/main\u003e\u003c/article\u003e\u003c/section\u003e\u003c/div\u003e",
      "summary": "Rapid change introduces workforce and app risks. Auth0 Security team’s advice on what to fix now.",
      "date_published": "2021-07-28T16:05:00Z",
      "author": {}
    }
  ]
}
