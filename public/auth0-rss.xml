<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Auth0</title>
    <link>https://auth0.com/blog/rss.xml</link>
    <description></description>
    <item>
      <title>Flutter Authentication and Authorization with Auth0, Part 4: Roles and Permissions</title>
      <link>https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-4-roles-permissions/</link>
      <description>In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>In the previous section, you learned how to add real-time chat to the application and set up the <em>MJ Coffee</em> app to load different chat screens. </p><p>In this section, you will learn how to manage roles and permissions in Auth0 and a Flutter app, as well as how to apply a proper authorization flow. You&#39;ll also learn how to leverage RBAC and permission-based functionalities in a Flutter application.</p><blockquote><p><strong>Look for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.</strong></p></blockquote><h2 id="Managing-Roles">Managing Roles</h2><p>In a previous section in this tutorial, you learned how to create roles in the Auth0 dashboard. It’s time to see why you need roles and learn how you can leverage them into your app.</p><p>Role-based access control (RBAC) is a way to assign permissions to users based on their roles. It offers a simple approach to access management that is less prone to error than assigning permissions to users individually.</p><p>For example, suppose you use RBAC to control Customer/Employee access in the <em>MJ Coffee</em> application. In that case, you could give employees a role that allows them to update users’ details or access the community chat screen. In contrast, customers would view the support screen, but wouldn’t be authorized to perform tasks such as deleting messages or uploading attachments.</p><p>When planning your access control strategy, it’s generally a good idea to assign users a smalled number of permissions that allow them to get their work done.</p><p>You can leverage Auth0 Actions to assign roles automatically to each user after they sign up.</p><p>🛠 Once more, create a new custom action. In the left column menu of the Auth0 dashboard, select <strong>Actions</strong>, then <strong>Flows</strong>. The <strong>Choose Flow</strong> page will appear. Select <strong>Post User Registration</strong>:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1pbuab4m48ur5r0abMjpx5/0c67319150786f3ccff7a1fd4f788b60/create_new_post_user_registration.png" alt="Creating a new post user registration"/></p><p>🛠 Name the action <code>Assign Role</code> and add the <code>auth0</code> npm module with version <code><span>2.35</span><span>.1</span></code>.</p><p>🛠 Add the following handler, which will be called during the execution of a <code>PostUserRegistration</code> flow:</p><pre><code><span>// Auth0 Actions</span>

<span>const</span> ManagementClient <span>=</span> <span>require</span><span>(</span><span>&#39;auth0&#39;</span><span>)</span><span>.</span>ManagementClient<span>;</span>
<span>const</span> AuthenticationClient <span>=</span> <span>require</span><span>(</span><span>&#39;auth0&#39;</span><span>)</span><span>.</span>AuthenticationClient<span>;</span>

exports<span>.</span><span>onExecutePostUserRegistration</span> <span>=</span> <span>async</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>const</span> <span>DOMAIN</span> <span>=</span> <span>&#39;{YOUR_DOMAIN}&#39;</span><span>;</span>
  <span>const</span> auth0 <span>=</span> <span>new</span> <span>AuthenticationClient</span><span>(</span><span>{</span>
    domain<span>:</span> <span>DOMAIN</span><span>,</span>
    clientId<span>:</span> event<span>.</span>secrets<span>.</span><span>M2M_CLIENT_ID</span><span>,</span>
    clientSecret<span>:</span> event<span>.</span>secrets<span>.</span><span>M2M_CLIENT_SECRET</span><span>,</span>
  <span>}</span><span>)</span><span>;</span>
  <span>const</span> response <span>=</span> <span>await</span> auth0<span>.</span><span>clientCredentialsGrant</span><span>(</span><span>{</span>
    audience<span>:</span> <span><span>`</span><span>https://</span><span><span>${</span><span>DOMAIN</span><span>}</span></span><span>/api/v2/</span><span>`</span></span><span>,</span>
    scope<span>:</span> <span>&#39;read:users update:users&#39;</span><span>,</span>
  <span>}</span><span>)</span><span>;</span>
  <span>const</span> <span>API_TOKEN</span> <span>=</span> response<span>.</span>access_token<span>;</span>
  <span>const</span> management <span>=</span> <span>new</span> <span>ManagementClient</span><span>(</span><span>{</span>
    domain<span>:</span> <span>DOMAIN</span><span>,</span>
    token<span>:</span> <span>API_TOKEN</span><span>,</span>
  <span>}</span><span>)</span><span>;</span>

  <span>if</span> <span>(</span>event<span>.</span>user<span>.</span>email<span>.</span><span>endsWith</span><span>(</span><span>&#39;@mjcoffee.app&#39;</span><span>)</span><span>)</span> <span>{</span>
    <span>// employee</span>
    <span>await</span> management<span>.</span><span>assignRolestoUser</span><span>(</span>
      <span>{</span> id<span>:</span> event<span>.</span>user<span>.</span>user_id <span>}</span><span>,</span>
      <span>{</span> roles<span>:</span> <span>[</span><span>&#39;rol_CHpJMdZUPCLzo6E2&#39;</span><span>]</span> <span>}</span>
    <span>)</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>// customer</span>
    <span>await</span> management<span>.</span><span>assignRolestoUser</span><span>(</span>
      <span>{</span> id<span>:</span> event<span>.</span>user<span>.</span>user_id <span>}</span><span>,</span>
      <span>{</span> roles<span>:</span> <span>[</span><span>&#39;rol_fG50GuNE9S72jNZn&#39;</span><span>]</span> <span>}</span>
    <span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span></code></pre><p>Let&#39;s analyze this handler’s logic step by step.</p><p>The handler imports both <code>ManagementClient</code> and <code>AuthenticationClient</code> from the <code>auth0</code> module, a Node.js SDK that conveniently provides official Auth0 public APIs.</p><p>It then defines your domain name, <code><span>DOMAIN</span></code>. </p><p>🛠 In the handler, replace <code><span>{</span><span>YOUR_DOMAIN</span><span>}</span></code> with your application’s domain, which you’ll find in the Auth0 dashboard.</p><p>The handler initializes an authentication client, passing its constructor the application’s domain, client ID, and client secret. </p><p><strong>Note that the application client is a bit special here!</strong> This is <em>not</em> the application you have created and worked with so far. You need to create a Machine-to-Machine (M2M) application or Auth0 non-interactive client, which makes it possible to request a client credentials grant.</p><p>🛠 Open the Auth0 dashboard in a new tab in your browser. Go to the <strong>Applications</strong> page and creating a new application, selecting the <strong>Machine to Machine Applications</strong> type:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4s9EPsMj5Lg5StnSURGU4X/df7a4f7a97be3e83a4ff84d446137df3/create_new_m2m_app.png" alt="Creating a new M2M application in the Auth0 dashboard"/></p><p>🛠 Once the M2M application is created, take a note of Client ID and Client Secret. You will need to add them to your Actions’ secrets in the next step, then go to the <strong>APIs</strong> tab and authorize the Auth0 Management API.</p><p>As mentioned before, it&#39;s always a good idea to limit the permissions. Hence, select only those permissions needed to perform actions with this Client. </p><p>🛠 We want to be able to add roles to users, so select the <code>read<span>:</span>users</code> and <code>update<span>:</span>users</code> permissions:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1zQbWKfW0orBdHROj3RR3j/ce856b0663b4f78610c9d3aa1ea9e0e5/authorize_api.png" alt="Authorizing the API"/></p><p>🛠 Add the following to the action:</p><ul><li>The key <code><span>M2M_CLIENT_ID</span></code>, with the client ID as its corresponding value</li><li>The key <code><span>M2M_CLIENT_SECRET</span></code>, with the client secret as the value</li></ul><p>You can now successfully authenticate an Auth0 client and request a management API token by specifying audiences and scopes. Scopes are the ones that you have selected in the previous steps in the permission tab under Auth0 management API.</p><p>Once access is granted and the token is received, you can create a management client.</p><p>The logic is relatively simple for this MJ Coffee app.</p><pre><code><span>if</span> <span>(</span>event<span>.</span>user<span>.</span>email<span>.</span><span>endsWith</span><span>(</span><span>&#39;@mjcoffee.app&#39;</span><span>)</span><span>)</span> <span>{</span>
  <span>// employee</span>
<span>}</span> <span>else</span> <span>{</span>
  <span>// customer</span>
<span>}</span></code></pre><p>Simply put, if the user’s email address ends with  <code>@mjcoffee<span>.</span>app</code> they will be assigned the <em>employee</em> role; otherwise, they’ll be assigned the <em>customer</em> role. This, of course, could change based on your implementation.</p><p>Finally, the handler calls <code><span>assignRolesToUser</span><span>(</span><span>)</span></code> on the <code>management</code> client and passes:</p><ul><li>a map containing the user ID, and</li><li>a list of role IDs.</li></ul><p>To get a role’s ID, select <strong>User Management</strong> in the Auth0 dashboard’s left column menu, then select <strong>Roles</strong>:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4WKeTj5YRcq1IZUcxCO32d/d627b895fe44352d1e4f7de01fa406c6/role_id.png" alt="Getting a Role’s ID"/></p><p>Fantastic! Don’t forget to deploy your function.</p><p>🛠 For the last step, go to <strong>Flows</strong>, then <strong>Post User Registration</strong>. Add your <code>Assign Role</code> custom action to the flow.</p><p>If you are impatient to test what you have created so far, navigate to the Auth0 dashboard’s <strong>Users</strong> page and create new users with and without email addresses that you have specified in your function logic. Then, go to the <strong>Role</strong> tab — you should see that for each user, their role was assigned automatically:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/30XsYPDx2euHspY9BGnk6s/ddcaf08706e6dda515179b46611cd724/user_role.png" alt="Users and their automatically assigned roles"/></p><h2 id="Managing-Permissions">Managing Permissions</h2><p>You’ll often need to create a custom API that defines permissions. Then you can assign those permissions to roles, which can then be assigned to users.</p><p>🛠 In the Auth0 dashboard, select <strong>Applications</strong> in the left column menu, select <strong>APIs</strong> in the submenu, and then click the <strong>Create API</strong> button to create a new custom API.</p><p>🛠 Give the API a recognizable name, such as <code>StreamChat Management <span>API</span></code>, then define your identifier. This identifier will become your API audience. Note that the identifier cannot be modified. A good practice for naming identifiers is to use a URL, even if that URL is not publicly available. For example, you could name the identifier <code>https<span>:</span><span>/</span><span>/</span>getStreamChat<span>.</span>mjcoffee<span>.</span>app<span>/</span>v1<span>/</span></code>.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4NdodtRf9CZSY8O8Onb5fP/7b0216eed696a44a99ef5a99437431a5/custom_api.png" alt="Creating a new custom API"/></p><p>🛠 Once the API is created, go to the RBAC Settings section and enable RBAC and Add Permissions in the Access Token. The API is supposed to be flagged as First Party so that you can turn on Allow Skipping User Consent. Turn on Allow Offline Access so that Auth0 will allow applications to ask for Refresh Tokens for this API.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1egWhGNMvy0g12Oh6ccQyq/ee28278cf4831101c95dc9ceb5acbf50/rbac-api.png" alt="RBAC API"/></p><p>🛠 Navigate to the <strong>Permissions</strong> tab and add your permissions and description. I recommend at adding at least these permissions:</p><ul><li><code><span>delete</span><span>.</span>user<span>.</span>message</code></li><li><code>edit<span>.</span>user<span>.</span>message</code></li><li><code>upload<span>.</span>attachments</code></li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/47v9LpCiZKbnsTL3VDBQoe/fc80c54e22f8d316b3bf02a6ab3e656f/custom_permissions.png" alt="Custome permissions"/></p><p>The more permissions you define, and the more explicit they are,  the better you can control the resources.</p><p>🛠 Next, head over to <strong>Roles</strong> under <strong>User Management</strong>. Go to each role and assign the following permissions:</p><ul><li><strong>Employee</strong>
<ul><li><code>edit<span>.</span>user<span>.</span>message</code></li><li><code>upload<span>.</span>attachments</code></li></ul></li><li><strong>Customer</strong>
<ul><li><code>edit<span>.</span>user<span>.</span>message</code></li></ul></li><li><strong>Admin</strong>
<ul><li><code><span>delete</span><span>.</span>user<span>.</span>message</code></li><li><code>edit<span>.</span>user<span>.</span>message</code></li><li><code>upload<span>.</span>attachments</code></li></ul></li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6JylazPCTIIvUKwrSicEib/116523b7e52452211349376dff85dba0/role_permission.png" alt="Defining custom permissions"/></p><p>You have managed to create roles and users are automatically assigned roles on registration. Although role assignment is automatic now, you can still alter user roles manually. For example, you can add the <strong>Admin</strong> role to specific users in the Auth0 dashboard.</p><p>The only step remaining is to expose the roles and permissions to <code>idToken</code> and <code>accessToken</code> that the Flutter app can consume.</p><h2 id="Exposing-Roles-and-Permission">Exposing Roles and Permission</h2><p>🛠 This step is pretty similar to what you have done when assigning roles. As a reminder, here are the steps:</p><ul><li>Create a custom action, triggering Login/Post Login</li><li>Name the action “Revealing User Roles &amp; Permissions”</li><li>Add the machine-to-machine application’s client ID and client key to the action’s secrets</li><li>Add <code>auth0</code> npm package version <code><span>2.35</span><span>.1</span></code></li></ul><p>🛠 Once you’ve done that, follow the code below:</p><pre><code><span>// Auth0 Actions</span>

<span>const</span> ManagementClient <span>=</span> <span>require</span><span>(</span><span>&#39;auth0&#39;</span><span>)</span><span>.</span>ManagementClient<span>;</span>
<span>const</span> AuthenticationClient <span>=</span> <span>require</span><span>(</span><span>&#39;auth0&#39;</span><span>)</span><span>.</span>AuthenticationClient<span>;</span>
exports<span>.</span><span>onExecutePostLogin</span> <span>=</span> <span>async</span> <span>(</span><span>event<span>,</span> api</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>const</span> <span>DOMAIN</span> <span>=</span> <span>&#39;mhadaily.eu.auth0.com&#39;</span><span>;</span>
  <span>const</span> auth0 <span>=</span> <span>new</span> <span>AuthenticationClient</span><span>(</span><span>{</span>
    domain<span>:</span> <span>DOMAIN</span><span>,</span>
    clientId<span>:</span> event<span>.</span>secrets<span>.</span><span>M2M_CLIENT_ID</span><span>,</span>
    clientSecret<span>:</span> event<span>.</span>secrets<span>.</span><span>M2M_CLIENT_SECRET</span><span>,</span>
  <span>}</span><span>)</span><span>;</span>
  <span>const</span> response <span>=</span> <span>await</span> auth0<span>.</span><span>clientCredentialsGrant</span><span>(</span><span>{</span>
    audience<span>:</span> <span><span>`</span><span>https://</span><span><span>${</span><span>DOMAIN</span><span>}</span></span><span>/api/v2/</span><span>`</span></span><span>,</span>
    scope<span>:</span> <span>&#39;read:users update:users read:roles&#39;</span><span>,</span>
  <span>}</span><span>)</span><span>;</span>
  <span>const</span> <span>API_TOKEN</span> <span>=</span> response<span>.</span>access_token<span>;</span>
  <span>const</span> management <span>=</span> <span>new</span> <span>ManagementClient</span><span>(</span><span>{</span>
    domain<span>:</span> <span>DOMAIN</span><span>,</span>
    token<span>:</span> <span>API_TOKEN</span><span>,</span>
  <span>}</span><span>)</span><span>;</span>

  <span>const</span> params <span>=</span> <span>{</span> id<span>:</span> event<span>.</span>user<span>.</span>user_id <span>}</span><span>;</span>
  <span>const</span> roles <span>=</span> <span>await</span> management<span>.</span><span>getUserRoles</span><span>(</span>params<span>)</span><span>;</span>
  <span>const</span> permissions <span>=</span> <span>await</span> management<span>.</span><span>getUserPermissions</span><span>(</span>params<span>)</span><span>;</span>

  <span>const</span> namespace <span>=</span> <span>&#39;https://users.mjcoffee.app&#39;</span><span>;</span>
  <span>if</span> <span>(</span>event<span>.</span>authorization<span>)</span> <span>{</span>
    api<span>.</span>idToken<span>.</span><span>setCustomClaim</span><span>(</span><span><span>`</span><span><span>${</span>namespace<span>}</span></span><span>/roles</span><span>`</span></span><span>,</span> roles<span>)</span><span>;</span>
    api<span>.</span>accessToken<span>.</span><span>setCustomClaim</span><span>(</span><span><span>`</span><span><span>${</span>namespace<span>}</span></span><span>/roles</span><span>`</span></span><span>,</span> roles<span>)</span><span>;</span>
    api<span>.</span>idToken<span>.</span><span>setCustomClaim</span><span>(</span><span><span>`</span><span><span>${</span>namespace<span>}</span></span><span>/permissions</span><span>`</span></span><span>,</span> permissions<span>)</span><span>;</span>
    api<span>.</span>accessToken<span>.</span><span>setCustomClaim</span><span>(</span><span><span>`</span><span><span>${</span>namespace<span>}</span></span><span>/permissions</span><span>`</span></span><span>,</span> permissions<span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span></code></pre><p>The code is pretty similar to what you have written once before. The first change is that it adds <code>read<span>:</span>roles</code> to the scope. Make sure you have enabled this permission under the M2M application as you have done once for the <code>read<span>:</span>users update<span>:</span>users</code> permissions; otherwise, you will face an “unauthorized” error.</p><p>It then calls <code><span>getUserRoles</span><span>(</span><span>)</span></code> and <code><span>getUserPermissions</span><span>(</span><span>)</span></code>,  passing the user ID. These functions will return user roles and permissions respectively.</p><p>After defining a namespace, the code calls <code><span>setCustomClaim</span><span>(</span><span>)</span></code> to add both roles and permission custom claims to the ID and access tokens.</p><p>🛠 Make sure you deploy and then navigate to <strong>Flows</strong>. You want to add the new custom action to the login flow right before the previous action you created earlier:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5XinnapiJ1AUQN0LiHY5sV/bf95d7da7f1333aafe30f80f0e81f14e/new_login_flow.png" alt="new flow login"/></p><p>So far so good, but you still need to go to the Flutter app and add roles and permissions to the models.</p><h2 id="Read-Roles-and-Permissions-in-Flutter">Read Roles and Permissions in Flutter</h2><p>Now that both roles and permissions are available in the ID and access tokens, you can add them to <code>Auth0IdToken</code> and <code>Auth0UserInfo</code>, respectively.</p><p>🛠 First, create a file named <code>auth0_roles<span>.</span>dart</code> file in the <code><span>/</span>lib<span>/</span>models</code> folder:</p><pre><code><span>// /lib/models/auth0_roles.dart</span>

<span>import</span> <span>&#39;package:json_annotation/json_annotation.dart&#39;</span><span>;</span>

<span>part</span> <span>&#39;auth0_roles.g.dart&#39;</span><span>;</span>

<span>enum</span> Role <span>{</span>
  Employee<span>,</span>
  Admin<span>,</span>
  Customer<span>,</span>
<span>}</span>

<span>@JsonSerializable</span><span>(</span><span>)</span>
<span>class</span> <span>Auth0Role</span> <span>{</span>
  <span>Auth0Role</span><span>(</span><span>{</span>
    required <span>this</span><span>.</span>id<span>,</span>
    required <span>this</span><span>.</span>name<span>,</span>
    required <span>this</span><span>.</span>description<span>,</span>
  <span>}</span><span>)</span><span>;</span>

  <span>final</span> String id<span>;</span>
  <span>final</span> Role name<span>;</span>
  <span>final</span> String description<span>;</span>

  <span>factory</span> Auth0Role<span>.</span><span>fromJson</span><span>(</span>Map<span>&lt;</span>String<span>,</span> <span>dynamic</span><span>&gt;</span> json<span>)</span> <span>=</span><span>&gt;</span>
      _$<span>Auth0RoleFromJson</span><span>(</span>json<span>)</span><span>;</span>

  Map<span>&lt;</span>String<span>,</span> <span>dynamic</span><span>&gt;</span> <span>toJson</span><span>(</span><span>)</span> <span>=</span><span>&gt;</span> _$<span>Auth0RoleToJson</span><span>(</span><span>this</span><span>)</span><span>;</span>

  <span>@override</span>
  String <span>toString</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>&#39;&#39;&#39;$name&#39;&#39;&#39;</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre><p>🛠 Then create <code>auth0_permissions<span>.</span>dart</code> in the same directory, with the code below:</p><pre><code><span>// /lib/models/auth0_permissions.dart</span>

<span>import</span> <span>&#39;package:json_annotation/json_annotation.dart&#39;</span><span>;</span>

<span>part</span> <span>&#39;auth0_permissions.g.dart&#39;</span><span>;</span>

<span>class</span> <span>UserPermissions</span> <span>{</span>
  <span>static</span> <span>const</span> String delete <span>=</span> <span>&#39;delete.user.message&#39;</span><span>;</span>
  <span>static</span> <span>const</span> String edit <span>=</span> <span>&#39;edit.user.message&#39;</span><span>;</span>
  <span>static</span> <span>const</span> String upload <span>=</span> <span>&#39;upload.attachments&#39;</span><span>;</span>
<span>}</span>

<span>@JsonSerializable</span><span>(</span><span>)</span>
<span>class</span> <span>Auth0Permission</span> <span>{</span>
  <span>Auth0Permission</span><span>(</span><span>{</span>
    required <span>this</span><span>.</span>permissionName<span>,</span>
    required <span>this</span><span>.</span>description<span>,</span>
    required <span>this</span><span>.</span>resourceServerName<span>,</span>
    required <span>this</span><span>.</span>resourceServerIdentifier<span>,</span>
    required <span>this</span><span>.</span>sources<span>,</span>
  <span>}</span><span>)</span><span>;</span>

  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;permission_name&#39;</span><span>)</span>
  <span>final</span> String permissionName<span>;</span>

  <span>final</span> String description<span>;</span>
  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;resource_server_name&#39;</span><span>)</span>
  <span>final</span> String resourceServerName<span>;</span>
  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;resource_server_identifier&#39;</span><span>)</span>
  <span>final</span> String resourceServerIdentifier<span>;</span>

  <span>final</span> List<span>&lt;</span>Auth0PermissionsSource<span>&gt;</span> sources<span>;</span>

  <span>factory</span> Auth0Permission<span>.</span><span>fromJson</span><span>(</span>Map<span>&lt;</span>String<span>,</span> <span>dynamic</span><span>&gt;</span> json<span>)</span> <span>=</span><span>&gt;</span>
      _$<span>Auth0PermissionFromJson</span><span>(</span>json<span>)</span><span>;</span>

  Map<span>&lt;</span>String<span>,</span> <span>dynamic</span><span>&gt;</span> <span>toJson</span><span>(</span><span>)</span> <span>=</span><span>&gt;</span> _$<span>Auth0PermissionToJson</span><span>(</span><span>this</span><span>)</span><span>;</span>

  <span>@override</span>
  String <span>toString</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>&#39;&#39;&#39;$permissionName&#39;&#39;&#39;</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>@JsonSerializable</span><span>(</span><span>)</span>
<span>class</span> <span>Auth0PermissionsSource</span> <span>{</span>
  <span>Auth0PermissionsSource</span><span>(</span><span>{</span>
    required <span>this</span><span>.</span>sourceId<span>,</span>
    required <span>this</span><span>.</span>sourceName<span>,</span>
    required <span>this</span><span>.</span>sourceType<span>,</span>
  <span>}</span><span>)</span><span>;</span>

  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;source_id&#39;</span><span>)</span>
  <span>final</span> String sourceId<span>;</span>
  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;source_name&#39;</span><span>)</span>
  <span>final</span> String sourceName<span>;</span>
  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;source_type&#39;</span><span>)</span>
  <span>final</span> String sourceType<span>;</span>

  <span>factory</span> Auth0PermissionsSource<span>.</span><span>fromJson</span><span>(</span>Map<span>&lt;</span>String<span>,</span> <span>dynamic</span><span>&gt;</span> json<span>)</span> <span>=</span><span>&gt;</span>
      _$<span>Auth0PermissionsSourceFromJson</span><span>(</span>json<span>)</span><span>;</span>

  Map<span>&lt;</span>String<span>,</span> <span>dynamic</span><span>&gt;</span> <span>toJson</span><span>(</span><span>)</span> <span>=</span><span>&gt;</span> _$<span>Auth0PermissionsSourceToJson</span><span>(</span><span>this</span><span>)</span><span>;</span>

  <span>@override</span>
  String <span>toString</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>&#39;&#39;&#39;
      sourceId: $sourceId,
      sourceName: $sourceName,
      sourceType: $sourceType,
      &#39;&#39;&#39;</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre><p>What you want to achieve here is to serialize and deserialize the roles and permissions for each model.</p><p>🛠 The next step is to update the <code>Auth0IdToken</code> model:</p><pre><code><span>// /lib/models/auth0_id_token.dart</span>

<span>@JsonSerializable</span><span>(</span><span>)</span>
<span>class</span> <span>Auth0IdToken</span> <span>{</span>
  <span>Auth0IdToken</span><span>(</span><span>{</span>
  
<span>.</span><span>.</span><span>.</span>

    required <span>this</span><span>.</span>roles<span>,</span>
    required <span>this</span><span>.</span>permissions<span>,</span>

<span>.</span><span>.</span><span>.</span>

<span>}</span><span>}</span>

<span>.</span><span>.</span><span>.</span>

  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;https://users.mjcoffee.app/roles&#39;</span><span>)</span>
  <span>final</span> List<span>&lt;</span>Auth0Role<span>&gt;</span> roles<span>;</span>

  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;https://users.mjcoffee.app/permissions&#39;</span><span>)</span>
  <span>final</span> List<span>&lt;</span>Auth0Permission<span>&gt;</span> permissions<span>;</span>
  
<span>.</span><span>.</span><span>.</span>

<span>}</span></code></pre><p>🛠 Do the same for the <code>Auth0User</code> model:</p><pre><code><span>// /lib/models/auth0_user.dart</span>

<span>@JsonSerializable</span><span>(</span><span>)</span>
<span>class</span> <span>Auth0User</span> <span>{</span>
  <span>Auth0User</span><span>(</span><span>{</span>
  
<span>.</span><span>.</span><span>.</span>

    required <span>this</span><span>.</span>permissions<span>,</span>
    required <span>this</span><span>.</span>roles<span>,</span>
    
<span>.</span><span>.</span><span>.</span>

<span>}</span><span>)</span>

<span>.</span><span>.</span><span>.</span>

  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;https://users.mjcoffee.app/roles&#39;</span><span>)</span>
  <span>final</span> List<span>&lt;</span>Auth0Role<span>&gt;</span> roles<span>;</span>

  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;https://users.mjcoffee.app/permissions&#39;</span><span>)</span>
  <span>final</span> List<span>&lt;</span>Auth0Permission<span>&gt;</span> permissions<span>;</span>
  
<span>.</span><span>.</span><span>.</span>

<span>}</span></code></pre><p>🛠 Finally, run the <code>build_runner</code> command to ensure that the models are generated properly:</p><pre><code>flutter pub run build_runner build --delete-conflicting-outputs</code></pre><p>You can now restart the <em>MJ Coffee</em> app, and everything should work as expected.</p><h2 id="Role-Based-Screens-in-Flutter">Role-Based Screens in Flutter</h2><p>It’s finally time to have a loading screen based on the user&#39;s role. If you remember, we wanted to add Support and Community screens for customers and employees, respectively. You created both screens earlier.</p><p>It would be easier to define getter methods in <code>Auth0User</code> to determine whether a user has a particular role or permission.</p><p>🛠 Add code to the <code>Auth0User</code> class as shown below:</p><pre><code><span>// /lib/models/auth0_user.dart</span>

<span>class</span> <span>Auth0User</span> <span>{</span>

<span>.</span><span>.</span><span>.</span>

  bool <span>get</span> hasImage <span>=</span><span>&gt;</span> picture<span>.</span>isNotEmpty<span>;</span>
  bool <span>can</span><span>(</span>String permission<span>)</span> <span>=</span><span>&gt;</span> permissions
      <span>.</span><span>where</span><span>(</span>
        <span>(</span>p<span>)</span> <span>=</span><span>&gt;</span> p<span>.</span>permissionName <span>==</span> permission<span>,</span>
      <span>)</span>
      <span>.</span>isNotEmpty<span>;</span>

  <span>get</span> isAdmin <span>=</span><span>&gt;</span> roles<span>.</span><span>where</span><span>(</span><span>(</span>role<span>)</span> <span>=</span><span>&gt;</span> role<span>.</span>name <span>==</span> Role<span>.</span>Admin<span>)</span><span>.</span>isNotEmpty<span>;</span>
  <span>get</span> isEmployee <span>=</span><span>&gt;</span>
      roles<span>.</span><span>where</span><span>(</span><span>(</span>role<span>)</span> <span>=</span><span>&gt;</span> role<span>.</span>name <span>==</span> Role<span>.</span>Employee<span>)</span><span>.</span>isNotEmpty<span>;</span>
  <span>get</span> isCustomer <span>=</span><span>&gt;</span>
      roles<span>.</span><span>where</span><span>(</span><span>(</span>role<span>)</span> <span>=</span><span>&gt;</span> role<span>.</span>name <span>==</span> Role<span>.</span>Customer<span>)</span><span>.</span>isNotEmpty<span>;</span>
      
<span>.</span><span>.</span><span>.</span>

<span>}</span></code></pre><p>These getters are pretty self-explanatory.</p><p>🛠 Next, open <code><span>/</span>lib<span>/</span>screens<span>/</span>menu<span>.</span>dart</code> and locate the <code>tabs</code> list in the <code>_MenuScreenState</code> class:</p><pre><code><span>// /lib/screens/menu.dart</span>

  <span>.</span><span>.</span><span>.</span>
  
  <span>final</span> List<span>&lt;</span>Widget<span>&gt;</span> tabs <span>=</span> <span>[</span>
      <span>MenuList</span><span>(</span>coffees<span>:</span> coffees<span>)</span><span>,</span>
      <span>if</span> <span>(</span>AuthService<span>.</span>instance<span>.</span>profile<span>?</span><span>.</span>isCustomer<span>)</span>
        <span>SupportChatScreen</span><span>(</span><span>)</span>
      <span>else</span>
        <span>CommunityScreen</span><span>(</span><span>)</span><span>,</span>
      <span>ProfileScreen</span><span>(</span><span>)</span><span>,</span>
    <span>]</span><span>;</span>
    
  <span>.</span><span>.</span><span>.</span></code></pre><p>🛠 In the same file, find <code>BottomNavigationBar</code> and add <code>BottomNavigationBarItem</code> to the second position in the list:</p><pre><code><span>// /lib/screens/menu.dart</span>

<span>.</span><span>.</span><span>.</span>

BottomNavigationBar <span>_bottomNavigationBar</span><span>(</span>Auth0User<span>?</span> user<span>)</span> <span>{</span>
    <span>return</span> <span>BottomNavigationBar</span><span>(</span>
      
      <span>.</span><span>.</span><span>.</span>
      
      items<span>:</span> <span>&lt;</span>BottomNavigationBarItem<span>&gt;</span><span>[</span>
      
        <span>.</span><span>.</span><span>.</span>
      
        <span>BottomNavigationBarItem</span><span>(</span>
          icon<span>:</span> AuthService<span>.</span>instance<span>.</span>profile<span>?</span><span>.</span>isCustomer
              <span>?</span> <span>Icon</span><span>(</span>Icons<span>.</span>support_agent<span>)</span>
              <span>:</span> <span>Icon</span><span>(</span>Icons<span>.</span>group<span>)</span><span>,</span>
          label<span>:</span> AuthService<span>.</span>instance<span>.</span>profile<span>?</span><span>.</span>isCustomer
              <span>?</span> <span>&#34;Support&#34;</span>
              <span>:</span> <span>&#34;Community&#34;</span><span>,</span>
        <span>)</span><span>,</span>
        
       <span>.</span><span>.</span><span>.</span>
       
      <span>]</span><span>,</span>
      
     <span>.</span><span>.</span><span>.</span>
     
    <span>)</span><span>;</span>
  <span>}</span>
  
<span>.</span><span>.</span><span>.</span></code></pre><p>🛠 To make the UI look better, you can add the user&#39;s avatar to the <code>appBar</code> so that the complete implementation is as follows:</p><pre><code><span>// /lib/screens/menu.dart</span>

<span>class</span> <span>MenuScreen</span> <span>extends</span> <span>StatefulWidget</span> <span>{</span>
  <span>static</span> String routeName <span>=</span> <span>&#39;menuScreen&#39;</span><span>;</span>
  <span>static</span> Route<span>&lt;</span>MenuScreen<span>&gt;</span> <span>route</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> MaterialPageRoute<span>&lt;</span>MenuScreen<span>&gt;</span><span>(</span>
      settings<span>:</span> <span>RouteSettings</span><span>(</span>name<span>:</span> routeName<span>)</span><span>,</span>
      builder<span>:</span> <span>(</span>BuildContext context<span>)</span> <span>=</span><span>&gt;</span> <span>MenuScreen</span><span>(</span><span>)</span><span>,</span>
    <span>)</span><span>;</span>
  <span>}</span>

  <span>@override</span>
  _MenuScreenState <span>createState</span><span>(</span><span>)</span> <span>=</span><span>&gt;</span> <span>_MenuScreenState</span><span>(</span><span>)</span><span>;</span>
<span>}</span>

<span>class</span> <span>_MenuScreenState</span> <span>extends</span> <span>State</span><span>&lt;</span>MenuScreen<span>&gt;</span> <span>{</span>
  int _selectedIndex <span>=</span> <span>0</span><span>;</span>
  Auth0User<span>?</span> profile <span>=</span> AuthService<span>.</span>instance<span>.</span>profile<span>;</span>

  <span>@override</span>
  <span>void</span> <span>initState</span><span>(</span><span>)</span> <span>{</span>
    <span>super</span><span>.</span><span>initState</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>final</span> List<span>&lt;</span>Widget<span>&gt;</span> tabs <span>=</span> <span>[</span>
    <span>MenuList</span><span>(</span>coffees<span>:</span> coffees<span>)</span><span>,</span>
    <span>if</span> <span>(</span>AuthService<span>.</span>instance<span>.</span>profile<span>?</span><span>.</span>isCustomer<span>)</span>
      <span>SupportChatScreen</span><span>(</span><span>)</span>
    <span>else</span>
      <span>CommunityScreen</span><span>(</span><span>)</span><span>,</span>
    <span>ProfileScreen</span><span>(</span><span>)</span><span>,</span>
  <span>]</span><span>;</span>

  <span>void</span> <span>_onItemTapped</span><span>(</span>int index<span>)</span> <span>{</span>
    <span>setState</span><span>(</span><span>(</span><span>)</span> <span>{</span>
      _selectedIndex <span>=</span> index<span>;</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@override</span>
  Widget <span>build</span><span>(</span>BuildContext context<span>)</span> <span>{</span>
    <span>return</span> <span>Scaffold</span><span>(</span>
      backgroundColor<span>:</span> Colors<span>.</span>white<span>,</span>
      appBar<span>:</span> <span>AppBar</span><span>(</span>
        automaticallyImplyLeading<span>:</span> <span>false</span><span>,</span>
        centerTitle<span>:</span> <span>false</span><span>,</span>
        title<span>:</span> <span>Text</span><span>(</span><span>&#34;Welcome ${profile?.name}&#34;</span><span>)</span><span>,</span>
        actions<span>:</span> <span>[</span>
          <span>_avatar</span><span>(</span>profile<span>)</span><span>,</span>
        <span>]</span><span>,</span>
      <span>)</span><span>,</span>
      body<span>:</span> tabs<span>[</span>_selectedIndex<span>]</span><span>,</span>
      bottomNavigationBar<span>:</span> <span>_bottomNavigationBar</span><span>(</span>profile<span>)</span><span>,</span>
    <span>)</span><span>;</span>
  <span>}</span>

  BottomNavigationBar <span>_bottomNavigationBar</span><span>(</span>Auth0User<span>?</span> user<span>)</span> <span>{</span>
    <span>return</span> <span>BottomNavigationBar</span><span>(</span>
      backgroundColor<span>:</span> Colors<span>.</span>white<span>,</span>
      type<span>:</span> BottomNavigationBarType<span>.</span>fixed<span>,</span>
      unselectedItemColor<span>:</span> Colors<span>.</span>brown<span>.</span>shade300<span>,</span>
      items<span>:</span> <span>&lt;</span>BottomNavigationBarItem<span>&gt;</span><span>[</span>
        <span>BottomNavigationBarItem</span><span>(</span>
          icon<span>:</span> <span>Icon</span><span>(</span>Icons<span>.</span>list_alt<span>)</span><span>,</span>
          label<span>:</span> <span>&#34;Menu&#34;</span><span>,</span>
        <span>)</span><span>,</span>
        <span>BottomNavigationBarItem</span><span>(</span>
          icon<span>:</span>
              user<span>?</span><span>.</span>isCustomer <span>?</span> <span>Icon</span><span>(</span>Icons<span>.</span>support_agent<span>)</span> <span>:</span> <span>Icon</span><span>(</span>Icons<span>.</span>group<span>)</span><span>,</span>
          label<span>:</span> user<span>?</span><span>.</span>isCustomer <span>?</span> <span>&#34;Support&#34;</span> <span>:</span> <span>&#34;Community&#34;</span><span>,</span>
        <span>)</span><span>,</span>
        <span>BottomNavigationBarItem</span><span>(</span>
          icon<span>:</span> <span>Icon</span><span>(</span>Icons<span>.</span>person<span>)</span><span>,</span>
          label<span>:</span> <span>&#34;Profile&#34;</span><span>,</span>
        <span>)</span><span>,</span>
      <span>]</span><span>,</span>
      currentIndex<span>:</span> _selectedIndex<span>,</span>
      selectedItemColor<span>:</span> Colors<span>.</span>brown<span>.</span>shade800<span>,</span>
      onTap<span>:</span> _onItemTapped<span>,</span>
    <span>)</span><span>;</span>
  <span>}</span>

  Padding <span>_avatar</span><span>(</span>Auth0User<span>?</span> profile<span>)</span> <span>{</span>
    <span>return</span> <span>Padding</span><span>(</span>
      padding<span>:</span> <span>const</span> EdgeInsets<span>.</span><span>all</span><span>(</span><span>8.0</span><span>)</span><span>,</span>
      child<span>:</span> <span>FittedBox</span><span>(</span>
        fit<span>:</span> BoxFit<span>.</span>cover<span>,</span>
        child<span>:</span> <span>ClipRRect</span><span>(</span>
          clipBehavior<span>:</span> Clip<span>.</span>antiAlias<span>,</span>
          borderRadius<span>:</span> BorderRadius<span>.</span><span>all</span><span>(</span>Radius<span>.</span><span>circular</span><span>(</span><span>600</span><span>)</span><span>)</span><span>,</span>
          child<span>:</span> <span>Container</span><span>(</span>
            child<span>:</span> <span>_avatarPhoto</span><span>(</span>profile<span>)</span><span>,</span>
          <span>)</span><span>,</span>
        <span>)</span><span>,</span>
      <span>)</span><span>,</span>
    <span>)</span><span>;</span>
  <span>}</span>

  Widget <span>_avatarPhoto</span><span>(</span>Auth0User<span>?</span> profile<span>)</span> <span>{</span>
    <span>return</span> profile <span>!=</span> <span>null</span> <span>&amp;&amp;</span> profile<span>.</span>hasImage
        <span>?</span> Image<span>.</span><span>network</span><span>(</span>
            profile<span>.</span>picture<span>,</span>
            width<span>:</span> <span>20</span><span>,</span>
            height<span>:</span> <span>20</span><span>,</span>
          <span>)</span>
        <span>:</span> <span>Container</span><span>(</span>
            width<span>:</span> <span>20</span><span>,</span>
            height<span>:</span> <span>20</span><span>,</span>
            color<span>:</span> darkBrown<span>,</span>
            child<span>:</span> <span>Center</span><span>(</span>
              child<span>:</span> <span>Text</span><span>(</span><span>&#39;${profile?.name[0].toUpperCase()}&#39;</span><span>)</span><span>,</span>
            <span>)</span><span>,</span>
          <span>)</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre><p>You can create a new user and assign it the “employee” role so that you can also test the Employee role screen.</p><p>Well done! Restart your app, log out, and log in again, and you’ll see the appropriate screen for your role:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4viiFWih2Zdu8FzWeIQYmS/489c1e5a9dda80abbf13e97a3541b945/role_based_screens.png" alt=" role base screen flutter "/></p><p>But that&#39;s not all! You still need an employee ID to create a private channel between the currently signed-in customer and an employee.</p><p>You can define an API that can return available agents to create a channel. However, another strategy that would work for the <em>MJ Coffee</em> app is to retrieve all employees&#39; user IDs via ID tokens’ custom claims and randomly pick one of them.</p><p>You can create other custom actions, similar to the previous steps for permissions and roles. I won’t walk you through all steps since you’ve already done it twice.</p><p>🛠 Name this action <code>Retrieve Employees User IDs</code> and define its logic as follows:</p><pre><code><span>// Auth0 Action</span>

<span>const</span> ManagementClient <span>=</span> <span>require</span><span>(</span><span>&#39;auth0&#39;</span><span>)</span><span>.</span>ManagementClient<span>;</span>
<span>const</span> AuthenticationClient <span>=</span> <span>require</span><span>(</span><span>&#39;auth0&#39;</span><span>)</span><span>.</span>AuthenticationClient<span>;</span>
exports<span>.</span><span>onExecutePostLogin</span> <span>=</span> <span>async</span> <span>(</span><span>event<span>,</span> api</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>const</span> <span>DOMAIN</span> <span>=</span> <span>&#39;mhadaily.eu.auth0.com&#39;</span><span>;</span>
  <span>const</span> auth0 <span>=</span> <span>new</span> <span>AuthenticationClient</span><span>(</span><span>{</span>
    domain<span>:</span> <span>DOMAIN</span><span>,</span>
    clientId<span>:</span> event<span>.</span>secrets<span>.</span><span>M2M_CLIENT_ID</span><span>,</span>
    clientSecret<span>:</span> event<span>.</span>secrets<span>.</span><span>M2M_CLIENT_SECRET</span><span>,</span>
  <span>}</span><span>)</span><span>;</span>
  <span>const</span> response <span>=</span> <span>await</span> auth0<span>.</span><span>clientCredentialsGrant</span><span>(</span><span>{</span>
    audience<span>:</span> <span><span>`</span><span>https://</span><span><span>${</span><span>DOMAIN</span><span>}</span></span><span>/api/v2/</span><span>`</span></span><span>,</span>
    scope<span>:</span> <span>&#39;read:users read:roles&#39;</span><span>,</span>
  <span>}</span><span>)</span><span>;</span>
  <span>const</span> <span>API_TOKEN</span> <span>=</span> response<span>.</span>access_token<span>;</span>
  <span>const</span> management <span>=</span> <span>new</span> <span>ManagementClient</span><span>(</span><span>{</span>
    domain<span>:</span> <span>DOMAIN</span><span>,</span>
    token<span>:</span> <span>API_TOKEN</span><span>,</span>
  <span>}</span><span>)</span><span>;</span>
  <span>const</span> params <span>=</span> <span>{</span> id<span>:</span> event<span>.</span>secrets<span>.</span><span>EMPLOYEE_ROLE_ID</span><span>,</span> per_page<span>:</span> <span>10</span><span>,</span> page<span>:</span> <span>0</span> <span>}</span><span>;</span>
  <span>const</span> employees <span>=</span> <span>await</span> management<span>.</span><span>getUsersInRole</span><span>(</span>params<span>)</span><span>;</span>
  <span>const</span> employee_ids <span>=</span> employees<span>.</span><span>map</span><span>(</span><span>(</span><span>employee</span><span>)</span> <span>=&gt;</span> employee<span>.</span>user_id<span>)</span><span>;</span>
  <span>const</span> namespace <span>=</span> <span>&#39;https://employees.mjcoffee.app&#39;</span><span>;</span>
  <span>if</span> <span>(</span>event<span>.</span>authorization<span>)</span> <span>{</span>
    api<span>.</span>idToken<span>.</span><span>setCustomClaim</span><span>(</span><span><span>`</span><span><span>${</span>namespace<span>}</span></span><span>/id</span><span>`</span></span><span>,</span> employee_ids<span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span></code></pre><p>Again, you will use <code>ManagementClient</code> to get the first ten users based on their role by calling <code><span>getUsersInRole</span><span>(</span><span>)</span></code> and passing the role ID that <code><span>EMPLOYEE_ROLE_ID</span></code> identifies from secrets, then define the namespace and set a custom claim on <code>idToken</code>.</p><p>🛠 Lastly, deploy this action and add it to the <strong>Login</strong> flow right after the GetStream User Token action and apply:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3T7JSFv4ogGggqg8ig34hh/d12e912be13cf17ce9f74f0ac73f9ca7/role-actions.png" alt=" role in login flow "/></p><p>Locate the <code>Auth0IdToken</code> and <code>Auth0User</code> classes in the Flutter app and add a new property, <code>availableAgents</code>, to both of them.</p><p>🛠 In <code>Auth0IdToken</code> you should have:</p><pre><code><span>// /lib/models/auth0_id_token.dart</span>

<span>@JsonSerializable</span><span>(</span><span>)</span>
<span>class</span> <span>Auth0IdToken</span> <span>{</span>
  <span>Auth0IdToken</span><span>(</span><span>{</span>
  
  <span>.</span><span>.</span><span>.</span>
  
    required <span>this</span><span>.</span>availableAgents<span>,</span>
    
    <span>.</span><span>.</span><span>.</span>
    
  <span>}</span><span>)</span><span>;</span>
  
<span>.</span><span>.</span><span>.</span>

  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;https://employees.mjcoffee.app/id&#39;</span><span>,</span> defaultValue<span>:</span> <span>[</span><span>]</span><span>)</span>
  <span>final</span> List<span>&lt;</span>String<span>&gt;</span> availableAgents<span>;</span>
  
<span>.</span><span>.</span><span>.</span>

<span>}</span></code></pre><p>🛠 ...and in <code>Auth0User</code> you can do the same:</p><pre><code><span>// /lib/models/auth0_user.dart</span>

<span>@JsonSerializable</span><span>(</span><span>)</span>
<span>class</span> <span>Auth0User</span> <span>{</span>
  <span>Auth0User</span><span>(</span><span>{</span>
  
  <span>.</span><span>.</span><span>.</span>
  
    required <span>this</span><span>.</span>availableAgents<span>,</span>
  
    <span>.</span><span>.</span><span>.</span>
    
  <span>}</span><span>)</span><span>;</span>
  
<span>.</span><span>.</span><span>.</span>

  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;https://employees.mjcoffee.app/id&#39;</span><span>,</span> defaultValue<span>:</span> <span>[</span><span>]</span><span>)</span>
  <span>final</span> List<span>&lt;</span>String<span>&gt;</span> availableAgents<span>;</span>

<span>.</span><span>.</span><span>.</span>

<span>}</span></code></pre><p>🛠 Don’t forget to run this:</p><pre><code>flutter pub run build_runner build --delete-conflicting-outputs</code></pre><p>🛠 It&#39;s perfectly fine if you decide to make this change only to the user class. Locate <code>createSupportChat</code> in <code>ChatService</code> class. You left the employee ID blank, so now you can refactor this to pick an employee ID randomly:</p><pre><code><span>// /lib/services/chat_service.dart</span>

 String<span>?</span> _currentEmployeeId<span>;</span>

Future<span>&lt;</span>Channel<span>&gt;</span> <span>createSupportChat</span><span>(</span>List<span>&lt;</span>String<span>&gt;</span> availableAgents<span>)</span> <span>async</span> <span>{</span>
    <span>// skip if the chat is still open with current employeeId</span>
    <span>if</span> <span>(</span>_currentEmployeeId <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>final</span> _random <span>=</span> <span>new</span> <span>Random</span><span>(</span><span>)</span><span>;</span>
      <span>final</span> randomNumber <span>=</span> <span>0</span> <span>+</span> _random<span>.</span><span>nextInt</span><span>(</span>availableAgents<span>.</span>length <span>-</span> <span>0</span><span>)</span><span>;</span>
      <span>final</span> String employeeId <span>=</span> availableAgents<span>[</span>randomNumber<span>]</span><span>.</span><span>split</span><span>(</span><span>&#39;|&#39;</span><span>)</span><span>.</span><span>join</span><span>(</span><span>&#39;&#39;</span><span>)</span><span>;</span>
      _currentEmployeeId <span>=</span> employeeId<span>;</span>
    <span>}</span>

    <span>final</span> channel <span>=</span> client<span>.</span><span>channel</span><span>(</span>
      <span>&#39;support&#39;</span><span>,</span>
      id<span>:</span> _currentChannelId<span>,</span>
      extraData<span>:</span> <span>{</span>
        <span>&#39;name&#39;</span><span>:</span> <span>&#39;MJCoffee Support&#39;</span><span>,</span>
        <span>&#39;members&#39;</span><span>:</span> <span>[</span>
          _currentEmployeeId<span>,</span>
          client<span>.</span>state<span>.</span>user<span>!</span><span>.</span>id<span>,</span>
        <span>]</span>
      <span>}</span><span>,</span>
    <span>)</span><span>;</span>
    <span>await</span> channel<span>.</span><span>watch</span><span>(</span><span>)</span><span>;</span>
    _currentChannelId <span>=</span> channel<span>.</span>id<span>;</span>
    <span>return</span> channel<span>;</span>
  <span>}</span></code></pre><p>Let&#39;s examine this code. First, it passes a list of employee IDs to <code>createSupportChat</code>. Then, it makes sure it is storing the current employee ID that has an open support chat in order to avoid recreating a new channel.</p><p>Finally, it randomly picks an ID from the list and creates a channel with the current customer.</p><p>This solution might not be the best possible one. However, it would work for our small coffee store. Ideally, you would define an API that can return an available employee to a customer on-demand. I may write another article to show you how you can better with other solutions.</p><p>🛠 Lastly, locate the <code><span>createChannel</span><span>(</span><span>)</span></code> method in the <code>_SupportChatScreenState</code> class (it’s in the <code><span>/</span>lib<span>/</span>screens<span>/</span>support<span>.</span>dart</code> file) and refactor it to pass the <code>availableAgents</code>.</p><pre><code><span>// /lib/screens/support.dart</span>

<span>.</span><span>.</span><span>.</span>

<span>createChannel</span><span>(</span><span>)</span> <span>async</span> <span>{</span>
    <span>if</span> <span>(</span>profile <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>final</span> _channel <span>=</span> <span>await</span> ChatService<span>.</span>instance<span>.</span><span>createSupportChat</span><span>(</span>
        profile<span>!</span><span>.</span>availableAgents<span>,</span>
      <span>)</span><span>;</span>
      <span>setState</span><span>(</span><span>(</span><span>)</span> <span>{</span>
        channel <span>=</span> _channel<span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
  
  <span>.</span><span>.</span><span>.</span></code></pre><blockquote><p>It&#39;s very important that you have registered all of your employees’ IDs in Stream chat. Typically, users can log in as employees should log in and everything will work. However, if you still have not registered all of your employees, you might get an error with the message <code>The following users are specified <span>in</span> channel<span>.</span>members but don&#39;t exist</code>. This usually happens if you have created any users before the Login flow and Custom token generation action have been created.</p></blockquote><p>Nicely done! You can restart your app, and this time you can see the support channel screen.</p><h2 id="Permission-Based-Functionalities">Permission-Based Functionalities</h2><p>After applying roles to have specific kinds of access in the app, you can go one step deeper and use functionalities based on the user&#39;s permission inherited from the role.</p><p>You have already defined the <code>can</code> method on <code>Auth0User</code> in the previous section. The purpose of this method is to check if the user has given permission. Let&#39;s use it.</p><p>🛠 Locate <code>MessageInput</code> in the <code>support<span>.</span>dart</code> file, and you can replace it with</p><pre><code><span>// /lib/screens/support.dart</span>

<span>.</span><span>.</span><span>.</span>

<span>MessageInput</span><span>(</span>
  disableAttachments<span>:</span> <span>!</span>profile<span>!</span><span>.</span><span>can</span><span>(</span>UserPermissions<span>.</span>upload<span>)</span><span>,</span>
  sendButtonLocation<span>:</span> SendButtonLocation<span>.</span>inside<span>,</span>
  actionsLocation<span>:</span> ActionsLocation<span>.</span>leftInside<span>,</span>
  showCommandsButton<span>:</span> <span>!</span>profile<span>?</span><span>.</span>isCustomer<span>,</span>
<span>)</span><span>,</span>

<span>.</span><span>.</span><span>.</span></code></pre><p>In the implementation above, <code>disableAttachments</code> is enabled based on the user&#39;s permission, or <code>showCommandsButton</code> is active only for the Customer role.</p><p>Another approach you can take is to limit the delete message functionality and apply <code>UserPermissions<span>.</span>delete</code> to remove the applicable UI.</p><p>Moreover, you may want to apply for these permissions on your back-end or API to perform. I will leave this part as homework.</p><h2 id="Closing-a-Support-Chat-Channel">Closing a Support Chat Channel</h2><p>For the last section of this tutorial, I&#39;d like to show you how to close a support channel chat.</p><p>🛠 First, you need to create a method for the <code>ChatService</code> class to send the command to close a channel.</p><pre><code><span>// /lib/services/chat_service.dart</span>

<span>.</span><span>.</span><span>.</span>

Future<span>&lt;</span><span>void</span><span>&gt;</span> <span>archiveSupportChat</span><span>(</span><span>)</span> <span>async</span> <span>{</span>
   <span>await</span> client<span>.</span><span>hideChannel</span><span>(</span>
      _currentChannelId<span>!</span><span>,</span>
      <span>&#39;support&#39;</span><span>,</span>
      clearHistory<span>:</span> <span>true</span><span>,</span>
    <span>)</span><span>;</span>
  client<span>.</span><span>channel</span><span>(</span><span>&#39;support&#39;</span><span>,</span> id<span>:</span> _currentChannelId<span>)</span><span>.</span><span>dispose</span><span>(</span><span>)</span><span>;</span>
  _currentChannelId <span>=</span> <span>null</span><span>;</span>
  _currentEmployeeId <span>=</span> <span>null</span><span>;</span>
<span>}</span>

<span>.</span><span>.</span><span>.</span></code></pre><p>In this implementation, you can hide a chat with an existing ID and the type <code>support</code> and finally, set both <code>_currentChannelId</code> and <code>_currentEmployeeId</code> to <code><span>null</span></code> so that next time users come to a support screen, they’ll see a new channel created, and it will connect them to another employee.</p><blockquote><p>Hiding a channel makes it invisible to the query channels. It can be retrieved if the user adds a new message to it or calls the <code><span>show</span><span>(</span><span>)</span></code> method to remove the hidden status.</p></blockquote><p>However, there are other possibilities. For example, you can <code>archive</code> or <code><span>delete</span></code> a channel. At the moment, <code>archive</code> is not exposed to the Stream Dart SDK. Therefore, for now, you can hide a channel.</p><p>🛠 Next, locate <code>MessageInput</code> in the <code>support<span>.</span>dart</code> file, and add <code>actions</code>.</p><pre><code><span>// /lib/screens/support.dart</span>
<span>{</span>

<span>.</span><span>.</span><span>.</span>

<span>MessageInput</span><span>(</span>
  actions<span>:</span> <span>[</span><span>_closeChat</span><span>(</span><span>)</span><span>]</span><span>,</span>
  disableAttachments<span>:</span> <span>!</span>profile<span>!</span><span>.</span><span>can</span><span>(</span>UserPermissions<span>.</span>upload<span>)</span><span>,</span>
  sendButtonLocation<span>:</span> SendButtonLocation<span>.</span>inside<span>,</span>
  actionsLocation<span>:</span> ActionsLocation<span>.</span>leftInside<span>,</span>
  showCommandsButton<span>:</span> <span>!</span>profile<span>?</span><span>.</span>isCustomer<span>,</span>
<span>)</span><span>,</span>

<span>.</span><span>.</span><span>.</span>

  <span>/// method in the class</span>
  CommonButton <span>_closeChat</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>CommonButton</span><span>(</span>
      onPressed<span>:</span> <span>(</span><span>)</span> <span>{</span>
        ChatService<span>.</span>instance<span>.</span><span>archiveSupportChat</span><span>(</span><span>)</span><span>;</span>
        CoffeeRouter<span>.</span>instance<span>.</span><span>push</span><span>(</span>MenuScreen<span>.</span><span>route</span><span>(</span><span>)</span><span>)</span><span>;</span>
      <span>}</span><span>,</span>
      child<span>:</span> <span>Icon</span><span>(</span>
        Icons<span>.</span>close<span>,</span>
        color<span>:</span> Colors<span>.</span>white<span>,</span>
      <span>)</span><span>,</span>
    <span>)</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre><p>The <code>actions</code> parameter adds a list of additional actions to the <code>GetStream</code> chat input UI. You can call the <code>archiveSupportChat</code> method <code><span>OnPressed</span><span>(</span><span>)</span></code> and hide the chat, and redirect the user to the menu screen to show a proper message that the discussion is closed. They can reopen by returning to the support screen.</p><h2 id="Conclusion">Conclusion</h2><p>Authentication and authorization are complex but necessary features of most applications, and they can be tricky to implement and manage. Auth0 provides a reliable service that takes on these tasks. You can this service in Flutter applications without having to set up a server or maintain infrastructure. You can also make use of serverless tools such as Auth0 Actions, which you can use to add sophistication to your authentication and authorization process.</p><p>You have seen how you can speed up your development by adding a support chat using <code>GetStreamChat</code> to a Flutter application. You’ve also seen how you can limit the functionality available to users by leveraging roles and permissions received from Auth0 via tokens.</p><p>Congratulations! You’ve come a long way over this tutorial’s four parts, and I hope that you have learned a lot. This is just the beginning — you can still implement and configure a lot, using both Stream and Auth0, and take your apps to the next level.</p></div></div>]]></content:encoded>
      <pubDate>Mon, 04 Oct 2021 17:13:00 +0000</pubDate>
    </item>
    <item>
      <title>Flutter Authentication and Authorization with Auth0, Part 4: Roles and Permissions</title>
      <link>https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-4-roles-permissions/</link>
      <description>In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><ul><li><a href="https://twitter.com/auth0" target="_blank" rel="noopener noreferrer"></a></li><li><a href="https://facebook.com/getauth0" target="_blank" rel="noopener noreferrer"></a></li><li><a href="https://linkedin.com/company/auth0" target="_blank" rel="noopener noreferrer"></a></li><li><a href="https://www.instagram.com/weareauth0/" target="_blank" rel="noopener noreferrer"></a></li><li><a href="https://github.com/auth0" target="_blank" rel="noopener noreferrer"></a></li></ul><p>© 2013-2021 Auth0 Inc. All Rights Reserved.</p></div></div>]]></content:encoded>
      <pubDate>Mon, 04 Oct 2021 17:13:00 +0000</pubDate>
    </item>
    <item>
      <title>Flutter Authentication and Authorization with Auth0, Part 3: Adding Real-Time Chat to the App</title>
      <link>https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-3-adding-real-time-chat-to-the-app/</link>
      <description>In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>In the previous sections of this tutorial, you added authentication to <em>MJ Coffee</em>, a Flutter app, and then enhanced that authentication by adding refresh token rotation and social logins. You also looked at customizing the login page with your own branding, and user management in Auth0.</p><p>In this section, we’ll focus on authorization. Remember:</p><ul><li><strong>Authentication</strong> concerns itself with answering the question “Who are you?”</li><li><strong>Authorization</strong> — this section’s topic — is all about answering the question “What are you allowed to do?”</li></ul><p>We’ll cover authorization by adding real-time chat to <em>MJ Coffee</em> so that we can later see how the chat can be integrated with Auth0, limit its functionalities and UIs based on roles and permissions.</p><blockquote><p><strong>Look for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.</strong></p></blockquote><h2 id="Add-Real-Time-Chat-to-the-Flutter-Application">Add Real-Time Chat to the Flutter Application</h2><p>Having a real-time chat service in the <em>MJ Coffee</em> app can significantly improve how fast users can communicate with our customer service or employees. Having looked around, I found <a href="https://getstream.io" target="_blank" rel="noreferrer noopener">Stream</a>, an exciting service with a solid Flutter SDK that you can integrate and customize quickly and easily.</p><h2 id="Install-Dependencies">Install Dependencies</h2><p>Stream comes with several SDKs that can be used in Dart or Flutter applications. However, one of them comes with all features, a beautiful theme, and enough API so that you can customize it as much as you wish. We’ll use that one.</p><p>🛠 Open the <code><span>/</span>pubspec<span>.</span>yaml</code> file and add <code>stream_chat_flutter</code> to your dependencies. The <code>dependencies</code> section of the file should end up looking like this:</p><pre><code>// /pubspec.yaml

<span>dependencies</span><span>:</span>
  <span>flutter</span><span>:</span>
    <span>sdk</span><span>:</span> flutter
  <span>font_awesome_flutter</span><span>:</span> ^9.1.0
  <span>flutter_svg</span><span>:</span> ^0.22.0
  <span>google_fonts</span><span>:</span> ^2.1.0
  <span>json_annotation</span><span>:</span> ^4.0.1
  <span>http</span><span>:</span> ^0.13.3
  <span>flutter_appauth</span><span>:</span> ^1.1.0
  <span>flutter_secure_storage</span><span>:</span> ^4.2.0
  <span>stream_chat_flutter</span><span>:</span> ^2.0.0</code></pre><p>I recommend using a version later than 2.0, which is fully compatible with Flutter 2 and its support for <a href="https://flutter.dev/docs/null-safety" target="_blank" rel="noreferrer noopener">null safety</a>.</p><p>If you’re only targeting Android, you can ignore the next section.</p><h4 id="If-you-re-targeting-iOS">If you’re targeting iOS</h4><p>🛠 If you’re targeting iOS, you’ll need to take a few extra steps:</p><ul><li>The Stream library uses the <a href="https://github.com/miguelpruivo/flutter_file_picker" target="_blank" rel="noreferrer noopener"><em>flutter file picker</em> plugin</a> to present the user with an interface to select files. You’ll need to follow the steps in <a href="https://github.com/miguelpruivo/flutter_file_picker/wiki/Setup#ios" target="_blank" rel="noreferrer noopener">the <em>iOS</em> section of this page</a> to make use of it.</li><li>The library also uses the <em>video_player</em> plugin to display inline videos. Follow <a href="https://pub.dev/packages/video_player#installation" target="_blank" rel="noreferrer noopener">this guide</a> to install and enable it.</li><li>Finally, the library uses the <em>image_picker</em> plugin to provide a user interface for selecting images. Follow [these instructions] to use this plugin.</li></ul><p>🛠 Don’t forget to actually install the dependencies! Enter <code>flutter pub get</code> in the terminal or PowerShell, or <code>Pub get</code> in your IDE.</p><h2 id="Create-a-Stream-Account-and-App">Create a Stream Account and App</h2><p>Before you can integrate Stream with your app, you need a Stream account, which you’ll use to register the app.</p><p>🛠 <a href="https://getstream.io/accounts/signup/" target="_blank" rel="noreferrer noopener">Create your account if you don’t already have one,</a> then log in and go to the Stream dashboard:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5g116jkNGeqaZvFk5nesaZ/e01470d789d92e658ca0d4ac16605d5e/stream_dashboard.png" alt="Stream dashboard."/></p><p>🛠 Tap on the <strong>Create App</strong> button, then follow these steps:</p><ul><li>Enter a name for your app in the <strong>App Name</strong> field. For this example, we’ll use <code>MJCoffee</code>.</li><li>In the <strong>Feeds Server Location</strong> menu, select the location closest to you.</li><li><em>Don’t</em> select anything from the <strong>Clone Existing App</strong> menu — just leave it set to <code><span>--</span><span>-</span></code>.</li><li>Select your environment. Usually, it&#39;s a good idea to create separate apps for production and development. In this tutorial, we’ll focus on production, so select <strong>Production</strong>.</li><li>Finally, click the <strong>Create App</strong> button.</li></ul><p>You should see this:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3Zh9QmY69R9Bwo4p3PZawt/f8c55e169d20282c17e3592216344fd6/stream_app.png" alt="A newly-created app in Stream."/></p><p>🛠 Once your app has been created, make a note of your Stream key. </p><p>Notice that you will need a secret key to sign the user ID and get a production user token to connect users. You’ll learn how to do that with Auth0 Actions.</p><p>I recommend passing sensitive data and keys with <code><span>--</span>dart<span>-</span>define</code> via the command line or adding to your editor or IDE run command rather than storing it in your app’s code.</p><p>You took this approach when implementing basic authentication for the app. You passed two sensitive values — your Auth0 domain and Auth0 client ID — as command-line arguments when launching the app. You’ll simply add the Stream key as a third argument, like so:</p><pre><code>flutter run -d all --dart-define<span>=</span>AUTH0_DOMAIN<span>=</span><span>[</span>YOUR DOMAIN<span>]</span> --dart-define<span>=</span>AUTH0_CLIENT_ID<span>=</span><span>[</span>YOUR CLIENT ID<span>]</span> --dart-define<span>=</span>STREAM_API_KEY<span>=</span><span>[</span>YOUR STREAM KEY<span>]</span></code></pre><p>In order for your application to use the Stream key argument, you’ll need to define a new constant.</p><p>🛠 Add the following to your <code>constants<span>.</span>dart</code> file, which is located in the in the <code><span>/</span>lib<span>/</span>helpers<span>/</span></code> directory:</p><pre><code><span>// /lib/helpers/constants.dart</span>

<span>const</span> STREAM_API_KEY <span>=</span> String<span>.</span><span>fromEnvironment</span><span>(</span><span>&#39;STREAM_API_KEY&#39;</span><span>)</span><span>;</span></code></pre><h2 id="Integrate-Chat-Into-the-Flutter-Application">Integrate Chat Into the Flutter Application</h2><p>Let&#39;s start by creating a new <code>StreamChatClient</code> in the <code>ChatService</code> singleton class. In doing this, there are three essential things that you need to take into account:</p><ol start="1"><li>Initializing the Dart API client with your API Key</li><li>Setting the current user</li><li>Passing the client to the top-level StreamChat widget</li></ol><p>🛠 Open <code>chat_service<span>.</span>dart</code> (located in the <code><span>/</span>lib<span>/</span>services<span>/</span></code> directory) and initialize <code>StreamChatClient</code> by updating the <code>ChatService</code> class so that it appears as follows:</p><pre><code><span>// /lib/services/chat_service.dart</span>

<span>class</span> <span>ChatService</span> <span>{</span>
  <span>static</span> <span>final</span> ChatService instance <span>=</span> ChatService<span>.</span><span>_internal</span><span>(</span><span>)</span><span>;</span>
  <span>factory</span> <span>ChatService</span><span>(</span><span>)</span> <span>=</span><span>&gt;</span> instance<span>;</span>
  ChatService<span>.</span><span>_internal</span><span>(</span><span>)</span><span>;</span>

  <span>final</span> StreamChatClient client <span>=</span> <span>StreamChatClient</span><span>(</span>
    STREAM_API_KEY<span>,</span>
    logLevel<span>:</span> isInDebugMode <span>?</span> Level<span>.</span>INFO <span>:</span> Level<span>.</span>OFF<span>,</span>
  <span>)</span><span>;</span>

<span>}</span></code></pre><p>The only required positional parameter for <code><span>StreamChatClient</span><span>(</span><span>)</span></code> is <code><span>STREAM_API_KEY</span></code>, but you have more options to configure your client. For instance, it might be pretty helpful to see all the logs during debugging. That&#39;s why we used the optional <code>logLevel</code> parameter to set the amount of logging that will take place, based on whether or not the app is in debug mode.</p><p>Now that you‘ve created the client, you need to ensure that your current user is connected appropriately.</p><p>🛠 Add the <code><span>connectUser</span><span>(</span><span>)</span></code> to the <code>ChatService</code> class in  <code>chat_service<span>.</span>dart</code>:</p><pre><code><span>// /lib/services/chat_service.dart</span>

<span>class</span> <span>ChatService</span> <span>{</span>

<span>.</span><span>.</span><span>.</span>

  Future<span>&lt;</span>Auth0User<span>&gt;</span> <span>connectUser</span><span>(</span>Auth0User<span>?</span> user<span>)</span> <span>async</span> <span>{</span>
    <span>if</span> <span>(</span>user <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>throw</span> <span>Exception</span><span>(</span><span>&#39;User was not received&#39;</span><span>)</span><span>;</span>
    <span>}</span>
    <span>await</span> client<span>.</span><span>connectUser</span><span>(</span>
      <span>User</span><span>(</span>
        id<span>:</span> user<span>.</span>id<span>,</span>
        extraData<span>:</span> <span>{</span>
          <span>&#39;image&#39;</span><span>:</span> user<span>.</span>picture<span>,</span>
          <span>&#39;name&#39;</span><span>:</span> user<span>.</span>name<span>,</span>
        <span>}</span><span>,</span>
      <span>)</span><span>,</span>
      <span>// To be replaced with PRODUCTION TOKEN for user</span>
      client<span>.</span><span>devToken</span><span>(</span>user<span>.</span>id<span>)</span><span>.</span>rawValue<span>,</span>
    <span>)</span><span>;</span>
    <span>return</span> user<span>;</span>
  <span>}</span>
  
<span>.</span><span>.</span><span>.</span>
  
<span>}</span></code></pre><p>This new method of the <code>ChatService</code> class, <code><span>connectUser</span><span>(</span><span>)</span></code>, will handle the logic for connecting the current user. It accepts an <code>Auth0User</code> object. If it doesn‘t receive one, it means the authentication has probably failed and that the user should not be connected to the chat.</p><p>🛠 Open <code><span>/</span>lib<span>/</span>screens<span>/</span>home<span>.</span>dart</code>, look for the <code>_HomeScreenState</code> class, and within it, the <code><span>setSuccessAuthState</span><span>(</span><span>)</span></code> method. Update <code><span>setSuccessAuthState</span><span>(</span><span>)</span></code> to the following:</p><pre><code><span>// /lib/screens/home.dart</span>

<span>setSuccessAuthState</span><span>(</span><span>)</span> <span>{</span>
  <span>setState</span><span>(</span><span>(</span><span>)</span> <span>{</span>
    isProgressing <span>=</span> <span>false</span><span>;</span>
    isLoggedIn <span>=</span> <span>true</span><span>;</span>
    name <span>=</span> AuthService<span>.</span>instance<span>.</span>idToken<span>?</span><span>.</span>name<span>;</span>
  <span>}</span><span>)</span><span>;</span>

  ChatService<span>.</span>instance<span>.</span><span>connectUser</span><span>(</span>AuthService<span>.</span>instance<span>.</span>profile<span>)</span><span>;</span>
  CoffeeRouter<span>.</span>instance<span>.</span><span>push</span><span>(</span>MenuScreen<span>.</span><span>route</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>}</span></code></pre><p>You need to pass two required positional parameters:</p><ul><li>The <code>User</code> object with a defined user ID, and</li><li>the user token, a signed and encrypted hash string.</li></ul><p>Typically, the user token should be generated on a back-end server to store the aforementioned secret key and to sign and get the token. You&#39;ll soon learn how Auth0 can handle that as your backend.</p><p>To continue, you need to:</p><ul><li>Get a development token,</li><li>pass <code>user<span>.</span>id</code> to the <code><span>devToken</span><span>(</span><span>)</span></code> method on the chat client, and</li><li>Get the <code>rawValue</code> which is the token string.</li></ul><p>🛠 To ensure that <code>devToken</code> works, you need to disable auth checks. In the <code>GetStream</code> app’s chat dashboard, turn on the <strong>Disable Auth0 Checks</strong> option.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3DMx1hZFHbDqt50gtJErjO/9c4c7e3c1da342ddf10c8fb208ac8960/disable_auth_checks.png" alt="Stream dashboard."/></p><blockquote><p>When you move the app to production and you have a proper method to receive the production token, make sure that you turn off the <strong>Disable Auth0 Checks</strong> option.</p></blockquote><p>Stream chat UI components will accept additional data that you provide while connecting a user. For example, you may create a <code>Map</code> containing the user‘s image and name, so they appear automatically and beautifully throughout the chat widget.</p><p>At the time of writing, Stream does not accept Auth0’s user ID format, which includes <code><span>|</span></code> between the Auth source and user hash ID. You’ll need to make a change to the <code>id</code> arrow function in the <code>Auth0User</code> model to account for this.</p><p>🛠 Open <code><span>/</span>lib<span>/</span>models<span>/</span>auth0_user<span>.</span>dart</code> and make this change to the <code>id</code> arrow function: </p><pre><code><span>// /lib/models/auth0_user.dart</span>

String <span>get</span> id <span>=</span><span>&gt;</span> sub<span>.</span><span>split</span><span>(</span><span>&#39;|&#39;</span><span>)</span><span>.</span><span>join</span><span>(</span><span>&#39;&#39;</span><span>)</span><span>;</span></code></pre><p>The next and final step is to create <code>StreamChat</code>, the root widget of the application.</p><p>🛠 Open the <code><span>/</span>lib<span>/</span>main<span>.</span>dart</code> file, locate the call to  <code>MaterialApp</code>, and add the <code>builder</code> parameter so that it returns a <code>StreamChat</code> object:</p><pre><code><span>// /lib/main.dart</span>

<span>.</span><span>.</span><span>.</span>
<span>MaterialApp</span><span>(</span>
  debugShowCheckedModeBanner<span>:</span> <span>false</span><span>,</span>
  themeMode<span>:</span> ThemeMode<span>.</span>system<span>,</span>
  home<span>:</span> <span>HomeScreen</span><span>(</span><span>)</span><span>,</span>
  navigatorKey<span>:</span> CoffeeRouter<span>.</span>instance<span>.</span>navigatorKey<span>,</span>
  theme<span>:</span> <span>getTheme</span><span>(</span><span>)</span><span>,</span>
  builder<span>:</span> <span>(</span>context<span>,</span> child<span>)</span> <span>{</span>
    <span>return</span> <span>StreamChat</span><span>(</span>
      child<span>:</span> child<span>,</span>
      client<span>:</span> ChatService<span>.</span>instance<span>.</span>client<span>,</span>
    <span>)</span><span>;</span>
  <span>}</span><span>,</span>
<span>)</span><span>,</span>
<span>.</span><span>.</span><span>.</span></code></pre><p>The <code>StreamChat</code> object returned by <code>builder</code> is an inherited widget and aims to provide APIs for advanced customization. It requires a child and a client that you have initialized in the <code>ChatService</code> class.</p><p>That&#39;s it — your chat is ready! Restart the app, and let&#39;s continue to add the support screen and community screen using the prebuilt <code>StreamChat</code> UI widget to leverage the chat service that you added.</p><h2 id="Implement-the-Support-Chat-Screen">Implement the Support Chat Screen</h2><p>Typically, a support chat consists of a user and an agent interacting in a channel created for both. Hence the support chat screen will do the following:</p><ul><li>Create a private channel for the current user and one of the available agents</li><li>Listen to the channel for updates</li><li>Load existing chat content, if any</li><li>Upon chat completion, archive the chat history</li></ul><p>Let&#39;s create a <code><span>createSupportChat</span><span>(</span><span>)</span></code> method in the <code>ChatService</code> class.</p><p>🛠 First, add the following instance variable to the start of the <code>ChatService</code> class:</p><pre><code><span>// /lib/services/chat_service.dart</span>

String<span>?</span> _currentChannelId<span>;</span></code></pre><p>🛠 Then add the <code><span>createSupportChat</span><span>(</span><span>)</span></code> method to the <code>ChatService</code> class:</p><pre><code><span>// /lib/services/chat_service.dart</span>

Future<span>&lt;</span>Channel<span>&gt;</span> <span>createSupportChat</span><span>(</span><span>)</span> <span>async</span> <span>{</span>
  <span>// To be replaced with EmployeeRole via Auth0</span>
  <span>final</span> String employeeId <span>=</span> <span>&#39;rootEmployeeId&#39;</span><span>;</span>
  <span>final</span> channel <span>=</span> client<span>.</span><span>channel</span><span>(</span>
    <span>&#39;support&#39;</span><span>,</span>
    id<span>:</span> _currentChannelId<span>,</span>
    extraData<span>:</span> <span>{</span>
      <span>&#39;name&#39;</span><span>:</span> <span>&#39;MJCoffee Support&#39;</span><span>,</span>
      <span>&#39;members&#39;</span><span>:</span> <span>[</span>
        employeeId<span>,</span>
        client<span>.</span>state<span>.</span>user<span>!</span><span>.</span>id<span>,</span>
      <span>]</span>
    <span>}</span><span>,</span>
  <span>)</span><span>;</span>
  <span>await</span> channel<span>.</span><span>watch</span><span>(</span><span>)</span><span>;</span>
  _currentChannelId <span>=</span> channel<span>.</span>id<span>;</span>
  <span>return</span> channel<span>;</span>
<span>}</span></code></pre><p>There’s a lot going on here. Let&#39;s review it step by step.</p><p>First, to create a support chat channel for the current user, you need to know the ID of an available agent. In this tutorial, you will eventually learn how to create an API to get an available agent via Auth0 based on their roles. However, we’ll skip this part for now.</p><p>Second, you need to create a channel with a specific type. In this case, the type will be <code>support</code>. Stream provides default types for channels; however, you can define your types as needed. To create a channel type, navigate to the Stream dashboard, go to your app in the Chat overview tab, and add your channel types to the list.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6W33zODRlOuxetIMT5FFX5/c3b4894e13324aa8db4822545716248e/streamchat_type.png" alt="Stream channel types."/></p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2Waym3vZQnTvKNejptTCJp/64b96fb65f65f5b1ceae5bf485eb2856/chat_type.png" alt="New stream channel type."/></p><p>Next, you can pass an existing channel ID to reconnect to a channel or leave it <code><span>null</span></code> to create a new channel. Stream will automatically assign an ID to new channels. Since this support chat is private and exclusive to one agent and a current user, you may add IDs to <code>members</code> in the <code>extraData</code> map.</p><p>Then, call the <code><span>watch</span><span>(</span><span>)</span></code> method on the channel to create and listen to the events on that channel. The <code><span>watch</span><span>(</span><span>)</span></code> method is a <code>Future</code> and will perform its tasks asynchronously. You can assign the channel ID to the <code>_currentChannelId</code> private instance variable so that you can reconnect to the channel when needed.</p><blockquote><p>Later on, it might be a good idea to store the channel ID in an external database or local secure storage in the app so that it persists between user sessions.</p></blockquote><p>Finally, the method returns the newly created channel.</p><p>With the <code><span>createSupportChat</span><span>(</span><span>)</span></code> method implemented, you can now implement the chat UI.</p><p>🛠 Open the <code><span>/</span>lib<span>/</span>screens<span>/</span>support<span>.</span>dart</code> file, where you’ll find the <code>SupportChatScreen</code> class. Update the file’s contents to the following:</p><pre><code><span>// /lib/screens/support.dart</span>

<span>import</span> <span>&#39;package:flutter/material.dart&#39;</span><span>;</span>
<span>import</span> <span>&#39;package:flutter/widgets.dart&#39;</span><span>;</span>

<span>class</span> <span>SupportChatScreen</span> <span>extends</span> <span>StatefulWidget</span> <span>{</span>
  <span>@override</span>
  _SupportChatScreenState <span>createState</span><span>(</span><span>)</span> <span>=</span><span>&gt;</span> <span>_SupportChatScreenState</span><span>(</span><span>)</span><span>;</span>
<span>}</span>

<span>class</span> <span>_SupportChatScreenState</span> <span>extends</span> <span>State</span><span>&lt;</span>SupportChatScreen<span>&gt;</span> <span>{</span>
  Auth0User<span>?</span> profile <span>=</span> AuthService<span>.</span>instance<span>.</span>profile<span>;</span>
  Channel<span>?</span> channel<span>;</span>

  <span>@override</span>
  <span>void</span> <span>initState</span><span>(</span><span>)</span> <span>{</span>
    <span>super</span><span>.</span><span>initState</span><span>(</span><span>)</span><span>;</span>
    <span>createChannel</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>createChannel</span><span>(</span><span>)</span> <span>async</span> <span>{</span>
    <span>final</span> _channel <span>=</span> <span>await</span> ChatService<span>.</span>instance<span>.</span><span>createSupportChat</span><span>(</span><span>)</span><span>;</span>
    <span>setState</span><span>(</span><span>(</span><span>)</span> <span>{</span>
      channel <span>=</span> _channel<span>;</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@override</span>
  Widget <span>build</span><span>(</span>BuildContext context<span>)</span> <span>{</span>
    <span>return</span> channel <span>==</span> <span>null</span>
        <span>?</span> <span>Center</span><span>(</span>
            child<span>:</span> <span>Text</span><span>(</span><span>&#39;You are in the queue!, please wait...&#39;</span><span>)</span><span>,</span>
          <span>)</span>
        <span>:</span> <span>Scaffold</span><span>(</span>
            body<span>:</span> <span>SafeArea</span><span>(</span>
              child<span>:</span> <span>StreamChannel</span><span>(</span>
                channel<span>:</span> channel<span>!</span><span>,</span>
                child<span>:</span> <span>Column</span><span>(</span>
                  children<span>:</span> <span>&lt;</span>Widget<span>&gt;</span><span>[</span>
                    <span>Expanded</span><span>(</span>
                      child<span>:</span> <span>MessageListView</span><span>(</span><span>)</span><span>,</span>
                    <span>)</span><span>,</span>
                    <span>MessageInput</span><span>(</span>
                      disableAttachments<span>:</span> <span>true</span><span>,</span>
                      sendButtonLocation<span>:</span> SendButtonLocation<span>.</span>inside<span>,</span>
                      actionsLocation<span>:</span> ActionsLocation<span>.</span>leftInside<span>,</span>
                      showCommandsButton<span>:</span> <span>true</span><span>,</span>
                    <span>)</span><span>,</span>
                  <span>]</span><span>,</span>
                <span>)</span><span>,</span>
              <span>)</span><span>,</span>
            <span>)</span><span>,</span>
          <span>)</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre><p>Here’s what’s happening in this UI implementation:</p><ul><li>This support chat screen, <code>SupportChatScreen</code>, is a <code>StatefulWidget</code>.</li><li>The <code>profile</code> variable is the user profile from <code>AuthService</code> that you created in the previous section.</li><li>The <code>channel</code> variable is used to detect if a support channel has been created.</li><li>The <code><span>createChannel</span><span>(</span><span>)</span></code> method calls <code>ChatService</code>’s <code><span>createSupportChat</span><span>(</span><span>)</span></code> method, which you recently defined.</li><li>Once the channel is ready, <code><span>setState</span><span>(</span><span>)</span></code> is called, which renders the chat UI.</li><li>In the <code><span>build</span><span>(</span><span>)</span></code> method, you can show a message while the channel is being created or return a <code>StreamChannel</code> object, which provides information about the channel to the widget tree and passes a reference to the <code>channel</code>.</li><li>Typically, a child of <code>SupportChatScreen</code> should be a <code>Column</code> that includes <code><span>MessageListView</span><span>(</span><span>)</span></code> and is wrapped by <code>Expanded</code> to ensure it takes up all the available space.</li><li>You can highly customize <code><span>MessageInput</span><span>(</span><span>)</span></code> in a number of ways, such as disabling the file attachment or command buttons. You’ll do this later by using Auth0’s permissions and roles to determine which buttons should be enabled or disabled, so stay tuned.</li></ul><p>Congratulations — you’ve implemented the support chat screen! Let&#39;s move on to the community view.</p><p>It&#39;s time to make a screen to allow agents to see all the messages they receive via support. Let&#39;s call this screen <code>CommunityScreen</code>.</p><p>🛠 Open the <code><span>/</span>lib<span>/</span>screens<span>/</span>community<span>.</span>dart</code> file, and update the <code>CommunityScreen</code> class within to the following:</p><pre><code><span>// /lib/screens/community.dart</span>

<span>class</span> <span>CommunityScreen</span> <span>extends</span> <span>StatelessWidget</span> <span>{</span>
  <span>final</span> userId <span>=</span> ChatService<span>.</span>instance<span>.</span>client<span>.</span>state<span>.</span>user<span>?</span><span>.</span>id <span>as</span> Object<span>;</span>

  <span>@override</span>
  Widget <span>build</span><span>(</span>BuildContext context<span>)</span> <span>{</span>
    <span>return</span> <span>Scaffold</span><span>(</span>
      body<span>:</span> <span>ChannelsBloc</span><span>(</span>
        child<span>:</span> <span>ChannelListView</span><span>(</span>
          filter<span>:</span> Filter<span>.</span><span>in_</span><span>(</span>
            <span>&#39;members&#39;</span><span>,</span>
            <span>[</span>userId<span>]</span><span>,</span><span>// current user is employee (role/permission)</span>
          <span>)</span><span>,</span>
          sort<span>:</span> <span>[</span><span>SortOption</span><span>(</span><span>&#39;last_message_at&#39;</span><span>)</span><span>]</span><span>,</span>
          pagination<span>:</span> <span>PaginationParams</span><span>(</span>
            limit<span>:</span> <span>30</span><span>,</span>
          <span>)</span><span>,</span>
          channelWidget<span>:</span> <span>ChannelPage</span><span>(</span><span>)</span><span>,</span>
        <span>)</span><span>,</span>
      <span>)</span><span>,</span>
    <span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>class</span> <span>ChannelPage</span> <span>extends</span> <span>StatelessWidget</span> <span>{</span>
  <span>@override</span>
  Widget <span>build</span><span>(</span>BuildContext context<span>)</span> <span>{</span>
    <span>return</span> <span>Scaffold</span><span>(</span>
      appBar<span>:</span> <span>ChannelHeader</span><span>(</span><span>)</span><span>,</span>
      body<span>:</span> <span>Column</span><span>(</span>
        children<span>:</span> <span>&lt;</span>Widget<span>&gt;</span><span>[</span>
          <span>Expanded</span><span>(</span>
            child<span>:</span> <span>MessageListView</span><span>(</span><span>)</span><span>,</span>
          <span>)</span><span>,</span>
          <span>MessageInput</span><span>(</span><span>)</span><span>,</span>
        <span>]</span><span>,</span>
      <span>)</span><span>,</span>
    <span>)</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre><p>The logic behind this page is relatively simple. You want to load all channels seen by the current user, an agent in this context, then open each channel to answer its respective customer.</p><p><code>ChannelsBloc</code> manages a list of channels with pagination, re-ordering, querying, and other operations associated with channels together with <code><span>ChannelListView</span><span>(</span><span>)</span></code>. The <code>Bloc</code> is not related to the <code>Bloc</code> package or pattern; this is just a coincidence.</p><p>You need to filter all channels by the membership of the current user. If necessary, do custom sorting and pagination too.</p><p>Lastly, you need to ensure that the <code><span>ChannelPage</span><span>(</span><span>)</span></code> is also passed to correctly as it makes channels routable. The <code><span>ChannelPage</span><span>(</span><span>)</span></code> is nothing fancy — just a straightforward implementation of what you have done already in <code>SupportScreen</code>.</p><p>Perfect! You have created all screens for the app. However, we still need to implement permissions and roles to load each screen and functionalities based on what we can define and receive via Auth0 tokens. But if you are curious, you can simply add another tab to the <code>MenuScreen</code> and load these pages (although you might not see any channels yet).</p><p>🛠 In the file <code><span>/</span>lib<span>/</span>screens<span>/</span>menu<span>.</span>dart</code>, locate <code>final List<span>&lt;</span>Widget<span>&gt;</span> tabs</code> in <code>MenuScreenState</code> and update it to the following:</p><pre><code><span>// /lib/screens/menu.dart</span>

<span>.</span><span>.</span><span>.</span>
  <span>final</span> List<span>&lt;</span>Widget<span>&gt;</span> tabs <span>=</span> <span>[</span>
    <span>MenuList</span><span>(</span>coffees<span>:</span> coffees<span>)</span><span>,</span>
    <span>SupportChatScreen</span><span>(</span><span>)</span><span>,</span>
    <span>ProfileScreen</span><span>(</span><span>)</span><span>,</span>
  <span>]</span><span>;</span>
<span>.</span><span>.</span><span>.</span></code></pre><p>🛠 In the same file, add a new icon to <code>bottomNavigationBar</code> by replacing the <code>items</code> parameter with the following:</p><pre><code><span>// /lib/screens/menu.dart</span>

items<span>:</span> <span>&lt;</span>BottomNavigationBarItem<span>&gt;</span><span>[</span>
  <span>BottomNavigationBarItem</span><span>(</span>
    icon<span>:</span> <span>Icon</span><span>(</span>Icons<span>.</span>list_alt<span>)</span><span>,</span>
    label<span>:</span> <span>&#34;Menu&#34;</span><span>,</span>
  <span>)</span><span>,</span>
  <span>BottomNavigationBarItem</span><span>(</span>
    icon<span>:</span> <span>Icon</span><span>(</span>Icons<span>.</span>support<span>)</span><span>,</span>
    label<span>:</span> <span>&#34;Support&#34;</span><span>,</span>
  <span>)</span><span>,</span>
  <span>BottomNavigationBarItem</span><span>(</span>
    icon<span>:</span> <span>Icon</span><span>(</span>Icons<span>.</span>person<span>)</span><span>,</span>
    label<span>:</span> <span>&#34;Profile&#34;</span><span>,</span>
  <span>)</span><span>,</span>
<span>]</span><span>,</span></code></pre><p>🛠 Before you can test the chat, you should temporarily add the <code>rootEmployeeId</code> user ID that you defined in <code>createSupportChat</code>  in the Stream dashboard.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2RqndsI9Xp4CR35fYyRRSG/4832ae874ee2b4622ae4282560d1f396/chat_custom_user.png" alt="Custom user in the chat."/></p><p>You can skip this step, but it’s still a good idea to have a root support user in case of a specific agent is unavailable. That way, the user with the absent agent can still get support.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/qFcfGuNTipVpuEWJtAfM0/312b8561bbbbc47ed9a97342dbd46764/custom_user_root.png" alt="Custom user in the chat."/></p><p>🛠 Run your app in the emulator, go to the support chat screen, and try it out!</p><blockquote><p>If you encounter an error regarding an outdated Kotlin version on the Android emulator, open <code>android<span>/</span>app<span>/</span>build<span>.</span>gradle</code>, and search for <code>ext<span>.</span>kotlin_version</code>. Change that line to <code>ext<span>.</span>kotlin_version <span>=</span> <span>&#39;1.5.10&#39;</span></code>.</p></blockquote><h2 id="Auth0-Actions-and-Generating-Stream-User-Production-Tokens">Auth0 Actions and Generating Stream User Production Tokens</h2><p>Until now, for each user, you have been using a token generated for the development environment. In order to release your app, the app will have to request production tokens.</p><p>As I mentioned earlier, retrieving production tokens is usually done by your backend server. Auth0 can act as this service and retrieve those tokens for you, thanks to a potent tool called <em>Auth0 Actions</em>. </p><p>You can use Auth0 Actions to handle your application logic and fit it into a particular flow. They are secure, tenant-specific, versioned functions written in Node.js that execute at specific points when Auth0 is doing its work. This allows you to customize and extend Auth0&#39;s capabilities with custom logic. Think of Actions as serverless functions, such as AWS Lambda or Google Cloud Functions.</p><p>You can determine when and where to execute an Action in the Auth0 runtime environment. Your flows might be:</p><ul><li><strong>Login:</strong> Executed after a user logs in and when refresh tokens are issued.</li><li><strong>Machine to Machine:</strong> Executed after a user logs in after the Client Credentials hook.</li><li><strong>Pre-User Registration:</strong> Executed before a user is added to the database or passwordless connections.</li><li><strong>Post-User Registration:</strong> Executed after a user is added to a database or passwordless connections. The execution is asynchronous and will not affect the transaction.</li><li><strong>Post-Change Password:</strong> Executed after a password is changed for a database connection user.</li><li><strong>Send Phone Message:</strong> Executed when using a custom MFA provider.</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7fpne9yUGBpXYzAT5km5l5/83ab5c891c02495d53a9d2661e10083e/actions_flow.png" alt="Actions flow"/></p><p>You’ve probably already thought of several use cases for each of these scenarios.</p><p>Let&#39;s create a custom action to exchange Stream production user tokens for users after they logged in and hooked it up to the ID token and user metadata received by the Flutter app.</p><p>First, you need to create a new action. Go to the Custom Actions menu under Actions in Auth0 Dashboard and hit the &#34;Create&#34; button.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/oR6jv9IA92twMdtRrAvIz/e414cac9a740c5fdd5eaab85a7795ebb/create_action.png" alt="Create action"/></p><p>🛠 You should provide a name for the action, select a trigger from the list, and then create it. For the purpose of generating a chat token and attaching it to <code>idToken</code>, select the <strong>Login / Post Login</strong> trigger, which allows you to use the action in the login flow.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5wbUmlcD0qq7FrgBCiURrS/a95bb544b5d4fdaa4eac2a87b5fd9361/create_action_trigger.png" alt="Create action trigger"/></p><p>You&#39;ll see an editor where you can write your logic. You can run the code, try it out before deploying it, add your secrets to the environment instead of putting it in the application code, and even add almost all public NPM packages!</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/46DWkLU05SPD1kTE6i5oGF/54f46b0d30cd13bf141b4beb28a2445e/action_module.png" alt=" action module"/></p><p>🛠 Start by adding the <code>getstream</code> npm package. At the time of writing, the current version of the package is <code><span>7.2</span><span>.10</span></code>.</p><p>🛠 Go back to the Stream dashboard, copy your secret and client keys...</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5aLtEOAjfXguB6BQlI8fmB/b55f3fd1d0c7c44c91c760c5850d8457/chat_app_secret.png" alt="chat app secret"/></p><p>🛠 ...and then add them with the name of <code><span>GET_STREAM_CHAT_SECRET_KEY</span></code> and <code><span>GET_STREAM_CHAT_CLIENT_KEY</span></code>, respectively, to this function in Auth0.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4JgG1WLTfWa2RTlkzAkV8j/1704cdf6b2e7abfd23e611171440dce5/action_secrets.png" alt=" action secrets"/></p><p>🛠 Lastly, you can import <code>getStream</code> and connect and create a user token bypassing <code>user_id</code>.</p><pre><code><span>// Javascript</span>

<span>const</span> stream <span>=</span> <span>require</span><span>(</span><span>&#39;getstream&#39;</span><span>)</span><span>;</span>

exports<span>.</span><span>onExecutePostLogin</span> <span>=</span> <span>async</span> <span>(</span><span>event<span>,</span> api</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>const</span> getStreamClient <span>=</span> stream<span>.</span><span>connect</span><span>(</span>
    event<span>.</span>secrets<span>.</span><span>GET_STREAM_CHAT_CLIENT_KEY</span><span>,</span>
    event<span>.</span>secrets<span>.</span><span>GET_STREAM_CHAT_SECRET_KEY</span>
  <span>)</span><span>;</span>
  <span>const</span> getStreamToken <span>=</span> getStreamClient<span>.</span><span>createUserToken</span><span>(</span>
    <span><span>`</span><span><span>${</span>event<span>.</span>user<span>.</span>user_id<span>.</span><span>split</span><span>(</span><span>&#39;|&#39;</span><span>)</span><span>.</span><span>join</span><span>(</span><span>&#39;&#39;</span><span>)</span><span>}</span></span><span>`</span></span> <span>// getstream does not support `|` in the ID yet, so we have to omit it.</span>
  <span>)</span><span>;</span>

  <span>// api.user.setAppMetadata(&#34;stream_chat_token&#34;, getStreamToken);</span>
  <span>// api.user.setUserMetadata(&#34;stream_chat_token&#34;, getStreamToken);</span>
  <span>const</span> namespace <span>=</span> <span>&#39;https://getstream.mjcoffee.app&#39;</span><span>;</span>
  <span>if</span> <span>(</span>event<span>.</span>authorization<span>)</span> <span>{</span>
    api<span>.</span>idToken<span>.</span><span>setCustomClaim</span><span>(</span><span><span>`</span><span><span>${</span>namespace<span>}</span></span><span>/user_token</span><span>`</span></span><span>,</span> getStreamToken<span>)</span><span>;</span>
    api<span>.</span>accessToken<span>.</span><span>setCustomClaim</span><span>(</span><span><span>`</span><span><span>${</span>namespace<span>}</span></span><span>/user_token</span><span>`</span></span><span>,</span> getStreamToken<span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span></code></pre><p>Let&#39;s explore the implementation above. </p><p>Once you get the token, you can set a user or app metadata named <code>stream_chat_token</code> with the token value. </p><p>Alternately, you can set a custom claim on <code>idToken</code> and <code>accessToken</code>. A custom claim must take the form of a URI, which means that <code>https<span>:</span><span>/</span><span>/</span>getstream<span>.</span>mjcoffee<span>.</span>app<span>/</span>user_token</code> is an acceptable name for a claim, while <code>user_token</code> alone is not.</p><blockquote><p><strong>Important:</strong> In Stream, only the characters <code>a</code> through <code>z</code>, <code><span>0</span></code> through <code><span>9</span></code>, <code>@</code>, <code>_</code>, and <code><span>-</span></code> are allowed in the user ID. Therefore, we shouldn’t use the <code><span>|</span></code> for <code>user_id</code> in Auth0.</p></blockquote><p>Let&#39;s run and test this function before we deploy. Click on the play icon and run with the example event, which is automatically generated for you.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1b3pOpx8O1g4MBOqmhI6ix/88e2335e0b2bb8a3730dba6ebcc57e44/action_run.png" alt=" action run"/></p><p>If everything goes well, you’ll get a generated token in JWT format. Its payload will contain <code>user_id</code>, and it will be signed with your secret key by the Stream servers.</p><p>Here’s an example of what you’ll get:</p><pre><code><span>// response in Action run</span>

<span>[</span>
  <span>{</span>
    name<span>:</span> <span>&#39;https://getstream.mjcoffee.app/user_token&#39;</span><span>,</span>
    target<span>:</span> <span>&#39;idToken&#39;</span><span>,</span>
    type<span>:</span> <span>&#39;SetCustomClaim&#39;</span><span>,</span>
    value<span>:</span>
      <span>&#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYXV0aDA1ZjdjOGVjN2MzM2M2YzAwNGJiYWZlODIifQ.7ZIyr27skgrGm6REEz5o-WvoCArNblDnwiOdxXW4dp8&#39;</span><span>,</span>
  <span>}</span><span>,</span>
  <span>{</span>
    name<span>:</span> <span>&#39;https://getstream.mjcoffee.app/user_token&#39;</span><span>,</span>
    target<span>:</span> <span>&#39;accessToken&#39;</span><span>,</span>
    type<span>:</span> <span>&#39;SetCustomClaim&#39;</span><span>,</span>
    value<span>:</span>
      <span>&#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYXV0aDA1ZjdjOGVjN2MzM2M2YzAwNGJiYWZlODIifQ.7ZIyr27skgrGm6REEz5o-WvoCArNblDnwiOdxXW4dp8&#39;</span><span>,</span>
  <span>}</span><span>,</span>
<span>]</span><span>;</span></code></pre><p><img src="https://images.ctfassets.net/23aumh6u8s0i/Ax6b4nRMkHyjvfGBK47bV/d15969eb0f4740dfe1057372e04c4437/jwt_stream.png" alt="action run"/></p><p>🛠 Next, go back to <strong>Flow</strong>, select <strong>Login</strong>, and drag your newly-created custom action to the flow and apply the changes:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5oYj9z0hIawXOi3dSW8dEZ/4684098fb3b108dd0cc4f32e01aa4e59/login_flow.png" alt=" action run"/></p><p>For the last step, the Flutter app needs to read this token and add it to the user model. That way, when you connect a user to Stream’s chat, instead of the development tokens you’ve been using, you can replace it with the token that Auth0 received.</p><p>🛠 Since it&#39;s a custom claim, it will show up in <code>idToken</code>; thus you’ll need to modify your <code>Auth0IdToken</code> model class (located in <code><span>/</span>lib<span>/</span>models<span>/</span>auth0_id_token<span>.</span>dart</code>)...</p><pre><code><span>// /lib/models/auth0_id_token.dart</span>

<span>@JsonSerializable</span><span>(</span><span>)</span>
<span>class</span> <span>Auth0IdToken</span> <span>{</span>
  <span>Auth0IdToken</span><span>(</span><span>{</span>
  
  <span>.</span><span>.</span><span>.</span><span>.</span>
  
    required <span>this</span><span>.</span>streamChatUserToken<span>,</span>
  
  <span>.</span><span>.</span><span>.</span><span>.</span>
  
<span>}</span><span>)</span>

<span>.</span><span>.</span><span>.</span><span>.</span>

  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;https://getstream.mjcoffee.app/user_token&#39;</span><span>)</span>
  <span>final</span> String streamChatUserToken<span>;</span>

<span>.</span><span>.</span><span>.</span><span>.</span>

<span>}</span></code></pre><p>🛠 Then do the same with your <code>Auth0User</code> class (located in <code><span>/</span>lib<span>/</span>models<span>/</span>auth0_user<span>.</span>dart</code>), as it will be part of the user details:</p><pre><code><span>// m/lib/models/auth0_user.dart</span>

<span>@JsonSerializable</span><span>(</span><span>)</span>
<span>class</span> <span>Auth0User</span> <span>{</span>
  <span>Auth0User</span><span>(</span><span>{</span>
  <span>.</span><span>.</span><span>.</span><span>.</span>
      required <span>this</span><span>.</span>streamChatUserToken<span>,</span>
  <span>.</span><span>.</span><span>.</span><span>.</span>
<span>}</span><span>)</span>
<span>.</span><span>.</span><span>.</span><span>.</span>
  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;https://getstream.mjcoffee.app/user_token&#39;</span><span>)</span>
  <span>final</span> String streamChatUserToken<span>;</span>
<span>.</span><span>.</span><span>.</span><span>.</span>
<span>}</span></code></pre><p>🛠 Once you are done, run the <code>build_runner</code> command to generate models again.</p><pre><code>flutter pub run build_runner build --delete-conflicting-outputs</code></pre><p>🛠 Locate <code>connectUser</code> in the <code>ChatService</code> class (located in <code><span>/</span>lib<span>/</span>services<span>/</span>chat_service<span>.</span>dart</code>) and replace <code><span>devToken</span><span>(</span><span>)</span></code> with the newly-received token on the user object.</p><pre><code><span>// /lib/services/chat_service.dart</span>

<span>await</span> client<span>.</span><span>connectUser</span><span>(</span>
  <span>User</span><span>(</span>
    id<span>:</span> user<span>.</span>id<span>,</span>
    extraData<span>:</span> <span>{</span>
      <span>&#39;image&#39;</span><span>:</span> user<span>.</span>picture<span>,</span>
      <span>&#39;name&#39;</span><span>:</span> user<span>.</span>name<span>,</span>
    <span>}</span><span>,</span>
  <span>)</span><span>,</span>
  <span>// client.devToken(user.id).rawValue,</span>
    user<span>.</span>streamChatUserToken<span>,</span>
<span>)</span><span>;</span></code></pre><p>Well done! Log out of the app, restart it. and log in again. This time, you&#39;ll receive a production-ready user token. When you go to the support chat screen, everything should work as expected.</p><h2 id="Looking-Ahead">Looking Ahead</h2><p>Now that the app has a real-time chat is ready with a proper authentication flow, you can move on to the next section to focus on authorization, roles, and permissions.</p></div></div>]]></content:encoded>
      <pubDate>Mon, 04 Oct 2021 17:13:00 +0000</pubDate>
    </item>
    <item>
      <title>Flutter Authentication and Authorization with Auth0, Part 2: Refresh Tokens, Social Logins, and More</title>
      <link>https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-2-refresh-tokens-social-logins-more/</link>
      <description>In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>In the exercise from the previous section, you added Auth0 authentication to an existing Flutter app. This added a username/password authentication flow to the app. You also gave the app the ability to request and submit refresh tokens, which enhance the user experience by not requiring the user to authenticate every time they use the app.</p><p>This section will expand on the app by examining some useful Auth0 features:</p><ul><li>Refresh token rotation</li><li>Social logins</li><li>Managing your Auth0 account</li></ul><blockquote><p><strong>Look for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.</strong></p></blockquote><h2 id="Add-Refresh-Token-Rotation">Add Refresh Token Rotation</h2><p>When the app makes an authentication request to Auth0’s authentication server, it includes the <code>offline_access</code> scope. This causes the authentication server to issue a refresh token, which the app can use to re-authenticate without requiring the user to log in again. The app stores this token in the device’s secure storage.</p><p>While this enhances the app’s user experience, it also introduces risk. The refresh token is long-lived, and the app could use it as a “lifetime pass” to endlessly request new access tokens and keep the user logged in forever.</p><p>I highly recommend taking advantage of <em>Refresh Token Rotation</em> and <em>Automatic Reuse Detection</em> to help mitigate this risk. With these features enabled, each refresh token can be used only once. When the app exchanges its refresh token for a new access token, the authentication server also returns a new refresh token and invalidates the old one. </p><p>Let’s enable these features!</p><p>🛠 Navigate to the <strong>Applications</strong> section of your Auth0 dashboard, select the <strong>MJ Coffee</strong> application, and then select its <strong>Settings</strong> tab. Scroll down the page to the <strong>Refresh Token Rotation</strong> section and turn on the <strong>Rotation</strong> and <strong>Absolute Expiration</strong> options:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6EizPZZnkGjxoAOle1Q8eL/e06c99f4a49413572736bbf0f470436c/rotation_and_absolute_expiration.png" alt="Turn on the “Rotation” and “Absolute Expiration” options."/></p><p>It is recommended that you issue a refresh token that expires after a preset lifetime. The refresh token’s lifetime can be extended each time one is used to get a new access token or access token/refresh token pair.</p><p>There are two options for token lifetimes, and they can be set independently of each other:</p><ul><li><strong>Absolute Lifetime:</strong> Enabling <strong>Absolute Expiration</strong> sets a specified <em>absolute lifetime</em> for the application’s refresh tokens. Refresh tokens can be exchanged for new access tokens during this lifetime. Once the token’s age goes past its lifetime, the user will need to re-authenticate in order to get a new access token. If <strong>Absolute Expiration</strong> is disabled, the refresh token has an indefinite absolute lifetime.</li><li><strong>Inactivity Lifetime:</strong> Enabling <strong>Inactivity Expiration</strong> specified <em>inactivity lifetime</em> for the application’s refresh tokens. Refresh tokens can be exchanged for new access tokens if the user is active in the application during this lifetime. If the user is inactive in the application for a period longer than the inactivity lifetime, they will need to re-authenticate in order to get a new access token.</li></ul><p>🛠 Scroll to the bottom of the page and click the <strong>Save Changes</strong> button:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7KsLW4adJ6PNIPAI12al4g/f2c0e8abf6d7377595cfb7df11493e67/save_changes.png" alt="The “Save Changes” button. The user is directed to click it."/></p><p>These days, it&#39;s pretty common to have login methods beyond the standard username/password combination. These include logging in with social media account, which will significantly enhance your users’ experiences.</p><p>Implementing these additional login methods and adding them to your authorization server is time-consuming and will come with many considerations and risks. </p><p>Luckily, Auth0 provides lots of integration with well-known third parties’ authentication systems, and even allows you to write your custom connections. Let&#39;s add connections to both Google’s and Apple’s authentication systems.</p><p>🛠 In the Auth0 dashboard, select <strong>Authentication</strong> in the left column menu, then select <strong>Social</strong>. This takes you to the <strong>Social Connections</strong> page, where you should click the <strong>Create Social Connection</strong> button:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/61w1eXrbY7bGOpNo6ODbaU/da810c63bacd28cabf71e6dee4baa349/create_social_connection.png" alt="The steps to create a new social connection in Auth0"/></p><p>You will be taken to the <strong>New Social Connection</strong> page, which has a list of social login providers that integrate with Auth0. </p><p>🛠 Select <strong>Google</strong>:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2YdUxIkwmCTcc9QFlo584q/22f7fd0bf4bc1c93c4ebc555e21009f8/select_google.png" alt="Selecting Google from all the available social connections"/></p><p>You will now be on the  <strong>New Google / Gmail Social Connection</strong> page, which tells you what kind of user information is accessed by Google social login.</p><p>🛠 Click <strong>Continue</strong>:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2SQwtF0vqtXJucnGbE3DNS/baf5bd9d7103a6ecbd59b879bbe2aaf4/click_continue.png" alt="Initial page for creating a new Google/Gmail social connection"/></p><p>A new page with a number of fields will appear; this is the connection’s <strong>Settings</strong> tab. </p><p>As long as you’re working in a development environment, you only need to fill the <strong>Name</strong> field (which provides a name for this connection) and leave all the other fields empty. You can always use the default value in the <strong>Name</strong> field:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7Jzsn4ryILOOdACN2urlSo/fdaa205ef09352c0b9aba0acbd592977/new_google_gmail_social_connection.png" alt="New Google/Gmail social connection"/></p><p>However, production apps require you to provide a <strong>Client ID</strong> and <strong>Client Secret</strong> (<a href="https://auth0.com/docs/connections/social/google" target="_blank" rel="noreferrer noopener">doc</a>) and specify the <strong>Allowed Mobile Client IDs</strong>. These topics will be covered in another video or article.</p><p>🛠 Create the Google/Gmail connection by scrolling to the bottom of the page and clicking <strong>Create</strong>:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4S8AJUaj4xehVwVxhNDt5X/69eb88b8bec557d310d0e9d678fe9b7e/click_create.png" alt="Creating the Google/Gmail connection"/></p><p>This will create the connection, and you’ll be taken to its <strong>Applications</strong> tab. You’ll see a list of your applications, which will allow you to enable the Google/Gmail connection for any of them. Enable the connection for the <em>MJ Coffee</em> application:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/681u1RRcha4ABJJ5GRZivy/c7eea90ca4e19ec5ab3b333caa47e5ba/google-oauth2_applications_tab.png" alt="The Google/OAuth2 applications tab"/></p><p>You may also set more permissions that the end-user will need to approve during authorization. These permissions depend on your application and what you want to do on behalf of the user. The <em>MJ Coffee</em> app doesn’t need any extra permissions beyond the basic and extended profile.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/13CvLX8tQUTuqU6jpZ6K94/a0eaac13b8fc83fc11b3ca3f6651ebd9/google_permissions.png" alt="Google Permission"/></p><p>🛠 Make sure you sync user profile attributes at each login and hit the <strong>Save</strong> button.</p><p>🛠 Once again in the Auth0 dashboard, select <strong>Authentication</strong> in the left column menu, then select <strong>Social</strong>. This takes you to the <strong>Social Connections</strong> page, where you should click the <strong>Create Social Connection</strong> button:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1sohaZxDHuq8X8ZvT5nhvE/d2b7a7e2647708327f8fc6971ddb43a9/create_connection.png" alt="The steps to create a new social connection in Auth0"/></p><p>🛠 This time, select <strong>Apple</strong>:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3JAgbtDSNOsfYrjxkE1wCI/e51d80f7418706c29cd6e9dc06b93719/select_apple.png" alt="Selecting Apple from all the available social connections"/></p><p>You will now be on the  <strong>New Apple Social Connection</strong> page, which tells you what kind of user information is accessed by Apple social login.</p><p>🛠 Click <strong>Continue</strong>:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3zt2ntLwoHwp6bldLmOOsD/8db3e7f5c057d5782c7202b748013420/click_connect_-_apple.png" alt="Continue"/></p><p>As long as you’re working in a development environment, you can leave the <strong>Client ID</strong> and <strong>Client Secret Signing Key</strong> fields empty. You <em>will</em> need proper keys for those fields when the app goes to production; <a href="https://auth0.com/docs/connections/apple-siwa/set-up-apple" target="_blank" rel="noreferrer noopener">this document covers that topic in more detail</a>.</p><p>The <strong>Apple Team ID</strong> and <strong>Key ID</strong> values are required:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2qNvT5zkxB1TY06ywkH5Re/7c46fa1399743de9e7bb05d1d804fab0/apple_dev.png" alt="Google Permission"/></p><ul><li>To get your Apple Team ID, you need an Apple Developer Account.</li><li>To get a Key ID for your app, you need to register that app using your Apple Developer Account.</li></ul><p>🛠 Sign in to your Apple Developer Account, and go to the <strong>Membership</strong> page and make a note of your Team ID.</p><p>🛠 If you have a registered app, you can skip the following steps and jump to the list of tasks for creating a service ID. Otherwise, follow the steps below:</p><ul><li>In the Apple Developer Portal, go to <strong>Certificates, IDs, &amp; Profiles &gt; Identifiers</strong> and click the blue “plus” icon next to <strong>Identifiers</strong> to create a new App ID.</li><li>Choose <strong>App IDs</strong> as the identifier type and click <strong>Continue</strong>.</li><li>Provide a description and a Bundle ID in reverse-domain name format (e.g.: <code>com<span>.</span>mydomain<span>.</span>mjcoffee</code>).</li><li>Scroll down and check <strong>Sign In with Apple</strong>.</li><li>Click <strong>Continue</strong>, and then click <strong>Register</strong>.</li></ul><p>🛠 Once the app is registered, it’s time to create a service ID:</p><ul><li>Return to the <strong>Certificates, IDs, &amp; Profiles</strong> section, and click the blue “plus” icon next to <strong>Identifiers</strong>.</li><li>Choose <strong>Service IDs</strong> and select <strong>Continue</strong>. Fill in the description and identifier (e.g.: <code>com<span>.</span>mydomain<span>.</span>mjcoffee</code>).</li><li>After checking <strong>Sign In with Apple</strong>, select <strong>Configure</strong>, and define your Web Domain (e.g.: <code>com<span>.</span>mydomain<span>.</span>mjcoffee</code>) and your &#34;Return URL&#34;. Ensure that your Return URL is your Auth0 domain and that it follows this format: <code>https<span>:</span><span>/</span><span>/</span><span>YOUR_AUTH0_DOMAIN</span><span>/</span>login<span>/</span>callback</code>.</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5Wetff0Tutv55UXsYz0gKq/ab19cd3e48604aea314410d22d194982/callback_apple.png" alt="Return URL apple sign in"/></p><p>🛠 Finally: save, continue and then register the service.</p><h4 id="Set-up-your-Client-Secret-Signing-Key">Set up your Client Secret Signing Key</h4><p>🛠 Follow these steps:</p><ul><li>Go to <strong>Keys</strong>, which is located in the <strong>Certificates, Identifiers, &amp; Profiles</strong> section of your Apple developer dashboard.</li><li>Select the blue “plus” icon to add a new key.</li><li>Enter a <strong>Key Name</strong> and check the <strong>Sign In with Apple</strong> option.</li><li>Select <strong>Configure</strong> to make sure the <strong>Choose a Primary App ID</strong> field is filled with the correct App ID.</li><li>Select <strong>Save, Continue</strong>, and then <strong>Register</strong>.</li><li>On the page to which you&#39;re redirected after registering, make a note of the Key ID. Then download the key; it will have a <code><span>.</span>p8</code> filename extension.</li></ul><p>🛠 Go back to your Apple social connection settings and paste the Key ID. Ensure the proper attributes are selected (Name, Email) and sync user profile at each login is enabled. Hit <strong>Save</strong>.</p><p>🛠 Once you have created all your social connections and set them up correctly, go back to your applications. Go to the <strong>Connections</strong> tab and enable your newly-made social connections:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/59SCRbiX055qDcmTSNwPVl/fa175f974ceb43515893f24f7747d549/app_social_connections.png" alt="app social connections"/></p><p>As you can see, adding and removing social connections for your apps is now as simple and flicking a switch.</p><p>On the Flutter side, I have good news: you don’t need to implement anything there! </p><p>Restart the app, log out, then try to log in. You’ll see this:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4b6BIaeZ8EHcN1a3MYVOrF/91c9039cf0d56051c99397d1a7524a3e/social_buttons_flutter.png" alt="app social connections"/></p><p>That&#39;s it! The login screen will now display social login buttons, and their login flows will be ready to use.</p><h2 id="Branding">Branding</h2><p>While it’s fine to use the default branding in development, you want the login page to be customized to your “look and feel” once the app’s in production.</p><p>Auth0 allows you to customize your login page through a number of options. You can change the look and feel of the login page by adding colors and logos, and you can customize the user notification part of the process as well: email templates, text messages, and so on. It’s all in the <strong>Branding</strong> section of the Auth0 dashboard:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7oq6VzFQ3nSUcStZTXvjQu/38d1e272f3bef751d9feaca704d580dc/branding.png" alt="Auth0 branding"/></p><h3 id="Add-Roles">Add Roles</h3><p>You may want to provide certain functionalities to the user based on their roles. This is easy with proper authorization server such as Auth0, which facilitates adding roles and specifying what users in each role are allowed to do. </p><p>In the MJ Coffee app, there are three different roles:</p><ul><li><strong>Admin:</strong> These are administrators, and they will have access to all the app’s functionality with full permissions.</li><li><strong>Customer:</strong> This is the default role for registered or logged-in users. They are limited to the app’s customer-facing features. You will automatically assign this role to all users upon registration or login, and you will learn how to do so later on in this tutorial.</li><li><strong>Employee:</strong> These are coffee shop employees. They can access the community screen to answer customer requests in the support chat, as well as other employee-facing features.</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7nVdiU86TPCF1tLXrBg6ID/54a078bfe7d2382a6776c26adfc5cba4/roles.png" alt="Auth0 roles"/></p><p>You can add more roles to the app as the need arises.</p><h2 id="User-Management-in-Auth0">User Management in Auth0</h2><p>Auth0 provides the infrastructure to store users and their information on its cloud database.</p><p>For the <em>MJ Coffee</em> app, Auth0’s cloud database is sufficient. One of Auth0’s goals is to reduce the cost of extra infrastructure maintenance and cost.</p><p>You can access users by selecting <strong>User Management</strong> in the left column menu of the Auth0 dashboard. The <strong>Users</strong> page allows you to create new users and manage your existing ones by changing their details, adding permissions and roles, or revoking their access.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3O0JDGBqXHmPfrKaEavP2D/260c804cf50a308e696ecd9a446ab4a9/users.png" alt="Auth0 users"/></p><p>When you open a user, you’ll see that Auth0 provides in-depth details about that user, including basic account data, metadata, their devices, and their history, which might be pretty helpful for debugging the application or investigating a particular user’s access activity, permissions, and roles.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/JcGTMspZ9hKtu9RAi4Oq9/257a692aa9a65cd12e96f645b56aafd1/user_roles.png" alt="Auth0 user roles"/></p><p>Each user account stores some basic information about the user: name, email address, the date and time when the account was created, and so on. </p><p>Additional information can be attached to a user by adding to these metadata stores:  their user metadata, which is a key-value structure for storing information about the user. You can also store information in the user<em>metadata or manipulating `app</em>metadata`, which helps to provide more information to the Flutter application while receiving user details.</p><h2 id="Moving-Forward">Moving Forward</h2><p>In the next section of this tutorial, you will learn how to add real-time chat to the app.</p></div></div>]]></content:encoded>
      <pubDate>Mon, 04 Oct 2021 17:12:00 +0000</pubDate>
    </item>
    <item>
      <title>Flutter Authentication and Authorization with Auth0, Part 1: Adding Authentication to an App</title>
      <link>https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-1-adding-authentication-to-an-app/</link>
      <description>In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><h2 id="Welcome-">Welcome!</h2><p>In this four-part tutorial, you’ll take a Flutter app and enhance it with Auth0. You’ll start by adding basic username/password authentication to it, followed by social logins, and then enable real-time support chat that makes use of authorization.</p><p>By the end of this tutorial, you’ll have built a fairly complex Flutter app that you can use as the basis for your own creations, and you will also have covered a lot of Auth0’s features.</p><p>Before we begin, let’s get our terminology straight...</p><p>Authentication and authorization are two key security components in applications, whether they are mobile apps, web apps, or machine-to-machine connections. Many people are confused by these terms, so here are some simple definitions:</p><ul><li><strong><em>Authentication</em></strong> deals with the question <strong>&#34;Who are you?&#34;</strong>. You’ll implement it in this section with the help of an authentication protocol called <a href="https://auth0.com/docs/protocols/openid-connect-protocol" target="_blank" rel="noreferrer noopener">OpenID Connect</a>, or “OIDC” for short.</li><li><strong><em>Authorization</em></strong> answers the question <strong>&#34;What are you allowed to do?&#34;</strong>. You’ll implement it in a later section with the help of an authorization protocol called <a href="https://auth0.com/intro-to-iam/what-is-oauth-2/" target="_blank" rel="noreferrer noopener">OAuth 2.0</a>, or “OAuth2” for short.</li></ul><h2 id="Adding-Authentication-to-a-Flutter-App">Adding Authentication to a Flutter App</h2><p>In this section, you’ll learn how to secure a Flutter app with Auth0. You’ll take a production-ready Flutter app and add a login screen and logout functionality to it, and you’ll do it with only a fraction of the effort required to implement login and logout yourself!</p><p>You’ll be able to follow this tutorial a little more smoothly if you know the basics of Flutter, but it&#39;s not a hard requirement. If you have experience with any modern web framework, you’ll probably be able to understand the code and learn Flutter and Dart (Flutter’s programming language) as you go.</p><h3 id="What-you-ll-learn-and-build">What you’ll learn and build</h3><p>While you <em>could</em> create a new Flutter project and implement everything you will learn in this tutorial, adding authentication to an existing production-ready app is pretty common. I’ll provide a production-ready app, <strong><em>MJ Coffee</em></strong>, which you’ll secure by adding authentication.</p><p>In later sections, you’ll enable authentication through a social identity provider, such as Google or Apple. You’ll then work on authorization by adding roles and permissions to limit app functionalities based on each user’s permissions and roles.</p><p>I’ll explain more about what this tutorial will cover in <a href="https://img.youtube.com/vi/bHdSLwWFNJ4/0.jpg" target="_blank" rel="noreferrer noopener">this video overview.</a></p><p>I will provide the source code for both the “starter” and “final” versions of the application. I strongly recommend that you use the “starter” version and follow the tutorial step by step in order to better understand the application and your additions to it.</p><p>Additionally, I have recorded videos that support this tutorial. You’ll find them on my <a href="https://www.youtube.com/playlist?list=PLCOnzDflrUceRLfHEkl-u2ipjsre6ZwjV" target="_blank" rel="noreferrer noopener">Youtube channel
playlist</a>.</p><blockquote><p><strong>Look for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.</strong></p></blockquote><h2 id="Set-Up-the-Initial-App">Set Up the Initial App</h2><h3 id="Prerequisites">Prerequisites</h3><p>Before getting started, you need to have the following installed on your machine:</p><ul><li><strong><a href="https://flutter.dev/docs/get-started/install" target="_blank" rel="noreferrer noopener">Flutter SDK</a> version 2.0 or later.</strong> I used version <strong>2.2</strong> for building my application.</li><li>If you want to build the app for iOS, you’ll need the following:
  <ul><li><strong>Xcode 11 or later.</strong></li><li><strong>Ruby 2.6.0 or later.</strong> This is required for the next iOS requirement, which is...</li><li><strong><a href="https://cocoapods.org/" target="_blank" rel="noreferrer noopener">CocoaPods</a> 1.10.0 or later.</strong></li></ul></li><li><strong>A basic understanding of <em>null safety</em>.</strong> If you’ve used Kotlin’s or Swift’s optional types, you should be fine; if not, please read <a href="https://flutter.dev/docs/null-safety" target="_blank" rel="noreferrer noopener"><em>Null safety in Flutter</em></a>.</li><li><strong>The IDE or an editor of your choice.</strong> I recommend:
<ul><li>Android Studio, or</li><li>IntelliJ, or</li><li>Visual Studio Code (which I will use in this series).</li></ul></li><li><strong>Dart and Flutter plugins</strong> for your IDE.</li><li>A cup of tea or coffee.</li></ul><h3 id="Get-the-project--configure-it--and-run-it">Get the project, configure it, and run it</h3><p>🛠 <a href="https://github.com/mhadaily/serverless-authentication-authorization-flutter" target="_blank" rel="noreferrer noopener">Open the repository for the MJ Coffee app</a> and download the source from the <em>main</em> branch. This contains a fully functioning app that is ready for you to add Auth0 authentication/authorization and chat.</p><p>🛠 If you want to build the app for iOS, you’ll need to specify your own development team for the build process. Open the <code><span>/</span>ios<span>/</span>Runner<span>.</span>xcworkspace<span>/</span></code> file with Xcode, select the <strong>Runner</strong> project, then the <strong>Runner</strong> target, open the <strong>Signing &amp; Capabilities</strong> tab, and select your team in the <strong>Team</strong> drop-down menu:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3URlDK6kyBY0Op3OU1GX02/1701db29ed00c3e364063984981c5efd/select_development_team.png" alt="Screenshot of Xcode. The reader is instructed to select the “Runner” project and then the “Runner” target, then select “Signing and Capabilities”, and finally select their development team."/></p><p>🛠 Confirm that the app works by running it. Open a command-line interface, navigate to the project’s root directory, and enter  <code>flutter run</code>. </p><p>Flutter will compile the project and run it on any mobile device connected to your computer or any mobile device emulator running on it. If it can’t find any of those, it will run a mobile device emulation in a browser window.</p><p>You will see the app’s home screen:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6kebmOTiWF0KJvdk3yRhZv/a564bccc4f49415742375a9a597db8aa/mj_coffee_screen_1.png" alt="The MJ Coffee App’s home screen"/></p><h3 id="Take-a-quick-tour-of-the-app">Take a quick tour of the app</h3><p>🛠 Tap the <strong>Login | Register</strong> button. Right now, there is no login functionality, so the app immediately takes you to the <strong>Menu</strong> screen:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/26VWlWFGMfEkt3lxzB4Vtl/d76d8e9157544008eb45706196be9e58/mj_coffee_screen_2.png" alt="The MJ Coffee App’s “Menu” screen"/></p><p>🛠 Tap the <strong>Support</strong> button located at the bottom center of the screen. It will take you to the screen where you’ll eventually implement that support chat feature:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6kP1psYGYxUYjP2lfmGGSy/cf9f8fe20aeb4dcf6aabfc717706ec45/mj_coffee_screen_3.png" alt="The MJ Coffee App’s “Support” screen, which is currently blank"/></p><p>🛠 Now tap the <strong>Profile</strong> button located at the bottom right of the screen. It will take you to the profile screen, which will eventually display some information about the logged-in user:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/66R156m2DmiVcOy3NDAUrx/768da6f50629ec4084ba0cdfd974045e/mj_coffee_screen_4.png" alt="The MJ Coffee App’s “Profile” screen, which currently shows a coffee illustration"/></p><p>🛠 And finally, tap the <strong>Logout</strong> button, which will bring you back to the home screen.</p><p>Now that you’ve had a tour of the app, it’s time to start implementing the new features!</p><h2 id="Implement-Login">Implement Login</h2><h3 id="Install-Flutter-dependencies">Install Flutter dependencies</h3><p>The first step is to import the required libraries. You’ll do that by specifying three new dependencies:</p><ul><li><a href="https://pub.dartlang.org/packages/http" target="_blank" rel="noreferrer noopener"><strong>http</strong></a>: A composable, Future-based library for making HTTP requests published by the <a href="https://dart.dev/" target="_blank" rel="noreferrer noopener">Dart team</a></li><li><a href="https://pub.dev/packages/flutter_appauth" target="_blank" rel="noreferrer noopener"><strong>flutter_appauth</strong></a> : A well-maintained wrapper package around <a href="https://appauth.io/" target="_blank" rel="noreferrer noopener">AppAuth</a> for Flutter developed by <a href="https://dexterx.dev/about/" target="_blank" rel="noreferrer noopener">Michael Bui</a>. AppAuth authenticates and authorizes users and supports the PKCE extension.</li><li><a href="https://pub.dev/packages/flutter_secure_storage" target="_blank" rel="noreferrer noopener"><strong>fluttersecurestorage</strong></a>: A library for securely persisting data locally; it was developed by <a href="https://github.com/mogol" target="_blank" rel="noreferrer noopener">German Saprykin</a>. You will need this to safely store tokens and other necessary information.</li></ul><p>You’ll install them by adding entries to the project’s <code><span>/</span>pubspec<span>.</span>yaml</code> file (located in the root directory), where dependencies are specified.</p><p>🛠 Add the following lines to the <code><span>/</span>pubspec<span>.</span>yaml</code>’s <code>dependencies<span>:</span></code> section, just after the line that starts with <code>json_annotation</code>:</p><pre><code>  <span>http</span><span>:</span> ^0.13.3
  <span>flutter_appauth</span><span>:</span> ^1.1.0
  <span>flutter_secure_storage</span><span>:</span> ^4.2.0</code></pre><p>The <code>dependencies<span>:</span></code> section should end up looking like this:</p><pre><code><span>dependencies</span><span>:</span>
  <span>flutter</span><span>:</span>
    <span>sdk</span><span>:</span> flutter
  <span>font_awesome_flutter</span><span>:</span> ^9.1.0
  <span>flutter_svg</span><span>:</span> ^0.22.0
  <span>google_fonts</span><span>:</span> ^2.1.0
  <span>json_annotation</span><span>:</span> ^4.0.1
  <span>http</span><span>:</span> ^0.13.3
  <span>flutter_appauth</span><span>:</span> ^1.1.0
  <span>flutter_secure_storage</span><span>:</span> ^4.2.0</code></pre><p>🛠 Save the file and then install the dependencies by either:</p><ul><li>Running the <code>flutter pub get</code> command in the root of your project on the command line, or</li><li>Running <code>Pub get</code> in your editor or IDE.</li></ul><h3 id="Configure-the-callback-URL">Configure the callback URL</h3><p>A callback URL is a mechanism that an authorization server such as Auth0 uses to communicate back to your application. It specifies a location where the user should be returned after the user had been authenticated.</p><p>Because unauthorized parties can manipulate callback URLs, Auth0 recognizes only URLs in a list of allowed callback URLs. These are stored in the application’s Settings page in the Auth0 dashboard.</p><p>For web applications, a callback URL is a valid HTTPS URL. For native apps, your Flutter implementation, you need to create a “pseudo-URL” based on your app’s unique name (the name is the <em>application ID</em> in Android and the <em>bundle name</em> in iOS). These are similar in format to an URL.</p><p>You will specify that this app’s name is <code>mj<span>.</span>coffee<span>.</span>app</code>, which means that the callback URL for this application will be <code>mj<span>.</span>coffee<span>.</span>app<span>:</span><span>/</span><span>/</span>login<span>-</span>callback</code>.</p><p><code>flutter_appauth</code> will register your app with an intent filter on that callback URL. If there&#39;s no match, the app will not receive the result.</p><h4 id="Configure-the-callback-URL-for-Android">Configure the callback URL for Android</h4><p>🛠 To configure the Android version of the app, open the <code><span>/</span>android<span>/</span>app<span>/</span>build<span>.</span>gradle</code> file. Update the <code>defaultConfig</code> section of the file by adding a new item: <code>manifestPlaceHolders</code> and its value, <code><span>[</span><span>&#39;appAuthRedirectScheme&#39;</span><span>:</span> <span>&#39;mj.coffee.app&#39;</span><span>]</span></code>. The value of <code>appAuthRedirectScheme</code> must be in lower case letters.</p><p>🛠 You should set the value for <code>minSdkVersion</code> to at least <code><span>18</span></code>, as it&#39;s a requirement for the <code>flutter_secure_storage</code> package. For the MJ Coffee app, I changed the <code>minSdkVersion</code> to <code><span>21</span></code>.</p><p>The result should look like this:</p><pre><code><span>// /android/app/build.gradle</span>

    defaultConfig <span>{</span>
        applicationId <span>&#34;mj.coffee.app&#34;</span>
        minSdkVersion <span>21</span>
        targetSdkVersion <span>29</span>
        versionCode flutterVersionCode<span>.</span><span>toInteger</span><span>(</span><span>)</span>
        versionName flutterVersionName
        multiDexEnabled <span>true</span>
        testInstrumentationRunner <span>&#34;androidx.test.runner.AndroidJUnitRunner&#34;</span>
        manifestPlaceholders <span>=</span> <span>[</span>
            <span>&#39;appAuthRedirectScheme&#39;</span><span>:</span> <span>&#39;mj.coffee.app&#39;</span>
        <span>]</span>
    <span>}</span></code></pre><h4 id="Configure-the-callback-URL-for-iOS">Configure the callback URL for iOS</h4><p>The only change that you need to make in order to configure the iOS version of the app is to add a callback scheme.</p><p>🛠 To do this, open the <code><span>/</span>ios<span>/</span>Runner<span>/</span>Info<span>.</span>plist</code> file. Inside the <code><span>&lt;</span>dict<span>&gt;</span></code> tag, add a new key, <code>CFBundleURLTypes</code> so that the start of the <code><span>&lt;</span>dict<span>&gt;</span></code> tag looks like this:</p><pre><code><span>&lt;!-- /ios/Runner/Info.plist --&gt;</span>

...
<span><span><span>&lt;</span>dict</span><span>&gt;</span></span>
   <span><span><span>&lt;</span>key</span><span>&gt;</span></span>CFBundleURLTypes<span><span><span>&lt;/</span>key</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>array</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>dict</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>key</span><span>&gt;</span></span>CFBundleTypeRole<span><span><span>&lt;/</span>key</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>string</span><span>&gt;</span></span>Editor<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>key</span><span>&gt;</span></span>CFBundleURLSchemes<span><span><span>&lt;/</span>key</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>array</span><span>&gt;</span></span>
                <span><span><span>&lt;</span>string</span><span>&gt;</span></span>mj.coffee.app<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>
            <span><span><span>&lt;/</span>array</span><span>&gt;</span></span>
        <span><span><span>&lt;/</span>dict</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>array</span><span>&gt;</span></span>
...</code></pre><p>🛠 Run both Android and iOS versions and ensure that the app runs on all devices or emulators/simulators with no error by using the following command:</p><pre><code>flutter run -d all</code></pre><h3 id="Configure-Auth0">Configure Auth0</h3><p>The next step is to register MJ Coffee as an application in the Auth0 dashboard.</p><p><strong>You’ll need an Auth0 account for this step.</strong> If you don’t already have one, <a href="https://auth0.com/signup" target="_blank" rel="noreferrer noopener">you can sign up for a free account</a>. The free tier is generous enough for many small applications.</p><p>🛠 Log in to into your Auth0 account and follow the steps below to register the application:</p><ul><li>🛠 Go to the <strong>Applications</strong> section of your dashboard:</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/11V2MgaHACXkpzvWYTDrGC/61f2f0b37a0a15b1bfb2dead062f02ad/click_applications.png" alt="The main page of the Auth0 dashboard. The reader is directed to click “Applications”."/></p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1mH6wEsUHtZizYdp4Jitu1/8d653eb1249f22347d2c67eb403f2c88/click_applications_2.png" alt="The main page of the Auth0 dashboard. The reader is directed to click the “Applications” menu item in the “Applications” menu."/></p><ul><li>🛠 Click the <strong>Create Application</strong> button:</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3uRVLR5qdjjvLBwvNJ4Xpk/40ff5b6358a332453e3062a830a19a37/click_create_application.png" alt="The main page of the Auth0 dashboard’s “Applications” page. The reader is directed to click the “Create Application” button."/></p><ul><li>🛠 Enter a name for your application (e.g., &#34;MJ Coffee Flutter Application&#34;) and select the <strong>Native</strong> application type:</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3uxWZltP1uokojsifZoGky/61a5b804ecde79755448907169e63ed9/create_application_dialog.png" alt="The “Create Application” dialog. The reader is directed to enter a name for the application, select the “Native” application type, and click the “Create” button."/></p><ul><li>🛠 You’ll see the <strong>Quick Start</strong> page of your newly-registered application. Go to the <strong>Connections</strong> page...</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1hGTF4bDiVDLTTtF8cNN7G/b928a2d8737efe5c61fc9629cff8503e/click_connections.png" alt="The “Quick Start” tab for the “MJ Coffee” application in the Auth0 dashboard. The user is directed to click the “Connections” tab."/></p><p>...and ensure that <strong>Username-Password-Authentication</strong>(in the <strong>Database</strong> section of the page) is selected. You can, and you will add a social connection later to this application too:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5MVzC4D9RA4l27SKsnFTH0/f68ea1b0c2bd7215ddb7ae504383ed20/connections_page.png" alt="The “Connections” tab for the “MJ Coffee” application in the Auth0 dashboard. The user is directed to click the “Connections” tab."/></p><ul><li>🛠 Then go to the <strong>Settings</strong> page. You can find all information, including client ID, client secret, domain (Tenant), etc.</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1nDE9yyCNNRKhfYcAC348j/61be08ddfab99158d3dff17e3dfd6336/settings_page.png" alt="The “Settings” tab for the “MJ Coffee” application in the Auth0 dashboard. The user is directed to copy the values in the “Domain” and “Client ID” fields."/></p><ul><li>🛠 You need to add a callback URL for the app to the <strong>Allowed Callback URLs</strong> under <strong>Application URIs</strong>. Use the value <code>mj<span>.</span>coffee<span>.</span>app<span>:</span><span>/</span><span>/</span>login<span>-</span>callback</code>:</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6Fxhp8QMl1sWcijlnP3L6w/9c99382a1d2cd330ebf11b3e47f48e46/add_callback_url.png" alt="The “Quick Start” tab for the “MJ Coffee” application in the Auth0 dashboard. The user is directed to add the callback URL for the app to the “Allowed Callback URLs” list."/></p><ul><li>🛠 Scroll to the bottom of the page and click the <strong>Save Changes</strong> button:</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7KsLW4adJ6PNIPAI12al4g/f2c0e8abf6d7377595cfb7df11493e67/save_changes.png" alt="The “Save Changes” button. The user is directed to click it."/></p><h3 id="Provide-the-domain-and-client-ID-to-the-app">Provide the domain and client ID to the app</h3><p>You will need to use the domain and client ID that you copied from the <strong>Settings</strong> page in your Flutter application. You can either store these values in constant variables in the app’s code, or you can pass these values to the app by providing them as <code><span>--</span>dart<span>-</span>define</code> arguments when you run it. </p><p>Rather than store this sensitive information in your code (which is a big security risk), I suggest that you supply the app with these values as <code><span>--</span>dart<span>-</span>define</code> arguments when you run it. </p><p>🛠 To do this in Terminal or PowerShell, use this command:</p><pre><code>flutter run -d all --dart-define<span>=</span>AUTH0_DOMAIN<span>=</span><span>{</span>YOUR DOMAIN<span>}</span> --dart-define<span>=</span>AUTH0_CLIENT_ID<span>=</span><span>{</span>YOUR CLIENT ID<span>}</span></code></pre><p>You can optionally have your editor of choice provide these values. For example, you can have Visual Studio Code pass these additional <code><span>--</span>dart<span>-</span>define</code> values by adding them to the <code>args</code> field of your launch configuration file (<code><span>/</span><span>.</span>vscode<span>/</span>launch<span>.</span>json</code>):</p><pre><code><span>&#34;configurations&#34;</span><span>:</span> <span>[</span>
  <span>{</span>
    <span>&#34;name&#34;</span><span>:</span> <span>&#34;Flutter&#34;</span><span>,</span>
    <span>&#34;request&#34;</span><span>:</span> <span>&#34;launch&#34;</span><span>,</span>
    <span>&#34;flutterMode&#34;</span><span>:</span> <span>&#34;debug&#34;</span><span>,</span>
    <span>&#34;type&#34;</span><span>:</span> <span>&#34;dart&#34;</span><span>,</span>
    <span>&#34;args&#34;</span><span>:</span> <span>[</span>
      <span>&#34;--dart-define&#34;</span><span>,</span>
      <span>&#34;AUTH0_DOMAIN={YOUR DOMAIN}&#34;</span><span>,</span>
      <span>&#34;--dart-define&#34;</span><span>,</span>
      <span>&#34;AUTH0_CLIENT_ID={YOUR CLIENT ID}&#34;</span>
    <span>]</span>
  <span>}</span>
<span>]</span></code></pre><p>🛠 The app should capture the values you pass to it. Do this by defining these constants in the <code>constants<span>.</span>dart</code> file in the <code><span>/</span>lib<span>/</span>helpers<span>/</span></code> directory -- add these just after the <code><span>import</span></code> statements:</p><pre><code><span>// /lib/helpers/constants.dart</span>

<span>const</span> AUTH0_DOMAIN <span>=</span> String<span>.</span><span>fromEnvironment</span><span>(</span><span>&#39;AUTH0_DOMAIN&#39;</span><span>)</span><span>;</span>
<span>const</span> AUTH0_CLIENT_ID <span>=</span> String<span>.</span><span>fromEnvironment</span><span>(</span><span>&#39;AUTH0_CLIENT_ID&#39;</span><span>)</span><span>;</span>
<span>const</span> AUTH0_ISSUER <span>=</span> <span>&#39;https://$AUTH0_DOMAIN&#39;</span><span>;</span>
<span>const</span> BUNDLE_IDENTIFIER <span>=</span> <span>&#39;mj.coffee.app&#39;</span><span>;</span>
<span>const</span> AUTH0_REDIRECT_URI <span>=</span> <span>&#39;$BUNDLE_IDENTIFIER://login-callback&#39;</span><span>;</span></code></pre><p>Notice that you only need the domain and client ID because the Authorization Code Flow with PKCE does not require a client secret. </p><p>The code also defines a top-level domain for your tenant, which is called the issuer.</p><p>As mentioned earlier, you need to create your redirect URI based on your bundle identifier, which you added to the &#34;Allowed Callback URLs&#34; list earlier. However, it would be best to keep in mind that:</p><ul><li>The bundle identifier must match <code>appAuthRedirectScheme</code> on Android, and</li><li>The scheme part of the redirect URL must match and <code>CFBundleURLSchemes</code> on iOS...</li></ul><p>...and that both values must be in all lowercase.</p><h3 id="Integrating-Auth0-with-Flutter">Integrating Auth0 with Flutter</h3><p>Since Auth0 is a standard OAuth 2.0 authorization server, you can utilize any standard OpenID Connect SDK to authenticate against Auth0. One of them is <code>flutter_appauth</code>, a wrapper around the <code>AppAuth</code> SDK for native applications. You will need to integrate it into your application.</p><p>🛠 Open the <code><span>/</span>lib<span>/</span>services<span>/</span>auth_service<span>.</span>dart</code> file and update it to import the necessary libraries as well as instantiate <code>FlutterAppAuth</code> and <code>FlutterSecureStorage</code>:</p><pre><code><span>// /lib/services/auth_service.dart</span>

<span>import</span> <span>&#39;dart:convert&#39;</span><span>;</span>
<span>import</span> <span>&#39;package:http/http.dart&#39;</span> <span>as</span> http<span>;</span>
<span>import</span> <span>&#39;package:flutter/services.dart&#39;</span><span>;</span>
<span>import</span> <span>&#39;package:flutter_appauth/flutter_appauth.dart&#39;</span><span>;</span>
<span>import</span> <span>&#39;package:flutter_secure_storage/flutter_secure_storage.dart&#39;</span><span>;</span>
<span>import</span> <span>&#39;package:mjcoffee/helpers/constants.dart&#39;</span><span>;</span>
<span>import</span> <span>&#39;package:mjcoffee/models/auth0_id_token.dart&#39;</span><span>;</span>
<span>import</span> <span>&#39;package:mjcoffee/models/auth0_user.dart&#39;</span><span>;</span>

<span>class</span> <span>AuthService</span> <span>{</span>

  <span>static</span> <span>final</span> AuthService instance <span>=</span> AuthService<span>.</span><span>_internal</span><span>(</span><span>)</span><span>;</span>
  <span>factory</span> <span>AuthService</span><span>(</span><span>)</span> <span>=</span><span>&gt;</span> instance<span>;</span>
  AuthService<span>.</span><span>_internal</span><span>(</span><span>)</span><span>;</span>

  <span>final</span> FlutterAppAuth appAuth <span>=</span> <span>FlutterAppAuth</span><span>(</span><span>)</span><span>;</span>
  <span>final</span> FlutterSecureStorage secureStorage <span>=</span> <span>const</span> <span>FlutterSecureStorage</span><span>(</span><span>)</span><span>;</span>

<span>}</span></code></pre><p>OpenID Connect has a protocol, <a href="https://auth0.com/docs/protocols/oidc/openid-connect-discovery" target="_blank" rel="noreferrer noopener">OpenID Connect Discovery</a>, that provides a standard way to discover authorization server endpoints in JSON documents. </p><p>In Auth0, you can find the discovery document at the <code><span>/</span><span>.</span>well<span>-</span>known<span>/</span>openid<span>-</span>configuration</code> endpoint of your tenant address. For MJ Coffee, this endpoint is <code>https<span>:</span><span>/</span><span><span>/</span><span>YOUR-AUTH0-TENANT-NAME.auth0.com</span><span>/</span></span><span>.</span>well<span>-</span>known<span>/</span>openid<span>-</span>configuration</code>.</p><p>If you watch <a href="https://www.youtube.com/playlist?list=PLCOnzDflrUceRLfHEkl-u2ipjsre6ZwjV" target="_blank" rel="noreferrer noopener">my videos</a>, you will see an example of a discovery URL.</p><p>AppAuth supports <a href="https://pub.dev/packages/flutter_appauth#getting-started" target="_blank" rel="noreferrer noopener">three methods to configure endpoints</a>. Conveniently, you just pass the top-level domain name (i.e., issuer) as a parameter to AppAuth methods. AppAuth then internally fetches the discovery documents from the <code>openid<span>-</span>configuration</code> endpoint and figures out where to send subsequent requests.</p><p>🛠 Let&#39;s create a login method in our <code>AuthService</code> to construct the <code>AuthorizationTokenRequest</code>. Add the following to <code><span>/</span>lib<span>/</span>services<span>/</span>auth_service<span>.</span>dart</code>:</p><pre><code><span>// /lib/services/auth_service.dart</span>

  <span>login</span><span>(</span><span>)</span> <span>async</span> <span>{</span>
      <span>final</span> authorizationTokenRequest <span>=</span> <span>AuthorizationTokenRequest</span><span>(</span>
        AUTH0_CLIENT_ID<span>,</span> AUTH0_REDIRECT_URI<span>,</span>
        issuer<span>:</span> AUTH0_ISSUER<span>,</span>
        scopes<span>:</span> <span>[</span><span>&#39;openid&#39;</span><span>,</span> <span>&#39;profile&#39;</span><span>,</span> <span>&#39;offline_access&#39;</span><span>,</span> <span>&#39;email&#39;</span><span>]</span><span>,</span>
      <span>)</span><span>;</span>
      <span>final</span> AuthorizationTokenResponse<span>?</span> result <span>=</span>
          <span>await</span> appAuth<span>.</span><span>authorizeAndExchangeCode</span><span>(</span>
        authorizationTokenRequest<span>,</span>
      <span>)</span><span>;</span>
      <span>print</span><span>(</span>result<span>)</span><span>;</span>
  <span>}</span></code></pre><p>To construct the request, you can create <code>AuthorizationTokenRequest</code> object bypassing the mandatory <code>clientID</code> and <code>redirectUrl</code> parameters using the values of <code><span>AUTH0_CLIENT_ID</span></code> and <code><span>AUTH0_REDIRECT_URI</span></code> respectively, and the value of <code><span>AUTH0_ISSUER</span></code> as the value for <code>issuer</code> to enable discovery.</p><p>It would be best if you defined <code>scopes</code> so that when the user allows them, you can perform actions on their behalf. Here are the scopes that we have requested in the code above:</p><ul><li><code>openid</code>: Perform an OpenID connect sign-in.</li><li><code>profile</code>: Retrieve the user’s profile.</li><li><code>offline_access</code>: Retrieve a Refresh Token for <code>offline_access</code> from the application.</li><li><code>email</code>: Retrieve the user’s email.</li></ul><p>You will add more scopes later in this tutorial.</p><p>Once the request is constructed, calling <code>appAuth<span>.</span><span>authorizeAndExchangeCode</span><span>(</span><span>)</span></code> starts a sign-in transaction. The authentication process will start, and upon completion, the user will return to the application with the <code>AuthorizationTokenResponse</code>, which is shown below and contains an Access Token, ID Token, and Refresh Token:</p><pre><code><span>AuthorizationTokenResponse</span><span>(</span>
    String<span>?</span> accessToken<span>,</span>
    String<span>?</span> refreshToken<span>,</span>
    DateTime<span>?</span> accessTokenExpirationDateTime<span>,</span>
    String<span>?</span> idToken<span>,</span>
    String<span>?</span> tokenType<span>,</span>
    <span>this</span><span>.</span>authorizationAdditionalParameters<span>,</span>
    Map<span>&lt;</span>String<span>,</span> <span>dynamic</span><span>&gt;</span><span>?</span> tokenAdditionalParameters<span>,</span>
  <span>)</span></code></pre><h3 id="The-Access-Token--Refresh-Token--and-ID-Token">The Access Token, Refresh Token, and ID Token</h3><p>You can use the Access Token to access APIs. Clients can’t decode this token, which is all right since it only means something to the API’s authorization server.</p><p>As a security measure, the Access Token usually has a short time to live. There are different methods to keep it alive for a longer period. One way is to use Refresh Tokens, which re-authorize your users. If a Refresh Token is available, the app can use it to silently get a new Access Token. For this reason, the app will store Refresh Tokens, and for security reasons, it will securely store them.</p><p>🛠 I recommend defining a constant key for your Refresh Token. Add this to your <code>constants<span>.</span>dart</code> file:</p><pre><code><span>// /lib/helpers/constants.dart</span>

<span>const</span> REFRESH_TOKEN_KEY <span>=</span> <span>&#39;refresh_token&#39;</span><span>;</span></code></pre><p>While the contents of the Access Token are opaque to the client, the<code>AppAuth</code> SDK validates the ID Token since it’s part of an OpenID Connect client’s responsibility. The app should decode the ID Token’s body to receive its JSON payload.</p><p>🛠 To get the ID Token’s payload, we’ll need to create a model. We’ll call it <code>Auth0IdToken</code>. Create a new file named <code>auth0_id_token<span>.</span>dart</code> in the <code><span>/</span>lib<span>/</span>models</code> directory, where models go:</p><pre><code><span>// /lib/models/auth0_id_token.dart</span>

<span>import</span> <span>&#39;package:json_annotation/json_annotation.dart&#39;</span><span>;</span>
<span>part</span> <span>&#39;auth0_id_token.g.dart&#39;</span><span>;</span>

<span>@JsonSerializable</span><span>(</span><span>)</span>
<span>class</span> <span>Auth0IdToken</span> <span>{</span>
  <span>Auth0IdToken</span><span>(</span><span>{</span>
    required <span>this</span><span>.</span>nickname<span>,</span>
    required <span>this</span><span>.</span>name<span>,</span>
    required <span>this</span><span>.</span>email<span>,</span>
    required <span>this</span><span>.</span>picture<span>,</span>
    required <span>this</span><span>.</span>updatedAt<span>,</span>
    required <span>this</span><span>.</span>iss<span>,</span>
    required <span>this</span><span>.</span>sub<span>,</span>
    required <span>this</span><span>.</span>aud<span>,</span>
    required <span>this</span><span>.</span>iat<span>,</span>
    required <span>this</span><span>.</span>exp<span>,</span>
    <span>this</span><span>.</span>authTime<span>,</span>
  <span>}</span><span>)</span><span>;</span>

  <span>final</span> String nickname<span>;</span>
  <span>final</span> String name<span>;</span>
  <span>final</span> String picture<span>;</span>

  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;updated_at&#39;</span><span>)</span>
  <span>final</span> String updatedAt<span>;</span>

  <span>final</span> String iss<span>;</span>

  <span>// In OIDC, &#34;sub&#34; means &#34;subject identifier&#34;,</span>
  <span>// which for our purposes is the user ID.</span>
  <span>// This getter makes it easier to understand.</span>
  String <span>get</span> userId <span>=</span><span>&gt;</span> sub<span>;</span>
  <span>final</span> String sub<span>;</span>

  <span>final</span> String aud<span>;</span>
  <span>final</span> String email<span>;</span>
  <span>final</span> int iat<span>;</span>
  <span>final</span> int exp<span>;</span>

  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;auth_time&#39;</span><span>)</span>
  <span>final</span> int<span>?</span> authTime<span>;</span> <span>// this might be null for the first time login</span>

  <span>factory</span> Auth0IdToken<span>.</span><span>fromJson</span><span>(</span>Map<span>&lt;</span>String<span>,</span> <span>dynamic</span><span>&gt;</span> json<span>)</span> <span>=</span><span>&gt;</span>
      _$<span>Auth0IdTokenFromJson</span><span>(</span>json<span>)</span><span>;</span>

  Map<span>&lt;</span>String<span>,</span> <span>dynamic</span><span>&gt;</span> <span>toJson</span><span>(</span><span>)</span> <span>=</span><span>&gt;</span> _$<span>Auth0IdTokenToJson</span><span>(</span><span>this</span><span>)</span><span>;</span>
<span>}</span></code></pre><p>The ID Token is made up of <em>claims</em>, which are name/value pairs that contain either information about the user or meta-information about the Open ID Connect service. The <code>Auth0IdToken</code> model contains fields to contain the token’s claims, which are:</p><ul><li><code>iss</code>: An identifier for the <strong>iss</strong>uer of the response. Its value is an URL.</li><li><code>sub</code>: An identifier for the <strong>sub</strong>ject. In the case of our app, it’s the user’s ID. Since <code>sub</code> is not an often-used term outside of Open ID Connect, we created a getter named <code>userId</code> that simply returns <code>sub</code>’s value.</li><li><code>aud</code>: An identifier for the <strong>aud</strong>ience — that is, whom the ID Token is intended for.</li><li><code>iat</code>: The time when JWT that makes up the token was issued (<code>iat</code> is short for “<strong>i</strong>ssued <strong>at</strong>).</li><li><code>exp</code>: The <strong>exp</strong>iration time for the token. After this time, the token cannot be used.</li></ul><p>The other fields — <code>nickname</code>, <code>name</code>, <code>email</code>, <code>picture</code>, and <code>updatedAt</code> are for claims that contain specific information about the user.</p><p>The <code>Auth0IdToken</code> class needs methods to convert data from the authentication server into an <code>Auth0IdToken</code> object and an <code>Auth0IdToken</code> object to JSON. You could write them manually, but it’s easier and less error-prone to generate them instead.</p><p>You may have noticed these two lines at the start of the file:</p><pre><code><span>import</span> <span>&#39;package:json_annotation/json_annotation.dart&#39;</span><span>;</span>
<span>part</span> <span>&#39;auth0_id_token.g.dart&#39;</span><span>;</span></code></pre><ul><li>The <code><span>import</span></code> line brings in the <code>json_annotation</code> library, which you’ll use to generate code to serialize and deserialize an object. The <code>@<span>JsonSerializable</span><span>(</span><span>)</span></code> annotation in the code specifies these are <code>Auth0IdToken</code> objects that are to be serialized and deserialized.</li><li>The <code>part</code> line specifies that the contents of the file <code>auth0_id_token<span>.</span>g<span>.</span>dart</code> belong to this file. The <code>g<span>.</span>dart</code> filename extension indicates that it’s a generated dart file.</li></ul><p>🛠 Run the following command to generate the JSON conversion methods for <code>Auth0IdToken</code>:</p><pre><code>flutter pub run build_runner build --delete-conflicting-outputs</code></pre><p>🛠 Once you have generated the JSON conversion methods, you can implement the <code><span>parseIdToken</span><span>(</span><span>)</span></code> method in the <code>AuthService</code> class by adding the following:</p><pre><code><span>// /lib/services/auth_service.dart</span>

  Auth0IdToken <span>parseIdToken</span><span>(</span>String idToken<span>)</span> <span>{</span>
    <span>final</span> parts <span>=</span> idToken<span>.</span><span>split</span><span>(</span><span>r&#39;.&#39;</span><span>)</span><span>;</span>
    <span>assert</span><span>(</span>parts<span>.</span>length <span>==</span> <span>3</span><span>)</span><span>;</span>

    <span>final</span> Map<span>&lt;</span>String<span>,</span> <span>dynamic</span><span>&gt;</span> json <span>=</span> <span>jsonDecode</span><span>(</span>
      utf8<span>.</span><span>decode</span><span>(</span>
        base64Url<span>.</span><span>decode</span><span>(</span>
          base64Url<span>.</span><span>normalize</span><span>(</span>parts<span>[</span><span>1</span><span>]</span><span>)</span><span>,</span>
        <span>)</span><span>,</span>
      <span>)</span><span>,</span>
    <span>)</span><span>;</span>

    <span>return</span> Auth0IdToken<span>.</span><span>fromJson</span><span>(</span>json<span>)</span><span>;</span>
  <span>}</span></code></pre><p>Now that you have the ID Token, you can get information about the user from the OpenID Connect endpoint for user details, which is <code>https<span>:</span><span>/</span><span>/</span><span>[</span><span>AUTH0_DOMAIN</span><span>]</span><span>/</span>userinfo</code>. </p><p>Let&#39;s create another model, <code>Auth0User</code>, so that we can deserialize and serialize the data from the <code>userinfo</code> endpoint. </p><p>🛠 Create a file <code>auth0_user<span>.</span>dart</code> in the <code><span>/</span>lib<span>/</span>models<span>/</span></code> directory with the following:</p><pre><code><span>// /lib/models/auth0_user.dart</span>

<span>import</span> <span>&#39;package:json_annotation/json_annotation.dart&#39;</span><span>;</span>
<span>part</span> <span>&#39;auth0_user.g.dart&#39;</span><span>;</span>

<span>@JsonSerializable</span><span>(</span><span>)</span>
<span>class</span> <span>Auth0User</span> <span>{</span>
  <span>Auth0User</span><span>(</span><span>{</span>
    required <span>this</span><span>.</span>nickname<span>,</span>
    required <span>this</span><span>.</span>name<span>,</span>
    required <span>this</span><span>.</span>email<span>,</span>
    required <span>this</span><span>.</span>picture<span>,</span>
    required <span>this</span><span>.</span>updatedAt<span>,</span>
    required <span>this</span><span>.</span>sub<span>,</span>
  <span>}</span><span>)</span><span>;</span>
  <span>final</span> String nickname<span>;</span>
  <span>final</span> String name<span>;</span>
  <span>final</span> String picture<span>;</span>

  <span>@JsonKey</span><span>(</span>name<span>:</span> <span>&#39;updated_at&#39;</span><span>)</span>
  <span>final</span> String updatedAt<span>;</span>

 <span>// userID getter to understand it easier</span>
  String <span>get</span> id <span>=</span><span>&gt;</span> sub<span>;</span>
  <span>final</span> String sub<span>;</span>

  <span>final</span> String email<span>;</span>

  <span>factory</span> Auth0User<span>.</span><span>fromJson</span><span>(</span>Map<span>&lt;</span>String<span>,</span> <span>dynamic</span><span>&gt;</span> json<span>)</span> <span>=</span><span>&gt;</span>
      _$<span>Auth0UserFromJson</span><span>(</span>json<span>)</span><span>;</span>

  Map<span>&lt;</span>String<span>,</span> <span>dynamic</span><span>&gt;</span> <span>toJson</span><span>(</span><span>)</span> <span>=</span><span>&gt;</span> _$<span>Auth0UserToJson</span><span>(</span><span>this</span><span>)</span><span>;</span>
<span>}</span></code></pre><p>🛠 Like <code>Auth0IdToken</code>, <code>Auth0User</code> uses the <code>json_annotation</code> library to generate code to serialize and deserialize its instances. Run the following command to generate that code:</p><pre><code>flutter pub run build_runner build --delete-conflicting-outputs</code></pre><p>🛠 This completes the model for Auth0 users, so let’s create a <code><span>getUserDetails</span><span>(</span><span>)</span></code> method for the <code>AuthService</code> class as follows:</p><pre><code><span>// /lib/services/auth_service.dart</span>

 Future<span>&lt;</span>Auth0User<span>&gt;</span> <span>getUserDetails</span><span>(</span>String accessToken<span>)</span> <span>async</span> <span>{</span>
    <span>final</span> url <span>=</span> Uri<span>.</span><span>https</span><span>(</span>
      AUTH0_DOMAIN<span>,</span>
      <span>&#39;/userinfo&#39;</span><span>,</span>
    <span>)</span><span>;</span>

    <span>final</span> response <span>=</span> <span>await</span> http<span>.</span><span>get</span><span>(</span>
      url<span>,</span>
      headers<span>:</span> <span>{</span><span>&#39;Authorization&#39;</span><span>:</span> <span>&#39;Bearer $accessToken&#39;</span><span>}</span><span>,</span>
    <span>)</span><span>;</span>

    <span>print</span><span>(</span><span>&#39;getUserDetails ${response.body}&#39;</span><span>)</span><span>;</span>

    <span>if</span> <span>(</span>response<span>.</span>statusCode <span>==</span> <span>200</span><span>)</span> <span>{</span>
      <span>return</span> Auth0User<span>.</span><span>fromJson</span><span>(</span><span>jsonDecode</span><span>(</span>response<span>.</span>body<span>)</span><span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>throw</span> <span>Exception</span><span>(</span><span>&#39;Failed to get user details&#39;</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span></code></pre><p>🛠 <code><span>getUserDetails</span><span>(</span><span>)</span></code> uses Dart’s <a href="https://pub.dev/packages/http" target="_blank" rel="noreferrer noopener"><code>http</code></a> library, so add this <code><span>import</span></code> statement at the top of the file:</p><pre><code><span>// /lib/services/auth_service.dart</span>

<span>import</span> <span>&#39;package:http/http.dart&#39;</span> <span>as</span> http<span>;</span></code></pre><p>🛠 Since you will need to reuse <code>idToken</code>, <code>profile</code>, and <code>accessToken</code> throughout the application, it would be nice to store their values as members of <code>AuthService</code> to access them easily. Add these instance variables to <code>AuthService</code>:</p><pre><code><span>// /lib/services/auth_service.dart</span>

  Auth0User<span>?</span> profile<span>;</span>
  Auth0IdToken<span>?</span> idToken<span>;</span>
  String<span>?</span> auth0AccessToken<span>;</span></code></pre><p>🛠 You can create a simple method, <code><span>_setLocalVariables</span><span>(</span><span>)</span></code>, to store these local values. Add the following to <code>AuthService</code>:</p><pre><code><span>// /lib/services/auth_service.dart</span>

  Future<span>&lt;</span>String<span>&gt;</span> <span>_setLocalVariables</span><span>(</span>result<span>)</span> <span>async</span> <span>{</span>
    <span>final</span> bool isValidResult <span>=</span>
        result <span>!=</span> <span>null</span> <span>&amp;&amp;</span> result<span>.</span>accessToken <span>!=</span> <span>null</span> <span>&amp;&amp;</span> result<span>.</span>idToken <span>!=</span> <span>null</span><span>;</span>

    <span>if</span> <span>(</span>isValidResult<span>)</span> <span>{</span>
      auth0AccessToken <span>=</span> result<span>.</span>accessToken<span>;</span>
      idToken <span>=</span> <span>parseIdToken</span><span>(</span>result<span>.</span>idToken<span>!</span><span>)</span><span>;</span>
      profile <span>=</span> <span>await</span> <span>getUserDetails</span><span>(</span>result<span>.</span>accessToken<span>!</span><span>)</span><span>;</span>

      <span>if</span> <span>(</span>result<span>.</span>refreshToken <span>!=</span> <span>null</span><span>)</span> <span>{</span>
        <span>await</span> secureStorage<span>.</span><span>write</span><span>(</span>
          key<span>:</span> REFRESH_TOKEN_KEY<span>,</span>
          value<span>:</span> result<span>.</span>refreshToken<span>,</span>
        <span>)</span><span>;</span>
      <span>}</span>

      <span>return</span> <span>&#39;Success&#39;</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>return</span> <span>&#39;Something is Wrong!&#39;</span><span>;</span>
    <span>}</span>
  <span>}</span></code></pre><p>If the Access Token and ID Token are available, it stores their values. If the Refresh Token is also available, it writes its value to secure storage, and that value is retrievable only with the Refresh Token key.</p><p>🛠 With the changes you have made, you can now update <code>AuthService</code>’s <code><span>login</span><span>(</span><span>)</span></code> method to return the response for a successful login. Update the method so that it looks like this:</p><pre><code><span>// /lib/services/auth_service.dart</span>

Future<span>&lt;</span>String<span>&gt;</span> <span>login</span><span>(</span><span>)</span> <span>async</span> <span>{</span>
    <span>try</span> <span>{</span>
      <span>final</span> authorizationTokenRequest <span>=</span> <span>AuthorizationTokenRequest</span><span>(</span>
        AUTH0_CLIENT_ID<span>,</span>
        AUTH0_REDIRECT_URI<span>,</span>
        issuer<span>:</span> AUTH0_ISSUER<span>,</span>
        scopes<span>:</span> <span>[</span><span>&#39;openid&#39;</span><span>,</span> <span>&#39;profile&#39;</span><span>,</span> <span>&#39;offline_access&#39;</span><span>,</span> <span>&#39;email&#39;</span><span>]</span><span>,</span>
      <span>)</span><span>;</span>

      <span>final</span> AuthorizationTokenResponse<span>?</span> result <span>=</span>
          <span>await</span> appAuth<span>.</span><span>authorizeAndExchangeCode</span><span>(</span>
        authorizationTokenRequest<span>,</span>
      <span>)</span><span>;</span>

      <span>return</span> <span>await</span> <span>_setLocalVariables</span><span>(</span>result<span>)</span><span>;</span>
    <span>}</span> <span>on</span> PlatformException <span>{</span>
      <span>return</span> <span>&#39;User has cancelled or no internet!&#39;</span><span>;</span>
    <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
      <span>return</span> <span>&#39;Unkown Error!&#39;</span><span>;</span>
    <span>}</span>
  <span>}</span></code></pre><p>You can catch any exceptions and return a specific response based on their type to handle errors better.</p><h3 id="Handling-the-app-s-initial-state">Handling the app’s initial state</h3><p>The only thing missing is handling the authentication state when the app is launched. You might want to be able to silently login and retrieve a new Access Token if a Refresh Token is available.</p><p>🛠 Let’s add a new method, <code><span>init</span><span>(</span><span>)</span></code>, to deal with the app’s initial state. Implement this method by adding the following to <code>AuthService</code>:</p><pre><code><span>// /lib/services/auth_service.dart</span>

  Future<span>&lt;</span>bool<span>&gt;</span> <span>init</span><span>(</span><span>)</span> <span>async</span> <span>{</span>
    <span>final</span> storedRefreshToken <span>=</span> <span>await</span> secureStorage<span>.</span><span>read</span><span>(</span>key<span>:</span> REFRESH_TOKEN_KEY<span>)</span><span>;</span>

    <span>if</span> <span>(</span>storedRefreshToken <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>return</span> <span>false</span><span>;</span>
    <span>}</span>

    <span>try</span> <span>{</span>
      <span>final</span> TokenResponse<span>?</span> result <span>=</span> <span>await</span> appAuth<span>.</span><span>token</span><span>(</span>
        <span>TokenRequest</span><span>(</span>
          AUTH0_CLIENT_ID<span>,</span>
          AUTH0_REDIRECT_URI<span>,</span>
          issuer<span>:</span> AUTH0_ISSUER<span>,</span>
          refreshToken<span>:</span> storedRefreshToken<span>,</span>
        <span>)</span><span>,</span>
      <span>)</span><span>;</span>
      <span>final</span> String setResult <span>=</span> <span>await</span> <span>_setLocalVariables</span><span>(</span>result<span>)</span><span>;</span>
      <span>return</span> setResult <span>==</span> <span>&#39;Success&#39;</span><span>;</span>
    <span>}</span> <span>catch</span> <span>(</span>e<span>,</span> s<span>)</span> <span>{</span>
      <span>print</span><span>(</span><span>&#39;error on Refresh Token: $e - stack: $s&#39;</span><span>)</span><span>;</span>
      <span>// logOut() possibly</span>
      <span>return</span> <span>false</span><span>;</span>
    <span>}</span>
  <span>}</span></code></pre><p><code><span>init</span><span>(</span><span>)</span></code> checks for a Refresh Token in secure storage and immediately returns <code><span>false</span></code> if there isn’t one. However, if it finds a Refresh Token, <code><span>init</span><span>(</span><span>)</span></code> passes the retrieved request token via a <code>TokenRequest</code> object to <code>appAuth<span>.</span><span>token</span><span>(</span><span>)</span></code> in order to automatically get new access, ID, and Refresh Tokens without requiring the user to log in manually.</p><h3 id="Enabling-login-on-the-home-screen">Enabling login on the home screen</h3><p>Now that you have the underlying methods for login and initial setup, it’s time to implement similar methods for the app’s screens, whose code is in the <code><span>/</span>lib<span>/</span>screens<span>/</span></code> directory. </p><p>🛠 The app’s home screen is implemented in the <code>HomeScreen</code> class, located in <code><span>/</span>lib<span>/</span>screens<span>/</span>home<span>.</span>dart</code>. Open that file and add this line to the other <code><span>import</span></code> statements:</p><pre><code><span>// /lib/screens/home.dart</span>

<span>import</span> <span>&#39;package:mjcoffee/services/auth_service.dart&#39;</span><span>;</span></code></pre><p>Now scroll past the <code>HomeScreen</code> class to the <code>_HomeScreenState</code> class. You’ll need to make some changes to this class.</p><p>🛠 The first set of changes is to the instance variables at the start of <code>_HomeScreenState</code>. Change them to the following:</p><pre><code><span>// /lib/screens/home.dart</span>

    bool isProgressing <span>=</span> <span>false</span><span>;</span>
    bool isLoggedIn <span>=</span> <span>false</span><span>;</span>
    String errorMessage <span>=</span> <span>&#39;&#39;</span><span>;</span>
    String<span>?</span> name<span>;</span></code></pre><p>🛠 The <code><span>initState</span><span>(</span><span>)</span></code> method is just below those variables. Right now, the only thing it does is call its counterpart in the superclass. Replace the <code>implement init action</code> comments with a call to <code><span>initAction</span><span>(</span><span>)</span></code>. The method should look like this:</p><pre><code><span>// /lib/screens/home.dart</span>

  <span>@override</span>
  <span>void</span> <span>initState</span><span>(</span><span>)</span> <span>{</span>
    <span>initAction</span><span>(</span><span>)</span><span>;</span>
    <span>super</span><span>.</span><span>initState</span><span>(</span><span>)</span><span>;</span>
  <span>}</span></code></pre><p>You’ll implement <code><span>initAction</span><span>(</span><span>)</span></code> shortly.</p><p>Finally, look at the <code><span>build</span><span>(</span><span>)</span></code> method, which defines the home screen’s user interface. Scroll through this method until you find this <code><span>Row</span><span>(</span><span>)</span></code> function call:</p><pre><code><span>Row</span><span>(</span>
  mainAxisAlignment<span>:</span> MainAxisAlignment<span>.</span>center<span>,</span>
  children<span>:</span> <span>&lt;</span>Widget<span>&gt;</span><span>[</span>
    <span>if</span> <span>(</span>isProgressing<span>)</span>
      <span>CircularProgressIndicator</span><span>(</span><span>)</span>
    <span>else</span> <span>if</span> <span>(</span><span>!</span>isLoggedIn<span>)</span>
      <span>CommonButton</span><span>(</span>
        onPressed<span>:</span> <span>(</span><span>)</span> <span>{</span>
            CoffeeRouter<span>.</span>instance<span>.</span><span>pushReplacement</span><span>(</span>MenuScreen<span>.</span><span>route</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>/// ----------------------</span>
            <span>/// Implement login action</span>
            <span>/// ----------------------</span>
        <span>}</span><span>,</span>
        text<span>:</span> <span>&#39;Login | Register&#39;</span><span>,</span>
      <span>)</span>
    <span>else</span>
      <span>Text</span><span>(</span><span>&#39;Welcome $name&#39;</span><span>)</span><span>,</span>
  <span>]</span><span>,</span> <span>// &lt;Widget&gt;[]</span>
<span>)</span><span>,</span></code></pre><p>🛠 Replace the <code>Implement login section</code> comments so that the <code><span>Row</span><span>(</span><span>)</span></code> function call in the <code>build</code> looks like this:</p><pre><code><span>Row</span><span>(</span>
  mainAxisAlignment<span>:</span> MainAxisAlignment<span>.</span>center<span>,</span>
  children<span>:</span> <span>&lt;</span>Widget<span>&gt;</span><span>[</span>
    <span>if</span> <span>(</span>isProgressing<span>)</span>
      <span>CircularProgressIndicator</span><span>(</span><span>)</span>
    <span>else</span> <span>if</span> <span>(</span><span>!</span>isLoggedIn<span>)</span>
      <span>CommonButton</span><span>(</span>
        onPressed<span>:</span> loginAction<span>,</span>
        text<span>:</span> <span>&#39;Login | Register&#39;</span><span>,</span>
      <span>)</span>
    <span>else</span>
      <span>Text</span><span>(</span><span>&#39;Welcome $name&#39;</span><span>)</span><span>,</span>
  <span>]</span><span>,</span> <span>// &lt;Widget&gt;[]</span>
<span>)</span><span>,</span></code></pre><p>🛠 Now add these methods to <code>_HomeScreenState</code>, after the <code><span>build</span><span>(</span><span>)</span></code> method:</p><pre><code><span>setSuccessAuthState</span><span>(</span><span>)</span> <span>{</span>
  <span>setState</span><span>(</span><span>(</span><span>)</span> <span>{</span>
    isProgressing <span>=</span> <span>false</span><span>;</span>
    isLoggedIn <span>=</span> <span>true</span><span>;</span>
    name <span>=</span> AuthService<span>.</span>instance<span>.</span>idToken<span>?</span><span>.</span>name<span>;</span>
  <span>}</span><span>)</span><span>;</span>

  CoffeeRouter<span>.</span>instance<span>.</span><span>push</span><span>(</span>MenuScreen<span>.</span><span>route</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>}</span>

<span>setLoadingState</span><span>(</span><span>)</span> <span>{</span>
  <span>setState</span><span>(</span><span>(</span><span>)</span> <span>{</span>
    isProgressing <span>=</span> <span>true</span><span>;</span>
    errorMessage <span>=</span> <span>&#39;&#39;</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span>

Future<span>&lt;</span><span>void</span><span>&gt;</span> <span>loginAction</span><span>(</span><span>)</span> <span>async</span> <span>{</span>
  <span>setLoadingState</span><span>(</span><span>)</span><span>;</span>
  <span>final</span> message <span>=</span> <span>await</span> AuthService<span>.</span>instance<span>.</span><span>login</span><span>(</span><span>)</span><span>;</span>
  <span>if</span> <span>(</span>message <span>==</span> <span>&#39;Success&#39;</span><span>)</span> <span>{</span>
    <span>setSuccessAuthState</span><span>(</span><span>)</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>setState</span><span>(</span><span>(</span><span>)</span> <span>{</span>
      isProgressing <span>=</span> <span>false</span><span>;</span>
      errorMessage <span>=</span> message<span>;</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>initAction</span><span>(</span><span>)</span> <span>async</span> <span>{</span>
  <span>setLoadingState</span><span>(</span><span>)</span><span>;</span>
  <span>final</span> bool isAuth <span>=</span> <span>await</span> AuthService<span>.</span>instance<span>.</span><span>init</span><span>(</span><span>)</span><span>;</span>
  <span>if</span> <span>(</span>isAuth<span>)</span> <span>{</span>
    <span>setSuccessAuthState</span><span>(</span><span>)</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>setState</span><span>(</span><span>(</span><span>)</span> <span>{</span>
      isProgressing <span>=</span> <span>false</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre><p>Some notes about these methods:</p><ul><li><code><span>initAction</span><span>(</span><span>)</span></code> is called when the home screen is initiated and handles the case where the app has a Refresh Token.</li><li>The <code><span>Row</span><span>(</span><span>)</span></code> function call in the <code><span>build</span><span>(</span><span>)</span></code> method determines what the user sees based on their login status. When the user is logged in, the screen shows a welcome message containing the user’s name. When the user isn’t logged in, it shows a progress indicator if the login is in progress, or the “Login | Register” button otherwise.</li><li>Pressing the “Login | Register” button causes the <code><span>loginAction</span><span>(</span><span>)</span></code> method to be called.</li><li>A loading indicator will appear if the login is in progress.</li><li>A number of methods call <code><span>setSuccessAuthState</span><span>(</span><span>)</span></code>, which set the home screen’s instance variables to the appropriate values and redirects the user to the proper screen. In case some operation fails, you can easily display an error message onscreen.</li></ul><h3 id="Logging-in">Logging in</h3><p>🛠 If you’ve made it this far, you’ve done well, and it’s now time to see what you’ve achieved so far. Make sure your emulators or devices are active and stop any earlier versions of this app. Once you’ve done that, run the app using this command:</p><pre><code>flutter run -d all --dart-define<span>=</span>AUTH0_DOMAIN<span>=</span><span>[</span>YOUR DOMAIN<span>]</span> --dart-define<span>=</span>AUTH0_CLIENT_ID<span>=</span><span>[</span>YOUR CLIENT ID<span>]</span></code></pre><p>Once the app is loaded, tap on the &#34;Login | Register&#34; button.</p><p>On iOS, when you run the app for the first time, you will see a prompt like this:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/35URcfKhXm5Mw9H6UCEZMh/f60c8a3bf99f629b5fad6884c1c1d579/ASWebAuthenticationSession.png" alt="Allowed callback URLs"/></p><p>This prompt is a result of iOS’ <a href="https://developer.apple.com/documentation/authenticationservices/aswebauthenticationsession" target="_blank" rel="noreferrer noopener"><code>ASWebAuthenticationSession</code></a>, a session where the user is authenticated through a web service. iOS is notifying the user that the app intends to log the user in using Auth0.</p><p>If you tap “Continue” and all goes well, you will see the <a href="https://auth0.com/docs/universal-login" target="_blank" rel="noreferrer noopener">Auth0 Universal Login page</a>, shown below (the Android version is on the left, and the iOS version is on the right): </p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4XJ2EMjdhToaGmbQfYrSq5/a1273bdef7feacf4bdc82de2d7ef3379/auth0-login.png" alt="Allowed callback URLs"/></p><p>Note that you can style this page or even choose other templates in the Auth0 dashboard. <a href="https://www.youtube.com/playlist?list=PLCOnzDflrUceRLfHEkl-u2ipjsre6ZwjV" target="_blank" rel="noreferrer noopener">Watch this video to learn more about the theming of the login page in Auth0</a>.</p><p>Once you log in, you will be redirected to the application, where you’ll be greeted by name. You’ll then be redirected to the menu screen, as specified by the final line in <code>_HomeScreenState</code>’s <code><span>setSuccessAuthState</span><span>(</span><span>)</span></code> method:</p><pre><code>CoffeeRouter<span>.</span>instance<span>.</span><span>push</span><span>(</span>MenuScreen<span>.</span><span>route</span><span>(</span><span>)</span><span>)</span><span>;</span></code></pre><blockquote><p>If you signed up for a new account using the app, you might receive a confirmation email from Auth0 for the app.</p></blockquote><p>🛠 To confirm that the Refresh Token works, terminate the app, and run it again. The application will retrieve the Refresh Token from a secure store, get a new Access Token and ID Token, and then take you straight to the menu screen, bypassing the login process and not asking for your credentials.</p><h2 id="Simple-Logout">Simple Logout</h2><h3 id="Layers-of-sessions">Layers of sessions</h3><p>Every login requires logout! It’s more complicated than it looks  since there are typically three-session layers you need to consider:</p><ul><li><strong>Application Session Layer:</strong> This is the application, which in this case is the MJ Coffee app.</li><li><strong>Auth0 Session Layer:</strong> Auth0 maintains a session for each logged-in user and stores their information inside a cookie or in some other way.</li><li><strong>Identity Provider Session Layer:</strong> This is another service providing identity services, such as Facebook or Google.</li></ul><p>After users log out, you can redirect users to a specific URL. You need to register the redirect URL in your tenant or application settings.</p><p>One of the parameters for OIDC authentication requests is called <code>prompt</code>, which specifies how the user should be prompted for reauthentication and consent. It also makes it easy to clear sessions. </p><p><code>prompt</code> takes a list that can contain any combination of these values:</p><ul><li><strong><code>none</code></strong>: Do not display any authentication or consent user interface pages.</li><li><strong><code>login</code></strong>: Ignore any existing session and require the user to log in.</li><li><strong><code>consent</code></strong>: Ask the user for consent before returning information to the app.</li><li><strong><code>select_account</code></strong>: Show a prompt asking the user to select a user account. Useful in cases where the user has multiple accounts.</li></ul><p>🛠 Luckily, <code>prompt</code> is supported in the <code>AppAuth</code> SDK. In the <code>AuthService</code> class (located in <code><span>/</span>lib<span>/</span>services<span>/</span>auth_service<span>.</span>dart</code>) locate the <code><span>login</span><span>(</span><span>)</span></code> method, where you have constructed <code>AuthorizationTokenRequest</code>. Change your call to the <code>AuthorizationTokenRequest</code> constructor so that it includes <code>login</code> as a <code>prompt</code> value:</p><pre><code><span>// /lib/services/auth_service.dart</span>

<span>final</span> authorizationTokenRequest <span>=</span> <span>AuthorizationTokenRequest</span><span>(</span>
  AUTH0_CLIENT_ID<span>,</span>
  AUTH0_REDIRECT_URI<span>,</span>
  issuer<span>:</span> AUTH0_ISSUER<span>,</span>
  scopes<span>:</span> <span>[</span><span>&#39;openid&#39;</span><span>,</span> <span>&#39;profile&#39;</span><span>,</span> <span>&#39;offline_access&#39;</span><span>,</span> <span>&#39;email&#39;</span><span>]</span><span>,</span>
  promptValues<span>:</span> <span>[</span><span>&#39;login&#39;</span><span>]</span><span>,</span>
<span>)</span><span>;</span></code></pre><h3 id="Remove-the-Refresh-Token">Remove the Refresh Token</h3><p>Thanks to the Refresh Token, the user should be able to switch to another app or even close it and then return to MJ Coffee without having to re-authenticate because they’re still logged in. Logging out implies that the user is done with the app for now. The next time someone uses the app, they should be required to log in. This is done by removing the Refresh Token.</p><p>🛠 To remove the Refresh Token, we’ll need to remove the Refresh Token key from secure storage. Add this <code><span>logout</span><span>(</span><span>)</span></code> method to <code>AuthService</code>, just after the <code><span>login</span><span>(</span><span>)</span></code> method:</p><pre><code><span>// /lib/services/auth_service.dart</span>

Future<span>&lt;</span><span>void</span><span>&gt;</span> <span>logout</span><span>(</span><span>)</span> <span>async</span> <span>{</span>
  <span>await</span> secureStorage<span>.</span><span>delete</span><span>(</span>key<span>:</span> REFRESH_TOKEN_KEY<span>)</span><span>;</span>
<span>}</span></code></pre><p>The next time the user runs the app, they’ll be sent to the home screen and its login button since the app no longer has a Refresh Token and hence no way to authenticate automatically. </p><p>While this is approach is sufficient for the MJ Coffee app, I would like to mention that you can also manually call logout endpoints and pass necessary parameters, and shown in the example below:</p><pre><code><span>// Example:</span>

Future<span>&lt;</span>bool<span>&gt;</span> <span>logout</span><span>(</span><span>)</span> <span>async</span> <span>{</span>
  <span>await</span> secureStorage<span>.</span><span>delete</span><span>(</span>key<span>:</span> REFRESH_TOKEN_KEY<span>)</span><span>;</span>

  <span>final</span> url <span>=</span> Uri<span>.</span><span>https</span><span>(</span>
      AUTH0_DOMAIN<span>,</span>
      <span>&#39;/v2/logout&#39;</span><span>,</span>
      <span>{</span>
        <span>&#39;client_id&#39;</span><span>:</span> AUTH0_CLIENT_ID<span>,</span>
        <span>&#39;federated&#39;</span><span>:</span> <span>&#39;&#39;</span><span>,</span>
        <span>//&#39;returnTo&#39;: &#39;YOUR_RETURN_LOGOUT_URL&#39;</span>
      <span>}</span><span>,</span>
    <span>)</span><span>;</span>

    <span>final</span> response <span>=</span> <span>await</span> http<span>.</span><span>get</span><span>(</span>
      url<span>,</span>
      headers<span>:</span> <span>{</span><span>&#39;Authorization&#39;</span><span>:</span> <span>&#39;Bearer $auth0AccessToken&#39;</span><span>}</span><span>,</span>
    <span>)</span><span>;</span>

    <span>print</span><span>(</span>
      <span>&#39;logout: ${response.request} ${response.statusCode} ${response.body}&#39;</span><span>,</span>
    <span>)</span><span>;</span>

    <span>return</span> response<span>.</span>statusCode <span>==</span> <span>200</span><span>;</span>
<span>}</span></code></pre><p>For more information, you can read <a href="https://auth0.com/docs/logout" target="_blank" rel="noreferrer noopener">Auth0’s documentation on logout.</a></p><p>🛠 Let’s enable the “Logout” button. It is on the profile screen, which is implemented by the <code>ProfileScreen</code> class (located in <code><span>/</span>lib<span>/</span>screens<span>/</span>profile<span>.</span>dart</code>). In the <code><span>build</span><span>(</span><span>)</span></code> method, locate the   “Logout” button and its <code>onPressed</code> parameter. Replace the “Perform logout” comments so that the call to the <code><span>Padding</span><span>(</span><span>)</span></code> function looks like this:</p><pre><code><span>// /lib/screens/profile.dart</span>

<span>Padding</span><span>(</span>
  padding<span>:</span> <span>const</span> EdgeInsets<span>.</span><span>symmetric</span><span>(</span>horizontal<span>:</span> <span>30</span><span>)</span><span>,</span>
  child<span>:</span> <span>CommonButton</span><span>(</span>
    onPressed<span>:</span> <span>(</span><span>)</span> <span>async</span> <span>{</span>
      <span>await</span> AuthService<span>.</span>instance<span>.</span><span>logout</span><span>(</span><span>)</span><span>;</span>
      CoffeeRouter<span>.</span>instance<span>.</span><span>pushReplacement</span><span>(</span>HomeScreen<span>.</span><span>route</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>
    text<span>:</span> <span>&#39;Logout&#39;</span><span>,</span>
  <span>)</span><span>,</span>
<span>)</span><span>;</span></code></pre><p>When the user presses “Logout”, the <code>AuthService</code> instance’s <code><span>logout</span><span>(</span><span>)</span></code> is called and the user is redirected to the home screen.</p><p>🛠 Since you’re making use of <code>AuthService</code>’s <code><span>logout</span><span>(</span><span>)</span></code> method, you’ll have to import its file. Add the following to the <code><span>import</span></code> statements at the top of <code><span>/</span>lib<span>/</span>screens<span>/</span>profile<span>.</span>dart</code>:</p><pre><code><span>import</span> <span>&#39;package:mjcoffee/services/auth_service.dart&#39;</span><span>;</span></code></pre><p>🛠 Restart your application, go to the <strong>Profile</strong> screen and log out. You’ll be sent back to the home screen. You will have to log in to use the app again.</p><h2 id="Conclusion">Conclusion</h2><p>Congratulations! You have just integrated Auth0-powered login and logout into the MJ Coffee app.</p><p>In an upcoming section, you will continue to add authentication features to the app. You’ll learn more about Refresh Token rotation, managing the branding that appears in the login box, roles and adding social login via Apple and Google accounts.</p></div></div>]]></content:encoded>
      <author>Authentication vs. authorization</author>
      <pubDate>Mon, 04 Oct 2021 17:12:00 +0000</pubDate>
    </item>
    <item>
      <title>Let the Hunt Begin: Introducing Auth0’s First Capture the Flag Event.</title>
      <link>https://auth0.com/blog/introducing-auth0-ctf/</link>
      <description>Auth0’s first custom CTF with Hack The Box in honor of October Security Awareness Month</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>From companies to consumers, we believe everyone has a responsibility to make technology as secure as possible. For Auth0, this means building secure processes, technology, tools, and a culture of trust that puts people at the center. So this year we want you to join us for our first-ever custom Capture The Flag (CTF) with <a href="https://www.hackthebox.eu/" target="_blank" rel="noreferrer noopener">Hack The Box</a> from October 18th to October 25th.</p><h2 id="But-Wait-a-Minute--What-Is-a-CTF-">But Wait a Minute, What Is a CTF?</h2><p>A CTF or Capture The Flag is a cybersecurity competitive game where you have to solve or hack different types of challenges to gain access to a string -the flag- which looks something like this: <code><span>HTB</span><span>{</span>m1_f1rst_fl4g<span>}</span></code></p><p>You enter that flag into Hack The Box and get points depending on the difficulty of the challenge. The team with the most points wins the game.</p><h2 id="Sounds-Easy--Is-That-It-">Sounds Easy, Is That It?</h2><p>But winning alone is not the goal in our case. We designed our CTF with developers getting started in the security world in mind. </p><p>The benefit of learning cybersecurity principles and hacking techniques through a CTF is that you have certainty that the vulnerability exists in the challenge. When you go hacking in the real world, you don’t know whether the environment will be vulnerable or not. CTFs can also help you develop an attacker mindset, so the more you practice, the more secure and defensive your code will be.</p><p>Rikaard Hosein, Offensive Security Engineer (i.e hacker) at Auth0, and the mastermind behind this event got started in cybersecurity thanks to CTFs. <em>“I solved my first cybersecurity web challenge when I was 15 and I was hooked. I kept on practicing CTFs in my spare time, and thanks to them I was able to transition from a developer role to Auth0’s offensive security engineering team. I designed the challenge concepts for this CTF to give you a little taste of what the CTF world is like, and to help you learn about cybersecurity”</em>. </p><p>Our CTF is a Jeopardy-style one, meaning that the team that gets the most points wins. We have different types of challenges:</p><ul><li><strong>Web: </strong>here you’ll find mostly web-based vulnerability and also authentication/authorization issues (of course we had to include that!). Web development knowledge will come in very handy on these.</li><li><strong>Cryptography:</strong> here you can find some improperly implemented encryption schemes, different (and perhaps a bit uncommon 😉) ciphers, and more.</li><li><strong>Reverse Engineering:</strong> some challenges may include a lower-level programming language like Assembly, decompiling code, debugging by doing step-by-step execution.</li><li><strong>Pwn - Binary Exploitation: </strong>the 0s and 1s! Finding a vulnerability in a binary or executable file.</li><li><strong>Misc:</strong> surprise</li></ul><p>To solve these challenges you can use a wide range of freely available tools and decipher websites. Rikaard recommends a simple tool belt: a great mindset (learn, have fun, keep trying), <a href="https://portswigger.net/burp/communitydownload" target="_blank" rel="noreferrer noopener">burp suite community edition</a>, your favorite scripting language, <a href="https://www.gnu.org/software/gdb/" target="_blank" rel="noreferrer noopener">GDB</a> and <a href="https://hex-rays.com/ida-free/" target="_blank" rel="noreferrer noopener">IDA</a>. You may need other tools but finding those is also part of the challenge 😉.</p><h2 id="I-m-Excited--How-Can-I-Join-">I’m Excited. How Can I Join?</h2><ul><li>No prior experience is required.</li><li>You can participate either on your own or with a team of up to five people. We strongly recommend you find a team.</li><li><a href="https://ctf.hackthebox.com/" target="_blank" rel="noreferrer noopener">Create an account in Hack The Box</a> and sign up for the CTF starting now to get ready for October 18th. If you are part of a team, only the team captain needs to join the CTF (but everyone needs to have an account)</li><li>Join Hack The Box’s <a href="https://discord.gg/hackthebox" target="_blank" rel="noreferrer noopener">discord channel</a></li><li>Get ready to hack your way to the podium.</li></ul><h2 id="Resources-to-Get-Started">Resources to Get Started</h2><ul><li><a href="https://help.hackthebox.eu/en/articles/5200851-gs-introduction-to-ctf" target="_blank" rel="noreferrer noopener">Hack The Box Introduction to CTFs</a></li><li><a href="https://ctf101.org/" target="_blank" rel="noreferrer noopener">CTF 101</a></li><li><a href="https://ctftime.org/writeups" target="_blank" rel="noreferrer noopener">CTF Write ups </a>(solutions to previous worldwide events)</li><li><a href="https://trailofbits.github.io/ctf/" target="_blank" rel="noreferrer noopener">CTF Field Guide by Trailofbits</a></li></ul></div></div>]]></content:encoded>
      <pubDate>Fri, 01 Oct 2021 14:56:00 +0000</pubDate>
    </item>
    <item>
      <title>Spring Boot Logs Aggregation and Monitoring Using ELK Stack</title>
      <link>https://auth0.com/blog/spring-boot-logs-aggregation-and-monitoring-using-elk-stack/</link>
      <description>Learn how you can integrate ELK stack with your Spring Boot application for logs aggregation and monitoring in a centralized way.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><strong>TL;DR:</strong> Logs are the most critical way for debugging. They can help us follow the different operations carried out by the various services of our system.</p><p>This article will demonstrate how to integrate ELK Stack with a Spring Boot application for logs aggregation and monitoring in a centralized and scalable way.
You will also learn how to create custom index patterns through a Filebeat configuration and separate logs of different services of the same application by different indexes.
The application&#39;s source code used in this tutorial is available in this <a href="https://github.com/ApoorvTyagi/Spring-ELK" target="_blank" rel="noreferrer noopener">GitHub repository</a>.</p><h2 id="Introduction">Introduction</h2><p>Having a good log monitoring infrastructure is a key feature to have while developing any software. For instance, in a microservices architecture, any single operation triggers a chain of API calls making it challenging to debug the entire application in case an error comes.</p><p>This is where Logs act as essential information that allows us to investigate better and diagnose the errors. They can help sysadmins, support teams, and even developers to follow the different operations carried out by the different services of the system.</p><p>But it becomes very complex to maintain this critical data in a distributed environment where many applications, services, and systems are running. As a solution for this problem, we&#39;re going to look at the <strong>ELK stack</strong>, a useful tool for centralized log aggregation and analysis.</p><p>This article will demonstrate how you can integrate ELK Stack with a Spring Boot application to collect, process, store, and view the logs.</p><p>Apart from this, while working with the ELK stack, the default action is to show all the logs of a particular application at a single place inside Kibana.</p><p>In this article, you will also tackle this problem and learn how you can view the logs of multiple services separately that are running in parallel inside one single application.</p><h2 id="Introducing-ELK-Stack">Introducing ELK Stack</h2><p>ELK is a collection of three open-source applications - <a href="https://www.elastic.co/elasticsearch/" target="_blank" rel="noreferrer noopener">Elasticsearch</a>, <a href="https://www.elastic.co/logstash/" target="_blank" rel="noreferrer noopener">Logstash</a>, and <a href="https://www.elastic.co/kibana/" target="_blank" rel="noreferrer noopener">Kibana</a> from <a href="https://www.elastic.co/" target="_blank" rel="noreferrer noopener">Elastic</a> that accepts data from any source or format, on which you can then perform search, analysis, and visualize that data.</p><ol start="1"><li><strong>Elasticsearch</strong> — Elasticsearch stores and indexes the data. It is a NoSQL database based on Lucene&#39;s open-source search engine. Since Elasticsearch is developed using Java, therefore, it can run on different platforms. One particular aspect where it excels is indexing streams of data such as logs.</li><li><strong>Logstash</strong> — Logstash is a tool that integrates with a variety of deployments. It is used to collect, parse, transform, and buffer data from a variety of sources. The data collected by Logstash can be shipped to one or more targets like Elasticsearch.</li><li><strong>Kibana</strong> — Kibana acts as an analytics and visualization layer on top of Elasticsearch.  Kibana can be used to search, view, and interpret the data stored in Elasticsearch.</li></ol><h2 id="ELK-Installation---Other-Configurations">ELK Installation &amp; Other Configurations</h2><p>Now that you understand what ELK means, let&#39;s learn how to configure all three components to your local development environment:</p><h3 id="Elasticsearch">Elasticsearch</h3><p>Download the Elasticsearch zip file from the <a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noreferrer noopener">official elastic website</a> and extract the zip file contents.</p><p>Next, you can start the Elasticsearch cluster by running <code>bin<span>/</span>elasticsearch</code> on Linux and macOS or <code>bin\elasticsearch<span>.</span>bat</code> on Windows.</p><p>To make sure the Elasticsearch cluster is up and working fine, open the browser at <code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>9200</span></code>. You must see something similar to this:</p><pre><code><span>{</span>
  <span>&#34;name&#34;</span> <span>:</span> <span>&#34;YOUR_PC_NAME&#34;</span><span>,</span>
  <span>&#34;cluster_name&#34;</span> <span>:</span> <span>&#34;elasticsearch&#34;</span><span>,</span>
  <span>&#34;cluster_uuid&#34;</span> <span>:</span> <span>&#34;Qz59cUdbQRuRTVct1h3HiA&#34;</span><span>,</span>
  <span>&#34;version&#34;</span> <span>:</span> <span>{</span>
    <span>&#34;number&#34;</span> <span>:</span> <span>&#34;7.13.2&#34;</span><span>,</span>
    <span>&#34;build_flavor&#34;</span> <span>:</span> <span>&#34;default&#34;</span><span>,</span>
    <span>&#34;build_type&#34;</span> <span>:</span> <span>&#34;zip&#34;</span><span>,</span>
    <span>&#34;build_hash&#34;</span> <span>:</span> <span>&#34;4d960a0733be83dd2543ca018aa4ddc42e956800&#34;</span><span>,</span>
    <span>&#34;build_date&#34;</span> <span>:</span> <span>&#34;2021-06-10T21:01:55.251515791Z&#34;</span><span>,</span>
    <span>&#34;build_snapshot&#34;</span> <span>:</span> <span>false</span><span>,</span>
    <span>&#34;lucene_version&#34;</span> <span>:</span> <span>&#34;8.8.2&#34;</span><span>,</span>
    <span>&#34;minimum_wire_compatibility_version&#34;</span> <span>:</span> <span>&#34;6.8.0&#34;</span><span>,</span>
    <span>&#34;minimum_index_compatibility_version&#34;</span> <span>:</span> <span>&#34;6.0.0-beta1&#34;</span>
  <span>}</span><span>,</span>
  <span>&#34;tagline&#34;</span><span>:</span> <span>&#34;You Know, for Search.&#34;</span>
<span>}</span></code></pre><h3 id="Kibana">Kibana</h3><p>Setting up Kibana is similar to Elasticsearch. Just download the latest version application from the <a href="https://www.elastic.co/downloads/kibana" target="_blank" rel="noreferrer noopener">official website</a>.</p><p>To start Kibana, run <code>bin<span>/</span>kibana</code> on Linux and macOS or <code>bin<span>/</span>kibana<span>.</span>bat</code> on Windows.</p><p>By default, Kibana listens on port 5601. If you go to <code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>5601</span></code>, you should be redirected to the Kibana home page:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7AHCnDDJCuJoGdIeu9kEme/27f2716e95dc611dbd0f69d79fe9a6e4/elk_01.png" alt="Kibana_Start"/></p><h3 id="Logstash">Logstash</h3><p>Download and extract the latest version of Logstash from <a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="noreferrer noopener">official Logstash downloads</a></p><p>Here, inside the <code>bin</code> folder, you need to create one configuration(.conf) file. For instance, in this case, you will be creating <code>logstash<span>.</span>conf</code>.</p><p>A Logstash configuration consists of 3 components:</p><p><strong>1. Input</strong></p><p>The input section in the configuration file defines the name and the absolute path of the file from where data has to be fetched. In your case, it will be from the log file generated by the spring boot application.</p><p><strong>2. Filter</strong></p><p>The filter section defines what processing you want to apply to the data.</p><p><strong>3. Output</strong></p><p>The output section defines the target where you want to send the data (elasticsearch, for example).</p><p>So your <code>logstash<span>.</span>conf</code> file should look similar to this:</p><pre><code>input <span>{</span>

<span>}</span>

filter <span>{</span>

<span>}</span>
output <span>{</span>

<span>}</span></code></pre><p>In the further section, you will be making the changes in this file to pass the Spring Boot application logs to elasticsearch.</p><blockquote><p>To run the logstash configuration file, use command: <code>logstash <span>-</span>f <span>&lt;</span>file<span>&gt;</span><span>.</span>conf</code></p></blockquote><p>Apart from these, the other prerequisites required to follow this tutorial are:</p><ul><li><a href="https://www.oracle.com/in/java/technologies/javase-jdk11-downloads.html" target="_blank" rel="noreferrer noopener">Java 11</a> or later version</li><li><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noreferrer noopener">Apache Maven</a></li><li><a href="https://www.postman.com/downloads/" target="_blank" rel="noreferrer noopener">Postman App</a></li></ul><p>Also, this tutorial requires you have a basic understanding of how REST APIs work in Spring Boot.</p><h2 id="Creating-a-Spring-Boot-Application">Creating a Spring Boot Application</h2><p>Let&#39;s now begin with creating the microservice. You will be using Spring Boot to create the REST APIs, and then you&#39;ll integrate it with the ELK stack that you saw above.</p><p>To start with Spring Boot, you can create a basic project using the <a href="https://start.spring.io/" target="_blank" rel="noreferrer noopener">Spring Boot Initializr</a>. </p><p>Select Maven project and Java language. For the Spring Boot version, select <code><span>2.5</span><span>.4</span></code>. You will also have to add the <code>spring<span>-</span>boot<span>-</span>starter<span>-</span>web</code> dependency.</p><p>Next, fill in the project metadata. Set group as <code>com<span>.</span>demo</code>, artifact and name as <code><span>ELK</span></code>, package as <code>com<span>.</span>demo<span>.</span><span>ELK</span></code>. Last but not least, enter a short description and click the <code>generate</code> button.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2YRj4WBbKsNyC8w1ebSQdc/5a8d316ff646df959f549f712e3449e8/elk_02.png" alt="Spring"/></p><p>Open the project folder in your favorite IDE and open the <code>pom<span>.</span>xml</code> file.</p><p>Add the following code to the <code>pom<span>.</span>xml</code> to configure the extra dependencies that you are going to use in this Spring Boot project:</p><pre><code><span>&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span><span><span>&lt;</span>project</span> <span>xmlns</span><span><span>=</span><span>&#34;</span>http://maven.apache.org/POM/4.0.0<span>&#34;</span></span> <span><span>xmlns:</span>xsi</span><span><span>=</span><span>&#34;</span>http://www.w3.org/2001/XMLSchema-instance<span>&#34;</span></span>
    <span><span>xsi:</span>schemaLocation</span><span><span>=</span><span>&#34;</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span>&#34;</span></span><span>&gt;</span></span>
    <span><span><span>&lt;</span>modelVersion</span><span>&gt;</span></span>4.0.0<span><span><span>&lt;/</span>modelVersion</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>parent</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>spring-boot-starter-parent<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>version</span><span>&gt;</span></span>2.5.3<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>relativePath</span><span>/&gt;</span></span> <span>&lt;!-- lookup parent from repository --&gt;</span>
    <span><span><span>&lt;/</span>parent</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>com.demo<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>ELK<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>version</span><span>&gt;</span></span>0.0.1-SNAPSHOT<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>name</span><span>&gt;</span></span>ELK<span><span><span>&lt;/</span>name</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>description</span><span>&gt;</span></span>Logs monitoring and aggregation using ELK stack<span><span><span>&lt;/</span>description</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>properties</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>java.version</span><span>&gt;</span></span>11<span><span><span>&lt;/</span>java.version</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>properties</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>dependencies</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>dependency</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>spring-boot-starter-web<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
        <span><span><span>&lt;/</span>dependency</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>dependency</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>spring-boot-starter-test<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>scope</span><span>&gt;</span></span>test<span><span><span>&lt;/</span>scope</span><span>&gt;</span></span>
        <span><span><span>&lt;/</span>dependency</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>dependency</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.json<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>json<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>version</span><span>&gt;</span></span>20180130<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
        <span><span><span>&lt;/</span>dependency</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>dependency</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>com.googlecode.json-simple<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>json-simple<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>version</span><span>&gt;</span></span>1.1<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
        <span><span><span>&lt;/</span>dependency</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>dependencies</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>build</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>plugins</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>plugin</span><span>&gt;</span></span>
                <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
                <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>spring-boot-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
            <span><span><span>&lt;/</span>plugin</span><span>&gt;</span></span>
        <span><span><span>&lt;/</span>plugins</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>build</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>project</span><span>&gt;</span></span></code></pre><p>Next, create a new package <code>com<span>.</span>demo<span>.</span><span>ELK</span><span>.</span>controller</code>. Inside this, make a new Java file called <code>ELKController<span>.</span>java</code> to define the REST Controller for exposing the API endpoints. </p><p>You will call these APIs to print the content to your log file.</p><pre><code><span>package</span> <span>com<span>.</span>demo<span>.</span></span>ELK<span>.</span>controller<span>;</span>

<span>import</span> <span>com<span>.</span>fasterxml<span>.</span>jackson<span>.</span>databind<span>.</span></span><span>JsonNode</span><span>;</span>
<span>import</span> <span>org<span>.</span>json<span>.</span>simple<span>.</span></span><span>JSONArray</span><span>;</span>
<span>import</span> <span>org<span>.</span>slf4j<span>.</span></span><span>Logger</span><span>;</span>
<span>import</span> <span>org<span>.</span>slf4j<span>.</span></span><span>LoggerFactory</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>beans<span>.</span>factory<span>.</span>annotation<span>.</span></span><span>Autowired</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>GetMapping</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>PathVariable</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>RequestMapping</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>RestController</span><span>;</span>

<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>Date</span><span>;</span>

<span>@RestController</span>
<span>@RequestMapping</span><span>(</span>value <span>=</span> <span>&#34;/api&#34;</span><span>)</span>
<span>public</span> <span>class</span> <span>ELKController</span> <span>{</span>

    <span>// Initializing instance of Logger for Controller</span>
    <span>private</span> <span>static</span> <span>final</span> <span>Logger</span> log <span>=</span> <span>LoggerFactory</span><span>.</span><span>getLogger</span><span>(</span><span>ELKController</span><span>.</span><span>class</span><span>)</span><span>;</span>

    <span>private</span> <span>final</span> <span>ELKService</span> service<span>;</span>

    <span>private</span> <span>final</span> <span>RestService</span> restService<span>;</span>

    <span>public</span> <span>ELKController</span><span>(</span><span>ELKService</span> service<span>,</span> <span>RestService</span> restService<span>)</span> <span>{</span>
        <span>this</span><span>.</span>service <span>=</span> service<span>;</span>
        <span>this</span><span>.</span>restService <span>=</span> restService<span>;</span>
    <span>}</span>

    <span>@GetMapping</span><span>(</span>value <span>=</span> <span>&#34;/hello&#34;</span><span>)</span>
    <span>public</span> <span>String</span> <span>helloWorld</span><span>(</span><span>)</span> <span>{</span>
        log<span>.</span><span>info</span><span>(</span><span>&#34;Inside Hello World Function&#34;</span><span>)</span><span>;</span>
        <span>String</span> response <span>=</span> <span>&#34;Hello World! &#34;</span> <span>+</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>;</span>
        log<span>.</span><span>info</span><span>(</span><span>&#34;Response =&gt; {}&#34;</span><span>,</span>response<span>)</span><span>;</span>
        <span>return</span> response<span>;</span>
    <span>}</span>

    <span>@GetMapping</span><span>(</span>value <span>=</span> <span>&#34;/Food-Details&#34;</span><span>)</span>
    <span>public</span> <span>JSONArray</span> <span>foodDetails</span><span>(</span><span>)</span> <span>{</span>
        log<span>.</span><span>info</span><span>(</span><span>&#34;Inside Food Detail Function&#34;</span><span>)</span><span>;</span>
        <span>return</span> service<span>.</span><span>getAllFoodDetails</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>Here you are exposing two endpoints which are: </p><ol start="1"><li><code><span>/</span>api<span>/</span>hello</code> — It returns the &#34;Hello World!&#34; message with the current timestamp.</li><li><code><span>/</span>api<span>/</span>Food<span>-</span>Details</code> — It gives the details of some food data, which is stored inside a JSON file.</li></ol><p>The <code>ELKService</code> class for that is as follows:</p><pre><code><span>package</span> <span>com<span>.</span>demo<span>.</span></span>ELK<span>.</span>services<span>;</span>

<span>import</span> <span>org<span>.</span>json<span>.</span>simple<span>.</span></span><span>JSONArray</span><span>;</span>
<span>import</span> <span>org<span>.</span>json<span>.</span>simple<span>.</span></span><span>JSONObject</span><span>;</span>
<span>import</span> <span>org<span>.</span>json<span>.</span>simple<span>.</span>parser<span>.</span></span><span>JSONParser</span><span>;</span>
<span>import</span> <span>org<span>.</span>json<span>.</span>simple<span>.</span>parser<span>.</span></span><span>ParseException</span><span>;</span>
<span>import</span> <span>org<span>.</span>slf4j<span>.</span></span><span>Logger</span><span>;</span>
<span>import</span> <span>org<span>.</span>slf4j<span>.</span></span><span>LoggerFactory</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>stereotype<span>.</span></span><span>Service</span><span>;</span>

<span>import</span> <span>java<span>.</span>io<span>.</span></span><span>FileReader</span><span>;</span>
<span>import</span> <span>java<span>.</span>io<span>.</span></span><span>IOException</span><span>;</span>
<span>import</span> <span>java<span>.</span>nio<span>.</span>charset<span>.</span></span><span>StandardCharsets</span><span>;</span>

<span>@Service</span>
<span>public</span> <span>class</span> <span>ELKService</span> <span>{</span>

    <span>// Initializing instance of Logger for Service</span>
    <span>private</span> <span>static</span> <span>final</span> <span>Logger</span> log <span>=</span> <span>LoggerFactory</span><span>.</span><span>getLogger</span><span>(</span><span>ELKService</span><span>.</span><span>class</span><span>)</span><span>;</span>

    <span>public</span> <span>JSONArray</span> <span>getAllFoodDetails</span><span>(</span><span>)</span><span>{</span>
        log<span>.</span><span>info</span><span>(</span><span>&#34;Fetching ALL food details...&#34;</span><span>)</span><span>;</span>
        <span>JSONArray</span> foodDetail <span>=</span> <span>new</span> <span>JSONArray</span><span>(</span><span>)</span><span>;</span>
        <span>try</span> <span>{</span>
            <span>JSONParser</span> parser <span>=</span> <span>new</span> <span>JSONParser</span><span>(</span><span>)</span><span>;</span>
            <span>Object</span> obj <span>=</span> parser<span>.</span><span>parse</span><span>(</span><span>new</span> <span>FileReader</span><span>(</span><span>&#34;example.json&#34;</span><span>,</span> <span>StandardCharsets</span><span>.</span>UTF_8<span>)</span><span>)</span><span>;</span>
            <span>JSONObject</span> jsonObject <span>=</span> <span>(</span><span>JSONObject</span><span>)</span> obj<span>;</span>
            foodDetail <span>=</span> <span>(</span><span>JSONArray</span><span>)</span> jsonObject<span>.</span><span>get</span><span>(</span><span>&#34;data&#34;</span><span>)</span><span>;</span>

        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> <span>|</span> <span>ParseException</span> e<span>)</span> <span>{</span>
            log<span>.</span><span>error</span><span>(</span><span>&#34;Error occurred in reading JSON file&#34;</span><span>)</span><span>;</span>
            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> foodDetail<span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>And following is the content inside the <code>example<span>.</span>json</code> file which you are reading:</p><pre><code><span>{</span>
    <span>&#34;data&#34;</span><span>:</span> <span>[</span>
    
        <span>{</span>
            <span>&#34;id&#34;</span><span>:</span> <span>0</span><span>,</span>
            <span>&#34;productName&#34;</span><span>:</span> <span>&#34;Fresh Avocados&#34;</span><span>,</span>
            <span>&#34;image&#34;</span><span>:</span> <span>&#34;🥑&#34;</span><span>,</span>
            <span>&#34;from&#34;</span><span>:</span> <span>&#34;Spain&#34;</span><span>,</span>
            <span>&#34;nutrients&#34;</span><span>:</span> <span>&#34;Vitamin B, Vitamin K&#34;</span><span>,</span>
            <span>&#34;quantity&#34;</span><span>:</span> <span>&#34;4 🥑&#34;</span><span>,</span>
            <span>&#34;price&#34;</span><span>:</span> <span>&#34;6.50&#34;</span><span>,</span>
            <span>&#34;organic&#34;</span><span>:</span> <span>true</span><span>,</span>
            <span>&#34;description&#34;</span><span>:</span> <span>&#34;A ripe avocado yields to gentle pressure when held in the palm and squeezed. &#34;</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>&#34;id&#34;</span><span>:</span> <span>1</span><span>,</span>
            <span>&#34;productName&#34;</span><span>:</span> <span>&#34;Cheese&#34;</span><span>,</span>
            <span>&#34;image&#34;</span><span>:</span> <span>&#34;🧀&#34;</span><span>,</span>
            <span>&#34;from&#34;</span><span>:</span> <span>&#34;Portugal&#34;</span><span>,</span>
            <span>&#34;nutrients&#34;</span><span>:</span> <span>&#34;Vitamin A, Calcium&#34;</span><span>,</span>
            <span>&#34;quantity&#34;</span><span>:</span> <span>&#34;250g&#34;</span><span>,</span>
            <span>&#34;price&#34;</span><span>:</span> <span>&#34;5.00&#34;</span><span>,</span>
            <span>&#34;organic&#34;</span><span>:</span> <span>false</span><span>,</span>
            <span>&#34;description&#34;</span><span>:</span> <span>&#34;Creamy and distinct in flavor, goat cheese is a dairy product enjoyed around the world.&#34;</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>&#34;id&#34;</span><span>:</span> <span>2</span><span>,</span>
            <span>&#34;productName&#34;</span><span>:</span> <span>&#34;Broccoli&#34;</span><span>,</span>
            <span>&#34;image&#34;</span><span>:</span> <span>&#34;🥦&#34;</span><span>,</span>
            <span>&#34;from&#34;</span><span>:</span> <span>&#34;Portugal&#34;</span><span>,</span>
            <span>&#34;nutrients&#34;</span><span>:</span> <span>&#34;Vitamin C, Vitamin K&#34;</span><span>,</span>
            <span>&#34;quantity&#34;</span><span>:</span> <span>&#34;3 🥦&#34;</span><span>,</span>
            <span>&#34;price&#34;</span><span>:</span> <span>&#34;5.50&#34;</span><span>,</span>
            <span>&#34;organic&#34;</span><span>:</span> <span>true</span><span>,</span>
            <span>&#34;description&#34;</span><span>:</span> <span>&#34;Broccoli is known to be a hearty and tasty vegetable which is rich in dozens of nutrients.&#34;</span>
        <span>}</span>
    <span>]</span>
<span>}</span></code></pre><h3 id="Creating-Logback-Spring-xml">Creating Logback-Spring.xml</h3><p>Next, you also have to configure the <code>logback<span>-</span>spring<span>.</span>xml</code> file inside the <code>resources</code> folder of your project. It will be responsible for printing the logs in the console and to a log file. Logstash will use this log file to feed the data to Elasticsearch.</p><pre><code><span>&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span><span><span>&lt;</span>configuration</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>appender</span> <span>name</span><span><span>=</span><span>&#34;</span>STDOUT<span>&#34;</span></span> <span>class</span><span><span>=</span><span>&#34;</span>ch.qos.logback.core.ConsoleAppender<span>&#34;</span></span><span>&gt;</span></span>
        <span><span><span>&lt;</span>encoder</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>pattern</span><span>&gt;</span></span> %d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n <span><span><span>&lt;/</span>pattern</span><span>&gt;</span></span>
        <span><span><span>&lt;/</span>encoder</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>appender</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>appender</span> <span>name</span><span><span>=</span><span>&#34;</span>SAVE-TO-FILE<span>&#34;</span></span> <span>class</span><span><span>=</span><span>&#34;</span>ch.qos.logback.core.FileAppender<span>&#34;</span></span><span>&gt;</span></span>
        <span><span><span>&lt;</span>file</span><span>&gt;</span></span>logs/application.log<span><span><span>&lt;/</span>file</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>encoder</span> <span>class</span><span><span>=</span><span>&#34;</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span>&#34;</span></span><span>&gt;</span></span>
            <span><span><span>&lt;</span>Pattern</span><span>&gt;</span></span> %d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n <span><span><span>&lt;/</span>Pattern</span><span>&gt;</span></span>
        <span><span><span>&lt;/</span>encoder</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>logger</span> <span>name</span><span><span>=</span><span>&#34;</span>com.demo.ELK<span>&#34;</span></span> <span>additivity</span><span><span>=</span><span>&#34;</span>false<span>&#34;</span></span> <span>level</span><span><span>=</span><span>&#34;</span>info<span>&#34;</span></span><span>&gt;</span></span>
        <span><span><span>&lt;</span>appender-ref</span> <span>ref</span><span><span>=</span><span>&#34;</span>SAVE-TO-FILE<span>&#34;</span></span> <span>/&gt;</span></span>
        <span><span><span>&lt;</span>appender-ref</span> <span>ref</span><span><span>=</span><span>&#34;</span>STDOUT<span>&#34;</span></span> <span>/&gt;</span></span>
    <span><span><span>&lt;/</span>logger</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>root</span> <span>level</span><span><span>=</span><span>&#34;</span>INFO<span>&#34;</span></span><span>&gt;</span></span>
        <span><span><span>&lt;</span>appender-ref</span> <span>ref</span><span><span>=</span><span>&#34;</span>STDOUT<span>&#34;</span></span> <span>/&gt;</span></span>
    <span><span><span>&lt;/</span>root</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>configuration</span><span>&gt;</span></span></code></pre><blockquote><p><strong>Loggers</strong> are responsible for capturing events and passing them to the appender. <strong>Appenders</strong> (also known as Handlers in some logging frameworks) are responsible for documenting the log events to a destination.</p></blockquote><p>Here inside appenders, you have defined a custom log pattern - <code><span>%</span>d<span>{</span>dd<span>-</span><span>MM</span><span>-</span>yyyy <span>HH</span><span>:</span>mm<span>:</span>ss<span>.</span><span>SSS</span><span>}</span> <span>[</span><span>%</span>thread<span>]</span> <span>%</span><span>-</span><span>5</span>level <span>%</span>logger<span>{</span><span>36</span><span>}</span><span>.</span><span>%</span><span>M</span> <span>-</span> <span>%</span>msg<span>%</span>n</code>. Let us first understand what each of these terms means:</p><ul><li><strong>%d</strong> – Returns the time when the log message occurred.</li><li><strong>%thread</strong> – Returns the name of the thread in which the log message occurred.</li><li><strong>%-5level</strong> – Returns the logging level of the log message (ERROR, WARN, INFO, DEBUG, and TRACE).</li><li><strong>%logger{64}</strong> – Returns the package with the package and class name where the log message occurred. The number 64 inside the brackets represents the maximum length of the package and class name combined. You can change this number as per your need.</li><li><strong>%M</strong> – Returns the name of the method where the log message has occurred.</li><li><strong>%msg</strong> – Returns the actual log message.</li><li><strong>%n</strong> – Line break.</li></ul><p>You have added two appenders here, one for logging in to the console and another one to log to a file.</p><p>With that covered, let&#39;s see how you can start your Spring Boot app server using CLI:</p><ul><li>Since you are using Maven, run the <code>mvn clean install</code> command in a terminal window inside your project root directory. This creates a JAR(Java archive) file that contains a compressed version of .class files, audio files, image files, or other directories.</li><li>This JAR will be created inside the <code>target</code> folder in the root directory. Navigate to that directory and run <code>java <span>-</span>jar <span>&lt;</span><span>JAR_NAME</span><span>&gt;</span><span>.</span>jar <span>&lt;</span><span>MAIN_CLASS_NAME</span><span>&gt;</span></code>. For example - <strong>java -jar ELK-0.0.1-SNAPSHOT.jar com.demo.ELK.ElkApplication</strong></li></ul><p>This will start your Spring Boot application on the default 8080 port:</p><pre><code>  <span>.</span>   ____          _            __ _ _
 <span>/</span>\\ <span>/</span> ___<span>&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | &#39;</span>_ <span>|</span> <span>&#39;_| | &#39;</span>_ \<span>/</span> _` <span>|</span> \ \ \ \
 \\<span>/</span>  ___<span>)</span><span>|</span> <span>|</span>_<span>)</span><span>|</span> <span>|</span> <span>|</span> <span>|</span> <span>|</span> <span>||</span> <span>(</span>_<span>|</span> <span>|</span>  <span>)</span> <span>)</span> <span>)</span> <span>)</span>
  &#39;  <span>|</span>____<span>|</span> <span>.</span>__<span>|</span>_<span>|</span> <span>|</span>_<span>|</span>_<span>|</span> <span>|</span>_\__<span>,</span> <span>|</span> <span>/</span> <span>/</span> <span><span>/</span><span> </span><span>/</span></span>
 <span>===</span><span>===</span><span>===</span><span>|</span>_<span>|=</span><span>===</span><span>===</span><span>===</span><span>===</span><span>=</span><span>|</span>___<span>/=</span><span>/</span>_<span>/</span>_<span>/</span>_<span>/</span>
 <span>:</span><span>:</span> Spring Boot <span>:</span><span>:</span>                <span>(</span>v2<span>.</span><span>5.4</span><span>)</span>


<span>05</span><span>-</span><span>09</span><span>-</span><span>2021</span> <span>11</span><span>:</span><span>57</span><span>:</span><span>16.090</span> <span>[</span>main<span>]</span> <span>INFO</span>  com<span>.</span>demo<span>.</span><span>ELK</span><span>.</span>ElkApplication<span>.</span>logStarting <span>-</span> Starting ElkApplication using Java <span>11.0</span><span>.1</span> on Vulcan <span>with</span> <span>PID</span> <span>18048</span> <span>(</span><span>D</span><span>:</span>\Git Projects\<span>ELK</span> Logs Monitoring\<span>ELK</span>\target\classes started by ApoorvTyagi <span>in</span> <span>D</span><span>:</span>\Git Projects\<span>ELK</span> Logs Monitoring\<span>ELK</span><span>)</span>
<span>05</span><span>-</span><span>09</span><span>-</span><span>2021</span> <span>11</span><span>:</span><span>57</span><span>:</span><span>16.098</span> <span>[</span>main<span>]</span> <span>INFO</span>  com<span>.</span>demo<span>.</span><span>ELK</span><span>.</span>ElkApplication<span>.</span>logStartupProfileInfo <span>-</span> No active profile set<span>,</span> falling back to <span>default</span> profiles<span>:</span> <span>default</span>
<span>05</span><span>-</span><span>09</span><span>-</span><span>2021</span> <span>11</span><span>:</span><span>57</span><span>:</span><span>17.573</span> <span>[</span>main<span>]</span> <span>INFO</span>  o<span>.</span>s<span>.</span>b<span>.</span>w<span>.</span>e<span>.</span>tomcat<span>.</span>TomcatWebServer<span>.</span>initialize <span>-</span> Tomcat initialized <span>with</span> <span>port</span><span>(</span>s<span>)</span><span>:</span> <span>8080</span> <span>(</span>http<span>)</span>
<span>05</span><span>-</span><span>09</span><span>-</span><span>2021</span> <span>11</span><span>:</span><span>57</span><span>:</span><span>17.589</span> <span>[</span>main<span>]</span> <span>INFO</span>  o<span>.</span>a<span>.</span>coyote<span>.</span>http11<span>.</span>Http11NioProtocol<span>.</span>log <span>-</span> Initializing ProtocolHandler <span>[</span><span>&#34;http-nio-8080&#34;</span><span>]</span>
<span>05</span><span>-</span><span>09</span><span>-</span><span>2021</span> <span>11</span><span>:</span><span>57</span><span>:</span><span>17.589</span> <span>[</span>main<span>]</span> <span>INFO</span>  o<span>.</span>a<span>.</span>catalina<span>.</span>core<span>.</span>StandardService<span>.</span>log <span>-</span> Starting service <span>[</span>Tomcat<span>]</span>
<span>05</span><span>-</span><span>09</span><span>-</span><span>2021</span> <span>11</span><span>:</span><span>57</span><span>:</span><span>17.589</span> <span>[</span>main<span>]</span> <span>INFO</span>  o<span>.</span>a<span>.</span>catalina<span>.</span>core<span>.</span>StandardEngine<span>.</span>log <span>-</span> Starting Servlet engine<span>:</span> <span>[</span>Apache Tomcat<span>/</span><span>9.0</span><span>.50</span><span>]</span>
<span>05</span><span>-</span><span>09</span><span>-</span><span>2021</span> <span>11</span><span>:</span><span>57</span><span>:</span><span>17.679</span> <span>[</span>main<span>]</span> <span>INFO</span>  o<span>.</span>a<span>.</span>c<span>.</span>c<span>.</span><span>C</span><span>.</span><span>[</span>Tomcat<span>]</span><span>.</span><span>[</span>localhost<span>]</span><span>.</span><span>[</span><span>/</span><span>]</span><span>.</span>log <span>-</span> Initializing Spring embedded WebApplicationContext
<span>05</span><span>-</span><span>09</span><span>-</span><span>2021</span> <span>11</span><span>:</span><span>57</span><span>:</span><span>17.679</span> <span>[</span>main<span>]</span> <span>INFO</span>  o<span>.</span>s<span>.</span>b<span>.</span>w<span>.</span>s<span>.</span>c<span>.</span>ServletWebServerApplicationContext<span>.</span>prepareWebApplicationContext <span>-</span> Root WebApplicationContext<span>:</span> initialization completed <span>in</span> <span>1533</span> ms
<span>05</span><span>-</span><span>09</span><span>-</span><span>2021</span> <span>11</span><span>:</span><span>57</span><span>:</span><span>18.143</span> <span>[</span>main<span>]</span> <span>INFO</span>  o<span>.</span>a<span>.</span>coyote<span>.</span>http11<span>.</span>Http11NioProtocol<span>.</span>log <span>-</span> Starting ProtocolHandler <span>[</span><span>&#34;http-nio-8080&#34;</span><span>]</span>
<span>05</span><span>-</span><span>09</span><span>-</span><span>2021</span> <span>11</span><span>:</span><span>57</span><span>:</span><span>18.321</span> <span>[</span>main<span>]</span> <span>INFO</span>  o<span>.</span>s<span>.</span>b<span>.</span>w<span>.</span>e<span>.</span>tomcat<span>.</span>TomcatWebServer<span>.</span>start <span>-</span> Tomcat started on <span>port</span><span>(</span>s<span>)</span><span>:</span> <span>8080</span> <span>(</span>http<span>)</span> <span>with</span> context path <span>&#39;&#39;</span>
<span>05</span><span>-</span><span>09</span><span>-</span><span>2021</span> <span>11</span><span>:</span><span>57</span><span>:</span><span>18.329</span> <span>[</span>main<span>]</span> <span>INFO</span>  com<span>.</span>demo<span>.</span><span>ELK</span><span>.</span>ElkApplication<span>.</span>logStarted <span>-</span> Started ElkApplication <span>in</span> <span>3.131</span> <span>seconds</span> <span>(</span><span>JVM</span> running <span>for</span> <span>3.654</span><span>)</span></code></pre><p>In case you are using an IDE like IntelliJ IDEA, you can run the Spring Boot application by following these instructions:</p><ul><li>Click on <code>Add Configuration</code> from the top menu bar</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2VWREZTi4rbVfGvv2varl/f4bcec85847f6b47b7daacbad03296e5/elk_03.png" alt="IntelliJ_Start"/></p><ul><li>A new dialog box will open, click on <code>Add <span>new</span> <span>run</span> configurations</code> and select <code>Maven</code> from the dropdown</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/gAXnX1CalajGsuEZnNi2n/a45ea122ea20e219d458b9ad2ea13597/elk_04.png" alt="Intellij_2"/></p><ul><li>Give your run configuration a name. The working directory will automatically get picked. You just have to put the command <code>spring<span>-</span>boot<span>:</span>run</code> inside the command line and then click Apply and OK</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6MFpFMhOUDNL4O3CB3ntcL/ed25b8a5c5a584767897ce3ea81bcba5/elk_05.png" alt="IntelliJ_3"/></p><p>Now run the application, and the next thing you have to do is to hit the endpoints via the Postman app to generate the response and logs:</p><ul><li>GET: <code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>8080</span><span>/</span>api<span>/</span>get<span>/</span>hello</code></li></ul><pre><code>Hello World<span>!</span> Tue Aug <span>10</span> <span>23</span><span>:</span><span>22</span><span>:</span><span>01</span> <span>IST</span> <span>2021</span></code></pre><ul><li>GET: <code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>8080</span><span>/</span>api<span>/</span>get<span>/</span>Food<span>-</span>Details</code></li></ul><pre><code><span>[</span>
    <span>{</span>
        <span>&#34;image&#34;</span><span>:</span> <span>&#34;🥑&#34;</span><span>,</span>
        <span>&#34;quantity&#34;</span><span>:</span> <span>&#34;4 🥑&#34;</span><span>,</span>
        <span>&#34;price&#34;</span><span>:</span> <span>&#34;6.50&#34;</span><span>,</span>
        <span>&#34;description&#34;</span><span>:</span> <span>&#34;A ripe avocado yields to gentle pressure when held in the palm and squeezed. &#34;</span><span>,</span>
        <span>&#34;from&#34;</span><span>:</span> <span>&#34;Spain&#34;</span><span>,</span>
        <span>&#34;id&#34;</span><span>:</span> <span>0</span><span>,</span>
        <span>&#34;productName&#34;</span><span>:</span> <span>&#34;Fresh Avocados&#34;</span><span>,</span>
        <span>&#34;organic&#34;</span><span>:</span> <span>true</span><span>,</span>
        <span>&#34;nutrients&#34;</span><span>:</span> <span>&#34;Vitamin B, Vitamin K&#34;</span>
    <span>}</span><span>,</span>
    <span>{</span>
        <span>&#34;image&#34;</span><span>:</span> <span>&#34;🧀&#34;</span><span>,</span>
        <span>&#34;quantity&#34;</span><span>:</span> <span>&#34;250g&#34;</span><span>,</span>
        <span>&#34;price&#34;</span><span>:</span> <span>&#34;5.00&#34;</span><span>,</span>
        <span>&#34;description&#34;</span><span>:</span> <span>&#34;Creamy and distinct in flavor, goat cheese is a dairy product enjoyed around the world.&#34;</span><span>,</span>
        <span>&#34;from&#34;</span><span>:</span> <span>&#34;Portugal&#34;</span><span>,</span>
        <span>&#34;id&#34;</span><span>:</span> <span>1</span><span>,</span>
        <span>&#34;productName&#34;</span><span>:</span> <span>&#34;Cheese&#34;</span><span>,</span>
        <span>&#34;organic&#34;</span><span>:</span> <span>false</span><span>,</span>
        <span>&#34;nutrients&#34;</span><span>:</span> <span>&#34;Vitamin A, Calcium&#34;</span>
    <span>}</span><span>,</span>
    <span>{</span>
        <span>&#34;image&#34;</span><span>:</span> <span>&#34;🥦&#34;</span><span>,</span>
        <span>&#34;quantity&#34;</span><span>:</span> <span>&#34;3 🥦&#34;</span><span>,</span>
        <span>&#34;price&#34;</span><span>:</span> <span>&#34;5.50&#34;</span><span>,</span>
        <span>&#34;description&#34;</span><span>:</span> <span>&#34;Broccoli is known to be a hearty and tasty vegetable which is rich in dozens of nutrients.&#34;</span><span>,</span>
        <span>&#34;from&#34;</span><span>:</span> <span>&#34;Portugal&#34;</span><span>,</span>
        <span>&#34;id&#34;</span><span>:</span> <span>2</span><span>,</span>
        <span>&#34;productName&#34;</span><span>:</span> <span>&#34;Broccoli&#34;</span><span>,</span>
        <span>&#34;organic&#34;</span><span>:</span> <span>true</span><span>,</span>
        <span>&#34;nutrients&#34;</span><span>:</span> <span>&#34;Vitamin C, Vitamin K&#34;</span>
    <span>}</span>
<span>]</span></code></pre><p>If you check your IDE console, you can see the logs being printed inside it:</p><ul><li><strong>Console Logs</strong></li></ul><pre><code><span>10</span><span>-</span><span>08</span><span>-</span><span>2021</span> <span>23</span><span>:</span><span>22</span><span>:</span><span>01.368</span> <span>[</span>http<span>-</span>nio<span>-</span><span>8080</span><span>-</span>exec<span>-</span><span>6</span><span>]</span> <span>INFO</span>  c<span>.</span>demo<span>.</span><span>ELK</span><span>.</span>controller<span>.</span>ELKController<span>.</span>helloWorld <span>-</span> Inside Hello World Function
<span>10</span><span>-</span><span>08</span><span>-</span><span>2021</span> <span>23</span><span>:</span><span>22</span><span>:</span><span>01.376</span> <span>[</span>http<span>-</span>nio<span>-</span><span>8080</span><span>-</span>exec<span>-</span><span>6</span><span>]</span> <span>INFO</span>  c<span>.</span>demo<span>.</span><span>ELK</span><span>.</span>controller<span>.</span>ELKController<span>.</span>helloWorld <span>-</span> <span>Response</span> <span>=&gt;</span> Hello World<span>!</span> Sun Aug <span>29</span> <span>09</span><span>:</span><span>34</span><span>:</span><span>56</span> <span>IST</span> <span>2021</span>
<span>10</span><span>-</span><span>08</span><span>-</span><span>2021</span> <span>23</span><span>:</span><span>22</span><span>:</span><span>03.955</span> <span>[</span>http<span>-</span>nio<span>-</span><span>8080</span><span>-</span>exec<span>-</span><span>7</span><span>]</span> <span>INFO</span>  c<span>.</span>demo<span>.</span><span>ELK</span><span>.</span>controller<span>.</span>ELKController<span>.</span>foodDetails <span>-</span> Inside Food Detail Function
<span>10</span><span>-</span><span>08</span><span>-</span><span>2021</span> <span>23</span><span>:</span><span>22</span><span>:</span><span>03.955</span> <span>[</span>http<span>-</span>nio<span>-</span><span>8080</span><span>-</span>exec<span>-</span><span>7</span><span>]</span> <span>INFO</span>  com<span>.</span>demo<span>.</span><span>ELK</span><span>.</span>services<span>.</span>ELKService<span>.</span>getAllFoodDetails <span>-</span> Fetching <span>ALL</span> food details<span>...</span></code></pre><p>Also, a new folder called <code>logs</code> is created inside the project root directory as specified in the <code>logback<span>-</span>spring<span>.</span>xml</code>. Navigate inside this folder, and you will have your <code>application<span>.</span>log</code> file containing all the logs generated after hitting those two API endpoints:</p><ul><li><strong>File Logs</strong></li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4jojUsThftoW86uIMMzW0y/9043727cb170eb1eb8ecd42cbdf02334/elk_06.png" alt="File_Logs_1"/></p><h2 id="Integrating-Logstash-Pipeline">Integrating Logstash Pipeline</h2><p>Let&#39;s go back to where you have your Logstash folder and open the <code>logstash<span>.</span>conf</code> file.</p><p>Add the following content to it:</p><pre><code>input <span>{</span>
  file <span>{</span>
    <span>type</span> <span>=&gt;</span> <span>&#34;log&#34;</span>
    <span>path</span> <span>=&gt;</span> <span>&#34;/ELK/logs/application.log&#34;</span>    # Make sure you provide the absolute path <span>of</span> the file here
  <span>}</span>
<span>}</span>

filter <span>{</span>
  <span>if</span> <span>[</span>message<span>]</span> <span>=</span><span>~</span> <span>&#34;\tat&#34;</span> <span>{</span>
    grok <span>{</span>
      <span>match</span> <span>=&gt;</span> <span>[</span><span>&#34;message&#34;</span><span>,</span> <span>&#34;^(\tat)&#34;</span><span>]</span>
      <span>add_tag</span> <span>=&gt;</span> <span>[</span><span>&#34;stacktrace&#34;</span><span>]</span>
    <span>}</span>
  <span>}</span>
 
<span>}</span>

output <span>{</span>
  stdout <span>{</span>
    <span>codec</span> <span>=&gt;</span> rubydebug
  <span>}</span>
 
  elasticsearch <span>{</span>
    <span>hosts</span> <span>=&gt;</span> <span>[</span><span>&#34;localhost:9200&#34;</span><span>]</span>
  <span>}</span>
<span>}</span></code></pre><p><strong>In the input</strong>, you have specified the type and the complete path of your file. Note that the value of the <code>path</code> must be absolute and cannot be relative.</p><p><strong>In filters</strong>, wherever in the logs you will find a Tab character(\t) followed by &#34;at&#34;, you will tag that entry as a stacktrace of an error. <em>Grok</em> is simply a filter plugin useful to parse and apply queries to unstructured data in Logstash.</p><p><strong>In the output</strong>, you have defined a response that prints to the STDOUT of the console running Logstash using output codecs.</p><p>According to the <a href="https://www.elastic.co/guide/en/logstash/current/plugins-outputs-file.html" target="_blank" rel="noreferrer noopener">official docs</a>:</p><blockquote><p>Output codecs are a convenient method for encoding your data before it leaves the output without needing a separate filter in your Logstash pipeline. Here, <code>rubydebug</code> outputs event data using the ruby &#34;awesome_print&#34; library. This is the default codec for stdout.</p></blockquote><p>And finally, you have defined the <strong>output target</strong>  where these logs have to be sent from logstash, that is, Elasticsearch running locally on port 9200.</p><p>Hit the API endpoints again to generate the logs:</p><ol start="1"><li><code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>8080</span><span>/</span>api<span>/</span>get<span>/</span>hello</code></li><li><code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>8080</span><span>/</span>api<span>/</span>get<span>/</span>Food<span>-</span>Details</code></li></ol><p>This time you can see the logs printing in the logstash console as well. It means Logstash is successfully able to pick the Logs generated inside the <code>application<span>.</span>log</code> file: </p><pre><code><span>{</span>
    <span>&#34;@timestamp&#34;</span> <span>=</span><span>&gt;</span> <span>2021</span>-09-05T06:34:11.977Z,
       <span>&#34;message&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;29-08-2021 09:34:56.368 [http-nio-8080-exec-6] INFO  c.demo.ELK.controller.ELKController.helloWorld - Inside Hello World Function<span title="\r">\r</span>&#34;</span>,
          <span>&#34;type&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;log&#34;</span>,
      <span>&#34;@version&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;1&#34;</span>,
          <span>&#34;host&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;Vulcan&#34;</span>,
          <span>&#34;path&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;D:/Git Projects/ELK Logs Monitoring/ELK/logs/application.log&#34;</span>
<span>}</span>
<span>{</span>
    <span>&#34;@timestamp&#34;</span> <span>=</span><span>&gt;</span> <span>2021</span>-09-05T06:34:11.977Z,
       <span>&#34;message&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;29-08-2021 09:34:56.376 [http-nio-8080-exec-6] INFO  c.demo.ELK.controller.ELKController.helloWorld - Response =&gt; Hello World! Sun Aug 29 09:34:56 IST 2021<span title="\r">\r</span>&#34;</span>,
          <span>&#34;type&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;log&#34;</span>,
      <span>&#34;@version&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;1&#34;</span>,
          <span>&#34;host&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;Vulcan&#34;</span>,
          <span>&#34;path&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;D:/Git Projects/ELK Logs Monitoring/ELK/logs/application.log&#34;</span>
<span>}</span>
<span>{</span>
    <span>&#34;@timestamp&#34;</span> <span>=</span><span>&gt;</span> <span>2021</span>-09-05T06:34:11.977Z,
       <span>&#34;message&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;28-08-2021 20:33:24.598 [http-nio-8080-exec-1] INFO  c.demo.ELK.controller.ELKController.foodDetails - Inside Food Detail Function<span title="\r">\r</span>&#34;</span>,
          <span>&#34;type&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;log&#34;</span>,
      <span>&#34;@version&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;1&#34;</span>,
          <span>&#34;host&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;Vulcan&#34;</span>,
          <span>&#34;path&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;D:/Git Projects/ELK Logs Monitoring/ELK/logs/application.log&#34;</span>
<span>}</span>
<span>{</span>
    <span>&#34;@timestamp&#34;</span> <span>=</span><span>&gt;</span> <span>2021</span>-09-05T06:34:11.977Z,
       <span>&#34;message&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;28-08-2021 20:33:24.600 [http-nio-8080-exec-1] INFO  com.demo.ELK.services.ELKService.getAllFoodDetails - Fetching ALL food details...<span title="\r">\r</span>&#34;</span>,
          <span>&#34;type&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;log&#34;</span>,
      <span>&#34;@version&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;1&#34;</span>,
          <span>&#34;host&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;Vulcan&#34;</span>,
          <span>&#34;path&#34;</span> <span>=</span><span>&gt;</span> <span>&#34;D:/Git Projects/ELK Logs Monitoring/ELK/logs/application.log&#34;</span>
<span>}</span></code></pre><h3 id="Creating-Indexes-and-Viewing-Logs-in-Kibana">Creating Indexes and Viewing Logs in Kibana</h3><p>To access data from Elasticsearch, Kibana requires index patterns. As an analogy, in kibana, indexes are like the tables of a SQL database where you can store the data. Therefore, you must create an index pattern first to explore your data.</p><p>But how do you know what index to create?</p><p>For this, navigate to <code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>9200</span><span>/</span>_cat<span>/</span>indices</code>; it will display all the indexes that have ever been created inside elasticsearch. Here you will see an index name starting with &#34;logstash-&#34;. This is the index that has been created by Logstash.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4XTKYRUo8MtA57PcHZipQn/cc4b8667e6ea32b9696292b21a8b4f71/elk_07.png" alt="Indexes_Half"/></p><p>Next, go to <code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>5601</span><span>/</span>app<span>/</span>management<span>/</span>kibana<span>/</span>indexPatterns</code> and click on <strong>create index pattern</strong> on the top right.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6Tfx0m2k17VGJAdcWa1f8c/78e7c84c9f5082261de82a97b3c2641e/elk_08.png" alt="Create_Index"/></p><p>Type the index name as <code>logstash<span>-</span><span>*</span></code> and then click on next.</p><p>Optionally, in the next step, you can pick a field for filtering the data. You can choose <code>@timestamp</code> and then click on <strong>Create index pattern</strong>.</p><p>After this, head on to the <code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>5601</span><span>/</span>app<span>/</span>discover</code>.</p><p>Select the index from the filters that you just created, and you&#39;ll be able to see and analyze the logs.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6NZ3memL5i50CMouUEJOm4/da541dcbd31e093f0e69da9bf95dac62/elk_09.png" alt="Kibana_Logs_1"/></p><blockquote><p>If you don&#39;t see data in Kibana, try changing the time filter to a larger range. By default, Kibana shows data for the last 15 minutes.</p></blockquote><p>Clicking and expanding any one particular Log data and then selecting JSON will show the response in easier to read JSON format:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/wZYP9Z6aoBpOTujAHC2MM/6f8cce8b1094fa3d15e109eb604558d9/elk_10.png" alt="Expand_Logs.png"/></p><p>Here&#39;s how you can integrate the ELK stack with your Spring Boot app to collect, process, and visualize logs at a centralized place.</p><h2 id="Introducing-Beats">Introducing Beats</h2><p>Until now, you have seen how to use the ELK stack for monitoring Spring Boot logs. Here, <strong>Logstash was reading log files</strong>.</p><p>Now, suppose you have to read data from log files from multiple file servers. </p><p>How should you approach this?</p><p>One simple option is adding Logstash on all the servers and passing the data to Elasticsearch. </p><p>But there is one problem, <strong>Logstash consumes a lot of resources</strong>. This can cause performance issues for high-traffic deployments servers. So it is not the best solution to use Logstash on all file servers.</p><p>As a solution to this, <strong>Beats</strong> were introduced. </p><blockquote><p><a href="https://www.elastic.co/guide/en/beats/libbeat/current/beats-reference.html" target="_blank" rel="noreferrer noopener">Beats</a> are open source data shippers that can be installed as agents on servers to send data directly to Elasticsearch or via Logstash, where it can be further processed and enhanced.</p></blockquote><p>There are various Beats for different purposes:</p><ul><li><strong>Filebeat</strong>: For file monitoring</li><li><strong>Metricbeat</strong>: For metrics monitoring</li><li><strong>Packetbeat</strong>: For network data monitoring</li><li><strong>Heartbeat</strong>: For uptime monitoring</li></ul><p>You will be specifically looking at Filebeat for this tutorial.</p><h3 id="When-to-Use-Filebeat-and-When-to-Use-Logstash-">When to Use Filebeat and When to Use Logstash?</h3><p>Filebeat is considered one of the best log shippers as it is lightweight, supports SSL &amp; TLS encryption, and is extremely reliable. However, it cannot transform the logs into easy-to-analyze structured data. That&#39;s the part performed by Logstash.</p><p>So, if you require advanced log enhancement like filtering out unwanted bits of data or transforming data to another format, you have to go for Logstash.</p><p>But if you are only interested in the timestamp and message content, you can choose Filebeat to act as your log aggregator, especially in a distributed environment. </p><p>Filebeat can either ship data directly to Elasticsearch or first to Logstash, and then Logstash can ingest this data to Elasticsearch. If you want to use the benefit of Filebeat and Logstash, you can very well go with the second approach.</p><h3 id="Configuring-Filebeat">Configuring Filebeat</h3><p>You can configure Filebeat similar to how you have done for other ELK stacks.</p><p>Just extract the zip file after downloading it from the <a href="https://www.elastic.co/downloads/beats/filebeat" target="_blank" rel="noreferrer noopener">official Filebeat Downloads</a>.</p><p>In Logstash, you have to modify the <code>logstash<span>.</span>conf</code> file; similarly, here, you have to do the same thing in <code>filebeat<span>.</span>yml</code>.</p><blockquote><p>To run Filebeat, use the command <code>filebeat<span>.</span>exe <span>-</span>c filebeat<span>.</span>yml</code>.</p></blockquote><p>Let&#39;s now look at how you can incorporate it with your already existing Spring Boot project.</p><h3 id="Integrating-Filebeat-with-Spring-Boot">Integrating Filebeat with Spring Boot</h3><p>Open filebeat.yml and add the following content:</p><pre><code>filebeat<span>.</span>inputs<span>:</span>
  <span>-</span> type<span>:</span> log
    enabled<span>:</span> <span>true</span>
    paths<span>:</span>
        <span>-</span> <span>/</span><span>ELK</span><span>/</span>logs<span>/</span>application<span>.</span>log  # Make sure to provide the absolute path <span>of</span> the file

output<span>.</span>elasticsearch<span>:</span>
  hosts<span>:</span> <span>[</span><span>&#34;localhost:9200&#34;</span><span>]</span>
  protocol<span>:</span> <span>&#34;http&#34;</span></code></pre><p><strong>In the input</strong>, you have to specify the complete path of the log file from where Filebeat will read the data. </p><p><strong>In the output</strong>, you have to define the hosts as the Elasticsearch and the port on which it is configured to listen. The protocol takes either HTTP or HTTPS as one of its values. It specifies where Elasticsearch is reachable. In this case, it is <strong>HTTP</strong>.</p><p>Now run the file with the command <code>filebeat<span>.</span>exe <span>-</span>c filebeat<span>.</span>yml</code>.</p><p>Similar to what you have done for logstash, you need to create a filebeat index inside Kibana by getting the index name from the <a href="http://localhost:9200/_cat/indices" target="_blank" rel="noreferrer noopener">Elasticsearch indices list</a>.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6P9fymE1Qm7knKCEGw9d4n/0aa6773c0e8942b652f6903ea8be8b6a/elk_11.png" alt="Filebeat index"/></p><p>Here, you will see a new index name starting with &#34;filebeat-&#34;. This is the index that has been created by Filebeat.</p><p>Next, navigate back to the <a href="http://localhost:5601/app/management/kibana/indexPatterns" target="_blank" rel="noreferrer noopener">index pattern management</a> console in Kibana. </p><p>Click on the <code>Create index pattern</code> and type the index name as <code>filebeat<span>-</span><span>*</span></code>.</p><p>In the next step, pick a field for filtering the data. You can again pick <code>@timestamp</code> and then click on <code>Create index pattern</code>.</p><p>After this, head on to the <code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>5601</span><span>/</span>app<span>/</span>discover</code>.</p><p>Select the <code>filebeat</code> index from the filters that you just created, and you&#39;ll be able to see and analyze the logs.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6BPgSritTgGvxxh21mh7PP/25551fe01a44e68c90a422d3f9e484dd/elk_12.png" alt="FilebeatConsole"/></p><h2 id="Combining-Filebeat-with-Logstash">Combining Filebeat with Logstash</h2><p>Let&#39;s say you are using Filebeat as your log shipper, and you want to transform the data which you are getting from the log file before passing it to Elasticsearch. </p><p>Since Filebeat doesn&#39;t allow any transformation to data, therefore, in this case, you have to use Logstash along with Filebeat.</p><p>Let us see how you can do that:</p><ul><li>Change the Filebeat output to Logstash and the port on which it is enabled, instead of Elasticsearch</li></ul><pre><code>filebeat<span>.</span>inputs<span>:</span>
  <span>-</span> type<span>:</span> log
    enabled<span>:</span> <span>true</span>
    paths<span>:</span>
        <span>-</span> <span>/</span><span>ELK</span><span>/</span>logs<span>/</span>application<span>.</span>log  # Absolute path <span>of</span> the log file

 output<span>.</span>logstash<span>:</span>
    hosts<span>:</span> <span>[</span><span>&#34;localhost:5044&#34;</span><span>]</span>  # Output is now pointing to Logstash</code></pre><ul><li>Modify the Logstash&#39;s input to read data from Filebeat instead of picking it from a file</li></ul><pre><code>input <span>{</span>
      beats <span>{</span>  # Notice the input is now being taken <span>from</span> <span>&#39;Beats&#39;</span> instead <span>of</span> a <span>&#39;file&#39;</span>
        <span>type</span> <span>=&gt;</span> <span>&#34;logs&#34;</span>
        <span>port</span> <span>=&gt;</span> <span>&#34;5044&#34;</span> 
      <span>}</span>
<span>}</span>

filter <span>{</span>  # Adding the filters
  <span>if</span> <span>[</span>message<span>]</span> <span>=</span><span>~</span> <span>&#34;\tat&#34;</span> <span>{</span>
    grok <span>{</span>
      <span>match</span> <span>=&gt;</span> <span>[</span><span>&#34;message&#34;</span><span>,</span> <span>&#34;^(\tat)&#34;</span><span>]</span>
      <span>add_tag</span> <span>=&gt;</span> <span>[</span><span>&#34;stacktrace&#34;</span><span>]</span>
    <span>}</span>
  <span>}</span>

 mutate <span>{</span>
    <span>replace</span> <span>=&gt;</span> <span>{</span> <span>&#34;[host]&#34;</span> <span>=&gt;</span> <span>&#34;%{[host][name]}&#34;</span> <span>}</span> 
  <span>}</span>
<span>}</span>

output <span>{</span>  # Output pointing to Elasticsearch
  stdout <span>{</span>
    <span>codec</span> <span>=&gt;</span> rubydebug
  <span>}</span>
 
  elasticsearch <span>{</span>
    <span>hosts</span> <span>=&gt;</span> <span>[</span><span>&#34;localhost:9200&#34;</span><span>]</span>
  <span>}</span>
<span>}</span></code></pre><p>Also, note that you have to add a new plugin(<code>mutate</code>) inside the filters.</p><p>This is because when you&#39;re using Filebeat and Logstash together, Filebeat automatically adds a <code>host</code> field with the type as an object to the logs events. At the same time, Logstash adds another <code>host</code> field of its own to the log events. But this host is of the string type instead of an object.</p><p>Because of these two different types of hosts, Elaticsearch will start throwing an error. To solve this, you need to decide whether you want to have the <code>host</code> as an object or a string.</p><p>In this case, we will go with the more straightforward way to replace the type of the host coming from Filebeat with a string type.</p><p>To do this, you have to use the <code>Mutate</code> filter plugin that allows you to perform general mutations on any field. You can replace and modify fields in your log events, as shown in the configuration above.</p><h3 id="Verifying-the-Configurations">Verifying the Configurations</h3><p>The next thing you have to do is to verify if the provided configurations are correct or not. The process for that remains the same as you did earlier. The Only difference is that this time you need to run both the <code>filebeat<span>.</span>yml</code> &amp; <code>logstash<span>.</span>conf</code> together. </p><p>The complete process for that is mentioned below:</p><ul><li>Start your <code>filebeat<span>.</span>yml</code> and <code>logstash<span>.</span>conf</code> files. Also, make sure the predefined <code>logsatsh<span>-</span><span>*</span></code> index pattern is selected inside Kibana.</li><li>Next, just hit any one of the API endpoints again, and you will see the new logs coming in the Logstash console:</li></ul><pre><code><span>{</span>
    <span>&#34;@timestamp&#34;</span> <span>=&gt;</span> <span>2021</span><span>-</span><span>09</span><span>-</span><span>09</span>T16<span>:</span><span>55</span><span>:</span><span>40.112</span>Z<span>,</span>
    <span>&#34;message&#34;</span> <span>=&gt;</span> <span>&#34;09-09-2021 22:25:36.174 [http-nio-8080-exec-3] INFO  c.demo.ELK.controller.ELKController.helloWorld - Inside Hello World Function&#34;</span><span>,</span>
    <span>&#34;input&#34;</span> <span>=&gt;</span> <span>{</span>
        <span>&#34;type&#34;</span> <span>=&gt;</span> <span>&#34;log&#34;</span>
    <span>}</span><span>,</span>
    <span>&#34;type&#34;</span> <span>=&gt;</span> <span>&#34;logs&#34;</span><span>,</span>
    <span>&#34;tags&#34;</span> <span>=&gt;</span> <span>[</span>
       <span>[</span><span>0</span><span>]</span> <span>&#34;beats_input_codec_plain_applied&#34;</span>
    <span>]</span><span>,</span>
    <span>&#34;@version&#34;</span> <span>=&gt;</span> <span>&#34;1&#34;</span><span>,</span>
    <span>&#34;ecs&#34;</span> <span>=&gt;</span> <span>{</span>
        <span>&#34;version&#34;</span> <span>=&gt;</span> <span>&#34;1.8.0&#34;</span>
    <span>}</span><span>,</span>
    <span>&#34;host&#34;</span> <span>=&gt;</span> <span>&#34;Vulcan&#34;</span><span>,</span>
    <span>&#34;agent&#34;</span> <span>=&gt;</span> <span>{</span>
        <span>&#34;version&#34;</span> <span>=&gt;</span> <span>&#34;7.13.2&#34;</span><span>,</span>
        <span>&#34;name&#34;</span> <span>=&gt;</span> <span>&#34;Vulcan&#34;</span><span>,</span>
        <span>&#34;type&#34;</span> <span>=&gt;</span> <span>&#34;filebeat&#34;</span><span>,</span>
        <span>&#34;ephemeral_id&#34;</span> <span>=&gt;</span> <span>&#34;94a3a0f3-165f-4308-8333-c1afbef0e016&#34;</span><span>,</span>
        <span>&#34;hostname&#34;</span> <span>=&gt;</span> <span>&#34;Vulcan&#34;</span><span>,</span>
        <span>&#34;id&#34;</span> <span>=&gt;</span> <span>&#34;f1b9d79a-9cf0-4a51-b12f-29c41ed05f60&#34;</span>
    <span>}</span>
<span>}</span><span>,</span>
<span>{</span>
    <span>&#34;@timestamp&#34;</span> <span>=&gt;</span> <span>2021</span><span>-</span><span>09</span><span>-</span><span>09</span>T16<span>:</span><span>55</span><span>:</span><span>40.112</span>Z<span>,</span>
    <span>&#34;message&#34;</span> <span>=&gt;</span> <span>&#34;09-09-2021 22:25:36.177 [http-nio-8080-exec-3] INFO  c.demo.ELK.controller.ELKController.helloWorld - Response =&gt; Hello World! Thu Sep 09 22:25:36 IST 2021&#34;</span><span>,</span>
    <span>&#34;input&#34;</span> <span>=&gt;</span> <span>{</span>
        <span>&#34;type&#34;</span> <span>=&gt;</span> <span>&#34;log&#34;</span>
    <span>}</span><span>,</span>
    <span>&#34;type&#34;</span> <span>=&gt;</span> <span>&#34;logs&#34;</span><span>,</span>
    <span>&#34;tags&#34;</span> <span>=&gt;</span> <span>[</span>
        <span>[</span><span>0</span><span>]</span> <span>&#34;beats_input_codec_plain_applied&#34;</span>
    <span>]</span><span>,</span>
    <span>&#34;@version&#34;</span> <span>=&gt;</span> <span>&#34;1&#34;</span><span>,</span>
    <span>&#34;ecs&#34;</span> <span>=&gt;</span> <span>{</span>
        <span>&#34;version&#34;</span> <span>=&gt;</span> <span>&#34;1.8.0&#34;</span>
    <span>}</span><span>,</span>
    <span>&#34;agent&#34;</span> <span>=&gt;</span> <span>{</span>
        <span>&#34;version&#34;</span> <span>=&gt;</span> <span>&#34;7.13.2&#34;</span><span>,</span>
        <span>&#34;name&#34;</span> <span>=&gt;</span> <span>&#34;Vulcan&#34;</span><span>,</span>
        <span>&#34;type&#34;</span> <span>=&gt;</span> <span>&#34;filebeat&#34;</span><span>,</span>
        <span>&#34;hostname&#34;</span> <span>=&gt;</span> <span>&#34;Vulcan&#34;</span><span>,</span>
        <span>&#34;ephemeral_id&#34;</span> <span>=&gt;</span> <span>&#34;94a3a0f3-165f-4308-8333-c1afbef0e016&#34;</span><span>,</span>
        <span>&#34;id&#34;</span> <span>=&gt;</span> <span>&#34;f1b9d79a-9cf0-4a51-b12f-29c41ed05f60&#34;</span>
    <span>}</span><span>,</span>
    <span>&#34;host&#34;</span> <span>=&gt;</span> <span>&#34;Vulcan&#34;</span>
<span>}</span></code></pre><ul><li>Finally, navigate to the <a href="http://localhost:5601/app/discover#" target="_blank" rel="noreferrer noopener">Kibana console</a>, and you will see the logs coming under the Logstash index:</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4zsSRslO3w8pF9M7MqKCNT/00d2235fa3de83250371feabb58ae1eb/elk_13.png" alt="Combined"/></p><h2 id="Separating-Logs-in-Kibana">Separating Logs in Kibana</h2><p>In a large-scale distributed environment, there are high chances that you would have to run multiple interlinked applications. To visualize logs of all of them under a single index can sometimes become very cumbersome.</p><p>To solve this, you can simply separate the logs of each application by different indexes depending on your use cases.</p><p>For doing this, you have to differentiate between multiple log files using the property <code>file<span>.</span>type</code> inside the <code>filebeat<span>.</span>yml</code>.</p><p>Let&#39;s look at that with an example - Suppose in your application you have a service that asynchronously calls a third-party API to fetch some data.</p><p>It makes sense if you want to monitor the logs for this process in a separate index because it is independent of your application, and any failure occurring in this service should not be accounted inside the rest of the application&#39;s failure.</p><p>To achieve this, you will have to process the logs of this new service in a separate log file. So let&#39;s first add another logger and appender inside the <code>logback<span>-</span>spring<span>.</span>xml</code> file.</p><pre><code><span>&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span><span><span>&lt;</span>configuration</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>appender</span> <span>name</span><span><span>=</span><span>&#34;</span>STDOUT<span>&#34;</span></span> <span>class</span><span><span>=</span><span>&#34;</span>ch.qos.logback.core.ConsoleAppender<span>&#34;</span></span><span>&gt;</span></span>
        <span><span><span>&lt;</span>encoder</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>pattern</span><span>&gt;</span></span>%d{dd-MM-yyyy HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %logger{36}.%M - %msg%n<span><span><span>&lt;/</span>pattern</span><span>&gt;</span></span>
        <span><span><span>&lt;/</span>encoder</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>appender</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>appender</span> <span>name</span><span><span>=</span><span>&#34;</span>SAVE-TO-FILE<span>&#34;</span></span> <span>class</span><span><span>=</span><span>&#34;</span>ch.qos.logback.core.FileAppender<span>&#34;</span></span><span>&gt;</span></span>
        <span><span><span>&lt;</span>file</span><span>&gt;</span></span>logs/application.log<span><span><span>&lt;/</span>file</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>encoder</span> <span>class</span><span><span>=</span><span>&#34;</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span>&#34;</span></span><span>&gt;</span></span>
            <span><span><span>&lt;</span>Pattern</span><span>&gt;</span></span>%d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n<span><span><span>&lt;/</span>Pattern</span><span>&gt;</span></span>
        <span><span><span>&lt;/</span>encoder</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>appender</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>appender</span> <span>name</span><span><span>=</span><span>&#34;</span>OUTBOUND_LOGS<span>&#34;</span></span> <span>class</span><span><span>=</span><span>&#34;</span>ch.qos.logback.core.FileAppender<span>&#34;</span></span><span>&gt;</span></span>
        <span><span><span>&lt;</span>file</span><span>&gt;</span></span>logs/application-outbound.log<span><span><span>&lt;/</span>file</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>encoder</span> <span>class</span><span><span>=</span><span>&#34;</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span>&#34;</span></span><span>&gt;</span></span>
            <span><span><span>&lt;</span>Pattern</span><span>&gt;</span></span>%d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n<span><span><span>&lt;/</span>Pattern</span><span>&gt;</span></span>
        <span><span><span>&lt;/</span>encoder</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>appender</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>logger</span> <span>name</span><span><span>=</span><span>&#34;</span>com.demo.ELK<span>&#34;</span></span> <span>additivity</span><span><span>=</span><span>&#34;</span>false<span>&#34;</span></span> <span>level</span><span><span>=</span><span>&#34;</span>info<span>&#34;</span></span><span>&gt;</span></span>
        <span><span><span>&lt;</span>appender-ref</span> <span>ref</span><span><span>=</span><span>&#34;</span>SAVE-TO-FILE<span>&#34;</span></span> <span>/&gt;</span></span>
        <span><span><span>&lt;</span>appender-ref</span> <span>ref</span><span><span>=</span><span>&#34;</span>STDOUT<span>&#34;</span></span> <span>/&gt;</span></span>
    <span><span><span>&lt;/</span>logger</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>logger</span> <span>name</span><span><span>=</span><span>&#34;</span>outbound-logs<span>&#34;</span></span> <span>additivity</span><span><span>=</span><span>&#34;</span>false<span>&#34;</span></span> <span>level</span><span><span>=</span><span>&#34;</span>info<span>&#34;</span></span><span>&gt;</span></span>
        <span><span><span>&lt;</span>appender-ref</span> <span>ref</span><span><span>=</span><span>&#34;</span>OUTBOUND_LOGS<span>&#34;</span></span> <span>/&gt;</span></span>
        <span><span><span>&lt;</span>appender-ref</span> <span>ref</span><span><span>=</span><span>&#34;</span>STDOUT<span>&#34;</span></span> <span>/&gt;</span></span>
    <span><span><span>&lt;/</span>logger</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>root</span> <span>level</span><span><span>=</span><span>&#34;</span>INFO<span>&#34;</span></span><span>&gt;</span></span>
        <span><span><span>&lt;</span>appender-ref</span> <span>ref</span><span><span>=</span><span>&#34;</span>STDOUT<span>&#34;</span></span> <span>/&gt;</span></span>
    <span><span><span>&lt;/</span>root</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>configuration</span><span>&gt;</span></span></code></pre><p>Here you have added another appender and logger by the name <code>outbound<span>-</span>logs</code> and have specified a different file name to print your logs in.</p><p>To use this inside your application, you have to initialize the logger object like this: 
<code>Logger log <span>=</span> LoggerFactory<span>.</span><span>getLogger</span><span>(</span><span>&#34;outbound-logs&#34;</span><span>)</span></code></p><p>Now let&#39;s apply it inside one of your services:</p><pre><code><span>package</span> <span>com<span>.</span>demo<span>.</span></span>ELK<span>.</span>services<span>;</span>

<span>import</span> <span>com<span>.</span>fasterxml<span>.</span>jackson<span>.</span>databind<span>.</span></span><span>JsonNode</span><span>;</span>
<span>import</span> <span>com<span>.</span>fasterxml<span>.</span>jackson<span>.</span>databind<span>.</span></span><span>ObjectMapper</span><span>;</span>
<span>import</span> <span>org<span>.</span>slf4j<span>.</span></span><span>Logger</span><span>;</span>
<span>import</span> <span>org<span>.</span>slf4j<span>.</span></span><span>LoggerFactory</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>boot<span>.</span>web<span>.</span>client<span>.</span></span><span>RestTemplateBuilder</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>stereotype<span>.</span></span><span>Service</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>client<span>.</span></span><span>RestTemplate</span><span>;</span>

<span>@Service</span>
<span>public</span> <span>class</span> <span>RestService</span> <span>{</span>
    
    <span>// Initializing logger with new appender</span>
    <span>private</span> <span>static</span> <span>final</span> <span>Logger</span> log <span>=</span> <span>LoggerFactory</span><span>.</span><span>getLogger</span><span>(</span><span>&#34;outbound-logs&#34;</span><span>)</span><span>;</span>
    
    <span>private</span> <span>final</span> <span>RestTemplate</span> restTemplate<span>;</span>
    <span>private</span> <span>final</span> <span>String</span> BASE_URL <span>=</span> <span>&#34;https://goweather.herokuapp.com/weather/&#34;</span><span>;</span>

    <span>public</span> <span>RestService</span><span>(</span><span>RestTemplateBuilder</span> restTemplateBuilder<span>)</span> <span>{</span>
        <span>this</span><span>.</span>restTemplate <span>=</span> restTemplateBuilder<span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>JsonNode</span> <span>getPostsPlainJSON</span><span>(</span><span>String</span> city<span>)</span> <span>{</span>
        log<span>.</span><span>info</span><span>(</span><span>&#34;Getting Weather Information for {}&#34;</span><span>,</span>city<span>)</span><span>;</span>
        <span>String</span> url <span>=</span> BASE_URL <span>+</span> city<span>;</span>
        log<span>.</span><span>info</span><span>(</span><span>&#34;Final URL =&gt; {}&#34;</span><span>,</span>url<span>)</span><span>;</span>
        <span>try</span> <span>{</span>
            <span>String</span> response <span>=</span> <span>this</span><span>.</span>restTemplate<span>.</span><span>getForObject</span><span>(</span>url<span>,</span> <span>String</span><span>.</span><span>class</span><span>)</span><span>;</span>
            <span>ObjectMapper</span> mapper <span>=</span> <span>new</span> <span>ObjectMapper</span><span>(</span><span>)</span><span>;</span>
            log<span>.</span><span>info</span><span>(</span><span>&#34;Response =&gt; {}&#34;</span><span>,</span>response<span>)</span><span>;</span>
            <span>return</span> mapper<span>.</span><span>readTree</span><span>(</span>response<span>)</span><span>;</span>
        <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
            log<span>.</span><span>info</span><span>(</span><span>&#34;Error occurred in Outbound Request... =&gt; {}&#34;</span><span>,</span>e<span>.</span><span>getMessage</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> <span>null</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>Everything that you log in to this service will go to the <code>application<span>-</span>outbound<span>.</span>log</code> file.</p><p>Let&#39;s create another endpoint in your controller class to test it:</p><pre><code><span>@GetMapping</span><span>(</span>value <span>=</span> <span>&#34;/weather/{city}&#34;</span><span>)</span>
<span>public</span> <span>JsonNode</span> <span>getWeatherInformation</span><span>(</span><span>@PathVariable</span> <span>String</span> city<span>)</span><span>{</span>
   <span>return</span> restService<span>.</span><span>getPostsPlainJSON</span><span>(</span>city<span>)</span><span>;</span>
<span>}</span></code></pre><p>Finally, let&#39;s invoke it using HTTP GET method, e.g.: <code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>8080</span><span>/</span>api<span>/</span>weather<span>/</span>ohio</code></p><pre><code><span>{</span>
    <span>&#34;temperature&#34;</span><span>:</span> <span>&#34;+33 °C&#34;</span><span>,</span>
    <span>&#34;wind&#34;</span><span>:</span> <span>&#34;14 km/h&#34;</span><span>,</span>
    <span>&#34;description&#34;</span><span>:</span> <span>&#34;Partly cloudy&#34;</span><span>,</span>
    <span>&#34;forecast&#34;</span><span>:</span> <span>[</span>
        <span>{</span>
            <span>&#34;day&#34;</span><span>:</span> <span>&#34;1&#34;</span><span>,</span>
            <span>&#34;temperature&#34;</span><span>:</span> <span>&#34;+38 °C&#34;</span><span>,</span>
            <span>&#34;wind&#34;</span><span>:</span> <span>&#34;17 km/h&#34;</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>&#34;day&#34;</span><span>:</span> <span>&#34;2&#34;</span><span>,</span>
            <span>&#34;temperature&#34;</span><span>:</span> <span>&#34;37 °C&#34;</span><span>,</span>
            <span>&#34;wind&#34;</span><span>:</span> <span>&#34;14 km/h&#34;</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>&#34;day&#34;</span><span>:</span> <span>&#34;3&#34;</span><span>,</span>
            <span>&#34;temperature&#34;</span><span>:</span> <span>&#34;+39 °C&#34;</span><span>,</span>
            <span>&#34;wind&#34;</span><span>:</span> <span>&#34;22 km/h&#34;</span>
        <span>}</span>
    <span>]</span>
<span>}</span></code></pre><p>With this, you should see the new logs being printed inside the <code>application<span>-</span>outbound<span>.</span>log</code> file in your logs folder:</p><pre><code><span>22</span><span>-</span><span>08</span><span>-</span><span>2021</span> <span>22</span><span>:</span><span>03</span><span>:</span><span>38.328</span> <span>[</span>http<span>-</span>nio<span>-</span><span>8080</span><span>-</span>exec<span>-</span><span>6</span><span>]</span> <span>INFO</span>  outbound<span>-</span>logs<span>.</span>getPostsPlainJSON <span>-</span> Getting Weather Information <span>for</span> ohio
<span>22</span><span>-</span><span>08</span><span>-</span><span>2021</span> <span>22</span><span>:</span><span>03</span><span>:</span><span>38.330</span> <span>[</span>http<span>-</span>nio<span>-</span><span>8080</span><span>-</span>exec<span>-</span><span>6</span><span>]</span> <span>INFO</span>  outbound<span>-</span>logs<span>.</span>getPostsPlainJSON <span>-</span> Final <span><span>URL</span></span> <span>=&gt;</span> https<span>:</span><span>/</span><span>/</span>goweather<span>.</span>herokuapp<span>.</span>com<span>/</span>weather<span>/</span>ohio
<span>22</span><span>-</span><span>08</span><span>-</span><span>2021</span> <span>22</span><span>:</span><span>03</span><span>:</span><span>39.912</span> <span>[</span>http<span>-</span>nio<span>-</span><span>8080</span><span>-</span>exec<span>-</span><span>6</span><span>]</span> <span>INFO</span>  outbound<span>-</span>logs<span>.</span>getPostsPlainJSON <span>-</span> <span>Response</span> <span>=&gt;</span> <span>{</span><span>&#34;temperature&#34;</span><span>:</span><span>&#34;+33 °C&#34;</span><span>,</span><span>&#34;wind&#34;</span><span>:</span><span>&#34;14 km/h&#34;</span><span>,</span><span>&#34;description&#34;</span><span>:</span><span>&#34;Partly cloudy&#34;</span><span>,</span><span>&#34;forecast&#34;</span><span>:</span><span>[</span><span>{</span><span>&#34;day&#34;</span><span>:</span><span>&#34;1&#34;</span><span>,</span><span>&#34;temperature&#34;</span><span>:</span><span>&#34;+38 °C&#34;</span><span>,</span><span>&#34;wind&#34;</span><span>:</span><span>&#34;17 km/h&#34;</span><span>}</span><span>,</span><span>{</span><span>&#34;day&#34;</span><span>:</span><span>&#34;2&#34;</span><span>,</span><span>&#34;temperature&#34;</span><span>:</span><span>&#34;37 °C&#34;</span><span>,</span><span>&#34;wind&#34;</span><span>:</span><span>&#34;14 km/h&#34;</span><span>}</span><span>,</span><span>{</span><span>&#34;day&#34;</span><span>:</span><span>&#34;3&#34;</span><span>,</span><span>&#34;temperature&#34;</span><span>:</span><span>&#34;+39 °C&#34;</span><span>,</span><span>&#34;wind&#34;</span><span>:</span><span>&#34;22 km/h&#34;</span><span>}</span><span>]</span><span>}</span></code></pre><h3 id="Modifying-Filebeat-and-Creating-Custom-Index-Pattern">Modifying Filebeat and Creating Custom Index Pattern</h3><p>Next, you also have to change your <code>filebeat<span>.</span>yml</code> to fetch the data from two different locations. </p><p>This is an important section where you will also learn how to create custom indexes instead of using the default ones that Filebeat generates.</p><p>An <strong>IMPORTANT</strong> thing to note here is that you have to disable ILM(Index Lifecycle Management) for using the custom indexes. (This is not mentioned in any elastic documentation but is a very important step)</p><p>ILM is nothing but the policy to manage indices according to the performance requirements. If this is enabled (which is true by default), you&#39;ll not be able to give any custom name to the index.</p><p>You also have to set the value for <code>setup<span>.</span>template<span>.</span>name</code> and <code>setup<span>.</span>template<span>.</span>pattern</code> to modify the index name.</p><p>By default, Filebeat creates index in pattern: “filebeat-%{[version]}-%{+yyyy.MM.dd}”. </p><p>To change this format, inside <code>setup<span>.</span>template<span>.</span>name</code> you have to set your custom index name like &#34;myapp&#34; and inside <code>setup<span>.</span>template<span>.</span>pattern</code> you have to put the same custom index name that you provided, followed by a hyphen(-) and asterisk (*), e.g., myapp-*</p><pre><code>filebeat<span>.</span>inputs<span>:</span>
  <span>-</span> type<span>:</span> log
    enabled<span>:</span> <span>true</span>
    fields<span>:</span>
        type<span>:</span> <span>&#34;service_logs&#34;</span>
    paths<span>:</span>
        <span>-</span> <span>/</span><span>ELK</span><span>/</span>logs<span>/</span>application<span>.</span>log  # Absolute path <span>of</span> application<span>.</span>log file
  <span>-</span> type<span>:</span> log
    enabled<span>:</span> <span>true</span>
    fields<span>:</span>
        type<span>:</span> <span>&#34;outbound_logs&#34;</span>
    paths<span>:</span>
        <span>-</span> <span>/</span><span>ELK</span><span>/</span>logs<span>/</span>application<span>-</span>outbound<span>.</span>log  # Absolute path <span>of</span> application<span>-</span>outbound<span>.</span>log file

setup<span>.</span>ilm<span>.</span>enabled<span>:</span> <span>false</span>
setup<span>.</span>template<span>.</span>name<span>:</span> <span>&#34;myapp-%{[fields.type]:other}&#34;</span>
setup<span>.</span>template<span>.</span>pattern<span>:</span> <span>&#34;myapp-%{[fields.type]:other}-*&#34;</span>

output<span>.</span>elasticsearch<span>:</span>
  hosts<span>:</span> <span>[</span><span>&#34;localhost:9200&#34;</span><span>]</span>
  protocol<span>:</span> <span>&#34;http&#34;</span>
  index<span>:</span> <span>&#34;myapp-%{[fields.type]:other}-%{+yyyy.MM.dd}&#34;</span></code></pre><p>In Filebeat configuration, you have to use <code>fields<span>.</span>type</code> to distinguish among the different inputs from where you&#39;re fetching the data in case of multiple inputs.</p><p>Now go to the <a href="http://localhost:9200/_cat/indices" target="_blank" rel="noreferrer noopener">Elasticsearch indices</a>, and you&#39;ll see two new additional indexes starting with the name &#34;myapp&#34; followed by their respective values of <code>fields<span>.</span>type</code>:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/34wU3NOVwfT7iovbKF2AvK/98a5d87a72c016b4ce252ded9f900f97/elk_14.png" alt="Indexes_myapp"/></p><p>Create these two new patterns inside your <a href="http://localhost:5601/app/management/kibana/indexPatterns" target="_blank" rel="noreferrer noopener">Kibana index pattern management</a> console by the name <code>myapp<span>-</span>outbound_logs<span>-</span><span>*</span></code> and <code>myapp<span>-</span>service_logs<span>-</span><span>*</span></code>.</p><p>Next, hit the REST APIs again, and you should be able to view the logs of your applications in separate indexes depending on the API you are hitting.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2IE0qGNm79KxHRpt2U5dnI/1501124e0a2be6307c630973ae13c827/elk_15.png" alt="Myapp_Logs"/></p><h2 id="Summary">Summary</h2><p>For any developer, logs are the most critical way for debugging. ELK Stack simplifies the delivery of logs in a centralized and scalable way. This article was an introduction to how it all works. </p><ul><li>You have gone through the step-by-step process of sending out Spring Boot application logs to the Elastic Stack(ELK).</li><li>You got introduced to Filebeat and learned about the advantages and disadvantages of Filebeat and Logstash as log shippers.</li><li>You learned how to create custom index patterns through a Filebeat configuration.</li><li>You also got the hang of how you can manage logs of different services of the same applications by putting them in separate indexes.</li></ul><p><em>The complete code used in this tutorial is available on this <a href="https://github.com/ApoorvTyagi/Spring-ELK" target="_blank" rel="noreferrer noopener">GitHub repository</a></em>.</p></div></div>]]></content:encoded>
      <pubDate>Thu, 30 Sep 2021 14:53:00 +0000</pubDate>
    </item>
    <item>
      <title>Create an API in Swift and Deploy It to AWS Lambda</title>
      <link>https://auth0.com/blog/create-an-api-in-swift-and-deploy-it-to-aws-lambda/</link>
      <description>Learn how to create and deploy a serverless HTTP API using Swift and AWS Lambda.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>In almost every real mobile application, we are probably going to need a backend side where our business logic will be handled. In most cases, there will be two different teams, one for mobile and one for the backend side of the project. But, what if we, as iOS developers, could write our own backend in our preferred language? Let&#39;s explore in this article how we can achieve this using Swift AWS Lambda Runtime together with AWS Lambda.</p><h2 id="What-is-AWS-Lambda-">What is AWS Lambda?</h2><p>In simple terms, it is a service provider by AWS in which we can run our code without the need to configure and manage a server. We just upload our code as a zip file, and AWS automatically does all the configurations needed in the server to make our software available.</p><p>One of the main differences between this approach and having a dedicated server, in addition to simpler administration, is that if at some point we need to increase our processing power to scale up our application, AWS Lambda does that automatically for us if we design the application correctly.</p><p>You can check out more at this <a href="https://aws.amazon.com/lambda/" target="_blank" rel="noreferrer noopener">link</a>.</p><h2 id="Swift-AWS-Lambda-Runtime">Swift AWS Lambda Runtime</h2><p>A custom AWS Lambda runtime is basically a library that is in charge of managing and executing the Lambda function&#39;s code when it is called. With <a href="https://swift.org/blog/aws-lambda-runtime/" target="_blank" rel="noreferrer noopener">Swift AWS Lambda Runtime</a>, we can now write serverless code in Swift and make it ready for use with AWS Lambda service.</p><h2 id="Creating-Our-HTTP-API">Creating Our HTTP API</h2><p>For this tutorial, we will create a simple HTTP API in Swift and expose it through <a href="https://aws.amazon.com/api-gateway/" target="_blank" rel="noreferrer noopener">API Gateway</a>, which is another service available in AWS suite that allows us to expose our Lambda function as HTTP endpoints.</p><h3 id="Prerequisites">Prerequisites</h3><ul><li>Have XCode installed</li><li>Have an AWS account.</li><li>Have an Auth0 account.</li><li>Have Docker installed in your machine to compile the code that we will upload to AWS.</li></ul><h3 id="Step-1--Defining-the-API">Step 1: Defining the API</h3><p>We&#39;re going to create a simple API to handle a simple todo list with three operations:</p><ul><li><code><span>POST</span> <span>/</span>todoitem</code> Create a new todo item.</li><li><code><span>GET</span> <span>/</span>todoitems</code> Return all the items in the list.</li><li><code><span>GET</span> <span>/</span>todoitems<span>/</span><span>:</span>id</code> Return a specific item in the list.</li></ul><p>Just to simplify things, our TodoItem will only have an id and a description.</p><pre><code><span>struct</span> <span>ToDoItem</span> <span>{</span>
    <span>var</span> id<span>:</span> <span>Int</span>
    <span>let</span> description<span>:</span> <span>String</span>
<span>}</span></code></pre><h3 id="Step-2--Setup-the-project">Step 2: Setup the project</h3><p>The next thing we need to do is create our project. In this case, we need to create a new <a href="https://swift.org/package-manager/" target="_blank" rel="noreferrer noopener">Swift Package</a>. To do this, we can open Xcode and go to <strong>File → New → Swift Package</strong> option and name it <strong>ToDoList-API</strong>. We can also create it from the console by running the following command: <code>$ swift <span>package</span> init <span>--</span>type executable</code>.</p><p>Once that we have our project created, let&#39;s open and modify our <strong>Package.swift</strong> file with all the information needed.</p><pre><code><span>// swift-tools-version:5.3</span>
<span>// The swift-tools-version declares the minimum version of Swift required to build this package.</span>

<span>import</span> <span>PackageDescription</span>

<span>let</span> package <span>=</span> <span>Package</span><span>(</span>
    name<span>:</span> <span>&#34;ToDoList-API&#34;</span><span>,</span>
    platforms<span>:</span> <span>[</span>
        <span>.</span><span>macOS</span><span>(</span><span>.</span>v10_15<span>)</span>
    <span>]</span><span>,</span>
    products<span>:</span> <span>[</span>
        <span>.</span><span>executable</span><span>(</span>name<span>:</span> <span>&#34;ToDoList-API&#34;</span><span>,</span> targets<span>:</span> <span>[</span><span>&#34;ToDoList-API&#34;</span><span>]</span><span>)</span><span>,</span>
    <span>]</span><span>,</span>
    dependencies<span>:</span> <span>[</span>
        <span>.</span><span>package</span><span>(</span>url<span>:</span> <span>&#34;https://github.com/swift-server/swift-aws-lambda-runtime.git&#34;</span><span>,</span> <span>.</span><span>upToNextMajor</span><span>(</span>from<span>:</span><span>&#34;0.3.0&#34;</span><span>)</span><span>)</span><span>,</span>
    <span>]</span><span>,</span>
    targets<span>:</span> <span>[</span>
        <span>.</span><span>target</span><span>(</span>
            name<span>:</span> <span>&#34;ToDoList-API&#34;</span><span>,</span>
            dependencies<span>:</span> <span>[</span>
                <span>.</span><span>product</span><span>(</span>name<span>:</span> <span>&#34;AWSLambdaRuntime&#34;</span><span>,</span> package<span>:</span> <span>&#34;swift-aws-lambda-runtime&#34;</span><span>)</span><span>,</span>
                <span>.</span><span>product</span><span>(</span>name<span>:</span> <span>&#34;AWSLambdaEvents&#34;</span><span>,</span> package<span>:</span> <span>&#34;swift-aws-lambda-runtime&#34;</span><span>)</span><span>,</span>
            <span>]</span><span>,</span>
            resources<span>:</span> <span>[</span>
                <span>.</span><span>process</span><span>(</span><span>&#34;Config.plist&#34;</span><span>)</span>
            <span>]</span>
        <span>)</span><span>,</span>
    <span>]</span>
<span>)</span></code></pre><p>Once you save the file, Xcode will start downloading all the needed resources and dependencies. For this example, we&#39;re going to use two dependencies:</p><ul><li><strong>AWSLambdaRuntime</strong> to handle the communications with <a href="https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html" target="_blank" rel="noreferrer noopener">AWS Lambda runtime API</a>.</li><li><strong>AWSLambdaEvents</strong> to handle the events with API Gateway in our code.</li></ul><h3 id="Step-3--Create-our-first-Lambda-function">Step 3: Create our first Lambda function</h3><p>We now have to develop our Lambda function. To do so, we must create a new file inside the <code><span>/</span>Source</code> directory and name it <strong>main.swift</strong>. Inside this file, we&#39;ll use the Swift Lambda Runtime by calling <code>Lambda<span>.</span>run</code> function. This function takes an input and a callback as parameters. We can use the callback to return whatever we want if the operation is successful or an error otherwise.</p><p>For every invocation that Lambada receives, our Runtime will execute whatever we put inside the <code>Lambda<span>.</span>run</code> function. In this case, we are going to take just a string as input and return a greeting message.</p><pre><code><span>import</span> <span>AWSLambdaRuntime</span>

<span>struct</span> <span>Input</span><span>:</span> <span>Codable</span> <span>{</span>
  <span>let</span> name<span>:</span> <span>String</span>
<span>}</span>

<span>struct</span> <span>Output</span><span>:</span> <span>Codable</span> <span>{</span>
  <span>let</span> greeting<span>:</span> <span>String</span>
<span>}</span>

<span>Lambda</span><span>.</span>run <span>{</span> <span>(</span>context<span>,</span> input<span>:</span> <span>Input</span><span>,</span> callback<span>:</span> @escaping <span>(</span><span>Result</span><span>&lt;</span><span>Output</span><span>,</span> <span>Error</span><span>&gt;</span><span>)</span> <span>-</span><span>&gt;</span> <span>Void</span><span>)</span> <span>in</span>
  <span>callback</span><span>(</span><span>.</span><span>success</span><span>(</span><span>Output</span><span>(</span>greeting<span>:</span> <span>&#34;Hello <span><span>\(</span>input<span>.</span>name<span>)</span></span>&#34;</span><span>)</span><span>)</span><span>)</span>
<span>}</span></code></pre><p>In order to run our lambda in our machine, we need to add a custom environment variable (<code><span>LOCAL_LAMBDA_SERVER_ENABLED</span><span>=</span><span>true</span></code>) to our scheme&#39;s run settings. This will simulate the Lambda server in our local environment. </p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/42lm5qsyLdzZ9sVnvs6Ipn/c177634055ba4886f3863e6a4232d4fb/swift_lambda_01.png" alt="Enable AWS Lambda local"/></p><p>Now, if we run the target, we will get something like this in the console:</p><pre><code><span>2021</span><span>-</span><span>08</span><span>-</span>14T23<span>:</span><span>36</span><span>:</span><span>50</span><span>-</span><span>0300</span> info <span>LocalLambdaServer</span> <span>:</span> <span>LocalLambdaServer</span> started and listening on <span>127.0</span><span>.</span><span>0.1</span><span>:</span><span>7000</span><span>,</span> receiving events on <span>/</span>invoke
<span>2021</span><span>-</span><span>08</span><span>-</span>14T23<span>:</span><span>36</span><span>:</span><span>50</span><span>-</span><span>0300</span> info <span>Lambda</span> <span>:</span> lambda lifecycle starting with <span>Configuration</span>
  <span>General</span><span>(</span>logLevel<span>:</span> info<span>)</span><span>)</span>
  <span>Lifecycle</span><span>(</span>id<span>:</span> <span>9908899204653</span><span>,</span> maxTimes<span>:</span> <span>0</span><span>,</span> stopSignal<span>:</span> <span>TERM</span><span>)</span>
  <span>RuntimeEngine</span><span>(</span>ip<span>:</span> <span>127.0</span><span>.</span><span>0.1</span><span>,</span> port<span>:</span> <span>7000</span><span>,</span> requestTimeout<span>:</span> <span>nil</span></code></pre><p>This means that our Lambda function is running on port <code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>700</span><span>/</span>invoke</code>. So let&#39;s go ahead and make our first request to the function.</p><pre><code>$ curl \
    <span>--</span>header <span>&#34;Content-Type: application/json&#34;</span> \
  <span>--</span>request <span>POST</span> \
  <span>--</span>data <span>&#39;{&#34;name&#34;: &#34;Bruno&#34;}&#39;</span> \
  http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>7000</span><span>/</span>invoke</code></pre><p>If we are getting something like this: <code>$ <span>{</span><span>&#34;greeting&#34;</span><span>:</span><span>&#34;Hello Bruno&#34;</span><span>}</span></code>, it means that we did everything right so far!.</p><p>We have our first function up and running, so we are in a pretty good spot to move on and create our HTTP API.</p><h3 id="Step-4--Create-HTTP-API">Step 4: Create HTTP API</h3><p>Let&#39;s start by creating the model that we are going to deal with. Since we&#39;re going to return static data, we&#39;ll create some helpers functions as well. Go ahead and create a new file  <strong>TodoItem.swift</strong> inside <strong>Sources/ToDoList-API</strong>.</p><pre><code><span>struct</span> <span>ToDoItem</span><span>:</span> <span>Codable</span> <span>{</span>
    <span>let</span> id<span>:</span> <span>Int</span>
    <span>let</span> description<span>:</span> <span>String</span>
<span>}</span>

<span>// MARK: - Static helpers</span>

<span>extension</span> <span>ToDoItem</span> <span>{</span>
    <span>static</span> <span>func</span> <span>getToDoList</span><span>(</span><span>)</span> <span>-</span><span>&gt;</span> <span>[</span><span>ToDoItem</span><span>]</span> <span>{</span>
        <span>var</span> list <span>=</span> <span>[</span><span>ToDoItem</span><span>]</span><span>(</span><span>)</span>
        list<span>.</span><span>append</span><span>(</span><span>.</span><span>init</span><span>(</span>id<span>:</span> <span>1</span><span>,</span> description<span>:</span> <span>&#34;Pay credit card&#34;</span><span>)</span><span>)</span>
        list<span>.</span><span>append</span><span>(</span><span>.</span><span>init</span><span>(</span>id<span>:</span> <span>2</span><span>,</span> description<span>:</span> <span>&#34;Clean apartment&#34;</span><span>)</span><span>)</span>
        list<span>.</span><span>append</span><span>(</span><span>.</span><span>init</span><span>(</span>id<span>:</span> <span>3</span><span>,</span> description<span>:</span> <span>&#34;Call John&#34;</span><span>)</span><span>)</span>

        <span>return</span> list
    <span>}</span>

    <span>static</span> <span>func</span> <span>getItem</span><span>(</span>with id<span>:</span> <span>Int</span><span>)</span> <span>-</span><span>&gt;</span> <span>ToDoItem</span><span>?</span> <span>{</span>
        <span>return</span> <span>getToDoList</span><span>(</span><span>)</span><span>.</span><span>filter</span><span>{</span> $<span>0</span><span>.</span>id <span>==</span> id <span>}</span><span>.</span><span>first</span>
    <span>}</span>
<span>}</span></code></pre><p>The next thing we need to do is adjust our Lambda function to interact with APIGateway. For this, we are going to use two types included in <strong>AWSLambdaEvents</strong> for our function&#39;s input and output:</p><ul><li>APIGateway.V2.Request</li><li>APIGateway.V2.Response</li></ul><p>Make the following changes inside our <strong>main.swift</strong> file.</p><pre><code><span>typealias</span> <span>In</span> <span>=</span> <span>APIGateway</span><span>.</span><span>V2</span><span>.</span><span>Request</span>
<span>typealias</span> <span>Out</span> <span>=</span> <span>APIGateway</span><span>.</span><span>V2</span><span>.</span><span>Response</span>

<span>Lambda</span><span>.</span>run <span>{</span> <span>(</span>context<span>,</span> 
              request<span>:</span> <span>In</span><span>,</span> 
              callback<span>:</span> @escaping <span>(</span><span>Result</span><span>&lt;</span><span>Out</span><span>,</span> <span>Error</span><span>&gt;</span><span>)</span> <span>-</span><span>&gt;</span> <span>Void</span><span>)</span> <span>in</span>
    <span>// Implementation... </span>
<span>}</span></code></pre><p>So we receive an <strong>APIGateway.V2.Request</strong> type as an input, and we must return an <strong>APIGateway.V2.Response</strong> type as an output. However, we want to obtain a <strong>ToDoItem</strong> type when we receive a <code><span>POST</span></code>, and we want to return a <strong>TodoItem</strong> type if we receive a <code><span>GET</span></code>.</p><p>Both types, <strong>APIGateway.V2.Request</strong> and <strong>APIGateway.V2.Response,</strong> have a body property in which we will receive and send the payload from our endpoints. This property is a String type, so we must do some transformation using an <a href="https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types" target="_blank" rel="noreferrer noopener">encoder</a> (or decoder in the case we want to return something) in order to use our Swift type before sending it back or before start processing it. </p><p>The only missing part in our code design is how we distinguish between different routes and methods. We can access the endpoint path from our request type. In our example, we are only going to have one path: <code><span>/</span>todoitems</code>. If we get another path, we should return a 404 error.</p><p>Let&#39;s put all the pieces together and modify our lambda function.</p><pre><code><span>import</span> <span>Foundation</span>
<span>import</span> <span>AWSLambdaRuntime</span>
<span>import</span> <span>AWSLambdaEvents</span>

<span>typealias</span> <span>In</span> <span>=</span> <span>APIGateway</span><span>.</span><span>V2</span><span>.</span><span>Request</span>
<span>typealias</span> <span>Out</span> <span>=</span> <span>APIGateway</span><span>.</span><span>V2</span><span>.</span><span>Response</span>

<span>Lambda</span><span>.</span>run <span>{</span> <span>(</span>context<span>,</span>
              request<span>:</span> <span>In</span><span>,</span>
              callback<span>:</span> @escaping <span>(</span><span>Result</span><span>&lt;</span><span>Out</span><span>,</span> <span>Error</span><span>&gt;</span><span>)</span> <span>-</span><span>&gt;</span> <span>Void</span><span>)</span> <span>in</span>
    
    <span>let</span> routeKey <span>=</span> request<span>.</span>routeKey
    
    <span>switch</span> routeKey <span>{</span>
    
    <span>case</span> <span>&#34;GET /todoitems&#34;</span><span>:</span>
        <span>let</span> items <span>=</span> <span>ToDoItem</span><span>.</span><span>getToDoList</span><span>(</span><span>)</span>
        <span>let</span> bodyOutput <span>=</span> <span>try</span><span>!</span> <span>JSONEncoder</span><span>(</span><span>)</span><span>.</span><span>encodeAsString</span><span>(</span>items<span>)</span>
        <span>let</span> output <span>=</span> <span>Out</span><span>(</span>statusCode<span>:</span> <span>.</span>ok<span>,</span> headers<span>:</span> <span>[</span><span>&#34;content-type&#34;</span><span>:</span> <span>&#34;application/json&#34;</span><span>]</span><span>,</span> body<span>:</span> bodyOutput<span>)</span>
        <span>callback</span><span>(</span><span>.</span><span>success</span><span>(</span>output<span>)</span><span>)</span>
        
    <span>case</span> <span>&#34;GET /todoitems/{id}&#34;</span><span>:</span>
        <span>if</span> <span>let</span> idString <span>=</span> request<span>.</span>pathParameters<span>?</span><span>[</span><span>&#34;id&#34;</span><span>]</span><span>,</span> <span>let</span> id <span>=</span> <span>Int</span><span>(</span>idString<span>)</span><span>,</span>
           <span>let</span> item <span>=</span> <span>ToDoItem</span><span>.</span><span>getItem</span><span>(</span>with<span>:</span> id<span>)</span> <span>{</span>
            
            <span>let</span> bodyOutput <span>=</span> <span>try</span><span>!</span> <span>JSONEncoder</span><span>(</span><span>)</span><span>.</span><span>encodeAsString</span><span>(</span>item<span>)</span>
            <span>let</span> output <span>=</span> <span>Out</span><span>(</span>statusCode<span>:</span> <span>.</span>ok<span>,</span> headers<span>:</span> <span>[</span><span>&#34;content-type&#34;</span><span>:</span> <span>&#34;application/json&#34;</span><span>]</span><span>,</span> body<span>:</span> bodyOutput<span>)</span>
            <span>callback</span><span>(</span><span>.</span><span>success</span><span>(</span>output<span>)</span><span>)</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>callback</span><span>(</span><span>.</span><span>success</span><span>(</span><span>Out</span><span>(</span>statusCode<span>:</span> <span>.</span>notFound<span>)</span><span>)</span><span>)</span>
        <span>}</span>
        
    <span>case</span> <span>&#34;POST /todoitems&#34;</span><span>:</span>
        <span>do</span> <span>{</span>
            <span>let</span> input <span>=</span> <span>try</span> <span>JSONDecoder</span><span>(</span><span>)</span><span>.</span><span>decode</span><span>(</span><span>ToDoItem</span><span>.</span><span>self</span><span>,</span> from<span>:</span> request<span>.</span>body <span>?</span><span>?</span> <span>&#34;&#34;</span><span>)</span>
            <span>let</span> bodyOutput <span>=</span> <span>try</span> <span>JSONEncoder</span><span>(</span><span>)</span><span>.</span><span>encodeAsString</span><span>(</span>input<span>)</span>
            <span>let</span> output <span>=</span> <span>Out</span><span>(</span>statusCode<span>:</span> <span>.</span>ok<span>,</span> headers<span>:</span> <span>[</span><span>&#34;content-type&#34;</span><span>:</span> <span>&#34;application/json&#34;</span><span>]</span><span>,</span> body<span>:</span> bodyOutput<span>)</span>
            <span>callback</span><span>(</span><span>.</span><span>success</span><span>(</span>output<span>)</span><span>)</span>
        <span>}</span> <span>catch</span> <span>{</span>
            <span>callback</span><span>(</span><span>.</span><span>success</span><span>(</span><span>Out</span><span>(</span>statusCode<span>:</span> <span>.</span>badRequest<span>)</span><span>)</span><span>)</span>
        <span>}</span>
        
    <span>default</span><span>:</span>
        <span>callback</span><span>(</span><span>.</span><span>success</span><span>(</span><span>Out</span><span>(</span>statusCode<span>:</span> <span>.</span>notFound<span>)</span><span>)</span><span>)</span>
    <span>}</span>
<span>}</span>

<span>// ---------------</span>

<span>extension</span> <span>JSONEncoder</span> <span>{</span>
    <span>func</span> encodeAsString<span>&lt;</span>T<span>:</span> <span>Encodable</span><span>&gt;</span><span>(</span><span>_</span> value<span>:</span> T<span>)</span> <span>throws</span> <span>-</span><span>&gt;</span> <span>String</span> <span>{</span>
        <span>try</span> <span>String</span><span>(</span>decoding<span>:</span> <span>self</span><span>.</span><span>encode</span><span>(</span>value<span>)</span><span>,</span> <span>as</span><span>:</span> <span>Unicode</span><span>.</span><span>UTF8</span><span>.</span><span>self</span><span>)</span>
    <span>}</span>
<span>}</span>

<span>extension</span> <span>JSONDecoder</span> <span>{</span>
    <span>func</span> decode<span>&lt;</span>T<span>:</span> <span>Decodable</span><span>&gt;</span><span>(</span><span>_</span> type<span>:</span> T<span>.</span><span>Type</span><span>,</span> from string<span>:</span> <span>String</span><span>)</span> <span>throws</span> <span>-</span><span>&gt;</span> T <span>{</span>
        <span>try</span> <span>self</span><span>.</span><span>decode</span><span>(</span>type<span>,</span> from<span>:</span> <span>Data</span><span>(</span>string<span>.</span>utf8<span>)</span><span>)</span>
    <span>}</span>
<span>}</span></code></pre><h2 id="Test-the-API-Locally">Test the API Locally</h2><p>We now have everything in place to start testing our API before deploying it to AWS. Let&#39;s try to get all the items.</p><pre><code>$ <span>curl</span> <span>\</span>
    --header <span>&#34;Content-Type: application/json&#34;</span> <span>\</span>
  --request GET <span>\</span>
  http://localhost:7000/invoke/todoitems</code></pre><p>We will get a <code><span>404</span> <span>-</span> Not found</code> error, which is weird because we have configured that endpoint in the right way inside our Lambda function. Well, this is because our local Runtime is only listening for requests at <code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>7000</span><span>/</span>invoke</code>. </p><p>In addition, we are using Amazon API Gateway to expose our Lambda function as an HTTP API. This means that all incoming HTTP requests will get transformed into JSON data by the API Gateway and provide the Lambda function with that payload already transformed. Then, our function will process that JSON payload and respond with another JSON payload itself, which the API Gateway will transform back into an HTTP response. </p><p>So, if we want to simulate this interaction, we must provide an HTTP request (in JSON format) in which we need to include all the relevant information like the method we want to call, the route path, the body, and so on.</p><p>This is a standard HTTP request after the API Gateway makes its transformations:</p><pre><code><span>{</span>
    <span>&#34;routeKey&#34;</span><span>:</span><span>&#34;GET /todoitems&#34;</span><span>,</span>
    <span>&#34;version&#34;</span><span>:</span><span>&#34;2.0&#34;</span><span>,</span>
    <span>&#34;rawPath&#34;</span><span>:</span><span>&#34;/todoitems&#34;</span><span>,</span>
    <span>&#34;requestContext&#34;</span><span>:</span><span>{</span>
        <span>&#34;accountId&#34;</span><span>:</span><span>&#34;&#34;</span><span>,</span>
        <span>&#34;apiId&#34;</span><span>:</span><span>&#34;&#34;</span><span>,</span>
        <span>&#34;domainName&#34;</span><span>:</span><span>&#34;&#34;</span><span>,</span>
        <span>&#34;domainPrefix&#34;</span><span>:</span><span>&#34;&#34;</span><span>,</span>
        <span>&#34;stage&#34;</span><span>:</span> <span>&#34;&#34;</span><span>,</span>
        <span>&#34;requestId&#34;</span><span>:</span> <span>&#34;&#34;</span><span>,</span>
        <span>&#34;http&#34;</span><span>:</span><span>{</span>
            <span>&#34;path&#34;</span><span>:</span><span>&#34;/todoitems&#34;</span><span>,</span>
            <span>&#34;method&#34;</span><span>:</span><span>&#34;GET&#34;</span><span>,</span>
            <span>&#34;protocol&#34;</span><span>:</span><span>&#34;HTTP/1.1&#34;</span><span>,</span>
            <span>&#34;sourceIp&#34;</span><span>:</span><span>&#34;&#34;</span><span>,</span>
            <span>&#34;userAgent&#34;</span><span>:</span><span>&#34;&#34;</span>
        <span>}</span><span>,</span>
        <span>&#34;time&#34;</span><span>:</span> <span>&#34;&#34;</span><span>,</span>
        <span>&#34;timeEpoch&#34;</span><span>:</span><span>0</span>
    <span>}</span><span>,</span>
    <span>&#34;isBase64Encoded&#34;</span><span>:</span><span>false</span><span>,</span>
    <span>&#34;rawQueryString&#34;</span><span>:</span><span>&#34;&#34;</span><span>,</span>
    <span>&#34;headers&#34;</span><span>:</span><span>{</span><span>}</span>
<span>}</span></code></pre><p>We don&#39;t have to provide all the values, but all the keys must be present. Otherwise, we&#39;ll get a decoding error from the Lambda function.</p><p>With this in mind, let&#39;s make a request again. We can do it using the terminal like before or an API client tool like <a href="https://www.postman.com" target="_blank" rel="noreferrer noopener">Postman</a>. </p><pre><code>$ <span>curl</span> --header <span>&#34;Content-Type: application/json&#34;</span> <span>\</span>
  --request POST <span>\</span>
  --data <span>&#39;{
    &#34;routeKey&#34;:&#34;GET /todoitems&#34;,
    &#34;version&#34;:&#34;2.0&#34;,
    &#34;rawPath&#34;:&#34;/todoitems&#34;,
    &#34;requestContext&#34;:{
        &#34;accountId&#34;:&#34;&#34;,
        &#34;apiId&#34;:&#34;&#34;,
        &#34;domainName&#34;:&#34;&#34;,
        &#34;domainPrefix&#34;:&#34;&#34;,
        &#34;stage&#34;: &#34;&#34;,
        &#34;requestId&#34;: &#34;&#34;,
        &#34;http&#34;:{
            &#34;path&#34;:&#34;/todoitems&#34;,
            &#34;method&#34;:&#34;GET&#34;,
            &#34;protocol&#34;:&#34;HTTP/1.1&#34;,
            &#34;sourceIp&#34;:&#34;&#34;,
            &#34;userAgent&#34;:&#34;&#34;
        },
        &#34;time&#34;: &#34;&#34;,
        &#34;timeEpoch&#34;:0
    },
    &#34;isBase64Encoded&#34;:false,
    &#34;rawQueryString&#34;:&#34;&#34;,
    &#34;headers&#34;:{}
}&#39;</span> <span>\</span>
http://localhost:7000/invoke</code></pre><p>If we want to retrieve only one item, we need to add an entry into our data JSON. </p><pre><code><span>&#34;pathParameters&#34;</span><span>:</span> <span>{</span><span>&#34;id&#34;</span><span>:</span> <span>&#34;1&#34;</span><span>}</span></code></pre><p>Last, if we want to test the <code><span>POST</span></code> method, we must add the following entry to our data JSON. </p><pre><code><span>&#34;body&#34;</span><span>:</span> <span>&#34;{\&#34;id\&#34;:1, \&#34;description\&#34;: \&#34;Test\&#34;}&#34;</span></code></pre><p>And, other than that, we also need to modify the <strong>routeKey</strong> to <code><span>GET</span> <span>/</span>todoitems<span>/</span><span>{</span>id<span>}</span></code> and the <strong>http.method</strong> property to <strong>POST</strong> instead of <strong>GET</strong>.</p><h2 id="Deploy-to-AWS">Deploy to AWS</h2><h3 id="Compile---Package">Compile &amp; Package</h3><p>We will execute our Lambda function on <strong>Amazon Linux 2</strong> OS, so we need to compile our function for this particular OS. For convenience, we&#39;ll use <a href="https://www.docker.com" target="_blank" rel="noreferrer noopener">Docker</a> to do this. Create a new folder named <strong>Scripts</strong> in your root project folder. Inside this folder, create a new <strong>build.sh</strong> file with the following code</p><pre><code>docker run <span>\</span>
    --rm <span>\</span>
    --volume <span>&#34;<span><span>$(</span><span>pwd</span><span>)</span></span>/:/src&#34;</span> <span>\</span>
    --workdir <span>&#34;/src/&#34;</span> <span>\</span>
    swift:5.3.1-amazonlinux2 <span>\</span>
    swift build --product ToDoList-API -c release -Xswiftc -static-stdlib</code></pre><p>Understanding Docker commands is beyond the scope of this article, but what this code does is compiles our code for a container. If you&#39;d like to learn more about using Docker and its available commands, check out the <a href="https://docs.docker.com/engine/reference/commandline/cli/" target="_blank" rel="noreferrer noopener">oficial documentation</a>.</p><p>Now go ahead and create another file inside the <strong>Scripts</strong> folder: <strong>package.sh</strong></p><pre><code><span>#!/bin/bash</span>

<span>set</span> -eu

<span>executable</span><span>=</span><span>$1</span>

<span>target</span><span>=</span>.build/lambda/<span>$executable</span>
<span>rm</span> -rf <span>&#34;<span>$target</span>&#34;</span>
<span>mkdir</span> -p <span>&#34;<span>$target</span>&#34;</span>
<span>cp</span> <span>&#34;.build/release/<span>$executable</span>&#34;</span> <span>&#34;<span>$target</span>/&#34;</span>
<span>cd</span> <span>&#34;<span>$target</span>&#34;</span>
<span>ln</span> -s <span>&#34;<span>$executable</span>&#34;</span> <span>&#34;bootstrap&#34;</span>
<span>zip</span> --symlinks lambda.zip *</code></pre><p>This will create a new zip file with the right structure ready for us to upload to AWS.</p><p>We only need to follow these simple steps to build and package our code:</p><ol start="1"><li><code>$ sh <span>.</span><span>/</span>Scripts<span>/</span>build<span>.</span>sh</code></li><li><code>$ sh <span>.</span><span>/</span>Scripts<span>/</span><span>package</span><span>.</span>sh ToDoList<span>-</span><span>API</span></code></li></ol><p>In many environments, we may get privilege errors upon executing these scripts. If that happens, we just need to mark the file as executable by running the following commands:</p><pre><code>$ <span>chmod</span> +x Scripts/build.sh
$ <span>chmod</span> +x Scripts/package.sh</code></pre><h3 id="Upload-Lambda-file">Upload Lambda file</h3><p>The next step is to create our Lambda function and upload the zip file that we&#39;ve just generated. Login into your AWS account, go to AWS Lambda, and click on <strong>Create function</strong>.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5pfB1jTuOtVriJgoushAI5/0998fd7778997150dd2b85d01d80564a/swift_lambda_02.png" alt="Crate AWS Lambda function - Step 1"/></p><p>Click on the <strong>Create function</strong> button after entering a function name and the runtime option. You will be redirected to the next screen to upload the file.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/67bsSmxRcFkaROyOYicx2o/59a3679578ae60617f795065e5f3546b/swift_lambda_03.png" alt="Crate AWS Lambda function - Step 2"/></p><p>Click on the .zip file and locate your <strong>lambda.zip</strong> file on your computer. It should be available on <code>$ your<span>-</span>project<span>-</span>path<span>/</span><span>.</span>build<span>/</span>lambda<span>/</span>ToDoList<span>-</span><span>API</span><span>/</span>lambda<span>.</span>zip</code></p><h3 id="Connect-the-API-Gateway">Connect the API Gateway</h3><p>The last thing we need to do is connect our function to the API Gateway. Go to the API Gateway dashboard from your AWS console and click on <strong>Create API.</strong> Then choose the <strong>HTTP API</strong> option by clicking on the <strong>Build</strong> button.</p><p><strong>Step 1</strong></p><ul><li>Click on <strong>Add Integration</strong> and select the Lambda option
  <ul><li>Search for the Lambda function we just created in the previous section.</li><li>Make sure that the version is <strong>2.0</strong></li></ul></li><li>Chose a name for the API.</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3O9bqK0RSD2116B4akcjJ5/a8dff34110d14a5065c6058e7823c73e/swift_lambda_04.png" alt="API Gateway - Step 1"/></p><p><strong>Step 2</strong></p><p>Here we must configure our routes. If we don&#39;t want to restrict the routing, we can use <strong>$default</strong> in the <strong>Resource path</strong> field. This will map all the requests to our Lambda. </p><p>For this tutorial, we&#39;re going to set the three endpoints that we defined at the beginning.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1ttSD1ozz3vM1IJ4ERKX8H/93a7c3d609759f6138c338e09c721f7a/swift_lambda_05.png" alt="API Gateway - Step 2"/></p><p><strong>Step 3</strong></p><p>In this step, we can configure different environments for our API, like development and production. In our case, we can leave <strong>$default</strong>.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/515U5zI0IewKQpHvK5vTeC/4a0772d20ce1fd9f1778edecfefa928b/swift_lambda_06.png" alt="API Gateway - Step 3"/></p><p><strong>Step 4</strong></p><p>Review all the information and click on <strong>Create</strong>. </p><p>And that&#39;s it! We now have our API deployed to AWS. The invoke url should be something like this: <code>https<span>:</span><span>/</span><span>/</span><span>{</span>your<span>-</span>gateway<span>-</span>id<span>}</span><span>.</span>execute<span>-</span>api<span>.</span>us<span>-</span>east<span>-</span><span>1.</span>amazonaws<span>.</span>com</code></p><h3 id="Test-it-">Test it!</h3><p>We&#39;re using Postman for this part, but you can use whatever other tool you want.</p><p><strong>Get all items</strong></p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/iz0F35N6VrbMOJfBSU58p/5bf838ddda1dbb529c2a4973d1f626a3/swift_lambda_07.png" alt="Get all items reques"/></p><p><strong>Get one item</strong></p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/OF1HGO3P1B51ioF5JdfdR/1af20c65c0addbc106f7a974312bd74d/swift_lambda_08.png" alt="Get one item request"/></p><p><strong>Create new item</strong></p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7yuttuwCtspW5xxmy0ug0r/ab7e81aa859b84948a304c7a3abed3c6/swift_lambda_09.png" alt="Create new item request"/></p><h2 id="Secure-the-API-Using-Auth0">Secure the API Using Auth0</h2><p>Of course, you&#39;d never want to leave an unauthenticated API up - you&#39;ll be responsible for paying for every call made to it!. To demonstrate how we can secure our endpoints, let&#39;s make the <code><span>GET</span> <span>/</span>todoitems<span>/</span><span>{</span>id<span>}</span></code> endpoint only be accessible by authenticated users (in a real application, we&#39;d protect all of these endpoints). </p><p>To accomplish this, we are going to create a custom <a href="https://es.wikipedia.org/wiki/JSON_Web_Token" target="_blank" rel="noreferrer noopener">JSON Web Tokens (JWTs)</a> authorizer with <strong>Auth0</strong> and attach it to our API Gateway endpoint.</p><h3 id="Create-a-new-Auth0-API">Create a new Auth0 API</h3><p>First thing first, login into your Auth0 account and go to <strong>Applications → APIs</strong> in the left menu, and click on + <strong>Create API</strong> button.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3GZG3baxHOc6e2CaNEv0iu/12d2dc752a4753bdd7b9cba95c72f91e/swift_lambda_10.png" alt="New Auth0 API"/></p><ul><li><strong>Name</strong>: This will be the internal name for the API</li><li><strong>Identifier</strong>: <a href="https://auth0-jwt-authorizer/" target="_blank" rel="noreferrer noopener">https://auth0-jwt-authorizer</a></li><li><strong>Signing Algorithm</strong>: Just leave the default here</li></ul><p>Go back to your API Gateway Dashboard and click the <strong>Authorization</strong> option on the left panel below the <strong>Develop</strong> section.</p><p>Select the endpoints that you want to restrict access to; in our case, it will be <code><span>GET</span> <span>/</span>todoitems<span>/</span><span>{</span>id<span>}</span></code>, and click on <strong>Create and attach an authorizer</strong></p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2muFgeJURgJInk8TGe7UgA/bfe4a098b1b9912f319879ee4356bb9a/swift_lambda_11.png" alt="Authorizer"/></p><p>Select <strong>JWT</strong> type and fill in the required information:</p><ul><li><strong>Name</strong>: The name that you want to call the authorizer</li><li><strong>Identity source</strong>: <code>$request<span>.</span>header<span>.</span>Authorization</code> This means that the authorizer can access the access token in the Authorization header.</li><li><strong>Issuer URL</strong>: <code>https<span>:</span><span>/</span><span>/</span><span>{</span>tenant<span>-</span>name<span>}</span><span>.</span>auth0<span>.</span>com</code>. The authorizer uses this to validate the <strong>iss</strong> field inside the JWT. You can find your Auth0 tenant-name in <strong>Applications → Default App → Domain</strong>.</li><li><strong>Audience</strong>: <code>https<span>:</span><span>/</span><span>/</span>auth0<span>-</span>jwt<span>-</span>authorizer</code>. This will be used by the authorizer to validate the <strong>aud</strong> field inside the JWT. This needs to match with the identifier that we configured our Auth0 API before.</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6CBOYYxuepwvH5GuJBy4Sa/a2fa0221485d3351bbb3b789b26276fa/swift_lambda_12.png" alt="Add AWS Lambda authorizer"/></p><h3 id="Test-it-Again">Test it Again</h3><p>If we now try to call <code><span>GET</span> <span>/</span>todoitems<span>/</span><span>{</span>id<span>}</span></code>, we will get an unauthorized error.</p><pre><code><span>{</span>
    <span>&#34;message&#34;</span><span>:</span> <span>&#34;Unauthorized&#34;</span>
<span>}</span></code></pre><p>This is because if we want to use this endpoint, we must provide an authentication header. In a real app, we will return a valid token after the user was authenticated by our app, but just for testing purposes, we can get a token from Auth0.</p><p>Go again to your Auth0 dashboard, and on the left panel, click on <strong>Applications → APIs → AWS JWT Authorizer</strong> <strong>→</strong> <strong>Test</strong>. Find the response section and copy the bearer token provided.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6rxP91y2vKpJLm2sJ72nb7/ac0c048e856f3e8fedbecbf097317d53/swift_lambda_13.png" alt="Auth0 dashboard"/></p><p>Now go back to Postman, add an Authorization header with this token, and send the request. </p><p>Because our request has an authentication token, we get a response!</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1QIhmYdn0hGKDGqAhKcuSJ/170a0ef548ff64bc57770f9aa9ae72a7/swift_lambda_14.png" alt="Authentication Token Response"/></p><h2 id="Conclusion">Conclusion</h2><p>With this type of solution, we, as iOS developers, are in a position to start shifting to a mobile full-stack role, where we don&#39;t need a separate team for the backend side. Of course, every team and project is different. However, for small projects or proof of concepts, this solution should work like a charm. Understanding backend technologies will increase your understanding of software and make you more of an asset to any iOS team.</p><p>The Swift AWS Lambda Runtime has room for improvement (like everything in the tech industry), but it gives us a start point to write backend code without the need of learning a new development language. </p><p>If you want a more detailed example with a database (DynamoDB) connection, you can check the full project <a href="https://github.com/blorenzo10/lambda-swift" target="_blank" rel="noreferrer noopener">here</a>.</p></div></div>]]></content:encoded>
      <author>Attach new Authorizer</author>
      <pubDate>Wed, 29 Sep 2021 16:28:00 +0000</pubDate>
    </item>
    <item>
      <title>Get Started with Custom Error Handling in Spring Boot (Java)</title>
      <link>https://auth0.com/blog/get-started-with-custom-error-handling-in-spring-boot-java/</link>
      <description>Learn how to implement custom error handling logic in Spring Boot. You will see two approaches based on the @ControllerAdvice annotation. Similarly, you will learn how to deal with authentication and access denied errors in Spring Security.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><strong>TL/DR:</strong> Let’s take a look at everything required to build custom error handling logic in both Spring Boot Web and Spring Boot Security</p><p>REST applications developed in Spring Boot automatically take advantage of its default error handling logic. Specifically, whenever an error occurs, a default response containing some information is returned. The problem is that this information may be poor or insufficient for the API callers to deal with the error properly. This is why implementing custom error handling logic is such a common and desirable task. Achieving it requires more effort than you might think, and you need to delve into a few essential Spring Boot notions. Let&#39;s see everything required to get started with custom error handling in Spring Boot and Java.</p><h2 id="Prerequisites">Prerequisites</h2><p>This is the list of all the prerequisites for following the article:</p><ul><li>Java &gt;= 1.8 (Java &gt;= 13 recommended)</li><li>Spring Boot &gt;= 2.5</li><li><a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web" target="_blank" rel="noreferrer noopener">Spring Boot Starter Web</a> &gt;= 2.5</li><li><a href="https://mvnrepository.com/artifact/org.springframework.security/spring-security-core" target="_blank" rel="noreferrer noopener">Spring Security</a> &gt;= 5.5</li><li><a href="https://mvnrepository.com/artifact/org.projectlombok/lombok" target="_blank" rel="noreferrer noopener">Project Lombok</a> &gt;= 1.18</li><li>Gradle &gt;= 4.x or Maven 3.6.x</li></ul><h2 id="Default-Error-Handling-in-Spring-Boot">Default Error Handling in Spring Boot</h2><p>By default, Spring Boot offers a fallback error-handling page, as well as an error-handling response in case of REST requests. Particularly, Spring Boot looks for a mapping for the <code><span>/</span>error</code> endpoint during the start-up. This mapping depends on what is set on a <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/ViewResolver.html" target="_blank" rel="noreferrer noopener"><code>ViewResolver</code></a> class. When no valid mappings can be found, Spring Boot automatically configures a default fallback error page. This so-called <em>Whitelabel Error Page</em> is nothing more than a white HTML page containing the HTTP status code and a vague error message. This is what such a page looks like:</p><pre><code><span><span><span>&lt;</span>html</span><span>&gt;</span></span>
   <span><span><span>&lt;</span>head</span><span>&gt;</span></span><span><span><span>&lt;/</span>head</span><span>&gt;</span></span>
   <span><span><span>&lt;</span>body</span> <span>data-new-gr-c-s-check-loaded</span><span><span>=</span><span>&#34;</span>14.1026.0<span>&#34;</span></span> <span>data-gr-ext-installed</span><span><span>=</span><span>&#34;</span><span>&#34;</span></span><span>&gt;</span></span>
      <span><span><span>&lt;</span>h1</span><span>&gt;</span></span>Whitelabel Error Page<span><span><span>&lt;/</span>h1</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>p</span><span>&gt;</span></span>This application has no explicit mapping for /error, so you are seeing this as a fallback.<span><span><span>&lt;/</span>p</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>&#34;</span>created<span>&#34;</span></span><span>&gt;</span></span>Sun Aug 15 14:32:17 UTC 2021<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>div</span><span>&gt;</span></span>There was an unexpected error (type=Internal Server Error, status=500).<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>div</span><span>&gt;</span></span><span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
   <span><span><span>&lt;/</span>body</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>html</span><span>&gt;</span></span></code></pre><p>This is what the <em>Whitelabel</em> HTML page looks like in your browser:
<img src="https://images.ctfassets.net/23aumh6u8s0i/3uDV4oIkM9VkBKdc37xA9n/647cc2fc212b61a1aa3ff4d52a99c032/whitelabel-error-page.jpg" alt="The Spring Boot Whitelabel HTML Error Page" title="The Spring Boot Whitelabel HTML Error Page"/>
</p><p><i>The Spring Boot Whitelabel HTML Error Page</i></p><p>Similarly, when dealing with REST requests, Spring Boot automatically returns a default JSON response in case of errors. This contains the same information as the aforementioned <em>Whitelabel</em> HTML error page and looks as follows:</p><pre><code><span>{</span>
  <span>&#34;timestamp&#34;</span><span>:</span> <span>&#34;2021-15-08T14:32:17.947+0000&#34;</span><span>,</span>
  <span>&#34;status&#34;</span><span>:</span> <span>500</span><span>,</span>
  <span>&#34;error&#34;</span><span>:</span> <span>&#34;Internal Server Error&#34;</span><span>,</span>
  <span>&#34;path&#34;</span><span>:</span> <span>&#34;/test&#34;</span>
<span>}</span></code></pre><p>As you can see, the default Spring Boot error handling responses for REST does not provide much information. This can quickly become a problem, especially when trying to debug. It is also problematic for front-end developers, who need detailed information coming from API error response messages to be able to explain to the end users what happened properly. </p><p>Let’s see how to replace this default response with custom-defined messages. While this may appear like an easy task, this is actually a tricky one. To achieve it, you first need to know a few Spring Boot fundamentals. Let&#39;s learn more about them.</p><h2 id="Custom-Error-Handling-in-Spring-Boot">Custom Error Handling in Spring Boot</h2><p>You are about to see two different approaches to custom error handling in Spring Boot REST applications. Both are based on a <code>@ControllerAdvice</code> annotated class handling all exceptions that may occur. So, let’s first see what a <code>@ControllerAdvice</code> annotated class is, why to use it, how, and when. Then, you will learn how to implement the two different approaches in detail. Finally, the pros and cons of each method will be explained.</p><h2 id="Handling-Exceptions-with---ControllerAdvice-">Handling Exceptions with <code>@ControllerAdvice</code></h2><p>The <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html" target="_blank" rel="noreferrer noopener"><code>@ControllerAdvice</code></a> annotation was introduced in <a href="https://docs.spring.io/spring-framework/docs/3.2.8.RELEASE/changelog.txt" target="_blank" rel="noreferrer noopener">Spring 3.2</a> to make exception handling logic easier and entirely definable in one place. In fact, <code>@ControllerAdvice</code> allows you to address exception handling across the whole application. In other words, a single <code>@ControllerAdvice</code> annotated class can handle exceptions thrown from any place in your application. Thus, classes annotated with <code>@ControllerAdvice</code> are powerful and flexible tools. Not only do they allow you to centralize exception-handling logic into a global component, but also give you control over the body response, as well as the HTTP status code. This is especially important when trying to achieve custom error handling. Let’s see <code>@ControllerAdvice</code> in action.</p><p>Now, you are about to see everything required to implement two custom error handling approaches based on <code>@ControllerAdvice</code>. First, you should clone <a href="https://github.com/Tonel/spring-boot-custom-error-handling" target="_blank" rel="noreferrer noopener">the GitHub repository</a> supporting this article. By analyzing the codebase, going through this article will become easier. Also, you will be able to immediately see the two approaches in action.</p><p>So, clone the repository with the following command:</p><pre><code><span>git</span> clone https://github.com/Tonel/spring-boot-custom-error-handling</code></pre><p>Then, run the <code>DemoApplication</code> main class by following <a href="https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/using-boot-running-your-application.html" target="_blank" rel="noreferrer noopener">this guide from the Spring Boot official documentation</a>, and reach one of the following 4 endpoints to see the custom error handling responses:</p><ol start="1"><li><code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>8080</span><span>/</span>test<span>-</span>custom<span>-</span>data<span>-</span>not<span>-</span>found<span>-</span>exception</code></li><li><code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>8080</span><span>/</span>test<span>-</span>custom<span>-</span>parameter<span>-</span>constraint<span>-</span>exception<span>?</span>value<span>=</span><span>12</span></code></li><li><code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>8080</span><span>/</span>test<span>-</span>custom<span>-</span>error<span>-</span>exception</code></li><li><code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>8080</span><span>/</span>test<span>-</span>generic<span>-</span>exception</code></li></ol><p>The first two APIs apply the first approach to error handling you are about to see, while the third API uses the second approach. The fourth and last API shows the fallback error handling logic presented above in action. Now, let&#39;s delve into implementing these two approaches to custom error handling in Spring Boot.</p><p>Both of them rely on an <code>ErrorMessage</code> class representing the custom error body placed in an <code>error</code> package, containing everything needed to deal with custom error handling logic. This can be implemented as follows:</p><pre><code><span>// src/main/java/com/customerrorhandling/demo/errors/ErrorResponse.java</span>

<span>package</span> <span>com<span>.</span>customerrorhandling<span>.</span>demo<span>.</span>errors</span><span>;</span>

<span>import</span> <span>com<span>.</span>fasterxml<span>.</span>jackson<span>.</span>annotation<span>.</span></span><span>JsonFormat</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>Getter</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>Setter</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>http<span>.</span></span><span>HttpStatus</span><span>;</span>
<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>Date</span><span>;</span>

<span>@Getter</span>
<span>@Setter</span>
<span>public</span> <span>class</span> <span>ErrorResponse</span> <span>{</span>
    <span>// customizing timestamp serialization format</span>
    <span>@JsonFormat</span><span>(</span>shape <span>=</span> <span>JsonFormat<span>.</span>Shape</span><span>.</span>STRING<span>,</span> pattern <span>=</span> <span>&#34;dd-MM-yyyy hh:mm:ss&#34;</span><span>)</span>
    <span>private</span> <span>Date</span> timestamp<span>;</span>

    <span>private</span> <span>int</span> code<span>;</span>

    <span>private</span> <span>String</span> status<span>;</span>

    <span>private</span> <span>String</span> message<span>;</span>

    <span>private</span> <span>String</span> stackTrace<span>;</span>

    <span>private</span> <span>Object</span> data<span>;</span>

    <span>public</span> <span>ErrorResponse</span><span>(</span><span>)</span> <span>{</span>
        timestamp <span>=</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>ErrorResponse</span><span>(</span>
            <span>HttpStatus</span> httpStatus<span>,</span>
            <span>String</span> message
    <span>)</span> <span>{</span>
        <span>this</span><span>(</span><span>)</span><span>;</span>
    
        <span>this</span><span>.</span>code <span>=</span> httpStatus<span>.</span><span>value</span><span>(</span><span>)</span><span>;</span>
        <span>this</span><span>.</span>status <span>=</span> httpStatus<span>.</span><span>name</span><span>(</span><span>)</span><span>;</span>
        <span>this</span><span>.</span>message <span>=</span> message<span>;</span>
    <span>}</span>

    <span>public</span> <span>ErrorResponse</span><span>(</span>
            <span>HttpStatus</span> httpStatus<span>,</span>
            <span>String</span> message<span>,</span>
            <span>String</span> stackTrace
    <span>)</span> <span>{</span>
        <span>this</span><span>(</span>
                httpStatus<span>,</span>
                message        
        <span>)</span><span>;</span>

        <span>this</span><span>.</span>stackTrace <span>=</span> stackTrace<span>;</span>
    <span>}</span>

    <span>public</span> <span>ErrorResponse</span><span>(</span>
            <span>HttpStatus</span> httpStatus<span>,</span>
            <span>String</span> message<span>,</span>
        <span>String</span> stackTrace<span>,</span>
            <span>Object</span> data
    <span>)</span> <span>{</span>
        <span>this</span><span>(</span>
                httpStatus<span>,</span>
                message<span>,</span>
        stackTrace
        <span>)</span><span>;</span>

        <span>this</span><span>.</span>data <span>=</span> data<span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>The <a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noreferrer noopener"><code>@Getter</code></a> and <a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noreferrer noopener"><code>@Setter</code></a> annotations used in the code examples above are part of the <a href="https://projectlombok.org/" target="_blank" rel="noreferrer noopener"><code>Project Lombok</code></a>. They are used to automatically generate getters and setters. This is not mandatory and is just an additional way to avoid boilerplate code. Read <a href="https://auth0.com/blog/a-complete-guide-to-lombok/" target="_blank" rel="noreferrer noopener">this</a> article to find out more about Lombok.</p><p><code>ErrorResponse</code> carries information such as an HTTP status <code>code</code> and <code>name</code>, a <code>timestamp</code> indicating when the error occurred, an optional error <code>message</code>, an optional <a href="https://en.wikibooks.org/wiki/Java_Programming/Stack_trace" target="_blank" rel="noreferrer noopener"><code>exception stacktrace</code></a>, and an optional object containing any kind of <code>data</code>. You should try to provide values to the first three fields, while the latter should be used only when required. In particular, the <code>stackTrace</code> field should be valorized only in staging or development environments, as explained <a href="https://betterprogramming.pub/environment-based-error-handling-with-spring-boot-and-kotlin-b36b901135ad" target="_blank" rel="noreferrer noopener">here</a>. Similarly, the data field should be used only when additional data is required. Specifically, to explain in detail what happened or let the front-end better handle the error.</p><p>This class can be used to achieve a custom response when handling exceptions with <code>@ControllerAdvice</code> as below:</p><pre><code><span>// src/main/java/com/customerrorhandling/demo/errors/CustomControllerAdvice.java</span>

<span>package</span> <span>com<span>.</span>customerrorhandling<span>.</span>demo<span>.</span>errors</span><span>;</span>

<span>import</span> <span>exceptions<span>.</span></span><span>CustomDataNotFoundException</span><span>;</span>
<span>import</span> <span>exceptions<span>.</span></span><span>CustomErrorException</span><span>;</span>
<span>import</span> <span>exceptions<span>.</span></span><span>CustomParameterConstraintException</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>http<span>.</span></span><span>HttpStatus</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>http<span>.</span></span><span>ResponseEntity</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>ControllerAdvice</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>ExceptionHandler</span><span>;</span>
<span>import</span> <span>java<span>.</span>io<span>.</span></span><span>PrintWriter</span><span>;</span>
<span>import</span> <span>java<span>.</span>io<span>.</span></span><span>StringWriter</span><span>;</span>

<span>@ControllerAdvice</span>
<span>class</span> <span>CustomControllerAdvice</span> <span>{</span>
    <span>@ExceptionHandler</span><span>(</span><span>NullPointerException</span><span>.</span><span>class</span><span>)</span> <span>// exception handled</span>
    <span>public</span> <span>ResponseEntity</span><span><span>&lt;</span><span>ErrorResponse</span><span>&gt;</span></span> <span>handleNullPointerExceptions</span><span>(</span>
        <span>Exception</span> e
    <span>)</span> <span>{</span>
        <span>// ... potential custom logic</span>

        <span>HttpStatus</span> status <span>=</span> <span>HttpStatus</span><span>.</span>NOT_FOUND<span>;</span> <span>// 404</span>

        <span>return</span> <span>new</span> <span>ResponseEntity</span><span><span>&lt;</span><span>&gt;</span></span><span>(</span>
            <span>new</span> <span>ErrorResponse</span><span>(</span>
              status<span>,</span> 
              e<span>.</span><span>getMessage</span><span>(</span><span>)</span>
            <span>)</span><span>,</span>
            status
        <span>)</span><span>;</span>
    <span>}</span>

    <span>// fallback method</span>
    <span>@ExceptionHandler</span><span>(</span><span>Exception</span><span>.</span><span>class</span><span>)</span> <span>// exception handled</span>
    <span>public</span> <span>ResponseEntity</span><span><span>&lt;</span><span>ErrorResponse</span><span>&gt;</span></span> <span>handleExceptions</span><span>(</span>
        <span>Exception</span> e
    <span>)</span> <span>{</span>
        <span>// ... potential custom logic</span>

        <span>HttpStatus</span> status <span>=</span> <span>HttpStatus</span><span>.</span>INTERNAL_SERVER_ERROR<span>;</span> <span>// 500</span>

    <span>// converting the stack trace to String</span>
    <span>StringWriter</span> stringWriter <span>=</span> <span>new</span> <span>StringWriter</span><span>(</span><span>)</span><span>;</span>
    <span>PrintWriter</span> printWriter <span>=</span> <span>new</span> <span>PrintWriter</span><span>(</span>stringWriter<span>)</span><span>;</span>
    e<span>.</span><span>printStackTrace</span><span>(</span>printWriter<span>)</span><span>;</span>
    <span>String</span> stackTrace <span>=</span> stringWriter<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>

        <span>return</span> <span>new</span> <span>ResponseEntity</span><span><span>&lt;</span><span>&gt;</span></span><span>(</span>
            <span>new</span> <span>ErrorResponse</span><span>(</span>
              status<span>,</span> 
              e<span>.</span><span>getMessage</span><span>(</span><span>)</span><span>,</span> 
              stackTrace <span>// specifying the stack trace in case of 500s</span>
            <span>)</span><span>,</span>
            status
        <span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>As you can see, <code>@ControllerAdvice</code> works by employing the <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html" target="_blank" rel="noreferrer noopener"><code>@ExceptionHandler</code></a> method-level annotation. This annotation allows you to define which method should be called in case of an error. Specifically, the exception thrown is compared to the exceptions passed as parameters to <code>@ExceptionHandler</code> based on type. The first method where there is a match is called. If none matched, then the exception&#39;s parent class is tested, and so on. This is also why you should implement a fallback method to cover all remaining cases. You can achieve this by passing the <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Exception.html" target="_blank" rel="noreferrer noopener"><code>Exception</code></a> class to the <code>@ExceptionHandler</code> annotation, just like in the <code>handleExceptions</code> method. In fact, any exception in Java must have <code>Exception</code> as one of its ancestors in their inheritance chain. So, they all extend directly — or as subclasses — the <code>Exception</code> <a href="https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html" target="_blank" rel="noreferrer noopener">superclass</a>.</p><p>Then, each method handles the error and might even implement custom logic, such as logging. In this example, each exception is handled by returning a <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html" target="_blank" rel="noreferrer noopener"><code>ResponseEntity</code></a> having the desired <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/HttpStatus.html" target="_blank" rel="noreferrer noopener"><code>HttpStatus</code></a>. This will be used as an HTTP status code associated with the error response. Similarly, the <code>ErrorResponse</code> instance passed to the <code>ResponseEntity</code> constructor will be automatically serialized in JSON and used as the message body. This way, custom error handling has just been achieved.</p><p>Now, you will dive into how to use <code>@ConfrollerAdvice</code> to implement two different approaches to custom error handling for REST in Spring Boot Web. The first one involves boilerplate code, but it is clean and best-practice based. In contrast, the second represents a good solution in terms of convenience, although it is a bit dirty.</p><h3 id="Defining-Many-Custom-Exceptions">Defining Many Custom Exceptions</h3><p>This approach involves having as many methods in your <code>@ControllerAdvice</code> as many HTTP error status codes you want to handle. These methods will be related to one or more exceptions and return an error message with a particular HTTP status code. Implementing such an approach required three steps. First, you have to think about all the HTTP error status codes you want your application to return. Then, you have to define a method for each of them in your <code>@ControllerAdvice</code> annotated class. Lastly, you have to associate these methods with their exceptions with the <code>@ExceptionHandler</code> annotation.</p><p>This means that all exceptions of a particular type will be traced back to their relative method in the <code>@ControllerAdvice</code> annotated class. This may represent a problem, especially considering some exceptions are more common than others, such as <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/NullPointerException.html" target="_blank" rel="noreferrer noopener"><code>NullPointerException</code></a>. Since these exceptions can be thrown in many parts of your logic, they might have different meanings. Thus, they represent various errors and, therefore, other HTTP status codes.</p><p>The solution is to introduce new custom exceptions wrapping these frequent exceptions. For example, a <code>NullPointerException</code> can become a <code>CustomParameterConstraintException</code> exception at the controller layer, and a <code>CustomDataNotFoundException</code> at the DAO  (<a href="https://it.wikipedia.org/wiki/Data_Access_Object" target="_blank" rel="noreferrer noopener">Data Access Object</a>) layer. In this case, the first one can be associated with a <em>400 Bad Request</em>, and the second with a <em>404 Not Found</em> HTTP status. The idea behind these exceptions is to give the error that occurred a more specific meaning. This better characterizes the error and makes it more handleable in the <code>@ControllerAdvice</code> annotated class accordingly. So, you should define a custom exception for each particular error you want to handle. Also, using custom exception classes represents undoubtedly a clean code principle. Thus, by adopting it, you are going to have more than one benefit.</p><p>So, let’s see this approach in action through an example. Firstly, you have to define custom exceptions, as shown here:</p><pre><code><span>// src/main/java/exceptions/CustomParameterConstraintException.java</span>

<span>package</span> <span>exceptions</span><span>;</span>

<span>public</span> <span>class</span> <span>CustomParameterConstraintException</span> <span>extends</span> <span>RuntimeException</span> <span>{</span>  
    <span>public</span> <span>CustomParameterConstraintException</span><span>(</span><span>)</span> <span>{</span>
        <span>super</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>CustomParameterConstraintException</span><span>(</span><span>String</span> message<span>)</span> <span>{</span>
        <span>super</span><span>(</span>message<span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><pre><code><span>// src/main/java/exceptions/CustomDataNotFoundException.java</span>

<span>package</span> <span>exceptions</span><span>;</span>

<span>public</span> <span>class</span> <span>CustomDataNotFoundException</span> <span>extends</span> <span>RuntimeException</span> <span>{</span>  
    <span>public</span> <span>CustomDataNotFoundException</span><span>(</span><span>)</span> <span>{</span>
        <span>super</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>CustomDataNotFoundException</span><span>(</span><span>String</span> message<span>)</span> <span>{</span>
        <span>super</span><span>(</span>message<span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>Then, use them to wrap frequent exceptions, or to throw them in case of particular circumstances representing errors in your business logic. Let’s see how with two examples:</p><pre><code><span>// DAO-level method</span>
<span>public</span> <span>Foo</span> <span>retrieveFooById</span><span>(</span>
    <span>int</span> id
<span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
        <span>// data retrieving logic</span>
    <span>}</span> <span>catch</span> <span>(</span><span>NullPointerException</span> e<span>)</span> <span>{</span>
        <span>throw</span> <span>new</span> <span>CustomDataNotFoundException</span><span>(</span>e<span>.</span><span>getMessage</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>As shown above, a generic <code>NullPointerException</code> is turned into a more meaningful <code>CustomDataNotFoundException</code>.</p><pre><code><span>// controller-level method method</span>
<span>public</span> <span>ResponseEntity</span><span><span>&lt;</span><span>Void</span><span>&gt;</span></span> <span>performOperation</span><span>(</span>
    <span>int</span> numberOfAttempts
<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>numberOfAttempts <span>&lt;=</span> <span>0</span> <span>||</span> numberOfAttempts <span>&gt;=</span> <span>5</span><span>)</span>
        <span>throw</span> <span>new</span> <span>CustomParameterConstraintException</span><span>(</span><span>&#34;numberOfAttempts must be &gt;= 0 and &lt;= 5!&#34;</span><span>)</span><span>;</span>
        
    <span>// business logic</span>
<span>}</span></code></pre><p>Here, a particular behavior that should not happen is intercepted. Then, the custom <code>CustomParameterConstraintException</code> exception describing it is thrown.</p><p>Finally, all you have to do is add two particular methods to your <code>@ControllerAdvice</code> annotated class, one for each specific error.</p><pre><code><span>// src/main/java/com/customerrorhandling/demo/errors/CustomControllerAdvice.java</span>

<span>package</span> <span>com<span>.</span>customerrorhandling<span>.</span>demo<span>.</span>errors</span><span>;</span>

<span>import</span> <span>exceptions<span>.</span></span><span>CustomDataNotFoundException</span><span>;</span>
<span>import</span> <span>exceptions<span>.</span></span><span>CustomErrorException</span><span>;</span>
<span>import</span> <span>exceptions<span>.</span></span><span>CustomParameterConstraintException</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>http<span>.</span></span><span>HttpStatus</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>http<span>.</span></span><span>ResponseEntity</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>ControllerAdvice</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>ExceptionHandler</span><span>;</span>
<span>import</span> <span>java<span>.</span>io<span>.</span></span><span>PrintWriter</span><span>;</span>
<span>import</span> <span>java<span>.</span>io<span>.</span></span><span>StringWriter</span><span>;</span>

<span>@ControllerAdvice</span>
<span>class</span> <span>CustomControllerAdvice</span> <span>{</span>
    <span>// ...</span>

    <span>@ExceptionHandler</span><span>(</span><span>CustomDataNotFoundException</span><span>.</span><span>class</span><span>)</span>
    <span>public</span> <span>ResponseEntity</span><span><span>&lt;</span><span>ErrorResponse</span><span>&gt;</span></span> <span>handleCustomDataNotFoundExceptions</span><span>(</span>
        <span>Exception</span> e
    <span>)</span> <span>{</span>
        <span>HttpStatus</span> status <span>=</span> <span>HttpStatus</span><span>.</span>NOT_FOUND<span>;</span> <span>// 404</span>

    <span>// converting the stack trace to String</span>
    <span>StringWriter</span> stringWriter <span>=</span> <span>new</span> <span>StringWriter</span><span>(</span><span>)</span><span>;</span>
    <span>PrintWriter</span> printWriter <span>=</span> <span>new</span> <span>PrintWriter</span><span>(</span>stringWriter<span>)</span><span>;</span>
    e<span>.</span><span>printStackTrace</span><span>(</span>printWriter<span>)</span><span>;</span>
    <span>String</span> stackTrace <span>=</span> stringWriter<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>

        <span>return</span> <span>new</span> <span>ResponseEntity</span><span><span>&lt;</span><span>&gt;</span></span><span>(</span>
            <span>new</span> <span>ErrorResponse</span><span>(</span>
              status<span>,</span> 
              e<span>.</span><span>getMessage</span><span>(</span><span>)</span><span>,</span>
          stackTrace<span>,</span> <span>// assuming to be in staging environment, otherwise stackTrace should not be valorized</span>
            <span>)</span><span>,</span>
            status
        <span>)</span><span>;</span>
    <span>}</span>

    <span>@ExceptionHandler</span><span>(</span><span>CustomParameterConstraintException</span><span>.</span><span>class</span><span>)</span>
    <span>public</span> <span>ResponseEntity</span><span><span>&lt;</span><span>ErrorResponse</span><span>&gt;</span></span> <span>handleCustomParameterConstraintExceptions</span><span>(</span>
        <span>Exception</span> e
    <span>)</span> <span>{</span>
        <span>HttpStatus</span> status <span>=</span> <span>HttpStatus</span><span>.</span>BAD_REQUEST<span>;</span> <span>// 400</span>

        <span>return</span> <span>new</span> <span>ResponseEntity</span><span><span>&lt;</span><span>&gt;</span></span><span>(</span>
            <span>new</span> <span>ErrorResponse</span><span>(</span>
              status<span>,</span> 
              e<span>.</span><span>getMessage</span><span>(</span><span>)</span>
            <span>)</span><span>,</span>
            status
        <span>)</span><span>;</span>
    <span>}</span>

    <span>// ...</span>
<span>}</span></code></pre><p>Et voilà! Both errors originally related to the same exception were first characterized and then handled accordingly.</p><p>Now, let&#39;s see the difference. This is what the default error response would look like on a 404 error:</p><pre><code><span>{</span>
  <span>&#34;timestamp&#34;</span><span>:</span> <span>&#34;2021-15-08T14:32:17.947+0000&#34;</span><span>,</span>
  <span>&#34;status&#34;</span><span>:</span> <span>404</span><span>,</span>
  <span>&#34;error&#34;</span><span>:</span> <span>&#34;Not Found&#34;</span><span>,</span>
  <span>&#34;path&#34;</span><span>:</span> <span>&#34;/test404&#34;</span>
<span>}</span></code></pre><p>And this is what the custom error response just implemented looks like:</p><pre><code><span>{</span>
  <span>&#34;timestamp&#34;</span><span>:</span> <span>&#34;2021-15-08 14:32:17&#34;</span><span>,</span>
  <span>&#34;code&#34;</span><span>:</span> <span>404</span><span>,</span>
  <span>&#34;status&#34;</span><span>:</span> <span>&#34;NOT_FOUND&#34;</span><span>,</span>
  <span>&#34;message&#34;</span><span>:</span> <span>&#34;Resource not found&#34;</span><span>,</span>
  <span>&#34;stackTrace&#34;</span><span>:</span> &#34;Exception in thread \&#34;main\&#34; com.example.demo.exceptions.CustomDataNotFoundException
        at com.example.demo.AuthorController.getAuthor(AuthorController.java<span>:</span><span>16</span>)
        at com.example.demo.AuthorService.getAuthor(AuthorService.java<span>:</span><span>37</span>)
        at com.example.demo.AuthorDao.getById(AuthorDao.java<span>:</span><span>24</span>)&#34;
<span>}</span></code></pre><h3 id="Defining-a-Single-Custom-Exception-Carrying-All-Data">Defining a Single Custom Exception Carrying All Data</h3><p>This approach involves defining a custom exception carrying the HTTP status to use, and all the data required to describe the error that occurred. The idea is to turn every exception you want to handle, or you would like to throw under special circumstances, into an instance of this particular exception. This way, you are spreading the error characterization logic into all your code. So, you will only have to add a new method in your <code>@ControllerAdvice</code> annotated class to handle this custom exception accordingly.</p><p>First, you have to define a custom error handling exception. This can be achieved as follows:</p><pre><code><span>// src/main/java/exceptions/CustomErrorException.java</span>

<span>package</span> <span>exceptions</span><span>;</span>

<span>import</span> <span>lombok<span>.</span></span><span>Getter</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>Setter</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>http<span>.</span></span><span>HttpStatus</span><span>;</span>

<span>@Getter</span>
<span>@Setter</span>
<span>public</span> <span>class</span> <span>CustomErrorException</span> <span>extends</span> <span>RuntimeException</span> <span>{</span>
    <span>private</span> <span>HttpStatus</span> status <span>=</span> <span>null</span><span>;</span>

    <span>private</span> <span>Object</span> data <span>=</span> <span>null</span><span>;</span>

    <span>public</span> <span>CustomErrorException</span><span>(</span><span>)</span> <span>{</span>
      <span>super</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

   <span>public</span> <span>CustomErrorException</span><span>(</span>
      <span>String</span> message
   <span>)</span> <span>{</span> 
      <span>super</span><span>(</span>message<span>)</span><span>;</span>
   <span>}</span>

    <span>public</span> <span>CustomErrorException</span><span>(</span>
        <span>HttpStatus</span> status<span>,</span>
        <span>String</span> message
    <span>)</span> <span>{</span>
        <span>this</span><span>(</span>message<span>)</span><span>;</span>
        <span>this</span><span>.</span>status <span>=</span> status<span>;</span>
    <span>}</span>

    <span>public</span> <span>CustomErrorException</span><span>(</span>
        <span>HttpStatus</span> status<span>,</span>
        <span>String</span> message<span>,</span>
        <span>Object</span> data
    <span>)</span> <span>{</span>
        <span>this</span><span>(</span>
          status<span>,</span>
      message
        <span>)</span><span>;</span>
        <span>this</span><span>.</span>data <span>=</span> data<span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>Again, the <a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noreferrer noopener"><code>@Getter</code></a> and <a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noreferrer noopener"><code>@Setter</code></a> annotations were used to avoid boilerplate code and are not mandatory. As you can see, the <code>CustomErrorException</code> class carries the same data used in the <code>ErrorResponse</code> class to better describe what happened and present the errors to the end-users.</p><p>So, you can use this exception to wrap other exceptions, or you can throw it in case of particular circumstances constituting errors in your business logic. Now, let’s see how with two examples:</p><pre><code><span>// DAO-level method</span>
<span>public</span> <span>Foo</span> <span>retrieveFooById</span><span>(</span>
    <span>int</span> id
<span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
        <span>// data retrieving logic</span>
    <span>}</span> <span>catch</span> <span>(</span><span>NullPointerException</span> e<span>)</span> <span>{</span>
        <span>throw</span> <span>new</span> <span>CustomErrorException</span><span>(</span>
          <span>HttpStatus</span><span>.</span>NOT_FOUND<span>,</span>
          e<span>.</span><span>getMessage</span><span>(</span><span>)</span><span>,</span>
          <span>(</span><span>Integer</span><span>)</span> id
        <span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>Here, an insufficiently significant <code>NullPointerException</code> is turned into a more detailed <code>CustomErrorException</code> containing all the data to describe why the error occurred.</p><pre><code><span>// controller-level method method</span>
<span>public</span> <span>ResponseEntity</span><span><span>&lt;</span><span>Void</span><span>&gt;</span></span> <span>performOperation</span><span>(</span>
    <span>int</span> numberOfAttempts
<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>numberOfAttempts <span>&lt;=</span> <span>0</span> <span>||</span> numberOfAttempts <span>&gt;=</span> <span>5</span><span>)</span> <span>{</span>
        <span>throw</span> <span>new</span> <span>CustomErrorException</span><span>(</span>
          <span>HttpStatus</span><span>.</span>BAD_REQUEST<span>,</span>
          <span>&#34;numberOfAttempts must be &gt;= 0 and &lt;= 5!&#34;</span><span>,</span>
          <span>(</span><span>Integer</span><span>)</span> numberOfAttempts
        <span>)</span><span>;</span>
    <span>}</span>
        
    <span>// business logic</span>
<span>}</span></code></pre><p>Similarly, a particular behavior that is not supposed to happen is intercepted. Consequently, a <code>CustomErrorException</code> exception containing all the useful data to represent the error is thrown.</p><p>Lastly, add one method to handle <code>CustomErrorException</code> exception instances to your <code>@ControllerAdvice</code> annotated class, as below:</p><pre><code><span>// src/main/java/com/customerrorhandling/demo/errors/CustomControllerAdvice.java</span>

<span>package</span> <span>com<span>.</span>customerrorhandling<span>.</span>demo<span>.</span>errors</span><span>;</span>

<span>import</span> <span>exceptions<span>.</span></span><span>CustomDataNotFoundException</span><span>;</span>
<span>import</span> <span>exceptions<span>.</span></span><span>CustomErrorException</span><span>;</span>
<span>import</span> <span>exceptions<span>.</span></span><span>CustomParameterConstraintException</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>http<span>.</span></span><span>HttpStatus</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>http<span>.</span></span><span>ResponseEntity</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>ControllerAdvice</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>ExceptionHandler</span><span>;</span>
<span>import</span> <span>java<span>.</span>io<span>.</span></span><span>PrintWriter</span><span>;</span>
<span>import</span> <span>java<span>.</span>io<span>.</span></span><span>StringWriter</span><span>;</span>

<span>@ControllerAdvice</span>
<span>class</span> <span>CustomControllerAdvice</span> <span>{</span>
    <span>// ...</span>

    <span>@ExceptionHandler</span><span>(</span><span>CustomErrorException</span><span>.</span><span>class</span><span>)</span>
    <span>public</span> <span>ResponseEntity</span><span><span>&lt;</span><span>ErrorResponse</span><span>&gt;</span></span> <span>handleCustomErrorExceptions</span><span>(</span>
            <span>Exception</span> e
    <span>)</span> <span>{</span>
        <span>// casting the generic Exception e to CustomErrorException</span>
        <span>CustomErrorException</span> customErrorException <span>=</span> <span>(</span><span>CustomErrorException</span><span>)</span> e<span>;</span>

        <span>HttpStatus</span> status <span>=</span> customErrorException<span>.</span><span>getStatus</span><span>(</span><span>)</span><span>;</span>

        <span>// converting the stack trace to String</span>
        <span>StringWriter</span> stringWriter <span>=</span> <span>new</span> <span>StringWriter</span><span>(</span><span>)</span><span>;</span>
        <span>PrintWriter</span> printWriter <span>=</span> <span>new</span> <span>PrintWriter</span><span>(</span>stringWriter<span>)</span><span>;</span>
        customErrorException<span>.</span><span>printStackTrace</span><span>(</span>printWriter<span>)</span><span>;</span>
        <span>String</span> stackTrace <span>=</span> stringWriter<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>

        <span>return</span> <span>new</span> <span>ResponseEntity</span><span><span>&lt;</span><span>&gt;</span></span><span>(</span>
                <span>new</span> <span>ErrorResponse</span><span>(</span>
                        status<span>,</span>
                        customErrorException<span>.</span><span>getMessage</span><span>(</span><span>)</span><span>,</span>
                        stackTrace<span>,</span>
                        customErrorException<span>.</span><span>getData</span><span>(</span><span>)</span>
                <span>)</span><span>,</span>
                status
        <span>)</span><span>;</span>
    <span>}</span>

    <span>// ...</span>
<span>}</span></code></pre><p>Note that <code>@ExceptionHandler</code> can accept more than one exception type. This means that the parameter of the method representing the exception must be downcasted. Otherwise, a <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/ClassCastException.html" target="_blank" rel="noreferrer noopener"><code>ClassCastException</code></a> will be throw. So, upcast the exception <code>e</code> to <code>CustomErrorException</code> inside the method. Then, you will be able to access its particular fields and define a valid <code>ErrorResponse</code> instance.</p><p>Done! This way each error that occurs is encapsulated into an exception containing everything required to describe it.</p><p>Now, let&#39;s see the difference. This is what the default error response on a 404 error would look like:</p><pre><code><span>{</span>
  <span>&#34;timestamp&#34;</span><span>:</span> <span>&#34;2021-15-08T14:32:17.947+0000&#34;</span><span>,</span>
  <span>&#34;status&#34;</span><span>:</span> <span>404</span><span>,</span>
  <span>&#34;error&#34;</span><span>:</span> <span>&#34;Not Found&#34;</span><span>,</span>
  <span>&#34;message&#34;</span><span>:</span> <span>&#34;&#34;</span><span>,</span>
  <span>&#34;path&#34;</span><span>:</span> <span>&#34;/test404&#34;</span>
<span>}</span></code></pre><p>And this is what the custom error response just implemented looks like:</p><pre><code><span>{</span>
  <span>&#34;timestamp&#34;</span><span>:</span> <span>&#34;2021-15-08 14:32:17&#34;</span><span>,</span>
  <span>&#34;code&#34;</span><span>:</span> <span>404</span><span>,</span>
  <span>&#34;status&#34;</span><span>:</span> <span>&#34;NOT_FOUND&#34;</span><span>,</span>
  <span>&#34;message&#34;</span><span>:</span> <span>&#34;Resource not found&#34;</span><span>,</span>
  <span>&#34;stackTrace&#34;</span><span>:</span> &#34;Exception in thread \&#34;main\&#34; com.example.demo.exceptions.CustomErrorException
        at com.example.demo.AuthorController.getAuthor(AuthorController.java<span>:</span><span>16</span>)
        at com.example.demo.AuthorService.getAuthor(AuthorService.java<span>:</span><span>37</span>)
        at com.example.demo.AuthorDao.getById(AuthorDao.java<span>:</span><span>24</span>)&#34;
<span>}</span></code></pre><h3 id="Pros-and-Cons-of-Each-Approach">Pros and Cons of Each Approach</h3><p>The first approach should be used when you do not want to spread error handling logic all over your codebase. In fact, the HTTP status code is only associated with errors in your <code>@ControllerAdvice</code> annotated class. This means that no layer knows how the error will be handled and presented to users. Although this should be the desired behavior because it respects the <a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege" target="_blank" rel="noreferrer noopener">principle of least privilege</a>, it does involve boilerplate code. In fact, you may easily end up with dozens of custom exceptions, and define them is a tedious and not-scalable approach.</p><p>So, you may want a less restricting approach, and this is why the second approach was presented. Unfortunately, this one is definitely dirtier. In fact, it requires you to spread detail about error handling logic in many different points of your code. In contrast, it is scalable and quicker to be implemented. So, despite not being the cleanest approach, it allows you to achieve the desired result with little effort. Plus, it is more maintainable than the first approach because it involves only a custom exception.</p><h2 id="Custom-Error-Handling-in-Spring-Security">Custom Error Handling in Spring Security</h2><p><a href="https://spring.io/projects/spring-security" target="_blank" rel="noreferrer noopener">Spring Security</a> is a powerful and highly customizable framework that provides both authentication and authorization. It is one of the most widely used Spring dependencies and represents the de-facto standard for securing a Spring Boot application.</p><p>In case of authentication and authorization failures, <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/AuthenticationException.html" target="_blank" rel="noreferrer noopener"><code>AuthenticationException</code></a> and <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/access/AccessDeniedException.html" target="_blank" rel="noreferrer noopener"><code>AccessDeniedException</code></a> are thrown respectively. Then, Spring Security takes care of encapsulating them in default error handling responses. If you want to customize them, the two approaches presented above are of no use. This is because <code>@ControllerAdvice</code> can handle only exceptions thrown by controllers, but <code>AuthenticationException</code> and <code>AccessDeniedException</code> are thrown by the Spring Security <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/access/intercept/AbstractSecurityInterceptor.html" target="_blank" rel="noreferrer noopener"><code>AbstractSecurityInterceptor</code></a> component - which is not a controller. In other words, a <code>@ControllerAdvice</code> annotated class cannot catch them. Achieving this requires custom logic. </p><h3 id="Implementing-Custom-Error-Handling-Logic-in-Spring-Security">Implementing Custom Error Handling Logic in Spring Security</h3><p>Let’s take a look at how to implement custom error handling in Spring Security. Luckily, this is not too complex since you can easily provide Spring Security with two components to handle authentication and authorization errors, respectively. What you need to do is to provide the <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/authentication/AuthenticationFailureHandler.html" target="_blank" rel="noreferrer noopener"><code>AuthenticationFailureHandler</code></a> interface with implementation, as follows:</p><pre><code><span>// src/main/java/com/auth0/hotsauces/security/CustomAuthenticationFailureHandler.java</span>

<span>package</span> <span>com<span>.</span>auth0<span>.</span>hotsauces<span>.</span>security</span><span>;</span>

<span>import</span> <span>com<span>.</span>fasterxml<span>.</span>jackson<span>.</span>annotation<span>.</span></span><span>JsonFormat</span><span>;</span>
<span>import</span> <span>com<span>.</span>fasterxml<span>.</span>jackson<span>.</span>databind<span>.</span></span><span>ObjectMapper</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>http<span>.</span></span><span>HttpStatus</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>security<span>.</span>core<span>.</span></span><span>AuthenticationException</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>security<span>.</span>web<span>.</span>authentication<span>.</span></span><span>AuthenticationFailureHandler</span><span>;</span>
<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>*</span><span>;</span>
<span>import</span> <span>javax<span>.</span>servlet<span>.</span>http<span>.</span></span><span>HttpServletRequest</span><span>;</span>
<span>import</span> <span>javax<span>.</span>servlet<span>.</span>http<span>.</span></span><span>HttpServletResponse</span><span>;</span>
<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>HashMap</span><span>;</span>

<span>public</span> <span>class</span> <span>CustomAuthenticationFailureHandler</span> <span>implements</span> <span>AuthenticationFailureHandler</span> <span>{</span>
    <span>// Jackson JSON serializer instance</span>
    <span>private</span> <span>ObjectMapper</span> objectMapper <span>=</span> <span>new</span> <span>ObjectMapper</span><span>(</span><span>)</span><span>;</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>onAuthenticationFailure</span><span>(</span>
      <span>HttpServletRequest</span> request<span>,</span>
      <span>HttpServletResponse</span> response<span>,</span>
      <span>AuthenticationException</span> exception
    <span>)</span> <span>throws</span> <span>IOException</span><span>,</span> <span>ServletException</span> <span>{</span> 
        <span>HttpStatus</span> httpStatus <span>=</span> <span>HttpStatus</span><span>.</span>UNAUTHORIZED<span>;</span> <span>// 401        </span>

        <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Object</span><span>&gt;</span></span> data <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>&gt;</span></span><span>(</span><span>)</span><span>;</span>
        data<span>.</span><span>put</span><span>(</span>
          <span>&#34;timestamp&#34;</span><span>,</span> 
          <span>new</span> <span>Date</span><span>(</span><span>)</span>
        <span>)</span><span>;</span>
        data<span>.</span><span>put</span><span>(</span>
          <span>&#34;code&#34;</span><span>,</span> 
          httpStatus<span>.</span><span>value</span><span>(</span><span>)</span><span>;</span>
        <span>)</span><span>;</span>
        data<span>.</span><span>put</span><span>(</span>
          <span>&#34;status&#34;</span><span>,</span> 
          httpStatus<span>.</span><span>name</span><span>(</span><span>)</span><span>;</span>
        <span>)</span><span>;</span>
        data<span>.</span><span>put</span><span>(</span>
          <span>&#34;message&#34;</span><span>,</span> 
          exception<span>.</span><span>getMessage</span><span>(</span><span>)</span>
        <span>)</span><span>;</span>
        
        <span>// setting the response HTTP status code</span>
        response<span>.</span><span>setStatus</span><span>(</span>httpStatus<span>.</span><span>value</span><span>(</span><span>)</span><span>)</span><span>;</span>
        
        <span>// serializing the response body in JSON</span>
        response
          <span>.</span><span>getOutputStream</span><span>(</span><span>)</span>
          <span>.</span><span>println</span><span>(</span>
              objectMapper<span>.</span><span>writeValueAsString</span><span>(</span>data<span>)</span>
          <span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>This will be used to handle <code>AuthenticationExceptions</code>.</p><p>Similarly, you can provide the <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/access/AccessDeniedHandler.html" target="_blank" rel="noreferrer noopener"><code>AccessDeniedHandler</code></a> interface with implementation to handle <code>AccessDeniedExceptions</code>.</p><pre><code><span>// src/main/java/com/auth0/hotsauces/security/CustomAccessDeniedHandler.java</span>

<span>package</span> <span>com<span>.</span>auth0<span>.</span>hotsauces<span>.</span>security</span><span>;</span>

<span>import</span> <span>com<span>.</span>fasterxml<span>.</span>jackson<span>.</span>annotation<span>.</span></span><span>JsonFormat</span><span>;</span>
<span>import</span> <span>com<span>.</span>fasterxml<span>.</span>jackson<span>.</span>databind<span>.</span></span><span>ObjectMapper</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>http<span>.</span></span><span>HttpStatus</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>security<span>.</span>core<span>.</span></span><span>AuthenticationException</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>security<span>.</span>web<span>.</span>authentication<span>.</span></span><span>AuthenticationFailureHandler</span><span>;</span>
<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>*</span><span>;</span>
<span>import</span> <span>javax<span>.</span>servlet<span>.</span>http<span>.</span></span><span>HttpServletRequest</span><span>;</span>
<span>import</span> <span>javax<span>.</span>servlet<span>.</span>http<span>.</span></span><span>HttpServletResponse</span><span>;</span>
<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>HashMap</span><span>;</span>

<span>public</span> <span>class</span> <span>CustomAccessDeniedHandler</span> <span>implements</span> <span>AccessDeniedHandler</span> <span>{</span>
    <span>// Jackson JSON serializer instance</span>
    <span>private</span> <span>ObjectMapper</span> objectMapper <span>=</span> <span>new</span> <span>ObjectMapper</span><span>(</span><span>)</span><span>;</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>handle</span><span>(</span>
      <span>HttpServletRequest</span> request<span>,</span>
      <span>HttpServletResponse</span> response<span>,</span>
      <span>AccessDeniedException</span> exception
    <span>)</span> <span>throws</span> <span>IOException</span><span>,</span> <span>ServletException</span> <span>{</span> 
        <span>HttpStatus</span> httpStatus <span>=</span> <span>HttpStatus</span><span>.</span>FORBIDDEN<span>;</span> <span>// 403        </span>

        <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Object</span><span>&gt;</span></span> data <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>&gt;</span></span><span>(</span><span>)</span><span>;</span>
        data<span>.</span><span>put</span><span>(</span>
          <span>&#34;timestamp&#34;</span><span>,</span> 
          <span>new</span> <span>Date</span><span>(</span><span>)</span>
        <span>)</span><span>;</span>
        data<span>.</span><span>put</span><span>(</span>
          <span>&#34;code&#34;</span><span>,</span> 
          httpStatus<span>.</span><span>value</span><span>(</span><span>)</span><span>;</span>
        <span>)</span><span>;</span>
        data<span>.</span><span>put</span><span>(</span>
          <span>&#34;status&#34;</span><span>,</span> 
          httpStatus<span>.</span><span>name</span><span>(</span><span>)</span><span>;</span>
        <span>)</span><span>;</span>
        data<span>.</span><span>put</span><span>(</span>
          <span>&#34;message&#34;</span><span>,</span> 
          exception<span>.</span><span>getMessage</span><span>(</span><span>)</span>
        <span>)</span><span>;</span>
        
        <span>// setting the response HTTP status code</span>
        response<span>.</span><span>setStatus</span><span>(</span>httpStatus<span>.</span><span>value</span><span>(</span><span>)</span><span>)</span><span>;</span>
        
        <span>// serializing the response body in JSON</span>
        response
          <span>.</span><span>getOutputStream</span><span>(</span><span>)</span>
          <span>.</span><span>println</span><span>(</span>
              objectMapper<span>.</span><span>writeValueAsString</span><span>(</span>data<span>)</span>
          <span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>Now, you just need to register these two custom implementations as authentication and authorization error handlers. You can do this as below:</p><pre><code><span>// src/main/java/com/auth0/hotsauces/security/SecurityConfig.java</span>

<span>package</span> <span>com<span>.</span>auth0<span>.</span>hotsauces<span>.</span>security</span><span>;</span>

<span>import</span> <span>org<span>.</span>springframework<span>.</span>beans<span>.</span>factory<span>.</span>annotation<span>.</span></span><span>Value</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Bean</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>security<span>.</span>config<span>.</span>annotation<span>.</span>web<span>.</span>builders<span>.</span></span><span>HttpSecurity</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>security<span>.</span>config<span>.</span>annotation<span>.</span>web<span>.</span>configuration<span>.</span></span><span>EnableWebSecurity</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>security<span>.</span>config<span>.</span>annotation<span>.</span>web<span>.</span>configuration<span>.</span></span><span>WebSecurityConfigurerAdapter</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>security<span>.</span>oauth2<span>.</span>core<span>.</span></span><span>DelegatingOAuth2TokenValidator</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>security<span>.</span>oauth2<span>.</span>core<span>.</span></span><span>OAuth2TokenValidator</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>security<span>.</span>oauth2<span>.</span>jwt<span>.</span></span><span>*</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>security<span>.</span>oauth2<span>.</span>server<span>.</span>resource<span>.</span>web<span>.</span></span><span>BearerTokenAuthenticationFilter</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>security<span>.</span>web<span>.</span>access<span>.</span></span><span>AccessDeniedHandler</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>security<span>.</span>web<span>.</span>authentication<span>.</span></span><span>AuthenticationFailureHandler</span><span>;</span>

<span>@EnableWebSecurity</span>
<span>public</span> <span>class</span> <span>SecurityConfig</span> <span>extends</span> <span>WebSecurityConfigurerAdapter</span> <span>{</span>
    <span>// ...</span>

    <span>@Override</span>
    <span>protected</span> <span>void</span> <span>configure</span><span>(</span><span>HttpSecurity</span> http<span>)</span> 
      <span>throws</span> <span>Exception</span> <span>{</span>
        http
          <span>.</span><span>authorizeRequests</span><span>(</span><span>)</span>
          <span>.</span><span>anyRequest</span><span>(</span><span>)</span>
          <span>.</span><span>authenticated</span><span>(</span><span>)</span>
          <span>.</span><span>and</span><span>(</span><span>)</span>
          <span>.</span><span>formLogin</span><span>(</span><span>)</span>
          <span>.</span><span>failureHandler</span><span>(</span><span>authenticationFailureHandler</span><span>(</span><span>)</span><span>)</span> 
          <span>.</span><span>and</span><span>(</span><span>)</span>
          <span>.</span><span>exceptionHandling</span><span>(</span><span>)</span>
          <span>.</span><span>accessDeniedHandler</span><span>(</span><span>accessDeniedHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Bean</span>
    <span>public</span> <span>AuthenticationFailureHandler</span> <span>authenticationFailureHandler</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>new</span> <span>CustomAuthenticationFailureHandler</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Bean</span>
    <span>public</span> <span>AccessDeniedHandler</span> <span>accessDeniedHandler</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>new</span> <span>CustomAccessDeniedHandler</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>Et voilà! Custom error handling in Spring Boot has just been achieved thanks to the <code>failureHandler</code> and <code>accessDeniedHandler</code> methods, which allows you to register a custom authentication error handler and a custom authorization error handler.</p><h3 id="Spring-Security-Custom-Error-Handling-in-Action">Spring Security Custom Error Handling in Action</h3><p>Now, let’s see how to implement it in a real-world example. First, read <a href="https://auth0.com/blog/build-and-secure-an-api-with-spring-boot/" target="_blank" rel="noreferrer noopener">this</a> article on how to protect APIs with Spring Security and Auth0. In the demo application produced in that article, no custom error handling is implemented. So, by making a request to a protected API including a wrong access token, the default Spring Boot error handling logic is applied. Let’s test it out.</p><p>If you are a macOS or Linux user, enter this command into the terminal:</p><pre><code>curl <span>-</span>i <span>--</span>request <span>GET</span> \
     <span>--</span>url http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>8080</span><span>/</span>api<span>/</span>hotsauces<span>/</span> \
     <span>-</span><span>H</span> <span>&#34;Content-Type: application/json&#34;</span> \
     <span>-</span><span>H</span> <span>&#34;authorization: Bearer wrong-token&#34;</span></code></pre><p>Otherwise, if you are a Windows user, enter this command into PowerShell:</p><pre><code>$accessToken <span>=</span> <span>&#34;wrong-token&#34;</span>
$headers <span>=</span> @<span>{</span>
    Authorization <span>=</span> <span>&#34;Bearer $accessToken&#34;</span>
<span>}</span>
$response <span>=</span> Invoke<span>-</span>RestMethod <span>&#34;http://localhost:8080/api/hotsauces/&#34;</span> `
    <span>-</span>Headers $headers
$response <span>|</span> ConvertTo<span>-</span>Json</code></pre><p>Then, the following response will be returned:</p><pre><code>Invoke<span>-</span>WebRequest<span>:</span> The remote server returned an error<span>:</span> <span>(</span><span>401</span><span>)</span> Unauthorized<span>.</span>
At line<span>:</span><span>1</span> char<span>:</span><span>1</span>
<span>+</span> Invoke<span>-</span>WebRequest <span>&#34;http://localhost:8080/api/hotsauces/&#34;</span>
<span>+</span> <span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span>
<span>+</span> CategoryInfo          <span>:</span> InvalidOperation<span>:</span> <span>(</span>System<span>.</span>Net<span>.</span>HttpWebRequest<span>:</span>HttpWebRequest<span>)</span> <span>[</span>Invoke<span>-</span>WebRequest<span>]</span><span>,</span> WebExc
   eption
<span>+</span> FullyQualifiedErrorId <span>:</span> WebCmdletWebResponseException<span>,</span>Microsoft<span>.</span>PowerShell<span>.</span>Commands<span>.</span>InvokeWebRequestCommand</code></pre><p>As you can see, a 401 error status code is returned, but with no details on what happened.</p><p>Now, let’s test the demo application extended with custom error handling logic. You can find it in <a href="https://github.com/Tonel/HotSauces" target="_blank" rel="noreferrer noopener">this GitHub repository</a>. The application is exactly the same as the previous one, except for the error handling logic. In particular, the aforementioned presented logic was implemented. </p><p>In this case, by launching the commands above, this message will be returned:</p><pre><code>Invoke<span>-</span>RestMethod <span>:</span> <span>{</span><span>&#34;code&#34;</span><span>:</span><span>401</span><span>,</span><span>&#34;message&#34;</span><span>:</span><span>&#34;An error occurred while attempting to decode the Jwt: Invalid JWT serialization: Missing dot delimiter(s)&#34;</span><span>,</span><span>&#34;timestamp&#34;</span><span>:</span><span>1629880611013</span><span>,</span><span>&#34;status&#34;</span><span>:</span><span>&#34;UNAUTHORIZED&#34;</span><span>}</span>
At line<span>:</span><span>1</span> char<span>:</span><span>1</span>
<span>+</span> $response <span>=</span> Invoke<span>-</span>RestMethod <span>&#34;http://localhost:8080/api/hotsauces/&#34;</span>  <span>...</span>
<span>+</span> <span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span>
<span>+</span> CategoryInfo          <span>:</span> InvalidOperation<span>:</span> <span>(</span>System<span>.</span>Net<span>.</span>HttpWebRequest<span>:</span>HttpWebRequest<span>)</span> <span>[</span>Invoke<span>-</span>WebRequest<span>]</span><span>,</span> WebExc
   eption
<span>+</span> FullyQualifiedErrorId <span>:</span> WebCmdletWebResponseException<span>,</span>Microsoft<span>.</span>PowerShell<span>.</span>Commands<span>.</span>InvokeWebRequestCommand</code></pre><p>As you can see, a JSON message representing the custom error handling logic was returned as expected. This contains the status code, the exception message, a timestamp, and the HTTP status code name, as follows:</p><pre><code><span>{</span>
  <span>&#34;code&#34;</span><span>:</span> <span>401</span><span>,</span>
  <span>&#34;message&#34;</span><span>:</span> <span>&#34;An error occurred while attempting to decode the Jwt: Invalid JWT serialization: Missing dot delimiter(s)&#34;</span><span>,</span>
  <span>&#34;timestamp&#34;</span><span>:</span> <span>1629880611013</span><span>,</span>
  <span>&#34;status&#34;</span><span>:</span> <span>&#34;UNAUTHORIZED&#34;</span>
<span>}</span></code></pre><h2 id="Conclusion">Conclusion</h2><p>In this article, we looked at how to implement custom error handling logic when dealing with REST applications in Spring Boot. This is not as easy a task as it may seem, and it requires knowing a few Spring Boot fundamentals. First, we delved into default error handling in Spring Boot and saw how poor the responses are. Then, we looked at <code>@ControllerAdvice</code> and learn everything required to implement custom error handling logic. In particular, two different approaches were shown. Both allow you to define custom error handling responses but have specific pros and cons. Finally, we learned how to achieve the same result when dealing with Spring Boot Security errors, which requires specific logic. As shown, achieving custom error handling in Spring Boot is not easy but definitely possible, and explaining when, why, and how to do it was what this article was aimed at.</p><p>Thanks for reading! I hope that you found this article helpful. Feel free to reach out to me with any questions, comments, or suggestions.</p></div></div>]]></content:encoded>
      <pubDate>Mon, 27 Sep 2021 15:29:00 +0000</pubDate>
    </item>
    <item>
      <title>ID Token and Access Token: What Is the Difference?</title>
      <link>https://auth0.com/blog/id-token-access-token-what-is-the-difference/</link>
      <description>Learn what ID and access tokens are and how to correctly use them in the OpenID Connect and OAuth context.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>&#34;Let’s use a token to secure this API call. Should I use the ID token or the access token? 🤔 The ID token looks nicer to me. After all, if I know who the user is, I can make better authorization decisions, right?&#34;</p><p>How many times have you found yourself making similar arguments? Choices based on your intuition may sound good, however, what looks intuitive not always is correct. In the case of ID and access tokens, they have clear and well-defined purposes, so you should use them based on that, not on your intuition.</p><p>&#34;What changes after all? They are just tokens. I can use them as I see fit. What can happen?&#34;</p><p>Let’s take a closer look at these two security tokens to better understand their role in authentication and authorization processes.</p><p>If you prefer, you can also watch this video on the same topic:</p><p><iframe src="https://www.youtube.com/embed/M4JIvUIE17c" frameborder="0" allowfullscreen=""></iframe></p><h2 id="What-Is-an-ID-Token-">What Is an ID Token?</h2><p>An ID token is an artifact that proves that <strong>the user has been authenticated</strong>. <a href="https://openid.net/connect/" target="_blank" rel="noreferrer noopener">OpenID Connect</a> provides you with it as the result of the user authentication process. By the way, OpenID Connect is an open standard for decentralized authentication used by many Identity providers such as Google, Facebook, Twitter, and, of course, Auth0. Check out <a href="https://auth0.com/docs/protocols/openid-connect-protocol" target="_blank" rel="noreferrer noopener">this document for more details on OpenID Connect</a>.</p><p>Well, this is a very basic definition of what an ID token is. Let’s see some other details.</p><p>An ID token is <strong>encoded as a JSON Web Token</strong> (JWT), a standard format that allows your application to easily inspect its content and make sure it comes from the expected issuer and no one else changed it. If you want to learn more on JWTs, check out <a href="https://auth0.com/resources/ebooks/jwt-handbook" target="_blank" rel="noreferrer noopener">The JWT Handbook</a>.</p><p>To put it simply, an example of ID token looks like this:</p><pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9<span>.</span>eyJpc3MiOiJodHRwOi8vbXktZG9tYWluLmF1dGgwLmNvbSIsInN1YiI6ImF1dGgwfDEyMzQ1NiIsImF1ZCI6IjEyMzRhYmNkZWYiLCJleHAiOjEzMTEyODE5NzAsImlhdCI6MTMxMTI4MDk3MCwibmFtZSI6IkphbmUgRG9lIiwiZ2l2ZW5fbmFtZSI6IkphbmUiLCJmYW1pbHlfbmFtZSI6IkRvZSJ9<span>.</span>bql<span>-</span>jxlG9B_bielkqOnjTY9Di9FillFb6IMQINXoYsw</code></pre><p>Of course, this isn&#39;t readable to the human eye, so you have to decode it to see what content the JWT holds. You can use one of the <a href="https://jwt.io/#libraries-io" target="_blank" rel="noreferrer noopener">many available libraries</a> to decode it or you can examine it yourself with the <a href="https://jwt.io/?id_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwOi8vbXktZG9tYWluLmF1dGgwLmNvbSIsInN1YiI6ImF1dGgwfDEyMzQ1NiIsImF1ZCI6IjEyMzRhYmNkZWYiLCJleHAiOjEzMTEyODE5NzAsImlhdCI6MTMxMTI4MDk3MCwibmFtZSI6IkphbmUgRG9lIiwiZ2l2ZW5fbmFtZSI6IkphbmUiLCJmYW1pbHlfbmFtZSI6IkRvZSJ9.bql-jxlG9B_bielkqOnjTY9Di9FillFb6IMQINXoYsw" target="_blank" rel="noreferrer noopener">jwt.io</a> debugger.</p><p>Without going deeper into the details, the relevant information carried by the ID token above looks like the following:</p><pre><code><span>{</span> 
  <span>&#34;iss&#34;</span><span>:</span> <span>&#34;http://my-domain.auth0.com&#34;</span><span>,</span> 
  <span>&#34;sub&#34;</span><span>:</span> <span>&#34;auth0|123456&#34;</span><span>,</span> 
  <span>&#34;aud&#34;</span><span>:</span> <span>&#34;1234abcdef&#34;</span><span>,</span> 
  <span>&#34;exp&#34;</span><span>:</span> <span>1311281970</span><span>,</span> 
  <span>&#34;iat&#34;</span><span>:</span> <span>1311280970</span><span>,</span> 
  <span>&#34;name&#34;</span><span>:</span> <span>&#34;Jane Doe&#34;</span><span>,</span> 
  <span>&#34;given_name&#34;</span><span>:</span> <span>&#34;Jane&#34;</span><span>,</span> 
  <span>&#34;family_name&#34;</span><span>:</span> <span>&#34;Doe&#34;</span>
<span>}</span></code></pre><p>These JSON properties are called <strong>claims</strong>, and they are <strong>declarations about the user</strong> and the token itself. The claims about the user define the user’s identity. Hence the name &#34;ID token&#34;.</p><p>One of the claims that is usually underrated is the <code>aud</code> claim. This claim defines the <strong>audience</strong> of the token, i.e., the application that is meant as <strong>the final recipient of the token</strong>. Its value is the client ID of the application that should use the token.</p><blockquote><p>Remember this small detail about the audience claim because it will help you better understand what its correct use is later on.</p></blockquote><p>Optionally, the ID token may have additional information about the user, such as their email address, picture, birthday, and so on.</p><p>Cool! Now you know what an ID token is. But, what can you do with an ID token?</p><p>First, it demonstrates that the user has been authenticated and so <strong>you can trust their identity</strong>.</p><p>Also, your application can <strong>personalize the user’s experience</strong> by using the claims about the user included in the ID token. For example, you can show their name on the UI, or display a wish message on their birthday. The fun part is that you don’t need to make additional requests, so you may get <strong>a little gain in performance</strong> for your application.</p><h2 id="What-Is-an-Access-Token-">What Is an Access Token?</h2><p>Now that you know what an ID token is, let’s try to understand what an access token is.</p><p>As the name says, an access token is an artifact that <strong>allows you to access a resource</strong>. That resource can be a file, an API, a database, or anything else which is protected from unauthorized access. The authorization server issues the access token.</p><p>In the <a href="https://auth0.com/docs/protocols/protocol-oauth2" target="_blank" rel="noreferrer noopener">OAuth 2</a> context, the access token <strong>allows an application to access a specific resource on behalf of the user</strong>. That means, for example, that you can authorize your LinkedIn app to access Twitter’s API on your behalf to cross-post on both social platforms.</p><p><a href="https://datatracker.ietf.org/doc/html/rfc6749" target="_blank" rel="noreferrer noopener">OAuth 2 specifications</a> say nothing about the access token format. It <strong>can be a string in any format</strong>. A common format used for access tokens is JWT, and <a href="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-access-token-jwt" target="_blank" rel="noreferrer noopener">a standard is along the way</a> at the time of writing. However, this doesn’t mean that access tokens should be in that format. Keep the following in mind: <strong>your client application should treat access tokens as opaque strings</strong>, that is, a string with no specific meaning such as <code>ab5<span>?</span><span>2</span>Gtse9ITg</code> or <code><span>1234</span></code> and so on.</p><p>Only the intended recipient of the access token can (and must) make assumptions on the access token’s format. Wait! Who is the intended recipient of an access token? 🤔 <strong>The intended recipient is the resource server</strong>, that is, the server that protects the resource your application is trying to access.</p><p>Last but not least, an access token is not bound to a specific client. It can be used by any application that presents it: <strong>it grants authorization to its bearer</strong>. This is extremely important since you need to take care of it and avoid it falling into the wrong hands.</p><p>Alright! Now you know what an ID token and an access token are. 🎉 So you are ready to use them without any fear of making mistakes. But, wait. I do not see you convinced. 🤔 Maybe you need some other information. Ok. So, let’s see what these tokens are <em>not</em> suitable for.</p><h2 id="What-Is-an-ID-Token-NOT-Suitable-For-">What Is an ID Token NOT Suitable For?</h2><p>One of the most common mistakes developers make with an ID token is to use it for authorization. As said above, an ID token has to do with authentication. It <strong>is not meant for authorization</strong>.</p><p>If your API accepts an ID token as an authorization token, to begin with, you are ignoring the intended recipient stated by the audience claim. That claim says that it is meant for your client application, not for the resource server (i.e., the API).</p><p>You may think this is just a formality, but <strong>there are security implications</strong> here.</p><p>First of all, your API shouldn’t accept a token that is not meant for it. If it does so, its security is at risk. In fact, if your API doesn&#39;t care if a token is meant for it, an ID token stolen from any client application can be used to access your API.</p><p>In addition, your ID token will not have granted <a href="https://auth0.com/docs/scopes" target="_blank" rel="noreferrer noopener">scopes</a> (I know, this is another pain point). To briefly explain, OAuth has a specific process to allow the user to grant the minimum permissions (scopes) to the application. Those scopes are associated with the access token so that your API knows what the client application can do and what it can&#39;t do. If you use an ID token, you ignore this feature and potentially allow the application to do actions that the user has not authorized.</p><p>Another mistake you can make with ID tokens is to use them for user session management. An ID token <strong>isn’t an appropriate choice for session management</strong>. In fact, ID tokens have a few specific drawbacks. First, they are larger than a typical session cookie. You need to validate them on the server side just to check if the session is still alive. You also cannot remove them from the client application at the end of a session, e.g., at logout. It requires the active collaboration of the client, but this is not something you can rely on.</p><h2 id="What-Is-an-Access-Token-NOT-Suitable-For-">What Is an Access Token NOT Suitable For?</h2><p>As you guess, on the access token side, you can’t use it for authentication. I mean, <strong>you can’t make any assumption about the user’s identity</strong> based on the access token. The access token can’t tell you if the user has authenticated. <strong>You can’t ever deduce that the user is currently logged in</strong> to your application. Based on the OAuth specifications, the access token authorizes the client application to operate on behalf of the user. Once the application is authorized, the user can log out with no issue and the access token will continue to work.</p><p>In addition, the access token <strong>has nothing to tell the client application</strong>. It is intended for the resource server. Even if you know the access token format, you shouldn’t try to interpret the access token content in your client application. The access token format is an agreement between the authorization server and the resource server. Period! The client application should not intrude.</p><h2 id="A-Quick-Recap">A Quick Recap</h2><p>The confusion over the use of ID and access tokens is very common, and it can be difficult to wrap your head around the differences. And maybe it mostly derives from the difference between authentication and authorization that also confuses many developers. Nevertheless, I hope this topic is a little more clear now.</p><p>To recap, here is a quick summary of what you learned about what you can and can’t do with ID and access tokens:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6OoxJnwLaEumCzNxa53J1f/473d3e0483e8a06b2318175ca1b03f16/id-token-vs-access-token.jpg" alt="ID token vs access token"/></p><p>If you want to see ID and access tokens in action, <a href="https://auth0.com/signup" data-amp-replace="CLIENT_ID" data-amp-addparams="anonId=CLIENT_ID(cid-scope-cookie-fallback-name)" target="_blank" rel="noreferrer noopener">sign up for a free Auth0 account</a> and start to add authentication and authorization to your applications in minutes with <a href="https://auth0.com/docs/libraries" target="_blank" rel="noreferrer noopener">your preferred programming language and framework</a>.</p></div></div>]]></content:encoded>
      <pubDate>Thu, 23 Sep 2021 14:31:00 +0000</pubDate>
    </item>
    <item>
      <title>How to Explain Public-Key Cryptography and Digital Signatures to Anyone</title>
      <link>https://auth0.com/blog/how-to-explain-public-key-cryptography-digital-signatures-to-anyone/</link>
      <description>Here’s an easy-to-understand analogy to help your non-technical friends and customers understand public keys and private keys, and how they relate to cryptography and digital signatures.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><strong>If you work in cybersecurity or any computer-related field, sooner or later, you’ll have to explain public-key cryptography and digital signatures to non-technical people.</strong> With the recent rise of remote work and stories about system breaches, computer security has become a topic of discussion even among laypeople.</p><p>After trying to explain public-key cryptography and digital signatures to some clients with varying degrees of success, I wanted to develop an analogy that explained them and was easy to remember. I’ve found that even techies get confused by the formal definitions, and many non-technical explanations just seem unsatisfying.</p><p>That’s when I stumbled upon <a href="https://twitter.com/vrypan" target="_blank" rel="noreferrer noopener">Panayotis Vryonis’</a> article, <a href="https://blog.vrypan.net/2013/08/28/public-key-cryptography-for-non-geeks/" target="_blank" rel="noreferrer noopener"><em>Public-key cryptography for non-geeks</em></a>. It became my go-to analogy until my computer science professor, <a href="http://research.cs.queensu.ca/home/dawes/" target="_blank" rel="noreferrer noopener">Dr. Robin Dawes</a> pointed out a flaw. I refined it with his help, and a suggestion from Matthew Ernest, and the result is below. I hope you find it helpful when trying to explain these concepts to anyone!</p><h2 id="The-Box">The Box</h2><p>Imagine a box with a special lock, as pictured below:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4nm7EvXpqVqMxfOPkjUlXe/bca6b7d8d0a00658045dd4f3fd0a5c7f/the_box_has_a_lock_with_three_positions.png" alt="Photo of a box with a lock. There is a key inserted into the lock. Caption: &#34;The box has a lock with three positions: Locked (at the 9:00 position), unlocked (at the 12:00 position), and locked (at the 3:00 position).&#34;"/></p><p>The lock has three positions:</p><ol start="1"><li>When the lock is at the “9:00” position, the box is locked, and its contents are inaccessible.</li><li>When the lock is at the “12:00” position, the box is unlocked, which means you can open it and view its contents.</li><li>When the lock is at the “3:00” position, the box is locked, and its contents are inaccessible.</li></ol><p>In order to avoid wandering into endless “What if...?” tangents, assume that it’s prohibitively costly to pick the lock or break the box.</p><h2 id="The-Keys">The Keys</h2><p>There are two kinds of keys that work with the box’s lock.</p><h3 id="The-private-key">The private key</h3><p>The first kind of key belongs to you, and only you. You don’t share it with anyone else, which is why it’s called the <strong>private key</strong>. You might make a backup copy in case of emergencies, but you keep it in a safe place that only you know.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2PJXCaqzggdgTpN4FSm8Qj/4a1228e2e8a6a46ad103c01ffd197e58/you_keep_the_private_key_to_yourself.png" alt="Photo of a single key. Caption: &#34;You keep the private key to yourself.&#34;"/></p><p>The private key fits the lock, but it has a particular limitation: it can only turn <em>clockwise</em>.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/qqPVi6JTc2HOW4SuE4sEj/8fcd841021e55b659a3c5b92ad9b2da2/the_private_key_only_turns_clockwise.png" alt="Photo of the box with lock and key. An arrow indicates that the key is being turned clockwise. Caption: &#34;The private key only turns clockwise.&#34;"/></p><h3 id="The-public-key">The public key</h3><p>You treat the second kind of key very differently. Unlike the first key, you’ve made many, many copies of these keys. You’ve given them to everyone you know, and even people you don’t know. You’ve left them in as many public places as you could reach: restaurants, stores, busy streets, dark alleys, and any place you happened to pass through. You’ve even left them in other towns, and even other countries! Because of the way you treat this key, it’s called the <strong>public key</strong>.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2LTNf9JxfjDuB4rMZyM7K6/4a3a6264b81bf2b90efaffe469d3406c/you_hand_out_copies_of_the_public_key_freely.png" alt="Photo of hundreds of keys hanging on hooks on a wall. Caption: &#34;You hand out copies of the public key freely.&#34;"/></p><p>Like the private key, public keys also fit the lock, and they also have a particular limitation — but in the opposite direction. They can only turn <em>counterclockwise</em>.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6QVsGSSoLuNdRgpfHznh6H/b5f42c68a9d5aa9e322e898cac14aeb3/the_public_key_only_turns_counterclockwise.png" alt="Photo of the box with lock and key. An arrow indicates that the key is being turned counterclockwise. Caption: &#34;The public key only turns counterclockwise.&#34;"/></p><h2 id="How-They-Work-Together">How They Work Together</h2><p>The lock, private key, and public keys work together to produce these interesting outcomes:</p><ul><li>If the box is locked with a public key, only the private key can unlock it.</li><li>If the box is locked with the private key, only a public key can unlock it.</li></ul><p>The keys are designed so that you can’t use one key to figure out how to make the other key.</p><p>We can use the box and keys to create two useful kinds of secure communication:</p><ol start="1"><li>I can send you a secret message.</li><li>You can send me a message with proof that you (and not some impostor) sent it and that it wasn’t altered <em>en route</em>.</li></ol><p>Let’s take a closer look at each of these kinds of secure communication.</p><h2 id="Sending-Secret-Messages">Sending Secret Messages</h2><p>Suppose I wanted to send you a message that I wanted only you to read. We have enemies in common who’d love nothing more than to know what’s in the messages I send you.</p><p>We each have a cadre of minions to deliver our messages. We trust them... to a limited extent. It would be all too easy for our foes to intercept our messages through force or bribery. </p><p>There must be a way to send messages to you secretly, and that’s where the box comes in. I can use the box to send the message so that no one but you can read it. </p><p>You have the only private key. Everyone else has at least one of the public keys because you’ve been giving them away like candy. </p><p>I put my message in the open box. Since it’s open, it’s unlocked, which means the lock is at the “12:00” position. </p><p>I use one of the many copies of the public key that I own to lock it, turning it counterclockwise from the unlocked “12:00” position to the locked “9:00” position.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3WnNKlXN7MC0BfDdEU8GyX/2bcc1521f829c80ff548cf7234078bba/i_lock_the_message_with_public_key.png" alt="Photo of the box with lock and key. An arrow indicates that the key is being turned counterclockwise. Caption: &#34;I lock the message in the box with the public key...&#34;"/></p><p>The message is now ready for a minion to deliver to you.</p><p>I’m not worried that my minion or anyone other than you will be able to read the message while it’s in transit. Even though anyone can easily find the public key, they can’t use it to unlock the box. Only the private key can unlock the box if it’s been locked with the public key.</p><p>When you receive the box, you use the private key to unlock it, turning the key clockwise from the “3:00” position to the “12:00” position.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2kwG5ogtYDYCkDtjC0MqgN/75f2cb365ea0014a0af58a7dbc90c481/you_unlock_it_with_the_private_key.png" alt="Photo of the box with lock and key. An arrow indicates that the key is being turned clockwise. Caption: &#34;...and you unlock it with the private key.&#34;"/></p><p>In summary: to send you a secret message, I use a public key to lock the message so nobody can read it, and you use a private key to unlock the message so that you can read it.</p><p>This is the general idea behind public-key encryption: <strong>encrypt with the public key, decrypt with the private key.</strong></p><h2 id="Signing-Messages">Signing Messages</h2><p>The “secret messages” use case for the box and private and public keys is intuitive: anyone with a public key can lock a message, but only the holder of the private key can unlock it.</p><p>There’s another way to use the box and keys: you can lock a message with the private key, which anyone with the public key can unlock. What could a possible use case there be for a system where anyone can unlock the box?</p><p>Suppose one of our common enemies has been trying to break up our alliance and that I’ve been receiving very hurtful messages that appear to have come from you. (I’ll leave the content of those messages to your imagination.)</p><p>That enemy has either been sending fake messages or has been intercepting and altering your real ones. There has to be a way to package a message in order to prove that it’s actually from you!</p><p>There <em>is</em> a way: the box!</p><p>In this scenario, you put your message in the open box. Since it’s open, it’s unlocked, which means the lock is at the “12:00” position. </p><p>Using the private key, you “sign” the message by locking it, turning the key counterclockwise from the “12:00” position to the “9:00” position.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1U2aOr7mKgMtGdZM8lPLWT/82ff89d7160d93b04fff8ac635fd41d7/you_sign_the_message_with_the_private_key.png" alt="Photo of the box with lock and key. An arrow indicates that the key is being turned clockwise. Caption: &#34;You &#39;sign&#39; the message with the private key...&#34;"/></p><p>One of your minions delivers the box to me.</p><p>Since you locked the box with the private key, anyone can unlock it with any one of the many public keys you have distributed. Our common enemy, knowing that this message is in transit, could intercept it and replace your invitation to tea with a “top ten” list of very cutting insults that would surely dissolve our alliance.</p><p>The problem with the enemy’s plan is that it won’t work. Intercepting and altering the message means that they would have to do one of two things before forwarding the box to me.</p><ol start="1"><li>They could leave the box unlocked. Since the box is supposed to arrive locked, this is an obvious sign that the message may have been tampered with.</li><li>They could lock the box. They would have to do it with a public key, which means that only the private key can unlock it. I wouldn’t be able to unlock the box with the only key I had — the public key — which would lead me to conclude that someone had unlocked the box before I did.</li></ol><p>If the box arrives at my doorstep and...</p><ul><li>It’s locked</li><li>I can unlock it with the public key</li></ul><p>...then, I can be assured that the message came from you and wasn’t changed <em>en route</em>.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4Fax8BanX5Qts7KJzW7166/b4dc34b169f6eca961c8d8f3c7452af4/i_verify_your_signature_with_the_public_key.png" alt="Photo of the box with lock and key. An arrow indicates that the key is being turned counterclockwise. Caption: &#34;...and I verify your &#39;signature&#39; with the public key.&#34;"/></p><p>In summary: to send me a message with proof that you are the sender, you use the private key to lock the message. You’re the only person with the private key, and only a public key can unlock messages locked with the private key. If one of the public keys can unlock that message, I know that it came from you.</p><p>This is the general idea behind digital signatures: <strong>sign with the private key, verify with a public key.</strong></p><h2 id="How-About-Sending-a-Message-That-s-Both-Secret--and--Signed-">How About Sending a Message That’s Both Secret <em>and</em> Signed?</h2><p>You might think that sending a message that is both secret and signed is paranoid. I would answer by saying, “Paranoia is the <strong><em>mistaken</em></strong> impression that people are out to get you.”</p><p>Suppose I wanted to send you a secret signed message. I could do it with two boxes:</p><ol start="1"><li>A smaller box, which I own. It will prove that I sent the message. I have the private key for this box, and you have one of its public keys.</li><li>A larger box, which you own. It will keep the message secret. You have the private key for this box, and I have one of its public keys.</li></ol><p>I would lock the message in my smaller box using my private key and then lock it in your larger box using your public key.</p><p>When you receive the delivery, you will unlock your larger box first, using your private key. This would reveal my smaller box inside, which you would unlock with my public key.</p><h2 id="It-s-Not-Keys-and-Boxes--but-Numbers-and-Algorithms">It’s Not Keys and Boxes, but Numbers and Algorithms</h2><p>Of course, we’re not really dealing with boxes, keys (at least the kind that goes into locks), or minions. Here’s a list of elements in these stories and their real-world equivalents:</p><ul><li><strong>The message</strong>: Anything that you’d want to send that can you can view or edit with a computer. It could be text, one or more pictures, an audio or video recording, a database, or even an application. As far as the computer is concerned, messages are just a long series of numbers.</li><li><strong>The private and public keys</strong>: Very large numbers that are used in a lengthy math process to encrypt, decrypt, sign, and verify messages.</li><li><strong>The box</strong>: An algorithm that takes the message and keys and performs the math process to encrypt, decrypt, sign, and verify messages.</li><li><strong>Minions</strong>: The way in which the message is sent. This could be the internet but could just as easily be an actual minion, such as an unsuspecting summer intern with a USB key.</li></ul><p>In the alternate universe where messages are sent with boxes and keys, everyone would have their own set of boxes with their own private keys, as well as copies of other people’s public keys. In the real world, we run applications that run public-key encryption and digital signature algorithms to secure our messages. We still use public and private keys in the real world; they’re just digital.</p></div></div>]]></content:encoded>
      <pubDate>Wed, 22 Sep 2021 14:53:00 +0000</pubDate>
    </item>
    <item>
      <title>Dependency Injection with Kotlin and Koin</title>
      <link>https://auth0.com/blog/dependency-injection-with-kotlin-and-koin/</link>
      <description>Learn how to implement common dependency injection scenarios with Koin and Kotlin</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>Inversion of Control (IoC) is a broad term to describe how responsibility for some aspect of a system is lifted out of the custom code written by the end developer and into a framework. <a href="https://martinfowler.com/bliki/InversionOfControl.html" target="_blank" rel="noreferrer noopener">Martin Fowler describes a framework in terms of IoC</a>:</p><blockquote><p>Inversion of Control is a key part of what makes a framework different from a library. A library is essentially a set of functions that you can call, these days usually organized into classes. Each call does some work and returns control to the client.</p></blockquote><p>A framework embodies some abstract design, with more behavior built-in. In order to use it, you need to insert your behavior into various places in the framework, either by subclassing or by plugging in your own classes. The framework&#39;s code then calls your code at these points.</p><p>Dependency injection (DI) is one specific example of IoC where classes no longer directly instantiate member properties by creating new objects but instead declare their dependencies and allow an external system, in this case, a dependency injection framework to satisfy those dependencies.</p><p><a href="https://insert-koin.io/" target="_blank" rel="noreferrer noopener">Koin</a> is a dependency injection framework for Kotlin. It is lightweight, can be used in Android applications, is implemented via a concise DSL, and takes advantage of Kotlin features like delegate properties rather than relying on annotations. </p><p>In this post, we&#39;ll look at a simple application taking advantage of Koin to inject dependencies into our custom classes.</p><h2 id="Prerequisites">Prerequisites</h2><p>To build the sample application, you&#39;ll need to have JDK 11 or above, which is available from many sources, including <a href="https://openjdk.java.net/install/" target="_blank" rel="noreferrer noopener">OpenJDK</a>, <a href="https://adoptopenjdk.net/" target="_blank" rel="noreferrer noopener">AdoptOpenJDK</a>, <a href="https://www.azul.com/downloads/" target="_blank" rel="noreferrer noopener">Azul</a>, or <a href="https://www.oracle.com/au/java/technologies/javase-jdk11-downloads.html" target="_blank" rel="noreferrer noopener">Oracle</a>.</p><p>The code for the sample Koin application can be found <a href="https://github.com/mcasperson/KotlinKoinExample" target="_blank" rel="noreferrer noopener">here</a>.</p><h2 id="The-Gradle-Project-Definition">The Gradle Project Definition</h2><p>We start with the Gradle build file, which includes dependencies for Kotlin and Koin, and makes use of the <a href="https://github.com/johnrengelman/shadow" target="_blank" rel="noreferrer noopener">shadow plugin</a> to create self-contained uberjars:</p><pre><code>buildscript <span>{</span>
    repositories <span>{</span>
        maven <span>{</span>
            url <span>&#34;https://plugins.gradle.org/m2/&#34;</span>
        <span>}</span>
    <span>}</span>
    dependencies <span>{</span>
        classpath <span>&#39;com.github.jengelman.gradle.plugins:shadow:6.1.0&#39;</span>
    <span>}</span>
<span>}</span>

plugins <span>{</span>
    id <span>&#34;org.jetbrains.kotlin.jvm&#34;</span> version <span>&#34;1.5.21&#34;</span>
<span>}</span>

apply plugin<span>:</span> <span>&#39;kotlin&#39;</span>
apply plugin<span>:</span> <span>&#39;com.github.johnrengelman.shadow&#39;</span>

repositories <span>{</span>
    <span>mavenLocal</span><span>(</span><span>)</span>
    <span>mavenCentral</span><span>(</span><span>)</span>
<span>}</span>

dependencies <span>{</span>
    implementation <span>&#34;org.jetbrains.kotlin:kotlin-stdlib:1.5.21&#34;</span>
    implementation <span>&#34;io.insert-koin:koin-core:3.1.2&#34;</span>
<span>}</span></code></pre><p>To build the uberjar, run this command from Bash or PowerShell:</p><pre><code>./gradlew shadowJar</code></pre><h2 id="Registering-Singletons">Registering Singletons</h2><p>The first demonstration of Koin will register a class as a singleton, ensuring each time we request a new instance of the class, we are returned a single, shared object. Here is the code from the file <code>single<span>.</span>kt</code>:</p><pre><code><span>// src/main/kotlin/com/matthewcasperson/single.kt</span>

<span>package</span> com<span>.</span>matthewcasperson

<span>import</span> org<span>.</span>koin<span>.</span>core<span>.</span>context<span>.</span>GlobalContext<span>.</span>startKoin
<span>import</span> org<span>.</span>koin<span>.</span>dsl<span>.</span>module

<span>class</span> SingleInstance <span>{</span>
    <span>companion</span> <span>object</span> <span>{</span>
        <span>var</span> count<span>:</span> Int <span>=</span> <span>0</span>
    <span>}</span>

    <span>init</span> <span>{</span>
        <span>++</span>count
    <span>}</span>

    <span>fun</span> <span>hello</span><span>(</span><span>)</span> <span>=</span> <span>&#34;I am instance number <span>$count</span>&#34;</span>
<span>}</span>

<span>fun</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    <span>val</span> singleModule <span>=</span> module <span>{</span>
        single <span>{</span> <span>SingleInstance</span><span>(</span><span>)</span> <span>}</span>
    <span>}</span>

    <span>var</span> app <span>=</span> startKoin <span>{</span>
        <span>modules</span><span>(</span>singleModule<span>)</span>
    <span>}</span>

    <span>println</span><span>(</span>app<span>.</span>koin<span>.</span>get<span>&lt;</span>SingleInstance<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>hello</span><span>(</span><span>)</span><span>)</span>
    <span>println</span><span>(</span>app<span>.</span>koin<span>.</span>get<span>&lt;</span>SingleInstance<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>hello</span><span>(</span><span>)</span><span>)</span>
    <span>println</span><span>(</span>app<span>.</span>koin<span>.</span>get<span>&lt;</span>SingleInstance<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>hello</span><span>(</span><span>)</span><span>)</span>
<span>}</span></code></pre><p>This class is run with the command:</p><pre><code>java -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.SingleKt</code></pre><p>We start by defining a typical class, but with a companion object containing a variable called <code>count</code>. The <code>count</code> variable is incremented by 1 each time we create a new <code>SingleInstance</code> object, which we will use to track how many new <code>SingleInstance</code> objects have been created:</p><pre><code><span>class</span> SingleInstance <span>{</span>
    <span>companion</span> <span>object</span> <span>{</span>
        <span>var</span> count<span>:</span> Int <span>=</span> <span>0</span>
    <span>}</span>

    <span>init</span> <span>{</span>
        <span>++</span>count
    <span>}</span>

    <span>fun</span> <span>hello</span><span>(</span><span>)</span> <span>=</span> <span>&#34;I am instance number <span>$count</span>&#34;</span>
<span>}</span></code></pre><p>Inside the <code>main</code> function we create a <a href="https://insert-koin.io/docs/reference/koin-core/modules/" target="_blank" rel="noreferrer noopener">Koin module</a>. Modules are used to group related Koin definitions, and here we use the <code>single</code> definition to instruct Koin to create a single instance of the supplied object:</p><pre><code><span>fun</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    <span>val</span> singleModule <span>=</span> module <span>{</span>
        single <span>{</span> <span>SingleInstance</span><span>(</span><span>)</span> <span>}</span>
    <span>}</span></code></pre><p>Next we call the <code>startKoin</code> function, which is part of the <code>GlobalContext</code> object. <code>GlobalContext</code> is a singleton (defined as an <a href="https://kotlinlang.org/docs/object-declarations.html#object-declarations-overview" target="_blank" rel="noreferrer noopener">object declaration</a>), and is typically used as the default context for applications. Here we register our module into the global context:</p><pre><code>    <span>var</span> app <span>=</span> startKoin <span>{</span>
        <span>modules</span><span>(</span>singleModule<span>)</span>
    <span>}</span></code></pre><p>We&#39;re now able to request instances of any of our registered objects with <code>app<span>.</span>koin<span>.</span>get</code>. To demonstrate that our <code>single</code> definitions are working as expected, we get an instance of the <code>SingleInstance</code> class three times and print the message containing the instance count to the console: </p><pre><code>    <span>println</span><span>(</span>app<span>.</span>koin<span>.</span>get<span>&lt;</span>SingleInstance<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>hello</span><span>(</span><span>)</span><span>)</span>
    <span>println</span><span>(</span>app<span>.</span>koin<span>.</span>get<span>&lt;</span>SingleInstance<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>hello</span><span>(</span><span>)</span><span>)</span>
    <span>println</span><span>(</span>app<span>.</span>koin<span>.</span>get<span>&lt;</span>SingleInstance<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>hello</span><span>(</span><span>)</span><span>)</span>
<span>}</span></code></pre><p>The output shows we have been given the same <code>SingleInstance</code> object each time:</p><pre><code>I am instance number <span>1</span>
I am instance number <span>1</span>
I am instance number <span>1</span></code></pre><h2 id="Registering-a-Factory">Registering a Factory</h2><p>There are times when you want a new instance each time you request a dependency from Koin. To support this, Koin has a <code>factory</code> definition. This is demonstrated in the file <code>factory<span>.</span>kt</code>:</p><pre><code><span>// src/main/kotlin/com/matthewcasperson/factory.kt</span>

<span>package</span> com<span>.</span>matthewcasperson

<span>import</span> org<span>.</span>koin<span>.</span>core<span>.</span>context<span>.</span>GlobalContext<span>.</span>startKoin
<span>import</span> org<span>.</span>koin<span>.</span>dsl<span>.</span>module

<span>class</span> FactoryInstance <span>{</span>
    <span>companion</span> <span>object</span> <span>{</span>
        <span>var</span> count<span>:</span> Int <span>=</span> <span>0</span>
    <span>}</span>

    <span>init</span> <span>{</span>
        <span>++</span>count
    <span>}</span>

    <span>fun</span> <span>hello</span><span>(</span><span>)</span> <span>=</span> <span>&#34;I am instance number <span>$count</span>&#34;</span>
<span>}</span>

<span>fun</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    <span>val</span> factoryModule <span>=</span> module <span>{</span>
        factory <span>{</span> <span>FactoryInstance</span><span>(</span><span>)</span> <span>}</span>
    <span>}</span>

    <span>var</span> app <span>=</span> startKoin <span>{</span>
        <span>modules</span><span>(</span>factoryModule<span>)</span>
    <span>}</span>

    <span>println</span><span>(</span>app<span>.</span>koin<span>.</span>get<span>&lt;</span>FactoryInstance<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>hello</span><span>(</span><span>)</span><span>)</span>
    <span>println</span><span>(</span>app<span>.</span>koin<span>.</span>get<span>&lt;</span>FactoryInstance<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>hello</span><span>(</span><span>)</span><span>)</span>
    <span>println</span><span>(</span>app<span>.</span>koin<span>.</span>get<span>&lt;</span>FactoryInstance<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>hello</span><span>(</span><span>)</span><span>)</span>
<span>}</span></code></pre><p>This class is run with the command:</p><pre><code>java -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.FactoryKt</code></pre><p>This code is almost a line for line copy of the previous example, with some different class and variable names. The most significant difference is how the module is built, where we use the <code>factory</code> definition:</p><pre><code>    <span>val</span> factoryModule <span>=</span> module <span>{</span>
        factory <span>{</span> <span>FactoryInstance</span><span>(</span><span>)</span> <span>}</span>
    <span>}</span></code></pre><p>Whereas the <code>single</code> definition registered a singleton dependency, the <code>factory</code> definition calls the supplied lambda every time a dependency is requested.</p><p>This is reflected in the console output, which shows that we have indeed constructed three instances, one for each call to <code>app<span>.</span>koin<span>.</span>get</code>:</p><pre><code>I am instance number <span>1</span>
I am instance number <span>2</span>
I am instance number <span>3</span></code></pre><h2 id="Registering-Interfaces">Registering Interfaces</h2><p>The previous two examples registered concrete classes with Koin, but good object-oriented practice is to work with interfaces rather than classes. The example below from the file <code>interfaces<span>.</span>kt</code> shows how to register a class via its base interface with Koin:</p><pre><code><span>// src/main/kotlin/com/matthewcasperson/interfaces.kt</span>

<span>package</span> com<span>.</span>matthewcasperson

<span>import</span> org<span>.</span>koin<span>.</span>core<span>.</span>context<span>.</span>GlobalContext<span>.</span>startKoin
<span>import</span> org<span>.</span>koin<span>.</span>dsl<span>.</span>module

<span>interface</span> HelloService <span>{</span>
    <span>fun</span> <span>hello</span><span>(</span><span>)</span><span>:</span> String
<span>}</span>

<span>class</span> HelloServiceImpl <span>:</span> HelloService <span>{</span>
    <span>override</span> <span>fun</span> <span>hello</span><span>(</span><span>)</span> <span>=</span> <span>&#34;Hello!&#34;</span>
<span>}</span>

<span>fun</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    <span>val</span> helloService <span>=</span> module <span>{</span>
        single <span>{</span> <span>HelloServiceImpl</span><span>(</span><span>)</span> <span>as</span> HelloService <span>}</span>
    <span>}</span>

    <span>var</span> app <span>=</span> startKoin <span>{</span>
        <span>modules</span><span>(</span>helloService<span>)</span>
    <span>}</span>

    <span>println</span><span>(</span>app<span>.</span>koin<span>.</span>get<span>&lt;</span>HelloService<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>hello</span><span>(</span><span>)</span><span>)</span>
<span>}</span></code></pre><p>This class is run with the command:</p><pre><code>java -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.InterfacesKt</code></pre><p>We start with a basic interface:</p><pre><code><span>interface</span> HelloService <span>{</span>
    <span>fun</span> <span>hello</span><span>(</span><span>)</span><span>:</span> String
<span>}</span></code></pre><p>We then implement the interface in a class:</p><pre><code><span>class</span> HelloServiceImpl <span>:</span> HelloService <span>{</span>
    <span>override</span> <span>fun</span> <span>hello</span><span>(</span><span>)</span> <span>=</span> <span>&#34;Hello!&#34;</span>
<span>}</span></code></pre><p>To make the class available to Koin via its interface, we cast the new object back to the interface with the <code><span>as</span></code> operator while building the module:</p><pre><code>    <span>val</span> helloService <span>=</span> module <span>{</span>
        single <span>{</span> <span>HelloServiceImpl</span><span>(</span><span>)</span> <span>as</span> HelloService <span>}</span>
    <span>}</span></code></pre><p>We then retrieve a dependency from its interface:</p><pre><code>    <span>println</span><span>(</span>app<span>.</span>koin<span>.</span>get<span>&lt;</span>HelloService<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>hello</span><span>(</span><span>)</span><span>)</span></code></pre><h2 id="Resolving-Nested-Dependencies">Resolving Nested Dependencies</h2><p>All the previous examples have resolved objects with no additional dependencies. A more typical scenario is where Koin is used to resolve classes that themselves have additional dependencies. This is demonstrated in the file called <code>nested<span>.</span>kt</code>:</p><pre><code><span>// src/main/kotlin/com/matthewcasperson/nested.kt</span>

<span>package</span> com<span>.</span>matthewcasperson

<span>import</span> org<span>.</span>koin<span>.</span>core<span>.</span>context<span>.</span>GlobalContext<span>.</span>startKoin
<span>import</span> org<span>.</span>koin<span>.</span>dsl<span>.</span>module

<span>data</span> <span>class</span> <span>HelloMessageData</span><span>(</span><span>val</span> message <span>:</span> String <span>=</span> <span>&#34;Hello from wrapped class!&#34;</span><span>)</span>

<span>interface</span> HelloServiceWrapper <span>{</span>
    <span>fun</span> <span>hello</span><span>(</span><span>)</span><span>:</span> String
<span>}</span>

<span>class</span> <span>HelloServiceWrapperImpl</span><span>(</span><span>private</span> <span>val</span> helloMessageData<span>:</span>HelloMessageData<span>)</span> <span>:</span> HelloServiceWrapper <span>{</span>
    <span>override</span> <span>fun</span> <span>hello</span><span>(</span><span>)</span> <span>=</span> helloMessageData<span>.</span>message
<span>}</span>

<span>fun</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    <span>val</span> helloService <span>=</span> module <span>{</span>
        single <span>{</span> <span>HelloMessageData</span><span>(</span><span>)</span> <span>}</span>
        single <span>{</span> <span>HelloServiceWrapperImpl</span><span>(</span><span>get</span><span>(</span><span>)</span><span>)</span> <span>as</span> HelloServiceWrapper <span>}</span>
    <span>}</span>

    <span>var</span> app <span>=</span> startKoin <span>{</span>
        <span>modules</span><span>(</span>helloService<span>)</span>
    <span>}</span>

    <span>println</span><span>(</span>app<span>.</span>koin<span>.</span>get<span>&lt;</span>HelloServiceWrapper<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>hello</span><span>(</span><span>)</span><span>)</span>
<span>}</span></code></pre><p>This class is run with the command:</p><pre><code>java -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.NestedKt</code></pre><p>We start with a data class defining a string property:</p><pre><code><span>data</span> <span>class</span> <span>HelloMessageData</span><span>(</span><span>val</span> message <span>:</span> String <span>=</span> <span>&#34;Hello from wrapped class!&#34;</span><span>)</span></code></pre><p>As with the previous example, we define an interface and then implement the interface with a class. This time, however, the class has a constructor that takes an instance of <code>HelloMessageData</code>:</p><pre><code><span>interface</span> HelloServiceWrapper <span>{</span>
    <span>fun</span> <span>hello</span><span>(</span><span>)</span><span>:</span> String
<span>}</span>

<span>class</span> <span>HelloServiceWrapperImpl</span><span>(</span><span>private</span> <span>val</span> helloMessageData<span>:</span>HelloMessageData<span>)</span> <span>:</span> HelloServiceWrapper <span>{</span>
    <span>override</span> <span>fun</span> <span>hello</span><span>(</span><span>)</span> <span>=</span> helloMessageData<span>.</span>message
<span>}</span></code></pre><p>When defining the module, we register an instance of the <code>HelloMessageData</code> class, and then resolve that class in the <code>HelloServiceWrapperImpl</code> constructor with a call to <code>get</code>, which will return the appropriate dependency for us. Note the order is not important here, and <code>HelloServiceWrapperImpl</code> could have been defined in the module first:</p><pre><code>    <span>val</span> helloService <span>=</span> module <span>{</span>
        single <span>{</span> <span>HelloMessageData</span><span>(</span><span>)</span> <span>}</span>
        single <span>{</span> <span>HelloServiceWrapperImpl</span><span>(</span><span>get</span><span>(</span><span>)</span><span>)</span> <span>as</span> HelloServiceWrapper <span>}</span>
    <span>}</span></code></pre><h2 id="Creating-a-KoinComponent">Creating a KoinComponent</h2><p>We noted earlier that Koin creates a default global context that our dependencies are registered with. Koin uses this global context, in conjunction with Kotlin <a href="https://kotlinlang.org/docs/delegated-properties.html" target="_blank" rel="noreferrer noopener">delegated properties</a>, through the <code>KoinComponent</code> interface to allow classes to resolve their own dependencies without an explicit reference to the <code>KoinApplication</code> returned by <code>startKoin</code>. An example of this is shown in the file <code>koinComponent<span>.</span>kt</code>:</p><pre><code><span>// src/main/kotlin/com/matthewcasperson/koinComponent.kt</span>

<span>package</span> com<span>.</span>matthewcasperson

<span>import</span> org<span>.</span>koin<span>.</span>core<span>.</span>component<span>.</span>KoinComponent
<span>import</span> org<span>.</span>koin<span>.</span>core<span>.</span>component<span>.</span>inject
<span>import</span> org<span>.</span>koin<span>.</span>core<span>.</span>context<span>.</span>GlobalContext<span>.</span>startKoin
<span>import</span> org<span>.</span>koin<span>.</span>dsl<span>.</span>module

<span>data</span> <span>class</span> <span>GoodbyeMessageData</span><span>(</span><span>val</span> message <span>:</span> String <span>=</span> <span>&#34;Goodbye!&#34;</span><span>)</span>

<span>interface</span> GoodbyeService <span>{</span>
    <span>fun</span> <span>goodbye</span><span>(</span><span>)</span><span>:</span> String
<span>}</span>

<span>class</span> <span>GoodbyeServiceImpl</span><span>(</span><span>private</span> <span>val</span> goodbyeMessageData<span>:</span> GoodbyeMessageData<span>)</span> <span>:</span> GoodbyeService <span>{</span>
    <span>override</span> <span>fun</span> <span>goodbye</span><span>(</span><span>)</span> <span>=</span> <span>&#34;GoodbyeServiceImpl says: <span><span>${</span>goodbyeMessageData<span>.</span>message<span>}</span></span>&#34;</span>
<span>}</span>

<span>class</span> GoodbyeApplication <span>:</span> KoinComponent <span>{</span>
    <span>val</span> goodbyeService <span>by</span> inject<span>&lt;</span>GoodbyeService<span>&gt;</span><span>(</span><span>)</span>
    <span>fun</span> <span>sayGoodbye</span><span>(</span><span>)</span> <span>=</span> <span>println</span><span>(</span>goodbyeService<span>.</span><span>goodbye</span><span>(</span><span>)</span><span>)</span>
<span>}</span>

<span>fun</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    <span>val</span> goodbyeModule <span>=</span> module <span>{</span>
        single <span>{</span> <span>GoodbyeMessageData</span><span>(</span><span>)</span> <span>}</span>
        single <span>{</span> <span>GoodbyeServiceImpl</span><span>(</span><span>get</span><span>(</span><span>)</span><span>)</span> <span>as</span> GoodbyeService <span>}</span>
    <span>}</span>

    startKoin <span>{</span>
        <span>modules</span><span>(</span>goodbyeModule<span>)</span>
    <span>}</span>

    <span>GoodbyeApplication</span><span>(</span><span>)</span><span>.</span><span>sayGoodbye</span><span>(</span><span>)</span>
<span>}</span></code></pre><p>This class is run with the command:</p><pre><code>java -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.KoinComponentKt</code></pre><p>This example draws from the features demonstrated in previous sections to define a class called <code>GoodbyeServiceImpl</code>, with a nested dependency on the data class called <code>GoodbyeMessageData</code>, and which implements an interface called <code>GoodbyeService</code>:</p><pre><code><span>data</span> <span>class</span> <span>GoodbyeMessageData</span><span>(</span><span>val</span> message <span>:</span> String <span>=</span> <span>&#34;Goodbye!&#34;</span><span>)</span>

<span>interface</span> GoodbyeService <span>{</span>
    <span>fun</span> <span>goodbye</span><span>(</span><span>)</span><span>:</span> String
<span>}</span>

<span>class</span> <span>GoodbyeServiceImpl</span><span>(</span><span>private</span> <span>val</span> goodbyeMessageData<span>:</span> GoodbyeMessageData<span>)</span> <span>:</span> GoodbyeService <span>{</span>
    <span>override</span> <span>fun</span> <span>goodbye</span><span>(</span><span>)</span> <span>=</span> <span>&#34;GoodbyeServiceImpl says: <span><span>${</span>goodbyeMessageData<span>.</span>message<span>}</span></span>&#34;</span>
<span>}</span></code></pre><p>We then define a class called <code>GoodbyeApplication</code> implementing the <code>KoinComponent</code> interface. This class has a delegate property called <code>goodbyService</code> initialized by the <code>inject</code> function made available through the <code>KoinComponent</code> interface:</p><pre><code><span>class</span> GoodbyeApplication <span>:</span> KoinComponent <span>{</span>
    <span>val</span> goodbyeService <span>by</span> inject<span>&lt;</span>GoodbyeService<span>&gt;</span><span>(</span><span>)</span>
    <span>fun</span> <span>sayGoodbye</span><span>(</span><span>)</span> <span>=</span> <span>println</span><span>(</span>goodbyeService<span>.</span><span>goodbye</span><span>(</span><span>)</span><span>)</span>
<span>}</span></code></pre><p>The module is defined in much the same way as it has been in previous examples. Note however that the <code>GoodbyeApplication</code> class is not defined in the module:</p><pre><code>    <span>val</span> goodbyeModule <span>=</span> module <span>{</span>
        single <span>{</span> <span>GoodbyeMessageData</span><span>(</span><span>)</span> <span>}</span>
        single <span>{</span> <span>GoodbyeServiceImpl</span><span>(</span><span>get</span><span>(</span><span>)</span><span>)</span> <span>as</span> GoodbyeService <span>}</span>
    <span>}</span></code></pre><p>In this example, we don&#39;t assign the result of the <code>startKoin</code> function to any variable; registering the module with the global context is enough here:</p><pre><code>    startKoin <span>{</span>
        <span>modules</span><span>(</span>goodbyeModule<span>)</span>
    <span>}</span></code></pre><p>We then create a new instance of the <code>GoodbyeApplication</code> class and call its <code>sayGoodbye</code> function. By implementing the <code>KoinComponent</code> interface, the <code>GoodbyeApplication</code> class can resolve its own dependencies from the global context and will resolve its <code>GoodbyeService</code> dependency in order to print a message to the console:</p><pre><code>    <span>GoodbyeApplication</span><span>(</span><span>)</span><span>.</span><span>sayGoodbye</span><span>(</span><span>)</span></code></pre><p>The <code>KoinComponent</code> interface is convenient, but be aware that it means your classes are now dependant on the Koin framework. Constructor-based injection is recommended when you wish to share code without any explicit dependency on Koin. </p><h2 id="Conclusion">Conclusion</h2><p>Koin is a lightweight dependency injection framework with a concise DSL taking advantage of Kotlin&#39;s modern syntax and features. In this post, we looked at how Koin creates singletons and factories, registers dependencies against their interfaces, and allows classes to resolve their own dependencies with delegated properties.</p></div></div>]]></content:encoded>
      <pubDate>Tue, 21 Sep 2021 17:05:00 +0000</pubDate>
    </item>
    <item>
      <title>Get Started with Android Authentication Using Kotlin: Part 2</title>
      <link>https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-2/</link>
      <description>Learn how to implement login, logout, and user profiles in Android apps using Kotlin and Auth0.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>In the previous section, you started an Android project that uses Auth0 for user login, logout, and reading and updating user metadata. You set up the project on both the Auth0 and app sides. In this section, you’ll complete the project and update it to ensure that it works in both portrait and landscape orientations.</p><h2 id="Write-the-code">Write the code</h2><p>Everything you’ve done so far in this exercise is just a preamble. It’s now time to write the actual code! This is the biggest task in the exercise, so let’s do it in small steps.​</p><p>🛠 Move to the <code>app<span>/</span>java<span>/</span>com<span>.</span>example<span>.</span>login</code> folder and open the main activity’s file, <code>MainActivity<span>.</span>kt</code>. Its contents should look like this:</p><pre><code><span>package</span> com<span>.</span>example<span>.</span>myapplication

<span>import</span> androidx<span>.</span>appcompat<span>.</span>app<span>.</span>AppCompatActivity
<span>import</span> android<span>.</span>os<span>.</span>Bundle

<span>class</span> MainActivity <span>:</span> <span>AppCompatActivity</span><span>(</span><span>)</span> <span>{</span>
    <span>override</span> <span>fun</span> <span>onCreate</span><span>(</span>savedInstanceState<span>:</span> Bundle<span>?</span><span>)</span> <span>{</span>
        <span>super</span><span>.</span><span>onCreate</span><span>(</span>savedInstanceState<span>)</span>
        <span>setContentView</span><span>(</span>R<span>.</span>layout<span>.</span>activity_main<span>)</span>
    <span>}</span>
<span>}</span></code></pre><h3 id="Import-the-necessary-libraries">Import the necessary libraries</h3><p>🛠 Add the following <code><span>import</span></code> statements to the ones already in the file:</p><pre><code><span>import</span> androidx<span>.</span>core<span>.</span>view<span>.</span>isVisible
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>Auth0
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>authentication<span>.</span>AuthenticationAPIClient
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>authentication<span>.</span>AuthenticationException
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>callback<span>.</span>Callback
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>management<span>.</span>ManagementException
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>management<span>.</span>UsersAPIClient
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>provider<span>.</span>WebAuthProvider
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>result<span>.</span>Credentials
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>result<span>.</span>UserProfile
<span>import</span> com<span>.</span>google<span>.</span>android<span>.</span>material<span>.</span>snackbar<span>.</span>Snackbar</code></pre><p>Most of these <code><span>import</span></code> statements import classes from Auth0’s libraries. Here’s what those classes do:</p><ul><li><code>AuthenticationAPIClient</code>: Accesses the Auth0 Authentication API. The app uses this to retrieve the user’s profile information.</li><li><code>AuthenticationException</code>: Defines errors and exceptions that may arise during authentication.</li><li><code>Callback</code>: Defines an object containing “success” and “failure” callback functions that Auth0 should call after completing an API function.</li><li><code>ManagementException</code>: Defines errors and exceptions that <code>Callback</code> objects may have to handle.</li><li><code>UsersAPIClient</code>: Manages user information. The app uses this to retrieve the user’s profile information.</li><li><code>WebAuthProvider</code>: Provides Auth0’s web page-based login to the app. The app uses this to log the user in via a login page in a web browser and log the user out.</li><li><code>Credentials</code>: Stores the user’s credentials, including ID, access, and refresh tokens.</li><li><code>UserProfile</code>: Stores the user’s profile information, including their user ID, names, email address, and metadata.</li></ul><p>🛠 You’ll also need to import the <code>Activity</code> ’s auto-generated view binding library, which will make it possible for your code to reference views in the layout (or, to put it more simply: access the onscreen widgets). Do this by adding the following <code><span>import</span></code> statement, replacing <code><span>{</span><span>YOUR_PACKAGE_NAME_HERE</span><span>}</span></code> with the name of your app’s package, which you’ll find on the first line of the file:</p><pre><code><span>import</span> <span>{</span>YOUR_PACKAGE_NAME_HERE<span>}</span><span>.</span>databinding<span>.</span>ActivityMainBinding</code></pre><p>The package name for my app is <code>com<span>.</span>example<span>.</span>login</code>, so my <code><span>import</span></code> statement looks like this:</p><pre><code><span>import</span> com<span>.</span>example<span>.</span>login<span>.</span>databinding<span>.</span>ActivityMainBinding</code></pre><h3 id="Add-class-properties">Add class properties</h3><p>🛠 Add the following properties to <code>MainActivity</code> so that the start of the class looks like this:</p><pre><code><span>class</span> MainActivity <span>:</span> <span>AppCompatActivity</span><span>(</span><span>)</span> <span>{</span>

    <span>private</span> <span>lateinit</span> <span>var</span> binding<span>:</span> ActivityMainBinding

    <span>// Login/logout-related properties</span>
    <span>private</span> <span>lateinit</span> <span>var</span> account<span>:</span> Auth0
    <span>private</span> <span>var</span> cachedCredentials<span>:</span> Credentials<span>?</span> <span>=</span> <span>null</span>
    <span>private</span> <span>var</span> cachedUserProfile<span>:</span> UserProfile<span>?</span> <span>=</span> <span>null</span>


    <span>override</span> <span>fun</span> <span>onCreate</span><span>(</span>savedInstanceState<span>:</span> Bundle<span>?</span><span>)</span> <span>{</span>
    
    <span>..</span><span>.</span></code></pre><p>You’ll use the first property, <code>binding</code>, to access the widgets on the screen. The other three properties are related to logging in and out and are described in more detail below:</p><ul><li><code>account</code>: represents the app’s Auth0 account and is instantiated using the app’s client ID and the domain for the app’s Auth0 tenant. Let me make this clear: this isn’t the account of the user trying to log in, but the account of the developer or organization who is delegating the login/logout process to Auth0. In the case of this example, it’s <em>your</em> Auth0 developer account. <code>account</code>’s value is set in <code><span>onCreate</span><span>(</span><span>)</span></code> when the activity is instantiated.</li><li><code>cachedCredentials</code>: contains the user’s credentials that are returned from Auth0 after a successful login. Its value should be <code><span>null</span></code> when the user is <em>not</em> logged in. When the user is logged in, it should reference an instance of <code>Credentials</code>. A <code>Credentials</code> instance has the following properties:
  <ul><li><code>idToken</code>: The <a href="https://auth0.com/docs/tokens/id-tokens" target="_blank" rel="noreferrer noopener">ID token</a>, which contains user information that the app can use to customize the user’s experience.</li><li><code>accessToken</code>: The <a href="https://auth0.com/docs/tokens/access-tokens" target="_blank" rel="noreferrer noopener">access token</a>, which is a credential that allows the app to access the Auth0 API.</li><li><code>refreshToken</code>: The <a href="https://auth0.com/docs/tokens/refresh-tokens" target="_blank" rel="noreferrer noopener">refresh token</a>, which can be used to request a new access token when the original access token expires, without requiring the user to re-authenticate.</li><li><code>type</code>: The type of the received access token.</li><li><code>expiresAt</code>: The date/time when the received access token expires.</li><li><code>scope</code>: The scopes granted to the access token. I’ll explain what scopes are in the next section, <em>The login method</em>.</li></ul></li><li><code>cachedUserProfile</code>: holds the user’s profile information. Its value should be <code><span>null</span></code> when the user is <em>not</em> logged in. When the user is logged in, it should reference an instance of <code>UserProfile</code>. A <code>UserProfile</code> instance has the following properties:
<ul><li><code>email</code>: The email address corresponding to the user account.</li><li><code>isEmailVerified</code>: <code><span>true</span></code> if the user responded to the verification email sent by Auth0 after they registered themselves as a user.</li><li><code>name</code>: The user’s full name.</li><li><code>givenName</code>: The user’s given name, often referred to as their “first name” or “forename”.</li><li><code>familyName</code>: The user’s family name, often referred to as their “last name” or “surname”.</li><li><code>nickname</code>: The user’s nickname, sometimes referred to as thier “familiar name” or “moniker”.</li><li><code>PictureURL</code>: The URL where the user’s picture can be retrieved.</li><li><code>createdAt</code>: The creation date and time of the user’s account.</li></ul></li></ul><h3 id="Update-the--onCreate----method">Update the <code><span>onCreate</span><span>(</span><span>)</span></code> method</h3><p>First, let’s fill out the <code><span>onCreate</span><span>(</span><span>)</span></code> method that was automatically generated for the project and use it to initialize everything in the activity.</p><p>🛠 Update the <code><span>onCreate</span><span>(</span><span>)</span></code> method so that it looks like this:</p><pre><code><span>override</span> <span>fun</span> <span>onCreate</span><span>(</span>savedInstanceState<span>:</span> Bundle<span>?</span><span>)</span> <span>{</span>
    <span>super</span><span>.</span><span>onCreate</span><span>(</span>savedInstanceState<span>)</span>

    account <span>=</span> <span>Auth0</span><span>(</span>
        <span>getString</span><span>(</span>R<span>.</span>string<span>.</span>com_auth0_client_id<span>)</span><span>,</span>
        <span>getString</span><span>(</span>R<span>.</span>string<span>.</span>com_auth0_domain<span>)</span>
    <span>)</span>

    binding <span>=</span> ActivityMainBinding<span>.</span><span>inflate</span><span>(</span>layoutInflater<span>)</span>
    <span>setContentView</span><span>(</span>binding<span>.</span>root<span>)</span>

    binding<span>.</span>buttonLogin<span>.</span><span>setOnClickListener</span> <span>{</span> <span>login</span><span>(</span><span>)</span> <span>}</span>
    binding<span>.</span>buttonLogout<span>.</span><span>setOnClickListener</span> <span>{</span> <span>logout</span><span>(</span><span>)</span> <span>}</span>
    binding<span>.</span>buttonGet<span>.</span><span>setOnClickListener</span> <span>{</span> <span>getUserMetadata</span><span>(</span><span>)</span> <span>}</span>
    binding<span>.</span>buttonSet<span>.</span><span>setOnClickListener</span> <span>{</span> <span>setUserMetadata</span><span>(</span><span>)</span> <span>}</span>
<span>}</span></code></pre><p>This method:</p><ul><li>Defines the account object, which contains the necessary credentials to connect to your Auth0 account.</li><li>Creates a view binding object, which you’ll use to access the onscreen widgets.</li><li>Connects the <strong>Log in</strong>, <strong>Log out</strong>, <strong>Get</strong>, and <strong>Set</strong> buttons to the methods they should call when tapped.</li></ul><h3 id="Add-the--login----method">Add the <code><span>login</span><span>(</span><span>)</span></code> method</h3><p>The next step is to implement the method that gets called when the user taps the <strong>Log In</strong> button.</p><p>🛠 Add this to the class after <code><span>onCreate</span><span>(</span><span>)</span></code>:</p><pre><code><span>private</span> <span>fun</span> <span>login</span><span>(</span><span>)</span> <span>{</span>
    WebAuthProvider
        <span>.</span><span>login</span><span>(</span>account<span>)</span>
        <span>.</span><span>withScheme</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>com_auth0_scheme<span>)</span><span>)</span>
        <span>.</span><span>withScope</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>login_scopes<span>)</span><span>)</span>
        <span>.</span><span>withAudience</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>login_audience<span>,</span> <span>getString</span><span>(</span>R<span>.</span>string<span>.</span>com_auth0_domain<span>)</span><span>)</span><span>)</span>
        <span>.</span><span>start</span><span>(</span><span>this</span><span>,</span> <span>object</span> <span>:</span> Callback<span>&lt;</span>Credentials<span>,</span> AuthenticationException<span>&gt;</span> <span>{</span>

            <span>override</span> <span>fun</span> <span>onFailure</span><span>(</span>exception<span>:</span> AuthenticationException<span>)</span> <span>{</span>
                <span>showSnackBar</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>login_failure_message<span>,</span> exception<span>.</span><span>getCode</span><span>(</span><span>)</span><span>)</span><span>)</span>
            <span>}</span>

            <span>override</span> <span>fun</span> <span>onSuccess</span><span>(</span>credentials<span>:</span> Credentials<span>)</span> <span>{</span>
                cachedCredentials <span>=</span> credentials
                <span>showSnackBar</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>login_success_message<span>,</span> credentials<span>.</span>accessToken<span>)</span><span>)</span>
                <span>updateUI</span><span>(</span><span>)</span>
                <span>showUserProfile</span><span>(</span><span>)</span>
            <span>}</span>
        <span>}</span><span>)</span>
<span>}</span></code></pre><p><code><span>login</span><span>(</span><span>)</span></code> uses the Auth0 SDK’s <code>WebAuthProvider</code> class, which gives the app the ability to use Auth0’s authentication service. The <code>WebAuthProvider</code> methods that you’ll use most often are its <code><span>login</span><span>(</span><span>)</span></code> and <code><span>logout</span><span>(</span><span>)</span></code> methods.</p><p>Although this method is formatted to span several lines, it’s just a single line of code. The single line is made of a call to a chain of <code>WebAuthProvider</code> ’s methods starting with <code><span>login</span><span>(</span><span>)</span></code>. If you ignore all the comments and parameters, the method chain looks like this:</p><pre><code>WebAuthProvider
    <span>.</span><span>login</span><span>(</span><span>)</span>
    <span>.</span><span>withScheme</span><span>(</span><span>)</span>
    <span>.</span><span>withScope</span><span>(</span><span>)</span>
    <span>.</span><span>withAudience</span><span>(</span><span>)</span>
    <span>.</span><span>start</span><span>(</span><span>)</span></code></pre><p>This is the <a href="https://www.baeldung.com/kotlin/builder-pattern" target="_blank" rel="noreferrer noopener">Builder design pattern</a> in action. From <code><span>login</span><span>(</span><span>)</span></code> to <code><span>withAudience</span><span>(</span><span>)</span></code>, each method in the chain takes an argument that provides additional information about the login, using that information to creates a <code>WebAuthProvider</code> object that it passes to the next method in the chain. The final method in the chain, <code><span>start</span><span>(</span><span>)</span></code>, takes the resulting <code>WebAuthProvider</code> object as its argument and uses it to display the login page and define what should happen when the login succeeds and when it fails.</p><p>Let’s take a look at what each of the methods in the chain does.</p><p><code><span>login</span><span>(</span><span>)</span></code> initiates the login process and specifies the Auth0 account used by the application.</p><p><code><span>withScheme</span><span>(</span><span>)</span></code> specifies the scheme to use for the URL that Auth0 redirects to after a successful login. For web apps, the scheme is <code>http</code> or <code>https</code>. This value is arbitrary for native mobile apps, so we use <code>app</code> to make it clear to other developers and other people who may use the Auth0 settings for this app that the redirect is <em>not</em> to a web page.</p><p><code><span>withScope</span><span>(</span><span>)</span></code> specifies which sets of user data the app is authorized to use if the user logs in successfully. The OpenID Connect and OAuth frameworks, on which Auth0’s authentication and authorization are based, use the term <a href="https://auth0.com/docs/scopes/openid-connect-scopes" target="_blank" rel="noreferrer noopener"><em>scope</em></a> to represent the authorization to access user’s data and resources. The method takes a space-delimited string as its argument, where each “word” in the string specifies a different scope. The string used in this app contains these scopes:</p><ul><li><code>openid</code>: Indicates that application that uses OpenID Connect for authentication. This is the only required scope; all other scopes are optional.</li><li><code>profile</code>: Authorizes the application to access basic user profile information, including first name, surname, nickname, their photo or avatar, and so on.</li><li><code>email</code>: Authorizes the application to access the user’s email address.</li><li><code>read<span>:</span>current_user</code>: Authorizes the application with read-only access to the <code>current_user</code> claim.</li><li><code>update<span>:</span>current_user_metadata</code>: Authorizes the application with read and write  access to the <code>current_user_metadata</code> claim. This scope allows us to get and set the <code>country</code> value in the user’s metadata.</li></ul><p><code><span>withAudience</span><span>(</span><span>)</span></code> specifies the URL that the app will use to connect to Auth0’s login service. This URL is constructed using the domain of the Auth0 tenant used by the app and the endpoint for the Auth0 authentication API.</p><p><code><span>start</span><span>(</span><span>)</span></code> takes the <code>WebAuthProvider</code> object constructed by all the previous methods in the chain and opens the browser window to display the login page. It takes two parameters: a context (a reference to the <code>Activity</code> that’s initiating the browser window) and an anonymous object with two callback methods:</p><ul><li><code><span>onFailure</span><span>(</span><span>)</span></code>: Defines what should happen if the user returns from the browser login screen without successfully logging in. This typically happens when the user closes the browser login screen or taps the “back” button while on that screen. The app displays a <code>SnackBar</code> that notifies the user that login failed, followed by an error code.</li><li><code><span>onSuccess</span><span>(</span><span>)</span></code>: Defines what should happen if the user returns from the browser login screen after successfully logging in. The app processes the successful response, displays a <code>SnackBar</code> notifying the user that login was successful, and updates the UI to its “logged in” state.</li></ul><h3 id="Add-the--logout----method">Add the <code><span>logout</span><span>(</span><span>)</span></code> method</h3><p>You’ve probably guessed that if there’s a <code><span>login</span><span>(</span><span>)</span></code> method that’s called when the user presses the <strong>Log In</strong> button, there must also be a <code><span>logout</span><span>(</span><span>)</span></code> method that’s called when the user presses the <strong>Log Out</strong> button.</p><p>🛠 Add this method to the class after <code><span>login</span><span>(</span><span>)</span></code>:</p><pre><code><span>private</span> <span>fun</span> <span>logout</span><span>(</span><span>)</span> <span>{</span>
    WebAuthProvider
        <span>.</span><span>logout</span><span>(</span>account<span>)</span>
        <span>.</span><span>withScheme</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>com_auth0_scheme<span>)</span><span>)</span>
        <span>.</span><span>start</span><span>(</span><span>this</span><span>,</span> <span>object</span> <span>:</span> Callback<span>&lt;</span>Void<span>?</span><span>,</span> AuthenticationException<span>&gt;</span> <span>{</span>

            <span>override</span> <span>fun</span> <span>onFailure</span><span>(</span>exception<span>:</span> AuthenticationException<span>)</span> <span>{</span>
                <span>updateUI</span><span>(</span><span>)</span>
                <span>showSnackBar</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>general_failure_with_exception_code<span>,</span>
                    exception<span>.</span><span>getCode</span><span>(</span><span>)</span><span>)</span><span>)</span>
            <span>}</span>

            <span>override</span> <span>fun</span> <span>onSuccess</span><span>(</span>payload<span>:</span> Void<span>?</span><span>)</span> <span>{</span>
                cachedCredentials <span>=</span> <span>null</span>
                cachedUserProfile <span>=</span> <span>null</span>
                <span>updateUI</span><span>(</span><span>)</span>
            <span>}</span>

        <span>}</span><span>)</span>
<span>}</span></code></pre><p>As with <code><span>login</span><span>(</span><span>)</span></code>, <code><span>logout</span><span>(</span><span>)</span></code> also uses the Auth0 SDK’s <code>WebAuthProvider</code> class and is a one-liner that uses the Builder pattern. This time, that one line calls a shorter chain of <code>WebAuthProvider</code> ’s methods starting with <code><span>logout</span><span>(</span><span>)</span></code>. If you ignore all the parameters, the method chain looks like this:</p><pre><code>WebAuthProvider
    <span>.</span><span>logout</span><span>(</span><span>)</span>
    <span>.</span><span>withScheme</span><span>(</span><span>)</span>
    <span>.</span><span>start</span><span>(</span><span>)</span></code></pre><p><code><span>logout</span><span>(</span><span>)</span></code> initiates the logout process and specifies the Auth0 account used by the application, which should be the same account as the one used to log in.</p><p><code><span>withScheme</span><span>(</span><span>)</span></code> specifies the scheme to use for the URL that Auth0 redirects to after successful logout. This should be the same scheme as the one used to log in.</p><p><code><span>start</span><span>(</span><span>)</span></code> takes the <code>WebAuthProvider</code> object constructed by all the previous methods in the chain to log the user out. It takes two parameters: a context (a reference to the <code>Activity</code> that’s initiating the logout process) and an anonymous object with two callback methods:</p><ul><li><code><span>onFailure</span><span>(</span><span>)</span></code>: Defines what should happen when the logout process fails. This rarely happens and usually indicates a network or server issue. In this example, the app updates the UI (which remains in the “logged in” state) and displays a <code>SnackBar</code> that notifies the user that logout failed, followed by an error code.</li><li><code><span>onSuccess</span><span>(</span><span>)</span></code>: Defines what should happen when the logout process succeeds. In this example, the app destroys its local copies of the user’s credentials and profile and updates the UI to its “logged out” state.</li></ul><h3 id="Add-the--showUserProfile----method">Add the <code><span>showUserProfile</span><span>(</span><span>)</span></code> method</h3><p>Every Auth0 user has a <em>user profile</em> associated with their account. The user profile contains the following basic information about the user:</p><ul><li>Names: The user’s full name, given name, surname, and nickname</li><li>Email info: The user’s email address, and whether it was verified</li><li>Picture: The location of an image that identifies the user</li><li>Creation date: The date and time when the user’s account was created</li></ul><p>When the user successfully logs in, the app should display their name and email onscreen. It does so by calling <code><span>showUserProfile</span><span>(</span><span>)</span></code> immediately after a successful login.</p><p>🛠 Add this method to the class after <code><span>logout</span><span>(</span><span>)</span></code>:</p><pre><code><span>private</span> <span>fun</span> <span>showUserProfile</span><span>(</span><span>)</span> <span>{</span>
    <span>// Guard against showing the profile when no user is logged in</span>
    <span>if</span> <span>(</span>cachedCredentials <span>==</span> <span>null</span><span>)</span> <span>{</span>
        <span>return</span>
    <span>}</span>

    <span>val</span> client <span>=</span> <span>AuthenticationAPIClient</span><span>(</span>account<span>)</span>
    client
        <span>.</span><span>userInfo</span><span>(</span>cachedCredentials<span>!!</span><span>.</span>accessToken<span>!!</span><span>)</span>
        <span>.</span><span>start</span><span>(</span><span>object</span> <span>:</span> Callback<span>&lt;</span>UserProfile<span>,</span> AuthenticationException<span>&gt;</span> <span>{</span>

            <span>override</span> <span>fun</span> <span>onFailure</span><span>(</span>exception<span>:</span> AuthenticationException<span>)</span> <span>{</span>
                <span>showSnackBar</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>general_failure_with_exception_code<span>,</span>
                    exception<span>.</span><span>getCode</span><span>(</span><span>)</span><span>)</span><span>)</span>
            <span>}</span>

            <span>override</span> <span>fun</span> <span>onSuccess</span><span>(</span>profile<span>:</span> UserProfile<span>)</span> <span>{</span>
                cachedUserProfile <span>=</span> profile
                <span>updateUI</span><span>(</span><span>)</span>
            <span>}</span>

        <span>}</span><span>)</span>
<span>}</span></code></pre><p>This method is the final task performed by the <code><span>onSuccess</span><span>(</span><span>)</span></code> callback method in  <code><span>loginWithBrowser</span><span>(</span><span>)</span></code>. It initializes the <code>cachedUserProfile</code> property, which contains the user’s profile information.</p><p>As a precaution, it returns immediately if the <code>cachedCredentials</code> property is <code><span>null</span></code>, which implies that no user is logged in, and therefore there isn’t any user profile to show.</p><p>In order to get this information, it does the following:</p><ul><li>It creates an instance of <code>AuthenticationAPIClient</code>, which retrieves Auth0 account information. Like the login and logout methods, this also uses the Builder pattern.</li><li>It uses <code>AuthenticationAPIClient</code> ’s <code><span>userInfo</span><span>(</span><span>)</span></code> method to specify that we want to retrieve user profile information from Auth0. This method requires a valid access token, which it extracts from the <code>cachedCredentials</code> property.</li><li>Finally, it defines callback methods for the cases where it failed and succeeded in retrieving the user profile information from Auth0. If the retrieval was successful, the profile information is stored in <code>cachedUserProfile</code>, and the UI is updated to display the user’s name and email address.</li></ul><h3 id="Add-the--getUserMetadata----and--setUserMetadata----methods">Add the <code><span>getUserMetadata</span><span>(</span><span>)</span></code> and <code><span>setUserMetadata</span><span>(</span><span>)</span></code> methods</h3><p>The user profile contains information that generally applies to <em>every</em> user account regardless of the type of application it’s being used for — name, email, photo, and date/time created. While this is necessary information, it’s probably not <em>all</em> the user information that you want to store in their profile.</p><p>That what the <em>user metadata</em> is for. Think of it as a key-value store where you can place additional user information that isn’t covered by the user profile. In this app, the user metadata will store just one additional piece of user information — their country — and it will allow the user to retrieve and update this information.</p><p>🛠 Add the following to the class after <code><span>showUserProfile</span><span>(</span><span>)</span></code>:</p><pre><code><span>private</span> <span>fun</span> <span>getUserMetadata</span><span>(</span><span>)</span> <span>{</span>
    <span>// Guard against getting the metadata when no user is logged in</span>
    <span>if</span> <span>(</span>cachedCredentials <span>==</span> <span>null</span><span>)</span> <span>{</span>
        <span>return</span>
    <span>}</span>

    <span>val</span> usersClient <span>=</span> <span>UsersAPIClient</span><span>(</span>account<span>,</span> cachedCredentials<span>!!</span><span>.</span>accessToken<span>!!</span><span>)</span>

    usersClient
        <span>.</span><span>getProfile</span><span>(</span>cachedUserProfile<span>!!</span><span>.</span><span>getId</span><span>(</span><span>)</span><span>!!</span><span>)</span>
        <span>.</span><span>start</span><span>(</span><span>object</span> <span>:</span> Callback<span>&lt;</span>UserProfile<span>,</span> ManagementException<span>&gt;</span> <span>{</span>

            <span>override</span> <span>fun</span> <span>onFailure</span><span>(</span>exception<span>:</span> ManagementException<span>)</span> <span>{</span>
                <span>showSnackBar</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>general_failure_with_exception_code<span>,</span>
                    exception<span>.</span><span>getCode</span><span>(</span><span>)</span><span>)</span><span>)</span>
            <span>}</span>

            <span>override</span> <span>fun</span> <span>onSuccess</span><span>(</span>userProfile<span>:</span> UserProfile<span>)</span> <span>{</span>
                cachedUserProfile <span>=</span> userProfile
                <span>updateUI</span><span>(</span><span>)</span>

                <span>val</span> country <span>=</span> userProfile<span>.</span><span>getUserMetadata</span><span>(</span><span>)</span><span>[</span><span>&#34;country&#34;</span><span>]</span> <span>as</span> String<span>?</span>
                binding<span>.</span>edittextCountry<span>.</span><span>setText</span><span>(</span>country<span>)</span>
            <span>}</span>

        <span>}</span><span>)</span>
<span>}</span>

<span>private</span> <span>fun</span> <span>setUserMetadata</span><span>(</span><span>)</span> <span>{</span>
    <span>// Guard against getting the metadata when no user is logged in</span>
    <span>if</span> <span>(</span>cachedCredentials <span>==</span> <span>null</span><span>)</span> <span>{</span>
        <span>return</span>
    <span>}</span>

    <span>val</span> usersClient <span>=</span> <span>UsersAPIClient</span><span>(</span>account<span>,</span> cachedCredentials<span>!!</span><span>.</span>accessToken<span>!!</span><span>)</span>
    <span>val</span> metadata <span>=</span> <span>mapOf</span><span>(</span><span>&#34;country&#34;</span> <span>to</span> binding<span>.</span>edittextCountry<span>.</span>text<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span>

    usersClient
        <span>.</span><span>updateMetadata</span><span>(</span>cachedUserProfile<span>!!</span><span>.</span><span>getId</span><span>(</span><span>)</span><span>!!</span><span>,</span> metadata<span>)</span>
        <span>.</span><span>start</span><span>(</span><span>object</span> <span>:</span> Callback<span>&lt;</span>UserProfile<span>,</span> ManagementException<span>&gt;</span> <span>{</span>

            <span>override</span> <span>fun</span> <span>onFailure</span><span>(</span>exception<span>:</span> ManagementException<span>)</span> <span>{</span>
                <span>showSnackBar</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>general_failure_with_exception_code<span>,</span>
                    exception<span>.</span><span>getCode</span><span>(</span><span>)</span><span>)</span><span>)</span>
            <span>}</span>

            <span>override</span> <span>fun</span> <span>onSuccess</span><span>(</span>profile<span>:</span> UserProfile<span>)</span> <span>{</span>
                cachedUserProfile <span>=</span> profile
                <span>updateUI</span><span>(</span><span>)</span>

                <span>showSnackBar</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>general_success_message<span>)</span><span>)</span>
            <span>}</span>

        <span>}</span><span>)</span>
<span>}</span></code></pre><p>While <code><span>showUserProfile</span><span>(</span><span>)</span></code> uses an instance of <code>AuthenticationAPIClient</code> to get the user profile information, <code><span>getUserMetadata</span><span>(</span><span>)</span></code> and <code><span>setUserMetadata</span><span>(</span><span>)</span></code> use a different object type: <code>UsersAPIClient</code>.</p><p>Unlike <code>AuthenticationAPIClient</code>, which needs only an <code>Auth0</code> account object to be instantiated, you need both an <code>Auth0</code> account object and an access token to instantiate a <code>UsersAPIClient</code> object.</p><p><code><span>getUserMetadata</span><span>(</span><span>)</span></code> specifies the user profile using <code>UsersAPIClient</code> ’s <code><span>getProfile</span><span>(</span><span>)</span></code> method and the ID of the user, followed by the <code><span>start</span><span>(</span><span>)</span></code> method to attempt to get the user profile and define callback methods for failure and success.</p><p><code><span>getUserMetadata</span><span>(</span><span>)</span></code>’s <code><span>onSuccess</span><span>(</span><span>)</span></code> callback is almost the same as <code><span>showUserProfile</span><span>(</span><span>)</span></code>’s — it just has these two additional lines that extract the <code>country</code> value from the user’s metadata and display it onscreen:</p><pre><code><span>val</span> country <span>=</span> userProfile<span>.</span><span>getUserMetadata</span><span>(</span><span>)</span><span>[</span><span>&#34;country&#34;</span><span>]</span> <span>as</span> String<span>?</span>
binding<span>.</span>edittextCountry<span>.</span><span>setText</span><span>(</span>country<span>)</span></code></pre><p><code><span>setUserMetadata</span><span>(</span><span>)</span></code> defines a <code>Map</code> with a single key-value pair, where the key is the string <code>country</code> and the corresponding value is the contents of the <code>EditText</code> where the user enters the name of their country. It then passes that <code>Map</code> along with the user’s ID to <code>UsersAPIClient</code> ’s <code><span>updateMetadata</span><span>(</span><span>)</span></code> method to specify the change to be made, followed by the <code><span>start</span><span>(</span><span>)</span></code> method to initiate the update and define callback methods for failure and success.</p><p><code><span>setUserMetadata</span><span>(</span><span>)</span></code>’s <code><span>onSuccess</span><span>(</span><span>)</span></code> callback is almost the same as <code><span>getUserMetadata</span><span>(</span><span>)</span></code>’s — but instead of updating the <code>EditText</code> where the user enters the name of their country, it simply displays a <code>SnackBar</code> notifying the user that it was successful in updating the metadata.</p><h3 id="Add-the-UI-methods">Add the UI methods</h3><p>The final step is to add the methods that present information to the user.</p><p>🛠 Add the following to the class after <code><span>getUserMetadata</span><span>(</span><span>)</span></code> and <code><span>setUserMetadata</span><span>(</span><span>)</span></code>:</p><pre><code><span>private</span> <span>fun</span> <span>updateUI</span><span>(</span><span>)</span> <span>{</span>
    <span>val</span> isLoggedIn <span>=</span> cachedCredentials <span>!=</span> <span>null</span>

    binding<span>.</span>textviewTitle<span>.</span>text <span>=</span> <span>if</span> <span>(</span>isLoggedIn<span>)</span> <span>{</span>
        <span>getString</span><span>(</span>R<span>.</span>string<span>.</span>logged_in_title<span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
        <span>getString</span><span>(</span>R<span>.</span>string<span>.</span>logged_out_title<span>)</span>
    <span>}</span>
    binding<span>.</span>buttonLogin<span>.</span>isEnabled <span>=</span> <span>!</span>isLoggedIn
    binding<span>.</span>buttonLogout<span>.</span>isEnabled <span>=</span> isLoggedIn
    binding<span>.</span>linearlayoutMetadata<span>.</span>isVisible <span>=</span> isLoggedIn

    binding<span>.</span>textviewUserProfile<span>.</span>isVisible <span>=</span> isLoggedIn

    <span>val</span> userName <span>=</span> cachedUserProfile<span>?</span><span>.</span>name <span>?:</span> <span>&#34;&#34;</span>
    <span>val</span> userEmail <span>=</span> cachedUserProfile<span>?</span><span>.</span>email <span>?:</span> <span>&#34;&#34;</span>
    binding<span>.</span>textviewUserProfile<span>.</span>text <span>=</span> <span>getString</span><span>(</span>R<span>.</span>string<span>.</span>user_profile<span>,</span> userName<span>,</span> userEmail<span>)</span>

    <span>if</span> <span>(</span><span>!</span>isLoggedIn<span>)</span> <span>{</span>
        binding<span>.</span>edittextCountry<span>.</span><span>setText</span><span>(</span><span>&#34;&#34;</span><span>)</span>
    <span>}</span>
<span>}</span>

<span>private</span> <span>fun</span> <span>showSnackBar</span><span>(</span>text<span>:</span> String<span>)</span> <span>{</span>
    Snackbar
        <span>.</span><span>make</span><span>(</span>
        binding<span>.</span>root<span>,</span>
        text<span>,</span>
        Snackbar<span>.</span>LENGTH_LONG
    <span>)</span><span>.</span><span>show</span><span>(</span><span>)</span>
<span>}</span></code></pre><p>If you’ve made it this far, I have great news for you: you’ve written all the code for the app!</p><h2 id="See-the-App-in-Action">See the App in Action</h2><p>Run the app. You’ll see this:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7FSXqzXczgaNUC5NnY9q1F/d72b55833d1bf446c70d60488f7f4ae0/welcome_screen.png" alt="The app’s screen when launched."/></p><p>Tap the <strong>Log in</strong> button. The app will open a browser window that will display the login web page:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/53TEQjPR0HhmvGIC8BXW7a/e7b6205b7c401883c61b162c498a00f7/universal_login.png" alt="The Auth0 login web page."/></p><p>Log in using the email address and password of the user account you created earlier. Since this is the first time the account has logged into the app, the <strong>Authorize App</strong> page will appear in the browser window:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4AkDSwWeHROplHJV3KOFcg/98376afd920b0af2a2e732a06c7fb622/authorize_app.png" alt="The “Authorize App” screen. It says that the app is requesting access to your user account, particularly the “profile”, “current_user”, and “current_user_metadata” information."/></p><p>This page is asking you to authorize the app to access the following information in your user account:</p><ul><li>Profile: access to your profile and email</li><li>Current_user: read your current_user</li><li>Current_user_metadata: update your current_user_metadata</li></ul><p>If these items sound familiar, it’s because you’ve seen them recently. They’re the names of the scopes in the <code>login_scopes</code> string in the <code>strings<span>.</span>xml</code> resource...</p><pre><code><span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>login_scopes<span>&#34;</span></span><span>&gt;</span></span>
    openid profile email read:current_user update:current_user_metadata
<span><span><span>&lt;/</span>string</span><span>&gt;</span></span></code></pre><p>...which the call to <code><span>withScope</span><span>(</span><span>)</span></code> in the <code><span>login</span><span>(</span><span>)</span></code> method uses to specify which sets of user data the app is authorized to use. This additional step informs the user of this use of their data and gives them a choice to approve or decline.</p><p>Tap the <strong>Approve</strong> button. The browser will disappear, and you will return to the app, which will now look like this:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png" alt="The app’s screen when the user is logged in."/></p><p>Tap the <strong>Get</strong> button. If you’ve never edited the value of the <code>country</code> field in the user’s metadata, the metadata text box will display the hint text “Enter country”.</p><p>Enter a country’s name (or any other text if you like) into the text box and tap the <strong>Set</strong> button. You’ll see this:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5NE22T6w25nAVecqCIZ7x7/3c913e712052570af8908e860da37d2a/main_screen_3.png" alt="The app’s screen, with the word “Morocco”, entered into the text field."/></p><p>Two things just happened:</p><ol start="1"><li>If the user’s metadata already had a <code>country</code> field, its value changed to whatever text you entered. If the user’s metadata didn’t have a <code>country</code> field, a <code>country</code> field was added to the metadata, and its value was set to whatever text you entered.</li><li>An Android pop-up message called a <a href="https://developer.android.com/reference/com/google/android/material/snackbar/Snackbar" target="_blank" rel="noreferrer noopener"><code>Snackbar</code></a> appeared at the bottom of the screen with the message “Success!”</li></ol><p>Log out of the app, then log in again. Tap the <strong>Get</strong> button. The app should fill the metadata text box with the value of the <code>country</code> metadata field.</p><p>Let’s look at the updated user metadata from the Auth0 side. In the Auth0 dashboard, go to the list of users. Do this by clicking <strong>User Management</strong> in the menu on the left side of the page, followed by clicking on <strong>Users</strong>. Select the user that is currently logged in on the app. You’ll be taken to that user’s <strong>Details</strong> page:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5nnVqPm4l6vVtgyvZpeYwI/db98ccbfb8b945ebde7ec7c8143724c5/user_details_page.png" alt="The Auth0 dashboard displaying the user’s “User Details” page. In the “user_metadata” field, a JSON object contains a single key-value pair with the key “country” and the value “Morocco”."/></p><p>Scroll down to the <strong>Metadata</strong> section of the page. You’ll see an area labeled <strong>user_metadata</strong>. If you filled out the <code>EditText</code> in the app, you’ll see it in the JSON object there:</p><pre><code><span>{</span>
    <span>&#34;country&#34;</span><span>:</span> <span>{</span><span>WHATEVER_TEXT_YOU_ENTERED</span><span>}</span>
<span>}</span></code></pre><p>Each Auth0 user account can store two kinds of metadata:</p><ul><li><strong>User metadata,</strong> which is meant for data intentionally provided by and controlled by the user. It’s typically used for storing information that the user wants to share with the app, such as their address, contact information, preferences, and similar data. Only data that the user can read and edit should be stored here.</li><li><strong>App metadata,</strong> which is meant for data provided by and controlled by the app. It’s typically used for storing information about the user that is primarily for the app’s use, such as the user’s roles, permissions, status, and similar data. There may be cases where the user can read this data, but you should not use app metadata to store data provided directly by the user.</li></ul><p>While a detailed look at the user account pages is beyond the scope of this article, you should explore them to see the kinds of data and functionality that are associated with user accounts.</p><h2 id="When-Things-Go-Sideways">When Things Go Sideways</h2><p>The expression “to go sideways” means “to go wrong” or “to not go according to plan.” In this section, I’ll show you what can go wrong when you’re writing an Android app and fail to account for what happens when the user turns their phone on its side. </p><h3 id="Inducing-app-amnesia">Inducing app amnesia</h3><p>Run the app and log in. You should see this:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png" alt="The app’s screen when the user is logged in, in portrait orientation."/></p><p>Rotate your device to landscape orientation:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/48FY3obLHoGHnHfugbSn7I/8bc142a3e3e69bde3deed3223e6d02d7/orientation_change.png" alt="The app screen viewed in landscape orientation. It has taken on the appearance of just having been launched."/></p><p>Notice what happened: </p><ul><li>The greeting text changed from “You’re logged in.” to “Welcome to the app!”, which is its state when the app is launched.</li><li>The buttons have also been returned to their initial state:  <strong>Log in</strong> is enabled, and <strong>Log out</strong> is disabled.</li></ul><p>It appears as if turning your device on its side has given your app amnesia and returned it to its initial state. What happened?</p><h3 id="Configuration-changes-and-reloading">Configuration changes and reloading</h3><p>To use a developer cliché: this isn’t a bug, but a feature.</p><p>Whenever it detects a configuration change, Android’s default response is to reload the current activity. There are many configuration changes, such as language, keyboard availability, or the change you made just now: screen orientation. Reloading an activity when a configuration change happens makes it run its initialization methods again and reload resources, allowing it to set itself up for the new configuration.</p><p>This behavior was designed for applications that present different interfaces in different orientations. YouTube is an example of such an app, which has different portrait and landscape UI setups:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4jHUrVT9Ekh5252HZc3T95/706f6ddb57bb1b6be1a37c82b1201297/youtube_portrait_and_landscape.png" alt="The YouTube app, shown in both orientations. In portrait orientation, it shows the video, ratings, and comments. In landscape orientation, the video takes up the entire screen."/></p><p>Changing the screen orientation reloaded the activity and restored the app to its initial state, but it <em>did not</em> change your “logged in” status. The <code><span>logout</span><span>(</span><span>)</span></code> method was not called when you turned your device on its side. You’re still logged in!</p><p>You can confirm your “logged in” status by tapping the <strong>Log in</strong> button. Note that there wasn’t an intermediate step where you had to enter your email address and password — you were taken straight to the app:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/01B8CQAD7K9uDYwkT7D1c7/08a21f19cdacc4ecdb065132cd2cf590/logged_in_sideways.png" alt="The app screen, viewed in landscape orientation, showing the user logged in. The bottom portion of the screen is not in sight."/></p><p>Note that that app never presented the login page. That’s because there wasn’t any need — you were still logged in. Let’s solve this problem.</p><h3 id="Curing-your-app-s-amnesia">Curing your app’s amnesia</h3><p>You can instruct Android <em>not</em> to reload Activities in the event of specified configuration changes in the app’s manifest. </p><p>🛠 Open <code>AndroidManifest<span>.</span>xml</code> and change the <code><span>&lt;</span>activity<span>&gt;</span></code> tag to the following:</p><pre><code><span><span><span>&lt;</span>activity</span>
    <span><span>android:</span>name</span><span><span>=</span><span>&#34;</span>.MainActivity<span>&#34;</span></span>
    <span><span>android:</span>exported</span><span><span>=</span><span>&#34;</span>true<span>&#34;</span></span>
    <span><span>android:</span>configChanges</span><span><span>=</span><span>&#34;</span>orientation|screenSize<span>&#34;</span></span> <span>&gt;</span></span></code></pre><p>This change adds the attribute <code>android<span>:</span>configChanges<span>=</span> “orientation<span>|</span>screenSize”</code> to <code>MainActivity</code>, which tells Android that the activity should <em>not</em> reload if the device orientation or screen size changes. Instead of reloading the activity, Android uses a callback method to notify the app of the change. The assumption is that you’ll handle those configuration changes yourself. Since we’ll ignore this callback, the configuration change has no effect.</p><p>Run the app and log in. Change the screen orientation, going from portrait to landscape and back. It no longer causes the activity to reload.</p><h2 id="Conclusion">Conclusion</h2><p>You’ve just built a simple app that features basic username/password <em>authentication</em> — the ability to identify a known user. In addition to log a user in and out, you can also retrieve the information in their profile, and read and update their metadata.</p><p>You can find the code for the complete project for this article in <a href="https://github.com/auth0-blog/get-started-android-authentication-kotlin" target="_blank" rel="noreferrer noopener">this repository on the <em>Auth0 Blog Samples</em> GitHub account</a>. The only change that you’ll need to make in order to run it is to enter your app’s client ID and tenant’s domain in the <code>auth0<span>.</span>xml</code> resource file.</p><p>This is the first in a new series of articles on Android development with Auth0. Future articles will cover new developments in Android 12 and Android Studio, as well as deeper dives into authentication and authorization with Android and Auth0 and alternatives to the standard username-and-password approach. Watch this space!</p><p><a href="https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-1" target="_blank" rel="noopener referrer">Next Step: Read the preview part here</a></p><p><a href="https://community.auth0.com/t/developing-a-secure-api-with-nestjs/33026" target="_blank" rel="noopener noreferrer">I ran into an issue</a></p></div></div>]]></content:encoded>
      <pubDate>Mon, 20 Sep 2021 18:29:00 +0000</pubDate>
    </item>
    <item>
      <title>Get Started with Android Authentication Using Kotlin: Part 2</title>
      <link>https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-2/</link>
      <description>Learn how to implement login, logout, and user profiles in Android apps using Kotlin and Auth0.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>In the previous section, you started an Android project that uses Auth0 for user login, logout, and reading and updating user metadata. You set up the project on both the Auth0 and app sides. In this section, you’ll complete the project and update it to ensure that it works in both portrait and landscape orientations.</p><h2 id="Write-the-code">Write the code</h2><p>Everything you’ve done so far in this exercise is just a preamble. It’s now time to write the actual code! This is the biggest task in the exercise, so let’s do it in small steps.​</p><p>🛠 Move to the <code>app<span>/</span>java<span>/</span>com<span>.</span>example<span>.</span>login</code> folder and open the main activity’s file, <code>MainActivity<span>.</span>kt</code>. Its contents should look like this:</p><pre><code><span>package</span> com<span>.</span>example<span>.</span>myapplication

<span>import</span> androidx<span>.</span>appcompat<span>.</span>app<span>.</span>AppCompatActivity
<span>import</span> android<span>.</span>os<span>.</span>Bundle

<span>class</span> MainActivity <span>:</span> <span>AppCompatActivity</span><span>(</span><span>)</span> <span>{</span>
    <span>override</span> <span>fun</span> <span>onCreate</span><span>(</span>savedInstanceState<span>:</span> Bundle<span>?</span><span>)</span> <span>{</span>
        <span>super</span><span>.</span><span>onCreate</span><span>(</span>savedInstanceState<span>)</span>
        <span>setContentView</span><span>(</span>R<span>.</span>layout<span>.</span>activity_main<span>)</span>
    <span>}</span>
<span>}</span></code></pre><h3 id="Import-the-necessary-libraries">Import the necessary libraries</h3><p>🛠 Add the following <code><span>import</span></code> statements to the ones already in the file:</p><pre><code><span>import</span> androidx<span>.</span>core<span>.</span>view<span>.</span>isVisible
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>Auth0
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>authentication<span>.</span>AuthenticationAPIClient
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>authentication<span>.</span>AuthenticationException
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>callback<span>.</span>Callback
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>management<span>.</span>ManagementException
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>management<span>.</span>UsersAPIClient
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>provider<span>.</span>WebAuthProvider
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>result<span>.</span>Credentials
<span>import</span> com<span>.</span>auth0<span>.</span>android<span>.</span>result<span>.</span>UserProfile
<span>import</span> com<span>.</span>google<span>.</span>android<span>.</span>material<span>.</span>snackbar<span>.</span>Snackbar</code></pre><p>Most of these <code><span>import</span></code> statements import classes from Auth0’s libraries. Here’s what those classes do:</p><ul><li><code>AuthenticationAPIClient</code>: Accesses the Auth0 Authentication API. The app uses this to retrieve the user’s profile information.</li><li><code>AuthenticationException</code>: Defines errors and exceptions that may arise during authentication.</li><li><code>Callback</code>: Defines an object containing “success” and “failure” callback functions that Auth0 should call after completing an API function.</li><li><code>ManagementException</code>: Defines errors and exceptions that <code>Callback</code> objects may have to handle.</li><li><code>UsersAPIClient</code>: Manages user information. The app uses this to retrieve the user’s profile information.</li><li><code>WebAuthProvider</code>: Provides Auth0’s web page-based login to the app. The app uses this to log the user in via a login page in a web browser and log the user out.</li><li><code>Credentials</code>: Stores the user’s credentials, including ID, access, and refresh tokens.</li><li><code>UserProfile</code>: Stores the user’s profile information, including their user ID, names, email address, and metadata.</li></ul><p>🛠 You’ll also need to import the <code>Activity</code> ’s auto-generated view binding library, which will make it possible for your code to reference views in the layout (or, to put it more simply: access the onscreen widgets). Do this by adding the following <code><span>import</span></code> statement, replacing <code><span>{</span><span>YOUR_PACKAGE_NAME_HERE</span><span>}</span></code> with the name of your app’s package, which you’ll find on the first line of the file:</p><pre><code><span>import</span> <span>{</span>YOUR_PACKAGE_NAME_HERE<span>}</span><span>.</span>databinding<span>.</span>ActivityMainBinding</code></pre><p>The package name for my app is <code>com<span>.</span>example<span>.</span>login</code>, so my <code><span>import</span></code> statement looks like this:</p><pre><code><span>import</span> com<span>.</span>example<span>.</span>login<span>.</span>databinding<span>.</span>ActivityMainBinding</code></pre><h3 id="Add-class-properties">Add class properties</h3><p>🛠 Add the following properties to <code>MainActivity</code> so that the start of the class looks like this:</p><pre><code><span>class</span> MainActivity <span>:</span> <span>AppCompatActivity</span><span>(</span><span>)</span> <span>{</span>

    <span>private</span> <span>lateinit</span> <span>var</span> binding<span>:</span> ActivityMainBinding

    <span>// Login/logout-related properties</span>
    <span>private</span> <span>lateinit</span> <span>var</span> account<span>:</span> Auth0
    <span>private</span> <span>var</span> cachedCredentials<span>:</span> Credentials<span>?</span> <span>=</span> <span>null</span>
    <span>private</span> <span>var</span> cachedUserProfile<span>:</span> UserProfile<span>?</span> <span>=</span> <span>null</span>


    <span>override</span> <span>fun</span> <span>onCreate</span><span>(</span>savedInstanceState<span>:</span> Bundle<span>?</span><span>)</span> <span>{</span>
    
    <span>..</span><span>.</span></code></pre><p>You’ll use the first property, <code>binding</code>, to access the widgets on the screen. The other three properties are related to logging in and out and are described in more detail below:</p><ul><li><code>account</code>: represents the app’s Auth0 account and is instantiated using the app’s client ID and the domain for the app’s Auth0 tenant. Let me make this clear: this isn’t the account of the user trying to log in, but the account of the developer or organization who is delegating the login/logout process to Auth0. In the case of this example, it’s <em>your</em> Auth0 developer account. <code>account</code>’s value is set in <code><span>onCreate</span><span>(</span><span>)</span></code> when the activity is instantiated.</li><li><code>cachedCredentials</code>: contains the user’s credentials that are returned from Auth0 after a successful login. Its value should be <code><span>null</span></code> when the user is <em>not</em> logged in. When the user is logged in, it should reference an instance of <code>Credentials</code>. A <code>Credentials</code> instance has the following properties:
  <ul><li><code>idToken</code>: The <a href="https://auth0.com/docs/tokens/id-tokens" target="_blank" rel="noreferrer noopener">ID token</a>, which contains user information that the app can use to customize the user’s experience.</li><li><code>accessToken</code>: The <a href="https://auth0.com/docs/tokens/access-tokens" target="_blank" rel="noreferrer noopener">access token</a>, which is a credential that allows the app to access the Auth0 API.</li><li><code>refreshToken</code>: The <a href="https://auth0.com/docs/tokens/refresh-tokens" target="_blank" rel="noreferrer noopener">refresh token</a>, which can be used to request a new access token when the original access token expires, without requiring the user to re-authenticate.</li><li><code>type</code>: The type of the received access token.</li><li><code>expiresAt</code>: The date/time when the received access token expires.</li><li><code>scope</code>: The scopes granted to the access token. I’ll explain what scopes are in the next section, <em>The login method</em>.</li></ul></li><li><code>cachedUserProfile</code>: holds the user’s profile information. Its value should be <code><span>null</span></code> when the user is <em>not</em> logged in. When the user is logged in, it should reference an instance of <code>UserProfile</code>. A <code>UserProfile</code> instance has the following properties:
<ul><li><code>email</code>: The email address corresponding to the user account.</li><li><code>isEmailVerified</code>: <code><span>true</span></code> if the user responded to the verification email sent by Auth0 after they registered themselves as a user.</li><li><code>name</code>: The user’s full name.</li><li><code>givenName</code>: The user’s given name, often referred to as their “first name” or “forename”.</li><li><code>familyName</code>: The user’s family name, often referred to as their “last name” or “surname”.</li><li><code>nickname</code>: The user’s nickname, sometimes referred to as thier “familiar name” or “moniker”.</li><li><code>PictureURL</code>: The URL where the user’s picture can be retrieved.</li><li><code>createdAt</code>: The creation date and time of the user’s account.</li></ul></li></ul><h3 id="Update-the--onCreate----method">Update the <code><span>onCreate</span><span>(</span><span>)</span></code> method</h3><p>First, let’s fill out the <code><span>onCreate</span><span>(</span><span>)</span></code> method that was automatically generated for the project and use it to initialize everything in the activity.</p><p>🛠 Update the <code><span>onCreate</span><span>(</span><span>)</span></code> method so that it looks like this:</p><pre><code><span>override</span> <span>fun</span> <span>onCreate</span><span>(</span>savedInstanceState<span>:</span> Bundle<span>?</span><span>)</span> <span>{</span>
    <span>super</span><span>.</span><span>onCreate</span><span>(</span>savedInstanceState<span>)</span>

    account <span>=</span> <span>Auth0</span><span>(</span>
        <span>getString</span><span>(</span>R<span>.</span>string<span>.</span>com_auth0_client_id<span>)</span><span>,</span>
        <span>getString</span><span>(</span>R<span>.</span>string<span>.</span>com_auth0_domain<span>)</span>
    <span>)</span>

    binding <span>=</span> ActivityMainBinding<span>.</span><span>inflate</span><span>(</span>layoutInflater<span>)</span>
    <span>setContentView</span><span>(</span>binding<span>.</span>root<span>)</span>

    binding<span>.</span>buttonLogin<span>.</span><span>setOnClickListener</span> <span>{</span> <span>login</span><span>(</span><span>)</span> <span>}</span>
    binding<span>.</span>buttonLogout<span>.</span><span>setOnClickListener</span> <span>{</span> <span>logout</span><span>(</span><span>)</span> <span>}</span>
    binding<span>.</span>buttonGet<span>.</span><span>setOnClickListener</span> <span>{</span> <span>getUserMetadata</span><span>(</span><span>)</span> <span>}</span>
    binding<span>.</span>buttonSet<span>.</span><span>setOnClickListener</span> <span>{</span> <span>setUserMetadata</span><span>(</span><span>)</span> <span>}</span>
<span>}</span></code></pre><p>This method:</p><ul><li>Defines the account object, which contains the necessary credentials to connect to your Auth0 account.</li><li>Creates a view binding object, which you’ll use to access the onscreen widgets.</li><li>Connects the <strong>Log in</strong>, <strong>Log out</strong>, <strong>Get</strong>, and <strong>Set</strong> buttons to the methods they should call when tapped.</li></ul><h3 id="Add-the--login----method">Add the <code><span>login</span><span>(</span><span>)</span></code> method</h3><p>The next step is to implement the method that gets called when the user taps the <strong>Log In</strong> button.</p><p>🛠 Add this to the class after <code><span>onCreate</span><span>(</span><span>)</span></code>:</p><pre><code><span>private</span> <span>fun</span> <span>login</span><span>(</span><span>)</span> <span>{</span>
    WebAuthProvider
        <span>.</span><span>login</span><span>(</span>account<span>)</span>
        <span>.</span><span>withScheme</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>com_auth0_scheme<span>)</span><span>)</span>
        <span>.</span><span>withScope</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>login_scopes<span>)</span><span>)</span>
        <span>.</span><span>withAudience</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>login_audience<span>,</span> <span>getString</span><span>(</span>R<span>.</span>string<span>.</span>com_auth0_domain<span>)</span><span>)</span><span>)</span>
        <span>.</span><span>start</span><span>(</span><span>this</span><span>,</span> <span>object</span> <span>:</span> Callback<span>&lt;</span>Credentials<span>,</span> AuthenticationException<span>&gt;</span> <span>{</span>

            <span>override</span> <span>fun</span> <span>onFailure</span><span>(</span>exception<span>:</span> AuthenticationException<span>)</span> <span>{</span>
                <span>showSnackBar</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>login_failure_message<span>,</span> exception<span>.</span><span>getCode</span><span>(</span><span>)</span><span>)</span><span>)</span>
            <span>}</span>

            <span>override</span> <span>fun</span> <span>onSuccess</span><span>(</span>credentials<span>:</span> Credentials<span>)</span> <span>{</span>
                cachedCredentials <span>=</span> credentials
                <span>showSnackBar</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>login_success_message<span>,</span> credentials<span>.</span>accessToken<span>)</span><span>)</span>
                <span>updateUI</span><span>(</span><span>)</span>
                <span>showUserProfile</span><span>(</span><span>)</span>
            <span>}</span>
        <span>}</span><span>)</span>
<span>}</span></code></pre><p><code><span>login</span><span>(</span><span>)</span></code> uses the Auth0 SDK’s <code>WebAuthProvider</code> class, which gives the app the ability to use Auth0’s authentication service. The <code>WebAuthProvider</code> methods that you’ll use most often are its <code><span>login</span><span>(</span><span>)</span></code> and <code><span>logout</span><span>(</span><span>)</span></code> methods.</p><p>Although this method is formatted to span several lines, it’s just a single line of code. The single line is made of a call to a chain of <code>WebAuthProvider</code> ’s methods starting with <code><span>login</span><span>(</span><span>)</span></code>. If you ignore all the comments and parameters, the method chain looks like this:</p><pre><code>WebAuthProvider
    <span>.</span><span>login</span><span>(</span><span>)</span>
    <span>.</span><span>withScheme</span><span>(</span><span>)</span>
    <span>.</span><span>withScope</span><span>(</span><span>)</span>
    <span>.</span><span>withAudience</span><span>(</span><span>)</span>
    <span>.</span><span>start</span><span>(</span><span>)</span></code></pre><p>This is the <a href="https://www.baeldung.com/kotlin/builder-pattern" target="_blank" rel="noreferrer noopener">Builder design pattern</a> in action. From <code><span>login</span><span>(</span><span>)</span></code> to <code><span>withAudience</span><span>(</span><span>)</span></code>, each method in the chain takes an argument that provides additional information about the login, using that information to creates a <code>WebAuthProvider</code> object that it passes to the next method in the chain. The final method in the chain, <code><span>start</span><span>(</span><span>)</span></code>, takes the resulting <code>WebAuthProvider</code> object as its argument and uses it to display the login page and define what should happen when the login succeeds and when it fails.</p><p>Let’s take a look at what each of the methods in the chain does.</p><p><code><span>login</span><span>(</span><span>)</span></code> initiates the login process and specifies the Auth0 account used by the application.</p><p><code><span>withScheme</span><span>(</span><span>)</span></code> specifies the scheme to use for the URL that Auth0 redirects to after a successful login. For web apps, the scheme is <code>http</code> or <code>https</code>. This value is arbitrary for native mobile apps, so we use <code>app</code> to make it clear to other developers and other people who may use the Auth0 settings for this app that the redirect is <em>not</em> to a web page.</p><p><code><span>withScope</span><span>(</span><span>)</span></code> specifies which sets of user data the app is authorized to use if the user logs in successfully. The OpenID Connect and OAuth frameworks, on which Auth0’s authentication and authorization are based, use the term <a href="https://auth0.com/docs/scopes/openid-connect-scopes" target="_blank" rel="noreferrer noopener"><em>scope</em></a> to represent the authorization to access user’s data and resources. The method takes a space-delimited string as its argument, where each “word” in the string specifies a different scope. The string used in this app contains these scopes:</p><ul><li><code>openid</code>: Indicates that application that uses OpenID Connect for authentication. This is the only required scope; all other scopes are optional.</li><li><code>profile</code>: Authorizes the application to access basic user profile information, including first name, surname, nickname, their photo or avatar, and so on.</li><li><code>email</code>: Authorizes the application to access the user’s email address.</li><li><code>read<span>:</span>current_user</code>: Authorizes the application with read-only access to the <code>current_user</code> claim.</li><li><code>update<span>:</span>current_user_metadata</code>: Authorizes the application with read and write  access to the <code>current_user_metadata</code> claim. This scope allows us to get and set the <code>country</code> value in the user’s metadata.</li></ul><p><code><span>withAudience</span><span>(</span><span>)</span></code> specifies the URL that the app will use to connect to Auth0’s login service. This URL is constructed using the domain of the Auth0 tenant used by the app and the endpoint for the Auth0 authentication API.</p><p><code><span>start</span><span>(</span><span>)</span></code> takes the <code>WebAuthProvider</code> object constructed by all the previous methods in the chain and opens the browser window to display the login page. It takes two parameters: a context (a reference to the <code>Activity</code> that’s initiating the browser window) and an anonymous object with two callback methods:</p><ul><li><code><span>onFailure</span><span>(</span><span>)</span></code>: Defines what should happen if the user returns from the browser login screen without successfully logging in. This typically happens when the user closes the browser login screen or taps the “back” button while on that screen. The app displays a <code>SnackBar</code> that notifies the user that login failed, followed by an error code.</li><li><code><span>onSuccess</span><span>(</span><span>)</span></code>: Defines what should happen if the user returns from the browser login screen after successfully logging in. The app processes the successful response, displays a <code>SnackBar</code> notifying the user that login was successful, and updates the UI to its “logged in” state.</li></ul><h3 id="Add-the--logout----method">Add the <code><span>logout</span><span>(</span><span>)</span></code> method</h3><p>You’ve probably guessed that if there’s a <code><span>login</span><span>(</span><span>)</span></code> method that’s called when the user presses the <strong>Log In</strong> button, there must also be a <code><span>logout</span><span>(</span><span>)</span></code> method that’s called when the user presses the <strong>Log Out</strong> button.</p><p>🛠 Add this method to the class after <code><span>login</span><span>(</span><span>)</span></code>:</p><pre><code><span>private</span> <span>fun</span> <span>logout</span><span>(</span><span>)</span> <span>{</span>
    WebAuthProvider
        <span>.</span><span>logout</span><span>(</span>account<span>)</span>
        <span>.</span><span>withScheme</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>com_auth0_scheme<span>)</span><span>)</span>
        <span>.</span><span>start</span><span>(</span><span>this</span><span>,</span> <span>object</span> <span>:</span> Callback<span>&lt;</span>Void<span>?</span><span>,</span> AuthenticationException<span>&gt;</span> <span>{</span>

            <span>override</span> <span>fun</span> <span>onFailure</span><span>(</span>exception<span>:</span> AuthenticationException<span>)</span> <span>{</span>
                <span>updateUI</span><span>(</span><span>)</span>
                <span>showSnackBar</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>general_failure_with_exception_code<span>,</span>
                    exception<span>.</span><span>getCode</span><span>(</span><span>)</span><span>)</span><span>)</span>
            <span>}</span>

            <span>override</span> <span>fun</span> <span>onSuccess</span><span>(</span>payload<span>:</span> Void<span>?</span><span>)</span> <span>{</span>
                cachedCredentials <span>=</span> <span>null</span>
                cachedUserProfile <span>=</span> <span>null</span>
                <span>updateUI</span><span>(</span><span>)</span>
            <span>}</span>

        <span>}</span><span>)</span>
<span>}</span></code></pre><p>As with <code><span>login</span><span>(</span><span>)</span></code>, <code><span>logout</span><span>(</span><span>)</span></code> also uses the Auth0 SDK’s <code>WebAuthProvider</code> class and is a one-liner that uses the Builder pattern. This time, that one line calls a shorter chain of <code>WebAuthProvider</code> ’s methods starting with <code><span>logout</span><span>(</span><span>)</span></code>. If you ignore all the parameters, the method chain looks like this:</p><pre><code>WebAuthProvider
    <span>.</span><span>logout</span><span>(</span><span>)</span>
    <span>.</span><span>withScheme</span><span>(</span><span>)</span>
    <span>.</span><span>start</span><span>(</span><span>)</span></code></pre><p><code><span>logout</span><span>(</span><span>)</span></code> initiates the logout process and specifies the Auth0 account used by the application, which should be the same account as the one used to log in.</p><p><code><span>withScheme</span><span>(</span><span>)</span></code> specifies the scheme to use for the URL that Auth0 redirects to after successful logout. This should be the same scheme as the one used to log in.</p><p><code><span>start</span><span>(</span><span>)</span></code> takes the <code>WebAuthProvider</code> object constructed by all the previous methods in the chain to log the user out. It takes two parameters: a context (a reference to the <code>Activity</code> that’s initiating the logout process) and an anonymous object with two callback methods:</p><ul><li><code><span>onFailure</span><span>(</span><span>)</span></code>: Defines what should happen when the logout process fails. This rarely happens and usually indicates a network or server issue. In this example, the app updates the UI (which remains in the “logged in” state) and displays a <code>SnackBar</code> that notifies the user that logout failed, followed by an error code.</li><li><code><span>onSuccess</span><span>(</span><span>)</span></code>: Defines what should happen when the logout process succeeds. In this example, the app destroys its local copies of the user’s credentials and profile and updates the UI to its “logged out” state.</li></ul><h3 id="Add-the--showUserProfile----method">Add the <code><span>showUserProfile</span><span>(</span><span>)</span></code> method</h3><p>Every Auth0 user has a <em>user profile</em> associated with their account. The user profile contains the following basic information about the user:</p><ul><li>Names: The user’s full name, given name, surname, and nickname</li><li>Email info: The user’s email address, and whether it was verified</li><li>Picture: The location of an image that identifies the user</li><li>Creation date: The date and time when the user’s account was created</li></ul><p>When the user successfully logs in, the app should display their name and email onscreen. It does so by calling <code><span>showUserProfile</span><span>(</span><span>)</span></code> immediately after a successful login.</p><p>🛠 Add this method to the class after <code><span>logout</span><span>(</span><span>)</span></code>:</p><pre><code><span>private</span> <span>fun</span> <span>showUserProfile</span><span>(</span><span>)</span> <span>{</span>
    <span>// Guard against showing the profile when no user is logged in</span>
    <span>if</span> <span>(</span>cachedCredentials <span>==</span> <span>null</span><span>)</span> <span>{</span>
        <span>return</span>
    <span>}</span>

    <span>val</span> client <span>=</span> <span>AuthenticationAPIClient</span><span>(</span>account<span>)</span>
    client
        <span>.</span><span>userInfo</span><span>(</span>cachedCredentials<span>!!</span><span>.</span>accessToken<span>!!</span><span>)</span>
        <span>.</span><span>start</span><span>(</span><span>object</span> <span>:</span> Callback<span>&lt;</span>UserProfile<span>,</span> AuthenticationException<span>&gt;</span> <span>{</span>

            <span>override</span> <span>fun</span> <span>onFailure</span><span>(</span>exception<span>:</span> AuthenticationException<span>)</span> <span>{</span>
                <span>showSnackBar</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>general_failure_with_exception_code<span>,</span>
                    exception<span>.</span><span>getCode</span><span>(</span><span>)</span><span>)</span><span>)</span>
            <span>}</span>

            <span>override</span> <span>fun</span> <span>onSuccess</span><span>(</span>profile<span>:</span> UserProfile<span>)</span> <span>{</span>
                cachedUserProfile <span>=</span> profile
                <span>updateUI</span><span>(</span><span>)</span>
            <span>}</span>

        <span>}</span><span>)</span>
<span>}</span></code></pre><p>This method is the final task performed by the <code><span>onSuccess</span><span>(</span><span>)</span></code> callback method in  <code><span>loginWithBrowser</span><span>(</span><span>)</span></code>. It initializes the <code>cachedUserProfile</code> property, which contains the user’s profile information.</p><p>As a precaution, it returns immediately if the <code>cachedCredentials</code> property is <code><span>null</span></code>, which implies that no user is logged in, and therefore there isn’t any user profile to show.</p><p>In order to get this information, it does the following:</p><ul><li>It creates an instance of <code>AuthenticationAPIClient</code>, which retrieves Auth0 account information. Like the login and logout methods, this also uses the Builder pattern.</li><li>It uses <code>AuthenticationAPIClient</code> ’s <code><span>userInfo</span><span>(</span><span>)</span></code> method to specify that we want to retrieve user profile information from Auth0. This method requires a valid access token, which it extracts from the <code>cachedCredentials</code> property.</li><li>Finally, it defines callback methods for the cases where it failed and succeeded in retrieving the user profile information from Auth0. If the retrieval was successful, the profile information is stored in <code>cachedUserProfile</code>, and the UI is updated to display the user’s name and email address.</li></ul><h3 id="Add-the--getUserMetadata----and--setUserMetadata----methods">Add the <code><span>getUserMetadata</span><span>(</span><span>)</span></code> and <code><span>setUserMetadata</span><span>(</span><span>)</span></code> methods</h3><p>The user profile contains information that generally applies to <em>every</em> user account regardless of the type of application it’s being used for — name, email, photo, and date/time created. While this is necessary information, it’s probably not <em>all</em> the user information that you want to store in their profile.</p><p>That what the <em>user metadata</em> is for. Think of it as a key-value store where you can place additional user information that isn’t covered by the user profile. In this app, the user metadata will store just one additional piece of user information — their country — and it will allow the user to retrieve and update this information.</p><p>🛠 Add the following to the class after <code><span>showUserProfile</span><span>(</span><span>)</span></code>:</p><pre><code><span>private</span> <span>fun</span> <span>getUserMetadata</span><span>(</span><span>)</span> <span>{</span>
    <span>// Guard against getting the metadata when no user is logged in</span>
    <span>if</span> <span>(</span>cachedCredentials <span>==</span> <span>null</span><span>)</span> <span>{</span>
        <span>return</span>
    <span>}</span>

    <span>val</span> usersClient <span>=</span> <span>UsersAPIClient</span><span>(</span>account<span>,</span> cachedCredentials<span>!!</span><span>.</span>accessToken<span>!!</span><span>)</span>

    usersClient
        <span>.</span><span>getProfile</span><span>(</span>cachedUserProfile<span>!!</span><span>.</span><span>getId</span><span>(</span><span>)</span><span>!!</span><span>)</span>
        <span>.</span><span>start</span><span>(</span><span>object</span> <span>:</span> Callback<span>&lt;</span>UserProfile<span>,</span> ManagementException<span>&gt;</span> <span>{</span>

            <span>override</span> <span>fun</span> <span>onFailure</span><span>(</span>exception<span>:</span> ManagementException<span>)</span> <span>{</span>
                <span>showSnackBar</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>general_failure_with_exception_code<span>,</span>
                    exception<span>.</span><span>getCode</span><span>(</span><span>)</span><span>)</span><span>)</span>
            <span>}</span>

            <span>override</span> <span>fun</span> <span>onSuccess</span><span>(</span>userProfile<span>:</span> UserProfile<span>)</span> <span>{</span>
                cachedUserProfile <span>=</span> userProfile
                <span>updateUI</span><span>(</span><span>)</span>

                <span>val</span> country <span>=</span> userProfile<span>.</span><span>getUserMetadata</span><span>(</span><span>)</span><span>[</span><span>&#34;country&#34;</span><span>]</span> <span>as</span> String<span>?</span>
                binding<span>.</span>edittextCountry<span>.</span><span>setText</span><span>(</span>country<span>)</span>
            <span>}</span>

        <span>}</span><span>)</span>
<span>}</span>

<span>private</span> <span>fun</span> <span>setUserMetadata</span><span>(</span><span>)</span> <span>{</span>
    <span>// Guard against getting the metadata when no user is logged in</span>
    <span>if</span> <span>(</span>cachedCredentials <span>==</span> <span>null</span><span>)</span> <span>{</span>
        <span>return</span>
    <span>}</span>

    <span>val</span> usersClient <span>=</span> <span>UsersAPIClient</span><span>(</span>account<span>,</span> cachedCredentials<span>!!</span><span>.</span>accessToken<span>!!</span><span>)</span>
    <span>val</span> metadata <span>=</span> <span>mapOf</span><span>(</span><span>&#34;country&#34;</span> <span>to</span> binding<span>.</span>edittextCountry<span>.</span>text<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span>

    usersClient
        <span>.</span><span>updateMetadata</span><span>(</span>cachedUserProfile<span>!!</span><span>.</span><span>getId</span><span>(</span><span>)</span><span>!!</span><span>,</span> metadata<span>)</span>
        <span>.</span><span>start</span><span>(</span><span>object</span> <span>:</span> Callback<span>&lt;</span>UserProfile<span>,</span> ManagementException<span>&gt;</span> <span>{</span>

            <span>override</span> <span>fun</span> <span>onFailure</span><span>(</span>exception<span>:</span> ManagementException<span>)</span> <span>{</span>
                <span>showSnackBar</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>general_failure_with_exception_code<span>,</span>
                    exception<span>.</span><span>getCode</span><span>(</span><span>)</span><span>)</span><span>)</span>
            <span>}</span>

            <span>override</span> <span>fun</span> <span>onSuccess</span><span>(</span>profile<span>:</span> UserProfile<span>)</span> <span>{</span>
                cachedUserProfile <span>=</span> profile
                <span>updateUI</span><span>(</span><span>)</span>

                <span>showSnackBar</span><span>(</span><span>getString</span><span>(</span>R<span>.</span>string<span>.</span>general_success_message<span>)</span><span>)</span>
            <span>}</span>

        <span>}</span><span>)</span>
<span>}</span></code></pre><p>While <code><span>showUserProfile</span><span>(</span><span>)</span></code> uses an instance of <code>AuthenticationAPIClient</code> to get the user profile information, <code><span>getUserMetadata</span><span>(</span><span>)</span></code> and <code><span>setUserMetadata</span><span>(</span><span>)</span></code> use a different object type: <code>UsersAPIClient</code>.</p><p>Unlike <code>AuthenticationAPIClient</code>, which needs only an <code>Auth0</code> account object to be instantiated, you need both an <code>Auth0</code> account object and an access token to instantiate a <code>UsersAPIClient</code> object.</p><p><code><span>getUserMetadata</span><span>(</span><span>)</span></code> specifies the user profile using <code>UsersAPIClient</code> ’s <code><span>getProfile</span><span>(</span><span>)</span></code> method and the ID of the user, followed by the <code><span>start</span><span>(</span><span>)</span></code> method to attempt to get the user profile and define callback methods for failure and success.</p><p><code><span>getUserMetadata</span><span>(</span><span>)</span></code>’s <code><span>onSuccess</span><span>(</span><span>)</span></code> callback is almost the same as <code><span>showUserProfile</span><span>(</span><span>)</span></code>’s — it just has these two additional lines that extract the <code>country</code> value from the user’s metadata and display it onscreen:</p><pre><code><span>val</span> country <span>=</span> userProfile<span>.</span><span>getUserMetadata</span><span>(</span><span>)</span><span>[</span><span>&#34;country&#34;</span><span>]</span> <span>as</span> String<span>?</span>
binding<span>.</span>edittextCountry<span>.</span><span>setText</span><span>(</span>country<span>)</span></code></pre><p><code><span>setUserMetadata</span><span>(</span><span>)</span></code> defines a <code>Map</code> with a single key-value pair, where the key is the string <code>country</code> and the corresponding value is the contents of the <code>EditText</code> where the user enters the name of their country. It then passes that <code>Map</code> along with the user’s ID to <code>UsersAPIClient</code> ’s <code><span>updateMetadata</span><span>(</span><span>)</span></code> method to specify the change to be made, followed by the <code><span>start</span><span>(</span><span>)</span></code> method to initiate the update and define callback methods for failure and success.</p><p><code><span>setUserMetadata</span><span>(</span><span>)</span></code>’s <code><span>onSuccess</span><span>(</span><span>)</span></code> callback is almost the same as <code><span>getUserMetadata</span><span>(</span><span>)</span></code>’s — but instead of updating the <code>EditText</code> where the user enters the name of their country, it simply displays a <code>SnackBar</code> notifying the user that it was successful in updating the metadata.</p><h3 id="Add-the-UI-methods">Add the UI methods</h3><p>The final step is to add the methods that present information to the user.</p><p>🛠 Add the following to the class after <code><span>getUserMetadata</span><span>(</span><span>)</span></code> and <code><span>setUserMetadata</span><span>(</span><span>)</span></code>:</p><pre><code><span>private</span> <span>fun</span> <span>updateUI</span><span>(</span><span>)</span> <span>{</span>
    <span>val</span> isLoggedIn <span>=</span> cachedCredentials <span>!=</span> <span>null</span>

    binding<span>.</span>textviewTitle<span>.</span>text <span>=</span> <span>if</span> <span>(</span>isLoggedIn<span>)</span> <span>{</span>
        <span>getString</span><span>(</span>R<span>.</span>string<span>.</span>logged_in_title<span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
        <span>getString</span><span>(</span>R<span>.</span>string<span>.</span>logged_out_title<span>)</span>
    <span>}</span>
    binding<span>.</span>buttonLogin<span>.</span>isEnabled <span>=</span> <span>!</span>isLoggedIn
    binding<span>.</span>buttonLogout<span>.</span>isEnabled <span>=</span> isLoggedIn
    binding<span>.</span>linearlayoutMetadata<span>.</span>isVisible <span>=</span> isLoggedIn

    binding<span>.</span>textviewUserProfile<span>.</span>isVisible <span>=</span> isLoggedIn

    <span>val</span> userName <span>=</span> cachedUserProfile<span>?</span><span>.</span>name <span>?:</span> <span>&#34;&#34;</span>
    <span>val</span> userEmail <span>=</span> cachedUserProfile<span>?</span><span>.</span>email <span>?:</span> <span>&#34;&#34;</span>
    binding<span>.</span>textviewUserProfile<span>.</span>text <span>=</span> <span>getString</span><span>(</span>R<span>.</span>string<span>.</span>user_profile<span>,</span> userName<span>,</span> userEmail<span>)</span>

    <span>if</span> <span>(</span><span>!</span>isLoggedIn<span>)</span> <span>{</span>
        binding<span>.</span>edittextCountry<span>.</span><span>setText</span><span>(</span><span>&#34;&#34;</span><span>)</span>
    <span>}</span>
<span>}</span>

<span>private</span> <span>fun</span> <span>showSnackBar</span><span>(</span>text<span>:</span> String<span>)</span> <span>{</span>
    Snackbar
        <span>.</span><span>make</span><span>(</span>
        binding<span>.</span>root<span>,</span>
        text<span>,</span>
        Snackbar<span>.</span>LENGTH_LONG
    <span>)</span><span>.</span><span>show</span><span>(</span><span>)</span>
<span>}</span></code></pre><p>If you’ve made it this far, I have great news for you: you’ve written all the code for the app!</p><h2 id="See-the-App-in-Action">See the App in Action</h2><p>Run the app. You’ll see this:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7FSXqzXczgaNUC5NnY9q1F/d72b55833d1bf446c70d60488f7f4ae0/welcome_screen.png" alt="The app’s screen when launched."/></p><p>Tap the <strong>Log in</strong> button. The app will open a browser window that will display the login web page:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/53TEQjPR0HhmvGIC8BXW7a/e7b6205b7c401883c61b162c498a00f7/universal_login.png" alt="The Auth0 login web page."/></p><p>Log in using the email address and password of the user account you created earlier. Since this is the first time the account has logged into the app, the <strong>Authorize App</strong> page will appear in the browser window:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4AkDSwWeHROplHJV3KOFcg/98376afd920b0af2a2e732a06c7fb622/authorize_app.png" alt="The “Authorize App” screen. It says that the app is requesting access to your user account, particularly the “profile”, “current_user”, and “current_user_metadata” information."/></p><p>This page is asking you to authorize the app to access the following information in your user account:</p><ul><li>Profile: access to your profile and email</li><li>Current_user: read your current_user</li><li>Current_user_metadata: update your current_user_metadata</li></ul><p>If these items sound familiar, it’s because you’ve seen them recently. They’re the names of the scopes in the <code>login_scopes</code> string in the <code>strings<span>.</span>xml</code> resource...</p><pre><code><span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>login_scopes<span>&#34;</span></span><span>&gt;</span></span>
    openid profile email read:current_user update:current_user_metadata
<span><span><span>&lt;/</span>string</span><span>&gt;</span></span></code></pre><p>...which the call to <code><span>withScope</span><span>(</span><span>)</span></code> in the <code><span>login</span><span>(</span><span>)</span></code> method uses to specify which sets of user data the app is authorized to use. This additional step informs the user of this use of their data and gives them a choice to approve or decline.</p><p>Tap the <strong>Approve</strong> button. The browser will disappear, and you will return to the app, which will now look like this:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png" alt="The app’s screen when the user is logged in."/></p><p>Tap the <strong>Get</strong> button. If you’ve never edited the value of the <code>country</code> field in the user’s metadata, the metadata text box will display the hint text “Enter country”.</p><p>Enter a country’s name (or any other text if you like) into the text box and tap the <strong>Set</strong> button. You’ll see this:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5NE22T6w25nAVecqCIZ7x7/3c913e712052570af8908e860da37d2a/main_screen_3.png" alt="The app’s screen, with the word “Morocco”, entered into the text field."/></p><p>Two things just happened:</p><ol start="1"><li>If the user’s metadata already had a <code>country</code> field, its value changed to whatever text you entered. If the user’s metadata didn’t have a <code>country</code> field, a <code>country</code> field was added to the metadata, and its value was set to whatever text you entered.</li><li>An Android pop-up message called a <a href="https://developer.android.com/reference/com/google/android/material/snackbar/Snackbar" target="_blank" rel="noreferrer noopener"><code>Snackbar</code></a> appeared at the bottom of the screen with the message “Success!”</li></ol><p>Log out of the app, then log in again. Tap the <strong>Get</strong> button. The app should fill the metadata text box with the value of the <code>country</code> metadata field.</p><p>Let’s look at the updated user metadata from the Auth0 side. In the Auth0 dashboard, go to the list of users. Do this by clicking <strong>User Management</strong> in the menu on the left side of the page, followed by clicking on <strong>Users</strong>. Select the user that is currently logged in on the app. You’ll be taken to that user’s <strong>Details</strong> page:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5nnVqPm4l6vVtgyvZpeYwI/db98ccbfb8b945ebde7ec7c8143724c5/user_details_page.png" alt="The Auth0 dashboard displaying the user’s “User Details” page. In the “user_metadata” field, a JSON object contains a single key-value pair with the key “country” and the value “Morocco”."/></p><p>Scroll down to the <strong>Metadata</strong> section of the page. You’ll see an area labeled <strong>user_metadata</strong>. If you filled out the <code>EditText</code> in the app, you’ll see it in the JSON object there:</p><pre><code><span>{</span>
    <span>&#34;country&#34;</span><span>:</span> <span>{</span><span>WHATEVER_TEXT_YOU_ENTERED</span><span>}</span>
<span>}</span></code></pre><p>Each Auth0 user account can store two kinds of metadata:</p><ul><li><strong>User metadata,</strong> which is meant for data intentionally provided by and controlled by the user. It’s typically used for storing information that the user wants to share with the app, such as their address, contact information, preferences, and similar data. Only data that the user can read and edit should be stored here.</li><li><strong>App metadata,</strong> which is meant for data provided by and controlled by the app. It’s typically used for storing information about the user that is primarily for the app’s use, such as the user’s roles, permissions, status, and similar data. There may be cases where the user can read this data, but you should not use app metadata to store data provided directly by the user.</li></ul><p>While a detailed look at the user account pages is beyond the scope of this article, you should explore them to see the kinds of data and functionality that are associated with user accounts.</p><h2 id="When-Things-Go-Sideways">When Things Go Sideways</h2><p>The expression “to go sideways” means “to go wrong” or “to not go according to plan.” In this section, I’ll show you what can go wrong when you’re writing an Android app and fail to account for what happens when the user turns their phone on its side. </p><h3 id="Inducing-app-amnesia">Inducing app amnesia</h3><p>Run the app and log in. You should see this:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png" alt="The app’s screen when the user is logged in, in portrait orientation."/></p><p>Rotate your device to landscape orientation:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/48FY3obLHoGHnHfugbSn7I/8bc142a3e3e69bde3deed3223e6d02d7/orientation_change.png" alt="The app screen viewed in landscape orientation. It has taken on the appearance of just having been launched."/></p><p>Notice what happened: </p><ul><li>The greeting text changed from “You’re logged in.” to “Welcome to the app!”, which is its state when the app is launched.</li><li>The buttons have also been returned to their initial state:  <strong>Log in</strong> is enabled, and <strong>Log out</strong> is disabled.</li></ul><p>It appears as if turning your device on its side has given your app amnesia and returned it to its initial state. What happened?</p><h3 id="Configuration-changes-and-reloading">Configuration changes and reloading</h3><p>To use a developer cliché: this isn’t a bug, but a feature.</p><p>Whenever it detects a configuration change, Android’s default response is to reload the current activity. There are many configuration changes, such as language, keyboard availability, or the change you made just now: screen orientation. Reloading an activity when a configuration change happens makes it run its initialization methods again and reload resources, allowing it to set itself up for the new configuration.</p><p>This behavior was designed for applications that present different interfaces in different orientations. YouTube is an example of such an app, which has different portrait and landscape UI setups:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4jHUrVT9Ekh5252HZc3T95/706f6ddb57bb1b6be1a37c82b1201297/youtube_portrait_and_landscape.png" alt="The YouTube app, shown in both orientations. In portrait orientation, it shows the video, ratings, and comments. In landscape orientation, the video takes up the entire screen."/></p><p>Changing the screen orientation reloaded the activity and restored the app to its initial state, but it <em>did not</em> change your “logged in” status. The <code><span>logout</span><span>(</span><span>)</span></code> method was not called when you turned your device on its side. You’re still logged in!</p><p>You can confirm your “logged in” status by tapping the <strong>Log in</strong> button. Note that there wasn’t an intermediate step where you had to enter your email address and password — you were taken straight to the app:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/01B8CQAD7K9uDYwkT7D1c7/08a21f19cdacc4ecdb065132cd2cf590/logged_in_sideways.png" alt="The app screen, viewed in landscape orientation, showing the user logged in. The bottom portion of the screen is not in sight."/></p><p>Note that that app never presented the login page. That’s because there wasn’t any need — you were still logged in. Let’s solve this problem.</p><h3 id="Curing-your-app-s-amnesia">Curing your app’s amnesia</h3><p>You can instruct Android <em>not</em> to reload Activities in the event of specified configuration changes in the app’s manifest. </p><p>🛠 Open <code>AndroidManifest<span>.</span>xml</code> and change the <code><span>&lt;</span>activity<span>&gt;</span></code> tag to the following:</p><pre><code><span><span><span>&lt;</span>activity</span>
    <span><span>android:</span>name</span><span><span>=</span><span>&#34;</span>.MainActivity<span>&#34;</span></span>
    <span><span>android:</span>exported</span><span><span>=</span><span>&#34;</span>true<span>&#34;</span></span>
    <span><span>android:</span>configChanges</span><span><span>=</span><span>&#34;</span>orientation|screenSize<span>&#34;</span></span> <span>&gt;</span></span></code></pre><p>This change adds the attribute <code>android<span>:</span>configChanges<span>=</span> “orientation<span>|</span>screenSize”</code> to <code>MainActivity</code>, which tells Android that the activity should <em>not</em> reload if the device orientation or screen size changes. Instead of reloading the activity, Android uses a callback method to notify the app of the change. The assumption is that you’ll handle those configuration changes yourself. Since we’ll ignore this callback, the configuration change has no effect.</p><p>Run the app and log in. Change the screen orientation, going from portrait to landscape and back. It no longer causes the activity to reload.</p><h2 id="Conclusion">Conclusion</h2><p>You’ve just built a simple app that features basic username/password <em>authentication</em> — the ability to identify a known user. In addition to log a user in and out, you can also retrieve the information in their profile, and read and update their metadata.</p><p>You can find the code for the complete project for this article in <a href="https://github.com/auth0-blog/get-started-android-authentication-kotlin" target="_blank" rel="noreferrer noopener">this repository on the <em>Auth0 Blog Samples</em> GitHub account</a>. The only change that you’ll need to make in order to run it is to enter your app’s client ID and tenant’s domain in the <code>auth0<span>.</span>xml</code> resource file.</p><p>This is the first in a new series of articles on Android development with Auth0. Future articles will cover new developments in Android 12 and Android Studio, as well as deeper dives into authentication and authorization with Android and Auth0 and alternatives to the standard username-and-password approach. Watch this space!</p><p><a href="https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-1" target="_blank" rel="noopener referrer">Next Step: Read the preview part here</a></p><p><a href="https://community.auth0.com/t/developing-a-secure-api-with-nestjs/33026" target="_blank" rel="noopener noreferrer">I ran into an issue</a></p></div></div>]]></content:encoded>
      <pubDate>Mon, 20 Sep 2021 18:29:00 +0000</pubDate>
    </item>
    <item>
      <title>Get Started with Android Authentication Using Kotlin: Part 1</title>
      <link>https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-1/</link>
      <description>Learn how to implement login, logout, and user profiles in Android apps using Kotlin and Auth0.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>If you’re planning to build a native Android app that requires users to log in, you should use Auth0. </p><p>Implementing user login/logout often turns into its own project. Just implementing the many ways users want to log in can easily take a lot of time. You’d also have to deal with issues such as user management, scaling, and security, each of which could have its own article.</p><p>With Auth0 and a few lines of code, your app can have a full-featured system that supports logging in with a basic username/password combination, single sign-on and social accounts, passwordless login, biometrics, and more. You won’t have to handle the “behind the scenes” issues, either!</p><p><strong>This tutorial covers the basics of using Auth0 to implement login/logout in an Android app written in Kotlin.</strong> It also provides an introduction to reading and writing information into user profiles so that your app can customize itself for each user. Along the way, you’ll become familiar with the Auth0 dashboard and learn how to use it to register applications and users.</p><blockquote><p><strong>Look for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.</strong> </p></blockquote><h2 id="What-you-ll-build">What you’ll build</h2><p>You’ll build a simple, single-screen Android app that will allow the user to log in and log out using Auth0. While logged in, the user will be able to see the following information from their user profile, namely:</p><ul><li>Information that is part and parcel of the user account, namely:
  <ul><li>The user’s name</li><li>The user’s email address</li></ul></li><li>Metadata attached to the user account, namely:
  <ul><li>The user’s country</li></ul></li></ul><p>The user will also be able to edit their country, and the result of that edit will be stored in the user account.</p><p>When you launch the completed app, you’ll see a greeting, a <strong>Log in</strong> button, and a disabled <strong>Log out</strong> button:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7FSXqzXczgaNUC5NnY9q1F/d72b55833d1bf446c70d60488f7f4ae0/welcome_screen.png" alt="The finished app’s screen when launched. The greeting “Welcome to the app!” appears above the “Log in” and “Log out” buttons."/></p><p>Tapping the <strong>Log in</strong> button takes the user to the login screen, which appears in a custom Chrome tab:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/53TEQjPR0HhmvGIC8BXW7a/e7b6205b7c401883c61b162c498a00f7/universal_login.png" alt="The default Auth0 login web page. It lets the user enter username and password or log in using a Google account."/></p><p>When you use Auth0 in your apps, you delegate authentication to a centralized login page in the same way that Google properties such as Gmail and YouTube redirect you to <strong>accounts.google.com</strong> when you log in. In this exercise, you’ll use the default “look and feel” for the login page, but <a href="https://auth0.com/docs/universal-login/new-experience/universal-login-page-templates" target="_blank" rel="noreferrer noopener">you can customize it to match your app or organization’s branding</a>.</p><p>Logging in successfully returns you to the app, where you’ll see the following changes:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png" alt="The finished app’s screen when the user is logged in. It displays information about the logged-in user."/></p><ul><li>The greeting will have changed to a notification telling you that you’re now logged into the app.</li><li>The <strong>Log in</strong> button will now be disabled, and the <strong>Log out</strong> button will now be enabled.</li><li>The name and email address for the user account that you used to log in will be displayed.</li><li>There will now be a section for metadata, complete with an editable text box (an <code>EditText</code> in Android parlance) and <strong>Get</strong> and <strong>Set</strong> buttons that will allow you to read and write to the <code>country</code> field of the metadata for the user account.</li></ul><p>As you might expect, logging out is done by tapping the <strong>Log out</strong> button. Once logged out, you see the following changes onscreen:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2JqJGGpuuMVwdXSPyHH0iT/8c4153360bd7aa656dccc8170af42e4d/logout_screen.png" alt="The finished app’s screen when the user is logged out. The title bar reads “You’re logged out”."/></p><ul><li>The notification at the top of the screen will now inform you that you’re logged out of the app.</li><li>Logging out enables the <strong>Log in</strong> button and disables the <strong>Log out</strong> button.</li><li>The other controls that were visible when you were logged in will no longer be visible.</li></ul><h2 id="Prerequisites">Prerequisites</h2><p>You’ll need the following for this coding exercise:</p><h3 id="What-you-ll-need">What you’ll need</h3><ul><li><strong>An Android development setup.</strong> Make sure you have the following, in the order given below:
  <ul><li><a href="https://www.oracle.com/java/technologies/javase-jdk16-downloads.html" target="_blank" rel="noreferrer noopener"><strong>Java SE Developer Kit (JDK), version 11 or later.</strong></a> You can find out which version is on your computer by opening a command-line interface and entering <code>java <span>--</span>version</code>.</li><li><a href="https://developer.android.com/studio" target="_blank" rel="noreferrer noopener"><strong>Android Studio,</strong></a> version 3.6 (February 2020) or later. I used the current stable version of Android Studio when writing this article: version 2020.3.1, also known as “Arctic Fox”.</li><li><strong>At least one Android SDK (Software Development Kit) platform.</strong> You can confirm that you have one (and install one if you don’t) in Android Studio. Open <strong>Tools</strong> → <strong>SDK Manager</strong>. You’ll see a list of Android SDK platforms. Make sure that the current SDK (<strong>Android 11.0 (R)</strong> at the time of writing) is checked; if it isn’t, check it, click the <strong>Apply</strong> button, and click the <strong>OK</strong>  button in the confirmation dialog that appears. Wait for the SDK platform to install and click the <strong>Finish</strong> button when installation is complete.</li></ul></li><li><strong>An Android device, real or virtual:</strong>
  <ul><li><strong>Using a real device:</strong> Connect the device to your computer with a USB cable. <a href="https://developer.android.com/studio/debug/dev-options" target="_blank" rel="noreferrer noopener">Make sure that your device has Developer Options and USB debugging enabled.</a></li><li><strong>Using a virtual device:</strong> Using Android Studio, you can build a virtual device (emulator) that runs on your computer. Here’s my recipe for a virtual device that simulates a current-model inexpensive Android phone:
  <ol start="1"><li>Open <strong>Tools</strong> → <strong>AVD Manager</strong> (AVD is short for “Android Virtual Device”). The <strong>Your Virtual Devices</strong> window will appear. Click the <strong>Create Virtual Device...</strong> button.</li><li>The <strong>Select Hardware</strong> window will appear. In the <strong>Phone</strong> category, select <strong>Pixel 3a</strong> and click the <strong>Next</strong> button.</li><li>The <strong>System Image</strong> window will appear, and you’ll see a list of Android versions. Select <strong>R</strong> (API 30, also known as Android 11.0). If you see a <strong>Download</strong> link beside R, click it, wait for the OS to download, then click the <strong>Finish</strong> button. Then click the <strong>Next</strong> button.</li><li>The <strong>Android Virtual Device (AVD)</strong> window will appear. The <strong>AVD Name</strong> field should contain <strong>Pixel 3a API 30</strong>, the two rows below it should have the titles <strong>Pixel 3a</strong> and <strong>R</strong>, and in the <strong>Startup orientation</strong> section, <strong>Portrait</strong> should be selected. Click the <strong>Finish</strong> button.</li><li>You will be back at the <strong>Your Virtual Devices</strong> window. The list will now contain <strong>Pixel 3a API 30</strong>, and that device will be available to you when you run the app.</li></ol></li></ul></li><li><strong>An Auth0 account.</strong> <a href="https://auth0.com/sign-up?tr=1" target="_blank" rel="noreferrer noopener">You can sign up for a free one now</a>, or later on in the article.</li></ul><h3 id="What-might-be-useful">What might be useful</h3><ul><li><strong>A little familiarity with Android development.</strong> If you’re new to Android development or the Kotlin programming language, you might find Android Developers’ site, <a href="https://developer.android.com/courses/android-basics-kotlin/course" target="_blank" rel="noreferrer noopener"><em>Android Basics in Kotlin</em></a>, a good introduction.</li></ul><h2 id="Set-Up-the-Project-on-Android-Studio">Set Up the Project on Android Studio</h2><p>🛠 Open Android Studio. Close any open project windows, which will cause the <strong>Welcome to Android Studio</strong> window to appear. Create a new project by clicking the <strong>New project</strong> button:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/515JGjc8Gu0kPUC9nSmABB/04464174cda6dd059c734157cf68de21/click_new_project.png" alt="Android Studio’s “Welcome to Android Studio” screen. An arrow directs the reader to click the “New Project” button."/></p><p>🛠 Make sure that <strong>Phone and Tablet</strong> is selected in the menu of the left side of the window that appears, then select <strong>Empty Activity</strong> from the selection of templates. Click the <strong>Next</strong> button:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3C7qUdfN39HAixbVPi7cMs/0d6f2fe941ddf1f25c7ac1b56bd46344/select_empty_activity.png" alt="Android Studio’s template screen for new projects. The reader is told to select the “Empty Activity” and click the “Next” button."/></p><p>🛠 In the next window, enter a name for the app, such as <strong>Login</strong>. Make a note of the value that Android Studio generates in the <strong>Package Name</strong> field — you’ll need it when registering the app with Auth0.</p><blockquote><p>If you used <strong>Login</strong> as the name for the app, Android Studio will automatically generate the package name <strong>com.example.login</strong>.</p></blockquote><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2ke5fQE1zyH9OljmWbarEG/5715fffa863c2f193930679aadbd66da/new_project_name.png" alt="The template screen for new project details: project name is “Login”, package name is “com.example.login”, language is Kotlin, minimum SDK is set to API 21."/></p><p>🛠 Ensure that the selected <strong>Language</strong> is <strong>Kotlin</strong> and that the <strong>Minimum SDK</strong> is set to <strong>API 21: Android 5.0 (Lollipop)</strong> or later.</p><blockquote><p>API 21, which dates back to November 2014, is the oldest version of Android supported by Auth0. By targeting API 21 or later, you can write an app that will run on almost 95% of the active Android devices that are connected to the Play Store.</p></blockquote><p>🛠 Click the <strong>Finish</strong> button. Android Studio will spend a few moments setting up your project. </p><p>🛠 Once Android Studio has finished setting up the project, run the app to confirm that it works. You should see the default “Hello, World!” app:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6PQgEXywNwmp7eKD50RSU6/ffe69b079f53c0d059264c541c3d5623/hello_world.png" alt="The newly-created app’s screen when launched. Title bar reads “Login”; body reads “Hello World!”."/></p><p>With the app project set up on Android Studio, it’s time to turn your attention to the Auth0 side.</p><h2 id="Register-the-App-with-Auth0">Register the App with Auth0</h2><p><strong>To continue beyond this point, you’ll need an Auth0 account.</strong> That’s because your app will delegate the heavy lifting of the login/logout process to Auth0 so that you can focus your effort, energy, and time on what your app actually does, instead of worrying about authenticating users and all the edges cases that come with it.</p><h3 id="If-you-already-have-an-Auth0-account---">If you already have an Auth0 account...</h3><p>🛠 ...log in, skip the next section, and proceed to the part titled <strong><em>Register your app with Auth0</em></strong>.</p><h3 id="If-you-don-t-have-an-Auth0-account-yet---">If you don’t have an Auth0 account yet...</h3><p>🛠 <a href="https://auth0.com/signup" data-amp-replace="CLIENT_ID" data-amp-addparams="anonId=CLIENT_ID(cid-scope-cookie-fallback-name)" target="_blank" rel="noreferrer noopener"><strong>...go ahead and sign up for one!</strong></a> It’s free, and we’ve taken great care to make the process as painless as possible.</p><p>Auth0 will ask you to fill just <em>two</em> fields: your email address and a password. We <em> won’t</em> ask for a credit card number or any other information. If <em>that</em> seems like too much work, you can sign up with a single click by doing so using your GitHub, Google, or Microsoft account:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/Pk0WorUwp6mW9iJKj4Ar7/9d8c9e515765f118b5fdc06d3793b6ef/sign_up.png" alt="Auth0’s “Sign Up” form, which has “Email” and “Password” fields, and links to sign up with a GitHub, Google, and Microsoft account."/></p><p>Once you’ve provided an email address and password, you’ll see the “Let’s set you up for success” page:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4M6OV4hlEWk5J9kI2Vzs5p/fa8c33783e7255757f7710e219caeac0/set_up_auth0_account.png" alt="The “Let’s set you up for success” page. The reader is directed to select the “Personal” account type and click the “Next” button."/></p><p>Just select <strong>Personal</strong> for your account type and click the <strong>Next</strong> button. Your sign-up process will be complete, and you’ll see the Auth0 dashboard page.</p><h3 id="Register-your-app-with-Auth0">Register your app with Auth0</h3><p>🛠 In the menu on the left side of the <a href="https://manage.auth0.com/" target="_blank" rel="noreferrer noopener">Auth0 dashboard</a>, click on <strong>Applications</strong>:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2PsBUajhnnXWJR7QS8PUfg/e9c6bd92175335286aa03224e1646e91/expand_applications_menu.png" alt="The main page of the Auth0 dashboard. The reader is directed to expand the “Applications” menu."/></p><p>🛠 This will expand the <strong>Applications</strong> menu. Select the first item in that menu, which also has the name <strong>Applications</strong>:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2UNcUhGNq16RFBJkokz7KS/854f3e92fbe58943bf05f0f4a761d177/select_applications_menu_item.png" alt="The main page of the Auth0 dashboard, with the “Applications” menu expanded. The reader is directed to select the “Applications” menu item."/></p><p>You will now be on the <strong>Applications</strong> page. It lists all the applications that you have registered so that Auth0 can handle their login/logout processes.</p><p>🛠 Let’s create a new registration for your app. Do this by clicking the <strong>Create application</strong> button near the top right of the page:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4aOFH6mt7xs9CspYNkuU7Q/1cff580b803c09236ad959b18614119a/create_application.png" alt="The “Applications” page. The reader is directed to click the “Create Application” button."/></p><p>You’ll see this dialog appear:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/lAiEqcCsTt5CcwrdA3IGb/8eda117f82ca08f55f120d058587443d/create_application.png" alt="The “Create application” dialog. The application’s name is set to “Login”, and the selected application type is “Native”."/></p><p>🛠 You’ll need to provide two pieces of information to continue:</p><ul><li>Enter a name for your app in the name field. It might be simplest to use the same name as your Android Studio project (if you’ve been following my example, use the name <strong>Login</strong>).</li><li>Specify the application type, which in this case is <strong>Native</strong>.</li></ul><p>Click <strong>Create</strong>. The <strong>Quick Start</strong> page for your app will appear:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5yXXeZfsMDWTPUcWi49Jj6/73176affc85927351badee8172b831e8/quick_start_tab.png" alt="The “Quick Start” page. It contains several icons, each one representing an operating system or platform."/></p><p>This page provides you with ready-made projects for several different platforms that you can use as the basis for an application that delegates login/logout to Auth0. You won’t be using any of them in this exercise; instead, you’ll make use of a couple of Auth0 libraries and write the code yourself. It’s more educational — and more importantly, <em>fun</em> — that way.</p><p>🛠 Click the <strong>Settings</strong> tab, which will take you to this page:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6uxBjXmnlf1uD7hocTif0p/b3701340069e48b6f8dfe1e151a9d7cb/settings_page.png" alt="The “Application” page’s “Settings” tab."/></p><p>You’re going to do two critical things on this page:</p><ol start="1"><li>Get information that your app needs to know about Auth0, and</li><li>Provide information that Auth0 needs to know about your app.</li></ol><p>Let’s take care of the first one: Getting the information that your app needs, namely:</p><ul><li>The <strong>domain</strong>, which is the URL that your app will use to contact Auth0. It uniquely identifies your Auth0 <em>tenant</em>, which is a collection of applications, users, and other information that you have registered with your Auth0 account.</li><li>The <strong>client ID</strong>, which is the identifier that Auth0 assigned to your app. It’s how Auth0 knows which app of yours it’s working with.</li></ul><p>🛠 Get this information by copying the contents of the <strong>Domain</strong> and <strong>Client ID</strong> fields for later reference:  </p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7m7XUrzgnR5A1OZIJdzPkd/b4c421d8f0a2c15d94fd685bea0e3b3e/settings_-_get_info.png" alt="The “Application” page’s “Settings” tab. The reader is directed to copy the values of the “Domain” and “Client ID” text fields, then to scroll down the page."/></p><p>You’ll enter them into your Android Studio project as string resources soon.</p><p>🛠 Scroll down to the <strong>Applications URIs</strong> section. This is where you provide two pieces of information that Auth0 needs to know about your app, which are:</p><ol start="1"><li>A <strong>callback URL:</strong> the URL that Auth0 will redirect to after the user successfully logs in. There can be more than one of these.</li><li>A <strong>logout URL:</strong> the URL that Auth0 will redirect to after the user logs out. There can be more than one of these.</li></ol><p>At this point, you’re probably thinking: “Wait a minute — I’m writing an <em>Android app</em>. It doesn’t have <em>web pages</em> that you navigate to using URLs, but <em>activities</em> that you navigate to using <em>intents</em>!”</p><p>You’re absolutely right. In the case of native applications, the callback and logout URLs are the same string, and Auth0 sends that string to your app to inform it that a user has logged in or logged out.</p><p>The string that Android native apps use for both the callback URL and the logout URL use this format:</p><pre><code><span>{</span><span>SCHEME</span><span>}</span><span>:</span><span>/</span><span>/</span><span>{</span><span>YOUR_DOMAIN</span><span>}</span><span>/</span>android<span>/</span><span>{</span><span>YOUR_APP_PACKAGE_NAME</span><span>}</span><span>/</span>callback</code></pre><p>🛠 To construct the string, do the following:</p><ul><li>Replace <code><span>{</span><span>SCHEME</span><span>}</span></code> with <code>app</code>. <code><span>{</span><span>SCHEME</span><span>}</span></code> is the URL’s protocol, and if you were writing a web app, this value would be <code>http</code>, or better, <code>https</code>. Since this is an Android native app, you can pick any string for this value. I like to use <code>app</code>.</li><li>Replace <code><span>{</span><span>YOUR_DOMAIN</span><span>}</span></code> with the value from the <strong>Domain</strong> field that you saw earlier on this page.</li><li>Replace <code><span>{</span><span>YOUR_APP_PACKAGE_NAME</span><span>}</span></code> with the package name of your Android app. If you’ve been following the example in this article, your app’s package name is <code>com<span>.</span>example<span>.</span>login</code>.</li></ul><p>🛠 Enter this string into both the <strong>Allowed Callback URLs</strong> and <strong>Allowed Login URLs</strong> fields. Remember, it’s the same string going into both fields.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2OXT7ElyikvL8JNCO3RzFk/658591a0c5a67dc7e8499bb0ea02b7e5/settings_-_put_info.png" alt="The “Application URIs” section of the page. The reader is directed to enter the callback URL into “Allowed Callback URLs” and “Allowed Logout URLs”."/></p><p>🛠 You’ve done everything you need to do on this page. Scroll down to the bottom of the page and click the <strong>Save changes</strong> button:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3w6HT6fNOjiJPOjA5uduzt/bb290473a3ae601b70d7ce6456ac7fc4/settings_-_save_changes.png" alt="The bottom of the page, which features the “Save Changes” button. An arrow directs the reader to click the button."/></p><h3 id="Create-a-user-if-your-tenant-doesn-t-have-any">Create a user if your tenant doesn’t have any</h3><p>If your tenant is brand new, it won’t have any user accounts, which means that there won’t be any way to log in to your app. If this is the case, follow these steps to create a user.</p><p>🛠 In the menu on the left side of the Auth0 dashboard, click on <strong>User Management</strong>:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/13qs824Uauwv78ewd682EO/6898da1b68642b10cb9c31413f358a95/user_management_menu.png" alt="The bottom of the page. An arrow directs the reader to expand the “User Management” menu."/></p><p>🛠 This will expand the <strong>User Management</strong> menu. Select the <strong>Users</strong> item in that menu:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1tivj870qehY6oIaeDolj1/31b0544fab715b7fbded29fb63802a45/select_users_menu_item.png" alt="The bottom of the page now featuring an expanded “User Management” menu. An arrow directs the reader to expand the “Users” menu item."/></p><p>The <strong>Users</strong> page will appear. It lists all the users registered to your tenant. If there are no users, you’ll see the “You don’t have any users yet” message.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1wCORw3pqSOLt65n48Qr56/7421164d02cfb112350882a4cccb4cca/click_create_user.png" alt="The “Users” page. The page says, “You don’t have any users yet”. An arrow directs the reader to click the “Create User” button."/></p><p>🛠 Click the <strong>Create User</strong> button to create a new user, which will make this dialog box appear:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2s3GfTHNKRgts8lcXQJ0SH/6d6d0ca397684be75030d40bb6b94fb5/create_user_dialog.png" alt="The “Create User” dialog. It has fields for email and password, as well as a drop-down menu displaying “Username-Password-Authentication”."/></p><p>🛠 Enter an email address and password for the user. The only option for the <strong>Connection</strong> will be <strong>Username-Password-Authentication</strong>, so leave it as it is. Make a note of that email address and password — you’ll be using them to log in to the app.</p><p>🛠 Click the <strong>Create</strong> button to create the user. The user’s <strong>Details</strong> page will appear:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3TbGcAFo4e4N1coNCtHYdV/fa830264079fc661cbc683590729e4b1/user_details_page.png" alt="The user’s “Details” page."/></p><p>That takes care of all the setup you need to do within the Auth0 dashboard. It’s time to build the app!</p><h2 id="Set-Up-the-App">Set Up the App</h2><h3 id="Install-the-Auth0-SDK">Install the Auth0 SDK</h3><p>The <a href="https://github.com/auth0/Auth0.Android" target="_blank" rel="noreferrer noopener">Auth0 Android SDK</a> enables Android apps to use Auth0’s APIs, including the <a href="https://auth0.com/docs/api/authentication" target="_blank" rel="noreferrer noopener">Authentication API</a>, which you’ll use to implement login and logout in your app.</p><p>To install the SDK, you’ll need to perform two tasks:</p><ol start="1"><li>Make changes to the app’s Gradle file to integrate Auth0. While you’re editing that file, you’ll also enable view binding.</li><li>Give the app permission to access the internet in the project’s manifest.</li></ol><h4 id="Add-the-Auth0-SDK-as-a-project-dependency">Add the Auth0 SDK as a project dependency</h4><p>🛠 Open <code>build<span>.</span>gradle</code> for the <em>app</em> — it’s the file in the Project Structure menu that has the words <strong>Module</strong> and <strong>app</strong> in its name:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5tUS9ilXyP4KIxNqwSJZkg/bcb5c65a4d483149367211f0cbb9f63b/open_the_app_build.gradle_file.png" alt="The project tree in Android Studio. An arrow points to the “build.gradle” file and instructs the reader to open it."/></p><p>🛠 Add the following line to the <code>defaultConfig</code> block of the file:</p><pre><code>manifestPlaceholders <span>=</span> <span>[</span>auth0Domain<span>:</span> <span>&#34;@string/com_auth0_domain&#34;</span><span>,</span> auth0Scheme<span>:</span> <span>&#34;@string/com_auth0_scheme&#34;</span><span>]</span></code></pre><p>Here’s what the <code>defaultConfig</code> block should look like once you’ve added the line: </p><pre><code>defaultConfig <span>{</span>
    applicationId <span>{</span><span>APPLICATION_ID_GOES_HERE</span><span>}</span>
    minSdk <span>21</span>
    targetSdk <span>31</span>
    versionCode <span>1</span>
    versionName <span>&#34;1.0&#34;</span>
    manifestPlaceholders <span>=</span> <span>[</span>auth0Domain<span>:</span> <span>&#34;@string/com_auth0_domain&#34;</span><span>,</span> auth0Scheme<span>:</span> <span>&#34;@string/com_auth0_scheme&#34;</span><span>]</span>

    testInstrumentationRunner <span>&#34;androidx.test.runner.AndroidJUnitRunner&#34;</span>
<span>}</span></code></pre><p>🛠 Add this line to the <code>dependencies</code> block, after all the other lines that begin with the keyword <code>implementation</code>:</p><pre><code>implementation <span>&#39;com.auth0.android:auth0:2.0.0&#39;</span></code></pre><p>This line tells Gradle to include version 2.0.0 of Auth0’s Android library in the application.</p><p>Here’s what the <code>dependencies</code> block should look like once you’ve added the line:</p><pre><code>dependencies <span>{</span>
    implementation <span>&#39;androidx.core:core-ktx:1.6.0&#39;</span>
    implementation <span>&#39;androidx.appcompat:appcompat:1.3.1&#39;</span>
    implementation <span>&#39;com.google.android.material:material:1.4.0&#39;</span>
    implementation <span>&#39;androidx.constraintlayout:constraintlayout:2.1.0&#39;</span>
    implementation <span>&#39;com.auth0.android:auth0:2.0.0&#39;</span>
    testImplementation <span>&#39;junit:junit:4.+&#39;</span>
    androidTestImplementation <span>&#39;androidx.test.ext:junit:1.1.3&#39;</span>
    androidTestImplementation <span>&#39;androidx.test.espresso:espresso-core:3.4.0&#39;</span>
<span>}</span></code></pre><h4 id="Enable-view-binding">Enable view binding</h4><p>Before Android Studio 3.6, if you wanted to refer to a view or widget in the user interface, you’d have to <a href="https://www.tutorialkart.com/kotlin-android/access-a-view-programmatically-using-findviewbyid/" target="_blank" rel="noreferrer noopener">create a new variable for every view or widget using <code><span>findViewById</span><span>(</span><span>)</span></code></a>.</p><p>Suppose you had an <code>Activity</code> whose layout file contains these views:</p><ul><li>A <code>TextView</code> whose <code>id</code> is <code>textview_instructions</code></li><li>An <code>EditText</code> whose <code>id</code> is <code>edittext_input</code></li><li>A <code>Button</code> whose <code>id</code> is <code>button_submit</code></li></ul><p>Here’s how you would create references to those views in code and set their <code>text</code> properties:</p><pre><code><span>// A quick example of findViewById() binding</span>

<span>// Set this activity’s content to the layout specified</span>
<span>// by activity_main.xml</span>
<span>setContentView</span><span>(</span>R<span>.</span>layout<span>.</span>activity_main<span>)</span>

<span>// Get references to the TextView, EditText, and Button:</span>
<span>val</span> textviewInstructions <span>=</span> <span>findViewById</span><span>(</span>R<span>.</span>id<span>.</span> textview_instructions<span>)</span> <span>as</span> TextView
<span>val</span> edittextInput <span>=</span> <span>findViewById</span><span>(</span>R<span>.</span>id<span>.</span> edittext_input<span>)</span> <span>as</span> EditText
<span>val</span> buttonSubmit <span>=</span> <span>findViewById</span><span>(</span>R<span>.</span>id<span>.</span>button_submit<span>)</span> <span>as</span> Button

<span>// Set the widgets&#39; text</span>
textviewInstructions<span>.</span>text <span>=</span> <span>&#34;Here are your instructions.&#34;</span>
edittextInput <span>=</span> <span>&#34;Edit this text.&#34;</span>
buttonSubmit <span>=</span> <span>&#34;Tap me!&#34;</span></code></pre><p>Android 3.6 introduced <a href="https://medium.com/androiddevelopers/use-view-binding-to-replace-findviewbyid-c83942471fc" target="_blank" rel="noreferrer noopener"><strong><em>view binding</em></strong>, which generates a binding object that holds all the views in the activity</a>. You no longer have to declare a variable for each view or widget because all the views and widgets in the activity are now properties of the binding object.</p><pre><code><span>// A quick example of view binding</span>

<span>// Bind this activity to the layout and create a binding object</span>
<span>// that gives us access to all its views</span>
binding <span>=</span> ActivityMainBinding<span>.</span><span>inflate</span><span>(</span>layoutInflater<span>)</span>
<span>setContentView</span><span>(</span>binding<span>.</span>root<span>)</span>

<span>// Set the widgets&#39; text</span>
binding<span>.</span>textviewInstructions<span>.</span>text <span>=</span> <span>&#34;Here are your instructions.&#34;</span>
binding<span>.</span>edittextInput <span>=</span> <span>&#34;Edit this text.&#34;</span>
binding<span>.</span>buttonSubmit <span>=</span> <span>&#34;Tap me!&#34;</span></code></pre><p>Note that the system automatically converts the names of controls in the layout file, which use <code>snake_case</code>, into <code>binding</code> property names, which use <code>camelCase</code>. For example, the control whose <code>id</code> is <code>button_submit</code> in the layout file has a corresponding <code>binding</code> property named <code>buttonSubmit</code>.</p><p>Now that you’ve been introduced to view binding let’s enable it.</p><p>🛠 Add this <code>buildFeatures</code> block to the <code>android</code> block in the app’s <code>build<span>.</span>gradle</code> file:</p><pre><code>buildFeatures <span>{</span>
    viewBinding <span>true</span>
<span>}</span></code></pre><p>Here’s what the <code>android</code> block should look like once you’ve added the <code>buildFeatures</code> block:</p><pre><code>android <span>{</span>
    compileSdk <span>31</span>

    defaultConfig <span>{</span>
        applicationId <span>&#34;com.example.myapplicationx&#34;</span>
        minSdk <span>21</span>
        targetSdk <span>31</span>
        versionCode <span>1</span>
        versionName <span>&#34;1.0&#34;</span>
        manifestPlaceholders <span>=</span> <span>[</span>auth0Domain<span>:</span> <span>&#34;@string/com_auth0_domain&#34;</span><span>,</span> auth0Scheme<span>:</span> <span>&#34;@string/com_auth0_scheme&#34;</span><span>]</span>

        testInstrumentationRunner <span>&#34;androidx.test.runner.AndroidJUnitRunner&#34;</span>
    <span>}</span>

    buildTypes <span>{</span>
        release <span>{</span>
            minifyEnabled <span>false</span>
            proguardFiles <span>getDefaultProguardFile</span><span>(</span><span>&#39;proguard-android-optimize.txt&#39;</span><span>)</span><span>,</span> <span>&#39;proguard-rules.pro&#39;</span>
        <span>}</span>
    <span>}</span>
    compileOptions <span>{</span>
        sourceCompatibility JavaVersion<span>.</span><span>VERSION_1_8</span>
        targetCompatibility JavaVersion<span>.</span><span>VERSION_1_8</span>
    <span>}</span>
    kotlinOptions <span>{</span>
        jvmTarget <span>=</span> <span>&#39;1.8&#39;</span>
    <span>}</span>
    buildFeatures <span>{</span>
        viewBinding <span>true</span>
    <span>}</span>
<span>}</span></code></pre><h4 id="Synchronize-the-project-with-the-updated-Gradle-file">Synchronize the project with the updated Gradle file</h4><p>After making these changes to the Gradle file, you’ll need to synchronize the project with the new build configuration you defined. Android Studio will notify you that it detected the changes to the Gradle file and present you with the option to synchronize the project with the updated file.</p><p>🛠 Click the <strong>Sync Now</strong> link that appears in the notification near the top of the Android Studio window:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7MfBWjCw726wDkiyg4PVyO/986c835490dbebb3fb26fd67dd5ac6ec/click_sync_now.png" alt="The code window for the “build.gradle” file. A notification bar at the top of the window says, “Gradle files have changed since last project sync."/></p><h4 id="Give-the-app-permission-to-access-the-internet">Give the app permission to access the internet</h4><p>🛠 Open the Android manifest file, <code>AndroidManifest<span>.</span>xml</code>, located in the <code>app<span>/</span>manifests</code> folder, and add the XML element below as a child of the <code><span>&lt;</span>manifest<span>&gt;</span></code> element:</p><pre><code><span>&lt;</span>uses<span>-</span>permission android<span>:</span>name<span>=</span><span>&#34;android.permission.INTERNET&#34;</span> <span>/</span><span>&gt;</span></code></pre><p>This line grants your app the permission to perform network operations, which will allow it to contact Auth0 and make use of its Authentication API.</p><p>Here’s what <code>AndroidManifest<span>.</span>xml</code> should look like once you’ve added the XML element:</p><pre><code><span>&lt;!-- AndroidManifest.xml --&gt;</span>

<span>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span><span><span>&lt;</span>manifest</span> <span><span>xmlns:</span>android</span><span><span>=</span><span>&#34;</span>http://schemas.android.com/apk/res/android<span>&#34;</span></span>
    <span>package</span><span><span>=</span><span>&#34;</span>com.example.login<span>&#34;</span></span><span>&gt;</span></span>
    
    <span><span><span>&lt;</span>uses-permission</span> <span><span>android:</span>name</span><span><span>=</span><span>&#34;</span>android.permission.INTERNET<span>&#34;</span></span> <span>/&gt;</span></span>

    <span><span><span>&lt;</span>application</span>
        <span><span>android:</span>allowBackup</span><span><span>=</span><span>&#34;</span>true<span>&#34;</span></span>
        <span><span>android:</span>icon</span><span><span>=</span><span>&#34;</span>@mipmap/ic_launcher<span>&#34;</span></span>
        <span><span>android:</span>label</span><span><span>=</span><span>&#34;</span>@string/app_name<span>&#34;</span></span>
        <span><span>android:</span>roundIcon</span><span><span>=</span><span>&#34;</span>@mipmap/ic_launcher_round<span>&#34;</span></span>
        <span><span>android:</span>supportsRtl</span><span><span>=</span><span>&#34;</span>true<span>&#34;</span></span>
        <span><span>android:</span>theme</span><span><span>=</span><span>&#34;</span>@style/Theme.Login<span>&#34;</span></span><span>&gt;</span></span>
        <span><span><span>&lt;</span>activity</span>
            <span><span>android:</span>name</span><span><span>=</span><span>&#34;</span>.MainActivity<span>&#34;</span></span>
            <span><span>android:</span>exported</span><span><span>=</span><span>&#34;</span>true<span>&#34;</span></span><span>&gt;</span></span>
            <span><span><span>&lt;</span>intent-filter</span><span>&gt;</span></span>
                <span><span><span>&lt;</span>action</span> <span><span>android:</span>name</span><span><span>=</span><span>&#34;</span>android.intent.action.MAIN<span>&#34;</span></span> <span>/&gt;</span></span>

                <span><span><span>&lt;</span>category</span> <span><span>android:</span>name</span><span><span>=</span><span>&#34;</span>android.intent.category.LAUNCHER<span>&#34;</span></span> <span>/&gt;</span></span>
            <span><span><span>&lt;/</span>intent-filter</span><span>&gt;</span></span>
        <span><span><span>&lt;/</span>activity</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>application</span><span>&gt;</span></span>

<span><span><span>&lt;/</span>manifest</span><span>&gt;</span></span></code></pre><h3 id="Update-the-project-s-string-resource-file">Update the project’s string resource file</h3><p>We’re going to follow the Android recommended practice and put all the string literals used by the app in <a href="https://developer.android.com/guide/topics/resources/string-resource" target="_blank" rel="noreferrer noopener">string resource</a> files.</p><p>By default, new Android projects come with a file located in <code><span>/</span>app<span>/</span>res<span>/</span>values<span>/</span></code> named <code>strings<span>.</span>xml</code>. While resource files can contain resouces of any type, the convention is to use <code>strings<span>.</span>xml</code> for strings only. Let’s put the non-sensitive strings into that file.</p><p>🛠 Open <code>strings<span>.</span>xml</code>. It should contain the following:</p><pre><code><span>&lt;!-- strings.xml --&gt;</span>

<span><span><span>&lt;</span>resources</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>app_name<span>&#34;</span></span><span>&gt;</span></span>{APP_NAME}<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>resources</span><span>&gt;</span></span></code></pre><p>Instead of <code><span>{</span><span>APP_NAME</span><span>}</span></code>, you’ll see the name that you assigned to your app when you first created the project.</p><p>🛠 Replace the contents of <code>strings<span>.</span>xml</code> with the following:</p><pre><code><span>&lt;!-- strings.xml --&gt;</span>

<span>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span><span><span>&lt;</span>resources</span><span>&gt;</span></span>

    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>app_name<span>&#34;</span></span><span>&gt;</span></span>{APP_NAME}<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>

    <span>&lt;!--
    Auth0 identifiers and settings
    ==============================
    --&gt;</span>

    <span>&lt;!-- Identifiers --&gt;</span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>com_auth0_scheme<span>&#34;</span></span><span>&gt;</span></span>app<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>

    <span>&lt;!-- Settings --&gt;</span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>login_scopes<span>&#34;</span></span><span>&gt;</span></span>openid profile email read:current_user update:current_user_metadata<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>login_audience<span>&#34;</span></span><span>&gt;</span></span>https://%1$s/api/v2/<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>


    <span>&lt;!--
    Main activity
    =============
    --&gt;</span>

    <span>&lt;!-- Title --&gt;</span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>initial_title<span>&#34;</span></span><span>&gt;</span></span>Welcome to the app!<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>logged_in_title<span>&#34;</span></span><span>&gt;</span></span>You\&#39;re logged in.<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>logged_out_title<span>&#34;</span></span><span>&gt;</span></span>You\&#39;re logged out.<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>

    <span>&lt;!-- &#34;Log in&#34; and &#34;Log out&#34; buttons --&gt;</span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>button_login<span>&#34;</span></span><span>&gt;</span></span>Log in<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>button_logout<span>&#34;</span></span><span>&gt;</span></span>Log out<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>

    <span>&lt;!-- User profile --&gt;</span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>user_profile<span>&#34;</span></span><span>&gt;</span></span>
        Name: %1$s\n
        Email: %2$s
    <span><span><span>&lt;/</span>string</span><span>&gt;</span></span>

    <span>&lt;!-- Metadata --&gt;</span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>textview_metadata_heading<span>&#34;</span></span><span>&gt;</span></span>Metadata<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>textview_metadata_info<span>&#34;</span></span><span>&gt;</span></span>Use the text box and buttons below to get and set the \&#39;country\&#39; field in the user\&#39;s metadata.<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>

    <span>&lt;!-- &#34;Get&#34; and &#34;Set&#34; buttons --&gt;</span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>button_get<span>&#34;</span></span><span>&gt;</span></span>Get<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>button_set<span>&#34;</span></span><span>&gt;</span></span>Set<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>

    <span>&lt;!-- SnackBar messages--&gt;</span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>login_success_message<span>&#34;</span></span><span>&gt;</span></span>Successfully logged in! %1$s<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>login_failure_message<span>&#34;</span></span><span>&gt;</span></span>Failed to log in. %1$s<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>general_failure_with_exception_code<span>&#34;</span></span><span>&gt;</span></span>Failed - exception code: %1$s<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>general_success_message<span>&#34;</span></span><span>&gt;</span></span>Success!<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>

<span><span><span>&lt;/</span>resources</span><span>&gt;</span></span></code></pre><p>🛠 Make the following replacements in the XML above:</p><ul><li>Replace <code><span>{</span><span>APP_NAME</span><span>}</span></code> with the name of your app.</li></ul><h3 id="Create-a-separate-string-resource-file-for-Auth0-credentials">Create a separate string resource file for Auth0 credentials</h3><p>There are still two strings that we need to store in a resource file: the Auth0 domain and client ID that the app will use. </p><p>Unlike the values you’re storing in <code>strings<span>.</span>xml</code>, these are values that you want to keep secret and don’t want “leaked”. A common approach to dealing with is issue is to store “secret” values like these in a separate resource file so that you can limit access to them. Let’s create a new string resource file for our “secret” Auth0 values.</p><p>🛠 In Android Studio’s <strong>Project</strong> pane, right-click on the <code>values</code> folder. In the menu that appears, select <strong>New</strong>, which will cause a sub-menu to appear. Select <strong>Values Resource File</strong> from that sub-menu:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6g58ZVxykAAuh7hvHwtqlU/4c6289c47d6275c04df0257ffd2b78d8/creating_a_new_resource_file_1.png"/></p><p>🛠 The <strong>New Resource File</strong> window will appear. Enter <code>auth0<span>.</span>xml</code> into the <strong>File name:</strong> field and click the <strong>OK</strong> button to create a new resource file with that name:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3bfkNBq7tfwSYbPNTJ6zSR/627c9fd1aec651382fc44bc035555625/creating_a_new_resource_file_2.png"/></p><p>🛠 Open the newly-created <code>auth0<span>.</span>xml</code> file and enter the following into it:</p><pre><code><span>&lt;!-- auth0.xml --&gt;</span>

<span>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span><span><span>&lt;</span>resources</span><span>&gt;</span></span>

    <span>&lt;!--
    Secret Auth0 identifiers and settings
    =====================================
    These values are required to connect to Auth0 for authorization,
    which is why we&#39;re storing them in their own string resource file.

    DO NOT CHECK THIS FILE INTO A PUBLIC REPOSITORY!
    --&gt;</span>

    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>com_auth0_domain<span>&#34;</span></span><span>&gt;</span></span>{DOMAIN}<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>&#34;</span>com_auth0_client_id<span>&#34;</span></span><span>&gt;</span></span>{CLIENT_ID}<span><span><span>&lt;/</span>string</span><span>&gt;</span></span>

<span><span><span>&lt;/</span>resources</span><span>&gt;</span></span></code></pre><p>🛠 Make the following replacements in the XML above:</p><ul><li>Replace <code><span>{</span><span>DOMAIN</span><span>}</span></code> with the domain of your app, which you copied from the <strong>Settings</strong> page of the Auth0 dashboard.</li><li>Replace <code><span>{</span><span>CLIENT_ID</span><span>}</span></code> with the client ID of your app, which you copied from the <strong>Settings</strong> page of the Auth0 dashboard.</li></ul><h3 id="Define-the-app-s-user-interface">Define the app’s user interface</h3><p>It’s time to define the app’s user interface. This is a single-screen app, so everything takes place in the Main Activity file, whose layout is defined in the <code>activity_main<span>.</span>xml</code> file located in the <code>app<span>/</span>res<span>/</span>layout</code> folder.</p><p>🛠 Open <code>activity_main<span>.</span>xml</code>, switch to the code view and replace the children of the <code><span>&lt;</span>androidx<span>.</span>constraintlayout<span>.</span>widget<span>.</span>ConstraintLayout<span>&gt;</span></code> tag with the following:</p><pre><code><span>&lt;!-- activity_main.xml --&gt;</span>

<span>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span><span><span>&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span> <span><span>xmlns:</span>android</span><span><span>=</span><span>&#34;</span>http://schemas.android.com/apk/res/android<span>&#34;</span></span>
    <span><span>xmlns:</span>app</span><span><span>=</span><span>&#34;</span>http://schemas.android.com/apk/res-auto<span>&#34;</span></span>
    <span><span>xmlns:</span>tools</span><span><span>=</span><span>&#34;</span>http://schemas.android.com/tools<span>&#34;</span></span>
    <span><span>android:</span>layout_width</span><span><span>=</span><span>&#34;</span>match_parent<span>&#34;</span></span>
    <span><span>android:</span>layout_height</span><span><span>=</span><span>&#34;</span>match_parent<span>&#34;</span></span>
    <span><span>tools:</span>context</span><span><span>=</span><span>&#34;</span>.MainActivity<span>&#34;</span></span><span>&gt;</span></span>

    <span><span><span>&lt;</span>ScrollView</span> <span><span>xmlns:</span>android</span><span><span>=</span><span>&#34;</span>http://schemas.android.com/apk/res/android<span>&#34;</span></span>
        <span><span>android:</span>layout_width</span><span><span>=</span><span>&#34;</span>fill_parent<span>&#34;</span></span>
        <span><span>android:</span>layout_height</span><span><span>=</span><span>&#34;</span>fill_parent<span>&#34;</span></span>
        <span><span>tools:</span>ignore</span><span><span>=</span><span>&#34;</span>MissingConstraints<span>&#34;</span></span><span>&gt;</span></span>

        <span><span><span>&lt;</span>LinearLayout</span> <span><span>xmlns:</span>android</span><span><span>=</span><span>&#34;</span>http://schemas.android.com/apk/res/android<span>&#34;</span></span>
            <span><span>android:</span>orientation</span><span><span>=</span><span>&#34;</span>vertical<span>&#34;</span></span>
            <span><span>android:</span>layout_width</span><span><span>=</span><span>&#34;</span>match_parent<span>&#34;</span></span>
            <span><span>android:</span>layout_height</span><span><span>=</span><span>&#34;</span>match_parent<span>&#34;</span></span>
            <span><span>android:</span>gravity</span><span><span>=</span><span>&#34;</span>center<span>&#34;</span></span><span>&gt;</span></span>

            <span><span><span>&lt;</span>TextView</span>
                <span><span>android:</span>id</span><span><span>=</span><span>&#34;</span>@+id/textview_title<span>&#34;</span></span>
                <span><span>android:</span>layout_width</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                <span><span>android:</span>layout_height</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                <span><span>android:</span>layout_marginTop</span><span><span>=</span><span>&#34;</span>100dp<span>&#34;</span></span>
                <span><span>android:</span>text</span><span><span>=</span><span>&#34;</span>@string/initial_title<span>&#34;</span></span>
                <span><span>android:</span>textSize</span><span><span>=</span><span>&#34;</span>26sp<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintEnd_toEndOf</span><span><span>=</span><span>&#34;</span>parent<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintStart_toStartOf</span><span><span>=</span><span>&#34;</span>parent<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintTop_toTopOf</span><span><span>=</span><span>&#34;</span>parent<span>&#34;</span></span> <span>/&gt;</span></span>

            <span><span><span>&lt;</span>Button</span>
                <span><span>android:</span>id</span><span><span>=</span><span>&#34;</span>@+id/button_login<span>&#34;</span></span>
                <span><span>android:</span>layout_width</span><span><span>=</span><span>&#34;</span>200dp<span>&#34;</span></span>
                <span><span>android:</span>layout_height</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                <span><span>android:</span>layout_marginTop</span><span><span>=</span><span>&#34;</span>36dp<span>&#34;</span></span>
                <span><span>android:</span>text</span><span><span>=</span><span>&#34;</span>@string/button_login<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintEnd_toEndOf</span><span><span>=</span><span>&#34;</span>@+id/textview_title<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintStart_toStartOf</span><span><span>=</span><span>&#34;</span>@+id/textview_title<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintTop_toBottomOf</span><span><span>=</span><span>&#34;</span>@+id/textview_title<span>&#34;</span></span> <span>/&gt;</span></span>

            <span><span><span>&lt;</span>Button</span>
                <span><span>android:</span>id</span><span><span>=</span><span>&#34;</span>@+id/button_logout<span>&#34;</span></span>
                <span><span>android:</span>layout_width</span><span><span>=</span><span>&#34;</span>200dp<span>&#34;</span></span>
                <span><span>android:</span>layout_height</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                <span><span>android:</span>text</span><span><span>=</span><span>&#34;</span>@string/button_logout<span>&#34;</span></span>
                <span><span>android:</span>enabled</span><span><span>=</span><span>&#34;</span>false<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintEnd_toEndOf</span><span><span>=</span><span>&#34;</span>@+id/textview_title<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintStart_toStartOf</span><span><span>=</span><span>&#34;</span>@+id/textview_title<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintTop_toBottomOf</span><span><span>=</span><span>&#34;</span>@+id/button_login<span>&#34;</span></span> <span>/&gt;</span></span>

            <span><span><span>&lt;</span>TextView</span>
                <span><span>android:</span>id</span><span><span>=</span><span>&#34;</span>@+id/textview_user_profile<span>&#34;</span></span>
                <span><span>android:</span>layout_width</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                <span><span>android:</span>layout_height</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintEnd_toEndOf</span><span><span>=</span><span>&#34;</span>parent<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintStart_toStartOf</span><span><span>=</span><span>&#34;</span>parent<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintTop_toBottomOf</span><span><span>=</span><span>&#34;</span>@id/button_logout<span>&#34;</span></span>
                <span><span>android:</span>layout_margin</span><span><span>=</span><span>&#34;</span>18dp<span>&#34;</span></span><span>/&gt;</span></span>

            <span><span><span>&lt;</span>LinearLayout</span>
                <span><span>android:</span>id</span><span><span>=</span><span>&#34;</span>@+id/linearlayout_metadata<span>&#34;</span></span>
                <span><span>android:</span>visibility</span><span><span>=</span><span>&#34;</span>invisible<span>&#34;</span></span>
                <span><span>android:</span>layout_width</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                <span><span>android:</span>layout_height</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                <span><span>android:</span>orientation</span><span><span>=</span><span>&#34;</span>vertical<span>&#34;</span></span>
                <span><span>android:</span>gravity</span><span><span>=</span><span>&#34;</span>center<span>&#34;</span></span>
                <span><span>android:</span>layout_marginTop</span><span><span>=</span><span>&#34;</span>16dp<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintEnd_toEndOf</span><span><span>=</span><span>&#34;</span>parent<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintStart_toStartOf</span><span><span>=</span><span>&#34;</span>parent<span>&#34;</span></span>
                <span><span>app:</span>layout_constraintTop_toBottomOf</span><span><span>=</span><span>&#34;</span>@id/textview_user_profile<span>&#34;</span></span><span>&gt;</span></span>

                <span><span><span>&lt;</span>TextView</span>
                    <span><span>android:</span>id</span><span><span>=</span><span>&#34;</span>@+id/textview_metadata_heading<span>&#34;</span></span>
                    <span><span>android:</span>layout_width</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                    <span><span>android:</span>layout_height</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                    <span><span>android:</span>textStyle</span><span><span>=</span><span>&#34;</span>bold<span>&#34;</span></span>
                    <span><span>android:</span>text</span><span><span>=</span><span>&#34;</span>@string/textview_metadata_heading<span>&#34;</span></span><span>/&gt;</span></span>

                <span><span><span>&lt;</span>TextView</span>
                    <span><span>android:</span>id</span><span><span>=</span><span>&#34;</span>@+id/textview_metadata_info<span>&#34;</span></span>
                    <span><span>android:</span>layout_width</span><span><span>=</span><span>&#34;</span>match_parent<span>&#34;</span></span>
                    <span><span>android:</span>layout_height</span><span><span>=</span><span>&#34;</span>50dp<span>&#34;</span></span>
                    <span><span>android:</span>layout_margin</span><span><span>=</span><span>&#34;</span>8dp<span>&#34;</span></span>
                    <span><span>android:</span>textAlignment</span><span><span>=</span><span>&#34;</span>center<span>&#34;</span></span>
                    <span><span>android:</span>text</span><span><span>=</span><span>&#34;</span>@string/textview_metadata_info<span>&#34;</span></span>
                    <span><span>android:</span>textSize</span><span><span>=</span><span>&#34;</span>12sp<span>&#34;</span></span> <span>/&gt;</span></span>

                <span><span><span>&lt;</span>EditText</span>
                    <span><span>android:</span>id</span><span><span>=</span><span>&#34;</span>@+id/edittext_country<span>&#34;</span></span>
                    <span><span>android:</span>layout_width</span><span><span>=</span><span>&#34;</span>match_parent<span>&#34;</span></span>
                    <span><span>android:</span>layout_height</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                    <span><span>android:</span>hint</span><span><span>=</span><span>&#34;</span>Enter country<span>&#34;</span></span> <span>/&gt;</span></span>

                <span><span><span>&lt;</span>LinearLayout</span>
                    <span><span>android:</span>layout_width</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                    <span><span>android:</span>layout_height</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                    <span><span>android:</span>orientation</span><span><span>=</span><span>&#34;</span>horizontal<span>&#34;</span></span>
                    <span><span>android:</span>gravity</span><span><span>=</span><span>&#34;</span>center<span>&#34;</span></span><span>&gt;</span></span>

                    <span><span><span>&lt;</span>Button</span>
                        <span><span>android:</span>id</span><span><span>=</span><span>&#34;</span>@+id/button_get<span>&#34;</span></span>
                        <span><span>android:</span>layout_width</span><span><span>=</span><span>&#34;</span>100dp<span>&#34;</span></span>
                        <span><span>android:</span>layout_height</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                        <span><span>android:</span>text</span><span><span>=</span><span>&#34;</span>@string/button_get<span>&#34;</span></span>
                        <span><span>android:</span>layout_marginRight</span><span><span>=</span><span>&#34;</span>8dp<span>&#34;</span></span><span>/&gt;</span></span>

                    <span><span><span>&lt;</span>Button</span>
                        <span><span>android:</span>id</span><span><span>=</span><span>&#34;</span>@+id/button_set<span>&#34;</span></span>
                        <span><span>android:</span>layout_width</span><span><span>=</span><span>&#34;</span>100dp<span>&#34;</span></span>
                        <span><span>android:</span>layout_height</span><span><span>=</span><span>&#34;</span>wrap_content<span>&#34;</span></span>
                        <span><span>android:</span>text</span><span><span>=</span><span>&#34;</span>@string/button_set<span>&#34;</span></span>
                        <span><span>android:</span>layout_marginLeft</span><span><span>=</span><span>&#34;</span>8dp<span>&#34;</span></span><span>/&gt;</span></span>

                <span><span><span>&lt;/</span>LinearLayout</span><span>&gt;</span></span>

            <span><span><span>&lt;/</span>LinearLayout</span><span>&gt;</span></span>

        <span><span><span>&lt;/</span>LinearLayout</span><span>&gt;</span></span>

    <span><span><span>&lt;/</span>ScrollView</span><span>&gt;</span></span>

<span><span><span>&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span>&gt;</span></span></code></pre><p>This XML above defines:</p><ul><li>A <a href="https://developer.android.com/reference/android/widget/ScrollView" target="_blank" rel="noreferrer noopener"><code>ScrollView</code></a> that encapsulates the entire user interface. It allows the user to scroll up and down when the device screen isn’t tall enough to display the entire activity at once.</li><li>A <a href="https://developer.android.com/reference/android/widget/LinearLayout" target="_blank" rel="noreferrer noopener"><code>LinearLayout</code></a> contained within the <code>ScrollView</code>. A <code>ScrollView</code> can contain only one child, so we’re using the <code>LinearLayout</code> to encapsulate all the views in the <code>ScrollView</code>.</li><li><code>textview_title</code>: A <a href="https://developer.android.com/reference/android/widget/TextView" target="_blank" rel="noreferrer noopener"><code>TextView</code></a> that displays a greeting message when the app launches and the user’s logged-in/out status afterward.</li><li><code>button_login</code> and <code>button_logout</code>: The <a href="https://developer.android.com/reference/android/widget/Button" target="_blank" rel="noreferrer noopener"><code>Button</code></a>s that the user taps to log in and out.</li><li><code>textview_user_profile</code>: A <code>TextView</code> that displays the name and email of the logged-in user.</li><li><code>layout_metadata</code>: A <code>LinearLayout</code> that encapsulates all the metadata-related controls.</li><li><code>textview_metadata_heading</code>: A <code>TextView</code> that displays the heading of the metadata section.</li><li><code>textview_metadata_country</code>: A <code>TextView</code> that instructions for editing the user’s country.</li><li><code>edittext_country</code>: An <a href="https://developer.android.com/reference/android/widget/EditText" target="_blank" rel="noreferrer noopener"><code>EditText</code></a> for displaying and editing the user’s country.</li><li><code>button_get</code> and <code>button_set</code>: The <code>Button</code>s to get and set the user’s country.</li></ul><p>Here’s the “blueprint view” of the resulting layout. I’ve labeled the controls in the layout with their <code>id</code>s:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4DF79VdhoNlyAKOKkmQOsa/f280540a8f0d8484ab55a08ac83c3c5a/app_layout.png" alt="“Blueprint view” of the app’s main activity layout showing the ids of its controls."/></p><p>At this point in the exercise, you’ve completed all the setup. You’ve registered the app with Auth0 and set up the app’s build files and user interface. In the next step, you’ll write the app’s code!</p><p><a href="https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-2" target="_blank" rel="noopener referrer">Next Step: Read the second part here</a></p><p><a href="https://community.auth0.com/t/developing-a-secure-api-with-nestjs/33026" target="_blank" rel="noopener noreferrer">I ran into an issue</a></p></div></div>]]></content:encoded>
      <pubDate>Mon, 20 Sep 2021 18:29:00 +0000</pubDate>
    </item>
    <item>
      <title>Streamlining a React Monorepo</title>
      <link>https://auth0.com/blog/streamlining-a-react-monorepo/</link>
      <description>Whether you have a single application or a suite of applications, code reuse, standards around structure, process, and feature development help to ensure your codebase remains healthy in the long term.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><a href="https://nx.dev" target="_blank" rel="noreferrer noopener">Nx is a build framework for monorepos</a> with first-class React support. It helps accelerate the adoption of proven development practices across projects of many sizes and scopes. Nx provides additional tooling for React projects to help scale and develop features at a faster pace. </p><p>This guide walks through some of the tooling provided by Nx, the creation, and structure of an Nx workspace, with an example to follow along with.</p><p><iframe src="https://www.youtube.com/embed/IMWk0P6EeRc" frameborder="0" allowfullscreen=""></iframe></p><h2 id="What-are-Monorepos">What are Monorepos</h2><p>A monorepo is a single collection of all your source code that spans multiple applications, libraries, and languages. Everything in the monorepo is not deployed at the same time but is all located in a central repository. Many companies use monorepos for different organizations and projects. Some even use a single monorepo to house all the source code for projects across their entire company.</p><p>Here are some of the benefits of a monorepo:</p><ul><li><strong>Shared code</strong> — Promotes reuse of validation code, UI components, and types across the code base, including code between the backend and the frontend.</li><li><strong>Atomic changes</strong> — Make changes to a server API and modify the clients that consume that API in the same commit. No more coordinating commits across different repositories.</li><li><strong>Developer mobility</strong> — Provides consistency between building and testing applications written using different tools and technologies. Developers can confidently contribute to other teams’ applications and verify that their changes are safe.</li><li><strong>A single set of dependencies</strong> — Use a single version of third-party dependencies for all your apps. Less frequently used applications don’t get left behind with a 3-year-old version of a framework library or an old version of a build tool.</li></ul><p>There are also a few common misconceptions with monorepos:</p><ul><li>Strictly co-locating your code just by placing all your code in the same repository.</li><li>Running all the builds, tests, and quality checks on all applications for each PR or commit.</li><li>Deploying every application on every commit to the main branch.</li><li>Setting up multiple scripts across applications to handle common tasks.</li></ul><p>Just because you have all your code in a monorepo, that does not mean you have run all the tests and checks on your monorepo for every single commit. This doesn&#39;t scale well and leads to bottlenecks in your development and Continuous Integration (CI) and Continuous Deployment (CD) pipelines. Nx provides integrated tooling to intelligently determine what needs to be run through code analysis, affected commands, and computation caching. </p><h3 id="Affected-commands">Affected commands</h3><p>Nx uses code analysis to build a dependency graph of all projects in the workspace. It then uses the dependency graph to determine what projects are impacted based on your changes between your Git branches and the main branch. <a href="https://nx.dev/latest/react/core-concepts/mental-model#affected-commands" target="_blank" rel="noreferrer noopener">Nx’s Affected Commands</a> use this code analysis to perform the minimum set of tasks based on what&#39;s changed. Let’s look at two applications that depend on a library as an example.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3Msqcbm3M7zreqA7s3Yga/fa9a14ab5dd0970d45ff8603494a2530/Uploaded_from_Streamlining_a_React_Monorepo"/></p><p>To see what applications are affected, use the <strong><a href="https://nx.dev/latest/angular/cli/affected-apps" target="_blank" rel="noreferrer noopener">nx affected:apps command</a></strong>. Nx analyzes the nature of the changes and determines which projects, including applications and libraries, are impacted. In the example above, changing app1 doesn’t cause app2 to be impacted, so you don’t need to run all the pre-merge steps for app2. Alternatively, changing the lib, or packages that both apps depend on does impact both applications.</p><h3 id="Computation-caching">Computation caching</h3><p>Nx is smart in that it also knows the context in which you ran particular commands, the current hash of the files, and other environmental information. </p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1gsO5lGTZaluzgHVc3H3xr/f931ae116060c2def80962a764b4888b/Uploaded_from_Streamlining_a_React_Monorepo"/></p><p>The image above displays an example of the information collected to build a unique hash used to identify the computation. With this information, Nx caches and stores these computations and can replay them if it seems the same computation is being run again.</p><p>This isn’t done through rebuilding source code. Only the artifacts produced from a given command are stored and replayed when possible. If Nx doesn’t find this computation, Nx runs the task, and after it completes, it takes the outputs and the terminal output and stores it locally (and if configured remotely). All of this happens transparently, so you don’t have to worry about it.</p><h2 id="Creating-an-Nx-Workspace-Using-a-React-Preset">Creating an Nx Workspace Using a React Preset</h2><p>Now that you know how Nx works, let’s try it out by building a small application that lists Star Wars characters.</p><p>Start with creating the Nx workspace with a React application using the <code>react</code> preset. </p><pre><code>npx create-nx-workspace sw-org --preset react --appName myapp</code></pre><p>After running this command, you’ll be asked to select a stylesheet format. You can choose the default for this demo. You also have the option to connect your workspace to <a href="https://nx.app/" target="_blank" rel="noreferrer noopener">Nx Cloud</a> if you’d like.</p><p>After you make your selections, this command does the following:</p><ul><li>Generates a new Nx workspace</li><li>Scaffolds out a new React application with modern tooling, including <a href="https://jestjs.io/" target="_blank" rel="noreferrer noopener">Jest for unit tests</a>, and <a href="https://www.cypress.io/" target="_blank" rel="noreferrer noopener">Cypress for E2E tests</a>.</li></ul><p>There are other presets available, such as <code>next</code> for <a href="https://nextjs.org/" target="_blank" rel="noreferrer noopener">Next.js</a> projects, and <code>react<span>-</span>express</code> for a workspace with React and Express pre-configured.</p><p>Every Nx workspace has a file structure similar to this:</p><pre><code>myorg/
├── apps/
├── libs/
├── tools/
├── workspace.json
├── nx.json
├── package.json
└── tsconfig.base.json</code></pre><ul><li><code><span><span>/</span><span>apps</span><span>/</span></span></code> contains the application projects. This is the main entry point for each runnable application.</li><li><code><span><span>/</span><span>libs</span><span>/</span></span></code> contains the library projects. Each library defines its external API so that boundaries between libraries remain clear.</li><li><code><span><span>/</span><span>tools</span><span>/</span></span></code> contains scripts that act on your codebase.</li><li><code><span>/</span>workspace<span>.</span>json</code> contains the configuration for each project in your workspace.</li><li><code><span>/</span>nx<span>.</span>json</code> adds extra information about projects, including implicit dependencies and tags that can be used to restrict the ways projects are allowed to depend on each other.</li><li><code><span>/</span>tsconfig<span>.</span>base<span>.</span>json</code> sets up the global TypeScript settings and aliases.</li></ul><p>To serve up the application, enter into the <code>sw<span>-</span>org</code> directory and run the <code>serve</code> command using the Nx CLI:</p><pre><code>nx serve</code></pre><blockquote><p>Note: If you don&#39;t want to install Nx globally, you can use <code>npx nx serve</code> instead.</p></blockquote><p>The initial application page is displayed.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2EUaKnrpRkLehJempAp06f/a99c92b3282e79e42b16877c98cac1c9/Uploaded_from_Streamlining_a_React_Monorepo"/></p><h2 id="Generating-a-Feature-Library">Generating a Feature Library</h2><p><a href="https://nx.dev/latest/react/structure/library-types#feature-libraries" target="_blank" rel="noreferrer noopener">Generating libraries</a> in an Nx workspace is done by using the <code>generate</code> command with the Nx CLI. Feature libraries are used to display UI to the user, which could including routing information, and could use other libraries such as shared components.</p><p>Create one now by running:</p><pre><code>nx generate lib people</code></pre><p><strong>NOTE</strong> <a href="https://nx.dev/latest/angular/getting-started/console" target="_blank" rel="noreferrer noopener">Nx Console</a> also provides a full l GUI to run Nx CLI commands in your editor with native VSCode and WebStorm support.</p><h2 id="Generating-a-Data-Access-Library">Generating a Data Access Library</h2><p>A &#34;data access&#34; library is where functionality for fetching and storing data for a feature exists. So any services necessary to manage the quotes are placed in this library. Throughout building applications, there will be data access libraries across multiple features.</p><p>Create the data access library by running:</p><pre><code>nx generate lib data-access</code></pre><p><strong>NOTE</strong> You can also create your custom generators similar to the <code>library</code> generator inside an Nx workspace. This provides more flexibility to create more standards around your development processes and guidelines. Read more about workspace generators in our <a href="https://nx.dev/latest/angular/generators/workspace-generators" target="_blank" rel="noreferrer noopener">Workspace Generators</a> guide.</p><p>Update the data-access library to fetch the characters from the Star Wars API.</p><p>Open up <code>data<span>-</span>access<span>.</span>tsx</code> and replace it with the following:</p><pre><code><span>import</span> <span>{</span> useEffect<span>,</span> useState <span>}</span> <span>from</span> <span>&#34;react&#34;</span><span>;</span>

<span>export</span> <span>interface</span> <span>IPerson</span> <span>{</span>
 birth_year<span>:</span> string<span>;</span>
 eye_color<span>:</span> string<span>;</span>
 films<span>:</span> string<span>[</span><span>]</span><span>;</span>
 gender<span>:</span> string<span>;</span>
 hair_color<span>:</span> string<span>;</span>
 height<span>:</span> string<span>;</span>
 homeworld<span>:</span> string<span>;</span>
 mass<span>:</span> string<span>;</span>
 name<span>:</span> string<span>;</span>
 skin_color<span>:</span> string<span>;</span>
 created<span>:</span> Date<span>;</span>
 edited<span>:</span> Date<span>;</span>
 species<span>:</span> string<span>[</span><span>]</span><span>;</span>
 starships<span>:</span> string<span>[</span><span>]</span><span>;</span>
 url<span>:</span> string<span>;</span>
 vehicles<span>:</span> string<span>[</span><span>]</span><span>;</span>
<span>}</span>

<span>export</span> <span>interface</span> <span>Response</span><span>&lt;</span><span>T</span><span>&gt;</span> <span>{</span>
 count<span>:</span> number<span>;</span>
 next<span>:</span> <span>null</span> <span>|</span> string<span>;</span>
 previous<span>:</span> <span>null</span> <span>|</span> string<span>;</span>
 results<span>:</span> <span>T</span><span>[</span><span>]</span><span>;</span>
<span>}</span>

<span>export</span> <span>function</span> <span>usePeople</span><span>(</span><span>page<span>:</span> number</span><span>)</span> <span>{</span>
 <span>const</span> <span>[</span>people<span>,</span> setPeople<span>]</span> <span>=</span> useState<span>&lt;</span>IPerson<span>[</span><span>]</span><span>&gt;</span><span>(</span><span>[</span><span>]</span><span>)</span><span>;</span>

 <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
   <span>fetch</span><span>(</span><span><span>`</span><span>https://swapi.dev/api/people/?page=</span><span><span>${</span>page<span>}</span></span><span>`</span></span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>r</span><span>)</span> <span>=&gt;</span>
   r<span>.</span><span>json</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>data</span> <span>=&gt;</span> data<span>.</span>results<span>)</span>
 <span>)</span><span>.</span><span>then</span><span>(</span><span>data</span> <span>=&gt;</span> <span>{</span>
     <span>setPeople</span><span>(</span>data<span>)</span><span>;</span>
   <span>}</span><span>)</span><span>;</span>
 <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>

 <span>return</span> people<span>;</span>
<span>}</span></code></pre><p>Now update the people feature at <code>people<span>.</span>tsx</code> to list out the characters:</p><pre><code><span>import</span> <span>{</span> usePeople <span>}</span> <span>from</span> <span>&#39;@sw-org/data-access&#39;</span><span>;</span>
<span>import</span> <span>&#39;./people.module.css&#39;</span><span>;</span>

<span>export</span> <span>function</span> <span>People</span><span>(</span><span>)</span> <span>{</span>
 <span>const</span> people <span>=</span> <span>usePeople</span><span>(</span><span>1</span><span>)</span><span>;</span>
  <span>return</span> <span>(</span>
   <span>&lt;</span>div<span>&gt;</span>
     <span>&lt;</span>h1<span>&gt;</span>Star Wars People<span>&lt;</span><span>/</span>h1<span>&gt;</span>

     <span>&lt;</span>ul<span>&gt;</span>
       <span>{</span>
         people<span>.</span><span>map</span><span>(</span><span>person</span> <span>=&gt;</span> <span>(</span>
           <span>&lt;</span>li key<span>=</span><span>{</span>person<span>.</span>name<span>}</span><span>&gt;</span>
             <span>{</span>person<span>.</span>name<span>}</span>
           <span>&lt;</span><span>/</span>li<span>&gt;</span>
         <span>)</span><span>)</span>
       <span>}</span>
     <span>&lt;</span><span>/</span>ul<span>&gt;</span>
   <span>&lt;</span><span>/</span>div<span>&gt;</span>
 <span>)</span><span>;</span>
<span>}</span>

<span>export</span> <span>default</span> People<span>;</span></code></pre><p>Replace the <code>App</code> template with the <code>People</code> component</p><pre><code><span>import</span> styles <span>from</span> <span>&#39;./app.module.css&#39;</span><span>;</span>

<span>import</span> <span>{</span> People <span>}</span> <span>from</span> <span>&#39;@sw-org/people&#39;</span><span>;</span>

<span>export</span> <span>function</span> <span>App</span><span>(</span><span>)</span> <span>{</span>
 <span>return</span> <span>(</span>
   <span>&lt;</span>div className<span>=</span><span>{</span>styles<span>.</span>app<span>}</span><span>&gt;</span>
     <span>&lt;</span>People<span>/</span><span>&gt;</span>
   <span>&lt;</span><span>/</span>div<span>&gt;</span>
 <span>)</span><span>;</span>
<span>}</span>

<span>export</span> <span>default</span> App<span>;</span></code></pre><p>Refreshing the application shows a list of characters.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3wmVIH8Sqz1ejavorzIzsI/99c44e96e4e44149da2e72e5e328baad/Uploaded_from_Streamlining_a_React_Monorepo"/></p><p>The list of characters is simple. The business and data logic is kept in libraries. As your applications grow, the number of libraries grows along with it, but the applications remain relatively small and are only used for integrating core functionality for the app to run.</p><h2 id="Dependency-Graph">Dependency Graph</h2><p>Nx knows the dependencies between projects in your workspace and can generate your dependency graph visually at any point in time. </p><p>Run the <strong>nx dep-graph</strong> command to see the current state of the workspace.</p><pre><code>nx dep-graph</code></pre><p>This displays the application, E2E project, and the two libraries. </p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4oiIpWdF5wIpz6y5qJkGA4/9a8802092e0de9c1a0e5c9e25d9828d7/Uploaded_from_Streamlining_a_React_Monorepo"/></p><p><strong>NOTE</strong>: You can also have the dependency graph auto-refresh with the <code><span>--</span>watch</code> flag.</p><p>You can also see what projects are impacted by a given change. Make a change to the App.tsx, such as removing the <code>className</code>, save, and run the <strong>nx affected:dep-graph</strong> command.</p><pre><code>nx affected:dep-graph</code></pre><p>This displays the <strong>myapp</strong> and <strong>myapp-e2e</strong> highlighted in red as affected projects.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2S5DueXJUNdbbguneKUjGJ/cc397167e5dc78a1835ab2db57b6dacb/Uploaded_from_Streamlining_a_React_Monorepo"/></p><p><strong>NOTE:</strong> The <strong>myapp-e2e</strong> application is directly tied to mapp, but is implicitly linked through the <strong>nx.json</strong> file. Read more about Nx configuration here.</p><h3 id="Using-Affected-Commands">Using Affected Commands</h3><p>Nx provides affected commands to run certain tasks against affected projects. For example, make a change to the <code>data<span>-</span>access</code> library, and run <strong>nx affected:build</strong>. </p><pre><code>nx affected:build</code></pre><p>Nx finds the affected applications impacted by changing the <strong>data-access </strong>library and runs the <strong>build</strong> target for each one of them. That way, <strong>only</strong> the affected projects are built for the given change, and not every project in the monorepo. The same commands work for <strong>test</strong>, <strong>lint</strong>, and <strong>e2e</strong>, and others.</p><p>There is also the <strong>nx affected</strong> command that works with any defined target. The alias for <strong>nx affected:build</strong> is:</p><pre><code>nx affected --target<span>=</span>build</code></pre><p>This allows you to run any target based on the affected projects.</p><h3 id="Using-Computation-Caching">Using Computation Caching</h3><p>Along with affected commands, Nx supports<a href="https://nx.dev/latest/angular/core-extended/computation-caching" target="_blank" rel="noreferrer noopener"> computation caching</a> to never execute the same computation twice. This computation cache is pluggable and can be distributed. Taking <code><span>**</span>myapp</code><em></em> as an example, run the build for <code>myapp</code> twice.</p><pre><code>nx build myapp</code></pre><p>When running the same command the second time without changes, you immediately get the cached results from the previous computation. The computation cache is done locally, but can also be distributed and extended to the rest of your team and organization. </p><p><a href="https://nx.app" target="_blank" rel="noreferrer noopener">Nx Cloud</a> is one such option to distribute your computation cache. It includes a free tier with 5 hours of saved time per month, enterprise options, and is free for open-source projects.</p><h2 id="Summary">Summary</h2><p>Nx provides modern tooling including code analysis, code generation, code analysis, affected commands, and computation caching to scale your application development using a monorepo.</p><p>What did we cover?</p><ul><li>Monorepos and why you should use one</li><li>Nx workspace structure and standardization</li><li>Smarter tooling with code analysis, affected commands, dependency visualization, and computation caching.</li></ul><p>Find out more with the following resources:</p><ul><li>Documentation at <a href="https://nx.dev" target="_blank" rel="noreferrer noopener">https://nx.dev</a></li><li>Free <a href="https://egghead.io/playlists/scale-react-development-with-nx-4038" target="_blank" rel="noreferrer noopener">Egghead course</a> on Scaling React Development</li></ul></div></div>]]></content:encoded>
      <pubDate>Thu, 16 Sep 2021 15:47:00 +0000</pubDate>
    </item>
    <item>
      <title>4 Authentication Tools That Increase Retail Conversion Rates</title>
      <link>https://auth0.com/blog/four-authentication-tools-that-increase-retail-conversion-rates/</link>
      <description>How to decrease abandoned carts by improving the simplicity and security of your user login process.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>When consumers create e-commerce accounts, retailers can use their purchasing history to offer a more personalized shopping experience, which can boost <a href="https://www.mckinsey.com/industries/retail/our-insights/personalizing-the-customer-experience-driving-differentiation-in-retail" target="_blank" rel="noreferrer noopener">retail conversion rates</a> by up to 15%. However, it is tough for retailers to convince people to actually sign up — case in point, <a href="https://baymard.com/lists/cart-abandonment-rate" target="_blank" rel="noreferrer noopener">a 2021 DMI survey</a> found that 24% of U.S. shoppers abandoned an order just because they were asked to make an account.</p><p>We <a href="https://images.ctfassets.net/2ntc334xpx65/7o4UAUaHOMHJeV5fmgK9S1/b4c300762c64becf6cef5989046aaf8f/Infograph_2_2x.jpg" target="_blank" rel="noreferrer noopener">surveyed</a> over 8,000 consumers across six global markets (the UK, France, Germany, Australia, Singapore, and Japan) to learn about the login experience they preferred and discovered widespread frustration with standard username/password (UP) login methods and businesses that fail to meet their ease-of-login expectations.</p><p>Our survey found five problems that stop consumers from signing up for an online account:</p><ol start="1"><li>Completing long login or sign-up forms (49%)</li><li>Meeting minimum password requirements (47%)</li><li>Entering private information (46%)</li><li>Creating a new ID and password for every app or online service (43%)</li><li>Verifying their account with one-time passwords (OTP) (23%)</li></ol><p>Such frustrations lead to some of the worst security hygiene offenses, in particular, reuse of passwords across multiple accounts. Our survey found that 85% of international consumers reuse passwords, with 41% of them doing so “frequently or all the time” and 29% “sometimes”.</p><p>We asked consumers about the kind of login experience that would increase their chances of signing up for an account and found that adding certain authentication features would actually encourage them to do so. Our survey results indicated that, when available, consumers are more likely to complete the signup process if given more secure and easy-to-use login experiences.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/24uCeR7yhZbNmMpbFE7v3v/c2245aa707cc9d83b5242357ed06ac39/Passwordless-Authentication-sep1.jpg" alt="Authentication 01"/></p><p>Below are four authentication tools that can improve your retail conversion rate by creating a more streamlined, secure login experience that satisfies users.</p><h2 id="1--Multi-factor-Authentication--MFA-">1. Multi-factor Authentication (MFA)</h2><p><a href="https://auth0.com/learn/get-started-with-mfa/" target="_blank" rel="noreferrer noopener">MFA</a> requires users to verify their identity in more than one way, which helps reduce the potential for unauthorized access to their data. For instance, a user may submit a password and then have to additionally verify a secondary account or device they own using a link sent to their email address or phone.</p><p>Consumers want to know that companies are protecting their data. In a 2020 survey with 1,000 North American consumers asked about privacy and data collection, management consulting firm McKinsey &amp; Company found that <a href="https://www.mckinsey.com/business-functions/risk-and-resilience/our-insights/the-consumer-data-opportunity-and-the-privacy-imperative" target="_blank" rel="noreferrer noopener">87% of respondents said</a> they “would not do business with a company if they had concerns about its security practices.” MFA helps retailers provide consumers with greater confidence their data is protected because it blocks <a href="https://www.microsoft.com/security/blog/2019/08/20/one-simple-action-you-can-take-to-prevent-99-9-percent-of-account-attacks/" target="_blank" rel="noreferrer noopener">99.9% of attacks</a>.</p><p>While 49% of our surveyed consumers noted they were more likely to sign up for an online account if a business offered MFA, only 28% of surveyed businesses currently offered it as part of their login process. This discrepancy arises from the perception that the multiple steps in MFA mean extra hassle for both users and the business.</p><p>However, MFA is actually fairly easy to implement — many companies <a href="https://www.brighttalk.com/webcast/15793/483340/451-research-report-remote-work-during-covid-19-drives-mfa-adoption" target="_blank" rel="noreferrer noopener">quickly adopted it</a> when COVID-19 forced them to pivot to a remote workforce in 2020.</p><p><strong>Company use example</strong>: According to <a href="https://auth0.com/case-studies/ecobee/" target="_blank" rel="noreferrer noopener">Jordan Christensen</a>, VP of Technology at <a href="https://www.ecobee.com/en-us/" target="_blank" rel="noreferrer noopener">ecobee</a>, the smart device retailer wanted to protect consumers using ecobee’s home monitoring products, so they outsourced MFA implementation. His team was thrilled they were able to bring MFA to customers “without needing to reinvent the wheel.”</p><h2 id="2--Biometrics">2. Biometrics</h2><p><a href="https://auth0.com/blog/what-are-biometrics-the-proscons-of-biometric-security/" target="_blank" rel="noreferrer noopener">Biometrics</a> uses measurable human traits, characteristics, or behaviors to confirm user identity. Fingerprint scans and facial recognition are two of the most common forms of biometrics, but there’s a growing list that includes options like voice, gait, and even DNA recognition.</p><p>Biometric traits are harder for hackers to fake than usernames and passwords, so they can help mitigate security concerns that could keep consumers from signing up. <a href="https://usa.visa.com/visa-everywhere/security/how-fingerprint-authentication-works.html" target="_blank" rel="noreferrer noopener">Consumers</a> also like it because it’s faster than username/password authentication, and they don’t have to struggle with remembering login credentials.</p><p>While 46% of our surveyed consumers responded that they’d be more likely to log in if they could use biometrics, only 21% of the businesses we surveyed currently offered it — the biggest consumer-business gap we found in the study. Taking steps to close the gap between consumer expectations and current business practices will result in a better customer experience and better retail conversion rates.</p><p>Steven Rees-Pullman, SVP, International at Auth0, explains that it can be a <a href="https://auth0.com/blog/businesses-fall-short-of-consumer-expectations-for-login-experiences-auth0-survey-reveals/" target="_blank" rel="noreferrer noopener">“heavy lift”</a> for businesses to develop biometric authentication in-house due to factors like limited bandwidth of IT employees or a lack of expertise with the process. To prevent diverting company resources and adding additional stress on already busy IT teams, some companies are instead choosing to outsource implementation to third-party providers that specialize in identity management and already have <a href="https://auth0.com/docs/mfa/configure-webauthn-device-biometrics-for-mfa" target="_blank" rel="noreferrer noopener">experience with biometrics</a>.</p><p><strong>Company use example</strong>: Consumer use of <a href="https://www.microsoft.com/" target="_blank" rel="noreferrer noopener">Microsoft’s</a> biometric authentication tool Windows Hello, which lets users log in with a face, iris, or fingerprint scan instead of a password, jumped from <a href="https://www.microsoft.com/security/blog/2020/12/17/a-breakthrough-year-for-passwordless-technology/" target="_blank" rel="noreferrer noopener">69.4% to 84.7%</a> in 2019 alone. Additionally, <a href="https://www.disney.com/" target="_blank" rel="noreferrer noopener">Disney</a> started experimenting with a <a href="https://insidethemagic.net/2021/04/disney-world-facial-recognition-ks1/" target="_blank" rel="noreferrer noopener">facial recognition system</a> at Walt Disney World’s Magic Kingdom theme park this year and was using <a href="https://insidethemagic.net/2020/10/disney-fingerprint-scanning-kj1/" target="_blank" rel="noreferrer noopener">fingerprint scanning</a> to prevent ticket fraud before COVID-19 hit.</p><p><a href="https://auth0.com/learn/social-login/" target="_blank" rel="noreferrer noopener">Social logins</a> use existing login information from a social network provider that allows consumers to access a third-party website account without having to create another one. While the number of social providers <a href="https://www.theverge.com/2021/5/7/22422980/tiktok-log-in-sound-kit-app-integration-developers" target="_blank" rel="noreferrer noopener">keeps growing</a>, staple networks include Facebook, Google, and Twitter.</p><p>Consumers prefer social logins to traditional UP authentication because they typically allow them to create and log in to accounts with just one click. As a result, social logins generally <a href="https://auth0.com/blog/how-to-use-social-login-to-drive-your-apps-growth/" target="_blank" rel="noreferrer noopener">boost conversion rates</a> by up to 20% — though some companies report seeing <a href="https://www.quora.com/What-impact-does-social-login-have-on-conversion-rates" target="_blank" rel="noreferrer noopener">as high as 40%</a>. Social logins also provide access to rich user data, allowing you to use more customized, targeted marketing with individual consumers.</p><p>Our survey found there wasn’t a huge gap between consumers and businesses with social logins, with 37% of consumers noting they were more likely to sign up with it and 31% of businesses currently offering it.</p><p>Social logins are typically connected to larger companies with established data privacy measures, but security can be compromised if users are reusing passwords. Martin Gontovnikas, former VP of Marketing at Auth0, says consumers using social logins should <a href="https://auth0.com/blog/social-login-on-the-rise/" target="_blank" rel="noreferrer noopener">vary their passwords across platforms</a>, and you can choose to boost the security strength of social logins by combining it with MFA.</p><p><strong>Company use example:</strong> Kevin Ho, VP of Marketing for marketing agency <a href="https://www.wishpond.com/" target="_blank" rel="noreferrer noopener">WishPond</a>, found that after featuring a social login option more prominently than UP authentication, the company saw an <a href="https://blog.wishpond.com/post/115675436270/how-we-improved-sign-up-rates-by-8-5-with-this-simple-test" target="_blank" rel="noreferrer noopener">8.5% increase</a> in their conversions.</p><h2 id="4--Passwordless">4. Passwordless</h2><p><a href="https://assets.ctfassets.net/2ntc334xpx65/3Ew2LXo2UJDQdlSukeQxwq/de57802e6a5da4a58de15ee68b42ccf5/Passwordless-Whitepaper-Auth0.pdf" target="_blank" rel="noreferrer noopener">Passwordless</a> authentication is exactly what it sounds like: confirming a consumer’s identity with something different from a password. Outside of biometrics, typical passwordless options include magic links, where a user is sent a link to log in after submitting their email, one-time codes, and push notifications.</p><p>With the average consumer having <a href="https://tech.co/news/average-person-100-passwords#:~:text=According%20to%20new%20research%20from,has%20100%20passwords%20to%20remember!" target="_blank" rel="noreferrer noopener">approximately 100 passwords</a>, passwordless authentication reduces potential user frustration with logins. Not having traditional UP authentication also means increased data security, with Verizon noting in its <a href="https://www.verizon.com/business/resources/reports/dbir/" target="_blank" rel="noreferrer noopener">2021 Data Breach Investigations Report</a> that stolen login credentials are the main way organizations get hacked. Next Move Strategy Consulting published a report <a href="https://www.nextmsc.com/report/passwordless-authentication-market" target="_blank" rel="noreferrer noopener">this month</a> predicting that the global passwordless authentication market will grow by 29.1% by 2030.</p><p>Even so, passwordless authentication came in last in our survey in terms of both consumer likelihood to sign up with it (34%) and business use (20%). Traditionally, <a href="https://www.forbes.com/sites/forbestechcouncil/2021/04/20/why-is-passwordless-authentication-met-with-reluctance/?sh=5a946c366d06" target="_blank" rel="noreferrer noopener">IT infrastructure</a> at large companies has been set up for UP authentication, so it can be a complex process for businesses to implement passwordless tech on a wide scale.</p><p>According to Cybersecurity Insiders’ 2021 <a href="https://media.fidoalliance.org/wp-content/uploads/2021/03/The_State_Of_Passwordless_Authentication_2021_Report.pdf" target="_blank" rel="noreferrer noopener">“The State of Passwordless Authentication”</a> report, many organizations that have chosen to implement passwordless authentication have done so because of its proven security, ease of use, and ability to “help consumer-facing businesses increase revenue.” Microsoft also reported that <a href="https://www.microsoft.com/security/blog/2020/12/17/a-breakthrough-year-for-passwordless-technology/" target="_blank" rel="noreferrer noopener">more than 150 million users</a> were using passwordless authentication on Windows in May 2020.</p><p><strong>Company use example:</strong> Kunal Chakraborty, Global Vice President for Customer Experience and Digital at <a href="https://www.grandvision.com/" target="_blank" rel="noreferrer noopener">GrandVision</a>, the optical retailer, said the company made <a href="https://auth0.com/case-studies/grandvision/" target="_blank" rel="noreferrer noopener">“the checkout process as customer-friendly as possible”</a> by having a third-party provider implement passwordless authentication — accounts are created just by clicking a box. As a result, GrandVision saw a <a href="https://techbeacon.com/security/your-passwordless-future-make-it-sooner-rather-later" target="_blank" rel="noreferrer noopener">boost in their conversions by up to 54%</a>.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3DuYOoznWG10geDOeYwBVm/02b5dbc23075eebf4d984f22dbaaec76/Passwordless-Authentication-sep2.jpg" alt="Authentication 02"/></p><h2 id="Authentication-Technologies-Enhance-User-Experience">Authentication Technologies Enhance User Experience</h2><p>While it may seem like adding a new element to your login box would drive consumers away, it’s actually the opposite. By using one of the authentication tools above to provide consumers with a simple, secure login experience, you can satisfy users and continue to strengthen their ties to your brand with personalized marketing — strengthening your retail conversion rate in the process.</p><p>Auth0 makes implementing the authentication technologies above simple — learn more <a href="https://auth0.com/authentication" target="_blank" rel="noreferrer noopener">about Auth0’s platform</a> here.</p></div></div>]]></content:encoded>
      <pubDate>Wed, 15 Sep 2021 15:03:00 +0000</pubDate>
    </item>
    <item>
      <title>Backend For Frontend Authentication Pattern with Auth0 and ASP.NET Core</title>
      <link>https://auth0.com/blog/backend-for-frontend-pattern-with-auth0-and-dotnet/</link>
      <description>Understand the Backend For Frontend authentication pattern and how it can be implemented in ASP.NET with Auth0.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><strong>TL;DR:</strong> This article discusses the Backend For Frontend authentication pattern and how it can be used in practice in SPAs implemented with React that use ASP.NET Core 5 as backend. Basic knowledge of the OAuth 2.0 and OpenID Connect is desirable but not required.</p><h2 id="What-Is-the-Backend-For-Frontend-Authentication-Pattern-">What Is the Backend For Frontend Authentication Pattern?</h2><p>As you start looking into the different <a href="https://auth0.com/docs/flows" target="_blank" rel="noreferrer noopener">OAuth flows</a> and the scenarios they cover, client type is one of those relevant aspects mentioned everywhere. The <a href="https://datatracker.ietf.org/doc/html/rfc6749" target="_blank" rel="noreferrer noopener">OAuth 2.0 specification</a> defines two different client types, public and confidential clients, under <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-2.1" target="_blank" rel="noreferrer noopener">section #2.1</a>.</p><p>Public clients are those that run in places where secrets could be exposed as part of the source code or if the binaries are decompiled. These usually are single-page apps running in a browser or native apps running in user devices such as mobile phones or smart TVs. </p><p>On the other hand, confidential clients are the ones that can keep secrets in a private store, like, for example, a web application running in a web server, which can store secrets on the backend. </p><p>The client type will determine one or more OAuth flows suitable for the application implementation. By sticking to one of those flows, you can also lower the risks of getting the application compromised from an authentication and authorization standpoint.</p><p>The <strong>Backend For Frontend</strong> (a.k.a BFF) pattern for authentication emerged to mitigate any risk that may occur from negotiating and handling access tokens from public clients running in a browser.  The name also implies that a dedicated backend must be available for performing all the authorization code exchange and handling of the access and refresh tokens. This pattern relies on <a href="https://openid.net/connect/" target="_blank" rel="noreferrer noopener">OpenID Connect</a>, which is an authentication layer that runs on top of OAuth to request and receive identity information about authenticated users.</p><blockquote><p>This pattern does not work for a pure SPA that relies on calling external APIs directly from javascript or a serverless backend (e.g., AWS Lamba or Azure Functions).</p></blockquote><p>The following diagram illustrates how this pattern works in detail:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7b2OEjgWLrP5EBOnPNK4MH/b9970c5cce10ee594477493785b17efb/BFF-Sequence.png" alt="BFF sequence diagram"/></p><ol start="1"><li>When the frontend needs to authenticate the user, it calls an API endpoint (<code><span>/</span>api<span>/</span>login</code>) on the backend to start the login handshake.</li><li>The backend uses OpenID connect with Auth0 to authenticate the user and getting the id, access, and refresh tokens.</li><li>The backend stores the user&#39;s tokens in a cache.</li><li>An encrypted cookie is issued for the frontend representing the user authentication session.</li><li>When the frontend needs to call an external API, it passes the encrypted cookie to the backend together with the URL and data to invoke the API.</li><li>The backend retrieves the access token from the cache and makes a call to the external API including that token on the authorization header.</li><li>When the external API returns a response to the backend, this one forwards that response back to the frontend.</li></ol><h2 id="Backend-For-FrontEnd-in-ASP-NET-Core">Backend For FrontEnd in ASP.NET Core</h2><p>Visual Studio ships with three templates for SPAs with an ASP.NET Core backend. As shown in the following picture, those templates are ASP.NET Core with Angular, ASP.NET Core with React.js, and ASP.NET Core with React.js and Redux, which includes all the necessary plumbing for using Redux.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4m19OOAccdvvxPsriVyior/9062c17f8c3a39820932ab0ff2789185/visualstudio-aspnet-templates.png" alt="Available templates for SPA and ASP.NET Core"/></p><p>As part of this article, we will be discussing how to implement this pattern with the ASP.NET Core with React.js template.</p><p>You can use <a href="https://github.com/auth0-blog/bff-auth0-dotnet" target="_blank" rel="noreferrer noopener">this GitHub repository</a> as a reference for the project you are about to build. </p><h3 id="The-structure-of-the-project">The structure of the project</h3><p>Projects created with that template from Visual Studio will have the following folder structure.</p><ul><li><code>ClientApp</code>, this folder contains a sample SPA implemented with React.js. This is the app that we will modify to support the BFF pattern.</li><li><code>Controllers</code>, this folder contains the controllers implemented with ASP.NET Core for the API consumed from the SPA. In other words, it&#39;s the backend.</li><li><code>Pages</code>, this folder contains server-side pages, which are mostly used for rendering errors on the backend.</li><li><code>Startups<span>.</span>cs</code>, this is the file containing the main class where the ASP.NET Core middleware classes are configured as well as the dependency injection container.</li></ul><p>Before modifying any code, we will proceed to configure first our application in Auth0. That configuration will give us access to the keys and authentication endpoints for the OpenID middleware in .NET Core.</p><h2 id="Auth0-Configuration">Auth0 Configuration</h2><p>To start, you need to access your <a href="https://manage.auth0.com/" target="_blank" rel="noreferrer noopener">Auth0 Dashboard</a>. If you don&#39;t have an Auth0 account, you can <a href="https://auth0.com/signup" data-amp-replace="CLIENT_ID" data-amp-addparams="anonId=CLIENT_ID(cid-scope-cookie-fallback-name)" target="_blank" rel="noreferrer noopener">sign up for a free one</a> right now!</p><h3 id="Create-an-application-in-the-Auth0-Dashboard">Create an application in the Auth0 Dashboard</h3><p>The first thing we will do is to create a new brand application in the Auth0 Dashboard. An Auth0 application is an entry point for getting the keys and endpoints we will need in our web application.
Go to your dashboard, click on the <em>Applications</em> menu on the left, and then <em>Create Application</em>.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/MTviQ3xdr6MFQQtkMFQ0n/123341f4c3cafaa17da2a8bac62e775e/auth0-dashboard-applications.png" alt="Applications section in the Auth0 Dashboard"/></p><p>The <em>Create Application</em> button will start a wizard to define the configuration of our application. Pick a name for your web application, and select the option <em>Regular Web Applications</em>. Do not confuse your application with a Single Page Web Application. Even if we are going to implement a SPA with React, we will rely on the .NET Core backend to negotiate the ID tokens. When choosing <em>Regular Web Applications</em>, we are telling Auth0 that our application will use the <a href="https://auth0.com/docs/flows/authorization-code-flow" target="_blank" rel="noreferrer noopener">Authorization Code Flow</a>, which requires a backend channel to receive the ID token for OpenID Connect, and that is exactly what we need to get that magic happening in our ASP.NET Core backend.</p><p> <img src="https://images.ctfassets.net/23aumh6u8s0i/34sDIegR1jupeg8G8tJyjE/8bcef77e2d95415396876b996d8547c6/auth0-dashboard-create-application.png" alt="Creating applications in the Auth0 Dashboard"/></p><p>Once the application is created, go to the <em>Settings</em> tab and take note of the following settings:</p><ul><li>Domain</li><li>Client ID</li><li>Client Secret</li></ul><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2YsEWLtSCwuUKt8ba2kRSx/e5d403296c36a4c506d87ce7b5dd711f/auth0-app-configuration-settings.png" alt="Auth0 app configuration settings"/></p><p>Those are the ones you will need to configure the OpenID middleware in the web application.</p><h3 id="Configure-the-Callback-URL">Configure the Callback URL</h3><p>The next thing is to configure the Callback URL for our web application. This is the URL where Auth0 will post the authorization code and ID token for OpenID Connect. 
This URL can be added in the Allowed URLs field for our application. For our sample, we will use <a href="https://localhost:5001/callback" target="_blank" rel="noreferrer noopener">https://localhost:5001/callback</a>. If you are planning to deploy the application to a different URL, you will also need to ensure it is listed here.</p><h3 id="Configure-the-Logout-URL">Configure the Logout URL</h3><p>The logout URL is where Auth0 will redirect the user after the logout process has been completed. Our web application will pass this URL to Auth0 as part of <a href="https://auth0.com/docs/logout/redirect-users-after-logout" target="_blank" rel="noreferrer noopener">the <code>returnTo</code> query string parameter</a>. The logout URL for your app must be added to the <em>Allowed Logout URLs</em> field under the application settings, or Auth0 will return an error otherwise when the user tries to do a logout. For our sample, we will use <a href="https://localhost:5001" target="_blank" rel="noreferrer noopener">https://localhost:5001</a>.</p><h3 id="Create-an-API-in-the-Auth0-Dashboard">Create an API in the Auth0 Dashboard</h3><p>We also need to create an Auth0 API in the Auth0 Dashboard. So, go to the APIs section and click on <em>Create API</em>, as shown in the following picture:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/41FoW31W6boGVYrtkfnyhK/2efc80b19495ecb27699ccc62052f14d/auth0-dashboard-create-api.png" alt="Creating an API in the Auth0 Dashboard"/></p><p>This will open a new window for configuring the API. Configure the following fields under the settings tab in that window.</p><ul><li><strong>Name</strong>, a friendly name or description for the API. Enter <strong>Weather Forecast API</strong> for this sample.</li><li><strong>Identifier</strong> or <strong>Audience</strong>, which is an identifier that the client application uses to request access tokens for the API. Enter the string <code>https<span>:</span><span>/</span><span>/</span>weatherforecast</code>.</li></ul><p>Under the permissions tab, add a new permission <code>read<span>:</span>weather</code> with the description <em>It allows getting the weather forecast</em>. This is the scope that Auth0 will inject in the access token if the user approves it in the consent screen. </p><p>Finally, click on the Save button to save the changes. At this point, our API is ready to be used from .NET Core.</p><h2 id="Configuring-the-ASP-NET-Core-Application">Configuring the ASP.NET Core Application</h2><p>Our application will use two middleware: </p><ul><li>The OpenID Connect middleware for handling all the authentication handshake with Auth0.</li><li>The Authentication Cookie middleware for persisting the authentication session in a cookie also sharing it with the frontend running React.</li></ul><p>Open the Package Manager Console for NuGet in Visual Studio and run the following command:</p><pre><code>Install-Package Microsoft.AspNetCore.Authentication.Cookies
Install-Package Microsoft.AspNetCore.Authentication.OpenIdConnect</code></pre><p>Once the Nuget packages are installed in our project, we can go ahead and configure the middleware in the <code>Startup<span>.</span>cs</code> class under the root folder of the ASP.NET Core project.</p><p>Modify the <code>ConfigureServices</code> method in that class to include the following code.</p><pre><code><span>// BFF/Startup.cs</span>

<span>// ...existing code...</span>

<span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>
<span>{</span>
  services<span>.</span><span>AddAuthentication</span><span>(</span>options <span>=&gt;</span>
    <span>{</span>
        options<span>.</span>DefaultAuthenticateScheme <span>=</span> CookieAuthenticationDefaults<span>.</span>AuthenticationScheme<span>;</span>
        options<span>.</span>DefaultSignInScheme <span>=</span> CookieAuthenticationDefaults<span>.</span>AuthenticationScheme<span>;</span>
        options<span>.</span>DefaultChallengeScheme <span>=</span> CookieAuthenticationDefaults<span>.</span>AuthenticationScheme<span>;</span>
    <span>}</span><span>)</span>
    <span>.</span><span>AddCookie</span><span>(</span>o <span>=&gt;</span>
    <span>{</span>
        o<span>.</span>Cookie<span>.</span>SecurePolicy <span>=</span> CookieSecurePolicy<span>.</span>Always<span>;</span>
        o<span>.</span>Cookie<span>.</span>SameSite <span>=</span> SameSiteMode<span>.</span>Strict<span>;</span>
        o<span>.</span>Cookie<span>.</span>HttpOnly <span>=</span> <span>true</span><span>;</span>
    <span>}</span><span>)</span>
    <span>.</span><span>AddOpenIdConnect</span><span>(</span><span>&#34;Auth0&#34;</span><span>,</span> options <span>=&gt;</span> <span>ConfigureOpenIdConnect</span><span>(</span>options<span>)</span><span>)</span><span>;</span>
  
    services<span>.</span><span>AddHttpClient</span><span>(</span><span>)</span><span>;</span>

   <span>// ...existing code...</span>
 <span>}</span>

<span>private</span> <span><span>void</span></span> <span>ConfigureOpenIdConnect</span><span>(</span><span>OpenIdConnectOptions</span> options<span>)</span>
<span>{</span>
    <span>// Set the authority to your Auth0 domain</span>
    options<span>.</span>Authority <span>=</span> <span><span>$&#34;https://</span><span><span>{</span><span>Configuration<span>[</span><span>&#34;Auth0:Domain&#34;</span><span>]</span></span><span>}</span></span><span>&#34;</span></span><span>;</span>

    <span>// Configure the Auth0 Client ID and Client Secret</span>
    options<span>.</span>ClientId <span>=</span> Configuration<span>[</span><span>&#34;Auth0:ClientId&#34;</span><span>]</span><span>;</span>
    options<span>.</span>ClientSecret <span>=</span> Configuration<span>[</span><span>&#34;Auth0:ClientSecret&#34;</span><span>]</span><span>;</span>

    <span>// Set response type to code</span>
    options<span>.</span>ResponseType <span>=</span> OpenIdConnectResponseType<span>.</span>CodeIdToken<span>;</span>

    options<span>.</span>ResponseMode <span>=</span> OpenIdConnectResponseMode<span>.</span>FormPost<span>;</span>

    <span>// Configure the scope</span>
    options<span>.</span>Scope<span>.</span><span>Clear</span><span>(</span><span>)</span><span>;</span>
    options<span>.</span>Scope<span>.</span><span>Add</span><span>(</span><span>&#34;openid&#34;</span><span>)</span><span>;</span>
    options<span>.</span>Scope<span>.</span><span>Add</span><span>(</span><span>&#34;offline_access&#34;</span><span>)</span><span>;</span>
    options<span>.</span>Scope<span>.</span><span>Add</span><span>(</span><span>&#34;read:weather&#34;</span><span>)</span><span>;</span>
    
    <span>// Set the callback path, so Auth0 will call back to http://localhost:3000/callback</span>
    <span>// Also ensure that you have added the URL as an Allowed Callback URL in your Auth0 dashboard</span>
    options<span>.</span>CallbackPath <span>=</span> <span>new</span> <span>PathString</span><span>(</span><span>&#34;/callback&#34;</span><span>)</span><span>;</span>

    <span>// Configure the Claims Issuer to be Auth0</span>
    options<span>.</span>ClaimsIssuer <span>=</span> <span>&#34;Auth0&#34;</span><span>;</span>

    <span>// This saves the tokens in the session cookie</span>
    options<span>.</span>SaveTokens <span>=</span> <span>true</span><span>;</span>
    
    options<span>.</span>Events <span>=</span> <span>new</span> <span>OpenIdConnectEvents</span>
    <span>{</span>
        <span>// handle the logout redirection</span>
        OnRedirectToIdentityProviderForSignOut <span>=</span> <span>(</span>context<span>)</span> <span>=&gt;</span>
        <span>{</span>
            <span><span>var</span></span> logoutUri <span>=</span> <span><span>$&#34;https://</span><span><span>{</span><span>Configuration<span>[</span><span>&#34;Auth0:Domain&#34;</span><span>]</span></span><span>}</span></span><span>/v2/logout?client_id=</span><span><span>{</span><span>Configuration<span>[</span><span>&#34;Auth0:ClientId&#34;</span><span>]</span></span><span>}</span></span><span>&#34;</span></span><span>;</span>

            <span><span>var</span></span> postLogoutUri <span>=</span> context<span>.</span>Properties<span>.</span>RedirectUri<span>;</span>
            <span>if</span> <span>(</span><span>!</span><span>string</span><span>.</span><span>IsNullOrEmpty</span><span>(</span>postLogoutUri<span>)</span><span>)</span>
            <span>{</span>
                <span>if</span> <span>(</span>postLogoutUri<span>.</span><span>StartsWith</span><span>(</span><span>&#34;/&#34;</span><span>)</span><span>)</span>
                <span>{</span>
                    <span>// transform to absolute</span>
                    <span><span>var</span></span> request <span>=</span> context<span>.</span>Request<span>;</span>
                    postLogoutUri <span>=</span> request<span>.</span>Scheme <span>+</span> <span>&#34;://&#34;</span> <span>+</span> request<span>.</span>Host <span>+</span> request<span>.</span>PathBase <span>+</span> postLogoutUri<span>;</span>
                <span>}</span>
                logoutUri <span>+=</span> <span><span>$&#34;&amp;returnTo=</span><span><span>{</span><span> Uri<span>.</span><span>EscapeDataString</span><span>(</span>postLogoutUri<span>)</span></span><span>}</span></span><span>&#34;</span></span><span>;</span>
            <span>}</span>
            context<span>.</span>Response<span>.</span><span>Redirect</span><span>(</span>logoutUri<span>)</span><span>;</span>
            context<span>.</span><span>HandleResponse</span><span>(</span><span>)</span><span>;</span>

            <span>return</span> Task<span>.</span>CompletedTask<span>;</span>
        <span>}</span><span>,</span>
        OnRedirectToIdentityProvider <span>=</span> context <span>=&gt;</span> <span>{</span>
            context<span>.</span>ProtocolMessage<span>.</span><span>SetParameter</span><span>(</span><span>&#34;audience&#34;</span><span>,</span> Configuration<span>[</span><span>&#34;Auth0:ApiAudience&#34;</span><span>]</span><span>)</span><span>;</span>
            <span>return</span> Task<span>.</span>CompletedTask<span>;</span>
        <span>}</span>
    <span>}</span><span>;</span>
<span>}</span>

<span>// ...existing code...</span></code></pre><p>This code configures the OpenID Connect middleware to point to Auth0 for authentication and the Cookie middleware for persisting the authentication session in cookies. Let&#39;s discuss different parts of this code more in detail so you can understand what it does.</p><pre><code>services<span>.</span><span>AddAuthentication</span><span>(</span>options <span>=&gt;</span>
    <span>{</span>
        options<span>.</span>DefaultAuthenticateScheme <span>=</span> CookieAuthenticationDefaults<span>.</span>AuthenticationScheme<span>;</span>
        options<span>.</span>DefaultSignInScheme <span>=</span> CookieAuthenticationDefaults<span>.</span>AuthenticationScheme<span>;</span>
        options<span>.</span>DefaultChallengeScheme <span>=</span> CookieAuthenticationDefaults<span>.</span>AuthenticationScheme<span>;</span>
    <span>}</span><span>)</span>
    <span>.</span><span>AddCookie</span><span>(</span>o <span>=&gt;</span>
    <span>{</span>
        o<span>.</span>Cookie<span>.</span>SecurePolicy <span>=</span> CookieSecurePolicy<span>.</span>Always<span>;</span>
        o<span>.</span>Cookie<span>.</span>SameSite <span>=</span> SameSiteMode<span>.</span>Strict<span>;</span>
        o<span>.</span>Cookie<span>.</span>HttpOnly <span>=</span> <span>true</span><span>;</span>
    <span>}</span><span>)</span></code></pre><p>It configures authentication to rely on the session cookie as the primary authentication mechanism if no other is specified in one of the web application&#39;s controllers. It also injects the cookie middleware with a few settings that restrict how the cookie can be used on the browsers. In our case, the cookie can only be used under HTTPS (<code>CookieSecurePolicy<span>.</span>Always</code>), it&#39;s not available on the client side (<code>HttpOnly <span>=</span> <span>true</span></code>), and uses a site policy equals to strict (<code>SameSiteMode<span>.</span>Strict</code>). This last one implies the cookie will only be sent if the domain for the cookie matches exactly the domain in the browser&#39;s URL. All these settings help to prevent potential attacks with scripting on the client side.</p><pre><code>options<span>.</span>ResponseType <span>=</span> OpenIdConnectResponseType<span>.</span>CodeIdToken<span>;</span>
options<span>.</span>ResponseMode <span>=</span> OpenIdConnectResponseMode<span>.</span>FormPost<span>;</span></code></pre><p>The OpenID Connect middleware is configured to use <code>ResponseType</code> equals to <code>CodeIdToken</code> (<a href="https://auth0.com/docs/flows/hybrid-flow" target="_blank" rel="noreferrer noopener">Hybrid flow</a>), which means our web application will receive an authorization code and ID token directly from the authorization endpoint right after the user is authenticated. We will use the authorization code in exchange for an access token for calling a backend API hosted on a different site. </p><pre><code><span>// Configure the scope</span>
options<span>.</span>Scope<span>.</span><span>Clear</span><span>(</span><span>)</span><span>;</span>
options<span>.</span>Scope<span>.</span><span>Add</span><span>(</span><span>&#34;openid&#34;</span><span>)</span><span>;</span>
options<span>.</span>Scope<span>.</span><span>Add</span><span>(</span><span>&#34;offline_access&#34;</span><span>)</span><span>;</span>
options<span>.</span>Scope<span>.</span><span>Add</span><span>(</span><span>&#34;read:weather&#34;</span><span>)</span><span>;</span></code></pre><p>The <code>openid</code> scope is required as part of the OpenID Connect authentication flow. The <code>offline_access</code> is for requesting a <a href="https://auth0.com/docs/tokens/refresh-tokens" target="_blank" rel="noreferrer noopener">refresh token</a> and <code>read<span>:</span>weather</code> is specific to the API we will call later as part of this sample.</p><pre><code>options<span>.</span>SaveTokens <span>=</span> <span>true</span><span>;</span></code></pre><p>The <code>SaveTokens</code> option tells the OpenID Connect middleware that all the tokens (id token, refresh token, and access token) received from the authorization endpoint during the initial handshake must be persisted for later use. By default, the middleware persists those tokens in the encrypted session cookie, and we will use that for our sample.</p><pre><code>OnRedirectToIdentityProvider <span>=</span> context <span>=&gt;</span> <span>{</span>
    context<span>.</span>ProtocolMessage<span>.</span><span>SetParameter</span><span>(</span><span>&#34;audience&#34;</span><span>,</span> Configuration<span>[</span><span>&#34;Auth0:ApiAudience&#34;</span><span>]</span><span>)</span><span>;</span>
    <span>return</span> Task<span>.</span>CompletedTask<span>;</span>
<span>}</span><span>,</span></code></pre><p>The OpenID Connect middleware does not have any property to configure the <code>audience</code> parameter that Auth0 requires for returning an authorization code for an API. We are attaching some code to the <code>OnRedirectToIdentityProvider</code> event for setting that parameter before the user is redirected to Auth0 for authentication.</p><pre><code>services<span>.</span><span>AddHttpClient</span><span>(</span><span>)</span><span>;</span></code></pre><p>The extension method <code>AddHttpClient</code> injects an <code>IHttpClientFactory</code> with default settings to create instances of the class <code>HttpClient</code>. We will use it to make calls to the external API.</p><p>The next step is to modify the <code>Configure</code> method to tell ASP.NET Core that we want to use the authentication and authorization middleware. Those middleware will integrate automatically with the authentication session cookies.</p><p>Insert the following code as it is shown below:</p><pre><code><span>// Startup.cs</span>

<span>// ...existing code...</span>

<span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>IApplicationBuilder</span> app<span>,</span> <span>IWebHostEnvironment</span> env<span>)</span>
<span>{</span>
    <span>// ...existing code...</span>
    app<span>.</span><span>UseRouting</span><span>(</span><span>)</span><span>;</span>

    <span>// Code goes here</span>
    app<span>.</span><span>UseAuthentication</span><span>(</span><span>)</span><span>;</span>
    app<span>.</span><span>UseAuthorization</span><span>(</span><span>)</span><span>;</span>

    app<span>.</span><span>UseEndpoints</span><span>(</span>endpoints <span>=&gt;</span>
    <span>{</span>
      endpoints<span>.</span><span>MapControllerRoute</span><span>(</span>
        <span>name</span><span>:</span> <span>&#34;default&#34;</span><span>,</span>
        <span>pattern</span><span>:</span> <span>&#34;{controller}/{action=Index}/{id?}&#34;</span><span>)</span><span>;</span>
     <span>}</span><span>)</span><span>;</span>
  
    <span>// ...existing code...</span>
<span>}</span></code></pre><p>Update the existing <code>appSettings<span>.</span>json</code> file and include the settings we got from the Auth0 Dashboard before. Those are <em>Domain</em>, <em>Client ID</em>, <em>Client Secret</em>, and <em>ApiAudience</em>.</p><pre><code><span>{</span>
  <span>&#34;Logging&#34;</span><span>:</span> <span>{</span>
      <span>&#34;LogLevel&#34;</span><span>:</span> <span>{</span>
      <span>&#34;Default&#34;</span><span>:</span> <span>&#34;Information&#34;</span><span>,</span>
      <span>&#34;Microsoft&#34;</span><span>:</span> <span>&#34;Warning&#34;</span><span>,</span>
      <span>&#34;Microsoft.Hosting.Lifetime&#34;</span><span>:</span> <span>&#34;Information&#34;</span>
      <span>}</span>
    <span>}</span><span>,</span>
  <span>&#34;AllowedHosts&#34;</span><span>:</span> <span>&#34;*&#34;</span><span>,</span>
  <span>&#34;Auth0&#34;</span><span>:</span> <span>{</span>
    <span>&#34;Domain&#34;</span><span>:</span> <span>&#34;&lt;domain&gt;&#34;</span><span>,</span>
    <span>&#34;ClientId&#34;</span><span>:</span> <span>&#34;&lt;client id&gt;&#34;</span><span>,</span>
    <span>&#34;ClientSecret&#34;</span><span>:</span> <span>&#34;&lt;client secret&gt;&#34;</span><span>,</span>
    <span>&#34;ApiAudience&#34;</span><span>:</span> <span>&#34;https://weatherforecast&#34;</span>
  <span>}</span>
<span>}</span></code></pre><h3 id="Add-the-ASP-NET-Core-Controllers-for-handling-authentication">Add the ASP.NET Core Controllers for handling authentication</h3><p>Create a new ASP.NET controller in the <code>Controllers</code> folder and call it <code>AuthController</code>. This controller has three actions.</p><ul><li><code>Login</code> for initiating the OpenID Connect login handshake with Auth0.</li><li><code>Logout</code> for logging out from the web application and also from Auth0.</li><li><code>GetUser</code> for getting data about the authenticated user in the current session. This is an API that the React application will invoke to get the authentication context for the user.</li></ul><p>This is the code for the <code>Login</code> action:</p><pre><code><span>// BFF/Controllers/AuthController.cs</span>

<span>// ...existing code...</span>

<span>public</span> <span>ActionResult</span> <span>Login</span><span>(</span><span><span>string</span></span> returnUrl <span>=</span> <span>&#34;/&#34;</span><span>)</span>
<span>{</span>
  <span>return</span> <span>new</span> <span>ChallengeResult</span><span>(</span><span>&#34;Auth0&#34;</span><span>,</span> <span>new</span> <span>AuthenticationProperties</span><span>(</span><span>)</span> <span>{</span> RedirectUri <span>=</span> returnUrl <span>}</span><span>)</span><span>;</span>
<span>}</span>

<span>// ...existing code...</span></code></pre><p>It is an action that returns a <code>ChallengeResult</code> with the authentication schema to be used. In this case, it is Auth0, which is the schema we associated with our OpenID Connect middleware in the <code>Startup</code> class. This result is a built-in class shipped with ASP.NET Core to initiate an authentication handshake from the authentication middleware.</p><p>The logout action looks as follows:</p><pre><code><span>// BFF/Controllers/AuthController.cs</span>

<span>// ...existing code...</span>

<span>[</span><span><span>Authorize</span></span><span>]</span>
<span>public</span> <span>ActionResult</span> <span>Logout</span><span>(</span><span>)</span>
<span>{</span>
  <span>return</span> <span>new</span> <span>SignOutResult</span><span>(</span><span>&#34;Auth0&#34;</span><span>,</span> <span>new</span> <span>AuthenticationProperties</span>
  <span>{</span>
    RedirectUri <span>=</span> Url<span>.</span><span>Action</span><span>(</span><span>&#34;Index&#34;</span><span>,</span> <span>&#34;Home&#34;</span><span>)</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span>

<span>// ...existing code...</span></code></pre><p>It returns a <code>SignOutResult</code> that will log the user out of the application and also initiate the sign-out process with Auth0. As it happened with the <code>ChallengeResult</code>, this <code>SignOutResult</code> is also a built-in result that the authentication middleware will process. We also decorated the action with the <code><span>[</span>Authorize<span>]</span></code> attribute as it should only be invoked if the user is authenticated.</p><p>Finally, the <code>GetUser</code> API code is the following:</p><pre><code><span>// BFF/Controllers/AuthController.cs</span>

<span>// ...existing code...</span>

<span>public</span> <span>ActionResult</span> <span>GetUser</span><span>(</span><span>)</span>
<span>{</span>
  <span>if</span> <span>(</span>User<span>.</span>Identity<span>.</span>IsAuthenticated<span>)</span>
  <span>{</span>
    <span><span>var</span></span> claims <span>=</span> <span>(</span><span>(</span>ClaimsIdentity<span>)</span><span>this</span><span>.</span>User<span>.</span>Identity<span>)</span><span>.</span>Claims<span>.</span><span>Select</span><span>(</span>c <span>=&gt;</span>
                    <span>new</span> <span>{</span> type <span>=</span> c<span>.</span>Type<span>,</span> <span>value</span> <span>=</span> c<span>.</span>Value <span>}</span><span>)</span>
                    <span>.</span><span>ToArray</span><span>(</span><span>)</span><span>;</span>

    <span>return</span> <span>Json</span><span>(</span><span>new</span> <span>{</span> isAuthenticated <span>=</span> <span>true</span><span>,</span> claims <span>=</span> claims <span>}</span><span>)</span><span>;</span>
 <span>}</span>

 <span>return</span> <span>Json</span><span>(</span><span>new</span> <span>{</span> isAuthenticated <span>=</span> <span>false</span> <span>}</span><span>)</span><span>;</span>
<span>}</span>

<span>// ...existing code...</span></code></pre><p>If the user is authenticated, it returns the user identity as a set of claims serialized as JSON. Otherwise, it just returns a flag indicating the user is not authenticated.</p><h3 id="Require-authentication-in-other-controllers">Require authentication in other controllers</h3><p>The <code>WeatherForecast</code> controller included in the template allows anonymous calls. To make it more interesting in our sample, we will convert it to require authenticated calls. Fortunately, that is as simple as adding a top-level <code>Authorize</code> attribute in the class definition.</p><pre><code><span>// BFF/Controllers/WeatherForecastController.cs</span>

<span>// ...existing code...</span>

<span>[</span><span><span>ApiController</span></span><span>]</span>
<span>[</span><span><span>Authorize</span></span><span>]</span>
<span>[</span><span><span>Route</span><span><span>(</span><span>&#34;[controller]&#34;</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>class</span> <span>WeatherForecastController</span> <span>:</span> <span><span>ControllerBase</span></span>
<span>{</span>

<span>// ...existing code...</span></code></pre><h3 id="Negotiate-an-Access-Token-and-call-a-remote-API">Negotiate an Access Token and call a remote API</h3><p>We will convert the <code>WeatherForecast</code> controller in our web application to act as a reverse proxy and call the equivalent API hosted remotely on a different site. This API will require an access token, so the controller will have to negotiate first the authorization code that is persisted in the session cookie.</p><pre><code> <span>public</span> <span>WeatherForecastController</span><span>(</span>
            <span>IHttpClientFactory</span> httpClientFactory<span>,</span>
            <span>IConfiguration</span> configuration<span>)</span>
<span>{</span>
    _httpClientFactory <span>=</span> httpClientFactory<span>;</span>

    <span>if</span> <span>(</span>configuration<span>[</span><span>&#34;WeatherApiEndpoint&#34;</span><span>]</span> <span>==</span> <span>null</span><span>)</span>
        <span>throw</span> <span>new</span> <span>ArgumentNullException</span><span>(</span><span>&#34;The Weather Api Endpoint is missing from the configuration&#34;</span><span>)</span><span>;</span>

    _apiEndpoint <span>=</span> <span>new</span> <span>Uri</span><span>(</span>configuration<span>[</span><span>&#34;WeatherApiEndpoint&#34;</span><span>]</span><span>,</span> UriKind<span>.</span>Absolute<span>)</span><span>;</span>
<span>}</span></code></pre><p>The constructor on this controller receives an instance of an <code>IHttpClientFactory</code> that we previously registered in the <code>Startup<span>.</span>cs</code> file for creating <code>HttpClient</code> instances and an instance of <code>IConfiguration</code> to retrieve settings from the configuration file. The endpoint for the Weather API is retrieved from the configuration using the <code>WeatherApiEndpoint</code> key. That key in the <code>appSettings<span>.</span>json</code> only references the URL for the remote API as it is shown below:</p><pre><code><span>// appSettings.json</span>
<span>{</span>
  <span>// ... other settings ...</span>
  <span>&#34;WeatherApiEndpoint&#34;</span><span>:</span> <span>&#34;https://localhost:44385/&#34;</span>
<span>}</span></code></pre><p>The following code shows the implementation of the <code>Get</code> method. This is the actual remote API invoked by passing the expected authorization headers:</p><pre><code><span>// BFF/Controllers/WeatherForecastController.cs</span>

<span>// ...existing code...</span>

<span>[</span><span><span>HttpGet</span></span><span>]</span>
<span>public</span> <span>async</span> <span>Task</span> <span>Get</span><span>(</span><span>)</span>
<span>{</span>
    <span><span>var</span></span> accessToken <span>=</span> <span>await</span> HttpContext<span>.</span><span>GetTokenAsync</span><span>(</span><span>&#34;Auth0&#34;</span><span>,</span> <span>&#34;access_token&#34;</span><span>)</span><span>;</span>

    <span><span>var</span></span> httpClient <span>=</span> _httpClientFactory<span>.</span><span>CreateClient</span><span>(</span><span>)</span><span>;</span>

    <span><span>var</span></span> request <span>=</span> <span>new</span> <span>HttpRequestMessage</span><span>(</span>HttpMethod<span>.</span>Get<span>,</span> <span>new</span> <span>Uri</span><span>(</span>_apiEndpoint<span>,</span> <span>&#34;WeatherForecast&#34;</span><span>)</span><span>)</span><span>;</span>
    request<span>.</span>Headers<span>.</span>Authorization <span>=</span> <span>new</span> <span>AuthenticationHeaderValue</span><span>(</span><span>&#34;Bearer&#34;</span><span>,</span> accessToken<span>)</span><span>;</span>

    <span><span>var</span></span> response <span>=</span> <span>await</span> httpClient<span>.</span><span>SendAsync</span><span>(</span>request<span>)</span><span>;</span>

    response<span>.</span><span>EnsureSuccessStatusCode</span><span>(</span><span>)</span><span>;</span>

    <span>await</span> response<span>.</span>Content<span>.</span><span>CopyToAsync</span><span>(</span>HttpContext<span>.</span>Response<span>.</span>Body<span>)</span><span>;</span>
<span>}</span>

<span>// ...existing code...</span></code></pre><p>The trick for getting the access token is in the following line,</p><pre><code><span><span>var</span></span> accessToken <span>=</span> <span>await</span> HttpContext<span>.</span><span>GetTokenAsync</span><span>(</span><span>&#34;Auth0&#34;</span><span>,</span> <span>&#34;access_token&#34;</span><span>)</span><span>;</span></code></pre><p><code>GetTokenAsync</code> is an extension method available as part of the authentication middleware in ASP.NET Core. The first argument specifies the authentication schema to be used to get the token, which is our OpenID Connect middleware configured with the name &#34;Auth0&#34;. The second argument is the token to be used. In the case of OpenID Connect, the possible values are &#34;access_token&#34; or &#34;id_token&#34;. If the access token is not available or already expired, the middleware will use the refresh token and authorization code to get one. Since our middleware was pointing to the <code>WeatherForecast</code> API with the audience attribute and the scope we previously configured, Auth0 will return an access token for that API.</p><pre><code><span><span>var</span></span> httpClient <span>=</span> _httpClientFactory<span>.</span><span>CreateClient</span><span>(</span><span>)</span><span>;</span>

<span><span>var</span></span> request <span>=</span> <span>new</span> <span>HttpRequestMessage</span><span>(</span>HttpMethod<span>.</span>Get<span>,</span> <span>new</span> <span>Uri</span><span>(</span>_apiEndpoint<span>,</span> <span>&#34;WeatherForecast&#34;</span><span>)</span><span>)</span><span>;</span>
request<span>.</span>Headers<span>.</span>Authorization <span>=</span> <span>new</span> <span>AuthenticationHeaderValue</span><span>(</span><span>&#34;Bearer&#34;</span><span>,</span> accessToken<span>)</span><span>;</span>

<span><span>var</span></span> response <span>=</span> <span>await</span> httpClient<span>.</span><span>SendAsync</span><span>(</span>request<span>)</span><span>;</span>

response<span>.</span><span>EnsureSuccessStatusCode</span><span>(</span><span>)</span><span>;</span>

<span>await</span> response<span>.</span>Content<span>.</span><span>CopyToAsync</span><span>(</span>HttpContext<span>.</span>Response<span>.</span>Body<span>)</span><span>;</span></code></pre><p>The code above forwards the request to the remote API using a new instance of <code>HttpClient</code> created with the <code>IHttpClientFactory</code> injected in the constructor. The access token is passed as a <em>Bearer</em> token in the authorization header.</p><h2 id="Configuring-the-Remote-API">Configuring the Remote API</h2><p>As the remote API, we will use the one provided with Visual Studio&#39;s ASP.NET Web API template that returns the weather forecast data.</p><h3 id="Create-the-ASP-NET-Core-API-in-Visual-Studio">Create the ASP.NET Core API in Visual Studio</h3><p>Visual Studio ships with a single template for .NET Core APIs. That is <em>ASP.NET Core Web API</em>, as it is shown in the image below.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2BaHhqSQTjwbHWK9jjcP9X/31a204c719db633e53220a2563d68208/aspnet-visual-studio-template.png" alt="ASP.NET template in Visual Studio"/></p><h3 id="The-structure-of-the-project">The structure of the project</h3><p>Projects created with that template from Visual Studio will have the following structure:</p><ul><li><code>Controllers</code>, this folder contains the controllers for the API implementation.</li><li><code>Startup<span>.</span>cs</code>, this is the main class where the ASP.NET Core middleware classes and the dependency injection container are configured.</li></ul><h3 id="Configuring-the-project">Configuring the project</h3><p>Our application will only use the middleware for supporting authentication with JWT as bearer tokens.</p><p>Open the Package Manager Console for NuGet in Visual Studio and run the following command:</p><pre><code>Install-Package Microsoft.AspNetCore.Authentication.JwtBearer</code></pre><p>Once the NuGet packages are installed in our project, we can go ahead and configure them in the <code>Startup<span>.</span>cs</code> class file.</p><p>Modify the <code>ConfigureServices</code> method in that class to include the following code:</p><pre><code><span>// Api/Startup.cs</span>

<span>// ...existing code...</span>

<span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>
<span>{</span>
    <span><span>var</span></span> authentication <span>=</span> services
        <span>.</span><span>AddAuthentication</span><span>(</span>JwtBearerDefaults<span>.</span>AuthenticationScheme<span>)</span>
        <span>.</span><span>AddJwtBearer</span><span>(</span><span>&#34;Bearer&#34;</span><span>,</span> c <span>=&gt;</span>
        <span>{</span>
        c<span>.</span>Authority <span>=</span> <span><span>$&#34;https://</span><span><span>{</span><span>Configuration<span>[</span><span>&#34;Auth0:Domain&#34;</span><span>]</span></span><span>}</span></span><span>&#34;</span></span><span>;</span>
        c<span>.</span>TokenValidationParameters <span>=</span> <span>new</span> <span>TokenValidationParameters</span>
        <span>{</span>
            ValidateAudience <span>=</span> <span>true</span><span>,</span>
            ValidAudiences <span>=</span> Configuration<span>[</span><span>&#34;Auth0:Audience&#34;</span><span>]</span><span>.</span><span>Split</span><span>(</span><span>&#34;;&#34;</span><span>)</span><span>,</span>
            ValidateIssuer <span>=</span> <span>true</span><span>,</span>
            ValidIssuer <span>=</span> <span><span>$&#34;https://</span><span><span>{</span><span>Configuration<span>[</span><span>&#34;Auth0:Domain&#34;</span><span>]</span></span><span>}</span></span><span>&#34;</span></span><span>;</span>
        <span>}</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>

    services<span>.</span><span>AddControllers</span><span>(</span><span>)</span><span>;</span>
            
    services<span>.</span><span>AddSwaggerGen</span><span>(</span>c <span>=&gt;</span>
    <span>{</span>
        c<span>.</span><span>SwaggerDoc</span><span>(</span><span>&#34;v1&#34;</span><span>,</span> <span>new</span> <span>OpenApiInfo</span> <span>{</span> Title <span>=</span> <span>&#34;Api&#34;</span><span>,</span> Version <span>=</span> <span>&#34;v1&#34;</span> <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>

    services<span>.</span><span>AddAuthorization</span><span>(</span>o <span>=&gt;</span>
    <span>{</span>
        o<span>.</span><span>AddPolicy</span><span>(</span><span>&#34;read:weather&#34;</span><span>,</span> p <span>=&gt;</span> p<span>.</span>
            <span>RequireAuthenticatedUser</span><span>(</span><span>)</span><span>.</span>
            <span>RequireScope</span><span>(</span><span>&#34;read:weather&#34;</span><span>)</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span>

<span>// ...existing code...</span></code></pre><p>This code performs two things. It configures the JWT middleware to accept access tokens issued by Auth0 and defines an authorization policy for checking the scope set on the token. 
The policy checks for a claim or attribute called <em>scope</em> with a value <code>read<span>:</span>weather</code>, which is the scope we previously configured for our API in the Auth0 dashboard. 
<code>RequireScope</code> is a custom extension we will write as part of this sample to check for the scope present in the JWT access token.</p><p>The next step is to modify the <code>Configure</code> method to tell ASP.NET Core that we want to use the authentication and authorization middleware. That middleware will integrate automatically with the authentication session cookies.</p><p>Insert the new code as shown below in the <code>Startup<span>.</span>cs</code> file:</p><pre><code><span>// Api/Startup.cs</span>

<span>// ...existing code...</span>

<span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>IApplicationBuilder</span> app<span>,</span> <span>IWebHostEnvironment</span> env<span>)</span>
<span>{</span>
  <span>// ...existing code...</span>
  
  app<span>.</span><span>UseRouting</span><span>(</span><span>)</span><span>;</span>
            
  app<span>.</span><span>UseAuthentication</span><span>(</span><span>)</span><span>;</span>
  app<span>.</span><span>UseAuthorization</span><span>(</span><span>)</span><span>;</span>

  app<span>.</span><span>UseEndpoints</span><span>(</span>endpoints <span>=&gt;</span>
  <span>{</span>
    endpoints<span>.</span><span>MapControllers</span><span>(</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span>

<span>// ...existing code...</span></code></pre><p>Update the existing <code>appSettings<span>.</span>json</code> file and include the settings we got from the Auth0 dashboard before. Those are <em>Domain</em> and API&#39;s <em>Audience</em>.</p><pre><code><span>{</span>
  <span>&#34;Logging&#34;</span><span>:</span> <span>{</span>
      <span>&#34;LogLevel&#34;</span><span>:</span> <span>{</span>
      <span>&#34;Default&#34;</span><span>:</span> <span>&#34;Information&#34;</span><span>,</span>
      <span>&#34;Microsoft&#34;</span><span>:</span> <span>&#34;Warning&#34;</span><span>,</span>
      <span>&#34;Microsoft.Hosting.Lifetime&#34;</span><span>:</span> <span>&#34;Information&#34;</span>
      <span>}</span>
    <span>}</span><span>,</span>
  <span>&#34;AllowedHosts&#34;</span><span>:</span> <span>&#34;*&#34;</span><span>,</span>
  <span>&#34;Auth0&#34;</span><span>:</span> <span>{</span>
    <span>&#34;Domain&#34;</span><span>:</span> <span>&#34;&lt;domain&gt;&#34;</span><span>,</span>
    <span>&#34;Audience&#34;</span><span>:</span> <span>&#34;https://weatherforecast&#34;</span>
  <span>}</span>
<span>}</span></code></pre><h3 id="RequireScope-policy">RequireScope policy</h3><p>ASP.NET Core does not include any policy out of the box for checking an individual scope in a JWT access token. To overcome this shortcoming, we will create a custom policy. For this purpose, create a new <code>Authorization</code> folder. Then add three new files on it, <code>ScopeHandler<span>.</span>cs</code>, <code>ScopeRequirement<span>.</span>cs</code>, and  <code>AuthorizationPolicyBuilderExtensions<span>.</span>cs</code>. We will discuss the purpose of each one next. </p><p>Add a new file <code>ScopeHandler<span>.</span>cs</code> to the <code>Authorization</code> folder with the following content:</p><pre><code><span>// Api/Authorization/ScopeHandler.cs</span>

<span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Authorization</span><span>;</span>
<span>using</span> <span>System</span><span>;</span>
<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>
<span>using</span> <span>System<span>.</span>Linq</span><span>;</span>
<span>using</span> <span>System<span>.</span>Threading<span>.</span>Tasks</span><span>;</span>

<span>namespace</span> <span>Api<span>.</span>Authorization</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>ScopeHandler</span> <span>:</span>
             <span><span>AuthorizationHandler<span>&lt;</span>ScopeRequirement<span>&gt;</span></span></span>
    <span>{</span>
        <span>protected</span> <span>override</span> <span>Task</span> <span>HandleRequirementAsync</span><span>(</span>
          <span>AuthorizationHandlerContext</span> context<span>,</span>
          <span>ScopeRequirement</span> requirement<span>)</span>
        <span>{</span>
            <span>if</span> <span>(</span>context <span>is</span> <span>null</span><span>)</span>
            <span>{</span>
                <span>throw</span> <span>new</span> <span>ArgumentNullException</span><span>(</span><span>nameof</span><span>(</span>context<span>)</span><span>)</span><span>;</span>
            <span>}</span>

            <span><span>var</span></span> success <span>=</span> context<span>.</span>User<span>.</span>Claims<span>.</span><span>Any</span><span>(</span>c <span>=&gt;</span> c<span>.</span>Type <span>==</span> <span>&#34;scope&#34;</span> <span>&amp;&amp;</span> 
                c<span>.</span>Value<span>.</span><span>Contains</span><span>(</span>requirement<span>.</span>Scope<span>)</span><span>)</span><span>;</span>

            <span>if</span> <span>(</span>success<span>)</span>
                context<span>.</span><span>Succeed</span><span>(</span>requirement<span>)</span><span>;</span>
            
            <span>return</span> Task<span>.</span>CompletedTask<span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span></code></pre><p>The authentication middleware parses the JWT access token and converts each attribute in the token as a claim attached to the current user in context. Our policy handler uses the claim associated with the scope for checking that the expected scope is there (<code>read<span>:</span>weather</code>).</p><p>Every implementation of <code>AuthorizationHandler</code> must be associated with an implementation of <code>IAuthorizationRequirement</code> that describes the authorization requirements for the handler. In our case, the implementation looks as it is described in the following.</p><p>Add the following content in the <code>ScopeRequirement<span>.</span>cs</code> file,</p><pre><code><span>// Api/Authorization/ScopeRequirement.cs</span>

<span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Authorization</span><span>;</span>
<span>using</span> <span>System</span><span>;</span>
<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>
<span>using</span> <span>System<span>.</span>Linq</span><span>;</span>
<span>using</span> <span>System<span>.</span>Threading<span>.</span>Tasks</span><span>;</span>

<span>namespace</span> <span>Api<span>.</span>Authorization</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>ScopeRequirement</span> <span>:</span> <span><span>IAuthorizationRequirement</span></span>
    <span>{</span>
        <span>public</span> <span><span>string</span></span> Scope <span>{</span> <span>get</span><span>;</span> <span>private</span> <span>set</span><span>;</span> <span>}</span>

        <span>public</span> <span>ScopeRequirement</span><span>(</span><span><span>string</span></span> scope<span>)</span>
        <span>{</span>
            Scope <span>=</span> scope<span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span></code></pre><p>It&#39;s a very simple implementation that describes a requirement in terms of a scope. That&#39;s the expected scope in the JWT Access Token.</p><p>Finally, the class <code>AuthorizationPolicyBuilderExtensions<span>.</span>cs</code> includes the <code>RequireScope</code> extension method for injecting the <code>ScopeHandler</code> instance in the <code>Startup<span>.</span>cs</code> class when the policy is configured.</p><pre><code><span>// Api/Authorization/AuthorizationPolicyBuilderExtensions.cs</span>

<span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Authorization</span><span>;</span>
<span>using</span> <span>System</span><span>;</span>
<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>
<span>using</span> <span>System<span>.</span>Linq</span><span>;</span>
<span>using</span> <span>System<span>.</span>Threading<span>.</span>Tasks</span><span>;</span>

<span>namespace</span> <span>Api<span>.</span>Authorization</span>
<span>{</span>
    <span>public</span> <span>static</span> <span>class</span> <span>AuthorizationPolicyBuilderExtensions</span>
    <span>{</span>
        <span>public</span> <span>static</span> <span>AuthorizationPolicyBuilder</span> <span>RequireScope</span><span>(</span><span>this</span> <span>AuthorizationPolicyBuilder</span> builder<span>,</span> <span><span>string</span></span> scope<span>)</span>
        <span>{</span>
            <span>return</span> builder<span>.</span><span>AddRequirements</span><span>(</span><span>new</span> <span>ScopeRequirement</span><span>(</span>scope<span>)</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span></code></pre><h3 id="Require-authentication-in-the-API-controller">Require authentication in the API controller</h3><p>The <code>WeatherForecast</code> controller included in the template allows anonymous calls. We will convert it to require authenticated calls using the <code>Authorize</code> attribute. That attribute will also reference the policy we previously defined in the <code>Startup<span>.</span>cs</code> file.</p><pre><code><span>// Api/Controllers/WeatherForecastController.cs</span>

<span>// ...existing code...</span>

<span>[</span><span><span>ApiController</span></span><span>]</span>
<span>[</span><span><span>Route</span><span><span>(</span><span>&#34;[controller]&#34;</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>class</span> <span>WeatherForecastController</span> <span>:</span> <span><span>ControllerBase</span></span>
<span>{</span>
  <span>[</span><span><span>HttpGet</span></span><span>]</span>
  <span>[</span><span><span>Authorize</span><span><span>(</span><span>&#34;read:weather&#34;</span><span>)</span></span></span><span>]</span>
  <span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>&gt;</span></span> <span>Get</span><span>(</span><span>)</span>
  <span>{</span>
    
<span>// ...existing code...</span></code></pre><p>This attribute will do two things,</p><ul><li>It will activate the authorization middleware that will check if the call was authenticated and there is one user identity set in the current execution context.</li><li>It will run the <code>read<span>:</span>weather</code> policy to make sure the user identity contains the required permissions. In our case, it will check the access token includes a scope called <code>read<span>:</span>weather</code>.</li></ul><p>Once we run this project in Visual Studio, the API will only accept authenticated calls with access tokens coming from Auth0.</p><h2 id="Securing-the-React-Application">Securing the React Application</h2><p>So far, we have added all the plumbing code on the backend to enable authentication with Auth0 using OpenID Connect. The backend handles user authentication and configures a cookie that we can share with the React app. We also added a <code>GetUser</code> API that can be used to determine whether the user is authenticated and get basic identity information about them. Let&#39;s now see the needed changes for the React client application.</p><h3 id="React-Context-for-Authentication">React Context for Authentication</h3><p>As authentication is a core concern that we will use across all the components in the React application, it makes sense to make it available as a global context using <a href="https://reactjs.org/docs/context.html" target="_blank" rel="noreferrer noopener">the context pattern</a>. 
Move into <code><span>BFF</span><span>/</span>ClientApp<span>/</span>src</code> folder and create a <code>context</code> folder. Then add a file <code>AuthContext<span>.</span>js</code> to the newly created folder. Paste the following code on the file:</p><pre><code><span>// BFF/ClientApp/src/context/AuthContext.js</span>

<span>import</span> React<span>,</span> <span>{</span> useState<span>,</span> useEffect<span>,</span> useContext <span>}</span> <span>from</span> <span>&#34;react&#34;</span><span>;</span>

<span>export</span> <span>const</span> AuthContext <span>=</span> React<span>.</span><span>createContext</span><span>(</span><span>)</span><span>;</span>
<span>export</span> <span>const</span> <span>useAuth</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>useContext</span><span>(</span>AuthContext<span>)</span><span>;</span>
<span>export</span> <span>const</span> <span>AuthProvider</span> <span>=</span> <span>(</span><span><span>{</span>
    children
<span>}</span></span><span>)</span> <span>=&gt;</span> <span>{</span>
    <span>const</span> <span>[</span>isAuthenticated<span>,</span> setIsAuthenticated<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> <span>[</span>user<span>,</span> setUser<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> <span>[</span>isLoading<span>,</span> setIsLoading<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>false</span><span>)</span><span>;</span>

    <span>const</span> <span>getUser</span> <span>=</span> <span>async</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
        <span>const</span> response <span>=</span> <span>await</span> <span>fetch</span><span>(</span><span>&#39;/auth/getUser&#39;</span><span>)</span><span>;</span>
        <span>const</span> json <span>=</span> <span>await</span> response<span>.</span><span>json</span><span>(</span><span>)</span><span>;</span>

        <span>setIsAuthenticated</span><span>(</span>json<span>.</span>isAuthenticated<span>)</span><span>;</span>
        <span>setIsLoading</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>json<span>.</span>isAuthenticated<span>)</span> <span>setUser</span><span>(</span>json<span>.</span>claims<span>)</span><span>;</span>
    <span>}</span>

    <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
        <span>getUser</span><span>(</span><span>)</span><span>;</span>
    <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>

    <span>const</span> <span>login</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
        window<span>.</span>location<span>.</span>href <span>=</span> <span>&#39;/auth/login&#39;</span><span>;</span>
    <span>}</span>

    <span>const</span> <span>logout</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
        window<span>.</span>location<span>.</span>href <span>=</span> <span>&#39;/auth/logout&#39;</span><span>;</span>
    <span>}</span>

    <span>return</span> <span>(</span>
        <span>&lt;</span>AuthContext<span>.</span>Provider
            value<span>=</span><span>{</span><span>{</span>
                isAuthenticated<span>,</span>
                user<span>,</span>
                isLoading<span>,</span>
                login<span>,</span>
                logout
            <span>}</span><span>}</span>
        <span>&gt;</span>
            <span>{</span>children<span>}</span>
        <span>&lt;</span><span>/</span>AuthContext<span>.</span>Provider<span>&gt;</span>
    <span>)</span><span>;</span>
<span>}</span><span>;</span></code></pre><p>This context object provides methods for starting the login and logout handshake with the backend and getting the authenticated user.</p><p>Modify the <code>index<span>.</span>js</code> file to reference this context provider.</p><pre><code><span>// BFF/ClientApp/src/index.js</span>

<span>// ...existing code...</span>

ReactDOM<span>.</span><span>render</span><span>(</span>
    <span>&lt;</span>AuthProvider<span>&gt;</span>
        <span>&lt;</span>BrowserRouter basename<span>=</span><span>{</span>baseUrl<span>}</span><span>&gt;</span>
            <span>&lt;</span>App <span>/</span><span>&gt;</span>
        <span>&lt;</span><span>/</span>BrowserRouter<span>&gt;</span>
    <span>&lt;</span><span>/</span>AuthProvider<span>&gt;</span><span>,</span>
    rootElement<span>)</span><span>;</span>

<span>// ...existing code...</span></code></pre><h3 id="Add-the-login-and-logout-routes">Add the login and logout routes</h3><p>The React Router configuration uses the authentication context to redirect the user to login and logout URLs on the backend. It also forces the user authentication for routes that are protected, such as the one for fetching the weather data. </p><p>To add these protected routes, modify the <code>App<span>.</span>js</code> file to include this code:</p><pre><code><span>// BFF/ClientApp/src/App.js</span>

<span>import</span> <span>{</span> Redirect<span>,</span> Route <span>}</span> <span>from</span> <span>&#39;react-router&#39;</span><span>;</span>
<span>import</span> <span>{</span> Layout <span>}</span> <span>from</span> <span>&#39;./components/Layout&#39;</span><span>;</span>
<span>import</span> <span>{</span> Home <span>}</span> <span>from</span> <span>&#39;./components/Home&#39;</span><span>;</span>
<span>import</span> <span>{</span> FetchData <span>}</span> <span>from</span> <span>&#39;./components/FetchData&#39;</span><span>;</span>
<span>import</span> <span>{</span> useAuth <span>}</span> <span>from</span> <span>&#39;./context/AuthContext&#39;</span><span>;</span>

<span>import</span> <span>&#39;./custom.css&#39;</span>

<span>const</span> <span>App</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>

    <span>const</span> <span>{</span> isAuthenticated<span>,</span> login<span>,</span> logout <span>}</span> <span>=</span> <span>useAuth</span><span>(</span><span>)</span><span>;</span>

    <span>return</span> <span>(</span>
        <span>&lt;</span>Layout<span>&gt;</span>
            <span>&lt;</span>Route exact path<span>=</span><span>&#39;/&#39;</span> component<span>=</span><span>{</span>Home<span>}</span> <span>/</span><span>&gt;</span>
            <span>&lt;</span>Route path<span>=</span><span>&#39;/fetch-data&#39;</span> component<span>=</span><span>{</span>isAuthenticated <span>?</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>return</span> <span>&lt;</span>FetchData <span>/</span><span>&gt;</span> <span>}</span> <span>:</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>login</span><span>(</span><span>)</span><span>;</span> <span>return</span> <span>null</span><span>;</span> <span>}</span><span>}</span><span>/</span><span>&gt;</span>
            <span>&lt;</span>Route path<span>=</span><span>&#39;/login&#39;</span> component<span>=</span><span>{</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>login</span><span>(</span><span>)</span><span>;</span> <span>return</span> <span>null</span> <span>}</span><span>}</span> <span>/</span><span>&gt;</span>
            <span>&lt;</span>Route path<span>=</span><span>&#39;/logout&#39;</span> component<span>=</span><span>{</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>logout</span><span>(</span><span>)</span><span>;</span> <span>return</span> <span>null</span> <span>}</span><span>}</span><span>&gt;</span><span>&lt;</span><span>/</span>Route<span>&gt;</span>
        <span>&lt;</span><span>/</span>Layout<span>&gt;</span>
    <span>)</span><span>;</span>
<span>}</span>

<span>export</span> <span>default</span> App<span>;</span></code></pre><p>The <code>fetch<span>-</span>data</code> route, for example, checks if the user is authenticated before returning the <code>FetchData</code> component. If the user is not authenticated, it calls the <code>login</code> function in the authentication context, which ultimately redirects the user to the <code>Login</code> endpoint in the backend.</p><p>Another very common feature in web applications is to make menu options visible or not, depending on the user authentication status.
As we did in the React Router, the same thing can be accomplished for the menu options using the <code>isAuthenticated</code> function from the authentication context.</p><p>So, move to the <code>ClientApp<span>/</span>src<span>/</span>components</code> folder. Then modify the <code>NavMenu<span>.</span>js</code> file to check the authentication status as it is shown below.</p><pre><code><span>// BFF/ClientApp/src/components/NavMenu.js</span>

<span>// ...existing code...</span>

<span>return</span> <span>(</span>
        <span>&lt;</span>header<span>&gt;</span>
            <span>&lt;</span>Navbar className<span>=</span><span>&#34;navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3&#34;</span> light<span>&gt;</span>
                <span>&lt;</span>Container<span>&gt;</span>
                    <span>&lt;</span>NavbarBrand tag<span>=</span><span>{</span>Link<span>}</span> to<span>=</span><span>&#34;/&#34;</span><span>&gt;</span>Auth0 Backend For FrontEnd Authentication<span>&lt;</span><span>/</span>NavbarBrand<span>&gt;</span>
                    <span>&lt;</span>NavbarToggler onClick<span>=</span><span>{</span>toggleNavbar<span>}</span> className<span>=</span><span>&#34;mr-2&#34;</span> <span>/</span><span>&gt;</span>
                    <span>&lt;</span>Collapse className<span>=</span><span>&#34;d-sm-inline-flex flex-sm-row-reverse&#34;</span> isOpen<span>=</span><span>{</span><span>!</span>collapsed<span>}</span> navbar<span>&gt;</span>
                        <span>&lt;</span>ul className<span>=</span><span>&#34;navbar-nav flex-grow&#34;</span><span>&gt;</span>
                            <span>&lt;</span>NavItem<span>&gt;</span>
                                <span>&lt;</span>NavLink tag<span>=</span><span>{</span>Link<span>}</span> className<span>=</span><span>&#34;text-dark&#34;</span> to<span>=</span><span>&#34;/&#34;</span><span>&gt;</span>Home<span>&lt;</span><span>/</span>NavLink<span>&gt;</span>
                            <span>&lt;</span><span>/</span>NavItem<span>&gt;</span>
                            <span>&lt;</span>NavItem<span>&gt;</span>
                                <span>&lt;</span>NavLink tag<span>=</span><span>{</span>Link<span>}</span> className<span>=</span><span>&#34;text-dark&#34;</span> to<span>=</span><span>&#34;/fetch-data&#34;</span><span>&gt;</span>Fetch data<span>&lt;</span><span>/</span>NavLink<span>&gt;</span>
                            <span>&lt;</span><span>/</span>NavItem<span>&gt;</span>
                            <span>&lt;</span>NavItem<span>&gt;</span>
                            <span>{</span><span>!</span>isAuthenticated <span>&amp;&amp;</span> <span>&lt;</span>NavItem<span>&gt;</span>
                                <span>&lt;</span>NavLink tag<span>=</span><span>{</span>Link<span>}</span> className<span>=</span><span>&#34;text-dark&#34;</span> to<span>=</span><span>&#34;/login&#34;</span><span>&gt;</span>Login<span>&lt;</span><span>/</span>NavLink<span>&gt;</span>
                            <span>&lt;</span><span>/</span>NavItem<span>&gt;</span><span>}</span>
                            <span>{</span>isAuthenticated <span>&amp;&amp;</span> <span>&lt;</span>NavItem<span>&gt;</span>
                                <span>&lt;</span>NavLink tag<span>=</span><span>{</span>Link<span>}</span> className<span>=</span><span>&#34;text-dark&#34;</span> to<span>=</span><span>&#34;/logout&#34;</span><span>&gt;</span>Logout<span>&lt;</span><span>/</span>NavLink<span>&gt;</span>
                            <span>&lt;</span><span>/</span>NavItem<span>&gt;</span><span>}</span>
                        <span>&lt;</span><span>/</span>ul<span>&gt;</span>
                    <span>&lt;</span><span>/</span>Collapse<span>&gt;</span>
                <span>&lt;</span><span>/</span>Container<span>&gt;</span>
            <span>&lt;</span><span>/</span>Navbar<span>&gt;</span>
        <span>&lt;</span><span>/</span>header<span>&gt;</span>
 <span>)</span><span>;</span>
                             
<span>// ...existing code...</span></code></pre><h3 id="Add-a-component-to-show-user-data">Add a component to show user data</h3><p>The authentication context provides a <code>getUser</code> function in case you want to show the user&#39;s basic data coming from Auth0 on the React application. That function returns a collection of claims about the user&#39;s identity coming from the backend API <code>GetUser</code>. </p><p>The following code shows a component that enumerates those claims.</p><pre><code><span>// BFF/ClientApp/src/components/User.js</span>

<span>import</span> React<span>,</span> <span>{</span> useEffect<span>,</span> useState <span>}</span> <span>from</span> <span>&#39;react&#39;</span><span>;</span>
<span>import</span> <span>{</span> useAuth <span>}</span> <span>from</span> <span>&#39;../context/AuthContext&#39;</span><span>;</span>

<span>export</span> <span>const</span> <span>User</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>

    <span>const</span> <span>{</span> user <span>}</span> <span>=</span> <span>useAuth</span><span>(</span><span>)</span><span>;</span>

    <span>const</span> <span>renderClaimsTable</span> <span>=</span> <span>function</span> <span>(</span><span>claims</span><span>)</span> <span>{</span>
        <span>return</span> <span>(</span>
            <span>&lt;</span>table className<span>=</span><span>&#39;table table-striped&#39;</span> aria<span>-</span>labelledby<span>=</span><span>&#34;tabelLabel&#34;</span><span>&gt;</span>
                <span>&lt;</span>thead<span>&gt;</span>
                    <span>&lt;</span>tr<span>&gt;</span>
                        <span>&lt;</span>th<span>&gt;</span>Type<span>&lt;</span><span>/</span>th<span>&gt;</span>
                        <span>&lt;</span>th<span>&gt;</span>Value<span>&lt;</span><span>/</span>th<span>&gt;</span>
                    <span>&lt;</span><span>/</span>tr<span>&gt;</span>
                <span>&lt;</span><span>/</span>thead<span>&gt;</span>
                <span>&lt;</span>tbody<span>&gt;</span>
                    <span>{</span>claims<span>.</span><span>map</span><span>(</span><span>claim</span> <span>=&gt;</span>
                        <span>&lt;</span>tr key<span>=</span><span>{</span>claim<span>.</span>type<span>}</span><span>&gt;</span>
                            <span>&lt;</span>td<span>&gt;</span><span>{</span>claim<span>.</span>type<span>}</span><span>&lt;</span><span>/</span>td<span>&gt;</span>
                            <span>&lt;</span>td<span>&gt;</span><span>{</span>claim<span>.</span>value<span>}</span><span>&lt;</span><span>/</span>td<span>&gt;</span>
                        <span>&lt;</span><span>/</span>tr<span>&gt;</span>
                    <span>)</span><span>}</span>
                <span>&lt;</span><span>/</span>tbody<span>&gt;</span>
            <span>&lt;</span><span>/</span>table<span>&gt;</span>
        <span>)</span><span>;</span>
    <span>}</span>

    <span>return</span> <span>(</span>
        <span>&lt;</span>div<span>&gt;</span>
            <span>&lt;</span>h1 id<span>=</span><span>&#34;tabelLabel&#34;</span> <span>&gt;</span>User claims<span>&lt;</span><span>/</span>h1<span>&gt;</span>
            <span>&lt;</span>p<span>&gt;</span>This component demonstrates fetching user identity claims <span>from</span> the server<span>.</span><span>&lt;</span><span>/</span>p<span>&gt;</span>
            <span>{</span><span>renderClaimsTable</span><span>(</span>user<span>)</span><span>}</span>
        <span>&lt;</span><span>/</span>div<span>&gt;</span>
    <span>)</span><span>;</span>

<span>}</span></code></pre><h2 id="Run-the-Web-Application">Run the Web Application</h2><p>From Visual Studio, click on the Run button but select your project name from the dropdown option instead of &#34;IIS Express&#34;. That will run the application using the Kestrel, the built-in web server included in .NET Core. Kestrel runs on &#34;<a href="https://localhost:5001" target="_blank" rel="noreferrer noopener">https://localhost:5001</a>&#34;, which is the URL we previously configured in Auth0.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1VJBYyC1Z9GUCS5VQRA1dT/4b16fd875e261f2aa17cb968f1f01187/run-bff-application.png" alt="Running your application"/></p><h2 id="About-the-Login-Flow">About the Login Flow</h2><p>Here is what happens when the user authenticates with the application we have built:</p><ul><li>The user clicks on the <em>Log In</em> button and is directed to the <code>Login</code> route.</li><li>The <code>ChallengeResult</code> response tells the ASP.NET authentication middleware to issue a challenge to the authentication handler registered with the Auth0 authentication scheme parameter. The parameter uses the &#34;Auth0&#34; value you passed in the call to <code>AddOpenIdConnect</code> in the <code>Startup</code> class.</li><li>The OIDC handler redirects the user to the Auth0&#39;s <code><span>/</span>authorize</code> endpoint, which displays the <a href="https://auth0.com/docs/universal-login" target="_blank" rel="noreferrer noopener">Universal Login page</a>. The user can log in with their username and password, social provider, or any other identity provider.</li><li>Once the user has logged in, Auth0 calls back to the <code><span>/</span>callback</code> endpoint in your application and passes along an authorization code.</li><li>The OIDC handler intercepts requests made to the <code><span>/</span>callback</code> path.</li><li>The handler looks for the authorization code, which Auth0 sent in the query string.</li><li>The OIDC handler calls the Auth0&#39;s <code><span>/</span>oauth<span>/</span>token</code> endpoint to exchange the authorization code for the user&#39;s ID and access token.</li><li>The OIDC middleware extracts the user information from the claims in the ID token.</li><li>The OIDC middleware returns a successful authentication response and sets a cookie that indicates that the user is authenticated. The cookie contains the claims with the user&#39;s information. The cookie is stored so that the cookie middleware will automatically authenticate the user on any future requests. The OIDC middleware receives no more requests unless it is explicitly challenged.</li><li>The React application uses the authentication context to issue an API call to the <code>GetUser</code> API. This API returns the user claims from the authentication cookie.</li><li>The React application renders the UI Component using the authenticated user&#39;s identity.</li></ul><h2 id="Conclusion">Conclusion</h2><p>The BFF pattern is an ideal solution for authentication if you can afford to pay extra money for a dedicated backend. It will help you avoid headaches when dealing with access tokens and how to keep them safe on your client-side application. The backend will do all the heavy lifting, so that you can focus only on UI/UX concerns in the frontend.</p><p>You can download from <a href="https://github.com/auth0-blog/bff-auth0-dotnet" target="_blank" rel="noreferrer noopener">this GitHub repository</a> the full source code of the sample project built in this article.</p></div></div>]]></content:encoded>
      <pubDate>Tue, 14 Sep 2021 15:04:00 +0000</pubDate>
    </item>
    <item>
      <title>What SMART on FHIR Means for the Future of Healthcare</title>
      <link>https://auth0.com/blog/what-smart-on-fhir-means-for-the-future-of-healthcare/</link>
      <description>SMART on FHIR is poised to transform data interoperability — here&#39;s how it will improve healthcare.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>Most health systems know that seamless omnichannel customer engagement (a “digital front door”) is essential in order to deliver the personalized, value-based <a href="https://www2.deloitte.com/us/en/insights/industry/health-care/consumer-health-trends.html" target="_blank" rel="noreferrer noopener">healthcare today’s consumers expect</a>. In practice, however, implementing this digital front door strategy is challenging for <a href="https://www.healthit.gov/sites/default/files/page/2021-02/Use-of-Certified-Health-IT-and-Methods-to-Enable-Interoperability-by-U.S.-Non-Federal-Acute-Care-Hospitals-2019.pdf" target="_blank" rel="noreferrer noopener">most healthcare systems</a>, due to the <a href="https://www.chiefhealthcareexecutive.com/view/consequences-of-fragmented-healthcare-information-systems" target="_blank" rel="noreferrer noopener">fragmented nature</a> of healthcare information.</p><p>The Substitutable Medical Applications and Reusable Technologies (SMART) platform promises to solve these data fragmentation challenges by standardizing how patient data is accessed and shared. And given SMART’s inclusion in the <a href="https://www.federalregister.gov/documents/2020/05/01/2020-07419/21st-century-cures-act-interoperability-information-blocking-and-the-onc-health-it-certification" target="_blank" rel="noreferrer noopener">21st Century Cures Act</a>, the platform will become the standard protocol for accessing electronic health records (EHRs) in the near future.</p><p>Below, we explain what SMART means for the healthcare ecosystem and how it will improve both health data interoperability and the value of healthcare technology as a whole.</p><h2 id="What-is-SMART-on-FHIR-">What is SMART on FHIR?</h2><p><a href="https://smarthealthit.org/" target="_blank" rel="noreferrer noopener">SMART</a> is an open-source, standards-based <a href="https://auth0.com/blog/what-is-an-api-how-apis-work-for-non-developers/" target="_blank" rel="noreferrer noopener">API</a> that leverages the <a href="https://auth0.com/intro-to-iam/what-is-oauth-2/" target="_blank" rel="noreferrer noopener">OAuth 2.0</a> standard to provide secure, universal access to EHRs. The SMART platform builds on the existing Fast Health Interoperability Resources (hence the name &#34;SMART on FHIR&#34;).</p><p>Together, these two standards contain everything developers need to build applications that will work anywhere within the healthcare ecosystem:</p><ol start="1"><li><strong>Open standards</strong> for protocols for authentication, authorization, and UI integration that define how to build applications with universal access to EHRs</li><li><strong>Open-source tools and libraries</strong> for developers that make it easier to use SMART standards during application development. The platform also offers a free sandbox that helps developers test their apps before deployment</li><li><strong>An application gallery</strong> that highlights all of the existing healthcare applications and software that currently uses SMART on FHIR&#39;s platform</li></ol><p>The original idea behind SMART was first introduced in <a href="https://www.nejm.org/doi/full/10.1056/NEJMp0900411" target="_blank" rel="noreferrer noopener">an article</a> in the New England Journal of Medicine back in 2009. With the help of federal funding in 2010, SMART developed into the platform it is today, which is currently used by both <a href="https://azure.microsoft.com/en-us/blog/azure-api-for-fhir-moves-to-general-availability/" target="_blank" rel="noreferrer noopener">Microsoft Azure</a> and <a href="https://www.apple.com/ios/health/" target="_blank" rel="noreferrer noopener">Apple</a>.</p><h2 id="How-SMART-Improves-Healthcare-Interoperability-and-Delivery">How SMART Improves Healthcare Interoperability and Delivery</h2><p>SMART improves healthcare interoperability in the same way standard electrical sockets and plugs simplify the process of powering different devices in your home.</p><p>Today, most EHR databases use a proprietary API (their own unique plug and socket configuration). As a result, tech companies have to build a custom connection to each database in order to access medical data. Not only is this costly, but it also hinders the ability of healthcare providers and patients to access their data with the technology that works best for them.</p><p>SMART, on the other hand, provides a standard, universal API for accessing EHRs. Any technology built with SMART works with any EHR database that uses SMART as well. As a result, healthcare technology becomes interchangeable, allowing health systems and patients to access medical data on the applications that best suit their needs, rather than only the ones that work with the EHR database they use.</p><h2 id="How-Improved-Interoperability-Improves-The-Value-of-Healthcare-Technology">How Improved Interoperability Improves The Value of Healthcare Technology</h2><p>Interoperability is valuable for healthcare tech companies because it &#34;ensures [their] innovations can be broadly understood and developed,&#34; as Dave Pickles, Founder and CTO of The Trade Desk, tells <a href="https://www.forbes.com/sites/forbestechcouncil/2019/08/08/interoperability-and-the-future-of-software-development/?sh=2b59504d4767" target="_blank" rel="noreferrer noopener">Forbes</a>. And since SMART improves interoperability, it also encourages healthcare technology innovation.</p><p>For example, SMART decouples the protocols for accessing EHRs from a piece of software itself. So it allows healthcare technology companies to improve their products and services without worrying about how it will impact the way patients and providers access their data. The result is faster development of healthcare applications, which improves the quality of the entire marketplace (and care for consumers) as a whole.</p><p>SMART also simplifies app development for tech companies. Developers no longer need to build custom connections to each EHR database — they can develop their apps once using SMART, and those apps will work with any EHR databases built with SMART. As a result, their apps become more useful to a broader audience of health organizations and consumers.</p><h2 id="What-SMART-s-Inclusion-in-the-21st-Century-Cures-Act-Means">What SMART&#39;s Inclusion in the 21st Century Cures Act Means</h2><p>The 21st Century Cures Act (passed in 2016) called for the adoption of a universal API that would &#34;allow individuals to securely and easily access structured electronic health information using smartphone applications.&#34; The Office of the National Coordinator for Health Information Technology’s (ONC’s) <a href="https://www.healthit.gov/curesrule/" target="_blank" rel="noreferrer noopener">Final Rule on Interoperability</a> (published in 2020) later named SMART as that universal API.</p><p>For <a href="https://www.healthit.gov/topic/certification-ehrs/about-onc-health-it-certification-program" target="_blank" rel="noreferrer noopener">ONC-certified health IT</a> (primarily government applications), this means SMART&#39;s API is now a requirement. However, since the ONC certification program is voluntary for the private sector, SMART&#39;s API isn&#39;t legally required for companies whose technologies are not used in government applications.</p><p>The Centers For Medicare and Medicaid Services (CMS) also includes policies in their regulations “which require or encourage payers to implement Application Programming Interfaces (APIs) to improve the electronic exchange of health care data.” SMART on FHIR is <a href="https://www.cms.gov/Regulations-and-Guidance/Guidance/Interoperability/index" target="_blank" rel="noreferrer noopener">named as the preferred technical standard</a> for doing so, meaning any health system that accepts Medicare or Medicaid must also adopt SMART.</p><h2 id="SMART-on-FHIR-is-a-Must-For-Healthcare-Providers">SMART on FHIR is a Must For Healthcare Providers</h2><p>Given the benefits, as well as its inclusion in the Cures Act, adopting SMART is practically a necessity for any health system. For this reason, major EHR players like <a href="https://smarthealthit.org/an-app-platform-for-healthcare/who-is-using-smart/" target="_blank" rel="noreferrer noopener">Epic, Cerner, and Allscripts</a> are already using SMART.</p><p>However, there are only 58 apps listed on <a href="https://apps.smarthealthit.org/apps/featured" target="_blank" rel="noreferrer noopener">SMART&#39;s App Gallery</a> as of the writing of this article, meaning few companies have incorporated the standard into their tech at this time. As a result, SMART adoption could be a sales advantage for some tech companies.</p><p>Outside of mandates, early adoption of SMART could also help healthcare tech companies ensure their applications become more widely adopted in the long run. Learn more about utilizing SMART on FHIR&#39;s platform, tools, and API <a href="https://smarthealthit.org/developer-resources/" target="_blank" rel="noreferrer noopener">here</a>.</p></div></div>]]></content:encoded>
      <pubDate>Tue, 07 Sep 2021 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Testing AWS Chalice Applications</title>
      <link>https://auth0.com/blog/testing-aws-chalice-applications/</link>
      <description>A tutorial to learn how to write unit tests and integration tests for REST APIs in AWS Chalice. Additionally, we will see how to measure test coverage.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><strong>TL;DR:</strong> In this tutorial, we will learn how to write unit tests and integration tests with Pytest in AWS Chalice applications. We will also learn how to measure test coverage.</p><h2 id="Introduction">Introduction</h2><p><a href="https://aws.github.io/chalice/" target="_blank" rel="noreferrer noopener">AWS Chalice</a> is a Python-based web micro-framework that leverages on the <a href="https://aws.amazon.com/lambda/" target="_blank" rel="noreferrer noopener">AWS Lambda</a> and <a href="https://aws.amazon.com/api-gateway/" target="_blank" rel="noreferrer noopener">API Gateway</a> services. It is used to create serverless applications. The Chalice experience is <a href="https://flask.palletsprojects.com/en/2.0.x/" target="_blank" rel="noreferrer noopener">Flask</a>-like by way of features like semantics and syntax. For more details on creating and deploying Chalice applications, you can go through the article on <a href="https://auth0.com/blog/how-to-create-crud-rest-api-with-aws-chalice/" target="_blank" rel="noreferrer noopener">how to create CRUD REST API with AWS Chalice</a>.</p><p>When building applications, there is a need to <a href="https://en.wikipedia.org/wiki/Software_testing" target="_blank" rel="noreferrer noopener">test</a> the code to avoid shipping bugs and unstable code. It also saves one a lot of debugging hours and makes deployments less stressful.</p><p>Common forms of tests in software development include:</p><ol start="1"><li><a href="https://en.wikipedia.org/wiki/Unit_testing" target="_blank" rel="noreferrer noopener">Unit test</a>: This tests a particular function, component, or logic in the code. This way, edge cases can easily be identified, isolated, and fixed. Unit tests usually involve inspecting the output of a function against a known or expected output.</li><li><a href="https://en.wikipedia.org/wiki/Integration_testing" target="_blank" rel="noreferrer noopener">Integration Test</a>: examines multiple parts or the entire application in an end-to-end manner. It considers how each function or component works with the other.</li></ol><p>However, Chalice currently provides a test client for just unit tests. Therefore, the integration tests are written in a manner similar to unit tests with no major difference other than the fact that integration tests consist of multiple unit tests.</p><h2 id="Where-to-Write-Tests">Where to Write Tests</h2><p>In Python-based applications, tests are usually housed in <code>test<span>.</span>py</code> files. These are the test files that will import the application logic to be tested.</p><p>Let&#39;s assume we have a simple Chalice application with a folder structure that looks like the following:</p><pre><code>├── app.py
├── .chalice
├── requirements.txt
└── test.py</code></pre><p>However, as the application becomes bigger, a single <code>test<span>.</span>py</code> file would become bulky and can become difficult to work with. Hence, it is necessary to create a folder of tests called <code>tests</code> and then split the tests into multiple test files inside the test folder.</p><p>Now, we&#39;ll need to create a new folder called <code>tests</code> and an empty <code>__init__<span>.</span>py</code> file inside the folder. The <code>__init__<span>.</span>py</code> will allow Python to recognize the test directory as a package that could be run:</p><pre><code><span>mkdir</span> tests <span>&amp;&amp;</span> <span>cd</span> tests
<span>touch</span> __init__.py</code></pre><p>Now, let&#39;s create a test file for our application inside the test folder:</p><pre><code><span>touch</span> test_unit.py</code></pre><p>Then, the folder structure will look like this:</p><pre><code>├── app.py
├── .chalice
├── requirements.txt
└── tests
    ├── __init__.py
    └── test_unit.py</code></pre><p>We can then create as many test files as we need in the <code>tests</code> folder.</p><h2 id="How-to-Do-Unit-Tests">How to Do Unit Tests</h2><p>Since the release of v.1.17.0, AWS Chalice has shipped with a test client that serves as a test runner to write tests in Chalice applications. We no longer need to set up boilerplates and logic for testing. We only need to import the test client into our test file.</p><p>Let&#39;s assume we have our Chalice application has an <code>app<span>.</span>py</code> file that looks like the following:</p><pre><code><span>from</span> chalice <span>import</span> Chalice

app <span>=</span> Chalice<span>(</span>app_name<span>=</span><span>&#39;chalice-api-sample&#39;</span><span>)</span>


<span>@app<span>.</span>route</span><span>(</span><span>&#39;/&#39;</span><span>)</span>
<span>def</span> <span>index</span><span>(</span><span>)</span><span>:</span>
    <span>return</span> <span>{</span><span>&#39;hello&#39;</span><span>:</span> <span>&#39;world&#39;</span><span>}</span></code></pre><p>Now, we&#39;ll modify the <code>test_unit<span>.</span>py</code> file as follows:</p><pre><code><span>import</span> app
<span>from</span> chalice<span>.</span>test <span>import</span> Client</code></pre><p>In the above code, we have just imported the <code>app<span>.</span>py</code> and the chalice test Client. Let&#39;s add the following test code:</p><pre><code><span>.</span><span>.</span><span>.</span>

<span>def</span> <span>test_index</span><span>(</span><span>)</span><span>:</span>
    <span>with</span> Client<span>(</span>app<span>.</span>app<span>)</span> <span>as</span> client<span>:</span>
        response <span>=</span> client<span>.</span>http<span>.</span>get<span>(</span><span>&#39;/&#39;</span><span>)</span>
        <span>assert</span> response<span>.</span>status_code <span>==</span> <span>200</span>
        <span>assert</span> response<span>.</span>json_body <span>==</span> <span>{</span><span>&#39;hello&#39;</span><span>:</span> <span>&#39;world&#39;</span><span>}</span></code></pre><p>In the above test code:</p><ol start="1"><li>we instantiated the test Client to be used within the context of the particular test function. That implies that whenever we run the test, a test environment with resources and environment variables will be set up and then cleaned up after running the test.</li><li>We made a <code><span>GET</span></code> request via HTTP using the <code>client<span>.</span>http</code> attribute.</li><li>We assert that a <code><span>200</span></code> status code is returned in the response with a JSON response body—<code><span>{</span><span>&#39;hello&#39;</span><span>:</span> <span>&#39;world&#39;</span><span>}</span></code>.</li></ol><p>We will install <a href="https://docs.pytest.org/en/6.2.x/getting-started.html" target="_blank" rel="noreferrer noopener">Pytest</a> runner to run our test:</p><pre><code>pip <span>install</span> pytest</code></pre><p>Then, we will run with the following command:</p><pre><code>py.test tests/test_unit.py</code></pre><p>We should get a response that looks like the following:</p><pre><code><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span> <span>test</span> session starts <span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span>
platform win32 -- Python <span>3.7</span>.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1
rootdir: C:<span>\</span>aws-chalice-api-sample
collected <span>1</span> item

tests<span>\</span>test_unit.py <span>.</span>                                                                           <span>[</span><span>100</span>%<span>]</span>

<span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span> <span>1</span> passed <span>in</span> <span>0</span>.11s <span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span></code></pre><h3 id="Creating-mocks">Creating mocks</h3><p>We can try to <a href="https://en.wikipedia.org/wiki/Mock_object" target="_blank" rel="noreferrer noopener">mock</a> an external API in order to learn how to <a href="https://docs.python.org/3/library/unittest.mock.html" target="_blank" rel="noreferrer noopener">test with mock variables</a>. We will test a request from our app to an endpoint of <a href="https://jsonplaceholder.typicode.com/" target="_blank" rel="noreferrer noopener">JSONPlaceholder</a> API data service to get a list of dummy posts. Firstly, let us install the Python requests module:</p><pre><code>pip <span>install</span> requests</code></pre><p>Then, let&#39;s add a function inside <code>app<span>.</span>py</code> file to make a <code><span>GET</span></code> request to the <code><span>/</span>post</code> endpoint of JSONPlaceholder and return a list of posts:</p><pre><code><span>.</span><span>.</span><span>.</span>
<span>import</span> requests

<span>@app<span>.</span>route</span><span>(</span><span>&#39;/post&#39;</span><span>)</span>
<span>def</span> <span>get_post</span><span>(</span><span>)</span><span>:</span>
    response <span>=</span> requests<span>.</span>get<span>(</span><span>&#34;https://jsonplaceholder.typicode.com/posts/1&#34;</span><span>)</span>
    <span>if</span> response<span>.</span>ok<span>:</span>
        <span>return</span> response<span>.</span>json<span>(</span><span>)</span>
    <span>else</span><span>:</span>
        <span>return</span> <span>None</span>
<span>.</span><span>.</span><span>.</span></code></pre><p>In the above code, we wrote a function called <code>get_post</code> that makes an HTTP request to the DummyAPI server and returns the response of the request in JSON form.</p><p>So, we&#39;ll add a mock inside the <code>test_unit<span>.</span>py</code> file:</p><pre><code><span>.</span><span>.</span><span>.</span>
<span>from</span> unittest<span>.</span>mock <span>import</span> patch

<span>.</span><span>.</span><span>.</span>

<span>@patch</span><span>(</span><span>&#39;app.requests.get&#39;</span><span>)</span>
<span>def</span> <span>test_get_post</span><span>(</span>mock_get<span>)</span><span>:</span>
    <span>&#34;&#34;&#34;Mocking with the patch decorator to get a post from an External API&#34;&#34;&#34;</span>
    mock_get<span>.</span>return_value<span>.</span>ok <span>=</span> <span>True</span>
    response <span>=</span> app<span>.</span>get_post<span>(</span><span>)</span>
    <span>assert</span> response<span>.</span>ok</code></pre><p>In the above code, we imported the patch function of the mock module. Then, we defined the patch function as a decorator with reference to the project&#39;s <code>request<span>.</span>get</code>. Then, we created a function called <code>test_get_post</code> with a parameter called <code>mock_get</code> to test the <code>get_post</code> function inside the <code>app<span>.</span>py</code> file. If the returned status of <code>mock_get</code> is <code>ok</code>, then a fake request to the JSONPlaceholder is made, after which an assertion of the status code of the response to the request is made. We ensured that the mock acts like it is making a real <code>request<span>.</span>get</code> request to the JSONPlaceholder server, whereas it is a fake request. This allows us to test our code without dependence on the JSONPlaceholder external API server. </p><p>If we run our test again with the following bash command:</p><pre><code>py.test tests/test_unit.py</code></pre><p>We should get an output similar to the following:</p><pre><code><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span> <span>test</span> session starts <span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span>
platform win32 -- Python <span>3.7</span>.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1
rootdir: C:<span>\</span>aws-chalice-api-sample
plugins: cov-2.12.1
collected <span>2</span> items

tests<span>\</span>unit<span>\</span>test_unit.py <span>..</span>                                                                     <span>[</span><span>100</span>%<span>]</span>

<span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span> <span>2</span> passed <span>in</span> <span>0</span>.85s <span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span></code></pre><p>How can we test when the desired response is not returned? That&#39;s why we have an <code><span>else</span></code> statement in the <code><span>get_post</span><span>(</span><span>)</span></code> function inside the <code>app<span>.</span>py</code> file, right? To accommodate situations when no post is returned when we request for a post from JSONPlaceholder. Therefore, we will add a test that will check when no post is returned. Let&#39;s add the following code in the <code>test_unit<span>.</span>py</code> file:</p><pre><code><span>.</span><span>.</span><span>.</span>
<span>@patch</span><span>(</span><span>&#39;app.requests.get&#39;</span><span>)</span>
<span>def</span> <span>test_no_get_post</span><span>(</span>mock_get<span>)</span><span>:</span>
    <span>&#34;&#34;&#34;Mock testing to check when no post is returned&#34;&#34;&#34;</span>
    mock_get<span>.</span>return_value<span>.</span>ok <span>=</span> <span>False</span>
    response <span>=</span> app<span>.</span>get_post<span>(</span><span>)</span>
    <span>assert</span> response <span>==</span> <span>None</span></code></pre><p>In the above file, we asked the test to check if the returned value of the mock <code><span>GET</span></code> request is not <code>ok</code> in the line <code>mock_get<span>.</span>return_value<span>.</span>ok <span>=</span> False</code>. We also asserted that a <code>None</code> response is returned. So, we have been able to handle situations where a post is not returned.</p><p>We can then run the <code>test_unit<span>.</span>py</code> file again as thus:</p><pre><code>py.test tests/test_unit.py</code></pre><p>We will get the following output:</p><pre><code><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span> <span>test</span> session starts <span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span> 
platform win32 -- Python <span>3.7</span>.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1
rootdir: <span>\</span>aws-chalice-api-sample
plugins: cov-2.12.1
collected <span>3</span> items

tests<span>\</span>unit<span>\</span>test_unit.py <span>..</span>.                                                                    <span>[</span><span>100</span>%<span>]</span> 

<span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span> <span>3</span> passed <span>in</span> <span>0</span>.17s <span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span></code></pre><p>Cool!</p><p>The full code of the <code>test_unit<span>.</span>py</code> file is thus:</p><pre><code><span>from</span> unittest<span>.</span>mock <span>import</span> patch
<span>import</span> app
<span>from</span> chalice<span>.</span>test <span>import</span> Client
<span>import</span> json


<span>def</span> <span>test_index</span><span>(</span><span>)</span><span>:</span>
    <span>with</span> Client<span>(</span>app<span>.</span>app<span>)</span> <span>as</span> client<span>:</span>
        response <span>=</span> client<span>.</span>http<span>.</span>get<span>(</span><span>&#39;/&#39;</span><span>)</span>
        <span>assert</span> response<span>.</span>status_code <span>==</span> <span>200</span>
        <span>assert</span> response<span>.</span>json_body <span>==</span> <span>{</span><span>&#39;hello&#39;</span><span>:</span> <span>&#39;world&#39;</span><span>}</span>

<span>@patch</span><span>(</span><span>&#39;app.requests.get&#39;</span><span>)</span>
<span>def</span> <span>test_get_post</span><span>(</span>mock_get<span>)</span><span>:</span>
    <span>&#34;&#34;&#34;Mocking with the patch decorator to get a post from an External API&#34;&#34;&#34;</span>
    mock_get<span>.</span>return_value<span>.</span>ok <span>=</span> <span>True</span>
    response <span>=</span> app<span>.</span>get_post<span>(</span><span>)</span>
    <span>assert</span> response<span>.</span>ok

<span>@patch</span><span>(</span><span>&#39;app.requests.get&#39;</span><span>)</span>
<span>def</span> <span>test_no_get_post</span><span>(</span>mock_get<span>)</span><span>:</span>
    <span>&#34;&#34;&#34;Mock testing to check when no post is returned&#34;&#34;&#34;</span>
    mock_get<span>.</span>return_value<span>.</span>ok <span>=</span> <span>False</span>
    response <span>=</span> app<span>.</span>get_post<span>(</span><span>)</span>
    <span>assert</span> response <span>==</span> <span>None</span></code></pre><h2 id="How-to-Write-Integration-Tests">How to Write Integration Tests</h2><p>Integration tests check multiple components to see if they work together. These tests are usually written like unit tests, but they involve verifying multiple parts of the application at once. An integration test might require establishing a network connection, setting up a database, etc. These can be configured as fixtures. Fixtures are functions that set up the initial states/environment that you can create in your tests once and use multiple times.</p><p>It is a good habit to separate unit tests from integration tests by putting them in separate folders. Hence, we will create two folders inside the <code>test</code> directory and call them <code>unit</code> and <code>integration</code>, respectively. Then,</p><ul><li>we will move the <code>test_unit<span>.</span>py</code> file into the <code>unit</code> folder.</li><li>also, we will create a new <code>test_integration<span>.</span>py</code> file in the <code>integration</code> folder</li><li>next, we will create a <code>conftest<span>.</span>py</code> file in the <code>test</code> folder to house our fixtures.</li></ul><p>So, the folder structure will look like the following:</p><pre><code>├── app.py
├── .chalice
├── requirements.txt
└── tests
    ├── __init__.py
    ├── conftest.py
    ├── unit/
    │   ├── __init__.py
    │   └── test_unit.py
    │
    └── integration/
        ├── __init__.py
        └── test_integration.py</code></pre><p>To start with, we will create a fixture called <code>app</code>. This fixture will be the instance of our Chalice application. Let&#39;s go to the <code>conftest<span>.</span>py</code> file and change it thus:</p><pre><code><span>import</span> pytest
<span>from</span> chalice <span>import</span> Chalice
<span>import</span> app <span>as</span> chalice_app
<span>from</span> chalice<span>.</span>test <span>import</span> Client


<span>@pytest<span>.</span>fixture</span>
<span>def</span> <span>app</span><span>(</span><span>)</span> <span>-</span><span>&gt;</span> Chalice<span>:</span>
    <span>return</span> chalice_app


<span>@pytest<span>.</span>fixture</span>
<span>def</span> <span>test_client</span><span>(</span><span>)</span><span>:</span>
    <span>with</span> Client<span>(</span>chalice_app<span>.</span>app<span>)</span> <span>as</span> client<span>:</span>
        <span>yield</span> client</code></pre><p>In the code above, we&#39;ve abstracted an instance of our Chalice application as a fixture. We also created a fixture for our test client.</p><p>Going forward, let&#39;s assume that we have set up a REST API for a bookshelf application in the <code>app<span>.</span>py</code> with CRUD endpoints like the following:</p><pre><code><span>.</span><span>.</span><span>.</span>

<span># POST endpoint to add books to the bookshelf</span>

<span>@app<span>.</span>route</span><span>(</span><span>&#39;/book&#39;</span><span>,</span> methods<span>=</span><span>[</span><span>&#39;POST&#39;</span><span>]</span><span>)</span>
<span>def</span> <span>create_book</span><span>(</span><span>)</span><span>:</span>
    book_as_json <span>=</span> app<span>.</span>current_request<span>.</span>json_body
    <span>try</span><span>:</span>
        Item <span>=</span> <span>{</span>
            <span>&#39;id&#39;</span><span>:</span> book_as_json<span>[</span><span>&#39;id&#39;</span><span>]</span><span>,</span>
            <span>&#34;title&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;title&#39;</span><span>]</span><span>,</span>
            <span>&#34;author&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;author&#39;</span><span>]</span>
        <span>}</span>
        <span>return</span> <span>{</span><span>&#34;id&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;id&#39;</span><span>]</span><span>,</span> <span>&#34;title&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;title&#39;</span><span>]</span><span>,</span> <span>&#34;author&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;author&#39;</span><span>]</span><span>}</span>
    <span>except</span> Exception <span>as</span> e<span>:</span>
        <span>return</span> <span>{</span><span>&#39;message&#39;</span><span>:</span> <span>str</span><span>(</span>e<span>)</span><span>}</span>


<span># PUT endpoint to update a book item based on the given ID</span>

<span>@app<span>.</span>route</span><span>(</span><span>&#39;/book/{id}&#39;</span><span>,</span> methods<span>=</span><span>[</span><span>&#39;PUT&#39;</span><span>]</span><span>)</span>
<span>def</span> <span>update_book</span><span>(</span><span>id</span><span>)</span><span>:</span>
    book_as_json <span>=</span> app<span>.</span>current_request<span>.</span>json_body
    <span>try</span><span>:</span>
        Item <span>=</span> <span>{</span>
            <span>&#34;id&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;id&#39;</span><span>]</span><span>,</span>
            <span>&#34;title&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;title&#39;</span><span>]</span><span>,</span>
        <span>}</span>
        <span>return</span> <span>{</span><span>&#39;message&#39;</span><span>:</span> <span>&#39;ok - UPDATED&#39;</span><span>,</span> <span>&#39;status&#39;</span><span>:</span> <span>201</span><span>}</span>
    <span>except</span> Exception <span>as</span> e<span>:</span>
        <span>return</span> <span>{</span><span>&#39;message&#39;</span><span>:</span> <span>str</span><span>(</span>e<span>)</span><span>}</span>


<span># DELETE endpoint to delete a particular book based on the given ID</span>

<span>@app<span>.</span>route</span><span>(</span><span>&#39;/book/{id}&#39;</span><span>,</span> methods<span>=</span><span>[</span><span>&#39;DELETE&#39;</span><span>]</span><span>)</span>
<span>def</span> <span>delete_book</span><span>(</span><span>id</span><span>)</span><span>:</span>
    book_as_json <span>=</span> app<span>.</span>current_request<span>.</span>json_body
    <span>try</span><span>:</span>
        Item <span>=</span> <span>{</span>
            <span>&#34;id&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;id&#39;</span><span>]</span><span>,</span>
            <span>&#34;author&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;author&#39;</span><span>]</span>
        <span>}</span>
        <span>return</span> <span>{</span><span>&#39;message&#39;</span><span>:</span> <span>&#39;ok - DELETED&#39;</span><span>,</span> <span>&#39;status&#39;</span><span>:</span> <span>201</span><span>}</span>
    <span>except</span> Exception <span>as</span> e<span>:</span>
        <span>return</span> <span>{</span><span>&#39;message&#39;</span><span>:</span> <span>str</span><span>(</span>e<span>)</span><span>}</span></code></pre><p>The code above consists of:</p><ul><li><code><span>add_book</span><span>(</span><span>)</span></code>: function for <code><span>POST</span></code> method to add books to the catalog</li><li><code><span>update_book</span><span>(</span>id</code>: uses the <code><span>UPDATE</span></code> method to update a specified book entry with a new title</li><li><code><span>delete_book</span><span>(</span>id<span>)</span></code>: deletes a particular book entry from the catalog</li></ul><p>Now, we can write tests for them using the Chalice <a href="https://aws.github.io/chalice/api.html#Client.http" target="_blank" rel="noreferrer noopener">TestHTTPClient class</a> inside the <code>test_integration<span>.</span>py</code> file like the following:</p><pre><code><span>import</span> json

<span>#  test for the create_book endpoint</span>
<span>def</span> <span>test_add_book</span><span>(</span>test_client<span>)</span><span>:</span>
    response <span>=</span> test_client<span>.</span>http<span>.</span>post<span>(</span>
        <span>&#39;/book&#39;</span><span>,</span>
        headers<span>=</span><span>{</span><span>&#39;Content-Type&#39;</span><span>:</span> <span>&#39;application/json&#39;</span><span>}</span><span>,</span>
        body<span>=</span>json<span>.</span>dumps<span>(</span>
            <span>{</span>
                <span>&#34;id&#34;</span><span>:</span> <span>&#34;123&#34;</span><span>,</span>
                <span>&#34;title&#34;</span><span>:</span> <span>&#34;Javascript Know It All&#34;</span><span>,</span>
                <span>&#34;author&#34;</span><span>:</span> <span>&#34;Chukwuma Obinna&#34;</span><span>,</span>
            <span>}</span><span>)</span>
    <span>)</span>
    <span>assert</span> response<span>.</span>json_body <span>==</span> <span>{</span>
        <span>&#34;id&#34;</span><span>:</span> <span>&#34;123&#34;</span><span>,</span>
        <span>&#34;title&#34;</span><span>:</span> <span>&#34;Javascript Know It All&#34;</span><span>,</span>
        <span>&#34;author&#34;</span><span>:</span> <span>&#34;Chukwuma Obinna&#34;</span>
    <span>}</span>


<span>#  test for the update_book endpoint</span>
<span>def</span> <span>test_update_book</span><span>(</span>test_client<span>)</span><span>:</span>
    response <span>=</span> test_client<span>.</span>http<span>.</span>put<span>(</span>
        <span>&#39;/book/{id}&#39;</span><span>,</span>
        headers<span>=</span><span>{</span><span>&#39;Content-Type&#39;</span><span>:</span> <span>&#39;application/json&#39;</span><span>}</span><span>,</span>
        body<span>=</span>json<span>.</span>dumps<span>(</span>
            <span>{</span>
                <span>&#34;id&#34;</span><span>:</span> <span>&#34;123&#34;</span><span>,</span>
                <span>&#34;title&#34;</span><span>:</span> <span>&#34;Chalice Book&#34;</span><span>,</span>
            <span>}</span><span>)</span>
    <span>)</span>
    <span>assert</span> response<span>.</span>json_body <span>==</span> <span>{</span>
        <span>&#34;message&#34;</span><span>:</span> <span>&#34;ok - UPDATED&#34;</span><span>,</span>
        <span>&#34;status&#34;</span><span>:</span> <span>201</span>
    <span>}</span>


<span>#  test for the delete_book endpoint</span>
<span>def</span> <span>test_delete_book</span><span>(</span>test_client<span>)</span><span>:</span>
    response <span>=</span> test_client<span>.</span>http<span>.</span>delete<span>(</span><span>&#39;/book/{id}&#39;</span><span>,</span>
         headers<span>=</span><span>{</span><span>&#39;Content-Type&#39;</span><span>:</span> <span>&#39;application/json&#39;</span><span>}</span><span>,</span>
         body<span>=</span>json<span>.</span>dumps<span>(</span>
              <span>{</span>
                    <span>&#34;id&#34;</span><span>:</span> <span>&#34;123&#34;</span><span>,</span>
                    <span>&#34;author&#34;</span><span>:</span> <span>&#34;Chukwuma Obinna&#34;</span><span>,</span>
              <span>}</span><span>)</span>
    <span>)</span>
    <span>assert</span> response<span>.</span>json_body <span>==</span> <span>{</span>
        <span>&#34;message&#34;</span><span>:</span> <span>&#34;ok - DELETED&#34;</span><span>,</span>
        <span>&#34;status&#34;</span><span>:</span> <span>201</span>
    <span>}</span></code></pre><p>In the above code:</p><ul><li>We wrote the tests for each of our CRUD endpoints.</li><li>In each test function, we used the <code>test_client</code> that we defined as a fixture earlier on in the <code>conftest<span>.</span>py</code> file.</li><li>defined the header and body to be passed in each test request</li><li>We asserted known responses to the test requests</li></ul><p>Note: the database functionality is not included in the API used in order to simplify the example. Otherwise, we would have to write a fixture to setup a mock database for the integration test.</p><p>To run the above test, we&#39;d use the following command:</p><pre><code>py.test tests/test_integration.py</code></pre><p>We should get a response that looks like the following:</p><pre><code><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span> <span>test</span> session starts <span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span>
platform win32 -- Python <span>3.7</span>.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1
cachedir: .pytest_cache
rootdir: C:<span>\</span>aws-chalice-api-sample
collected <span>4</span> items

tests/integration/test_integration.py::test_index PASSED                                     <span>[</span> <span>25</span>%<span>]</span>
tests/integration/test_integration.py::test_add_book PASSED                                  <span>[</span> <span>50</span>%<span>]</span>
tests/integration/test_integration.py::test_update_book PASSED                               <span>[</span> <span>75</span>%<span>]</span>
tests/integration/test_integration.py::test_delete_book PASSED                               <span>[</span><span>100</span>%<span>]</span>

<span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span> <span>4</span> passed <span>in</span> <span>1</span>.01s <span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span></code></pre><p>Generally, integration tests usually take a longer time to run than unit tests. Therefore, it is advisable to not run them every time but whenever one needs to deploy.</p><p>The full code of the <code>app<span>.</span>py</code> file is thus:</p><pre><code><span>from</span> requests<span>.</span>models <span>import</span> Response
<span>from</span> chalice <span>import</span> Chalice
<span>import</span> requests
<span>import</span> json

app <span>=</span> Chalice<span>(</span>app_name<span>=</span><span>&#39;aws-chalice-api-sample&#39;</span><span>)</span>


<span>@app<span>.</span>route</span><span>(</span><span>&#39;/&#39;</span><span>)</span>
<span>def</span> <span>index</span><span>(</span><span>)</span><span>:</span>
    <span>return</span> <span>{</span><span>&#39;hello&#39;</span><span>:</span> <span>&#39;world&#39;</span><span>}</span>

<span># Function to make External API Call</span>
<span>@app<span>.</span>route</span><span>(</span><span>&#39;/post&#39;</span><span>)</span>
<span>def</span> <span>get_post</span><span>(</span><span>)</span><span>:</span>
    response <span>=</span> requests<span>.</span>get<span>(</span><span>&#34;https://jsonplaceholder.typicode.com/posts/1&#34;</span><span>)</span>
    <span>if</span> response<span>.</span>ok<span>:</span>
        <span>return</span> response<span>.</span>json<span>(</span><span>)</span>
    <span>else</span><span>:</span>
        <span>return</span> <span>None</span>

<span># Function to make POST request to create a book</span>
@ app<span>.</span>route<span>(</span><span>&#39;/book&#39;</span><span>,</span> methods<span>=</span><span>[</span><span>&#39;POST&#39;</span><span>]</span><span>)</span>
<span>def</span> <span>create_book</span><span>(</span><span>)</span><span>:</span>

    book_as_json <span>=</span> app<span>.</span>current_request<span>.</span>json_body
    <span>try</span><span>:</span>
        Item <span>=</span> <span>{</span>
            <span>&#39;id&#39;</span><span>:</span> book_as_json<span>[</span><span>&#39;id&#39;</span><span>]</span><span>,</span>
            <span>&#34;title&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;title&#39;</span><span>]</span><span>,</span>
            <span>&#34;author&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;author&#39;</span><span>]</span>
        <span>}</span>
        <span>return</span> <span>{</span><span>&#34;id&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;id&#39;</span><span>]</span><span>,</span> <span>&#34;title&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;title&#39;</span><span>]</span><span>,</span> <span>&#34;author&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;author&#39;</span><span>]</span><span>}</span>
    <span>except</span> Exception <span>as</span> e<span>:</span>
        <span>return</span> <span>{</span><span>&#39;message&#39;</span><span>:</span> <span>str</span><span>(</span>e<span>)</span><span>}</span>

<span># Function to make POST request to update a book</span>
<span>@app<span>.</span>route</span><span>(</span><span>&#39;/book/{id}&#39;</span><span>,</span> methods<span>=</span><span>[</span><span>&#39;PUT&#39;</span><span>]</span><span>)</span>
<span>def</span> <span>update_book</span><span>(</span><span>id</span><span>)</span><span>:</span>
    book_as_json <span>=</span> app<span>.</span>current_request<span>.</span>json_body
    <span>try</span><span>:</span>
        Item <span>=</span> <span>{</span>
            <span>&#34;id&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;id&#39;</span><span>]</span><span>,</span>
            <span>&#34;title&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;title&#39;</span><span>]</span><span>,</span>
        <span>}</span>
        <span>return</span> <span>{</span><span>&#39;message&#39;</span><span>:</span> <span>&#39;ok - UPDATED&#39;</span><span>,</span> <span>&#39;status&#39;</span><span>:</span> <span>201</span><span>}</span>
    <span>except</span> Exception <span>as</span> e<span>:</span>
        <span>return</span> <span>{</span><span>&#39;message&#39;</span><span>:</span> <span>str</span><span>(</span>e<span>)</span><span>}</span>

<span># Function to make POST request to delete a particular book a book</span>
<span>@app<span>.</span>route</span><span>(</span><span>&#39;/book/{id}&#39;</span><span>,</span> methods<span>=</span><span>[</span><span>&#39;DELETE&#39;</span><span>]</span><span>)</span>
<span>def</span> <span>delete_book</span><span>(</span><span>id</span><span>)</span><span>:</span>
    book_as_json <span>=</span> app<span>.</span>current_request<span>.</span>json_body
    <span>try</span><span>:</span>
        Item <span>=</span> <span>{</span>
            <span>&#34;id&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;id&#39;</span><span>]</span><span>,</span>
            <span>&#34;author&#34;</span><span>:</span> book_as_json<span>[</span><span>&#39;author&#39;</span><span>]</span>
        <span>}</span>
        <span>return</span> <span>{</span><span>&#39;message&#39;</span><span>:</span> <span>&#39;ok - DELETED&#39;</span><span>,</span> <span>&#39;status&#39;</span><span>:</span> <span>201</span><span>}</span>
    <span>except</span> Exception <span>as</span> e<span>:</span>
        <span>return</span> <span>{</span><span>&#39;message&#39;</span><span>:</span> <span>str</span><span>(</span>e<span>)</span><span>}</span></code></pre><h2 id="Measuring-Code-Coverage">Measuring Code Coverage</h2><p><a href="https://en.wikipedia.org/wiki/Code_coverage" target="_blank" rel="noreferrer noopener">Code coverage</a> is simply a means of quantifying how much of our code is being tested. We will use <a href="https://pypi.org/project/pytest-cov/" target="_blank" rel="noreferrer noopener">pytest-cov</a> package to measure test coverage in this tutorial. It is a tool built off the <a href="https://coverage.readthedocs.io/en/coverage-5.5/" target="_blank" rel="noreferrer noopener">coverage.py</a> tool used in measuring coverage in Python code. Fortunately, pytest-cov works well with pytest.</p><p>Let&#39;s install pytest-cov:</p><pre><code>pip <span>install</span> pytest-cov</code></pre><p>Let&#39;s measure the test coverage by using the <code><span>-</span>cov</code> argument with pytest. We will measure the coverage over our source code in the <code>app<span>.</span>py</code> file:</p><pre><code>pytest --cov<span>=</span>app  --cov-report term-missing</code></pre><p>We used the <code><span>--</span>cov<span>-</span>report</code> <code>term<span>-</span>missing</code> command to specify that we want our coverage report to indicate the lines of code that are not covered by our tests.</p><p>We will get a terminal output that looks like this:</p><pre><code><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span> <span>test</span> session starts <span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>=</span>
platform win32 -- Python <span>3.7</span>.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1
rootdir: <span>\</span>aws-chalice-api-sample
plugins: cov-2.12.1
collected <span>7</span> items

tests<span>\</span>integration<span>\</span>test_integration.py <span>..</span><span>..</span>                                                    <span>[</span> <span>57</span>%<span>]</span> 
tests<span>\</span>unit<span>\</span>test_unit.py <span>..</span>.                                                                   <span>[</span><span>100</span>%<span>]</span> 

----------- coverage: platform win32, python <span>3.7</span>.7-final-0 -----------
Name     Stmts   Miss  Cover   Missing
--------------------------------------
app.py      <span>33</span>      <span>6</span>    <span>82</span>%   <span>46</span>-47, <span>59</span>-60, <span>72</span>-73
--------------------------------------
TOTAL       <span>33</span>      <span>6</span>    <span>82</span>%

<span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span> <span>7</span> passed <span>in</span> <span>2</span>.16s <span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span></code></pre><p>Note: The 6 missed exception statements in lines 46-47, 59-60, and 72-73 above are in the <code>app<span>.</span>py</code> file. The missing seemed to occur while running as a result of a pytest <a href="https://github.com/nedbat/coveragepy/issues/605" target="_blank" rel="noreferrer noopener">error</a>.</p><h2 id="Conclusion">Conclusion</h2><p>In this article, we have considered how to run unit and integration tests in Chalice applications and APIs. We also learned how to use Pytest for testing and Pytest-cov for measuring code coverage. We can now go ahead and build <a href="https://developer.ibm.com/devpractices/software-development/articles/5-steps-of-test-driven-development/" target="_blank" rel="noreferrer noopener">test-driven</a> Chalice applications with the knowledge gained.
Thanks for following through. We&#39;d be glad to have your thoughts and suggestions in the comment section. Thanks.</p></div></div>]]></content:encoded>
      <pubDate>Mon, 06 Sep 2021 14:48:00 +0000</pubDate>
    </item>
    <item>
      <title>Welcome to the New Auth0 Careers Hub</title>
      <link>https://auth0.com/blog/welcome-to-the-new-auth0-careers-hub/</link>
      <description>Our redefined destination for exploring what makes Auth0 a great place to work.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>At Auth0, our core philosophy is based on the principles of collaboration, experimentation, learning, transparency, and passion. Our culture revolves around our core values, and we want to recruit others who share the same beliefs and passion for what we do. In that spirit, we are excited to present our new Auth0 Careers Hub.</p><p>More than just a refresh, our team set out to create new pages to reflect our brand, include a larger emphasis on diversity and inclusion, and share real stories from our employees. Our message with this new launch is that here at Auth0, we invest in a culture of inclusion where every Auziro can show up as their authentic self.</p><h2 id="Real-Stories-from-Real-Employees">Real Stories from Real Employees</h2><p>What better way to showcase our culture authentically than through stories from Auziros themselves? With a new page dedicated to Life at Auth0, highlighting our Employee Resource Groups, global, remote-friendly culture, and more, we showcase more than 60 stories from employees that highlight how we live and breathe our values. Hear from our teams on how we make remote work really work for our Auziros — from team meetings to performance reviews.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2iKl8xMHCzupRhjLbiujWz/a438b6f175a642b99c198cf2011a88d6/careers_blogpost_02.jpg" alt="Real Stories from Real Employees"/></p><h2 id="A-Transparent-Recruiting-Process">A Transparent Recruiting Process</h2><p>Throughout the design process, we kept all candidate personas in mind when crafting the new content flow and structures. No matter which position a candidate may be looking for, we strive to provide clarity into our process and programs for those interested in learning more before embarking on this journey — so there are no surprises along the way.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2Sg9MZoRU09PtJAw6DKZxt/86593684a762e53ca71938c1c3d6c09e/careers_blogpost_03.png" alt="A Transparent Recruiting Process"/></p><h2 id="One-Team--One-Score">One Team, One Score</h2><p>Like everything we do, this refresh was truly an embodiment of our core values in the amazing collaboration that was crucial in bringing this to life. And as we <a href="https://auth0.com/blog/okta-acquisition-announcement/" target="_blank" rel="noreferrer noopener">heard from Eugenio</a> on the recent Okta acquisition, the Auth0 brand and product will continue to be part of the larger strategy, and hiring will always be an important focus. We hope this will resonate with all future Auziros that have yet to join our amazing team. </p><p>If this sounds like you, <a href="https://auth0.com/careers" target="_blank" rel="noreferrer noopener">check out our careers hub</a> and help us make the internet safer.</p></div></div>]]></content:encoded>
      <pubDate>Thu, 02 Sep 2021 21:02:00 +0000</pubDate>
    </item>
    <item>
      <title>State Pattern in Python</title>
      <link>https://auth0.com/blog/state-pattern-in-python/</link>
      <description>Learn to implement state pattern and finite state machines using Python.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><a href="https://en.wikipedia.org/wiki/Software_design_pattern" target="_blank" rel="noreferrer noopener">Design patterns</a> are conventional solutions to common challenges in software development using <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank" rel="noreferrer noopener">Object-oriented programming</a>. One of the famous design patterns for developing scalable and flexible software is the state pattern. You&#39;ll learn about the state pattern and how to apply it to improve your software project in this article.</p><h2 id="Finite-State-Machine">Finite State Machine</h2><p>Let&#39;s define a <a href="https://en.wikipedia.org/wiki/Finite-state_machine" target="_blank" rel="noreferrer noopener">finite state machine</a> (FSM) before moving on to the state design pattern. It is well known that the concepts of state patterns and finite-state machines have a close relationship. An FSM is something that behaves differently depending on its internal state. In computer programming, the behavior of an object in an application varies depending on its state. A switch and a lightbulb are simple examples of FSM. &#34;ON&#34; and &#34;OFF&#34; are the two possible states of the light bulb. To change the state of the bulb &#39;ON&#39; or &#39;OFF&#39;, simply flip the switch. Transition is the process of moving from one state to another. Transition is affected by several factors. In the case of the light bulb, it is dependent on the input from the switch. The state diagram, which is shown below, graphically depicts the states and transitions.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6Y4Ljm8KBa45GF54np9a8i/b5bff5c1cf9b5a8ead644a110f9db059/01_bulb_state_diagram.png" alt="light bulb state diagram"/></p><p>We can implement the state machine using any programming language. Depending on a few factors, our code behaves differently. You can implement the preceding light bulb example as follows:</p><pre><code><span>class</span> <span>LightBulb</span><span>:</span>
  _state <span>=</span> <span>&#39;OFF&#39;</span>    <span># initial state of bulb</span>
  
  <span>def</span> <span>onOff</span><span>(</span>self<span>,</span> switch<span>)</span><span>:</span>
    <span>if</span> switch <span>==</span> <span>&#39;ON&#39;</span><span>:</span>
        self<span>.</span>_state <span>=</span> <span>&#39;ON&#39;</span>
    <span>elif</span> switch <span>==</span> <span>&#39;OFF&#39;</span><span>:</span>
        self<span>.</span>_state <span>=</span> <span>&#39;OFF&#39;</span>
    <span>else</span><span>:</span>
        <span>continue</span>          <span># if we get wrong input</span></code></pre><p>For small systems, such as the one described above, the code appears to be straightforward and simple. However, if there are many states and transitions, our code will get flabby with conditional statements. The code becomes more extensive, and it won&#39;t be easy to maintain the application. If you want to add additional states or transitions to the program, you&#39;ll have to change the entire code base. You can use the <strong>State Design Pattern</strong> in these cases.</p><h2 id="State-Pattern">State Pattern</h2><p>It is a behavioral design pattern. You can use the state pattern to implement state-specific behavior in which objects can change their functionality at runtime. You can use it to avoid using conditional statements when changing an object&#39;s behavior based on its state. In the state pattern, you should <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming" target="_blank" rel="noreferrer noopener">encapsulate</a>) different states in separate <code>State</code> classes. The original class keeps a reference to a state object based on its current state rather than using conditional statements to implement state-dependent functionality.</p><h2 id="UML-Diagram">UML Diagram</h2><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7EXrJIISe60aDo65BUFXgW/caabc74e7fe1d13bc1150ce6baa98edb/02_UML_state_class.png" alt="UML class diagram of state pattern"/></p><p>1) <strong>Context</strong> - it is the original class of our application. It maintains a reference to one of the concrete states on which its behavior depends. It also has a method to modify the internal state.</p><p>2) <strong>State interface</strong> - All supported states share the same state interface. Only the state interface allows <em>Context</em> to communicate with state objects. <em>Context</em> can only communicate with state objects via the state interface.</p><p>3) <strong>Concrete states</strong> - For each state, these objects implement the &#39;State&#39; interface. These are the main objects which contain the state-specific methods.</p><h2 id="How-does-it-work-">How does it work?</h2><p><img src="https://images.ctfassets.net/23aumh6u8s0i/9jQ2UH5r4b4amneAHwIxG/fa3b9affd7c467bc6513b64cd1362114/03_UML_state_sequence.png" alt="UML sequence diagram of state pattern"/></p><p>Assume the <em>Context</em> is configured with an initial state, <code>concreteStateA</code>.  It behaves according to its initial state. The <em>Context</em> now implements the <code>doSomething</code> method according to <code>concreteStateA</code>. The concrete states should contain a back reference to call back and change <em>Context&#39;s</em> current state object. If a state transition occurs, the <em>Context&#39;s</em> <code>setSate</code> method is invoked, referencing the new state, <code>concreteStateB</code>. The <em>Context</em> changed its internal state and behavior. Now, it uses the <code>concreteStateB</code> to implement the <code>doSomething</code> method. The basic idea is that the states can change the context&#39;s state automatically. As a developer, you can modify the states by using any number of instances of <code>setState</code>.</p><p>If you want to add another state, simply create a new concrete state object without changing the <em>Context</em> of the application.</p><h2 id="Implementation">Implementation</h2><p>Let&#39;s take a step-by-step look at implementing the state pattern.</p><p>1) Find an existing class that contains state-dependent code, or create a suitable context class. It should include a reference to a specific state as well as a method for switching between states.</p><pre><code><span>from</span> __future__ <span>import</span> annotations
<span>from</span> abc <span>import</span> ABC<span>,</span> abstractmethod

<span># the context class contains a _state that references the concrete state and setState method to change between states.</span>
<span>class</span> <span>Context</span><span>:</span>

    _state <span>=</span> <span>None</span>

    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> state<span>:</span> State<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        self<span>.</span>setState<span>(</span>state<span>)</span>

    <span>def</span> <span>setState</span><span>(</span>self<span>,</span> state<span>:</span> State<span>)</span><span>:</span>

        <span>print</span><span>(</span><span><span>f&#34;Context: Transitioning to </span><span><span>{</span><span>type</span><span>(</span>state<span>)</span><span>.</span>__name__<span>}</span></span><span>&#34;</span></span><span>)</span>
        self<span>.</span>_state <span>=</span> state
        self<span>.</span>_state<span>.</span>context <span>=</span> self

    <span>def</span> <span>doSomething</span><span>(</span>self<span>)</span><span>:</span>
        self<span>.</span>_state<span>.</span>doSomething<span>(</span><span>)</span></code></pre><p>2) Create a common State interface for all concrete states. The State interface specifies all of the methods that all Concrete States must implement and a backreference to the <em>Context</em> object. States can change the <em>Context</em> to another state by using this backreference.</p><pre><code><span>class</span> <span>State</span><span>(</span>ABC<span>)</span><span>:</span>
    <span>@property</span>
    <span>def</span> <span>context</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> Context<span>:</span>
        <span>return</span> self<span>.</span>_context

    <span>@context<span>.</span>setter</span>
    <span>def</span> <span>context</span><span>(</span>self<span>,</span> context<span>:</span> Context<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        self<span>.</span>_context <span>=</span> context

    <span>@abstractmethod</span>
    <span>def</span> <span>doSomething</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>pass</span></code></pre><p>You should define the <em>Context</em> as a <a href="https://www.geeksforgeeks.org/protected-variable-in-python/" target="_blank" rel="noreferrer noopener">protected parameter</a>. Above, <a href="https://www.programiz.com/python-programming/property" target="_blank" rel="noreferrer noopener"><code>@property</code></a> decorator is used to make the <code><span>context</span><span>(</span><span>)</span></code> method as property and <code>@context<span>.</span>setter</code> decorator to another overload of the <code><span>context</span><span>(</span><span>)</span></code> method as property setter method. Now, <code>_context</code> is protected.</p><p>3) You can define the concrete states in the classes that implement the state interface. After the <code>doSomething</code> method is called, the state of the <em>Context</em> changes. You can also change the state by defining a specific method. The state transitions use the <code>setState</code> method of the <em>Context</em>.</p><pre><code><span>class</span> <span>ConcreteStateA</span><span>(</span>State<span>)</span><span>:</span>
    <span>def</span> <span>doSomething</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>print</span><span>(</span><span>&#34;The context is in the state of ConcreteStateA.&#34;</span><span>)</span>
        <span>print</span><span>(</span><span>&#34;ConcreteStateA now changes the state of the context.&#34;</span><span>)</span>
        self<span>.</span>context<span>.</span>setState<span>(</span>ConcreteStateB<span>(</span><span>)</span><span>)</span>


<span>class</span> <span>ConcreteStateB</span><span>(</span>State<span>)</span><span>:</span>
    <span>def</span> <span>doSomething</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>print</span><span>(</span><span>&#34;The context is in the state of ConcreteStateB.&#34;</span><span>)</span>
        <span>print</span><span>(</span><span>&#34;ConcreteStateB wants to change the state of the context.&#34;</span><span>)</span>
        self<span>.</span>context<span>.</span>setState<span>(</span>ConcreteStateA<span>(</span><span>)</span><span>)</span></code></pre><p>4) You can now initiate your application with an initial state and execute the methods.</p><pre><code><span># sample application</span>
app <span>=</span> Context<span>(</span>ConcreteStateA<span>(</span><span>)</span><span>)</span>
app<span>.</span>doSomething<span>(</span><span>)</span>    <span># this method is executed as in state 1</span>
app<span>.</span>doSomething<span>(</span><span>)</span>    <span># this method is executed as in state 2</span></code></pre><p>The output of the above code looks something like this:</p><pre><code>Context<span>:</span> Transitioning to ConcreteStateA
The context is <span>in</span> the state <span>of</span> ConcreteStateA<span>.</span>
ConcreteStateA now changes the state <span>of</span> the context<span>.</span>
Context<span>:</span> Transitioning to ConcreteStateB
The context is <span>in</span> the state <span>of</span> ConcreteStateB<span>.</span>
ConcreteStateB wants to change the state <span>of</span> the context<span>.</span>
Context<span>:</span> Transitioning to ConcreteStateA</code></pre><h2 id="Example">Example</h2><p>Let&#39;s create a simple state machine that represents a real-world scenario. Consider an elevator system with buttons in the elevator cabin that allow you to go up or down. Consider that this lift only travels between two floors to keep things simple. There are primarily two possible states for the elevator: <code><span>1</span>st floor</code> and <code><span>2</span>nd floor</code>. The input from the two buttons determines the transition between states. The elevator performs different actions based on its state.</p><p>The following code is the implementation of the elevator example. Follow along with the comments for more descriptions about each method.</p><pre><code><span>from</span> __future__ <span>import</span> annotations
<span>from</span> abc <span>import</span> ABC<span>,</span> abstractmethod

<span># The Elevator class is the context. It should be initiated with a default state.</span>
<span>class</span> <span>Elevator</span><span>:</span>

    _state <span>=</span> <span>None</span>

    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> state<span>:</span> State<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        self<span>.</span>setElevator<span>(</span>state<span>)</span>

    <span># method to change the state of the object</span>
    <span>def</span> <span>setElevator</span><span>(</span>self<span>,</span> state<span>:</span> State<span>)</span><span>:</span>

        self<span>.</span>_state <span>=</span> state
        self<span>.</span>_state<span>.</span>elevator <span>=</span> self

    <span>def</span> <span>presentState</span><span>(</span>self<span>)</span><span>:</span>
        <span>print</span><span>(</span><span><span>f&#34;Elevator is in </span><span><span>{</span><span>type</span><span>(</span>self<span>.</span>_state<span>)</span><span>.</span>__name__<span>}</span></span><span>&#34;</span></span><span>)</span>

    <span># the methods for executing the elevator functionality. These depends on the current state of the object.</span>
    <span>def</span> <span>pushDownBtn</span><span>(</span>self<span>)</span><span>:</span>
        self<span>.</span>_state<span>.</span>pushDownBtn<span>(</span><span>)</span>

    <span>def</span> <span>pushUpBtn</span><span>(</span>self<span>)</span><span>:</span>
        self<span>.</span>_state<span>.</span>pushUpBtn<span>(</span><span>)</span>

    <span># if both the buttons are pushed at a time, nothing should happen</span>
    <span>def</span> <span>pushUpAndDownBtns</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>print</span><span>(</span><span>&#34;Oops.. you should press one button at a time&#34;</span><span>)</span>

    <span># if no button was pushed, it should just wait open for guests</span>
    <span>def</span> <span>noBtnPushed</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>print</span><span>(</span><span>&#34;Press any button. Up or Down&#34;</span><span>)</span>


<span># The common state interface for all the states</span>
<span>class</span> <span>State</span><span>(</span>ABC<span>)</span><span>:</span>
    <span>@property</span>
    <span>def</span> <span>elevator</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> Elevator<span>:</span>
        <span>return</span> self<span>.</span>_elevator

    <span>@elevator<span>.</span>setter</span>
    <span>def</span> <span>elevator</span><span>(</span>self<span>,</span> elevator<span>:</span> Elevator<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        self<span>.</span>_elevator <span>=</span> elevator

    <span>@abstractmethod</span>
    <span>def</span> <span>pushDownBtn</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>pass</span>

    <span>@abstractmethod</span>
    <span>def</span> <span>pushUpBtn</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>pass</span>


<span># The concrete states</span>
<span># We have two states of the elevator: when it is on the First floor and the Second floor</span>
<span>class</span> <span>firstFloor</span><span>(</span>State<span>)</span><span>:</span>

    <span># If the down button is pushed when it is already on the first floor, nothing should happen</span>
    <span>def</span> <span>pushDownBtn</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>print</span><span>(</span><span>&#34;Already in the bottom floor&#34;</span><span>)</span>

    <span># if up button is pushed, move upwards then it changes its state to second floor.</span>
    <span>def</span> <span>pushUpBtn</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>print</span><span>(</span><span>&#34;Elevator moving upward one floor.&#34;</span><span>)</span>
        self<span>.</span>elevator<span>.</span>setElevator<span>(</span>secondFloor<span>(</span><span>)</span><span>)</span>


<span>class</span> <span>secondFloor</span><span>(</span>State<span>)</span><span>:</span>

    <span># if down button is pushed it should move one floor down and open the door</span>
    <span>def</span> <span>pushDownBtn</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>print</span><span>(</span><span>&#34;Elevator moving down a floor...&#34;</span><span>)</span>
        self<span>.</span>elevator<span>.</span>setElevator<span>(</span>firstFloor<span>(</span><span>)</span><span>)</span>

    <span># if up button is pushed nothing should happen</span>
    <span>def</span> <span>pushUpBtn</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>print</span><span>(</span><span>&#34;Already in the top floor&#34;</span><span>)</span>


<span>if</span> __name__ <span>==</span> <span>&#34;__main__&#34;</span><span>:</span>
    <span># The client code.</span>

    myElevator <span>=</span> Elevator<span>(</span>firstFloor<span>(</span><span>)</span><span>)</span>
    myElevator<span>.</span>presentState<span>(</span><span>)</span>

    <span># Up button is pushed</span>
    myElevator<span>.</span>pushUpBtn<span>(</span><span>)</span>

    myElevator<span>.</span>presentState<span>(</span><span>)</span></code></pre><p>The output of the above code looks like this:</p><pre><code>Elevator is <span>in</span> firstFloor
Elevator moving upward one floor<span>.</span>
Elevator is <span>in</span> secondFloor</code></pre><p>You can implement many buttons and states elevator like in real-life one for the floor. Try using the state pattern to implement the light bulb example from the Finite state machine.</p><h2 id="Advantages-and-Disadvantages">Advantages and Disadvantages</h2><p>The state pattern, like any other programming concept, has a number of benefits as well as some drawbacks. You can avoid writing massive conditional blocks for switching between states by using the state pattern instead of hard-coding state-specific behavior. It allows you to develop a flexible and maintainable application. You can add new states and transitions to the <em>Context</em> without changing it.</p><p>It&#39;s a good idea to use the state pattern if the logic of each state is complex and the states change frequently. Otherwise, it complicates simple things by bringing a plethora of classes and objects. The state pattern adds another level of indirection by imposing clients to rely on a State object, and it extends the context class to allow State objects to change the state of the <em>Context</em>.</p><h2 id="Conclusion">Conclusion</h2><p>In this article, you learned how to use the state pattern in Python programming to design state machines. Without using larger conditional blocks to implement state-specific behavior, the state pattern makes the development process a lot easier. You can also add new states that are not dependent on other states, giving your application more flexibility. The state pattern is very similar to the <a href="https://en.wikipedia.org/wiki/Strategy_pattern" target="_blank" rel="noreferrer noopener">strategy pattern</a>, which alters strategies based on user choices. The main distinction is that concrete states are aware of other states, whereas the strategies do not. Why do we say that states are aware of other states? because each state has to know to which state they should move. For example, the first-floor state knows that they should change to the second-floor state. Another important difference with strategy pattern is that in the case of Strategy pattern, it&#39;s the client, which provides a different strategy to Context, on State pattern, the state transition is managed by Context or State itself. Try to make use of the state pattern in your software to make the development process go more smoothly.</p></div></div>]]></content:encoded>
      <pubDate>Thu, 02 Sep 2021 15:02:00 +0000</pubDate>
    </item>
    <item>
      <title>TinyGo: Good Things Come in Small Packages</title>
      <link>https://auth0.com/blog/tinygo-good-things-come-in-small-packages/</link>
      <description>A beginners guide into the world of IoT with TinyGo.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><strong>TL;DR:</strong> The concept of coding for IoT devices, CLIs and WebAssembly is not a new concept. However, what if I told you that it is possible to use Golang for all three. <a href="https://tinygo.org/" target="_blank" rel="noreferrer noopener">TinyGo</a> is a specialized project specifically designed and used for development in small places. This article explains the benefits of TinyGo, what it is, and how you can use it. It also provides you with a Golang IoT code example for you to see TinyGo in action.</p><h2 id="What-Is-TinyGo-">What Is TinyGo?</h2><p>TinyGo is Golang&#39;s baby brother. It is a compiler that allows a user to write the Golang code they are familiar with and run it in places people wouldn&#39;t have thought were possible. What this means is that the barriers to entry into some tech spaces are being gradually lowered. I say this because I am writing through experience.</p><h2 id="How-Is-TinyGo-Different-from-Golang-">How Is TinyGo Different from Golang?</h2><p>Out of the box, Golang is a feature-rich, highly-performant, compiled language, which means that Golang is compiled to machine-readable code (those funky <code><span>1</span></code> &#39;s and <code><span>0</span></code> &#39;s everyone talks about).</p><p>In turn, being compiled to machine code allows it to run directly on the hardware — all that CPU/RAM power! Another really cool feature of Golang is that when building a binary of the written program, it includes extensive cross-compatibility for a wide from of different system architectures.</p><p>Once a binary has been built, it can be run on any compatible distribution/architecture, providing it has been specified during the build process. To find the list of supported architectures (after installing Go on your machine), run this command into your terminal: <code>go tool dist list</code>.</p><p>The output will look something like this:</p><pre><code>aix/ppc64
android/386
android/amd64
android/arm
android/arm64
darwin/amd64
darwin/arm64
dragonfly/amd64
freebsd/386
<span>..</span>.</code></pre><p>So, how is TinyGo different? Well, it&#39;s the same Golang you know and love, but TinyGo is a smaller compiler based on <a href="https://llvm.org/" target="_blank" rel="noreferrer noopener">LLVM</a> technologies. It has essentially cherry-picked a number of important and available libraries and trimmed a lot of the fat from the core language.</p><p>By doing that, TinyGo becomes an even more powerful and efficient language that you can run in unexpected places. As an example of fat that&#39;s been trimmed, the library <code>html<span>/</span>template</code> cannot be imported by TinyGo as it relies upon other dependencies, which in turn are not able to be imported.</p><blockquote><p>To read up on the packages supported by TinyGo, visit the <a href="https://tinygo.org/docs/reference/lang-support/stdlib/" target="_blank" rel="noreferrer noopener">documentation pages</a>.</p></blockquote><h2 id="Where-Can-You-Use-TinyGo-">Where Can You Use TinyGo?</h2><h3 id="Use-TinyGo-with-WebAssembly">Use TinyGo with WebAssembly</h3><h4 id="What-is-WebAssembly-">What is WebAssembly?</h4><p>Web development might usually be associated with JavaScript, but this isn&#39;t always the case. WebAssembly is an official W3C standard and allows people to develop applications for the web without using JavaScript.</p><p>I first must stress, WebAssembly is not a replacement for JavaScript but can be an excellent complement. The two technologies can work well together to deliver web content. In one small sentence, WebAssembly is a format for writing code for the web. WebAssembly is designed to be highly performant, which is why a language with a small overhead is preferable.</p><p>WebAssembly allows developers to write code in a familiar language and run it through a web browser for end-users. Through this method, near-native performance is achieved, and the required support is already in your modern browser.</p><p>In essence, you can write your code in TinyGo and pass it through the WASM compiler, which turns that Golang code into machine-readable code. Then, you can run the application through a web browser easily.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/A4oW5u3cr5j5St4Z1bA0o/7714e2411c109a2e74347557be305cc1/01_tiny.png" alt="WebAssembly diagram"/></p><h3 id="Use-TinyGo-to-build-a-CLI">Use TinyGo to build a CLI</h3><h4 id="What-is-a-CLI-">What is a CLI?</h4><p>A Command Line Interface (CLI) is a standardized way for a user to interact textually with a system or application. The first primary use cases of CLIs were back in the 1960&#39;s where users could use a terminal to interact with the operating system. This was a continuous trend throughout the following decades which enabled systems to become more complex and give users more freedom on the computer they are using.</p><h4 id="Why-does-a-CLI-need-to-be-small-">Why does a CLI need to be small?</h4><p>Some CLIs interact with the operating system directly, which in turn means they will need some low-level permissions and a secure library set. Initially, people might think of a C language or Python to accomplish that task. They are established, low-level languages that have been used in some high-profile CLIs in the past.</p><p><em>Golang enters the room</em>.</p><p>However, for those that don&#39;t know, Go is derived from C. In fact, it&#39;s so close that you can call C code from within a Go program — it&#39;s called Cgo.</p><p>In recent years, Go has been the go-to language to create CLIs. Some of the most popular and most used CLIs are written in Go: Docker CLI, Kubernetes CLI (<code>kubectl</code>), GitHub CLI, just to name a few. This has been made possible by the creation of third-party libraries and imports that take care of the complex tasks developers would otherwise have to take care of themselves. </p><p>Second to this is the power hidden under the hood of the language. Go has concurrency in the form of go-routines making asynchronous programming simplistic and a garbage collector helping with memory management. All of these features (and more) help reduce the size and space taken up by an integral program, all working towards keeping programs as performant as possible.</p><p>However, if a small project needs a CLI to be written for it or the CLI is only performing some basic tasks, sometimes these large libraries and imports can be overkill. Unless the end goal is to write a complex, multi-functional CLI like the ones mentioned before, a great number of the available libraries may not even be used, resulting in overhead the project could do without. To keep a CLI small and precise, reducing waste is a top priority. This makes TinyGo a great choice for small CLIs.</p><h3 id="TinyGo-can-power-microcontrollers">TinyGo can power microcontrollers</h3><h4 id="What-is-a-microcontroller-">What is a microcontroller?</h4><p>A microcontroller is usually a single chip on a small circuit board that allows input and output (I/O). A common and well-known example is an Arduino, which is fantastic for home automation and other smaller projects around the house.</p><p>With the IoT boom in recent years, Arduinos have also seen a rise in popularity. The trouble with this is that Arduinos are usually coded in C++. To some, this can be seen as a barrier to entry as it is a complex language, and not everyone wants to learn or use it when alternatives are available.</p><p>When I began to play with IoT, I purchased a bunch of Arduinos, thinking I could do some cool projects. Then I was personally struck with the C++ barrier. Most of my work is either in Node.js or Golang. With this being the case, I took a seat and thought about how I could write the code I know and love to create these cool projects I had in mind. This is where I came across TinyGo.</p><h4 id="How-many-boards-does-TinyGo-support-">How many boards does TinyGo support?</h4><p>TinyGo is a growing project. At the time of writing, TinyGo supports over 60 microcontroller boards. These range from <a href="https://www.espressif.com/" target="_blank" rel="noreferrer noopener">Espressif boards (ESP&#39;s)</a> to <a href="https://www.adafruit.com/category/851" target="_blank" rel="noreferrer noopener">Adafruits</a> and as previously mentioned, Arduinos, opening so many doors for people to begin their journey into IoT whilst coding in a familiar language.</p><blockquote><p>Check the <a href="https://tinygo.org/docs/reference/microcontrollers/" target="_blank" rel="noreferrer noopener">documentation for each microcontroller board supported by TinyGo</a> for more details.</p></blockquote><h2 id="Why-Is-TinyGo-a-Great-Alternative-to-C---and-MicroPython-">Why Is TinyGo a Great Alternative to C++ and MicroPython?</h2><p>I am not going to the language bash. C, Python, and Go are all great languages in their own way. With that being said, there is plenty of room for this project to grow and come to fruition with the right support.</p><p>Golang has significantly grown in popularity over the past few years. It is quickly becoming the de facto choice of language for cloud-native development due to its &#34;first-class&#34; support. In the <a href="https://insights.stackoverflow.com/survey/2017#most-popular-technologies" target="_blank" rel="noreferrer noopener">Stack Overflow Developer Survey 2017 for Most popular technologies</a>, Go entered the list for the first time and only scored 4.4%. In contrast to 2020, only 3 years later, it scored <a href="https://insights.stackoverflow.com/survey/2020#technology-programming-scripting-and-markup-languages-all-respondents" target="_blank" rel="noreferrer noopener">8.8%</a>. Let&#39;s the couple that with Golang being associated with some of the most sought-after skills and top paying salaries worldwide. It is only right to assume this growth will continue.</p><p>In addition, looking at the IoT market, we can see yet another upwards trend. In 2017, Garner forecasted 8.4 billion IoT devices to be connected. Fast-track to 2025, and there is a prediction of up to 30 billion devices being connected. This is a huge leap! The growth of Golang and its baby sibling, TinyGo, can help fuel the IoT fire.</p><h2 id="TinyGo-in-Action">TinyGo in Action</h2><p>Let&#39;s look at how Golang IoT shapes up with some code!</p><p>For this blog post, I have created a small program for you to create that turns 4 LEDs on when a phototransistor detects no light. This is essentially how outdoor night lights work.</p><p>To do this, I have used:</p><ul><li>Visual Studio Code + TinyGo plugin</li><li>TinyGo version <code><span>0.18</span><span>.0</span> darwin<span>/</span>amd64</code> (using Golang version <code><span>1.16</span></code> and LLVM version <code><span>11.0</span><span>.0</span></code>)</li><li>1 x Arduino Uno R3</li><li>1 x  Breadboard</li><li>8 x Male-Male wires</li><li>5 x Resistors (1 x 10kΩ / 4 x 220Ω)</li><li>1 x Phototransistor</li><li>4 LEDs</li></ul><h3 id="Step-1-">Step 1:</h3><p>If you haven&#39;t already, <a href="https://golang.org/doc/install" target="_blank" rel="noreferrer noopener">install Go</a> and then download and <a href="https://tinygo.org/getting-started/install/" target="_blank" rel="noreferrer noopener">install TinyGo</a> on your machine.</p><p>To check if Go is installed, run the following command:</p><pre><code>go version</code></pre><p>To check if TinyGo is installed, run the following command:</p><pre><code>tinygo version</code></pre><p>Next, install the TinyGo Visual Studio Code Plugin.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/TPJESp0S9pdn3L8uAvDKn/820fe16c173b0ba789be43ad7a7be94c/02_tiny.png" alt="install tinygo vscode editor plugin"/></p><h3 id="Step-2-">Step 2:</h3><p>Plugin the board with a USB cable (in this example, I am using an Arduino R3) and target it with the editor. Once targeted, the editor will prompt a reload of the window.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3fruuXSiUdJFWW9F3vvqAh/149c1725df6a52ae2e91546e74cc1b18/03_tiny.png" alt="tinygo select the target board"/></p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6QR634B8bipgZAIBUJvdoT/8e89bc62d7c9a858b1995ad732e78e58/04_tiny.png" alt="reload the vscode editor"/></p><blockquote><p><strong>🚨 Warning 🚨:</strong> The editor might prompt you to update the <code>go dev</code> tools within the editor. If you execute the update, you may get an error due to a known bug. Until this is fixed, it is advised to not update the tools.</p></blockquote><p><img src="https://images.ctfassets.net/23aumh6u8s0i/UgrMtLf7UmXwLxhenjy6X/a6e66e3910ca85f98752fe33234b8c5b/05_tiny.png" alt="vscode update tools notification"/></p><h3 id="Step-3-">Step 3:</h3><ol start="1"><li>Create a project in the directory <code>$<span>HOME</span><span>/</span>go<span>/</span>src<span>/</span>github<span>.</span>com<span>/</span>tinygo</code></li></ol><pre><code>$ <span>mkdir</span> light-sensor</code></pre><ol start="2"><li>Change into the newly created project directory</li></ol><pre><code>$ <span>cd</span> light-sensor</code></pre><ol start="3"><li>Create a new <code><span>.</span>go</code> file for the application within the project directory</li></ol><pre><code>$ <span>touch</span> light-sensor.go</code></pre><ol start="4"><li>Create a go mod file if you are using go modules</li></ol><pre><code>$ go mod init</code></pre><ol start="5"><li>Finally, open the project in Visual Studio Code</li></ol><h3 id="Step-4-">Step 4:</h3><p>First, read the code and comments below, and then secondly, write it out. Don&#39;t copy and paste!</p><pre><code><span>package</span> main

<span>import</span> <span>(</span>
    <span>&#34;machine&#34;</span>
    <span>&#34;time&#34;</span>
<span>)</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>

    <span>// Initialise Analog pins</span>
    machine<span>.</span><span>InitADC</span><span>(</span><span>)</span>

    <span>// Set the light sensor to Analog pin 0</span>
    lightSensor <span>:=</span> machine<span>.</span>ADC<span>{</span>Pin<span>:</span> machine<span>.</span>ADC0<span>}</span>
    lightSensor<span>.</span><span>Configure</span><span>(</span>machine<span>.</span>ADCConfig<span>{</span><span>}</span><span>)</span>
    <span>// Set the LEDs to the corresponding pins</span>
    leds <span>:=</span> <span>[</span><span>]</span>machine<span>.</span>Pin<span>{</span>
        machine<span>.</span>D7<span>,</span>
        machine<span>.</span>D8<span>,</span>
        machine<span>.</span>D9<span>,</span>
        machine<span>.</span>D10<span>,</span>
    <span>}</span>

    <span>// Configure each LED as an output</span>
    <span>for</span> <span>_</span><span>,</span> led <span>:=</span> <span>range</span> leds <span>{</span>
        led<span>.</span><span>Configure</span><span>(</span>machine<span>.</span>PinConfig<span>{</span>Mode<span>:</span> machine<span>.</span>PinOutput<span>}</span><span>)</span>
    <span>}</span>

    <span>// Constantly loop to get the light sensor reading every 0.1 seconds</span>
    <span>for</span> <span>{</span>
        <span>// 30000 is the lighting threshold for my environment</span>
        <span>if</span> lightSensor<span>.</span><span>Get</span><span>(</span><span>)</span> <span>&gt;</span> <span>30000</span> <span>{</span>
            <span>// Turn the LEDs off</span>
            <span>for</span> <span>_</span><span>,</span> led <span>:=</span> <span>range</span> leds <span>{</span>
                led<span>.</span><span>Set</span><span>(</span><span>false</span><span>)</span>
            <span>}</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>// Turn the LEDs on</span>
            <span>for</span> <span>_</span><span>,</span> led <span>:=</span> <span>range</span> leds <span>{</span>
                led<span>.</span><span>Set</span><span>(</span><span>true</span><span>)</span>
            <span>}</span>
        <span>}</span>

        <span>// Time to wait before next light sensor reading is collected</span>
        time<span>.</span><span>Sleep</span><span>(</span>time<span>.</span>Millisecond <span>*</span> <span>100</span><span>)</span>
    <span>}</span>
<span>}</span></code></pre><h3 id="Step-5-">Step 5:</h3><p>Connect the components, so they resemble the circuit board shown below.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2DfJWFFXVvp38jclNPNH0m/21c2eae0341fc09b98f8daff298063ed/06_tiny.png" alt="circuit board diagram"/></p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5CWIRVVG7BAMXeryu8d1EU/1be865f5accd679cd8ba55ca33576d12/07_tiny_pic.jpg" alt="circuit board"/></p><h3 id="Step-6-">Step 6:</h3><p>Next, find what port the connected device is running on. To do that, enter the following command into a terminal or navigate to the device manager.</p><p><strong>Mac:</strong></p><pre><code>$ <span>ls</span> /dev/cu*</code></pre><p><strong>Linux:</strong></p><pre><code>$ <span>ls</span> /dev/tty*</code></pre><p><strong>Windows:</strong></p><p>Open Device Manager and expand the Ports (COM &amp; LPT) list. Find your connected device and make a note of the port number. You will need this to flash the device in the next step.</p><p>Alternatively, visit <a href="https://www.mathworks.com/help/supportpkg/arduinoio/ug/find-arduino-port-on-windows-mac-and-linux.html" target="_blank" rel="noreferrer noopener">MathWorks</a> website for more information on how to find the port number of your connected device.</p><h3 id="Step-7-">Step 7:</h3><p>Now you have the port number, the device is connected and targeted through the editor, and you have written the code. The next step is to flash the board. To do this, enter the command below into a terminal.</p><pre><code>tinygo flash -target<span>=</span><span>&lt;</span>board-you-are-targeting<span>&gt;</span> -port<span>=</span><span>&lt;</span>device-port-from-step-<span><span>6</span>&gt;</span> <span>&lt;</span>name-of-file<span>&gt;</span></code></pre><p>Example command:</p><pre><code>tinygo flash -target<span>=</span>Arduino -port<span>=</span>/dev/cu.usbmodem143201 light-sensor.go</code></pre><p>Once you have completed the device flash, it should look like this:</p><p><img src="https://imgur.com/srh5UM1.gif"/></p><h2 id="Takeaways">Takeaways</h2><ol start="1"><li>TinyGo is an excellent alternative for embedded systems and WebAssembly development.</li><li>Being a smaller compiler for the Go language, existing Go developers can enter the IoT space with their current skills.</li><li>Adoption is continuously growing, and TinyGo is supported by the most common microcontroller boards already, reducing the barriers to entry for newcomers and hobbyists.</li></ol><p>TinyGo is still a very experimental project which has come on leaps and bounds over a short period of time. With Go&#39;s impact in the software world continuing to grow, TinyGo could be a project to keep an eye on. Having multiple lightweight alternatives to the main language is needed for IoT and edge computing since there is often limited compute power available and overall needs exploding. TinyGo is just another example of a great slimmed-down alternative to the dominant languages for microcontrollers. I, for one, will certainly be keeping an eye out for a linear adoption pattern and continue to monitor and research exciting projects like this.</p></div></div>]]></content:encoded>
      <pubDate>Tue, 31 Aug 2021 14:10:00 +0000</pubDate>
    </item>
    <item>
      <title>Best Practices for Flask API Development</title>
      <link>https://auth0.com/blog/best-practices-for-flask-api-development/</link>
      <description>Learn how to design and build REST APIs with Python and Flask following best practices.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>Python is my favorite programming language. Its adaptability, readability, and coding speed are unique and make <a href="https://livecodestream.dev/post/what-is-python-best-for/" target="_blank" rel="noreferrer noopener">python a powerful choice in various projects</a>, from data science projects to scripting and, of course, APIs.</p><p>Python is a popular choice for API development, not only because it is one of the <a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages" target="_blank" rel="noreferrer noopener">most loved programming languages</a>, but also because of its rich ecosystem of libraries and frameworks that serve that goal, libraries with immense popularity such as <a href="https://www.djangoproject.com/" target="_blank" rel="noreferrer noopener">Django</a>, <a href="https://flask.palletsprojects.com/" target="_blank" rel="noreferrer noopener">Flask</a>, and <a href="https://fastapi.tiangolo.com/" target="_blank" rel="noreferrer noopener">FastAPI</a>.</p><p>But which framework should you use to build your APIs with Python? It’s 100% up to you, but there are important considerations to keep in mind. After all, some of these frameworks are different, even from the ideology.</p><ul><li>Django is an all-inclusive framework. It provides tools and modules for handling API requests, serialization, database connections, automatic admin UI generation, and so much more.</li><li>Flask, on the contrary, is a minimalist framework, it provides only the necessary tools, but it extends its functionality with additional libraries and frameworks. The great part is, you decide exactly what you need for your project, nothing more.</li><li>FastAPI is a relatively new framework. It makes use of newer python features such as type-hints, concurrency handling (with async), and it’s super fast.</li></ul><p>I work a lot with Flask and FastAPI, and I love both. I love the flexibility and adaptability of these frameworks, and for today&#39;s article, we will be focusing on Flask.</p><p>The following tips and practices are the result of research and more than eight years of experience building and shipping production-grade APIs with Python:</p><ul><li>Design your API endpoints with proper names and HTTP verbs</li><li>How to properly structure your application</li><li>Build your documentation from the code</li><li>Testing</li></ul><p><strong>Let’s get started!</strong> 🚀</p><h2 id="Design-Your-API-Endpoints-with-Proper-Names-and-HTTP-Verbs">Design Your API Endpoints with Proper Names and HTTP Verbs</h2><p>An adequately designed API is easy and straightforward for developers to understand. By reading the <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier" target="_blank" rel="noreferrer noopener">URI</a> and HTTP verb (more on this later), a developer can pretty much have a good understanding of what to expect to happen when calling a particular method.</p><p>But how does that work? Let’s start with naming URIs. In REST, we called <code>Resource</code> to a first-level data representation. Naming these resources <strong>consistently</strong> throughout your API will turn out to be one of the best decisions for the long term.</p><p>Note that I highlighted consistently in the previous sentence, as it’s a key factor. Sure, there are particular ways to name your resources, and we will cover them, but being consistent is more important to the actual convention you choose.</p><p>Let’s start getting practical by modeling a simple eCommerce website with customers, orders, and a checkout process.</p><p>Our primary resource is <code>customers</code>, which is a collection of the instance <code>customer</code>. With this information, we can identify the collection resource by the URI <code><span>/</span>customers</code> or a single resource by using the URI <code><span>/</span>customers<span>/</span><span>{</span>customerId<span>}</span></code>. Subsequently, we can identify sub-resources such as <code>orders</code>, and we can identify them as <code><span>/</span>customers<span>/</span><span>{</span>customerId<span>}</span><span>/</span>orders</code>, or a single order resource by <code><span>/</span>customers<span>/</span><span>{</span>customerId<span>}</span><span>/</span>orders<span>/</span><span>{</span>orderId<span>}</span></code>.</p><h3 id="Best-practices-naming-resources">Best practices naming resources</h3><ol start="1"><li>Use nouns in their plural form to represent resources, eg:
 <ul><li>✅ Users of a system: <code><span>/</span>users</code>, <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span></code></li><li>✅ User’s playlists: <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span><span>/</span>playlists</code>, <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span><span>/</span>playlists<span>/</span><span>{</span>playlistId<span>}</span></code></li></ul></li><li>Use hyphens “-” to separate words and improve redeability
 <ul><li>✅ <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span><span>/</span><span>-</span>mobile<span>-</span>devices</code></li><li>❌ <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span><span>/</span>mobileDevices</code></li><li>❌ <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span><span>/</span>mobile_devices</code></li></ul></li><li>Use forward slashes “/’ to indicate hierarchy
 <ul><li>✅ <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span><span>/</span>mobile<span>-</span>devices</code></li><li>❌ <code><span>/</span>users<span>-</span>mobile<span>-</span>devices<span>/</span><span>{</span>userId<span>}</span></code></li><li>❌ <code><span>/</span>users<span>-</span>mobile<span>-</span>devices<span>/</span><span>?</span>userId<span>=</span><span>{</span>userId<span>}</span></code></li></ul></li><li>Use only lowercase letters in URIs
 <ul><li>✅ <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span><span>/</span>mobile<span>-</span>devices</code></li><li>❌ <code><span>/</span>Users<span>/</span><span>{</span>userId<span>}</span><span>/</span>Mobile<span>-</span>Devices</code></li></ul></li></ol><p>Now that we understand how to name resources, we need to think about actions. There are methods in our APIs that are procedural by nature and are not related to a specific resource, e.g., checkout, run, play, etc.</p><h3 id="Best-practices-naming-actions">Best practices naming actions</h3><ol start="1"><li>Use verbs to represent actions, e.g.:
 <ul><li>✅ Execute a checkout action: <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span><span>/</span>cart<span>/</span>checkout</code></li></ul></li><li>Same as resources, use hyphens, forward slashes, and lowercase letters.</li></ol><p>One crucial point here is to differentiate between CRUD functions and actions, as both are actions. In REST, CRUD operations, such as Create, Read, Update and Delete, are handled through HTTP verbs and not by the URI.</p><h3 id="But-what-are-HTTP-verbs-or-HTTP-request-methods-">But what are HTTP verbs or HTTP request methods?</h3><p>HTTP defines a set of request methods to indicate an action to be performed for a resource (sounds familiar?). The list includes several, but we will be focusing on 5:</p><ul><li><strong>GET</strong>: should be for data retrieval.</li><li><strong>POST</strong>: should be used to create a new resource.</li><li><strong>PUT</strong>: should be used to update information about a specific resource.</li><li><strong>DELETE</strong>: should be used to delete a particular resource.</li><li><strong>PATCH</strong>: should be used to update partial information about a particular resource.</li></ul><h3 id="Example-for-our-eCommerce-website">Example for our eCommerce website</h3><ul><li>✅ <strong>GET</strong> <code><span>/</span>users</code>: lists of all users.</li><li>✅ <strong>POST</strong> <code><span>/</span>users</code>: creates a new user.</li><li>✅ <strong>PUT</strong> <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span></code>: updates a user.</li><li>✅ <strong>DELETE</strong> <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span></code>: deletes a specific user.</li><li>✅ <strong>PATCH</strong> <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span></code>: partially updates a user.</li><li>✅ <strong>GET</strong> <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span><span>/</span>orders</code>: lists of all orders for a particular user.</li><li>✅ <strong>POST</strong> <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span><span>/</span>cart<span>/</span>checkout</code>: runs the checkout process.</li></ul><p>What you shouldn&#39;t do:</p><ul><li>❌ <code><span>/</span>users<span>/</span>get<span>-</span>all</code></li><li>❌ <code><span>/</span>users<span>/</span>create</code></li><li>❌ <code><span>/</span>users<span>/</span><span>{</span>userId<span>}</span><span>/</span>list<span>-</span>orders</code></li></ul><p>In any form of GET, POST, or another verb.</p><h2 id="How-to-Properly-Structure-Your-Application">How to Properly Structure Your Application</h2><p>I’d like to start this section by saying that there’s no one correct way to structure your application depending on application size, modules, requirements, or even personal preferences. This could vary. However, I’d like to introduce you to how my team structures Flask applications, and we used this setup for multiple production projects.</p><p>You can follow the explanation of the structure in the article, and you can also find this structure ready to use in the <a href="https://github.com/bajcmartinez/flask-api-starter-kit" target="_blank" rel="noreferrer noopener">Flask API starter kit on github</a>.</p><pre><code>project/
    api/
        model/
            __init__.py
            welcome.py
        route/
            home.py
        schema/
            __init__.py
            welcome.py
        service
            __init__.py
            welcome.py

    test/
        route/
            __init__.py
            test_home.py
        __init.py

    .gitignore
    app.py
    Pipfile
    Pipfile.lock</code></pre><p>Let’s now break it down and explain each module.</p><p>All the application magic happens inside the API module (<code><span>/</span>api</code>), there, we split the code into 4 main parts:</p><ul><li>The <code>models</code> are the data descriptor of our application, in many cases related to the database model. How each model is defined will heavily depend on the library you use to connect to your database.</li><li>The <code>routes</code> are the URIs to our application, where we define our resources and actions.</li><li>The <code>schemas</code> are the definitions for inputs and outputs of our API, what parameters are allowed, what information we will output. They correlate to our resources, but they are not necessarily the same as our models.</li><li>The <code>services</code> are modules that define application logic or interact with other services or the db layer. Routes should be as simple as possible and delegate all logic to the services.</li></ul><p>Each endpoint in Flask can be defined on its own or by groups called <a href="https://flask.palletsprojects.com/en/2.0.x/blueprints/" target="_blank" rel="noreferrer noopener">blueprints</a>. In my case, I like the grouping Blueprints provide, and I use them for each resource. Let’s take a look at what an example of our welcome route (<code><span>.</span><span>/</span>api<span>/</span>route<span>/</span>home<span>.</span>py</code>) would look like:</p><pre><code><span>from</span> http <span>import</span> HTTPStatus
<span>from</span> flask <span>import</span> Blueprint
<span>from</span> flasgger <span>import</span> swag_from
<span>from</span> api<span>.</span>model<span>.</span>welcome <span>import</span> WelcomeModel
<span>from</span> api<span>.</span>schema<span>.</span>welcome <span>import</span> WelcomeSchema

home_api <span>=</span> Blueprint<span>(</span><span>&#39;api&#39;</span><span>,</span> __name__<span>)</span>


<span>@home_api<span>.</span>route</span><span>(</span><span>&#39;/&#39;</span><span>)</span>
<span>@swag_from</span><span>(</span><span>{</span>
    <span>&#39;responses&#39;</span><span>:</span> <span>{</span>
        HTTPStatus<span>.</span>OK<span>.</span>value<span>:</span> <span>{</span>
            <span>&#39;description&#39;</span><span>:</span> <span>&#39;Welcome to the Flask Starter Kit&#39;</span><span>,</span>
            <span>&#39;schema&#39;</span><span>:</span> WelcomeSchema
        <span>}</span>
    <span>}</span>
<span>}</span><span>)</span>
<span>def</span> <span>welcome</span><span>(</span><span>)</span><span>:</span>
    <span>&#34;&#34;&#34;
    1 liner about the route
    A more detailed description of the endpoint
    ---
    &#34;&#34;&#34;</span>
    result <span>=</span> WelcomeModel<span>(</span><span>)</span>
    <span>return</span> WelcomeSchema<span>(</span><span>)</span><span>.</span>dump<span>(</span>result<span>)</span><span>,</span> <span>200</span></code></pre><p>Let’s break all of it into 3 pieces:</p><pre><code>home_api <span>=</span> Blueprint<span>(</span><span>&#39;api&#39;</span><span>,</span> __name__<span>)</span></code></pre><p>Here is where we declared our Blueprint, which we can consequently use to declare our endpoints or routes. In this case, our grouping is pretty basic, but we can do much more with grouping, like defining prefixes, resource folders, and more.</p><p>For example if we would like to have our <code>home</code> blueprint always as a nested route of <code><span>/</span>home<span>-</span>service</code>, we could do:</p><pre><code>home_api <span>=</span> Blueprint<span>(</span><span>&#39;api&#39;</span><span>,</span> __name__<span>,</span> url_prefix<span>=</span><span>&#39;/home-service&#39;</span><span>)</span></code></pre><p>Next we declare one route, but we split it in 2 parts:</p><pre><code><span>@home_api<span>.</span>route</span><span>(</span><span>&#39;/&#39;</span><span>)</span>
<span>@swag_from</span><span>(</span><span>{</span>
    <span>&#39;responses&#39;</span><span>:</span> <span>{</span>
        HTTPStatus<span>.</span>OK<span>.</span>value<span>:</span> <span>{</span>
            <span>&#39;description&#39;</span><span>:</span> <span>&#39;Welcome to the Flask Starter Kit&#39;</span><span>,</span>
            <span>&#39;schema&#39;</span><span>:</span> WelcomeSchema
        <span>}</span>
    <span>}</span>
<span>}</span><span>)</span></code></pre><p>We use annotations on top of functions to convert them into endpoints and provide additional information, e.g., documentation information, more on that in the next section.</p><p>And finally, our route code, which is just a Python function.</p><pre><code><span>def</span> <span>welcome</span><span>(</span><span>)</span><span>:</span>
    <span>&#34;&#34;&#34;
    1 liner about the route
    A more detailed description of the endpoint
    ---
    &#34;&#34;&#34;</span>
    result <span>=</span> WelcomeModel<span>(</span><span>)</span>
    <span>return</span> WelcomeSchema<span>(</span><span>)</span><span>.</span>dump<span>(</span>result<span>)</span><span>,</span> <span>200</span></code></pre><p>Note that we don’t simply return a string or JSON object directly, but we use our schemas instead. In our example, I’m using <a href="https://flask-marshmallow.readthedocs.io/en/latest/" target="_blank" rel="noreferrer noopener">flask-marshmallow</a> serialization library for its purposes.</p><h2 id="Build-Your-Documentation-from-the-Code">Build Your Documentation from the Code</h2><p>You build your API, you shipped to production, and developers are eager to consume it, but how would they know what endpoints are available and how to use them? The simple answer is by reading the documentation.</p><p>The documentation can be built in 2 ways, you can open up an editor and write it “manually”, or you can use the code to generate your documentation. If you like the idea of automatic documentation, you will love <a href="https://swagger.io/" target="_blank" rel="noreferrer noopener">swagger</a>.</p><p>Swagger is an open-source specification that allows you to describe each element of your API so that any machine or system can interpret it and interact with it. Thanks to this specification, many tools have been developed to provide rich interfaces to make our documentation dynamic and interactive, but also to provide developers with tools to easily generate these swagger files.</p><p>For Flask, there are multiple libraries for automatic Swagger generation, but my favorite is <a href="https://github.com/flasgger/flasgger" target="_blank" rel="noreferrer noopener">flasgger</a>. Flassger provides annotations and other tools to generate your documentation, and it also provides a pretty web interface where you can see each endpoint, its inputs, and outputs and even run the endpoints directly from the docs.</p><p>Here is an image of it in action:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3Dz9nOtHkd2JlQxbcCKKKQ/b65d997f2bf20418a7143279e096940b/swagger_demo.png" alt="Swagger demo page"/></p><p>It’s highly configurable and compatible with our serialization library by using an additional library called <a href="https://apispec.readthedocs.io/en/latest/" target="_blank" rel="noreferrer noopener">apispec</a>. It’s all pretty easy to set up, but you can also make use of the <a href="https://github.com/bajcmartinez/flask-api-starter-kit" target="_blank" rel="noreferrer noopener">Flask starter kit</a>, and you will have it all done for you.</p><p>But once you have it up and running, where is the information taken for the docs? From 2 places:</p><ul><li><p>Remember our swag_from function annotation? There we can provide detailed information about the inputs and outputs</p><pre><code>  <span>@swag_from</span><span>(</span><span>{</span>
      <span>&#39;responses&#39;</span><span>:</span> <span>{</span>
          HTTPStatus<span>.</span>OK<span>.</span>value<span>:</span> <span>{</span>
              <span>&#39;description&#39;</span><span>:</span> <span>&#39;Welcome to the Flask Starter Kit&#39;</span><span>,</span>
              <span>&#39;schema&#39;</span><span>:</span> WelcomeSchema
          <span>}</span>
      <span>}</span>
  <span>}</span><span>)</span></code></pre></li><li><p>We can also use string literals in functions to provide a description for the endpoint, similar to what we did here:</p><pre><code>  <span>def</span> <span>welcome</span><span>(</span><span>)</span><span>:</span>
      <span>&#34;&#34;&#34;
      1 liner about the route
      A more detailed description of the endpoint
      ---
      &#34;&#34;&#34;</span></code></pre></li></ul><p>There are many more options and customizations; it’s all well documented on their <a href="https://github.com/flasgger/flasgger" target="_blank" rel="noreferrer noopener">official docs</a>.</p><h2 id="Testing">Testing</h2><p>If you are like me, perhaps you hate writing tests, but if you are like me, you know it’s worth it. Testing, when done properly, increases efficiency and quality in the long run. They also reassure developers when making changes, refactoring, or building new features on existing systems.</p><p>Building tests shouldn’t be too hard, and it should happen naturally during development. I struggled a lot with it in the past because I’d always first develop the feature, the endpoint, or the function and then write the tests, just to get it done.</p><p>I’m not saying that approach is wrong, but there’s a better way. TDD, or test-driven development, it’s a concept idea where you write tests first, and just then you write the actual code we want to test.</p><p>How does it work? Let’s suppose we need to write a function that will add 2 numbers and return the result; exciting, right?</p><p>With TDD, our approach would be first to write the tests.</p><pre><code><span>def</span> <span>test_answer</span><span>(</span><span>)</span><span>:</span>
    <span>assert</span> sum_two_numbers<span>(</span><span>3</span><span>,</span> <span>5</span><span>)</span> <span>==</span> <span>8</span></code></pre><p>Next, we run the tests, and it fails because our function doesn’t even exist yet. So next, we write our function:</p><pre><code><span>def</span> <span>sum_two_numbers</span><span>(</span>num1<span>,</span> num2<span>)</span><span>:</span>
    <span>return</span> num1 <span>*</span> num2</code></pre><p>Next, we rerun our tests, and they still fail. Our assertion fails, but why? It turns out that I made a simple mistake. As clumsy as I am, I put a * instead of a +; this would have been very hard to notice without our tests, but thanks god, we have them.</p><p>We fix our function, and now everything runs perfectly.</p><pre><code><span>def</span> <span>sum_two_numbers</span><span>(</span>num1<span>,</span> num2<span>)</span><span>:</span>
    <span>return</span> num1 <span>+</span> num2</code></pre><p>In the exercise we did, it sounds kind of silly, but with more complex functions and code mistakes happen, and having tests first will help a lot; I say that from experience.</p><h2 id="Conclusion">Conclusion</h2><p>Best practices can be different for different frameworks, problems to solve, or even people, there’s no one way of doing things right, and that’s something I love about programming. However, having basic principles to rely on when designing and developing APIs can help your team, and other developers consume your API products.</p><p>Being consistent in naming, separating concepts in modules or folders in your project, documenting directly from your code, and properly testing are just examples of things that can make your life easier, more productive, and take you to the next level.</p><p>I hope you enjoyed reading this article!</p></div></div>]]></content:encoded>
      <pubDate>Mon, 30 Aug 2021 14:56:00 +0000</pubDate>
    </item>
    <item>
      <title>Introduction to Async Programming in C#</title>
      <link>https://auth0.com/blog/introduction-to-async-programming-in-csharp/</link>
      <description>Most languages and frameworks support asynchronous programming. But, what is it exactly? Learn about async programming and how to implement it in C#.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>You probably already read about asynchronous programming. <code><span>async</span></code> and <code><span>await</span></code> words are used everywhere, no matter which programming language we choose. Talking about .NET framework, and C# in particular, we have some native functions, classes, and reserved words that we can use to implement asynchronous tasks and workflows in our projects.</p><p>In this article, we will talk about synchronism, parallelism, concurrency, and how to implement asynchronous algorithms in our C# applications.</p><h2 id="Synchronous-and-Asynchronous-Tasks">Synchronous and Asynchronous Tasks</h2><p>As a developer, you surely faced scenarios where certain actions or operations took a considerable amount of time to execute. We regularly have to do long-running tasks such as reading a file, calling an API, or downloading a big file. We could wait for one of these tasks to be finished before executing another task. If that&#39;s the case, we say we are working in a &#34;synchronous&#34; way. By doing this, the whole application gets blocked and stops responding until the whole task is completed, and we can move on to a new one.</p><p>In some cases, we don&#39;t have any alternative. If we have Task1 and Task2 that depend on the result of the first action, we will have to wait until Task1 finishes executing to start Task2. But we could have the scenario where the subsequent tasks (or some of them) don&#39;t depend on the result of the previous long-running task. If that&#39;s the case, we have different strategies and approaches that we could take to make our application faster and in a more performant way.</p><p>For example, we could have an application that runs concurrent tasks internally. There is a button and a task executed when it is clicked. Right after the user clicks on the button, the application can trigger a separate thread to run the requested task. In the meantime, the main thread becomes available to execute other actions while the button&#39;s task is executed in the background. Doing this, we keep the UI responsive in case the user wants to interact with it.</p><p>Another scenario would be needing to run multiple copies of a certain group of actions or instructions. An example of this would be uploading many files at the same time. In this case, our application could trigger one thread per file and execute the necessary code inside of them. Doing this, we would be processing the files in a &#34;parallel&#34; way. In a nutshell, here is the difference between the two concepts: concurrency means the application is making progress on more than one task at the same time, while parallelism is about running multiple tasks simultaneously.</p><p>But let&#39;s say we have to read a big file, call an API, and do some complex calculations. There is no dependency between the three tasks, but we need the result of all of them to continue the execution of our application and update the UI. In this case, we could execute our tasks &#34;asynchronously&#34; with the three ones running simultaneously and wait for their result to do the subsequent tasks.</p><h2 id="What-Is-Asynchronous-Programming-">What Is Asynchronous Programming?</h2><p>We could define asynchronous programming as the way of executing programming code in a thread without having to wait for an I/O-bound or CPU-bound task to finish. I/O-bound operations could be file-system accesses, HTTP requests, API calls, or database queries. And CPU-bound operations would be actions like encrypting data, complex calculations, image or document management.</p><p>One of the ideas of asynchronous programming is to divide our logic into <em>awaitable</em> tasks so that we don&#39;t block the execution of our application. We can call an async method and get a task object that represents it. In the meantime, we can do some not related and not dependant work. After we execute those operations, we await the async task, which may already be finished or not. If the execution is finished, we will get the resulting value from the task and use it in the next dependant operations.</p><h3 id="Benefits">Benefits</h3><p>Some of the benefits we have working with asynchronous tasks are:</p><ul><li>We keep the UI of our app responsive.</li><li>We improve the performance of our application.</li><li>We avoid <a href="https://medium.com/criteo-engineering/net-threadpool-starvation-and-how-queuing-makes-it-worse-512c8d570527" target="_blank" rel="noreferrer noopener">thread pool starvation</a>.</li></ul><h3 id="Drawbacks">Drawbacks</h3><p>Although, there are some drawbacks when working with async programming:</p><ul><li>Code gets more complex and harder to maintain.</li><li>There is increased memory allocation, as some objects have to stay alive longer while awaiting other code to be executed.</li><li>It can get hard to find bugs occurring in asynchronous tasks.</li><li>When we&#39;re writing an asynchronous piece of code, all our application code tends to become asynchronous.</li></ul><h2 id="Asynchronous-Programming-Patterns">Asynchronous Programming Patterns</h2><p>To perform asynchronous operations in .NET, we can follow three different patterns:</p><p><strong>Asynchronous Programming Model (APM)</strong>: Let&#39;s say we have two methods, and we name them <code>BeginOperation</code> and <code>EndOperation</code>. After calling <code>BeginOperation</code>, our application can continue executing tasks on the calling thread while the async task is executed on a different thread. For each call to <code>BeginOperation</code>, our app should also call <code>EndOperation</code> method to get the results. In .NET, it can be implemented using <code>IAsyncResult</code>. Let&#39;s see an example of this model:</p><pre><code><span>using</span> <span>System</span><span>;</span>
<span>using</span> <span>System<span>.</span>IO</span><span>;</span>
<span>using</span> <span>System<span>.</span>Threading</span><span>;</span>
<span>public</span> <span>sealed</span> <span>class</span> <span>Program</span>
<span>{</span>
    <span>public</span> <span>static</span> <span><span>void</span></span> <span>Main</span><span>(</span><span>)</span>
    <span>{</span>
        <span><span>var</span></span> buffer <span>=</span> <span>new</span> <span><span>byte</span></span><span>[</span><span>100</span><span>]</span><span>;</span>
        <span><span>var</span></span> fs <span>=</span> <span>new</span> <span>FileStream</span><span>(</span><span>&#34;bigFile.txt&#34;</span><span>,</span> FileMode<span>.</span>Open<span>,</span> FileAccess<span>.</span>Read<span>,</span> FileShare<span>.</span>Read<span>,</span> <span>1024</span><span>,</span> FileOptions<span>.</span>Asynchronous<span>)</span><span>;</span>

        <span>IAsyncResult</span> result <span>=</span> fs<span>.</span><span>BeginRead</span><span>(</span>buffer<span>,</span> <span>0</span><span>,</span> buffer<span>.</span>Length<span>,</span> <span>null</span><span>,</span> <span>null</span><span>)</span><span>;</span>

        <span>// Do other things...</span>

        <span><span>int</span></span> numBytes <span>=</span> fs<span>.</span><span>EndRead</span><span>(</span>result<span>)</span><span>;</span>
        fs<span>.</span><span>Close</span><span>(</span><span>)</span><span>;</span>

        Console<span>.</span><span>WriteLine</span><span>(</span><span>&#34;Read {0}  Bytes:&#34;</span><span>,</span> numBytes<span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p><strong>Event-based Asynchronous Pattern (EAP)</strong>: We start an async method that will trigger a <code>Completed</code> event when the task is completed, making the result available to our application. This would be an example of this model:</p><pre><code><span>public</span> <span>class</span> <span>ExampleHandler</span>
<span>{</span>
    <span>public</span> <span>event</span> <span>EventHandler</span> OnTriggerCompleted<span>;</span>

    <span>public</span> <span><span>void</span></span> <span>Start</span><span>(</span><span><span>int</span></span> timeout<span>)</span>
    <span>{</span>
        <span><span>var</span></span> timer <span>=</span> <span>new</span> <span>Timer</span><span>(</span><span>new</span> <span>TimerCallback</span><span>(</span><span>(</span>state<span>)</span> <span>=&gt;</span>
        <span>{</span>
            OnTriggerCompleted<span>?.</span><span>Invoke</span><span>(</span><span>null</span><span>,</span> <span>null</span><span>)</span><span>;</span>
        <span>}</span><span>)</span><span>)</span><span>;</span>

        timer<span>.</span><span>Change</span><span>(</span>timeout<span>,</span> <span>0</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

<span>class</span> <span>Program</span>
<span>{</span>
    <span>private</span> <span>static</span> <span><span>void</span></span> <span>Main</span><span>(</span><span>)</span>
    <span>{</span>
        <span><span>var</span></span> handler <span>=</span> <span>new</span> <span>ExampleHandler</span><span>(</span><span>)</span><span>;</span>

        handler<span>.</span>OnTriggerCompleted <span>+=</span> <span>(</span>sender<span>,</span> e<span>)</span> <span>=&gt;</span>
        <span>{</span>
            Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$&#34;Triggered at: </span><span><span>{</span><span> DateTime<span>.</span>Now<span>.</span><span>ToLongTimeString</span><span>(</span><span>)</span></span><span>}</span></span><span>&#34;</span></span><span>)</span><span>;</span>
        <span>}</span><span>;</span>

        handler<span>.</span><span>Start</span><span>(</span><span>3000</span><span>)</span><span>;</span>

        Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$&#34;Start waiting at </span><span><span>{</span><span>DateTime<span>.</span>Now<span>.</span><span>ToLongTimeString</span><span>(</span><span>)</span></span><span>}</span></span><span>&#34;</span></span><span>)</span><span>;</span>
        Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$&#34;Processing...&#34;</span></span><span>)</span><span>;</span>
        Console<span>.</span><span>ReadLine</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p><strong>Task-based Asynchronous Pattern (TAP)</strong>: We have an <code>OperationAsync</code> method that returns a <code>Task</code> object, as in the following example:</p><pre><code><span>class</span> <span>ClassName</span>
<span>{</span>
    <span>public</span> <span>Task</span> <span>OperationAsync</span><span>(</span><span><span>byte</span> <span>[</span><span>]</span></span> buffer<span>,</span> <span><span>int</span></span> offset<span>,</span> <span><span>int</span></span> count<span>)</span><span>;</span>
<span>}</span></code></pre><p>We can await that method, using <code><span>async</span></code> and <code><span>await</span></code> keywords. We will go deeper into this approach in a while.</p><blockquote><p>Keep in mind that <strong>the APM and EAP approaches are legacy models and they are no longer recommended</strong>. Microsoft recommends using the <em>Task-based Asynchronous Pattern</em> to implement async programming in our applications.</p></blockquote><h2 id="Asynchronous-Programming-in-C-">Asynchronous Programming in C#</h2><p>As we mentioned, async programming in C# can be accomplished by implementing the <em>Task-based Asynchronous Pattern</em>. We will have methods that return a <code>Task</code> or <code>Task<span>&lt;</span><span>T</span><span>&gt;</span></code> object. Defining those methods as async operations will enable us to await them and keep using the same execution thread to run other operations that are not linked to the awaited task.</p><p>C# provides us two keywords to handle <code>Task</code> objects in an easier way: <code><span>async</span></code> and <code><span>await</span></code>. Adding the keyword <code><span>async</span></code> to a method signature allows us to use the <code><span>await</span></code> keyword inside the method while instructs the compiler to create a state machine to handle the asynchronicity. On the other hand, the <code><span>await</span></code> keyword is used to pause the execution of a method and asynchronously wait for a <code>Task</code> to finish, while the current thread is sent back to the thread pool instead of keeping it in a blocked state. Everything happens in the background, avoiding us to implement and maintain the complexity of thread management and the state of the calls.</p><p>Let&#39;s analyze this piece of code:</p><pre><code><span>public</span> <span>async</span> <span>Task<span>&lt;</span>User<span>&gt;</span></span> <span>GetLoggedUserEmailAsync</span><span>(</span><span>)</span>
<span>{</span>
  <span><span>int</span></span> userId <span>=</span> <span>GetId</span><span>(</span><span>)</span><span>;</span>
  <span><span>string</span></span> email <span>=</span> <span>await</span> <span>GetEmailAsync</span><span>(</span>userId<span>)</span><span>;</span>
  <span>User</span> user <span>=</span> <span>GetUserByEmail</span><span>(</span>email<span>)</span><span>;</span>
  <span>return</span> user<span>;</span>
<span>}</span>

<span>public</span> <span>async</span> <span>Task<span>&lt;</span><span>string</span><span>&gt;</span></span> <span>GetEmailAsync</span><span>(</span><span><span>int</span></span> userId<span>)</span>
<span>{</span>
  <span>// Do something</span>
<span>}</span></code></pre><p>An async method should return <code><span>void</span></code>, <code>Task</code>, or <code>Task<span>&lt;</span><span>T</span><span>&gt;</span></code>, where <code><span>T</span></code> is the return data type that we need. Returning <code><span>void</span></code> is normally used for event handlers. The keyword <code><span>async</span></code> enables us to use the command <code><span>await</span></code> within the method so that we can wait for the asynchronous method processing as expected.</p><p>Notice that the methods end with &#34;Async&#34;. Although it is not mandatory, there is a naming convention that an asynchronous method name should end with the word &#34;Async&#34;. This convention aims to make it clear to the consumer of the functionality that the method won&#39;t complete all of its work synchronously.</p><p>In our previous example, <code><span>GetId</span><span>(</span><span>)</span></code> is called synchronously. When the execution thread encounters the <code><span>await</span></code> keyword on <code><span>await</span> <span>GetEmailAsync</span><span>(</span>userId<span>)</span></code>, it creates a <code>Task<span>&lt;</span>User<span>&gt;</span></code> that contains the remainder of the <code>GetLoggedUserEmailAsync</code> method. This task is executed asynchronously after the <code>Task<span>&lt;</span>string<span>&gt;</span></code> returned by <code>GetEmailAsync</code>. So, the <code>User</code> object is returned from the <code>Task<span>&lt;</span>User<span>&gt;</span></code> created by the <code><span>await</span></code> keyword.</p><h2 id="Asynchronous-Code-in-Action">Asynchronous Code in Action</h2><p>Let&#39;s see a short example to review the concepts previously explained. Having the following console application:</p><pre><code><span>using</span> <span>System</span><span>;</span>
<span>using</span> <span>System<span>.</span>IO</span><span>;</span>
<span>using</span> <span>System<span>.</span>Threading<span>.</span>Tasks</span><span>;</span>

<span>class</span> <span>Program</span>
<span>{</span>
   <span>static</span> <span>async</span> <span>Task</span> <span>Main</span><span>(</span><span><span>string</span><span>[</span><span>]</span></span> args<span>)</span>
   <span>{</span>
       <span><span>string</span></span> filePath <span>=</span> <span>&#34;bigFile.txt&#34;</span><span>;</span>

       <span>// Create a big file</span>
       <span>FileStream</span> fs <span>=</span> <span>new</span> <span>FileStream</span><span>(</span>filePath<span>,</span> FileMode<span>.</span>CreateNew<span>)</span><span>;</span>
       fs<span>.</span><span>Seek</span><span>(</span><span>1024</span> <span>*</span> <span>1024</span><span>,</span> SeekOrigin<span>.</span>Begin<span>)</span><span>;</span>
       fs<span>.</span><span>WriteByte</span><span>(</span><span>0</span><span>)</span><span>;</span>
       fs<span>.</span><span>Close</span><span>(</span><span>)</span><span>;</span>

       <span><span>var</span></span> task <span>=</span> <span>ReadFileAsync</span><span>(</span>filePath<span>)</span><span>;</span>

       Console<span>.</span><span>WriteLine</span><span>(</span><span>&#34;A synchronous message&#34;</span><span>)</span><span>;</span>

       <span><span>int</span></span> length <span>=</span> <span>await</span> task<span>;</span>

       Console<span>.</span><span>WriteLine</span><span>(</span><span>&#34;Total file length: &#34;</span> <span>+</span> length<span>)</span><span>;</span>
       Console<span>.</span><span>WriteLine</span><span>(</span><span>&#34;After reading message&#34;</span><span>)</span><span>;</span>
       Console<span>.</span><span>ReadLine</span><span>(</span><span>)</span><span>;</span>
   <span>}</span>

   <span>static</span> <span>async</span> <span>Task<span>&lt;</span><span>int</span><span>&gt;</span></span> <span>ReadFileAsync</span><span>(</span><span><span>string</span></span> file<span>)</span>
   <span>{</span>
       Console<span>.</span><span>WriteLine</span><span>(</span><span>&#34;Start reading file&#34;</span><span>)</span><span>;</span>

       <span><span>int</span></span> length <span>=</span> <span>0</span><span>;</span>

       <span>using</span><span>(</span><span>StreamReader</span> reader <span>=</span> <span>new</span> <span>StreamReader</span><span>(</span>file<span>)</span><span>)</span>
       <span>{</span>
           <span><span>string</span></span> fileContent <span>=</span> <span>await</span> reader<span>.</span><span>ReadToEndAsync</span><span>(</span><span>)</span><span>;</span>
           length <span>=</span> fileContent<span>.</span>Length<span>;</span>
       <span>}</span>

       Console<span>.</span><span>WriteLine</span><span>(</span><span>&#34;Finished reading file&#34;</span><span>)</span><span>;</span>

       <span>return</span> length<span>;</span>
   <span>}</span>
<span>}</span></code></pre><p>In this application, we read a big file, count the number of characters it has, and print different messages in the console. The method that triggers the file reading operation is defined as asynchronous, and it&#39;s the one that starts the asynchronous thread reading the text. While the message &#34;A synchronous message&#34; is printed, the reading of the file continues. If we execute the application, we can see how the execution thread behaves based on the output messages:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6QF3i0BPAoDOSdF0T1jm07/269b11a895d0f74b415d49aa5b23d106/async-program-console.png" alt="Asynchronous sample application output"/></p><h2 id="Summary">Summary</h2><p>In this article, we talked about how we can manage and organize the tasks in our application based on the dependency and order of execution. We talked about synchronism, parallelism, concurrency, and asynchronism. We described async programming, its benefits, and how we can implement it in our C# applications. You can find the code shown in this article in <a href="https://github.com/auth0-blog/c-sharp-async-intro" target="_blank" rel="noreferrer noopener">this GitHub repository</a>.</p><p>If you want to learn more about asynchronous programming in C# and what advanced features we have available, you can go to:</p><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/async-in-depth" target="_blank" rel="noreferrer noopener">Async in depth</a> by Microsoft.</li><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/" target="_blank" rel="noreferrer noopener">Asynchronous programming with async and await</a> by Microsoft.</li><li><a href="https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md" target="_blank" rel="noreferrer noopener">Asynchronous Programming Guidance</a> by David Fowler.</li><li><a href="https://docs.microsoft.com/en-us/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming" target="_blank" rel="noreferrer noopener">Async/Await - Best Practices in Asynchronous Programming</a> by Microsoft.</li></ul><div><h2 id="Aside--Securing-ASP-NET-Core-with-Auth0">Aside: Securing ASP.NET Core with Auth0</h2><p>Securing ASP.NET Core applications with Auth0 is easy and brings a lot of great features to the table. With <a href="https://auth0.com/" target="_blank" rel="noreferrer noopener">Auth0</a>, you only have to write a few lines of code to get a solid <a href="https://auth0.com/user-management" target="_blank" rel="noreferrer noopener">identity management solution</a>, <a href="https://auth0.com/docs/sso/single-sign-on" target="_blank" rel="noreferrer noopener">single sign-on</a>, support for <a href="https://auth0.com/docs/identityproviders" target="_blank" rel="noreferrer noopener">social identity providers (like Facebook, GitHub, Twitter, etc.)</a>, and support for <a href="https://auth0.com/enterprise" target="_blank" rel="noreferrer noopener">enterprise identity providers (like Active Directory, LDAP, SAML, custom, etc.)</a>.</p><p>On ASP.NET Core, you need <a href="https://auth0.com/docs/apis" target="_blank" rel="noreferrer noopener">to create an API in your Auth0 Management Dashboard</a> and change a few things on your code. To create an API, you need to <a href="https://auth0.com/signup" data-amp-replace="CLIENT_ID" data-amp-addparams="anonId=CLIENT_ID(cid-scope-cookie-fallback-name)" target="_blank" rel="noreferrer noopener">sign up for a free Auth0 account</a>. After that, you need to go to <a href="https://manage.auth0.com/#/apis" target="_blank" rel="noreferrer noopener">the API section of the dashboard</a> and click on &#34;Create API&#34;. On the dialog shown, you can set the <em>Name</em> of your API as &#34;Books&#34;, the <em>Identifier</em> as &#34;<a href="http://books.mycompany.com" target="_blank" rel="noreferrer noopener">http://books.mycompany.com</a>&#34;, and leave the <em>Signing Algorithm</em> as &#34;RS256&#34;.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6HrObJ2eGY7YehLzbBM0sH/066be814a124d98f03224d9b177caa22/net-core-2_creating-api-on-auth0.png" alt="Creating API on Auth0"/></p><p>After that, you have to add the call to <code>services<span>.</span><span>AddAuthentication</span><span>(</span><span>)</span></code> in the <code><span>ConfigureServices</span><span>(</span><span>)</span></code> method of the <code>Startup</code> class as follows:</p><pre><code><span><span>string</span></span> authority <span>=</span> <span><span>$&#34;https://</span><span><span>{</span><span>Configuration<span>[</span><span>&#34;Auth0:Domain&#34;</span><span>]</span></span><span>}</span></span><span>/&#34;</span></span><span>;</span>
<span><span>string</span></span> audience <span>=</span> Configuration<span>[</span><span>&#34;Auth0:Audience&#34;</span><span>]</span><span>;</span>

services<span>.</span><span>AddAuthentication</span><span>(</span>options <span>=&gt;</span>
<span>{</span>
  options<span>.</span>DefaultAuthenticateScheme <span>=</span> JwtBearerDefaults<span>.</span>AuthenticationScheme<span>;</span>
  options<span>.</span>DefaultChallengeScheme <span>=</span> JwtBearerDefaults<span>.</span>AuthenticationScheme<span>;</span>
<span>}</span><span>)</span><span>.</span><span>AddJwtBearer</span><span>(</span>options <span>=&gt;</span>
<span>{</span>
  options<span>.</span>Authority <span>=</span> authority<span>;</span>
  options<span>.</span>Audience <span>=</span> audience<span>;</span>
<span>}</span><span>)</span><span>;</span></code></pre><p>In the body of the <code><span>Configure</span><span>(</span><span>)</span></code> method of the <code>Startup</code> class, you also need to add an invocation to <code>app<span>.</span><span>UseAuthentication</span><span>(</span><span>)</span></code> and <code>app<span>.</span><span>UseAuthorization</span><span>(</span><span>)</span></code> as shown below:</p><pre><code>app<span>.</span><span>UseRouting</span><span>(</span><span>)</span><span>;</span>
app<span>.</span><span>UseAuthentication</span><span>(</span><span>)</span><span>;</span>
app<span>.</span><span>UseAuthorization</span><span>(</span><span>)</span><span>;</span>
app<span>.</span><span>UseEndpoints</span><span>(</span>endpoints <span>=&gt;</span>
<span>{</span>
    endpoints<span>.</span><span>MapControllers</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span></code></pre><blockquote><p>Make sure you invoke these methods in the order shown above. It is essential so that everything works properly.</p></blockquote><p>Finally, add the following element to the <code>appsettings<span>.</span>json</code> configuration file:</p><pre><code><span>{</span>
  <span>&#34;Logging&#34;</span><span>:</span> <span>{</span>
    <span>// ...</span>
  <span>}</span><span>,</span>
  <span>&#34;Auth0&#34;</span><span>:</span> <span>{</span>
    <span>&#34;Domain&#34;</span><span>:</span> <span>&#34;YOUR_DOMAIN&#34;</span><span>,</span>
    <span>&#34;Audience&#34;</span><span>:</span> <span>&#34;YOUR_AUDIENCE&#34;</span>
  <span>}</span>
<span>}</span></code></pre><blockquote><p><strong>Note</strong>: Replace the placeholders <code><span>YOUR_DOMAIN</span></code> and <code><span>YOUR_AUDIENCE</span></code> with the actual values for the domain that you specified when creating your Auth0 account and the <em>Identifier</em> you assigned to your API.</p></blockquote></div></div></div>]]></content:encoded>
      <pubDate>Thu, 26 Aug 2021 14:55:00 +0000</pubDate>
    </item>
    <item>
      <title>Auth0 No-Code Actions Integrations Now Available in Beta</title>
      <link>https://auth0.com/blog/auth0-no-code-actions-integrations-now-available-in-beta/</link>
      <description>Actions Integrations reduce the amount of custom code you need to write, maintain, and update.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><a href="https://auth0.com/blog/actions-now-generally-available/" target="_blank" rel="noreferrer noopener">Actions launched recently</a> as the next evolution of extensibility with Auth0, picking up where our legacy extensibility tools Rules and Hooks leave off. Actions unifies the Auth0 extensibility experience in one place. With it, we took the power of Rules and Hooks and created a greatly improved developer experience with features such as an industry-standard VS Code style editor, typescript, draft mode, version control, improved secret management, and an expanded library of NPM modules. Actions gives developers the ability to customize Auth0 using the full spectrum of coding options from pro-code to <a href="https://auth0.com/blog/what-is-low-code-how-low-code-can-speed-digital-transformation/" target="_blank" rel="noreferrer noopener">low-code</a>, with the addition of no-code Actions Integrations.</p><p>Actions Integrations, as our new zero-code layer, offers an easy experience to extend Auth0 with partner-built innovations with no coding required. Now you can implement key integrations such as Identity Verification or Consent Management to your workflow without writing or maintaining a single line of code, the provider of the integration takes care of that. To use Actions Integrations, simply install an integration from the Auth0 Marketplace and drag-and-drop it into your Actions workflow. Then with only a few configuration settings, the integration is part of your tenant.</p><p>Actions Integrations, currently in Beta, are now available through the <a href="https://marketplace.auth0.com/" target="_blank" rel="noreferrer noopener">Auth0 Marketplace</a> and in Actions in the Auth0 Dashboard. This marks an essential milestone in how you can leverage innovations from Marketplace Partners into your Customer Identity Access Management (CIAM) workflows. Through Actions and Marketplace, we are creating an ecosystem of sustainable, and ever-growing plug-and-play partner integrations that allows developers to solve many identity extensibility scenarios faster and without extra code.</p><p>Pro-Code custom Actions will continue to be a core feature of Auth0, with all the support you’ve come to expect. By adding Actions Integrations to our offerings, we give you the option to replace the custom code for common solutions with no-code integrations and leave the custom code layer for unique use cases to you. This reduces your overall maintenance and risks associated with custom code.</p><h2 id="Plug---Play-Extensibility">Plug &amp; Play Extensibility</h2><h3 id="Endless-innovation--centrally-maintained">Endless innovation, centrally maintained</h3><p>Satisfy your identity requirements right out-of-the-box without having to write custom code. Actions Integrations are reusable modules that are centrally maintained by a vetted Marketplace Partner. Integrations are designed to be maintained by the Partners with updates propagating automatically to all instances.This results in faster time-to-market while greatly reducing maintenance costs and resource drain associated with code updates that can result in having to rebuild Rules and Hooks.</p><h3 id="Common-use-cases">Common use cases</h3><p>Actions Integrations exist for the most common use cases of custom extensibility. These currently include:</p><ul><li><strong>ID DataWeb:</strong> Real time and self service global identity verification</li><li><strong>Eva:</strong> Second-factor voice biometric</li><li><strong>Scaled Access:</strong> Delegated user access management</li><li><strong>One Trust:</strong> Consent and user preferences management</li><li><strong>Incognia:</strong> Mobile identity proofing with address verification</li><li><strong>Incognia:</strong> Mobile login with location behavioral biometrics</li><li><strong>SecZetta:</strong> Real-time, risk-based authentication</li><li><strong>Yoonik:</strong> Second-factor facial biometric</li><li><strong>Infobip:</strong> Global SMS messaging</li><li><strong>Amazon:</strong> Simple Notification Service (SNS) for microservices and serverless applications by Amazon</li><li><strong>ClickSend:</strong> Global SMS messaging</li><li><strong>Cumul.io:</strong> Self-service data visualization platform</li><li><strong>DataGuard:</strong> Consent and user preference management</li><li><em></em>Esendex: SMS authentication</li><li><strong>Mitto:</strong> Global SMS messaging</li><li><strong>Plivo:</strong> SMS authentication</li><li><strong>Telesign:</strong> Global SMS messaging</li><li><strong>Vonage:</strong> Global SMS messaging</li></ul><p>With Marketplace, we are building partnerships to deliver innovations that further reduce your need to code features from scratch. After the public launch of Actions Integrations, we will continue to grow our Marketplace catalog, adding more services and modules to help you expand and customize your CIAM implementation.</p><p>We encourage you to start using Actions integrations to satisfy any of the common use cases that apply to you. And of course, if you encounter any questions or have any comments, please direct them to our team of identity specialists.</p></div></div>]]></content:encoded>
      <pubDate>Wed, 25 Aug 2021 16:57:00 +0000</pubDate>
    </item>
    <item>
      <title>Secure Software Supply Chain with GitHub Security Features</title>
      <link>https://auth0.com/blog/secure-software-supply-chain-with-github-security-features/</link>
      <description>Learn what software supply chain is and how to improve security with GitHub security features.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><strong>TL;DR:</strong> 
One of the most critical aspects of modern software delivery is security. In the era of open-source projects, it is challenging and not easy to control every vulnerability and make sure that our solution does not use a package with serious vulnerabilities.  Today&#39;s threat to supply chain security is unpatched software. In this article, we will learn how to improve code security with GitHub security features.</p><h2 id="Security-Role-in-the-Software-Supply-Chain">Security Role in the Software Supply Chain</h2><p>Application implementation nowadays looks slightly different than a few years ago. Open-source software has become a standard. Using open-source libraries in different kinds of projects is something normal nowadays, and we do not have to write every part of our application from scratch.</p><p>When using some open-source code or a library, it is worth not forgetting about security aspects. Industry data suggests that 99 percent of codebases contain open-source code. This is a lot! With this fact, we have to remember about dangers related to vulnerabilities and bugs that can lead to bad consequences. Many examples can be provided where an open-source library was used, but then serious vulnerability was discovered, and in the end, there were problems with keeping security at the right level.</p><p>Before we discuss the role of security in the software supply chain, we have to find out what it is. <strong>Software supply chain</strong> is anything that goes into or affects the source code from development through Continuous Integration and Delivery pipelines until it gets deployed into production and used broadly. Any examples? The software supply chain includes information about who wrote a specific fragment of code, which tools were used to apply security scanning, what is the infrastructure used to host our solution, or what dependencies are used.</p><p>When a solution is being developed, often security part is missed or left as the last step in the whole process of the software supply chain. One of the biggest threats to supply chain security nowadays is unpatched software. This is why we should not include security assessment as the last step of our software supply chain. Security should be an ongoing part of software development to make sure that any potential vulnerabilities can be quickly mitigated.</p><p>Keeping an eye on every security aspect can be challenging, especially for developers who are focused on the code implementation rather than scanning and searching for vulnerabilities. Also, it is important to provide security feedback to developers right away so that any potential vulnerabilities are eliminated as quickly as possible.</p><p>In the following, we will focus on the security features available on GitHub to make sure that our software supply chain is more secure.</p><h2 id="The-Sample-Application">The Sample Application</h2><p>To present some of the security features in action, you can use the sample application that is available on <a href="https://github.com/auth0-blog/Globomantics-Games" target="_blank" rel="noreferrer noopener">this GitHub repository</a>. This repository contains a simple web game written as an ASP .NET Core MVC application in .NET 5. We will not focus on the implementation details in this article. Our goal is to discover and understand different security features available on GitHub and see security scanning in action. With this repository, you can try security features on your own. Use the <a href="https://github.com/auth0-blog/Globomantics-Games/tree/for-security-features-testing" target="_blank" rel="noreferrer noopener"><code><span>for</span><span>-</span>security<span>-</span>features<span>-</span>testing</code></a> branch as a starting point by running the following command on your machine:</p><pre><code><span>git</span> clone -b for-security-features-testing https://github.com/auth0-blog/Globomantics-Games.git</code></pre><h2 id="GitHub-Security-Features-to-Keep-Secure-Your-Repository">GitHub Security Features to Keep Secure Your Repository</h2><p>GitHub provides a few built-in tools to keep our source code security at the right level. However, we can also integrate third-party tools. Let&#39;s start by discussing GitHub&#39;s built-in security features first.</p><h3 id="Repository-dependency-graph">Repository dependency graph</h3><p>When using open-source libraries in our project, it is sometimes hard to track all dependencies. Of course, we can open our package managers (like NuGet) and see all the open-source packages added to the project. But what about a deeper knowledge about other packages used by the packages we referenced? Confusing and challenging, right? This is where the GitHub repository dependency graph can be helpful. With a dependency graph, we can recursively track all of the dependencies used in the project. </p><p>We can find the dependency graph by opening our repository&#39;s main page on GitHub, under the <em>Insights</em> tab as in the picture below.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7s3HZp8ib6ApzkU5U6rJg7/80b3b277a0789dce93b8457d2a2b9b14/github-dependency-graph-example.png" alt="GitHub dependency graph"/></p><p>The dependency graph is enabled by default for each repository hosted on GitHub. It can scan common package manifests like:</p><ul><li><code><span>package</span><span>.</span>json</code></li><li><code>requirements<span>.</span>txt</code></li><li><code>packages<span>.</span>config</code></li><li><code><span>.</span>csproj</code> files</li></ul><h3 id="Automated-dependency-scanning">Automated dependency scanning</h3><p>Once we know what dependencies are used in our project, it would be nice to scan them automatically and detect potential vulnerabilities. This is where automated dependency scanning can help. GitHub provides automated dependency alerts (using <a href="https://dependabot.com/" target="_blank" rel="noreferrer noopener">Dependabot</a>) that watch dependency graphs. It cross-references the target versions of your project&#39;s dependencies with the versions on known vulnerability lists aggregated in the <a href="https://github.com/advisories" target="_blank" rel="noreferrer noopener">GitHub Advisory Database</a>.</p><p>When a risk is detected, the project is alerted as presented in the picture below.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4W7rjQeVo8dH6lH51bfRdn/ea2f3f83ebd48ff46c4af4326ae0e1fb/dependency-scanning-example.png" alt="GitHub dependency scanning"/></p><p>This is not enough. To make it easier for developers, once a vulnerability is detected in one of the libraries used, an automatic pull request is created, which contains the upgraded version of that library.</p><p>We can enable the <em>Dependabot alerts</em> and the <em>Dependabot security updates</em> features accessing the <em>Security &amp; analysis</em> section under the <em>Settings</em> tab on GitHub, as in the picture below:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/bwJP4ppPL73UEvIp1r9cD/b9a3883afba99ca0aa4e225c3fb53d1c/dependabot-alerts-configuration.png" alt="GitHub security updates"/></p><h3 id="Secret-scanning">Secret scanning</h3><p>Storing secrets and credentials in any source code repository is a bad practice. When a push is done to a public repository, GitHub scans the content of the commits for secrets and credentials.</p><p>What is more, GitHub detects known types of secrets from different providers like Adobe, Microsoft Azure, Atlassian, Dropbox, and so on.</p><p>When a secret is detected, the repository owner is alerted. The below picture presents the scanning flow.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3r4yctOqQmbX9K7TEyfKyS/e0697600af24c0de9c62e62cf2f49edd/secret-scanning-example-flow.png" alt="GitHub secret scanning"/></p><p>[<a href="https://docs.github.com/en/developers/overview/secret-scanning-partner-program#how-secret-scanning-works-in-a-public-repository" target="_blank" rel="noreferrer noopener"><em>Source: GitHub</em></a>]</p><p>Once a new push with a secret embedded in the source code is done, GitHub applies regex scanning to verify if there is any secret with a known pattern. If a secret is detected, GitHub sends the found secret value to a service provider&#39;s verify endpoint. If verification is successful, the secret is revoked and an email alert is sent to the source code repository owner.</p><p>Secret scanning is available for all public repositories and for private repositories owned by organizations where <em>GitHub Advanced Security</em> is enabled. You can read more about <a href="https://docs.github.com/en/developers/overview/secret-scanning-partner-program" target="_blank" rel="noreferrer noopener">the secret scanning partner program here</a>.</p><h3 id="Security-policy">Security policy</h3><p>Automated scanning is helpful, but it is also important to provide a way for other developers and people who use/contribute to our project, in general, to report found vulnerabilities. We can facilitate reporting security issues by providing a <code><span>SECURITY</span><span>.</span>md</code> file in the repository&#39;s <code>root</code>, <code>docs</code>, or <code><span>.</span>github</code> folders. This file provides guidance on how to report vulnerability and contact the repository owner or which versions are supported with security updates. Providing guidance through this file can speed up the resolution of critical issues. When someone creates an issue in our repository, they will see a link to our project&#39;s security policy.</p><p>The following picture shows the document you can find in our sample project:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/37g2XyZ40VmAOoxWCaoSob/ed480113688b023108dcf774e14e9aaa/security-policy-document.png" alt="GitHub security policy"/></p><p>By convention, the <code><span>SECURITY</span><span>.</span>md</code> file lives in the root of our GitHub repository. There is no default template for security policy. However, we should try to put at least our contact information and explain how reported security issues can be verified. The security policy file is part of <a href="https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file" target="_blank" rel="noreferrer noopener">default community health files</a> on GitHub, so it means that we have to name it exactly in this way: <code><span>SECURITY</span><span>.</span>md</code>.</p><h3 id="Automated-code-scanning">Automated code scanning</h3><p>With <a href="https://github.com/features/actions" target="_blank" rel="noreferrer noopener">GitHub Actions</a>, we can enable automated code scanning so that each time a new merge is done, our code will be scanned. With code scanning enabled, we can analyze and find security vulnerabilities and errors in the code hosted in our GitHub repository.</p><p>GitHub provides a built-in code scanning tool called CodeQL, but we can integrate other third-party tools, of course. Adding code scanning is useful to help prevent developers from introducing any new security problems into the source code. Code scanning can also help improve our code quality.</p><p>At a high level, CodeQL is an analysis engine used by developers to automate security checks, and by security researchers to perform variant analysis. In the following section, we will discover how to enable code scanning with CodeQL and what configuration options are available. To learn more about CodeQL, <a href="https://codeql.github.com" target="_blank" rel="noreferrer noopener">check out the official documentation</a>. </p><h2 id="Repository-Code-Scanning-with-CodeQL">Repository Code Scanning with CodeQL</h2><p>When using CodeQL, our source code is treated as data. Security vulnerabilities, bugs, and other errors are modeled as queries that can be executed against databases extracted from source code. There are three main steps in CodeQL analysis:</p><ol start="1"><li><em>Preparation</em>, preparing the code by creating a CodeQL database.</li><li><em>Analysis</em>, running CodeQL queries against the database.</li><li><em>Interpretation</em>, interpreting the query results to check if any vulnerabilities or code bugs were found.</li></ol><p>CodeQL can be used to scan many different languages like C++, C#, Java, or Phyton. We can use multiple queries when CodeQL scanning is done. To make it easier, we can use <a href="https://codeql.github.com/docs/codeql-cli/creating-codeql-query-suites/" target="_blank" rel="noreferrer noopener">query suites</a>. CodeQL query suites are <code><span>.</span>qls</code> files that allow us to pass multiple queries to CodeQL without having to specify the path to each query file individually.</p><p>In the following, we are going to see how to use the <em>Security and Quality</em> query suite to detect bugs and security issues in the source code.</p><p>To enable CodeQL scanning, we open the <em>Security</em> section and select <em>Code scanning alerts</em>. Then we click the <em>Setup this workflow</em> button within the <em>CodeQL Analysis</em> item.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2dyxIKUmdQ8IfK0SZlxEST/fc4fd8563df833edb5c862731cb0bd32/codeql-setup.png" alt="GitHub security policy"/></p><p>Now, replace the default code of the workflow with the following.</p><pre><code><span>name</span><span>:</span> <span>&#34;Build and scan project with CodeQL&#34;</span>

<span>on</span><span>:</span>
  <span>pull_request</span><span>:</span>
    <span>branches</span><span>:</span> <span>[</span> main <span>]</span>

<span>jobs</span><span>:</span>
  <span>analyze</span><span>:</span>
    <span>name</span><span>:</span> analyze
    <span>runs-on</span><span>:</span> ubuntu<span>-</span>latest
    <span>permissions</span><span>:</span>
      <span>actions</span><span>:</span> read
      <span>contents</span><span>:</span> read
      <span>security-events</span><span>:</span> write

    <span>strategy</span><span>:</span>
      <span>fail-fast</span><span>:</span> <span>false</span>
      <span>matrix</span><span>:</span>
        <span>language</span><span>:</span> <span>[</span> <span>&#39;csharp&#39;</span> <span>]</span>

    <span>steps</span><span>:</span>
    <span>-</span> <span>name</span><span>:</span> Checkout repository
      <span>uses</span><span>:</span> actions/checkout@v2

    <span>-</span> <span>name</span><span>:</span> Initialize CodeQL
      <span>uses</span><span>:</span> github/codeql<span>-</span>action/init@v1
      <span>with</span><span>:</span>
        <span>languages</span><span>:</span> $<span>{</span><span>{</span> matrix.language <span>}</span><span>}</span>
        <span>config-file</span><span>:</span> .github/workflows/codeql/codeql<span>-</span>config.yml

    <span>-</span> <span>name</span><span>:</span> Autobuild
      <span>uses</span><span>:</span> github/codeql<span>-</span>action/autobuild@v1

    <span>-</span> <span>name</span><span>:</span> Perform CodeQL Analysis
      <span>uses</span><span>:</span> github/codeql<span>-</span>action/analyze@v1</code></pre><p>Once replacing the existing code, we can commit the <a href="https://github.com/Daniel-Krzyczkowski/Globomantics-Games/blob/main/.github/workflows/codeql-analysis.yml" target="_blank" rel="noreferrer noopener"><code>codeql<span>-</span>analysis<span>.</span>yml</code></a> generated file. Now, let&#39;s discuss its structure.</p><p>First of all, we can decide when to run the scanning. In our case, the scanning is executed once a pull request is created to merge changes into the <code>main</code> branch. In the <code>jobs</code> section, we declare a runner environment specified by <code>runs<span>-</span>on</code>. By specifying the permission within a job definition, you can configure a different set of permissions for the <a href="https://docs.github.com/en/actions/reference/authentication-in-a-workflow#about-the-github_token-secret" target="_blank" rel="noreferrer noopener"><code><span>GITHUB_TOKEN</span></code></a> for each job, if required. You can read more about job permissions in the <a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions" target="_blank" rel="noreferrer noopener">official documentation</a>.</p><p>In the <code>strategy</code> section, we can declare the languages for which scanning should be applied in the project. In our case, we want to scan for the C# language. We declare the languages in the <code>matrix</code> section. With <code>fail<span>-</span>fast</code> set to <code><span>false</span></code>, we avoid breaking the whole workflow if scanning fails for one of the declared languages.</p><p>In the <code>steps</code> section, there are the steps of the full process:</p><ol start="1"><li><em>Checkout repository</em>, to checkout project&#39;s code for scanning.</li><li><em>Initialize CodeQL</em>, to initialize CodeQL scanning for the languages declared in the <code>matrix</code> section. In the <a href="https://github.com/auth0-blog/Globomantics-Games/tree/main/.github/workflows/codeql" target="_blank" rel="noreferrer noopener"><code>config<span>-</span>file</code></a> section, we can provide a path to the <code>codeql<span>-</span>config<span>.</span>yml</code> file where we declare the query suites which to use during the scanning. In this case, we use the <code>security<span>-</span>and<span>-</span>quality</code> query suite. The <code>codeql<span>-</span>config<span>.</span>yml</code> file is not mandatory, but it helps to keep the CodeQL scanning script more readable. We can also use this file to disable the default queries and to specify which directories to scan during the analysis.</li><li><em>Autobuild</em>, to build source code.</li><li><em>Perform CodeQL Analysis</em>, to perform the analysis and publish the report.</li></ol><p>Here is the content of the <code>codeql<span>-</span>config<span>.</span>yml</code> file:</p><pre><code><span>name</span><span>:</span> <span>&#34;Security and Quality&#34;</span>

<span>queries</span><span>:</span>
  <span>-</span> <span>name</span><span>:</span> Security and Quality
    <span>uses</span><span>:</span> security<span>-</span>and<span>-</span>quality</code></pre><p>Once the scanning is completed, we can check the report under the <em>Security</em> tab in the <em>Code scanning alerts</em> section:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4vrcomaZxQHXWWRAxL0evU/bf5028ce02c9da560b855c108f28eca8/codeql-analysis-result-example.png" alt="CodeQL Analysis result"/></p><p>In the report above, we can see a recommendation to check if the variable is null first and then try to access it instead of catching a <code>NullReferenceException</code>. With CodeQL, we can discover many different security issues and get hints on how to improve our code quality and eliminate potential bugs. I recommend learning more about CodeQL analysis by reading the <a href="https://docs.github.com/en/code-security/secure-coding/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning" target="_blank" rel="noreferrer noopener">official documentation</a>.</p><h2 id="License-Compliance-Management">License Compliance Management</h2><p>When talking about open-source software, it is important to remember about license compliance. There are many different types of licenses, and we have to carefully verify them before we use an open-source library in one of our projects. The most commonly used open-source licenses are:</p><ul><li>GNU General Public License (GPL)</li><li>The Apache License</li><li>MIT License</li><li>GNU Less General Public License (LGPL)</li></ul><p>For instance, GPL is a copyleft license. Using a copyleft license means that software products containing an open source copyleft license must be released with the same copyleft license. So, if we use a GPL-licensed library in our software, we cannot distribute it with an MIT license, for example.</p><p>MIT is a permissive license. Software licensed under the MIT license can be used and modified without limits —  as long as a copy of the original MIT license and a copyright notice are added to it.</p><p>So, we have to be careful in this case because this can be problematic when we want to commercialize our software product.</p><p>GitHub does not provide a license scanning feature by default. Third-party tools can be used to set up license scanning. For example, <a href="https://snyk.io/" target="_blank" rel="noreferrer noopener">Snyk</a> is one of these third-party tools. With <a href="https://snyk.io/product/open-source-license-compliance/" target="_blank" rel="noreferrer noopener">Snyk Open Source License Compliance Management</a>, we can scan our project and verify what licenses are used in the libraries we use.</p><p>Snyk license scanning is available in the paid plan, but a 14 days trial version is also available. Once we sign in to <a href="https://app.snyk.io/login" target="_blank" rel="noreferrer noopener">app.snyk.io</a> using a GitHub account, we can select which project we would like to scan. In our case, let&#39;s continue using Snyk without granting direct permissions to the repository on GitHub. We will see how to connect GitHub to the Snyk API in a while. So, let&#39;s click <em>Continue without permissions</em> as presented below:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2A2DFxw6sExHnkNarFmWhf/6a976312ba2f07f2ad55de49ad18b73e/snyk-setup-page.png" alt="Snyk setup"/></p><p>In the next section, we provide the URL to our public repository on GitHub. In our case, it is <a href="https://github.com/Daniel-Krzyczkowski/Globomantics-Games" target="_blank" rel="noreferrer noopener">https://github.com/auth0-blog/Globomantics-Games)</a>. Then, let&#39;s click the <em>Import 1 repository</em> button. Once we are signed in, we can activate the 14 days trial by clicking the <em>Start free trial</em> button. </p><p>At this point, let&#39;s click the gear icon in the right top corner of the Snyk website. From the left bar, we have to switch to <em>Licenses</em>. This is where we can see the list of all available licenses discovered in our project once the Snyk license scanning is applied.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/57l8aP1R9XKBS0omyVJZje/55e437274f187016d4a2b6d227adf2ee/snyk-detected-licenses.png" alt="Snyk license scanning"/></p><p>As we can see in the picture above, we can assign different levels of severity to specific license types (<code>None</code>, <code>Low</code>, <code>Medium</code>, or <code>High</code>). Let&#39;s select the <code>Apache<span>-</span><span>2.0</span></code> license from the list. We can add instructions on what should be exactly verified when this type of license is found in our project. Notice that <em>Severity</em> is set to <code>Medium</code>.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5PgRmN2iL2QbATBMRD0iN/4ad13bdd82078dc048ad688b95a81c16/apache-license-snyk.png" alt="Apache license in Snyk"/></p><p>Now, to enable Snyk scanning on our code, we need to obtain an access token from Synk and store it under the <em>Secrets</em> section on GitHub. So, let&#39;s click the avatar in the right top corner, and from the list, select <em>Account settings</em>. Under the <em>Auth Token</em> section, let&#39;s click <code>Click to show</code> to display the token. Finally, let&#39;s copy the token so that we can use it in the GitHub Actions workflow responsible for the license scanning.</p><p>Back on GitHub, we click the <em>Secrets</em> tab and select <em>Secrets</em>. We paste the token obtained from Snyk by using  the <em>New repository secret</em> button. Once the secret is saved, it should be displayed on the list.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/DOmT8mdLi0bfEPL06C5ei/3be9cc44abfd0909589e16fc95f49196/snyk-token-secret-on-github.png" alt="Snyk token configuration on GitHub"/></p><p>Now it is time to add the Snyk scanning workflow using GitHub Actions. Under the <code><span>.</span>github<span>/</span>workflows</code> folder (the same where we put <code>codeql<span>-</span>analysis<span>.</span>yml</code> file for CodeQL scanning), we have to place the <a href="https://github.com/auth0-blog/Globomantics-Games/blob/main/.github/workflows/snyk-license-scanning.yml" target="_blank" rel="noreferrer noopener"><code>snyk<span>-</span>license<span>-</span>scanning<span>.</span>yml</code></a> file with the following content:</p><pre><code><span>name</span><span>:</span> <span>&#34;Build and scan project with Snyk&#34;</span>

<span>on</span><span>:</span>
  <span>push</span><span>:</span>
    <span>branches</span><span>:</span> <span>[</span> main <span>]</span>

<span>jobs</span><span>:</span>
  <span>build-and-scan</span><span>:</span>
    <span>runs-on</span><span>:</span> ubuntu<span>-</span>latest

    <span>steps</span><span>:</span>
    <span>-</span> <span>uses</span><span>:</span> actions/checkout@v2

    <span>-</span> <span>name</span><span>:</span> Setup .NET
      <span>uses</span><span>:</span> actions/setup<span>-</span>dotnet@v1
      <span>with</span><span>:</span>
        <span>dotnet-version</span><span>:</span> 5.0.x
    <span>-</span> <span>name</span><span>:</span> Restore dependencies
      <span>run</span><span>:</span> dotnet restore ./src/web<span>-</span>game/Globomantics.sln
    <span>-</span> <span>name</span><span>:</span> Build
      <span>run</span><span>:</span> dotnet build ./src/web<span>-</span>game/Globomantics.sln <span>-</span><span>-</span>no<span>-</span>restore
    <span>-</span> <span>name</span><span>:</span> Test
      <span>run</span><span>:</span> dotnet test ./src/web<span>-</span>game/Globomantics.sln <span>-</span><span>-</span>no<span>-</span>build <span>-</span><span>-</span>verbosity normal


    <span>-</span> <span>name</span><span>:</span> Run Snyk to check for vulnerabilities
      <span>uses</span><span>:</span> snyk/actions/dotnet@master
      <span>continue-on-error</span><span>:</span> <span>true</span> <span># To make sure that SARIF upload gets called</span>
      <span>env</span><span>:</span>
        <span>SNYK_TOKEN</span><span>:</span> $<span>{</span><span>{</span> secrets.SNYK_TOKEN <span>}</span><span>}</span>
      <span>with</span><span>:</span>
        <span>args</span><span>:</span> <span>-</span><span>-</span>sarif<span>-</span>file<span>-</span>output=snyk.sarif <span>-</span><span>-</span>file=./src/web<span>-</span>game/Globomantics.sln <span>-</span><span>-</span>severity<span>-</span>threshold=medium


    <span>-</span> <span>name</span><span>:</span> Upload result to GitHub Code Scanning
      <span>uses</span><span>:</span> github/codeql<span>-</span>action/upload<span>-</span>sarif@v1
      <span>with</span><span>:</span>
        <span>sarif_file</span><span>:</span> snyk.sarif</code></pre><p>Let&#39;s discuss its structure. We want to execute the scanning when a push to the <code>main</code> branch occurs. In the <code>jobs</code> section, we declare a runner environment specified by <code>runs<span>-</span>on</code>. In the <code>steps</code> section, there are a few required steps:</p><ol start="1"><li><em>Checkout repository</em>, to checkout project&#39;s code for scanning.</li><li><em>Setup .NET</em>, which includes restoring dependencies with the <code>dotnet restore</code> command, then <code>dotnet build</code> to build project, and <code>dotnet test</code> to run tests if they exist in the solution.</li><li><em>Run Snyk to check for vulnerabilities</em>, which communicates with the Snyk API to apply the code scanning. Notice that we have to fill <code><span>SNYK_TOKEN</span></code> with the value we put in the <code>Secrets</code> section. There are also a few arguments: 
<ul><li>The <code><span>--</span>sarif<span>-</span>file<span>-</span>output<span>=</span>snyk<span>.</span>sarif</code> argument provides the name of the file which contains the scanning report.</li><li>The <code><span>--</span>file<span>=</span><span>.</span><span>/</span>src<span>/</span>web<span>-</span>game<span>/</span>Globomantics<span>.</span>sln</code> argument provides the path to the project/solution.</li><li>The <code><span>--</span>severity<span>-</span>threshold<span>=</span>medium</code>- parameter is used to report alerts with severity <code>Medium</code> and above.</li></ul></li><li><em>Upload result to GitHub Code Scanning</em>, which is responsible for uploading the scanning result so that we can see it under the <em>Security</em> tab.</li></ol><p>Once we push any changes to the <code>main</code> branch, the scanning will be triggered. Let&#39;s check the scanning report shown below:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2lM81Cue8ALxnT6u9sFDUs/48b9c563e78651709486ce66c97d5b43/snyk-license-scanning-result.png" alt="License scanning report"/></p><p>As we can see above, the <code>Apache<span>-</span><span>2.0</span></code> license was found in one of the libraries we use: <code>Serilog</code>. Once we click on the alert, we can see the details shown below:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7MCT0ERLSfTmqB3ztLalum/0a3209ecfbeb15549b351938e2e5b10e/snyk-license-scanning-details.png" alt="License scanning details"/></p><p>We can see that the <code>Serilog</code> library uses <code>Apache<span>-</span><span>2.0</span></code> license, and we included this package in the <code>Globomantics<span>.</span>CloudGame</code> project using the NuGet package manager. The reason why we see this alert is the fact that we set the <code><span>--</span>severity<span>-</span>threshold</code> parameter to <code>Medium</code>. In this case, we will be alerted whenever there is a library used in our project with the license for which we set the severity to <code>Medium</code> in the Snyk configuration.</p><h2 id="Conclusion">Conclusion</h2><p>In this article, we discovered how to enable and use GitHub security features to improve code security and software supply chain. We learned how to enable automated dependency scanning and updates, enable scanning with CodeQL, and verify license compliance using Snyk.</p><p>If you want to know more about what learned in this article, please check out the following documentation:</p><ul><li><a href="https://www.youtube.com/watch?v=hln5v7odguE" target="_blank" rel="noreferrer noopener">Achieving DevSecOps with GitHub Advanced Security</a></li><li><a href="https://docs.github.com/en/code-security/secure-coding/using-codeql-code-scanning-with-your-existing-ci-system/configuring-codeql-runner-in-your-ci-system" target="_blank" rel="noreferrer noopener">Configuring CodeQL runner in your CI system</a></li><li><a href="https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/devsecops-in-github" target="_blank" rel="noreferrer noopener">DevSecOps in GitHub</a></li><li><a href="https://docs.microsoft.com/en-us/learn/modules/maintain-secure-repository-github/" target="_blank" rel="noreferrer noopener">Maintain a secure repository by using GitHub best practices</a></li></ul><div><h2 id="Aside--Securing-ASP-NET-Core-with-Auth0">Aside: Securing ASP.NET Core with Auth0</h2><p>Securing ASP.NET Core applications with Auth0 is easy and brings a lot of great features to the table. With <a href="https://auth0.com/" target="_blank" rel="noreferrer noopener">Auth0</a>, you only have to write a few lines of code to get a solid <a href="https://auth0.com/user-management" target="_blank" rel="noreferrer noopener">identity management solution</a>, <a href="https://auth0.com/docs/sso/single-sign-on" target="_blank" rel="noreferrer noopener">single sign-on</a>, support for <a href="https://auth0.com/docs/identityproviders" target="_blank" rel="noreferrer noopener">social identity providers (like Facebook, GitHub, Twitter, etc.)</a>, and support for <a href="https://auth0.com/enterprise" target="_blank" rel="noreferrer noopener">enterprise identity providers (like Active Directory, LDAP, SAML, custom, etc.)</a>.</p><p>On ASP.NET Core, you need <a href="https://auth0.com/docs/apis" target="_blank" rel="noreferrer noopener">to create an API in your Auth0 Management Dashboard</a> and change a few things on your code. To create an API, you need to <a href="https://auth0.com/signup" data-amp-replace="CLIENT_ID" data-amp-addparams="anonId=CLIENT_ID(cid-scope-cookie-fallback-name)" target="_blank" rel="noreferrer noopener">sign up for a free Auth0 account</a>. After that, you need to go to <a href="https://manage.auth0.com/#/apis" target="_blank" rel="noreferrer noopener">the API section of the dashboard</a> and click on &#34;Create API&#34;. On the dialog shown, you can set the <em>Name</em> of your API as &#34;Books&#34;, the <em>Identifier</em> as &#34;<a href="http://books.mycompany.com" target="_blank" rel="noreferrer noopener">http://books.mycompany.com</a>&#34;, and leave the <em>Signing Algorithm</em> as &#34;RS256&#34;.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6HrObJ2eGY7YehLzbBM0sH/066be814a124d98f03224d9b177caa22/net-core-2_creating-api-on-auth0.png" alt="Creating API on Auth0"/></p><p>After that, you have to add the call to <code>services<span>.</span><span>AddAuthentication</span><span>(</span><span>)</span></code> in the <code><span>ConfigureServices</span><span>(</span><span>)</span></code> method of the <code>Startup</code> class as follows:</p><pre><code><span><span>string</span></span> authority <span>=</span> <span><span>$&#34;https://</span><span><span>{</span><span>Configuration<span>[</span><span>&#34;Auth0:Domain&#34;</span><span>]</span></span><span>}</span></span><span>/&#34;</span></span><span>;</span>
<span><span>string</span></span> audience <span>=</span> Configuration<span>[</span><span>&#34;Auth0:Audience&#34;</span><span>]</span><span>;</span>

services<span>.</span><span>AddAuthentication</span><span>(</span>options <span>=&gt;</span>
<span>{</span>
  options<span>.</span>DefaultAuthenticateScheme <span>=</span> JwtBearerDefaults<span>.</span>AuthenticationScheme<span>;</span>
  options<span>.</span>DefaultChallengeScheme <span>=</span> JwtBearerDefaults<span>.</span>AuthenticationScheme<span>;</span>
<span>}</span><span>)</span><span>.</span><span>AddJwtBearer</span><span>(</span>options <span>=&gt;</span>
<span>{</span>
  options<span>.</span>Authority <span>=</span> authority<span>;</span>
  options<span>.</span>Audience <span>=</span> audience<span>;</span>
<span>}</span><span>)</span><span>;</span></code></pre><p>In the body of the <code><span>Configure</span><span>(</span><span>)</span></code> method of the <code>Startup</code> class, you also need to add an invocation to <code>app<span>.</span><span>UseAuthentication</span><span>(</span><span>)</span></code> and <code>app<span>.</span><span>UseAuthorization</span><span>(</span><span>)</span></code> as shown below:</p><pre><code>app<span>.</span><span>UseRouting</span><span>(</span><span>)</span><span>;</span>
app<span>.</span><span>UseAuthentication</span><span>(</span><span>)</span><span>;</span>
app<span>.</span><span>UseAuthorization</span><span>(</span><span>)</span><span>;</span>
app<span>.</span><span>UseEndpoints</span><span>(</span>endpoints <span>=&gt;</span>
<span>{</span>
    endpoints<span>.</span><span>MapControllers</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span></code></pre><blockquote><p>Make sure you invoke these methods in the order shown above. It is essential so that everything works properly.</p></blockquote><p>Finally, add the following element to the <code>appsettings<span>.</span>json</code> configuration file:</p><pre><code><span>{</span>
  <span>&#34;Logging&#34;</span><span>:</span> <span>{</span>
    <span>// ...</span>
  <span>}</span><span>,</span>
  <span>&#34;Auth0&#34;</span><span>:</span> <span>{</span>
    <span>&#34;Domain&#34;</span><span>:</span> <span>&#34;YOUR_DOMAIN&#34;</span><span>,</span>
    <span>&#34;Audience&#34;</span><span>:</span> <span>&#34;YOUR_AUDIENCE&#34;</span>
  <span>}</span>
<span>}</span></code></pre><blockquote><p><strong>Note</strong>: Replace the placeholders <code><span>YOUR_DOMAIN</span></code> and <code><span>YOUR_AUDIENCE</span></code> with the actual values for the domain that you specified when creating your Auth0 account and the <em>Identifier</em> you assigned to your API.</p></blockquote></div></div></div>]]></content:encoded>
      <pubDate>Mon, 23 Aug 2021 17:03:00 +0000</pubDate>
    </item>
    <item>
      <title>What Is LGPD? A Business Guide To Brazil&#39;s Data Protection Law</title>
      <link>https://auth0.com/blog/what-is-lgpd-a-business-guide-to-brazils-data-protection-law/</link>
      <description>LGPD carries implications for businesses beyond Brazil’s borders. Here’s what execs need to know.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>Lei Geral de Proteção de Dados Pessoais (LGPD or General Personal Data Protection Law) is Brazil’s data protection and privacy law that is closely modeled on the General Data Protection Regulation (GDPR) in the European Union. LGPD was passed by the National Congress of Brazil on July 10, 2018, in an effort to unify and enhance 40+ data privacy instruments within the country into a single piece of legislation. LGPD went into effect on September 18, 2020. Like the GDPR, the law impacts global organizations beyond Brazil’s borders.</p><p>The extent to which LGPD applies to your organization will depend on the specific nature of your business, so you should always seek skilled legal counsel to help you navigate compliance requirements. However, if your organization does business in Brazil or collects/processes the data of any individual within Brazil, you should familiarize yourself with LGPD’s requirements (summarized below) to understand what impact these regulations may have on you.</p><div><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 11-5.93-9.14"></path><path d="M22 4L12 14.01l-3-3"></path></svg><p><strong>Important Information</strong><br/><b></b></p><p>The following information is not intended as legal advice, and readers should consult with their attorneys about matters of compliance.<br/> </p></div><h2 id="Why-LGPD-Was-Passed">Why LGPD Was Passed</h2><p>LGPD was passed to demonstrate and protect individuals’ right to privacy. Despite Brazil being <a href="https://www.launchwaymedia.com/blog/brazil-latin-americas-technology-leader" target="_blank" rel="noreferrer noopener">Latin America’s technology leader</a> and <a href="https://www.zdnet.com/article/it-investments-in-brazil-surpass-world-average/" target="_blank" rel="noreferrer noopener">one of the top 10 tech markets</a> in the world, its data protection laws have failed to keep pace with this technological growth. As a side-effect of that rapid growth, Brazil has experienced a number of recent <a href="https://portswigger.net/daily-swig/brazil-reaches-towards-cybersecurity-maturity" target="_blank" rel="noreferrer noopener">high-profile data breaches</a>. LGPD establishes a clear requirement for organizations to implement controls that protect individuals’ personal data, with the end goal of reducing the impact of breaches on individuals.</p><p>In addition to introducing privacy regulations, the LGPD also established a separate national authority, the Autoridade Nacional de Proteção de Dados (ANPD or National Data Protection Authority in English), which is responsible for enforcing the law, including issuing penalties and fines. The creation of the ANPD was originally vetoed by President Jair Bolsonaro but later reinstated via <a href="https://www.mondaq.com/brazil/data-protection/818496/provisional-measure-no-86918-creates-the-brazilian-data-protection-authority-and-amends-several-articles-of-the-brazilian-general-data-protection-law" target="_blank" rel="noreferrer noopener">executive order</a> in August of 2020.</p><h2 id="Who-LGPD-Applies-To">Who LGPD Applies To</h2><p>LGPD applies to any organization (or individual) regardless of size, industry, public or private status, or country of residence.</p><p>Any legal entity or natural person processing data collected from persons in Brazil (“data controller”) is subject to LGPD if:</p><ul><li>The data collected/processed is about people in Brazil.</li><li>The processing is carried out <strong>inside Brazil;</strong> or</li><li>The processing is for the purposes of offering and selling goods or services to individuals in Brazil.</li><li>The processing is of personal data collected within Brazil.</li></ul><h3 id="Exceptions">Exceptions</h3><p>There are some limited exceptions to the applicability of LGPD. Exceptions include situations where the data is being collected and/or processed:</p><ul><li>By a natural person for private and non-commercial purposes.</li><li>For journalistic, artistic, or academic purposes, regardless of who does the collecting.</li><li>For the purposes of national security, defense, or public safety.</li><li>For investigating and prosecuting criminal offenses.</li><li>If the personal data originates in other countries and only passes through Brazil without any processing being carried out.</li></ul><h2 id="LGPD-Includes-a-Broad-Definition-of-Personal-Data">LGPD Includes a Broad Definition of Personal Data</h2><p><a href="https://iapp.org/resources/article/brazilian-data-protection-law-lgpd-english-translation/" target="_blank" rel="noreferrer noopener">LGPD defines</a> personal data broadly as any information that could be used to identify an individual. This includes any information that could be combined with other information to identify an individual. That means information such as email, IP addresses, phone numbers, geolocation, and credit card numbers can all be considered personal information under LGPD.</p><h3 id="Sensitive-Personal-Data">Sensitive Personal Data</h3><p>Brazil has a culturally and racially diverse population. Like Europe’s GDPR, LGPD recognizes that additional protections are sometimes needed to protect individuals against discrimination. These potentially higher-risk attributes are defined as “sensitive personal data” under LGPD and include:</p><ul><li>Health information</li><li>Genetic information</li><li>Sexual information</li><li>Medical information</li><li>Biometric characteristics</li><li>Racial or ethnic origin information</li><li>Political affiliations</li><li>Religious affiliations</li></ul><h2 id="LGPD-Compliance-Obligations">LGPD Compliance Obligations</h2><p>LGPD is a significant enhancement and consolidation of Brazil’s previous data privacy laws, and the changes will affect organizations in every industry. Below are some of the key compliance considerations businesses will need to consider.</p><h3 id="1--Define-and-Document-Lawful-Basis-for-Processing-Personal-Data">1. Define and Document Lawful Basis for Processing Personal Data</h3><p>LGPD requires every organization that collects or processes personal data to have at least one of the following legally acceptable reasons for doing so, as well as to document those reasons for auditing purposes.</p><ul><li><strong>Consent from an individual to process their data.</strong> Any individual over the age of 18 can consent to the processing of their personal data.</li><li><strong>To follow applicable regulatory requirements and public policies.</strong> Organizations can collect and process data if it is required in order to follow laws and regulations that apply to them.</li><li><strong>For the purpose of conducting a study or research.</strong> Research is a legal basis for personal data processing, as long as organizations take reasonable steps to anonymize that data.</li><li><strong>To fulfill a contractual agreement.</strong> Processing an individual&#39;s personal data is acceptable if you’ve signed a contract with that individual to deliver goods or services and need to process their data to provide it to them.</li><li><strong>Legal proceedings.</strong> Personal data may be processed for the sake of a court case, arbitration, or other legal proceedings.</li><li><strong>To protect the life or physical safety of an individual or a third party.</strong> For example, national security is a legally acceptable reason to process personal data.</li><li><strong>To protect an individual’s health in healthcare procedures.</strong> For example, it’s acceptable to process personal data to ensure you’re not putting a patient at risk during surgery.</li><li><strong>For the legitimate interests of your organization or a third party.</strong> Your organization’s interests are a legal basis for processing personal data, as long as those interests do not conflict with the rights, freedoms, or interests of an individual.</li><li><strong>For the sake of protecting an individual’s credit.</strong> Protecting an individual’s credit is an acceptable basis for processing data, as long as that processing is done in accordance with the provisions laid out in other relevant legislation in addition to LGPD.</li></ul><h3 id="2--Honor-the-Privacy-Rights-of-Individuals">2. Honor the Privacy Rights of Individuals</h3><p>Like GDPR, LGPD provides individuals with several rights that they can request organizations to recognize and uphold at any time. Organizations must have internal procedures and processes in place to respond to requests from individuals who exercise these rights, which include:</p><ul><li><strong>Confirmation of processing.</strong> Individuals have the right to confirm whether their personal data has been or is being processed.</li><li><strong>Access to personal data.</strong> Individuals may request access to any of their personal data that an organization processes.</li><li><strong>Data portability.</strong> Individuals may request that their personal data be transferred to another service or product provider, as long as that request is in accordance with other national regulations, doesn’t compromise any commercial or industrial secrets, and the data hasn’t already been anonymized.</li><li><strong>Rectification of inaccurate information.</strong> Individuals may request that inaccurate, outdated, or incomplete personal data be corrected or updated.</li><li><strong>Anonymization, blocking, or deletion of data.</strong> Individuals can request that unnecessary or excessive personal data, or personal data processed in a non-compliant manner, be anonymized, blocked, or deleted.</li><li><strong>Deletion of data.</strong> Individuals may request to have their personal data deleted at any time where processing is based on consent.</li><li><strong>Right to be informed.</strong> Individuals have the right to be informed about third parties granted access to their personal data. Individuals also have the right to be informed regarding their right to refuse consent.</li><li><strong>Withdrawal of consent.</strong> Individuals have the right to revoke their consent to process or collect data at any time.</li><li><strong>Review of automated decisions.</strong> Individuals have the right to request the review of decisions solely based on automated processing that affects their interests, including profiling.</li><li><strong>Filing complaints.</strong> Individuals may file a complaint against an organization with the ANPD if they feel that any of these rights have been violated.</li></ul><h3 id="3--Appoint-a-Data-Protection-Officer--DPO-">3. Appoint a Data Protection Officer (DPO)</h3><p>The LGPD requires every organization under its jurisdiction to appoint a data protection officer (DPO) to be their point person for data protection efforts. The DPO does not have to be an individual person; a committee can provide this service, as can an outside consultant. The DPO is responsible for ensuring that the organization takes appropriate action to protect personal data and for communicating with end-users and government authorities on matters related to data privacy. The identity and contact information of the DPO must be available to the public (preferably on your website).</p><h3 id="4--Prepare--Inventory--and-Conduct-Data-Protection-Impact-Assessments--DPIA-">4. Prepare, Inventory, and Conduct Data Protection Impact Assessments (DPIA)</h3><p>To comply with LGPD, you must document the types of data you’re collecting, the methods used, along the steps taken to secure that data. You must also identify potential risks and document what you’ve done to mitigate them. Every organization that falls under LGPD’s jurisdiction should have these records on hand to show to a regulator upon request.</p><h3 id="5--Follow-Data-Security-Requirements-and-Data-Breach-Notification-Protocols">5. Follow Data Security Requirements and Data Breach Notification Protocols</h3><p>Organizations must implement adequate organizational and technical controls in order to secure personal data from unauthorized access, deletion, alteration, sharing, or processing. In the event that a breach occurs that presents a risk or causes damage to individuals, organizations must notify the ANPD and individuals affected by the breach within a reasonable time period and include the following information:</p><ul><li>The type of personal data that was exposed and the individuals affected</li><li>The risks associated with the exposure of that data</li><li>The security measures in place to protect personal data (unless sharing this information would disclose industrial or commercial secrets)</li><li>What your organization is doing to mitigate the effects of the breach on the individuals at risk</li></ul><p>The ANPD may require an organization to take further steps, such as alerting the media about the breach or taking specific steps to mitigate the effects of the breach on affected individuals. These actions are assessed on a case-by-case basis.</p><h3 id="6--Implement-Privacy-by-Design">6. Implement Privacy by Design</h3><p>Like GDPR, LGPD requires organizations under its jurisdiction to design their data processing systems and procedures so that privacy is the default setting (the approach known as privacy by design) rather than adding privacy controls to those systems as an afterthought. Organizations should also be prepared to demonstrate the effectiveness of their data protection measures to the ANPD, as an audit could be conducted at any time.</p><h3 id="7--Comply-with-Cross-Border-Data-Transfer-Requirements">7. Comply with Cross-Border Data Transfer Requirements</h3><p>LGPD allows organizations to transfer protected personal data outside of Brazil if the laws of the country the data is transferred to provide adequate protection for that data. Adequacy of protection is determined by the ANPD. In the event that the protections offered by the receiving country are deemed inadequate by the ANPD, transfers may still be allowed if <a href="https://iapp.org/resources/article/brazilian-data-protection-law-lgpd-english-translation/" target="_blank" rel="noreferrer noopener">certain conditions</a> are met.</p><h2 id="Penalties-for-Non-Compliance">Penalties for Non-Compliance</h2><p>Under LGPD, penalties for non-compliance are assessed by the ANPD and can include fines of up to 2% of a company’s annual revenue to a maximum of 50 million Brazilian reais per violation (approximately €7.5 million or $9M USD at the time of writing). The ANPD also has the authority to block access to or delete personal data from related databases and to partially or fully prohibit data processing activities in the event that a violation occurs. Additionally, the LGPD provides individuals with the right to seek civil damages for violations of their privacy, meaning organizations could face legal action from consumers in addition to fines assessed by regulators.</p><h2 id="Go-Beyond-Compliance">Go Beyond Compliance</h2><p>Regulations like LGPD and GDPR are landmark steps toward the protection of individuals’ right to privacy. But their similarities should also serve as a wake-up call to organizations everywhere that data privacy will require a lot more than plugging in a new set of controls for their existing systems in the future.</p><p>Instead, businesses should look to build privacy functionality into their systems from the outset, considering the well-being of the end-user rather than just the legal requirements. Not only will this help them earn the <a href="https://hbr.org/2020/01/do-you-care-about-privacy-as-much-as-your-customers-do" target="_blank" rel="noreferrer noopener">trust of consumers</a>, but it will also likely simplify the process of complying with new regulations as they emerge.</p></div></div>]]></content:encoded>
      <author>LGPD Establishes the National Data Protection Authority</author>
      <pubDate>Thu, 19 Aug 2021 14:55:00 +0000</pubDate>
    </item>
    <item>
      <title>Salesforce Powers Customer Identity Plus with Auth0</title>
      <link>https://auth0.com/blog/salesforce-powers-customer-identity-plus-with-auth0/</link>
      <description>Salesforce/Auth0 partnership to help bridge identity silos for Salesforce customers</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>In July of 2020, <a href="https://auth0.com/blog/auth0-announces-120m-seriesf-funding/" target="_blank" rel="noreferrer noopener">Salesforce Ventures led Auth0’s Series F funding round</a> to fuel continued innovation and go-to-market expansion, responding to global demand for a simple, extensible identity platform that provides secure access to any application. Since that time, Auth0 worked in conjunction with Salesforce to explore ways to work together to better harness the power of both companies and bring additional value to our combined customer base and to the broader market.</p><p>Auth0 is proud to announce our partnership with Salesforce to power identity for Salesforce Customer Identity Plus, <a href="https://www.salesforce.com/news/stories/salesforce-customer-identity-plus-helps-eliminate-identity-silos/" target="_blank" rel="noreferrer noopener">a new offering announced by Salesforce</a> that is available starting July 20, 2021, to Salesforce customers.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3CxRl1pNZ0M6LMcWnY5bwY/36f1b84872a53900c0eedc5137ee788e/Salesforce.png" alt="Salesforce"/></p><p>With enterprises striving to meet the evolving demands of digital engagement, the companies who are winning will deliver frictionless, secure user identity. This Salesforce and Auth0 partnership will help bridge identity data silos across channels to provide a single view of the customer, with a developer-friendly, extensible identity solution that scales to meet the needs of the world’s largest companies.  </p><div itemscope="" itemtype="http://schema.org/Person" itemprop="author"><p>“We’re proud to be partnering with Auth0, the leader in consumer identity as a service, to deliver Salesforce Customer Identity Plus. This will enable our customers to accelerate their digital transformation and provide their customers with frictionless pixel-perfect login &amp; registration experiences.”</p><p>David Brossard</p><p>Senior Director of Product Management</p><p>Salesforce</p></div><p>Salesforce as organizations increase the number of digital touchpoints like mobile apps and web portals, customers are forced to create new logins for each, making it difficult for organizations to gain a single, 360-degree view of the customer. Customer Identity Plus enables developers to easily integrate an identity layer into existing apps, creating a consistent customer experience.</p><p>Building on Salesforce’s vision to be the <a href="https://www.salesforce.com/products/platform/features/single-source-of-truth/" target="_blank" rel="noreferrer noopener">single source of truth for customer data</a>, Customer Identity Plus is a next generation CIAM (customer identity and access management) solution that provides the services to manage customer identities, enabling businesses to connect to all of your customers, apps, and products.</p><p><a href="https://www.salesforce.com/products/platform/products/identity/" target="_blank" rel="noreferrer noopener">Customer Identity Plus</a> bridges data silos so you can build a unified view of the customer to enrich digital interactions. Customer identities and profile data including opportunities, and customer service cases, are stored and maintained in Salesforce, which allows you to create consistent experiences with customers and partners across all lines of business, marketing, mobile, and web properties. Companies can now build deeper, richer relationships with customers and partners by creating and maintaining a single identity for interactions across all channels — sales, service, and marketing user journeys.</p><p>For companies looking to accelerate their digital transformation strategies and need B2C (business-to-consumer) and B2B (business-to-business) scale from day one, Customer Identity Plus enables maximum performance and scalability. With Customer Identity Plus, developers get a <a href="https://auth0.com/docs/libraries" target="_blank" rel="noreferrer noopener">variety of SDKs right out of the box</a>, providing the flexibility to seamlessly integrate an identity layer into existing applications.</p><p>Customer Identity Plus brings the power and flexibility of Auth0’s identity-as-a-service (IDaaS) to complement Salesforce’s customer-focused cloud offerings, including Sales Cloud, Experience Cloud, and Commerce Cloud.</p><p>Auth0 accelerates and extends customer identity for Salesforce customers, enabling you to:</p><ul><li>Create a Seamless Customer Experience — Allow consumers to quickly register and log into your applications with <a href="https://auth0.com/docs/connections/passwordless" target="_blank" rel="noreferrer noopener">passwordless login</a> or <a href="https://auth0.com/docs/connections/identity-providers-social" target="_blank" rel="noreferrer noopener">social login</a>, all out of the box.</li><li>Enable a Single View of the Customer — Unify digital identities from multiple sources so you can build a single view of the customer to enrich digital transactions and report on login activities.</li><li>Administer Contextual Security — Balance great UX with adaptive security to <a href="https://auth0.com/docs/attack-protection" target="_blank" rel="noreferrer noopener">prevent automated threats</a> from bots, breached credentials, or brute force attacks.</li><li>Build a Developer Centric Framework that Scales — Leverage support for multiple application types and an extensive library of SDKs for any language and platform and scale.</li></ul><div itemscope="" itemtype="http://schema.org/Person" itemprop="author"><p>“Partnering with a CRM pioneer like Salesforce to integrate Auth0’s customer identity brings an incredible opportunity to deliver a one-stop solution for end-to-end CIAM. Auth0 is proud to power identity for Customer Identity Plus, and we look forward to continued collaboration and innovation together”</p><p>Randy Nasson</p><p>Director of Product Management</p><p>Auth0</p></div><h2 id="Partner-with-Auth0">Partner with Auth0</h2><p>Auth0 offers a range of partnership opportunities from strategic alliances and working independent software vendors (ISVs) through to system integrators and resellers. We are able to scale according to your need and opportunity. If you’d like to learn more about how you might partner with Auth0 to add value to your customer base and the broader market, please reach out to our <a href="https://auth0.com/partners" target="_blank" rel="noreferrer noopener">partner team</a>.</p></div></div>]]></content:encoded>
      <pubDate>Wed, 18 Aug 2021 22:17:00 +0000</pubDate>
    </item>
    <item>
      <title>Auth0 Publishes Documentation to Help with New Standard Contractual Clauses</title>
      <link>https://auth0.com/blog/auth0-publishes-documentation-to-help-with-new-standard-contractual-clauses/</link>
      <description>Enabling Auth0 customers to comply with dynamic privacy requirements</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div id="post-content" itemprop="articleBody"><p>At Auth0, our continuing mission is to secure the world’s identities so innovators can innovate. The core to delivering this mission is trust, including Auth0’s commitment to security and privacy.</p><p>Following our post in June, we are pleased to announce we have updated our Data Processing Agreement (DPA) to include the new <a href="https://auth0.com/blog/auth0-statement-on-new-standard-contractual-clauses-issued-by-european-commission/" target="_blank" rel="noreferrer noopener">Standard Contractual Clauses</a> (“new SCCs”) to support our customers with European users. We’ve also made changes to our Subscription Agreement, including adding a direct reference to our updated DPA, and clarifying some of the language related to our personal data processing.</p><p>The new clauses and information about the changes can be found here <a href="http://auth0.com/legal" target="_blank" rel="noreferrer noopener">auth0.com/legal</a>.</p><p>All new customers can take advantage of these new terms immediately.</p><p>For existing customers – your Tenant Administrators will receive a notification about how you can transition to the updated DPA and new SCCs. If you have any questions or have not received this notification, please contact your account manager, or if you are a self service customer, reach out to the Self Service Team at <a href="mailto:selfserviceteam@auth0.com" target="_blank" rel="noreferrer noopener">selfserviceteam@auth0.com</a>.</p><p>At Auth0, we know that privacy regulation is complex and changing rapidly. We are working to help our customers respond to this dynamic and fast-paced environment by continuously improving the resources and information we make available.</p></div></div>]]></content:encoded>
      <pubDate>Wed, 18 Aug 2021 14:54:00 +0000</pubDate>
    </item>
    <item>
      <title>State Management in Svelte Applications</title>
      <link>https://auth0.com/blog/state-management-in-svelte-applications/</link>
      <description>A tutorial on how to use the Svelte state management store to manage state in Svelte applications.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><strong>TL;DR:</strong> As a Front-end developer, one of the most crucial skills to possess is how to manage state in your applications. The ability to synchronize application state with data changes and manage shared state amongst different components is a strong requirement in building modern frontend applications. Several state management libraries have been developed with certain frameworks having a de-facto state management library that they naturally work well with (e.g., <a href="https://redux.js.org/" target="_blank" rel="noreferrer noopener">Redux</a> for <a href="https://reactjs.org/" target="_blank" rel="noreferrer noopener">Reactjs</a>).</p><p>In this tutorial, you will learn how to perform state management in <a href="https://svelte.dev/" target="_blank" rel="noreferrer noopener">Svelte</a> applications using Svelte&#39;s built-in state management <a href="https://svelte.dev/tutorial/writable-stores" target="_blank" rel="noreferrer noopener">Stores</a>.</p><h2 id="What-We-ll-Build">What We&#39;ll Build</h2><p>In this tutorial, you will be implementing state management in a shopping cart built with Svelte. You will begin with a pre-built e-commerce application that sells different types of wares. However, this application is not yet complete, as its shopping features for adding products to the cart and managing cart items have not been implemented. Using the Svelte store, you will be adding the following features to the application:</p><ul><li>Load the products from a central state store</li><li>Add items to the shopping cart</li><li>Display items added to the shopping cart</li><li>Calculate the total price of items in the cart</li><li>Increase and decrease the quantity of the items in the cart</li><li>Remove items from the cart</li></ul><h2 id="Prerequisites">Prerequisites</h2><p>There are a few requirements to follow along with this exercise:</p><ul><li><a href="https://nodejs.org" target="_blank" rel="noreferrer noopener">Node.js</a> installed on your system. You can visit the website and install a suitable version for your operating system <a href="https://nodejs.org/" target="_blank" rel="noreferrer noopener">here</a>.</li><li>Basic knowledge of <a href="https://svelte.dev" target="_blank" rel="noreferrer noopener">Svelte</a> and using <a href="https://svelte.dev/tutorial/nested-components" target="_blank" rel="noreferrer noopener">Svelte components</a>.</li></ul><p>With all these in place, you can proceed with the exercise.</p><h2 id="Cloning-the-Demo-E-commerce-Project">Cloning the Demo E-commerce Project</h2><p>To begin, you will clone the starting point for the project and run it. Run the following command to clone a copy of the e-commerce project unto your machine:</p><pre><code><span>git</span> clone --single-branch --branch base-project https://github.com/coderonfleek/svelte-store</code></pre><p>Once you have the project on your system, go into the root of the project and install the dependencies with the following commands:</p><pre><code><span>cd</span> svelte-store
<span>npm</span> <span>install</span></code></pre><p>With all dependencies installed, you can then run the project using the following command:</p><pre><code><span>npm</span> run dev</code></pre><p>This command will boot up a local development server at <a href="http://localhost:5000" target="_blank" rel="noreferrer noopener"><code>http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>5000</span></code></a>. Navigate to this address on your browser, and you will see the page displayed below:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/nwLSAkqqjS7tFnYJhSUB5/eb8586b16288ada93d2c56fbf3fb00a2/svelte_01.jpg" alt="&#34;Homepage - E-commerce App&#34;"/></p><p>At the moment, when you click <code>Add to Cart</code> on any of the products, the button does nothing. The source code for the homepage is located in the file <code>src<span>/</span>views<span>/</span>Home<span>.</span>svelte</code>. The products are currently loaded from a <code>products</code> array on the page using a <code>Product</code> component to display the products:</p><pre><code><span><span><span>&lt;</span>main</span><span>&gt;</span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>&#34;</span>home container<span>&#34;</span></span><span>&gt;</span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>&#34;</span>row<span>&#34;</span></span><span>&gt;</span></span>
      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>&#34;</span>col-md-9 pt-5<span>&#34;</span></span><span>&gt;</span></span>
        <span><span><span>&lt;</span>div</span>
          <span>class</span><span><span>=</span><span>&#34;</span>row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-3 row-cols-xl-3<span>&#34;</span></span>
        <span>&gt;</span></span>
          {#each products as product}
          <span><span><span>&lt;</span>Product</span> <span>{product}</span> <span>/&gt;</span></span>
          {/each}
        <span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
      <span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>&#34;</span>col-md-3 pt-5<span>&#34;</span></span><span>&gt;</span></span>
        <span><span><span>&lt;</span>Cart</span> <span>/&gt;</span></span>
      <span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
  <span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>main</span><span>&gt;</span></span></code></pre><p>On the right column, a <code>Cart</code> component is used to display items that have been added to the cart and their respective quantities, which is also hard-coded into the component at the moment. The <code>Cart</code> component also consists of a <code>Checkout</code> button which will navigate to the full shopping cart details page shown below when clicked:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5sW3mmLvYraDwX9d71RZQY/0582cbbb68c9e9c1c697473e8779237e/svelte_02.jpg" alt="&#34;Cart details page - E-commerce App&#34;"/></p><p>The cart details page source code can be found in <code>src<span>/</span>views<span>/</span>ShoppingCart<span>.</span>svelte</code>. It uses a <code>CartItem</code> component to display any item added to the cart with buttons to increase or decrease the quantity of the item in the cart or remove it completely. The <code>Cart</code> component is also displayed on the right column, just as it was on the homepage. At the moment, these buttons do nothing when clicked.</p><pre><code><span><span><span>&lt;</span>main</span><span>&gt;</span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>&#34;</span>home container<span>&#34;</span></span><span>&gt;</span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>&#34;</span>row<span>&#34;</span></span><span>&gt;</span></span>
      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>&#34;</span>col-md-8 pt-5<span>&#34;</span></span><span>&gt;</span></span>
        {#each cart as product}
        <span><span><span>&lt;</span>CartItem</span> <span>{product}</span> <span>/&gt;</span></span>
        {/each}
      <span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>&#34;</span>col-md-4 pt-5<span>&#34;</span></span><span>&gt;</span></span>
        <span><span><span>&lt;</span>Cart</span> <span>/&gt;</span></span>
      <span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
  <span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>main</span><span>&gt;</span></span></code></pre><p>The cart items displayed on this page are loaded from a <code>cart</code> array and are currently hard-coded on the page. What&#39;s more, clicking any of the buttons does nothing at the moment. All components used in the application are contained in the <code>src<span>/</span>components</code> folder.</p><h2 id="Creating-the-State-Management-Store">Creating the State Management Store</h2><p>To begin implementing the features listed in the above section, you will need to set up a central state management store in the application. Create a <code>store<span>.</span>js</code> file inside the <code>src</code> folder, then add the following code:</p><pre><code><span>import</span> <span>{</span> writable<span>,</span> derived <span>}</span> <span>from</span> <span>&#34;svelte/store&#34;</span><span>;</span>

<span>export</span> <span>const</span> products <span>=</span> <span>writable</span><span>(</span><span>[</span>
  <span>{</span>
    id<span>:</span> <span>1</span><span>,</span>
    name<span>:</span> <span>&#34;Chelsea Shoes&#34;</span><span>,</span>
    price<span>:</span> <span>200</span><span>,</span>
    shortdesc<span>:</span> <span>&#34;Best Drip in the Market&#34;</span><span>,</span>
    url<span>:</span> <span>&#34;images/chelsea-shoes.png&#34;</span>
  <span>}</span><span>,</span>
  <span>{</span>
    id<span>:</span> <span>2</span><span>,</span>
    name<span>:</span> <span>&#34;Kimono&#34;</span><span>,</span>
    price<span>:</span> <span>50</span><span>,</span>
    shortdesc<span>:</span> <span>&#34;Classy, Stylish, Dope&#34;</span><span>,</span>
    url<span>:</span> <span>&#34;images/kimono.png&#34;</span>
  <span>}</span><span>,</span>
  <span>{</span>
    id<span>:</span> <span>3</span><span>,</span>
    name<span>:</span> <span>&#34;Watch&#34;</span><span>,</span>
    price<span>:</span> <span>2500</span><span>,</span>
    shortdesc<span>:</span> <span>&#34;Elegance built in&#34;</span><span>,</span>
    url<span>:</span> <span>&#34;images/rolex.png&#34;</span>
  <span>}</span><span>,</span>
  <span>{</span>
    id<span>:</span> <span>4</span><span>,</span>
    name<span>:</span> <span>&#34;Wallet&#34;</span><span>,</span>
    price<span>:</span> <span>80</span><span>,</span>
    shortdesc<span>:</span> <span>&#34;Sleek, Trendy, Clean&#34;</span><span>,</span>
    url<span>:</span> <span>&#34;images/wallet.png&#34;</span>
  <span>}</span><span>,</span>
  <span>{</span>
    id<span>:</span> <span>5</span><span>,</span>
    name<span>:</span> <span>&#34;Lady Handbags&#34;</span><span>,</span>
    price<span>:</span> <span>230</span><span>,</span>
    shortdesc<span>:</span> <span>&#34;Fabulous, Exotic, Classy&#34;</span><span>,</span>
    url<span>:</span> <span>&#34;images/handbag.png&#34;</span>
  <span>}</span><span>,</span>
  <span>{</span>
    id<span>:</span> <span>6</span><span>,</span>
    name<span>:</span> <span>&#34;Casual Shirts&#34;</span><span>,</span>
    price<span>:</span> <span>30</span><span>,</span>
    shortdesc<span>:</span> <span>&#34;Neat, Sleek, Smart&#34;</span><span>,</span>
    url<span>:</span> <span>&#34;images/shirt.png&#34;</span>
  <span>}</span>
<span>]</span><span>)</span><span>;</span>

<span>export</span> <span>const</span> cart <span>=</span> <span>writable</span><span>(</span><span>[</span><span>]</span><span>)</span><span>;</span></code></pre><p>The store above contains two writable properties:</p><ul><li>The <code>products</code> property holds all products contained in the e-commerce application. In a production scenario, you would want to load products from a remote API.</li><li>The <code>cart</code> property is an array that holds the items a user adds to their cart. This is empty by default.</li></ul><p>These properties are all that is needed to implement the features listed above.</p><h2 id="Loading-Products-to-the-Home-Page-from-the-Store">Loading Products to the Home Page from the Store</h2><p>The first task is to ensure that the products are loaded from the store instead of being hard-coded on the <code>Home<span>.</span>svelte</code> homepage. Locate <code>src<span>/</span>views<span>/</span>Home<span>.</span>svelte</code> and replace its content with the following code:</p><pre><code><span>&lt;</span>script<span>&gt;</span>
  <span>import</span> Product <span>from</span> <span>&#34;../components/Product.svelte&#34;</span><span>;</span>
  <span>import</span> Cart <span>from</span> <span>&#34;../components/Cart.svelte&#34;</span><span>;</span>
  <span>import</span> <span>{</span> products <span>}</span> <span>from</span> <span>&#34;../store&#34;</span><span>;</span>
<span>&lt;</span><span>/</span>script<span>&gt;</span>

<span>&lt;</span>main<span>&gt;</span>
  <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;home container&#34;</span><span>&gt;</span>
    <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;row&#34;</span><span>&gt;</span>
      <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;col-md-9 pt-5&#34;</span><span>&gt;</span>
        <span>&lt;</span>div
          <span>class</span><span>=</span><span>&#34;row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-3 row-cols-xl-3&#34;</span>
        <span>&gt;</span>
          <span>{</span>#each $products <span>as</span> product<span>}</span>
            <span>&lt;</span>Product <span>{</span>product<span>}</span> <span>/</span><span>&gt;</span>
          <span>{</span><span>/</span>each<span>}</span>
        <span>&lt;</span><span>/</span>div<span>&gt;</span>
      <span>&lt;</span><span>/</span>div<span>&gt;</span>
      <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;col-md-3 pt-5&#34;</span><span>&gt;</span>
        <span>&lt;</span>Cart <span>/</span><span>&gt;</span>
      <span>&lt;</span><span>/</span>div<span>&gt;</span>
    <span>&lt;</span><span>/</span>div<span>&gt;</span>
  <span>&lt;</span><span>/</span>div<span>&gt;</span>
<span>&lt;</span><span>/</span>main<span>&gt;</span></code></pre><p>In the update above, the <code>products</code> variable has now been replaced with store property <code>products</code> that references the store to load the products. Now refresh your homepage, and you will not see any change, but you know that your products are now being loaded from the store.</p><p>The next task is to implement the functionality that allows users to click <code>Add to Cart</code> on a product on the homepage and see it added to the cart widget on the right column. As mentioned earlier, products displayed on the page are managed using a <code>Product</code> component. Locate this component at <code>src<span>/</span>components<span>/</span>Product<span>.</span>svelte</code> and replace its content with the following code:</p><pre><code><span>&lt;</span>script<span>&gt;</span>
  <span>import</span> <span>{</span> cart <span>}</span> <span>from</span> <span>&#34;../store&#34;</span><span>;</span>
  <span>export</span> <span>let</span> product<span>;</span>

  <span>let</span> inCart <span>=</span> <span>false</span><span>;</span>

  $<span>:</span> <span>{</span>
    $cart<span>.</span><span>forEach</span><span>(</span><span>(</span><span>item</span><span>)</span> <span>=&gt;</span> <span>{</span>
      <span>if</span> <span>(</span>item<span>.</span>id <span>==</span> product<span>.</span>id<span>)</span> <span>{</span>
        inCart <span>=</span> <span>true</span><span>;</span>
      <span>}</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>

  <span>function</span> <span>addToCart</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>inCart<span>)</span> <span>{</span>
      <span>let</span> updatedCart <span>=</span> <span>[</span><span>...</span>$cart<span>,</span> <span>{</span> <span>...</span>product<span>,</span> quantity<span>:</span> <span>1</span> <span>}</span><span>]</span><span>;</span>

      cart<span>.</span><span>set</span><span>(</span>updatedCart<span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>alert</span><span>(</span><span>&#34;Item already added to Cart&#34;</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>&lt;</span><span>/</span>script<span>&gt;</span>

<span>&lt;</span>main<span>&gt;</span>
  <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;col mb-4&#34;</span><span>&gt;</span>
    <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;card&#34;</span><span>&gt;</span>
      <span>&lt;</span>img src<span>=</span><span>{</span>product<span>.</span>url<span>}</span> <span>class</span><span>=</span><span>&#34;card-img-top&#34;</span> alt<span>=</span><span>&#34;...&#34;</span> <span>/</span><span>&gt;</span>
      <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;card-body&#34;</span><span>&gt;</span>
        <span>&lt;</span>h5 <span>class</span><span>=</span><span>&#34;card-title&#34;</span><span>&gt;</span><span>{</span>product<span>.</span>name<span>}</span><span>&lt;</span><span>/</span>h5<span>&gt;</span>
        <span>&lt;</span>p <span>class</span><span>=</span><span>&#34;card-text&#34;</span><span>&gt;</span>
          $<span>{</span>product<span>.</span>price<span>}</span>
          <span>&lt;</span>br <span>/</span><span>&gt;</span>
          <span>&lt;</span>small<span>&gt;</span>
            <span>{</span>product<span>.</span>shortdesc<span>}</span>
          <span>&lt;</span><span>/</span>small<span>&gt;</span>
        <span>&lt;</span><span>/</span>p<span>&gt;</span>
        <span>&lt;</span>button
          on<span>:</span>click<span>=</span><span>{</span><span>(</span><span>)</span> <span>=&gt;</span> <span>addToCart</span><span>(</span><span>)</span><span>}</span>
          <span>class</span><span>=</span><span>&#34;btn btn-primary&#34;</span>
          disabled<span>=</span><span>{</span>inCart<span>}</span><span>&gt;</span><span>{</span>inCart <span>?</span> <span>&#34;Added&#34;</span> <span>:</span> <span>&#34;Add to Cart&#34;</span><span>}</span><span>&lt;</span><span>/</span>button
        <span>&gt;</span>
      <span>&lt;</span><span>/</span>div<span>&gt;</span>
    <span>&lt;</span><span>/</span>div<span>&gt;</span>
  <span>&lt;</span><span>/</span>div<span>&gt;</span>
<span>&lt;</span><span>/</span>main<span>&gt;</span></code></pre><p>The updates to this file add two properties to the component:</p><ul><li>A reference to the <code>cart</code> property in the store</li><li>The <code>inCart</code> checks if the product using this component has been added to the store or not</li></ul><p>The <code>addToCart</code> function adds an item to the cart when the <code>Add to Cart</code> button is clicked by updating the <code>cart</code> property in the store with the new item. This function first checks if the product is already in the cart. If so, an alert is displayed indicating that the product has already been added. If not, the product is added to the cart.</p><p>The <code>inCart</code> property is also used in the template to disable the <code>Add to Cart</code> button if the product has already been added.</p><p>Next, the <code>Cart</code> component needs to display the products that have been added to the cart and also the total price. Locate the <code>src<span>/</span>components<span>/</span>Cart<span>.</span>svelte</code> file and replace its content with the following code:</p><pre><code><span>&lt;</span>script<span>&gt;</span>
  <span>import</span> <span>{</span> link <span>}</span> <span>from</span> <span>&#34;svelte-spa-router&#34;</span><span>;</span>
  <span>import</span> <span>{</span> cart <span>}</span> <span>from</span> <span>&#34;../store&#34;</span><span>;</span>

  $<span>:</span> totalPrice <span>=</span> $cart<span>.</span><span>reduce</span><span>(</span><span>(</span><span>total<span>,</span> next</span><span>)</span> <span>=&gt;</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>$cart<span>)</span><span>;</span>
    <span>return</span> total <span>+</span> next<span>.</span>quantity <span>*</span> next<span>.</span>price<span>;</span>
  <span>}</span><span>,</span> <span>0</span><span>)</span><span>;</span>
<span>&lt;</span><span>/</span>script<span>&gt;</span>

<span>&lt;</span>main<span>&gt;</span>
  <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;card&#34;</span><span>&gt;</span>
    <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;card-body&#34;</span><span>&gt;</span>
      <span>&lt;</span>h5 <span>class</span><span>=</span><span>&#34;card-title&#34;</span><span>&gt;</span>Your Cart<span>&lt;</span><span>/</span>h5<span>&gt;</span>
      <span>{</span>#<span>if</span> $cart<span>.</span>length <span>==</span> <span>0</span><span>}</span>
        <span>&lt;</span>p<span>&gt;</span>Your Cart is Empty<span>&lt;</span><span>/</span>p<span>&gt;</span>
      <span>{</span><span>/</span><span>if</span><span>}</span>
    <span>&lt;</span><span>/</span>div<span>&gt;</span>
    <span>&lt;</span>ul <span>class</span><span>=</span><span>&#34;list-group list-group-flush&#34;</span><span>&gt;</span>
      <span>{</span>#each $cart <span>as</span> item<span>}</span>
        <span>&lt;</span>li
          <span>class</span><span>=</span><span>&#34;list-group-item d-flex justify-content-between align-items-center&#34;</span>
        <span>&gt;</span>
          <span>{</span>item<span>.</span>name<span>}</span>
          <span>&lt;</span>span <span>class</span><span>=</span><span>&#34;badge badge-primary badge-pill&#34;</span><span>&gt;</span><span>{</span>item<span>.</span>quantity<span>}</span><span>&lt;</span><span>/</span>span<span>&gt;</span>
        <span>&lt;</span><span>/</span>li<span>&gt;</span>
      <span>{</span><span>/</span>each<span>}</span>
      <span>&lt;</span>li
        <span>class</span><span>=</span><span>&#34;list-group-item d-flex justify-content-between align-items-center&#34;</span>
      <span>&gt;</span>
        Price <span>&lt;</span>b<span>&gt;</span>$<span>{</span>totalPrice<span>}</span><span>&lt;</span><span>/</span>b<span>&gt;</span>
      <span>&lt;</span><span>/</span>li<span>&gt;</span>
    <span>&lt;</span><span>/</span>ul<span>&gt;</span>

    <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;card-body&#34;</span><span>&gt;</span>
      <span>&lt;</span>a use<span>:</span>link href<span>=</span><span>&#34;/shop&#34;</span> <span>class</span><span>=</span><span>&#34;btn btn-primary btn-block&#34;</span><span>&gt;</span>Checkout<span>&lt;</span><span>/</span>a<span>&gt;</span>
    <span>&lt;</span><span>/</span>div<span>&gt;</span>
  <span>&lt;</span><span>/</span>div<span>&gt;</span>
<span>&lt;</span><span>/</span>main<span>&gt;</span></code></pre><p>The update to this file first replaces the hard-coded cart items with reference to that <code>cart</code> state in the store. A <code>totalPrice</code> property is also used to evaluate the total cost of all items currently added to the shopping cart. In the template, the length of <code>cart</code> is used to display a message to the user to add items to the shopping cart when the cart is empty.</p><p>Return to the browser and reload the homepage if it hasn&#39;t been reloaded. You will see the view below. Notice the new look of the cart widget on the right column:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3OzDAoyWDYhkPpma41kAlK/34958e5b49a984b65df3857f763f9cc3/svelte_03.jpg" alt="&#34;Updated Cart - E-commerce App&#34;"/></p><p>Now click on <code>Add to Cart</code> to add at least 2 items to the cart and observe the cart widget update based on your selections like below:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/UyhS5wLpRtIr7zRjiOXsT/cacc42d088fe9417a084e78e76a8f3e7/svelte_04.jpg" alt="&#34;Items selection - E-commerce App&#34;"/></p><h2 id="Changing-Items-Quantity-and-Removing-Items-from-the-Cart">Changing Items Quantity and Removing Items from the Cart</h2><p>Notice how the default quantity of each product added to the cart is set to one (1)? This is because every count has to start from 1. In a proper shopping cart application, users should be allowed to increase the quantity of each selected item.</p><p>The next task is to add features for increasing and decreasing the number of cart items. You will also add the ability to completely remove an item from the cart.</p><p>From the shopping cart details page shown earlier, each cart item displayed with buttons to manage its quantity uses the <code>CartItem</code> component. Locate this component at <code>src<span>/</span>components<span>/</span>CartItem<span>.</span>svelte</code> and replace the code in it with the following:</p><pre><code><span>&lt;</span>script<span>&gt;</span>
  <span>import</span> Product <span>from</span> <span>&#34;../components/Product.svelte&#34;</span><span>;</span>
  <span>import</span> <span>{</span> cart <span>}</span> <span>from</span> <span>&#34;../store&#34;</span><span>;</span>

  <span>export</span> <span>let</span> product<span>;</span>

  <span>let</span> itemQuantity <span>=</span> <span>0</span><span>;</span>

  $<span>:</span> <span>{</span>
    <span>let</span> get_product <span>=</span> $cart<span>.</span><span>filter</span><span>(</span><span>(</span><span>item</span><span>)</span> <span>=&gt;</span> item<span>.</span>id <span>==</span> product<span>.</span>id<span>)</span><span>;</span>

    itemQuantity <span>=</span> get_product<span>[</span><span>0</span><span>]</span><span>.</span>quantity<span>;</span>
  <span>}</span>

  <span>function</span> <span>changeQuantity</span><span>(</span>action <span>=</span> <span>&#34;add&#34;</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>action <span>==</span> <span>&#34;add&#34;</span><span>)</span> <span>{</span>
      product<span>.</span>quantity <span>=</span> product<span>.</span>quantity <span>+</span> <span>1</span><span>;</span>

      <span>updateCart</span><span>(</span>product<span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>if</span> <span>(</span>product<span>.</span>quantity <span>&gt;</span> <span>1</span><span>)</span> <span>{</span>
        product<span>.</span>quantity <span>=</span> product<span>.</span>quantity <span>-</span> <span>1</span><span>;</span>
        <span>updateCart</span><span>(</span>product<span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>//Remove the item</span>

        <span>removeItem</span><span>(</span>product<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>

  <span>function</span> <span>removeItem</span><span>(</span><span>product</span><span>)</span> <span>{</span>
    <span>let</span> removedItemCart <span>=</span> $cart<span>.</span><span>filter</span><span>(</span><span>(</span><span>cartItem</span><span>)</span> <span>=&gt;</span> <span>{</span>
      <span>return</span> cartItem<span>.</span>id <span>!=</span> product<span>.</span>id<span>;</span>
    <span>}</span><span>)</span><span>;</span>

    cart<span>.</span><span>set</span><span>(</span>removedItemCart<span>)</span><span>;</span>
  <span>}</span>

  <span>function</span> <span>updateCart</span><span>(</span><span>product</span><span>)</span> <span>{</span>

    <span>let</span> updatedCart <span>=</span> $cart<span>.</span><span>map</span><span>(</span><span>(</span><span>cartItem</span><span>)</span> <span>=&gt;</span> <span>{</span>
      <span>if</span> <span>(</span>cartItem<span>.</span>id <span>==</span> product<span>.</span>id<span>)</span> <span>{</span>
        <span>return</span> product<span>;</span>
      <span>}</span>

      <span>return</span> cartItem<span>;</span>
    <span>}</span><span>)</span><span>;</span>

    cart<span>.</span><span>set</span><span>(</span>updatedCart<span>)</span><span>;</span>
  <span>}</span>
<span>&lt;</span><span>/</span>script<span>&gt;</span>

<span>&lt;</span>main<span>&gt;</span>
  <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;row cart-item-row&#34;</span><span>&gt;</span>
    <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;col-md-6&#34;</span><span>&gt;</span>
      <span>&lt;</span>Product <span>{</span>product<span>}</span> <span>/</span><span>&gt;</span>
    <span>&lt;</span><span>/</span>div<span>&gt;</span>
    <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;col-md-4&#34;</span><span>&gt;</span>
      <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;row&#34;</span><span>&gt;</span>
        <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;col-md-5&#34;</span><span>&gt;</span>
          <span>&lt;</span>button
            on<span>:</span>click<span>=</span><span>{</span><span>(</span><span>)</span> <span>=&gt;</span> <span>changeQuantity</span><span>(</span><span>)</span><span>}</span>
            <span>class</span><span>=</span><span>&#34;btn btn-primary btn-block&#34;</span><span>&gt;</span><span>+</span><span>&lt;</span><span>/</span>button
          <span>&gt;</span>
        <span>&lt;</span><span>/</span>div<span>&gt;</span>
        <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;col-md-2 text-center&#34;</span><span>&gt;</span><span>{</span>product<span>.</span>quantity<span>}</span><span>&lt;</span><span>/</span>div<span>&gt;</span>
        <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;col-md-5&#34;</span><span>&gt;</span>
          <span>&lt;</span>button
            on<span>:</span>click<span>=</span><span>{</span><span>(</span><span>)</span> <span>=&gt;</span> <span>changeQuantity</span><span>(</span><span>&#34;remove&#34;</span><span>)</span><span>}</span>
            <span>class</span><span>=</span><span>&#34;btn btn-warning btn-block&#34;</span><span>&gt;</span><span>-</span><span>&lt;</span><span>/</span>button
          <span>&gt;</span>
        <span>&lt;</span><span>/</span>div<span>&gt;</span>
      <span>&lt;</span><span>/</span>div<span>&gt;</span>
      <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;row cart-remove-button&#34;</span><span>&gt;</span>
        <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;col-md-12&#34;</span><span>&gt;</span>
          <span>&lt;</span>button on<span>:</span>click<span>=</span><span>{</span><span>(</span><span>)</span> <span>=&gt;</span> <span>removeItem</span><span>(</span><span>)</span><span>}</span> <span>class</span><span>=</span><span>&#34;btn btn-danger btn-block&#34;</span>
            <span>&gt;</span>Remove Item<span>&lt;</span><span>/</span>button
          <span>&gt;</span>
        <span>&lt;</span><span>/</span>div<span>&gt;</span>
      <span>&lt;</span><span>/</span>div<span>&gt;</span>
    <span>&lt;</span><span>/</span>div<span>&gt;</span>
  <span>&lt;</span><span>/</span>div<span>&gt;</span>
<span>&lt;</span><span>/</span>main<span>&gt;</span>

<span>&lt;</span>style scoped<span>&gt;</span>
  <span>.</span>cart<span>-</span>item<span>-</span>row <span>{</span>
    border<span>-</span>bottom<span>:</span> <span>1</span>px solid #ccc<span>;</span>
    margin<span>-</span>top<span>:</span> <span>20</span>px<span>;</span>
  <span>}</span>
  <span>.</span>cart<span>-</span>remove<span>-</span>button <span>{</span>
    margin<span>-</span>top<span>:</span> <span>10</span>px<span>;</span>
  <span>}</span>
<span>&lt;</span><span>/</span>style<span>&gt;</span></code></pre><p>This update adds two computed properties, <code>cart</code>, which is a reference to the <code>cart</code> state property in the store, and <code>itemQuantity</code>, which gets the current quantity of the item in the shopping cart.</p><p>Three methods are also added which do the following:</p><ul><li><code>changeQuantity</code>: takes in an <code>action</code> argument that is either set to <code>add</code> or <code>decrease</code> to determine whether to increase or decrease the item quantity by 1. If the current quantity is 1 and the function is asked to decrease the item, the item would be removed completely.</li><li><code>removeItem</code>: completely removes an item from the shopping cart.</li><li><code>updateCart</code>: A utility function for reusing the update logic for <code>cart</code> in the store</li></ul><p>Next, locate the shopping cart details page at <code>src<span>/</span>views<span>/</span>ShoppingCart<span>.</span>svelte</code> and replace its content with the following code:</p><pre><code><span>&lt;</span>script<span>&gt;</span>
  <span>import</span> Cart <span>from</span> <span>&#34;../components/Cart.svelte&#34;</span><span>;</span>
  <span>import</span> CartItem <span>from</span> <span>&#34;../components/CartItem.svelte&#34;</span><span>;</span>

  <span>import</span> <span>{</span> cart <span>}</span> <span>from</span> <span>&#34;../store&#34;</span><span>;</span>
<span>&lt;</span><span>/</span>script<span>&gt;</span>

<span>&lt;</span>main<span>&gt;</span>
  <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;home container&#34;</span><span>&gt;</span>
    <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;row&#34;</span><span>&gt;</span>
      <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;col-md-8 pt-5&#34;</span><span>&gt;</span>
        <span>{</span>#each $cart <span>as</span> product<span>}</span>
          <span>&lt;</span>CartItem <span>{</span>product<span>}</span> <span>/</span><span>&gt;</span>
        <span>{</span><span>/</span>each<span>}</span>
      <span>&lt;</span><span>/</span>div<span>&gt;</span>
      <span>&lt;</span>div <span>class</span><span>=</span><span>&#34;col-md-4 pt-5&#34;</span><span>&gt;</span>
        <span>&lt;</span>Cart <span>/</span><span>&gt;</span>
      <span>&lt;</span><span>/</span>div<span>&gt;</span>
    <span>&lt;</span><span>/</span>div<span>&gt;</span>
  <span>&lt;</span><span>/</span>div<span>&gt;</span>
<span>&lt;</span><span>/</span>main<span>&gt;</span></code></pre><p>This update replaces the hard-coded cart items with reference to the <code>cart</code> property in the store.</p><h2 id="Running-the-Application">Running the Application</h2><p>With these changes, your app should be reloaded once again. Add a few items to the shopping cart if the reload has reset the cart back to being empty, then click &#34;Checkout&#34; to go to the shopping cart details page. On this page, increment and decrement some of the items in the cart and try removing one of them by clicking &#34;Remove&#34;. You will see the cart widget update accordingly on the right column like below:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7xFFbT1x3IfKUxCFT7IDvl/b42328e5782e261ffb3d1a454eba2a8c/svelte_05.jpg" alt="&#34;Update Cart Items - E-commerce App&#34;"/></p><p>Perfect!</p><h2 id="Conclusion">Conclusion</h2><p>In this tutorial, you have been able to implement state management in a Svelte application using a shopping cart demo application.</p><p>State management involves a design thinking process where you have to decide which state properties are global (reside in the store) and which state properties are to be localized to the respective components that make use of them. Knowing which state should be local and which state properties should reside in the central store will help you make good design decisions.</p><p>If any part of your demonstration is not working as expected, I advise you to go through the article once again to see if there is any step you may have missed. If you need additional help, feel free to reach out in the comments.</p><p>Happy coding :)</p></div></div>]]></content:encoded>
      <pubDate>Tue, 17 Aug 2021 15:01:00 +0000</pubDate>
    </item>
    <item>
      <title>Auth0 Marketplace Now Offers netID Solution</title>
      <link>https://auth0.com/blog/auth0-marketplace-now-offers-netid-solution/</link>
      <description>Auth0 integrates netID to support customer privacy needs in Europe</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><strong>London/Montabaur, Germany – August 17, 2021 –</strong> <a href="https://auth0.com/" target="_blank" rel="noreferrer noopener">Auth0</a>, the modern identity platform, and the <a href="https://enid.foundation/en/" target="_blank" rel="noreferrer noopener">European netID Foundation</a> today announced the availability of netID Single Sign-On on <a href="https://marketplace.auth0.com/" target="_blank" rel="noreferrer noopener">Auth0 Marketplace</a>, a catalog of trusted technology integrations to extend the functionality of Auth0’s identity management platform. </p><p><a href="https://marketplace.auth0.com/integrations/netid-single-sign-on" target="_blank" rel="noreferrer noopener">netID</a> enables users to sign into apps and websites with their netID account and to decide privately and transparently which data to share. As an independent European identity provider with more than 38 million active user accounts in Germany, netID provides the necessary infrastructure for <a href="https://auth0.com/blog/what-is-single-sign-on-a-non-developer-s-guide/" target="_blank" rel="noreferrer noopener">Single Sign-On (SSO)</a> but does not store any user data itself. Users can manage the consents they’ve given at any time in netID’s Privacy Center.</p><p>“Whether in finance, e-commerce, or online publishing, engaging with users in an all trusted and transparent way is key to driving success. We are excited about the partnership with Auth0 and the availability of the netID Single Sign-On integration. Joint customers can now seamlessly integrate our product and offer users a European alternative to U.S. social login providers,” says Achim Schlosser, board member, and chief technology officer of the European netID Foundation.</p><p>“After speaking with many customers, we have identified the integrations that matter to them. The availability of netID on Auth0 Marketplace is a direct response to the growing need for privacy-enhancing technologies in Europe and part of our continued commitment to international markets,” said Cassio Sampaio, SVP of Product at Auth0. “We are thrilled to have netID as a vetted and valuable vendor in Auth0 Marketplace.” </p><p>Auth0 reviews partner integration functionality and makes available integrations that are easy to discover and integrate for customers. Partners can participate in the growing demand for digital identity solutions and increase their visibility as part of the Auth0 Marketplace and can learn more here: <a href="https://auth0.com/partners" target="_blank" rel="noreferrer noopener">https://auth0.com/partners</a>.</p><p><a href="https://auth0.com/blog/okta-acquisition-announcement/" target="_blank" rel="noreferrer noopener">Auth0, recently acquired by Okta</a>, provides a modern identity platform that helps organizations meet the security, privacy, and convenience needs of their users. Please visit <a href="https://auth0.com/identity-os" target="_blank" rel="noreferrer noopener">Auth0 identity OS</a> to learn more.</p><h2 id="About-the-European-netID-Foundation">About the European netID Foundation</h2><p>The European netID Foundation was established in March 2018 by Mediengruppe RTL Deutschland, ProSiebenSat.1, and United Internet with its brands WEB.DE and GMX. With an independent market solution, the foundation supports Internet offerings from all industry sectors with the implementation of the new European data protection law and, for this purpose, has created the open login standard netID. The initiators of the foundation together reach around 50 million unique users every month and together have more than 38 million active accounts. The foundation is explicitly open to additional partners and initiatives. Further information is available at <a href="https://auth0.com/blog/auth0-marketplace-now-offers-netid-solution/www.enid.eu" target="_blank" rel="noreferrer noopener">www.enid.eu</a>.</p><div><h2 id="About-Auth0">About Auth0 </h2><p>Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit <a href="https://auth0.com/" target="_blank" rel="noopener noreferrer">https://auth0.com</a>.</p></div><h3 id="Media-Contacts">Media Contacts</h3><p>Alexandra Roszkowski<br/><a href="mailto:presse@enid.eu" target="_blank" rel="noreferrer noopener">presse@enid.eu</a><br/>+49 162 25 27-188<br/></p><p>Sarah Konarski &amp; Nele Mascher<br/>Finn Partners for Auth0, DACH<br/><a href="mailto:auth0de@finnpartners.com" target="_blank" rel="noreferrer noopener">auth0de@finnpartners.com</a><br/></p></div></div>]]></content:encoded>
      <pubDate>Tue, 17 Aug 2021 01:20:00 +0000</pubDate>
    </item>
    <item>
      <title>The 7 Most Common Types of Cybersecurity Attacks in 2021</title>
      <link>https://auth0.com/blog/the-7-most-common-types-of-cybersecurity-attacks-in-2021/</link>
      <description>Learn which cybersecurity tactics and tools will help you combat today&#39;s common cyberattacks.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>With more people working remotely or online post-2020, the <a href="https://thehill.com/policy/cybersecurity/493198-fbi-sees-spike-in-cyber-crime-reports-during-coronavirus-pandemic" target="_blank" rel="noreferrer noopener">FBI reports</a> that cybercriminals are quadrupling the number of cyberattacks they use to disrupt online activities. Research also shows the impact to organizations and their users from a single successful cyberattack is growing each year.</p><p>For example, in 2017, nearly <a href="https://www.statista.com/statistics/273550/data-breaches-recorded-in-the-united-states-by-number-of-breaches-and-records-exposed/" target="_blank" rel="noreferrer noopener"><em>197 million records</em></a> were exposed due to data breaches. In 2020, that number <a href="https://pages.riskbasedsecurity.com/hubfs/Reports/2020/2020%20Year%20End%20Data%20Breach%20QuickView%20Report.pdf" target="_blank" rel="noreferrer noopener">grew to 37 billion</a>, even though the overall number of data breaches had decreased. And IBM reports that the costs are growing for organizations that fall victim to these attacks in countries like the United States, where the average cost of a data breach grew from $7.91M to $8.64M between <a href="https://www.ibm.com/downloads/cas/861MNWN2" target="_blank" rel="noreferrer noopener">2018</a> and <a href="https://www.ibm.com/security/data-breach" target="_blank" rel="noreferrer noopener">2020</a>.</p><p>Many of the methods cybercriminals use to breach organizations rely on human error. Even your sharpest employees can become your greatest weakness if they click on a malicious link without realizing it. However, other cyberattacks exploit gaps in your <a href="https://auth0.com/blog/what-is-data-security/" target="_blank" rel="noreferrer noopener">data security</a> efforts to gain access to sensitive data.</p><p>Below are seven of the most common cyberattacks your organization will face in 2021 and the ways to protect yourself against the data breaches they have the potential to cause.</p><h2 id="1--Malware-Attacks">1. Malware Attacks</h2><p>Malware refers to many different types of malicious software designed to infiltrate, spy on, or create a backdoor and control an organization’s systems or data. This includes ransomware, worms, trojans, adware, and spyware. <a href="https://monstercloud.com/blog/2020/03/23/coronavirus-alert-ransomware-attacks-up-by-800/" target="_blank" rel="noreferrer noopener">Experts report</a> that malware usage is up almost 800% since early 2020.</p><p>Malware has the potential to cause major data breaches and severely disrupt business operations. Microsoft was the victim of a major ransomware attack, where WannaCry <a href="https://en.wikipedia.org/wiki/WannaCry_ransomware_attack" target="_blank" rel="noreferrer noopener">took advantage of a weak spot in their operating system</a> and displayed the following message to banks, health care providers, manufacturers, and other businesses across the globe:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1eCk2eoRxo2dlqfakT2rLF/3d36517813cea24b63b795f7fe3a256c/Uploaded_from_The_7_Most_Common_Types_of_Cybersecurity_Attacks_in_2021" alt="image.png"/>
</p><p><i><a href="https://blog.malwarebytes.com/cybercrime/2017/05/wanacrypt0r-ransomware-hits-it-big-just-before-the-weekend/" target="_blank" rel="noreferrer noopener">Source</a></i></p><p>To regain access to their computers, along with any files that hadn’t been backed up, businesses had to pay a ransom to the creators of the WannaCry program in <a href="https://bitcoin.org/en/" target="_blank" rel="noreferrer noopener">Bitcoin</a>.</p><p>Malware is typically downloaded unwittingly by clicking a malicious link or by tricking a user into thinking they&#39;re downloading something legitimate when they’re not.</p><h3 id="How-to-Protect-Against-Malware-Attacks">How to Protect Against Malware Attacks</h3><p>Teaching your employees how to spot suspicious links and pop-ups that could contain malware will help reduce the chance that it could infect your systems.</p><p>Additional ways to protect against malware include keeping your operating systems up to date to ensure known security gaps are patched and using anti-virus software. For example, the <a href="https://www.wired.com/story/equifax-breach-no-excuse/" target="_blank" rel="noreferrer noopener">Equifax</a> data breach could have been prevented had a known patch been installed in time.</p><h2 id="2--Phishing-Attacks">2. Phishing Attacks</h2><p>Phishing attacks attempt to steal information from users or trick them into downloading malware by sending malicious emails or text messages (SMS) that look like real requests but are, in fact, a Scam. Here’s a Dropbox email asking users to verify their email address that’s actually a phishing attack:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2ISbM89J8qjqwVy4kUpgOf/a1b52597302c386ee8381bfd6f6948d9/Uploaded_from_The_7_Most_Common_Types_of_Cybersecurity_Attacks_in_2021" alt="image.png"/> 
</p><p><i><a href="https://www.bankinfosecurity.com/locky-returns-via-spam-dropbox-themed-phishing-attacks-a-10250" target="_blank" rel="noreferrer noopener">Source</a></i></p><p>According to <a href="https://enterprise.verizon.com/resources/reports/dbir/2020/results-and-analysis/" target="_blank" rel="noreferrer noopener">Verizon’s 2020 Data Breach Investigations Report</a>, phishing attacks are the most common cause of data breaches globally and have been the root cause of notable instances of cybercrime in the last decade.</p><p>The cybercriminals who breached the AP News Twitter account and falsely <a href="https://www.bbc.com/news/world-us-canada-21508660" target="_blank" rel="noreferrer noopener">tweeted</a> that the White House was under attack used a targeted phishing attack (spear-phishing) to gain access to the account, as did the bad actors who leaked sensitive emails from Hillary Clinton’s campaign chairman <a href="https://www.cbsnews.com/news/the-phishing-email-that-hacked-the-account-of-john-podesta/" target="_blank" rel="noreferrer noopener">before the 2016 election</a>.</p><h3 id="How-to-Protect-Against-Phishing-Attacks">How to Protect Against Phishing Attacks</h3><p>The best way to protect your organization against phishing attacks is to educate your employees on how to spot a questionable email or text message. The training programs below can help you do this:</p><ul><li><em>Digital Defense’s</em> <a href="https://www.digitaldefense.com/professional-services/secured-training/" target="_blank" rel="noreferrer noopener"><em>SecurED training program</em></a></li><li><em>Inspired eLearning’s</em> <a href="https://inspiredelearning.com/security-awareness/awareness-c-suite/" target="_blank" rel="noreferrer noopener"><em>Security Awareness</em></a></li></ul><p>Additionally, CSO has compiled a list of resources that can help you train your teams to spot phishing attacks <a href="https://www.csoonline.com/article/3225471/please-dont-send-me-to-cybersecurity-training.html" target="_blank" rel="noreferrer noopener">here</a>.</p><h2 id="3--Distributed-Denial-of-Service-Attacks">3. Distributed Denial of Service Attacks</h2><p>Distributed denial of service (DDoS) attacks disrupt the traffic to a website, application, server, service, or network by overwhelming it with a flood of traffic from compromised computer networks (<a href="https://usa.kaspersky.com/resource-center/threats/botnet-attacks" target="_blank" rel="noreferrer noopener">botnets</a>) that prevents real users from accessing it. In 2018, GitHub experienced the largest DDoS attack ever when it was hit with 1.35 terabits of traffic per second and was <a href="https://www.wired.com/story/github-ddos-memcached/" target="_blank" rel="noreferrer noopener">offline for almost 20 minutes as a result</a>.</p><p>DDoS attacks are common and increased by 50% in 2020 compared to 2019, with a large surge occurring in early 2020 during the pandemic, according to security company <a href="https://securelist.com/ddos-attacks-in-q3-2020/99171/" target="_blank" rel="noreferrer noopener">Kaspersky</a>.</p><h3 id="How-to-Protect-Against-DDoS-Attacks">How to Protect Against DDoS Attacks</h3><p>DDoS attacks are tricky to identify because they’re often hard to distinguish from legitimate traffic. Some <a href="https://www.cloudflare.com/learning/ddos/what-is-a-ddos-attack/" target="_blank" rel="noreferrer noopener">methods of protecting against DDoS attacks</a> include blocking all traffic for a short period of time, rate-limiting traffic to a website, using a web application firewall to detect suspicious traffic patterns, or scattering traffic across a network of servers to reduce the attack’s impact.</p><h2 id="4--Man-in-the-Middle-Attacks">4. Man-in-the-Middle Attacks</h2><p>Man-in-the-middle (MitM) attacks are when bad actors spy on or intercept communication between you and your users or employees. MitM attacks are most commonly used to steal personal or company information or to redirect that information to another destination or in espionage situations, such as when <a href="https://www.theguardian.com/world/2018/oct/04/how-russian-spies-bungled-cyber-attack-on-weapons-watchdog" target="_blank" rel="noreferrer noopener">Russian hackers</a> attempted to breach the Organisation for the Prohibition of Chemical Weapons (OPCW).</p><p>MitM attacks are <a href="https://www.csoonline.com/article/3340117/what-is-a-man-in-the-middle-attack-how-mitm-attacks-work-and-how-to-prevent-them.html" target="_blank" rel="noreferrer noopener">not the most common cyberattack</a> because many of the same objectives can be achieved using malware. However, MitM attacks do present a threat for organizations because they’re often hard to spot and because <a href="https://www.businesswire.com/news/home/20201215005287/en/Upwork-Study-Finds-22-of-American-Workforce-Will-Be-Remote-by-2025" target="_blank" rel="noreferrer noopener">more employees are working remotely</a> post-2020.</p><p>For example, fake WiFi networks are <a href="https://hackernoon.com/a-hacker-intercepted-your-wifi-traffic-stole-your-contacts-passwords-financial-data-heres-how-4fc0df9ff152" target="_blank" rel="noreferrer noopener">easy to deploy</a> in public places like coffee shops where remote employees often work. People often connect to these networks without realizing it, allowing bad actors to spy on them while they use the network.</p><h3 id="How-to-Protect-Against-MitM-Attacks">How to Protect Against MitM Attacks</h3><p>End-to-end encryption protocols like <a href="https://www.cloudflare.com/learning/ssl/transport-layer-security-tls/" target="_blank" rel="noreferrer noopener">Transport Layer Security</a> (TLS) are the best way to protect against MitM attacks. Additionally, requiring your employees to use a VPN to access company networks over public WiFi will ensure that any information shared during their session remains private, regardless of whether the network belongs to a bad actor or if their coffee shop’s WiFi is simply unsecured.</p><h2 id="5--Credential-Stuffing-Attacks">5. Credential Stuffing Attacks</h2><p><a href="https://auth0.com/blog/what-is-credential-stuffing/" target="_blank" rel="noreferrer noopener">Credential stuffing</a> is a type of brute-force cyber-attack where bad actors use stolen usernames and passwords from one data breach to access user accounts at another organization.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1WPDZfXKzHLheBp0XbP2em/6769d8d365597a77b9de207e48c303d8/Uploaded_from_The_7_Most_Common_Types_of_Cybersecurity_Attacks_in_2021" alt="image.png"/></p><p>Credential stuffing is possible because, statistically, <a href="https://services.google.com/fh/files/blogs/google_security_infographic.pdf" target="_blank" rel="noreferrer noopener">65% of all people</a> reuse the same password across multiple accounts. As a result, credential stuffing attacks are one of the <a href="https://enterprise.verizon.com/resources/reports/dbir/" target="_blank" rel="noreferrer noopener">most common</a> causes of data breaches globally.</p><h3 id="How-to-Protect-Against-Credential-Stuffing-Attacks">How to Protect Against Credential Stuffing Attacks</h3><p>The best way to protect against credential stuffing attacks is by either implementing <a href="https://auth0.com/passwordless/" target="_blank" rel="noreferrer noopener">passwordless authentication</a> or <a href="https://auth0.com/multifactor-authentication" target="_blank" rel="noreferrer noopener">multi-factor authentication</a> (MFA). Passwordless authentication prevents bad actors from using stolen credentials by eliminating them altogether, while MFA requires bad actors to verify their identity in one or more ways in addition to the stolen credentials they’re using to log in.</p><h2 id="6--Password-Spraying-Attacks">6. Password Spraying Attacks</h2><p>Password spraying is also a type of brute-force attack where bad actors attempt to guess a user’s password from a list of common passwords like “123456” or “password.”</p><p>Like credential stuffing, password spraying is quite common. For example, Verizon’s 2020 Data Breach Report showed that over <a href="https://enterprise.verizon.com/content/verizonenterprise/us/en/index/resources/reports/2020-data-breach-investigations-report.pdf" target="_blank" rel="noreferrer noopener">80% of all hacking-related data breaches</a> involved brute-force methods like password spraying.</p><h3 id="How-to-Protect-Against-Password-Spraying-Attacks">How to Protect Against Password Spraying Attacks</h3><p>Password spraying attacks can be prevented by using passwordless authentication or MFA, just like credential stuffing attacks can be. However, you can also reduce the risk and impact of a data breach via password spraying by following the <a href="https://auth0.com/blog/dont-pass-on-the-new-nist-password-guidelines/" target="_blank" rel="noreferrer noopener">NIST Password Guidelines</a>, which are considered the best password standards in the world.</p><h2 id="7--Mobile-Device-Attacks">7. Mobile Device Attacks</h2><p><a href="https://www.t-mobile.com/content/dam/tfb/pdf/T-Mobile-for-Business-2020-Workplace-Mobility-Report.pdf?icid=TFB_TMO_P_TFBFTRWRKS_7LCBNVDVYBXY27WF321599" target="_blank" rel="noreferrer noopener">Many organizations are working to increase the mobility</a> of their workforce because it improves operational efficiency and productivity. However, cybercriminals are well aware of this fact and are targeting mobile devices more frequently <a href="https://www.zdnet.com/article/mobile-malware-attacks-are-booming-in-2019-these-are-the-most-common-threats/" target="_blank" rel="noreferrer noopener">year</a> over <a href="https://www.mcafee.com/content/dam/consumer/en-us/docs/2020-Mobile-Threat-Report.pdf" target="_blank" rel="noreferrer noopener">year</a> with a variety of attacks on this list, which puts organizations at risk for a data breach through more devices than before.</p><p><a href="https://blog.lookout.com/lookout-trident-pegasus-enterprise-discovery" target="_blank" rel="noreferrer noopener">The Pegasus attack</a> on Apple’s iOS software is a prime example. Pegasus infected iPhones through phishing text messages that asked recipients to click on a link inside the text message. Clicking the link triggered the installation of spyware capable of monitoring people through their camera and microphone. And once infected, users had their login credentials stolen from WhatsApp, Gmail, and other sensitive communication applications.</p><h3 id="How-to-Protect-Against-Mobile-Device-Attacks">How to Protect Against Mobile Device Attacks</h3><p>Protecting your organization against mobile security threats requires a strong enterprise mobility management (EMM) program, as well as mobile device management (MDM) tools that help you protect any company data that may be on your employees’ personal or work devices. Identity and access management tools like multi-factor authentication can also help secure any work applications that contain sensitive information from unauthorized access.</p><h2 id="Create-Additional-Layers-of-Security-at-the-Login-Stage">Create Additional Layers of Security at the Login Stage</h2><p>The impact of many cyberattacks on this list (as well as <a href="https://www.google.com/url?q=https://auth0.com/resources/whitepapers/state-of-security-identity-report&amp;sa=D&amp;source=editors&amp;ust=1624045583510000&amp;usg=AOvVaw0jtWJoRiARLi1pwCySdu1J" target="_blank" rel="noreferrer noopener">others that many companies face</a>) can be mitigated or prevented with strong authentication protocols.</p><p>First and foremost, this means good password policies and sound employee education. However, taking the next step to <a href="https://www.google.com/url?q=https://auth0.com/login-security&amp;sa=D&amp;source=editors&amp;ust=1624045583512000&amp;usg=AOvVaw2FeIurZ9Qr026LNUW7RDFZ" target="_blank" rel="noreferrer noopener">secure login procedures</a> with security functionality like multi-factor authentication, <a href="https://auth0.com/docs/attack-protection/brute-force-protection" target="_blank" rel="noreferrer noopener">brute-force protection</a>, or passwordless authentication can add a new dimension of safety to your system.</p><p>Auth0 makes it easy to build secure authentication for the right people without compromising on user experience — <a href="https://auth0.com/resources/videos/platform-introduction-video-2020" target="_blank" rel="noreferrer noopener">learn more about Auth0’s platform here</a>.</p><div><h2 id="About-Auth0">About Auth0 </h2><p>Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit <a href="https://auth0.com/" target="_blank" rel="noopener noreferrer">https://auth0.com</a>.</p></div></div></div>]]></content:encoded>
      <pubDate>Mon, 16 Aug 2021 15:44:00 +0000</pubDate>
    </item>
    <item>
      <title>Async Await in Swift</title>
      <link>https://auth0.com/blog/async-await-in-swift/</link>
      <description>A guide to fully understand the new concurrency system in Swift.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>This year, WWDC came with a bunch of new features and updates. Maybe one of the most expected was the introduction of the new concurrency system by using async/await syntax. This is a huge improvement in the way that we write asynchronous code. </p><h2 id="Before-Async-Await">Before Async/Await</h2><p>Imagine that we are working on an app for a grocery store and, we want to display its list of products. We are probably going to have something like this:</p><pre><code><span>func</span> <span>fetchProducts</span><span>(</span><span>_</span> completion<span>:</span> @<span>escaping</span><span>(</span><span>[</span><span>Product</span><span>]</span><span>)</span> <span>-</span><span>&gt;</span> <span>Void</span><span>)</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>

<span>var</span> products <span>=</span> <span>[</span><span>Product</span><span>]</span><span>(</span><span>)</span>
fetchProducts <span>{</span> <span>[</span><span>weak</span> <span>self</span><span>]</span> products <span>in</span>
    <span>guard</span> <span>let</span> strongSelf <span>=</span> <span>self</span> <span>else</span> <span>{</span> <span>return</span> <span>}</span>
    strongSelf<span>.</span>products<span>.</span><span>append</span><span>(</span>contentsOf<span>:</span> products<span>)</span>
<span>}</span></code></pre><p>A pretty standard and well-known code using completion blocks. Now suppose that the grocery store has, once in a while, some kind of offers for some products (e.g., &#34;Take 2, pay 1&#34;). And, we want to hold a list with these offers. Let&#39;s adjust our code by creating a new function to retrieve a String with the promotion text, given a specific product.</p><pre><code><span>func</span> <span>fetchProducts</span><span>(</span><span>_</span> completion<span>:</span> @<span>escaping</span><span>(</span><span>[</span><span>Product</span><span>]</span><span>)</span> <span>-</span><span>&gt;</span> <span>Void</span><span>)</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>
<span>func</span> <span>getOffer</span><span>(</span><span>for</span> product<span>:</span> <span>Int</span><span>,</span> @<span>escaping</span><span>(</span><span>String</span><span>)</span> <span>-</span><span>&gt;</span> <span>Void</span><span>)</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>

<span>typealias</span> <span>ProductOffer</span> <span>=</span> <span>(</span>productId<span>:</span> <span>Int</span><span>,</span> offer<span>:</span> <span>String</span><span>)</span>
<span>var</span> products <span>=</span> <span>[</span><span>Product</span><span>]</span><span>(</span><span>)</span>
<span>var</span> offers <span>=</span> <span>[</span><span>ProductOffer</span><span>]</span><span>(</span><span>)</span>

fetchProducts <span>{</span> <span>[</span><span>weak</span> <span>self</span><span>]</span> products <span>in</span>
    <span>guard</span> <span>let</span> strongSelf <span>=</span> <span>self</span> <span>else</span> <span>{</span> <span>return</span> <span>}</span>

    <span>for</span> product <span>in</span> products <span>{</span>
        strongSelf<span>.</span>products<span>.</span><span>append</span><span>(</span>product<span>)</span>

        <span>getOffer</span><span>(</span><span>for</span><span>:</span> product<span>.</span>id<span>)</span> <span>{</span> <span>[</span><span>weak</span> <span>self</span><span>]</span> offerText <span>in</span>
            <span>guard</span> <span>let</span> strongSelf <span>=</span> <span>self</span> <span>else</span> <span>{</span> <span>return</span> <span>}</span>
            <span>let</span> productOffer <span>=</span> <span>ProductOffer</span><span>(</span>productId<span>:</span> product<span>.</span>id<span>,</span> offer<span>:</span> offerText<span>)</span>
            strongSelf<span>.</span>offers<span>.</span><span>append</span><span>(</span>productOffer<span>)</span>
        <span>}</span>
    <span>}</span>
<span>}</span></code></pre><p>We only have two nested closures for a simple feature, and you can see that our code starts to get a little messed up.</p><h2 id="Async-Await">Async/Await</h2><p>From Swift 5.5 onwards, we can start using async/await functions to write asynchronous code without using completion handlers to returns values. Instead, we are allowed to return the values in the return object directly.</p><p>To mark a function as asynchronous, we only have to put the keyword <strong>async</strong> before the return type.</p><pre><code><span>func</span> <span>fetchProducts</span><span>(</span><span>)</span> async <span>-</span><span>&gt;</span> <span>[</span><span>Product</span><span>]</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>
<span>func</span> <span>getOffer</span><span>(</span><span>for</span> product<span>:</span> <span>Int</span><span>)</span> async <span>-</span><span>&gt;</span> <span>String</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span></code></pre><p>This is much easier and simple to read, but the best part comes from the caller&#39;s side. When we want to use the result of a function marked as <strong>async,</strong> we need to make sure that its execution is already completed. To make this possible, we need to write the <strong>await</strong> keyword in front of the function call. By doing this, the current execution will be paused until the result is available for its use.</p><pre><code><span>let</span> products <span>=</span> await <span>fetchProducts</span><span>(</span><span>)</span>

<span>for</span> product <span>in</span> products <span>{</span>
    <span>let</span> offerText <span>=</span> await <span>getOffer</span><span>(</span><span>for</span><span>:</span> product<span>.</span>id<span>)</span>

    <span>if</span> <span>!</span>offerText<span>.</span><span>isEmpty</span> <span>{</span>
        <span>let</span> productOffer <span>=</span> <span>ProductOffer</span><span>(</span>productId<span>:</span> product<span>.</span>id<span>,</span> offer<span>:</span> offerText<span>)</span>
        offers<span>.</span><span>append</span><span>(</span>productOffer<span>)</span>
    <span>}</span>
<span>}</span></code></pre><p>Although, if we want to execute other tasks while the async function is being executed, we should put the keyword <strong>async</strong> in front of the variable (or let) declaration. In this case, the <strong>await</strong> keyword will need to be placed in front of the variable (or let) where we are accessing the result of the async function.</p><pre><code>async <span>let</span> products <span>=</span> <span>fetchProducts</span><span>(</span><span>)</span>
<span>.</span><span>.</span><span>.</span>
<span>// Do some work</span>
<span>.</span><span>.</span><span>.</span>
<span>print</span><span>(</span>await products<span>)</span></code></pre><h3 id="Parallel-Asynchronous-Functions">Parallel Asynchronous Functions</h3><p>Now imagine that in our app, we want to fetch products by category—for example, just the frozen products. Let&#39;s go ahead and make the adjustments to our code.</p><pre><code><span>enum</span> <span>ProductCategory</span> <span>{</span>
    <span>case</span> frozen
    <span>case</span> meat
    <span>case</span> vegetables
    <span>.</span><span>.</span><span>.</span>
<span>}</span>

<span>func</span> <span>fetchProducts</span><span>(</span>fromCategory category<span>:</span> <span>ProductCategory</span><span>)</span> async <span>-</span><span>&gt;</span> <span>[</span><span>Product</span><span>]</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>

<span>let</span> frozenProducts <span>=</span> await <span>fetchProducts</span><span>(</span>fromCategory<span>:</span> <span>.</span>frozen<span>)</span>
<span>let</span> meatProducts <span>=</span> await <span>fetchProducts</span><span>(</span>fromCategory<span>:</span> <span>.</span>meat<span>)</span>
<span>let</span> vegetablesProducts <span>=</span> await <span>fetchProducts</span><span>(</span>fromCategory<span>:</span> <span>.</span>vegetals<span>)</span></code></pre><p>This is ok, but the code will run in serial mode,  which means that we won&#39;t start fetching the meat products until the frozen products are retrieved. Same for the vegetables. Remember, we write the <strong>await</strong> keyword if we want to pause our execution until the function completes its work. However, in this particular scenario, we could start fetching the three categories at the same time, running in parallel.</p><p>In order to accomplish this, we need to write the <strong>async</strong> keyword in front of the var (or let) declaration and use the <strong>await</strong> keyword when we want to use it.</p><pre><code>async <span>let</span> frozenProducts <span>=</span> await <span>fetchProducts</span><span>(</span>fromCategory<span>:</span> <span>.</span>frozen<span>)</span>
async <span>let</span> meatProducts <span>=</span> await <span>fetchProducts</span><span>(</span>fromCategory<span>:</span> <span>.</span>meat<span>)</span>
async <span>let</span> vegetablesProducts <span>=</span> await <span>fetchProducts</span><span>(</span>fromCategory<span>:</span> <span>.</span>vegetables<span>)</span> 

<span>.</span><span>.</span><span>.</span><span>.</span>

<span>let</span> products <span>=</span> await <span>[</span>frozenProducts<span>,</span> meatProducts<span>,</span> vegetablesProducts<span>]</span></code></pre><h3 id="Error-handlers">Error handlers</h3><p>Our fetching functions might have some errors that make it impossible to return the expected data values. How do we handle this in our async/await context?</p><p>We have a couple of options. The first one is to return the well-known Result object.</p><pre><code><span>func</span> <span>fetchProducts</span><span>(</span><span>)</span> async <span>-</span><span>&gt;</span> <span>Result</span><span>&lt;</span><span>[</span><span>Product</span><span>]</span><span>,</span> <span>Error</span><span>&gt;</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>

<span>let</span> result <span>=</span> <span>try</span> await <span>fetchProducts</span><span>(</span><span>)</span>
<span>switch</span> result <span>{</span>
    <span>case</span> <span>.</span><span>success</span><span>(</span><span>let</span> products<span>)</span><span>:</span>
        <span>// Handle success</span>
    <span>case</span> <span>.</span><span>failure</span><span>(</span><span>let</span> error<span>)</span><span>:</span>
        <span>// Handle error</span>
<span>}</span></code></pre><p>Another one is to use the try/catch approach.</p><pre><code><span>func</span> <span>fetchProducts</span><span>(</span><span>)</span> async <span>throws</span> <span>-</span><span>&gt;</span> <span>[</span><span>Product</span><span>[</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>
<span>.</span><span>.</span><span>.</span>
<span>do</span> <span>{</span>
    <span>let</span> products <span>=</span> <span>try</span> await <span>fetchProducts</span><span>(</span><span>)</span>
<span>}</span> <span>catch</span> <span>{</span>
    <span>// Handle the error</span>
<span>}</span></code></pre><p>The main benefit that we had when using the Result type was to improve our completion handlers. In addition to that, we got a cleaner code at the moment we used the result, being able to switch between success and failure cases.</p><p>On the other hand, the use of throw errors adds extra readability in the function&#39;s definition because we only need to put the result type that the function will return. The errors handling is hidden in the function&#39;s implementation.</p><h3 id="Asynchronous-Sequences">Asynchronous Sequences</h3><p>Let&#39;s say that we have a requirement to load a list of products from some .csv file. A traditional way to do this is to load all the lines at once and then start processing them. But, what happens if we want to start doing some work as soon as we have one of the lines available? We can now do this using an asynchronous sequence.</p><pre><code><span>let</span> url <span>=</span> <span>URL</span><span>(</span>string<span>:</span> <span>&#34;http://www.grocery.com/products.csv&#34;</span><span>)</span>
<span>for</span> <span>try</span> await <span>in</span> url<span>.</span>lines <span>{</span>
    <span>// Do some work</span>
<span>}</span></code></pre><p>Using this new feature also allows us to handle this particular case (reading a file) in a simpler way than before. You can check this <a href="https://stackoverflow.com/questions/24581517/read-a-file-url-line-by-line-in-swift" target="_blank" rel="noreferrer noopener">stackoverflow discussion</a> to see how we had to do this and see the advantages that this approach has over the previous one.</p><h3 id="Async-Await-vs--Completion-Handlers">Async/Await vs. Completion Handlers</h3><p>As we saw in the previous sections, the use of async/await syntax comes with a lot of improvements in contrast with using completion blocks. Let&#39;s make a quick recap.</p><h4 id="Advantages">Advantages</h4><ul><li>Avoid the Pyramid of Doom problem with nested closures</li><li>Reduction of code</li><li>Easier to read</li><li>Safety. With async/await, a result is guaranteed, while completion blocks might or might not be called.</li></ul><h4 id="Disadvantages">Disadvantages</h4><ul><li>It&#39;s only available from Swift 5.5 and iOS 15 onwards.</li></ul><h2 id="Actors">Actors</h2><p>Take a look at the following example, just a simple Order class in which we will be adding products and eventually make the checkout.</p><pre><code><span>class</span> <span>Order</span> <span>{</span>
    
    <span>var</span> products <span>=</span> <span>[</span><span>Product</span><span>]</span><span>(</span><span>)</span>
    <span>var</span> finalPrice <span>=</span> <span>0</span>

    <span>func</span> <span>addProduct</span><span>(</span><span>_</span> product<span>:</span> <span>Product</span><span>)</span> <span>{</span>
        products<span>.</span><span>append</span><span>(</span>product<span>)</span>
        finalPrice <span>+</span><span>=</span> product<span>.</span>price
    <span>}</span>
<span>}</span></code></pre><p>If we are in a single-thread application, this code is just fine. But what happens if we have multiple threads that can access our order&#39;s final price? </p><ol start="1"><li>We are on the product list and add some specific products to our order. The app will call the <strong>addProduct</strong> function.</li><li>The product is added to our order&#39;s product list</li><li>Before the final price gets updated, the user tries to checkout.</li><li>The app will read the final price of our order</li><li>The <strong>addProduct</strong> function completes and updates the final price. But the user already checkout and paid less than they should.</li></ol><p>This problem is known as <a href="https://en.wikipedia.org/wiki/Race_condition" target="_blank" rel="noreferrer noopener"><strong>Data Races</strong></a> when some particular resource could be accessed from multiple parts of the app&#39;s code.</p><p>Actors, also introduced in Swift 5.5 and iOS 15, resolve this problem for us. An Actor is basically like a class but with a few key differences that make them <em>thread-safe</em>:</p><ul><li>Only allow accessing their state by one task at a time</li><li>Stored properties and functions can only be access from outside the Actor if the operation is performed asynchronously.</li><li>Stored properties can&#39;t be written from outside the Actor.</li></ul><p>On the downside:</p><ul><li>Actors do not support inheritance</li></ul><p>You can think about the Actors like a similar solution of the <a href="https://en.wikipedia.org/wiki/Semaphore_(programming" target="_blank" rel="noreferrer noopener">semaphores</a>) concept.</p><p>To create one, we just need to use the <strong>actor</strong> keyword.</p><pre><code>actor <span>Order</span> <span>{</span>
    
    <span>var</span> products <span>=</span> <span>[</span><span>Product</span><span>]</span><span>(</span><span>)</span>
    <span>var</span> finalPrice <span>=</span> <span>0</span>

    <span>func</span> <span>addProduct</span><span>(</span><span>_</span> product<span>:</span> <span>Product</span><span>)</span> <span>{</span>
        products<span>.</span><span>append</span><span>(</span>product<span>)</span>
        finalPrice <span>+</span><span>=</span> product<span>.</span>price
    <span>}</span>
<span>}</span></code></pre><p>And we can create an instance using the same initializer syntax as structures and classes. If we want to access the final price, we must do it using the keyword await (because outside the actor&#39;s scope, we are only allowed to access the properties asynchronously).</p><pre><code><span>print</span><span>(</span>await order<span>.</span>finalPrice<span>)</span></code></pre><h2 id="Conclusion">Conclusion</h2><p>Definitely <strong>async/await</strong> brings to the table an easier way to write asynchronous code, removing the need to use completion blocks. In addition, we get more readable and flexible code if our application starts scaling up. </p><p>However, the minimum iOS deployment target will be an entry barrier for most of us unless you start a project from scratch, in which case is highly recommended to wait until the official release of iOS 15 + Xcode 13 + Swift 5.5  to take full advantage of the new concurrency system.</p></div></div>]]></content:encoded>
      <pubDate>Thu, 12 Aug 2021 15:07:00 +0000</pubDate>
    </item>
    <item>
      <title>Build and Secure an API with Spring Boot and Kotlin</title>
      <link>https://auth0.com/blog/build-and-secure-an-api-with-spring-boot/</link>
      <description>See how easy it is to bootstrap a CRUD API with Spring Initializr, build it with Spring Boot and Kotlin, and secure it with Auth0.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><strong>TL;DR:</strong> In this article, you’ll learn how to quickly build a RESTful API using the Spring Boot framework and the Kotlin programming language. You’ll then use Auth0 to secure the API so that only authorized parties can use its key functions. You can find the final code for the project developed throughout this article in <a href="https://github.com/AccordionGuy/HotSauces" target="_blank" rel="noreferrer noopener">this GitHub repository</a>.</p><blockquote><p><strong>Look for the 🌶 emoji if you’d like to skim through the content while focusing on the build and execution steps.</strong></p></blockquote><h2 id="Spring-Framework--Spring-Boot--and-Kotlin--An-Overview">Spring Framework, Spring Boot, and Kotlin: An Overview</h2><p>Before we start building the project, let’s look at the frameworks and language you’ll use.</p><h3 id="Spring-Framework">Spring Framework</h3><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6WdgKiAbhNyVIQWDECzf48/fc4dd3f38700ba0f9a143bdaee8c9479/spring_icon.png" alt="Spring Framework icon"/></p><p><a href="https://spring.io/projects/spring-framework" target="_blank" rel="noreferrer noopener">Spring Framework</a>, often shortened to just “Spring”, is a popular open source application framework for the Java platform. It’s built on the principle of <a href="https://dzone.com/articles/understanding-inversion-of-control-and-dependency" target="_blank" rel="noreferrer noopener">inversion of control</a>, whose name implies that control of a Spring application is the opposite of how program control works in traditional applications. Instead of your code directing the application and calling on functionality from a library, the framework directs the application and calls on functionality from your code.</p><p>This approach makes it possible to write an application as a collection of components, with the connections between them maintained by Spring. Spring provides a lot of ready-built components called <em>dependencies</em> that provide functionality that applications commonly require. The end result is a system for building applications that are modular, flexible, quicker to write, and easy to maintain.</p><p>Spring is often described — especially by Java developers, who’ve grown used to working with unwieldy frameworks — as lightweight. It provides a set of built-in often-needed capabilities such as MVC, caching, messaging, security, and data access. It significantly reduces the amount of code you have to write and lets you focus on the functionality specific to your application.</p><p>While Spring is often used for web and server-based applications, it’s a general application framework and it can be used to write desktop and mobile applications as well.</p><h3 id="Spring-Boot">Spring Boot</h3><p><img src="https://images.ctfassets.net/23aumh6u8s0i/17rXel2g1r2rxiGkpeHNSy/dd64d06b65c7e095b6bcdeffecbd0a9f/spring_boot_icon.png" alt="Spring Boot icon"/></p><p><a href="https://spring.io/projects/spring-boot" target="_blank" rel="noreferrer noopener">Spring Boot</a> is a framework built on top of Spring that simplifies Spring development. It does this by enforcing an <a href="https://www.quora.com/What-is-a-Opinionated-Framework" target="_blank" rel="noreferrer noopener">opinionated</a> approach to Spring application development through <a href="https://facilethings.com/blog/en/convention-over-configuration" target="_blank" rel="noreferrer noopener">“convention over configuration”</a>, the use of default setups that applications are likely to use, and a standardized application structure created by a generator that goes by the decidedly “Web 2.0” name of <a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noreferrer noopener">Spring Initializr</a>. Thanks to this “it just works” approach, it’s the fastest way to develop applications with the Spring framework.</p><h3 id="Kotlin">Kotlin</h3><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1lE1Sn0pHAIa082QVEhJ0f/b4c6184a9387900f457d260d6e0aeb38/kotlin_icon.png" alt="Kotlin icon"/></p><p><a href="https://kotlinlang.org/" target="_blank" rel="noreferrer noopener">Kotlin</a> is part of the wave of programming languages that appeared in the 2010s, which includes <a href="https://dart.dev/" target="_blank" rel="noreferrer noopener">Dart</a>, <a href="https://golang.org/" target="_blank" rel="noreferrer noopener">Go</a>, <a href="https://www.rust-lang.org/" target="_blank" rel="noreferrer noopener">Rust</a>, and <a href="https://developer.apple.com/swift/" target="_blank" rel="noreferrer noopener">Swift</a>. These languages have a number of common traits including their own takes on object-oriented programming from the lessons of the 1990s and functional programming from the lessons of the 2000s, inferred strong static typing, and meteoric rises in popularity (all of them are in <a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noreferrer noopener">TIOBE’s index of popular programming languages</a>, and all of them except Kotlin are in the top 20).</p><p>As a programming language designed by <a href="https://developer.apple.com/swift/" target="_blank" rel="noreferrer noopener">a company that makes developer tools</a>, Kotlin is unique in its origin. It was designed to be an <a href="https://kotlinlang.org/docs/reference/comparison-to-java.html" target="_blank" rel="noreferrer noopener">improvement on Java</a>, with many of the language features of <a href="https://www.scala-lang.org/" target="_blank" rel="noreferrer noopener">Scala</a> (but faster compile times) and with the power and convenience that comes from interoperability with Java and the Java platform. It has grown to become the preferred language for Android app development; as of July 2021, <a href="https://developer.android.com/kotlin/stories?linkId=94116374" target="_blank" rel="noreferrer noopener">80% of the top 1,000 apps in Google Play were written in Kotlin.</a> According to JetBrains’ <a href="https://www.jetbrains.com/lp/devecosystem-2020/" target="_blank" rel="noreferrer noopener"><em>State of Developer Ecosystem 2020</em> report,</a> Kotlin is also making serious inroads into web and enterprise development territory.</p><p>Since Spring and Spring Boot are based on the Java platform, you can use them to build applications using any JVM-based programming language, including Kotlin. If Java’s verbosity is bringing you down, or if you’re an Android developer who wants to write the back end for your app but don’t want to switch languages, Spring and Spring Boot development in Kotlin is for you!</p><h2 id="What-You-ll-Build--A-Hot-Sauce-API">What You’ll Build: A Hot Sauce API</h2><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5VZbuSuMi49Zp9x0bmAK7b/fdd5ca6bac1efdd66ce9e5984e62b0ae/a-hot-sauce-api.jpg" alt="A Hot Sauce API (A tray of hot sauce bottles, viewed from above))"/></p><p>You’ll build an API that acts as a catalog of <a href="https://en.wikipedia.org/wiki/Hot_sauce" target="_blank" rel="noreferrer noopener">hot sauces</a>. It will be a simple one, exposing a single resource named <strong>hotsauces</strong>.</p><p>The API will provide endpoints for:</p><ul><li>Confirming that it is operational</li><li>Getting a list of all the hot sauces in the catalog</li><li>Getting the number of hot sauces in the catalog</li><li>Adding a hot sauce to the catalog</li><li>Editing any hot sauce in the catalog</li><li>Deleting a hot sauce from the catalog</li></ul><p>In the first part of the project, you’ll build the API. Once built, you’ll secure it so that the endpoints for CRUD operations will require authentication. The endpoint for testing to see if the API is operational will remain public.</p><h2 id="Prerequisites">Prerequisites</h2><p>To follow along with this article, you’ll need the following installed on your local machine:</p><ul><li><strong><a href="https://www.oracle.com/java/technologies/javase-jdk11-downloads.html" target="_blank" rel="noreferrer noopener">JDK 11</a></strong></li><li>You’ll need some command-line tool for issuing HTTP requests. The examples in this article will use the following:
<ul><li>For macOS and Linux, the <a href="https://curl.haxx.se/" target="_blank" rel="noreferrer noopener">curl</a> command line tool</li><li>For Windows, <a href="https://docs.microsoft.com/en-us/powershell/" target="_blank" rel="noreferrer noopener">PowerShell</a> and its <code>Invoke<span>-</span>RestMethod</code> and <code>Invoke<span>-</span>WebRequest</code> <a href="https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/cmdlet-overview?view=powershell-7.1" target="_blank" rel="noreferrer noopener">cmdlets</a>.</li></ul></li><li>Your favorite code editor</li></ul><p>You’ll also need internet access, as you’ll be using the Spring Initializr web page and the <a href="https://gradle.org/" target="_blank" rel="noreferrer noopener">Gradle</a> build tool, which goes online to download project dependencies.</p><h2 id="Building-the-API">Building the API</h2><h3 id="Scaffolding-with-Spring-Initializr">Scaffolding with Spring Initializr</h3><p>The preferred way to set up a new Spring Boot project is to use <strong><a href="https://start.spring.io" target="_blank" rel="noreferrer noopener">Spring Initializr</a></strong>, a web application that generates a basic Spring Boot project, complete with all the necessary configurations, your choice of dependencies, and Gradle or Maven build files. It’s available online at <a href="https://start.spring.io/" target="_blank" rel="noreferrer noopener">start.spring.io</a> and built into the Ultimate Edition of <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer noopener">IntelliJ IDEA</a>.</p><p>You <em>could</em> create a new project manually using Spring Boot’s command-line interface, but Spring Initializr organizes its projects using a standardized directory layout for JVM-based projects. This makes your projects easier to maintain, and lets you focus on what your application actually <em>does</em>.</p><p>🌶 Point your favorite browser at the <a href="https://start.spring.io/" target="_blank" rel="noreferrer noopener">Spring Initializr page</a>:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2Tay8vTcNWBA7HRyPUakuI/b2dbcee51217aff5aa7526ddc2d3724e/spring_initializr_blank.png" alt="The Spring Initializr webpage"/></p><p>Here’s how you should fill it out:</p><ul><li><em>Project:</em> Select <strong>Gradle Project</strong>.</li><li><em>Language:</em> Select <strong>Kotlin</strong>.</li><li><em>Spring Boot:</em> Select the latest stable version. At the time of writing, it’s version <strong>2.5.3</strong>.</li><li><em>Project Metadata:</em>
<ul><li><em>Group:</em> This should be something that uniquely identifies yourself or your organization. Typically, you’d enter your domain name in reverse notation (for example, if your domain is <strong>abc123.com</strong>, enter <strong>com.abc123</strong>. If you don’t have a domain name, just enter <strong>com.auth0</strong>.</li><li><em>Artifact:</em> This should be something that identifies the project. Enter <strong>hotsauces</strong>.</li><li><em>Name:</em> This will autofill based on what you entered for <em>Artifact</em>; just use the value in this field.</li><li><em>Description:</em> Enter <strong>A Spring Boot/Auth0 API project</strong> into this field.</li><li><em>Package name:</em> This will autofill based on what you entered for <em>Group</em> and <em>Artifact</em>; just use the value in this field.</li><li><em>Packaging:</em> Select <strong>Jar</strong>.</li><li><em>Java:</em> Select <strong>11</strong>.</li></ul></li><li><em>Dependencies:</em> Click the <strong>ADD DEPENDENCIES...</strong> button and choose the following:
<ul><li><strong>Spring Boot DevTools</strong>: A set of convenient tools for development.</li><li><strong>Spring Web</strong>: Provides a web server and facilities for building RESTful web applications and APIs.</li><li><strong>Spring Data JPA</strong>: Makes the process of building a data access layer almost trivial.</li><li><strong>H2 Database</strong>: This project will use the <a href="https://www.h2database.com/html/main.html" target="_blank" rel="noreferrer noopener">H2</a> in-memory database.</li><li><strong>Spring Boot Actuator</strong>: Adds a handy collection of diagnostic tools to a Spring Boot project.</li></ul></li></ul><p>Once filled out, the form should look like this:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6kuJ07yRPE8vXdHRerx2ve/76fcdd422c6a1a9bdd8350277b53e40c/spring_initializr_filled.png" alt="The Spring Initializr webpage, filled out with this project&#39;s details"/></p><p>🌶 With the form filled out, click the <strong>GENERATE</strong> button. The site will generate a .zip file, and it will automatically be downloaded to your local machine. Unzip the file to reveal the <strong>hotsauces</strong> project folder.</p><p>Within the <strong>hotsauces</strong> folder, you’ll work in two specific areas for this exercise:</p><ul><li><strong>/src/main/kotlin/com/auth0/hotsauces/</strong>: The code for the project goes into this directory. At the moment, it contains a single file, <strong>HotSaucesApplication.kt</strong>. This contains a simple application class, which is the first code in the project that is executed when the application is run.</li><li><strong>/build.gradle.kts</strong>: This is the project’s Gradle build file. Among other things, it specifies which dependencies will be used by the project. You’ll add some security-related dependencies to this file when securing the API.</li></ul><h3 id="Defining--HotSauces---the-Class-Behind-the-API-s-Resource">Defining <code>HotSauces</code>, the Class Behind the API’s Resource</h3><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2qejaKSqZDNvVhRZwUAHTH/ec35c47e1bdb1a910909e9ff097a91c8/wide-hot-sauces-tray.png" alt="A tray of different bottles of hot sauce"/></p><p>The first piece of code you’ll write is the model behind the API’s only resource: hot sauces.</p><p>Each hot sauce has the following attributes:</p><ul><li><strong><code>id</code></strong> — (number) The unique identifier for the hot sauce, and primary key.</li><li><strong><code>brandName</code></strong> — (string) The name of the producer of the hot sauce.</li><li><strong><code>sauceName</code></strong> — (string) The name of the hot sauce.</li><li><strong><code>description</code></strong> — (string) A description of the hot sauce, with the appropriate keywords. This may be lengthy.</li><li><strong><code>url</code></strong> — (number) The URL for the web page for the hot sauce.</li><li><strong><code>heat</code></strong> — (number) The spiciness of the hot sauce, expressed in <a href="https://pepperheadsforlife.com/the-scoville-scale/" target="_blank" rel="noreferrer noopener">Scoville heat units (SHUs).</a></li></ul><p>🌶 Create a new file named <strong>HotSauce.kt</strong> in the <strong>/src/main/kotlin/com/auth0/hotsauces/</strong> directory:</p><pre><code><span>// /src/main/kotlin/com/auth0/hotsauces/HotSauce.kt</span>

<span>package</span> com<span>.</span>auth0<span>.</span>hotsauces

<span>import</span> javax<span>.</span>persistence<span>.</span>Entity
<span>import</span> javax<span>.</span>persistence<span>.</span>GeneratedValue
<span>import</span> javax<span>.</span>persistence<span>.</span>GenerationType
<span>import</span> javax<span>.</span>persistence<span>.</span>Id
<span>import</span> javax<span>.</span>persistence<span>.</span>Lob

<span>@Entity</span>
<span>data</span> <span>class</span> <span>HotSauce</span><span>(</span>

    <span>// This property maps to the primary key in the database.</span>
    <span>@Id</span> <span>@GeneratedValue</span><span>(</span>strategy <span>=</span> GenerationType<span>.</span>AUTO<span>)</span>
    <span>val</span> id<span>:</span> Long <span>=</span> <span>0</span><span>,</span>

    <span>// These properties are NOT likely to be longer than 256 characters.</span>
    <span>var</span> brandName<span>:</span> String <span>=</span> <span>&#34;&#34;</span><span>,</span>
    <span>var</span> sauceName<span>:</span> String <span>=</span> <span>&#34;&#34;</span><span>,</span>

    <span>// These properties might be longer than 256 characters.</span>
    <span>@Lob</span>
    <span>var</span> description<span>:</span> String <span>=</span> <span>&#34;&#34;</span><span>,</span>
    <span>@Lob</span>
    <span>var</span> url<span>:</span> String <span>=</span> <span>&#34;&#34;</span><span>,</span>

    <span>var</span> heat<span>:</span> Int <span>=</span> <span>0</span>

<span>)</span></code></pre><p><code>HotSauce</code> is a Kotlin <strong><a href="https://kotlinlang.org/docs/reference/data-classes.html" target="_blank" rel="noreferrer noopener">data class</a></strong>, whose job is to hold data. Data classes are all properties and no methods — or at least no <em>explicitly</em> defined methods, anyway. The compiler automatically provides a handful of “behind the scenes” methods to data classes, including <code><span>equals</span><span>(</span><span>)</span></code>, <code><span>hashCode</span><span>(</span><span>)</span></code>, and <code><span>toString</span><span>(</span><span>)</span></code>.</p><p>Kotlin classes, data classes included, have a constructor built into the class header. This constructor, called the <strong>primary constructor</strong>, takes its parameters in the parentheses that follow the class name. <code>HotSauce</code>, like many data classes, is just a class header and primary constructor, and nothing else.</p><p>Even though there isn’t much to the class, it uses some annotations to pull in a lot of extra functionality:</p><ul><li><code>HotSauce</code> is annotated with <code>@Entity</code>, which informs the Java Persistence API (JPA, one of the dependencies that you added in Spring Initializr) that its instances will be persisted in the database.</li><li>The <code>id</code> property is annotated with both <code>@Id</code> and <code>@GeneratedValue</code>, which makes sense, as it will map to the <code>id</code> field in the corresponding database table.</li><li>The <code>@Lob</code> annotation is short for “large object”. It’s being used to annotate the <code>description</code> and <code>url</code> properties because they could contain strings longer than 256 characters. By default, JPA maps <code>String</code>s in entities to the <code><span>VARCHAR</span><span>(</span><span>256</span><span>)</span></code> type in the database; marking a <code>String</code> as <code>@Lob</code> tells JPA to map it to the <code><span>TEXT</span></code> type instead.</li></ul><p>If you’re new to Kotlin, make note of the keywords in the class’ property declarations:</p><ul><li><code>val</code> is short for “value” and declares a constant. A hot sauce’s <code>id</code> value shouldn’t be changed after it’s been created, so we’re declaring it with <code>val</code>.</li><li><code><span>var</span></code> is short for “variable” and that’s what it declares. All the other class properties should be editable, so we’re declaring them with <code><span>var</span></code>.</li></ul><p>You might be wondering about assigning the value <code><span>0</span></code> to <code>id</code>, which is a constant:</p><pre><code>@Id @<span>GeneratedValue</span><span>(</span>strategy <span>=</span> GenerationType<span>.</span><span>AUTO</span><span>)</span>
val id<span>:</span> Long <span>=</span> <span>0</span><span>,</span></code></pre><p>The line <code>val id<span>:</span> Long <span>=</span> <span>0</span><span>,</span></code> might make you think that every hot sauce will have an unchangeable <code>id</code> set to <code><span>0</span></code>. As a constant, the value of <code>id</code> can’t be changed by any code that <em>you</em> write, but the <code>@GeneratedValue</code> annotation allows Spring to use <a href="https://kotlinlang.org/docs/reflection.html" target="_blank" rel="noreferrer noopener">reflection</a> to get around that limitation and assign a unique <code>id</code> value for every sauce. Every modern application framework incorporates “magic” like this; I’ve found that it’s simplest just to know where such instances are and to accept them.</p><p>With <code>HotSauce</code> defined, you have a <strong>model</strong> that represents hot sauces in the real world. By annotating it with <code>@Entity</code>, you’ve specified that instances of <code>HotSauce</code> should be converted into <strong>entities</strong> — that is, instances that have been saved to a database.</p><p>It’s time to set up something to save <code>HotSauce</code> instances.</p><h3 id="Adding-Data-Access-with-a--CrudRepository-">Adding Data Access with a <code>CrudRepository</code></h3><p>The <a href="https://deviq.com/repository-pattern/" target="_blank" rel="noreferrer noopener">Repository pattern</a> provides a layer of abstraction between an application’s models and the system used to store data. A repository provides a collection-style interface to the models, with methods for retrieving the whole collection, retrieving a specific item, and adding, editing, and deleting items. The repository insulates the models from the usual database concerns, such as connecting with it, setting up a reader, or worrying about things like cursors.</p><p>Spring provides a number of repository interfaces. In this project, you’ll use the <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html" target="_blank" rel="noreferrer noopener"><code>CrudRepository</code></a> interface to act as the intermediary between <code>HotSauce</code> and the H2 database (another one of the dependencies you added in Spring Initializr) as shown below:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2CCk6CDxAKOrF7RJ6F05nw/8a14bb24936eaa0efc2364a31cb551bc/repository-pattern.png" alt="Repository Pattern"/></p><p>In this exercise, the underlying data store is the H2 in-memory database. The Repository pattern makes it so that changing the database doesn’t require you to make any changes to <code>HotSauce</code>, and Spring’s inversion of control architecture makes it so that such a change doesn’t even require a change to the <code>CrudRepository</code>.</p><p>🌶 Create a new file named <strong>HotSauceRepository.kt</strong> in the <strong>/src/main/kotlin/com/auth0/hotsauces/</strong> directory:</p><pre><code><span>// /src/main/kotlin/com/auth0/hotsauces/HotSauceRepository.kt</span>

<span>package</span> com<span>.</span>auth0<span>.</span>hotsauces

<span>import</span> org<span>.</span>springframework<span>.</span>data<span>.</span>repository<span>.</span>CrudRepository

<span>interface</span> HotSauceRepository<span>:</span> CrudRepository<span>&lt;</span>HotSauce<span>,</span> Long<span>&gt;</span></code></pre><p>This code sets up an interface named <code>HotSauceRepository</code> that’s based on a <code>CrudRepository</code> of entities based on the <code>HotSauce</code> model, each of which is uniquely identified by a <code>Long</code> (namely, the <code>id</code> property of <code>HotSauce</code>).</p><p><code>CrudRepository</code> provides a set of methods for performing the standard set of CRUD operations. Here’s the subset that you’ll use in this project:</p><ul><li><strong><code><span>count</span><span>(</span><span>)</span></code></strong> — Returns the number of entities.</li><li><strong><code><span>deleteById</span><span>(</span><span>{</span>id<span>}</span><span>)</span></code></strong> — Deletes the entity with the given id.</li><li><strong><code><span>existsById</span><span>(</span><span>{</span>id<span>}</span><span>)</span></code></strong> — Returns <code><span>true</span></code> if the entity with the given id exists.</li><li><strong><code><span>findAll</span><span>(</span><span>)</span></code></strong> — Retrieves all the entities.</li><li><strong><code><span>findById</span><span>(</span><span>{</span>id<span>}</span><span>)</span></code></strong> — Retrieves the entity with the given id.</li><li><strong><code><span>save</span><span>(</span><span>)</span></code></strong> — Saves the given entity.</li></ul><p>You’ll use these methods in the controller, which you’ll build next.</p><p>Note that you didn’t have to do anything to connect the repository to the database. Spring Boot’s inversion of control took care of that for you.</p><h3 id="Building-the-controller">Building the controller</h3><p>The controller should expose the following API endpoints:</p><ul><li><strong><code><span>GET</span> api<span>/</span>hotsauces</code></strong>: Returns the entire collection of hot sauces. Accepts these optional named parameters:
<ul><li><strong><code>brandname</code></strong>: Limits the results to only those sauces whose <code>brandName</code> contains the given string.</li><li><strong><code>saucename</code></strong> Limits the results to only those sauces whose <code>sauceName</code> contains the given string.</li><li><strong><code>desc</code></strong> Limits the results to only those sauces whose <code>description</code> contains the given string.</li><li><strong><code>minheat</code></strong> Limits the results to only those sauces whose <code>heat</code> rating is greater than or equal to the given number.</li><li><strong><code>maxheat</code></strong> Limits the results to only those sauces whose <code>heat</code> rating is less than or equal to the given number.</li></ul></li><li><strong><code><span>GET</span> api<span>/</span>hotsauces<span>/</span><span>{</span>id<span>}</span></code></strong>: Returns the hot sauce with the given id.</li><li><strong><code><span>GET</span> api<span>/</span>hotsauces<span>/</span>count</code></strong>: Returns the number of hot sauces.</li><li><strong><code><span>POST</span> api<span>/</span>hotsauce</code></strong>: Adds a hot sauce whose details are included in the request.</li><li><strong><code><span>PUT</span> api<span>/</span>hotsauces<span>/</span><span>{</span>id<span>}</span></code></strong>: Updates the hot sauce with the given id using the details included in the request.</li><li><strong><code><span>DELETE</span> api<span>/</span>hotsauces<span>/</span><span>{</span>id<span>}</span></code></strong>: Deletes the hot sauce with the given id.</li></ul><p>🌶 Create a new file named <strong>HotSauceController.kt</strong> in the <strong>/src/main/kotlin/com/auth0/hotsauces/</strong> directory:</p><pre><code><span>// /src/main/kotlin/com/auth0/hotsauces/HotSauceController.kt</span>

<span>package</span> com<span>.</span>auth0<span>.</span>hotsauces

<span>import</span> org<span>.</span>springframework<span>.</span>http<span>.</span>HttpStatus
<span>import</span> org<span>.</span>springframework<span>.</span>http<span>.</span>ResponseEntity
<span>import</span> org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span><span>*</span>
<span>import</span> java<span>.</span>util<span>.</span><span>*</span>

<span>@RestController</span>
<span>@RequestMapping</span><span>(</span><span>&#34;/api/hotsauces&#34;</span><span>)</span>
<span>class</span> <span>HotSauceController</span><span>(</span><span>private</span> <span>val</span> hotSauceRepository<span>:</span> HotSauceRepository<span>)</span> <span>{</span>

    <span>// GET api/hotsauces</span>
    <span>@GetMapping</span><span>(</span><span>&#34;&#34;</span><span>)</span>
    <span>fun</span> <span>getAll</span><span>(</span><span>@RequestParam</span><span>(</span>value<span>=</span><span>&#34;brandname&#34;</span><span>,</span> required <span>=</span> <span>false</span><span>,</span> defaultValue <span>=</span> <span>&#34;&#34;</span><span>)</span> brandNameFilter<span>:</span> String<span>,</span>
               <span>@RequestParam</span><span>(</span>value<span>=</span><span>&#34;saucename&#34;</span><span>,</span> required <span>=</span> <span>false</span><span>,</span> defaultValue <span>=</span> <span>&#34;&#34;</span><span>)</span> sauceNameFilter<span>:</span> String<span>,</span>
               <span>@RequestParam</span><span>(</span>value<span>=</span><span>&#34;desc&#34;</span><span>,</span> required <span>=</span> <span>false</span><span>,</span> defaultValue <span>=</span> <span>&#34;&#34;</span><span>)</span> descFilter<span>:</span> String<span>,</span>
               <span>@RequestParam</span><span>(</span>value<span>=</span><span>&#34;minheat&#34;</span><span>,</span> required <span>=</span> <span>false</span><span>,</span> defaultValue <span>=</span> <span>&#34;&#34;</span><span>)</span> minHeat<span>:</span> String<span>,</span>
               <span>@RequestParam</span><span>(</span>value<span>=</span><span>&#34;maxheat&#34;</span><span>,</span> required <span>=</span> <span>false</span><span>,</span> defaultValue <span>=</span> <span>&#34;&#34;</span><span>)</span> maxHeat<span>:</span> String<span>)</span><span>:</span> ResponseEntity<span>&lt;</span>List<span>&lt;</span>HotSauce<span>&gt;</span><span>&gt;</span> <span>{</span>
        <span>val</span> MAX_SCOVILLE <span>=</span> <span>3_000_000</span> <span>// At this point, it&#39;s no longer food, but a weapon</span>
        <span>val</span> minHeatFilter <span>=</span> <span>if</span> <span>(</span><span>!</span>minHeat<span>.</span><span>isNullOrBlank</span><span>(</span><span>)</span><span>)</span> minHeat<span>.</span><span>toInt</span><span>(</span><span>)</span> <span>else</span> <span>0</span>
        <span>val</span> maxHeatFilter <span>=</span> <span>if</span> <span>(</span><span>!</span>maxHeat<span>.</span><span>isNullOrBlank</span><span>(</span><span>)</span><span>)</span> maxHeat<span>.</span><span>toInt</span><span>(</span><span>)</span> <span>else</span> MAX_SCOVILLE
        <span>return</span> <span>ResponseEntity</span><span>(</span>hotSauceRepository<span>.</span><span>findAll</span><span>(</span><span>)</span>
            <span>.</span><span>filter</span> <span>{</span> it<span>.</span>brandName<span>.</span><span>contains</span><span>(</span>brandNameFilter<span>,</span> <span>true</span><span>)</span> <span>}</span>
            <span>.</span><span>filter</span> <span>{</span> it<span>.</span>sauceName<span>.</span><span>contains</span><span>(</span>sauceNameFilter<span>,</span> <span>true</span><span>)</span> <span>}</span>
            <span>.</span><span>filter</span> <span>{</span> it<span>.</span>description<span>.</span><span>contains</span><span>(</span>descFilter<span>,</span> <span>true</span><span>)</span> <span>}</span>
            <span>.</span><span>filter</span> <span>{</span> it<span>.</span>heat <span>&gt;=</span> minHeatFilter <span>}</span>
            <span>.</span><span>filter</span> <span>{</span> it<span>.</span>heat <span>&lt;=</span> maxHeatFilter <span>}</span><span>,</span>
            HttpStatus<span>.</span>OK
        <span>)</span>
    <span>}</span>

    <span>// GET api/hotsauces/{id}</span>
    <span>@GetMapping</span><span>(</span><span>&#34;/count&#34;</span><span>)</span>
    <span>fun</span> <span>getCount</span><span>(</span><span>)</span><span>:</span> ResponseEntity<span>&lt;</span>Long<span>&gt;</span> <span>=</span> <span>ResponseEntity</span><span>(</span>hotSauceRepository<span>.</span><span>count</span><span>(</span><span>)</span><span>,</span>
            HttpStatus<span>.</span>OK<span>)</span>

    <span>// GET api/hotsauces/count</span>
    <span>@GetMapping</span><span>(</span><span>&#34;/{id}&#34;</span><span>)</span>
    <span>fun</span> <span>getHotSauce</span><span>(</span><span>@PathVariable</span> id<span>:</span> Long<span>)</span><span>:</span> ResponseEntity<span>&lt;</span>Optional<span>&lt;</span>HotSauce<span>&gt;</span><span>&gt;</span> <span>{</span>
        <span>if</span> <span>(</span>hotSauceRepository<span>.</span><span>existsById</span><span>(</span>id<span>)</span><span>)</span> <span>{</span>
            <span>return</span> <span>ResponseEntity</span><span>(</span>hotSauceRepository<span>.</span><span>findById</span><span>(</span>id<span>)</span><span>,</span> HttpStatus<span>.</span>OK<span>)</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>return</span> <span>ResponseEntity</span><span>(</span>HttpStatus<span>.</span>NOT_FOUND<span>)</span>
        <span>}</span>
    <span>}</span>

    <span>// POST api/hotsauce</span>
    <span>@PostMapping</span><span>(</span><span>)</span>
    <span>fun</span> <span>createHotSauce</span><span>(</span><span>@RequestBody</span> hotSauce<span>:</span> HotSauce<span>)</span><span>:</span> ResponseEntity<span>&lt;</span>HotSauce<span>&gt;</span> <span>{</span>
        <span>return</span> <span>ResponseEntity</span><span>(</span>hotSauceRepository<span>.</span><span>save</span><span>(</span>hotSauce<span>)</span><span>,</span> HttpStatus<span>.</span>CREATED<span>)</span>
    <span>}</span>

    <span>// PUT api/hotsauces/{id}</span>
    <span>@PutMapping</span><span>(</span><span>&#34;/{id}&#34;</span><span>)</span>
    <span>fun</span> <span>updateHotSauce</span><span>(</span><span>@PathVariable</span> id<span>:</span> Long<span>,</span> <span>@RequestBody</span> sauceChanges<span>:</span> HotSauce<span>)</span><span>:</span> ResponseEntity<span>&lt;</span>HotSauce<span>?</span><span>&gt;</span> <span>{</span>
        <span>if</span> <span>(</span>hotSauceRepository<span>.</span><span>existsById</span><span>(</span>id<span>)</span><span>)</span> <span>{</span>
            <span>val</span> originalSauce <span>=</span> hotSauceRepository<span>.</span><span>findById</span><span>(</span>id<span>)</span><span>.</span><span>get</span><span>(</span><span>)</span>
            <span>val</span> updatedSauce <span>=</span> <span>HotSauce</span><span>(</span>
                id <span>=</span> id<span>,</span>
                brandName <span>=</span> <span>if</span> <span>(</span>sauceChanges<span>.</span>brandName <span>!=</span> <span>&#34;&#34;</span><span>)</span> sauceChanges<span>.</span>brandName <span>else</span> originalSauce<span>.</span>brandName<span>,</span>
                sauceName <span>=</span> <span>if</span> <span>(</span>sauceChanges<span>.</span>sauceName <span>!=</span> <span>&#34;&#34;</span><span>)</span> sauceChanges<span>.</span>sauceName <span>else</span> originalSauce<span>.</span>sauceName<span>,</span>
                description <span>=</span> <span>if</span> <span>(</span>sauceChanges<span>.</span>description <span>!=</span> <span>&#34;&#34;</span><span>)</span> sauceChanges<span>.</span>description <span>else</span> originalSauce<span>.</span>description<span>,</span>
                url <span>=</span> <span>if</span> <span>(</span>sauceChanges<span>.</span>url <span>!=</span> <span>&#34;&#34;</span><span>)</span> sauceChanges<span>.</span>url <span>else</span> originalSauce<span>.</span>url<span>,</span>
                heat <span>=</span> <span>if</span> <span>(</span>sauceChanges<span>.</span>heat <span>!=</span> <span>0</span><span>)</span> sauceChanges<span>.</span>heat <span>else</span> originalSauce<span>.</span>heat
            <span>)</span>
            <span>return</span> <span>ResponseEntity</span><span>(</span>hotSauceRepository<span>.</span><span>save</span><span>(</span>updatedSauce<span>)</span><span>,</span> HttpStatus<span>.</span>OK<span>)</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>return</span> <span>ResponseEntity</span><span>(</span>HttpStatus<span>.</span>NOT_FOUND<span>)</span>
        <span>}</span>
    <span>}</span>

    <span>// DELETE api/hotsauces/{id}</span>
    <span>@DeleteMapping</span><span>(</span><span>&#34;/{id}&#34;</span><span>)</span>
    <span>fun</span> <span>deleteHotSauce</span><span>(</span><span>@PathVariable</span> id<span>:</span> Long<span>)</span><span>:</span> ResponseEntity<span>&lt;</span>HotSauce<span>?</span><span>&gt;</span> <span>{</span>
        <span>if</span> <span>(</span>hotSauceRepository<span>.</span><span>existsById</span><span>(</span>id<span>)</span><span>)</span> <span>{</span>
            hotSauceRepository<span>.</span><span>deleteById</span><span>(</span>id<span>)</span>
            <span>return</span> <span>ResponseEntity</span><span>(</span>HttpStatus<span>.</span>NO_CONTENT<span>)</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>return</span> <span>ResponseEntity</span><span>(</span>HttpStatus<span>.</span>NOT_FOUND<span>)</span>
        <span>}</span>
    <span>}</span>

<span>}</span></code></pre><p>The code is considerably less complex than it could be, thanks to some annotations which take care of a lot of tedious REST work:</p><ul><li><code>HotSauceController</code> is annotated with <code>@RestController</code>, which informs Spring Web (yet another one of the dependencies that you added in Spring Initializr) that this class is a REST controller and that it should include the necessary underlying REST functionality.</li><li><code>HotSauceController</code> is also annotated with <code>@<span>RequestMapping</span><span>(</span><span>&#34;/api/hotsauces&#34;</span><span>)</span></code> which means that every method in the class that responds to a request responds to requests whose endpoint ends with <code>api<span>/</span>hotsauces</code>.</li><li>Any method annotated with <code>@<span>GetMapping</span><span>(</span><span>)</span></code> responds to <code><span>GET</span></code> requests. If <code>@<span>GetMapping</span><span>(</span><span>)</span></code> takes a parameter, it means that it responds to requests whose endpoint begins with that parameter. Parameters in braces (<code><span>{</span></code> and <code><span>}</span></code>) are variable parameters.</li><li>Any method annotated with <code>@<span>PostMapping</span><span>(</span><span>)</span></code>, <code>@<span>PutMapping</span><span>(</span><span>)</span></code>, and <code>@<span>DeleteMapping</span><span>(</span><span>)</span></code> is similar to a method annotated with <code>@<span>GetMapping</span><span>(</span><span>)</span></code> except that they respond to <code><span>POST</span></code>, <code><span>PUT</span></code>, and <code><span>DELETE</span></code> requests respectively.</li></ul><p>Every method in the class returns a <a href="https://www.baeldung.com/spring-response-entity" target="_blank" rel="noreferrer noopener"><code>ResponseEntity</code></a> object, which represents a complete HTTP response, complete with status code, headers, and body.</p><p>Take a look at each of these methods to see what kind of <code>ResponseEntity</code> they return. Sometimes, they’ll simply return an HTTP status code, as is the case with <code><span>deleteHotSauce</span><span>(</span><span>)</span></code>, which returns either <code><span>NO_CONTENT</span></code> if the hot sauce was found and deleted or <code><span>NOT_FOUND</span></code> if the hot sauce requested for deletion was not in the database. Other methods may return a more complex <code>ResponseEntity</code>, such as <code><span>getHotSauce</span><span>(</span><span>)</span></code>, which returns an <code><span>OK</span></code> status code and a <code>HotSauce</code> object if the given <code>id</code> matches a hot sauce in the database.</p><p>You may have noticed the <code>@RequestParam</code> annotations in the signature of the <code><span>getAll</span><span>(</span><span>)</span></code> method. These map the parameters in the HTTP GET query string to <code><span>getAll</span><span>(</span><span>)</span></code>’s parameters. The first annotation declares that value in <code>brandname</code> query parameter is mapped to the <code><span>getAll</span><span>(</span><span>)</span></code> method’s <code>brandNameFilter</code> parameter, that <code>brandname</code> is an optional query parameter, and if it isn’t used, its value should default to the empty string. The other <code>@RequestParam</code> annotations work in a similar manner.</p><h3 id="Initializing-the-database">Initializing the database</h3><p>You could run the app right now and it would work. There’s just one problem: Since the database is in-memory and unitialized, you don’t have any data to work with! Let’s add a class to preload the database with some initial hot sauces.</p><p>🌶 Create a new file named <strong>DataLoader.kt</strong> in the <strong>/src/main/kotlin/com/auth0/hotsauces/</strong> directory:</p><pre><code><span>// /src/main/kotlin/com/auth0/hotsauces/DataLoader.kt</span>

<span>package</span> com<span>.</span>auth0<span>.</span>hotsauces

<span>import</span> org<span>.</span>springframework<span>.</span>stereotype<span>.</span>Component
<span>import</span> javax<span>.</span>annotation<span>.</span>PostConstruct

<span>@Component</span>
<span>class</span> <span>DataLoader</span><span>(</span><span>var</span> hotSauceRepository<span>:</span> HotSauceRepository<span>)</span> <span>{</span>

    <span>fun</span> String<span>.</span><span>trimIndentsAndRemoveNewlines</span><span>(</span><span>)</span> <span>=</span> <span>this</span><span>.</span><span>trimIndent</span><span>(</span><span>)</span><span>.</span><span>replace</span><span>(</span><span>&#34;\n&#34;</span><span>,</span> <span>&#34; &#34;</span><span>)</span>

    <span>@PostConstruct</span>
    <span>fun</span> <span>loadData</span><span>(</span><span>)</span> <span>{</span>
        hotSauceRepository<span>.</span><span>saveAll</span><span>(</span><span>listOf</span><span>(</span>
            <span>HotSauce</span><span>(</span>
                brandName <span>=</span> <span>&#34;Truff&#34;</span><span>,</span>
                sauceName <span>=</span> <span>&#34;Hot Sauce&#34;</span><span>,</span>
                description <span>=</span> <span>&#34;&#34;&#34;
                    Our sauce is a curated blend of ripe chili peppers, organic agave nectar, black truffle, and
                    savory spices. This combination of ingredients delivers a flavor profile unprecedented to hot sauce.
                    &#34;&#34;&#34;</span><span>.</span><span>trimIndentsAndRemoveNewlines</span><span>(</span><span>)</span><span>,</span>
                url <span>=</span> <span>&#34;https://truffhotsauce.com/collections/sauce/products/truff&#34;</span><span>,</span>
                heat <span>=</span> <span>2_500</span>
            <span>)</span><span>,</span>
            <span>HotSauce</span><span>(</span>
                brandName <span>=</span> <span>&#34;Truff&#34;</span><span>,</span>
                sauceName <span>=</span> <span>&#34;Hotter Sauce&#34;</span><span>,</span>
                description <span>=</span> <span>&#34;&#34;&#34;
                    TRUFF Hotter Sauce is a jalapeño rich blend of red chili peppers, Black Truffle and Black Truffle
                    Oil, Organic Agave Nectar, Red Habanero Powder, Organic Cumin and Organic Coriander. Perfectly
                    balanced and loaded with our same iconic flavor, TRUFF Hotter Sauce offers a “less sweet, more heat”
                    rendition of the Flagship original.
                    &#34;&#34;&#34;</span><span>.</span><span>trimIndentsAndRemoveNewlines</span><span>(</span><span>)</span><span>,</span>
                url <span>=</span> <span>&#34;https://truffhotsauce.com/collections/sauce/products/hotter-truff-hot-sauce&#34;</span><span>,</span>
                heat <span>=</span> <span>4_000</span>
            <span>)</span><span>,</span>
            <span>HotSauce</span><span>(</span>
                brandName <span>=</span> <span>&#34;Cholula&#34;</span><span>,</span>
                sauceName <span>=</span> <span>&#34;Original&#34;</span><span>,</span>
                description <span>=</span> <span>&#34;&#34;&#34;
                    Cholula Original Hot Sauce is created from a generations old recipe that features carefully-selected
                    arbol and piquin peppers and a blend of signature spices. We love it on burgers and chicken but have
                    heard it’s amazing on pizza. Uncap Real Flavor with Cholula Original.
                    &#34;&#34;&#34;</span><span>.</span><span>trimIndentsAndRemoveNewlines</span><span>(</span><span>)</span><span>,</span>
                url <span>=</span> <span>&#34;https://www.cholula.com/original.html&#34;</span><span>,</span>
                heat <span>=</span> <span>3_600</span>
            <span>)</span><span>,</span>
            <span>HotSauce</span><span>(</span>
                brandName <span>=</span> <span>&#34;Mad Dog&#34;</span><span>,</span>
                sauceName <span>=</span> <span>&#34;357&#34;</span><span>,</span>
                description <span>=</span> <span>&#34;&#34;&#34;
                   Finally, a super hot sauce that tastes like real chile peppers. This sauce is blended
                   with ingredients that create a sauce fit to take your breath away. About five seconds after you
                   taste the recommended dose of one drop, prepare your mouth and mind for five to 20 minutes of agony
                   that all true chileheads fully understand and appreciate.
                   &#34;&#34;&#34;</span><span>.</span><span>trimIndentsAndRemoveNewlines</span><span>(</span><span>)</span><span>,</span>
                url <span>=</span> <span>&#34;https://www.saucemania.com.au/mad-dog-357-hot-sauce-148ml/&#34;</span><span>,</span>
                heat <span>=</span> <span>357_000</span>
            <span>)</span><span>,</span>
            <span>HotSauce</span><span>(</span>
                brandName <span>=</span> <span>&#34;Hot Ones&#34;</span><span>,</span>
                sauceName <span>=</span> <span>&#34;Fiery Chipotle&#34;</span><span>,</span>
                description <span>=</span> <span>&#34;&#34;&#34;
                    This hot sauce was created with one goal in mind: to get celebrity interviewees on Hot Ones to say
                    &#34;damn that&#39;s tasty, and DAMN that&#39;s HOT!&#34; and then spill their deepest secrets to host Sean Evans.
                    The tongue tingling flavors of chipotle, pineapple and lime please the palate while the mix of ghost
                    and habanero peppers make this sauce a scorcher. Hot Ones Fiery Chipotle Hot Sauce is a spicy
                    masterpiece.
                    &#34;&#34;&#34;</span><span>.</span><span>trimIndentsAndRemoveNewlines</span><span>(</span><span>)</span><span>,</span>
                url <span>=</span> <span>&#34;https://chillychiles.com/products/hot-ones-fiery-chipotle-hot-sauce&#34;</span><span>,</span>
                heat <span>=</span> <span>15_600</span>
            <span>)</span><span>,</span>
            <span>HotSauce</span><span>(</span>
                brandName <span>=</span> <span>&#34;Hot Ones&#34;</span><span>,</span>
                sauceName <span>=</span> <span>&#34;The Last Dab&#34;</span><span>,</span>
                description <span>=</span> <span>&#34;&#34;&#34;
                    More than simple mouth burn, Pepper X singes your soul. Starting with a pleasant burn in the mouth,
                    the heat passes quickly, lulling you into a false confidence. You take another bite, enjoying the
                    mustard and spice flavours. This would be great on jerk chicken, or Indian food! But then, WHAM!
                    All of a sudden your skin goes cold and your stomach goes hot, and you realize the power of X.
                    &#34;&#34;&#34;</span><span>.</span><span>trimIndentsAndRemoveNewlines</span><span>(</span><span>)</span><span>,</span>
                url <span>=</span> <span>&#34;https://www.saucemania.com.au/hot-ones-the-last-dab-hot-sauce-148ml/&#34;</span><span>,</span>
                heat <span>=</span> <span>1_000_000</span>
            <span>)</span><span>,</span>
            <span>HotSauce</span><span>(</span>
                brandName <span>=</span> <span>&#34;Torchbearer&#34;</span><span>,</span>
                sauceName <span>=</span> <span>&#34;Zombie Apocalypse&#34;</span><span>,</span>
                description <span>=</span> <span>&#34;&#34;&#34;
                    The Zombie Apocalypse Hot Sauce lives up to its name, combining Ghost Peppers and Habaneros with a
                    mix of spices, vegetables, and vinegar to create a slow burning blow torch. Some people will feel
                    the heat right away, but others can take a few minutes for the full impact to set in. The heat can
                    last up to 20 minutes, creating a perfect match between very high heat and amazing flavor. Try it
                    on all your favorite foods - wings, chili, soups, steak or even a sandwich in need of a major kick.
                    &#34;&#34;&#34;</span><span>.</span><span>trimIndentsAndRemoveNewlines</span><span>(</span><span>)</span><span>,</span>
                url <span>=</span> <span>&#34;https://heatonist.com/products/zombie-apocalypse&#34;</span><span>,</span>
                heat <span>=</span> <span>100_000</span>
            <span>)</span><span>,</span>
            <span>HotSauce</span><span>(</span>
                brandName <span>=</span> <span>&#34;Heartbeat&#34;</span><span>,</span>
                sauceName <span>=</span> <span>&#34;Pineapple Habanero&#34;</span><span>,</span>
                description <span>=</span> <span>&#34;&#34;&#34;
                    Pineapple Habanero is Heartbeat Hot Sauce’s most recent offering and their spiciest to date! They’ve
                    yet again collaborated with an Ontario craft brewery, this time from their home town of Thunder Bay.
                    Made with the help of Sleeping Giant Brewery’s award winning Beaver Duck session IPA, this sauce has
                    a boldly pronounced fruitiness and a bright but savoury vibe from start to finish.
                    &#34;&#34;&#34;</span><span>.</span><span>trimIndentsAndRemoveNewlines</span><span>(</span><span>)</span><span>,</span>
                url <span>=</span> <span>&#34;https://www.saucemania.com.au/heartbeat-pineapple-habanero-hot-sauce-177ml/&#34;</span><span>,</span>
                heat <span>=</span> <span>12_200</span>
            <span>)</span><span>,</span>
            <span>HotSauce</span><span>(</span>
                brandName <span>=</span> <span>&#34;Karma Sauce&#34;</span><span>,</span>
                sauceName <span>=</span> <span>&#34;Burn After Eating&#34;</span><span>,</span>
                description <span>=</span> <span>&#34;&#34;&#34;
                    Karma Sauce Burn After Eating Hot Sauce is imbued with a unique flavour thanks to green mango,
                    ajwain and hing powder. Forged with a top-secret blend of super hots that may or may not include
                    Bhut Jolokia (Ghost), Scorpion, Carolina Reaper, 7-Pot Brown and 7-Pot Primo. This isn’t a sauce you
                    eat, it’s one you survive.
                    &#34;&#34;&#34;</span><span>.</span><span>trimIndentsAndRemoveNewlines</span><span>(</span><span>)</span><span>,</span>
                url <span>=</span> <span>&#34;https://www.saucemania.com.au/karma-sauce-burn-after-eating-hot-sauce-148ml/&#34;</span><span>,</span>
                heat <span>=</span> <span>669_000</span>
            <span>)</span>
        <span>)</span><span>)</span>
    <span>}</span>

<span>}</span></code></pre><p>This class has a couple of annotations:</p><ul><li><code>DataLoader</code> is annotated with <code>@Component</code>, which marks it so that Spring will autodetect the class when it’s needed. Since the code in this class references the application’s instance of <code>HotSauceRepository</code>, this class will be instantiated when an instance of <code>HotSauceRepository</code> is created.</li><li>The <code><span>loadData</span><span>(</span><span>)</span></code> method is annotated with <code>@PostConstruct</code>, which specifies that it should be called as soon as the class has been initialized. This annotation is often used to populate databases when a Spring application is launched.</li></ul><h4 id="Kotlin-Extensions">Kotlin Extensions</h4><p>This class also makes use of a handy Kotlin feature: <strong><a href="https://kotlinlang.org/docs/reference/extensions.html" target="_blank" rel="noreferrer noopener">Extensions</a></strong>. These are properties or functions that can be added to classes to extend their capabilities without having to access their code.</p><p>At the beginning of the class, you added an extension to the <code>String</code> class:</p><pre><code><span>fun</span> String<span>.</span><span>trimIndentsAndRemoveNewlines</span><span>(</span><span>)</span> <span>=</span> <span>this</span><span>.</span><span>trimIndent</span><span>(</span><span>)</span><span>.</span><span>replace</span><span>(</span><span>&#34;\n&#34;</span><span>,</span> <span>&#34; &#34;</span><span>)</span></code></pre><p>This adds the method <code><span>trimIndentsAndRemoveNewlines</span><span>(</span><span>)</span></code> to the <code>String</code> class, which removes indentations and newline characters from multiline strings. The assignments to each hot sauce’s <code>description</code> property is done using multiline strings (which are delimited with triple-quotes — <code><span>&#34;&#34;</span>&#34;</code>) to make the code easier to read.</p><h4 id="What-s-With-the-Numbers-">What’s With the Numbers?</h4><p>You may have noticed that some of the numbers in the code contain underscore characters, such as on this line of code for the final sauce in the list:</p><pre><code>heat <span>=</span> <span>669_000</span></code></pre><p>Kotlin — like some other languages, including Python, Ruby, and Swift — ignores undescore characters in numbers. This allows you to use them the way we typically use “separator characters” to make numbers easier to read.</p><p>For example, in the U.S., we tend to write the number for “one million” as <strong>1,000,000</strong>, which is easier to read than 1000000. In India, the preference is to write this number as <strong>10,00,000</strong>, and in some countries in Europe, it’s <strong>1.000.000</strong>. By allowing the underscore as the grouping character for numbers and ignoring it, Kotlin lets you group digits in numbers as you see fit.</p><h2 id="Trying-Out-the-API">Trying Out the API</h2><p>You’re now ready to take the API for a trial run!</p><p>🌶 Run the application by opening a terminal if you’re on macOS of Linux or opening PowerShell if you’re on Windows), navigating to the the application’s directory, and entering the following command:</p><pre><code>./gradlew bootRun</code></pre><p>This command was included in the set of files that Spring Initilizr generated. It sets Gradle in motion, causing it to download any needed plugins and dependencies, after which it launches the application.</p><p>When it starts, you’ll see a lot of status messages. Eventually, they’ll end with this:</p><pre><code><span>&gt;</span> :bootRun</code></pre><p>If you don’t see an error message and the last line of the output is <code><span>&gt;</span> <span>:</span>bootRun</code>, it means that the project is running properly and listening to <strong>localhost:8080</strong> for incoming requests. You can now start making API calls.</p><h3 id="Is-this-thing-on-">Is this thing on?</h3><p>One of the dependencies that you included when setting up this project with Spring Initializr was Spring Boot Actuator. This automatically adds a number of endpoints to your application that let you monitor and interact with it.</p><p>Let’s use Actuator’s <code>health</code> endpoint to get client-side confirmation that your application is up and running.</p><p>🌶 <strong>If you’re on macOS or Linux,</strong> enter this into Terminal:</p><pre><code><span>curl</span> <span>&#34;http://localhost:8080/actuator/health&#34;</span></code></pre><p>🌶 <strong>If you’re on Windows,</strong> enter this into PowerShell:</p><pre><code>Invoke<span>-</span>RestMethod <span>&#34;http://localhost:8080/actuator/health&#34;</span></code></pre><p>macOS and Linux users should see this response...</p><pre><code><span>{</span><span>&#34;status&#34;</span><span>:</span><span>&#34;UP&#34;</span><span>}</span></code></pre><p>...while Windows users should see this:</p><pre><code>status
<span>--</span><span>--</span><span>--</span>
<span>UP</span></code></pre><p>The <code>health</code> endpoint is just one of of over 20 endpoints that a Spring Boot application provides when it includes the Actuator dependency. It’s indispensable for managing and monitoring apps during both development and production, as it provides logging, metrics, auditing, HTTP tracing, and process monitoring features, <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html" target="_blank" rel="noreferrer noopener">all of which are covered in the Spring documentation.</a></p><h3 id="Count-hot-sauces">Count hot sauces</h3><p>To get the number of hot sauces in the database, send a GET request to the <code><span>/</span>api<span>/</span>hotsauces<span>/</span>count</code> endpoint.</p><p>🌶 <strong>If you’re on macOS or Linux,</strong> enter this into Terminal:</p><pre><code><span>curl</span> <span>&#34;http://localhost:8080/api/hotsauces/count&#34;</span></code></pre><p>🌶 <strong>If you’re on Windows,</strong> enter this into PowerShell:</p><pre><code>Invoke<span>-</span>RestMethod <span>&#34;http://localhost:8080/api/hotsauces/count&#34;</span></code></pre><p>If you haven’t added or removed any hot sauces since starting the application, the API should report that there are 9.</p><h3 id="List-hot-sauces">List hot sauces</h3><p>To get the complete list of hot sauces, send a GET request to the <code><span>/</span>api<span>/</span>hotsauces</code> endpoint.</p><p>🌶 <strong>If you’re on macOS or Linux,</strong> enter this into Terminal:</p><pre><code><span>curl</span> <span>&#34;http://localhost:8080/api/hotsauces&#34;</span></code></pre><p>🌶 <strong>If you’re on Windows,</strong> enter this into PowerShell:</p><pre><code>Invoke<span>-</span>RestMethod <span>&#34;http://localhost:8080/api/hotsauces&#34;</span></code></pre><p>macOS and Linux users will be presented with a JSON array of dictionaries, with each dictionary representing a hot sauce. Windows users will see a nicely formatted list of hot sauces and their properties.</p><h3 id="Filtering-hot-sauces-with-parameters">Filtering hot sauces with parameters</h3><p>Try using the optional parameters to limit the results. In the example below, the <code>maxheat</code> parameter is being used to limit the response to only those hot sauces with a Scoville rating of 10,000 or less.</p><p>🌶 <strong>If you’re on macOS or Linux,</strong> enter this into Terminal:</p><pre><code><span>curl</span> <span>&#34;http://localhost:8080/api/hotsauces?maxheat=10000&#34;</span></code></pre><p>🌶 <strong>If you’re on Windows,</strong> enter this into PowerShell:</p><pre><code>Invoke<span>-</span>RestMethod <span>&#34;http://localhost:8080/api/hotsauces?maxheat=10000&#34;</span></code></pre><p>If you haven’t added or removed any hot sauces since starting the application, the API should return three hot sauces: Truff Hot Sauce, Truff Hotter Sauce, and Cholula.</p><h3 id="Add-a-new-hot-sauce">Add a new hot sauce</h3><p>Add a new sauce to the database by sending a POST request to <code><span>/</span>api<span>/</span>hotsauces<span>/</span></code>, along with the attributes of the new sauce — except <code>id</code>, which will automatically be assigned to the new sauce. The attributes should be in JSON dictionary form.</p><p>🌶 <strong>If you’re on macOS or Linux,</strong> enter this command into the terminal:</p><pre><code><span>curl</span> --request POST <span>\</span>
    --url http://localhost:8080/api/hotsauces/ <span>\</span>
    -H <span>&#34;Content-Type: application/json&#34;</span> <span>\</span>
    --data <span>&#39;{&#34;brandName&#34;: &#34;Dave’s Gourmet&#34;, &#34;sauceName&#34;: &#34;Temporary Insanity&#34;, &#34;url&#34;: &#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE&#34;, &#34;description&#34;: &#34;This sauce has all the flavor of Dave’s Original Insanity with less heat. Finally, there’s sauce for when you only want to get a little crazy in the kitchen. Add to stews, burgers, burritos, and pizza, or any food that needs an insane boost. As with all super hot sauces, this sauce is best enjoyed one drop at a time!&#34;, &#34;heat&#34;: 57000}&#39;</span></code></pre><p>🌶 <strong>If you’re on Windows,</strong> enter this command into PowerShell:</p><pre><code>$body <span>=</span> @<span>{</span>
    brandName <span>=</span> <span>&#34;Dave\&#39;s Gourmet&#34;</span>
    sauceName <span>=</span> <span>&#34;Temporary Insanity&#34;</span>
    url <span>=</span> <span>&#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE&#34;</span>
    description <span>=</span> <span>&#34;This sauce has all the flavor of Dave\&#39;s Original Insanity with less heat. Finally, there&#39;s sauce for when you only want to get a little crazy in the kitchen. Add to stews, burgers, burritos, and pizza, or any food that needs an insane boost. As with all super hot sauces, this sauce is best enjoyed one drop at a time!&#34;</span>
    heat <span>=</span> <span>57000</span>
<span>}</span> <span>|</span> ConvertTo<span>-</span>Json
Invoke<span>-</span>RestMethod <span>&#34;http://localhost:8080/api/hotsauces/&#34;</span> <span><span>`</span><span>
    -Method POST </span><span>`</span></span>
    <span>-</span>ContentType <span>&#34;application/json&#34;</span> `
    <span>-</span>Body $body</code></pre><p>The hot sauce will be added to the database, and the API will respond with information about the newly added sauce.</p><p>You can confirm that the hot sauce has been added to the database by requesting the complete list, or by requesting it by id.</p><h3 id="Edit-a-hot-sauce">Edit a hot sauce</h3><p>Make changes to a hot sauce in the database by sending a PUT request to <code><span>/</span>api<span>/</span>hotsauces<span>/</span><span>{</span>id<span>}</span></code> where <code><span>{</span>id<span>}</span></code> is the hot sauce’s <code>id</code> value, along with the attributes you wish to change in JSON dictionary form.</p><p>🌶 <strong>If you’re on macOS or Linux,</strong> enter this command into the terminal:</p><pre><code><span>curl</span> --request PUT <span>\</span>
    --url http://localhost:8080/api/hotsauces/10 <span>\</span>
    -H <span>&#34;Content-Type: application/json&#34;</span> <span>\</span>
    --data <span>&#39;{&#34;brandName&#34;: &#34;NewCo&#34;, &#34;sauceName&#34;: &#34;Generic Hot Sauce&#34;, &#34;description&#34;: &#34;It’s hot. It’s sauce. That’s it.&#34;, &#34;heat&#34;: 1000}&#39;</span></code></pre><p>🌶 <strong>If you’re on Windows,</strong> enter this command into PowerShell:</p><pre><code>$body <span>=</span> @<span>{</span>
    brandName <span>=</span> <span>&#34;NewCo&#34;</span>
    sauceName <span>=</span> <span>&#34;Generic Hot Sauce&#34;</span>
    url <span>=</span> <span>&#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE&#34;</span>
    description <span>=</span> <span>&#34;It&#39;s hot. It&#39;s sauce. That&#39;s it.&#34;</span>
    heat <span>=</span> <span>1000</span>
<span>}</span> <span>|</span> ConvertTo<span>-</span>Json
Invoke<span>-</span>RestMethod <span>&#34;http://localhost:8080/api/hotsauces/10&#34;</span> <span><span>`</span><span>
    -Method PUT </span><span>`</span></span>
    <span>-</span>ContentType <span>&#34;application/json&#34;</span> `
    <span>-</span>Body $body</code></pre><p>The hot sauce will be updated with your changes and the API will respond with information showing the changes you made.</p><h3 id="Delete-a-hot-sauce">Delete a hot sauce</h3><p>Delete a hot sauce by sending a DELETE request to <code><span>/</span>api<span>/</span>hotsauces<span>/</span><span>{</span>id<span>}</span></code> where <code><span>{</span>id<span>}</span></code> is the hot sauce’s <code>id</code> value.</p><p>🌶 <strong>If you’re on macOS or Linux,</strong> enter this command into Terminal:</p><pre><code><span>curl</span> --request DELETE <span>\</span>
    --url http://localhost:8080/api/hotsauces/10</code></pre><p>🌶 <strong>If you’re on Windows,</strong> enter this command into PowerShell:</p><pre><code>Invoke-RestMethod <span>&#34;http://localhost:8080/api/hotsauces/10&#34;</span> `
    -Method DELETE</code></pre><p>You can confirm that the hot sauce has been removed from the database by requesting the complete list (using <code>curl http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>8080</span><span>/</span>api<span>/</span>hotsauces<span>/</span></code>) or a count of hot sauces (using <code>curl http<span>:</span><span>/</span><span>/</span>localhost<span>:</span><span>8080</span><span>/</span>api<span>/</span>hotsauces<span>/</span>count</code>).</p><h2 id="Securing-the-API">Securing the API</h2><p>Right now, the entire API is unsecured. All its endpoints are available to anyone with the URL and the ability to send HTTP requests.</p><p>Suppose that we want to allow only authorized applications to have access to the endpoints of the API that allow accessing, adding, editing, and deleting hot sauces. The remaining endpoints — the test endpoint and the one that reports the number of hot sauces — can remain generally available.</p><p>You’ll use Auth0 to secure the API’s CRUD endpoints, but before that happens, let’s take a look at how API authentication works.</p><h3 id="The-Nightclub-Metaphor">The Nightclub Metaphor</h3><p>There’s no shortage of essays and articles on the internet that try to explain API authentication. Let’s make it a little more fun and easier to grasp way by using The Nightclub Metaphor!</p><p>A number of nightclubs have a two-step process to control who gets in and who doesn’t. First, there’s an initial phase where the club-goer goes to a window and shows some ID...</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6oCWbsxHYlaAJXpelHJOS1/6d7fd315a5bb60f932be7c765f198106/mclovin_drivers_license.png" alt="A fake ID"/></p><p>...and if the ID passes inspection, the club-goer is given something that’s easy to see in a nightclub environment. Often, it’s a wristband:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3antgKjLDw9hqJ93J97thU/7199be675a2da2164ab71fc4532831ad/wristbands.png" alt="Club wristbands"/></p><p>The wristband is visible permission — an <em>access token</em> — that the club-goer wearing it has been cleared to enter the club. In order to be let into the club, the club-goer has to show their wristband to the bouncers guarding the entrance.</p><p>The better-run nightclubs change their wristbands every night. One night, it’ll be blue, and on the next night, it’ll be a different color. This prevents club-goers from reusing the previous night’s wristband to get in.</p><p>API security with Auth0 works in a similar way:</p><ul><li><strong>Showing ID at the window:</strong> You first assemble a set of credentials, which you submit to Auth0’s servers to obtain an access token.</li><li><strong>Showing your wristband to the bouncers:</strong> When accessing an API endpoint that requires authorization, you include the access token as part of your request. The API communicates with Auth0 to validate the access token, and if it’s valid, provides the response to your request.</li><li><strong>Changing wristbands every night:</strong> Like the wristbands at the better-run nightclubs, access tokens aren’t valid forever. By default, Auth0 access tokens expire 24 hours after they’re issued.</li></ul><p>It’s time to secure the API. This needs to be done both on the Auth0 side as well as in the application.</p><h2 id="Setting-Up-API-Authentication-on-the-Auth0-Side">Setting Up API Authentication on the Auth0 Side</h2><h3 id="Registering-the-API">Registering the API</h3><p>The first step in setting up API authentication is to register it.</p><p>🌶 Log into Auth0.</p><blockquote><p>If you don’t have an Auth0 account yet, go ahead and <a href="https://auth0.com/signup" target="_blank" rel="noreferrer noopener">sign up for a free one.</a> You’ll find it useful for prototyping logins and API security in your projects.</p></blockquote><p>🌶 Once you’ve logged in, <a href="https://manage.auth0.com/?&amp;_ga=2.55268258.821728906.1599742219-782382229.1597890849#/apis" target="_blank" rel="noreferrer noopener">navigate to the <em>APIs</em> page</a>...</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/48uwB1BEZbrHDz9zzeRWxO/4add50dd5a0b7317b991fd3fe1a413da/apis.png" alt="Auth0 dashboard APIs page"/></p><p>🌶 ...and click the <strong>Create API</strong> button located near the upper right corner of the page. A form will appear, asking for basic information about the API:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4XmypcreWQ9C4HGTmKHkul/6dfbe34de3f0fd09464f3ae89440f533/new-api.png" alt="New API pop-up form"/></p><p>🌶 Fill it out like so:</p><ul><li><em>Name:</em> Enter <strong>HotSauces</strong>.</li><li><em>Identifier:</em> Enter <strong><a href="http://hotsauces.demo" target="_blank" rel="noreferrer noopener">http://hotsauces.demo</a></strong>.</li><li><em>Signing Algorithm:</em> Select <strong>RS256</strong>.</li></ul><p>🌶 When you’re done providing this information, click the <strong>Create</strong> button. The API will now be registered, which means that Auth0 can now be used to authorize access to it.</p><h3 id="Getting-the-Credentials">Getting the Credentials</h3><p>The next step is to gather the necessary Auth0 credentials that will be needed to request an access token from Auth0 and to validate any access tokens.</p><p>Immediately after registering your API, you were taken to the API’s newly-created <strong>Quick Start</strong> page, pictured below:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6Wr7wbTVoKREeDqP2PPccC/6e06c065b4bd2edbfb203cebf64ce3d3/hotsauces-quick-start-page.png" alt="Auth0 Quick Start page for the API"/></p><p>This is technically a machine-to-machine application, which means that the API you created (a machine) wouldn’t normally be accessed directly by a human, but by an application (another machine). You’ll need to gather the credentials from the Machine to Machine Applications section.</p><p>🌶 Click on <strong>Machine to Machine Applications</strong>, which will take you to this page:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6I4WwRBhedzzWiKaZL9Mry/b78eb788f07e9e3cf94a603fb45de80b/machine-to-machine.png" alt="Auth0 Settings page"/></p><p>This is the first of two pages that provide information that you need in order to get the access token.</p><p>🌶 You’ll be copying four items, and you may find it helpful to open a text editor so that you have some place in which to paste them.</p><p>🌶 Copy the <em>API Identifier</em> value, which is located just below the page’s headline...</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5dyz7Uq4McFi1wk8hiLdMI/7131755fbdc21bf2797f98d7b1c78d4f/machine-to-machine_identifier.png" alt="Identifier"/></p><p>🌶 ...and paste it into the text editor.</p><p>Your text editor should look something like this:</p><pre><code>API Identifier: <span>{</span>API Identifier<span>}</span></code></pre><p>If you’ve been following the steps in this exercise, {API Identifier} will be <strong><a href="http://hotsauces.demo" target="_blank" rel="noreferrer noopener">http://hotsauces.demo</a></strong>.</p><p>There will be a list of applications at the bottom of the page. One of them will be <strong>HotSauces</strong>. Click on its name. You’ll be taken to HotSauces’ <strong>Machine to Machine → Settings</strong> page, which contains information that you’ll need to get the token:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/41YnIqmEdUcsVSYSNtCqmO/82596c6774a38590976f59ff61c538db/machine-to-machine_settings.png" alt="Auth0 Machine to Machine page"/></p><p>🌶 Use the “copy” buttons on the right side of these fields to copy and paste their contents into the same text editor where you pasted the API Identifier:</p><ul><li>Domain</li><li>Client ID</li><li>Client Secret</li></ul><p>Your text editor should now look something like this:</p><pre><code>API Identifier: <span>{</span>API Identifier<span>}</span>
Domain: <span>{</span>Domain<span>}</span>
Client ID: <span>{</span>Client ID<span>}</span>
Client Secret: <span>{</span>Client Secret<span>}</span></code></pre><p>You’ve done all the necessary setup on the Auth0 side. It’s now time to do the same on the application side.</p><h2 id="Setting-Up-API-Authentication-on-the-Application-Side">Setting Up API Authentication on the Application Side</h2><h3 id="Adding-Security-Dependencies">Adding Security Dependencies</h3><p>The first step is to add the necessary security dependencies to the Gradle build file.</p><p>🌶 Update the <code>dependencies</code> block in <strong>/build.gradle.kts</strong> so that it looks like this:</p><pre><code><span>// /build.gradle.kts (excerpt)</span>

dependencies <span>{</span>
    <span>implementation</span><span>(</span><span>&#34;org.springframework.boot:spring-boot-starter-actuator&#34;</span><span>)</span>
    <span>implementation</span><span>(</span><span>&#34;org.springframework.boot:spring-boot-starter-data-jpa&#34;</span><span>)</span>
    <span>implementation</span><span>(</span><span>&#34;org.springframework.boot:spring-boot-starter-web&#34;</span><span>)</span>
    <span>implementation</span><span>(</span><span>&#34;com.fasterxml.jackson.module:jackson-module-kotlin&#34;</span><span>)</span>
    <span>implementation</span><span>(</span><span>&#34;org.jetbrains.kotlin:kotlin-reflect&#34;</span><span>)</span>
    <span>implementation</span><span>(</span><span>&#34;org.jetbrains.kotlin:kotlin-stdlib-jdk8&#34;</span><span>)</span>
    <span>developmentOnly</span><span>(</span><span>&#34;org.springframework.boot:spring-boot-devtools&#34;</span><span>)</span>
    <span>runtimeOnly</span><span>(</span><span>&#34;com.h2database:h2&#34;</span><span>)</span>
    <span>testImplementation</span><span>(</span><span>&#34;org.springframework.boot:spring-boot-starter-test&#34;</span><span>)</span>

    <span>implementation</span><span>(</span><span>&#34;org.springframework.boot:spring-boot-starter-security&#34;</span><span>)</span>
    <span>implementation</span><span>(</span><span>&#34;org.springframework.security:spring-security-oauth2-resource-server&#34;</span><span>)</span>
    <span>implementation</span><span>(</span><span>&#34;org.springframework.security:spring-security-oauth2-jose&#34;</span><span>)</span>
    <span>implementation</span><span>(</span><span>&#34;org.springframework.security:spring-security-config&#34;</span><span>)</span>
<span>}</span></code></pre><p>This adds four dependencies. Note that they all have “security” in their name and that two of them also include “oauth2”, a reference to the OAuth2 protocol that Auth0 uses for authorization.</p><p>The first time you run the application after adding these lines to the Gradle build file, Gradle will download and install these dependencies.</p><h3 id="Adding-a-Configuration-File">Adding a Configuration File</h3><p>The next step is to create a file that configures the application to use the correct API identifier and domain when authenticating with Auth0.</p><p>🌶 Create a new file named <strong>application.yml</strong> in the <strong>/src/main/resources/</strong> directory. It should contain the following:</p><pre><code><span># /src/main/resources/application.yml</span>

<span>auth0</span><span>:</span>
  <span>audience</span><span>:</span> <span>{</span> Domain <span>}</span>
<span>spring</span><span>:</span>
  <span>security</span><span>:</span>
    <span>oauth2</span><span>:</span>
      <span>resourceserver</span><span>:</span>
        <span>jwt</span><span>:</span>
          <span>issuer-uri</span><span>:</span> https<span>:</span>//<span>{</span>API Identifier<span>}</span>/</code></pre><blockquote><p>Indentation is important in this file: Don’t remove any indents, and use space characters to make the indents. <strong>Do NOT use tab characters!</strong></p></blockquote><p>🌶 In the file shown above, replace <code><span>{</span><span>API</span> Identifier<span>}</span></code> and <code><span>{</span>Domain<span>}</span></code> with the values that you copied into your text editor. If you’ve been following the steps in this exercise, <code><span>{</span><span>API</span> Identifier<span>}</span></code> will be <strong><a href="http://hotsauces.demo" target="_blank" rel="noreferrer noopener">http://hotsauces.demo</a></strong>.</p><p>The <code><span>{</span><span>API</span> Identifier<span>}</span></code> value will be used to tell Auth0 which API is asking for authentication, and the <code><span>{</span>Domain<span>}</span></code> value allows Spring’s security to get the authorization server’s public keys and validate the access token.</p><h3 id="Adding-Security-Classes">Adding Security Classes</h3><p>The final step in securing the API is adding a couple of security classes. These classes enable the application to make use of Auth0’s OAuth2 authorization.</p><p>Since these classes don’t directly have anything to do with the application’s main functionality, they’re often put into their own directory.</p><p>🌶 Create a new directory, <strong>security</strong>, as a subdirectory of <strong>/src/main/kotlin/com/auth0/hotsauces/</strong>. The project’s directory structure should now look like this:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/OmSevxxVhzfafimLdeArh/c3228767798e5f33e0866f34011d8c63/hotsauces-project-structure-2.png" alt="Project structure, pointing out the security folder and application.yml"/></p><p>The first security class that you’ll add is an audience validator. It confirms that the access token is actually the one for the API.</p><p>🌶 Create a new file named <strong>AudienceValidator.kt</strong> in the <strong>/src/main/kotlin/com/auth0/hotsauces/security/</strong> directory:</p><pre><code><span>// /src/main/kotlin/com/auth0/hotsauces/security/AudienceValidator.kt</span>

<span>package</span> com<span>.</span>auth0<span>.</span>hotsauces<span>.</span>security

<span>import</span> org<span>.</span>springframework<span>.</span>security<span>.</span>oauth2<span>.</span>core<span>.</span>OAuth2Error
<span>import</span> org<span>.</span>springframework<span>.</span>security<span>.</span>oauth2<span>.</span>core<span>.</span>OAuth2TokenValidator
<span>import</span> org<span>.</span>springframework<span>.</span>security<span>.</span>oauth2<span>.</span>core<span>.</span>OAuth2TokenValidatorResult
<span>import</span> org<span>.</span>springframework<span>.</span>security<span>.</span>oauth2<span>.</span>jwt<span>.</span>Jwt

<span>class</span> <span>AudienceValidator</span><span>(</span><span>private</span> <span>val</span> audience<span>:</span> String<span>)</span> <span>:</span> OAuth2TokenValidator<span>&lt;</span>Jwt<span>&gt;</span> <span>{</span>

    <span>override</span> <span>fun</span> <span>validate</span><span>(</span>jwt<span>:</span> Jwt<span>)</span><span>:</span> OAuth2TokenValidatorResult <span>{</span>
        <span>val</span> error <span>=</span> <span>OAuth2Error</span><span>(</span><span>&#34;invalid_token&#34;</span><span>,</span> <span>&#34;The required audience is missing&#34;</span><span>,</span> <span>null</span><span>)</span>
        <span>return</span> <span>if</span> <span>(</span>jwt<span>.</span>audience<span>.</span><span>contains</span><span>(</span>audience<span>)</span><span>)</span> <span>{</span>
            OAuth2TokenValidatorResult<span>.</span><span>success</span><span>(</span><span>)</span>
        <span>}</span> <span>else</span> OAuth2TokenValidatorResult<span>.</span><span>failure</span><span>(</span>error<span>)</span>
    <span>}</span>

<span>}</span></code></pre><p>The second security class configures API security in two ways:</p><ul><li>It validates the access token, and</li><li>It specifies the levels of access you grant to the API endpoints.</li></ul><p>🌶 Create a new file named <strong>SecurityConfig.kt</strong> in the <strong>/src/main/kotlin/com/auth0/hotsauces/security/</strong> directory:</p><pre><code><span>// /src/main/kotlin/com/auth0/hotsauces/security/SecurityConfig.kt</span>

<span>package</span> com<span>.</span>auth0<span>.</span>hotsauces<span>.</span>security

<span>import</span> org<span>.</span>springframework<span>.</span>beans<span>.</span>factory<span>.</span>annotation<span>.</span>Value
<span>import</span> org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span>Bean
<span>import</span> org<span>.</span>springframework<span>.</span>security<span>.</span>config<span>.</span>annotation<span>.</span>web<span>.</span>builders<span>.</span>HttpSecurity
<span>import</span> org<span>.</span>springframework<span>.</span>security<span>.</span>config<span>.</span>annotation<span>.</span>web<span>.</span>configuration<span>.</span>EnableWebSecurity
<span>import</span> org<span>.</span>springframework<span>.</span>security<span>.</span>config<span>.</span>annotation<span>.</span>web<span>.</span>configuration<span>.</span>WebSecurityConfigurerAdapter
<span>import</span> org<span>.</span>springframework<span>.</span>security<span>.</span>oauth2<span>.</span>core<span>.</span>DelegatingOAuth2TokenValidator
<span>import</span> org<span>.</span>springframework<span>.</span>security<span>.</span>oauth2<span>.</span>core<span>.</span>OAuth2TokenValidator
<span>import</span> org<span>.</span>springframework<span>.</span>security<span>.</span>oauth2<span>.</span>jwt<span>.</span><span>*</span>

<span>@EnableWebSecurity</span>
<span>class</span> SecurityConfig <span>:</span> <span>WebSecurityConfigurerAdapter</span><span>(</span><span>)</span> <span>{</span>

    <span>@Value</span><span>(</span><span>&#34;\<span><span>${</span>auth0<span>.</span>audience<span>}</span></span>&#34;</span><span>)</span>
    <span>private</span> <span>val</span> audience<span>:</span> String <span>=</span> <span>String</span><span>(</span><span>)</span>

    <span>@Value</span><span>(</span><span>&#34;\<span><span>${</span>spring<span>.</span>security<span>.</span>oauth2<span>.</span>resourceserver<span>.</span>jwt<span>.</span>issuer<span>-</span>uri<span>}</span></span>&#34;</span><span>)</span>
    <span>private</span> <span>val</span> issuer<span>:</span> String <span>=</span> <span>String</span><span>(</span><span>)</span>

    <span>@Bean</span>
    <span>fun</span> <span>jwtDecoder</span><span>(</span><span>)</span><span>:</span> JwtDecoder <span>{</span>
        <span>val</span> jwtDecoder <span>=</span> JwtDecoders<span>.</span><span>fromOidcIssuerLocation</span><span>(</span>issuer<span>)</span> <span>as</span> NimbusJwtDecoder
        <span>val</span> audienceValidator<span>:</span> OAuth2TokenValidator<span>&lt;</span>Jwt<span>&gt;</span> <span>=</span> <span>AudienceValidator</span><span>(</span>audience<span>)</span>
        <span>val</span> withIssuer<span>:</span> OAuth2TokenValidator<span>&lt;</span>Jwt<span>&gt;</span> <span>=</span> JwtValidators<span>.</span><span>createDefaultWithIssuer</span><span>(</span>issuer<span>)</span>
        <span>val</span> withAudience<span>:</span> OAuth2TokenValidator<span>&lt;</span>Jwt<span>&gt;</span> <span>=</span> <span>DelegatingOAuth2TokenValidator</span><span>(</span>withIssuer<span>,</span> audienceValidator<span>)</span>
        jwtDecoder<span>.</span><span>setJwtValidator</span><span>(</span>withAudience<span>)</span>
        <span>return</span> jwtDecoder
    <span>}</span>

    <span>@Throws</span><span>(</span>Exception<span>::</span><span>class</span><span>)</span>
    <span>override</span> <span>fun</span> <span>configure</span><span>(</span>http<span>:</span> HttpSecurity<span>)</span> <span>{</span>
        http<span>.</span><span>authorizeRequests</span><span>(</span><span>)</span>
            <span>.</span><span>mvcMatchers</span><span>(</span><span>&#34;/api/hotsauces/count&#34;</span><span>)</span><span>.</span><span>permitAll</span><span>(</span><span>)</span>
            <span>.</span><span>mvcMatchers</span><span>(</span><span>&#34;/api/hotsauces&#34;</span><span>)</span><span>.</span><span>authenticated</span><span>(</span><span>)</span>
            <span>.</span><span>mvcMatchers</span><span>(</span><span>&#34;/api/hotsauces/*&#34;</span><span>)</span><span>.</span><span>authenticated</span><span>(</span><span>)</span>
            <span>.</span><span>and</span><span>(</span><span>)</span>
            <span>.</span><span>oauth2ResourceServer</span><span>(</span><span>)</span><span>.</span><span>jwt</span><span>(</span><span>)</span>
    <span>}</span>

<span>}</span></code></pre><p>Take a closer look at the <code><span>configure</span><span>(</span><span>)</span></code> method you just entered:</p><pre><code><span>@Throws</span><span>(</span>Exception<span>::</span><span>class</span><span>)</span>
<span>override</span> <span>fun</span> <span>configure</span><span>(</span>http<span>:</span> HttpSecurity<span>)</span> <span>{</span>
    http<span>.</span><span>authorizeRequests</span><span>(</span><span>)</span>
        <span>.</span><span>mvcMatchers</span><span>(</span><span>&#34;/api/hotsauces/count&#34;</span><span>)</span><span>.</span><span>permitAll</span><span>(</span><span>)</span>
        <span>.</span><span>mvcMatchers</span><span>(</span><span>&#34;/api/hotsauces&#34;</span><span>)</span><span>.</span><span>authenticated</span><span>(</span><span>)</span>
        <span>.</span><span>mvcMatchers</span><span>(</span><span>&#34;/api/hotsauces/*&#34;</span><span>)</span><span>.</span><span>authenticated</span><span>(</span><span>)</span>
        <span>.</span><span>and</span><span>(</span><span>)</span>
        <span>.</span><span>oauth2ResourceServer</span><span>(</span><span>)</span><span>.</span><span>jwt</span><span>(</span><span>)</span>
<span>}</span></code></pre><p>These lines specify that the <code><span>/</span>api<span>/</span>hotsauces<span>/</span>count</code> endpoints will be accessible to everyone...</p><pre><code><span>.</span><span>mvcMatchers</span><span>(</span><span>&#34;/api/hotsauces/count&#34;</span><span>)</span><span>.</span><span>permitAll</span><span>(</span><span>)</span></code></pre><p>...while these specify that the <code><span>/</span>api<span>/</span>hotsauces</code> endpoint and any other endpoint beginning with <code><span>/</span>api<span>/</span>hotsauces<span>/</span></code> require authentication.</p><pre><code><span>.</span><span>mvcMatchers</span><span>(</span><span>&#34;/api/hotsauces&#34;</span><span>)</span><span>.</span><span>authenticated</span><span>(</span><span>)</span>
<span>.</span><span>mvcMatchers</span><span>(</span><span>&#34;/api/hotsauces/*&#34;</span><span>)</span><span>.</span><span>authenticated</span><span>(</span><span>)</span></code></pre><p>In other words, any request to these endpoints must include a valid access token in order to work. Otherwise, those requests will get an HTTP 401 — Unauthorized — response.</p><p>Here’s what the project’s final directory structure looks like:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4LJ2qRCHiTke0NprOsST7J/084c4abc7157d44c317b50158de1fef6/hotsauces-project-structure-3.png" alt="Project file structure, showing the newly-added AudienceValidator and SecurityConfig files"/></p><h2 id="Trying-Out-the-Secured-API">Trying Out the Secured API</h2><p>Now that you’ve secured the API, it’s time to try it out!</p><h3 id="Acquiring-an-access-token">Acquiring an access token</h3><p>You now have the necessary pieces of information needed to request a token. You’ll request the token by sending a POST request containing the information.</p><p>You might find it easier to assemble the POST request in the same text editor where you pasted the information.</p><p>🌶 <strong>If you’re on macOS or Linux,</strong> start with this cURL command, replacing the <code><span>{</span>Domain<span>}</span></code>, <code><span>{</span>Client <span>ID</span><span>}</span></code>, <code><span>{</span>Client Secret<span>}</span></code>, and <code><span>{</span><span>API</span> Identifier<span>}</span></code> with the corresponding values you copied.</p><pre><code><span>curl</span> --request POST <span>\</span>
    --url https://<span>{</span>Domain<span>}</span>/oauth/token <span>\</span>
    --header <span>&#39;content-type: application/json&#39;</span> <span>\</span>
    --data <span>&#39;{
        &#34;client_id&#34;: &#34;{Client ID}&#34;,
        &#34;client_secret&#34;: &#34;{Client Secret}&#34;,
        &#34;audience&#34;: &#34;{API Identifier}&#34;,
        &#34;grant_type&#34;: &#34;client_credentials&#34;
    }&#39;</span></code></pre><p>🌶 <strong>If you’re on Windows,</strong> use this command instead. As with the macOS/Linux version, replace the <code><span>{</span>Domain<span>}</span></code>, <code><span>{</span>Client <span>ID</span><span>}</span></code>, <code><span>{</span>Client Secret<span>}</span></code>, and <code><span>{</span><span>API</span> Identifier<span>}</span></code> with the corresponding values you copied.</p><pre><code><span>$Body</span> <span>=</span> @<span>{</span>
    <span>&#34;client_id&#34;</span> <span>=</span> <span>&#34;{Client ID}&#34;</span>
    <span>&#34;client_secret&#34;</span> <span>=</span> <span>&#34;{Client Secret}&#34;</span>
    <span>&#34;audience&#34;</span> <span>=</span> <span>&#34;{API Identifier}&#34;</span>
    <span>&#34;grant_type&#34;</span> <span>=</span> <span>&#34;client_credentials&#34;</span>
<span>}</span>
<span>$response</span> <span>=</span> Invoke-RestMethod <span>&#34;https://{Domain}/oauth/token&#34;</span> <span><span>`</span>
    -Method POST <span>`</span></span>
    -Body <span>$Body</span>
<span>$response</span> <span>|</span> ConvertTo-Json</code></pre><p>In response, you should receive a JSON dictionary that looks like this:</p><pre><code><span>{</span>
  <span>&#34;access_token&#34;</span><span>:</span> <span>&#34;{Access Token (a 720-character string)}&#34;</span><span>,</span>
  <span>&#34;expires_in&#34;</span><span>:</span> <span>86400</span><span>,</span>
  <span>&#34;token_type&#34;</span><span>:</span> <span>&#34;Bearer&#34;</span>
<span>}</span></code></pre><p>Note that one of the dictionary keys is <code>expires_in</code>, which specifies that the token will expire in 86,400 seconds, or in more convenient units, 24 hours. After that time has elapsed, the token will be invalid and you’ll have to request a new one following the same steps above.</p><p>Copy the <code><span>{</span>Access token<span>}</span></code> value and paste it into the text editor with the other values.</p><p>Your text editor should now look something like this:</p><pre><code>API Identifier: <span>{</span>API Identifier<span>}</span>
Domain: <span>{</span>Domain<span>}</span>
Client ID: <span>{</span>Client ID<span>}</span>
Client Secret: <span>{</span>Client Secret<span>}</span>

Access Token: <span>{</span>Access Token<span>}</span></code></pre><h3 id="Trying-the-Public-Endpoints">Trying the Public Endpoints</h3><p>🌶 Open a terminal or PowerShell window, navigate to the project directory, and enter <code><span>.</span><span>/</span>gradlew bootRun</code>.</p><p>Start with the endpoint that remained public: The one that returns the number of hot sauces in the database.</p><p>🌶 <strong>If you’re on macOS or Linux,</strong> enter this command into Terminal:</p><pre><code><span>curl</span> -i http://localhost:8080/api/hotsauces/count</code></pre><p>The <code><span>-</span>i</code> option tells cURL to <code>i</code>nclude the HTTP response headers in its output. By using it, you can see the HTTP status code for the API’s reponse.</p><p>The response should still be the number of hot sauces. It will be preceded by the response header, which should look like this:</p><pre><code>HTTP/1.1 <span>200</span>
X-Content-Type-Options: nosniff
X-XSS-Protection: <span>1</span><span>;</span> <span>mode</span><span>=</span>block
Cache-Control: no-cache, no-store, max-age<span>=</span><span>0</span>, must-revalidate
Pragma: no-cache
Expires: <span>0</span>
X-Frame-Options: DENY
Content-Type: application/json
Transfer-Encoding: chunked
Date: <span>{</span>Date and <span>time</span> when the response was issued<span>}</span></code></pre><p>The status code is the number at the end of the header’s first line: <strong>200</strong>, or “OK”.</p><p>🌶 <strong>If you’re on Windows,</strong> enter this command into PowerShell:</p><pre><code>Invoke<span>-</span>WebRequest <span>&#34;http://localhost:8080/api/hotsauces/count&#34;</span></code></pre><p>You&#39;re using PowerShell&#39;s <code>Invoke<span>-</span>WebRequest</code> this time, which means that the response will look like this:</p><pre><code>StatusCode        <span>:</span> <span>200</span>
StatusDescription <span>:</span>
Content           <span>:</span> <span>9</span>
RawContent        <span>:</span> <span>HTTP</span><span>/</span><span>1.1</span> <span>200</span>
                    Transfer<span>-</span>Encoding<span>:</span> chunked
                    Keep<span>-</span>Alive<span>:</span> timeout<span>=</span><span>60</span>
                    Connection<span>:</span> keep<span>-</span>alive
                    Content<span>-</span>Type<span>:</span> application<span>/</span>json
                    Date<span>:</span> Fri<span>,</span> <span>23</span> Jul <span>2021</span> <span>14</span><span>:</span><span>05</span><span>:</span><span>52</span> <span>GMT</span>

                    <span>9</span>
Forms             <span>:</span> <span>{</span><span>}</span>
Headers           <span>:</span> <span>{</span><span>[</span>Transfer<span>-</span>Encoding<span>,</span> chunked<span>]</span><span>,</span> <span>[</span>Keep<span>-</span>Alive<span>,</span> timeout<span>=</span><span>60</span><span>]</span><span>,</span> <span>[</span>Connection<span>,</span> keep<span>-</span>alive<span>]</span><span>,</span> <span>[</span>Content<span>-</span>Type<span>,</span>
                    application<span>/</span>json<span>]</span><span>...</span><span>}</span>
Images            <span>:</span> <span>{</span><span>}</span>
InputFields       <span>:</span> <span>{</span><span>}</span>
Links             <span>:</span> <span>{</span><span>}</span>
ParsedHtml        <span>:</span> System<span>.</span>__ComObject
RawContentLength  <span>:</span> <span>1</span></code></pre><p>The number of sauces is the value in the <code>Content</code> line, and as with the macOS/Linux version, the status code is the number at the end of the header’s first line: <strong>200</strong>, or “OK”.</p><h3 id="Trying-the-Protected-Endpoints">Trying the Protected Endpoints</h3><p>It’s time to try the endpoints that require authorization. Before using the token, try requesting a list of all the hot sauces without it.</p><p>🌶 <strong>If you’re on macOS or Linux,</strong> enter this command into Terminal:</p><pre><code><span>curl</span> -i http://localhost:8080/api/hotsauces/</code></pre><p>Instead of a JSON list of dictionaries of hot sauces, you’ll get an empty reply. The first line of the header should be your hint as to why:</p><pre><code><span>HTTP</span><span>/</span><span>1.1</span> <span>401</span></code></pre><p>🌶 <strong>If you’re on Windows,</strong> enter this command into PowerShell:</p><pre><code><span>Invoke-WebRequest</span> <span>&#34;http://localhost:8080/api/hotsauces/&#34;</span></code></pre><p>You&#39;ll see this reply:</p><pre><code>Invoke<span>-</span>WebRequest <span>:</span> The remote server returned an error<span>:</span> <span>(</span><span>401</span><span>)</span> Unauthorized<span>.</span>
At line<span>:</span><span>1</span> char<span>:</span><span>1</span>
<span>+</span> Invoke<span>-</span>WebRequest <span>&#34;http://localhost:8080/api/hotsauces/&#34;</span>
<span>+</span> <span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span>
    <span>+</span> CategoryInfo          <span>:</span> InvalidOperation<span>:</span> <span>(</span>System<span>.</span>Net<span>.</span>HttpWebRequest<span>:</span>HttpWebRequest<span>)</span> <span>[</span>Invoke<span>-</span>WebRequest<span>]</span><span>,</span> WebExc
   eption
    <span>+</span> FullyQualifiedErrorId <span>:</span> WebCmdletWebResponseException<span>,</span>Microsoft<span>.</span>PowerShell<span>.</span>Commands<span>.</span>InvokeWebRequestCommand</code></pre><p>The <strong>401</strong> status code means “Unauthorized”. To refer back to the nightclub metaphor, you’re trying to get into the club without a wristband.</p><h4 id="Getting-a-list-of-all-the-hot-sauces-from-the-secured-API">Getting a list of all the hot sauces from the secured API</h4><p>Make the request again, this time including the access token.</p><p>🌶 <strong>If you’re on macOS or Linux,</strong> enter this command into the terminal, making sure to replace <code><span>{</span>Access Token<span>}</span></code> with the value that you copied into your text editor:</p><pre><code><span>curl</span> -i --request GET <span>\</span>
     --url http://localhost:8080/api/hotsauces/ <span>\</span>
     -H <span>&#34;Content-Type: application/json&#34;</span> <span>\</span>
     -H <span>&#34;authorization: Bearer {Access Token}&#34;</span></code></pre><p>🌶 <strong>If you’re on Windows,</strong> enter this command into PowerShell, making sure to replace <code><span>{</span>Access Token<span>}</span></code> with the value that you copied into your text editor:</p><pre><code>$accessToken <span>=</span> <span>&#34;{Access Token}&#34;</span>
$headers <span>=</span> @<span>{</span>
    Authorization <span>=</span> <span>&#34;Bearer $accessToken&#34;</span>
<span>}</span>
$response <span>=</span> Invoke<span>-</span>RestMethod <span>&#34;http://localhost:8080/api/hotsauces/&#34;</span> `
    <span>-</span>Headers $headers
$response <span>|</span> ConvertTo<span>-</span>Json</code></pre><p>This time, when you make the request, you’ll get the list of all the hot sauces.</p><h4 id="Adding-a-hot-sauce-using-the-secured-API">Adding a hot sauce using the secured API</h4><p>Try adding add a hot sauce using the access token.</p><p>🌶 <strong>If you’re on macOS or Linux,</strong> enter this command into the terminal:</p><pre><code><span>curl</span> -i --request POST <span>\</span>
    --url http://localhost:8080/api/hotsauces/ <span>\</span>
    -H <span>&#34;Content-Type: application/json&#34;</span> <span>\</span>
    --data <span>&#39;{&#34;brandName&#34;: &#34;Dave’s Gourmet&#34;, &#34;sauceName&#34;: &#34;Temporary Insanity&#34;, &#34;url&#34;: &#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE&#34;, &#34;description&#34;: &#34;This sauce has all the flavor of Dave’s Original Insanity with less heat. Finally, there’s sauce for when you only want to get a little crazy in the kitchen. Add to stews, burgers, burritos, and pizza, or any food that needs an insane boost. As with all super hot sauces, this sauce is best enjoyed one drop at a time!&#34;, &#34;heat&#34;: 57000}&#39;</span> <span>\</span>
    -H <span>&#34;authorization: Bearer {Access Token}&#34;</span></code></pre><p>🌶 <strong>If you’re on Windows,</strong> enter this command into PowerShell:</p><pre><code>$body <span>=</span> @<span>{</span>
    brandName <span>=</span> <span>&#34;Dave&#39;s Gourmet&#34;</span>
    sauceName <span>=</span> <span>&#34;Temporary Insanity&#34;</span>
    url <span>=</span> <span>&#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE&#34;</span>
    description <span>=</span> <span>&#34;This sauce has all the flavor of Dave\&#39;s Original Insanity with less heat. Finally, there&#39;s sauce for when you only want to get a little crazy in the kitchen. Add to stews, burgers, burritos, and pizza, or any food that needs an insane boost. As with all super hot sauces, this sauce is best enjoyed one drop at a time!&#34;</span>
    heat <span>=</span> <span>57000</span>
<span>}</span> <span>|</span> ConvertTo<span>-</span>Json
$response <span>=</span> Invoke<span>-</span>RestMethod <span>&#34;http://localhost:8080/api/hotsauces/&#34;</span> <span><span>`</span><span>
    -Method POST </span><span>`</span></span>
    <span>-</span>ContentType <span>&#34;application/json&#34;</span> <span><span>`</span><span>
    -Headers $headers </span><span>`</span></span>
    <span>-</span>Body $body
$response <span>|</span> ConvertTo<span>-</span>Json</code></pre><h4 id="Editing-a-hot-sauce-using-the-secured-API">Editing a hot sauce using the secured API</h4><p>Try editing the hot sauce with <code>id</code> 10.</p><p>🌶 <strong>If you’re on macOS or Linux,</strong> enter this command into the terminal:</p><pre><code><span>curl</span> -i --request PUT <span>\</span>
    --url http://localhost:8080/api/hotsauces/10 <span>\</span>
    -H <span>&#34;Content-Type: application/json&#34;</span> <span>\</span>
    --data <span>&#39;{&#34;brandName&#34;: &#34;NewCo&#34;, &#34;sauceName&#34;: &#34;Generic Hot Sauce&#34;, &#34;description&#34;: &#34;It’s hot. It’s sauce. That’s it.&#34;, &#34;heat&#34;: 1000}&#39;</span> <span>\</span>
    -H <span>&#34;authorization: Bearer {Access Token}&#34;</span></code></pre><p>🌶 <strong>If you’re on Windows,</strong> enter this command into PowerShell:</p><pre><code>$body <span>=</span> @<span>{</span>
    brandName <span>=</span> <span>&#34;NewCo&#34;</span>
    sauceName <span>=</span> <span>&#34;Generic Hot Sauce&#34;</span>
    description <span>=</span> <span>&#34;It’s hot. It’s sauce. That’s it.&#34;</span>
    heat <span>=</span> <span>1000</span>
<span>}</span> <span>|</span> ConvertTo<span>-</span>Json
$response <span>=</span> Invoke<span>-</span>RestMethod <span>&#34;http://localhost:8080/api/hotsauces/10&#34;</span> <span><span>`</span><span>
    -Method PUT </span><span>`</span></span>
    <span>-</span>ContentType <span>&#34;application/json&#34;</span> <span><span>`</span><span>
    -Headers $headers </span><span>`</span></span>
    <span>-</span>Body $body
$response <span>|</span> ConvertTo<span>-</span>Json</code></pre><p>Note that since you didn’t change the <code>url</code> property of the sauce, it remains the same.</p><h4 id="Deleting-a-hot-sauce-using-the-secured-API">Deleting a hot sauce using the secured API</h4><p>Then try deleting the hot sauce with <code>id</code> 10.</p><p>🌶 <strong>If you’re on macOS or Linux,</strong> enter this command into the terminal:</p><pre><code><span>curl</span> -i --request DELETE <span>\</span>
    --ur l http://localhost:8080/api/hotsauces/10
    -H <span>&#34;authorization: Bearer {Access Token}&#34;</span></code></pre><p>🌶 <strong>If you’re on Windows,</strong> enter this command into PowerShell:</p><pre><code>Invoke-RestMethod <span>&#34;http://localhost:8080/api/hotsauces/10&#34;</span> <span><span>`</span>
    -Method DELETE <span>`</span></span>
    -Headers <span>$headers</span></code></pre><p>List the hot sauces or get a count to confirm that the sauce is no longer in the list.</p><p>If you’ve made it this far, congratulations! You’ve just developed and secured an API with Spring Boot, Kotlin, and Auth0!</p></div></div>]]></content:encoded>
      <author>A closer look at the authorizations you just defined</author>
      <pubDate>Wed, 11 Aug 2021 22:32:00 +0000</pubDate>
    </item>
    <item>
      <title>Strategy Design Pattern in Python</title>
      <link>https://auth0.com/blog/strategy-design-pattern-in-python/</link>
      <description>Learn strategy design pattern to write better code in Python</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>While you are developing software applications, you might run into some problems implementing the feature you need. Software design patterns are typical solutions for some of these commonly occurring problems while developing software applications using Object-oriented design. In this article, let&#39;s learn about one of the popular design patterns, <strong>Strategy</strong> pattern, and its implementation in Python.</p><h2 id="Introduction">Introduction</h2><p>Before diving into the strategy pattern, you should be familiar with some of the basics concepts of <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank" rel="noreferrer noopener">Object-Oriented Programming</a> (OOP). The entire concept of design patterns revolves around <em>classes</em> and <em>objects</em>. The design patterns are more high-level solutions for commonly occurring problems. They are like the blueprint to solve a specific problem. They are not confined to a single programming language. You can use design patterns in any programming language that supports object-oriented programming; the process will be the same while the syntax changes.
<img src="https://images.ctfassets.net/23aumh6u8s0i/4tPzU9nvm5jUwrXAeeHH3e/1badc171178aa953f7df05f08960f228/01_design-types.jpg" alt="design patterns"/>
There are several types of design patterns, including <strong>Creational</strong>, <strong>Structural</strong>, and <strong>Behavioral</strong> patterns. Creational patterns are about different ways to create objects that increase the flexibility of our code. Structural patterns are about relations between the objects, making larger structures flexible using objects and classes. Behavioral patterns are about effective communications and interactions between objects.</p><h2 id="Strategy">Strategy</h2><p><strong>Strategy Pattern</strong> is a design pattern that enables our application to select algorithms at runtime, making our application flexible. The original book on <a href="https://en.wikipedia.org/wiki/Design_Patterns" target="_blank" rel="noreferrer noopener">design patterns</a> written by <a href="http://wiki.c2.com/?GangOfFour" target="_blank" rel="noreferrer noopener">GoF</a> states that &#34;Strategy pattern intends to define a family of algorithms, <a href="https://auth0.com/blog/strategy-design-pattern-in-python/shorturl.at/rHJR7" target="_blank" rel="noreferrer noopener">encapsulates</a> each one, and
make them interchangeable.&#34; More specifically, it lets you define a set of algorithms that are interchangeable according to some factors at runtime. Strategy Pattern falls under the category of behavioral design patterns as it enables an algorithm&#39;s behavior to be selected at runtime.</p><h2 id="Usage">Usage</h2><p>While developing software applications, you may have a few alternatives to accomplish something in your code. Depending on your client choices, data sources, or other factors, you want to do something different without changing the code. You often tend to define algorithms using conditional statements for different situations in the main class of the code. But it is not an elegant way of writing better code. It makes the main class of your code quite long, and it becomes too hard to maintain the application.</p><p>In situations like these, the strategy pattern is an ideal solution. The strategy pattern suggests you define classes, called <em>strategies</em>, for your algorithms of different situations. The strategy is referenced inside the main class, called <em>context</em>, and the code works according to that situation. The context does not select an appropriate strategy for the case. Instead, the client passes the desired strategy to the context.</p><p>For example, if you have a chess application, you can select the difficulty level between easy, medium, or hard. The computer chooses an algorithm according to the level you choose. It is one of the best examples where the strategy pattern is used.</p><p>Strategy pattern follows the <a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle" target="_blank" rel="noreferrer noopener">Open/close principle</a>; a software application is open for extension but closed for modification. It means you can add any number of additional strategies without modifying the main class. It makes your code more flexible and easy to maintain.</p><h2 id="UML-Diagrams">UML Diagrams</h2><p>The following is the UML diagram of the Strategy pattern.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/21fvYspoS3Voqv7pKyDE4E/e89c3e5f81d51b3d15a436cd81e795f7/02_UML-Strategy.jpg" alt="UML Strategy"/></p><ol start="1"><li><strong>Context</strong> — It is the primary class of our application. It maintains a reference to one of the concrete strategies.</li><li><strong>Strategy</strong> — Strategy interface is common to all supported strategies. Context can communicate with other strategies only through the strategy interface.</li><li><strong>ConcreteStrategies</strong> — These are the classes that implement the algorithm using the Strategy interface.</li></ol><h2 id="Implementation">Implementation</h2><p>Let&#39;s see the step-by-step process of implementing a strategy pattern.</p><ol start="1"><li>You should first identify algorithms you want to execute as concrete strategies in the primary class.</li><li>Define the <em>context</em> (primary class) and add a reference to the strategy, a method to set the strategy, and another method to execute the strategy. You may also define a default strategy to switch between strategies only if they do not like the default one.</li></ol><pre><code><span>## context - the primary class</span>
<span>class</span> <span>Context</span><span>:</span>
    strategy<span>:</span> Strategy  <span>## the strategy interface</span>

    <span>def</span> <span>setStrategy</span><span>(</span>self<span>,</span> strategy<span>:</span> Strategy <span>=</span> <span>None</span><span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>if</span> strategy <span>is</span> <span>not</span> <span>None</span><span>:</span>
            self<span>.</span>strategy <span>=</span> strategy
        <span>else</span><span>:</span>
            self<span>.</span>strategy <span>=</span> Default<span>(</span><span>)</span>

    <span>def</span> <span>executeStrategy</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>print</span><span>(</span>self<span>.</span>strategy<span>.</span>execute<span>(</span><span>)</span><span>)</span></code></pre><p>First, we define the <code>strategy</code> field for storing a reference to a strategy object, and two methods, <code>setStrategy</code> and <code>executeStrategy</code>. The <code>setStrategy</code> sets the strategy selected if a user selects an option, or else the <code><span>default</span></code> one.</p><ol start="3"><li>Define the <em>Strategy Interface</em>, which is common to all the concrete strategies. The <code>Strategy</code> interface has an abstract method that you can alter in concrete strategies.</li></ol><pre><code><span>from</span> abc <span>import</span> ABC<span>,</span> abstractmethod

<span>## Strategy interface</span>
<span>class</span> <span>Strategy</span><span>(</span>ABC<span>)</span><span>:</span>
    <span>@abstractmethod</span>
    <span>def</span> <span>execute</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>pass</span></code></pre><ol start="4"><li>Define the concrete strategies which should implement the <code>Strategy</code> interface. These concrete strategies must have a common method that overrides the <code>execute</code> method of the <code>Strategy</code> interface.</li></ol><pre><code><span>## Concrete strategies</span>
<span>class</span> <span>ConcreteStrategyA</span><span>(</span>Strategy<span>)</span><span>:</span>
    <span>def</span> <span>execute</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>return</span> <span>&#34;ConcreteStrategy A&#34;</span>

<span>class</span> <span>ConcreteStrategyB</span><span>(</span>Strategy<span>)</span><span>:</span>
    <span>def</span> <span>execute</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>return</span> <span>&#34;ConcreteStrategy B&#34;</span>

<span>class</span> <span>Default</span><span>(</span>Strategy<span>)</span><span>:</span>
    <span>def</span> <span>execute</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>return</span> <span>&#34;Default&#34;</span></code></pre><ol start="5"><li>Now, users can select the strategy they want at the runtime. Create an object of <em>context</em> and pass a concrete strategy.</li></ol><pre><code><span>## Example application</span>
appA <span>=</span> Context<span>(</span><span>)</span>
appB <span>=</span> Context<span>(</span><span>)</span>
appC <span>=</span> Context<span>(</span><span>)</span>

<span>## selecting stratigies</span>
appA<span>.</span>setStrategy<span>(</span>ConcreteStrategyA<span>(</span><span>)</span><span>)</span>
appB<span>.</span>setStrategy<span>(</span>ConcreteStrategyB<span>(</span><span>)</span><span>)</span>
appC<span>.</span>setStrategy<span>(</span><span>)</span>    <span>## sets to default strategy</span>

<span>## each object below execute different strategy with same method</span>
appA<span>.</span>executeStrategy<span>(</span><span>)</span>
appB<span>.</span>executeStrategy<span>(</span><span>)</span>
appC<span>.</span>executeStrategy<span>(</span><span>)</span></code></pre><p>The output of the above code will be as follow:</p><pre><code>ConcreteStrategy <span>A</span>
ConcreteStrategy <span>B</span>
Default</code></pre><p>If you want to use another strategy, replace the ConcreteStrategy instance with the strategy you want. You can add a new concrete strategy without changing anything in the context.</p><h2 id="Example">Example</h2><p>Let&#39;s design a <a href="https://en.wikipedia.org/wiki/Rock_paper_scissors" target="_blank" rel="noreferrer noopener">rock paper scissors</a> game using strategy pattern. You can select any strategy among rock, paper, scissors, and random to play against the computer. The below example code uses the strategy pattern to implement various strategies.</p><pre><code><span>## Changing the strategy among Rock, Paper, Scissors, and Random</span>

<span>import</span> random
<span>from</span> abc <span>import</span> ABC<span>,</span> abstractmethod

<span>## Strategy interface </span>
<span>class</span> <span>Strategy</span><span>(</span>ABC<span>)</span><span>:</span>
    <span>@abstractmethod</span>
    <span>def</span> <span>selection</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>pass</span>

<span>## Concrete strategies</span>
<span>class</span> <span>Rock</span><span>(</span>Strategy<span>)</span><span>:</span>
    <span>## actual application will have the algorithm instead this method</span>
    <span>def</span> <span>selection</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>return</span> <span>&#34;Rock&#34;</span>

<span>class</span> <span>Paper</span><span>(</span>Strategy<span>)</span><span>:</span>
    <span>def</span> <span>selection</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>return</span> <span>&#34;Paper&#34;</span>

<span>class</span> <span>Scissors</span><span>(</span>Strategy<span>)</span><span>:</span>
    <span>def</span> <span>selection</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>return</span> <span>&#34;Scissors&#34;</span>

<span>class</span> <span>Random</span><span>(</span>Strategy<span>)</span><span>:</span>
    <span>def</span> <span>selection</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        options <span>=</span> <span>[</span><span>&#34;Rock&#34;</span><span>,</span> <span>&#34;Paper&#34;</span><span>,</span> <span>&#34;Scissors&#34;</span><span>]</span>
        <span>return</span> random<span>.</span>choice<span>(</span>options<span>)</span>

<span>## Context class</span>
<span>class</span> <span>Game</span><span>:</span>
    strategy<span>:</span> Strategy

    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> strategy<span>:</span> Strategy <span>=</span> <span>None</span><span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>if</span> strategy <span>is</span> <span>not</span> <span>None</span><span>:</span>
            self<span>.</span>strategy <span>=</span> strategy
        <span>else</span><span>:</span>
            self<span>.</span>strategy <span>=</span> Random<span>(</span><span>)</span>

    <span>def</span> <span>play</span><span>(</span>self<span>,</span> sec<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        s1 <span>=</span> self<span>.</span>strategy<span>.</span>selection<span>(</span><span>)</span>
        s2 <span>=</span> sec<span>.</span>strategy<span>.</span>selection<span>(</span><span>)</span>
        <span>if</span> s1 <span>==</span> s2<span>:</span>
            <span>print</span><span>(</span><span>&#34;It&#39;s a tie&#34;</span><span>)</span>
        <span>elif</span> s1 <span>==</span> <span>&#34;Rock&#34;</span><span>:</span>
            <span>if</span> s2 <span>==</span> <span>&#34;Scissors&#34;</span><span>:</span>
                <span>print</span><span>(</span><span>&#34;Player 1 wins!&#34;</span><span>)</span>
            <span>else</span><span>:</span>
                <span>print</span><span>(</span><span>&#34;Player 2 wins!&#34;</span><span>)</span>
        <span>elif</span> s1 <span>==</span> <span>&#34;Scissors&#34;</span><span>:</span>
            <span>if</span> s2 <span>==</span> <span>&#34;Paper&#34;</span><span>:</span>
                <span>print</span><span>(</span><span>&#34;Player 1 wins!&#34;</span><span>)</span>
            <span>else</span><span>:</span>
                <span>print</span><span>(</span><span>&#34;Player 2 wins!&#34;</span><span>)</span>
        <span>elif</span> s1 <span>==</span> <span>&#34;Paper&#34;</span><span>:</span>
            <span>if</span> s2 <span>==</span> <span>&#34;Rock&#34;</span><span>:</span>
                <span>print</span><span>(</span><span>&#34;Player 1 wins!&#34;</span><span>)</span>
            <span>else</span><span>:</span>
                <span>print</span><span>(</span><span>&#34;Player 2 wins!&#34;</span><span>)</span>

<span>## Example application</span>
<span>## PLayer 1 can select his strategy</span>
player1 <span>=</span> Game<span>(</span>Paper<span>(</span><span>)</span><span>)</span>

<span># Player 2 gets to select</span>
player2 <span>=</span> Game<span>(</span>Rock<span>(</span><span>)</span><span>)</span>

<span># After the second player choice, we call the play method</span>
player1<span>.</span>play<span>(</span>player2<span>)</span></code></pre><p>According to the strategies chosen by the two players, the expected output would be:</p><pre><code>Player <span>1</span> wins<span>!</span></code></pre><p>Test all the other cases of the game using all the other strategies. To add extra fun to the game, try creating two more strategies to the above example according to <a href="https://bigbangtheory.fandom.com/wiki/Rock,_Paper,_Scissors,_Lizard,_Spock" target="_blank" rel="noreferrer noopener">the Lizard-Spock expansion</a>.</p><h2 id="Conclusion">Conclusion</h2><p>In this article, you have seen where and how to use the strategy pattern in your code. You can build flexible and maintainable software applications using the strategy pattern. You can switch between algorithms at runtime according to the user&#39;s decision without changing the code. But if your code only has a couple of algorithms, there is no need to use strategy. It just makes your code look complex with numerous classes and objects. The Strategy pattern can work as an alternative for conditional statements for selecting the behavior of the application. But the potential drawback of strategy pattern is that the users must know how strategies differ from each other to select what they need. So it would be best if you use the strategy pattern only when the variation in behavior of the application is relevant to the users. So try to make your software applications flexible using the strategy pattern.</p></div></div>]]></content:encoded>
      <pubDate>Tue, 10 Aug 2021 14:58:00 +0000</pubDate>
    </item>
    <item>
      <title>Developer Day Helps Developers Build the Future of Identity</title>
      <link>https://auth0.com/blog/developerday-helps-developers-build-the-future-of-identity/</link>
      <description>What is Developer Day? Developer Advocate, Ben Dechrai, explores the lineup and shares his thoughts from a delegate&#39;s perspective.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>You’ve probably heard by now that <a href="https://auth0.com/blog/developers-explore-okta-auth0/" target="_blank" rel="noreferrer noopener">Okta and Auth0 have joined forces</a>. As a developer advocate for Auth0, I’m really excited to see how we can combine our forces to make identity even better for the developer community.</p><p>You might not be aware that I’m a huge fan of creating events that directly address the needs of developer communities. From the first conference I ran in 2004 to the user group meetings that are still going to this day, you can imagine my excitement when I heard we (Auth0 and Okta) were going to run an online event together!</p><p>This time, members of my team are taking the lead, so I&#39;ll be in the same boat as many of you experiencing Developer Day as it happens, so I thought it might be helpful to share my thoughts on the event and what I’m looking forward to the most.</p><p>Hit up the <a href="http://community.auth0.com/" target="_blank" rel="noreferrer noopener">community forum</a> if I miss something that’s important to you — there’s so much for everyone, I’m sure you’ll help others out too.</p><h2 id="What-Is-Developer-Day-">What Is Developer Day?</h2><p><a href="https://www.okta.com/developerday/" target="_blank" rel="noreferrer noopener">Developer Day</a> creates a space for all developers to discover how the identity space is evolving, learn best practices in privacy and security, and gain insights from developer experiences. It brings speakers from across these sectors right to your desktop, and best of all — it’s free!</p><blockquote><p>Speaking of free, did you know you can also <a href="https://auth0.com/signup" data-amp-replace="CLIENT_ID" data-amp-addparams="anonId=CLIENT_ID(cid-scope-cookie-fallback-name)" target="_blank" rel="noreferrer noopener">sign up for a free Auth0 account</a> at any time? Why not try it out today?</p></blockquote><p><img src="https://images.ctfassets.net/23aumh6u8s0i/12g1Ga4gP8X04Xn0H0nnFt/5b4ae4b06847a028d9a784a46ec48b26/cassidy-alyssa-kapehe.png" alt="Developer Day speakers Cassidy Williams, Alyssa Miller, and Kapehe"/></p><p>More specifically, it’s a one-day, single-track, virtual event, and while I’m proud to see some of my colleagues’ names in the speaker list, the lineup also features the likes of <strong>Cassidy Williams</strong> (Director of Developer Experience at Netlify), <strong>Alyssa Miller</strong> (Hacker, Researcher, and Security Advocate), and <strong>Kapehe</strong> (Developer Relations at Sanity.io, and yes, you might remember she used to <a href="https://auth0.com/blog/authors/kapehe-jorgenson/" target="_blank" rel="noreferrer noopener">work at Auth0</a> too).</p><h2 id="What-Can-I-Learn-">What Can I Learn?</h2><p>The first place I tend to go when looking at an event is the agenda, and skimming over this one, we’re in for a breadth and depth of information.</p><p>The keynote is where the day’s journey starts, and Alyssa’s <strong>updates from the world of cyber security</strong> are sure to offer a great insight that sets the foundation for the day. I’m a huge advocate for helping all developers understand security principles and states of play. Even if you never have to deal with part of it yourself, you’ll always benefit from knowing why something is done and how you’re being protected.</p><h2 id="From-APIs-to-IoT--Live-Demos-and-Security-Fundamentals">From APIs to IoT: Live Demos and Security Fundamentals</h2><p>From there, we meander down a path from securing Python APIs to securing your Home Automation and IoT devices. Personally, I’m a sucker for anything IoT-related, so I’ll be paying attention to this one.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/hd4kE3aQJFlX45nvwu3xF/6496580a2a7c7da50a6591f781035097/aaron-vittorio.png" alt="Developer Day speakers Aaron Parecki and Vittorio Bertocci"/></p><p>Having grown up on YouTube videos (okay, I’m not that young...) about identity from both Aaron Parecki (or as I like to call him, Mr OAuth, but don’t tell him I told you) and Vittorio Bertocci (the man whose identity knowledge is dwarfed only by his magnificent hair), what better than a talk from both of them? The talk will not only cover where we’ve come from, but what the future of OAuth has in store for us.</p><h2 id="Advanced-Topics-like-Verifiable-Credentials-and-Integration-with-Third-Parties">Advanced Topics like Verifiable Credentials and Integration with Third Parties</h2><p>But identity isn’t just about logging in and loading your glamour shot from Gravatar. I just recently learned about verifiable credentials, and wow - it’s such a powerful concept with so many use cases, I just can’t even! The topic deserves its own article, but one example is around payments, and Uchi Uchibeke’s talk is going to be fascinating, to be sure.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/71FxWB7JqseFrDM9mF63Go/bd98bfcda1f9662b1c7de0bfab486599/uchi.png" alt="Developer Day speaker Uchi Uchibeke"/></p><p>Uchi is flanked by demos on integrating Auth0 with NextJS for securing your webapps and Okta with Kong for securing continuous integration, delivery, and deployment. I think this highlights that the team who worked on the agenda really put a lot of thought into the balance between talks that can have immediate benefit to us developers, as well as enough advanced topics to keep our creative juices flowing.</p><p>Talking of immediately applicable information, if you want to learn how to validate REST API authentication and authorization, the JFrog talk is for you.</p><h2 id="Authentication-in-Gaming-and-Extended-Realities">Authentication in Gaming and Extended Realities</h2><p>If you thought the IoT talk was a bit out of the box, the Gaming and XR talk might just be in a whole other room! Not literally. I mean — it’s a virtual event. There aren’t any rooms. There aren’t any boxes either, for that matter. I digress.</p><p>I won’t admit to being a huge gamer. I load up Poly Bridge 2 every now and then. Does Minesweeper count? One thing I do know, though, is that the authentication experience in games can be awful, and when you get into any extended reality (XR), well. Let’s not go there.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2REEADn8ARvYmok2WNAt5O/9185928ac397dced701f3cb2d252e4b9/nick.png" alt="Developer Day speaker Nick Gamb"/></p><p>We’ll let Okta&#39;s Nick Gamb go there instead, as he tells us about the propensity for this industry to be targeted by hackers. Follow his advice, and maybe we can all keep playing in the knowledge that our Minedimes are safe. (See — I told you I’m not a huge gamer.)</p><h2 id="Adding-Pixie-Dust-to-Enhance-Security">Adding Pixie Dust to Enhance Security</h2><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2tBAGZHtBlb4Dt1P21WzAS/2cd4c6438265b64c39bb39b89e6945b9/milecia.png" alt="Developer Day speaker Milecia McGregor"/></p><p>With two talks left for the day, I’m personally keen to catch Milecia McGregor from Mediavine talk about pixies! Stop it, autocorrect. PKCE! While most SDKs magically hide away much of the implementation, it’s still worth understanding how authentication flows work and how they can be improved. The most common OAuth flow is debatably the Authcode flow, but PKCE makes it even better! Come along to find out how. I’ll be at the front taking notes.</p><h2 id="Closing-Keynote">Closing Keynote</h2><p>It’s a packed event — thank goodness there are a couple of breaks during the day — and we finish with a closing keynote from Cassidy Williams. The agenda teases us with the mere existence of this session, and perhaps we’ll find out more before the event. In any case, I’ll not be missing it.</p><p>Tell us in the <a href="http://community.auth0.com/" target="_blank" rel="noreferrer noopener">community forum</a> what you’re looking forward to the most, and I hope to see some of you in the chat room on the day!</p></div></div>]]></content:encoded>
      <pubDate>Mon, 09 Aug 2021 16:30:00 +0000</pubDate>
    </item>
    <item>
      <title>Here’s Something New for You: Identity OS</title>
      <link>https://auth0.com/blog/here-s-something-new-for-you-identity-os/</link>
      <description>Introducing the new way to think about and build identity</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>Authentication has become so much more than just a login box.</p><p>Sure, that’s still what consumers see when they are eagerly clicking towards whatever pizza, handbag, or Playstation pre-sale link they want to get to ASAP.</p><p>But it’s the expectation around what is happening when they click that has increased. Consumers demand the convenience of a seamless login but also want to know that their card details are secure and that their identity is protected against any breaches of privacy.</p><p>In the past, it was about trade-offs. But consumers don’t expect trade-offs, so that’s why we wanted to develop an identity operating system that lets everyone —  from IT teams to devs — build authentication that works now and with whatever the future throws at it.</p><p>Okay, So That’s Why We Need a New Way, but...</p><h2 id="What-Is-an-Identity-OS-">What Is an Identity OS?</h2><p>The Auth0 identity operating system (identity OS) is a cloud-native, adaptable platform for development teams. Built with extensible building blocks, the Auth0 identity OS enables organizations to manage the complexities of today’s identity management while also prioritizing the security, privacy, and convenience of their end-users. </p><p>Striking the perfect balance among these priorities requires identity to integrate a myriad of different services and creates a significant integration hurdle. Identity ecosystem operators can now manage these complex integration needs with the flexibility of full-spectrum code (pro-code, low-code, and no code solutions). </p><p>Customizing to the requirements of different development teams removes their need to focus on identity infrastructure when building differentiated applications. This level of adaptability is a huge benefit for enterprises that are confronted with converging use cases and managing the eroding lines between identity for employees, business partners, and consumers.</p><p>Sounds good, but...</p><h2 id="What-s-the-Three-Benefits-I-Should-Really-Care-About-">What’s the Three Benefits I Should Really Care About?</h2><h3 id="1--It-s-all-about-adaptability">1. It’s all about adaptability</h3><p>If anyone reading this has never had to change their product roadmap quickly, then you are one of the lucky ones. With the explosion of consumer-friendly services made possible through digital applications, consumer expectations are constantly changing. That beautiful Netflix UX is what they expect from everything (even public sector services these days are stepping their game up). So the Auth0 identity OS is built to be as adaptable as your business needs to be, without forcing you into clunky legacy features that you will take years to strip out.</p><h3 id="2--We-re-living-in-a-modular-world">2. We’re living in a modular world</h3><p>The best technology is the most open. There are so many amazing integrations and APIs being made by devs, so the Auth0 identity OS provides modular identity building blocks with integrations and industry blueprints.</p><h3 id="3--Breadth-rather-than-tiny-boxes">3. Breadth rather than tiny boxes</h3><p>Identity is converging, and the lines between “use cases” are collapsing. When we talk about use cases, we mean allowing employees secure access to files and apps through Single Sign On (SSO); or allowing a subscriber of a media service access via their social accounts.</p><blockquote><p>The Auth0 identity OS provides support for the full breadth of identity needs. </p></blockquote><p>Traditionally the identity industry has created single-purpose products for Workforce Identity, Business Identity, and Consumer Identity. But the company needs rarely fit into simple, separated boxes. The lines between identity use cases are eroding because rarely does a company only require one type. </p><h2 id="Anything-Else-I-Should-Know-">Anything Else I Should Know?</h2><p>If you’ve made it this far, then you seem like the kind of person who would appreciate some of the more technical, finer points.</p><p>Here’s what the Auth0 identity OS offers:</p><ul><li><strong>A customizable cut-of-the-box login experience</strong> — Universal Login is our first huge benefit to developers. It’s an embeddable client experience that requires zero custom code to set up while allowing developers to quickly add capabilities to it, including social login and multi-factor authentication (MFA), without making any changes to your app’s code.</li><li><strong>User management built-in</strong> — Auth0 gives you a secure and intuitive way of managing your user identities, including password resets, creating, blocking, and deleting users via the Users Dashboard or via the Auth0 API.</li><li><strong>Control &amp; customization</strong> — Extend with code: All applications and scenarios are different. Auth0’s Actions extend the functionality of Auth0’s base product to adapt it to your company needs and integrate it with other applications and services.</li><li><strong>Calling APIs and external resources</strong> — Once your user authenticates, Auth0 will generate an ID Token and an Access Token that will be passed back to your application. The Access Token can then be used to call your API and/or any external resource.</li></ul><h2 id="And-That-s-It--Now-It-s-up-to-You-to-Build-Something-Awesome">And That’s It, Now It’s up to You to Build Something Awesome</h2><p>The Auth0 identity OS is here to give you the tools to build more convenient, secure, and private authentication experiences for your customers and employees. </p><p>Read more at <a href="https://auth0.com/identity-os" target="_blank" rel="noreferrer noopener">https://auth0.com/identity-os</a> </p><p>Or get in touch today to let us know what you think.</p></div></div>]]></content:encoded>
      <pubDate>Mon, 09 Aug 2021 14:54:00 +0000</pubDate>
    </item>
    <item>
      <title>Deployment Strategies In Kubernetes</title>
      <link>https://auth0.com/blog/deployment-strategies-in-kubernetes/</link>
      <description>Learn what are the different deployment strategies available in Kubernetes and how to use them.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><strong>TL;DR:</strong> In this article, we will learn what are the deployment strategies while deploying containers using Kubernetes container-orchestration system. At the end of this article, we will have learned how to do deployment using different ways in Kubernetes cluster. If you find this topic interesting, keep reading! 
The code for this tutorial is available here on <a href="https://github.com/akhil90s/auth0/tree/main/Deployment%20Strategies%20In%20Kubernetes/Declarative%20Templates" target="_blank" rel="noreferrer noopener">Github</a></p><h2 id="Quick-Introduction-to-Kubernetes">Quick Introduction to Kubernetes</h2><p>With containerization gaining popularity over time and revolutionizing the process of building, shipping, and maintaining applications, there was a need to effectively manage these containers. Many container orchestration tools were introduced to manage the lifecycle of these containers in large-scale systems.</p><p>Kubernetes is one such orchestration tool that takes care of provisioning and deployment, allocation of resources, load balancing, service discovery, providing high availability, and other important aspects of any system. With this platform, we can decompose our applications into smaller systems (called microservices) while developing; then, we can compose (or orchestrate) these systems together while deploying. </p><p>The adoption of cloud-native approach has increased development of applications based on microservice architecture. For such applications, one of the biggest challenges organizations face is deployment. Having a proper strategy in terms of deployment is necessary. In Kubernetes, there are different ways to release an application; it is necessary to choose the right strategy to make your infrastructure reliable during an application deployment or update. For instance, in a production environment, it is always required to ensure that end-user shouldn&#39;t experience any downtime. In Kubernetes orchestration, right strategy ensures proper management of different versions of container images. To sum up, this article will mainly be around the different deployment strategies in Kubernetes.</p><h2 id="Prerequisites">Prerequisites</h2><p>To follow along with this article, we will need some previous experience with Kubernetes. If new to this platform, kindly check out the <a href="https://auth0.com/blog/kubernetes-tutorial-step-by-step-introduction-to-basic-concepts/" target="_blank" rel="noreferrer noopener">Step by Step Introduction to Basic Kubernetes Concepts</a> tutorial. There, you can learn everything you need to follow the instructions here. We would also recommend going through the <a href="https://kubernetes.io/docs/home/" target="_blank" rel="noreferrer noopener">Kubernetes documentation</a> if and when required.</p><p>Besides that, we will need kubectl, a Command-Line Interface (CLI) tool that will enable us to control your cluster from a terminal. If you don&#39;t have this tool, check the instructions on the <a href="https://auth0.com/blog/kubernetes-tutorial-step-by-step-introduction-to-basic-concepts/#Installing.Kube.Control..kubectl." target="_blank" rel="noreferrer noopener">Installing Kube Control (kubectl)</a>.We will also need a basic understanding of Linux and YAML.</p><h2 id="What-Is-A-Deployment-In-Kubernetes-">What Is A Deployment In Kubernetes?</h2><p>A Deployment is a resource object in Kubernetes that defines the desired state for our program. Deployments are declarative, meaning that we don&#39;t dictate how to achieve the state. Instead, we declare the desired state and allow the Deployment-controller to automatically reach that end goal in the most efficient way. A deployment allows us to describe an application&#39;s life cycle, such as which images to use for the app, the number of pods there should be, and the way in which they should be updated.</p><h2 id="Benefits-Of-Using-Kubernetes-Deployment">Benefits Of Using Kubernetes Deployment</h2><p>The process of manually updating containerized applications can be time consuming and tedious. A Kubernetes deployment makes this process automated and repeatable. Deployments are entirely managed by the Kubernetes backend, and the whole update process is performed on the server side without client interaction.</p><p>Moreover, the Kubernetes deployment controller is always monitoring the health of pods and nodes. It replaces a failed pod or bypass down nodes, ensuring continuity of critical applications.</p><h2 id="Deployment-Strategies">Deployment Strategies</h2><h3 id="Rolling-Update-Deployment">Rolling Update Deployment</h3><p>The rolling deployment is the default deployment strategy in Kubernetes. It replaces pods, one by one, of the previous version of our application with pods of the new version without any cluster downtime. A rolling deployment slowly replaces instances of the previous version of an application with instances of the new version of the application.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/LxDl5amQZC2znii0JLZuw/87f42c35b5ba35ac1550f572d23ba943/01_rolling-deployment.jpg" alt="Alt text"/></p><p>When using the RollingUpdate strategy, there are two more options that let us fine-tune the update process:</p><ol start="1"><li><p><strong>maxSurge</strong>: 
The number of pods that can be created above the desired amount of pods during an update. This can be an absolute number or percentage of the replicas count. The default is 25%.</p></li><li><p><strong>maxUnavailable</strong>: 
The number of pods that can be unavailable during the update process. This can be an absolute number or a percentage of the replicas count; the default is 25%.</p></li></ol><p>First, we create our <em>rollingupdate.yaml</em> deployment template. In the template below, we set <em>maxSurge</em> to 2 and <em>maxUnavailable</em> to 1.</p><pre><code><span>apiVersion</span><span>:</span> apps/v1
<span>kind</span><span>:</span> Deployment
<span>metadata</span><span>:</span>
  <span>name</span><span>:</span> rollingupdate<span>-</span>strategy
  <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
<span>spec</span><span>:</span>
  <span>strategy</span><span>:</span>
    <span>type</span><span>:</span> RollingUpdate
    <span>rollingUpdate</span><span>:</span>
      <span>maxSurge</span><span>:</span> <span>2</span>
      <span>maxUnavailable</span><span>:</span> <span>1</span>
  <span>selector</span><span>:</span>
    <span>matchLabels</span><span>:</span>
      <span>app</span><span>:</span> web<span>-</span>app<span>-</span>rollingupdate<span>-</span>strategy
      <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
  <span>replicas</span><span>:</span> <span>3</span>
  <span>template</span><span>:</span>
    <span>metadata</span><span>:</span>
      <span>labels</span><span>:</span>
        <span>app</span><span>:</span> web<span>-</span>app<span>-</span>rollingupdate<span>-</span>strategy
        <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
    <span>spec</span><span>:</span>
      <span>containers</span><span>:</span>
        <span>-</span> <span>name</span><span>:</span> web<span>-</span>app<span>-</span>rollingupdate<span>-</span>strategy
          <span>image</span><span>:</span> hello<span>-</span>world<span>:</span>nanoserver<span>-</span><span>1709</span></code></pre><p>We can then create the deployment using the kubectl command.</p><pre><code>$ kubectl apply <span>-</span>f rollingupdate<span>.</span>yaml</code></pre><p>Once we have a deployment template, we can provide a way to access the instances of the deployment by creating a Service. Note that we are deploying the image <em>hello-world</em> with version <em>nanoserver-1709</em>. So in this case we have two labels, &#39;name= <em>web-app-rollingupdate-strategy</em>&#39; and &#39;version=<em>nanoserver-1709</em>&#39;. We will set these as the label selector for the service below. Save this to &#39;<em>service.yaml</em>&#39; file.</p><pre><code><span>apiVersion</span><span>:</span> v1
<span>kind</span><span>:</span> Service
<span>metadata</span><span>:</span> 
  <span>name</span><span>:</span> web<span>-</span>app<span>-</span>rollingupdate<span>-</span>strategy
  <span>labels</span><span>:</span> 
    <span>name</span><span>:</span> web<span>-</span>app<span>-</span>rollingupdate<span>-</span>strategy
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
<span>spec</span><span>:</span>
  <span>ports</span><span>:</span>
    <span>-</span> <span>name</span><span>:</span> http
      <span>port</span><span>:</span> <span>80</span>
      <span>targetPort</span><span>:</span> <span>80</span>
  <span>selector</span><span>:</span> 
    <span>name</span><span>:</span> web<span>-</span>app<span>-</span>rollingupdate<span>-</span>strategy
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
  <span>type</span><span>:</span> LoadBalancer</code></pre><p>Now creating the service will create a load balancer that is accessible outside the cluster.</p><pre><code>$ kubectl apply <span>-</span>f service<span>.</span>yaml</code></pre><p>Run <em>kubectl get deployments</em> to check if the Deployment is created. If the Deployment is still being created, the output should be similar to the following:</p><pre><code>$ kubectl <span>get</span> deployments

<span>NAME</span>                             <span>READY</span>   <span>UP</span><span>-</span><span>TO</span><span>-</span><span>DATE</span>   <span>AVAILABLE</span>   <span>AGE</span>
rollingupdate<span>-</span>strategy   <span>0</span><span>/</span><span>3</span>     <span>0</span>            <span>0</span>           <span>1</span>s</code></pre><p>If we run the <em>kubectl get deployments</em> again a few seconds later. The output should be similar to this:</p><pre><code>$ kubectl <span>get</span> deployments

<span>NAME</span>                             <span>READY</span>   <span>UP</span><span>-</span><span>TO</span><span>-</span><span>DATE</span>   <span>AVAILABLE</span>   <span>AGE</span>
rollingupdate<span>-</span>strategy   <span>3</span><span>/</span><span>3</span>     <span>0</span>            <span>0</span>           <span>7</span>s</code></pre><p>To see the ReplicaSet (rs) created by the Deployment, run <em>kubectl get rs</em>. The output should be similar to this:</p><pre><code>$ kubectl <span>get</span> rs

<span>NAME</span>                                    <span>DESIRED</span>   <span>CURRENT</span>   <span>READY</span>   <span>AGE</span>
rollingupdate<span>-</span>strategy<span>-</span><span>87875</span>f5897   <span>3</span>         <span>3</span>         <span>3</span>       <span>18</span>s</code></pre><p>To see the 3 pods running for deployment, run <em>kubectl get pods</em>. The created ReplicaSet ensures that there are three Pods running. The output should be similar to the below.</p><pre><code>$ kubectl <span>get</span> pods

<span>NAME</span>                                      <span>READY</span>     <span>STATUS</span>    <span>RESTARTS</span>   <span>AGE</span>       
rollingupdate<span>-</span>strategy<span>-</span><span>87875</span>f5897<span>-</span><span>55</span>i7o   <span>1</span><span>/</span><span>1</span>       Running   <span>0</span>          <span>12</span>s       
rollingupdate<span>-</span>strategy<span>-</span><span>87875</span>f5897<span>-</span>abszs   <span>1</span><span>/</span><span>1</span>       Running   <span>0</span>          <span>12</span>s       
rollingupdate<span>-</span>strategy<span>-</span><span>87875</span>f5897<span>-</span>qazrt   <span>1</span><span>/</span><span>1</span>       Running   <span>0</span>          <span>12</span>s</code></pre><p>Let&#39;s update the <em>rollingupdate.yaml</em> deployment template to use the <em>hello-world:nanoserver-1809</em> image instead of the <em>hello-world:nanoserver-1709</em> image. Then update the image of the existing running deployment using the kubectl command.</p><pre><code>$ kubectl <span>set</span> image deployment<span>/</span>rollingupdate<span>-</span>strategy web<span>-</span>app<span>-</span>rollingupdate<span>-</span>strategy<span>=</span>hello<span>-</span>world<span>:</span>nanoserver<span>-</span><span>1809</span> <span>--</span>record</code></pre><p>The output is similar to the below.</p><pre><code>deployment<span>.</span>apps<span>/</span>rollingupdate<span>-</span>strategy image updated</code></pre><p>We are now deploying the image <em>hello-world</em> with version <em>nanoserver-1809</em>. So, in this case, we will have to update the labels in the &#39;<em>service.yaml</em>&#39;. The label will be updated to &#39;version=<em>nanoserver-1809</em>&#39;. We will run the below kubectl command again to update the service so that it can pick new pods running on the newer image.</p><pre><code>$ kubectl apply <span>-</span>f service<span>.</span>yaml</code></pre><p>To see the rollout status run the kubectl command below.</p><pre><code>$ kubectl rollout status deployment<span>/</span>rollingupdate<span>-</span>strategy

Waiting <span>for</span> rollout to finish<span>:</span> <span>2</span> out <span>of</span> <span>3</span> <span>new</span> <span>replicas</span> have been updated<span>...</span></code></pre><p>Run again to verify the rollout is successful.</p><pre><code>$ kubectl rollout status deployment<span>/</span>rollingupdate<span>-</span>strategy

deployment <span>&#34;rollingupdate-strategy&#34;</span> successfully rolled out</code></pre><p>After the rollout is successful, we can view the Deployment by running the command <em>kubectl get deployments</em>. The output is similar to this:</p><pre><code>$ kubectl <span>get</span> deployments

<span>NAME</span>                             <span>READY</span>   <span>UP</span><span>-</span><span>TO</span><span>-</span><span>DATE</span>   <span>AVAILABLE</span>   <span>AGE</span>
rollingupdate<span>-</span>strategy   <span>3</span><span>/</span><span>3</span>     <span>0</span>            <span>0</span>           <span>7</span>s</code></pre><p>Run <em>kubectl get rs</em> to see that the Deployment is updated. The new Pods are created in a new ReplicaSet and are scaled up to 3 replicas. The old ReplicaSet is scaled down to 0 replicas.</p><pre><code>$ kubectl <span>get</span> rs

<span>NAME</span>                                    <span>DESIRED</span>   <span>CURRENT</span>   <span>READY</span>   <span>AGE</span>
rollingupdate<span>-</span>strategy<span>-</span><span>87875</span>f5897   <span>3</span>         <span>3</span>         <span>3</span>       <span>55</span>s
rollingupdate<span>-</span>strategy<span>-</span><span>89999</span>f7895   <span>0</span>         <span>0</span>         <span>0</span>       <span>12</span>s</code></pre><p>Run <em>kubectl get pods</em> it should now show only the new Pods in the new ReplicaSet.</p><pre><code>$ kubectl <span>get</span> pods

<span>NAME</span>                                      <span>READY</span>     <span>STATUS</span>    <span>RESTARTS</span>   <span>AGE</span>       
rollingupdate<span>-</span>strategy<span>-</span><span>89999</span>f7895<span>-</span><span>55</span>i7o   <span>1</span><span>/</span><span>1</span>       Running   <span>0</span>          <span>12</span>s       
rollingupdate<span>-</span>strategy<span>-</span><span>89999</span>f7895<span>-</span>abszs   <span>1</span><span>/</span><span>1</span>       Running   <span>0</span>          <span>12</span>s       
rollingupdate<span>-</span>strategy<span>-</span><span>89999</span>f7895<span>-</span>qazrt   <span>1</span><span>/</span><span>1</span>       Running   <span>0</span>          <span>12</span>s</code></pre><p>The kubectl&#39;s rollout command is very useful here. We can use it to check how our deployment is doing. The command, by default, waits until all of the Pods in the deployment have been started successfully. When the deployment succeeds, the command exits with return code zero to indicate success. If the deployment fails, the command exits with a non-zero code.</p><pre><code>$ kubectl rollout status deployment rollingupdate<span>-</span>strategy

Waiting <span>for</span> deployment <span>&#34;rollingupdate-strategy&#34;</span> rollout to finish<span>:</span> <span>0</span> <span>of</span> <span>3</span> updated replicas are available…
Waiting <span>for</span> deployment <span>&#34;rollingupdate-strategy&#34;</span> rollout to finish<span>:</span> <span>1</span> <span>of</span> <span>3</span> updated replicas are available…
Waiting <span>for</span> deployment <span>&#34;rollingupdate-strategy&#34;</span> rollout to finish<span>:</span> <span>2</span> <span>of</span> <span>3</span> updated replicas are available…

deployment <span>&#34;rollingupdate-strategy&#34;</span> successfully rolled out</code></pre><p>If the deployment fails in Kubernetes, the deployment process stops, but the pods from the failed deployment are kept around. On deployment failure, our environment may contain pods from both the old and new deployments. To get back to a stable, working state, we can use the rollout undo command to bring back the working pods and clean up the failed deployment.</p><pre><code>$ kubectl rollout undo deployment rollingupdate<span>-</span>strategy

deployment<span>.</span>extensions<span>/</span>rollingupdate<span>-</span>strategy</code></pre><p>Then we will verify the status of the deployment again.</p><pre><code>$ kubectl rollout status deployment rollingupdate<span>-</span>strategy

deployment <span>&#34;rollingupdate-strategy&#34;</span> successfully rolled out</code></pre><p>In order for Kubernetes to know when an application is ready, it needs some help from the application. Kubernetes uses readiness probes to examine how the application is doing. Once an application instance starts responding to the readiness probe with a positive response, the instance is considered ready for use. Readiness probes tell Kubernetes when an application is ready, but not if the application will ever become ready. If the application keeps failing, it may never respond with a positive response to Kubernetes. </p><p>A rolling deployment typically waits for new pods to become ready via a readiness check before scaling down the old components. If a significant issue occurs, the rolling deployment can be aborted. If there is a problem, the rolling update or deployment can be aborted without bringing the whole cluster down.</p><h3 id="Recreate-Deployment">Recreate Deployment</h3><p>In recreate deployment, we fully scale down the existing application version before we scale up the new application version. In the below diagram, Version 1 represents the current application version, and Version 2 represents the new application version. When updating the current application version, we first scale down the existing replicas of Version 1 to zero and then concurrently deploy replicas with the new version.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1FVQm06ERSn67QJkI2zlfj/49ef78e46445aa7e6a7e54349e85e2b7/02_recreate-deployment.jpg" alt="Alt text"/></p><p>The below template shows deployment using the recreate strategy: First, we create our <em>recreate</em> deployment by saving the following yaml to a file recreate.yaml</p><pre><code><span>apiVersion</span><span>:</span> apps/v1
<span>kind</span><span>:</span> Deployment
<span>metadata</span><span>:</span>
  <span>name</span><span>:</span> recreate<span>-</span>strategy
<span>spec</span><span>:</span>
  <span>strategy</span><span>:</span>
    <span>type</span><span>:</span> Recreate
  <span>selector</span><span>:</span>
    <span>matchLabels</span><span>:</span>
      <span>app</span><span>:</span> web<span>-</span>app<span>-</span>recreate<span>-</span>strategy
      <span>version</span><span>:</span> nanoserver<span>-</span><span>1809</span>
  <span>replicas</span><span>:</span> <span>3</span>
  <span>template</span><span>:</span>
    <span>metadata</span><span>:</span>
      <span>labels</span><span>:</span>
        <span>app</span><span>:</span> web<span>-</span>app<span>-</span>recreate<span>-</span>strategy
    <span>spec</span><span>:</span>
      <span>containers</span><span>:</span>
        <span>-</span> <span>name</span><span>:</span> web<span>-</span>app<span>-</span>recreate<span>-</span>strategy
          <span>image</span><span>:</span> hello<span>-</span>world<span>:</span>nanoserver<span>-</span><span>1809</span></code></pre><p>We can then create the deployment using the kubectl command.</p><pre><code>$ kubectl apply <span>-</span>f recreate<span>.</span>yaml</code></pre><p>Once we have a deployment template, we can provide a way to access the instances of the deployment by creating a Service. Note that we are deploying the image <em>hello-world</em> with version <em>nanoserver-1809</em>. So in this case we have two labels, &#39;name= <em>web-app-recreate-strategy</em>&#39; and &#39;version=<em>nanoserver-1809</em>&#39;. We will set these as the label selector for the service below. Save this to <em>service.yaml</em> file.</p><pre><code><span>apiVersion</span><span>:</span> v1
<span>kind</span><span>:</span> Service
<span>metadata</span><span>:</span> 
  <span>name</span><span>:</span> web<span>-</span>app<span>-</span>recreate<span>-</span>strategy
  <span>labels</span><span>:</span> 
    <span>name</span><span>:</span> web<span>-</span>app<span>-</span>recreate<span>-</span>strategy
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1809</span>
<span>spec</span><span>:</span>
  <span>ports</span><span>:</span>
    <span>-</span> <span>name</span><span>:</span> http
      <span>port</span><span>:</span> <span>80</span>
      <span>targetPort</span><span>:</span> <span>80</span>
  <span>selector</span><span>:</span> 
    <span>name</span><span>:</span> web<span>-</span>app<span>-</span>recreate<span>-</span>strategy
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1809</span>
  <span>type</span><span>:</span> LoadBalancer</code></pre><p>Now creating the service will create a load balancer that is accessible outside the cluster.</p><pre><code>$ kubectl apply <span>-</span>f service<span>.</span>yaml</code></pre><p>The recreate method involves some downtime during the update process. Downtime is not an issue for applications that can handle maintenance windows or outages. However, if there is a mission-critical application with high service level agreements (SLAs) and availability requirements, choosing a different deployment strategy would be the right approach. Recreate deployment is generally used in the development stage by the developers as it is easy to set up, and the application state is entirely renewed with the new version. What&#39;s more, we don&#39;t have to manage more than one application version in parallel, and therefore we avoid backward compatibility challenges for data and applications. </p><h3 id="Blue-Green-Deployment">Blue-Green Deployment</h3><p>In a blue/green deployment strategy (sometimes also referred to as red/black), the blue represents the current application version, and green represents the new application version. In this, only one version is live at a time. Traffic is routed to the blue deployment while the green deployment is created and tested. After we are finished testing, we then route traffic to the new version.</p><p>After the deployment succeeds, we can either keep the blue deployment for a possible rollback or decommission it. Alternatively, it is possible to deploy a newer version of the application on these instances. In that case, the current (blue) environment serves as the staging area for the next release.</p><p>This technique can eliminate downtime as we faced in the recreate deployment strategy. In addition, blue-green deployment reduces risk: if something unexpected happens with our new version on Green, we can immediately roll back to the last version by switching back to Blue. There is instant rollout/rollback. We can also avoid versioning issues; the entire application state is changed in one deployment.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5vHYgyomFFI2h4okBQyUTH/98d685900acef7c6c1abdea444b947e1/03_blue-green.jpg" alt="Alt text"/></p><p>The Blue-Green deployment is expensive as it requires double the resources. A proper test of the entire platform should be done before releasing it to production. Moreover, handling stateful applications is hard.</p><p>First, we create our <em>blue</em> deployment by saving the following yaml to a &#39;blue.yaml&#39; file:</p><pre><code><span>apiVersion</span><span>:</span> apps/v1
<span>kind</span><span>:</span> Deployment
<span>metadata</span><span>:</span>
  <span>name</span><span>:</span> blue<span>-</span>deployment
<span>spec</span><span>:</span>
  <span>selector</span><span>:</span>
    <span>matchLabels</span><span>:</span>
      <span>app</span><span>:</span> blue<span>-</span>deployment
      <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
  <span>replicas</span><span>:</span> <span>3</span>
  <span>template</span><span>:</span>
    <span>metadata</span><span>:</span>
      <span>labels</span><span>:</span>
        <span>app</span><span>:</span> blue<span>-</span>deployment
        <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
    <span>spec</span><span>:</span>
      <span>containers</span><span>:</span>
        <span>-</span> <span>name</span><span>:</span> blue<span>-</span>deployment
          <span>image</span><span>:</span> hello<span>-</span>world<span>:</span>nanoserver<span>-</span><span>1709</span></code></pre><p>We can then create the deployment using the kubectl command.</p><pre><code>$ kubectl apply <span>-</span>f blue<span>.</span>yaml</code></pre><p>Once we have a deployment template, we can provide a way to access the instances of the deployment by creating a Service. Note that we are deploying the image <em>hello-world</em> with version <em>nanoserver-1809</em>. So in this case we have two labels, &#39;name= <em>blue-deployment</em>&#39; and &#39;version=<em>nanoserver-1709</em>&#39;. We will set these as the label selector for the service below. Save this to <em>service.yaml</em> file.</p><pre><code><span>apiVersion</span><span>:</span> v1
<span>kind</span><span>:</span> Service
<span>metadata</span><span>:</span> 
  <span>name</span><span>:</span> blue<span>-</span>green<span>-</span>service
  <span>labels</span><span>:</span> 
    <span>name</span><span>:</span> blue<span>-</span>deployment
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
<span>spec</span><span>:</span>
  <span>ports</span><span>:</span>
    <span>-</span> <span>name</span><span>:</span> http
      <span>port</span><span>:</span> <span>80</span>
      <span>targetPort</span><span>:</span> <span>80</span>
  <span>selector</span><span>:</span> 
    <span>name</span><span>:</span> blue<span>-</span>deployment
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
  <span>type</span><span>:</span> LoadBalancer</code></pre><p>Now creating the service will create a load balancer that is accessible outside the cluster.</p><pre><code>$ kubectl apply <span>-</span>f service<span>.</span>yaml</code></pre><p>We now have the below setup in place.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2mRPpKDjZb7W9UPlmh0dlF/eec0754c5c458b9017bda1ca7c863bc9/04_blue.jpg" alt="Alt text"/></p><p>For the <em>green</em> deployment we will deploy a new deployment in parallel with the <em>blue</em> deployment. The below template is a content of the <code>green<span>.</span>yaml</code> file:</p><pre><code><span>apiVersion</span><span>:</span> apps/v1
<span>kind</span><span>:</span> Deployment
<span>metadata</span><span>:</span>
  <span>name</span><span>:</span> green<span>-</span>deployment
<span>spec</span><span>:</span>
  <span>selector</span><span>:</span>
    <span>matchLabels</span><span>:</span>
      <span>app</span><span>:</span> green<span>-</span>deployment
      <span>version</span><span>:</span> nanoserver<span>-</span><span>1809</span>
  <span>replicas</span><span>:</span> <span>3</span>
  <span>template</span><span>:</span>
    <span>metadata</span><span>:</span>
      <span>labels</span><span>:</span>
        <span>app</span><span>:</span> green<span>-</span>deployment
        <span>version</span><span>:</span> nanoserver<span>-</span><span>1809</span>
    <span>spec</span><span>:</span>
      <span>containers</span><span>:</span>
        <span>-</span> <span>name</span><span>:</span> green<span>-</span>deployment
          <span>image</span><span>:</span> hello<span>-</span>world<span>:</span>nanoserver<span>-</span><span>1809</span></code></pre><p>Note that image <em>hello-world:nanoserver-1809</em> tag-name has changed to 2. So we have made a separate deployment with two labels, name= <em>green-deployment</em> and version=<em>nanoserver-1809</em>.</p><pre><code>$ kubectl apply <span>-</span>f green<span>.</span>yaml</code></pre><p>To cut over to the <em>green</em> deployment, we will update the selector for the existing service. Edit the service.yaml and change the selector version to <em>2</em> and name to <em>green-deployemnt</em>. That will make it so that it matches the pods on the <em>green</em>&#34; deployment.</p><pre><code><span>apiVersion</span><span>:</span> v1
<span>kind</span><span>:</span> Service
<span>metadata</span><span>:</span> 
  <span>name</span><span>:</span> blue<span>-</span>green<span>-</span>service
  <span>labels</span><span>:</span> 
    <span>name</span><span>:</span> green<span>-</span>deployment
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1809</span>
<span>spec</span><span>:</span>
  <span>ports</span><span>:</span>
    <span>-</span> <span>name</span><span>:</span> http
      <span>port</span><span>:</span> <span>80</span>
      <span>targetPort</span><span>:</span> <span>80</span>
  <span>selector</span><span>:</span> 
    <span>name</span><span>:</span> green<span>-</span>deployment
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1809</span>
  <span>type</span><span>:</span> LoadBalancer</code></pre><p>We create the service  again using the kubectl command:</p><pre><code>$ kubectl apply <span>-</span>f service<span>.</span>yaml</code></pre><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3vxIwBo5DZHGWoELo2khCL/aa6a898dcbc97234cc29f6bac6f31c52/05_green.jpg" alt="Alt text"/></p><p>Hence concluding, we can see the blue-green deployment is all-or-nothing, unlike a rolling update deployment, where we aren&#39;t able to gradually roll out the new version. All users will receive the update at the same time, although existing sessions will be allowed to finish their work on the old instances. Hence the stakes are a bit higher than everything should work once we initiate the change. It also requires allocating more server resources since we will need to run two copies of every pod.</p><p>Fortunately, the rollback procedure is just as easy: We simply have to flip the switch again, and the previous version is swapped back into place. That&#39;s because the old version is still running on the old pods. It is simply that traffic is no longer being routed to them. When we are confident that the new version is here to stay, we should decommission those pods.</p><h3 id="Canary-Deployment">Canary Deployment</h3><p>The canary update strategy is a partial update process that allows us to test our new program version on a real user base without a commitment to a full rollout. Similar to blue/green deployments, but they are more controlled, and they use a more progressive delivery where deployment is in a phased approach. There are a number of strategies that fall under the umbrella of canary, including dark launches or A/B testing.</p><p>In canary deployment, the new version of the application is gradually deployed to the Kubernetes cluster while getting a very small amount of live traffic (i.e., a subset of live users are connecting to the new version while the rest are still using the previous version).In this approach, we have two almost identical servers: one that goes to all the current active users and another with the new features that gets rolled out to a subset of users and then compared. When no errors are reported and the confidence increases, the new version can gradually roll out to the rest of the infrastructure. In the end, all live traffic goes to canaries, making the canary version the new <em>production version</em>.</p><p>The below picture shows the most straightforward and simple way to do a canary deployment. A new version is deployed to a subset of servers.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4thRldlIQuLdnmwSjEcmIq/85ed566fcaa6038e74de978112a79df0/06_canary-deployment-1.jpg" alt="Alt text"/></p><p>While this happens, we watch how the upgraded machines are doing. We check for errors and performance problems, and we listen for user feedback. As we grow confident in the canary, we continue installing it on the rest of the machines until they are all running the latest release.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4dsHDsWT30QXUL17T0uphC/5048ee861491e78ae2baa43682446a83/07_canary-deployment-2.png" alt="Alt text"/></p><p>We have to take into account various things when planning a canary deployment:</p><ol start="1"><li><strong>Stages</strong>: how many users will we send to the canary at first, and in how many stages.</li><li><strong>Duration</strong>: how long will we plan to run the canary? Canary releases are different, as we must wait for enough clients to be updated before we can assess the results. This can happen over several days or even weeks.</li><li><strong>Metrics</strong>: what are the metrics to record to analyze progress, including application performance and error reports? Well-chosen parameters are essential for a successful canary deployment. For instance, a very simple way to measure deployment is through HTTP status codes. We can have a simple ping service that returns 200 when the deployment is successful. It will return server end error (5xx) if there is an issue in the deployment.</li><li><strong>Evaluation</strong>: what criteria will we use to determine if the canary is successful</li></ol><p>A canary is used in scenarios where we have to test a new functionality typically on the backend of our application. Canary deployment should be used when we are not 100% confident in the new version; we predict we might have a low chance of failure. This strategy is usually used when we have a major update, like adding a new functionality or experimental feature.</p><h2 id="Summary-K8s-Deployments-Strategies">Summary K8s Deployments Strategies</h2><p>To sum up, there are different ways to deploy an application; when releasing to development/staging environments, a recreate or ramped deployment is usually a good choice. When it comes to production, a ramped or blue/green deployment is usually a good fit, but proper testing of the new platform is necessary. If we are not confident with the stability of the platform and what could be the impact of releasing a new software version, then a canary release should be the way to go. By doing so, we let the consumer test the application and its integration into the platform. In this article, we have only scratched the surface of the capabilities of Kubernetes deployments. By combining deployments with all the other Kubernetes features, users can create more robust containerized applications to suit any need.</p></div></div>]]></content:encoded>
      <pubDate>Fri, 06 Aug 2021 14:59:00 +0000</pubDate>
    </item>
    <item>
      <title>Spring Cloud Messaging With AWS and LocalStack</title>
      <link>https://auth0.com/blog/spring-cloud-messaging-with-aws-and-localstack/</link>
      <description>Learn how to simulate AWS services locally using LocalStack with a Spring Boot application.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><strong>TL;DR:</strong> This article demonstrates the use of LocalStack and how it can simulate many of the AWS services locally. We will use Spring Cloud Messaging to create a publisher-subscriber sample application. We will use Amazon SNS and SQS to do that.</p><p>The sample app can be found <a href="https://github.com/maniish-jaiin/spring-cloud-messaging-sample" target="_blank" rel="noreferrer noopener">here</a>.</p><h2 id="Spring-Cloud-Messaging-With-AWS-and-LocalStack">Spring Cloud Messaging With AWS and LocalStack</h2><h3 id="Introduction">Introduction</h3><p>With an ever-growing demand for cloud services, Spring provides amazing support to integrate with Cloud providers and relevant services. <a href="https://spring.io/projects/spring-cloud-aws" target="_blank" rel="noreferrer noopener">Spring Cloud for Amazon Web Services</a> is one such project that makes it easy to integrate with AWS services using familiar Spring APIs.</p><p>In this article, we will look into a simple application that acts as a message producer and a consumer using Amazon SNS and SQS. On top of that, we will not create an AWS account or use AWS services directly from AWS. We will instead use LocalStack, which will allow us to create AWS resources locally.</p><p>The sample app can be found <a href="https://github.com/maniish-jaiin/spring-cloud-messaging-sample" target="_blank" rel="noreferrer noopener">here</a>.</p><h3 id="Pre-requisites-">Pre-requisites:</h3><ol start="1"><li>Basic knowledge of AWS, <a href="https://github.com/aws/aws-cli" target="_blank" rel="noreferrer noopener">AWS CLI</a>, and related services like Amazon SQS.</li><li>Basic knowledge of <a href="https://docs.oracle.com/en/java/javase/11/docs/api/index.html" target="_blank" rel="noreferrer noopener">Java 11</a> and Spring Boot <code><span>2.4</span><span>.7</span></code>.</li><li><a href="https://docs.docker.com/get-docker/" target="_blank" rel="noreferrer noopener">Docker</a> and <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noreferrer noopener">Docker Compose</a> for the setup.</li></ol><h2 id="Introduction-to-Amazon-SNS-and-SQS">Introduction to Amazon SNS and SQS</h2><h3 id="Amazon-SNS">Amazon SNS</h3><p><a href="https://aws.amazon.com/sns/" target="_blank" rel="noreferrer noopener">Amazon SNS</a> is an acronym for Simple Notification Service. It provides developers with the highly scalable, cost-effective, and flexible capability to publish messages from an application and send them to other applications. It follows the pub-sub architecture to deliver messages from publishers to the subscribers. It is a highly decoupled service that can be linked to a variety of sources. It can be used to publish emails, messages to SQS, SMS, etc.</p><p>The Publisher (e.g., CloudWatch Alarm, S3 events, SNS, Micro-service) publishes the message on a Topic which is then published to all the Subscribers (web servers, email addresses, Amazon SQS queues, AWS Lambda)  of that particular topic.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/35P87aEWHIcpTOQxYTGWbz/03840ff6c13fdc4a94552ec8188c131e/sns_architecture.jpg" alt="SNS Architecture"/></p><h3 id="Amazon-SQS">Amazon SQS</h3><p><a href="https://aws.amazon.com/sqs/" target="_blank" rel="noreferrer noopener">Amazon SQS</a> is an acronym for Simple Queue Service, and the names convey a lot as it is really simple to use as it is a fully managed service from AWS. It follows similar messaging semantics of the producer putting a message on the queue and consumer reading from it.</p><p>Once consumed, the message has to be deleted from the queue. Deleting is important because SQS assumes that processing can fail. To prevent that, after the consumer receives a message, it is hidden from the queue for a defined period of time, and after that, if it is not deleted, the message shows up in the queue again.</p><p>Both SNS and SQS are fully managed lightweight, easy-to-use APIs. You can use Amazon SQS and SNS to decouple and scale microservices, distributed systems, and serverless applications and improve reliability.</p><h3 id="Introduction-to-LocalStack">Introduction to LocalStack</h3><p><a href="https://github.com/localstack/localstack" target="_blank" rel="noreferrer noopener">LocalStack</a> is an open-source mock of the real AWS services. It provides a testing environment on our local machine with the same APIs as the real AWS services. We switch to using the real AWS services only in the integration environment and beyond. There are plenty of reasons to use LocalStack, few out of which are more important than others, such as:</p><ol start="1"><li>The ability to play with AWS services without interacting with AWS. All developers love to get their hands dirty, and what better way to learn something than to try. Localstack allows you to play with S3, SQS, DynamoDB, SNS, and the list goes on.</li><li>The ability to test the applications in the local dev environment. You can write integration tests for your application using LocalStack, driving down your costs and increasing the confidence in your code.</li></ol><h3 id="Spring-Cloud-Messaging-app-linked-to-LocalStack">Spring Cloud Messaging app linked to LocalStack</h3><p>Spring Cloud AWS provides <a href="https://aws.amazon.com/sqs/" target="_blank" rel="noreferrer noopener">Amazon SQS</a> and <a href="https://aws.amazon.com/sns/" target="_blank" rel="noreferrer noopener">Amazon SNS</a> integration that simplifies the publication and consumption of messages. It reduces a lot of boilerplate code and does the heavy lifting for configuring and SNS and SQS. Let&#39;s set up a Spring boot project with support for SNS and SQS.</p><h4 id="Setting-up-Spring-Boot-app">Setting up Spring Boot app</h4><p>Let us first create a Spring Boot project with the help of the <a href="https://start.spring.io/#!type=maven-project&amp;language=java&amp;platformVersion=2.4.5.RELEASE&amp;packaging=jar&amp;jvmVersion=11&amp;groupId=io.pratik&amp;artifactId=springcloudsqs&amp;name=springcloudsqs&amp;description=Demo%20project%20for%20Spring%20cloud%20sqs&amp;packageName=io.pratik.springcloudsqs&amp;dependencies=web,lombok" target="_blank" rel="noreferrer noopener">Spring boot Initializr</a>, and then open the project in our favorite IDE. Select Maven project and Java language. Last but not least, select Spring boot version <code><span>2.4</span><span>.7</span></code>. Fill in the project metadata and click generate.</p><p>For Spring Cloud, We need to configure Spring Cloud AWS BOM in our <code>pom<span>.</span>xml</code> file using this dependencyManagement block:</p><pre><code><span><span><span>&lt;</span>dependencyManagement</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>dependencies</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>dependency</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>io.awspring.cloud<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>spring-cloud-aws-dependencies<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>version</span><span>&gt;</span></span>2.3.1<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>type</span><span>&gt;</span></span>pom<span><span><span>&lt;/</span>type</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>scope</span><span>&gt;</span></span>import<span><span><span>&lt;/</span>scope</span><span>&gt;</span></span>
        <span><span><span>&lt;/</span>dependency</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>dependencies</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>dependencyManagement</span><span>&gt;</span></span></code></pre><p>For adding the support for messaging, we need to include the module dependency for Spring Cloud AWS Messaging into our Maven configuration. We do this by adding the starter module <code>spring<span>-</span>cloud<span>-</span>starter<span>-</span>aws<span>-</span>messaging</code>:</p><pre><code><span><span><span>&lt;</span>dependency</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>io.awspring.cloud<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>spring-cloud-starter-aws-messaging<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>dependency</span><span>&gt;</span></span></code></pre><p>These are the dependencies required for Spring Cloud AWS. Next, we add some other dependencies such as Spring boot starter web and <a href="https://projectlombok.org/" target="_blank" rel="noreferrer noopener">Lombok</a>.</p><pre><code><span><span><span>&lt;</span>dependencies</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>dependency</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>spring-boot-starter-web<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>version</span><span>&gt;</span></span>2.4.7<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>dependency</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>dependency</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.projectlombok<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>lombok<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>version</span><span>&gt;</span></span>1.18.20<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>scope</span><span>&gt;</span></span>provided<span><span><span>&lt;/</span>scope</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>dependency</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>dependencies</span><span>&gt;</span></span></code></pre><p>This completes our setup process for the Spring boot project.</p><p>Let&#39;s jump into adding the SNS and SQS configs and start publishing our first message.</p><p>Amazon SNS Config:</p><pre><code><span>import</span> <span>com<span>.</span>amazonaws<span>.</span>auth<span>.</span></span><span>AWSStaticCredentialsProvider</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>auth<span>.</span></span><span>BasicAWSCredentials</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>client<span>.</span>builder<span>.</span></span><span>AwsClientBuilder</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>services<span>.</span>sns<span>.</span></span><span>AmazonSNS</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>services<span>.</span>sns<span>.</span></span><span>AmazonSNSClientBuilder</span><span>;</span>
<span>import</span> <span>io<span>.</span>awspring<span>.</span>cloud<span>.</span>messaging<span>.</span>core<span>.</span></span><span>NotificationMessagingTemplate</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Bean</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Configuration</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Primary</span><span>;</span>

<span>import</span> <span>static</span> <span>com<span>.</span>authga<span>.</span>springcloudaws<span>.</span>config<span>.</span></span><span>AWSConfigConstants</span><span>.</span>ACCESS_KEY<span>;</span>
<span>import</span> <span>static</span> <span>com<span>.</span>authga<span>.</span>springcloudaws<span>.</span>config<span>.</span></span><span>AWSConfigConstants</span><span>.</span>SECRET_KEY<span>;</span>

<span>@Configuration</span>
<span>public</span> <span>class</span> <span>SnsConfig</span> <span>{</span>

    <span>@Bean</span>
    <span>public</span> <span>NotificationMessagingTemplate</span> <span>notificationMessagingTemplate</span><span>(</span><span>AmazonSNS</span> amazonSNS<span>)</span> <span>{</span>
        <span>return</span> <span>new</span> <span>NotificationMessagingTemplate</span><span>(</span>amazonSNS<span>)</span><span>;</span>
    <span>}</span>

    <span>@Bean</span>
    <span>@Primary</span>
    <span>public</span> <span>AmazonSNS</span> <span>amazonSNS</span><span>(</span><span>final</span> <span>AwsClientBuilder<span>.</span>EndpointConfiguration</span> endpointConfiguration<span>)</span> <span>{</span>
        <span>BasicAWSCredentials</span> credentials <span>=</span> <span>new</span> <span>BasicAWSCredentials</span><span>(</span>ACCESS_KEY<span>,</span> SECRET_KEY<span>)</span><span>;</span>
        <span>return</span> <span>AmazonSNSClientBuilder</span>
                <span>.</span><span>standard</span><span>(</span><span>)</span>
                <span>.</span><span>withEndpointConfiguration</span><span>(</span>endpointConfiguration<span>)</span>
                <span>.</span><span>withCredentials</span><span>(</span><span>new</span> <span>AWSStaticCredentialsProvider</span><span>(</span>credentials<span>)</span><span>)</span>
                <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>Here, we create a simple <code>AmazonSNSClient</code> with a custom endpoint and credentials. Spring has an auto-configured <code>AmazonSNSClient</code>, but that requires valid AWS credentials and actual resources. We instead want to run our service locally with AWS resources using LocalStack. More on this later. Let&#39;s finish this setup.</p><p>Amazon SQS Config:</p><pre><code><span>import</span> <span>com<span>.</span>amazonaws<span>.</span>auth<span>.</span></span><span>AWSStaticCredentialsProvider</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>auth<span>.</span></span><span>BasicAWSCredentials</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>client<span>.</span>builder<span>.</span></span><span>AwsClientBuilder</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>services<span>.</span>sqs<span>.</span></span><span>AmazonSQSAsync</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>services<span>.</span>sqs<span>.</span></span><span>AmazonSQSAsyncClientBuilder</span><span>;</span>
<span>import</span> <span>io<span>.</span>awspring<span>.</span>cloud<span>.</span>messaging<span>.</span>config<span>.</span></span><span>QueueMessageHandlerFactory</span><span>;</span>
<span>import</span> <span>io<span>.</span>awspring<span>.</span>cloud<span>.</span>messaging<span>.</span>support<span>.</span></span><span>NotificationMessageArgumentResolver</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Bean</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Configuration</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Primary</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>messaging<span>.</span>converter<span>.</span></span><span>MappingJackson2MessageConverter</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>messaging<span>.</span>converter<span>.</span></span><span>MessageConverter</span><span>;</span>

<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>List</span><span>;</span>

<span>import</span> <span>static</span> <span>com<span>.</span>authga<span>.</span>springcloudaws<span>.</span>config<span>.</span></span><span>AWSConfigConstants</span><span>.</span>*<span>;</span>

<span>@Configuration</span>
<span>public</span> <span>class</span> <span>SqsConfig</span> <span>{</span>

    <span>@Bean</span>
    <span>public</span> <span>AwsClientBuilder<span>.</span>EndpointConfiguration</span> <span>endpointConfiguration</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>new</span> <span>AwsClientBuilder<span>.</span>EndpointConfiguration</span><span>(</span>ENDPOINT<span>,</span> EU_CENTRAL_1<span>)</span><span>;</span>
    <span>}</span>

    <span>@Bean</span>
    <span>@Primary</span>
    <span>public</span> <span>AmazonSQSAsync</span> <span>amazonSQSAsync</span><span>(</span><span>final</span> <span>AwsClientBuilder<span>.</span>EndpointConfiguration</span> endpointConfiguration<span>)</span> <span>{</span>
        <span>BasicAWSCredentials</span> credentials <span>=</span> <span>new</span> <span>BasicAWSCredentials</span><span>(</span>ACCESS_KEY<span>,</span> SECRET_KEY<span>)</span><span>;</span>
        <span>return</span> <span>AmazonSQSAsyncClientBuilder</span>
                <span>.</span><span>standard</span><span>(</span><span>)</span>
                <span>.</span><span>withEndpointConfiguration</span><span>(</span>endpointConfiguration<span>)</span>
                <span>.</span><span>withCredentials</span><span>(</span><span>new</span> <span>AWSStaticCredentialsProvider</span><span>(</span>credentials<span>)</span><span>)</span>
                <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Bean</span>
    <span>public</span> <span>QueueMessageHandlerFactory</span> <span>queueMessageHandlerFactory</span><span>(</span><span>MessageConverter</span> messageConverter<span>)</span> <span>{</span>
        <span>var</span> factory <span>=</span> <span>new</span> <span>QueueMessageHandlerFactory</span><span>(</span><span>)</span><span>;</span>
        factory<span>.</span><span>setArgumentResolvers</span><span>(</span><span>List</span><span>.</span><span>of</span><span>(</span><span>new</span> <span>NotificationMessageArgumentResolver</span><span>(</span>messageConverter<span>)</span><span>)</span><span>)</span><span>;</span>
        <span>return</span> factory<span>;</span>
    <span>}</span>

    <span>@Bean</span>
    <span>protected</span> <span>MessageConverter</span> <span>messageConverter</span><span>(</span><span>)</span> <span>{</span>
        <span>var</span> converter <span>=</span> <span>new</span> <span>MappingJackson2MessageConverter</span><span>(</span><span>)</span><span>;</span>
        converter<span>.</span><span>setSerializedPayloadClass</span><span>(</span><span>String</span><span>.</span><span>class</span><span>)</span><span>;</span>
        converter<span>.</span><span>setStrictContentTypeMatch</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>return</span> converter<span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>In the code above, we did the following:</p><ul><li>Similar to the <code>AmazonSNSClient</code>, we create the <code>AmazonSQSClient</code> with a custom endpoint and credentials.</li><li>Setup <code>QueueMessageHandlerFactory</code> so it can convert incoming messages from SQS as String to the actual object we want, in this case, <code>Event</code>, using a <code>MessageConverter</code>.</li><li>The converter will take care of converting the <code>String</code> message to the actual <code>Event</code> object.</li></ul><p>The <code>Event</code> model is described below. I am using <a href="https://projectlombok.org/" target="_blank" rel="noreferrer noopener">Lombok</a> to reduce the boilerplate code.</p><p><code>Event<span>.</span>java</code></p><pre><code><span>import</span> <span>lombok<span>.</span></span><span>AllArgsConstructor</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>Builder</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>Data</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>NoArgsConstructor</span><span>;</span>

<span>@Data</span>
<span>@AllArgsConstructor</span>
<span>@NoArgsConstructor</span>
<span>@Builder</span>
<span>public</span> <span>class</span> <span>Event</span> <span>implements</span> <span>Comparable</span><span><span>&lt;</span><span>Event</span><span>&gt;</span></span> <span>{</span>
    <span>private</span> <span>String</span> eventId<span>;</span>
    <span>private</span> <span>String</span> version<span>;</span>
    <span>private</span> <span>String</span> occurredAt<span>;</span>
    <span>private</span> <span>EventData</span> data<span>;</span>

    <span>@Override</span>
    <span>public</span> <span>int</span> <span>compareTo</span><span>(</span><span>Event</span> o<span>)</span> <span>{</span>
        <span>int</span> otherVersion <span>=</span> <span>Integer</span><span>.</span><span>parseInt</span><span>(</span>o<span>.</span><span>getVersion</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>int</span> thisVersion <span>=</span> <span>Integer</span><span>.</span><span>parseInt</span><span>(</span><span>this</span><span>.</span><span>getVersion</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>return</span> <span>Integer</span><span>.</span><span>compare</span><span>(</span>thisVersion<span>,</span> otherVersion<span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p><code>EventData<span>.</span>java</code></p><pre><code><span>import</span> <span>lombok<span>.</span></span><span>AllArgsConstructor</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>Builder</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>Data</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>NoArgsConstructor</span><span>;</span>

<span>@Data</span>
<span>@AllArgsConstructor</span>
<span>@NoArgsConstructor</span>
<span>@Builder</span>
<span>public</span> <span>class</span> <span>EventData</span> <span>{</span>
    <span>private</span> <span>String</span> orderId<span>;</span>
    <span>private</span> <span>String</span> owner<span>;</span>
    <span>private</span> <span>EventType</span> eventType<span>;</span>
<span>}</span></code></pre><p><code>EventType<span>.</span>java</code></p><pre><code><span>import</span> <span>java<span>.</span>io<span>.</span></span><span>Serializable</span><span>;</span>

<span>public</span> <span>enum</span> <span>EventType</span> <span>implements</span> <span>Serializable</span> <span>{</span>
    ORDER_CREATED<span>,</span> ORDER_CANCELLED
<span>}</span></code></pre><p>Producer code:</p><pre><code><span>import</span> <span>com<span>.</span>authga<span>.</span>springcloudaws<span>.</span>model<span>.</span></span><span>Event</span><span>;</span>
<span>import</span> <span>io<span>.</span>awspring<span>.</span>cloud<span>.</span>messaging<span>.</span>core<span>.</span></span><span>NotificationMessagingTemplate</span><span>;</span>
<span>import</span> <span>lombok<span>.</span>extern<span>.</span>slf4j<span>.</span></span><span>Slf4j</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>beans<span>.</span>factory<span>.</span>annotation<span>.</span></span><span>Autowired</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>stereotype<span>.</span></span><span>Service</span><span>;</span>

<span>import</span> <span>static</span> <span>com<span>.</span>authga<span>.</span>springcloudaws<span>.</span>config<span>.</span></span><span>AWSConfigConstants</span><span>.</span>ORDER_CREATED_TOPIC<span>;</span>

<span>@Slf4j</span>
<span>@Service</span>
<span>public</span> <span>class</span> <span>SimpleMessageProducer</span> <span>{</span>

    <span>@Autowired</span>
    <span>private</span> <span>NotificationMessagingTemplate</span> notificationMessagingTemplate<span>;</span>

    <span>public</span> <span>void</span> <span>publish</span><span>(</span><span>Event</span> event<span>)</span> <span>{</span>
        notificationMessagingTemplate<span>.</span><span>convertAndSend</span><span>(</span>ORDER_CREATED_TOPIC<span>,</span> event<span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><ul><li>We use the <code>NotificationMessagingTemplate</code> created in the config above. It gives us several methods to send messages on an SNS topic. We will use the default <code><span>convertAndSend</span><span>(</span><span>)</span></code> method that takes care of converting our object to a Message using the <code>MessageConverter</code> that we provide in the <code>SqsConfig</code> class.</li></ul><p>Consumer code:</p><pre><code><span>import</span> <span>com<span>.</span>authga<span>.</span>springcloudaws<span>.</span>model<span>.</span></span><span>Event</span><span>;</span>
<span>import</span> <span>io<span>.</span>awspring<span>.</span>cloud<span>.</span>messaging<span>.</span>config<span>.</span>annotation<span>.</span></span><span>NotificationMessage</span><span>;</span>
<span>import</span> <span>io<span>.</span>awspring<span>.</span>cloud<span>.</span>messaging<span>.</span>listener<span>.</span></span><span>SqsMessageDeletionPolicy</span><span>;</span>
<span>import</span> <span>io<span>.</span>awspring<span>.</span>cloud<span>.</span>messaging<span>.</span>listener<span>.</span>annotation<span>.</span></span><span>SqsListener</span><span>;</span>
<span>import</span> <span>lombok<span>.</span>extern<span>.</span>slf4j<span>.</span></span><span>Slf4j</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>stereotype<span>.</span></span><span>Controller</span><span>;</span>

<span>import</span> <span>static</span> <span>com<span>.</span>authga<span>.</span>springcloudaws<span>.</span>config<span>.</span></span><span>AWSConfigConstants</span><span>.</span>ORDER_QUEUE<span>;</span>

<span>@Slf4j</span>
<span>@Controller</span>
<span>public</span> <span>class</span> <span>SimpleMessageConsumer</span> <span>implements</span> <span>MessageConsumer</span> <span>{</span>

    <span>@Override</span>
    <span>@SqsListener</span><span>(</span>value <span>=</span> ORDER_QUEUE<span>,</span> deletionPolicy <span>=</span> <span>SqsMessageDeletionPolicy</span><span>.</span>ON_SUCCESS<span>)</span>
    <span>public</span> <span>void</span> <span>consume</span><span>(</span><span>@NotificationMessage</span> <span>Event</span> event<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>event <span>!=</span> <span>null</span><span>)</span> <span>{</span>
            log<span>.</span><span>info</span><span>(</span><span>&#34;Received order event for consumer 1: &#34;</span> <span>+</span> event<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span></code></pre><ul><li>We only need <code>@SqsListener</code> annotation that automatically makes our consume method get the messages from the queue.</li><li>We also add <code>@NotificationMessage</code> annotation to have the correct deserialization and extract our Event from the SNS message because the SNS message is wrapped inside a <code>Message</code> object.</li></ul><h3 id="Setup-LocalStack-and-create-resources">Setup LocalStack and create resources</h3><p>Setting up LocalStack is dead simple; you just need to use the docker-compose file below, and it will start SNS and SQS services locally. Add the <code>docker compose<span>.</span>yml</code> to the repository&#39;s root directory. Start the LocalStack using: <code>docker<span>-</span>compose up</code>.</p><pre><code><span>version</span><span>:</span> <span>&#39;3.0&#39;</span>

<span>services</span><span>:</span>

  <span>localstack</span><span>:</span>
    <span>image</span><span>:</span> localstack/localstack<span>:</span>latest
    <span>environment</span><span>:</span>
      <span>-</span> AWS_DEFAULT_REGION=eu<span>-</span>central<span>-</span><span>1</span>
      <span>-</span> EDGE_PORT=4566
      <span>-</span> SERVICES=sqs<span>,</span>sns
    <span>ports</span><span>:</span>
      <span>-</span> <span>&#39;4566:4566&#39;</span></code></pre><p>Once it is up and running, we can create the required AWS resources. We will create one SNS topic to which two SQS queues will be listening. The code to or publishing and listening is simple. Go to your command line, e.g., terminal, and execute the following commands.</p><p>To create the topic:</p><pre><code>aws --endpoint-url<span>=</span>http://localhost:4566  sns create-topic  --name  order-created-topic</code></pre><p>To create the queues:</p><pre><code>aws --endpoint-url<span>=</span>http://localhost:4566  sqs create-queue  --queue-name  order-queue
aws --endpoint-url<span>=</span>http://localhost:4566  sqs create-queue  --queue-name  order-queue-2</code></pre><p>To subscribe the queues to the topic:</p><pre><code>aws --endpoint-url<span>=</span>http://localhost:4566 sns subscribe
--topic-arn arn:aws:sns:eu-central-1:000000000000:order-created-topic
--protocol sqs
--notification-endpoint arn:aws:sqs:eu-central-1:000000000000:order-queue

aws --endpoint-url<span>=</span>http://localhost:4566 sns subscribe
--topic-arn arn:aws:sns:eu-central-1:000000000000:order-created-topic
--protocol sqs
--notification-endpoint arn:aws:sqs:eu-central-1:000000000000:order-queue-2</code></pre><p>To verify you can list queues and subscriptions:</p><pre><code>aws --endpoint-url<span>=</span>http://localhost:4566  sqs list-queues
aws --endpoint-url<span>=</span>http://localhost:4566  sns list-subscriptions</code></pre><p>That&#39;s it!</p><h3 id="Verify-sending-and-receiving-of-events">Verify sending and receiving of events</h3><p>Run the Spring Boot app:</p><ol start="1"><li>Clone the sample code from the repo. Go to the root directory.</li><li>Use Maven plugin to run your Spring Boot app using the command in the project directory.</li></ol><pre><code>mvn spring-boot:run</code></pre><p>The groundwork is complete now. With the app running, we can send messages to the Amazon SNS Topic and read those messages from the queues. In the repo, I have created a controller to trigger the publishing of events. If you download the sample app, you should be able to run it, and going to <a href="http://localhost:8080/create-order" target="_blank" rel="noreferrer noopener">http://localhost:8080/create-order</a> will trigger the publisher, which in turn will trigger the consumers. In the application logs, you should be able to see. This means that our producer code publishes the code to the SNS topic. The two queues that are subscribed to the topic receive those messages, and finally, the consumer receives those messages and prints the event.</p><pre><code>Received order event <span>for</span> consumer <span>1</span><span>:</span>
Event<span>{</span>eventId<span>=</span><span>&#39;386cca76-3669-4d36-b2db-01f388bbce5f&#39;</span><span>,</span> version<span>=</span><span>&#39;0&#39;</span><span>,</span>
occurredAt<span>=</span><span>&#39;2021-06-19T13:42:32.946781Z&#39;</span><span>,</span> data<span>=</span><span>EventData</span><span>(</span>orderId<span>=</span><span>9</span>a002b95<span>-</span>f10b<span>-</span><span>428e-8</span>d39<span>-</span>cae90d1e631d<span>,</span>
owner<span>=</span>SampleProducer<span>,</span> eventType<span>=</span><span>ORDER_CREATED</span><span>)</span><span>}</span>

Received order event <span>for</span> consumer <span>2</span><span>:</span>
Event<span>{</span>eventId<span>=</span><span>&#39;386cca76-3669-4d36-b2db-01f388bbce5f&#39;</span><span>,</span> version<span>=</span><span>&#39;0&#39;</span><span>,</span> occurredAt<span>=</span><span>&#39;2021-06-19T13:42:32.946781Z&#39;</span><span>,</span>
data<span>=</span><span>EventData</span><span>(</span>orderId<span>=</span><span>9</span>a002b95<span>-</span>f10b<span>-</span><span>428e-8</span>d39<span>-</span>cae90d1e631d<span>,</span> owner<span>=</span>SampleProducer<span>,</span> eventType<span>=</span><span>ORDER_CREATED</span><span>)</span><span>}</span></code></pre><h2 id="Conclusion">Conclusion</h2><p>LocalStack provides a simple and convenient way to simulate AWS services without having an actual AWS account. You can build applications using various AWS services like Amazon SNS, SQS, S3 DynamoDB, and many more.</p><p>In this article, we have learned how to build a Spring Cloud Messaging app that utilizes LocalStack. We saw how Spring Cloud Messaging provides a layer of abstraction to create an Amazon SQS listener and SNS publisher with just a few lines of code. Furthermore, we saw how to use Amazon SNS and SQS to create an event-driven application.</p><p>You can refer to the repository used in the article on <a href="https://github.com/maniish-jaiin/spring-cloud-messaging-sample" target="_blank" rel="noreferrer noopener">Github</a>.</p></div></div>]]></content:encoded>
      <pubDate>Thu, 05 Aug 2021 14:53:00 +0000</pubDate>
    </item>
    <item>
      <title>Node 16 Support Now Available in Actions</title>
      <link>https://auth0.com/blog/node-16-support-now-available-in-actions/</link>
      <description>Starting Aug 4, 2021, we are rolling out Node 16 as the default runtime for Actions.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>As our next-generation extensibility platform, designed to replace Rules &amp; Hooks, our plan is to support every current and long-term supported Node version through Actions exclusively. </p><p>We recently introduced Node 16 support in Actions. Node 16 is the <em><a href="https://nodejs.org/en/about/releases/" target="_blank" rel="noreferrer noopener">current version published by Node</a></em>. This version does not introduce any breaking changes.  </p><h2 id="What-Does-This-Mean-for-Our-Developers-">What Does This Mean for Our Developers?</h2><p>We will continue to support Node 12 through the Long Term Support (LTS) end coming in April 2022 for all of our extensibility products - Actions, Rules, and Hooks.  However, we encourage developers to stay current in their Node version for security and compliance purposes.  </p><h3 id="Developers-using-Actions">Developers using Actions</h3><p>All new Actions will be set to the Node 16 runtime by default. However, you do not need to migrate every Action immediately to Node 16.  </p><p>Unlike Rules and Hooks, Actions is designed to run actions of varying Node runtimes side by side. With Actions, you no longer need to migrate all code to a single, tenant-level Node runtime. Existing Actions can be upgraded to Node 16 by creating and <a href="https://auth0.com/docs/actions/manage-versions" target="_blank" rel="noreferrer noopener">deploying a new version</a> to Node 16. If needed, existing Actions built on Node 12 can be upgraded to Node 16 and reverted to Node 12.</p><h3 id="Developers-using-legacy-extensibility-products">Developers using legacy extensibility products</h3><p>Our legacy extensibility products (Rules and Hooks) will continue to support Node 12. Node 16 will only roll out to Actions.</p><p>We strongly encourage developers using Rules and Hooks to migrate to Actions, wherever possible, to start taking advantage of the greatly <a href="https://auth0.com/blog/introducing-auth0-actions/" target="_blank" rel="noreferrer noopener">improved developer experience</a> that comes with Actions, such as an industry standard VS Code style editor, typescript, draft mode, version control, improved secret management, an expanded library of NPM modules, and more. </p><p>For developers using Node 8, if there are Rules and Hooks that cannot be immediately migrated to Actions Node 16, at a minimum, update your code to Node 12. Node 8 reached the end of LTS back in December 2019 and since then has not been updated to address critical bugs, security fixes, patches, or other important updates.</p><p>We want to hear from you. Please share any feedback on your experience with Actions and the Node 16 update in our <a href="https://community.auth0.com/c/actions/91" target="_blank" rel="noreferrer noopener">Developer Community</a>.</p></div></div>]]></content:encoded>
      <pubDate>Wed, 04 Aug 2021 16:02:00 +0000</pubDate>
    </item>
    <item>
      <title>Adding Auth0 RBAC Authorization to a Ktor API</title>
      <link>https://auth0.com/blog/adding-auth0-rbac-authorization-to-a-ktor-api/</link>
      <description>Learn how to add Auth0 RBAC authorization to Ktor HTTP API endpoints</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>In the previous post, we created an Auth0 API to represent the Ktor HTTP API and an Auth0 application to allow the frontend application to authenticate users. This allowed us to query the backend API from the frontend application with a valid access token. We also updated the backend API to require a valid access token for the <code><span>protected</span></code> and <code>admin</code> endpoints.</p><p>In this post, we&#39;ll complete the journey by enabling Role-Based Access Controls (RBAC) within Auth0 and restrict access to the <code>admin</code> endpoint in our backend API to those users with the correct permissions.</p><h2 id="RBAC-and-permissions">RBAC and permissions</h2><p>We start by enabling RBAC within our Auth0 API.</p><p>Under the <strong>Settings</strong> tab in the API, switch the <strong>Enable RBAC</strong> and <strong>Add permissions in the Access Token</strong> sliders to the on the setting. Doing so will ensure a <code>permissions</code> claim is added to the access token with any scopes that have been assigned to the logged-in user.</p><p>A detailed discussion on why scopes should not be used to grant permissions is presented in the post <a href="https://auth0.com/blog/on-the-nature-of-oauth2-scopes/" target="_blank" rel="noreferrer noopener">On The Nature of OAuth2&#39;s Scopes</a>. The summary is that a scope constrains the actions that an OAuth client <em>may</em> attempt to perform on behalf of a user, but <em>does not</em> imply that the user has the permission to access any particular resource.</p><p>This has some subtle but significant implications on the claims returned in an Auth0 access token.</p><p>Without enabling the RBAC settings, any scope requested by the OAuth client and consented to by the user will be returned in the <code>scope</code> claim. It doesn&#39;t matter if that scope has been assigned to the user or not - it is returned regardless. It is then the responsibility of the OAuth resource server to allow or deny access to a given resource based on the user&#39;s identity and the action being performed.</p><p>When RBAC is enabled, only scopes that have been requested by the client, <em>and</em> consented to by the user, <em>and</em> assigned to a user will be returned in the <code>scope</code> claim. In this scenario, the resource server can assume the absence of a scope means the client did not request it, the user did not consent to it, or it has not been assigned to the user, and so can quickly deny access.</p><p>By adding the <code>permissions</code> claim, each scope assigned to the user is calculated and included in the access token. The <code>permissions</code> claim is populated without asking for consent from the user, which supports more traditional RBAC style applications, where clients have delegated all the permissions of their users, and the users don&#39;t pick and choose scopes with each login.</p><p>Our sample application will make use of the scopes in the <code>permissions</code> claim to determine access to the API.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4ZpaxCFDvKa7It8aToFSBP/06e7bd6600e3146032475a399a0d068a/01_build-a-ktor-api-pt-3.png" alt="RBAC"/>
<em>Enabling RBAC and permissions in the access token.</em></p><p>Under the <strong>Permissions</strong> tab, define a new <strong>Permission (Scope)</strong> of <code>read<span>:</span>admin<span>-</span>messages</code> and a <strong>Description</strong> of <strong>The ability to access the admin endpoint</strong>. Click the <strong>Add</strong> button to save the new permission:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1DJaaadYXA4vGKV9i9R8LK/4564b6449b1b1d190f2345638431b92d/02_build-a-ktor-api-pt-3.png" alt="API"/>
<em>Creating an API permission.</em></p><h3 id="Creating-the-role">Creating the role</h3><p>We now create a role to hold the permissions required by our API. Click the <strong>User Management -&gt; Roles</strong> option and click the <strong>Create Role</strong> button.</p><p>In the <strong>New Role</strong> dialog, enter a name of <strong>messages-admin</strong>, enter a description, and click the <strong>Create</strong> button:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7EQTp4sJS03bScEWno7kEa/a1c2586b32a480c4b166fb4ce5ba09b5/03_build-a-ktor-api-pt-3.png" alt="Roles"/>
<em>Creating a new role.</em></p><p>Under the <strong>Permissions</strong> tab click the <strong>Add Permissions</strong> button. In the <strong>Add Permissions</strong> dialog select the API we created earlier, select the <strong>read:admin-messages</strong> permission, and click the <strong>Add Permission</strong> button:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/ZBB0FviUiLxmOzXoeDvJV/20ce7562521525551515e16e1c23bbe2/04_build-a-ktor-api-pt-3.png" alt="Permissions"/>
<em>Adding permissions to a role.</em></p><h3 id="Assigning-the-role-to-a-user">Assigning the role to a user</h3><p>For the purposes of this demo, I&#39;ll assume you have already <a href="https://auth0.com/docs/users/create-users" target="_blank" rel="noreferrer noopener">created an Auth0 user</a>. I&#39;ll also assume this user is linked to the application that was created earlier.</p><p>Select the user, click the <strong>Roles</strong> tab, and click the <strong>Assign Roles</strong> button.</p><p>In the <strong>Add Roles</strong> dialog, select the <strong>messages-admin</strong> role and click the <strong>Assign</strong> button:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6X6s3poUPbop1eG6LShtqM/b8147045f0f291e2e853b6f8027a1e74/05_build-a-ktor-api-pt-3.png" alt="User"/>
<em>Assigning a role to a user.</em></p><p>Auth0 is now configured and ready to authenticate our frontend application. We can move on to updating our Ktor HTTP API to check for the presence of these permissions when accessing the <code>admin</code> endpoint.</p><h2 id="The-sample-application-code">The sample application code</h2><p>To build the backend application, you&#39;ll need to have JDK 11 or above, which is available from many sources, including <a href="https://openjdk.java.net/install/" target="_blank" rel="noreferrer noopener">OpenJDK</a>, <a href="https://adoptopenjdk.net/" target="_blank" rel="noreferrer noopener">AdoptOpenJDK</a>, <a href="https://www.azul.com/downloads/" target="_blank" rel="noreferrer noopener">Azul</a>, or <a href="https://www.oracle.com/au/java/technologies/javase-jdk11-downloads.html" target="_blank" rel="noreferrer noopener">Oracle</a>.</p><p>The final code for the Ktor application can be found <a href="https://github.com/mcasperson/Auth0Ktor" target="_blank" rel="noreferrer noopener">here</a>. The code discussed in each post is matched by a branch:</p><ul><li><a href="https://github.com/mcasperson/Auth0Ktor/tree/starter" target="_blank" rel="noreferrer noopener">starter</a> <ul><li>the base API with no authentication or authorization.</li></ul></li><li><a href="https://github.com/mcasperson/Auth0Ktor/tree/add-authorization" target="_blank" rel="noreferrer noopener">add-authorization</a> <ul><li>the API requiring a valid access token for the <code><span>protected</span></code> and <code>admin</code> endpoints.</li></ul></li><li><a href="https://github.com/mcasperson/Auth0Ktor/tree/add-rbac" target="_blank" rel="noreferrer noopener">add-rbac</a> <ul><li>the API requiring special permissions to access the <code>admin</code> endpoint. This branch is discussed in this post.</li></ul></li></ul><p>The frontend application code can be found <a href="https://github.com/auth0-sample-gallery/spa_react_javascript_hello-world" target="_blank" rel="noreferrer noopener">here</a>.</p><h2 id="Updating-the-API">Updating the API</h2><p>The backend API must now be updated to ensure the <code>admin</code> endpoint requires the access token, including the <code>read<span>:</span>admin<span>-</span>messages</code> permission. The complete code for the <code>src<span>/</span>Application<span>.</span>kt</code> file is shown below:</p><pre><code><span>package</span> com<span>.</span>matthewcasperson

<span>import</span> com<span>.</span>auth0<span>.</span>jwk<span>.</span>JwkProviderBuilder
<span>import</span> io<span>.</span>ktor<span>.</span>application<span>.</span><span>*</span>
<span>import</span> io<span>.</span>ktor<span>.</span>auth<span>.</span><span>*</span>
<span>import</span> io<span>.</span>ktor<span>.</span>auth<span>.</span>jwt<span>.</span><span>*</span>
<span>import</span> io<span>.</span>ktor<span>.</span>features<span>.</span><span>*</span>
<span>import</span> io<span>.</span>ktor<span>.</span>http<span>.</span><span>*</span>
<span>import</span> io<span>.</span>ktor<span>.</span>response<span>.</span><span>*</span>
<span>import</span> io<span>.</span>ktor<span>.</span>routing<span>.</span><span>*</span>
<span>import</span> java<span>.</span>util<span>.</span>concurrent<span>.</span>TimeUnit

<span>fun</span> <span>main</span><span>(</span>args<span>:</span> Array<span>&lt;</span>String<span>&gt;</span><span>)</span><span>:</span> Unit <span>=</span> io<span>.</span>ktor<span>.</span>server<span>.</span>netty<span>.</span>EngineMain<span>.</span><span>main</span><span>(</span>args<span>)</span>

<span>fun</span> <span>validateCreds</span><span>(</span>credential<span>:</span> JWTCredential<span>,</span> permission<span>:</span> String<span>?</span> <span>=</span> <span>null</span><span>)</span><span>:</span> JWTPrincipal<span>?</span> <span>{</span>
    <span>val</span> containsAudience <span>=</span> credential<span>.</span>payload<span>.</span>audience<span>.</span><span>contains</span><span>(</span>System<span>.</span><span>getenv</span><span>(</span><span>&#34;AUDIENCE&#34;</span><span>)</span><span>)</span>
    <span>val</span> containsScope <span>=</span> permission<span>.</span><span>isNullOrBlank</span><span>(</span><span>)</span> <span>||</span>
            credential<span>.</span>payload<span>.</span>claims<span>[</span><span>&#34;permissions&#34;</span><span>]</span><span>?</span><span>.</span><span>asArray</span><span>(</span>String<span>::</span><span>class</span><span>.</span>java<span>)</span><span>?</span><span>.</span><span>contains</span><span>(</span>permission<span>)</span> <span>==</span> <span>true</span>

    <span>if</span> <span>(</span>containsAudience <span>&amp;&amp;</span> containsScope<span>)</span> <span>{</span>
        <span>return</span> <span>JWTPrincipal</span><span>(</span>credential<span>.</span>payload<span>)</span>
    <span>}</span>

    <span>return</span> <span>null</span>
<span>}</span>

<span>fun</span> Application<span>.</span><span>module</span><span>(</span><span>)</span> <span>{</span>

    <span>val</span> jwkProvider <span>=</span> <span>JwkProviderBuilder</span><span>(</span>System<span>.</span><span>getenv</span><span>(</span><span>&#34;ISSUER&#34;</span><span>)</span><span>)</span>
        <span>.</span><span>cached</span><span>(</span><span>10</span><span>,</span> <span>24</span><span>,</span> TimeUnit<span>.</span>HOURS<span>)</span>
        <span>.</span><span>rateLimited</span><span>(</span><span>10</span><span>,</span> <span>1</span><span>,</span> TimeUnit<span>.</span>MINUTES<span>)</span>
        <span>.</span><span>build</span><span>(</span><span>)</span>

    <span>install</span><span>(</span>Authentication<span>)</span> <span>{</span>
        <span>jwt</span><span>(</span><span>&#34;auth0&#34;</span><span>)</span> <span>{</span>
            <span>verifier</span><span>(</span>jwkProvider<span>,</span> System<span>.</span><span>getenv</span><span>(</span><span>&#34;ISSUER&#34;</span><span>)</span><span>)</span>
            validate <span>{</span> credential <span>-&gt;</span> <span>validateCreds</span><span>(</span>credential<span>)</span> <span>}</span>
        <span>}</span>
        <span>jwt</span><span>(</span><span>&#34;auth0-admin&#34;</span><span>)</span> <span>{</span>
            <span>verifier</span><span>(</span>jwkProvider<span>,</span> System<span>.</span><span>getenv</span><span>(</span><span>&#34;ISSUER&#34;</span><span>)</span><span>)</span>
            validate <span>{</span> credential <span>-&gt;</span> <span>validateCreds</span><span>(</span>credential<span>,</span> <span>&#34;read:admin-messages&#34;</span><span>)</span> <span>}</span>
        <span>}</span>
    <span>}</span>
    <span>install</span><span>(</span>CORS<span>)</span> <span>{</span>
        <span>anyHost</span><span>(</span><span>)</span>
        <span>method</span><span>(</span>HttpMethod<span>.</span>Options<span>)</span>
        <span>method</span><span>(</span>HttpMethod<span>.</span>Get<span>)</span>
        <span>header</span><span>(</span><span>&#34;authorization&#34;</span><span>)</span>
        allowCredentials <span>=</span> <span>true</span>
        allowNonSimpleContentTypes <span>=</span> <span>true</span>

    <span>}</span>


    routing <span>{</span>
        <span>get</span><span>(</span><span>&#34;/api/messages/public&#34;</span><span>)</span> <span>{</span>
            call<span>.</span><span>respondText</span><span>(</span>
                <span>&#34;&#34;&#34;{&#34;message&#34;: &#34;The API doesn&#39;t require an access token to share this message.&#34;}&#34;&#34;&#34;</span><span>,</span>
                contentType <span>=</span> ContentType<span>.</span>Application<span>.</span>Json
            <span>)</span>
        <span>}</span>
    <span>}</span>

    routing <span>{</span>
        <span>authenticate</span><span>(</span><span>&#34;auth0&#34;</span><span>)</span> <span>{</span>
            <span>get</span><span>(</span><span>&#34;/api/messages/protected&#34;</span><span>)</span> <span>{</span>
                call<span>.</span><span>respondText</span><span>(</span>
                    <span>&#34;&#34;&#34;{&#34;message&#34;: &#34;The API successfully validated your access token.&#34;}&#34;&#34;&#34;</span><span>,</span>
                    contentType <span>=</span> ContentType<span>.</span>Application<span>.</span>Json
                <span>)</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>

    routing <span>{</span>
        <span>authenticate</span><span>(</span><span>&#34;auth0-admin&#34;</span><span>)</span> <span>{</span>
            <span>get</span><span>(</span><span>&#34;/api/messages/admin&#34;</span><span>)</span> <span>{</span>
                call<span>.</span><span>respondText</span><span>(</span>
                    <span>&#34;&#34;&#34;{&#34;message&#34;: &#34;The API successfully recognized you as an admin.&#34;}&#34;&#34;&#34;</span><span>,</span>
                    contentType <span>=</span> ContentType<span>.</span>Application<span>.</span>Json
                <span>)</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
<span>}</span></code></pre><p>Let&#39;s highlight the changes required from the code presented in the previous blog post.</p><p>We&#39;ve updated the <code>validateCreds</code> function to include an optional <code>permission</code> parameter. If a permission has been supplied, we ensure it is present in the <code>permissions</code> claim on the access token:</p><pre><code><span>fun</span> <span>validateCreds</span><span>(</span>credential<span>:</span> JWTCredential<span>,</span> permission<span>:</span> String<span>?</span> <span>=</span> <span>null</span><span>)</span><span>:</span> JWTPrincipal<span>?</span> <span>{</span>
    <span>val</span> containsAudience <span>=</span> credential<span>.</span>payload<span>.</span>audience<span>.</span><span>contains</span><span>(</span>System<span>.</span><span>getenv</span><span>(</span><span>&#34;AUDIENCE&#34;</span><span>)</span><span>)</span>
    <span>val</span> containsScope <span>=</span> permission<span>.</span><span>isNullOrBlank</span><span>(</span><span>)</span> <span>||</span>
            credential<span>.</span>payload<span>.</span>claims<span>[</span><span>&#34;permissions&#34;</span><span>]</span><span>?</span><span>.</span><span>asArray</span><span>(</span>String<span>::</span><span>class</span><span>.</span>java<span>)</span><span>?</span><span>.</span><span>contains</span><span>(</span>permission<span>)</span> <span>==</span> <span>true</span>

    <span>if</span> <span>(</span>containsAudience <span>&amp;&amp;</span> containsScope<span>)</span> <span>{</span>
        <span>return</span> <span>JWTPrincipal</span><span>(</span>credential<span>.</span>payload<span>)</span>
    <span>}</span>

    <span>return</span> <span>null</span>
<span>}</span></code></pre><p>We then define a second authentication mechanism called <code>auth0<span>-</span>admin</code> requiring the permission <code>read<span>:</span>admin<span>-</span>messages</code> in order to pass validation:</p><pre><code>    <span>install</span><span>(</span>Authentication<span>)</span> <span>{</span>
        <span>// ...</span>
        <span>jwt</span><span>(</span><span>&#34;auth0-admin&#34;</span><span>)</span> <span>{</span>
            <span>verifier</span><span>(</span>jwkProvider<span>,</span> System<span>.</span><span>getenv</span><span>(</span><span>&#34;ISSUER&#34;</span><span>)</span><span>)</span>
            validate <span>{</span> credential <span>-&gt;</span> <span>validateCreds</span><span>(</span>credential<span>,</span> <span>&#34;read:admin-messages&#34;</span><span>)</span> <span>}</span>
        <span>}</span>
    <span>}</span></code></pre><p>Finally, the route exposing the <code>admin</code> endpoint is updated to use the new <code>auth0<span>-</span>admin</code> authentication mechanism:</p><pre><code>    routing <span>{</span>
        <span>authenticate</span><span>(</span><span>&#34;auth0-admin&#34;</span><span>)</span> <span>{</span>
            <span>get</span><span>(</span><span>&#34;/api/messages/admin&#34;</span><span>)</span> <span>{</span>
                call<span>.</span><span>respondText</span><span>(</span>
                    <span>&#34;&#34;&#34;{&#34;message&#34;: &#34;The API successfully recognized you as an admin.&#34;}&#34;&#34;&#34;</span><span>,</span>
                    contentType <span>=</span> ContentType<span>.</span>Application<span>.</span>Json
                <span>)</span>
            <span>}</span>
        <span>}</span>
    <span>}</span></code></pre><h2 id="Inspecting-the-access-token">Inspecting the access token</h2><p>By capturing the network traffic sent by the frontend (as we did in the previous post), we can copy the access token to <a href="https://jwt.io" target="_blank" rel="noreferrer noopener">jwt.io</a> to inspect the JWT contents.</p><p>Note that the token includes the <code>permissions</code> claim, which defines the <code>read<span>:</span>admin<span>-</span>messages</code> permission:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/eFammxKcqhwLSKDPgfxRU/8b24e9b2c662143d983b4033aef61197/Assigning_the_role_to_a_user.jpg" alt="Inspecting the access token"/>
<em>A parsed JWT token.</em></p><h2 id="Conclusion">Conclusion</h2><p>In this post, we completed our three-part journey creating an HTTP API with Ktor, requiring authentication via Auth0, and finally enabling RBAC. By embedding the permissions assigned to a user in the <code>permissions</code> scope and verifying the presence of a known permission for any queries to the <code>admin</code> endpoint, we can be sure that only authorized users can access the restricted endpoints in our HTTP API.</p></div></div>]]></content:encoded>
      <pubDate>Tue, 03 Aug 2021 15:12:00 +0000</pubDate>
    </item>
    <item>
      <title>Time to Prepare: Be Ready to Scale Your Workforce and App</title>
      <link>https://auth0.com/blog/time-to-prepare-be-ready-to-scale-your-workforce-and-app/</link>
      <description>The consumer speaks — how readiness to scale wins the security and privacy battle for the customer</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>If you sped through your digital road map during the pandemic and are looking to fill security and privacy gaps right now, go back and check out my earlier posts:</p><ul><li><a href="https://auth0.com/blog/accelerated-your-road-map-go-fix-workforce-and-app-security" target="_blank" rel="noreferrer noopener">Accelerated Your Road Map? Go Fix Workforce and App Security</a></li><li><a href="https://auth0.com/blog/workforce-and-app-privacy-have-changed-so-should-you" target="_blank" rel="noreferrer noopener">Workforce and App Privacy Have Changed, So Should You</a></li></ul><p>This post is about making the shift from reaction to preparation so that you are ready for the next moment that requires speed – and set up to scale.</p><h2 id="Find-Your-Balance">Find Your Balance</h2><p>In all of these posts, we mention speed and imply pressure. There is always going to be a business reason to get an app to market as quickly as possible. You will discover vulnerabilities that require your immediate attention. And regulations will set deadlines for you. </p><p>So there is always going to be more you could do to improve security for your customers, your business, and the rest of the internet. Even for veteran security professionals, the pandemic was a reminder that we still need to pick and choose priorities. If you have an internal security team, lean into their expertise. Give them the time and space to guide you on priorities. Listen to their assessments of risk and let them set a pace that works for your business.</p><p>Longer-term security and privacy improvements can have big payoffs. Like the previous posts, these things require action. You’re also going to need to support your existing security team or create one. By support, I mean backing conversations about risks with budget for tools, external vendors, and hiring internal talent.</p><p>If you don’t currently have security or privacy teams, we’ll cover a bit of advice on what to look for as well.</p><h2 id="Consumers-Expect-and-Deserve-Strong-Security-and-Privacy">Consumers Expect and Deserve Strong Security and Privacy</h2><p>Let’s also set some context.</p><p>There was a time when businesses leaned heavily into just shipping the product. Speed often won over security or privacy.</p><blockquote><p>Consumers are telling us that time is over.</p></blockquote><p>In a <a href="https://www.mckinsey.com/business-functions/risk/our-insights/the-consumer-data-opportunity-and-the-privacy-imperative" target="_blank" rel="noreferrer noopener">recent global survey</a>, McKinsey found that 87% of consumer respondents said security practice concerns would mean they wouldn’t do business with a company, and 71% would stop doing business if it gave away sensitive data without their permission. </p><blockquote><p>The more secure and private app is now the one that keeps and attracts customers. </p></blockquote><h2 id="Security--Longer-Term-Planning">Security: Longer-Term Planning</h2><p>If you’re looking to make a dramatic improvement in your cybersecurity, these best practices will help get you there.</p><ul><li><strong>Increase pen test frequency.</strong> Penetration testing (pen testing) includes hiring an external vendor to test your application and site for vulnerabilities and provide you with a report cataloged by severity. Many companies do this once a year and call it good. In today’s evolving threat environment, that’s not enough. If you can up your pen testing to every quarter — and take action on what you learn — you’ll see a big increase in security. Adding a pen test after every major operating system upgrade, library update, or major code push will do even more.</li><li><strong>Improve your software development life cycle (SLDC).</strong> Many shops are still doing security after the product is completely coded, but this creates an automatic security backlog that can not only slow getting your product to market it can put pressure on your execs to allow unnecessary risks into the wild. Involving security and privacy teams as software is being developed allows them to raise questions that influence architecture before burning hours of engineering time. Few people like to put hours and hours into something only to have to take it apart, so your devs are rarely pleased to see this analysis tacked on at the end of the SLDC., which leads me to my next point.</li><li><strong>Encourage ownership and collaboration between devs and security.</strong> How you introduce the idea of static and dynamic code analysis as well as overall participation of security in the SLDC matters. Explaining that humans are fallible, so all code is going to have vulnerabilities, and there are going to be remote code executions (RCEs) is a good place to start. As a dev, they don’t want RCEs creating headaches, and they don’t want to get paged and work nights because problems have been discovered and exploited. You can encourage ownership by asking your dev team to review the security team handling analyses. Ultimately, this can go a long way towards establishing security-dev collaboration, leading to apps that get to market more securely as well quickly.</li><li><strong>Create a golden image.</strong> A <a href="https://www.cisecurity.org/cis-hardened-images/" target="_blank" rel="noreferrer noopener">golden Image</a>is a single machine image that has been tested and hardened. When there is an operating system or library update, the AMI gets updated and tested. This allows you to see how your customers might be impacted before you push that patch update out to thousands of users. It also provides an approved starting point for new business units or apps. The time it takes to create and maintain this image pays off in protected services and reduced downtimes. Using <a href="https://en.wikipedia.org/wiki/Hardening_(computing" target="_blank" rel="noreferrer noopener">hardened</a>) images also increases reliability and consistency.</li></ul><h2 id="Hiring-Security-Talent">Hiring Security Talent</h2><p>Security can seem like an area that is purely technical — and your team does need to have a deep understanding of your product and how it works, but sooner or later, a human is going to touch or use your product. Strong security talent needs to understand human behavior from bad actors to customers. Your chief information security officer (CISO) also needs to be able to explain technical risks and benefits to non-technical executive teams.</p><p>There’s a cybersecurity talent shortage globally. According to an International Information System Security Certification Consortium (ISC)² <a href="https://www.isc2.org/Research/Workforce-Study#" target="_blank" rel="noreferrer noopener">report</a>, that shortage shrank slightly during the pandemic, from 4 million open jobs in 2019 to 3.1 million. You’re going to need to compete for talent.</p><p>Your new CISO also needs to understand your industry because threats are often industry-specific. Here are some questions to ask your hiring team when considering a potential candidate:</p><ul><li>Are they passionate about not only security but also your company?</li><li>Do they have experience in your industry? If not, how adept are they at cross-applying knowledge?</li><li>Areas of expertise? If you need them to be a generalist, do they understand how to source third-party support (and are you willing to fund that support)?</li><li>Do they welcome diversity?</li><li>Do they contribute to open source security?</li><li>Do they regularly attend and speak at conferences?</li><li>Can they explain the business case for your product?</li></ul><h2 id="Privacy--Longer-Term-Planning">Privacy: Longer-Term Planning</h2><p>Consumers are demanding a secure and contextual private experience — and we’re seeing regulators back them up with a variety of data privacy regulations.</p><p>&#34;<em>By industry, consumers are most comfortable sharing data with providers in healthcare and financial services, though no industry reached a trust rating of 50 percent for data protection,</em>” notes <a href="https://www.mckinsey.com/business-functions/risk/our-insights/the-consumer-data-opportunity-and-the-privacy-imperative" target="_blank" rel="noreferrer noopener">McKinsey</a>.</p><p>This isn’t one of those things that is going away, says Auth0’s Vice President of Privacy Lucy McGrath. Globally, we’re seeing consumer groups becoming more vocal about data privacy concerns and violations with filings against companies like <a href="https://www.beuc.eu/publications/consumer-groups-file-complaint-against-whatsapp-unfairly-pressuring-users-accept-its/html" target="_blank" rel="noreferrer noopener">What’sApp</a>. </p><p>“<em>Data privacy is going to continue to evolve with consumers’ awareness and expectations,</em>” says Lucy. “<em>To adapt, companies are going to have to think beyond just meeting the bare minimum of legal requirements. They need to ask themselves hard questions about what protections are appropriate given the context and the humans you’re interacting with and work through the answers. We need to be building proactive privacy programs that reflect these data privacy conversations. Creating consumer trust requires listening and deliberate action.</em>”</p><p>Start with these questions:</p><ul><li>Have I taken the time to understand the relationship my digital properties (app, site) create with my customers? How do I want them to feel at login? What about as they continue through my app or site?</li><li>Am I encouraging or discouraging trust by how I gather consent and data?</li><li>Have I created a transparent customer experience (CX) with clear consent and options?</li><li>If I am really honest with myself, do I need to change something? Do I really need this data?</li><li>Who are my customers? What does privacy mean to them in the context of my services?</li><li>Do I have appropriate basic security and data governance processes in place?</li><li>Have I invested extra resources and time to protect the most sensitive/high-risk data such as health, financial, religious, or sexual orientation information?</li><li>Do I have any customers in regulated jurisdictions such as the European Union (EU) or California? If so, when was the last time I checked in with my legal counsel to make sure I’m in line with current requirements?</li></ul><h2 id="Provide-Cues-for-Safety-and-Trust">Provide Cues for Safety and Trust</h2><p><a href="https://www.wired.com/story/apple-app-privacy-labels/" target="_blank" rel="noreferrer noopener">Apple’s nutrition labels for data privacy</a> make good on efforts that have been around since the 2010s. If your new app is going to be in the App Store, Apple requires that you report publicly on data you’re using to track your customers, data linked to them, and data gathered but not linked to them. Even though Apple is relying on app developers to self-report, the labels increase consumer awareness and expectation, says Lucy. Given Apple’s size ($274.5 billion reported revenue in 2020 makes it the world’s largest company), these nutrition labels signal that data privacy is now an everyday consumer concern.</p><p>“<em>Businesses who don’t respond could miss out</em>”, says Lucy. “<em>The threats of data privacy fines and unhappy customers are real, but so is the opportunity to create customer experiences (CX) that drive brand loyalty. The entire tech industry is coming together to work on these data privacy challenges. Companies that act on the side of the consumer stand out.</em>”</p><h2 id="Hiring-Data-Privacy-Talent">Hiring Data Privacy Talent</h2><p>Like security, data privacy professionals need to understand and express the intersection of humans and technology. They need to be able to communicate risks and benefits across an entire organization, with an emphasis on engineering, marketing, and senior leadership. Critical and analytical thinking, empathy, and consideration of different motivations and perspectives are key. Technical knowledge around privacy laws can be taught, but an ability to engage, listen and understand the context of the business and their customers is essential. Privacy isn’t “done” by privacy professionals - they support all parts of the business to build privacy protections into their individual business processes.</p><p>Lucy recommends that you ask candidates questions to show how they think about privacy issues in the context of the businesses in which they work. Examples of such questions include: </p><ul><li>How would you demonstrate the value of good privacy practices to the chief financial officer (CFO)?</li><li>How do you respond to the statement: privacy slows the business down?</li><li>What can you do to support developers to integrate privacy controls into their development lifecycle?</li><li>Provide examples of when you have translated legal obligations into plain English requirements that the business can implement?</li><li>Which company does privacy well? Why? How would you implement similar standards here?</li><li>What are the key privacy risks that need to be prioritized? What actions are required to mitigate these risks?</li></ul><h2 id="You-re-Helping-Make-the-Internet-Safer">You’re Helping Make the Internet Safer</h2><p>Thank you for checking out this series. One of the things that came up while working on this content is how the pandemic has made everything even more connected. The <a href="https://auth0.com/resources/whitepapers/state-of-security-identity-report" target="_blank" rel="noreferrer noopener">threat landscape</a> and regulatory requirements can seem overwhelming, but taking the time to secure your personal data, your customer’s data, and your businesses make it harder for bad actors.</p><p>Identity can be a weak spot for both security and privacy if it’s not handled by experts. A strong Customer Identity Access Management (CIAM) solution like Auth0 can increase your security, support your data privacy strategy, and comes with certifications for various compliance requirements like <a href="https://auth0.com/blog/what-is-iso-27001-2013-a-guide-for-businesses/" target="_blank" rel="noreferrer noopener">ISO 27001:2013</a> and <a href="https://auth0.com/blog/what-is-iso-27018-2019-everything-executives-need-to-know/" target="_blank" rel="noreferrer noopener">ISO 27018:2019</a> and <a href="https://auth0.com/blog/the-csa-star-program-a-business-guide-to-certification/" target="_blank" rel="noreferrer noopener">CSA Star</a>. If you’d like to learn more about how Auth0 can help make your business more secure and stay ahead of your customers’ evolving expectations, please <a href="https://auth0.com/contact-us?place=header&amp;type=button&amp;text=contact%20sales" target="_blank" rel="noreferrer noopener">reach out to the team at Auth0</a>.</p><div><h2 id="About-Auth0">About Auth0 </h2><p>Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit <a href="https://auth0.com/" target="_blank" rel="noopener noreferrer">https://auth0.com</a>.</p></div></div></div>]]></content:encoded>
      <pubDate>Fri, 30 Jul 2021 16:32:00 +0000</pubDate>
    </item>
    <item>
      <title>LATAM Response to Rapid Digital Change</title>
      <link>https://auth0.com/blog/latam-response-to-rapid-digital-change/</link>
      <description>Why Naranja and Wabi turned to Auth0 to ensure identity expertise and scaling</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>The market in Latin America is growing faster than ever, with new venture capital deals nearly doubling to 488 between 2017 and 2020, according to <a href="https://www.bloomberg.com/news/articles/2021-03-16/latin-american-startups-had-record-venture-capital-deals-in-2020" target="_blank" rel="noreferrer noopener">Bloomberg</a>. Beyond VC, a <a href="https://publications.iadb.org/publications/english/document/Tecnolatinas-2021-The-LAC-Startup-Ecosystem-Comes-of-Age.pdf" target="_blank" rel="noreferrer noopener">study by IDB lab</a> revealed that the tech-enabled startup market hit a valuation of more than $220 billion USD in 2020.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/Gz6t31FLxbPc7r8T996gE/caed742f057acf90192df17560dbf527/Latam11.jpg" alt="LATAM"/></p><p>Globally, the pandemic has <a href="https://auth0.com/blog/how-brick-and-mortar-approaches-improve-digital-experiences/" target="_blank" rel="noreferrer noopener">accelerated digital road maps across industries</a> and businesses now have to respond to changes in digital expectations and buying patterns.
</p><div itemscope="" itemtype="http://schema.org/Person" itemprop="author"><p>“Companies cannot predict exactly what their business and customers will need tomorrow, especially in response to today’s rapidly changing digital environment.”</p><p>Gabriel Camargo</p><p>Product Director</p><p>CLM</p></div><p>Partnering with <a href="https://auth0.com/blog/auth0-expands-global-partner-network-in-latin-america-with-clm/" target="_blank" rel="noreferrer noopener">CLM</a> on distribution in Latin America (LATAM) extends Auth0’s reach into Brazil, Colombia, Ecuador, and Peru.</p><p>Over the years of working within Latin America, we’ve learned that <a href="https://auth0.com/blog/building-an-identity-solution-quantity-doesnt-equal-quality" target="_blank" rel="noreferrer noopener">identity expertise</a> and <a href="https://auth0.com/blog/can-your-identity-solution-grow-with-your-company" target="_blank" rel="noreferrer noopener">scalability</a> are two critical areas of concern for businesses in the region. You can check out our earlier posts in this series for details, but here, we wanted to look more closely at how we were able to help two companies within the region.</p><h2 id="Naranja---From-Leading-Credit-Card-Issuer-in-Argentina--To-Complete-Consumer-Ecosystem">Naranja — From Leading Credit Card Issuer in Argentina, To Complete Consumer Ecosystem</h2><p><a href="https://auth0.com/case-studies/naranja/" target="_blank" rel="noreferrer noopener">Fintech leader Naranja</a> has been providing credit cards to the Argentinian market for over 30 years. In that time, they’ve grown to cover over 5 million customers by keeping those customers’ needs their top priority. As they grew, Naranja also began to integrate additional verticals into their business model. Pretty soon, they were offering payment services, financing, travel, media, and other services beyond their credit card programs.</p><p>As they added these verticals, Naranja’s head of engineering Javier Voos soon realized they would need to consolidate their identity solution to cover all aspects of their growing ecosystem. He knew that in order to continue putting the customer experience first, they would need to find the right IDaaS provider that would be able to scale along with their planned expansion.</p><p><a href="https://www.youtube.com/watch?v=kqouiuVk07Q&amp;feature=emb_imp_woyt" target="_blank" rel="noreferrer noopener">link to video</a></p><iframe width="560" height="315" src="https://www.youtube.com/embed/kqouiuVk07Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><div itemscope="" itemtype="http://schema.org/Person" itemprop="author"><p>“The main idea behind the Naranja ecosystem is to provide the best experience to our customers, making sure that our digital platform provides all the resources that an online business needs for success, and hence support the ecosystem evolution.”</p><p>Javier Voos</p><p>Head of Engineerin</p><p>Naranja</p></div><p>Voos’ priority was to find a platform that provided secure APIs for identity so they could focus their expansion efforts on B2B services alongside their expanded consumer offerings. Finding Auth0 meant that his team could implement one identity solution that would allow both B2B and B2C customers access to the platforms they needed access to while ensuring data privacy and a low-friction user experience.
</p><div itemscope="" itemtype="http://schema.org/Person" itemprop="author"><p>“Auth0 gave our company the tools to secure the access to our API for first- and third-party consumers, in a way that can scale through time and put us in a better position to ally with new partners and work our way to a fully functional Naranja API Market.”</p><p>Danilo Asis</p><p>Solution Architect</p><p>Naranja</p></div><h2 id="WABI---South-America-s-E-Commerce-Portal">WABI — South America’s E-Commerce Portal</h2><p>With a half-dozen offerings already on offer, <a href="https://auth0.com/case-studies/wabipay/" target="_blank" rel="noreferrer noopener">WABI</a> is looking to the future. Their ambitious goal is to become Latin America’s go-to e-commerce portal. Their offerings already include WABI, a smartphone-based grocery service; Wabipay, an e-wallet app; and four additional applications. The end-goal WABI envisions is for customers to log in one time and have access to a complete, end-to-end e-commerce experience. They’ll be able to shop, pay, and track delivery all in one place.</p><p>Juan Manuel Mingo, former WABI Business Manager, sums up the hurdle they faced when it came to identity and customer authentication, “We had different platforms with different user registration processes,” he says. “Our aim was to unify all the user registration of the different platforms in order to get a better user experience and to have a more organized user database.” The disjointed customer experience was the first thing WABI knew they would have to solve before they could continue growing and expanding their e-commerce ecosystem. </p><div itemscope="" itemtype="http://schema.org/Person" itemprop="author"><p>“Our endgame is that you enter the ecosystem through Wabi. You log in to Wabi, order your things, and when you want to pay, you simply go to WabiPay, and you’re already logged in.”</p><p>Frederico Galli</p><p>General Manager</p><p>WABI</p></div><p>Like Naranja, WABI has always had a customer-first attitude. That meant that customer-facing features like single sign-on were top priorities. As Frederico Galli stated, their endgame is for customers to sign in once and have access to the entire ecosystem of WABI offerings. Not only that, but with further expansion plans in the works, they needed an identity solution that was with them for the long haul. Juan Manual Mingo put it like this, “WABI is scalable, and we need a partner that is, too. We believe Auth0 will support us in getting there.”</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/P45m9X6Z8ag9oOTv8R4kW/cc92f6325cb89fd84f233aa6c6992218/Latam12.jpg" alt="LATAM"/></p><h2 id="Learn-how-Auth0-can-help-your-business">Learn how Auth0 can help your business</h2><p><a href="https://www.forbesargentina.com/editorial/la-increible-historia-auth0-cliente-us-27-quinto-unicornio-hoy-vale-us-1100-n1352" target="_blank" rel="noreferrer noopener">Argentinian talent Eugenio Pace and Matias Wolowski</a> founded Auth0, so we know the ins and outs of the South American market. When you’re ready to bring your identity solution in line with your broader organizational expansion goals, reach out to our <a href="https://auth0.com/contact-us" target="_blank" rel="noreferrer noopener">market experts</a> to start the discussion about how we can help.</p><div><h2 id="About-Auth0">About Auth0 </h2><p>Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit <a href="https://auth0.com/" target="_blank" rel="noopener noreferrer">https://auth0.com</a>.</p></div></div></div>]]></content:encoded>
      <pubDate>Fri, 30 Jul 2021 12:45:00 +0000</pubDate>
    </item>
    <item>
      <title>A Complete Guide to Lombok</title>
      <link>https://auth0.com/blog/a-complete-guide-to-lombok/</link>
      <description>Let’s see everything you should know to start using Project Lombok. We will have a look at how to integrate it into your IDE and use it to avoid boilerplate code.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>Java is a great but verbose language. You may be ending up writing many lines of code even to achieve the most common goals. Plus, it definitely involves repetitive code, like getters and setters. This leads to a huge amount of boilerplate and avoidable code. Not only does this add nothing to the business logic of your application, but writing it is an unnecessarily boring and time-consuming process. This is why you should start employing tools and libraries to make you more productive by avoiding this. That’s where Lombok comes into play!</p><p>This Java library provides you with several annotations aimed at avoiding writing Java code known to be repetitive and/or boilerplate. Project Lombok works by plugging into your build process. Then, it will auto-generate the Java bytecode into your <em>.class</em> files required to implement the desired behavior, based on the annotations you used. Thus, each annotation offered by Project Lombok allows you to skip writing methods and logic you would like to avoid, like constructors, equals, and hash code functions. This will save you a lot of time and let you focus on the business logic of your project. Plus, you will be able to keep your codebase smaller, cleaner, and easier to be read and maintained.</p><p>First, we will see what Project Lombok is and how it works. Then, we will study the most common and relevant Lombok’s annotations, understanding what the most important ones are, where, and how to use them. Next, it will be time to see how to integrate it in your IDE (<a href="https://en.wikipedia.org/wiki/Integrated_development_environment" target="_blank" rel="noreferrer noopener">Integrated Development Environment</a>) and why you should not be afraid of using it.</p><h2 id="Prerequisites">Prerequisites</h2><p>This is the list of all the prerequisites to replicate the examples that will be shown next:</p><ul><li>Java &gt;= 1.8</li><li>Gradle &gt;= 4.x or Maven 3.6.x</li><li>Project Lombok &gt;= 1.18.20</li></ul><h2 id="What-is-Lombok">What is Lombok</h2><p><a href="https://projectlombok.org/" target="_blank" rel="noreferrer noopener">Project Lombok</a> (from now on, <em>Lombok</em>) is an annotation-based Java library that allows you to reduce boilerplate code. Lombok offers various annotations aimed at replacing Java code that is well known for being boilerplate, repetitive, or tedious to write. For example, by using Lombok, you can avoid writing constructors with no arguments, <code><span>toString</span><span>(</span><span>)</span></code>, <code><span>equals</span><span>(</span><span>)</span></code>, and <code><span>hashCode</span><span>(</span><span>)</span></code> methods by simply adding a few annotations. The magic happens during the compile-time when the library injects the bytecode representing the desired and boilerplate code into your <em>.class</em> files. Plus, as we will see, the library can be plugged into your IDE, letting you have the same experience as if you had written all the boilerplate code yourself.</p><p>You can easily install Lombok by adding <a href="https://mvnrepository.com/artifact/org.projectlombok/lombok/1.18.20" target="_blank" rel="noreferrer noopener"><code>lombok</code></a> to your dependencies.
If you are a <a href="https://projectlombok.org/setup/gradle" target="_blank" rel="noreferrer noopener">Gradle user</a>, add these two lines to the dependencies section of your <code>build<span>.</span>gradle</code> file:</p><pre><code>compileOnly <span>&#39;org.projectlombok:lombok:1.18.20&#39;</span>
annotationProcessor <span>&#39;org.projectlombok:lombok:1.18.20&#39;</span></code></pre><p>While if you are a <a href="https://projectlombok.org/setup/maven" target="_blank" rel="noreferrer noopener">Maven user</a>, add the following dependency to your <code>pom<span>.</span>xml</code> file:</p><pre><code><span><span><span>&lt;</span>dependency</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.projectlombok<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>lombok<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>version</span><span>&gt;</span></span>1.18.20<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>scope</span><span>&gt;</span></span>provided<span><span><span>&lt;/</span>scope</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>dependency</span><span>&gt;</span></span></code></pre><p>Plus, add the Lombok dependency to the <a href="https://maven.apache.org/plugins/maven-compiler-plugin/" target="_blank" rel="noreferrer noopener"><code>maven<span>-</span>compiler<span>-</span>plugin</code></a> configuration section as follows :</p><pre><code><span><span><span>&lt;</span>build</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>plugins</span><span>&gt;</span></span>      
            
            <span><span><span>&lt;</span>plugin</span><span>&gt;</span></span>
                  <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.apache.maven.plugins<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
                  <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>maven-compiler-plugin<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
                  <span><span><span>&lt;</span>version</span><span>&gt;</span></span>3.5.1<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
                  <span><span><span>&lt;</span>configuration</span><span>&gt;</span></span>
                        <span><span><span>&lt;</span>source</span><span>&gt;</span></span>11<span><span><span>&lt;/</span>source</span><span>&gt;</span></span> <span>&lt;!-- depending on your project --&gt;</span>
                        <span><span><span>&lt;</span>target</span><span>&gt;</span></span>11<span><span><span>&lt;/</span>target</span><span>&gt;</span></span> <span>&lt;!-- depending on your project --&gt;</span>
                        <span><span><span>&lt;</span>annotationProcessorPaths</span><span>&gt;</span></span>
                              <span><span><span>&lt;</span>path</span><span>&gt;</span></span>
                                    <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.projectlombok<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
                                    <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>lombok<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
                                    <span><span><span>&lt;</span>version</span><span>&gt;</span></span>1.18.20<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
                              <span><span><span>&lt;/</span>path</span><span>&gt;</span></span>                              
                        <span><span><span>&lt;/</span>annotationProcessorPaths</span><span>&gt;</span></span>
                  <span><span><span>&lt;/</span>configuration</span><span>&gt;</span></span>
            <span><span><span>&lt;/</span>plugin</span><span>&gt;</span></span>
            
            <span>&lt;!-- ... --&gt;</span>  
            
      <span><span><span>&lt;/</span>plugins</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>build</span><span>&gt;</span></span></code></pre><p>Now, you have all you need to start using Lombok.</p><h2 id="Most-Common-Lombok-Annotations">Most Common Lombok Annotations</h2><p>Here you can find the most common and important Lombok annotations. Each of them will be explained and then seen in use compared to the equivalent Java vanilla translation. To see examples and get more support, click on each annotation and visit its page on the <a href="https://projectlombok.org/features/all" target="_blank" rel="noreferrer noopener">Lombok official documentation</a>.</p><h3 id="---Getter---https---projectlombok-org-features-GetterSetter------Setter---https---projectlombok-org-features-GetterSetter-"><a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noreferrer noopener"><code>@Getter</code></a>, <a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noreferrer noopener"><code>@Setter</code></a></h3><p>When a field is annotated with <code>@Getter</code> and/or <code>@Setter</code>, Lombok will automatically generate the default getter and/or setter, respectively. The default implementation for getters simply takes care of returning the annotated field. Similarly, the default implementation for setters takes one parameter of the same type as the annotated field and simply sets it with the received value. When a field called <code>value</code> is annotated with both <code>@Getter</code> and <code>@Setter</code>, Lombok will define a <code><span>getValue</span><span>(</span><span>)</span></code> (or <code><span>isValue</span><span>(</span><span>)</span></code> if the field is <code>boolean</code>), and a <code><span>setValue</span><span>(</span><span>)</span></code> method. The generated getter/setter method will be <code><span>public</span></code>, unless a particular <code>AccessLevel</code> is specified. The allowed <code>AccessLevel</code> values are <code><span>PUBLIC</span></code>, <code><span>PROTECTED</span></code>, <code><span>PACKAGE</span></code>, and <code><span>PRIVATE</span></code>. Please, note that you can also annotate the entire class. In this case, this logic will be applied to each field.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>@Getter</span>
<span>@Setter</span>
<span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>@Setter</span><span>(</span><span>AccessLevel</span><span>.</span>PROTECTED<span>)</span>
    <span>private</span> <span>String</span> surname<span>;</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>User</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>

    <span>public</span> <span>int</span> <span>getId</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> id<span>;</span>
    <span>}</span>

    <span>public</span> <span>void</span> <span>setId</span><span>(</span><span>int</span> id<span>)</span> <span>{</span>
        <span>this</span><span>.</span>id <span>=</span> id<span>;</span>
    <span>}</span>

    <span>public</span> <span>String</span> <span>getName</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> name<span>;</span>
    <span>}</span>

    <span>public</span> <span>void</span> <span>setName</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>
        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
    <span>}</span>

    <span>public</span> <span>String</span> <span>getSurname</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> surname<span>;</span>
    <span>}</span>

    <span>protected</span> <span>void</span> <span>setSurname</span><span>(</span><span>String</span> surname<span>)</span> <span>{</span>
        <span>this</span><span>.</span>surname <span>=</span> surname<span>;</span>
    <span>}</span>
<span>}</span></code></pre><h3 id="---NoArgsConstructor---https---projectlombok-org-features-constructor------RequiredArgsConstructor---https---projectlombok-org-features-constructor------AllArgsConstructor---https---projectlombok-org-features-constructor-"><a href="https://projectlombok.org/features/constructor" target="_blank" rel="noreferrer noopener"><code>@NoArgsConstructor</code></a>, <a href="https://projectlombok.org/features/constructor" target="_blank" rel="noreferrer noopener"><code>@RequiredArgsConstructor</code></a>, <a href="https://projectlombok.org/features/constructor" target="_blank" rel="noreferrer noopener"><code>@AllArgsConstructor</code></a></h3><p>When a class is annotated with <code>@NoArgsConstructor</code>, Lombok will take care of automatically generating a constructor with no parameters. Likewise, when annotated with <code>@AllArgsConstructor</code>, a constructor with one parameter for each field in your class will be generated. Similarly, <code>@RequiredArgsConstructor</code> leads to a constructor with a parameter for each field requiring special handling. In particular, this involves non-initialized <code>final</code> fields, as well as any fields marked as <code>@NonNull</code> that are not initialized where declared. Please, do not forget that static fields will be ignored by these annotations.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>@NoArgsConstructor</span>
<span>@AllArgsConstructor</span>
<span>@RequiredArgsConstructor</span>
<span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>
    <span>private</span> <span>final</span> <span>String</span> birthPlace<span>;</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>
    <span>private</span> <span>final</span> <span>String</span> birthPlace<span>;</span>

    <span>// @NoArgsConstructor</span>
    <span>public</span> <span>Author</span><span>(</span><span>)</span> <span>{</span><span>}</span>

    <span>// @AllArgsConstructor</span>
    <span>public</span> <span>Author</span><span>(</span><span>int</span> id<span>,</span> <span>String</span> name<span>,</span> <span>String</span> surname<span>,</span> <span>String</span> birthPlace<span>)</span> <span>{</span>
      <span>this</span><span>.</span>id <span>=</span> id
      <span>this</span><span>.</span>name <span>=</span> name
      <span>this</span><span>.</span>surname <span>=</span> surname
      <span>this</span><span>.</span>birthPlace <span>=</span> birthPlace
    <span>}</span>

    <span>// @RequiredArgsConstructor</span>
    <span>public</span> <span>Author</span><span>(</span><span>String</span> birthPlace<span>)</span> <span>{</span>
      <span>this</span><span>.</span>birthPlace <span>=</span> birthPlace
    <span>}</span>
<span>}</span></code></pre><h3 id="---ToString---https---projectlombok-org-features-ToString-"><a href="https://projectlombok.org/features/ToString" target="_blank" rel="noreferrer noopener"><code>@ToString</code></a></h3><p>When a class is annotated with <code>@ToString</code>, Lombok will take care of generating a proper implementation of the <code><span>toString</span><span>(</span><span>)</span></code> method. By default, a String containing the class name, followed by each field&#39;s value separated by a comma, will be returned. By setting the <code>includeFieldNames</code> parameter to <em>true</em>, the name of each field will be placed before its value. By default, all non-static fields will be considered when generating the <code><span>toString</span><span>(</span><span>)</span></code> method. Annotate a field with <code>@ToString<span>.</span>Exclude</code> to make Lombok ignore it. Alternatively, you can specify which fields you wish to be taken into account by using <code>@<span>ToString</span><span>(</span>onlyExplicitlyIncluded <span>=</span> <span>true</span><span>)</span></code>. Then, mark each field you want to include with <code>@ToString<span>.</span>Include</code>.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>@ToString</span><span>(</span>includeFieldNames<span>=</span><span>true</span><span>)</span>
<span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>

    <span>@Override</span> 
    <span>public</span> <span>String</span> <span>toString</span><span>(</span><span>)</span> <span>{</span>
      <span>return</span> <span>&#34;Author(id=&#34;</span> <span>+</span> <span>this</span><span>.</span>id <span>+</span> <span>&#34;, name=&#34;</span> <span>+</span> <span>this</span><span>.</span>name <span>+</span> <span>&#34;, surnname=&#34;</span> <span>+</span> <span>this</span><span>.</span>surname <span>+</span> <span>&#34;)&#34;</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre><h3 id="---EqualsAndHashCode---https---projectlombok-org-features-EqualsAndHashCode-"><a href="https://projectlombok.org/features/EqualsAndHashCode" target="_blank" rel="noreferrer noopener"><code>@EqualsAndHashCode</code></a></h3><p>Annotate a class with <code>@EqualsAndHashCode</code>, and Lombok will automatically implement the <code><span>equals</span><span>(</span><span>)</span></code> and <code><span>hashCode</span><span>(</span><span>)</span></code> methods for you. By default, all non-static, non-transient fields will be taken into account. You can modify which fields are used by annotating them with <code>@EqualsAndHashCode<span>.</span>Include</code> or <code>@EqualsAndHashCode<span>.</span>Exclude</code>. Alternatively, you can annotate your class with <code>@<span>EqualsAndHashCode</span><span>(</span>onlyExplicitlyIncluded <span>=</span> <span>true</span><span>)</span></code> and then specify exactly which fields or methods you want to be used by marking them with <code>@EqualsAndHashCode<span>.</span>Include</code>. Please, note that the <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object" target="_blank" rel="noreferrer noopener"><code><span>equals</span><span>(</span><span>)</span></code></a>) and <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode(" target="_blank" rel="noreferrer noopener"><code><span>hashCode</span><span>(</span><span>)</span></code></a>) methods will be generated by Lombok without breaking the contract between them. Follow the link on the two methods to the official Java documentation to learn more about the contracts that <code><span>equals</span><span>(</span><span>)</span></code> and <code><span>hashCode</span><span>(</span><span>)</span></code> implementations should fulfill.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>@Getter</span>
<span>@Setter</span>
<span>@EqualsAndHashCode</span>
<span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    
    <span>// gettes and setters ...</span>

    <span>@Override</span> 
    <span>public</span> <span>int</span> <span>hashCode</span><span>(</span><span>)</span> <span>{</span>
       <span>final</span> <span>int</span> PRIME <span>=</span> <span>31</span><span>;</span>
       <span>int</span> result <span>=</span> <span>1</span><span>;</span>
       result <span>=</span> prime <span>*</span> result <span>+</span> id<span>;</span>
       result <span>=</span> prime <span>*</span> result <span>+</span> <span>(</span><span>(</span>name <span>==</span> <span>null</span><span>)</span> <span>?</span> <span>0</span> <span>:</span> name<span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>
       result <span>=</span> prime <span>*</span> result <span>+</span> <span>(</span><span>(</span>surname <span>==</span> <span>null</span><span>)</span> <span>?</span> <span>0</span> <span>:</span> surname<span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>
       <span>return</span> result<span>;</span>
    <span>}</span>

    <span>@Override</span> 
    <span>public</span> <span>boolean</span> <span>equals</span><span>(</span><span>Object</span> o<span>)</span> <span>{</span>
       <span>if</span> <span>(</span>o <span>==</span> <span>this</span><span>)</span> <span>return</span> <span>true</span><span>;</span>
       <span>if</span> <span>(</span><span>!</span><span>(</span>o <span>instanceof</span> <span>Author</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>Author</span> other <span>=</span> <span>(</span><span>Author</span><span>)</span> o<span>;</span>
       <span>if</span> <span>(</span><span>!</span>other<span>.</span><span>canEqual</span><span>(</span><span>(</span><span>Object</span><span>)</span><span>this</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>if</span> <span>(</span><span>this</span><span>.</span><span>getId</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getId</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getId</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>if</span> <span>(</span><span>this</span><span>.</span><span>getName</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getName</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>if</span> <span>(</span><span>this</span><span>.</span><span>getSurname</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getSurname</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getSurname</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getSurname</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>return</span> <span>true</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><h3 id="---NonNull---https---projectlombok-org-features-NonNull-"><a href="https://projectlombok.org/features/NonNull" target="_blank" rel="noreferrer noopener"><code>@NonNull</code></a></h3><p>You can annotate with <code>@NonNull</code> a record component, a parameter of a method, or an entire constructor. This way, Lombok will generate null-check statements for you accordingly.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>

    <span>public</span> <span>Author</span><span>(</span>
      <span>@NonNull</span> <span>int</span> id<span>,</span>
      <span>@NonNull</span> <span>String</span> name<span>,</span>
      <span>String</span> surname
    <span>)</span> <span>{</span>
      <span>this</span><span>.</span>id <span>=</span> id<span>;</span>
      <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
      <span>this</span><span>.</span>surname <span>=</span> surname<span>;</span> 
  <span>}</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>

    <span>public</span> <span>Author</span><span>(</span>
      <span>int</span> id<span>,</span>
      <span>String</span> name<span>,</span>
      <span>String</span> surname
    <span>)</span> <span>{</span>
        <span>if</span> <span>(</span>id <span>==</span> <span>null</span><span>)</span> <span>{</span>
          <span>throw</span> <span>new</span> <span>NullPointerException</span><span>(</span><span>&#34;id is marked @NonNull but is null&#34;</span><span>)</span><span>;</span>
        <span>}</span>
        <span>this</span><span>.</span>id <span>=</span> id<span>;</span>
        <span>if</span> <span>(</span>name <span>==</span> <span>null</span><span>)</span> <span>{</span>
          <span>throw</span> <span>new</span> <span>NullPointerException</span><span>(</span><span>&#34;name is marked @NonNull but is null&#34;</span><span>)</span><span>;</span>
        <span>}</span>
        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
        <span>this</span><span>.</span>surname <span>=</span> surname<span>;</span> 
  <span>}</span>
<span>}</span></code></pre><h3 id="---Data---https---projectlombok-org-features-Data-"><a href="https://projectlombok.org/features/Data" target="_blank" rel="noreferrer noopener"><code>@Data</code></a></h3><p><code>@Data</code> is a shortcut annotation that combines the features of <a href="https://projectlombok.org/features/ToString" target="_blank" rel="noreferrer noopener"><code>@ToString</code></a>, <a href="https://projectlombok.org/features/EqualsAndHashCode" target="_blank" rel="noreferrer noopener"><code>@EqualsAndHashCode</code></a>, <a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noreferrer noopener"><code>@Getter</code></a> <a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noreferrer noopener"><code>@Setter</code></a>, and <a href="https://projectlombok.org/features/constructor" target="_blank" rel="noreferrer noopener"><code>@RequiredArgsConstructor</code></a> together. So, <code>@Data</code> generates all the boilerplate involved in POJOs (<a href="https://en.wikipedia.org/wiki/Plain_old_Java_object" target="_blank" rel="noreferrer noopener">Plain Old Java Objects</a>). This means, in particular, getters for all fields, setters for all non-final fields, proper <code>toString</code>, <code>equals</code>, and <code>hashCode</code> implementations involving every field of the class, and a constructor for all final fields.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>@Data</span>
<span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>final</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>final</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>

    <span>public</span> <span>Author</span><span>(</span><span>int</span> id<span>)</span> <span>{</span>
        <span>this</span><span>.</span>id <span>=</span> id<span>;</span>
    <span>}</span>    

    <span>public</span> <span>int</span> <span>getId</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> id<span>;</span>
    <span>}</span>

    <span>public</span> <span>String</span> <span>getName</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> name<span>;</span>
    <span>}</span>

    <span>public</span> <span>void</span> <span>setName</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>
        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
    <span>}</span>

    <span>public</span> <span>String</span> <span>getSurname</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> surname<span>;</span>
    <span>}</span>

    <span>public</span> <span>void</span> <span>setSurname</span><span>(</span><span>String</span> surname<span>)</span> <span>{</span>
        <span>this</span><span>.</span>surname <span>=</span> surname<span>;</span>
    <span>}</span>

    <span>@Override</span> 
    <span>public</span> <span>int</span> <span>hashCode</span><span>(</span><span>)</span> <span>{</span>
       <span>final</span> <span>int</span> PRIME <span>=</span> <span>31</span><span>;</span>
       <span>int</span> result <span>=</span> <span>1</span><span>;</span>
       result <span>=</span> prime <span>*</span> result <span>+</span> <span>getId</span><span>(</span><span>)</span><span>;</span>
       result <span>=</span> prime <span>*</span> result <span>+</span> <span>(</span><span>(</span><span>getName</span><span>(</span><span>)</span> <span>==</span> <span>null</span><span>)</span> <span>?</span> <span>0</span> <span>:</span> <span>getName</span><span>(</span><span>)</span><span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>
       result <span>=</span> prime <span>*</span> result <span>+</span> <span>(</span><span>(</span><span>getSurname</span><span>(</span><span>)</span> <span>==</span> <span>null</span><span>)</span> <span>?</span> <span>0</span> <span>:</span> <span>getSurname</span><span>(</span><span>)</span><span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>
       <span>return</span> result<span>;</span>
    <span>}</span>

    <span>@Override</span> 
    <span>public</span> <span>boolean</span> <span>equals</span><span>(</span><span>Object</span> o<span>)</span> <span>{</span>
       <span>if</span> <span>(</span>o <span>==</span> <span>this</span><span>)</span> <span>return</span> <span>true</span><span>;</span>
       <span>if</span> <span>(</span><span>!</span><span>(</span>o <span>instanceof</span> <span>Author</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>Author</span> other <span>=</span> <span>(</span><span>Author</span><span>)</span> o<span>;</span>
       <span>if</span> <span>(</span><span>!</span>other<span>.</span><span>canEqual</span><span>(</span><span>(</span><span>Object</span><span>)</span><span>this</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>if</span> <span>(</span><span>this</span><span>.</span><span>getId</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getId</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getId</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>if</span> <span>(</span><span>this</span><span>.</span><span>getName</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getName</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>if</span> <span>(</span><span>this</span><span>.</span><span>getSurname</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getSurname</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getSurname</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getSurname</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>return</span> <span>true</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><h3 id="---Value---https---projectlombok-org-features-Value-"><a href="https://projectlombok.org/features/Value" target="_blank" rel="noreferrer noopener"><code>@Value</code></a></h3><p><code>@Value</code> is the immutable variant of <a href="https://projectlombok.org/features/Data" target="_blank" rel="noreferrer noopener"><code>@Data</code></a>. This means that all fields are made <code><span>private</span></code> and <code>final</code> by Lombok by default. Plus, setters will not be generated, and the class itself will be marked as <code>final</code>. This way, the class will not be inheritable. Just like what happens with <code>@Data</code>, <code><span>toString</span><span>(</span><span>)</span></code>, <code><span>equals</span><span>(</span><span>)</span></code> and <code><span>hashCode</span><span>(</span><span>)</span></code> implementations are also created.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>@Data</span>
<span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>int</span> id<span>;</span>
    <span>String</span> name<span>;</span>
    <span>String</span> surname<span>;</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>final</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>final</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>final</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>final</span> <span>String</span> surname<span>;</span>

    <span>public</span> <span>Author</span><span>(</span><span>int</span> id<span>,</span> <span>String</span> name<span>,</span> <span>String</span> surname<span>)</span> <span>{</span>
      <span>this</span><span>.</span>id <span>=</span> id
      <span>this</span><span>.</span>name <span>=</span> name
      <span>this</span><span>.</span>surname <span>=</span> surname
    <span>}</span>  

    <span>public</span> <span>int</span> <span>getId</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> id<span>;</span>
    <span>}</span>

    <span>public</span> <span>String</span> <span>getName</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> name<span>;</span>
    <span>}</span>

    <span>public</span> <span>String</span> <span>getSurname</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> surname<span>;</span>
    <span>}</span>

    <span>@Override</span> 
    <span>public</span> <span>int</span> <span>hashCode</span><span>(</span><span>)</span> <span>{</span>
        <span>final</span> <span>int</span> PRIME <span>=</span> <span>31</span><span>;</span>
        <span>int</span> result <span>=</span> <span>1</span><span>;</span>
        result <span>=</span> prime <span>*</span> result <span>+</span> <span>getId</span><span>(</span><span>)</span><span>;</span>
        result <span>=</span> prime <span>*</span> result <span>+</span> <span>(</span><span>(</span><span>getName</span><span>(</span><span>)</span> <span>==</span> <span>null</span><span>)</span> <span>?</span> <span>0</span> <span>:</span> <span>getName</span><span>(</span><span>)</span><span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>
        result <span>=</span> prime <span>*</span> result <span>+</span> <span>(</span><span>(</span><span>getSurname</span><span>(</span><span>)</span> <span>==</span> <span>null</span><span>)</span> <span>?</span> <span>0</span> <span>:</span> <span>getSurname</span><span>(</span><span>)</span><span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>return</span> result<span>;</span>
    <span>}</span>

    <span>@Override</span> 
    <span>public</span> <span>boolean</span> <span>equals</span><span>(</span><span>Object</span> o<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>o <span>==</span> <span>this</span><span>)</span> <span>return</span> <span>true</span><span>;</span>
        <span>if</span> <span>(</span><span>!</span><span>(</span>o <span>instanceof</span> <span>Author</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
        <span>Author</span> other <span>=</span> <span>(</span><span>Author</span><span>)</span> o<span>;</span>
        <span>if</span> <span>(</span><span>!</span>other<span>.</span><span>canEqual</span><span>(</span><span>(</span><span>Object</span><span>)</span><span>this</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
        <span>if</span> <span>(</span><span>this</span><span>.</span><span>getId</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getId</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getId</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
        <span>if</span> <span>(</span><span>this</span><span>.</span><span>getName</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getName</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
        <span>if</span> <span>(</span><span>this</span><span>.</span><span>getSurname</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getSurname</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getSurname</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getSurname</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
        <span>return</span> <span>true</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><h2 id="Advanced-Lombok-Annotations">Advanced Lombok Annotations</h2><p>Here you can find the most complex Lombok annotations. Each of them will be explained and then seen in use compared to the equivalent Java vanilla translation. To see examples and get more support, click on each annotation and visit its page on the <a href="https://projectlombok.org/features/all" target="_blank" rel="noreferrer noopener">Lombok official documentation</a>.</p><h3 id="---Cleanup---https---projectlombok-org-features-Cleanup-"><a href="https://projectlombok.org/features/Cleanup" target="_blank" rel="noreferrer noopener"><code>@Cleanup</code></a></h3><p><code>@Cleanup</code> can be used to ensure a given resource is automatically cleaned up before leaving the current scope. By default, the cleanup method of the annotated resource is assumed to be <code><span>close</span><span>(</span><span>)</span></code>, but you can specify the name of the desired method to be called instead. Note that this annotation works by harnessing the <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" target="_blank" rel="noreferrer noopener">try-with-resources statement</a>.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>public</span> <span>class</span> <span>CleanupDemo</span> <span>{</span>
  <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>IOException</span> <span>{</span>
    <span>@Cleanup</span> 
    <span>InputStream</span> input <span>=</span> <span>new</span> <span>FileInputStream</span><span>(</span>args<span>[</span><span>0</span><span>]</span><span>)</span><span>;</span>

    <span>@Cleanup</span> 
    <span>OutputStream</span> output <span>=</span> <span>new</span> <span>FileOutputStream</span><span>(</span>args<span>[</span><span>1</span><span>]</span><span>)</span><span>;</span>

    <span>byte</span><span>[</span><span>]</span> b <span>=</span> <span>new</span> <span>byte</span><span>[</span><span>10000</span><span>]</span><span>;</span>

    <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
      <span>int</span> r <span>=</span> input<span>.</span><span>read</span><span>(</span>b<span>)</span><span>;</span>

      <span>if</span> <span>(</span>r <span>==</span> <span>-</span><span>1</span><span>)</span> 
        <span>break</span><span>;</span>

      output<span>.</span><span>write</span><span>(</span>b<span>,</span> <span>0</span><span>,</span> r<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>CleanupDemo</span> <span>{</span>
  <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>IOException</span> <span>{</span>
    <span>try</span> <span>(</span><span>OutputStream</span> output <span>=</span> <span>new</span> <span>FileOutputStream</span><span>(</span>args<span>[</span><span>1</span><span>]</span><span>)</span><span>)</span> <span>{</span>
      <span>try</span> <span>(</span><span>InputStream</span> input <span>=</span> <span>new</span> <span>FileInputStream</span><span>(</span>args<span>[</span><span>0</span><span>]</span><span>)</span><span>)</span> <span>{</span>
        <span>byte</span><span>[</span><span>]</span> b <span>=</span> <span>new</span> <span>byte</span><span>[</span><span>10000</span><span>]</span><span>;</span>

        <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
          <span>int</span> r <span>=</span> input<span>.</span><span>read</span><span>(</span>b<span>)</span><span>;</span>

          <span>if</span> <span>(</span>r <span>==</span> <span>-</span><span>1</span><span>)</span> 
            <span>break</span><span>;</span>

          output<span>.</span><span>write</span><span>(</span>b<span>,</span> <span>0</span><span>,</span> r<span>)</span><span>;</span>
        <span>}</span>
      <span>}</span>       
    <span>}</span> 
  <span>}</span>
<span>}</span></code></pre><h3 id="---Synchronized---https---projectlombok-org-features-Synchronized-"><a href="https://projectlombok.org/features/Synchronized" target="_blank" rel="noreferrer noopener"><code>@Synchronized</code></a></h3><p><code>@Synchronized</code> allows you to achieve something similar to the <a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html" target="_blank" rel="noreferrer noopener"><code>synchronized</code></a> keyword, but locking on different objects. The keyword locks on <code><span>this</span></code>, while the annotation locks on a special private field named <code>$lock</code>. If this field does not exist, it will be created by Lombok. This is the default behavior, but you can also specify lock objects yourself. When dealing with <code><span>static</span></code> methods, the annotation will lock on a static field named <code>$<span>LOCK</span></code>. Please, consider that just like <code>synchronized</code>, the annotation can only be used on static and instance methods. </p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>public</span> <span>class</span> <span>SynchronizedDemo</span> <span>{</span>
  <span>private</span> <span>final</span> <span>Object</span> objectToLock <span>=</span> <span>new</span> <span>Object</span><span>(</span><span>)</span><span>;</span>
  
  <span>@Synchronized</span>
  <span>public</span> <span>static</span> <span>void</span> <span>sayHello</span><span>(</span><span>)</span> <span>{</span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>&#34;Hello!&#34;</span><span>)</span><span>;</span>
  <span>}</span>
  
  <span>@Synchronized</span>
  <span>public</span> <span>int</span> <span>getOne</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>1</span><span>;</span>
  <span>}</span>
  
  <span>@Synchronized</span><span>(</span><span>&#34;objectToLock&#34;</span><span>)</span>
  <span>public</span> <span>void</span> <span>printObject</span><span>(</span><span>)</span> <span>{</span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>objectToLock<span>)</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>SynchronizedDemo</span> <span>{</span>
  <span>private</span> <span>static</span> <span>final</span> <span>Object</span> $LOCK <span>=</span> <span>new</span> <span>Object</span><span>[</span><span>0</span><span>]</span><span>;</span>
  <span>private</span> <span>final</span> <span>Object</span> $lock <span>=</span> <span>new</span> <span>Object</span><span>[</span><span>0</span><span>]</span><span>;</span>
  <span>private</span> <span>final</span> <span>Object</span> readLock <span>=</span> <span>new</span> <span>Object</span><span>(</span><span>)</span><span>;</span>
  
  <span>public</span> <span>static</span> <span>void</span> <span>sayHello</span><span>(</span><span>)</span> <span>{</span>
    <span>synchronized</span><span>(</span>$LOCK<span>)</span> <span>{</span>
      <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>&#34;Hello&#34;</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
  
  <span>public</span> <span>int</span> <span>getOne</span><span>(</span><span>)</span> <span>{</span>
    <span>synchronized</span><span>(</span>$lock<span>)</span> <span>{</span>
      <span>return</span> <span>1</span><span>;</span>
    <span>}</span>
  <span>}</span>
  
  <span>public</span> <span>void</span> <span>printObject</span><span>(</span><span>)</span> <span>{</span>
    <span>synchronized</span><span>(</span>readLock<span>)</span> <span>{</span>
      <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>objectToLock<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span></code></pre><h3 id="---SneakyThrows---https---projectlombok-org-features-SneakyThrows-"><a href="https://projectlombok.org/features/SneakyThrows" target="_blank" rel="noreferrer noopener"><code>@SneakyThrows</code></a></h3><p><code>@SneakyThrows</code> can be used to sneakily throw checked exceptions without actually declaring them in your method&#39;s <code>throws</code> clause, as you normally would. So, this annotation allows you to avoid the required <code><span>try</span><span>-</span>catch</code> blocks completely by handling all the checked exceptions quietly. Lombok will not ignore, wrap, replace, or modify the thrown checked exception. On the contrary, it will mislead the compiler. In fact, at the JVM (<a href="https://en.wikipedia.org/wiki/Java_virtual_machine" target="_blank" rel="noreferrer noopener">Java Virtual Machine</a>) class file level, all exceptions can be thrown regardless of the <code>throws</code> clause of your methods, which is why this works. This annotation can be dangerous and should be used carefully. This is why you should read <a href="https://projectlombok.org/features/SneakyThrows" target="_blank" rel="noreferrer noopener">this</a> page from the Lombok official documentation to learn more about when and how to use it.</p><h3 id="---Builder---https---projectlombok-org-features-Builder-"><a href="https://projectlombok.org/features/Builder" target="_blank" rel="noreferrer noopener"><code>@Builder</code></a></h3><p>You may need to develop a builder object allowing you to create objects by following a step-by-step construction pattern, such as <code>Author<span>.</span><span>builder</span><span>(</span><span>)</span><span>.</span><span>id</span><span>(</span><span>&#34;1&#34;</span><span>)</span><span>.</span><span>name</span><span>(</span><span>&#34;Maria&#34;</span><span>)</span><span>.</span><span>surname</span><span>(</span><span>&#34;Williams&#34;</span><span>)</span><span>.</span><span>build</span><span>(</span><span>)</span><span>;</span></code>. This is particularly useful when dealing with large classes with several fields. Instead of using a constructor with many parameters, you can use this more readable approach.
By using the <code>@Builder</code> annotation, you let Lombok generate the builders for you. By annotating a class with <code>@Builder</code>, Lombok will produce a class implementing the aforementioned builder pattern. For example, by annotating the <code>Author</code> class, an <code>AuthorBuilder</code> class will be automatically generated. Since the behavior of your builder may be complex or highly-tailored, Lombok offers many parameters to achieve the desired result. You can find out them all <a href="https://projectlombok.org/features/Builder" target="_blank" rel="noreferrer noopener">here</a>.</p><h3 id="---Log---https---projectlombok-org-features-log-"><a href="https://projectlombok.org/features/log" target="_blank" rel="noreferrer noopener"><code>@Log</code></a></h3><p>The majority of loggers require you to set up a logger instance in every class where you want to log. This definitely involves boilerplate code. By annotating a class with <code>@Log</code>, Lombok will automatically add a static final <code>log</code> field, initialized as required by your logging library. This is why Lombok provides developers with an annotation per each of the most popular logging frameworks. You can find the entire list <a href="https://projectlombok.org/features/log" target="_blank" rel="noreferrer noopener">here</a>.</p><h2 id="The-Lombok-Plugin">The Lombok Plugin</h2><p>The most popular and widely used IDEs come with an official Lombok plugin designed to help developers use Lombok. In particular, it supports you by offering shortcuts to the most common Lombok annotation. Plus, it suggests to you the annotations you may require or be looking for based on where you clicked. At the time of writing <a href="https://projectlombok.org/setup/intellij" target="_blank" rel="noreferrer noopener">IntelliJ IDEA</a>, <a href="https://projectlombok.org/setup/eclipse" target="_blank" rel="noreferrer noopener">Eclipse, Spring Tool Suite, (Red Hat) JBoss Developer Studio, MyEclipse</a>, <a href="https://projectlombok.org/setup/vscode" target="_blank" rel="noreferrer noopener">Microsoft Visual Studio Code</a>, and <a href="https://projectlombok.org/setup/netbeans" target="_blank" rel="noreferrer noopener">Netbeans</a> are officially supported. Follow the link related to your IDE to get support on how to install it.
Visit the <a href="https://projectlombok.org/" target="_blank" rel="noreferrer noopener">Lombok</a> website for the complete list of all supported IDEs.</p><h2 id="Is-Using-Lombok-A-Risk-">Is Using Lombok A Risk?</h2><p>You may be concerned about spreading Lombok annotations throughout your codebase. In fact, what would happen if you decided to avoid using it? You might be finding yourself stuck. Well, this is not a real problem because Lombok comes with a <em>delombok</em> tool. 
As stated <a href="https://projectlombok.org/features/delombok" target="_blank" rel="noreferrer noopener">in the official documentation</a>, although not covering all possible IDEs and cases, it makes the process of freeing your code from Lombok easier. What this tool does is auto-generate Java source code containing the same features contained in the bytecode Lombok would have injected. This way, your Lombok annotated codebase will be simply replaced with a standard, non-Lombok Java one. 
As a result, your entire project will no longer depend on Lombok. So, to answer the original question, no, not at all. Using Lombok does not represent a risk for the future or your project.</p><h2 id="Conclusion">Conclusion</h2><p>In this article, we looked at how to use Project Lombok, a Java library that automatically plugs into your editor and builds tools, to avoid writing boilerplate, boring, and repetitive code Java is well known for. As shown, this is an easy way to make you a more productive developer and do not waste your time on cumbersome activities. By starting to take advantage of its most relevant annotations, you can avoid writing thousand of lines of code with no real value from the business logic point of view of your project. Plus, there is always the possibility to make your project no longer depend on Project Lombok easily. So, it using it does not represent a risk of finding yourself locked in. In conclusion, every Java developer should use Project Lombok, and explaining everything you need to start using it is what this article was aimed at.</p><p>Thanks for reading! I hope that you found this article helpful. Feel free to reach out to me with any questions, comments, or suggestions.</p></div></div>]]></content:encoded>
      <pubDate>Thu, 29 Jul 2021 16:55:00 +0000</pubDate>
    </item>
    <item>
      <title>Workforce and App Privacy Have Changed, So Should You</title>
      <link>https://auth0.com/blog/workforce-and-app-privacy-have-changed-so-should-you/</link>
      <description>Go fast but not alone — our leaders are here to help secure your workforce and app privacy.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>Accelerating digital road maps by seven to 10 years likely left you with some things to review from a security perspective. Please check out the <a href="https://auth0.com/blog/accelerated-your-road-map-go-fix-workforce-and-app-security" target="_blank" rel="noreferrer noopener">first post in this series</a> for what you might need to review to securely support your remote or hybrid workforce, as well as a checklist for consumer-facing apps.</p><p>Security isn’t the only thing that can get overlooked when we go fast.  As well as implementing technical protections — we also need to understand what and how the data and how impacts the humans that use technology. This is where privacy comes in. Privacy is having a critical global impact on software development because consumers, businesses, and governments are demanding that technology operates in a way that complies with legislation like GDPR (General Data Privacy Regulation), CPRA (California Public Records Act), APPI (Act on the Protection of Personal Information), and LGPD (Lei Geral de Proteção de Dados Pessoais). This is an opportunity to rethink exactly what and how much data is collected, how it’s used, and who gets to see it. It’s a turning point where individuals are no longer blithely accepting that massive amounts of data about them are being created, shared, and used.</p><p>At Auth0, I regularly collaborate with our vice president of privacy, Lucy McGrath, and she is a part of my organization. For this series, I asked Lucy for her perspective on data privacy mistakes companies can make when they move fast.</p><p>An integrated approach is essential for security and privacy. There’s a saying if you want to go fast, go alone, but if you want to go far, go together. This is changing — you can’t protect privacy alone. If you go alone, you won’t go anywhere. “Ultimately, data privacy is about trust,” says Lucy. “And it’s a collaborative effort. You can’t think about security or data governance, or privacy in isolation. You need to work across departments within your organization and also listen to your staff and your consumers/users. From a practical standpoint, you need to work with others even beyond your immediate business — data privacy regulations are changing rapidly —technical solutions are essential in order to scale privacy compliant technology. If you don’t collaborate, you’ll be left behind.”</p><p>Lucy’s insights on remote/hybrid workforces and consumer-facing apps can improve your workplace culture and improve your relationships with your customers — and keep you focused on your business rather than dealing with regulators and potentially incurring large fines.</p><h2 id="Put-Your-Focus-on-the-Human">Put Your Focus on the Human</h2><p>“Probably the most important thing to remember when thinking through data privacy is that you’re delivering a service that impacts humans,” says Lucy. “We can get dazzled by what technology can do, but the technology is really there to help the humans accomplish something. Centering on the human who needs to use or benefit from the technology helps you to focus.  — and align with existing and emerging data privacy regulations.”</p><p>As always, this information is shared from the perspective of business impact and planning. For how data privacy regulations apply to your specific business situation, please reach out to your legal counsel.</p><blockquote><p>Auth0 recommends you always consult legal counsel for specific advice about compliance with legal requirements.</p></blockquote><p><strong>The workforce mix: remote, hybrid, in office</strong></p><p>If your company relies on a globally dispersed workforce (or acquired one during the pandemic), you’re likely dealing with a mix of employees who welcome some office quietly, some still struggling with lockdown requirements, and others who may not expect to see vaccines become available until fall. “As you look at creating or reviewing policies, it’s especially important to remember that there’s a human on the other side of the Zoom screen”, says Lucy. “This is a good time for your HR team to check back in with staff. Circumstances and perspectives have changed for many people as a result of the pandemic. One size definitely will not fit all.”</p><p>Understanding that worker privacy rights vary globally, here are some areas to review:</p><h3 id="1--How-you-measure-productivity">1. How you measure productivity</h3><p>For organizations used to seeing people in chairs, the shift to Zoom screens caused some anxiety. Interestingly, <a href="https://www.bcg.com/publications/2020/valuable-productivity-gains-covid-19" target="_blank" rel="noreferrer noopener">75% of 12,000 workers surveyed by BCG</a> in the United States, Germany, and India felt they were able to maintain or increase productivity on individual tasks during the pandemic. </p><p>Some of that may have been accomplished by blurring the lines between home and work, says Lucy. </p><p>Surveillance technologies like keyloggers, video monitoring, and attention tracking via biometrics have been rising in adoption even before the pandemic. We’re hearing this often says, Lucy: “I like my boss — a lot —  but I would find it a bit creepy if she was tracking every word I write, tracking when I popped off to the loo and listening to my family conversations. And it would make it harder to do my job because I would feel unnecessarily surveilled. It’s really important to assess the correct way to protect data and maintain trust with your employees as humans. Especially with workers working from home in potentially cramped situations, you could be gathering data you don’t need and shouldn’t have.</p><p>“Workers generally know that emails are subject to company oversight nearly everywhere, but it’s essential to be transparent about monitoring activities across all applications and devices. Transparency also encourages trust and increases the likelihood that individuals will report issues/mistakes they encounter. Tell them about how long you retain the data, and why and be sure to check local rules about internal and external data sharing — they can vary by region and even by state in the United States. It’s important to only keep what you really need to perform a task,” says Lucy.</p><h3 id="2--How-do-you-encourage-collaboration-">2. How do you encourage collaboration?</h3><p>Nearly everyone became Zoom-literate in 2020. Many people were introduced to Slack or other collaboration tools, and some folks also mixed in personal texts. “As great as these technologies are — and I am speaking as someone who enjoys working with a globally distributed workforce — they’re not going to replicate the physical space. From a privacy perspective, some small changes can mean a lot to employees,” says Lucy.</p><p>“Some people enjoy having dogs and kids flow in and out of their workplace. Others prefer to keep things separated. Over the last several months, I’ve noticed some colleagues making different choices.”</p><p>Things like Zoom backgrounds can protect employee privacy, but only if they know how to use the tools. If you’re using a collaboration tool like Zoom or Slack, document expected uses, alternatives on offer (as applicable) and make sure employees know how to use tools like Zoom backgrounds. </p><h3 id="3--Onboarding-can-protect-against-data-breaches">3. Onboarding can protect against data breaches</h3><p>Normally, we bring our new employees to our Bellevue, Wash. offices for onboarding. This in-person connection brings all kinds of benefits, including protecting data. “Onboarding may seem like an odd place to bring up data privacy, but people are more likely to feel comfortable reporting potential problems or even breaches when they have formed a connection to their colleagues,” says Lucy.</p><p>Establishing connections may mean creating social events (likely on Zoom) or connecting employees for non-work meetings. We have an app that randomly pairs employees for casual chat sessions we call “donuts.” It’s a surprisingly effective way to establish connection and get to know about the day-to-day work life of far-flung colleagues.</p><h3 id="4--Security-and-Privacy-of-Customers-is-Key">4. Security and Privacy of Customers is Key</h3><p>“We’ve had workers who used to be home by themselves all day, suddenly have teenaged children pass through meetings on the way to the fridge,” says Lucy. “It’s charming, but it also means that family members might see things they’re not meant to see. You need to recognize that not everyone has the luxury of a room with a door and a lock. Protecting customer security and privacy is key.”</p><p>To your security protocols, Lucy would also suggest adding:</p><ul><li>Headphones so you can control what can be overheard (and coaching that awareness with your teams)</li><li>Privacy screens for monitors</li><li>Printed material (and the printer) needs to be kept in a space that remains locked when not in use</li></ul><h2 id="Data-Privacy-Checklist-for-Consumer-Facing-Apps">Data Privacy Checklist for Consumer-Facing Apps</h2><p>COVID has brought populations that are used to trust in physical environments online, says Lucy. This is part of why in the UK we’re seeing <a href="https://www.theguardian.com/money/2021/may/18/delivery-text-scams-the-nasty-new-wave-sweeping-the-uk" target="_blank" rel="noreferrer noopener">increase in delivery text phishing scams</a> where additional funds are requested for delivery. Many of these ploys play on user trust and the expectation that information is being shared securely. We’ll get deeper into how consumers are demanding a secure and contextual private experience in the final post. As preparation, here is a data privacy checklist. Please follow up with your legal counsel on your specifics.</p><ol start="1"><li><strong>Review what you’ve got and why you’ve got it and how you’re getting it.</strong> It’s not uncommon for apps to gather more information than is necessary to do the job. You need to know what data you have and why you’re collecting it as well how it’s stored to comply with regulations — and to know how to safeguard your customers’ data. <strong>This includes third-party vendors and your marketing teams.</strong></li><li><strong>Make sure your code only collects data you really need</strong>. The days of data gluttony are coming to an end. Individuals are rightly fed up with the attitude of “just because you can collect as much data as possible, you do. Ask yourself: do you use all the data you collect? Don’t be afraid to reduce the amount of data you collect when you update your app or add new products. Look for opportunities to innovate by using privacy-enhancing technologies to mask or anonymize, or de-identify data. And safely delete the information you don’t use.</li><li><strong>Know where your customers are and check out the regulations.</strong> While the EU’s General Data Privacy Regulation (GDPR) has become the benchmark for data privacy, not every regulation is GDPR. There are differences. Children also often have extra protections. Once you’ve identified where and who your customers are, work closely with your legal counsel to design the right approach.</li><li><strong>Securely delete info and keep a record.</strong> Maybe you’re deleting information due to a verified request or because you have data you actually don’t need; either way, you need to keep a record.</li><li><strong>Make sure you have someone responsible for privacy who respects the humans interacting with your app.</strong> This stuff is not simple. You need someone who looks after it.</li><li><strong>Look out for service departments or social media complaints.</strong> Complaints can show you how the public perceives their data is being used — and identify areas that need your attention.</li><li><strong>Communicate clearly with your users.</strong> Users often need to know how to unsubscribe and other rights as part of data privacy regulations.</li><li><strong>Do as you would be done by.</strong> Think through how you’d like your data to be treated. That’s a good guideline. But also think about the specific customer base - what’s their perspective and might they require additional protections (e.g., if they are a vulnerable group).</li><li><strong>Consult your legal counsel.</strong> Data privacy is a rapidly evolving field. Lawyers really are your friends! Please check in with your legal counsel regularly, and especially if you’re thinking of expanding into a new region.</li></ol><h2 id="Learn-More-about-Identity-s-Role-in-Your-Data-Privacy-Strategy">Learn More about Identity’s Role in Your Data Privacy Strategy</h2><p>As Lucy says, you can have security without privacy, but you can’t have privacy without security if you’d like to learn more about how a robust identity solution can support your data privacy and security strategies, <a href="https://auth0.com/contact-us" target="_blank" rel="noreferrer noopener">please reach out to the team at Auth0</a>.</p><p>In the final post in the Acceleration Response Series, we’ll look at how creating a long-term plan for security and privacy can help you meet consumers’ demands.</p><div><h2 id="About-Auth0">About Auth0 </h2><p>Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit <a href="https://auth0.com/" target="_blank" rel="noopener noreferrer">https://auth0.com</a>.</p></div></div></div>]]></content:encoded>
      <pubDate>Thu, 29 Jul 2021 15:08:00 +0000</pubDate>
    </item>
    <item>
      <title>Can Your Identity Solution Grow With Your Company?</title>
      <link>https://auth0.com/blog/can-your-identity-solution-grow-with-your-company/</link>
      <description>The tech market in Latin America is growing; Auth0 can help you keep up with a scalable identity solution.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>The number of Venture Capital deals signed in Latin America hit a record high of 488 in 2020. That’s nearly double the 2017 number according to <a href="https://www.bloomberg.com/news/articles/2021-03-16/latin-american-startups-had-record-venture-capital-deals-in-2020" target="_blank" rel="noreferrer noopener">Bloomberg</a>. The growth in the tech market in LatAm isn’t only apparent in new startup deals; companies who already have a presence in the region are expanding both through mergers and acquisitions and by looking into new countries to grow their footprint in the region. </p><p>Each scenario brings its own challenges for your IT infrastructure, particularly your<a href="https://auth0.com/blog/how-to-scale-quickly-with-identity/" target="_blank" rel="noreferrer noopener"> identity solution</a>. If you’re expanding into a new country, there’s likely to be a different data privacy regulation you’ll have to comply with. And that startup you’re eyeing probably has a vastly different infrastructure than yours, whether private or public cloud or even legacy on-prem. An Identity management solution has to be able to expand and flex in order to grow with your company, regardless of the specific scenario.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1HnNeEEQ4hCBb2M4y2ZerT/5b5a1de004ea8021fdc38d042a85a672/Latam05.jpg" alt="Business Expansion"/></p><h2 id="With-Business-Expansion-Come-Business-Questions">With Business Expansion Come Business Questions</h2><p>Let’s take a look at those two potential growth scenarios and what they mean for your business’s identity solution. First up is the acquisition of a competitor or related smaller entity. <a href="https://auth0.com/blog/why-your-ma-strategy-has-to-include-an-iam-solution/" target="_blank" rel="noreferrer noopener">Mergers and acquisitions</a> (M&amp;A) always bring an array of unique challenges, but for this article, we’re going to focus on the identity challenges associated with the merging of IT infrastructure.</p><p>Your web app may be hosted on a public cloud, but the company you just bought has been in business for a while and is still using on-prem hosting for theirs. In order for you to bring both properties together under one identity solution, you need one that can bridge the gap between the two, allowing your new audience access to both apps without managing multiple sets of credentials.</p><p>In our second scenario, your organization is considering an expansion into a neighboring country to take advantage of the easing of business restrictions and the growing market for your product that your marketing team has identified. You already comply with the privacy regulations in your country, but are you ready to comply with those abroad? </p><p>Is your organization ready to answer questions like these:</p><ul><li>Can our existing in-house identity platform scale to include our hybrid-cloud infrastructure and the legacy system our latest acquisition uses?</li><li>Is our identity solution ready to handle the influx of new user accounts and login requests when we roll out to our new market?</li><li>Is our consent gathering process in compliance with the regulations in the country we’re expanding into?</li></ul><p>If not, or if the answer to any of these questions is “no,” it may be time to consult with an identity specialist. </p><blockquote><a href="https://twitter.com/intent/tweet?text=&#34;Auth0%20recommends%20you%20always%20consult%20legal%20counsel%20when%20it%20comes%20to%20complying%20with%20data%20privacy%20regulations.&#34; via @auth0 https://auth0.com/blog/can-your-identity-solution-grow-with-your-company" target="_blank" rel="noopener noreferrer"><p>&#34;Auth0 recommends you always consult legal counsel when it comes to complying with data privacy regulations.&#34;</p><div><p><img alt="Tweet" src="https://cdn.auth0.com/blog/resources/twitter.svg"/></p><h4>Tweet This</h4></div></a></blockquote><h2 id="Auth0-Is-the-Identity-Solution-That-Scales-With-You">Auth0 Is the Identity Solution That Scales With You</h2><p>Both of these scenarios mean you’re going to be scaling your infrastructure, adding users to existing web apps, and even adding new web apps. Having an identity solution in place that can easily expand to include controlling access to these new properties can help reign in costs and speed your time to market post-expansion. Our customers tell us that by using Auth0 for their authentication and identity needs, they took their time-to-value from months or years down to weeks or even days.</p><p>Credit card company <a href="https://www.marketwatch.com/story/visa-sees-massive-digital-acceleration-with-millions-trying-e-commerce-for-the-first-time-2020-05-13" target="_blank" rel="noreferrer noopener">Visa reported</a> that during just the first month of the COVID-19 pandemic, more than 13 million cardholders in Latin America made their very first e-commerce transaction. That’s 13 million new accounts being created, 13 million new logins, and 13 million opportunities for identity to go wrong if your solution isn’t scalable. There are many aspects to what makes something scalable. When it comes to identity, we see five as being the most important.</p><ol start="1"><li><strong>Bridging legacy and cloud systems</strong></li></ol><p>One of the downsides to M&amp;A is that your IT department inherits the backend infrastructure of the other company, for better or worse. Auth0’s extensive SDK libraries and robust APIs mean it’s a simple matter to bridge the gap between legacy systems and modern cloud-first ones. One login box can take your current and new customers to both web apps, no matter where they’re hosted. This ability also speeds your time to value because your developers can maintain focus on their core product delivery rather than piecing together connectivity solutions that may only work for a short time.</p><ol start="2"><li><strong>Single source of truth for customer data</strong></li></ol><p>Bringing all of your customer data together into one single source of truth (SSoT) makes it that much easier to protect. It also speeds access when a user logs in, as no matter which property they’re using, it has only one place to look to find their credentials, rather than scouring multiple data silos.</p><ol start="3"><li><strong>Single sign-on</strong></li></ol><p>Customers want low-friction experiences online, and being able to create an account using credentials they already have is a great way to win them over. Single sign-on (using account information from a provider like Apple, Facebook, or Twitter) allows a customer to create an account on your site quickly and easily, and without the need to create and remember a new password.</p><ol start="4"><li><strong>Breach protection</strong></li></ol><p>The issue of passwords brings us to a major sticking point for many identity solutions, protecting user information from data breaches. According to the most recent <a href="https://www.ibm.com/security/data-breach" target="_blank" rel="noreferrer noopener">IBM/Ponemon Cost of a Data Breach Study</a>, the global average cost of a breach is now $3.86 million (USD). And Verizon reports in their <a href="https://www.verizon.com/business/resources/reports/dbir/" target="_blank" rel="noreferrer noopener">2021 Data Breach Investigations Report</a> that 61% of breaches involve misuse of credentials. Put those together, and you see why protecting your customers’ information is such a major piece of scaling your online business presence and why a robust identity solution needs to take this aspect into account.</p><ol start="5"><li><strong>Protection from staffing fluctuations</strong></li></ol><p>An often overlooked aspect of identity projects is the simple fact that people change jobs. If you have an identity tool that was developed in-house two years ago, there’s a good chance you won’t have anyone on staff who can expand it to cover your new properties. That will delay roll-out and extend your time-to-market. </p><p><a href="https://auth0.com/case-studies/wabipay/" target="_blank" rel="noreferrer noopener">Auth0 customer WABI</a> is modernizing e-commerce in Latin America. They’re currently active in 11 countries and have expansion plans to add four more in 2021. And they’re trusting Auth0 to scale their identity solution to match these ambitious plans. “WABI is scalable, and we need a partner that is, too. We believe Auth0 will support us in getting there.” Says WABI Business Manager Juan Manuel Mingo. With their planned expansion opening their market to millions of potential new customers, WABI knows they need a robust identity platform that’s ready to handle the influx of new users.</p><h2 id="Auth0-Brings-Global-Experience-to-Your-Latin-America-Growth-Plans">Auth0 Brings Global Experience to Your Latin America Growth Plans</h2><p>Our founders are from Argentina, the company was started in the United States, and we currently have people in 30+ countries with more being added every day. Our <a href="https://auth0.com/blog/auth0-expands-global-partner-network-in-latin-america-with-clm/" target="_blank" rel="noreferrer noopener">international team</a> of identity specialists can help you work out your identity needs and help get you set up with an identity as a service (IDaaS) platform that is ready to grow with your company, no matter what your expansion plans look like. We know that having an identity solution designed to be extensible and flexible to move with your business can mean the difference between a successful rollout or a failed acquisition attempt. </p><p>Auth0 is built on open standards, making it easy to connect with existing systems and varying infrastructure scenarios. Bridging the gap between a public cloud-based web app and an on-prem user database is only the beginning. Our extensive marketplace of integrations means you can connect with your existing business software solutions as well.</p><p>Our breach protection includes features such as <a href="https://auth0.com/docs/attack-protection/bot-detection" target="_blank" rel="noreferrer noopener">bot detection</a>, <a href="https://auth0.com/multifactor-authentication" target="_blank" rel="noreferrer noopener">adaptive MFA</a>, <a href="https://auth0.com/single-sign-on" target="_blank" rel="noreferrer noopener">single sign-on</a>, and <a href="https://auth0.com/passwordless" target="_blank" rel="noreferrer noopener">passwordless</a> flows. And the <a href="https://marketplace.auth0.com/" target="_blank" rel="noreferrer noopener">Auth0 Marketplace</a> has what you need to handle everything from consent management to business process software integrations. The protections and extensibility we offer is a key factor in our scalability. </p><p>When the time comes to expand across borders, Auth0 is ready. We’re certified by a third party as compliant with the International Standards Organization (ISO) standards <a href="https://www.iso.org/obp/ui/#iso:std:iso-iec:27001:ed-2:v1:en" target="_blank" rel="noreferrer noopener">ISO27001</a> and <a href="https://www.iso.org/standard/61498.html" target="_blank" rel="noreferrer noopener">ISO27018</a> for handling information security and personally identifiable information (PII) as a cloud provider.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1sBMtrIri0sAw0OBkWE4QV/41d7fc8b0740ac05ec3c82145fd1478f/Latam06.jpg" alt="Growing"/></p><h2 id="Auth0-is-the-Identity-Solution-That-Can-Keep-Up-With-The-Growing-LatAm-Market">Auth0 is the Identity Solution That Can Keep Up With The Growing LatAm Market</h2><p>To provide your customers with a continuous, low-friction, and intuitive login flow requires a robust identity solution. Whether you’re scaling internationally or your growth plans call for staying closer to home, Auth0 can provide the IDaaS platform you need to maintain a great customer experience while ensuring the security and privacy of your customer data. And don’t worry if you’ve already started an identity project and hit a stumbling block, <a href="https://auth0.com/contact-us" target="_blank" rel="noreferrer noopener">our experts can help</a>. </p><div><h2 id="About-Auth0">About Auth0 </h2><p>Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit <a href="https://auth0.com/" target="_blank" rel="noopener noreferrer">https://auth0.com</a>.</p></div></div></div>]]></content:encoded>
      <pubDate>Thu, 29 Jul 2021 11:56:00 +0000</pubDate>
    </item>
    <item>
      <title>Accelerated Your Road Map? Go Fix Workforce and App Security</title>
      <link>https://auth0.com/blog/accelerated-your-road-map-go-fix-workforce-and-app-security/</link>
      <description>Rapid change introduces workforce and app risks. Auth0 Security team’s advice on what to fix now.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><section itemscope="" itemtype="http://schema.org/BlogPosting" itemprop="mainEntity"><header><div><div><p><span>ACCELERATION RESPONSE SERIES</span></p><p itemprop="description">Rapid change introduces workforce and app risks. Auth0 Security team’s advice on what to fix now.</p></div><p>Last Updated On: July 28, 2021</p><meta itemprop="datePublished" content="2021-07-28"/><meta itemprop="dateModified" content="2021-07-28"/></div></header><header><div><p><img src="https://images.ctfassets.net/23aumh6u8s0i/lpo0yom5xDZonfNzlOkHc/c55bd864b5d7360bf8a2c307f99c8e40/Security_and_Identity_4x.jpg"/></p><div><p><span>ACCELERATION RESPONSE SERIES</span></p><p itemprop="description">Rapid change introduces workforce and app risks. Auth0 Security team’s advice on what to fix now.</p><p>Last Updated On: July 28, 2021</p><meta itemprop="datePublished" content="2021-07-28"/><meta itemprop="dateModified" content="2021-07-28"/></div></div></header><article><main id="post-content" itemprop="articleBody"><div><p>Fast response allowed many organizations to survive and thrive in 2020. Orgs went remote overnight; businesses launched consumer-facing apps, and <a href="https://auth0.com/blog/how-brick-and-mortar-approaches-improve-digital-experiences/" target="_blank" rel="noreferrer noopener">consumers shifted buying patterns online</a>.</p><p>Going fast gets products to market, it gives consumers choices, and it helps companies scale. But when you jump ahead seven to 10 years in your digital road map, you risk leaving a few security and data privacy concerns behind. I reached out to key members of my security team, as well as our data privacy team, to put together this three-part series based on our industry experience and observations.</p><p>Each post will focus on protecting and securing two critical areas: your workforce and your consumer-facing apps. The first post will focus on security details to check and mitigate now. The second will focus on immediate data privacy concerns with the help of Auth0 Vice President, Privacy Lucy McGrath. And the third post will help you put together a plan for the future that will make it easier the next time you want to turn on the speed — and to remain current in an ever-changing security landscape.</p><p>The thing is that security is a global team sport.  As more of us shift to working and living online, everything is more connected — and that can be a good thing. Securing your personal identity, your business identity, and helping increase security at your business can actually make an impact. Here’s what you can do to help make the internet safer for everyone.</p><h2 id="Why-Remote-Work-Forced-a-Change-in-Security-Thinking">Why Remote Work Forced a Change in Security Thinking</h2><p>Before the world started working remotely, a lot of companies used a castle-and-moat approach to security. They relied on a combination of physical security and internal networks to ensure that employees and outsiders only accessed necessary information. They might even have relied on SaaS companies to provide some of their protections, but the thinking was still pretty much “protect the castle.”</p><p>Suddenly workers were working anywhere in the world, maybe on their own devices. Without remote experience, your security team might not have had time to think through all of the security issues inherent with having remote endpoints. For example, to ensure that they properly protect these assets against current threats like ransomware and malware, it would be appropriate to install leading next-gen antivirus on these machines.</p><p>Role-based privileges and policies also abruptly needed to follow the user. I know I work for an identity company, but it was identity and policy <a href="https://auth0.com/blog/why-identity-federation-matters/" target="_blank" rel="noreferrer noopener">federation</a> that anticipated this need and allowed for a rapid response.</p><p><a href="https://www.businessinsider.com/companies-asking-employees-to-work-from-home-due-to-coronavirus-2020" target="_blank" rel="noreferrer noopener">Now some companies are making work from home a permanent</a> part of their employee offering. Since Auth0 was built as a remote-friendly, globally dispersed company, we’ve had some time to think through the security concerns. Here’s what you need to consider to protect your customers, your business, and your employees:</p><ol start="1"><li><strong>Secure the endpoints.</strong> Services like CarbonBlack or CrowdStrike can help prevent malware or breaches occurring from endpoints.</li><li><strong>Update bring your own device policies.</strong> Rethink how and where employees are accessing business and customer data. Do you need to restrict access in public spaces? Adjust policies?</li><li><strong>Update action policies</strong>. What do your employees do if a work computer is stolen? What steps do they need to take if the information is exposed at home? A <a href="https://www.darkreading.com/51--of-wfh-parents-say-children-have-accessed-work-accounts/d/d-id/1339754" target="_blank" rel="noreferrer noopener">1Password survey</a> found that 51% of work from home (WFH) parents surveyed said their children had accessed their work accounts, sometimes accidentally deleting necessary files.  How can you support your employees??</li><li><strong>Human risk is increased.</strong> Have a look at the next section.</li></ol><h2 id="The-Human-Element">The Human Element</h2><p>This is the critical part of this series — <strong>the human element is the most important aspect of security and data privacy.</strong></p><blockquote><p>Security awareness training needs to happen at every single level of your organization.</p></blockquote><p>A malicious actor is going to use everything you need to do business — email address patterns, information on your website, social media posts, and items gleaned from news articles all to try to gain entry to your system. While the attacks will vary, they usually follow this pattern: <strong>human factor</strong> + inject something into the code + lack of input validation + insufficient logging and monitoring.</p><p>If something looks like it’s coming from your CEO or payroll, an employee might fall for it and supply a way into your system. And once a bad actor is in, there’s lots they can do.</p><p>But if you train your entire team to watch out for phishing attacks, you can stop them at the first step. <a href="https://auth0.com/blog/protecting-against-phishing-attacks/" target="_blank" rel="noreferrer noopener">This post is a good place to start.</a></p><p>Attacks evolve, so even though security awareness is something you should pause and do now, it’s something you’re going to need to do regularly. Developing a security culture throughout your org provides great protection. To do business with some industries like finance or healthcare, the training will be required to cover specific areas and will need to be documented. The training you provide can also help protect your employees in their personal lives.</p><h2 id="Top-7-Things-to-Do-Now-to-Check-Your-App-s-Security">Top 7 Things to Do Now to Check Your App’s Security</h2><p>This can seem like a lot if you don’t have an in-house security team (and maybe if you do). One principle of security is encouraging diversity of thought not only because it’s the right thing to do but because studies show it makes teams more productive. In security, <a href="https://www.mckinsey.com/business-functions/strategy-and-corporate-finance/our-insights/innovation-in-a-crisis-why-it-is-more-critical-than-ever" target="_blank" rel="noreferrer noopener">diversity of thought</a> makes it easier to spot potential threats. This is part of why even large teams rely on external testing vendors and may even need to provide proof of outside testing for certifications like <a href="https://auth0.com/blog/the-csa-star-program-a-business-guide-to-certification/" target="_blank" rel="noreferrer noopener">CSA Star</a> and <a href="https://auth0.com/blog/what-is-pci-a-business-guide-to-compliance/" target="_blank" rel="noreferrer noopener">PCI</a>.</p><ol start="1"><li><strong>Get an external third-party pen test — and implement the recommendations</strong>. A penetration test is where you hire a verified third party to attempt to find your app’s vulnerabilities. They will sign a non-disclosure agreement (NDA) and provide a detailed report outlining their findings and usually with recommended fixes cataloged by severity. Discovering vulnerabilities can be scary, and there is the temptation to use fear to drive organizational change, but we’ve found that partnering and collaborating with other teams and leadership can often get changes implemented faster.</li><li><strong>Review best practices for your cloud-based services.</strong> When people go really fast, they may not take the time to fully understand the technology and security controls. This is a great time to go back and pay really close attention to the docs provided by your third-party vendors.</li></ol><blockquote><p>“Many common AWS security issues, for example, happen as a result of not following AWS security best practice guidelines when setting up the infrastructure. This can lead to open and accessible EC2 security groups, public S3 buckets, unprotected EMR clusters, and more,” says Auth0 Detection and Response Security Engineer Troy Wegner (formerly of AWS and Amazon.com).</p></blockquote><ol start="3"><li><strong><a href="https://www.overops.com/blog/static-vs-dynamic-code-analysis-how-to-choose-between-them/" target="_blank" rel="noreferrer noopener">Perform static</a> and <a href="https://www.overops.com/blog/static-vs-dynamic-code-analysis-how-to-choose-between-them/" target="_blank" rel="noreferrer noopener">dynamic code analysis</a></strong>. Static analysis reviews the code as it exists. Dynamic analysis looks for vulnerabilities while the code is being executed and for unexpected outcomes. Ideally, you want to move towards baking both into your Software Development Lifecycle (SDLC). Devs may not always enjoy adding this to part of their process—more on how to add this analysis to your long-term software development plans in the final post.</li><li><strong>Think through vulnerability management and updates</strong>. Since humans are fallible and it’s humans who make code, it’s inevitable that you’re going to run into vulnerabilities. If you don’t have a plan for pushing updates, now’s the time to make one so you don’t hear about something BIG like the <a href="https://www.vox.com/2014/6/19/18076318/heartbleed" target="_blank" rel="noreferrer noopener">Heartbleed Bug</a> and find yourself painfully updating ad-hoc.</li></ol><blockquote><p>In general, you’re going to need to test every time your devs update something and whenever your tech stack libraries or any of the main operating systems updates. Services like Chef, Puppet and Terraform can make this easier by pushing updates from a central server to connected servers. In the final post, we’ll get into longer-term strategies for updates, like maintaining a Golden Amazon Machine Image (AMI) if you’re on AWS. For now, just document how and when you’re going to update and test.</p></blockquote><ol start="5"><li><strong>Threat model</strong>. A lot of security is determining risks. Ideally, you’ve threat modeled before building your app, but in some ways, it’s easier to model after it’s live. Yes, you can hire a trusted third party to do this for you. To give you a sense of the thought process, I asked Troy to threat model this restaurant scenario. Security engineers often diagram vulnerabilities, so we also include Troy’s whiteboard as a reference.</li></ol><p>Let’s say you’re a local restaurant who responded to COVID by offering the ingredients to make your tastiest dishes and recipes to your customers via curbside pickup. You hired someone to put the app together quickly, but now your region is opening up, and you’ve decided this channel of operations should continue contributing to your bottom line. </p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3qWEruezG4YZw2AwS2w4Nf/ccb3121e94d794c8baa0ec470e4b084d/diagram.jpg" alt="Whiteboard"/>
<strong>Figure 1:</strong> <em>Auth0 Senior Security Engineer - Detection and Response Troy Wegner’s whiteboard of our restaurant scenario.</em></p><ul><li>Start with authentication because you know customers need to authenticate in order to interact with your app. How are they authenticating? Are they only using a username and password? If they are only using a username and password for authentication, then you have just hit on your first major risk (user compromise/phishing/user impersonation).</li><li>As a way to address the first risk identified, you have chosen to go with two-factor authentication for your users. But here is where things get interesting; which 2-factor options do you want to support? There are authenticator apps, FIDO U2F, Push-based 2FA, and SMS (the weakest available option). Each option has its own pros and cons to consider.</li><li>Since this is a restaurant, you’re also somehow connecting the app to the food supply. How are you measuring and validating your existing ingredients inventory to ensure you do not oversell based on your total ingredients available? Are you using a database to store this information? If so, where does this database live, is it protected or hardened information security wise, and if so, how is it hardened? How do you authenticate to the database, is it updated regularly, do you perform backups, etc.</li><li>If your service has gotten really popular, too many people might try to order at once, and that could overwhelm the app’s limits. The app could go down due to resource constraints based on how it is architected. This is basically the risk a DOS/DDOS would present in bringing your app down and making it no longer available to your customers. In order to mitigate a DDOS risk, you might have a plan to make your app more fault tolerant and highly available by using load balancing, increasing back-end servers to handle the load, or using a front-end CDN to help distribute load across various edge locations.</li><li>Most likely, your app is taking payment and processing it in order to fulfill orders; how are customer payment and other sensitive information being handled/stored? If you accept credit cards or debit cards, PCI compliance is a concern you should address.</li><li>Here is where you would now want to think through and fully diagram out the rest of how the app works and uncover any other risks or bottlenecks that currently exist with your app, place a severity on those risks, and determine by severity which risks you want to fix, and which ones you are ok accepting.</li></ul><ol start="6"><li><strong>Turn on your logs — and make sure they’re monitored</strong>. Turning on logs can seem like common sense, but because there’s often an expense attached to logging and getting the data analyzed, the logs might not always be turned on. It’s really hard to know what to fix after a malware outbreak or other issues occur, especially if your logs aren’t turned on and are being actively analyzed.</li></ol><p>So this is where we tell you to turn on the logs for all the services you’re using. You should also make sure that a trusted third-party vendor or trained security engineer is watching your logs and building actionable detections based on those log sources to look for suspicious or anomalous activity.</p><ol start="7"><li><strong>Take action</strong>. Logs, vulnerability assessments, pen tests — these things can help you identify what needs to be fixed, but you still need to fix it. Breaches and ransomware are the obvious security problems you want to avoid. How your security challenges impact consumer behavior might not be as clear. Lost conversions, abandoned shopping carts, and low time on site are all indications that your target audience may not feel comfortable sharing their data with you. Our customers tell us that an app or site that feels secure (think smooth login, logical and smooth payment process) supports their business goals.</li></ol><h2 id="If-You-Need-More-Help">If You Need More Help</h2><p>Authentication is often a critical part of securing an app or workplace. If you’d like to understand how Auth0’s solutions might help make your app more secure, please reach out to the <a href="https://auth0.com/contact-us" target="_blank" rel="noreferrer noopener">team at Auth0</a>.</p><p>My next post will focus on immediate data privacy concerns with the help of Auth0 Vice President of Privacy Lucy McGrath.</p><div><h2 id="About-Auth0">About Auth0 </h2><p>Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit <a href="https://auth0.com/" target="_blank" rel="noopener noreferrer">https://auth0.com</a>.</p></div></div></main></article></section></div>]]></content:encoded>
      <pubDate>Wed, 28 Jul 2021 16:05:00 +0000</pubDate>
    </item>
  </channel>
</rss>