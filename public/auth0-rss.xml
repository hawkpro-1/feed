<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Auth0</title>
    <link>https://auth0.com/blog/rss.xml</link>
    <description></description>
    <item>
      <title>Strategy Design Pattern in Python</title>
      <link>https://auth0.com/blog/strategy-design-pattern-in-python/</link>
      <description>Learn strategy design pattern to write better code in Python</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>While you are developing software applications, you might run into some problems implementing the feature you need. Software design patterns are typical solutions for some of these commonly occurring problems while developing software applications using Object-oriented design. In this article, let&#39;s learn about one of the popular design patterns, <strong>Strategy</strong> pattern, and its implementation in Python.</p><h2 id="Introduction">Introduction</h2><p>Before diving into the strategy pattern, you should be familiar with some of the basics concepts of <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank" rel="noreferrer noopener">Object-Oriented Programming</a> (OOP). The entire concept of design patterns revolves around <em>classes</em> and <em>objects</em>. The design patterns are more high-level solutions for commonly occurring problems. They are like the blueprint to solve a specific problem. They are not confined to a single programming language. You can use design patterns in any programming language that supports object-oriented programming; the process will be the same while the syntax changes.
<img src="https://images.ctfassets.net/23aumh6u8s0i/4tPzU9nvm5jUwrXAeeHH3e/1badc171178aa953f7df05f08960f228/01_design-types.jpg" alt="design patterns"/>
There are several types of design patterns, including <strong>Creational</strong>, <strong>Structural</strong>, and <strong>Behavioral</strong> patterns. Creational patterns are about different ways to create objects that increase the flexibility of our code. Structural patterns are about relations between the objects, making larger structures flexible using objects and classes. Behavioral patterns are about effective communications and interactions between objects.</p><h2 id="Strategy">Strategy</h2><p><strong>Strategy Pattern</strong> is a design pattern that enables our application to select algorithms at runtime, making our application flexible. The original book on <a href="https://en.wikipedia.org/wiki/Design_Patterns" target="_blank" rel="noreferrer noopener">design patterns</a> written by <a href="http://wiki.c2.com/?GangOfFour" target="_blank" rel="noreferrer noopener">GoF</a> states that &#34;Strategy pattern intends to define a family of algorithms, <a href="https://auth0.com/blog/strategy-design-pattern-in-python/shorturl.at/rHJR7" target="_blank" rel="noreferrer noopener">encapsulates</a> each one, and
make them interchangeable.&#34; More specifically, it lets you define a set of algorithms that are interchangeable according to some factors at runtime. Strategy Pattern falls under the category of behavioral design patterns as it enables an algorithm&#39;s behavior to be selected at runtime.</p><h2 id="Usage">Usage</h2><p>While developing software applications, you may have a few alternatives to accomplish something in your code. Depending on your client choices, data sources, or other factors, you want to do something different without changing the code. You often tend to define algorithms using conditional statements for different situations in the main class of the code. But it is not an elegant way of writing better code. It makes the main class of your code quite long, and it becomes too hard to maintain the application.</p><p>In situations like these, the strategy pattern is an ideal solution. The strategy pattern suggests you define classes, called <em>strategies</em>, for your algorithms of different situations. The strategy is referenced inside the main class, called <em>context</em>, and the code works according to that situation. The context does not select an appropriate strategy for the case. Instead, the client passes the desired strategy to the context.</p><p>For example, if you have a chess application, you can select the difficulty level between easy, medium, or hard. The computer chooses an algorithm according to the level you choose. It is one of the best examples where the strategy pattern is used.</p><p>Strategy pattern follows the <a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle" target="_blank" rel="noreferrer noopener">Open/close principle</a>; a software application is open for extension but closed for modification. It means you can add any number of additional strategies without modifying the main class. It makes your code more flexible and easy to maintain.</p><h2 id="UML-Diagrams">UML Diagrams</h2><p>The following is the UML diagram of the Strategy pattern.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/21fvYspoS3Voqv7pKyDE4E/e89c3e5f81d51b3d15a436cd81e795f7/02_UML-Strategy.jpg" alt="UML Strategy"/></p><ol start="1"><li><strong>Context</strong> — It is the primary class of our application. It maintains a reference to one of the concrete strategies.</li><li><strong>Strategy</strong> — Strategy interface is common to all supported strategies. Context can communicate with other strategies only through the strategy interface.</li><li><strong>ConcreteStrategies</strong> — These are the classes that implement the algorithm using the Strategy interface.</li></ol><h2 id="Implementation">Implementation</h2><p>Let&#39;s see the step-by-step process of implementing a strategy pattern.</p><ol start="1"><li>You should first identify algorithms you want to execute as concrete strategies in the primary class.</li><li>Define the <em>context</em> (primary class) and add a reference to the strategy, a method to set the strategy, and another method to execute the strategy. You may also define a default strategy to switch between strategies only if they do not like the default one.</li></ol><pre><code><span>## context - the primary class</span>
<span>class</span> <span>Context</span><span>:</span>
    strategy<span>:</span> Strategy  <span>## the strategy interface</span>

    <span>def</span> <span>setStrategy</span><span>(</span>self<span>,</span> strategy<span>:</span> Strategy <span>=</span> <span>None</span><span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>if</span> strategy <span>is</span> <span>not</span> <span>None</span><span>:</span>
            self<span>.</span>strategy <span>=</span> strategy
        <span>else</span><span>:</span>
            self<span>.</span>strategy <span>=</span> Default<span>(</span><span>)</span>

    <span>def</span> <span>executeStrategy</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>print</span><span>(</span>self<span>.</span>strategy<span>.</span>execute<span>(</span><span>)</span><span>)</span></code></pre><p>First, we define the <code>strategy</code> field for storing a reference to a strategy object, and two methods, <code>setStrategy</code> and <code>executeStrategy</code>. The <code>setStrategy</code> sets the strategy selected if a user selects an option, or else the <code><span>default</span></code> one.</p><ol start="3"><li>Define the <em>Strategy Interface</em>, which is common to all the concrete strategies. The <code>Strategy</code> interface has an abstract method that you can alter in concrete strategies.</li></ol><pre><code><span>from</span> abc <span>import</span> ABC<span>,</span> abstractmethod

<span>## Strategy interface</span>
<span>class</span> <span>Strategy</span><span>(</span>ABC<span>)</span><span>:</span>
    <span>@abstractmethod</span>
    <span>def</span> <span>execute</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>pass</span></code></pre><ol start="4"><li>Define the concrete strategies which should implement the <code>Strategy</code> interface. These concrete strategies must have a common method that overrides the <code>execute</code> method of the <code>Strategy</code> interface.</li></ol><pre><code><span>## Concrete strategies</span>
<span>class</span> <span>ConcreteStrategyA</span><span>(</span>Strategy<span>)</span><span>:</span>
    <span>def</span> <span>execute</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>return</span> <span>&#34;ConcreteStrategy A&#34;</span>

<span>class</span> <span>ConcreteStrategyB</span><span>(</span>Strategy<span>)</span><span>:</span>
    <span>def</span> <span>execute</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>return</span> <span>&#34;ConcreteStrategy B&#34;</span>

<span>class</span> <span>Default</span><span>(</span>Strategy<span>)</span><span>:</span>
    <span>def</span> <span>execute</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>return</span> <span>&#34;Default&#34;</span></code></pre><ol start="5"><li>Now, users can select the strategy they want at the runtime. Create an object of <em>context</em> and pass a concrete strategy.</li></ol><pre><code><span>## Example application</span>
appA <span>=</span> Context<span>(</span><span>)</span>
appB <span>=</span> Context<span>(</span><span>)</span>
appC <span>=</span> Context<span>(</span><span>)</span>

<span>## selecting stratigies</span>
appA<span>.</span>setStrategy<span>(</span>ConcreteStrategyA<span>(</span><span>)</span><span>)</span>
appB<span>.</span>setStrategy<span>(</span>ConcreteStrategyB<span>(</span><span>)</span><span>)</span>
appC<span>.</span>setStrategy<span>(</span><span>)</span>    <span>## sets to default strategy</span>

<span>## each object below execute different strategy with same method</span>
appA<span>.</span>executeStrategy<span>(</span><span>)</span>
appB<span>.</span>executeStrategy<span>(</span><span>)</span>
appC<span>.</span>executeStrategy<span>(</span><span>)</span></code></pre><p>The output of the above code will be as follow:</p><pre><code>ConcreteStrategy <span>A</span>
ConcreteStrategy <span>B</span>
Default</code></pre><p>If you want to use another strategy, replace the ConcreteStrategy instance with the strategy you want. You can add a new concrete strategy without changing anything in the context.</p><h2 id="Example">Example</h2><p>Let&#39;s design a <a href="https://en.wikipedia.org/wiki/Rock_paper_scissors" target="_blank" rel="noreferrer noopener">rock paper scissors</a> game using strategy pattern. You can select any strategy among rock, paper, scissors, and random to play against the computer. The below example code uses the strategy pattern to implement various strategies.</p><pre><code><span>## Changing the strategy among Rock, Paper, Scissors, and Random</span>

<span>import</span> random
<span>from</span> abc <span>import</span> ABC<span>,</span> abstractmethod

<span>## Strategy interface </span>
<span>class</span> <span>Strategy</span><span>(</span>ABC<span>)</span><span>:</span>
    <span>@abstractmethod</span>
    <span>def</span> <span>selection</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>pass</span>

<span>## Concrete strategies</span>
<span>class</span> <span>Rock</span><span>(</span>Strategy<span>)</span><span>:</span>
    <span>## actual application will have the algorithm instead this method</span>
    <span>def</span> <span>selection</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>return</span> <span>&#34;Rock&#34;</span>

<span>class</span> <span>Paper</span><span>(</span>Strategy<span>)</span><span>:</span>
    <span>def</span> <span>selection</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>return</span> <span>&#34;Paper&#34;</span>

<span>class</span> <span>Scissors</span><span>(</span>Strategy<span>)</span><span>:</span>
    <span>def</span> <span>selection</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        <span>return</span> <span>&#34;Scissors&#34;</span>

<span>class</span> <span>Random</span><span>(</span>Strategy<span>)</span><span>:</span>
    <span>def</span> <span>selection</span><span>(</span>self<span>)</span> <span>-</span><span>&gt;</span> <span>str</span><span>:</span>
        options <span>=</span> <span>[</span><span>&#34;Rock&#34;</span><span>,</span> <span>&#34;Paper&#34;</span><span>,</span> <span>&#34;Scissors&#34;</span><span>]</span>
        <span>return</span> random<span>.</span>choice<span>(</span>options<span>)</span>

<span>## Context class</span>
<span>class</span> <span>Game</span><span>:</span>
    strategy<span>:</span> Strategy

    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> strategy<span>:</span> Strategy <span>=</span> <span>None</span><span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        <span>if</span> strategy <span>is</span> <span>not</span> <span>None</span><span>:</span>
            self<span>.</span>strategy <span>=</span> strategy
        <span>else</span><span>:</span>
            self<span>.</span>strategy <span>=</span> Random<span>(</span><span>)</span>

    <span>def</span> <span>play</span><span>(</span>self<span>,</span> sec<span>)</span> <span>-</span><span>&gt;</span> <span>None</span><span>:</span>
        s1 <span>=</span> self<span>.</span>strategy<span>.</span>selection<span>(</span><span>)</span>
        s2 <span>=</span> sec<span>.</span>strategy<span>.</span>selection<span>(</span><span>)</span>
        <span>if</span> s1 <span>==</span> s2<span>:</span>
            <span>print</span><span>(</span><span>&#34;It&#39;s a tie&#34;</span><span>)</span>
        <span>elif</span> s1 <span>==</span> <span>&#34;Rock&#34;</span><span>:</span>
            <span>if</span> s2 <span>==</span> <span>&#34;Scissors&#34;</span><span>:</span>
                <span>print</span><span>(</span><span>&#34;Player 1 wins!&#34;</span><span>)</span>
            <span>else</span><span>:</span>
                <span>print</span><span>(</span><span>&#34;Player 2 wins!&#34;</span><span>)</span>
        <span>elif</span> s1 <span>==</span> <span>&#34;Scissors&#34;</span><span>:</span>
            <span>if</span> s2 <span>==</span> <span>&#34;Paper&#34;</span><span>:</span>
                <span>print</span><span>(</span><span>&#34;Player 1 wins!&#34;</span><span>)</span>
            <span>else</span><span>:</span>
                <span>print</span><span>(</span><span>&#34;Player 2 wins!&#34;</span><span>)</span>
        <span>elif</span> s1 <span>==</span> <span>&#34;Paper&#34;</span><span>:</span>
            <span>if</span> s2 <span>==</span> <span>&#34;Rock&#34;</span><span>:</span>
                <span>print</span><span>(</span><span>&#34;Player 1 wins!&#34;</span><span>)</span>
            <span>else</span><span>:</span>
                <span>print</span><span>(</span><span>&#34;Player 2 wins!&#34;</span><span>)</span>

<span>## Example application</span>
<span>## PLayer 1 can select his strategy</span>
player1 <span>=</span> Game<span>(</span>Paper<span>(</span><span>)</span><span>)</span>

<span># Player 2 gets to select</span>
player2 <span>=</span> Game<span>(</span>Rock<span>(</span><span>)</span><span>)</span>

<span># After the second player choice, we call the play method</span>
player1<span>.</span>play<span>(</span>player2<span>)</span></code></pre><p>According to the strategies chosen by the two players, the expected output would be:</p><pre><code>Player <span>1</span> wins<span>!</span></code></pre><p>Test all the other cases of the game using all the other strategies. To add extra fun to the game, try creating two more strategies to the above example according to <a href="https://bigbangtheory.fandom.com/wiki/Rock,_Paper,_Scissors,_Lizard,_Spock" target="_blank" rel="noreferrer noopener">the Lizard-Spock expansion</a>.</p><h2 id="Conclusion">Conclusion</h2><p>In this article, you have seen where and how to use the strategy pattern in your code. You can build flexible and maintainable software applications using the strategy pattern. You can switch between algorithms at runtime according to the user&#39;s decision without changing the code. But if your code only has a couple of algorithms, there is no need to use strategy. It just makes your code look complex with numerous classes and objects. The Strategy pattern can work as an alternative for conditional statements for selecting the behavior of the application. But the potential drawback of strategy pattern is that the users must know how strategies differ from each other to select what they need. So it would be best if you use the strategy pattern only when the variation in behavior of the application is relevant to the users. So try to make your software applications flexible using the strategy pattern.</p></div></div>]]></content:encoded>
      <pubDate>Tue, 10 Aug 2021 14:58:00 +0000</pubDate>
    </item>
    <item>
      <title>Developer Day Helps Developers Build the Future of Identity</title>
      <link>https://auth0.com/blog/developerday-helps-developers-build-the-future-of-identity/</link>
      <description>What is Developer Day? Developer Advocate, Ben Dechrai, explores the lineup and shares his thoughts from a delegate&#39;s perspective.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>You’ve probably heard by now that <a href="https://auth0.com/blog/developers-explore-okta-auth0/" target="_blank" rel="noreferrer noopener">Okta and Auth0 have joined forces</a>. As a developer advocate for Auth0, I’m really excited to see how we can combine our forces to make identity even better for the developer community.</p><p>You might not be aware that I’m a huge fan of creating events that directly address the needs of developer communities. From the first conference I ran in 2004 to the user group meetings that are still going to this day, you can imagine my excitement when I heard we (Auth0 and Okta) were going to run an online event together!</p><p>This time, members of my team are taking the lead, so I&#39;ll be in the same boat as many of you experiencing Developer Day as it happens, so I thought it might be helpful to share my thoughts on the event and what I’m looking forward to the most.</p><p>Hit up the <a href="http://community.auth0.com/" target="_blank" rel="noreferrer noopener">community forum</a> if I miss something that’s important to you — there’s so much for everyone, I’m sure you’ll help others out too.</p><h2 id="What-Is-Developer-Day-">What Is Developer Day?</h2><p><a href="https://www.okta.com/developerday/" target="_blank" rel="noreferrer noopener">Developer Day</a> creates a space for all developers to discover how the identity space is evolving, learn best practices in privacy and security, and gain insights from developer experiences. It brings speakers from across these sectors right to your desktop, and best of all — it’s free!</p><blockquote><p>Speaking of free, did you know you can also <a href="https://auth0.com/signup" data-amp-replace="CLIENT_ID" data-amp-addparams="anonId=CLIENT_ID(cid-scope-cookie-fallback-name)" target="_blank" rel="noreferrer noopener">sign up for a free Auth0 account</a> at any time? Why not try it out today?</p></blockquote><p><img src="https://images.ctfassets.net/23aumh6u8s0i/12g1Ga4gP8X04Xn0H0nnFt/5b4ae4b06847a028d9a784a46ec48b26/cassidy-alyssa-kapehe.png" alt="Developer Day speakers Cassidy Williams, Alyssa Miller, and Kapehe"/></p><p>More specifically, it’s a one-day, single-track, virtual event, and while I’m proud to see some of my colleagues’ names in the speaker list, the lineup also features the likes of <strong>Cassidy Williams</strong> (Director of Developer Experience at Netlify), <strong>Alyssa Miller</strong> (Hacker, Researcher, and Security Advocate), and <strong>Kapehe</strong> (Developer Relations at Sanity.io, and yes, you might remember she used to <a href="https://auth0.com/blog/authors/kapehe-jorgenson/" target="_blank" rel="noreferrer noopener">work at Auth0</a> too).</p><h2 id="What-Can-I-Learn-">What Can I Learn?</h2><p>The first place I tend to go when looking at an event is the agenda, and skimming over this one, we’re in for a breadth and depth of information.</p><p>The keynote is where the day’s journey starts, and Alyssa’s <strong>updates from the world of cyber security</strong> are sure to offer a great insight that sets the foundation for the day. I’m a huge advocate for helping all developers understand security principles and states of play. Even if you never have to deal with part of it yourself, you’ll always benefit from knowing why something is done and how you’re being protected.</p><h2 id="From-APIs-to-IoT--Live-Demos-and-Security-Fundamentals">From APIs to IoT: Live Demos and Security Fundamentals</h2><p>From there, we meander down a path from securing Python APIs to securing your Home Automation and IoT devices. Personally, I’m a sucker for anything IoT-related, so I’ll be paying attention to this one.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/hd4kE3aQJFlX45nvwu3xF/6496580a2a7c7da50a6591f781035097/aaron-vittorio.png" alt="Developer Day speakers Aaron Parecki and Vittorio Bertocci"/></p><p>Having grown up on YouTube videos (okay, I’m not that young...) about identity from both Aaron Parecki (or as I like to call him, Mr OAuth, but don’t tell him I told you) and Vittorio Bertocci (the man whose identity knowledge is dwarfed only by his magnificent hair), what better than a talk from both of them? The talk will not only cover where we’ve come from, but what the future of OAuth has in store for us.</p><h2 id="Advanced-Topics-like-Verifiable-Credentials-and-Integration-with-Third-Parties">Advanced Topics like Verifiable Credentials and Integration with Third Parties</h2><p>But identity isn’t just about logging in and loading your glamour shot from Gravatar. I just recently learned about verifiable credentials, and wow - it’s such a powerful concept with so many use cases, I just can’t even! The topic deserves its own article, but one example is around payments, and Uchi Uchibeke’s talk is going to be fascinating, to be sure.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/71FxWB7JqseFrDM9mF63Go/bd98bfcda1f9662b1c7de0bfab486599/uchi.png" alt="Developer Day speaker Uchi Uchibeke"/></p><p>Uchi is flanked by demos on integrating Auth0 with NextJS for securing your webapps and Okta with Kong for securing continuous integration, delivery, and deployment. I think this highlights that the team who worked on the agenda really put a lot of thought into the balance between talks that can have immediate benefit to us developers, as well as enough advanced topics to keep our creative juices flowing.</p><p>Talking of immediately applicable information, if you want to learn how to validate REST API authentication and authorization, the JFrog talk is for you.</p><h2 id="Authentication-in-Gaming-and-Extended-Realities">Authentication in Gaming and Extended Realities</h2><p>If you thought the IoT talk was a bit out of the box, the Gaming and XR talk might just be in a whole other room! Not literally. I mean — it’s a virtual event. There aren’t any rooms. There aren’t any boxes either, for that matter. I digress.</p><p>I won’t admit to being a huge gamer. I load up Poly Bridge 2 every now and then. Does Minesweeper count? One thing I do know, though, is that the authentication experience in games can be awful, and when you get into any extended reality (XR), well. Let’s not go there.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2REEADn8ARvYmok2WNAt5O/9185928ac397dced701f3cb2d252e4b9/nick.png" alt="Developer Day speaker Nick Gamb"/></p><p>We’ll let Okta&#39;s Nick Gamb go there instead, as he tells us about the propensity for this industry to be targeted by hackers. Follow his advice, and maybe we can all keep playing in the knowledge that our Minedimes are safe. (See — I told you I’m not a huge gamer.)</p><h2 id="Adding-Pixie-Dust-to-Enhance-Security">Adding Pixie Dust to Enhance Security</h2><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2tBAGZHtBlb4Dt1P21WzAS/2cd4c6438265b64c39bb39b89e6945b9/milecia.png" alt="Developer Day speaker Milecia McGregor"/></p><p>With two talks left for the day, I’m personally keen to catch Milecia McGregor from Mediavine talk about pixies! Stop it, autocorrect. PKCE! While most SDKs magically hide away much of the implementation, it’s still worth understanding how authentication flows work and how they can be improved. The most common OAuth flow is debatably the Authcode flow, but PKCE makes it even better! Come along to find out how. I’ll be at the front taking notes.</p><h2 id="Closing-Keynote">Closing Keynote</h2><p>It’s a packed event — thank goodness there are a couple of breaks during the day — and we finish with a closing keynote from Cassidy Williams. The agenda teases us with the mere existence of this session, and perhaps we’ll find out more before the event. In any case, I’ll not be missing it.</p><p>Tell us in the <a href="http://community.auth0.com/" target="_blank" rel="noreferrer noopener">community forum</a> what you’re looking forward to the most, and I hope to see some of you in the chat room on the day!</p></div></div>]]></content:encoded>
      <pubDate>Mon, 09 Aug 2021 16:30:00 +0000</pubDate>
    </item>
    <item>
      <title>Here’s Something New for You: Identity OS</title>
      <link>https://auth0.com/blog/here-s-something-new-for-you-identity-os/</link>
      <description>Introducing the new way to think about and build identity</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>Authentication has become so much more than just a login box.</p><p>Sure, that’s still what consumers see when they are eagerly clicking towards whatever pizza, handbag, or Playstation pre-sale link they want to get to ASAP.</p><p>But it’s the expectation around what is happening when they click that has increased. Consumers demand the convenience of a seamless login but also want to know that their card details are secure and that their identity is protected against any breaches of privacy.</p><p>In the past, it was about trade-offs. But consumers don’t expect trade-offs, so that’s why we wanted to develop an identity operating system that lets everyone —  from IT teams to devs — build authentication that works now and with whatever the future throws at it.</p><p>Okay, So That’s Why We Need a New Way, but...</p><h2 id="What-Is-an-Identity-OS-">What Is an Identity OS?</h2><p>The Auth0 identity operating system (identity OS) is a cloud-native, adaptable platform for development teams. Built with extensible building blocks, the Auth0 identity OS enables organizations to manage the complexities of today’s identity management while also prioritizing the security, privacy, and convenience of their end-users. </p><p>Striking the perfect balance among these priorities requires identity to integrate a myriad of different services and creates a significant integration hurdle. Identity ecosystem operators can now manage these complex integration needs with the flexibility of full-spectrum code (pro-code, low-code, and no code solutions). </p><p>Customizing to the requirements of different development teams removes their need to focus on identity infrastructure when building differentiated applications. This level of adaptability is a huge benefit for enterprises that are confronted with converging use cases and managing the eroding lines between identity for employees, business partners, and consumers.</p><p>Sounds good, but...</p><h2 id="What-s-the-Three-Benefits-I-Should-Really-Care-About-">What’s the Three Benefits I Should Really Care About?</h2><h3 id="1--It-s-all-about-adaptability">1. It’s all about adaptability</h3><p>If anyone reading this has never had to change their product roadmap quickly, then you are one of the lucky ones. With the explosion of consumer-friendly services made possible through digital applications, consumer expectations are constantly changing. That beautiful Netflix UX is what they expect from everything (even public sector services these days are stepping their game up). So the Auth0 identity OS is built to be as adaptable as your business needs to be, without forcing you into clunky legacy features that you will take years to strip out.</p><h3 id="2--We-re-living-in-a-modular-world">2. We’re living in a modular world</h3><p>The best technology is the most open. There are so many amazing integrations and APIs being made by devs, so the Auth0 identity OS provides modular identity building blocks with integrations and industry blueprints.</p><h3 id="3--Breadth-rather-than-tiny-boxes">3. Breadth rather than tiny boxes</h3><p>Identity is converging, and the lines between “use cases” are collapsing. When we talk about use cases, we mean allowing employees secure access to files and apps through Single Sign On (SSO); or allowing a subscriber of a media service access via their social accounts.</p><blockquote><p>The Auth0 identity OS provides support for the full breadth of identity needs. </p></blockquote><p>Traditionally the identity industry has created single-purpose products for Workforce Identity, Business Identity, and Consumer Identity. But the company needs rarely fit into simple, separated boxes. The lines between identity use cases are eroding because rarely does a company only require one type. </p><h2 id="Anything-Else-I-Should-Know-">Anything Else I Should Know?</h2><p>If you’ve made it this far, then you seem like the kind of person who would appreciate some of the more technical, finer points.</p><p>Here’s what the Auth0 identity OS offers:</p><ul><li><strong>A customizable cut-of-the-box login experience</strong> — Universal Login is our first huge benefit to developers. It’s an embeddable client experience that requires zero custom code to set up while allowing developers to quickly add capabilities to it, including social login and multi-factor authentication (MFA), without making any changes to your app’s code.</li><li><strong>User management built-in</strong> — Auth0 gives you a secure and intuitive way of managing your user identities, including password resets, creating, blocking, and deleting users via the Users Dashboard or via the Auth0 API.</li><li><strong>Control &amp; customization</strong> — Extend with code: All applications and scenarios are different. Auth0’s Actions extend the functionality of Auth0’s base product to adapt it to your company needs and integrate it with other applications and services.</li><li><strong>Calling APIs and external resources</strong> — Once your user authenticates, Auth0 will generate an ID Token and an Access Token that will be passed back to your application. The Access Token can then be used to call your API and/or any external resource.</li></ul><h2 id="And-That-s-It--Now-It-s-up-to-You-to-Build-Something-Awesome">And That’s It, Now It’s up to You to Build Something Awesome</h2><p>The Auth0 identity OS is here to give you the tools to build more convenient, secure, and private authentication experiences for your customers and employees. </p><p>Read more at <a href="https://auth0.com/identity-os" target="_blank" rel="noreferrer noopener">https://auth0.com/identity-os</a> </p><p>Or get in touch today to let us know what you think.</p></div></div>]]></content:encoded>
      <pubDate>Mon, 09 Aug 2021 14:54:00 +0000</pubDate>
    </item>
    <item>
      <title>Deployment Strategies In Kubernetes</title>
      <link>https://auth0.com/blog/deployment-strategies-in-kubernetes/</link>
      <description>Learn what are the different deployment strategies available in Kubernetes and how to use them.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><strong>TL;DR:</strong> In this article, we will learn what are the deployment strategies while deploying containers using Kubernetes container-orchestration system. At the end of this article, we will have learned how to do deployment using different ways in Kubernetes cluster. If you find this topic interesting, keep reading! 
The code for this tutorial is available here on <a href="https://github.com/akhil90s/auth0/tree/main/Deployment%20Strategies%20In%20Kubernetes/Declarative%20Templates" target="_blank" rel="noreferrer noopener">Github</a></p><h2 id="Quick-Introduction-to-Kubernetes">Quick Introduction to Kubernetes</h2><p>With containerization gaining popularity over time and revolutionizing the process of building, shipping, and maintaining applications, there was a need to effectively manage these containers. Many container orchestration tools were introduced to manage the lifecycle of these containers in large-scale systems.</p><p>Kubernetes is one such orchestration tool that takes care of provisioning and deployment, allocation of resources, load balancing, service discovery, providing high availability, and other important aspects of any system. With this platform, we can decompose our applications into smaller systems (called microservices) while developing; then, we can compose (or orchestrate) these systems together while deploying. </p><p>The adoption of cloud-native approach has increased development of applications based on microservice architecture. For such applications, one of the biggest challenges organizations face is deployment. Having a proper strategy in terms of deployment is necessary. In Kubernetes, there are different ways to release an application; it is necessary to choose the right strategy to make your infrastructure reliable during an application deployment or update. For instance, in a production environment, it is always required to ensure that end-user shouldn&#39;t experience any downtime. In Kubernetes orchestration, right strategy ensures proper management of different versions of container images. To sum up, this article will mainly be around the different deployment strategies in Kubernetes.</p><h2 id="Prerequisites">Prerequisites</h2><p>To follow along with this article, we will need some previous experience with Kubernetes. If new to this platform, kindly check out the <a href="https://auth0.com/blog/kubernetes-tutorial-step-by-step-introduction-to-basic-concepts/" target="_blank" rel="noreferrer noopener">Step by Step Introduction to Basic Kubernetes Concepts</a> tutorial. There, you can learn everything you need to follow the instructions here. We would also recommend going through the <a href="https://kubernetes.io/docs/home/" target="_blank" rel="noreferrer noopener">Kubernetes documentation</a> if and when required.</p><p>Besides that, we will need kubectl, a Command-Line Interface (CLI) tool that will enable us to control your cluster from a terminal. If you don&#39;t have this tool, check the instructions on the <a href="https://auth0.com/blog/kubernetes-tutorial-step-by-step-introduction-to-basic-concepts/#Installing.Kube.Control..kubectl." target="_blank" rel="noreferrer noopener">Installing Kube Control (kubectl)</a>.We will also need a basic understanding of Linux and YAML.</p><h2 id="What-Is-A-Deployment-In-Kubernetes-">What Is A Deployment In Kubernetes?</h2><p>A Deployment is a resource object in Kubernetes that defines the desired state for our program. Deployments are declarative, meaning that we don&#39;t dictate how to achieve the state. Instead, we declare the desired state and allow the Deployment-controller to automatically reach that end goal in the most efficient way. A deployment allows us to describe an application&#39;s life cycle, such as which images to use for the app, the number of pods there should be, and the way in which they should be updated.</p><h2 id="Benefits-Of-Using-Kubernetes-Deployment">Benefits Of Using Kubernetes Deployment</h2><p>The process of manually updating containerized applications can be time consuming and tedious. A Kubernetes deployment makes this process automated and repeatable. Deployments are entirely managed by the Kubernetes backend, and the whole update process is performed on the server side without client interaction.</p><p>Moreover, the Kubernetes deployment controller is always monitoring the health of pods and nodes. It replaces a failed pod or bypass down nodes, ensuring continuity of critical applications.</p><h2 id="Deployment-Strategies">Deployment Strategies</h2><h3 id="Rolling-Update-Deployment">Rolling Update Deployment</h3><p>The rolling deployment is the default deployment strategy in Kubernetes. It replaces pods, one by one, of the previous version of our application with pods of the new version without any cluster downtime. A rolling deployment slowly replaces instances of the previous version of an application with instances of the new version of the application.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/LxDl5amQZC2znii0JLZuw/87f42c35b5ba35ac1550f572d23ba943/01_rolling-deployment.jpg" alt="Alt text"/></p><p>When using the RollingUpdate strategy, there are two more options that let us fine-tune the update process:</p><ol start="1"><li><p><strong>maxSurge</strong>: 
The number of pods that can be created above the desired amount of pods during an update. This can be an absolute number or percentage of the replicas count. The default is 25%.</p></li><li><p><strong>maxUnavailable</strong>: 
The number of pods that can be unavailable during the update process. This can be an absolute number or a percentage of the replicas count; the default is 25%.</p></li></ol><p>First, we create our <em>rollingupdate.yaml</em> deployment template. In the template below, we set <em>maxSurge</em> to 2 and <em>maxUnavailable</em> to 1.</p><pre><code><span>apiVersion</span><span>:</span> apps/v1
<span>kind</span><span>:</span> Deployment
<span>metadata</span><span>:</span>
  <span>name</span><span>:</span> rollingupdate<span>-</span>strategy
  <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
<span>spec</span><span>:</span>
  <span>strategy</span><span>:</span>
    <span>type</span><span>:</span> RollingUpdate
    <span>rollingUpdate</span><span>:</span>
      <span>maxSurge</span><span>:</span> <span>2</span>
      <span>maxUnavailable</span><span>:</span> <span>1</span>
  <span>selector</span><span>:</span>
    <span>matchLabels</span><span>:</span>
      <span>app</span><span>:</span> web<span>-</span>app<span>-</span>rollingupdate<span>-</span>strategy
      <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
  <span>replicas</span><span>:</span> <span>3</span>
  <span>template</span><span>:</span>
    <span>metadata</span><span>:</span>
      <span>labels</span><span>:</span>
        <span>app</span><span>:</span> web<span>-</span>app<span>-</span>rollingupdate<span>-</span>strategy
        <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
    <span>spec</span><span>:</span>
      <span>containers</span><span>:</span>
        <span>-</span> <span>name</span><span>:</span> web<span>-</span>app<span>-</span>rollingupdate<span>-</span>strategy
          <span>image</span><span>:</span> hello<span>-</span>world<span>:</span>nanoserver<span>-</span><span>1709</span></code></pre><p>We can then create the deployment using the kubectl command.</p><pre><code>$ kubectl apply <span>-</span>f rollingupdate<span>.</span>yaml</code></pre><p>Once we have a deployment template, we can provide a way to access the instances of the deployment by creating a Service. Note that we are deploying the image <em>hello-world</em> with version <em>nanoserver-1709</em>. So in this case we have two labels, &#39;name= <em>web-app-rollingupdate-strategy</em>&#39; and &#39;version=<em>nanoserver-1709</em>&#39;. We will set these as the label selector for the service below. Save this to &#39;<em>service.yaml</em>&#39; file.</p><pre><code><span>apiVersion</span><span>:</span> v1
<span>kind</span><span>:</span> Service
<span>metadata</span><span>:</span> 
  <span>name</span><span>:</span> web<span>-</span>app<span>-</span>rollingupdate<span>-</span>strategy
  <span>labels</span><span>:</span> 
    <span>name</span><span>:</span> web<span>-</span>app<span>-</span>rollingupdate<span>-</span>strategy
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
<span>spec</span><span>:</span>
  <span>ports</span><span>:</span>
    <span>-</span> <span>name</span><span>:</span> http
      <span>port</span><span>:</span> <span>80</span>
      <span>targetPort</span><span>:</span> <span>80</span>
  <span>selector</span><span>:</span> 
    <span>name</span><span>:</span> web<span>-</span>app<span>-</span>rollingupdate<span>-</span>strategy
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
  <span>type</span><span>:</span> LoadBalancer</code></pre><p>Now creating the service will create a load balancer that is accessible outside the cluster.</p><pre><code>$ kubectl apply <span>-</span>f service<span>.</span>yaml</code></pre><p>Run <em>kubectl get deployments</em> to check if the Deployment is created. If the Deployment is still being created, the output should be similar to the following:</p><pre><code>$ kubectl <span>get</span> deployments

<span>NAME</span>                             <span>READY</span>   <span>UP</span><span>-</span><span>TO</span><span>-</span><span>DATE</span>   <span>AVAILABLE</span>   <span>AGE</span>
rollingupdate<span>-</span>strategy   <span>0</span><span>/</span><span>3</span>     <span>0</span>            <span>0</span>           <span>1</span>s</code></pre><p>If we run the <em>kubectl get deployments</em> again a few seconds later. The output should be similar to this:</p><pre><code>$ kubectl <span>get</span> deployments

<span>NAME</span>                             <span>READY</span>   <span>UP</span><span>-</span><span>TO</span><span>-</span><span>DATE</span>   <span>AVAILABLE</span>   <span>AGE</span>
rollingupdate<span>-</span>strategy   <span>3</span><span>/</span><span>3</span>     <span>0</span>            <span>0</span>           <span>7</span>s</code></pre><p>To see the ReplicaSet (rs) created by the Deployment, run <em>kubectl get rs</em>. The output should be similar to this:</p><pre><code>$ kubectl <span>get</span> rs

<span>NAME</span>                                    <span>DESIRED</span>   <span>CURRENT</span>   <span>READY</span>   <span>AGE</span>
rollingupdate<span>-</span>strategy<span>-</span><span>87875</span>f5897   <span>3</span>         <span>3</span>         <span>3</span>       <span>18</span>s</code></pre><p>To see the 3 pods running for deployment, run <em>kubectl get pods</em>. The created ReplicaSet ensures that there are three Pods running. The output should be similar to the below.</p><pre><code>$ kubectl <span>get</span> pods

<span>NAME</span>                                      <span>READY</span>     <span>STATUS</span>    <span>RESTARTS</span>   <span>AGE</span>       
rollingupdate<span>-</span>strategy<span>-</span><span>87875</span>f5897<span>-</span><span>55</span>i7o   <span>1</span><span>/</span><span>1</span>       Running   <span>0</span>          <span>12</span>s       
rollingupdate<span>-</span>strategy<span>-</span><span>87875</span>f5897<span>-</span>abszs   <span>1</span><span>/</span><span>1</span>       Running   <span>0</span>          <span>12</span>s       
rollingupdate<span>-</span>strategy<span>-</span><span>87875</span>f5897<span>-</span>qazrt   <span>1</span><span>/</span><span>1</span>       Running   <span>0</span>          <span>12</span>s</code></pre><p>Let&#39;s update the <em>rollingupdate.yaml</em> deployment template to use the <em>hello-world:nanoserver-1809</em> image instead of the <em>hello-world:nanoserver-1709</em> image. Then update the image of the existing running deployment using the kubectl command.</p><pre><code>$ kubectl <span>set</span> image deployment<span>/</span>rollingupdate<span>-</span>strategy web<span>-</span>app<span>-</span>rollingupdate<span>-</span>strategy<span>=</span>hello<span>-</span>world<span>:</span>nanoserver<span>-</span><span>1809</span> <span>--</span>record</code></pre><p>The output is similar to the below.</p><pre><code>deployment<span>.</span>apps<span>/</span>rollingupdate<span>-</span>strategy image updated</code></pre><p>We are now deploying the image <em>hello-world</em> with version <em>nanoserver-1809</em>. So, in this case, we will have to update the labels in the &#39;<em>service.yaml</em>&#39;. The label will be updated to &#39;version=<em>nanoserver-1809</em>&#39;. We will run the below kubectl command again to update the service so that it can pick new pods running on the newer image.</p><pre><code>$ kubectl apply <span>-</span>f service<span>.</span>yaml</code></pre><p>To see the rollout status run the kubectl command below.</p><pre><code>$ kubectl rollout status deployment<span>/</span>rollingupdate<span>-</span>strategy

Waiting <span>for</span> rollout to finish<span>:</span> <span>2</span> out <span>of</span> <span>3</span> <span>new</span> <span>replicas</span> have been updated<span>...</span></code></pre><p>Run again to verify the rollout is successful.</p><pre><code>$ kubectl rollout status deployment<span>/</span>rollingupdate<span>-</span>strategy

deployment <span>&#34;rollingupdate-strategy&#34;</span> successfully rolled out</code></pre><p>After the rollout is successful, we can view the Deployment by running the command <em>kubectl get deployments</em>. The output is similar to this:</p><pre><code>$ kubectl <span>get</span> deployments

<span>NAME</span>                             <span>READY</span>   <span>UP</span><span>-</span><span>TO</span><span>-</span><span>DATE</span>   <span>AVAILABLE</span>   <span>AGE</span>
rollingupdate<span>-</span>strategy   <span>3</span><span>/</span><span>3</span>     <span>0</span>            <span>0</span>           <span>7</span>s</code></pre><p>Run <em>kubectl get rs</em> to see that the Deployment is updated. The new Pods are created in a new ReplicaSet and are scaled up to 3 replicas. The old ReplicaSet is scaled down to 0 replicas.</p><pre><code>$ kubectl <span>get</span> rs

<span>NAME</span>                                    <span>DESIRED</span>   <span>CURRENT</span>   <span>READY</span>   <span>AGE</span>
rollingupdate<span>-</span>strategy<span>-</span><span>87875</span>f5897   <span>3</span>         <span>3</span>         <span>3</span>       <span>55</span>s
rollingupdate<span>-</span>strategy<span>-</span><span>89999</span>f7895   <span>0</span>         <span>0</span>         <span>0</span>       <span>12</span>s</code></pre><p>Run <em>kubectl get pods</em> it should now show only the new Pods in the new ReplicaSet.</p><pre><code>$ kubectl <span>get</span> pods

<span>NAME</span>                                      <span>READY</span>     <span>STATUS</span>    <span>RESTARTS</span>   <span>AGE</span>       
rollingupdate<span>-</span>strategy<span>-</span><span>89999</span>f7895<span>-</span><span>55</span>i7o   <span>1</span><span>/</span><span>1</span>       Running   <span>0</span>          <span>12</span>s       
rollingupdate<span>-</span>strategy<span>-</span><span>89999</span>f7895<span>-</span>abszs   <span>1</span><span>/</span><span>1</span>       Running   <span>0</span>          <span>12</span>s       
rollingupdate<span>-</span>strategy<span>-</span><span>89999</span>f7895<span>-</span>qazrt   <span>1</span><span>/</span><span>1</span>       Running   <span>0</span>          <span>12</span>s</code></pre><p>The kubectl&#39;s rollout command is very useful here. We can use it to check how our deployment is doing. The command, by default, waits until all of the Pods in the deployment have been started successfully. When the deployment succeeds, the command exits with return code zero to indicate success. If the deployment fails, the command exits with a non-zero code.</p><pre><code>$ kubectl rollout status deployment rollingupdate<span>-</span>strategy

Waiting <span>for</span> deployment <span>&#34;rollingupdate-strategy&#34;</span> rollout to finish<span>:</span> <span>0</span> <span>of</span> <span>3</span> updated replicas are available…
Waiting <span>for</span> deployment <span>&#34;rollingupdate-strategy&#34;</span> rollout to finish<span>:</span> <span>1</span> <span>of</span> <span>3</span> updated replicas are available…
Waiting <span>for</span> deployment <span>&#34;rollingupdate-strategy&#34;</span> rollout to finish<span>:</span> <span>2</span> <span>of</span> <span>3</span> updated replicas are available…

deployment <span>&#34;rollingupdate-strategy&#34;</span> successfully rolled out</code></pre><p>If the deployment fails in Kubernetes, the deployment process stops, but the pods from the failed deployment are kept around. On deployment failure, our environment may contain pods from both the old and new deployments. To get back to a stable, working state, we can use the rollout undo command to bring back the working pods and clean up the failed deployment.</p><pre><code>$ kubectl rollout undo deployment rollingupdate<span>-</span>strategy

deployment<span>.</span>extensions<span>/</span>rollingupdate<span>-</span>strategy</code></pre><p>Then we will verify the status of the deployment again.</p><pre><code>$ kubectl rollout status deployment rollingupdate<span>-</span>strategy

deployment <span>&#34;rollingupdate-strategy&#34;</span> successfully rolled out</code></pre><p>In order for Kubernetes to know when an application is ready, it needs some help from the application. Kubernetes uses readiness probes to examine how the application is doing. Once an application instance starts responding to the readiness probe with a positive response, the instance is considered ready for use. Readiness probes tell Kubernetes when an application is ready, but not if the application will ever become ready. If the application keeps failing, it may never respond with a positive response to Kubernetes. </p><p>A rolling deployment typically waits for new pods to become ready via a readiness check before scaling down the old components. If a significant issue occurs, the rolling deployment can be aborted. If there is a problem, the rolling update or deployment can be aborted without bringing the whole cluster down.</p><h3 id="Recreate-Deployment">Recreate Deployment</h3><p>In recreate deployment, we fully scale down the existing application version before we scale up the new application version. In the below diagram, Version 1 represents the current application version, and Version 2 represents the new application version. When updating the current application version, we first scale down the existing replicas of Version 1 to zero and then concurrently deploy replicas with the new version.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1FVQm06ERSn67QJkI2zlfj/49ef78e46445aa7e6a7e54349e85e2b7/02_recreate-deployment.jpg" alt="Alt text"/></p><p>The below template shows deployment using the recreate strategy: First, we create our <em>recreate</em> deployment by saving the following yaml to a file recreate.yaml</p><pre><code><span>apiVersion</span><span>:</span> apps/v1
<span>kind</span><span>:</span> Deployment
<span>metadata</span><span>:</span>
  <span>name</span><span>:</span> recreate<span>-</span>strategy
<span>spec</span><span>:</span>
  <span>strategy</span><span>:</span>
    <span>type</span><span>:</span> Recreate
  <span>selector</span><span>:</span>
    <span>matchLabels</span><span>:</span>
      <span>app</span><span>:</span> web<span>-</span>app<span>-</span>recreate<span>-</span>strategy
      <span>version</span><span>:</span> nanoserver<span>-</span><span>1809</span>
  <span>replicas</span><span>:</span> <span>3</span>
  <span>template</span><span>:</span>
    <span>metadata</span><span>:</span>
      <span>labels</span><span>:</span>
        <span>app</span><span>:</span> web<span>-</span>app<span>-</span>recreate<span>-</span>strategy
    <span>spec</span><span>:</span>
      <span>containers</span><span>:</span>
        <span>-</span> <span>name</span><span>:</span> web<span>-</span>app<span>-</span>recreate<span>-</span>strategy
          <span>image</span><span>:</span> hello<span>-</span>world<span>:</span>nanoserver<span>-</span><span>1809</span></code></pre><p>We can then create the deployment using the kubectl command.</p><pre><code>$ kubectl apply <span>-</span>f recreate<span>.</span>yaml</code></pre><p>Once we have a deployment template, we can provide a way to access the instances of the deployment by creating a Service. Note that we are deploying the image <em>hello-world</em> with version <em>nanoserver-1809</em>. So in this case we have two labels, &#39;name= <em>web-app-recreate-strategy</em>&#39; and &#39;version=<em>nanoserver-1809</em>&#39;. We will set these as the label selector for the service below. Save this to <em>service.yaml</em> file.</p><pre><code><span>apiVersion</span><span>:</span> v1
<span>kind</span><span>:</span> Service
<span>metadata</span><span>:</span> 
  <span>name</span><span>:</span> web<span>-</span>app<span>-</span>recreate<span>-</span>strategy
  <span>labels</span><span>:</span> 
    <span>name</span><span>:</span> web<span>-</span>app<span>-</span>recreate<span>-</span>strategy
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1809</span>
<span>spec</span><span>:</span>
  <span>ports</span><span>:</span>
    <span>-</span> <span>name</span><span>:</span> http
      <span>port</span><span>:</span> <span>80</span>
      <span>targetPort</span><span>:</span> <span>80</span>
  <span>selector</span><span>:</span> 
    <span>name</span><span>:</span> web<span>-</span>app<span>-</span>recreate<span>-</span>strategy
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1809</span>
  <span>type</span><span>:</span> LoadBalancer</code></pre><p>Now creating the service will create a load balancer that is accessible outside the cluster.</p><pre><code>$ kubectl apply <span>-</span>f service<span>.</span>yaml</code></pre><p>The recreate method involves some downtime during the update process. Downtime is not an issue for applications that can handle maintenance windows or outages. However, if there is a mission-critical application with high service level agreements (SLAs) and availability requirements, choosing a different deployment strategy would be the right approach. Recreate deployment is generally used in the development stage by the developers as it is easy to set up, and the application state is entirely renewed with the new version. What&#39;s more, we don&#39;t have to manage more than one application version in parallel, and therefore we avoid backward compatibility challenges for data and applications. </p><h3 id="Blue-Green-Deployment">Blue-Green Deployment</h3><p>In a blue/green deployment strategy (sometimes also referred to as red/black), the blue represents the current application version, and green represents the new application version. In this, only one version is live at a time. Traffic is routed to the blue deployment while the green deployment is created and tested. After we are finished testing, we then route traffic to the new version.</p><p>After the deployment succeeds, we can either keep the blue deployment for a possible rollback or decommission it. Alternatively, it is possible to deploy a newer version of the application on these instances. In that case, the current (blue) environment serves as the staging area for the next release.</p><p>This technique can eliminate downtime as we faced in the recreate deployment strategy. In addition, blue-green deployment reduces risk: if something unexpected happens with our new version on Green, we can immediately roll back to the last version by switching back to Blue. There is instant rollout/rollback. We can also avoid versioning issues; the entire application state is changed in one deployment.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/5vHYgyomFFI2h4okBQyUTH/98d685900acef7c6c1abdea444b947e1/03_blue-green.jpg" alt="Alt text"/></p><p>The Blue-Green deployment is expensive as it requires double the resources. A proper test of the entire platform should be done before releasing it to production. Moreover, handling stateful applications is hard.</p><p>First, we create our <em>blue</em> deployment by saving the following yaml to a &#39;blue.yaml&#39; file:</p><pre><code><span>apiVersion</span><span>:</span> apps/v1
<span>kind</span><span>:</span> Deployment
<span>metadata</span><span>:</span>
  <span>name</span><span>:</span> blue<span>-</span>deployment
<span>spec</span><span>:</span>
  <span>selector</span><span>:</span>
    <span>matchLabels</span><span>:</span>
      <span>app</span><span>:</span> blue<span>-</span>deployment
      <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
  <span>replicas</span><span>:</span> <span>3</span>
  <span>template</span><span>:</span>
    <span>metadata</span><span>:</span>
      <span>labels</span><span>:</span>
        <span>app</span><span>:</span> blue<span>-</span>deployment
        <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
    <span>spec</span><span>:</span>
      <span>containers</span><span>:</span>
        <span>-</span> <span>name</span><span>:</span> blue<span>-</span>deployment
          <span>image</span><span>:</span> hello<span>-</span>world<span>:</span>nanoserver<span>-</span><span>1709</span></code></pre><p>We can then create the deployment using the kubectl command.</p><pre><code>$ kubectl apply <span>-</span>f blue<span>.</span>yaml</code></pre><p>Once we have a deployment template, we can provide a way to access the instances of the deployment by creating a Service. Note that we are deploying the image <em>hello-world</em> with version <em>nanoserver-1809</em>. So in this case we have two labels, &#39;name= <em>blue-deployment</em>&#39; and &#39;version=<em>nanoserver-1709</em>&#39;. We will set these as the label selector for the service below. Save this to <em>service.yaml</em> file.</p><pre><code><span>apiVersion</span><span>:</span> v1
<span>kind</span><span>:</span> Service
<span>metadata</span><span>:</span> 
  <span>name</span><span>:</span> blue<span>-</span>green<span>-</span>service
  <span>labels</span><span>:</span> 
    <span>name</span><span>:</span> blue<span>-</span>deployment
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
<span>spec</span><span>:</span>
  <span>ports</span><span>:</span>
    <span>-</span> <span>name</span><span>:</span> http
      <span>port</span><span>:</span> <span>80</span>
      <span>targetPort</span><span>:</span> <span>80</span>
  <span>selector</span><span>:</span> 
    <span>name</span><span>:</span> blue<span>-</span>deployment
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1709</span>
  <span>type</span><span>:</span> LoadBalancer</code></pre><p>Now creating the service will create a load balancer that is accessible outside the cluster.</p><pre><code>$ kubectl apply <span>-</span>f service<span>.</span>yaml</code></pre><p>We now have the below setup in place.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2mRPpKDjZb7W9UPlmh0dlF/eec0754c5c458b9017bda1ca7c863bc9/04_blue.jpg" alt="Alt text"/></p><p>For the <em>green</em> deployment we will deploy a new deployment in parallel with the <em>blue</em> deployment. The below template is a content of the <code>green<span>.</span>yaml</code> file:</p><pre><code><span>apiVersion</span><span>:</span> apps/v1
<span>kind</span><span>:</span> Deployment
<span>metadata</span><span>:</span>
  <span>name</span><span>:</span> green<span>-</span>deployment
<span>spec</span><span>:</span>
  <span>selector</span><span>:</span>
    <span>matchLabels</span><span>:</span>
      <span>app</span><span>:</span> green<span>-</span>deployment
      <span>version</span><span>:</span> nanoserver<span>-</span><span>1809</span>
  <span>replicas</span><span>:</span> <span>3</span>
  <span>template</span><span>:</span>
    <span>metadata</span><span>:</span>
      <span>labels</span><span>:</span>
        <span>app</span><span>:</span> green<span>-</span>deployment
        <span>version</span><span>:</span> nanoserver<span>-</span><span>1809</span>
    <span>spec</span><span>:</span>
      <span>containers</span><span>:</span>
        <span>-</span> <span>name</span><span>:</span> green<span>-</span>deployment
          <span>image</span><span>:</span> hello<span>-</span>world<span>:</span>nanoserver<span>-</span><span>1809</span></code></pre><p>Note that image <em>hello-world:nanoserver-1809</em> tag-name has changed to 2. So we have made a separate deployment with two labels, name= <em>green-deployment</em> and version=<em>nanoserver-1809</em>.</p><pre><code>$ kubectl apply <span>-</span>f green<span>.</span>yaml</code></pre><p>To cut over to the <em>green</em> deployment, we will update the selector for the existing service. Edit the service.yaml and change the selector version to <em>2</em> and name to <em>green-deployemnt</em>. That will make it so that it matches the pods on the <em>green</em>&#34; deployment.</p><pre><code><span>apiVersion</span><span>:</span> v1
<span>kind</span><span>:</span> Service
<span>metadata</span><span>:</span> 
  <span>name</span><span>:</span> blue<span>-</span>green<span>-</span>service
  <span>labels</span><span>:</span> 
    <span>name</span><span>:</span> green<span>-</span>deployment
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1809</span>
<span>spec</span><span>:</span>
  <span>ports</span><span>:</span>
    <span>-</span> <span>name</span><span>:</span> http
      <span>port</span><span>:</span> <span>80</span>
      <span>targetPort</span><span>:</span> <span>80</span>
  <span>selector</span><span>:</span> 
    <span>name</span><span>:</span> green<span>-</span>deployment
    <span>version</span><span>:</span> nanoserver<span>-</span><span>1809</span>
  <span>type</span><span>:</span> LoadBalancer</code></pre><p>We create the service  again using the kubectl command:</p><pre><code>$ kubectl apply <span>-</span>f service<span>.</span>yaml</code></pre><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3vxIwBo5DZHGWoELo2khCL/aa6a898dcbc97234cc29f6bac6f31c52/05_green.jpg" alt="Alt text"/></p><p>Hence concluding, we can see the blue-green deployment is all-or-nothing, unlike a rolling update deployment, where we aren&#39;t able to gradually roll out the new version. All users will receive the update at the same time, although existing sessions will be allowed to finish their work on the old instances. Hence the stakes are a bit higher than everything should work once we initiate the change. It also requires allocating more server resources since we will need to run two copies of every pod.</p><p>Fortunately, the rollback procedure is just as easy: We simply have to flip the switch again, and the previous version is swapped back into place. That&#39;s because the old version is still running on the old pods. It is simply that traffic is no longer being routed to them. When we are confident that the new version is here to stay, we should decommission those pods.</p><h3 id="Canary-Deployment">Canary Deployment</h3><p>The canary update strategy is a partial update process that allows us to test our new program version on a real user base without a commitment to a full rollout. Similar to blue/green deployments, but they are more controlled, and they use a more progressive delivery where deployment is in a phased approach. There are a number of strategies that fall under the umbrella of canary, including dark launches or A/B testing.</p><p>In canary deployment, the new version of the application is gradually deployed to the Kubernetes cluster while getting a very small amount of live traffic (i.e., a subset of live users are connecting to the new version while the rest are still using the previous version).In this approach, we have two almost identical servers: one that goes to all the current active users and another with the new features that gets rolled out to a subset of users and then compared. When no errors are reported and the confidence increases, the new version can gradually roll out to the rest of the infrastructure. In the end, all live traffic goes to canaries, making the canary version the new <em>production version</em>.</p><p>The below picture shows the most straightforward and simple way to do a canary deployment. A new version is deployed to a subset of servers.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4thRldlIQuLdnmwSjEcmIq/85ed566fcaa6038e74de978112a79df0/06_canary-deployment-1.jpg" alt="Alt text"/></p><p>While this happens, we watch how the upgraded machines are doing. We check for errors and performance problems, and we listen for user feedback. As we grow confident in the canary, we continue installing it on the rest of the machines until they are all running the latest release.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4dsHDsWT30QXUL17T0uphC/5048ee861491e78ae2baa43682446a83/07_canary-deployment-2.png" alt="Alt text"/></p><p>We have to take into account various things when planning a canary deployment:</p><ol start="1"><li><strong>Stages</strong>: how many users will we send to the canary at first, and in how many stages.</li><li><strong>Duration</strong>: how long will we plan to run the canary? Canary releases are different, as we must wait for enough clients to be updated before we can assess the results. This can happen over several days or even weeks.</li><li><strong>Metrics</strong>: what are the metrics to record to analyze progress, including application performance and error reports? Well-chosen parameters are essential for a successful canary deployment. For instance, a very simple way to measure deployment is through HTTP status codes. We can have a simple ping service that returns 200 when the deployment is successful. It will return server end error (5xx) if there is an issue in the deployment.</li><li><strong>Evaluation</strong>: what criteria will we use to determine if the canary is successful</li></ol><p>A canary is used in scenarios where we have to test a new functionality typically on the backend of our application. Canary deployment should be used when we are not 100% confident in the new version; we predict we might have a low chance of failure. This strategy is usually used when we have a major update, like adding a new functionality or experimental feature.</p><h2 id="Summary-K8s-Deployments-Strategies">Summary K8s Deployments Strategies</h2><p>To sum up, there are different ways to deploy an application; when releasing to development/staging environments, a recreate or ramped deployment is usually a good choice. When it comes to production, a ramped or blue/green deployment is usually a good fit, but proper testing of the new platform is necessary. If we are not confident with the stability of the platform and what could be the impact of releasing a new software version, then a canary release should be the way to go. By doing so, we let the consumer test the application and its integration into the platform. In this article, we have only scratched the surface of the capabilities of Kubernetes deployments. By combining deployments with all the other Kubernetes features, users can create more robust containerized applications to suit any need.</p></div></div>]]></content:encoded>
      <pubDate>Fri, 06 Aug 2021 14:59:00 +0000</pubDate>
    </item>
    <item>
      <title>Spring Cloud Messaging With AWS and LocalStack</title>
      <link>https://auth0.com/blog/spring-cloud-messaging-with-aws-and-localstack/</link>
      <description>Learn how to simulate AWS services locally using LocalStack with a Spring Boot application.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p><strong>TL;DR:</strong> This article demonstrates the use of LocalStack and how it can simulate many of the AWS services locally. We will use Spring Cloud Messaging to create a publisher-subscriber sample application. We will use Amazon SNS and SQS to do that.</p><p>The sample app can be found <a href="https://github.com/maniish-jaiin/spring-cloud-messaging-sample" target="_blank" rel="noreferrer noopener">here</a>.</p><h2 id="Spring-Cloud-Messaging-With-AWS-and-LocalStack">Spring Cloud Messaging With AWS and LocalStack</h2><h3 id="Introduction">Introduction</h3><p>With an ever-growing demand for cloud services, Spring provides amazing support to integrate with Cloud providers and relevant services. <a href="https://spring.io/projects/spring-cloud-aws" target="_blank" rel="noreferrer noopener">Spring Cloud for Amazon Web Services</a> is one such project that makes it easy to integrate with AWS services using familiar Spring APIs.</p><p>In this article, we will look into a simple application that acts as a message producer and a consumer using Amazon SNS and SQS. On top of that, we will not create an AWS account or use AWS services directly from AWS. We will instead use LocalStack, which will allow us to create AWS resources locally.</p><p>The sample app can be found <a href="https://github.com/maniish-jaiin/spring-cloud-messaging-sample" target="_blank" rel="noreferrer noopener">here</a>.</p><h3 id="Pre-requisites-">Pre-requisites:</h3><ol start="1"><li>Basic knowledge of AWS, <a href="https://github.com/aws/aws-cli" target="_blank" rel="noreferrer noopener">AWS CLI</a>, and related services like Amazon SQS.</li><li>Basic knowledge of <a href="https://docs.oracle.com/en/java/javase/11/docs/api/index.html" target="_blank" rel="noreferrer noopener">Java 11</a> and Spring Boot <code><span>2.4</span><span>.7</span></code>.</li><li><a href="https://docs.docker.com/get-docker/" target="_blank" rel="noreferrer noopener">Docker</a> and <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noreferrer noopener">Docker Compose</a> for the setup.</li></ol><h2 id="Introduction-to-Amazon-SNS-and-SQS">Introduction to Amazon SNS and SQS</h2><h3 id="Amazon-SNS">Amazon SNS</h3><p><a href="https://aws.amazon.com/sns/" target="_blank" rel="noreferrer noopener">Amazon SNS</a> is an acronym for Simple Notification Service. It provides developers with the highly scalable, cost-effective, and flexible capability to publish messages from an application and send them to other applications. It follows the pub-sub architecture to deliver messages from publishers to the subscribers. It is a highly decoupled service that can be linked to a variety of sources. It can be used to publish emails, messages to SQS, SMS, etc.</p><p>The Publisher (e.g., CloudWatch Alarm, S3 events, SNS, Micro-service) publishes the message on a Topic which is then published to all the Subscribers (web servers, email addresses, Amazon SQS queues, AWS Lambda)  of that particular topic.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/35P87aEWHIcpTOQxYTGWbz/03840ff6c13fdc4a94552ec8188c131e/sns_architecture.jpg" alt="SNS Architecture"/></p><h3 id="Amazon-SQS">Amazon SQS</h3><p><a href="https://aws.amazon.com/sqs/" target="_blank" rel="noreferrer noopener">Amazon SQS</a> is an acronym for Simple Queue Service, and the names convey a lot as it is really simple to use as it is a fully managed service from AWS. It follows similar messaging semantics of the producer putting a message on the queue and consumer reading from it.</p><p>Once consumed, the message has to be deleted from the queue. Deleting is important because SQS assumes that processing can fail. To prevent that, after the consumer receives a message, it is hidden from the queue for a defined period of time, and after that, if it is not deleted, the message shows up in the queue again.</p><p>Both SNS and SQS are fully managed lightweight, easy-to-use APIs. You can use Amazon SQS and SNS to decouple and scale microservices, distributed systems, and serverless applications and improve reliability.</p><h3 id="Introduction-to-LocalStack">Introduction to LocalStack</h3><p><a href="https://github.com/localstack/localstack" target="_blank" rel="noreferrer noopener">LocalStack</a> is an open-source mock of the real AWS services. It provides a testing environment on our local machine with the same APIs as the real AWS services. We switch to using the real AWS services only in the integration environment and beyond. There are plenty of reasons to use LocalStack, few out of which are more important than others, such as:</p><ol start="1"><li>The ability to play with AWS services without interacting with AWS. All developers love to get their hands dirty, and what better way to learn something than to try. Localstack allows you to play with S3, SQS, DynamoDB, SNS, and the list goes on.</li><li>The ability to test the applications in the local dev environment. You can write integration tests for your application using LocalStack, driving down your costs and increasing the confidence in your code.</li></ol><h3 id="Spring-Cloud-Messaging-app-linked-to-LocalStack">Spring Cloud Messaging app linked to LocalStack</h3><p>Spring Cloud AWS provides <a href="https://aws.amazon.com/sqs/" target="_blank" rel="noreferrer noopener">Amazon SQS</a> and <a href="https://aws.amazon.com/sns/" target="_blank" rel="noreferrer noopener">Amazon SNS</a> integration that simplifies the publication and consumption of messages. It reduces a lot of boilerplate code and does the heavy lifting for configuring and SNS and SQS. Let&#39;s set up a Spring boot project with support for SNS and SQS.</p><h4 id="Setting-up-Spring-Boot-app">Setting up Spring Boot app</h4><p>Let us first create a Spring Boot project with the help of the <a href="https://start.spring.io/#!type=maven-project&amp;language=java&amp;platformVersion=2.4.5.RELEASE&amp;packaging=jar&amp;jvmVersion=11&amp;groupId=io.pratik&amp;artifactId=springcloudsqs&amp;name=springcloudsqs&amp;description=Demo%20project%20for%20Spring%20cloud%20sqs&amp;packageName=io.pratik.springcloudsqs&amp;dependencies=web,lombok" target="_blank" rel="noreferrer noopener">Spring boot Initializr</a>, and then open the project in our favorite IDE. Select Maven project and Java language. Last but not least, select Spring boot version <code><span>2.4</span><span>.7</span></code>. Fill in the project metadata and click generate.</p><p>For Spring Cloud, We need to configure Spring Cloud AWS BOM in our <code>pom<span>.</span>xml</code> file using this dependencyManagement block:</p><pre><code><span><span><span>&lt;</span>dependencyManagement</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>dependencies</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>dependency</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>io.awspring.cloud<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>spring-cloud-aws-dependencies<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>version</span><span>&gt;</span></span>2.3.1<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>type</span><span>&gt;</span></span>pom<span><span><span>&lt;/</span>type</span><span>&gt;</span></span>
            <span><span><span>&lt;</span>scope</span><span>&gt;</span></span>import<span><span><span>&lt;/</span>scope</span><span>&gt;</span></span>
        <span><span><span>&lt;/</span>dependency</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>dependencies</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>dependencyManagement</span><span>&gt;</span></span></code></pre><p>For adding the support for messaging, we need to include the module dependency for Spring Cloud AWS Messaging into our Maven configuration. We do this by adding the starter module <code>spring<span>-</span>cloud<span>-</span>starter<span>-</span>aws<span>-</span>messaging</code>:</p><pre><code><span><span><span>&lt;</span>dependency</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>io.awspring.cloud<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>spring-cloud-starter-aws-messaging<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>dependency</span><span>&gt;</span></span></code></pre><p>These are the dependencies required for Spring Cloud AWS. Next, we add some other dependencies such as Spring boot starter web and <a href="https://projectlombok.org/" target="_blank" rel="noreferrer noopener">Lombok</a>.</p><pre><code><span><span><span>&lt;</span>dependencies</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>dependency</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>spring-boot-starter-web<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>version</span><span>&gt;</span></span>2.4.7<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>dependency</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>dependency</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.projectlombok<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>lombok<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>version</span><span>&gt;</span></span>1.18.20<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
        <span><span><span>&lt;</span>scope</span><span>&gt;</span></span>provided<span><span><span>&lt;/</span>scope</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>dependency</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>dependencies</span><span>&gt;</span></span></code></pre><p>This completes our setup process for the Spring boot project.</p><p>Let&#39;s jump into adding the SNS and SQS configs and start publishing our first message.</p><p>Amazon SNS Config:</p><pre><code><span>import</span> <span>com<span>.</span>amazonaws<span>.</span>auth<span>.</span></span><span>AWSStaticCredentialsProvider</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>auth<span>.</span></span><span>BasicAWSCredentials</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>client<span>.</span>builder<span>.</span></span><span>AwsClientBuilder</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>services<span>.</span>sns<span>.</span></span><span>AmazonSNS</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>services<span>.</span>sns<span>.</span></span><span>AmazonSNSClientBuilder</span><span>;</span>
<span>import</span> <span>io<span>.</span>awspring<span>.</span>cloud<span>.</span>messaging<span>.</span>core<span>.</span></span><span>NotificationMessagingTemplate</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Bean</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Configuration</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Primary</span><span>;</span>

<span>import</span> <span>static</span> <span>com<span>.</span>authga<span>.</span>springcloudaws<span>.</span>config<span>.</span></span><span>AWSConfigConstants</span><span>.</span>ACCESS_KEY<span>;</span>
<span>import</span> <span>static</span> <span>com<span>.</span>authga<span>.</span>springcloudaws<span>.</span>config<span>.</span></span><span>AWSConfigConstants</span><span>.</span>SECRET_KEY<span>;</span>

<span>@Configuration</span>
<span>public</span> <span>class</span> <span>SnsConfig</span> <span>{</span>

    <span>@Bean</span>
    <span>public</span> <span>NotificationMessagingTemplate</span> <span>notificationMessagingTemplate</span><span>(</span><span>AmazonSNS</span> amazonSNS<span>)</span> <span>{</span>
        <span>return</span> <span>new</span> <span>NotificationMessagingTemplate</span><span>(</span>amazonSNS<span>)</span><span>;</span>
    <span>}</span>

    <span>@Bean</span>
    <span>@Primary</span>
    <span>public</span> <span>AmazonSNS</span> <span>amazonSNS</span><span>(</span><span>final</span> <span>AwsClientBuilder<span>.</span>EndpointConfiguration</span> endpointConfiguration<span>)</span> <span>{</span>
        <span>BasicAWSCredentials</span> credentials <span>=</span> <span>new</span> <span>BasicAWSCredentials</span><span>(</span>ACCESS_KEY<span>,</span> SECRET_KEY<span>)</span><span>;</span>
        <span>return</span> <span>AmazonSNSClientBuilder</span>
                <span>.</span><span>standard</span><span>(</span><span>)</span>
                <span>.</span><span>withEndpointConfiguration</span><span>(</span>endpointConfiguration<span>)</span>
                <span>.</span><span>withCredentials</span><span>(</span><span>new</span> <span>AWSStaticCredentialsProvider</span><span>(</span>credentials<span>)</span><span>)</span>
                <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>Here, we create a simple <code>AmazonSNSClient</code> with a custom endpoint and credentials. Spring has an auto-configured <code>AmazonSNSClient</code>, but that requires valid AWS credentials and actual resources. We instead want to run our service locally with AWS resources using LocalStack. More on this later. Let&#39;s finish this setup.</p><p>Amazon SQS Config:</p><pre><code><span>import</span> <span>com<span>.</span>amazonaws<span>.</span>auth<span>.</span></span><span>AWSStaticCredentialsProvider</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>auth<span>.</span></span><span>BasicAWSCredentials</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>client<span>.</span>builder<span>.</span></span><span>AwsClientBuilder</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>services<span>.</span>sqs<span>.</span></span><span>AmazonSQSAsync</span><span>;</span>
<span>import</span> <span>com<span>.</span>amazonaws<span>.</span>services<span>.</span>sqs<span>.</span></span><span>AmazonSQSAsyncClientBuilder</span><span>;</span>
<span>import</span> <span>io<span>.</span>awspring<span>.</span>cloud<span>.</span>messaging<span>.</span>config<span>.</span></span><span>QueueMessageHandlerFactory</span><span>;</span>
<span>import</span> <span>io<span>.</span>awspring<span>.</span>cloud<span>.</span>messaging<span>.</span>support<span>.</span></span><span>NotificationMessageArgumentResolver</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Bean</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Configuration</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Primary</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>messaging<span>.</span>converter<span>.</span></span><span>MappingJackson2MessageConverter</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>messaging<span>.</span>converter<span>.</span></span><span>MessageConverter</span><span>;</span>

<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>List</span><span>;</span>

<span>import</span> <span>static</span> <span>com<span>.</span>authga<span>.</span>springcloudaws<span>.</span>config<span>.</span></span><span>AWSConfigConstants</span><span>.</span>*<span>;</span>

<span>@Configuration</span>
<span>public</span> <span>class</span> <span>SqsConfig</span> <span>{</span>

    <span>@Bean</span>
    <span>public</span> <span>AwsClientBuilder<span>.</span>EndpointConfiguration</span> <span>endpointConfiguration</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>new</span> <span>AwsClientBuilder<span>.</span>EndpointConfiguration</span><span>(</span>ENDPOINT<span>,</span> EU_CENTRAL_1<span>)</span><span>;</span>
    <span>}</span>

    <span>@Bean</span>
    <span>@Primary</span>
    <span>public</span> <span>AmazonSQSAsync</span> <span>amazonSQSAsync</span><span>(</span><span>final</span> <span>AwsClientBuilder<span>.</span>EndpointConfiguration</span> endpointConfiguration<span>)</span> <span>{</span>
        <span>BasicAWSCredentials</span> credentials <span>=</span> <span>new</span> <span>BasicAWSCredentials</span><span>(</span>ACCESS_KEY<span>,</span> SECRET_KEY<span>)</span><span>;</span>
        <span>return</span> <span>AmazonSQSAsyncClientBuilder</span>
                <span>.</span><span>standard</span><span>(</span><span>)</span>
                <span>.</span><span>withEndpointConfiguration</span><span>(</span>endpointConfiguration<span>)</span>
                <span>.</span><span>withCredentials</span><span>(</span><span>new</span> <span>AWSStaticCredentialsProvider</span><span>(</span>credentials<span>)</span><span>)</span>
                <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Bean</span>
    <span>public</span> <span>QueueMessageHandlerFactory</span> <span>queueMessageHandlerFactory</span><span>(</span><span>MessageConverter</span> messageConverter<span>)</span> <span>{</span>
        <span>var</span> factory <span>=</span> <span>new</span> <span>QueueMessageHandlerFactory</span><span>(</span><span>)</span><span>;</span>
        factory<span>.</span><span>setArgumentResolvers</span><span>(</span><span>List</span><span>.</span><span>of</span><span>(</span><span>new</span> <span>NotificationMessageArgumentResolver</span><span>(</span>messageConverter<span>)</span><span>)</span><span>)</span><span>;</span>
        <span>return</span> factory<span>;</span>
    <span>}</span>

    <span>@Bean</span>
    <span>protected</span> <span>MessageConverter</span> <span>messageConverter</span><span>(</span><span>)</span> <span>{</span>
        <span>var</span> converter <span>=</span> <span>new</span> <span>MappingJackson2MessageConverter</span><span>(</span><span>)</span><span>;</span>
        converter<span>.</span><span>setSerializedPayloadClass</span><span>(</span><span>String</span><span>.</span><span>class</span><span>)</span><span>;</span>
        converter<span>.</span><span>setStrictContentTypeMatch</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>return</span> converter<span>;</span>
    <span>}</span>
<span>}</span></code></pre><p>In the code above, we did the following:</p><ul><li>Similar to the <code>AmazonSNSClient</code>, we create the <code>AmazonSQSClient</code> with a custom endpoint and credentials.</li><li>Setup <code>QueueMessageHandlerFactory</code> so it can convert incoming messages from SQS as String to the actual object we want, in this case, <code>Event</code>, using a <code>MessageConverter</code>.</li><li>The converter will take care of converting the <code>String</code> message to the actual <code>Event</code> object.</li></ul><p>The <code>Event</code> model is described below. I am using <a href="https://projectlombok.org/" target="_blank" rel="noreferrer noopener">Lombok</a> to reduce the boilerplate code.</p><p><code>Event<span>.</span>java</code></p><pre><code><span>import</span> <span>lombok<span>.</span></span><span>AllArgsConstructor</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>Builder</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>Data</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>NoArgsConstructor</span><span>;</span>

<span>@Data</span>
<span>@AllArgsConstructor</span>
<span>@NoArgsConstructor</span>
<span>@Builder</span>
<span>public</span> <span>class</span> <span>Event</span> <span>implements</span> <span>Comparable</span><span><span>&lt;</span><span>Event</span><span>&gt;</span></span> <span>{</span>
    <span>private</span> <span>String</span> eventId<span>;</span>
    <span>private</span> <span>String</span> version<span>;</span>
    <span>private</span> <span>String</span> occurredAt<span>;</span>
    <span>private</span> <span>EventData</span> data<span>;</span>

    <span>@Override</span>
    <span>public</span> <span>int</span> <span>compareTo</span><span>(</span><span>Event</span> o<span>)</span> <span>{</span>
        <span>int</span> otherVersion <span>=</span> <span>Integer</span><span>.</span><span>parseInt</span><span>(</span>o<span>.</span><span>getVersion</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>int</span> thisVersion <span>=</span> <span>Integer</span><span>.</span><span>parseInt</span><span>(</span><span>this</span><span>.</span><span>getVersion</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>return</span> <span>Integer</span><span>.</span><span>compare</span><span>(</span>thisVersion<span>,</span> otherVersion<span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><p><code>EventData<span>.</span>java</code></p><pre><code><span>import</span> <span>lombok<span>.</span></span><span>AllArgsConstructor</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>Builder</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>Data</span><span>;</span>
<span>import</span> <span>lombok<span>.</span></span><span>NoArgsConstructor</span><span>;</span>

<span>@Data</span>
<span>@AllArgsConstructor</span>
<span>@NoArgsConstructor</span>
<span>@Builder</span>
<span>public</span> <span>class</span> <span>EventData</span> <span>{</span>
    <span>private</span> <span>String</span> orderId<span>;</span>
    <span>private</span> <span>String</span> owner<span>;</span>
    <span>private</span> <span>EventType</span> eventType<span>;</span>
<span>}</span></code></pre><p><code>EventType<span>.</span>java</code></p><pre><code><span>import</span> <span>java<span>.</span>io<span>.</span></span><span>Serializable</span><span>;</span>

<span>public</span> <span>enum</span> <span>EventType</span> <span>implements</span> <span>Serializable</span> <span>{</span>
    ORDER_CREATED<span>,</span> ORDER_CANCELLED
<span>}</span></code></pre><p>Producer code:</p><pre><code><span>import</span> <span>com<span>.</span>authga<span>.</span>springcloudaws<span>.</span>model<span>.</span></span><span>Event</span><span>;</span>
<span>import</span> <span>io<span>.</span>awspring<span>.</span>cloud<span>.</span>messaging<span>.</span>core<span>.</span></span><span>NotificationMessagingTemplate</span><span>;</span>
<span>import</span> <span>lombok<span>.</span>extern<span>.</span>slf4j<span>.</span></span><span>Slf4j</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>beans<span>.</span>factory<span>.</span>annotation<span>.</span></span><span>Autowired</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>stereotype<span>.</span></span><span>Service</span><span>;</span>

<span>import</span> <span>static</span> <span>com<span>.</span>authga<span>.</span>springcloudaws<span>.</span>config<span>.</span></span><span>AWSConfigConstants</span><span>.</span>ORDER_CREATED_TOPIC<span>;</span>

<span>@Slf4j</span>
<span>@Service</span>
<span>public</span> <span>class</span> <span>SimpleMessageProducer</span> <span>{</span>

    <span>@Autowired</span>
    <span>private</span> <span>NotificationMessagingTemplate</span> notificationMessagingTemplate<span>;</span>

    <span>public</span> <span>void</span> <span>publish</span><span>(</span><span>Event</span> event<span>)</span> <span>{</span>
        notificationMessagingTemplate<span>.</span><span>convertAndSend</span><span>(</span>ORDER_CREATED_TOPIC<span>,</span> event<span>)</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><ul><li>We use the <code>NotificationMessagingTemplate</code> created in the config above. It gives us several methods to send messages on an SNS topic. We will use the default <code><span>convertAndSend</span><span>(</span><span>)</span></code> method that takes care of converting our object to a Message using the <code>MessageConverter</code> that we provide in the <code>SqsConfig</code> class.</li></ul><p>Consumer code:</p><pre><code><span>import</span> <span>com<span>.</span>authga<span>.</span>springcloudaws<span>.</span>model<span>.</span></span><span>Event</span><span>;</span>
<span>import</span> <span>io<span>.</span>awspring<span>.</span>cloud<span>.</span>messaging<span>.</span>config<span>.</span>annotation<span>.</span></span><span>NotificationMessage</span><span>;</span>
<span>import</span> <span>io<span>.</span>awspring<span>.</span>cloud<span>.</span>messaging<span>.</span>listener<span>.</span></span><span>SqsMessageDeletionPolicy</span><span>;</span>
<span>import</span> <span>io<span>.</span>awspring<span>.</span>cloud<span>.</span>messaging<span>.</span>listener<span>.</span>annotation<span>.</span></span><span>SqsListener</span><span>;</span>
<span>import</span> <span>lombok<span>.</span>extern<span>.</span>slf4j<span>.</span></span><span>Slf4j</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>stereotype<span>.</span></span><span>Controller</span><span>;</span>

<span>import</span> <span>static</span> <span>com<span>.</span>authga<span>.</span>springcloudaws<span>.</span>config<span>.</span></span><span>AWSConfigConstants</span><span>.</span>ORDER_QUEUE<span>;</span>

<span>@Slf4j</span>
<span>@Controller</span>
<span>public</span> <span>class</span> <span>SimpleMessageConsumer</span> <span>implements</span> <span>MessageConsumer</span> <span>{</span>

    <span>@Override</span>
    <span>@SqsListener</span><span>(</span>value <span>=</span> ORDER_QUEUE<span>,</span> deletionPolicy <span>=</span> <span>SqsMessageDeletionPolicy</span><span>.</span>ON_SUCCESS<span>)</span>
    <span>public</span> <span>void</span> <span>consume</span><span>(</span><span>@NotificationMessage</span> <span>Event</span> event<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>event <span>!=</span> <span>null</span><span>)</span> <span>{</span>
            log<span>.</span><span>info</span><span>(</span><span>&#34;Received order event for consumer 1: &#34;</span> <span>+</span> event<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span></code></pre><ul><li>We only need <code>@SqsListener</code> annotation that automatically makes our consume method get the messages from the queue.</li><li>We also add <code>@NotificationMessage</code> annotation to have the correct deserialization and extract our Event from the SNS message because the SNS message is wrapped inside a <code>Message</code> object.</li></ul><h3 id="Setup-LocalStack-and-create-resources">Setup LocalStack and create resources</h3><p>Setting up LocalStack is dead simple; you just need to use the docker-compose file below, and it will start SNS and SQS services locally. Add the <code>docker compose<span>.</span>yml</code> to the repository&#39;s root directory. Start the LocalStack using: <code>docker<span>-</span>compose up</code>.</p><pre><code><span>version</span><span>:</span> <span>&#39;3.0&#39;</span>

<span>services</span><span>:</span>

  <span>localstack</span><span>:</span>
    <span>image</span><span>:</span> localstack/localstack<span>:</span>latest
    <span>environment</span><span>:</span>
      <span>-</span> AWS_DEFAULT_REGION=eu<span>-</span>central<span>-</span><span>1</span>
      <span>-</span> EDGE_PORT=4566
      <span>-</span> SERVICES=sqs<span>,</span>sns
    <span>ports</span><span>:</span>
      <span>-</span> <span>&#39;4566:4566&#39;</span></code></pre><p>Once it is up and running, we can create the required AWS resources. We will create one SNS topic to which two SQS queues will be listening. The code to or publishing and listening is simple. Go to your command line, e.g., terminal, and execute the following commands.</p><p>To create the topic:</p><pre><code>aws --endpoint-url<span>=</span>http://localhost:4566  sns create-topic  --name  order-created-topic</code></pre><p>To create the queues:</p><pre><code>aws --endpoint-url<span>=</span>http://localhost:4566  sqs create-queue  --queue-name  order-queue
aws --endpoint-url<span>=</span>http://localhost:4566  sqs create-queue  --queue-name  order-queue-2</code></pre><p>To subscribe the queues to the topic:</p><pre><code>aws --endpoint-url<span>=</span>http://localhost:4566 sns subscribe
--topic-arn arn:aws:sns:eu-central-1:000000000000:order-created-topic
--protocol sqs
--notification-endpoint arn:aws:sqs:eu-central-1:000000000000:order-queue

aws --endpoint-url<span>=</span>http://localhost:4566 sns subscribe
--topic-arn arn:aws:sns:eu-central-1:000000000000:order-created-topic
--protocol sqs
--notification-endpoint arn:aws:sqs:eu-central-1:000000000000:order-queue-2</code></pre><p>To verify you can list queues and subscriptions:</p><pre><code>aws --endpoint-url<span>=</span>http://localhost:4566  sqs list-queues
aws --endpoint-url<span>=</span>http://localhost:4566  sns list-subscriptions</code></pre><p>That&#39;s it!</p><h3 id="Verify-sending-and-receiving-of-events">Verify sending and receiving of events</h3><p>Run the Spring Boot app:</p><ol start="1"><li>Clone the sample code from the repo. Go to the root directory.</li><li>Use Maven plugin to run your Spring Boot app using the command in the project directory.</li></ol><pre><code>mvn spring-boot:run</code></pre><p>The groundwork is complete now. With the app running, we can send messages to the Amazon SNS Topic and read those messages from the queues. In the repo, I have created a controller to trigger the publishing of events. If you download the sample app, you should be able to run it, and going to <a href="http://localhost:8080/create-order" target="_blank" rel="noreferrer noopener">http://localhost:8080/create-order</a> will trigger the publisher, which in turn will trigger the consumers. In the application logs, you should be able to see. This means that our producer code publishes the code to the SNS topic. The two queues that are subscribed to the topic receive those messages, and finally, the consumer receives those messages and prints the event.</p><pre><code>Received order event <span>for</span> consumer <span>1</span><span>:</span>
Event<span>{</span>eventId<span>=</span><span>&#39;386cca76-3669-4d36-b2db-01f388bbce5f&#39;</span><span>,</span> version<span>=</span><span>&#39;0&#39;</span><span>,</span>
occurredAt<span>=</span><span>&#39;2021-06-19T13:42:32.946781Z&#39;</span><span>,</span> data<span>=</span><span>EventData</span><span>(</span>orderId<span>=</span><span>9</span>a002b95<span>-</span>f10b<span>-</span><span>428e-8</span>d39<span>-</span>cae90d1e631d<span>,</span>
owner<span>=</span>SampleProducer<span>,</span> eventType<span>=</span><span>ORDER_CREATED</span><span>)</span><span>}</span>

Received order event <span>for</span> consumer <span>2</span><span>:</span>
Event<span>{</span>eventId<span>=</span><span>&#39;386cca76-3669-4d36-b2db-01f388bbce5f&#39;</span><span>,</span> version<span>=</span><span>&#39;0&#39;</span><span>,</span> occurredAt<span>=</span><span>&#39;2021-06-19T13:42:32.946781Z&#39;</span><span>,</span>
data<span>=</span><span>EventData</span><span>(</span>orderId<span>=</span><span>9</span>a002b95<span>-</span>f10b<span>-</span><span>428e-8</span>d39<span>-</span>cae90d1e631d<span>,</span> owner<span>=</span>SampleProducer<span>,</span> eventType<span>=</span><span>ORDER_CREATED</span><span>)</span><span>}</span></code></pre><h2 id="Conclusion">Conclusion</h2><p>LocalStack provides a simple and convenient way to simulate AWS services without having an actual AWS account. You can build applications using various AWS services like Amazon SNS, SQS, S3 DynamoDB, and many more.</p><p>In this article, we have learned how to build a Spring Cloud Messaging app that utilizes LocalStack. We saw how Spring Cloud Messaging provides a layer of abstraction to create an Amazon SQS listener and SNS publisher with just a few lines of code. Furthermore, we saw how to use Amazon SNS and SQS to create an event-driven application.</p><p>You can refer to the repository used in the article on <a href="https://github.com/maniish-jaiin/spring-cloud-messaging-sample" target="_blank" rel="noreferrer noopener">Github</a>.</p></div></div>]]></content:encoded>
      <pubDate>Thu, 05 Aug 2021 14:53:00 +0000</pubDate>
    </item>
    <item>
      <title>Node 16 Support Now Available in Actions</title>
      <link>https://auth0.com/blog/node-16-support-now-available-in-actions/</link>
      <description>Starting Aug 4, 2021, we are rolling out Node 16 as the default runtime for Actions.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>As our next-generation extensibility platform, designed to replace Rules &amp; Hooks, our plan is to support every current and long-term supported Node version through Actions exclusively. </p><p>We recently introduced Node 16 support in Actions. Node 16 is the <em><a href="https://nodejs.org/en/about/releases/" target="_blank" rel="noreferrer noopener">current version published by Node</a></em>. This version does not introduce any breaking changes.  </p><h2 id="What-Does-This-Mean-for-Our-Developers-">What Does This Mean for Our Developers?</h2><p>We will continue to support Node 12 through the Long Term Support (LTS) end coming in April 2022 for all of our extensibility products - Actions, Rules, and Hooks.  However, we encourage developers to stay current in their Node version for security and compliance purposes.  </p><h3 id="Developers-using-Actions">Developers using Actions</h3><p>All new Actions will be set to the Node 16 runtime by default. However, you do not need to migrate every Action immediately to Node 16.  </p><p>Unlike Rules and Hooks, Actions is designed to run actions of varying Node runtimes side by side. With Actions, you no longer need to migrate all code to a single, tenant-level Node runtime. Existing Actions can be upgraded to Node 16 by creating and <a href="https://auth0.com/docs/actions/manage-versions" target="_blank" rel="noreferrer noopener">deploying a new version</a> to Node 16. If needed, existing Actions built on Node 12 can be upgraded to Node 16 and reverted to Node 12.</p><h3 id="Developers-using-legacy-extensibility-products">Developers using legacy extensibility products</h3><p>Our legacy extensibility products (Rules and Hooks) will continue to support Node 12. Node 16 will only roll out to Actions.</p><p>We strongly encourage developers using Rules and Hooks to migrate to Actions, wherever possible, to start taking advantage of the greatly <a href="https://auth0.com/blog/introducing-auth0-actions/" target="_blank" rel="noreferrer noopener">improved developer experience</a> that comes with Actions, such as an industry standard VS Code style editor, typescript, draft mode, version control, improved secret management, an expanded library of NPM modules, and more. </p><p>For developers using Node 8, if there are Rules and Hooks that cannot be immediately migrated to Actions Node 16, at a minimum, update your code to Node 12. Node 8 reached the end of LTS back in December 2019 and since then has not been updated to address critical bugs, security fixes, patches, or other important updates.</p><p>We want to hear from you. Please share any feedback on your experience with Actions and the Node 16 update in our <a href="https://community.auth0.com/c/actions/91" target="_blank" rel="noreferrer noopener">Developer Community</a>.</p></div></div>]]></content:encoded>
      <pubDate>Wed, 04 Aug 2021 16:02:00 +0000</pubDate>
    </item>
    <item>
      <title>Adding Auth0 RBAC Authorization to a Ktor API</title>
      <link>https://auth0.com/blog/adding-auth0-rbac-authorization-to-a-ktor-api/</link>
      <description>Learn how to add Auth0 RBAC authorization to Ktor HTTP API endpoints</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>In the previous post, we created an Auth0 API to represent the Ktor HTTP API and an Auth0 application to allow the frontend application to authenticate users. This allowed us to query the backend API from the frontend application with a valid access token. We also updated the backend API to require a valid access token for the <code><span>protected</span></code> and <code>admin</code> endpoints.</p><p>In this post, we&#39;ll complete the journey by enabling Role-Based Access Controls (RBAC) within Auth0 and restrict access to the <code>admin</code> endpoint in our backend API to those users with the correct permissions.</p><h2 id="RBAC-and-permissions">RBAC and permissions</h2><p>We start by enabling RBAC within our Auth0 API.</p><p>Under the <strong>Settings</strong> tab in the API, switch the <strong>Enable RBAC</strong> and <strong>Add permissions in the Access Token</strong> sliders to the on the setting. Doing so will ensure a <code>permissions</code> claim is added to the access token with any scopes that have been assigned to the logged-in user.</p><p>A detailed discussion on why scopes should not be used to grant permissions is presented in the post <a href="https://auth0.com/blog/on-the-nature-of-oauth2-scopes/" target="_blank" rel="noreferrer noopener">On The Nature of OAuth2&#39;s Scopes</a>. The summary is that a scope constrains the actions that an OAuth client <em>may</em> attempt to perform on behalf of a user, but <em>does not</em> imply that the user has the permission to access any particular resource.</p><p>This has some subtle but significant implications on the claims returned in an Auth0 access token.</p><p>Without enabling the RBAC settings, any scope requested by the OAuth client and consented to by the user will be returned in the <code>scope</code> claim. It doesn&#39;t matter if that scope has been assigned to the user or not - it is returned regardless. It is then the responsibility of the OAuth resource server to allow or deny access to a given resource based on the user&#39;s identity and the action being performed.</p><p>When RBAC is enabled, only scopes that have been requested by the client, <em>and</em> consented to by the user, <em>and</em> assigned to a user will be returned in the <code>scope</code> claim. In this scenario, the resource server can assume the absence of a scope means the client did not request it, the user did not consent to it, or it has not been assigned to the user, and so can quickly deny access.</p><p>By adding the <code>permissions</code> claim, each scope assigned to the user is calculated and included in the access token. The <code>permissions</code> claim is populated without asking for consent from the user, which supports more traditional RBAC style applications, where clients have delegated all the permissions of their users, and the users don&#39;t pick and choose scopes with each login.</p><p>Our sample application will make use of the scopes in the <code>permissions</code> claim to determine access to the API.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/4ZpaxCFDvKa7It8aToFSBP/06e7bd6600e3146032475a399a0d068a/01_build-a-ktor-api-pt-3.png" alt="RBAC"/>
<em>Enabling RBAC and permissions in the access token.</em></p><p>Under the <strong>Permissions</strong> tab, define a new <strong>Permission (Scope)</strong> of <code>read<span>:</span>admin<span>-</span>messages</code> and a <strong>Description</strong> of <strong>The ability to access the admin endpoint</strong>. Click the <strong>Add</strong> button to save the new permission:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1DJaaadYXA4vGKV9i9R8LK/4564b6449b1b1d190f2345638431b92d/02_build-a-ktor-api-pt-3.png" alt="API"/>
<em>Creating an API permission.</em></p><h3 id="Creating-the-role">Creating the role</h3><p>We now create a role to hold the permissions required by our API. Click the <strong>User Management -&gt; Roles</strong> option and click the <strong>Create Role</strong> button.</p><p>In the <strong>New Role</strong> dialog, enter a name of <strong>messages-admin</strong>, enter a description, and click the <strong>Create</strong> button:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7EQTp4sJS03bScEWno7kEa/a1c2586b32a480c4b166fb4ce5ba09b5/03_build-a-ktor-api-pt-3.png" alt="Roles"/>
<em>Creating a new role.</em></p><p>Under the <strong>Permissions</strong> tab click the <strong>Add Permissions</strong> button. In the <strong>Add Permissions</strong> dialog select the API we created earlier, select the <strong>read:admin-messages</strong> permission, and click the <strong>Add Permission</strong> button:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/ZBB0FviUiLxmOzXoeDvJV/20ce7562521525551515e16e1c23bbe2/04_build-a-ktor-api-pt-3.png" alt="Permissions"/>
<em>Adding permissions to a role.</em></p><h3 id="Assigning-the-role-to-a-user">Assigning the role to a user</h3><p>For the purposes of this demo, I&#39;ll assume you have already <a href="https://auth0.com/docs/users/create-users" target="_blank" rel="noreferrer noopener">created an Auth0 user</a>. I&#39;ll also assume this user is linked to the application that was created earlier.</p><p>Select the user, click the <strong>Roles</strong> tab, and click the <strong>Assign Roles</strong> button.</p><p>In the <strong>Add Roles</strong> dialog, select the <strong>messages-admin</strong> role and click the <strong>Assign</strong> button:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6X6s3poUPbop1eG6LShtqM/b8147045f0f291e2e853b6f8027a1e74/05_build-a-ktor-api-pt-3.png" alt="User"/>
<em>Assigning a role to a user.</em></p><p>Auth0 is now configured and ready to authenticate our frontend application. We can move on to updating our Ktor HTTP API to check for the presence of these permissions when accessing the <code>admin</code> endpoint.</p><h2 id="The-sample-application-code">The sample application code</h2><p>To build the backend application, you&#39;ll need to have JDK 11 or above, which is available from many sources, including <a href="https://openjdk.java.net/install/" target="_blank" rel="noreferrer noopener">OpenJDK</a>, <a href="https://adoptopenjdk.net/" target="_blank" rel="noreferrer noopener">AdoptOpenJDK</a>, <a href="https://www.azul.com/downloads/" target="_blank" rel="noreferrer noopener">Azul</a>, or <a href="https://www.oracle.com/au/java/technologies/javase-jdk11-downloads.html" target="_blank" rel="noreferrer noopener">Oracle</a>.</p><p>The final code for the Ktor application can be found <a href="https://github.com/mcasperson/Auth0Ktor" target="_blank" rel="noreferrer noopener">here</a>. The code discussed in each post is matched by a branch:</p><ul><li><a href="https://github.com/mcasperson/Auth0Ktor/tree/starter" target="_blank" rel="noreferrer noopener">starter</a> <ul><li>the base API with no authentication or authorization.</li></ul></li><li><a href="https://github.com/mcasperson/Auth0Ktor/tree/add-authorization" target="_blank" rel="noreferrer noopener">add-authorization</a> <ul><li>the API requiring a valid access token for the <code><span>protected</span></code> and <code>admin</code> endpoints.</li></ul></li><li><a href="https://github.com/mcasperson/Auth0Ktor/tree/add-rbac" target="_blank" rel="noreferrer noopener">add-rbac</a> <ul><li>the API requiring special permissions to access the <code>admin</code> endpoint. This branch is discussed in this post.</li></ul></li></ul><p>The frontend application code can be found <a href="https://github.com/auth0-sample-gallery/spa_react_javascript_hello-world" target="_blank" rel="noreferrer noopener">here</a>.</p><h2 id="Updating-the-API">Updating the API</h2><p>The backend API must now be updated to ensure the <code>admin</code> endpoint requires the access token, including the <code>read<span>:</span>admin<span>-</span>messages</code> permission. The complete code for the <code>src<span>/</span>Application<span>.</span>kt</code> file is shown below:</p><pre><code><span>package</span> com<span>.</span>matthewcasperson

<span>import</span> com<span>.</span>auth0<span>.</span>jwk<span>.</span>JwkProviderBuilder
<span>import</span> io<span>.</span>ktor<span>.</span>application<span>.</span><span>*</span>
<span>import</span> io<span>.</span>ktor<span>.</span>auth<span>.</span><span>*</span>
<span>import</span> io<span>.</span>ktor<span>.</span>auth<span>.</span>jwt<span>.</span><span>*</span>
<span>import</span> io<span>.</span>ktor<span>.</span>features<span>.</span><span>*</span>
<span>import</span> io<span>.</span>ktor<span>.</span>http<span>.</span><span>*</span>
<span>import</span> io<span>.</span>ktor<span>.</span>response<span>.</span><span>*</span>
<span>import</span> io<span>.</span>ktor<span>.</span>routing<span>.</span><span>*</span>
<span>import</span> java<span>.</span>util<span>.</span>concurrent<span>.</span>TimeUnit

<span>fun</span> <span>main</span><span>(</span>args<span>:</span> Array<span>&lt;</span>String<span>&gt;</span><span>)</span><span>:</span> Unit <span>=</span> io<span>.</span>ktor<span>.</span>server<span>.</span>netty<span>.</span>EngineMain<span>.</span><span>main</span><span>(</span>args<span>)</span>

<span>fun</span> <span>validateCreds</span><span>(</span>credential<span>:</span> JWTCredential<span>,</span> permission<span>:</span> String<span>?</span> <span>=</span> <span>null</span><span>)</span><span>:</span> JWTPrincipal<span>?</span> <span>{</span>
    <span>val</span> containsAudience <span>=</span> credential<span>.</span>payload<span>.</span>audience<span>.</span><span>contains</span><span>(</span>System<span>.</span><span>getenv</span><span>(</span><span>&#34;AUDIENCE&#34;</span><span>)</span><span>)</span>
    <span>val</span> containsScope <span>=</span> permission<span>.</span><span>isNullOrBlank</span><span>(</span><span>)</span> <span>||</span>
            credential<span>.</span>payload<span>.</span>claims<span>[</span><span>&#34;permissions&#34;</span><span>]</span><span>?</span><span>.</span><span>asArray</span><span>(</span>String<span>::</span><span>class</span><span>.</span>java<span>)</span><span>?</span><span>.</span><span>contains</span><span>(</span>permission<span>)</span> <span>==</span> <span>true</span>

    <span>if</span> <span>(</span>containsAudience <span>&amp;&amp;</span> containsScope<span>)</span> <span>{</span>
        <span>return</span> <span>JWTPrincipal</span><span>(</span>credential<span>.</span>payload<span>)</span>
    <span>}</span>

    <span>return</span> <span>null</span>
<span>}</span>

<span>fun</span> Application<span>.</span><span>module</span><span>(</span><span>)</span> <span>{</span>

    <span>val</span> jwkProvider <span>=</span> <span>JwkProviderBuilder</span><span>(</span>System<span>.</span><span>getenv</span><span>(</span><span>&#34;ISSUER&#34;</span><span>)</span><span>)</span>
        <span>.</span><span>cached</span><span>(</span><span>10</span><span>,</span> <span>24</span><span>,</span> TimeUnit<span>.</span>HOURS<span>)</span>
        <span>.</span><span>rateLimited</span><span>(</span><span>10</span><span>,</span> <span>1</span><span>,</span> TimeUnit<span>.</span>MINUTES<span>)</span>
        <span>.</span><span>build</span><span>(</span><span>)</span>

    <span>install</span><span>(</span>Authentication<span>)</span> <span>{</span>
        <span>jwt</span><span>(</span><span>&#34;auth0&#34;</span><span>)</span> <span>{</span>
            <span>verifier</span><span>(</span>jwkProvider<span>,</span> System<span>.</span><span>getenv</span><span>(</span><span>&#34;ISSUER&#34;</span><span>)</span><span>)</span>
            validate <span>{</span> credential <span>-&gt;</span> <span>validateCreds</span><span>(</span>credential<span>)</span> <span>}</span>
        <span>}</span>
        <span>jwt</span><span>(</span><span>&#34;auth0-admin&#34;</span><span>)</span> <span>{</span>
            <span>verifier</span><span>(</span>jwkProvider<span>,</span> System<span>.</span><span>getenv</span><span>(</span><span>&#34;ISSUER&#34;</span><span>)</span><span>)</span>
            validate <span>{</span> credential <span>-&gt;</span> <span>validateCreds</span><span>(</span>credential<span>,</span> <span>&#34;read:admin-messages&#34;</span><span>)</span> <span>}</span>
        <span>}</span>
    <span>}</span>
    <span>install</span><span>(</span>CORS<span>)</span> <span>{</span>
        <span>anyHost</span><span>(</span><span>)</span>
        <span>method</span><span>(</span>HttpMethod<span>.</span>Options<span>)</span>
        <span>method</span><span>(</span>HttpMethod<span>.</span>Get<span>)</span>
        <span>header</span><span>(</span><span>&#34;authorization&#34;</span><span>)</span>
        allowCredentials <span>=</span> <span>true</span>
        allowNonSimpleContentTypes <span>=</span> <span>true</span>

    <span>}</span>


    routing <span>{</span>
        <span>get</span><span>(</span><span>&#34;/api/messages/public&#34;</span><span>)</span> <span>{</span>
            call<span>.</span><span>respondText</span><span>(</span>
                <span>&#34;&#34;&#34;{&#34;message&#34;: &#34;The API doesn&#39;t require an access token to share this message.&#34;}&#34;&#34;&#34;</span><span>,</span>
                contentType <span>=</span> ContentType<span>.</span>Application<span>.</span>Json
            <span>)</span>
        <span>}</span>
    <span>}</span>

    routing <span>{</span>
        <span>authenticate</span><span>(</span><span>&#34;auth0&#34;</span><span>)</span> <span>{</span>
            <span>get</span><span>(</span><span>&#34;/api/messages/protected&#34;</span><span>)</span> <span>{</span>
                call<span>.</span><span>respondText</span><span>(</span>
                    <span>&#34;&#34;&#34;{&#34;message&#34;: &#34;The API successfully validated your access token.&#34;}&#34;&#34;&#34;</span><span>,</span>
                    contentType <span>=</span> ContentType<span>.</span>Application<span>.</span>Json
                <span>)</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>

    routing <span>{</span>
        <span>authenticate</span><span>(</span><span>&#34;auth0-admin&#34;</span><span>)</span> <span>{</span>
            <span>get</span><span>(</span><span>&#34;/api/messages/admin&#34;</span><span>)</span> <span>{</span>
                call<span>.</span><span>respondText</span><span>(</span>
                    <span>&#34;&#34;&#34;{&#34;message&#34;: &#34;The API successfully recognized you as an admin.&#34;}&#34;&#34;&#34;</span><span>,</span>
                    contentType <span>=</span> ContentType<span>.</span>Application<span>.</span>Json
                <span>)</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
<span>}</span></code></pre><p>Let&#39;s highlight the changes required from the code presented in the previous blog post.</p><p>We&#39;ve updated the <code>validateCreds</code> function to include an optional <code>permission</code> parameter. If a permission has been supplied, we ensure it is present in the <code>permissions</code> claim on the access token:</p><pre><code><span>fun</span> <span>validateCreds</span><span>(</span>credential<span>:</span> JWTCredential<span>,</span> permission<span>:</span> String<span>?</span> <span>=</span> <span>null</span><span>)</span><span>:</span> JWTPrincipal<span>?</span> <span>{</span>
    <span>val</span> containsAudience <span>=</span> credential<span>.</span>payload<span>.</span>audience<span>.</span><span>contains</span><span>(</span>System<span>.</span><span>getenv</span><span>(</span><span>&#34;AUDIENCE&#34;</span><span>)</span><span>)</span>
    <span>val</span> containsScope <span>=</span> permission<span>.</span><span>isNullOrBlank</span><span>(</span><span>)</span> <span>||</span>
            credential<span>.</span>payload<span>.</span>claims<span>[</span><span>&#34;permissions&#34;</span><span>]</span><span>?</span><span>.</span><span>asArray</span><span>(</span>String<span>::</span><span>class</span><span>.</span>java<span>)</span><span>?</span><span>.</span><span>contains</span><span>(</span>permission<span>)</span> <span>==</span> <span>true</span>

    <span>if</span> <span>(</span>containsAudience <span>&amp;&amp;</span> containsScope<span>)</span> <span>{</span>
        <span>return</span> <span>JWTPrincipal</span><span>(</span>credential<span>.</span>payload<span>)</span>
    <span>}</span>

    <span>return</span> <span>null</span>
<span>}</span></code></pre><p>We then define a second authentication mechanism called <code>auth0<span>-</span>admin</code> requiring the permission <code>read<span>:</span>admin<span>-</span>messages</code> in order to pass validation:</p><pre><code>    <span>install</span><span>(</span>Authentication<span>)</span> <span>{</span>
        <span>// ...</span>
        <span>jwt</span><span>(</span><span>&#34;auth0-admin&#34;</span><span>)</span> <span>{</span>
            <span>verifier</span><span>(</span>jwkProvider<span>,</span> System<span>.</span><span>getenv</span><span>(</span><span>&#34;ISSUER&#34;</span><span>)</span><span>)</span>
            validate <span>{</span> credential <span>-&gt;</span> <span>validateCreds</span><span>(</span>credential<span>,</span> <span>&#34;read:admin-messages&#34;</span><span>)</span> <span>}</span>
        <span>}</span>
    <span>}</span></code></pre><p>Finally, the route exposing the <code>admin</code> endpoint is updated to use the new <code>auth0<span>-</span>admin</code> authentication mechanism:</p><pre><code>    routing <span>{</span>
        <span>authenticate</span><span>(</span><span>&#34;auth0-admin&#34;</span><span>)</span> <span>{</span>
            <span>get</span><span>(</span><span>&#34;/api/messages/admin&#34;</span><span>)</span> <span>{</span>
                call<span>.</span><span>respondText</span><span>(</span>
                    <span>&#34;&#34;&#34;{&#34;message&#34;: &#34;The API successfully recognized you as an admin.&#34;}&#34;&#34;&#34;</span><span>,</span>
                    contentType <span>=</span> ContentType<span>.</span>Application<span>.</span>Json
                <span>)</span>
            <span>}</span>
        <span>}</span>
    <span>}</span></code></pre><h2 id="Inspecting-the-access-token">Inspecting the access token</h2><p>By capturing the network traffic sent by the frontend (as we did in the previous post), we can copy the access token to <a href="https://jwt.io" target="_blank" rel="noreferrer noopener">jwt.io</a> to inspect the JWT contents.</p><p>Note that the token includes the <code>permissions</code> claim, which defines the <code>read<span>:</span>admin<span>-</span>messages</code> permission:</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/eFammxKcqhwLSKDPgfxRU/8b24e9b2c662143d983b4033aef61197/Assigning_the_role_to_a_user.jpg" alt="Inspecting the access token"/>
<em>A parsed JWT token.</em></p><h2 id="Conclusion">Conclusion</h2><p>In this post, we completed our three-part journey creating an HTTP API with Ktor, requiring authentication via Auth0, and finally enabling RBAC. By embedding the permissions assigned to a user in the <code>permissions</code> scope and verifying the presence of a known permission for any queries to the <code>admin</code> endpoint, we can be sure that only authorized users can access the restricted endpoints in our HTTP API.</p></div></div>]]></content:encoded>
      <pubDate>Tue, 03 Aug 2021 15:12:00 +0000</pubDate>
    </item>
    <item>
      <title>Time to Prepare: Be Ready to Scale Your Workforce and App</title>
      <link>https://auth0.com/blog/time-to-prepare-be-ready-to-scale-your-workforce-and-app/</link>
      <description>The consumer speaks — how readiness to scale wins the security and privacy battle for the customer</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>If you sped through your digital road map during the pandemic and are looking to fill security and privacy gaps right now, go back and check out my earlier posts:</p><ul><li><a href="https://auth0.com/blog/accelerated-your-road-map-go-fix-workforce-and-app-security" target="_blank" rel="noreferrer noopener">Accelerated Your Road Map? Go Fix Workforce and App Security</a></li><li><a href="https://auth0.com/blog/workforce-and-app-privacy-have-changed-so-should-you" target="_blank" rel="noreferrer noopener">Workforce and App Privacy Have Changed, So Should You</a></li></ul><p>This post is about making the shift from reaction to preparation so that you are ready for the next moment that requires speed – and set up to scale.</p><h2 id="Find-Your-Balance">Find Your Balance</h2><p>In all of these posts, we mention speed and imply pressure. There is always going to be a business reason to get an app to market as quickly as possible. You will discover vulnerabilities that require your immediate attention. And regulations will set deadlines for you. </p><p>So there is always going to be more you could do to improve security for your customers, your business, and the rest of the internet. Even for veteran security professionals, the pandemic was a reminder that we still need to pick and choose priorities. If you have an internal security team, lean into their expertise. Give them the time and space to guide you on priorities. Listen to their assessments of risk and let them set a pace that works for your business.</p><p>Longer-term security and privacy improvements can have big payoffs. Like the previous posts, these things require action. You’re also going to need to support your existing security team or create one. By support, I mean backing conversations about risks with budget for tools, external vendors, and hiring internal talent.</p><p>If you don’t currently have security or privacy teams, we’ll cover a bit of advice on what to look for as well.</p><h2 id="Consumers-Expect-and-Deserve-Strong-Security-and-Privacy">Consumers Expect and Deserve Strong Security and Privacy</h2><p>Let’s also set some context.</p><p>There was a time when businesses leaned heavily into just shipping the product. Speed often won over security or privacy.</p><blockquote><p>Consumers are telling us that time is over.</p></blockquote><p>In a <a href="https://www.mckinsey.com/business-functions/risk/our-insights/the-consumer-data-opportunity-and-the-privacy-imperative" target="_blank" rel="noreferrer noopener">recent global survey</a>, McKinsey found that 87% of consumer respondents said security practice concerns would mean they wouldn’t do business with a company, and 71% would stop doing business if it gave away sensitive data without their permission. </p><blockquote><p>The more secure and private app is now the one that keeps and attracts customers. </p></blockquote><h2 id="Security--Longer-Term-Planning">Security: Longer-Term Planning</h2><p>If you’re looking to make a dramatic improvement in your cybersecurity, these best practices will help get you there.</p><ul><li><strong>Increase pen test frequency.</strong> Penetration testing (pen testing) includes hiring an external vendor to test your application and site for vulnerabilities and provide you with a report cataloged by severity. Many companies do this once a year and call it good. In today’s evolving threat environment, that’s not enough. If you can up your pen testing to every quarter — and take action on what you learn — you’ll see a big increase in security. Adding a pen test after every major operating system upgrade, library update, or major code push will do even more.</li><li><strong>Improve your software development life cycle (SLDC).</strong> Many shops are still doing security after the product is completely coded, but this creates an automatic security backlog that can not only slow getting your product to market it can put pressure on your execs to allow unnecessary risks into the wild. Involving security and privacy teams as software is being developed allows them to raise questions that influence architecture before burning hours of engineering time. Few people like to put hours and hours into something only to have to take it apart, so your devs are rarely pleased to see this analysis tacked on at the end of the SLDC., which leads me to my next point.</li><li><strong>Encourage ownership and collaboration between devs and security.</strong> How you introduce the idea of static and dynamic code analysis as well as overall participation of security in the SLDC matters. Explaining that humans are fallible, so all code is going to have vulnerabilities, and there are going to be remote code executions (RCEs) is a good place to start. As a dev, they don’t want RCEs creating headaches, and they don’t want to get paged and work nights because problems have been discovered and exploited. You can encourage ownership by asking your dev team to review the security team handling analyses. Ultimately, this can go a long way towards establishing security-dev collaboration, leading to apps that get to market more securely as well quickly.</li><li><strong>Create a golden image.</strong> A <a href="https://www.cisecurity.org/cis-hardened-images/" target="_blank" rel="noreferrer noopener">golden Image</a>is a single machine image that has been tested and hardened. When there is an operating system or library update, the AMI gets updated and tested. This allows you to see how your customers might be impacted before you push that patch update out to thousands of users. It also provides an approved starting point for new business units or apps. The time it takes to create and maintain this image pays off in protected services and reduced downtimes. Using <a href="https://en.wikipedia.org/wiki/Hardening_(computing" target="_blank" rel="noreferrer noopener">hardened</a>) images also increases reliability and consistency.</li></ul><h2 id="Hiring-Security-Talent">Hiring Security Talent</h2><p>Security can seem like an area that is purely technical — and your team does need to have a deep understanding of your product and how it works, but sooner or later, a human is going to touch or use your product. Strong security talent needs to understand human behavior from bad actors to customers. Your chief information security officer (CISO) also needs to be able to explain technical risks and benefits to non-technical executive teams.</p><p>There’s a cybersecurity talent shortage globally. According to an International Information System Security Certification Consortium (ISC)² <a href="https://www.isc2.org/Research/Workforce-Study#" target="_blank" rel="noreferrer noopener">report</a>, that shortage shrank slightly during the pandemic, from 4 million open jobs in 2019 to 3.1 million. You’re going to need to compete for talent.</p><p>Your new CISO also needs to understand your industry because threats are often industry-specific. Here are some questions to ask your hiring team when considering a potential candidate:</p><ul><li>Are they passionate about not only security but also your company?</li><li>Do they have experience in your industry? If not, how adept are they at cross-applying knowledge?</li><li>Areas of expertise? If you need them to be a generalist, do they understand how to source third-party support (and are you willing to fund that support)?</li><li>Do they welcome diversity?</li><li>Do they contribute to open source security?</li><li>Do they regularly attend and speak at conferences?</li><li>Can they explain the business case for your product?</li></ul><h2 id="Privacy--Longer-Term-Planning">Privacy: Longer-Term Planning</h2><p>Consumers are demanding a secure and contextual private experience — and we’re seeing regulators back them up with a variety of data privacy regulations.</p><p>&#34;<em>By industry, consumers are most comfortable sharing data with providers in healthcare and financial services, though no industry reached a trust rating of 50 percent for data protection,</em>” notes <a href="https://www.mckinsey.com/business-functions/risk/our-insights/the-consumer-data-opportunity-and-the-privacy-imperative" target="_blank" rel="noreferrer noopener">McKinsey</a>.</p><p>This isn’t one of those things that is going away, says Auth0’s Vice President of Privacy Lucy McGrath. Globally, we’re seeing consumer groups becoming more vocal about data privacy concerns and violations with filings against companies like <a href="https://www.beuc.eu/publications/consumer-groups-file-complaint-against-whatsapp-unfairly-pressuring-users-accept-its/html" target="_blank" rel="noreferrer noopener">What’sApp</a>. </p><p>“<em>Data privacy is going to continue to evolve with consumers’ awareness and expectations,</em>” says Lucy. “<em>To adapt, companies are going to have to think beyond just meeting the bare minimum of legal requirements. They need to ask themselves hard questions about what protections are appropriate given the context and the humans you’re interacting with and work through the answers. We need to be building proactive privacy programs that reflect these data privacy conversations. Creating consumer trust requires listening and deliberate action.</em>”</p><p>Start with these questions:</p><ul><li>Have I taken the time to understand the relationship my digital properties (app, site) create with my customers? How do I want them to feel at login? What about as they continue through my app or site?</li><li>Am I encouraging or discouraging trust by how I gather consent and data?</li><li>Have I created a transparent customer experience (CX) with clear consent and options?</li><li>If I am really honest with myself, do I need to change something? Do I really need this data?</li><li>Who are my customers? What does privacy mean to them in the context of my services?</li><li>Do I have appropriate basic security and data governance processes in place?</li><li>Have I invested extra resources and time to protect the most sensitive/high-risk data such as health, financial, religious, or sexual orientation information?</li><li>Do I have any customers in regulated jurisdictions such as the European Union (EU) or California? If so, when was the last time I checked in with my legal counsel to make sure I’m in line with current requirements?</li></ul><h2 id="Provide-Cues-for-Safety-and-Trust">Provide Cues for Safety and Trust</h2><p><a href="https://www.wired.com/story/apple-app-privacy-labels/" target="_blank" rel="noreferrer noopener">Apple’s nutrition labels for data privacy</a> make good on efforts that have been around since the 2010s. If your new app is going to be in the App Store, Apple requires that you report publicly on data you’re using to track your customers, data linked to them, and data gathered but not linked to them. Even though Apple is relying on app developers to self-report, the labels increase consumer awareness and expectation, says Lucy. Given Apple’s size ($274.5 billion reported revenue in 2020 makes it the world’s largest company), these nutrition labels signal that data privacy is now an everyday consumer concern.</p><p>“<em>Businesses who don’t respond could miss out</em>”, says Lucy. “<em>The threats of data privacy fines and unhappy customers are real, but so is the opportunity to create customer experiences (CX) that drive brand loyalty. The entire tech industry is coming together to work on these data privacy challenges. Companies that act on the side of the consumer stand out.</em>”</p><h2 id="Hiring-Data-Privacy-Talent">Hiring Data Privacy Talent</h2><p>Like security, data privacy professionals need to understand and express the intersection of humans and technology. They need to be able to communicate risks and benefits across an entire organization, with an emphasis on engineering, marketing, and senior leadership. Critical and analytical thinking, empathy, and consideration of different motivations and perspectives are key. Technical knowledge around privacy laws can be taught, but an ability to engage, listen and understand the context of the business and their customers is essential. Privacy isn’t “done” by privacy professionals - they support all parts of the business to build privacy protections into their individual business processes.</p><p>Lucy recommends that you ask candidates questions to show how they think about privacy issues in the context of the businesses in which they work. Examples of such questions include: </p><ul><li>How would you demonstrate the value of good privacy practices to the chief financial officer (CFO)?</li><li>How do you respond to the statement: privacy slows the business down?</li><li>What can you do to support developers to integrate privacy controls into their development lifecycle?</li><li>Provide examples of when you have translated legal obligations into plain English requirements that the business can implement?</li><li>Which company does privacy well? Why? How would you implement similar standards here?</li><li>What are the key privacy risks that need to be prioritized? What actions are required to mitigate these risks?</li></ul><h2 id="You-re-Helping-Make-the-Internet-Safer">You’re Helping Make the Internet Safer</h2><p>Thank you for checking out this series. One of the things that came up while working on this content is how the pandemic has made everything even more connected. The <a href="https://auth0.com/resources/whitepapers/state-of-security-identity-report" target="_blank" rel="noreferrer noopener">threat landscape</a> and regulatory requirements can seem overwhelming, but taking the time to secure your personal data, your customer’s data, and your businesses make it harder for bad actors.</p><p>Identity can be a weak spot for both security and privacy if it’s not handled by experts. A strong Customer Identity Access Management (CIAM) solution like Auth0 can increase your security, support your data privacy strategy, and comes with certifications for various compliance requirements like <a href="https://auth0.com/blog/what-is-iso-27001-2013-a-guide-for-businesses/" target="_blank" rel="noreferrer noopener">ISO 27001:2013</a> and <a href="https://auth0.com/blog/what-is-iso-27018-2019-everything-executives-need-to-know/" target="_blank" rel="noreferrer noopener">ISO 27018:2019</a> and <a href="https://auth0.com/blog/the-csa-star-program-a-business-guide-to-certification/" target="_blank" rel="noreferrer noopener">CSA Star</a>. If you’d like to learn more about how Auth0 can help make your business more secure and stay ahead of your customers’ evolving expectations, please <a href="https://auth0.com/contact-us?place=header&amp;type=button&amp;text=contact%20sales" target="_blank" rel="noreferrer noopener">reach out to the team at Auth0</a>.</p><div><h2 id="About-Auth0">About Auth0 </h2><p>Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit <a href="https://auth0.com/" target="_blank" rel="noopener noreferrer">https://auth0.com</a>.</p></div></div></div>]]></content:encoded>
      <pubDate>Fri, 30 Jul 2021 16:32:00 +0000</pubDate>
    </item>
    <item>
      <title>LATAM Response to Rapid Digital Change</title>
      <link>https://auth0.com/blog/latam-response-to-rapid-digital-change/</link>
      <description>Why Naranja and Wabi turned to Auth0 to ensure identity expertise and scaling</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>The market in Latin America is growing faster than ever, with new venture capital deals nearly doubling to 488 between 2017 and 2020, according to <a href="https://www.bloomberg.com/news/articles/2021-03-16/latin-american-startups-had-record-venture-capital-deals-in-2020" target="_blank" rel="noreferrer noopener">Bloomberg</a>. Beyond VC, a <a href="https://publications.iadb.org/publications/english/document/Tecnolatinas-2021-The-LAC-Startup-Ecosystem-Comes-of-Age.pdf" target="_blank" rel="noreferrer noopener">study by IDB lab</a> revealed that the tech-enabled startup market hit a valuation of more than $220 billion USD in 2020.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/Gz6t31FLxbPc7r8T996gE/caed742f057acf90192df17560dbf527/Latam11.jpg" alt="LATAM"/></p><p>Globally, the pandemic has <a href="https://auth0.com/blog/how-brick-and-mortar-approaches-improve-digital-experiences/" target="_blank" rel="noreferrer noopener">accelerated digital road maps across industries</a> and businesses now have to respond to changes in digital expectations and buying patterns.
</p><div itemscope="" itemtype="http://schema.org/Person" itemprop="author"><p>“Companies cannot predict exactly what their business and customers will need tomorrow, especially in response to today’s rapidly changing digital environment.”</p><p>Gabriel Camargo</p><p>Product Director</p><p>CLM</p></div><p>Partnering with <a href="https://auth0.com/blog/auth0-expands-global-partner-network-in-latin-america-with-clm/" target="_blank" rel="noreferrer noopener">CLM</a> on distribution in Latin America (LATAM) extends Auth0’s reach into Brazil, Colombia, Ecuador, and Peru.</p><p>Over the years of working within Latin America, we’ve learned that <a href="https://auth0.com/blog/building-an-identity-solution-quantity-doesnt-equal-quality" target="_blank" rel="noreferrer noopener">identity expertise</a> and <a href="https://auth0.com/blog/can-your-identity-solution-grow-with-your-company" target="_blank" rel="noreferrer noopener">scalability</a> are two critical areas of concern for businesses in the region. You can check out our earlier posts in this series for details, but here, we wanted to look more closely at how we were able to help two companies within the region.</p><h2 id="Naranja---From-Leading-Credit-Card-Issuer-in-Argentina--To-Complete-Consumer-Ecosystem">Naranja — From Leading Credit Card Issuer in Argentina, To Complete Consumer Ecosystem</h2><p><a href="https://auth0.com/case-studies/naranja/" target="_blank" rel="noreferrer noopener">Fintech leader Naranja</a> has been providing credit cards to the Argentinian market for over 30 years. In that time, they’ve grown to cover over 5 million customers by keeping those customers’ needs their top priority. As they grew, Naranja also began to integrate additional verticals into their business model. Pretty soon, they were offering payment services, financing, travel, media, and other services beyond their credit card programs.</p><p>As they added these verticals, Naranja’s head of engineering Javier Voos soon realized they would need to consolidate their identity solution to cover all aspects of their growing ecosystem. He knew that in order to continue putting the customer experience first, they would need to find the right IDaaS provider that would be able to scale along with their planned expansion.</p><p><a href="https://www.youtube.com/watch?v=kqouiuVk07Q&amp;feature=emb_imp_woyt" target="_blank" rel="noreferrer noopener">link to video</a></p><iframe width="560" height="315" src="https://www.youtube.com/embed/kqouiuVk07Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><div itemscope="" itemtype="http://schema.org/Person" itemprop="author"><p>“The main idea behind the Naranja ecosystem is to provide the best experience to our customers, making sure that our digital platform provides all the resources that an online business needs for success, and hence support the ecosystem evolution.”</p><p>Javier Voos</p><p>Head of Engineerin</p><p>Naranja</p></div><p>Voos’ priority was to find a platform that provided secure APIs for identity so they could focus their expansion efforts on B2B services alongside their expanded consumer offerings. Finding Auth0 meant that his team could implement one identity solution that would allow both B2B and B2C customers access to the platforms they needed access to while ensuring data privacy and a low-friction user experience.
</p><div itemscope="" itemtype="http://schema.org/Person" itemprop="author"><p>“Auth0 gave our company the tools to secure the access to our API for first- and third-party consumers, in a way that can scale through time and put us in a better position to ally with new partners and work our way to a fully functional Naranja API Market.”</p><p>Danilo Asis</p><p>Solution Architect</p><p>Naranja</p></div><h2 id="WABI---South-America-s-E-Commerce-Portal">WABI — South America’s E-Commerce Portal</h2><p>With a half-dozen offerings already on offer, <a href="https://auth0.com/case-studies/wabipay/" target="_blank" rel="noreferrer noopener">WABI</a> is looking to the future. Their ambitious goal is to become Latin America’s go-to e-commerce portal. Their offerings already include WABI, a smartphone-based grocery service; Wabipay, an e-wallet app; and four additional applications. The end-goal WABI envisions is for customers to log in one time and have access to a complete, end-to-end e-commerce experience. They’ll be able to shop, pay, and track delivery all in one place.</p><p>Juan Manuel Mingo, former WABI Business Manager, sums up the hurdle they faced when it came to identity and customer authentication, “We had different platforms with different user registration processes,” he says. “Our aim was to unify all the user registration of the different platforms in order to get a better user experience and to have a more organized user database.” The disjointed customer experience was the first thing WABI knew they would have to solve before they could continue growing and expanding their e-commerce ecosystem. </p><div itemscope="" itemtype="http://schema.org/Person" itemprop="author"><p>“Our endgame is that you enter the ecosystem through Wabi. You log in to Wabi, order your things, and when you want to pay, you simply go to WabiPay, and you’re already logged in.”</p><p>Frederico Galli</p><p>General Manager</p><p>WABI</p></div><p>Like Naranja, WABI has always had a customer-first attitude. That meant that customer-facing features like single sign-on were top priorities. As Frederico Galli stated, their endgame is for customers to sign in once and have access to the entire ecosystem of WABI offerings. Not only that, but with further expansion plans in the works, they needed an identity solution that was with them for the long haul. Juan Manual Mingo put it like this, “WABI is scalable, and we need a partner that is, too. We believe Auth0 will support us in getting there.”</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/P45m9X6Z8ag9oOTv8R4kW/cc92f6325cb89fd84f233aa6c6992218/Latam12.jpg" alt="LATAM"/></p><h2 id="Learn-how-Auth0-can-help-your-business">Learn how Auth0 can help your business</h2><p><a href="https://www.forbesargentina.com/editorial/la-increible-historia-auth0-cliente-us-27-quinto-unicornio-hoy-vale-us-1100-n1352" target="_blank" rel="noreferrer noopener">Argentinian talent Eugenio Pace and Matias Wolowski</a> founded Auth0, so we know the ins and outs of the South American market. When you’re ready to bring your identity solution in line with your broader organizational expansion goals, reach out to our <a href="https://auth0.com/contact-us" target="_blank" rel="noreferrer noopener">market experts</a> to start the discussion about how we can help.</p><div><h2 id="About-Auth0">About Auth0 </h2><p>Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit <a href="https://auth0.com/" target="_blank" rel="noopener noreferrer">https://auth0.com</a>.</p></div></div></div>]]></content:encoded>
      <pubDate>Fri, 30 Jul 2021 12:45:00 +0000</pubDate>
    </item>
    <item>
      <title>A Complete Guide to Lombok</title>
      <link>https://auth0.com/blog/a-complete-guide-to-lombok/</link>
      <description>Let’s see everything you should know to start using Project Lombok. We will have a look at how to integrate it into your IDE and use it to avoid boilerplate code.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>Java is a great but verbose language. You may be ending up writing many lines of code even to achieve the most common goals. Plus, it definitely involves repetitive code, like getters and setters. This leads to a huge amount of boilerplate and avoidable code. Not only does this add nothing to the business logic of your application, but writing it is an unnecessarily boring and time-consuming process. This is why you should start employing tools and libraries to make you more productive by avoiding this. That’s where Lombok comes into play!</p><p>This Java library provides you with several annotations aimed at avoiding writing Java code known to be repetitive and/or boilerplate. Project Lombok works by plugging into your build process. Then, it will auto-generate the Java bytecode into your <em>.class</em> files required to implement the desired behavior, based on the annotations you used. Thus, each annotation offered by Project Lombok allows you to skip writing methods and logic you would like to avoid, like constructors, equals, and hash code functions. This will save you a lot of time and let you focus on the business logic of your project. Plus, you will be able to keep your codebase smaller, cleaner, and easier to be read and maintained.</p><p>First, we will see what Project Lombok is and how it works. Then, we will study the most common and relevant Lombok’s annotations, understanding what the most important ones are, where, and how to use them. Next, it will be time to see how to integrate it in your IDE (<a href="https://en.wikipedia.org/wiki/Integrated_development_environment" target="_blank" rel="noreferrer noopener">Integrated Development Environment</a>) and why you should not be afraid of using it.</p><h2 id="Prerequisites">Prerequisites</h2><p>This is the list of all the prerequisites to replicate the examples that will be shown next:</p><ul><li>Java &gt;= 1.8</li><li>Gradle &gt;= 4.x or Maven 3.6.x</li><li>Project Lombok &gt;= 1.18.20</li></ul><h2 id="What-is-Lombok">What is Lombok</h2><p><a href="https://projectlombok.org/" target="_blank" rel="noreferrer noopener">Project Lombok</a> (from now on, <em>Lombok</em>) is an annotation-based Java library that allows you to reduce boilerplate code. Lombok offers various annotations aimed at replacing Java code that is well known for being boilerplate, repetitive, or tedious to write. For example, by using Lombok, you can avoid writing constructors with no arguments, <code><span>toString</span><span>(</span><span>)</span></code>, <code><span>equals</span><span>(</span><span>)</span></code>, and <code><span>hashCode</span><span>(</span><span>)</span></code> methods by simply adding a few annotations. The magic happens during the compile-time when the library injects the bytecode representing the desired and boilerplate code into your <em>.class</em> files. Plus, as we will see, the library can be plugged into your IDE, letting you have the same experience as if you had written all the boilerplate code yourself.</p><p>You can easily install Lombok by adding <a href="https://mvnrepository.com/artifact/org.projectlombok/lombok/1.18.20" target="_blank" rel="noreferrer noopener"><code>lombok</code></a> to your dependencies.
If you are a <a href="https://projectlombok.org/setup/gradle" target="_blank" rel="noreferrer noopener">Gradle user</a>, add these two lines to the dependencies section of your <code>build<span>.</span>gradle</code> file:</p><pre><code>compileOnly <span>&#39;org.projectlombok:lombok:1.18.20&#39;</span>
annotationProcessor <span>&#39;org.projectlombok:lombok:1.18.20&#39;</span></code></pre><p>While if you are a <a href="https://projectlombok.org/setup/maven" target="_blank" rel="noreferrer noopener">Maven user</a>, add the following dependency to your <code>pom<span>.</span>xml</code> file:</p><pre><code><span><span><span>&lt;</span>dependency</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.projectlombok<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>lombok<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>version</span><span>&gt;</span></span>1.18.20<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>scope</span><span>&gt;</span></span>provided<span><span><span>&lt;/</span>scope</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>dependency</span><span>&gt;</span></span></code></pre><p>Plus, add the Lombok dependency to the <a href="https://maven.apache.org/plugins/maven-compiler-plugin/" target="_blank" rel="noreferrer noopener"><code>maven<span>-</span>compiler<span>-</span>plugin</code></a> configuration section as follows :</p><pre><code><span><span><span>&lt;</span>build</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>plugins</span><span>&gt;</span></span>      
            
            <span><span><span>&lt;</span>plugin</span><span>&gt;</span></span>
                  <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.apache.maven.plugins<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
                  <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>maven-compiler-plugin<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
                  <span><span><span>&lt;</span>version</span><span>&gt;</span></span>3.5.1<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
                  <span><span><span>&lt;</span>configuration</span><span>&gt;</span></span>
                        <span><span><span>&lt;</span>source</span><span>&gt;</span></span>11<span><span><span>&lt;/</span>source</span><span>&gt;</span></span> <span>&lt;!-- depending on your project --&gt;</span>
                        <span><span><span>&lt;</span>target</span><span>&gt;</span></span>11<span><span><span>&lt;/</span>target</span><span>&gt;</span></span> <span>&lt;!-- depending on your project --&gt;</span>
                        <span><span><span>&lt;</span>annotationProcessorPaths</span><span>&gt;</span></span>
                              <span><span><span>&lt;</span>path</span><span>&gt;</span></span>
                                    <span><span><span>&lt;</span>groupId</span><span>&gt;</span></span>org.projectlombok<span><span><span>&lt;/</span>groupId</span><span>&gt;</span></span>
                                    <span><span><span>&lt;</span>artifactId</span><span>&gt;</span></span>lombok<span><span><span>&lt;/</span>artifactId</span><span>&gt;</span></span>
                                    <span><span><span>&lt;</span>version</span><span>&gt;</span></span>1.18.20<span><span><span>&lt;/</span>version</span><span>&gt;</span></span>
                              <span><span><span>&lt;/</span>path</span><span>&gt;</span></span>                              
                        <span><span><span>&lt;/</span>annotationProcessorPaths</span><span>&gt;</span></span>
                  <span><span><span>&lt;/</span>configuration</span><span>&gt;</span></span>
            <span><span><span>&lt;/</span>plugin</span><span>&gt;</span></span>
            
            <span>&lt;!-- ... --&gt;</span>  
            
      <span><span><span>&lt;/</span>plugins</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>build</span><span>&gt;</span></span></code></pre><p>Now, you have all you need to start using Lombok.</p><h2 id="Most-Common-Lombok-Annotations">Most Common Lombok Annotations</h2><p>Here you can find the most common and important Lombok annotations. Each of them will be explained and then seen in use compared to the equivalent Java vanilla translation. To see examples and get more support, click on each annotation and visit its page on the <a href="https://projectlombok.org/features/all" target="_blank" rel="noreferrer noopener">Lombok official documentation</a>.</p><h3 id="---Getter---https---projectlombok-org-features-GetterSetter------Setter---https---projectlombok-org-features-GetterSetter-"><a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noreferrer noopener"><code>@Getter</code></a>, <a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noreferrer noopener"><code>@Setter</code></a></h3><p>When a field is annotated with <code>@Getter</code> and/or <code>@Setter</code>, Lombok will automatically generate the default getter and/or setter, respectively. The default implementation for getters simply takes care of returning the annotated field. Similarly, the default implementation for setters takes one parameter of the same type as the annotated field and simply sets it with the received value. When a field called <code>value</code> is annotated with both <code>@Getter</code> and <code>@Setter</code>, Lombok will define a <code><span>getValue</span><span>(</span><span>)</span></code> (or <code><span>isValue</span><span>(</span><span>)</span></code> if the field is <code>boolean</code>), and a <code><span>setValue</span><span>(</span><span>)</span></code> method. The generated getter/setter method will be <code><span>public</span></code>, unless a particular <code>AccessLevel</code> is specified. The allowed <code>AccessLevel</code> values are <code><span>PUBLIC</span></code>, <code><span>PROTECTED</span></code>, <code><span>PACKAGE</span></code>, and <code><span>PRIVATE</span></code>. Please, note that you can also annotate the entire class. In this case, this logic will be applied to each field.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>@Getter</span>
<span>@Setter</span>
<span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>@Setter</span><span>(</span><span>AccessLevel</span><span>.</span>PROTECTED<span>)</span>
    <span>private</span> <span>String</span> surname<span>;</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>User</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>

    <span>public</span> <span>int</span> <span>getId</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> id<span>;</span>
    <span>}</span>

    <span>public</span> <span>void</span> <span>setId</span><span>(</span><span>int</span> id<span>)</span> <span>{</span>
        <span>this</span><span>.</span>id <span>=</span> id<span>;</span>
    <span>}</span>

    <span>public</span> <span>String</span> <span>getName</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> name<span>;</span>
    <span>}</span>

    <span>public</span> <span>void</span> <span>setName</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>
        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
    <span>}</span>

    <span>public</span> <span>String</span> <span>getSurname</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> surname<span>;</span>
    <span>}</span>

    <span>protected</span> <span>void</span> <span>setSurname</span><span>(</span><span>String</span> surname<span>)</span> <span>{</span>
        <span>this</span><span>.</span>surname <span>=</span> surname<span>;</span>
    <span>}</span>
<span>}</span></code></pre><h3 id="---NoArgsConstructor---https---projectlombok-org-features-constructor------RequiredArgsConstructor---https---projectlombok-org-features-constructor------AllArgsConstructor---https---projectlombok-org-features-constructor-"><a href="https://projectlombok.org/features/constructor" target="_blank" rel="noreferrer noopener"><code>@NoArgsConstructor</code></a>, <a href="https://projectlombok.org/features/constructor" target="_blank" rel="noreferrer noopener"><code>@RequiredArgsConstructor</code></a>, <a href="https://projectlombok.org/features/constructor" target="_blank" rel="noreferrer noopener"><code>@AllArgsConstructor</code></a></h3><p>When a class is annotated with <code>@NoArgsConstructor</code>, Lombok will take care of automatically generating a constructor with no parameters. Likewise, when annotated with <code>@AllArgsConstructor</code>, a constructor with one parameter for each field in your class will be generated. Similarly, <code>@RequiredArgsConstructor</code> leads to a constructor with a parameter for each field requiring special handling. In particular, this involves non-initialized <code>final</code> fields, as well as any fields marked as <code>@NonNull</code> that are not initialized where declared. Please, do not forget that static fields will be ignored by these annotations.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>@NoArgsConstructor</span>
<span>@AllArgsConstructor</span>
<span>@RequiredArgsConstructor</span>
<span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>
    <span>private</span> <span>final</span> <span>String</span> birthPlace<span>;</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>
    <span>private</span> <span>final</span> <span>String</span> birthPlace<span>;</span>

    <span>// @NoArgsConstructor</span>
    <span>public</span> <span>Author</span><span>(</span><span>)</span> <span>{</span><span>}</span>

    <span>// @AllArgsConstructor</span>
    <span>public</span> <span>Author</span><span>(</span><span>int</span> id<span>,</span> <span>String</span> name<span>,</span> <span>String</span> surname<span>,</span> <span>String</span> birthPlace<span>)</span> <span>{</span>
      <span>this</span><span>.</span>id <span>=</span> id
      <span>this</span><span>.</span>name <span>=</span> name
      <span>this</span><span>.</span>surname <span>=</span> surname
      <span>this</span><span>.</span>birthPlace <span>=</span> birthPlace
    <span>}</span>

    <span>// @RequiredArgsConstructor</span>
    <span>public</span> <span>Author</span><span>(</span><span>String</span> birthPlace<span>)</span> <span>{</span>
      <span>this</span><span>.</span>birthPlace <span>=</span> birthPlace
    <span>}</span>
<span>}</span></code></pre><h3 id="---ToString---https---projectlombok-org-features-ToString-"><a href="https://projectlombok.org/features/ToString" target="_blank" rel="noreferrer noopener"><code>@ToString</code></a></h3><p>When a class is annotated with <code>@ToString</code>, Lombok will take care of generating a proper implementation of the <code><span>toString</span><span>(</span><span>)</span></code> method. By default, a String containing the class name, followed by each field&#39;s value separated by a comma, will be returned. By setting the <code>includeFieldNames</code> parameter to <em>true</em>, the name of each field will be placed before its value. By default, all non-static fields will be considered when generating the <code><span>toString</span><span>(</span><span>)</span></code> method. Annotate a field with <code>@ToString<span>.</span>Exclude</code> to make Lombok ignore it. Alternatively, you can specify which fields you wish to be taken into account by using <code>@<span>ToString</span><span>(</span>onlyExplicitlyIncluded <span>=</span> <span>true</span><span>)</span></code>. Then, mark each field you want to include with <code>@ToString<span>.</span>Include</code>.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>@ToString</span><span>(</span>includeFieldNames<span>=</span><span>true</span><span>)</span>
<span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>

    <span>@Override</span> 
    <span>public</span> <span>String</span> <span>toString</span><span>(</span><span>)</span> <span>{</span>
      <span>return</span> <span>&#34;Author(id=&#34;</span> <span>+</span> <span>this</span><span>.</span>id <span>+</span> <span>&#34;, name=&#34;</span> <span>+</span> <span>this</span><span>.</span>name <span>+</span> <span>&#34;, surnname=&#34;</span> <span>+</span> <span>this</span><span>.</span>surname <span>+</span> <span>&#34;)&#34;</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre><h3 id="---EqualsAndHashCode---https---projectlombok-org-features-EqualsAndHashCode-"><a href="https://projectlombok.org/features/EqualsAndHashCode" target="_blank" rel="noreferrer noopener"><code>@EqualsAndHashCode</code></a></h3><p>Annotate a class with <code>@EqualsAndHashCode</code>, and Lombok will automatically implement the <code><span>equals</span><span>(</span><span>)</span></code> and <code><span>hashCode</span><span>(</span><span>)</span></code> methods for you. By default, all non-static, non-transient fields will be taken into account. You can modify which fields are used by annotating them with <code>@EqualsAndHashCode<span>.</span>Include</code> or <code>@EqualsAndHashCode<span>.</span>Exclude</code>. Alternatively, you can annotate your class with <code>@<span>EqualsAndHashCode</span><span>(</span>onlyExplicitlyIncluded <span>=</span> <span>true</span><span>)</span></code> and then specify exactly which fields or methods you want to be used by marking them with <code>@EqualsAndHashCode<span>.</span>Include</code>. Please, note that the <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object" target="_blank" rel="noreferrer noopener"><code><span>equals</span><span>(</span><span>)</span></code></a>) and <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode(" target="_blank" rel="noreferrer noopener"><code><span>hashCode</span><span>(</span><span>)</span></code></a>) methods will be generated by Lombok without breaking the contract between them. Follow the link on the two methods to the official Java documentation to learn more about the contracts that <code><span>equals</span><span>(</span><span>)</span></code> and <code><span>hashCode</span><span>(</span><span>)</span></code> implementations should fulfill.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>@Getter</span>
<span>@Setter</span>
<span>@EqualsAndHashCode</span>
<span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    
    <span>// gettes and setters ...</span>

    <span>@Override</span> 
    <span>public</span> <span>int</span> <span>hashCode</span><span>(</span><span>)</span> <span>{</span>
       <span>final</span> <span>int</span> PRIME <span>=</span> <span>31</span><span>;</span>
       <span>int</span> result <span>=</span> <span>1</span><span>;</span>
       result <span>=</span> prime <span>*</span> result <span>+</span> id<span>;</span>
       result <span>=</span> prime <span>*</span> result <span>+</span> <span>(</span><span>(</span>name <span>==</span> <span>null</span><span>)</span> <span>?</span> <span>0</span> <span>:</span> name<span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>
       result <span>=</span> prime <span>*</span> result <span>+</span> <span>(</span><span>(</span>surname <span>==</span> <span>null</span><span>)</span> <span>?</span> <span>0</span> <span>:</span> surname<span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>
       <span>return</span> result<span>;</span>
    <span>}</span>

    <span>@Override</span> 
    <span>public</span> <span>boolean</span> <span>equals</span><span>(</span><span>Object</span> o<span>)</span> <span>{</span>
       <span>if</span> <span>(</span>o <span>==</span> <span>this</span><span>)</span> <span>return</span> <span>true</span><span>;</span>
       <span>if</span> <span>(</span><span>!</span><span>(</span>o <span>instanceof</span> <span>Author</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>Author</span> other <span>=</span> <span>(</span><span>Author</span><span>)</span> o<span>;</span>
       <span>if</span> <span>(</span><span>!</span>other<span>.</span><span>canEqual</span><span>(</span><span>(</span><span>Object</span><span>)</span><span>this</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>if</span> <span>(</span><span>this</span><span>.</span><span>getId</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getId</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getId</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>if</span> <span>(</span><span>this</span><span>.</span><span>getName</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getName</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>if</span> <span>(</span><span>this</span><span>.</span><span>getSurname</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getSurname</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getSurname</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getSurname</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>return</span> <span>true</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><h3 id="---NonNull---https---projectlombok-org-features-NonNull-"><a href="https://projectlombok.org/features/NonNull" target="_blank" rel="noreferrer noopener"><code>@NonNull</code></a></h3><p>You can annotate with <code>@NonNull</code> a record component, a parameter of a method, or an entire constructor. This way, Lombok will generate null-check statements for you accordingly.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>

    <span>public</span> <span>Author</span><span>(</span>
      <span>@NonNull</span> <span>int</span> id<span>,</span>
      <span>@NonNull</span> <span>String</span> name<span>,</span>
      <span>String</span> surname
    <span>)</span> <span>{</span>
      <span>this</span><span>.</span>id <span>=</span> id<span>;</span>
      <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
      <span>this</span><span>.</span>surname <span>=</span> surname<span>;</span> 
  <span>}</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>

    <span>public</span> <span>Author</span><span>(</span>
      <span>int</span> id<span>,</span>
      <span>String</span> name<span>,</span>
      <span>String</span> surname
    <span>)</span> <span>{</span>
        <span>if</span> <span>(</span>id <span>==</span> <span>null</span><span>)</span> <span>{</span>
          <span>throw</span> <span>new</span> <span>NullPointerException</span><span>(</span><span>&#34;id is marked @NonNull but is null&#34;</span><span>)</span><span>;</span>
        <span>}</span>
        <span>this</span><span>.</span>id <span>=</span> id<span>;</span>
        <span>if</span> <span>(</span>name <span>==</span> <span>null</span><span>)</span> <span>{</span>
          <span>throw</span> <span>new</span> <span>NullPointerException</span><span>(</span><span>&#34;name is marked @NonNull but is null&#34;</span><span>)</span><span>;</span>
        <span>}</span>
        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
        <span>this</span><span>.</span>surname <span>=</span> surname<span>;</span> 
  <span>}</span>
<span>}</span></code></pre><h3 id="---Data---https---projectlombok-org-features-Data-"><a href="https://projectlombok.org/features/Data" target="_blank" rel="noreferrer noopener"><code>@Data</code></a></h3><p><code>@Data</code> is a shortcut annotation that combines the features of <a href="https://projectlombok.org/features/ToString" target="_blank" rel="noreferrer noopener"><code>@ToString</code></a>, <a href="https://projectlombok.org/features/EqualsAndHashCode" target="_blank" rel="noreferrer noopener"><code>@EqualsAndHashCode</code></a>, <a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noreferrer noopener"><code>@Getter</code></a> <a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noreferrer noopener"><code>@Setter</code></a>, and <a href="https://projectlombok.org/features/constructor" target="_blank" rel="noreferrer noopener"><code>@RequiredArgsConstructor</code></a> together. So, <code>@Data</code> generates all the boilerplate involved in POJOs (<a href="https://en.wikipedia.org/wiki/Plain_old_Java_object" target="_blank" rel="noreferrer noopener">Plain Old Java Objects</a>). This means, in particular, getters for all fields, setters for all non-final fields, proper <code>toString</code>, <code>equals</code>, and <code>hashCode</code> implementations involving every field of the class, and a constructor for all final fields.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>@Data</span>
<span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>final</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>final</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>String</span> surname<span>;</span>

    <span>public</span> <span>Author</span><span>(</span><span>int</span> id<span>)</span> <span>{</span>
        <span>this</span><span>.</span>id <span>=</span> id<span>;</span>
    <span>}</span>    

    <span>public</span> <span>int</span> <span>getId</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> id<span>;</span>
    <span>}</span>

    <span>public</span> <span>String</span> <span>getName</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> name<span>;</span>
    <span>}</span>

    <span>public</span> <span>void</span> <span>setName</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>
        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
    <span>}</span>

    <span>public</span> <span>String</span> <span>getSurname</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> surname<span>;</span>
    <span>}</span>

    <span>public</span> <span>void</span> <span>setSurname</span><span>(</span><span>String</span> surname<span>)</span> <span>{</span>
        <span>this</span><span>.</span>surname <span>=</span> surname<span>;</span>
    <span>}</span>

    <span>@Override</span> 
    <span>public</span> <span>int</span> <span>hashCode</span><span>(</span><span>)</span> <span>{</span>
       <span>final</span> <span>int</span> PRIME <span>=</span> <span>31</span><span>;</span>
       <span>int</span> result <span>=</span> <span>1</span><span>;</span>
       result <span>=</span> prime <span>*</span> result <span>+</span> <span>getId</span><span>(</span><span>)</span><span>;</span>
       result <span>=</span> prime <span>*</span> result <span>+</span> <span>(</span><span>(</span><span>getName</span><span>(</span><span>)</span> <span>==</span> <span>null</span><span>)</span> <span>?</span> <span>0</span> <span>:</span> <span>getName</span><span>(</span><span>)</span><span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>
       result <span>=</span> prime <span>*</span> result <span>+</span> <span>(</span><span>(</span><span>getSurname</span><span>(</span><span>)</span> <span>==</span> <span>null</span><span>)</span> <span>?</span> <span>0</span> <span>:</span> <span>getSurname</span><span>(</span><span>)</span><span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>
       <span>return</span> result<span>;</span>
    <span>}</span>

    <span>@Override</span> 
    <span>public</span> <span>boolean</span> <span>equals</span><span>(</span><span>Object</span> o<span>)</span> <span>{</span>
       <span>if</span> <span>(</span>o <span>==</span> <span>this</span><span>)</span> <span>return</span> <span>true</span><span>;</span>
       <span>if</span> <span>(</span><span>!</span><span>(</span>o <span>instanceof</span> <span>Author</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>Author</span> other <span>=</span> <span>(</span><span>Author</span><span>)</span> o<span>;</span>
       <span>if</span> <span>(</span><span>!</span>other<span>.</span><span>canEqual</span><span>(</span><span>(</span><span>Object</span><span>)</span><span>this</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>if</span> <span>(</span><span>this</span><span>.</span><span>getId</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getId</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getId</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>if</span> <span>(</span><span>this</span><span>.</span><span>getName</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getName</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>if</span> <span>(</span><span>this</span><span>.</span><span>getSurname</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getSurname</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getSurname</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getSurname</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
       <span>return</span> <span>true</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><h3 id="---Value---https---projectlombok-org-features-Value-"><a href="https://projectlombok.org/features/Value" target="_blank" rel="noreferrer noopener"><code>@Value</code></a></h3><p><code>@Value</code> is the immutable variant of <a href="https://projectlombok.org/features/Data" target="_blank" rel="noreferrer noopener"><code>@Data</code></a>. This means that all fields are made <code><span>private</span></code> and <code>final</code> by Lombok by default. Plus, setters will not be generated, and the class itself will be marked as <code>final</code>. This way, the class will not be inheritable. Just like what happens with <code>@Data</code>, <code><span>toString</span><span>(</span><span>)</span></code>, <code><span>equals</span><span>(</span><span>)</span></code> and <code><span>hashCode</span><span>(</span><span>)</span></code> implementations are also created.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>@Data</span>
<span>public</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>int</span> id<span>;</span>
    <span>String</span> name<span>;</span>
    <span>String</span> surname<span>;</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>final</span> <span>class</span> <span>Author</span> <span>{</span>
    <span>private</span> <span>final</span> <span>int</span> id<span>;</span>
    <span>private</span> <span>final</span> <span>String</span> name<span>;</span>
    <span>private</span> <span>final</span> <span>String</span> surname<span>;</span>

    <span>public</span> <span>Author</span><span>(</span><span>int</span> id<span>,</span> <span>String</span> name<span>,</span> <span>String</span> surname<span>)</span> <span>{</span>
      <span>this</span><span>.</span>id <span>=</span> id
      <span>this</span><span>.</span>name <span>=</span> name
      <span>this</span><span>.</span>surname <span>=</span> surname
    <span>}</span>  

    <span>public</span> <span>int</span> <span>getId</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> id<span>;</span>
    <span>}</span>

    <span>public</span> <span>String</span> <span>getName</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> name<span>;</span>
    <span>}</span>

    <span>public</span> <span>String</span> <span>getSurname</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> surname<span>;</span>
    <span>}</span>

    <span>@Override</span> 
    <span>public</span> <span>int</span> <span>hashCode</span><span>(</span><span>)</span> <span>{</span>
        <span>final</span> <span>int</span> PRIME <span>=</span> <span>31</span><span>;</span>
        <span>int</span> result <span>=</span> <span>1</span><span>;</span>
        result <span>=</span> prime <span>*</span> result <span>+</span> <span>getId</span><span>(</span><span>)</span><span>;</span>
        result <span>=</span> prime <span>*</span> result <span>+</span> <span>(</span><span>(</span><span>getName</span><span>(</span><span>)</span> <span>==</span> <span>null</span><span>)</span> <span>?</span> <span>0</span> <span>:</span> <span>getName</span><span>(</span><span>)</span><span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>
        result <span>=</span> prime <span>*</span> result <span>+</span> <span>(</span><span>(</span><span>getSurname</span><span>(</span><span>)</span> <span>==</span> <span>null</span><span>)</span> <span>?</span> <span>0</span> <span>:</span> <span>getSurname</span><span>(</span><span>)</span><span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>return</span> result<span>;</span>
    <span>}</span>

    <span>@Override</span> 
    <span>public</span> <span>boolean</span> <span>equals</span><span>(</span><span>Object</span> o<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>o <span>==</span> <span>this</span><span>)</span> <span>return</span> <span>true</span><span>;</span>
        <span>if</span> <span>(</span><span>!</span><span>(</span>o <span>instanceof</span> <span>Author</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
        <span>Author</span> other <span>=</span> <span>(</span><span>Author</span><span>)</span> o<span>;</span>
        <span>if</span> <span>(</span><span>!</span>other<span>.</span><span>canEqual</span><span>(</span><span>(</span><span>Object</span><span>)</span><span>this</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
        <span>if</span> <span>(</span><span>this</span><span>.</span><span>getId</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getId</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getId</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
        <span>if</span> <span>(</span><span>this</span><span>.</span><span>getName</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getName</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
        <span>if</span> <span>(</span><span>this</span><span>.</span><span>getSurname</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>?</span> other<span>.</span><span>getSurname</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>:</span> <span>!</span><span>this</span><span>.</span><span>getSurname</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>other<span>.</span><span>getSurname</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
        <span>return</span> <span>true</span><span>;</span>
    <span>}</span>
<span>}</span></code></pre><h2 id="Advanced-Lombok-Annotations">Advanced Lombok Annotations</h2><p>Here you can find the most complex Lombok annotations. Each of them will be explained and then seen in use compared to the equivalent Java vanilla translation. To see examples and get more support, click on each annotation and visit its page on the <a href="https://projectlombok.org/features/all" target="_blank" rel="noreferrer noopener">Lombok official documentation</a>.</p><h3 id="---Cleanup---https---projectlombok-org-features-Cleanup-"><a href="https://projectlombok.org/features/Cleanup" target="_blank" rel="noreferrer noopener"><code>@Cleanup</code></a></h3><p><code>@Cleanup</code> can be used to ensure a given resource is automatically cleaned up before leaving the current scope. By default, the cleanup method of the annotated resource is assumed to be <code><span>close</span><span>(</span><span>)</span></code>, but you can specify the name of the desired method to be called instead. Note that this annotation works by harnessing the <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" target="_blank" rel="noreferrer noopener">try-with-resources statement</a>.</p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>public</span> <span>class</span> <span>CleanupDemo</span> <span>{</span>
  <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>IOException</span> <span>{</span>
    <span>@Cleanup</span> 
    <span>InputStream</span> input <span>=</span> <span>new</span> <span>FileInputStream</span><span>(</span>args<span>[</span><span>0</span><span>]</span><span>)</span><span>;</span>

    <span>@Cleanup</span> 
    <span>OutputStream</span> output <span>=</span> <span>new</span> <span>FileOutputStream</span><span>(</span>args<span>[</span><span>1</span><span>]</span><span>)</span><span>;</span>

    <span>byte</span><span>[</span><span>]</span> b <span>=</span> <span>new</span> <span>byte</span><span>[</span><span>10000</span><span>]</span><span>;</span>

    <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
      <span>int</span> r <span>=</span> input<span>.</span><span>read</span><span>(</span>b<span>)</span><span>;</span>

      <span>if</span> <span>(</span>r <span>==</span> <span>-</span><span>1</span><span>)</span> 
        <span>break</span><span>;</span>

      output<span>.</span><span>write</span><span>(</span>b<span>,</span> <span>0</span><span>,</span> r<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>CleanupDemo</span> <span>{</span>
  <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>IOException</span> <span>{</span>
    <span>try</span> <span>(</span><span>OutputStream</span> output <span>=</span> <span>new</span> <span>FileOutputStream</span><span>(</span>args<span>[</span><span>1</span><span>]</span><span>)</span><span>)</span> <span>{</span>
      <span>try</span> <span>(</span><span>InputStream</span> input <span>=</span> <span>new</span> <span>FileInputStream</span><span>(</span>args<span>[</span><span>0</span><span>]</span><span>)</span><span>)</span> <span>{</span>
        <span>byte</span><span>[</span><span>]</span> b <span>=</span> <span>new</span> <span>byte</span><span>[</span><span>10000</span><span>]</span><span>;</span>

        <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
          <span>int</span> r <span>=</span> input<span>.</span><span>read</span><span>(</span>b<span>)</span><span>;</span>

          <span>if</span> <span>(</span>r <span>==</span> <span>-</span><span>1</span><span>)</span> 
            <span>break</span><span>;</span>

          output<span>.</span><span>write</span><span>(</span>b<span>,</span> <span>0</span><span>,</span> r<span>)</span><span>;</span>
        <span>}</span>
      <span>}</span>       
    <span>}</span> 
  <span>}</span>
<span>}</span></code></pre><h3 id="---Synchronized---https---projectlombok-org-features-Synchronized-"><a href="https://projectlombok.org/features/Synchronized" target="_blank" rel="noreferrer noopener"><code>@Synchronized</code></a></h3><p><code>@Synchronized</code> allows you to achieve something similar to the <a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html" target="_blank" rel="noreferrer noopener"><code>synchronized</code></a> keyword, but locking on different objects. The keyword locks on <code><span>this</span></code>, while the annotation locks on a special private field named <code>$lock</code>. If this field does not exist, it will be created by Lombok. This is the default behavior, but you can also specify lock objects yourself. When dealing with <code><span>static</span></code> methods, the annotation will lock on a static field named <code>$<span>LOCK</span></code>. Please, consider that just like <code>synchronized</code>, the annotation can only be used on static and instance methods. </p><h4 id="With-Lombok">With Lombok</h4><pre><code><span>public</span> <span>class</span> <span>SynchronizedDemo</span> <span>{</span>
  <span>private</span> <span>final</span> <span>Object</span> objectToLock <span>=</span> <span>new</span> <span>Object</span><span>(</span><span>)</span><span>;</span>
  
  <span>@Synchronized</span>
  <span>public</span> <span>static</span> <span>void</span> <span>sayHello</span><span>(</span><span>)</span> <span>{</span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>&#34;Hello!&#34;</span><span>)</span><span>;</span>
  <span>}</span>
  
  <span>@Synchronized</span>
  <span>public</span> <span>int</span> <span>getOne</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>1</span><span>;</span>
  <span>}</span>
  
  <span>@Synchronized</span><span>(</span><span>&#34;objectToLock&#34;</span><span>)</span>
  <span>public</span> <span>void</span> <span>printObject</span><span>(</span><span>)</span> <span>{</span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>objectToLock<span>)</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre><h4 id="Java-Vanilla">Java Vanilla</h4><pre><code><span>public</span> <span>class</span> <span>SynchronizedDemo</span> <span>{</span>
  <span>private</span> <span>static</span> <span>final</span> <span>Object</span> $LOCK <span>=</span> <span>new</span> <span>Object</span><span>[</span><span>0</span><span>]</span><span>;</span>
  <span>private</span> <span>final</span> <span>Object</span> $lock <span>=</span> <span>new</span> <span>Object</span><span>[</span><span>0</span><span>]</span><span>;</span>
  <span>private</span> <span>final</span> <span>Object</span> readLock <span>=</span> <span>new</span> <span>Object</span><span>(</span><span>)</span><span>;</span>
  
  <span>public</span> <span>static</span> <span>void</span> <span>sayHello</span><span>(</span><span>)</span> <span>{</span>
    <span>synchronized</span><span>(</span>$LOCK<span>)</span> <span>{</span>
      <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>&#34;Hello&#34;</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
  
  <span>public</span> <span>int</span> <span>getOne</span><span>(</span><span>)</span> <span>{</span>
    <span>synchronized</span><span>(</span>$lock<span>)</span> <span>{</span>
      <span>return</span> <span>1</span><span>;</span>
    <span>}</span>
  <span>}</span>
  
  <span>public</span> <span>void</span> <span>printObject</span><span>(</span><span>)</span> <span>{</span>
    <span>synchronized</span><span>(</span>readLock<span>)</span> <span>{</span>
      <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>objectToLock<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span></code></pre><h3 id="---SneakyThrows---https---projectlombok-org-features-SneakyThrows-"><a href="https://projectlombok.org/features/SneakyThrows" target="_blank" rel="noreferrer noopener"><code>@SneakyThrows</code></a></h3><p><code>@SneakyThrows</code> can be used to sneakily throw checked exceptions without actually declaring them in your method&#39;s <code>throws</code> clause, as you normally would. So, this annotation allows you to avoid the required <code><span>try</span><span>-</span>catch</code> blocks completely by handling all the checked exceptions quietly. Lombok will not ignore, wrap, replace, or modify the thrown checked exception. On the contrary, it will mislead the compiler. In fact, at the JVM (<a href="https://en.wikipedia.org/wiki/Java_virtual_machine" target="_blank" rel="noreferrer noopener">Java Virtual Machine</a>) class file level, all exceptions can be thrown regardless of the <code>throws</code> clause of your methods, which is why this works. This annotation can be dangerous and should be used carefully. This is why you should read <a href="https://projectlombok.org/features/SneakyThrows" target="_blank" rel="noreferrer noopener">this</a> page from the Lombok official documentation to learn more about when and how to use it.</p><h3 id="---Builder---https---projectlombok-org-features-Builder-"><a href="https://projectlombok.org/features/Builder" target="_blank" rel="noreferrer noopener"><code>@Builder</code></a></h3><p>You may need to develop a builder object allowing you to create objects by following a step-by-step construction pattern, such as <code>Author<span>.</span><span>builder</span><span>(</span><span>)</span><span>.</span><span>id</span><span>(</span><span>&#34;1&#34;</span><span>)</span><span>.</span><span>name</span><span>(</span><span>&#34;Maria&#34;</span><span>)</span><span>.</span><span>surname</span><span>(</span><span>&#34;Williams&#34;</span><span>)</span><span>.</span><span>build</span><span>(</span><span>)</span><span>;</span></code>. This is particularly useful when dealing with large classes with several fields. Instead of using a constructor with many parameters, you can use this more readable approach.
By using the <code>@Builder</code> annotation, you let Lombok generate the builders for you. By annotating a class with <code>@Builder</code>, Lombok will produce a class implementing the aforementioned builder pattern. For example, by annotating the <code>Author</code> class, an <code>AuthorBuilder</code> class will be automatically generated. Since the behavior of your builder may be complex or highly-tailored, Lombok offers many parameters to achieve the desired result. You can find out them all <a href="https://projectlombok.org/features/Builder" target="_blank" rel="noreferrer noopener">here</a>.</p><h3 id="---Log---https---projectlombok-org-features-log-"><a href="https://projectlombok.org/features/log" target="_blank" rel="noreferrer noopener"><code>@Log</code></a></h3><p>The majority of loggers require you to set up a logger instance in every class where you want to log. This definitely involves boilerplate code. By annotating a class with <code>@Log</code>, Lombok will automatically add a static final <code>log</code> field, initialized as required by your logging library. This is why Lombok provides developers with an annotation per each of the most popular logging frameworks. You can find the entire list <a href="https://projectlombok.org/features/log" target="_blank" rel="noreferrer noopener">here</a>.</p><h2 id="The-Lombok-Plugin">The Lombok Plugin</h2><p>The most popular and widely used IDEs come with an official Lombok plugin designed to help developers use Lombok. In particular, it supports you by offering shortcuts to the most common Lombok annotation. Plus, it suggests to you the annotations you may require or be looking for based on where you clicked. At the time of writing <a href="https://projectlombok.org/setup/intellij" target="_blank" rel="noreferrer noopener">IntelliJ IDEA</a>, <a href="https://projectlombok.org/setup/eclipse" target="_blank" rel="noreferrer noopener">Eclipse, Spring Tool Suite, (Red Hat) JBoss Developer Studio, MyEclipse</a>, <a href="https://projectlombok.org/setup/vscode" target="_blank" rel="noreferrer noopener">Microsoft Visual Studio Code</a>, and <a href="https://projectlombok.org/setup/netbeans" target="_blank" rel="noreferrer noopener">Netbeans</a> are officially supported. Follow the link related to your IDE to get support on how to install it.
Visit the <a href="https://projectlombok.org/" target="_blank" rel="noreferrer noopener">Lombok</a> website for the complete list of all supported IDEs.</p><h2 id="Is-Using-Lombok-A-Risk-">Is Using Lombok A Risk?</h2><p>You may be concerned about spreading Lombok annotations throughout your codebase. In fact, what would happen if you decided to avoid using it? You might be finding yourself stuck. Well, this is not a real problem because Lombok comes with a <em>delombok</em> tool. 
As stated <a href="https://projectlombok.org/features/delombok" target="_blank" rel="noreferrer noopener">in the official documentation</a>, although not covering all possible IDEs and cases, it makes the process of freeing your code from Lombok easier. What this tool does is auto-generate Java source code containing the same features contained in the bytecode Lombok would have injected. This way, your Lombok annotated codebase will be simply replaced with a standard, non-Lombok Java one. 
As a result, your entire project will no longer depend on Lombok. So, to answer the original question, no, not at all. Using Lombok does not represent a risk for the future or your project.</p><h2 id="Conclusion">Conclusion</h2><p>In this article, we looked at how to use Project Lombok, a Java library that automatically plugs into your editor and builds tools, to avoid writing boilerplate, boring, and repetitive code Java is well known for. As shown, this is an easy way to make you a more productive developer and do not waste your time on cumbersome activities. By starting to take advantage of its most relevant annotations, you can avoid writing thousand of lines of code with no real value from the business logic point of view of your project. Plus, there is always the possibility to make your project no longer depend on Project Lombok easily. So, it using it does not represent a risk of finding yourself locked in. In conclusion, every Java developer should use Project Lombok, and explaining everything you need to start using it is what this article was aimed at.</p><p>Thanks for reading! I hope that you found this article helpful. Feel free to reach out to me with any questions, comments, or suggestions.</p></div></div>]]></content:encoded>
      <pubDate>Thu, 29 Jul 2021 16:55:00 +0000</pubDate>
    </item>
    <item>
      <title>Workforce and App Privacy Have Changed, So Should You</title>
      <link>https://auth0.com/blog/workforce-and-app-privacy-have-changed-so-should-you/</link>
      <description>Go fast but not alone — our leaders are here to help secure your workforce and app privacy.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>Accelerating digital road maps by seven to 10 years likely left you with some things to review from a security perspective. Please check out the <a href="https://auth0.com/blog/accelerated-your-road-map-go-fix-workforce-and-app-security" target="_blank" rel="noreferrer noopener">first post in this series</a> for what you might need to review to securely support your remote or hybrid workforce, as well as a checklist for consumer-facing apps.</p><p>Security isn’t the only thing that can get overlooked when we go fast.  As well as implementing technical protections — we also need to understand what and how the data and how impacts the humans that use technology. This is where privacy comes in. Privacy is having a critical global impact on software development because consumers, businesses, and governments are demanding that technology operates in a way that complies with legislation like GDPR (General Data Privacy Regulation), CPRA (California Public Records Act), APPI (Act on the Protection of Personal Information), and LGPD (Lei Geral de Proteção de Dados Pessoais). This is an opportunity to rethink exactly what and how much data is collected, how it’s used, and who gets to see it. It’s a turning point where individuals are no longer blithely accepting that massive amounts of data about them are being created, shared, and used.</p><p>At Auth0, I regularly collaborate with our vice president of privacy, Lucy McGrath, and she is a part of my organization. For this series, I asked Lucy for her perspective on data privacy mistakes companies can make when they move fast.</p><p>An integrated approach is essential for security and privacy. There’s a saying if you want to go fast, go alone, but if you want to go far, go together. This is changing — you can’t protect privacy alone. If you go alone, you won’t go anywhere. “Ultimately, data privacy is about trust,” says Lucy. “And it’s a collaborative effort. You can’t think about security or data governance, or privacy in isolation. You need to work across departments within your organization and also listen to your staff and your consumers/users. From a practical standpoint, you need to work with others even beyond your immediate business — data privacy regulations are changing rapidly —technical solutions are essential in order to scale privacy compliant technology. If you don’t collaborate, you’ll be left behind.”</p><p>Lucy’s insights on remote/hybrid workforces and consumer-facing apps can improve your workplace culture and improve your relationships with your customers — and keep you focused on your business rather than dealing with regulators and potentially incurring large fines.</p><h2 id="Put-Your-Focus-on-the-Human">Put Your Focus on the Human</h2><p>“Probably the most important thing to remember when thinking through data privacy is that you’re delivering a service that impacts humans,” says Lucy. “We can get dazzled by what technology can do, but the technology is really there to help the humans accomplish something. Centering on the human who needs to use or benefit from the technology helps you to focus.  — and align with existing and emerging data privacy regulations.”</p><p>As always, this information is shared from the perspective of business impact and planning. For how data privacy regulations apply to your specific business situation, please reach out to your legal counsel.</p><blockquote><p>Auth0 recommends you always consult legal counsel for specific advice about compliance with legal requirements.</p></blockquote><p><strong>The workforce mix: remote, hybrid, in office</strong></p><p>If your company relies on a globally dispersed workforce (or acquired one during the pandemic), you’re likely dealing with a mix of employees who welcome some office quietly, some still struggling with lockdown requirements, and others who may not expect to see vaccines become available until fall. “As you look at creating or reviewing policies, it’s especially important to remember that there’s a human on the other side of the Zoom screen”, says Lucy. “This is a good time for your HR team to check back in with staff. Circumstances and perspectives have changed for many people as a result of the pandemic. One size definitely will not fit all.”</p><p>Understanding that worker privacy rights vary globally, here are some areas to review:</p><h3 id="1--How-you-measure-productivity">1. How you measure productivity</h3><p>For organizations used to seeing people in chairs, the shift to Zoom screens caused some anxiety. Interestingly, <a href="https://www.bcg.com/publications/2020/valuable-productivity-gains-covid-19" target="_blank" rel="noreferrer noopener">75% of 12,000 workers surveyed by BCG</a> in the United States, Germany, and India felt they were able to maintain or increase productivity on individual tasks during the pandemic. </p><p>Some of that may have been accomplished by blurring the lines between home and work, says Lucy. </p><p>Surveillance technologies like keyloggers, video monitoring, and attention tracking via biometrics have been rising in adoption even before the pandemic. We’re hearing this often says, Lucy: “I like my boss — a lot —  but I would find it a bit creepy if she was tracking every word I write, tracking when I popped off to the loo and listening to my family conversations. And it would make it harder to do my job because I would feel unnecessarily surveilled. It’s really important to assess the correct way to protect data and maintain trust with your employees as humans. Especially with workers working from home in potentially cramped situations, you could be gathering data you don’t need and shouldn’t have.</p><p>“Workers generally know that emails are subject to company oversight nearly everywhere, but it’s essential to be transparent about monitoring activities across all applications and devices. Transparency also encourages trust and increases the likelihood that individuals will report issues/mistakes they encounter. Tell them about how long you retain the data, and why and be sure to check local rules about internal and external data sharing — they can vary by region and even by state in the United States. It’s important to only keep what you really need to perform a task,” says Lucy.</p><h3 id="2--How-do-you-encourage-collaboration-">2. How do you encourage collaboration?</h3><p>Nearly everyone became Zoom-literate in 2020. Many people were introduced to Slack or other collaboration tools, and some folks also mixed in personal texts. “As great as these technologies are — and I am speaking as someone who enjoys working with a globally distributed workforce — they’re not going to replicate the physical space. From a privacy perspective, some small changes can mean a lot to employees,” says Lucy.</p><p>“Some people enjoy having dogs and kids flow in and out of their workplace. Others prefer to keep things separated. Over the last several months, I’ve noticed some colleagues making different choices.”</p><p>Things like Zoom backgrounds can protect employee privacy, but only if they know how to use the tools. If you’re using a collaboration tool like Zoom or Slack, document expected uses, alternatives on offer (as applicable) and make sure employees know how to use tools like Zoom backgrounds. </p><h3 id="3--Onboarding-can-protect-against-data-breaches">3. Onboarding can protect against data breaches</h3><p>Normally, we bring our new employees to our Bellevue, Wash. offices for onboarding. This in-person connection brings all kinds of benefits, including protecting data. “Onboarding may seem like an odd place to bring up data privacy, but people are more likely to feel comfortable reporting potential problems or even breaches when they have formed a connection to their colleagues,” says Lucy.</p><p>Establishing connections may mean creating social events (likely on Zoom) or connecting employees for non-work meetings. We have an app that randomly pairs employees for casual chat sessions we call “donuts.” It’s a surprisingly effective way to establish connection and get to know about the day-to-day work life of far-flung colleagues.</p><h3 id="4--Security-and-Privacy-of-Customers-is-Key">4. Security and Privacy of Customers is Key</h3><p>“We’ve had workers who used to be home by themselves all day, suddenly have teenaged children pass through meetings on the way to the fridge,” says Lucy. “It’s charming, but it also means that family members might see things they’re not meant to see. You need to recognize that not everyone has the luxury of a room with a door and a lock. Protecting customer security and privacy is key.”</p><p>To your security protocols, Lucy would also suggest adding:</p><ul><li>Headphones so you can control what can be overheard (and coaching that awareness with your teams)</li><li>Privacy screens for monitors</li><li>Printed material (and the printer) needs to be kept in a space that remains locked when not in use</li></ul><h2 id="Data-Privacy-Checklist-for-Consumer-Facing-Apps">Data Privacy Checklist for Consumer-Facing Apps</h2><p>COVID has brought populations that are used to trust in physical environments online, says Lucy. This is part of why in the UK we’re seeing <a href="https://www.theguardian.com/money/2021/may/18/delivery-text-scams-the-nasty-new-wave-sweeping-the-uk" target="_blank" rel="noreferrer noopener">increase in delivery text phishing scams</a> where additional funds are requested for delivery. Many of these ploys play on user trust and the expectation that information is being shared securely. We’ll get deeper into how consumers are demanding a secure and contextual private experience in the final post. As preparation, here is a data privacy checklist. Please follow up with your legal counsel on your specifics.</p><ol start="1"><li><strong>Review what you’ve got and why you’ve got it and how you’re getting it.</strong> It’s not uncommon for apps to gather more information than is necessary to do the job. You need to know what data you have and why you’re collecting it as well how it’s stored to comply with regulations — and to know how to safeguard your customers’ data. <strong>This includes third-party vendors and your marketing teams.</strong></li><li><strong>Make sure your code only collects data you really need</strong>. The days of data gluttony are coming to an end. Individuals are rightly fed up with the attitude of “just because you can collect as much data as possible, you do. Ask yourself: do you use all the data you collect? Don’t be afraid to reduce the amount of data you collect when you update your app or add new products. Look for opportunities to innovate by using privacy-enhancing technologies to mask or anonymize, or de-identify data. And safely delete the information you don’t use.</li><li><strong>Know where your customers are and check out the regulations.</strong> While the EU’s General Data Privacy Regulation (GDPR) has become the benchmark for data privacy, not every regulation is GDPR. There are differences. Children also often have extra protections. Once you’ve identified where and who your customers are, work closely with your legal counsel to design the right approach.</li><li><strong>Securely delete info and keep a record.</strong> Maybe you’re deleting information due to a verified request or because you have data you actually don’t need; either way, you need to keep a record.</li><li><strong>Make sure you have someone responsible for privacy who respects the humans interacting with your app.</strong> This stuff is not simple. You need someone who looks after it.</li><li><strong>Look out for service departments or social media complaints.</strong> Complaints can show you how the public perceives their data is being used — and identify areas that need your attention.</li><li><strong>Communicate clearly with your users.</strong> Users often need to know how to unsubscribe and other rights as part of data privacy regulations.</li><li><strong>Do as you would be done by.</strong> Think through how you’d like your data to be treated. That’s a good guideline. But also think about the specific customer base - what’s their perspective and might they require additional protections (e.g., if they are a vulnerable group).</li><li><strong>Consult your legal counsel.</strong> Data privacy is a rapidly evolving field. Lawyers really are your friends! Please check in with your legal counsel regularly, and especially if you’re thinking of expanding into a new region.</li></ol><h2 id="Learn-More-about-Identity-s-Role-in-Your-Data-Privacy-Strategy">Learn More about Identity’s Role in Your Data Privacy Strategy</h2><p>As Lucy says, you can have security without privacy, but you can’t have privacy without security if you’d like to learn more about how a robust identity solution can support your data privacy and security strategies, <a href="https://auth0.com/contact-us" target="_blank" rel="noreferrer noopener">please reach out to the team at Auth0</a>.</p><p>In the final post in the Acceleration Response Series, we’ll look at how creating a long-term plan for security and privacy can help you meet consumers’ demands.</p><div><h2 id="About-Auth0">About Auth0 </h2><p>Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit <a href="https://auth0.com/" target="_blank" rel="noopener noreferrer">https://auth0.com</a>.</p></div></div></div>]]></content:encoded>
      <pubDate>Thu, 29 Jul 2021 15:08:00 +0000</pubDate>
    </item>
    <item>
      <title>Can Your Identity Solution Grow With Your Company?</title>
      <link>https://auth0.com/blog/can-your-identity-solution-grow-with-your-company/</link>
      <description>The tech market in Latin America is growing; Auth0 can help you keep up with a scalable identity solution.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>The number of Venture Capital deals signed in Latin America hit a record high of 488 in 2020. That’s nearly double the 2017 number according to <a href="https://www.bloomberg.com/news/articles/2021-03-16/latin-american-startups-had-record-venture-capital-deals-in-2020" target="_blank" rel="noreferrer noopener">Bloomberg</a>. The growth in the tech market in LatAm isn’t only apparent in new startup deals; companies who already have a presence in the region are expanding both through mergers and acquisitions and by looking into new countries to grow their footprint in the region. </p><p>Each scenario brings its own challenges for your IT infrastructure, particularly your<a href="https://auth0.com/blog/how-to-scale-quickly-with-identity/" target="_blank" rel="noreferrer noopener"> identity solution</a>. If you’re expanding into a new country, there’s likely to be a different data privacy regulation you’ll have to comply with. And that startup you’re eyeing probably has a vastly different infrastructure than yours, whether private or public cloud or even legacy on-prem. An Identity management solution has to be able to expand and flex in order to grow with your company, regardless of the specific scenario.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1HnNeEEQ4hCBb2M4y2ZerT/5b5a1de004ea8021fdc38d042a85a672/Latam05.jpg" alt="Business Expansion"/></p><h2 id="With-Business-Expansion-Come-Business-Questions">With Business Expansion Come Business Questions</h2><p>Let’s take a look at those two potential growth scenarios and what they mean for your business’s identity solution. First up is the acquisition of a competitor or related smaller entity. <a href="https://auth0.com/blog/why-your-ma-strategy-has-to-include-an-iam-solution/" target="_blank" rel="noreferrer noopener">Mergers and acquisitions</a> (M&amp;A) always bring an array of unique challenges, but for this article, we’re going to focus on the identity challenges associated with the merging of IT infrastructure.</p><p>Your web app may be hosted on a public cloud, but the company you just bought has been in business for a while and is still using on-prem hosting for theirs. In order for you to bring both properties together under one identity solution, you need one that can bridge the gap between the two, allowing your new audience access to both apps without managing multiple sets of credentials.</p><p>In our second scenario, your organization is considering an expansion into a neighboring country to take advantage of the easing of business restrictions and the growing market for your product that your marketing team has identified. You already comply with the privacy regulations in your country, but are you ready to comply with those abroad? </p><p>Is your organization ready to answer questions like these:</p><ul><li>Can our existing in-house identity platform scale to include our hybrid-cloud infrastructure and the legacy system our latest acquisition uses?</li><li>Is our identity solution ready to handle the influx of new user accounts and login requests when we roll out to our new market?</li><li>Is our consent gathering process in compliance with the regulations in the country we’re expanding into?</li></ul><p>If not, or if the answer to any of these questions is “no,” it may be time to consult with an identity specialist. </p><blockquote><a href="https://twitter.com/intent/tweet?text=&#34;Auth0%20recommends%20you%20always%20consult%20legal%20counsel%20when%20it%20comes%20to%20complying%20with%20data%20privacy%20regulations.&#34; via @auth0 https://auth0.com/blog/can-your-identity-solution-grow-with-your-company" target="_blank" rel="noopener noreferrer"><p>&#34;Auth0 recommends you always consult legal counsel when it comes to complying with data privacy regulations.&#34;</p><div><p><img alt="Tweet" src="https://cdn.auth0.com/blog/resources/twitter.svg"/></p><h4>Tweet This</h4></div></a></blockquote><h2 id="Auth0-Is-the-Identity-Solution-That-Scales-With-You">Auth0 Is the Identity Solution That Scales With You</h2><p>Both of these scenarios mean you’re going to be scaling your infrastructure, adding users to existing web apps, and even adding new web apps. Having an identity solution in place that can easily expand to include controlling access to these new properties can help reign in costs and speed your time to market post-expansion. Our customers tell us that by using Auth0 for their authentication and identity needs, they took their time-to-value from months or years down to weeks or even days.</p><p>Credit card company <a href="https://www.marketwatch.com/story/visa-sees-massive-digital-acceleration-with-millions-trying-e-commerce-for-the-first-time-2020-05-13" target="_blank" rel="noreferrer noopener">Visa reported</a> that during just the first month of the COVID-19 pandemic, more than 13 million cardholders in Latin America made their very first e-commerce transaction. That’s 13 million new accounts being created, 13 million new logins, and 13 million opportunities for identity to go wrong if your solution isn’t scalable. There are many aspects to what makes something scalable. When it comes to identity, we see five as being the most important.</p><ol start="1"><li><strong>Bridging legacy and cloud systems</strong></li></ol><p>One of the downsides to M&amp;A is that your IT department inherits the backend infrastructure of the other company, for better or worse. Auth0’s extensive SDK libraries and robust APIs mean it’s a simple matter to bridge the gap between legacy systems and modern cloud-first ones. One login box can take your current and new customers to both web apps, no matter where they’re hosted. This ability also speeds your time to value because your developers can maintain focus on their core product delivery rather than piecing together connectivity solutions that may only work for a short time.</p><ol start="2"><li><strong>Single source of truth for customer data</strong></li></ol><p>Bringing all of your customer data together into one single source of truth (SSoT) makes it that much easier to protect. It also speeds access when a user logs in, as no matter which property they’re using, it has only one place to look to find their credentials, rather than scouring multiple data silos.</p><ol start="3"><li><strong>Single sign-on</strong></li></ol><p>Customers want low-friction experiences online, and being able to create an account using credentials they already have is a great way to win them over. Single sign-on (using account information from a provider like Apple, Facebook, or Twitter) allows a customer to create an account on your site quickly and easily, and without the need to create and remember a new password.</p><ol start="4"><li><strong>Breach protection</strong></li></ol><p>The issue of passwords brings us to a major sticking point for many identity solutions, protecting user information from data breaches. According to the most recent <a href="https://www.ibm.com/security/data-breach" target="_blank" rel="noreferrer noopener">IBM/Ponemon Cost of a Data Breach Study</a>, the global average cost of a breach is now $3.86 million (USD). And Verizon reports in their <a href="https://www.verizon.com/business/resources/reports/dbir/" target="_blank" rel="noreferrer noopener">2021 Data Breach Investigations Report</a> that 61% of breaches involve misuse of credentials. Put those together, and you see why protecting your customers’ information is such a major piece of scaling your online business presence and why a robust identity solution needs to take this aspect into account.</p><ol start="5"><li><strong>Protection from staffing fluctuations</strong></li></ol><p>An often overlooked aspect of identity projects is the simple fact that people change jobs. If you have an identity tool that was developed in-house two years ago, there’s a good chance you won’t have anyone on staff who can expand it to cover your new properties. That will delay roll-out and extend your time-to-market. </p><p><a href="https://auth0.com/case-studies/wabipay/" target="_blank" rel="noreferrer noopener">Auth0 customer WABI</a> is modernizing e-commerce in Latin America. They’re currently active in 11 countries and have expansion plans to add four more in 2021. And they’re trusting Auth0 to scale their identity solution to match these ambitious plans. “WABI is scalable, and we need a partner that is, too. We believe Auth0 will support us in getting there.” Says WABI Business Manager Juan Manuel Mingo. With their planned expansion opening their market to millions of potential new customers, WABI knows they need a robust identity platform that’s ready to handle the influx of new users.</p><h2 id="Auth0-Brings-Global-Experience-to-Your-Latin-America-Growth-Plans">Auth0 Brings Global Experience to Your Latin America Growth Plans</h2><p>Our founders are from Argentina, the company was started in the United States, and we currently have people in 30+ countries with more being added every day. Our <a href="https://auth0.com/blog/auth0-expands-global-partner-network-in-latin-america-with-clm/" target="_blank" rel="noreferrer noopener">international team</a> of identity specialists can help you work out your identity needs and help get you set up with an identity as a service (IDaaS) platform that is ready to grow with your company, no matter what your expansion plans look like. We know that having an identity solution designed to be extensible and flexible to move with your business can mean the difference between a successful rollout or a failed acquisition attempt. </p><p>Auth0 is built on open standards, making it easy to connect with existing systems and varying infrastructure scenarios. Bridging the gap between a public cloud-based web app and an on-prem user database is only the beginning. Our extensive marketplace of integrations means you can connect with your existing business software solutions as well.</p><p>Our breach protection includes features such as <a href="https://auth0.com/docs/attack-protection/bot-detection" target="_blank" rel="noreferrer noopener">bot detection</a>, <a href="https://auth0.com/multifactor-authentication" target="_blank" rel="noreferrer noopener">adaptive MFA</a>, <a href="https://auth0.com/single-sign-on" target="_blank" rel="noreferrer noopener">single sign-on</a>, and <a href="https://auth0.com/passwordless" target="_blank" rel="noreferrer noopener">passwordless</a> flows. And the <a href="https://marketplace.auth0.com/" target="_blank" rel="noreferrer noopener">Auth0 Marketplace</a> has what you need to handle everything from consent management to business process software integrations. The protections and extensibility we offer is a key factor in our scalability. </p><p>When the time comes to expand across borders, Auth0 is ready. We’re certified by a third party as compliant with the International Standards Organization (ISO) standards <a href="https://www.iso.org/obp/ui/#iso:std:iso-iec:27001:ed-2:v1:en" target="_blank" rel="noreferrer noopener">ISO27001</a> and <a href="https://www.iso.org/standard/61498.html" target="_blank" rel="noreferrer noopener">ISO27018</a> for handling information security and personally identifiable information (PII) as a cloud provider.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1sBMtrIri0sAw0OBkWE4QV/41d7fc8b0740ac05ec3c82145fd1478f/Latam06.jpg" alt="Growing"/></p><h2 id="Auth0-is-the-Identity-Solution-That-Can-Keep-Up-With-The-Growing-LatAm-Market">Auth0 is the Identity Solution That Can Keep Up With The Growing LatAm Market</h2><p>To provide your customers with a continuous, low-friction, and intuitive login flow requires a robust identity solution. Whether you’re scaling internationally or your growth plans call for staying closer to home, Auth0 can provide the IDaaS platform you need to maintain a great customer experience while ensuring the security and privacy of your customer data. And don’t worry if you’ve already started an identity project and hit a stumbling block, <a href="https://auth0.com/contact-us" target="_blank" rel="noreferrer noopener">our experts can help</a>. </p><div><h2 id="About-Auth0">About Auth0 </h2><p>Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit <a href="https://auth0.com/" target="_blank" rel="noopener noreferrer">https://auth0.com</a>.</p></div></div></div>]]></content:encoded>
      <pubDate>Thu, 29 Jul 2021 11:56:00 +0000</pubDate>
    </item>
    <item>
      <title>Accelerated Your Road Map? Go Fix Workforce and App Security</title>
      <link>https://auth0.com/blog/accelerated-your-road-map-go-fix-workforce-and-app-security/</link>
      <description>Rapid change introduces workforce and app risks. Auth0 Security team’s advice on what to fix now.</description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><section itemscope="" itemtype="http://schema.org/BlogPosting" itemprop="mainEntity"><header><div><div><p><span>ACCELERATION RESPONSE SERIES</span></p><p itemprop="description">Rapid change introduces workforce and app risks. Auth0 Security team’s advice on what to fix now.</p></div><p>Last Updated On: July 28, 2021</p><meta itemprop="datePublished" content="2021-07-28"/><meta itemprop="dateModified" content="2021-07-28"/></div></header><header><div><p><img src="https://images.ctfassets.net/23aumh6u8s0i/lpo0yom5xDZonfNzlOkHc/c55bd864b5d7360bf8a2c307f99c8e40/Security_and_Identity_4x.jpg"/></p><div><p><span>ACCELERATION RESPONSE SERIES</span></p><p itemprop="description">Rapid change introduces workforce and app risks. Auth0 Security team’s advice on what to fix now.</p><p>Last Updated On: July 28, 2021</p><meta itemprop="datePublished" content="2021-07-28"/><meta itemprop="dateModified" content="2021-07-28"/></div></div></header><article><main id="post-content" itemprop="articleBody"><div><p>Fast response allowed many organizations to survive and thrive in 2020. Orgs went remote overnight; businesses launched consumer-facing apps, and <a href="https://auth0.com/blog/how-brick-and-mortar-approaches-improve-digital-experiences/" target="_blank" rel="noreferrer noopener">consumers shifted buying patterns online</a>.</p><p>Going fast gets products to market, it gives consumers choices, and it helps companies scale. But when you jump ahead seven to 10 years in your digital road map, you risk leaving a few security and data privacy concerns behind. I reached out to key members of my security team, as well as our data privacy team, to put together this three-part series based on our industry experience and observations.</p><p>Each post will focus on protecting and securing two critical areas: your workforce and your consumer-facing apps. The first post will focus on security details to check and mitigate now. The second will focus on immediate data privacy concerns with the help of Auth0 Vice President, Privacy Lucy McGrath. And the third post will help you put together a plan for the future that will make it easier the next time you want to turn on the speed — and to remain current in an ever-changing security landscape.</p><p>The thing is that security is a global team sport.  As more of us shift to working and living online, everything is more connected — and that can be a good thing. Securing your personal identity, your business identity, and helping increase security at your business can actually make an impact. Here’s what you can do to help make the internet safer for everyone.</p><h2 id="Why-Remote-Work-Forced-a-Change-in-Security-Thinking">Why Remote Work Forced a Change in Security Thinking</h2><p>Before the world started working remotely, a lot of companies used a castle-and-moat approach to security. They relied on a combination of physical security and internal networks to ensure that employees and outsiders only accessed necessary information. They might even have relied on SaaS companies to provide some of their protections, but the thinking was still pretty much “protect the castle.”</p><p>Suddenly workers were working anywhere in the world, maybe on their own devices. Without remote experience, your security team might not have had time to think through all of the security issues inherent with having remote endpoints. For example, to ensure that they properly protect these assets against current threats like ransomware and malware, it would be appropriate to install leading next-gen antivirus on these machines.</p><p>Role-based privileges and policies also abruptly needed to follow the user. I know I work for an identity company, but it was identity and policy <a href="https://auth0.com/blog/why-identity-federation-matters/" target="_blank" rel="noreferrer noopener">federation</a> that anticipated this need and allowed for a rapid response.</p><p><a href="https://www.businessinsider.com/companies-asking-employees-to-work-from-home-due-to-coronavirus-2020" target="_blank" rel="noreferrer noopener">Now some companies are making work from home a permanent</a> part of their employee offering. Since Auth0 was built as a remote-friendly, globally dispersed company, we’ve had some time to think through the security concerns. Here’s what you need to consider to protect your customers, your business, and your employees:</p><ol start="1"><li><strong>Secure the endpoints.</strong> Services like CarbonBlack or CrowdStrike can help prevent malware or breaches occurring from endpoints.</li><li><strong>Update bring your own device policies.</strong> Rethink how and where employees are accessing business and customer data. Do you need to restrict access in public spaces? Adjust policies?</li><li><strong>Update action policies</strong>. What do your employees do if a work computer is stolen? What steps do they need to take if the information is exposed at home? A <a href="https://www.darkreading.com/51--of-wfh-parents-say-children-have-accessed-work-accounts/d/d-id/1339754" target="_blank" rel="noreferrer noopener">1Password survey</a> found that 51% of work from home (WFH) parents surveyed said their children had accessed their work accounts, sometimes accidentally deleting necessary files.  How can you support your employees??</li><li><strong>Human risk is increased.</strong> Have a look at the next section.</li></ol><h2 id="The-Human-Element">The Human Element</h2><p>This is the critical part of this series — <strong>the human element is the most important aspect of security and data privacy.</strong></p><blockquote><p>Security awareness training needs to happen at every single level of your organization.</p></blockquote><p>A malicious actor is going to use everything you need to do business — email address patterns, information on your website, social media posts, and items gleaned from news articles all to try to gain entry to your system. While the attacks will vary, they usually follow this pattern: <strong>human factor</strong> + inject something into the code + lack of input validation + insufficient logging and monitoring.</p><p>If something looks like it’s coming from your CEO or payroll, an employee might fall for it and supply a way into your system. And once a bad actor is in, there’s lots they can do.</p><p>But if you train your entire team to watch out for phishing attacks, you can stop them at the first step. <a href="https://auth0.com/blog/protecting-against-phishing-attacks/" target="_blank" rel="noreferrer noopener">This post is a good place to start.</a></p><p>Attacks evolve, so even though security awareness is something you should pause and do now, it’s something you’re going to need to do regularly. Developing a security culture throughout your org provides great protection. To do business with some industries like finance or healthcare, the training will be required to cover specific areas and will need to be documented. The training you provide can also help protect your employees in their personal lives.</p><h2 id="Top-7-Things-to-Do-Now-to-Check-Your-App-s-Security">Top 7 Things to Do Now to Check Your App’s Security</h2><p>This can seem like a lot if you don’t have an in-house security team (and maybe if you do). One principle of security is encouraging diversity of thought not only because it’s the right thing to do but because studies show it makes teams more productive. In security, <a href="https://www.mckinsey.com/business-functions/strategy-and-corporate-finance/our-insights/innovation-in-a-crisis-why-it-is-more-critical-than-ever" target="_blank" rel="noreferrer noopener">diversity of thought</a> makes it easier to spot potential threats. This is part of why even large teams rely on external testing vendors and may even need to provide proof of outside testing for certifications like <a href="https://auth0.com/blog/the-csa-star-program-a-business-guide-to-certification/" target="_blank" rel="noreferrer noopener">CSA Star</a> and <a href="https://auth0.com/blog/what-is-pci-a-business-guide-to-compliance/" target="_blank" rel="noreferrer noopener">PCI</a>.</p><ol start="1"><li><strong>Get an external third-party pen test — and implement the recommendations</strong>. A penetration test is where you hire a verified third party to attempt to find your app’s vulnerabilities. They will sign a non-disclosure agreement (NDA) and provide a detailed report outlining their findings and usually with recommended fixes cataloged by severity. Discovering vulnerabilities can be scary, and there is the temptation to use fear to drive organizational change, but we’ve found that partnering and collaborating with other teams and leadership can often get changes implemented faster.</li><li><strong>Review best practices for your cloud-based services.</strong> When people go really fast, they may not take the time to fully understand the technology and security controls. This is a great time to go back and pay really close attention to the docs provided by your third-party vendors.</li></ol><blockquote><p>“Many common AWS security issues, for example, happen as a result of not following AWS security best practice guidelines when setting up the infrastructure. This can lead to open and accessible EC2 security groups, public S3 buckets, unprotected EMR clusters, and more,” says Auth0 Detection and Response Security Engineer Troy Wegner (formerly of AWS and Amazon.com).</p></blockquote><ol start="3"><li><strong><a href="https://www.overops.com/blog/static-vs-dynamic-code-analysis-how-to-choose-between-them/" target="_blank" rel="noreferrer noopener">Perform static</a> and <a href="https://www.overops.com/blog/static-vs-dynamic-code-analysis-how-to-choose-between-them/" target="_blank" rel="noreferrer noopener">dynamic code analysis</a></strong>. Static analysis reviews the code as it exists. Dynamic analysis looks for vulnerabilities while the code is being executed and for unexpected outcomes. Ideally, you want to move towards baking both into your Software Development Lifecycle (SDLC). Devs may not always enjoy adding this to part of their process—more on how to add this analysis to your long-term software development plans in the final post.</li><li><strong>Think through vulnerability management and updates</strong>. Since humans are fallible and it’s humans who make code, it’s inevitable that you’re going to run into vulnerabilities. If you don’t have a plan for pushing updates, now’s the time to make one so you don’t hear about something BIG like the <a href="https://www.vox.com/2014/6/19/18076318/heartbleed" target="_blank" rel="noreferrer noopener">Heartbleed Bug</a> and find yourself painfully updating ad-hoc.</li></ol><blockquote><p>In general, you’re going to need to test every time your devs update something and whenever your tech stack libraries or any of the main operating systems updates. Services like Chef, Puppet and Terraform can make this easier by pushing updates from a central server to connected servers. In the final post, we’ll get into longer-term strategies for updates, like maintaining a Golden Amazon Machine Image (AMI) if you’re on AWS. For now, just document how and when you’re going to update and test.</p></blockquote><ol start="5"><li><strong>Threat model</strong>. A lot of security is determining risks. Ideally, you’ve threat modeled before building your app, but in some ways, it’s easier to model after it’s live. Yes, you can hire a trusted third party to do this for you. To give you a sense of the thought process, I asked Troy to threat model this restaurant scenario. Security engineers often diagram vulnerabilities, so we also include Troy’s whiteboard as a reference.</li></ol><p>Let’s say you’re a local restaurant who responded to COVID by offering the ingredients to make your tastiest dishes and recipes to your customers via curbside pickup. You hired someone to put the app together quickly, but now your region is opening up, and you’ve decided this channel of operations should continue contributing to your bottom line. </p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3qWEruezG4YZw2AwS2w4Nf/ccb3121e94d794c8baa0ec470e4b084d/diagram.jpg" alt="Whiteboard"/>
<strong>Figure 1:</strong> <em>Auth0 Senior Security Engineer - Detection and Response Troy Wegner’s whiteboard of our restaurant scenario.</em></p><ul><li>Start with authentication because you know customers need to authenticate in order to interact with your app. How are they authenticating? Are they only using a username and password? If they are only using a username and password for authentication, then you have just hit on your first major risk (user compromise/phishing/user impersonation).</li><li>As a way to address the first risk identified, you have chosen to go with two-factor authentication for your users. But here is where things get interesting; which 2-factor options do you want to support? There are authenticator apps, FIDO U2F, Push-based 2FA, and SMS (the weakest available option). Each option has its own pros and cons to consider.</li><li>Since this is a restaurant, you’re also somehow connecting the app to the food supply. How are you measuring and validating your existing ingredients inventory to ensure you do not oversell based on your total ingredients available? Are you using a database to store this information? If so, where does this database live, is it protected or hardened information security wise, and if so, how is it hardened? How do you authenticate to the database, is it updated regularly, do you perform backups, etc.</li><li>If your service has gotten really popular, too many people might try to order at once, and that could overwhelm the app’s limits. The app could go down due to resource constraints based on how it is architected. This is basically the risk a DOS/DDOS would present in bringing your app down and making it no longer available to your customers. In order to mitigate a DDOS risk, you might have a plan to make your app more fault tolerant and highly available by using load balancing, increasing back-end servers to handle the load, or using a front-end CDN to help distribute load across various edge locations.</li><li>Most likely, your app is taking payment and processing it in order to fulfill orders; how are customer payment and other sensitive information being handled/stored? If you accept credit cards or debit cards, PCI compliance is a concern you should address.</li><li>Here is where you would now want to think through and fully diagram out the rest of how the app works and uncover any other risks or bottlenecks that currently exist with your app, place a severity on those risks, and determine by severity which risks you want to fix, and which ones you are ok accepting.</li></ul><ol start="6"><li><strong>Turn on your logs — and make sure they’re monitored</strong>. Turning on logs can seem like common sense, but because there’s often an expense attached to logging and getting the data analyzed, the logs might not always be turned on. It’s really hard to know what to fix after a malware outbreak or other issues occur, especially if your logs aren’t turned on and are being actively analyzed.</li></ol><p>So this is where we tell you to turn on the logs for all the services you’re using. You should also make sure that a trusted third-party vendor or trained security engineer is watching your logs and building actionable detections based on those log sources to look for suspicious or anomalous activity.</p><ol start="7"><li><strong>Take action</strong>. Logs, vulnerability assessments, pen tests — these things can help you identify what needs to be fixed, but you still need to fix it. Breaches and ransomware are the obvious security problems you want to avoid. How your security challenges impact consumer behavior might not be as clear. Lost conversions, abandoned shopping carts, and low time on site are all indications that your target audience may not feel comfortable sharing their data with you. Our customers tell us that an app or site that feels secure (think smooth login, logical and smooth payment process) supports their business goals.</li></ol><h2 id="If-You-Need-More-Help">If You Need More Help</h2><p>Authentication is often a critical part of securing an app or workplace. If you’d like to understand how Auth0’s solutions might help make your app more secure, please reach out to the <a href="https://auth0.com/contact-us" target="_blank" rel="noreferrer noopener">team at Auth0</a>.</p><p>My next post will focus on immediate data privacy concerns with the help of Auth0 Vice President of Privacy Lucy McGrath.</p><div><h2 id="About-Auth0">About Auth0 </h2><p>Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit <a href="https://auth0.com/" target="_blank" rel="noopener noreferrer">https://auth0.com</a>.</p></div></div></main></article></section></div>]]></content:encoded>
      <pubDate>Wed, 28 Jul 2021 16:05:00 +0000</pubDate>
    </item>
  </channel>
</rss>