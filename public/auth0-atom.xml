<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>Auth0</title>
  <id>https://auth0.com/blog/rss.xml</id>
  <updated></updated>
  <link href="https://auth0.com/blog/rss.xml"></link>
  <entry>
    <title>Get Started with iOS Authentication using Swift and UIKit</title>
    <updated>2021-11-29T17:14:00Z</updated>
    <id>tag:auth0.com,2021-11-29:/blog/get-started-ios-authentication-swift-uikit/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;If you’re planning to build a native iOS app that requires users to log in, you &lt;em&gt;could&lt;/em&gt; implement authentication yourself — or you can use Auth0 and focus your time and effort on your app’s &lt;em&gt;actual&lt;/em&gt; functionality.&lt;/p&gt;&lt;p&gt;Building a user login/logout system looks simple. It often turns into its own project. Just handling the many ways users want to log in can easily take a lot of time. You’d also have to deal with issues such as user management, scaling, and security, each of which has dozens of considerations, risks, issues, and edge cases.&lt;/p&gt;&lt;p&gt;Auth0 solves this problem. With Auth0 and a few lines of code, your app can have a full-featured system that supports logging in with a username/password combination, single sign-on and social accounts, passwordless login, biometrics, and more. You won’t have to handle the “behind the scenes” issues, either! Instead, you can focus on what your app does.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;This tutorial covers the basics of using Auth0 to implement login/logout in an iOS app written using Swift and the UIKit framework.&lt;/strong&gt; It also provides an introduction to reading and writing information into a user account’s metadata so that your app can “remember” each user’s status, configurations, and preferences. Along the way, you’ll become familiar with the Auth0 dashboard and learn how to use it to register applications and manage users and their metadata.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Look for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.&lt;/strong&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;What-You-ll-Build&#34;&gt;What You’ll Build&lt;/h2&gt;&lt;p&gt;You’ll build a simple, single-screen iOS app that will allow the user to log in and log out using Auth0. While logged in, the user will be able to see the following information from their user profile, namely:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The following basic information from the user account:&#xA;&lt;ul&gt;&lt;li&gt;The user’s name&lt;/li&gt;&lt;li&gt;The user’s email address&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;User metadata, specifically the user’s favorite color, which they will be able to edit in the app&lt;/li&gt;&lt;li&gt;An announcement if a flag in the user’s app metadata has been set&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;A-quick-tour-of-the-app&#34;&gt;A quick tour of the app&lt;/h3&gt;&lt;p&gt;When you launch the completed app, you’ll see a greeting, a &lt;strong&gt;Log In&lt;/strong&gt; button, and a disabled &lt;strong&gt;Log Out&lt;/strong&gt; button:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1yFKSaXbb0jLpvSP37ZSD1/e5dd0b31e231450d81f1f7d1b22e06d3/finished_app_-_welcome_screen.png&#34; alt=&#34;The app’s “Welcome” screen. The “Log In” button is enabled, and the “Log In” button is disabled.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Tapping the &lt;strong&gt;Log In&lt;/strong&gt; button takes the user to the &lt;a href=&#34;https://auth0.com/docs/login/universal-login&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Universal Login screen&lt;/a&gt;, which appears in a custom browser window:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/29unD3DL7wIRlacIbgXw8J/4f730e99dae87de64273ea0f3219695a/universal_login.png&#34; alt=&#34;The default Auth0 Universal Login web page, with Auth0 logo and “email address” and “password” fields.&#34;/&gt;&lt;/p&gt;&lt;p&gt;When you use Auth0 to add login/logout capability to your apps, you delegate authentication to a centralized login page in the same way that Google properties such as Gmail and YouTube redirect you to &lt;strong&gt;accounts.google.com&lt;/strong&gt; when you log in. In this exercise, you’ll use the default “look and feel” for the login page, but &lt;a href=&#34;https://auth0.com/docs/universal-login/new-experience/universal-login-page-templates&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;you can customize it to match your app or organization’s branding&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If the user logs in successfully, the Universal Login screen and its browser window disappear, and the user returns to the app. &lt;/p&gt;&lt;p&gt;Immediately after login, the app checks the app metadata associated with the user’s account for a “make an announcement” flag. If this flag is set, the app shows this alert box:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/47pe3bEupD0XBA6KLtw9id/2e5ad517195ff269238373bf35258bee/finished_app_-_logged_in_-_announcement.png&#34; alt=&#34;The app displays an alert that tells the user if the alert is visible, then the “make_announcement” flag in “app_metadata” is set to “true”.&#34;/&gt;&lt;/p&gt;&lt;p&gt;This alert box doesn’t appear if the flag &lt;em&gt;isn’t&lt;/em&gt; set.&lt;/p&gt;&lt;p&gt;Here’s what the app looks like once the user is logged in and has dismissed the alert box (if it appeared):&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/yNc58XQjBvMrt18aYk0FY/b9efe02e3e738e3b7e9c283c9f2ee0c8/finished_app_-_logged_in.png&#34; alt=&#34;The app in its “logged in” state. The “Log In” button is disabled, “Log Out” button is enabled, and the app’s other controls are visible.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Here’s what changed after login:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The greeting will have changed to a notification telling you that you’re now logged into the app.&lt;/li&gt;&lt;li&gt;The &lt;strong&gt;Log In&lt;/strong&gt; button will now be disabled, and the &lt;strong&gt;Log Out&lt;/strong&gt; button will now be enabled.&lt;/li&gt;&lt;li&gt;The name and email address for the user account that you used to log in will be displayed.&lt;/li&gt;&lt;li&gt;There will now be a section for metadata, complete with an editable text field and &lt;strong&gt;Get&lt;/strong&gt; and &lt;strong&gt;Set&lt;/strong&gt; buttons that will allow you to read and write to the &lt;code&gt;favorite_color&lt;/code&gt; field of the metadata for the user account.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As you might expect, logging out is done by tapping the &lt;strong&gt;Log Out&lt;/strong&gt; button. Once logged out, the user will see this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/61JF1QFqXo4Spfl2OEadPi/0a0f5e1bdd7a6ef1a70461aed1a17160/logged_out.png&#34; alt=&#34;The app in its “logged out” state. The “Log In” button is enabled, “Log Out” button is disabled, and the app’s other controls are hidden.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Note that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The notification at the top of the screen will now inform you that you’re logged out of the app.&lt;/li&gt;&lt;li&gt;Logging out enables the &lt;strong&gt;Log in&lt;/strong&gt; button and disables the &lt;strong&gt;Log out&lt;/strong&gt; button.&lt;/li&gt;&lt;li&gt;The other controls that were visible when you were logged in will no longer be visible.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;This-is-a--UIKit--based-app&#34;&gt;This is a &lt;em&gt;UIKit&lt;/em&gt;-based app&lt;/h3&gt;&lt;p&gt;We’re at an interesting time for iOS developers. There are currently two very different UI frameworks for iOS development:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/xcode/swiftui/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;SwiftUI,&lt;/strong&gt;&lt;/a&gt; which is also known as “the new one”. With SwiftUI, you build user interfaces using Swift code with a &lt;em&gt;declarative&lt;/em&gt; approach, which means that you specify how the UI should look and what it should do in different states. You don’t have to specify how the UI moves between those states — it takes care of that for you. If you know React programming, you’ll find SwiftUI familiar.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/uikit/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;UIKit,&lt;/strong&gt;&lt;/a&gt; also known as “the old one” or “the original one”. With UIKit, you build user interfaces using Interface Builder, a drag-and-drop layout tool to build the app’s views graphically. You then connect UI elements to variables and methods in the app’s view controllers using outlets and actions. You program UIKit apps &lt;em&gt;imperatively,&lt;/em&gt; which means that you define how the program moves between states as well as how the UI should look and what it should do in different states.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Most iOS apps are written using UIKit. Since it’s been around since the beginning of iOS, it’s the one that most iOS developers know, and it’s the better-documented framework. For this reason, this tutorial will focus on UIKit and feature a UIKit-based app. We’ll publish a similar article focused on SwiftUI soon.&lt;/p&gt;&lt;h2 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&lt;h3 id=&#34;An-Auth0-account&#34;&gt;An Auth0 account&lt;/h3&gt;&lt;p&gt;The app uses Auth0 to provide login, logout, and user metadata functionality, which means that as the developer, you need an Auth0 account. You can &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free account&lt;/a&gt;, which lets you add authentication for enough apps and users for prototyping,  development, and testing.&lt;/p&gt;&lt;h3 id=&#34;An-iOS-development-setup&#34;&gt;An iOS development setup&lt;/h3&gt;&lt;p&gt;To develop applications for any Apple hardware, you need a Mac computer running Xcode, Apple’s integrated development environment:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The computer can be any Mac — MacBook, MacBook Air, MacBook Pro, iMac, iMac Pro, Mac Mini, or Mac Pro — from mid-2012 or later with at least 8 GB RAM.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/xcode/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Xcode&lt;/a&gt; version 11.0 (September 2019) or later. I used the current version when writing this article: version 13.1 (build 13A1030d), which was released on October 25, 2021.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;An-iOS-device--virtual-or-real&#34;&gt;An iOS device, virtual or real&lt;/h3&gt;&lt;p&gt;Xcode 13.1 comes with the Simulator, an application that creates virtual devices that simulate recent models of the iPhone, iPad, and iPod Touch, all of which run iOS 15.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;To install earlier versions of iOS for the Simulator, select &lt;strong&gt;Preferences…&lt;/strong&gt; from the &lt;strong&gt;Xcode&lt;/strong&gt; menu, followed by the &lt;strong&gt;Components&lt;/strong&gt; tab. You’ll see a list of older versions of not just iOS, but watchOS and tvOS as well.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;One of the benefits of using the Simulator is that you &lt;em&gt;don’t&lt;/em&gt; need an Apple Developer account — free or paid — to use it.&lt;/p&gt;&lt;p&gt;While the Simulator is convenient, there’s no substitute for an actual physical device. It provides a more realistic testing experience, and there are certain things that can’t be done on the Simulator (such as motion/tilt sensing and augmented reality). &lt;/p&gt;&lt;p&gt;You need a free Apple Developer account to deploy an app directly to a device for testing (you need the paid one to deploy an app to the App Store), and you need to register the device in your developer account to deploy apps to it. For more details, see Apple’s article, &lt;a href=&#34;https://developer.apple.com/documentation/xcode/distributing-your-app-to-registered-devices&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Distributing Your App to Registered Devices.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;To find out more about running apps on virtual and real iOS devices, start with Apple’s &lt;a href=&#34;https://developer.apple.com/documentation/xcode/running-your-app-in-the-simulator-or-on-a-device&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Running Your App in the Simulator or on a Device.&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&#34;What-might-be-useful&#34;&gt;What might be useful&lt;/h3&gt;&lt;p&gt;While not completely necessary, it would help if you were familiar with the Swift programming language and iOS development. If these are new to you, the Swift programming language, or the UIKit framework, try this Apple tutorial: &lt;a href=&#34;https://developer.apple.com/tutorials/app-dev-training/getting-started-with-today&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Getting Started with Today,&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Download-and-Run-the-Starter-Project&#34;&gt;Download and Run the Starter Project&lt;/h2&gt;&lt;p&gt;To keep this tutorial focused on implementing Auth0 authentication in an iOS app, I created a starter project that you can download. It contains a view with controls already laid out and connected to corresponding methods in the view controller. By starting with this project, you’ll be able to focus on logging in, logging out, and reading and writing user information without the distraction of building a user interface.&lt;/p&gt;&lt;p&gt;🛠 &lt;a href=&#34;https://assets.ctfassets.net/23aumh6u8s0i/6BGjYQpWYevjdABinJXDJ1/3fa4a7b68fa76e91e5ee1f6ffe347aa0/iOS_Auth__starter_.zip&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Download the .zip file containing the starter project (225 KB)&lt;/a&gt; and uncompress it. This will create a folder named &lt;code&gt;iOS &lt;span&gt;Auth&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;starter&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; on your local drive. Open this folder, then launch Xcode by opening the project file, &lt;code&gt;iOS Auth&lt;span&gt;.&lt;/span&gt;xcodeproj&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;🛠 Confirm that the starter project works. Select a simulator from the device menu at the top of the Xcode window (see the picture below), then click the ▶️ button to run the app:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2nWTA4ZliqGHymEdE1Y9tb/80a9df8399ca3152af80e5f080d8a88e/how_to_run_the_starter_project.png&#34; alt=&#34;Screenshot of Xcode with instructions to choose a simulator and run the app.&#34;/&gt;&lt;/p&gt;&lt;p&gt;The Simulator will launch, and after a moment, the app will run within the Simulator. It should look like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4rqssg506NFyaePpZOZK7D/a1a20880a8218c9550ad3ceb16429658/starter_app_screen.png&#34; alt=&#34;The starter app’s initial screen, with all the UI, controls in their default states.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Right now, the app simply draws a user interface on the screen. You can tap on the buttons, but they’ll do nothing. As you go through the steps in this tutorial, you’ll add the following functionality to the app:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Login&lt;/li&gt;&lt;li&gt;Logout&lt;/li&gt;&lt;li&gt;Retrieving and displaying the current user’s name and email address&lt;/li&gt;&lt;li&gt;Getting and setting the current user’s favorite color&lt;/li&gt;&lt;li&gt;Displaying a message if the &lt;code&gt;make_announcement&lt;/code&gt; flag in the app metadata is set&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;There’s one more task to perform before we set things up on the Auth0 side: you need to make a note of the app’s &lt;a href=&#34;https://cocoacasts.com/what-are-app-ids-and-bundle-identifiers&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;bundle identifier&lt;/a&gt;, which is a string that uniquely identifies the app.&lt;/p&gt;&lt;p&gt;🛠 Find the bundle identifier by opening the Project Explorer (click on the folder icon at the top of Xcode’s left column), then select the &lt;strong&gt;iOS Auth&lt;/strong&gt; project. Then under &lt;strong&gt;Targets&lt;/strong&gt;, select &lt;strong&gt;iOS Auth&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4HBsIew3R35NZ275le2chO/b1b600e3b7230b697b3ef55e67e3d148/get_bundle_identifier_1.png&#34; alt=&#34;Xcode screenshot showing the selection of the project target.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Select the &lt;strong&gt;General&lt;/strong&gt; tab in Xcode’s center pane and look for the &lt;strong&gt;Bundle Identifier&lt;/strong&gt; field value:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6TghN99Z56iPMMe5Ju7tfR/dbedbb762d581c1b5a80845fe2eda786/get_bundle_identifier_2.png&#34; alt=&#34;Xcode screenshot showing the display of the Bundle Identifier.&#34;/&gt;&lt;/p&gt;&lt;p&gt;You can keep the bundle identifier currently defined in the starter project — &lt;code&gt;com&lt;span&gt;.&lt;/span&gt;example&lt;span&gt;.&lt;/span&gt;iOS&lt;span&gt;-&lt;/span&gt;Auth&lt;/code&gt; — or you can define your own.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Apple encourages developers to use &lt;a href=&#34;https://en.wikipedia.org/wiki/Reverse_domain_name_notation&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;reverse domain name notation&lt;/a&gt; for application bundle identifiers. For example, if you own the domain &lt;code&gt;examplesoftwarecompany&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt; and the name of the app is “Example App”, the recommended bundle identifier is &lt;code&gt;com&lt;span&gt;.&lt;/span&gt;examplesoftwarecompany&lt;span&gt;.&lt;/span&gt;exampleapp&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Remember the bundle identifier — you’ll use it in the next step!&lt;/p&gt;&lt;h2 id=&#34;Register-the-App-in-the-Auth0-Dashboard&#34;&gt;Register the App in the Auth0 Dashboard&lt;/h2&gt;&lt;p&gt;The next step is to register the app in your Auth0 dashboard. In this process, you will:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Add the app to your Auth0 dashboard’s list of registered applications.&lt;/li&gt;&lt;li&gt;Gather two pieces of information that the app will need to delegate login/logout to Auth0: your tenant’s domain and the client ID that Auth0 will assign to the app.&lt;/li&gt;&lt;li&gt;Provide Auth0 with the necessary callback URLs to contact the app: one to call at the end of the login process and the other to call at the end of the logout process.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;To perform this step, you’ll need an Auth0 account.&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;🛠 If you already have an Auth0 account, log in, skip the next section, and proceed to the part titled &lt;a href=&#34;#add-the-app-to-the-applications-list&#34;&gt;&lt;strong&gt;&lt;em&gt;Add the app to the Applications list&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;If-you-don-t-have-an-Auth0-account-yet---&#34;&gt;If you don’t have an Auth0 account yet...&lt;/h3&gt;&lt;p&gt;🛠 &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;...go ahead and sign up for one!&lt;/strong&gt;&lt;/a&gt; It’s free, and we’ve taken great care to make the process as painless as possible.&lt;/p&gt;&lt;h3 id=&#34;-a-id--add-the-app-to-the-applications-list----a--Add-the-app-to-the-Applications-list&#34;&gt;&lt;a href=&#34;&#34; id=&#34;add-the-app-to-the-applications-list&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;/a&gt; Add the app to the Applications list&lt;/h3&gt;&lt;p&gt;🛠 In the left side menu of the &lt;a href=&#34;https://manage.auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 dashboard&lt;/a&gt;, click on &lt;strong&gt;Applications&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2PsBUajhnnXWJR7QS8PUfg/e9c6bd92175335286aa03224e1646e91/expand_applications_menu.png&#34; alt=&#34;The main page of the Auth0 dashboard. The reader is directed to expand the “Applications” menu.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 This will expand the &lt;strong&gt;Applications&lt;/strong&gt; menu. Select the first item in that menu, which also has the name &lt;strong&gt;Applications&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2UNcUhGNq16RFBJkokz7KS/854f3e92fbe58943bf05f0f4a761d177/select_applications_menu_item.png&#34; alt=&#34;The main page of the Auth0 dashboard, with the “Applications” menu expanded. The reader is directed to select the “Applications” menu item.&#34;/&gt;&lt;/p&gt;&lt;p&gt;You will now be on the &lt;strong&gt;Applications&lt;/strong&gt; page. It lists all the applications that you have registered so that Auth0 can handle their login/logout processes.&lt;/p&gt;&lt;p&gt;🛠 Let’s create a new registration for the app. Do this by clicking the &lt;strong&gt;Create application&lt;/strong&gt; button near the top right of the page:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4aOFH6mt7xs9CspYNkuU7Q/1cff580b803c09236ad959b18614119a/create_application.png&#34; alt=&#34;The “Applications” page. The reader is directed to click the “Create Application” button.&#34;/&gt;&lt;/p&gt;&lt;p&gt;You’ll see this dialog appear:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4DUTayxTzIU73jbqEMDt8O/ca0b10774523d196c9962e1dbeaf97c3/create_application.png&#34; alt=&#34;The “Create application” dialog. The application’s name is set to “iOS Auth”, and the selected application type is “Native”.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 You’ll need to provide two pieces of information to continue:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Enter a name for the app in the name field. It might be simplest to use the same name as your Xcode project (if you’ve been following my example, use the name &lt;strong&gt;iOS Auth&lt;/strong&gt;).&lt;/li&gt;&lt;li&gt;Specify the application type, which in this case is &lt;strong&gt;Native&lt;/strong&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Click &lt;strong&gt;Create&lt;/strong&gt;. The &lt;strong&gt;Quick Start&lt;/strong&gt; page for the app will appear:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7uPmMEoQ3nK6NisdotfcGr/c438d72547a3c4f07a02e67abf6dd88b/quick_start_tab.png&#34; alt=&#34;The “Quick Start” page. It contains several icons, each one representing an operating system or platform.&#34;/&gt;&lt;/p&gt;&lt;p&gt;This page provides you with ready-made projects for several different platforms that you can use as the basis for an application that delegates login/logout to Auth0. You won’t be using any of them in this exercise; instead, you’ll make use of a couple of Auth0 libraries and write the code yourself. It’s more educational — and more importantly, &lt;em&gt;fun&lt;/em&gt; — that way.&lt;/p&gt;&lt;p&gt;🛠 Click the &lt;strong&gt;Settings&lt;/strong&gt; tab, which will take you to this page:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/74VBH8wCBmY0mrgPv9raNT/d83139643eb324aae15c4335094e43b5/settings_page.png&#34; alt=&#34;The “Application” page’s “Settings” tab.&#34;/&gt;&lt;/p&gt;&lt;p&gt;You’re going to do two critical things on this page:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Get information that the app needs to know about Auth0, and&lt;/li&gt;&lt;li&gt;Provide information that Auth0 needs to know about the app.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let’s take care of the first one: Getting the information that the app needs, namely:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;strong&gt;domain&lt;/strong&gt;, which you need to build the URL that the app will use to contact Auth0. It uniquely identifies your Auth0 &lt;em&gt;tenant&lt;/em&gt;, which is a collection of applications, users, and other information that you have registered with your Auth0 account.&lt;/li&gt;&lt;li&gt;The &lt;strong&gt;client ID&lt;/strong&gt;, which is the identifier that Auth0 assigned to the app. It’s how Auth0 knows which app of yours it’s working with.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 Get this information by copying the contents of the &lt;strong&gt;Domain&lt;/strong&gt; and &lt;strong&gt;Client ID&lt;/strong&gt; fields for later reference:  &lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7jrEy6gvLtoG7ROVyLKij9/d3f14f7e3e9416ce5e52892764d53ddc/settings_-_get_info.png&#34; alt=&#34;The “Application” page’s “Settings” tab. The reader is directed to copy the values of the “Domain” and “Client ID” text fields, then to scroll down the page.&#34;/&gt;&lt;/p&gt;&lt;p&gt;You’ll enter them into your Xcode project as strings in a property list soon.&lt;/p&gt;&lt;p&gt;🛠 Scroll down to the &lt;strong&gt;Applications URIs&lt;/strong&gt; section. This is where you provide two pieces of information that Auth0 needs to know about the app, which are:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;A &lt;strong&gt;callback URL:&lt;/strong&gt; the URL that Auth0 will redirect to after the user successfully logs in. There can be more than one of these.&lt;/li&gt;&lt;li&gt;A &lt;strong&gt;logout URL:&lt;/strong&gt; the URL that Auth0 will redirect to after the user logs out. There can be more than one of these.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;At this point, you’re probably thinking: “Wait a minute — I’m writing an &lt;em&gt;iOS app&lt;/em&gt;. It doesn’t have &lt;em&gt;web pages&lt;/em&gt; that you navigate to using URLs, but &lt;em&gt;Views&lt;/em&gt; with underlying code in &lt;em&gt;View Controllers&lt;/em&gt;!”&lt;/p&gt;&lt;p&gt;You’re absolutely right. In the case of native applications, the callback and logout URLs are the same string, and Auth0 sends that string to the app to inform it that a user has logged in or logged out.&lt;/p&gt;&lt;p&gt;The string that native iOS apps use for both the callback URL and the logout URL follow this format:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;BUNDLE_IDENTIFIER&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;YOUR_DOMAIN&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;ios&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;BUNDLE_IDENTIFIER&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;callback&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 To construct the string, do the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Replace &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;BUNDLE_IDENTIFIER&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with the app’s bundle identifier. If you didn’t change the bundle identifier in the starter project, this value is &lt;code&gt;com&lt;span&gt;.&lt;/span&gt;example&lt;span&gt;.&lt;/span&gt;login&lt;/code&gt;. Note that &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;BUNDLE_IDENTIFIER&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; appears twice in the URL; you’ll need to replace it twice.&lt;/li&gt;&lt;li&gt;Replace &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;YOUR_DOMAIN&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with the value from the &lt;strong&gt;Domain&lt;/strong&gt; field that you saw earlier on this page.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 Enter the URL you just constructed into both the &lt;strong&gt;Allowed Callback URLs&lt;/strong&gt; and &lt;strong&gt;Allowed Login URLs&lt;/strong&gt; fields. Remember, the same URL goes into both fields.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2OXT7ElyikvL8JNCO3RzFk/658591a0c5a67dc7e8499bb0ea02b7e5/settings_-_put_info.png&#34; alt=&#34;The “Application URIs” section of the page. The reader is directed to enter the callback URL into “Allowed Callback URLs” and “Allowed Logout URLs”.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 You’ve done everything you need to do on this page. Scroll down to the bottom of the page and click the &lt;strong&gt;Save Changes&lt;/strong&gt; button:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3w6HT6fNOjiJPOjA5uduzt/bb290473a3ae601b70d7ce6456ac7fc4/settings_-_save_changes.png&#34; alt=&#34;The bottom of the page, which features the “Save Changes” button. An arrow directs the reader to click the button.&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Create-a-user-if-your-tenant-doesn-t-have-any&#34;&gt;Create a user if your tenant doesn’t have any&lt;/h3&gt;&lt;p&gt;If you just created an Auth0 account, your tenant is brand new, so it won’t have any user accounts. This means that there won’t be any way to log in to the app. If this is the case, follow these steps to create a user.&lt;/p&gt;&lt;p&gt;🛠 In the menu on the left side of the Auth0 dashboard, click on &lt;strong&gt;User Management&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/13qs824Uauwv78ewd682EO/6898da1b68642b10cb9c31413f358a95/user_management_menu.png&#34; alt=&#34;The bottom of the page. An arrow directs the reader to expand the “User Management” menu.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 This will expand the &lt;strong&gt;User Management&lt;/strong&gt; menu. Select the &lt;strong&gt;Users&lt;/strong&gt; item in that menu:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1tivj870qehY6oIaeDolj1/31b0544fab715b7fbded29fb63802a45/select_users_menu_item.png&#34; alt=&#34;The bottom of the page now featuring an expanded “User Management” menu. An arrow directs the reader to expand the “Users” menu item.&#34;/&gt;&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;Users&lt;/strong&gt; page will appear. It lists all the users registered to your tenant. If there are no users, you’ll see the “You don’t have any users yet” message.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1wCORw3pqSOLt65n48Qr56/7421164d02cfb112350882a4cccb4cca/click_create_user.png&#34; alt=&#34;The “Users” page. The page says, “You don’t have any users yet”. An arrow directs the reader to click the “Create User” button.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Click the &lt;strong&gt;Create User&lt;/strong&gt; button to create a new user, which will make this dialog box appear:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2s3GfTHNKRgts8lcXQJ0SH/6d6d0ca397684be75030d40bb6b94fb5/create_user_dialog.png&#34; alt=&#34;The “Create User” dialog. It has fields for email and password, as well as a drop-down menu displaying “Username-Password-Authentication”.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Enter an email address and password for the user. The only option for the &lt;strong&gt;Connection&lt;/strong&gt; will be &lt;strong&gt;Username-Password-Authentication&lt;/strong&gt;, so leave it as it is. Make a note of that email address and password — you’ll be using them to log in to the app.&lt;/p&gt;&lt;p&gt;🛠 Click the &lt;strong&gt;Create&lt;/strong&gt; button to create the user. The user’s &lt;strong&gt;Details&lt;/strong&gt; page will appear:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3TbGcAFo4e4N1coNCtHYdV/fa830264079fc661cbc683590729e4b1/user_details_page.png&#34; alt=&#34;The user’s “Details” page.&#34;/&gt;&lt;/p&gt;&lt;p&gt;That takes care of all the setup you need to do within the Auth0 dashboard. It’s time to go back to Xcode and the app.&lt;/p&gt;&lt;h2 id=&#34;Set-Up-the-App-to-Connect-to-Auth0&#34;&gt;Set Up the App to Connect to Auth0&lt;/h2&gt;&lt;p&gt;There are a few steps that you’ll need to perform before you can start coding:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Store the domain and client ID values from the Auth0 dashboard in the app&lt;/li&gt;&lt;li&gt;Configure the app’s callback URLs&lt;/li&gt;&lt;li&gt;Install the &lt;em&gt;Auth0.swift&lt;/em&gt; package&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;Store-the-app-s-domain-and-client-ID-in-the-app&#34;&gt;Store the app’s domain and client ID in the app&lt;/h3&gt;&lt;p&gt;Just as Auth0 needs to know information about the app — namely, its bundle identifier and callback URL — the app needs information about Auth0. It needs to know the domain and client ID, both of which you noted previously.&lt;/p&gt;&lt;p&gt;The domain identifies the Auth0 tenant, and the client ID identifies the app. Neither of these values is secret, but we still recommend that you store them in a separate file that you can explicitly exclude from version control. For iOS projects, we recommend using a property list (plist) file to store the domain and client ID.&lt;/p&gt;&lt;p&gt;🛠 Create a new plist file. Right-click (or control-click) on the &lt;strong&gt;Login&lt;/strong&gt; folder in Project Explorer and select &lt;strong&gt;New File…&lt;/strong&gt; from the menu that appears:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3gYddZdYSUooweYdssdgH3/ac2afebc018e9ae48d4f4eb8662221e6/create_new_plist_1.png&#34; alt=&#34;Xcode screenshot, showing the user selecting “File -&amp;gt; New File...”&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 In the window that appears, make sure that the &lt;strong&gt;iOS&lt;/strong&gt; tab is selected. Scroll down the list of icons until you see the &lt;strong&gt;Property List&lt;/strong&gt; icon. Select it, then click &lt;strong&gt;Next&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6Lo7p5Uy6Z8pDCebSpN5Xa/f7f3d413ba964e88e02cd737724d1ce3/create_new_plist_2.png&#34; alt=&#34;Xcode screenshot, showing the selection of the “Property List” file template.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Name the file &lt;code&gt;Auth0&lt;span&gt;.&lt;/span&gt;plist&lt;/code&gt; and click &lt;strong&gt;Create&lt;/strong&gt; to create the file:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1QMIhxogd6PUeRlEUvV5XC/c3f16e78011d0e9d9bffe3434aa551f2/create_new_plist_3.png&#34; alt=&#34;Xcode screenshot, showing the “Save” dialog box for the property list.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Xcode will display the new &lt;code&gt;Auth0&lt;span&gt;.&lt;/span&gt;plist&lt;/code&gt; file in a table format. Let’s add two rows to the table, which will hold the domain and client ID values.&lt;/p&gt;&lt;p&gt;🛠 Move the cursor over the &lt;strong&gt;Root&lt;/strong&gt; row to reveal the &lt;strong&gt;+&lt;/strong&gt; button. Click on the &lt;strong&gt;+&lt;/strong&gt; button twice to add two rows:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/72CFkTz09NL6HRIkjtjed9/f808b0e75331e9a995fdbdeeffc993b5/create_new_plist_4.png&#34; alt=&#34;Xcode screenshot, showing the creation of two new rows in the property list.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Enter the following values into the two rows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Row 1:&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Key:&lt;/strong&gt; &lt;code&gt;Domain&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; &lt;code&gt;String&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Value:&lt;/strong&gt; The app’s domain from the Auth0 dashboard&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Row 2:&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Key:&lt;/strong&gt; &lt;code&gt;ClientId&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; &lt;code&gt;String&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Value:&lt;/strong&gt; The app’s client ID from the Auth0 dashboard&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Your &lt;strong&gt;Auth0&lt;/strong&gt; plist file should look like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5kYgHzVztjEbdx1DFxBnCT/9005fc962c3c8143df794a6230880db1/create_new_plist_5.png&#34; alt=&#34;Xcode screenshot, showing the completed property list.&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Configure-the-app-s-callback-URLs&#34;&gt;Configure the app’s callback URLs&lt;/h3&gt;&lt;p&gt;When an application delegates login and logout to Auth0, it navigates to an URL for an authentication server through a dedicated browser window. Once the login or logout process finishes, the authentication server needs a way to return control to the application.&lt;/p&gt;&lt;p&gt;In a web application, you would create a route and provide the URL for this route to Auth0. When Auth0 finishes logging in or logging out, it calls this URL, returning control to the web application.&lt;/p&gt;&lt;p&gt;iOS native apps aren’t web applications, and they don’t use URLs. For Auth0 to return control to an iOS app, you need to provide the app with some configuration information to allow Auth0 to use the callback URL to return control to the app.&lt;/p&gt;&lt;p&gt;You’ll provide this configuration information by adding it to &lt;code&gt;Info&lt;span&gt;.&lt;/span&gt;plist&lt;/code&gt;, a file included in every default iOS project that stores configuration information. Since the configuration information isn’t sensitive, you can store it in &lt;code&gt;Info&lt;span&gt;.&lt;/span&gt;plist&lt;/code&gt; without compromising security.&lt;/p&gt;&lt;p&gt;Unlike the information you entered into &lt;code&gt;Auth0&lt;span&gt;.&lt;/span&gt;plist&lt;/code&gt;, the configuration information that you need to add to &lt;code&gt;Info&lt;span&gt;.&lt;/span&gt;plist&lt;/code&gt; is more complex. It will be easier to enter as XML.&lt;/p&gt;&lt;p&gt;🛠 Open &lt;code&gt;Info&lt;span&gt;.&lt;/span&gt;plist&lt;/code&gt; as an XML file. Right-click (or control-click) on the &lt;strong&gt;Info&lt;/strong&gt; in Project Explorer, select &lt;strong&gt;Open As&lt;/strong&gt; from the menu that appears, then select &lt;strong&gt;Source Code&lt;/strong&gt; from the sub-menu that appears:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4h9IZfB3pKKVSTUCulR4KA/decd3e5b616dc9582fcd1e76562182f8/edit_info_plist_1.png&#34; alt=&#34;Xcode screenshot, showing the opening of Info.plist as XML (source code).&#34;/&gt;&lt;/p&gt;&lt;p&gt;Xcode will display the contents of &lt;code&gt;Info&lt;span&gt;.&lt;/span&gt;plist&lt;/code&gt; in XML form. It will look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;xml version&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt; encoding&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;DOCTYPE&lt;/span&gt; plist &lt;span&gt;PUBLIC&lt;/span&gt; &lt;span&gt;&amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34;&lt;/span&gt; &lt;span&gt;&amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;plist version&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;dict&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;...&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;about &lt;span&gt;80&lt;/span&gt; lines &lt;span&gt;of&lt;/span&gt; configuration&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;dict&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;plist&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Add the following XML to &lt;code&gt;Info&lt;span&gt;.&lt;/span&gt;plist&lt;/code&gt; immediately after the first &lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dict&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; tag in the file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;CFBundleURLTypes&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;array&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;dict&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;CFBundleTypeRole&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;None&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;CFBundleURLName&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;auth0&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;CFBundleURLSchemes&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;array&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;PRODUCT_BUNDLE_IDENTIFIER&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;array&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;dict&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;array&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The XML above defines a type of URL named &lt;code&gt;auth0&lt;/code&gt; and whose scheme is the app’s bundle identifier. In other words, the part of the URL that comes before &lt;code&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;/code&gt; isn’t &lt;code&gt;http&lt;/code&gt; or &lt;code&gt;https&lt;/code&gt;, but &lt;code&gt;com&lt;span&gt;.&lt;/span&gt;example&lt;span&gt;.&lt;/span&gt;login&lt;/code&gt; (or whatever value you entered for the app’s bundle identifier). This matches the values that you entered as the callback and logout URLs in the Auth0 dashboard.&lt;/p&gt;&lt;p&gt;Once you’ve added the additional XML, &lt;code&gt;Info&lt;span&gt;.&lt;/span&gt;plist&lt;/code&gt; should look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;xml version&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt; encoding&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;DOCTYPE&lt;/span&gt; plist &lt;span&gt;PUBLIC&lt;/span&gt; &lt;span&gt;&amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34;&lt;/span&gt; &lt;span&gt;&amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;plist version&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;dict&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;CFBundleURLTypes&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;array&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;dict&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;CFBundleTypeRole&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;None&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;CFBundleURLName&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;auth0&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;CFBundleURLSchemes&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;key&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;array&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;PRODUCT_BUNDLE_IDENTIFIER&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;array&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;dict&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;array&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;...&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;all the other configuration info&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;dict&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;plist&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Install-the--Auth0-swift--package&#34;&gt;Install the &lt;em&gt;Auth0.swift&lt;/em&gt; package&lt;/h3&gt;&lt;p&gt;The &lt;em&gt;Auth0.swift&lt;/em&gt; package is a collection of libraries that allow applications written in Swift to make use of Auth0”s authorization and authentication functionality. It contains these Swift libraries:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Auth0&lt;/code&gt;: A toolkit for using &lt;a href=&#34;https://auth0.com/docs/api&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0’s APIs&lt;/a&gt;, including the &lt;a href=&#34;https://auth0.com/docs/api/authentication&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Authentication API&lt;/a&gt;, which you’ll use to implement login and logout in the app.&lt;/li&gt;&lt;li&gt;&lt;code&gt;JWTDecode&lt;/code&gt;: A library for decoding &lt;a href=&#34;https://jwt.io/introduction&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;JWTs (JSON web tokens)&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;SimpleKeychain&lt;/code&gt;: A wrapper for the &lt;a href=&#34;https://developer.apple.com/documentation/security/keychain_services&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;iOS Keychain&lt;/a&gt; useful for securely storing small chunks of data, such as user credentials.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are three ways to install &lt;em&gt;Auth0.swift&lt;/em&gt;:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Swift Package Manager&lt;/a&gt;, Apple’s dependency manager&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://cocoapods.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Cocoapods&lt;/a&gt;, a long-standing third-party package manager first released in 2011 used in many projects&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Carthage&lt;/a&gt;, another third-party package manager&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;You’ll use Swift Package Manager in this tutorial since it’s built into Xcode and doesn’t require additional software.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://auth0.com/docs/quickstart/native/ios-swift/00-login&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;This page contains instructions for installing &lt;em&gt;Auth0.swift&lt;/em&gt; using Cocoapods and Carthage.&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;🛠 Open the &lt;strong&gt;File&lt;/strong&gt; menu, and select &lt;strong&gt;Add Packages...&lt;/strong&gt;. This window will appear:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5eWAWyzRrDJ4MiHxZU27vB/fc258e453e5fb78c180639f0af069419/install_auth0_package_1.png&#34; alt=&#34;Xcode screenshot: The “Add Packages” window.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Enter this URL into the window’s search field:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;This URL points to the *Auth0.swift* package repository.&#xA;Xcode will search online and display any packages it finds at the URL.&#xA;&#xA;🛠 Select the **Auth0.swift** package when it appears in the list and click **Add Package**:&#xA;&#xA;![Xcode screenshot: Select “Auth0.swift”, then click “Add Package”.](https://images.ctfassets.net/23aumh6u8s0i/5LaFAbYZsPaPHxVJf8SW6J/61b5a70b5316f5e72ca8f8c0306bc177/install_auth0_package_2.png)&#xA;&#xA;🛠 You’ll be asked to confirm that you want to add the *Auth0.swift* package. Click **Add Package** to reassure Xcode that yes, you want *Auth0.swift*:&#xA;&#xA;![Xcode screenshot: Confirming the installation of the Auth0 package.](https://images.ctfassets.net/23aumh6u8s0i/15ix1wqGd0rOcSPlRqaURz/9dfd040fe82c97a15650bfb4a06cdf9c/install_auth0_package_3.png)&#xA;&#xA;When *Auth0.swift* finishes installing, its package will appear in the list under the **Package Dependencies** tab of the **iOS Auth** project screen. You’ll see *Auth0.swift’s* libraries listed in the Project Explorer pane: &#xA;&#xA;![Xcode screenshot: The “Package Dependencies” tab of the “iOS Auth” project screen.](https://images.ctfassets.net/23aumh6u8s0i/6SU2YRslnRnIBnwGOVxoAq/aa044e9219a2e9c829523f86a59f62e3/install_auth0_package_4.png)&#xA;&#xA;You’ve done all the setup for connecting Auth0 to the app and the app to Auth0. It’s time to start coding!&#xA;&#xA;&#xA;## Implement Login&#xA;&#xA;The first feature you’ll implement is login. Once implemented, the user will be able to perform the following steps in the order given:&#xA;&#xA;1. The user launches the app. The app displays a greeting message as its title, an enabled **Log In** button, and a disabled **Log Out** button.&#xA;2. The user taps the **Log In** button, taking them to Auth0’s web-based Universal Login screen, which appears in a dedicated browser window.&#xA;3. If the user enters a valid username/password combination, they are logged in, which means:&#xA;4. The app receives a `Credentials` object from Auth0’s authorization server. This object’s properties include the user’s [ID token](https://auth0.com/docs/security/tokens/id-tokens) and [access token](https://auth0.com/docs/security/tokens/access-tokens). This app will use the access token to retrieve more data about the user.&#xA;5. The user will be returned to the app, which displays “You’re logged in” as its title, a disabled **Log In** button, an enabled **Log Out** button, and the previously-hidden **User Info** and **User Metadata** areas of the screen.&#xA;&#xA;&#xA;This is a simple single-screen app, so you’ll do all your coding in the `ViewController` class, located in the file named `ViewController.swift`.&#xA;&#xA;🛠 Open the view controller class by clicking on **ViewController** in the Project Explorer:&#xA;&#xA;![Xcode screenshot: Opening the VieController file.](https://images.ctfassets.net/23aumh6u8s0i/66VfmkMOJUhW8vdDw0JOS1/1d3e28c446cf1971305560da7ab5409d/open_viewcontroller.png)&#xA;&#xA;&#xA;### Import the Auth0 library&#xA;&#xA;🛠 You’ll be writing code that uses functionality provided by the `Auth0` library. Import it by adding the following after the `import UIKit` statement near the start of the file:&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;// ViewController.swift&lt;/p&gt;&lt;p&gt;import Auth0&#xA;```&lt;/p&gt;&lt;h3 id=&#34;Add-properties-to--ViewController-&#34;&gt;Add properties to &lt;code&gt;ViewController&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;Properties&lt;/code&gt; section of the &lt;code&gt;ViewController&lt;/code&gt; class is indicated by this set of comments:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// MARK: Properties&lt;/span&gt;&#xA;&lt;span&gt;// ================&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It contains these subsections:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;code&gt;On&lt;span&gt;-&lt;/span&gt;screen controls&lt;/code&gt;: These variables are references to the user elements on the app’s single screen. To save time, I’ve already declared these variables and connected them to their matching UI elements in the view.&lt;/li&gt;&lt;li&gt;&lt;code&gt;App and user status&lt;/code&gt;: This empty subsection will contain variables to keep track of the app’s and user’s state.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Auth0 data&lt;/code&gt;: This empty subsection will contain variables to store data received from Auth0’s authentication server — credentials, user information, and user metadata.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;🛠 Update the &lt;code&gt;App status&lt;/code&gt; and &lt;code&gt;Auth0 data&lt;/code&gt; subsections with the following code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// App and user status&lt;/span&gt;&#xA;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; appJustLaunched &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; userIsAuthenticated &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&#xA;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; userIsNewlyAuthenticated &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// Auth0 data&lt;/span&gt;&#xA;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; cachedCredentials&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Credentials&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&#xA;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; cachedUserInfo&lt;span&gt;:&lt;/span&gt; &lt;span&gt;UserInfo&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&#xA;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; cachedUserMetadata&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;String&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;Any&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&#xA;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; cachedAppMetadata&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;String&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;Any&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here’s an overview of the properties you just added to &lt;code&gt;ViewController&lt;/code&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;code&gt;App status&lt;/code&gt; properties:&#xA;&lt;ul&gt;&lt;li&gt;&lt;code&gt;appJustLaunched&lt;/code&gt;: This property will be &lt;code&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt; only immediately after the app is launched. We’ll use its value to determine the contents of &lt;code&gt;titleLabel&lt;/code&gt;, which should display a greeting at the start, but the user’s logged in/logged out status afterward.&lt;/li&gt;&lt;li&gt;&lt;code&gt;userIsAuthenticated&lt;/code&gt;: This property will be &lt;code&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt; if the user is logged in and &lt;code&gt;&lt;span&gt;false&lt;/span&gt;&lt;/code&gt; otherwise.&lt;/li&gt;&lt;li&gt;&lt;code&gt;userIsNewlyAuthenticated&lt;/code&gt;: This property will be &lt;code&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt; only immediately after the user has logged in and will be set to &lt;code&gt;&lt;span&gt;false&lt;/span&gt;&lt;/code&gt; shortly afterward. When the user is newly authenticated, the app checks the user’s app metadata to see if its &lt;code&gt;make_announcement&lt;/code&gt; property is &lt;code&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt;. If this is the case, the app will display an alert.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The &lt;code&gt;Auth0 data&lt;/code&gt; properties:&#xA;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;cachedCredentials&lt;/code&gt;: Stores the &lt;code&gt;Credentials&lt;/code&gt; object that the app gets from Auth0, which contains authentication and authorization information such as the user’s ID token and access token.&lt;/li&gt;&lt;li&gt;&lt;code&gt;cachedUserInfo&lt;/code&gt;: Stores the &lt;code&gt;UserInfo&lt;/code&gt; object that the app gets from Auth0, which contains basic identity information about the user, including their name and email address.&lt;/li&gt;&lt;li&gt;&lt;code&gt;cachedUserMetadata&lt;/code&gt;: Stores the &lt;code&gt;user_metadata&lt;/code&gt; information that the app gets from Auth0. This is a &lt;code&gt;&lt;span&gt;[&lt;/span&gt;String&lt;span&gt;:&lt;/span&gt; Any&lt;span&gt;]&lt;/span&gt;&lt;/code&gt; dictionary containing values about the user’s preferences that the user &lt;em&gt;can&lt;/em&gt; edit because they &lt;em&gt;do not&lt;/em&gt; affect the core functionality available to the user. The app can both read &lt;em&gt;and&lt;/em&gt; update user metadata. We’ll take a closer look at user metadata when we add the functionality to edit and retrieve the user’s favorite color.&lt;/li&gt;&lt;li&gt;&lt;code&gt;cachedAppMetadata&lt;/code&gt;: Stores the &lt;code&gt;app_metadata&lt;/code&gt; information that the app gets from Auth0. This is a &lt;code&gt;&lt;span&gt;[&lt;/span&gt;String&lt;span&gt;:&lt;/span&gt; Any&lt;span&gt;]&lt;/span&gt;&lt;/code&gt; dictionary containing values about the user’s status or privileges that the user &lt;em&gt;cannot&lt;/em&gt; edit because they &lt;em&gt;do&lt;/em&gt; affect the core functionality available to the user. The app can read app metadata but &lt;em&gt;cannot&lt;/em&gt; update it. We’ll take a closer look at app metadata when we add the functionality to display an announcement when the user logs in and a specific condition is met.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Add-the--login----method&#34;&gt;Add the &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method&lt;/h3&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Let’s write the first method for the login process: &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;. It will be calling the Auth0 authentication server and take the appropriate actions for both a successful login and a failed one. We’ll implement it a little bit at a time.&lt;/p&gt;&lt;h4 id=&#34;Skip-the-login-process-if--Auth0-plist--is-missing&#34;&gt;Skip the login process if &lt;em&gt;Auth0.plist&lt;/em&gt; is missing&lt;/h4&gt;&lt;p&gt;Let’s start the function with a test to see if the app contains &lt;code&gt;Auth0&lt;span&gt;.&lt;/span&gt;plist&lt;/code&gt;, the property list with the domain and client ID, and skips the login process if it isn’t there:&lt;/p&gt;&lt;p&gt;🛠 Add a new method, &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, to the &lt;code&gt;Login&lt;span&gt;,&lt;/span&gt; logout&lt;span&gt;,&lt;/span&gt; and user information&lt;/code&gt; section. It should look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// MARK: Login, logout, and user information&lt;/span&gt;&#xA;&lt;span&gt;// =========================================&lt;/span&gt;&#xA;&#xA;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;guard&lt;/span&gt;&#xA;    &lt;span&gt;let&lt;/span&gt; clientInfo &lt;span&gt;=&lt;/span&gt; &lt;span&gt;plistValues&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;bundle&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Bundle&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;main&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;guard&lt;/code&gt; statement ensures that the app has property lists before starting the login process. Property lists are the preferred place to store configuration data in iOS apps, and the method that starts the authentication process requires the tenant’s domain and the app’s client ID to be stored in a property list.&lt;/p&gt;&lt;h4 id=&#34;Authenticate-the-user&#34;&gt;Authenticate the user&lt;/h4&gt;&lt;p&gt;Now that you have the tenant’s domain authenticate the user using Universal Login.&lt;/p&gt;&lt;p&gt;🛠 Update &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// This first part is the code you’ve already added:&lt;/span&gt;&#xA;&#xA;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;guard&lt;/span&gt;&#xA;    &lt;span&gt;let&lt;/span&gt; clientInfo &lt;span&gt;=&lt;/span&gt; &lt;span&gt;plistValues&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;bundle&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Bundle&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;main&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&#xA;  &lt;span&gt;// This second part is new code:&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;Auth0&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;webAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;openid profile email read:current_user update:current_user_metadata&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;audience&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;https://&lt;span&gt;&lt;span&gt;\(&lt;/span&gt;clientInfo&lt;span&gt;.&lt;/span&gt;domain&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;/api/v2/&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;start &lt;span&gt;{&lt;/span&gt; result &lt;span&gt;in&lt;/span&gt;&#xA;        &#xA;      &lt;span&gt;switch&lt;/span&gt; result &lt;span&gt;{&lt;/span&gt;&#xA;              &#xA;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;span&gt;failure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;let&lt;/span&gt; error&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;          &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Error: Couldn’t retrieve user credentials.\n&lt;span&gt;&lt;span&gt;\(&lt;/span&gt;error&lt;span&gt;.&lt;/span&gt;localizedDescription&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &#xA;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;let&lt;/span&gt; credentials&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;          &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;cachedCredentials &lt;span&gt;=&lt;/span&gt; credentials&#xA;          &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;userIsAuthenticated &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;          &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;userIsNewlyAuthenticated &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;          &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;printTokens&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &#xA;          &lt;span&gt;// TODO: Get the user’s profile information&lt;/span&gt;&#xA;        &#xA;          &lt;span&gt;DispatchQueue&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;main&lt;span&gt;.&lt;/span&gt;async &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;updateTitle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;updateButtonsAndStack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;}&lt;/span&gt;&#xA;          &#xA;      &lt;span&gt;}&lt;/span&gt; &lt;span&gt;// switch&lt;/span&gt;&#xA;      &#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;// start()&lt;/span&gt;&#xA;    &#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;After you enter the code above, Xcode will very quickly show error messages informing you that &lt;code&gt;ViewCredentials&lt;/code&gt; doesn’t have methods named &lt;code&gt;&lt;span&gt;printTokens&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;updateTitle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, or &lt;code&gt;&lt;span&gt;updateButtonsAndStack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;. Don’t worry; you’ll implement them soon.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Although this method is formatted to span several lines, it’s just a single line of code. This line calls a chain of the &lt;code&gt;Auth0&lt;/code&gt; class’ methods starting with &lt;code&gt;&lt;span&gt;webAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;. If you ignore all the comments and parameters, the chain of methods looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;Auth0&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;webAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;audience&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is the &lt;a href=&#34;https://www.swiftbysundell.com/articles/using-the-builder-pattern-in-swift/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Builder design pattern&lt;/a&gt; in action. From &lt;code&gt;&lt;span&gt;webAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span&gt;audience&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, each method in the chain takes an argument that provides additional information about the login, using that information to create a &lt;code&gt;WebAuth&lt;/code&gt; object that it passes to the next method in the chain. &lt;/p&gt;&lt;p&gt;The final method in the chain, &lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, takes the resulting &lt;code&gt;WebAuth&lt;/code&gt; object as its argument and uses it to display the login page and define what should happen when the login succeeds and when it fails.&lt;/p&gt;&lt;p&gt;Let’s take a look at what each of the methods in the chain does.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;webAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; starts the web-based authentication process. It expects to find key-value pairs named &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;clientid&lt;/code&gt; in a property list.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; lists the names of &lt;em&gt;scopes&lt;/em&gt; which the app will request. Scopes define the specific actions that an application can be allowed to do on a user&amp;#39;s behalf. In response to these requests for scopes, Auth0 will return &lt;em&gt;claims&lt;/em&gt;, which are assertions that an entity has some attribute. We request these scopes in order to get claims for attributes that provide information about the user, such as their various names, email address, and additional metadata.&lt;/p&gt;&lt;p&gt;In the code you just added to &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, the &lt;code&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method requests the following scopes from Auth0:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;openid&lt;/code&gt;: Required for the app to use OpenID Connect (OIDC) to authenticate the user. This is the only scope required in &lt;code&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;’s argument; all other scopes are optional.&lt;/li&gt;&lt;li&gt;&lt;code&gt;profile&lt;/code&gt;: Information stored in the user’s profile. The profile stores a limited set of information — the user’s various names (full name, family name, given name, middle name, nickname), the URL for the user’s picture, and when the user profile was last updated.&lt;/li&gt;&lt;li&gt;&lt;code&gt;email&lt;/code&gt;: Information about the user’s email, namely their email address and whether the email address was verified.&lt;/li&gt;&lt;li&gt;&lt;code&gt;read&lt;span&gt;:&lt;/span&gt;current_user&lt;/code&gt;: Read-only access to the user’s profile.&lt;/li&gt;&lt;li&gt;&lt;code&gt;update&lt;span&gt;:&lt;/span&gt;current_user_metadata&lt;/code&gt;: Read and write access to the user’s metadata. This allows the app to get and set the favorite color value in the user’s metadata.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;audience&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; specifies the API that the app will use: the Auth0 Management API, which we’ll use to get information about the user.&lt;/p&gt;&lt;p&gt;Finally, &lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; takes the &lt;code&gt;WebAuth&lt;/code&gt; object constructed by all the previous methods in the chain and opens the browser window to display the login page. It has a single parameter, a closure that takes an argument containing one of two possible values: &lt;code&gt;&lt;span&gt;.&lt;/span&gt;failure&lt;/code&gt; and &lt;code&gt;&lt;span&gt;.&lt;/span&gt;success&lt;/code&gt;.&lt;/p&gt;&lt;h4 id=&#34;Handle-the-login-outcomes&#34;&gt;Handle the login outcomes&lt;/h4&gt;&lt;p&gt;Let’s take a closer look at the &lt;code&gt;&lt;span&gt;switch&lt;/span&gt;&lt;/code&gt; statement in &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, which handles the two possible outcomes of the login process:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;switch&lt;/span&gt; result &lt;span&gt;{&lt;/span&gt;&#xA;      &#xA;  &lt;span&gt;case&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;span&gt;failure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;let&lt;/span&gt; error&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Error: Couldn’t retrieve user credentials.\n&lt;span&gt;&lt;span&gt;\(&lt;/span&gt;error&lt;span&gt;.&lt;/span&gt;localizedDescription&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &#xA;  &lt;span&gt;case&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;let&lt;/span&gt; credentials&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;cachedCredentials &lt;span&gt;=&lt;/span&gt; credentials&#xA;    &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;userIsAuthenticated &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;    &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;userIsNewlyAuthenticated &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;    &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;printTokens&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getUserInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;DispatchQueue&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;main&lt;span&gt;.&lt;/span&gt;async &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;updateTitle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;updateButtonsAndStack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;// switch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;&lt;span&gt;switch&lt;/span&gt;&lt;/code&gt; statement does the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If the login fails, the app prints an error message to the console.&lt;/li&gt;&lt;li&gt;If the login succeeds, the app stores the credentials that it received from the server, sets the &lt;code&gt;self&lt;span&gt;.&lt;/span&gt;userIsAuthenticated&lt;/code&gt; and &lt;code&gt;self&lt;span&gt;.&lt;/span&gt;userIsNewlyAuthenticated&lt;/code&gt; properties to &lt;code&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt;, and updates the user interface.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Since this code is inside a closure, I put the calls to the UI methods — &lt;code&gt;&lt;span&gt;updateTitle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;updateButtonsAndStack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; — inside a &lt;code&gt;Dispatch&lt;span&gt;.&lt;/span&gt;main&lt;span&gt;.&lt;/span&gt;async&lt;/code&gt; block. This ensures that they ensure they execute in the main thread instead of the closure’s thread.&lt;/p&gt;&lt;p&gt;With a successful login, the app receives a &lt;code&gt;Credentials&lt;/code&gt; object. This object’s properties hold information about the user’s authentication, including the access token, which you’ll need to retrieve the user’s profile information and metadata.&lt;/p&gt;&lt;h3 id=&#34;Add-a-token-debugger&#34;&gt;Add a token debugger&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;&lt;span&gt;.&lt;/span&gt;success&lt;/code&gt; case of &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;’s &lt;code&gt;&lt;span&gt;switch&lt;/span&gt;&lt;/code&gt; statement makes a call to a method named &lt;code&gt;&lt;span&gt;printTokens&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;. It’s a debugging tool that prints the values of the ID token and access token to the Xcode console.&lt;/p&gt;&lt;p&gt;🛠 Add the &lt;code&gt;&lt;span&gt;printTokens&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; function, shown below, just after the &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;printTokens&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; credentials &lt;span&gt;=&lt;/span&gt; cachedCredentials &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;\nTOKENS\n======&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;ID token: &lt;span&gt;&lt;span&gt;\(&lt;/span&gt;credentials&lt;span&gt;.&lt;/span&gt;idToken &lt;span&gt;?&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;&amp;#34;[No ID token found.]&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Access token: &lt;span&gt;&lt;span&gt;\(&lt;/span&gt;credentials&lt;span&gt;.&lt;/span&gt;accessToken &lt;span&gt;?&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;&amp;#34;[No access token found.]&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🚨&lt;strong&gt;Important notice:&lt;/strong&gt;🚨 &lt;code&gt;&lt;span&gt;printTokens&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; is a useful function for debugging while you’re developing the app. You should remove it — along with any &lt;code&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; statements, which might give away sensitive information — when you move the app to production!&lt;/p&gt;&lt;h3 id=&#34;Update-the-user-interface&#34;&gt;Update the user interface&lt;/h3&gt;&lt;p&gt;Now that you’ve implemented the underlying login code, it’s time to take care of the user interface. The first step is to initialize the user interface when the app launches. The &lt;code&gt;&lt;span&gt;viewDidLoad&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method is the place to do this.&lt;/p&gt;&lt;p&gt;🛠 Update the &lt;code&gt;&lt;span&gt;viewDidLoad&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method, located in the &lt;code&gt;View events&lt;/code&gt; section so that it looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// MARK: View events&lt;/span&gt;&#xA;&lt;span&gt;// =================&lt;/span&gt;&#xA;&#xA;&lt;span&gt;override&lt;/span&gt; &lt;span&gt;func&lt;/span&gt; &lt;span&gt;viewDidLoad&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;viewDidLoad&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;updateTitle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  userInfoMetadataStack&lt;span&gt;.&lt;/span&gt;isHidden &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;  loginButton&lt;span&gt;.&lt;/span&gt;isEnabled &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;  logoutButton&lt;span&gt;.&lt;/span&gt;isEnabled &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next step is to make the &lt;strong&gt;Log In&lt;/strong&gt; button call the &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method — but only if the user isn’t already logged in.&lt;/p&gt;&lt;p&gt;🛠 Update &lt;code&gt;&lt;span&gt;loginButtonPressed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, located in the &lt;code&gt;Actions&lt;/code&gt; section, to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// MARK: Actions&lt;/span&gt;&#xA;&lt;span&gt;// =============&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@IBAction&lt;/span&gt; &lt;span&gt;func&lt;/span&gt; &lt;span&gt;loginButtonPressed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_&lt;/span&gt; sender&lt;span&gt;:&lt;/span&gt; &lt;span&gt;UIButton&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;userIsAuthenticated &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, the app needs methods to update the user interface based on the login status. These are the unimplemented &lt;code&gt;&lt;span&gt;updateTitle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;updateButtonsAndStack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; methods referred to in the &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;🛠 Add &lt;code&gt;&lt;span&gt;updateTitle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;updateButtonsAndStack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; to the &lt;code&gt;&lt;span&gt;UI&lt;/span&gt; updaters&lt;/code&gt; section so that it looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// MARK: UI updaters&lt;/span&gt;&#xA;&lt;span&gt;// =================&lt;/span&gt;&#xA;&#xA;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;updateTitle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; appJustLaunched &lt;span&gt;{&lt;/span&gt;&#xA;    titleLabel&lt;span&gt;.&lt;/span&gt;text &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Welcome to the app!&amp;#34;&lt;/span&gt;&#xA;    appJustLaunched &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; userIsAuthenticated &lt;span&gt;{&lt;/span&gt;&#xA;      titleLabel&lt;span&gt;.&lt;/span&gt;text &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;You’re logged in.&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      titleLabel&lt;span&gt;.&lt;/span&gt;text &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;You’re logged out.&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;updateButtonsAndStack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  loginButton&lt;span&gt;.&lt;/span&gt;isEnabled &lt;span&gt;=&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;userIsAuthenticated&#xA;  logoutButton&lt;span&gt;.&lt;/span&gt;isEnabled &lt;span&gt;=&lt;/span&gt; userIsAuthenticated&#xA;  userInfoMetadataStack&lt;span&gt;.&lt;/span&gt;isHidden &lt;span&gt;=&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;userIsAuthenticated&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Run the app and log in. The first time you log in, the browser window that displayed the login page will display this “Authorize App” page:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/717Io9c578yxjNm28P1zw9/a0ae626a58498603ed87735a04471849/authorize_app.png&#34; alt=&#34;The “Authorize App” page.&#34;/&gt;&lt;/p&gt;&lt;p&gt;The page makes it clear to the user that the app is asking for permission to access the user’s profile information and metadata. &lt;/p&gt;&lt;p&gt;🛠 Tap the &lt;strong&gt;Accept&lt;/strong&gt; button to allow this access. Once you’ve accepted, this page will not appear again.&lt;/p&gt;&lt;p&gt;You’ll now be logged in, with the &lt;strong&gt;User Profile Info&lt;/strong&gt; and &lt;strong&gt;User Metadata&lt;/strong&gt; parts of the screen now visible.&lt;/p&gt;&lt;h2 id=&#34;Display-the-User-s-Name-and-Email-Address&#34;&gt;Display the User’s Name and Email Address&lt;/h2&gt;&lt;p&gt;When the user logs in successfully, the app receives a &lt;code&gt;Credentials&lt;/code&gt; object containing authentication and authorization credentials, including an &lt;a href=&#34;https://auth0.com/docs/security/tokens/access-tokens&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;access token&lt;/a&gt;. This token provides the app with the authorization for the scopes requested during the login process.&lt;/p&gt;&lt;p&gt;One of these scopes is &lt;code&gt;profile&lt;/code&gt;, which refers to the user information profile, a collection of basic information about the user. The application’s access token authorizes it to use this scope. This means that it can request the user&amp;#39;s profile from Auth0, which will provide it as a &lt;code&gt;UserInfo&lt;/code&gt; object. The app can then get the user’s name and email address from this object and display it onscreen. &lt;/p&gt;&lt;h3 id=&#34;Retrieve-the-user-information-profile&#34;&gt;Retrieve the user information profile&lt;/h3&gt;&lt;p&gt;We’ll do this in a method called &lt;code&gt;&lt;span&gt;getUserInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;🛠 Add the following after the &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;getUserInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// 1&lt;/span&gt;&#xA;  &lt;span&gt;guard&lt;/span&gt;&#xA;    &lt;span&gt;let&lt;/span&gt; accessToken &lt;span&gt;=&lt;/span&gt; cachedCredentials&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;accessToken&#xA;  &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// 2&lt;/span&gt;&#xA;  &lt;span&gt;Auth0&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;authentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;userInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;withAccessToken&lt;span&gt;:&lt;/span&gt; accessToken&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;// 3&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;start &lt;span&gt;{&lt;/span&gt; result &lt;span&gt;in&lt;/span&gt;&#xA;     &#xA;      &lt;span&gt;switch&lt;/span&gt; result &lt;span&gt;{&lt;/span&gt;&#xA;          &#xA;        &lt;span&gt;// 4&lt;/span&gt;&#xA;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;span&gt;failure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;let&lt;/span&gt; error&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;          &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Error: Couldn’t retrieve user info.\n&lt;span&gt;&lt;span&gt;\(&lt;/span&gt;error&lt;span&gt;.&lt;/span&gt;localizedDescription&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &#xA;        &lt;span&gt;// 5&lt;/span&gt;&#xA;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;let&lt;/span&gt; userInfo&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;          &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;cachedUserInfo &lt;span&gt;=&lt;/span&gt; userInfo&#xA;          &#xA;          &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &#xA;          &lt;span&gt;DispatchQueue&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;main&lt;span&gt;.&lt;/span&gt;async &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;updateNameAndEmailUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;}&lt;/span&gt;&#xA;          &#xA;      &lt;span&gt;}&lt;/span&gt; &lt;span&gt;// switch&lt;/span&gt;&#xA;          &#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;// start()&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here’s what’s happening at each of the numbered comments in the code above:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;This &lt;code&gt;guard&lt;/code&gt; statement allows the function to continue executing only if the app has retrieved a credentials object from Auth0 and that credentials object contains an access token.&lt;/li&gt;&lt;li&gt;This is the Builder design pattern again, this time building an &lt;code&gt;Authentication&lt;/code&gt; object which is then used to request the user’s profile information. Once again, we pass the resulting object to a method named &lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; takes the &lt;code&gt;Authentication&lt;/code&gt; object constructed by all the previous methods in the chain and makes the request for the user profile information. This method has a single parameter — a closure that takes an argument containing one of two possible values: &lt;code&gt;&lt;span&gt;.&lt;/span&gt;failure&lt;/code&gt; and &lt;code&gt;&lt;span&gt;.&lt;/span&gt;success&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;If the attempt to retrieve the user profile information fails, the app prints an error message to the console.&lt;/li&gt;&lt;li&gt;If the attempt succeeds, the app stores the user profile information that it received and uses it to update the user interface with the user’s name and email address. Since this code is inside a closure, I put the calls to the UI method inside a &lt;code&gt;Dispatch&lt;span&gt;.&lt;/span&gt;main&lt;span&gt;.&lt;/span&gt;async&lt;/code&gt; block to ensure they execute in the main thread.&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;Update-the-user-interface&#34;&gt;Update the user interface&lt;/h3&gt;&lt;p&gt;Now that we have the user information profile let’s use it to update the user interface.&lt;/p&gt;&lt;p&gt;🛠 Add this method into the &lt;code&gt;&lt;span&gt;UI&lt;/span&gt; updaters&lt;/code&gt; section of &lt;code&gt;View Controller&lt;/code&gt;, just after the &lt;code&gt;&lt;span&gt;updateButtonsAndStack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;updateNameAndEmailUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  userNameLabel&lt;span&gt;.&lt;/span&gt;text &lt;span&gt;=&lt;/span&gt; cachedUserInfo&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name &lt;span&gt;?&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;&amp;#34;[Name unknown]&amp;#34;&lt;/span&gt;&#xA;  userEmailLabel&lt;span&gt;.&lt;/span&gt;text &lt;span&gt;=&lt;/span&gt; cachedUserInfo&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;email &lt;span&gt;?&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;&amp;#34;[Email unknown]&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Update--login---&#34;&gt;Update &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Now that the app has methods to retrieve the user profile information and update the display based on its contents, we need to update &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; to call on them.&lt;/p&gt;&lt;p&gt;🛠 Find the &lt;code&gt;&lt;span&gt;// TODO: Get the user’s profile information&lt;/span&gt;&lt;/code&gt; comment inside the &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method and replace it with this line:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getUserInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Run the app. It will now display the user’s name and email address.&lt;/p&gt;&lt;p&gt;The user profile information contained within the &lt;code&gt;UserProfile&lt;/code&gt; object contains only information that applies to generic user accounts. It’s centered around who the user is and how to contact them, with fields for names, photo, profile URL, real-world and email addresses, phone number, and so on.&lt;/p&gt;&lt;p&gt;You’ll probably want to store more than just this basic information about each user. Your application may need to store the user’s preferred application settings, record their role or rank, or track if they have performed certain required actions. Users might want to add or edit information about themselves that gets shared with other app users or customize their experiences.  &lt;/p&gt;&lt;p&gt;You could put this additional information in a storage system such as a database, but you also have the option of using the two key-value data structures that come with every Auth0 user account:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;strong&gt;User metadata:&lt;/strong&gt; This is for storing user-related attributes that don’t affect the app’s core functionality for the user. It’s typically the sort of data that the user would be able to edit. Examples of user metadata include things such as their preferences, a bio, their social networking handles, or their favorite color.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;App metadata:&lt;/strong&gt; This is for storing user-related attributes that do affect the app’s core functionality for the user. It’s typically the sort of data that the user would not edit; the user might not even be aware that this information exists. The app can only read this information. Examples of app metadata include things such as the last screen the user was viewing during the previous session, the user’s high score, or a flag or value indicating that the user has or hasn’t performed a required action.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let’s write a method that retrieves both kinds of metadata from the user’s account and stores them in local variables.&lt;/p&gt;&lt;p&gt;🛠 Add the following after the &lt;code&gt;&lt;span&gt;getUserInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;getMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// 1&lt;/span&gt;&#xA;  &lt;span&gt;guard&lt;/span&gt;&#xA;    &lt;span&gt;let&lt;/span&gt; accessToken &lt;span&gt;=&lt;/span&gt; cachedCredentials&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;let&lt;/span&gt; userInfo &lt;span&gt;=&lt;/span&gt; cachedUserInfo&#xA;  &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;// 2&lt;/span&gt;&#xA;  &lt;span&gt;Auth0&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;:&lt;/span&gt; accessToken&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;userInfo&lt;span&gt;.&lt;/span&gt;sub&lt;span&gt;,&lt;/span&gt; fields&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;user_metadata&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;app_metadata&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; include&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;// 3&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;start &lt;span&gt;{&lt;/span&gt; result &lt;span&gt;in&lt;/span&gt;&#xA;      &#xA;      &lt;span&gt;switch&lt;/span&gt; result &lt;span&gt;{&lt;/span&gt;&#xA;      &#xA;        &lt;span&gt;// 4&lt;/span&gt;&#xA;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;span&gt;failure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;let&lt;/span&gt; error&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;          &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Error: Couldn’t retrieve metadata.\n&lt;span&gt;&lt;span&gt;\(&lt;/span&gt;error&lt;span&gt;.&lt;/span&gt;localizedDescription&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &#xA;        &lt;span&gt;// 5&lt;/span&gt;&#xA;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;let&lt;/span&gt; user&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;          &lt;span&gt;let&lt;/span&gt; userMetadata &lt;span&gt;=&lt;/span&gt; user&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;user_metadata&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Any&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;          &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;cachedUserMetadata &lt;span&gt;=&lt;/span&gt; userMetadata&#xA;        &#xA;          &lt;span&gt;let&lt;/span&gt; appMetadata &lt;span&gt;=&lt;/span&gt; user&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;app_metadata&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Any&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;          &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;cachedAppMetadata &lt;span&gt;=&lt;/span&gt; appMetadata&#xA;          &#xA;          &lt;span&gt;DispatchQueue&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;main&lt;span&gt;.&lt;/span&gt;async &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;// TODO: Update the UI based on ***USER*** metadata&lt;/span&gt;&#xA;            &#xA;            &lt;span&gt;// TODO: Update the UI based on ***APP*** metadata&lt;/span&gt;&#xA;&#xA;          &lt;span&gt;}&lt;/span&gt;&#xA;          &#xA;      &lt;span&gt;}&lt;/span&gt; &lt;span&gt;// switch&lt;/span&gt;&#xA;      &#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;// start()&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here’s what’s happening at each of the numbered comments in the code above. By this point in the exercise, you’re probably seeing a pattern in the way that the app sends a user-related request to Auth0 and handles the response:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;This &lt;code&gt;guard&lt;/code&gt; statement allows the function to continue executing only if two conditions are met:&#xA;&lt;ul&gt;&lt;li&gt;The app has retrieved a credentials object from Auth0, and that credentials object contains an access token.&lt;/li&gt;&lt;li&gt;The app has also retrieved a user profile information object from Auth0.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;This chain of methods does the following:&#xA;&lt;ul&gt;&lt;li&gt;The &lt;code&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method takes an access token — which comes from &lt;code&gt;cachedCredentials&lt;/code&gt; — and returns an object representing the current user.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method specifies which information about the user should be retrieved. It takes the identifier for the user (the &lt;code&gt;sub&lt;/code&gt; property of the user’s profile information object), an array containing the names of the user metadata and app metadata fields of the user object, and a boolean that specifies if the names of the fields should be included or excluded from the data that this method returns. It returns an object representing a request for information from Auth0.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; takes the request object constructed by the previous methods in the chain and makes the request for the user’s user metadata and app metadata. This method has a single parameter — a closure that takes an argument containing one of two possible values: &lt;code&gt;&lt;span&gt;.&lt;/span&gt;failure&lt;/code&gt; and &lt;code&gt;&lt;span&gt;.&lt;/span&gt;success&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;If the attempt to retrieve the metadata fails, the app prints an error message to the console.&lt;/li&gt;&lt;li&gt;If the attempt succeeds, the app stores a local copy of the user metadata in the &lt;code&gt;cachedUserMetadata&lt;/code&gt; property and a local copy of the app metadata in the &lt;code&gt;cachedAppMetadata&lt;/code&gt; property. The app will use the data in these properties to update the user interface, as indicated by the comment &lt;code&gt;&lt;span&gt;// TODO: Update the UI based on the metadata&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Now that the app has both the user and app metadata, it can do something with them. Let’s start with the user metadata.&lt;/p&gt;&lt;p&gt;I described the &lt;em&gt;user metadata&lt;/em&gt; as a place that stores user-related information that the user can edit. We’ll use it to store the name of the user’s favorite color.&lt;/p&gt;&lt;p&gt;Immediately after launching or when the user presses the &lt;strong&gt;Get favorite color&lt;/strong&gt; button, the app should try to retrieve the user metadata value for the key named &lt;code&gt;favorite_color&lt;/code&gt;. If such a value exists, the app fills the &lt;code&gt;favoriteColorTextField&lt;/code&gt; control with that value.&lt;/p&gt;&lt;p&gt;The user should be able to update their existing favorite color (or add their favorite color, if it hasn’t yet been defined) by entering its name into the &lt;code&gt;favoriteColorTextField&lt;/code&gt; control and pressing the &lt;strong&gt;Set favorite color&lt;/strong&gt; button. When this happens, the app updates the user metadata by setting the value for the key &lt;code&gt;favorite_color&lt;/code&gt; to the value contained in &lt;code&gt;favoriteColorTextField&lt;/code&gt;.&lt;/p&gt;&lt;h3 id=&#34;Update-the-user-s-favorite-color-in-their-user-metadata&#34;&gt;Update the user’s favorite color in their user metadata&lt;/h3&gt;&lt;p&gt;Let’s first create the method that takes the contents of &lt;code&gt;favoriteColorTextField&lt;/code&gt; and writes it to the user’s user metadata.&lt;/p&gt;&lt;p&gt;🛠 Add the following immediately after the &lt;code&gt;&lt;span&gt;getMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;updateFavoriteColor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// 1&lt;/span&gt;&#xA;  &lt;span&gt;guard&lt;/span&gt;&#xA;    &lt;span&gt;let&lt;/span&gt; accessToken &lt;span&gt;=&lt;/span&gt; cachedCredentials&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;let&lt;/span&gt; userInfo &lt;span&gt;=&lt;/span&gt; cachedUserInfo&#xA;  &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;// 2&lt;/span&gt;&#xA;  &lt;span&gt;let&lt;/span&gt; updatedFavoriteColor &lt;span&gt;=&lt;/span&gt; favoriteColorTextField&lt;span&gt;.&lt;/span&gt;text&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;trimmingCharacters&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;whitespacesAndNewlines&lt;span&gt;)&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;Auth0&lt;/span&gt;&#xA;    &lt;span&gt;// 3&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;:&lt;/span&gt; accessToken&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;patch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;userInfo&lt;span&gt;.&lt;/span&gt;sub&lt;span&gt;,&lt;/span&gt; userMetadata&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;favorite_color&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; updatedFavoriteColor &lt;span&gt;?&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;// 4&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;start &lt;span&gt;{&lt;/span&gt; result &lt;span&gt;in&lt;/span&gt;&#xA;      &#xA;      &lt;span&gt;switch&lt;/span&gt; result &lt;span&gt;{&lt;/span&gt;&#xA;        &#xA;        &lt;span&gt;// 5&lt;/span&gt;&#xA;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;span&gt;failure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;let&lt;/span&gt; error&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;          &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Error: Couldn’t update &amp;#39;favorite_color&amp;#39; in the user metadata.\n&lt;span&gt;&lt;span&gt;\(&lt;/span&gt;error&lt;span&gt;.&lt;/span&gt;localizedDescription&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &#xA;        &lt;span&gt;// 6&lt;/span&gt;&#xA;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;let&lt;/span&gt; updatedUserMetadata&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;          &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;cachedUserMetadata &lt;span&gt;=&lt;/span&gt; updatedUserMetadata&#xA;        &#xA;        &lt;span&gt;}&lt;/span&gt; &lt;span&gt;// switch&lt;/span&gt;&#xA;        &#xA;      &lt;span&gt;}&lt;/span&gt; &lt;span&gt;// start()&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This new method, &lt;code&gt;&lt;span&gt;updateFavoriteColor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; is different from the other methods in the app that call Auth0. Instead of &lt;em&gt;reading&lt;/em&gt; current information about the user &lt;em&gt;from&lt;/em&gt; Auth0, it &lt;em&gt;writes&lt;/em&gt; updated information about the user — the user’s favorite color — &lt;em&gt;to&lt;/em&gt; Auth0.&lt;/p&gt;&lt;p&gt;Here’s an explanation of each of the numbered comments in the code above.&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;This &lt;code&gt;guard&lt;/code&gt; statement allows the function to continue executing only if two conditions are met:&#xA;&lt;ul&gt;&lt;li&gt;The app has retrieved a credentials object from Auth0, and that credentials object contains an access token.&lt;/li&gt;&lt;li&gt;The app has also retrieved a user profile information object from Auth0.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Before storing the contents of &lt;code&gt;favoriteColorTextField&lt;/code&gt;, this line strips it of any leading or trailing whitespace characters.&lt;/li&gt;&lt;li&gt;This chain of methods does the following:&#xA;&lt;ul&gt;&lt;li&gt;The &lt;code&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method takes an access token — which comes from &lt;code&gt;cachedCredentials&lt;/code&gt; — and returns an object representing the current user.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;&lt;span&gt;patch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method specifies which user metadata should be updated. It takes the identifier for the user (the &lt;code&gt;sub&lt;/code&gt; property of the user’s profile information object) and a dictionary of key-value pairs representing the updated metadata. It returns an object representing a request to Auth0 to update user metadata.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; takes the request object constructed by the previous methods in the chain and makes the request to update the user metadata. This method has a single parameter — a closure that takes an argument containing one of two possible values: &lt;code&gt;&lt;span&gt;.&lt;/span&gt;failure&lt;/code&gt; and &lt;code&gt;&lt;span&gt;.&lt;/span&gt;success&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;If the attempt to update the metadata fails, the app prints an error message to the console.&lt;/li&gt;&lt;li&gt;If the attempt succeeds, the app stores a local copy of the newly-updated user metadata.&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;Enable-the-UI-elements-that-update-and-display-the-user-s-favorite-color&#34;&gt;Enable the UI elements that update and display the user’s favorite color&lt;/h3&gt;&lt;p&gt;Let’s connect the &lt;strong&gt;Get favorite color&lt;/strong&gt; and &lt;strong&gt;Set favorite color&lt;/strong&gt; buttons to the methods they call, then update &lt;code&gt;favoriteColorTextField&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;🛠 Update &lt;code&gt;&lt;span&gt;getFavoriteColorButtonPressed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;setFavoriteColorButtonPressed&lt;/code&gt;, located in the &lt;code&gt;Actions&lt;/code&gt; section, to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@IBAction&lt;/span&gt; &lt;span&gt;func&lt;/span&gt; &lt;span&gt;getFavoriteColorButtonPressed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_&lt;/span&gt; sender&lt;span&gt;:&lt;/span&gt; &lt;span&gt;UIButton&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;getMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@IBAction&lt;/span&gt; &lt;span&gt;func&lt;/span&gt; &lt;span&gt;setFavoriteColorButtonPressed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_&lt;/span&gt; sender&lt;span&gt;:&lt;/span&gt; &lt;span&gt;UIButton&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;updateFavoriteColor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Add the following to the end of the &lt;code&gt;&lt;span&gt;UI&lt;/span&gt; Updaters&lt;/code&gt; section, immediately after the &lt;code&gt;&lt;span&gt;updateNameAndEmailUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;updateFavoriteColorUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  favoriteColorTextField&lt;span&gt;.&lt;/span&gt;text &lt;span&gt;=&lt;/span&gt; cachedUserMetadata&lt;span&gt;?&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;favorite_color&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;?&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Replace the &lt;code&gt;&lt;span&gt;// TODO: Update the UI based on ***USER*** metadata&lt;/span&gt;&lt;/code&gt; comment inside &lt;code&gt;&lt;span&gt;getMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; so that the &lt;code&gt;DispatchQueue&lt;span&gt;.&lt;/span&gt;main&lt;span&gt;.&lt;/span&gt;async&lt;/code&gt; block looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;DispatchQueue&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;main&lt;span&gt;.&lt;/span&gt;async &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;updateFavoriteColorUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;              &#xA;  &lt;span&gt;// TODO: Update the UI based on ***APP*** metadata&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Run the app, enter a color into the text field, and tap the &lt;strong&gt;Set favorite color&lt;/strong&gt; button:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2z2EbmFH7uELgb74TQvySO/08405ebf53b9b5c29e8309d82f2147d2/set_favorite_color.png&#34; alt=&#34;Setting a favorite color in the app.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Let’s confirm that the user’s favorite color was stored in the user’s user metadata. You can do this by clearing the text field and then tapping the &lt;strong&gt;Get favorite color&lt;/strong&gt; button, but there’s a more convincing way.&lt;/p&gt;&lt;p&gt;🛠 Go to the Auth0 dashboard and look at the user by selecting &lt;strong&gt;User Management&lt;/strong&gt; in the left column menu, followed by &lt;strong&gt;Users&lt;/strong&gt;, and then selecting the user currently logged into the app. You will be on that user’s page. Scroll down to the &lt;strong&gt;Metadata&lt;/strong&gt; section of the page and look at the &lt;strong&gt;user_metadata&lt;/strong&gt; field. You’ll see that it contains a JSON dictionary with a single entry with the key &lt;code&gt;favorite_color&lt;/code&gt; and whatever value you entered for the favorite color:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6rgt59fGJmB614LLMm6hKp/773dd72abe887d7e444ab58d326d388a/user_metadata_1.png&#34; alt=&#34;The “user_metadata” section of the “User” page in the Auth0 dashboard.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 While still on the user’s page, change the value for &lt;code&gt;favorite_color&lt;/code&gt;, then click the &lt;strong&gt;Save&lt;/strong&gt; button to save the change. Make sure that the “Metadata saved successfully!” notification appears:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/76Ft4ciLUykKYY7lbbHQEU/d970d0f130c57d5ec420da5410a3e923/user_metadata_2.png&#34; alt=&#34;Editing the “favorite_color” value in the user’s “user_metadata” section.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Keep the “User” page of the Auth0 dashboard open — you’ll need it for the next step.&lt;/p&gt;&lt;p&gt;🛠 Go back to the app and tap the &lt;strong&gt;Get favorite color&lt;/strong&gt; button. The text field will show the new “favorite color” value:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/0HYVYfzKGPPeGjuWWt1QH/9d75979fe8ff7d00a3542ab44a51110e/get_favorite_color.png&#34; alt=&#34;Getting the favorite color in the app.&#34;/&gt; &lt;/p&gt;&lt;p&gt;I described the &lt;em&gt;app metadata&lt;/em&gt; as a place that stores user-related information that the user cannot edit; in fact, they might not even know it exists. The app can only read the user’s app metadata; they can’t write to it. Typically, a back-end application updates users’ app metadata.&lt;/p&gt;&lt;p&gt;This app will display an alert box with a short message at launch if the user’s app metadata contains a key named &lt;code&gt;make_announcement&lt;/code&gt; and if that key’s value is set to &lt;code&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;First, let’s build a method to check the user’s app metadata and display the alert box if the conditions are met.&lt;/p&gt;&lt;p&gt;🛠 Add the following to the end of the &lt;code&gt;&lt;span&gt;UI&lt;/span&gt; Updaters&lt;/code&gt; section, immediately after the &lt;code&gt;&lt;span&gt;updateFavoriteColorUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;showOptionalAnnouncement&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; makeAnnouncement &lt;span&gt;=&lt;/span&gt; cachedAppMetadata&lt;span&gt;?&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;make_announcement&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;Int&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; makeAnnouncement &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;let&lt;/span&gt; title &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Announcement&amp;#34;&lt;/span&gt;&#xA;      &lt;span&gt;let&lt;/span&gt; message &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;If you’re seeing this, it means that the ’make_announcement’ &amp;#34;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&#xA;                    &lt;span&gt;&amp;#34;flag in ’app_data’ is set to ’true’.&amp;#34;&lt;/span&gt;&#xA;      &lt;span&gt;let&lt;/span&gt; alert &lt;span&gt;=&lt;/span&gt; &lt;span&gt;UIAlertController&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        title&lt;span&gt;:&lt;/span&gt; title&lt;span&gt;,&lt;/span&gt; message&lt;span&gt;:&lt;/span&gt; message&lt;span&gt;,&lt;/span&gt; preferredStyle&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;alert&lt;span&gt;)&lt;/span&gt;&#xA;      alert&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;UIAlertAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;title&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;OK&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; style&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; handler&lt;span&gt;:&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;present&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;alert&lt;span&gt;,&lt;/span&gt; animated&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; completion&lt;span&gt;:&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Replace the &lt;code&gt;&lt;span&gt;// TODO: Update the UI based on ***APP*** metadata&lt;/span&gt;&lt;/code&gt; comment inside &lt;code&gt;&lt;span&gt;getMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; so that the &lt;code&gt;DispatchQueue&lt;span&gt;.&lt;/span&gt;main&lt;span&gt;.&lt;/span&gt;async&lt;/code&gt; block looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;DispatchQueue&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;main&lt;span&gt;.&lt;/span&gt;async &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;updateFavoriteColorUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;              &#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;userIsNewlyAuthenticated &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;showOptionalAnnouncement&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;userIsNewlyAuthenticated &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The app can now check the user’s app metadata for the presence of the &lt;code&gt;make_announcement&lt;/code&gt; key and its value.&lt;/p&gt;&lt;p&gt;🛠 Go back to the user’s “User” page in the Auth0 dashboard. Change the contents of the &lt;strong&gt;app_metadata&lt;/strong&gt; field in the  &lt;strong&gt;Metadata&lt;/strong&gt; section to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;make_announcement&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 When you have updated the app metadata, click the &lt;strong&gt;Save&lt;/strong&gt; button. Make sure that the “Metadata saved successfully!” notification appears:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5PDheiczfjTp4aKTyFbaiO/c5397e88c9bfcd20fb74d94a96461487/user_metadata_3.png&#34; alt=&#34;The “app_metadata” field of the “User” page, with the updated metadata.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Restart the app and log in. It will display the announcement:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/526FKdoM6Wc1ZRuDlHHNVW/3519a585c2f969d7ca44b4f026d521b9/announcement.png&#34; alt=&#34;The app, displaying the alert.&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Implement-Logout&#34;&gt;Implement Logout&lt;/h2&gt;&lt;p&gt;There’s only one thing left to do: implement logout!&lt;/p&gt;&lt;p&gt;🛠 Add this method to the end of the &lt;code&gt;Login&lt;span&gt;,&lt;/span&gt; logout&lt;span&gt;,&lt;/span&gt; and user information&lt;/code&gt; section, just after the &lt;code&gt;&lt;span&gt;updateFavoriteColor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;Auth0&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;webAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;clearSession&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;federated&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; result &lt;span&gt;in&lt;/span&gt;&#xA;      &#xA;      &lt;span&gt;if&lt;/span&gt; result &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Session cleared!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;userIsAuthenticated &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&#xA;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;cachedCredentials &lt;span&gt;=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&#xA;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;cachedUserInfo &lt;span&gt;=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&#xA;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;cachedUserMetadata &lt;span&gt;=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&#xA;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;cachedAppMetadata &lt;span&gt;=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&#xA;          &#xA;        &lt;span&gt;DispatchQueue&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;main&lt;span&gt;.&lt;/span&gt;async &lt;span&gt;{&lt;/span&gt;&#xA;          &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;updateTitle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;updateButtonsAndStack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Session NOT cleared -- time to start debugging.&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;      &#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;// clearSession()&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The call to &lt;code&gt;&lt;span&gt;webAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; should seem familiar. That’s because it’s the same method you used for the login process. &lt;/p&gt;&lt;p&gt;As with the &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method, &lt;code&gt;&lt;span&gt;webAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; returns a &lt;code&gt;WebAuth&lt;/code&gt; object. Unlike &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; uses WebAuth’s &lt;code&gt;&lt;span&gt;clearSession&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method, which logs the user out. &lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;clearSession&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;’s final parameter is a closure that takes a boolean argument. This argument is &lt;code&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt; if the user has successfully logged out. When this happens, we set the &lt;code&gt;userIsAuthenticated&lt;/code&gt; property to &lt;code&gt;&lt;span&gt;false&lt;/span&gt;&lt;/code&gt;, clear all the cached values received from Auth0, and update the user interface.&lt;/p&gt;&lt;p&gt;🛠 The final step is to connect the &lt;strong&gt;Log Out&lt;/strong&gt; button to the &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method. Update the &lt;code&gt;&lt;span&gt;logoutButtonPressed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method so that it looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@IBAction&lt;/span&gt; &lt;span&gt;func&lt;/span&gt; &lt;span&gt;logoutButtonPressed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_&lt;/span&gt; sender&lt;span&gt;:&lt;/span&gt; &lt;span&gt;UIButton&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; userIsAuthenticated &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Run the app. The &lt;strong&gt;Log Out&lt;/strong&gt; button should work now.&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;You’ve just built a simple iOS app that features basic username/password authentication — the ability to identify a known user. In addition to logging a user in and out, you can also:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Retrieve basic user information from their user profile,&lt;/li&gt;&lt;li&gt;read and update additional information from their user metadata, and&lt;/li&gt;&lt;li&gt;read application-specific information from the user’s app metadata.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In addition to the &lt;a href=&#34;https://assets.ctfassets.net/23aumh6u8s0i/6BGjYQpWYevjdABinJXDJ1/3fa4a7b68fa76e91e5ee1f6ffe347aa0/iOS_Auth__starter_.zip&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;.zip file of the starter project (225 KB),&lt;/a&gt; you can also download a &lt;a href=&#34;https://assets.ctfassets.net/23aumh6u8s0i/7LHFlrFkEpD1oGsYws3J1c/1d76aad17deeb00eb4670024c98095ee/iOS_Auth__complete_.zip&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;.zip file of the completed project (234 KB)&lt;/a&gt;. Just remember that the best way to understand how the app integrates with Auth0 is to start with the starter project and build it following the steps above!&lt;/p&gt;&lt;p&gt;You can also find the starter and completed projects in the &lt;a href=&#34;https://github.com/auth0-blog/get-started-ios-authentication-swift-uikit&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;get-started-ios-authentication-swift-uikit&lt;/em&gt; repository&lt;/a&gt; on the &lt;a href=&#34;https://github.com/auth0-blog&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Blog Samples GitHub account.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This is the first in a new series of articles on iOS development with Auth0. Future articles will cover an implementation of this app using SwiftUI, as well as deeper dives into authentication and authorization with iOS and Auth0 and alternatives to the standard username-and-password approach. Watch this space!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/get-started-ios-authentication-swift-uikit/" rel="alternate"></link>
    <link href="https://images.ctfassets.net/23aumh6u8s0i/YqpQgAITlTFcDGveY7oHU/473c913fff2a88d1124311f612b4f90d/hero_ios_auth0.png" rel="enclosure" type="image/png"></link>
    <summary type="html">A step-by-step tutorial on using Auth0 and Swift to implement login/logout and use user metadata in iOS apps.</summary>
  </entry>
  <entry>
    <title>Securing ASP.NET Minimal Web APIs with Auth0</title>
    <updated>2021-11-24T15:24:00Z</updated>
    <id>tag:auth0.com,2021-11-24:/blog/securing-aspnet-minimal-webapis-with-auth0/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; In this article, you will learn how to build minimal Web APIs with .NET 6 and add authorization with JWT access tokens coming from Auth0. The code for this article is available from &lt;a href=&#34;https://github.com/auth0-blog/minimalwebapi&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;The-Journey-to-Minimal-Web-APIs&#34;&gt;The Journey to Minimal Web APIs&lt;/h2&gt;&lt;p&gt;It has been a long journey since Microsoft released &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/wcf-web-http-programming-model&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;WCF REST Services&lt;/a&gt; around 2006 for developing REST services in the .NET framework. This framework did not last long because of the complexities inherited from the WCF programming model and the limited support for using many of the features available in HTTP.  It was fine for developing chatty RPC services on top of HTTP, but not more than that.&lt;/p&gt;&lt;p&gt;WCF REST Services was around for a few years until the ASP.NET team introduced ASP.NET Web APIs. This brand new framework resulted from a long collaboration between Microsoft and many experts in the industry.&lt;/p&gt;&lt;p&gt;They also moved away from the term REST, which implied the API implementation should stick to any of the levels in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Richardson_Maturity_Model&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Richarson&amp;#39;s Maturity Model&lt;/a&gt; and all the constraints described on it.&lt;/p&gt;&lt;p&gt;The ASP.NET Web APIs framework is still around and has gone through minor refactors over the years and a recent port to .NET Core. However, the ASP.NET team recently announced the availability of minimal Web APIs, a new way to develop and host Web APIs in .NET 6.&lt;/p&gt;&lt;p&gt;This article will discuss many of the improvements and simplifications introduced with minimal Web APIs and a practical example that shows how to implement a TODO list Web API integrated with Auth0 for authentication.&lt;/p&gt;&lt;h2 id=&#34;A-First-Glance-at-Minimal-Web-APIs&#34;&gt;A First Glance at Minimal Web APIs&lt;/h2&gt;&lt;p&gt;The best way to show you how a minimal Web API looks like is with code.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; app &lt;span&gt;=&lt;/span&gt; WebApplication&lt;span&gt;.&lt;/span&gt;&lt;span&gt;CreateBuilder&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;args&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapGet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That code is a good definition of what the term &amp;#34;minimal&amp;#34; implies. We only required three lines of code to get an API up and running.&lt;/p&gt;&lt;p&gt;The ASP.NET Team removed the friction around configuring APIs and only left the bare bones for running them. It is a top-down approach. They come configured with a basic set of features required to run and let you add more code and features on top as you need. &lt;/p&gt;&lt;h3 id=&#34;Where-is-the--Main--entry-point-&#34;&gt;Where is the &lt;code&gt;Main&lt;/code&gt; entry point?&lt;/h3&gt;&lt;p&gt;If you noticed, the &lt;code&gt;Program&lt;/code&gt; class and &lt;code&gt;Main&lt;/code&gt; entry point have gone. That change is part of the new language features introduced with C# 9: &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/program-structure/top-level-statements&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Top Level Statements&lt;/a&gt;.&#xA;Before C# 9, every console program required a namespace and a &lt;code&gt;Program&lt;/code&gt; class with a static &lt;code&gt;Main&lt;/code&gt; method used as the entry point.&#xA;Top Level Statements in C# 9 let you write shorter programs by skipping all those requirements.  You can start writing code for your &lt;code&gt;Main&lt;/code&gt; method, and the compiler will inject the rest of the code behind the scenes for you.&#xA;For the minimal Web API showed before, the resulting code would be equivalent to the following,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;APIs&lt;/span&gt; &#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyProgram&lt;/span&gt; &#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;params&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt; args&lt;span&gt;)&lt;/span&gt; &#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; app &lt;span&gt;=&lt;/span&gt; WebApplication&lt;span&gt;.&lt;/span&gt;&lt;span&gt;CreateBuilder&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;args&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapGet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;What-else-from-C--9-and-10-&#34;&gt;What else from C# 9 and 10?&lt;/h3&gt;&lt;p&gt;The good news is that Top Level Statements is not the only feature we could leverage in our minimal Web APIs. We also have &amp;#34;Records&amp;#34;, and &amp;#34;File- scoped namespaces&amp;#34;. Since we will use them later on, let&amp;#39;s discuss those a little more in detail.&lt;/p&gt;&lt;h4 id=&#34;Records&#34;&gt;Records&lt;/h4&gt;&lt;p&gt;A Record is a new reference type, similar to a class or struct but implements value-based equality. That means two different variables of the same record type are equal if the values on every field are the same. &#xA;You could accomplish the same thing in the past with a class by overriding the &lt;code&gt;Equals&lt;/code&gt; method, but that is no longer necessary with Records. In addition, Records don&amp;#39;t need property getters or setters or a constructor to be declared. &lt;/p&gt;&lt;p&gt;The following sample shows a record for a TODO item.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;record&lt;/span&gt; &lt;span&gt;TodoItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; description&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; completed&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; myTodo &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;TodoItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;buy milk&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Records are immutable by definition. That means you have to create a copy of a record&amp;#39;s instance when any of its properties needs to be changed. C# also offers a language expression for cloning a record and change properties on the way. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt;  myTodo &lt;span&gt;=&lt;/span&gt; &lt;span&gt;myTodo&lt;/span&gt; with &lt;span&gt;{&lt;/span&gt; completed &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code above creates a copy of our existing &lt;code&gt;TodoItem&lt;/code&gt; but sets the value for the &lt;code&gt;completed&lt;/code&gt; property to &lt;code&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;h4 id=&#34;File--scoped-namespaces&#34;&gt;File- scoped namespaces&lt;/h4&gt;&lt;p&gt;Previous versions of C# require you to enclose all your classes and types between &amp;#34;{}&amp;#34; if you wanted to make them part of a namespace.  From C# 10 and on, that is no longer a requirement. &#xA;You define a top namespace in a file, and all the types in that file will be part of it.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;MyNamespace&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;record&lt;/span&gt; &lt;span&gt;TodoItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; name&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; description&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the example above, the record &lt;code&gt;TodoItem&lt;/code&gt; will be part of the namespace &lt;code&gt;MyNamespace&lt;/code&gt;. We did not have to use any curly brace at all.&lt;/p&gt;&lt;h2 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;The ASP.NET minimal Web APIs require at least the .NET 6 SDK, which you can install from the &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;.NET download section&lt;/a&gt; of the Microsoft website.&lt;/p&gt;&lt;p&gt;You can also install &lt;a href=&#34;https://visualstudio.microsoft.com/vs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Visual Studio 2022&lt;/a&gt;, which supports minimal Web APIs and all the new .NET 6 features.&lt;/p&gt;&lt;h2 id=&#34;Creating-the-TODO-API-Project&#34;&gt;Creating the TODO API Project&lt;/h2&gt;&lt;p&gt;You can create the project from Visual Studio 2022 by using the &amp;#34;ASP.NET Core Web API&amp;#34; project template. Alternatively, you can use the .NET CLI by running the command &lt;code&gt;dotnet &lt;span&gt;new&lt;/span&gt;  &lt;span&gt;web&lt;/span&gt;&lt;/code&gt; in a terminal window.&lt;/p&gt;&lt;p&gt;This article will focus on Visual Studio only. From the &amp;#34;File&amp;#34; menu, select the option &amp;#34;New Project&amp;#34; and use the &amp;#34;ASP.NET Core Web API&amp;#34; template afterward. Pick any name for your Web API project, such as &lt;code&gt;MyTodoWebApi&lt;/code&gt;. Once Visual Studio finishes the project creation, we can start playing with it.&lt;/p&gt;&lt;h3 id=&#34;Implementing-the-repository&#34;&gt;Implementing the repository&lt;/h3&gt;&lt;p&gt;The first thing we will want to do in our API is abstract how we persist the items in the TODO list.  We will use the &lt;a href=&#34;https://martinfowler.com/eaaCatalog/repository.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Repository pattern&lt;/a&gt; for that purpose. &#xA;This pattern consists of an interface with all the available methods for persisting changes in the TODO list and one or more concrete implementations. For simplicity, the implementation for our sample will use a hash table in memory.&lt;/p&gt;&lt;p&gt;Add a new file &lt;code&gt;TodoItem&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; to the project and paste the following code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// TodoItem.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;MyTodoWebApi&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;record&lt;/span&gt; &lt;span&gt;TodoItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; description&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;/span&gt; completed&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;#39;s one of the beauties of the new Record types. We were able to define the representation of a TODO item with a single line of code.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s now focus on the repository implementation.&lt;/p&gt;&lt;p&gt;Add a new file &lt;code&gt;TodoRepository&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; to the project and paste the following code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;MyTodoWebApi&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;ITodoRepository&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;CreateAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; name&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;IEnumerable&lt;span&gt;&amp;lt;&lt;/span&gt;TodoItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;GetAllAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;TodoItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;Task&lt;/span&gt; &lt;span&gt;Delete&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;Task&lt;/span&gt; &lt;span&gt;Update&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; completed&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;TodoRepository&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;ITodoRepository&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;Dictionary&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; TodoItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; items &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Dictionary&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; TodoItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;CreateAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; description&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; id &lt;span&gt;=&lt;/span&gt; Guid&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NewGuid&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ToString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;N&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        items&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;TodoItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;,&lt;/span&gt; description&lt;span&gt;,&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;&lt;span&gt;FromResult&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Task&lt;/span&gt; &lt;span&gt;Delete&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; id&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        items&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Remove&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;CompletedTask&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;TodoItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; id&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;items&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ContainsKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &#xA;            &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;&lt;span&gt;FromResult&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;items&lt;span&gt;[&lt;/span&gt;id&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;FromResult&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;TodoItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;IEnumerable&lt;span&gt;&amp;lt;&lt;/span&gt;TodoItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;GetAllAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; values &lt;span&gt;=&lt;/span&gt; items&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;i &lt;span&gt;=&amp;gt;&lt;/span&gt; i&lt;span&gt;.&lt;/span&gt;Value&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;&lt;span&gt;FromResult&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;values&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Task&lt;/span&gt; &lt;span&gt;Update&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; completed&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;items&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ContainsKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            items&lt;span&gt;[&lt;/span&gt;id&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; items&lt;span&gt;[&lt;/span&gt;id&lt;span&gt;]&lt;/span&gt; with &lt;span&gt;{&lt;/span&gt; completed &lt;span&gt;=&lt;/span&gt; completed &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;CompletedTask&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We defined the abstraction &lt;code&gt;ITodoRepository&lt;/code&gt; and implementation &lt;code&gt;TodoRepository&lt;/code&gt; in the same file. This repository contains all the basic methods to support CRUD in our Web API. &lt;/p&gt;&lt;h3 id=&#34;Implementing-the-minimal-Web-API&#34;&gt;Implementing the minimal Web API&lt;/h3&gt;&lt;p&gt;The code for the host configuration and implementation of the API is in the &lt;code&gt;Program&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; file that Visual Studio created with the project.&lt;/p&gt;&lt;p&gt;We will start by injecting the repository implementation in the dependency injection container used by the API. Replace the content of that file with the code below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Program.cs&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;MyTodoWebApi&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Net&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; builder &lt;span&gt;=&lt;/span&gt; WebApplication&lt;span&gt;.&lt;/span&gt;&lt;span&gt;CreateBuilder&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;args&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;builder&lt;span&gt;.&lt;/span&gt;Services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;AddSingleton&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;ITodoRepository&lt;span&gt;,&lt;/span&gt; TodoRepository&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; app &lt;span&gt;=&lt;/span&gt; builder&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;Environment&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsDevelopment&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseDeveloperExceptionPage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The repository will be a singleton that persists all the items in memory.&lt;/p&gt;&lt;p&gt;We can now start implementing the different methods for our API. The first one will be for creating new items in a TODO list, and we can map it to the HTTP POST verb for the route &lt;code&gt;&lt;span&gt;/&lt;/span&gt;todo&lt;/code&gt;. Add the code below to the existing one in the &lt;code&gt;Program&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; file as it is described here:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Program.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;//...existing code&lt;/span&gt;&#xA;&#xA;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;Environment&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsDevelopment&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseDeveloperExceptionPage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// 👇 this is the new code&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapPost&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/todo&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;HttpRequest&lt;/span&gt; req&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;HttpResponse&lt;/span&gt; res&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;ITodoRepository&lt;/span&gt; repo&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;req&lt;span&gt;.&lt;/span&gt;&lt;span&gt;HasJsonContentType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;BadHttpRequestException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;only application/json supported&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;HttpStatusCode&lt;span&gt;.&lt;/span&gt;NotAcceptable&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; todo &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; req&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;ReadFromJsonAsync&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;TodoItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;todo &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;description&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;BadHttpRequestException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;description is required&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;HttpStatusCode&lt;span&gt;.&lt;/span&gt;BadRequest&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; id &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; repo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;CreateAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;description&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    res&lt;span&gt;.&lt;/span&gt;StatusCode &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;HttpStatusCode&lt;span&gt;.&lt;/span&gt;Created&lt;span&gt;;&lt;/span&gt;&#xA;    res&lt;span&gt;.&lt;/span&gt;Headers&lt;span&gt;.&lt;/span&gt;Location &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;/todo/&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;// 👆 this is the new code&lt;/span&gt;&#xA;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The implementation checks that the content type is &lt;code&gt;application&lt;span&gt;/&lt;/span&gt;json&lt;/code&gt; and deserializes the request body payload into a new instance of the &lt;code&gt;TodoItem&lt;/code&gt; record. We only use the &lt;code&gt;description&lt;/code&gt; property and ignore the rest. It later calls the repository with the new &lt;code&gt;TodoItem&lt;/code&gt; instance and returns the &lt;code&gt;&lt;span&gt;Created&lt;/span&gt;  &lt;span&gt;(&lt;/span&gt;&lt;span&gt;201&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; status code and location header. &lt;/p&gt;&lt;p&gt;For retrieving a single item or all the items in the TODO list, we will add two new methods mapped to the HTTP GET method and URLs &lt;code&gt;&lt;span&gt;/&lt;/span&gt;todo&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;/&lt;/span&gt;todo&lt;/code&gt;, respectively.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;You could potentially use the same method and declare the &lt;code&gt;id&lt;/code&gt; parameter as optional, but two different methods better demonstrate the purpose.&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Program.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code&lt;/span&gt;&#xA;&#xA;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;Environment&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsDevelopment&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseDeveloperExceptionPage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// 👇 this is the new code&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapGet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/todo&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;ITodoRepository&lt;/span&gt; repo&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; todos &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; repo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;GetAllAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; todos&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapGet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/todo/{id}&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ITodoRepository&lt;/span&gt; repo&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;BadHttpRequestException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;id is required&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;HttpStatusCode&lt;span&gt;.&lt;/span&gt;BadRequest&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; todo &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; repo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;todo &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;BadHttpRequestException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;item not found&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;HttpStatusCode&lt;span&gt;.&lt;/span&gt;NotFound&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; todo&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;// 👆 this is the new code&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For changing the status of an item in the list, we will use the HTTP PUT method. Copy the following code right after the other methods for getting an item:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapPut&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/todo/{id}&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt; &lt;span&gt;HttpRequest&lt;/span&gt; req&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ITodoRepository&lt;/span&gt; repo&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;req&lt;span&gt;.&lt;/span&gt;&lt;span&gt;HasJsonContentType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;BadHttpRequestException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;only application/json supported&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;HttpStatusCode&lt;span&gt;.&lt;/span&gt;NotAcceptable&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; todo &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; req&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;ReadFromJsonAsync&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;TodoItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;todo &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;completed&lt;span&gt;.&lt;/span&gt;HasValue&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;BadHttpRequestException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;completed is required&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;HttpStatusCode&lt;span&gt;.&lt;/span&gt;BadRequest&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;await&lt;/span&gt; repo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;,&lt;/span&gt; todo&lt;span&gt;.&lt;/span&gt;completed&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The implementation is very similar to the POST method. It checks for the content type and deserializes the request body content into a &lt;code&gt;TodoItem&lt;/code&gt; record instance. This time, we only use the &lt;code&gt;completed&lt;/code&gt; property. &lt;/p&gt;&lt;p&gt;Finally, we will add the last method for removing items from the TODO list. Copy the following code right after the method for doing the update:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapDelete&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/todo/{id}&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ITodoRepository&lt;/span&gt; repo&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;BadHttpRequestException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;id is required&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;HttpStatusCode&lt;span&gt;.&lt;/span&gt;BadRequest&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;await&lt;/span&gt; repo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Delete&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If something is wrong with the received parameters, all the validations in our methods return a &lt;code&gt;BadHttpRequestException&lt;/code&gt;. Unfortunately, ASP.NET Web API will not map the status code in the exception to the status code of the HTTP response. &#xA;We can do that mapping with custom middleware that runs right after the method call. Add the following to the existing code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Program.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code&lt;/span&gt;&#xA;&#xA;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;Environment&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsDevelopment&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseDeveloperExceptionPage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// 👇 this is the new code&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Use&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;ctx&lt;span&gt;,&lt;/span&gt; next&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;try&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;await&lt;/span&gt; &lt;span&gt;next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;BadHttpRequestException&lt;/span&gt; ex&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        ctx&lt;span&gt;.&lt;/span&gt;Response&lt;span&gt;.&lt;/span&gt;StatusCode &lt;span&gt;=&lt;/span&gt; ex&lt;span&gt;.&lt;/span&gt;StatusCode&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;await&lt;/span&gt; ctx&lt;span&gt;.&lt;/span&gt;Response&lt;span&gt;.&lt;/span&gt;&lt;span&gt;WriteAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;ex&lt;span&gt;.&lt;/span&gt;Message&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;// 👆 this is the new code&lt;/span&gt;&#xA;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapGet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/todo&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;ITodoRepository&lt;/span&gt; repo&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;// ...existing code&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The order of middleware in the execution pipeline is essential. This one should run before any of the API methods, so we configure it before them.&lt;/p&gt;&lt;h2 id=&#34;Documenting-the-Web-API&#34;&gt;Documenting the Web API&lt;/h2&gt;&lt;p&gt;Many languages have emerged in the development community over the years for documenting Web APIs. &lt;a href=&#34;https://swagger.io/specification/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Swagger&lt;/a&gt; and &lt;a href=&#34;https://raml.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;RAML&lt;/a&gt; have been two of the most strong contenders in the space, but the former seems to be the winner as it has recently become a standard called OpenAPI. These languages offer a way to document your Web API in terms of specifications and a foundation for code generation tools developers can leverage in their development environments.&#xA;Microsoft has also entered this space with &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.apiexplorer&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ApiExplorer&lt;/a&gt;, a framework for annotating ASP.NET Web APIs with metadata. The idea is that developers can leverage the exposed metadata for generating documentation or as a tool for generating API specifications in OpenAPI or RAML, for example.&#xA;As part of this article, we will focus on &lt;a href=&#34;https://github.com/domaindrivendev/Swashbuckle.AspNetCore&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Swashbuckle&lt;/a&gt;, a .NET Core implementation for generating OpenAPI specifications (or Swagger documentation) in your ASP.NET minimal Web APIs.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;While you can still use ApiExplorer with minimal Web APIs, you are responsible for generating the documentation pages for your APIs. The support for leveraging ApiExplorer in Swashbuckle is minimal.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Open the Package Manager Console for NuGet in Visual Studio and run the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Install-Package Swashbuckle.AspNetCore&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the Package Manager installs the Nuget packages in our project, you can configure the Swashbuckle middleware in the &lt;code&gt;Program&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; file under the project&amp;#39;s root folder.&lt;/p&gt;&lt;p&gt;Copy the following code right after the registration of the TODO repository.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Program.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code&lt;/span&gt;&#xA;&#xA;builder&lt;span&gt;.&lt;/span&gt;Services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;AddSingleton&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;ITodoRepository&lt;span&gt;,&lt;/span&gt; TodoRepository&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// 👇 this is the new code&lt;/span&gt;&#xA;builder&lt;span&gt;.&lt;/span&gt;Services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddEndpointsApiExplorer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;builder&lt;span&gt;.&lt;/span&gt;Services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddSwaggerGen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;// 👆 this is the new code&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Those lines will register all the services required by Swashbuckle to generate the documentation. &lt;/p&gt;&lt;p&gt;Next, we need to add the code highlighted below to configure the middleware:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Program.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code&lt;/span&gt;&#xA;&#xA;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;Environment&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsDevelopment&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseDeveloperExceptionPage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// 👇 this is the new code&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapSwagger&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseSwaggerUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;// 👆 this is the new code&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The configuration of the middleware uses all the default settings. Swagger exposes the UI pages under &lt;code&gt;&lt;span&gt;/&lt;/span&gt;swagger&lt;/code&gt; and the Swagger API specification under &lt;code&gt;&lt;span&gt;/&lt;/span&gt;swagger&lt;span&gt;/&lt;/span&gt;v1&lt;span&gt;/&lt;/span&gt;swagger&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;We can modify some of those settings to include additional information about the APIs, as shown in the following example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;builder&lt;span&gt;.&lt;/span&gt;Services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddSwaggerGen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;c &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    c&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SwaggerDoc&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Microsoft&lt;span&gt;.&lt;/span&gt;OpenApi&lt;span&gt;.&lt;/span&gt;Models&lt;span&gt;.&lt;/span&gt;OpenApiInfo&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &#xA;        Title &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;TODO API&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        Description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Web APIs for managing a TODO list&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        Version &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;v1&amp;#34;&lt;/span&gt; &#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Unfortunately, a good part of the integration between Swashbuckle and ASP.NET Core Web API relies heavily on XML comments on methods and properties, which do not work well with the minimal API programming model based on delegates. For the time being, we can generate basic documentation about the APIs, which is still helpful but it does not get into specific details.&lt;/p&gt;&lt;h2 id=&#34;Securing-the-Web-API-with-Auth0&#34;&gt;Securing the Web API with Auth0&lt;/h2&gt;&lt;p&gt;Now you have a working API allowing you to perform the typical CRUD actions on a TODO list. Let&amp;#39;s see how to secure it by integrating it with Auth0.&lt;/p&gt;&lt;h3 id=&#34;Create-an-API-in-the-Auth0-Dashboard&#34;&gt;Create an API in the Auth0 Dashboard&lt;/h3&gt;&lt;p&gt;Before adding anything to the code, we need to create an Auth0 API in the &lt;a href=&#34;https://manage.auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Dashboard&lt;/a&gt;. If you haven&amp;#39;t an Auth0 account, you can &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free one&lt;/a&gt;. Then, go to the &lt;a href=&#34;https://manage.auth0.com/#/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;APIs section&lt;/a&gt; and click on &lt;em&gt;Create API&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;This will open a new window for configuring the API. Set the following fields in that window:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;, a friendly name or description for the API. Enter &lt;strong&gt;TODO API&lt;/strong&gt; for this sample.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Identifier&lt;/strong&gt;, which is an identifier that the client application uses to request access tokens for the API. Enter the string &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;www&lt;span&gt;.&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt;. This identifier is also known as &lt;strong&gt;audience&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Signing Algorithm&lt;/strong&gt;, leave the default setting, RS256.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After entering those values, click the &lt;em&gt;Create&lt;/em&gt; button.&lt;/p&gt;&lt;p&gt;In the configuration page of the newly created API, click the &lt;em&gt;Permissions&lt;/em&gt; tab and add a new permission &lt;code&gt;todo&lt;span&gt;:&lt;/span&gt;read&lt;span&gt;-&lt;/span&gt;write&lt;/code&gt; with a description &lt;em&gt;It allows reading and managing items in the TODO list&lt;/em&gt;. This is the &lt;a href=&#34;https://auth0.com/docs/configure/apis/scopes&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;scope&lt;/a&gt; that Auth0 will inject in the access token if the user approves it in the &lt;a href=&#34;https://auth0.com/docs/configure/applications/confidential-public-apps/user-consent-and-third-party-applications&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;consent screen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Now, move to the &lt;em&gt;Settings&lt;/em&gt; tab and scroll down to the &lt;em&gt;RBAC Settings&lt;/em&gt; section. Here, click both the &lt;em&gt;Enable RBAC&lt;/em&gt; and the &lt;em&gt;Add Permissions in the Access Token&lt;/em&gt; toggle buttons.&lt;/p&gt;&lt;p&gt;Finally, click on the &lt;em&gt;Save&lt;/em&gt; button to save the changes. At this point, our API is ready to be used from your ASP.NET minimal Web API.&lt;/p&gt;&lt;h3 id=&#34;Configuring-the--NET-Core-Middleware&#34;&gt;Configuring the .NET Core Middleware&lt;/h3&gt;&lt;p&gt;To prove that they are authorized to call your Web API, clients will need to provide a JWT access token issued by Auth0.&lt;/p&gt;&lt;p&gt;That requires configuring the ASP.NET Core middleware for JWT authentication.&lt;/p&gt;&lt;p&gt;Open the Package Manager Console for NuGet in Visual Studio and run the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Install-Package Microsoft.AspNetCore.Authentication.JwtBearer&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the NuGet packages are installed in your project, you can go ahead and configure them in the &lt;code&gt;Program&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;Add the following code right after the &lt;code&gt;builder&lt;span&gt;.&lt;/span&gt;Services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddSwaggerGen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt; line,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Program.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code&lt;/span&gt;&#xA;&#xA;builder&lt;span&gt;.&lt;/span&gt;Services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddSwaggerGen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// 👇 this is the new code&lt;/span&gt;&#xA;builder&lt;span&gt;.&lt;/span&gt;Services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;JwtBearerDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;)&lt;/span&gt;&#xA;     &lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddJwtBearer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;JwtBearerDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;,&lt;/span&gt; c &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;     &lt;span&gt;{&lt;/span&gt;&#xA;         c&lt;span&gt;.&lt;/span&gt;Authority &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;builder&lt;span&gt;.&lt;/span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;         c&lt;span&gt;.&lt;/span&gt;TokenValidationParameters &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Microsoft&lt;span&gt;.&lt;/span&gt;IdentityModel&lt;span&gt;.&lt;/span&gt;Tokens&lt;span&gt;.&lt;/span&gt;TokenValidationParameters&lt;/span&gt;&#xA;         &lt;span&gt;{&lt;/span&gt;&#xA;             ValidAudience &lt;span&gt;=&lt;/span&gt; builder&lt;span&gt;.&lt;/span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Audience&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;             ValidIssuer &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;builder&lt;span&gt;.&lt;/span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;         &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;     &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;// 👆 this is the new code&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This middleware will intercept any call to your Web API and authenticate any received request by validating its JWT bearer token. If the validation is successful, it will initialize the security principal associated with the current execution context in the &lt;code&gt;HttpContext&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;You will also want to perform authorization checks to ensure the JWT includes the scope required to execute your API.  You can configure authorization for our API with the following middleware injected right after the authentication one:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;builder&lt;span&gt;.&lt;/span&gt;Services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;o &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        o&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddPolicy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;todo:read-write&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; p &lt;span&gt;=&amp;gt;&lt;/span&gt; p&lt;span&gt;.&lt;/span&gt;&#xA;            &lt;span&gt;RequireAuthenticatedUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;            &lt;span&gt;RequireClaim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;scope&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;todo:read-write&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The policy checks for a claim or attribute called &lt;em&gt;scope&lt;/em&gt; with a value &lt;code&gt;todo&lt;span&gt;:&lt;/span&gt;read&lt;span&gt;-&lt;/span&gt;write&lt;/code&gt;, which is the scope you previously configured in the Auth0 Dashboard for your API. &lt;/p&gt;&lt;p&gt;You also need to instruct the Web API to use the configured middleware for authentication and authorization. That&amp;#39;s done with the following lines:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Program.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code&lt;/span&gt;&#xA;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseSwaggerUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// 👇 this is the new code&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;// 👆 this is the new code&lt;/span&gt;&#xA;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Use&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;ctx&lt;span&gt;,&lt;/span&gt; next&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To provide your API with the setting registered in the Auth0 Dashboard, update the existing &lt;code&gt;appSettings&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; file by adding an &lt;code&gt;Auth0&lt;/code&gt; section with the &lt;code&gt;Domain&lt;/code&gt; and  &lt;code&gt;Audience&lt;/code&gt; properties, as shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Logging&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;LogLevel&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Default&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Information&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Microsoft&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Warning&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Microsoft.Hosting.Lifetime&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Information&amp;#34;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;AllowedHosts&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Domain&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;lt;YOUR_DOMAIN&amp;gt;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Audience&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;https://www.todo.com&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Replace the &lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;YOUR_DOMAIN&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; placeholder with the value of your Auth0 domain.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Your Auth0 domain is a string in the form &lt;code&gt;&lt;span&gt;YOUR&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;TENANT&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt; where &lt;code&gt;&lt;span&gt;YOUR&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;TENANT&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;/code&gt; is the name you provided when you created your account with Auth0. For more information, &lt;a href=&#34;https://auth0.com/docs/getting-started/the-basics#domains&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check out the documentation&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;All the methods for our minimal Web API controller will allow anonymous access by default. We will convert them to require authenticated calls using the &lt;code&gt;RequireAuthorization&lt;/code&gt; method during the configuration. That method will also reference the policy we previously defined in the &lt;code&gt;AddAuthorization&lt;/code&gt; call. Modify each method as outlined below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Program.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code&lt;/span&gt;&#xA;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapGet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/todo&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;ITodoRepository&lt;/span&gt; repo&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;..&lt;/span&gt; &lt;span&gt;// Code hidden for a sake of simplicity&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;RequireAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;todo:read-write&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapGet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/todo/{id}&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ITodoRepository&lt;/span&gt; repo&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;..&lt;/span&gt;&lt;span&gt;..&lt;/span&gt; &lt;span&gt;// Code hidden for a sake of simplicity&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;RequireAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;todo:read-write&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapPost&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/todo&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;HttpRequest&lt;/span&gt; req&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;HttpResponse&lt;/span&gt; res&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;ITodoRepository&lt;/span&gt; repo&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;..&lt;/span&gt;&lt;span&gt;..&lt;/span&gt; &lt;span&gt;// Code hidden for a sake of simplicity&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;RequireAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;todo:read-write&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapDelete&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/todo/{id}&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ITodoRepository&lt;/span&gt; repo&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;..&lt;/span&gt;&lt;span&gt;..&lt;/span&gt; &lt;span&gt;// Code hidden for a sake of simplicity&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;RequireAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;todo:read-write&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapPut&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/todo/{id}&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt; &lt;span&gt;HttpRequest&lt;/span&gt; req&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ITodoRepository&lt;/span&gt; repo&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;..&lt;/span&gt;&lt;span&gt;..&lt;/span&gt; &lt;span&gt;// Code hidden for a sake of simplicity&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;RequireAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;todo:read-write&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This method will do two things,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;It will activate the authorization middleware to validate the request and initialize the security principal for the current execution context.&lt;/li&gt;&lt;li&gt;It will run the &lt;code&gt;todo&lt;span&gt;:&lt;/span&gt;read&lt;span&gt;-&lt;/span&gt;write&lt;/code&gt; policy to ensure the security principal is authorized to call that endpoint. In our case, it will check the access token includes a scope called &lt;code&gt;todo&lt;span&gt;:&lt;/span&gt;read&lt;span&gt;-&lt;/span&gt;write&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Once we run this project in Visual Studio, the API will only accept authenticated requests with access tokens coming from Auth0.&lt;/p&gt;&lt;h2 id=&#34;Testing-the-API&#34;&gt;Testing the API&lt;/h2&gt;&lt;p&gt;Just for testing purposes, you will use the &lt;a href=&#34;https://auth0.com/docs/authorization/flows/client-credentials-flow&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OAuth Client Credentials flow&lt;/a&gt;. That will give us the flexibility of using tools well-known tools like Curl, Fiddler, or Postman. &#xA;When you register a new API in the Auth0 Dashboard, a client application for testing the API is automatically created by Auth0 for you. That client application is generated using the following name convention  &amp;#34;&amp;lt;Your API name&amp;gt; (Test Application)&amp;#34;.&lt;/p&gt;&lt;p&gt;You will leverage that application to use Curl and get an access token for your API.&#xA;Go to the TODO API definition in the &lt;a href=&#34;https://manage.auth0.com/#/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Dashboard&lt;/a&gt;, and click on the &lt;em&gt;Machine to Machine Applications&lt;/em&gt; tab. Under the list of applications in that tab, look for &lt;code&gt;&lt;span&gt;TODO&lt;/span&gt; &lt;span&gt;API&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;Test Application&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and make sure that the &lt;code&gt;Authorized&lt;/code&gt; checkbox is enabled. If not, click on the &lt;code&gt;Authorized&lt;/code&gt; checkbox to enable it.&lt;/p&gt;&lt;p&gt;Now click on the &lt;em&gt;Test&lt;/em&gt; tab. Here you can get a token to test your Web API by clicking the &lt;em&gt;Copy Token&lt;/em&gt; icon as shown in the following picture:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3TbMDPS6kt51dqhR3BZlBQ/89d0ea4fd127205bbfc25575e749806b/copy-token.png&#34; alt=&#34;Copy token from the Auth0 dashboard&#34;/&gt;&lt;/p&gt;&lt;p&gt;After copying the test access token, you can use it to call your minimal Web API. Run the project in Visual Studio, and use Curl or any other HTTP client tool of your preference to pass the access token in the Authorization header using the Bearer scheme. For example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; --request GET &lt;span&gt;\&lt;/span&gt;&#xA;  --url https://localhost:5001 &lt;span&gt;\&lt;/span&gt;&#xA;  --header &amp;#39;Authorization: Bearer &lt;span&gt;&amp;lt;&lt;/span&gt;YOUR_ACCESS_TOKEN&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The simplification of the code required for running a new Web API represents a great addition in .NET 6 and a step forward from Microsoft to break the entry barrier for developers jumping from other platforms.&lt;/p&gt;&lt;p&gt;As you learned throughout the article, despite the simplification, you can still leverage the power of classical ASP.NET Web APIs to secure your endpoints with Auth0.&lt;/p&gt;&lt;p&gt;You can download the complete code of the sample project from &lt;a href=&#34;https://github.com/auth0-blog/minimalwebapi&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/securing-aspnet-minimal-webapis-with-auth0/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn about the new ASP.NET minimal Web APIs introduced in .NET 6.0 and how to secure them with Auth0.</summary>
    <author>
      <name>Require authorization in the API controller</name>
    </author>
  </entry>
  <entry>
    <title>State Management in Angular Using NgRx: Pt. 2</title>
    <updated>2021-11-23T19:57:00Z</updated>
    <id>tag:auth0.com,2021-11-23:/blog/state-management-in-angular-with-ngrx-2/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;h2 id=&#34;User-State-Management&#34;&gt;User State Management&lt;/h2&gt;&lt;p&gt;The user store will work similarly to how the menus state management works. I won&amp;#39;t detail how each part of the state works and focus more on the Auth0 and NgRx integration.&lt;/p&gt;&lt;p&gt;The starter app is using the Auth0 SDK directly and managing the roles through the &lt;code&gt;RolesService&lt;/code&gt;, this section of the tutorial will walk you through migrating to using Auth0&amp;#39;s SDK through NgRx and managing the roles by using selectors.&lt;/p&gt;&lt;h3 id=&#34;Create-User-State&#34;&gt;Create User State&lt;/h3&gt;&lt;p&gt;Let&amp;#39;s start with defining the interface for the user state object and its initial state. Open &lt;code&gt;user&lt;span&gt;.&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/user/user.state.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; User &lt;span&gt;as&lt;/span&gt; Auth0User &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/auth0-spa-js&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;UserState&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  userDetails&lt;span&gt;:&lt;/span&gt; Auth0User&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; initialState&lt;span&gt;:&lt;/span&gt; UserState &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  userDetails&lt;span&gt;:&lt;/span&gt; &lt;span&gt;undefined&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create a barrel export for the &lt;code&gt;user&lt;/code&gt; directory with the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/user/index.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Update-Core-State&#34;&gt;Update Core State&lt;/h4&gt;&lt;p&gt;To access &lt;code&gt;UserState&lt;/code&gt; from your Store, you will need to add it to your &lt;code&gt;CoreState&lt;/code&gt;&amp;#39;s state object. Open &lt;code&gt;core&lt;span&gt;.&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/core.state.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; MenusState &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; UserState &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;State&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  menus&lt;span&gt;:&lt;/span&gt; MenusState&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  user&lt;span&gt;:&lt;/span&gt; UserState&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Create-User-Actions&#34;&gt;Create User Actions&lt;/h3&gt;&lt;p&gt;We have three user-related Actions that we need for our user Store. Login, logout, and user changed Action to keep the user details in our Store in sync with Auth0&amp;#39;s SDK.&lt;/p&gt;&lt;p&gt;Since we have several user Actions that will originate from the Navbar component, you can group them under &lt;code&gt;allNavbarAction&lt;/code&gt; to ensure you aren&amp;#39;t reusing these Actions in a different part of the application (following the Good Action Hygiene pattern).&lt;/p&gt;&lt;p&gt;Because the &lt;code&gt;userChangedFromAuth0SDK&lt;/code&gt; Action originates from Auth0&amp;#39;s SDK, let&amp;#39;s name the source part of the Action type as &lt;code&gt;Auth0 &lt;span&gt;SDK&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Open &lt;code&gt;user&lt;span&gt;.&lt;/span&gt;actions&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/user/user.actions.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; createAction&lt;span&gt;,&lt;/span&gt; props &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; User &lt;span&gt;as&lt;/span&gt; Auth0User &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/auth0-spa-js&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; allNavbarActions &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  loginFlowInitiated&lt;span&gt;:&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;[Navbar] Login Flow Initiated&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  logoutFlowInitiated&lt;span&gt;:&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;[Navbar] Logout Flow Initiated&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; userChangedFromAuth0SDK &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Auth0 SDK] User Changed&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; userDetails&lt;span&gt;:&lt;/span&gt; Auth0User &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add &lt;code&gt;user&lt;span&gt;.&lt;/span&gt;actions&lt;/code&gt; to the barrel export. Open &lt;code&gt;index&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/user/index.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.actions&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Update-Application-to-Use-User-Actions&#34;&gt;Update Application to Use User Actions&lt;/h4&gt;&lt;p&gt;Open &lt;code&gt;nav&lt;span&gt;-&lt;/span&gt;bar&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/shared/components/nav-bar/nav-bar.component.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Component &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; IconDefinition &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@fortawesome/fontawesome-svg-core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; faHome&lt;span&gt;,&lt;/span&gt; faUser&lt;span&gt;,&lt;/span&gt; faUtensils &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@fortawesome/free-solid-svg-icons&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; AuthService &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/auth0-angular&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Store &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; allNavbarActions &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core/state/user&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;INavBarMenuLinkProps&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  to&lt;span&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  icon&lt;span&gt;:&lt;/span&gt; IconDefinition&lt;span&gt;;&lt;/span&gt;&#xA;  label&lt;span&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  selector&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;app-nav-bar&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  templateUrl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;./nav-bar.component.html&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  styleUrls&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;./nav-bar.component.scss&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;NavBarComponent&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  faUser &lt;span&gt;=&lt;/span&gt; faUser&lt;span&gt;;&lt;/span&gt;&#xA;  isAuthenticated$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;authService&lt;span&gt;.&lt;/span&gt;isAuthenticated$&lt;span&gt;;&lt;/span&gt;&#xA;  user$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;authService&lt;span&gt;.&lt;/span&gt;user$&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  navOptions&lt;span&gt;:&lt;/span&gt; INavBarMenuLinkProps&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt; to&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;/home&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; label&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Home&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; icon&lt;span&gt;:&lt;/span&gt; faHome &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt; to&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;/menu&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; label&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Menu&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; icon&lt;span&gt;:&lt;/span&gt; faUtensils &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; authService&lt;span&gt;:&lt;/span&gt; AuthService&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; store&lt;span&gt;:&lt;/span&gt; Store&#xA;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;loginWithRedirect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;dispatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;allNavbarActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;loginFlowInitiated&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;dispatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;allNavbarActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;logoutFlowInitiated&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Create-User-Selectors&#34;&gt;Create User Selectors&lt;/h3&gt;&lt;p&gt;Create two selectors, a feature selector and a selector that returns the &lt;code&gt;userDetails&lt;/code&gt;. Open &lt;code&gt;user&lt;span&gt;.&lt;/span&gt;selector&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/user/user.selector.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; createFeatureSelector&lt;span&gt;,&lt;/span&gt; createSelector &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; UserState &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; selectUser &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;createFeatureSelector&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;UserState&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; selectUserDetails &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createSelector&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  selectUser&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;(&lt;/span&gt;state&lt;span&gt;:&lt;/span&gt; UserState&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; state&lt;span&gt;.&lt;/span&gt;userDetails&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s also add some utility Selectors for &lt;code&gt;isLoggedIn&lt;/code&gt;, &lt;code&gt;userRoles&lt;/code&gt;, and &lt;code&gt;isAdmin&lt;/code&gt; to easily let your components access these properties. Open &lt;code&gt;user&lt;span&gt;.&lt;/span&gt;selector&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and update it with the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/user/user.selector.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; createFeatureSelector&lt;span&gt;,&lt;/span&gt; createSelector &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; environment &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/environments/environment&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; UserState &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;USER_ROLES&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;MENU_ADMIN&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;menu-admin&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; selectUser &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;createFeatureSelector&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;UserState&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; selectUserDetails &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createSelector&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  selectUser&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;(&lt;/span&gt;state&lt;span&gt;:&lt;/span&gt; UserState&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; state&lt;span&gt;.&lt;/span&gt;userDetails&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; selectIsLoggedIn &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createSelector&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  selectUserDetails&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;(&lt;/span&gt;userDetails&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;userDetails&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; selectUserRoles &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createSelector&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  selectUserDetails&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;(&lt;/span&gt;userDetails&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; userDetails&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;environment&lt;span&gt;.&lt;/span&gt;auth&lt;span&gt;.&lt;/span&gt;audience&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/roles&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; selectIsAdmin &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createSelector&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;selectUserRoles&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;userRoles&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;  userRoles&lt;span&gt;?.&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;USER_ROLES&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MENU_ADMIN&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add &lt;code&gt;user&lt;span&gt;.&lt;/span&gt;selector&lt;/code&gt; to the list of exports in &lt;code&gt;index&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/user/index.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.actions&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.selector&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Update-Application-to-Use-User-Selectors&#34;&gt;Update Application to Use User Selectors&lt;/h4&gt;&lt;p&gt;The user role route guard was previously using the value of the roles from &lt;code&gt;RolesService&lt;/code&gt;. Since you now have a user roles Selector, you can replace the current implementation with an NgRx Selector. Open &lt;code&gt;user&lt;span&gt;-&lt;/span&gt;role&lt;span&gt;.&lt;/span&gt;guard&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/guards/user-role.guard.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Injectable &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  CanActivate&lt;span&gt;,&lt;/span&gt;&#xA;  Router&lt;span&gt;,&lt;/span&gt;&#xA;  ActivatedRouteSnapshot&lt;span&gt;,&lt;/span&gt;&#xA;  RouterStateSnapshot&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/router&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Store &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Observable&lt;span&gt;,&lt;/span&gt; &lt;span&gt;of&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;rxjs&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; catchError&lt;span&gt;,&lt;/span&gt; map &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;rxjs/operators&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; selectUserRoles &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../state/user&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Injectable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; providedIn&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;root&amp;#34;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserRoleGuard&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;CanActivate&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; store&lt;span&gt;:&lt;/span&gt; Store&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; router&lt;span&gt;:&lt;/span&gt; Router&#xA;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;canActivate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    route&lt;span&gt;:&lt;/span&gt; ActivatedRouteSnapshot&lt;span&gt;,&lt;/span&gt;&#xA;    state&lt;span&gt;:&lt;/span&gt; RouterStateSnapshot&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Observable&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;selectUserRoles&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;roles&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;roles &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; roles&lt;span&gt;.&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;route&lt;span&gt;?.&lt;/span&gt;data&lt;span&gt;?.&lt;/span&gt;role&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;          &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;// redirect the user to home&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;router&lt;span&gt;.&lt;/span&gt;&lt;span&gt;navigate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;/home&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;catchError&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;err&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;// redirect the user to home&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;router&lt;span&gt;.&lt;/span&gt;&lt;span&gt;navigate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;/home&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;of&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another place we use user-related information is the Navbar. We display user information and conditionally display the login and logout button depending on the user&amp;#39;s &lt;code&gt;isAuthenticated&lt;/code&gt; state. Open &lt;code&gt;nav&lt;span&gt;-&lt;/span&gt;bar&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/shared/components/nav-bar/nav-bar.component.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Component &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; IconDefinition &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@fortawesome/fontawesome-svg-core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; faHome&lt;span&gt;,&lt;/span&gt; faUser&lt;span&gt;,&lt;/span&gt; faUtensils &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@fortawesome/free-solid-svg-icons&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Store &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  allNavbarActions&lt;span&gt;,&lt;/span&gt;&#xA;  selectIsLoggedIn&lt;span&gt;,&lt;/span&gt;&#xA;  selectUserDetails&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core/state/user&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;INavBarMenuLinkProps&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  to&lt;span&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  icon&lt;span&gt;:&lt;/span&gt; IconDefinition&lt;span&gt;;&lt;/span&gt;&#xA;  label&lt;span&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  selector&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;app-nav-bar&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  templateUrl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;./nav-bar.component.html&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  styleUrls&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;./nav-bar.component.scss&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;NavBarComponent&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  faUser &lt;span&gt;=&lt;/span&gt; faUser&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  isAuthenticated$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;selectIsLoggedIn&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  user$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;selectUserDetails&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  navOptions&lt;span&gt;:&lt;/span&gt; INavBarMenuLinkProps&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt; to&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;/home&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; label&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Home&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; icon&lt;span&gt;:&lt;/span&gt; faHome &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt; to&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;/menu&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; label&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Menu&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; icon&lt;span&gt;:&lt;/span&gt; faUtensils &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; store&lt;span&gt;:&lt;/span&gt; Store&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;loginWithRedirect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;dispatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;allNavbarActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;loginFlowInitiated&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;dispatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;allNavbarActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;logoutFlowInitiated&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The profile page displays some information about the user, such as name and photo. Since this is stored as part of the user Store, let&amp;#39;s also update this to use the &lt;code&gt;selectUserDetails&lt;/code&gt; Selector. Open &lt;code&gt;profile&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/features/profile/profile.component.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Component &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Store &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; selectUserDetails &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core/state/user&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  selector&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;app-profile&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  templateUrl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;./profile.component.html&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  styleUrls&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;./profile.component.scss&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ProfileComponent&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  user$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;selectUserDetails&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; store&lt;span&gt;:&lt;/span&gt; Store&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We display an &lt;code&gt;Add&lt;/code&gt; button when the logged-in user is an admin user on the Menu Items page. You can read more about setting up admin users on Auth0 in this &lt;a href=&#34;https://auth0.com/blog/developing-a-secure-api-with-nestjs-adding-role-based-access-control/#Get-User-Roles&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;blog post&lt;/a&gt;. Open &lt;code&gt;menu&lt;span&gt;-&lt;/span&gt;items&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/features/menu/menu-items/menu-items.component.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Component &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; ActivatedRoute&lt;span&gt;,&lt;/span&gt; Router &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/router&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Store &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; selectMenuItems &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core/state/menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; selectIsAdmin &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core/state/user&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  selector&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;app-menu-items&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  templateUrl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;./menu-items.component.html&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  styles&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&#xA;      :host {&#xA;        width: 100%;&#xA;        height: 100%;&#xA;      }&#xA;    &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MenuItemsComponent&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  menuItems$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;selectMenuItems&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  isAdmin$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;selectIsAdmin&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; router&lt;span&gt;:&lt;/span&gt; Router&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; activatedRoute&lt;span&gt;:&lt;/span&gt; ActivatedRoute&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; store&lt;span&gt;:&lt;/span&gt; Store&#xA;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;addMenuItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;router&lt;span&gt;.&lt;/span&gt;&lt;span&gt;navigate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;add&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; relativeTo&lt;span&gt;:&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;activatedRoute &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lastly, we display a &lt;code&gt;Edit&lt;/code&gt; and &lt;code&gt;Delete&lt;/code&gt; buttons when the logged-in user is an admin user on the Menu Item page. Open &lt;code&gt;menu&lt;span&gt;-&lt;/span&gt;item&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/features/menu/menu-item/menu-item.component.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Component &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Location &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/common&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; ActivatedRoute&lt;span&gt;,&lt;/span&gt; Router &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/router&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; map&lt;span&gt;,&lt;/span&gt; switchMap &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;rxjs/operators&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Store &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; selectMenuItem &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core/state/menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; selectIsAdmin &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core/state/user&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  selector&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;app-menu-item&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  templateUrl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;./menu-item.component.html&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  styleUrls&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;./menu-item.component.scss&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MenuItemComponent&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  menuItemId$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;activatedRoute&lt;span&gt;.&lt;/span&gt;params&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;params&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; params&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  menuItem$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;menuItemId$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;switchMap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;selectMenuItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; id &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  isAdmin$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;selectIsAdmin&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; activatedRoute&lt;span&gt;:&lt;/span&gt; ActivatedRoute&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; router&lt;span&gt;:&lt;/span&gt; Router&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; location&lt;span&gt;:&lt;/span&gt; Location&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; store&lt;span&gt;:&lt;/span&gt; Store&#xA;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;location&lt;span&gt;.&lt;/span&gt;&lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;navigateTo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;url&lt;span&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;router&lt;span&gt;.&lt;/span&gt;&lt;span&gt;navigateByUrl&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;router&lt;span&gt;.&lt;/span&gt;url&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;url&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Create-User-Reducer&#34;&gt;Create User Reducer&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;userDetails&lt;/code&gt; in the user Store will only be modified based on the &lt;code&gt;userChanged&lt;/code&gt; event from Auth0&amp;#39;s SDK to always keep them in sync. Open &lt;code&gt;user&lt;span&gt;.&lt;/span&gt;reducer&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/user/user.reducer.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Action&lt;span&gt;,&lt;/span&gt; createReducer&lt;span&gt;,&lt;/span&gt; on &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; UserActions &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.actions&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; initialState&lt;span&gt;,&lt;/span&gt; UserState &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; userReducer &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createReducer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  initialState&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;on&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;UserActions&lt;span&gt;.&lt;/span&gt;userChangedFromAuth0SDK&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;state&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; userDetails &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;...&lt;/span&gt;state&lt;span&gt;,&lt;/span&gt;&#xA;    userDetails&lt;span&gt;:&lt;/span&gt; userDetails&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;reducer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;state&lt;span&gt;:&lt;/span&gt; UserState &lt;span&gt;|&lt;/span&gt; &lt;span&gt;undefined&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; action&lt;span&gt;:&lt;/span&gt; Action&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;userReducer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;state&lt;span&gt;,&lt;/span&gt; action&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Update-Core-Reducer&#34;&gt;Update Core Reducer&lt;/h4&gt;&lt;p&gt;Similar to what you did for the menus Reducer, you will need to add the reducer to the &lt;code&gt;ActionReducerMap&lt;/code&gt; to use the user reducer. Open &lt;code&gt;core&lt;span&gt;.&lt;/span&gt;reducer&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/core.reducers.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; ActionReducerMap&lt;span&gt;,&lt;/span&gt; MetaReducer &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; State &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./core.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; MenusReducer &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus/menus.reducer&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; UserReducer &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user/user.reducer&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; reducers&lt;span&gt;:&lt;/span&gt; ActionReducerMap&lt;span&gt;&amp;lt;&lt;/span&gt;State&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  menus&lt;span&gt;:&lt;/span&gt; MenusReducer&lt;span&gt;.&lt;/span&gt;reducer&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  user&lt;span&gt;:&lt;/span&gt; UserReducer&lt;span&gt;.&lt;/span&gt;reducer&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; metaReducers&lt;span&gt;:&lt;/span&gt; MetaReducer&lt;span&gt;&amp;lt;&lt;/span&gt;State&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Create-User-Effects&#34;&gt;Create User Effects&lt;/h3&gt;&lt;p&gt;You will be interacting with Auth0&amp;#39;s SDK through the user Effects, to log in and log out the user and listen to changes in the user&amp;#39;s state. Open &lt;code&gt;user&lt;span&gt;.&lt;/span&gt;effects&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/user/user.effects.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Injectable &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; AuthService &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/auth0-angular&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Actions&lt;span&gt;,&lt;/span&gt; createEffect&lt;span&gt;,&lt;/span&gt; ofType &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/effects&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; tap&lt;span&gt;,&lt;/span&gt; map &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;rxjs/operators&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; UserActions &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.actions&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Injectable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserEffects&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; actions$&lt;span&gt;:&lt;/span&gt; Actions&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;any&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; authService&lt;span&gt;:&lt;/span&gt; AuthService&#xA;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  login$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createEffect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;actions$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;ofType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;UserActions&lt;span&gt;.&lt;/span&gt;allNavbarActions&lt;span&gt;.&lt;/span&gt;loginFlowInitiated&lt;span&gt;.&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;tap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;authService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;loginWithRedirect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt; dispatch&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  logout$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createEffect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;actions$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;ofType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;UserActions&lt;span&gt;.&lt;/span&gt;allNavbarActions&lt;span&gt;.&lt;/span&gt;logoutFlowInitiated&lt;span&gt;.&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;tap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;authService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt; dispatch&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To keep the user observable from the Auth0&amp;#39;s SDK and our user Store in sync, you can use an actionless effect that listens to an external observable (in our case &lt;code&gt;authService&lt;span&gt;.&lt;/span&gt;user$&lt;/code&gt;) and dispatches another action whenever that observable emits a new value. Open &lt;code&gt;user&lt;span&gt;.&lt;/span&gt;effects&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/user/user.effects.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Injectable &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; AuthService &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/auth0-angular&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Actions&lt;span&gt;,&lt;/span&gt; createEffect&lt;span&gt;,&lt;/span&gt; ofType &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/effects&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; tap&lt;span&gt;,&lt;/span&gt; map &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;rxjs/operators&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; UserActions &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.actions&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Injectable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserEffects&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; actions$&lt;span&gt;:&lt;/span&gt; Actions&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;any&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; authService&lt;span&gt;:&lt;/span&gt; AuthService&#xA;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  userChanged$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createEffect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;authService&lt;span&gt;.&lt;/span&gt;user$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;userDetails&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;        UserActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;userChangedFromAuth0SDK&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; userDetails&lt;span&gt;:&lt;/span&gt; userDetails &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  login$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createEffect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;actions$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;ofType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;UserActions&lt;span&gt;.&lt;/span&gt;allNavbarActions&lt;span&gt;.&lt;/span&gt;loginFlowInitiated&lt;span&gt;.&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;tap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;authService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;loginWithRedirect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt; dispatch&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  logout$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createEffect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;actions$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;ofType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;UserActions&lt;span&gt;.&lt;/span&gt;allNavbarActions&lt;span&gt;.&lt;/span&gt;logoutFlowInitiated&lt;span&gt;.&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;tap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;authService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt; dispatch&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add &lt;code&gt;user&lt;span&gt;.&lt;/span&gt;effects&lt;/code&gt; to the barrel export. Open &lt;code&gt;index&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/user/index.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.actions&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.selector&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./user.effects&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Update-Effects-Module&#34;&gt;Update Effects Module&lt;/h4&gt;&lt;p&gt;You will then need to add &lt;code&gt;UserEffects&lt;/code&gt; to the &lt;code&gt;EffectsModule&lt;/code&gt; initialization. Open &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;module&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/app.module.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; BrowserModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/platform-browser&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; NgModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; HttpClientModule&lt;span&gt;,&lt;/span&gt; &lt;span&gt;HTTP_INTERCEPTORS&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/common/http&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; StoreModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; EffectsModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/effects&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; AuthHttpInterceptor&lt;span&gt;,&lt;/span&gt; AuthModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/auth0-angular&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; AppRoutingModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./app-routing.module&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; AppComponent &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./app.component&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; NavBarModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./shared&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; environment &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/environments/environment&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; reducers&lt;span&gt;,&lt;/span&gt; metaReducers &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./core/state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; MenusEffects &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./core/state/menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; UserEffects &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./core/state/user&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;NgModule&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  imports&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    BrowserModule&lt;span&gt;,&lt;/span&gt;&#xA;    HttpClientModule&lt;span&gt;,&lt;/span&gt;&#xA;    AuthModule&lt;span&gt;.&lt;/span&gt;&lt;span&gt;forRoot&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;...&lt;/span&gt;environment&lt;span&gt;.&lt;/span&gt;auth&lt;span&gt;,&lt;/span&gt;&#xA;      httpInterceptor&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        allowedList&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;          &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;environment&lt;span&gt;.&lt;/span&gt;serverUrl&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/api/menu/items&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;environment&lt;span&gt;.&lt;/span&gt;serverUrl&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/api/menu/items/*&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    AppRoutingModule&lt;span&gt;,&lt;/span&gt;&#xA;    NavBarModule&lt;span&gt;,&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// NgRx&lt;/span&gt;&#xA;    StoreModule&lt;span&gt;.&lt;/span&gt;&lt;span&gt;forRoot&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;reducers&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      metaReducers&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    EffectsModule&lt;span&gt;.&lt;/span&gt;&lt;span&gt;forRoot&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;MenusEffects&lt;span&gt;,&lt;/span&gt; UserEffects&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  declarations&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;AppComponent&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  bootstrap&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;AppComponent&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  providers&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      provide&lt;span&gt;:&lt;/span&gt; &lt;span&gt;HTTP_INTERCEPTORS&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      useClass&lt;span&gt;:&lt;/span&gt; AuthHttpInterceptor&lt;span&gt;,&lt;/span&gt;&#xA;      multi&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;AppModule&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Checkpoint:&lt;/strong&gt; There aren&amp;#39;t any visible functional changes added in this section. The difference between the current state of the app compared to the previous checkpoint is its underlying implementation. The app now uses NgRx versus a &lt;code&gt;BehaviorSubject&lt;/code&gt; to manage user-related states. The app should display the login button with an empty dashboard when the user is not authenticated, and display the logout button with the logged-in user&amp;#39;s name along with the menu items on the dashboard when a user is authenticated. Clicking on the &amp;#34;Log in&amp;#34; and &amp;#34;Log out&amp;#34; buttons should trigger their respective flows using Auth0&amp;#39;s SDK and update your application&amp;#39;s state. If you open Redux Devtools in your browser, you should see the user state and actions every time you perform any user-related actions.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;State management is a key component when building applications. You added two Stores to our demo application to manage two distinct states - menus and user. This is a relatively small demo application with a few Stores, Actions, and Reducers to show how you can use NgRx to manage your Application&amp;#39;s state, and use NgRx with Auth0&amp;#39;s SDK to handle user-related functionalities.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/state-management-in-angular-with-ngrx-2/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">See how it&#39;s easy to manage your Angular application&#39;s state using NgRx and learn how you can use NgRx with Auth0&#39;s SDK to handle user-related functionalities.</summary>
  </entry>
  <entry>
    <title>State Management in Angular Using NgRx: Pt. 1</title>
    <updated>2021-11-23T19:57:00Z</updated>
    <id>tag:auth0.com,2021-11-23:/blog/state-management-in-angular-with-ngrx-1/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;h2 id=&#34;Intro&#34;&gt;Intro&lt;/h2&gt;&lt;p&gt;State management is a key component when building applications. There are various approaches by which we can manage the state in an Angular application, each with its pros and cons.&#xA;This blog post will focus on using NgRx as our state management solution. We will look at how you can use NgRx to manage your application&amp;#39;s state by building a Recipe Admin Dashboard application. We will also learn how to secure the application using Auth0 and how it works with NgRx.&lt;/p&gt;&lt;h2 id=&#34;What-Is-Ngrx&#34;&gt;What Is Ngrx&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://ngrx.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;NgRx&lt;/a&gt; is a framework for building reactive applications in Angular. NgRx is inspired by the Redux pattern - unifying the events in your application and deriving state using RxJS. At a high level, NgRx stores a single state and uses actions to express state changes. NgRx excels in managing complex states, making it ideal for applications with a lot of user interactions and multiple data sources.&lt;/p&gt;&lt;h2 id=&#34;How-Does-Ngrx-Work&#34;&gt;How Does Ngrx Work&lt;/h2&gt;&lt;p&gt;NgRx is made up of 5 main components - Store, Actions, Reducers, Selectors, and Effects.&lt;/p&gt;&lt;p&gt;NgRx uses the Redux concept of unidirectional data flow, where all application data goes through the same lifecycle. This unidirectional data flow makes the application&amp;#39;s state more predictable and thus easier to understand. This flow only applies to the state management layer and is not to be confused with the unidirectional data flow of the presentation layer. The following diagram shows the state management lifecycle in NgRx.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2DcycUsy6WR9VwxEDeiEg9/6ab8d4a7cd023248d80d2289d4e063eb/01_ngrx-how-it-works.png&#34; alt=&#34;NgRx State Management Lifecycle Diagram&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Store&#34;&gt;Store&lt;/h3&gt;&lt;p&gt;You can think of this as a client-side database. The Store in NgRx acts as the application&amp;#39;s single source of truth. It reflects the current state of the app.&lt;/p&gt;&lt;h3 id=&#34;Actions&#34;&gt;Actions&lt;/h3&gt;&lt;p&gt;Actions express unique events that happen in our application. These events range from application lifecycle events, user interactions, to network requests. Actions are how the application communicates with NgRx to tell it what to do.&lt;/p&gt;&lt;h3 id=&#34;Reducers&#34;&gt;Reducers&lt;/h3&gt;&lt;p&gt;Reducers are responsible for handling transitions between states. Reducers react to the Actions dispatched and executes a pure function to update the Store. Pure functions are functions that are predictable and have no side effects. Given the same set of inputs, a pure function will always return the same set of outputs.&lt;/p&gt;&lt;h3 id=&#34;Selectors&#34;&gt;Selectors&lt;/h3&gt;&lt;p&gt;Selectors are pure functions for getting slices of the state from the Store. Selectors are how our application can listen to state changes.&lt;/p&gt;&lt;h3 id=&#34;Effects&#34;&gt;Effects&lt;/h3&gt;&lt;p&gt;Effects handle the side effects of each Action. These side effects range from communicating with an external API via HTTP when a certain Action is dispatched to dispatching another Action to update another part of the State.&lt;/p&gt;&lt;h2 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;Angular requires an &lt;a href=&#34;https://nodejs.org/about/releases&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;active LTS or maintenance LTS&lt;/a&gt; version of Node.js. Angular applications also depend on &lt;a href=&#34;https://docs.npmjs.com/getting-started/what-is-npm&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;npm packages&lt;/a&gt; for many features and functions. To download and install npm packages, you need an npm package manager such as &lt;a href=&#34;https://docs.npmjs.com/cli/install&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;npm&lt;/a&gt; or &lt;a href=&#34;https://yarnpkg.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;yarn&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This project has a server-side component to it that has to run in parallel when running the Frontend. Follow the instructions in the &lt;a href=&#34;https://github.com/auth0-cookbook/api_express_typescript_menu&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Api Express Typescript Menu repo&lt;/a&gt;. You can read more about setting up the server-side with Auth0 in this &lt;a href=&#34;https://auth0.com/blog/node-js-and-typescript-tutorial-secure-an-express-api/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This tutorial focuses on how to use Auth0 with NgRx. For more information on setting up Auth0 for Angular applications, follow the instructions on the &lt;a href=&#34;https://github.com/auth0-developer-hub/spa_angular_typescript_dashboard/blob/master/README.md#register-a-client-application-with-auth0&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;README&lt;/a&gt; or refer to this &lt;a href=&#34;https://auth0.com/blog/complete-guide-to-angular-user-authentication/#Connect-Angular-with-Auth0&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Getting-Started-Quickly&#34;&gt;Getting Started Quickly&lt;/h2&gt;&lt;p&gt;I created a demo application with the basic structure and components to help you implement the NgRx related part.&lt;/p&gt;&lt;p&gt;Clone the demo app and check out its starter branch:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;git&lt;/span&gt; clone -b starter git@github.com:auth0-developer-hub/spa_angular_typescript_dashboard.git&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you clone the repo, make &lt;code&gt;spa_angular_typescript_dashboard&lt;/code&gt; your current directory:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;cd&lt;/span&gt; spa_angular_typescript_dashboard&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Install the project&amp;#39;s dependencies:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;npm&lt;/span&gt; i&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run the project locally:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;npm&lt;/span&gt; run start&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can use the &lt;a href=&#34;https://github.com/zalmoxisus/redux-devtools-extension/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;redux devtools&lt;/a&gt; extension for Chrome or Firefox for debugging store-related operations.&lt;/p&gt;&lt;p&gt;To use this extension with NgRx, you&amp;#39;ll need to add NgRx&amp;#39;s devtools dependency to our project. You can do this using either &lt;code&gt;npm&lt;/code&gt; or Angular&amp;#39;s CLI.&lt;/p&gt;&lt;p&gt;Using &lt;code&gt;npm&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;npm&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; @ngrx/store-devtools --save&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using Angular&amp;#39;s CLI&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;To use the Angular CLI, you will need to have the CLI installed globally. Refer to instructions on the &lt;a href=&#34;https://angular.io/cli&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Angular docs&lt;/a&gt; for how to set this up.&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;ng &lt;span&gt;add&lt;/span&gt; @ngrx/store-devtools@latest&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Import the &lt;code&gt;StoreDevToolsModule&lt;/code&gt; in our &lt;code&gt;AppModule&lt;/code&gt; and configure it based on your project&amp;#39;s requirements. For this tutorial, you&amp;#39;ll be using their default configuration. Open &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;module&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/app.module.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; BrowserModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/platform-browser&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; NgModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; HttpClientModule&lt;span&gt;,&lt;/span&gt; &lt;span&gt;HTTP_INTERCEPTORS&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/common/http&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; AuthHttpInterceptor&lt;span&gt;,&lt;/span&gt; AuthModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/auth0-angular&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; StoreDevtoolsModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store-devtools&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; AppRoutingModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./app-routing.module&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; AppComponent &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./app.component&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; NavBarModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./shared&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; environment &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/environments/environment&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; reducers&lt;span&gt;,&lt;/span&gt; metaReducers &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./core/state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; UserEffects &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./core/state/user&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; MenusEffects &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./core/state/menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;NgModule&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  imports&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    BrowserModule&lt;span&gt;,&lt;/span&gt;&#xA;    HttpClientModule&lt;span&gt;,&lt;/span&gt;&#xA;    AuthModule&lt;span&gt;.&lt;/span&gt;&lt;span&gt;forRoot&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;...&lt;/span&gt;environment&lt;span&gt;.&lt;/span&gt;auth&lt;span&gt;,&lt;/span&gt;&#xA;      httpInterceptor&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        allowedList&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;          &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;environment&lt;span&gt;.&lt;/span&gt;serverUrl&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/api/menu/items&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;environment&lt;span&gt;.&lt;/span&gt;serverUrl&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/api/menu/items/*&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    AppRoutingModule&lt;span&gt;,&lt;/span&gt;&#xA;    NavBarModule&lt;span&gt;,&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    StoreDevtoolsModule&lt;span&gt;.&lt;/span&gt;&lt;span&gt;instrument&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;      maxAge&lt;span&gt;:&lt;/span&gt; &lt;span&gt;25&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      logOnly&lt;span&gt;:&lt;/span&gt; environment&lt;span&gt;.&lt;/span&gt;production&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  declarations&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;AppComponent&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  bootstrap&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;AppComponent&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  providers&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      provide&lt;span&gt;:&lt;/span&gt; &lt;span&gt;HTTP_INTERCEPTORS&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      useClass&lt;span&gt;:&lt;/span&gt; AuthHttpInterceptor&lt;span&gt;,&lt;/span&gt;&#xA;      multi&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;AppModule&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;If you used Angular&amp;#39;s CLI to add NgRx devtools, this part might have been updated automatically.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&#34;Running-the-App-and-turning-on-Devtools&#34;&gt;Running the App and turning on Devtools&lt;/h3&gt;&lt;p&gt;After following the steps in this section, you should see an option to activate Redux Devtools in your toolbar when you run the app. Once activated, you should see a window with an interface similar to the image below.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/72gMjqETihKrGgQwH4a02k/229599d15c7afb9f6258b28f4aec17a2/02_ngrx-redux-devtools.png&#34; alt=&#34;Redux Devtools with NgRx&#34;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;You can learn more about these features from their &lt;a href=&#34;https://github.com/zalmoxisus/redux-devtools-extension&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Install-NgRx&#34;&gt;Install NgRx&lt;/h2&gt;&lt;p&gt;You can either use &lt;code&gt;npm&lt;/code&gt; or Angular&amp;#39;s CLI to install NgRx dependencies.&lt;/p&gt;&lt;p&gt;Using &lt;code&gt;npm&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;npm&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; @ngrx/store --save&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using Angular&amp;#39;s CLI&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ng &lt;span&gt;add&lt;/span&gt; @ngrx/store@latest&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will also be using NgRx&amp;#39;s Effects to handle your store&amp;#39;s side effects. Let&amp;#39;s add that dependency.&lt;/p&gt;&lt;p&gt;Using &lt;code&gt;npm&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;npm&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; @ngrx/effects --save&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using Angular&amp;#39;s CLI&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ng &lt;span&gt;add&lt;/span&gt; @ngrx/effects@latest&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;At the time this post was written, the latest NgRx store and effects version was &lt;code&gt;&lt;span&gt;12.2&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;/code&gt;, which will be the version we will be using throughout the tutorial.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Architecture&#34;&gt;Architecture&lt;/h2&gt;&lt;p&gt;At its core, the app is an admin dashboard where the logged-in user can add, edit, and delete a menu item. The logged-in user will perform all the operations or a subset of it depending on their permissions. You will use NgRx to manage the state updates and user/server related events.&lt;/p&gt;&lt;p&gt;You will create two Stores for our application:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;em&gt;menus&lt;/em&gt;: to manage menu related functionalities (CRUD operations)&lt;/li&gt;&lt;li&gt;&lt;em&gt;user&lt;/em&gt;: to manage user-related functionalities such as authentication using Auth0&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You will also split each part of the Store into individual files to make it easier to follow throughout the tutorial.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s first start by creating the following folder structure in our &lt;code&gt;core&lt;/code&gt; directory (you will be updating each file as we discuss each section):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; src&lt;span&gt;/&lt;/span&gt;app&lt;span&gt;/&lt;/span&gt;core&#xA;    &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; state&#xA;        &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; menus&#xA;            &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; menus&lt;span&gt;.&lt;/span&gt;actions&lt;span&gt;.&lt;/span&gt;ts&#xA;            &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; menus&lt;span&gt;.&lt;/span&gt;effects&lt;span&gt;.&lt;/span&gt;ts&#xA;            &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; menus&lt;span&gt;.&lt;/span&gt;reducer&lt;span&gt;.&lt;/span&gt;ts&#xA;            &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; menus&lt;span&gt;.&lt;/span&gt;selector&lt;span&gt;.&lt;/span&gt;ts&#xA;            &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; menus&lt;span&gt;.&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;ts&#xA;            &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; index&lt;span&gt;.&lt;/span&gt;ts&#xA;        &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; user&#xA;            &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;actions&lt;span&gt;.&lt;/span&gt;ts&#xA;            &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;effects&lt;span&gt;.&lt;/span&gt;ts&#xA;            &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;reducer&lt;span&gt;.&lt;/span&gt;ts&#xA;            &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;selector&lt;span&gt;.&lt;/span&gt;ts&#xA;            &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;ts&#xA;            &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; index&lt;span&gt;.&lt;/span&gt;ts&#xA;        &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; core&lt;span&gt;.&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;ts&#xA;        &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; core&lt;span&gt;.&lt;/span&gt;reducer&lt;span&gt;.&lt;/span&gt;ts&#xA;        &lt;span&gt;|&lt;/span&gt;&lt;span&gt;-&lt;/span&gt; index&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;The starter app is using a &lt;code&gt;BehaviorSubject&lt;/code&gt; in &lt;code&gt;menu&lt;span&gt;-&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;service&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; to manage it&amp;#39;s state. This tutorial will walk you through migrating that to NgRx.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Let&amp;#39;s start with creating the state object for menus. Open &lt;code&gt;menus&lt;span&gt;.&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/menus/menus.state.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; MenuItem &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../../models&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;MenusState&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  menuItems&lt;span&gt;:&lt;/span&gt; MenuItem&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; initialState&lt;span&gt;:&lt;/span&gt; MenusState &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  menuItems&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s also create a barrel export in our &lt;code&gt;menus&lt;/code&gt; folder. Create &lt;code&gt;index&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/menus/index.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The interface &lt;code&gt;MenusState&lt;/code&gt; defines the type of object Menu&amp;#39;s state will have. The &lt;code&gt;initialState&lt;/code&gt;, on the other hand, represents the initial state of the state object when the store is first initialized.&lt;/p&gt;&lt;h4 id=&#34;Create-Core-State&#34;&gt;Create Core State&lt;/h4&gt;&lt;p&gt;To be able to access &lt;code&gt;MenusState&lt;/code&gt; from our Store, you will need to add it to your &lt;code&gt;CoreState&lt;/code&gt;&amp;#39;s state object. Open &lt;code&gt;core&lt;span&gt;.&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/core.state.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; MenusState &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;State&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  menus&lt;span&gt;:&lt;/span&gt; MenusState&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, you will need to define what Actions you need to handle. We will be following the Good Action Hygiene principle when writing our Actions.&lt;/p&gt;&lt;p&gt;On a high level, Good Action Hygiene recommends thinking of Actions as events instead of commands. Instead of &lt;code&gt;addMenuItem&lt;/code&gt; as the Action, use &lt;code&gt;addMenuItemFormSubmitted&lt;/code&gt;. This pattern also encourages dispatching specific Action instead of reusing the same Action and including the source as part of the Action type. The image below shows the anatomy of an Action&amp;#39;s type.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2EOftbMAcDK1OKqVxiHSO8/13acf843a2d8422f35eb4e0736e7abc2/03_ngrx-good-action-hygiene.png&#34; alt=&#34;Anatomy of an Action name&#34;/&gt;&lt;/p&gt;&lt;p&gt;Following this pattern makes it easier to debug as you have distinct Actions from each source. This lets you immediately know what event has just taken place and where it came from with a quick look at the devtools.&lt;/p&gt;&lt;p&gt;You can learn more about Good Action hygiene in this &lt;a href=&#34;https://indepth.dev/posts/1407/force-good-action-hygiene-and-write-less-actions-in-ngrx-with-the-prepared-events-pattern&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;blog post&lt;/a&gt; by Sameera Perera and Mike Ryan&amp;#39;s &lt;a href=&#34;https://youtu.be/JmnsEvoy-gY&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;talk&lt;/a&gt; at ng-conf 2018.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s start with user-initiated Actions. This would include adding a new menu item, updating an existing menu item, and deleting a current menu item. Open &lt;code&gt;menus&lt;span&gt;.&lt;/span&gt;actions&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/menus/menus.actions.ts&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; createAction&lt;span&gt;,&lt;/span&gt; props &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; BaseMenuItem&lt;span&gt;,&lt;/span&gt; MenuItem &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../../models&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; addMenuItemFormSubmitted &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Add Menu Page] Add Menu Item Form Submitted&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuItem&lt;span&gt;:&lt;/span&gt; BaseMenuItem &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; editMenuItemFormSubmitted &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Edit Menu Page] Edit Menu Item Form Submitted&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuItem&lt;span&gt;:&lt;/span&gt; MenuItem &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; deleteMenuItemInitiated &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Delete Menu Page] Delete Menu Item Initiated&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuId&lt;span&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will need to fetch the menus from our API as the app load. Let&amp;#39;s add an &lt;code&gt;appLoaded&lt;/code&gt; Action that will be dispatched when the app loads. Open &lt;code&gt;menus&lt;span&gt;.&lt;/span&gt;actions&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/menus/menus.actions.ts&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; createAction&lt;span&gt;,&lt;/span&gt; props &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; BaseMenuItem&lt;span&gt;,&lt;/span&gt; MenuItem &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../../models&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; appLoaded &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;[App] App Loaded&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; addMenuItemFormSubmitted &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Add Menu Page] Add Menu Item Form Submitted&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuItem&lt;span&gt;:&lt;/span&gt; BaseMenuItem &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; editMenuItemFormSubmitted &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Edit Menu Page] Edit Menu Item Form Submitted&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuItem&lt;span&gt;:&lt;/span&gt; MenuItem &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; deleteMenuItemInitiated &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Delete Menu Page] Delete Menu Item Initiated&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuId&lt;span&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s continue to other API-related Actions. Since calling an API could either succeed or fail, let&amp;#39;s add success and fail handlers for each API-related Action.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;You could do success and error handling in several different ways. What I&amp;#39;m showing you is just one way you could do this.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Open &lt;code&gt;menus&lt;span&gt;.&lt;/span&gt;actions&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/menus/menus.actions.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; createAction&lt;span&gt;,&lt;/span&gt; props &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; BaseMenuItem&lt;span&gt;,&lt;/span&gt; MenuItem &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../../models&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; appLoaded &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;[App] App Loaded&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; fetchMenuSuccess &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Menu API] Fetch Menu Success&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuItems&lt;span&gt;:&lt;/span&gt; MenuItem&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; fetchMenuFailed &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Menu API] Fetch Menu Failed&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; error&lt;span&gt;:&lt;/span&gt; &lt;span&gt;any&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; addMenuItemFormSubmitted &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Add Menu Page] Add Menu Item Form Submitted&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuItem&lt;span&gt;:&lt;/span&gt; BaseMenuItem &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; addMenuItemSuccess &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Menu API] Add Menu Item Success&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; addMenuItemFailed &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Menu API] Add Menu Item Failed&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; error&lt;span&gt;:&lt;/span&gt; &lt;span&gt;any&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; editMenuItemFormSubmitted &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Edit Menu Page] Edit Menu Item Form Submitted&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuItem&lt;span&gt;:&lt;/span&gt; MenuItem &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; editMenuItemSuccess &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Menu API] Edit Menu Item Success&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuItem&lt;span&gt;:&lt;/span&gt; MenuItem &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; editMenuItemFailed &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Menu API] Edit Menu Item Failed&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; error&lt;span&gt;:&lt;/span&gt; &lt;span&gt;any&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; deleteMenuItemInitiated &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Delete Menu Page] Delete Menu Item Initiated&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuId&lt;span&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; deleteMenuItemSuccess &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Menu API] Delete Menu Item Success&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuId&lt;span&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; deleteMenuItemFailed &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;[Menu API] Delete Menu Item Failed&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; error&lt;span&gt;:&lt;/span&gt; &lt;span&gt;any&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s also add this to the barrel export. Open &lt;code&gt;index&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/menus/index.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.actions&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will now update the current implementation in our application with these Actions for any state-related operations. You do this by injecting NgRx&amp;#39;s &lt;code&gt;Store&lt;/code&gt; in the component and calling its &lt;code&gt;dispatch&lt;/code&gt; function with the Action you want to execute.&lt;/p&gt;&lt;p&gt;Starting with &lt;code&gt;appLoaded&lt;/code&gt;, as this is called when the application first loads, let&amp;#39;s add this to your &lt;code&gt;AppComponent&lt;/code&gt;&amp;#39;s &lt;code&gt;ngOnInit&lt;/code&gt;. Open &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/app.component.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Component &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Store &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; appLoaded &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./core/state/menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  selector&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;app-root&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  templateUrl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;./app.component.html&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  styleUrls&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;./app.component.scss&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;AppComponent&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  title &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;spa-angular-typescript-dashboard&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; store&lt;span&gt;:&lt;/span&gt; Store&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;ngOnInit&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;dispatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;appLoaded&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Moving on to adding a menu item. Open &lt;code&gt;add&lt;span&gt;-&lt;/span&gt;item&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/features/menu/add-item/add-item.component.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Component &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Location &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/common&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; BaseMenuItem &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Store &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; addMenuItemFormSubmitted &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core/state/menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; MenuItemPlaceholder&lt;span&gt;:&lt;/span&gt; BaseMenuItem &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;French Fries&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  price&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;299.00&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  tagline&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Crispy goodness&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  description&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;A plate of light and crispy French fries using Idaho potatoes and peanut oil&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  image&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;https://as2.ftcdn.net/jpg/02/13/18/09/500_F_213180964_DfqvRIHj0D3t9duYUROXuQ011AgVJIaM.jpg&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  calories&lt;span&gt;:&lt;/span&gt; &lt;span&gt;410&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  category&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;sides&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  selector&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;app-add-item&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  templateUrl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;./add-item.component.html&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  styles&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&#xA;      :host {&#xA;        width: 100%;&#xA;        height: 100%;&#xA;      }&#xA;    &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;AddItemComponent&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  menuItem &lt;span&gt;=&lt;/span&gt; MenuItemPlaceholder&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; location&lt;span&gt;:&lt;/span&gt; Location&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; store&lt;span&gt;:&lt;/span&gt; Store&#xA;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;submit&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;menu&lt;span&gt;:&lt;/span&gt; BaseMenuItem&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;dispatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;addMenuItemFormSubmitted&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;        menuItem&lt;span&gt;:&lt;/span&gt; menu&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;cancel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;location&lt;span&gt;.&lt;/span&gt;&lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Deleting a menu item. Open &lt;code&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;item&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/features/menu/delete-item/delete-item.component.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Component &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Location &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/common&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; ActivatedRoute&lt;span&gt;,&lt;/span&gt; Router &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/router&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; map&lt;span&gt;,&lt;/span&gt; switchMap &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;rxjs/operators&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; MenusStateService &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Store &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; deleteMenuItemInitiated &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core/state/menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  selector&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;app-delete-item&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  templateUrl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;./delete-item.component.html&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  styleUrls&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;./delete-item.component.scss&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;DeleteItemComponent&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  menuItemId$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;activatedRoute&lt;span&gt;.&lt;/span&gt;params&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;params&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; params&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  menuItem$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;menuItemId$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;switchMap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;menusStateService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;selectMenuItem$&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; activatedRoute&lt;span&gt;:&lt;/span&gt; ActivatedRoute&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; location&lt;span&gt;:&lt;/span&gt; Location&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; router&lt;span&gt;:&lt;/span&gt; Router&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; menusStateService&lt;span&gt;:&lt;/span&gt; MenusStateService&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; store&lt;span&gt;:&lt;/span&gt; Store&#xA;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;deleteMenuItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;dispatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;deleteMenuItemInitiated&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuId&lt;span&gt;:&lt;/span&gt; id &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;cancel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;location&lt;span&gt;.&lt;/span&gt;&lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;navigateHome&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;router&lt;span&gt;.&lt;/span&gt;&lt;span&gt;navigate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;/menu&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Editing an existing menu item. Open &lt;code&gt;edit&lt;span&gt;-&lt;/span&gt;item&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/features/menu/edit-item/edit-item.component.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Component &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Location &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/common&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; ActivatedRoute &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/router&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; map&lt;span&gt;,&lt;/span&gt; switchMap&lt;span&gt;,&lt;/span&gt; tap &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;rxjs/operators&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; BaseMenuItem&lt;span&gt;,&lt;/span&gt; MenusStateService &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Store &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; editMenuItemFormSubmitted &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core/state/menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  selector&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;app-edit-item&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  templateUrl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;./edit-item.component.html&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  styles&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&#xA;      :host {&#xA;        width: 100%;&#xA;        height: 100%;&#xA;      }&#xA;    &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;EditItemComponent&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  menuItemId$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;activatedRoute&lt;span&gt;.&lt;/span&gt;params&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;params&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; params&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  menuItem$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;menuItemId$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;tap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;_id &lt;span&gt;=&lt;/span&gt; id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;switchMap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;menusStateService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;selectMenuItem$&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;private&lt;/span&gt; _id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; activatedRoute&lt;span&gt;:&lt;/span&gt; ActivatedRoute&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; location&lt;span&gt;:&lt;/span&gt; Location&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; menusStateService&lt;span&gt;:&lt;/span&gt; MenusStateService&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; store&lt;span&gt;:&lt;/span&gt; Store&#xA;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;cancel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;location&lt;span&gt;.&lt;/span&gt;&lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;submit&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;menu&lt;span&gt;:&lt;/span&gt; BaseMenuItem&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;dispatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;editMenuItemFormSubmitted&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;        menuItem&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;          &lt;span&gt;...&lt;/span&gt;menu&lt;span&gt;,&lt;/span&gt;&#xA;          id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;_id&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Before creating selectors for slices of the menu state, you must create a feature selector for menus to access the state object we defined in the States section. Open &lt;code&gt;menus&lt;span&gt;.&lt;/span&gt;selector&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/menus/menus.selector.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; createFeatureSelector&lt;span&gt;,&lt;/span&gt; createSelector &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; MenusState &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; selectMenus &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;createFeatureSelector&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;MenusState&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;menus&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can use the &lt;code&gt;createSelector&lt;/code&gt; method to select slices of the feature state using the feature selector. For menus, you only have one entry in our object which is &lt;code&gt;menuItems&lt;/code&gt;. Let&amp;#39;s create a selector to access that by returning &lt;code&gt;state&lt;span&gt;.&lt;/span&gt;menuItems&lt;/code&gt;. Open &lt;code&gt;menus&lt;span&gt;.&lt;/span&gt;selector&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and update it with the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state-ngrx/menus/menus.selector.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; createFeatureSelector&lt;span&gt;,&lt;/span&gt; createSelector &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; MenusState &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; selectMenus &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;createFeatureSelector&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;MenusState&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;menus&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; selectMenuItems &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createSelector&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  selectMenus&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;(&lt;/span&gt;state&lt;span&gt;:&lt;/span&gt; MenusState&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; state&lt;span&gt;.&lt;/span&gt;menuItems&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For pages like Menu Details, Edit Menu and Delete Menu, you&amp;#39;ll need to access a specific menu item from the Store. You can do this by passing the menu&amp;#39;s id as a prop to our selector and searching through our array of menu items. Open &lt;code&gt;menus&lt;span&gt;.&lt;/span&gt;selector&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state-ngrx/menus/menus.selector.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; createFeatureSelector&lt;span&gt;,&lt;/span&gt; createSelector &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; MenusState &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; selectMenus &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;createFeatureSelector&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;MenusState&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;menus&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; selectMenuItems &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createSelector&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  selectMenus&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;(&lt;/span&gt;state&lt;span&gt;:&lt;/span&gt; MenusState&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; state&lt;span&gt;.&lt;/span&gt;menuItems&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;selectMenuItem&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;props&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;createSelector&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;selectMenuItems&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;menuItems&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    menuItems&lt;span&gt;.&lt;/span&gt;&lt;span&gt;find&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;menuItem&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; menuItem&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;===&lt;/span&gt; props&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s also add the selector to the barrel export. Open &lt;code&gt;index&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/menus/index.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.actions&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.selector&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Similar to what you did with Actions, let&amp;#39;s update the application to get data required by the components using NgRx Selectors. You can use Selectors by injecting NgRx&amp;#39;s &lt;code&gt;Store&lt;/code&gt; and calling it&amp;#39;s &lt;code&gt;select&lt;/code&gt; function passing in the selector&amp;#39;s name, which returns the slice of the state that we need.&lt;/p&gt;&lt;p&gt;Starting with the main dashboard, open &lt;code&gt;menu&lt;span&gt;-&lt;/span&gt;items&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/features/menu/menu-items/menu-items.component.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Component &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; ActivatedRoute&lt;span&gt;,&lt;/span&gt; Router &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/router&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; RolesService &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Store &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; selectMenuItems &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core/state/menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  selector&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;app-menu-items&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  templateUrl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;./menu-items.component.html&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  styles&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&#xA;      :host {&#xA;        width: 100%;&#xA;        height: 100%;&#xA;      }&#xA;    &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MenuItemsComponent&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  menuItems$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;selectMenuItems&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  isAdmin$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;rolesService&lt;span&gt;.&lt;/span&gt;isAdmin$&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; router&lt;span&gt;:&lt;/span&gt; Router&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; activatedRoute&lt;span&gt;:&lt;/span&gt; ActivatedRoute&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; rolesService&lt;span&gt;:&lt;/span&gt; RolesService&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; store&lt;span&gt;:&lt;/span&gt; Store&#xA;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;addMenuItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;router&lt;span&gt;.&lt;/span&gt;&lt;span&gt;navigate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;add&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; relativeTo&lt;span&gt;:&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;activatedRoute &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Moving on to the Menu Details page. Here, we only need a specific menu&amp;#39;s data. Instead of using the &lt;code&gt;selectMenuItems&lt;/code&gt;, you will use &lt;code&gt;selectMenuItem&lt;/code&gt; and pass in the menu id from the route parameters. Open &lt;code&gt;menu&lt;span&gt;-&lt;/span&gt;item&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/features/menu/menu-item/menu-item.component.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Component &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Location &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/common&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; ActivatedRoute&lt;span&gt;,&lt;/span&gt; Router &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/router&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; map&lt;span&gt;,&lt;/span&gt; switchMap &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;rxjs/operators&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; RolesService &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Store &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; selectMenuItem &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core/state/menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  selector&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;app-menu-item&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  templateUrl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;./menu-item.component.html&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  styleUrls&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;./menu-item.component.scss&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MenuItemComponent&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  menuItemId$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;activatedRoute&lt;span&gt;.&lt;/span&gt;params&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;params&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; params&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  menuItem$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;menuItemId$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;switchMap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;selectMenuItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; id &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  isAdmin$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;rolesService&lt;span&gt;.&lt;/span&gt;isAdmin$&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; activatedRoute&lt;span&gt;:&lt;/span&gt; ActivatedRoute&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; router&lt;span&gt;:&lt;/span&gt; Router&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; location&lt;span&gt;:&lt;/span&gt; Location&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; rolesService&lt;span&gt;:&lt;/span&gt; RolesService&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; store&lt;span&gt;:&lt;/span&gt; Store&#xA;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;location&lt;span&gt;.&lt;/span&gt;&lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;navigateTo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;url&lt;span&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;router&lt;span&gt;.&lt;/span&gt;&lt;span&gt;navigateByUrl&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;router&lt;span&gt;.&lt;/span&gt;url&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;url&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Delete Menu Item Component, open &lt;code&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;item&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/features/menu/delete-item/delete-item.component.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Component &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Location &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/common&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; ActivatedRoute&lt;span&gt;,&lt;/span&gt; Router &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/router&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; map&lt;span&gt;,&lt;/span&gt; switchMap &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;rxjs/operators&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Store &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  deleteMenuItemInitiated&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  selectMenuItem&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core/state/menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  selector&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;app-delete-item&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  templateUrl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;./delete-item.component.html&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  styleUrls&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;./delete-item.component.scss&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;DeleteItemComponent&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  menuItemId$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;activatedRoute&lt;span&gt;.&lt;/span&gt;params&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;params&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; params&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  menuItem$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;menuItemId$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;switchMap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;selectMenuItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; id &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; activatedRoute&lt;span&gt;:&lt;/span&gt; ActivatedRoute&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; location&lt;span&gt;:&lt;/span&gt; Location&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; router&lt;span&gt;:&lt;/span&gt; Router&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; store&lt;span&gt;:&lt;/span&gt; Store&#xA;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;deleteMenuItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;dispatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;deleteMenuItemInitiated&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuId&lt;span&gt;:&lt;/span&gt; id &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;navigateHome&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;cancel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;location&lt;span&gt;.&lt;/span&gt;&lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;navigateHome&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;router&lt;span&gt;.&lt;/span&gt;&lt;span&gt;navigate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;/menu&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And finally, Edit Menu Item. Open &lt;code&gt;edit&lt;span&gt;-&lt;/span&gt;item&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/features/menu/edit-item/edit-item.component.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Component &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Location &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/common&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; ActivatedRoute &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/router&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; map&lt;span&gt;,&lt;/span&gt; switchMap&lt;span&gt;,&lt;/span&gt; tap &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;rxjs/operators&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; BaseMenuItem &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Store &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  editMenuItemFormSubmitted&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  selectMenuItem&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;src/app/core/state/menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  selector&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;app-edit-item&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  templateUrl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;./edit-item.component.html&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  styles&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&#xA;      :host {&#xA;        width: 100%;&#xA;        height: 100%;&#xA;      }&#xA;    &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;EditItemComponent&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  menuItemId$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;activatedRoute&lt;span&gt;.&lt;/span&gt;params&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;params&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; params&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  menuItem$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;menuItemId$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;tap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;_id &lt;span&gt;=&lt;/span&gt; id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;switchMap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;selectMenuItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; id &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;private&lt;/span&gt; _id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; activatedRoute&lt;span&gt;:&lt;/span&gt; ActivatedRoute&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; location&lt;span&gt;:&lt;/span&gt; Location&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; store&lt;span&gt;:&lt;/span&gt; Store&#xA;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;cancel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;location&lt;span&gt;.&lt;/span&gt;&lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;submit&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;menu&lt;span&gt;:&lt;/span&gt; BaseMenuItem&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;store&lt;span&gt;.&lt;/span&gt;&lt;span&gt;dispatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;editMenuItemFormSubmitted&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;        menuItem&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;          &lt;span&gt;...&lt;/span&gt;menu&lt;span&gt;,&lt;/span&gt;&#xA;          id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;_id&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;location&lt;span&gt;.&lt;/span&gt;&lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The reducer is where the state will be transformed based on the actions. For example, deleting a menu item will remove that item from the state, resulting in the UI getting updated to reflect that change.&lt;/p&gt;&lt;p&gt;We will modify the Store when we receive a successful response when fetching the menu items data, editing a menu item successfully, and deleting a menu item successfully. Open &lt;code&gt;menus&lt;span&gt;.&lt;/span&gt;reducer&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/menus/menus.reducer.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Action&lt;span&gt;,&lt;/span&gt; createReducer&lt;span&gt;,&lt;/span&gt; on &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; MenusActions &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.actions&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; initialState&lt;span&gt;,&lt;/span&gt; MenusState &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; menusReducer &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createReducer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  initialState&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;on&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenusActions&lt;span&gt;.&lt;/span&gt;fetchMenuSuccess&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;state&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; menuItems &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;...&lt;/span&gt;state&lt;span&gt;,&lt;/span&gt;&#xA;    menuItems&lt;span&gt;:&lt;/span&gt; menuItems&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;on&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenusActions&lt;span&gt;.&lt;/span&gt;editMenuItemSuccess&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;state&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; menuItem &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; menuItemIndex &lt;span&gt;=&lt;/span&gt; state&lt;span&gt;.&lt;/span&gt;menuItems&lt;span&gt;.&lt;/span&gt;&lt;span&gt;findIndex&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;(&lt;/span&gt;item&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; item&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;===&lt;/span&gt; menuItem&lt;span&gt;.&lt;/span&gt;id&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; updatedMenuItems &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;menuItems&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    updatedMenuItems&lt;span&gt;[&lt;/span&gt;menuItemIndex&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; menuItem&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;...&lt;/span&gt;state&lt;span&gt;,&lt;/span&gt;&#xA;      menuItems&lt;span&gt;:&lt;/span&gt; updatedMenuItems&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;on&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenusActions&lt;span&gt;.&lt;/span&gt;deleteMenuItemSuccess&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;state&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; menuId &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; menuItemIndex &lt;span&gt;=&lt;/span&gt; state&lt;span&gt;.&lt;/span&gt;menuItems&lt;span&gt;.&lt;/span&gt;&lt;span&gt;findIndex&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;(&lt;/span&gt;item&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; item&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;===&lt;/span&gt; menuId&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; updatedMenuItems &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;menuItems&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    updatedMenuItems&lt;span&gt;.&lt;/span&gt;&lt;span&gt;splice&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;menuItemIndex&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;...&lt;/span&gt;state&lt;span&gt;,&lt;/span&gt;&#xA;      menuItems&lt;span&gt;:&lt;/span&gt; updatedMenuItems&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;reducer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;state&lt;span&gt;:&lt;/span&gt; MenusState &lt;span&gt;|&lt;/span&gt; &lt;span&gt;undefined&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; action&lt;span&gt;:&lt;/span&gt; Action&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;menusReducer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;state&lt;span&gt;,&lt;/span&gt; action&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s break this down. &lt;code&gt;on&lt;/code&gt; refers to the listener, and the passed-in parameters are the action that it listens to and what function to execute when that action is executed.&lt;/p&gt;&lt;p&gt;Take the first one, for example, &lt;code&gt;MenusActions&lt;span&gt;.&lt;/span&gt;fetchMenuSuccess&lt;/code&gt; refers to the action that, when dispatched, will execute the function that is passed in as the second parameter. The function in the second parameter contains the logic to update the current state based on said Action and returns the modified state.&lt;/p&gt;&lt;h4 id=&#34;Create-Core-Reducer&#34;&gt;Create Core Reducer&lt;/h4&gt;&lt;p&gt;To use Menu&amp;#39;s Reducer, you will need to add the reducer to the &lt;code&gt;ActionReducerMap&lt;/code&gt; that will be used to initialize the &lt;code&gt;StoreModule&lt;/code&gt;. Open &lt;code&gt;core&lt;span&gt;.&lt;/span&gt;reducer&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/core.reducers.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; ActionReducerMap&lt;span&gt;,&lt;/span&gt; MetaReducer &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; State &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./core.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; MenusReducer &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus/menus.reducer&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; reducers&lt;span&gt;:&lt;/span&gt; ActionReducerMap&lt;span&gt;&amp;lt;&lt;/span&gt;State&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  menus&lt;span&gt;:&lt;/span&gt; MenusReducer&lt;span&gt;.&lt;/span&gt;reducer&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; metaReducers&lt;span&gt;:&lt;/span&gt; MetaReducer&lt;span&gt;&amp;lt;&lt;/span&gt;State&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create a barrel export for our &lt;code&gt;state&lt;/code&gt; directory with the following contents 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/index.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./core.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./core.reducer&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Configure-Store-Module&#34;&gt;Configure Store Module&lt;/h3&gt;&lt;p&gt;Initialize the &lt;code&gt;StoreModule&lt;/code&gt; passing the &lt;code&gt;reducers&lt;/code&gt; and &lt;code&gt;metaReducers&lt;/code&gt; in our &lt;code&gt;core&lt;span&gt;.&lt;/span&gt;reducers&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; defined in the previous section. Open &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;module&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/app.module.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; BrowserModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/platform-browser&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; NgModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; HttpClientModule&lt;span&gt;,&lt;/span&gt; &lt;span&gt;HTTP_INTERCEPTORS&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/common/http&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; AuthHttpInterceptor&lt;span&gt;,&lt;/span&gt; AuthModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/auth0-angular&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; StoreDevtoolsModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store-devtools&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; AppRoutingModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./app-routing.module&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; AppComponent &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./app.component&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; NavBarModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./shared&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; StoreModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; reducers&lt;span&gt;,&lt;/span&gt; metaReducers &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./core/state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;NgModule&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  imports&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    BrowserModule&lt;span&gt;,&lt;/span&gt;&#xA;    HttpClientModule&lt;span&gt;,&lt;/span&gt;&#xA;    AuthModule&lt;span&gt;.&lt;/span&gt;&lt;span&gt;forRoot&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;...&lt;/span&gt;environment&lt;span&gt;.&lt;/span&gt;auth&lt;span&gt;,&lt;/span&gt;&#xA;      httpInterceptor&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        allowedList&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;          &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;environment&lt;span&gt;.&lt;/span&gt;serverUrl&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/api/menu/items&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;environment&lt;span&gt;.&lt;/span&gt;serverUrl&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/api/menu/items/*&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    AppRoutingModule&lt;span&gt;,&lt;/span&gt;&#xA;    NavBarModule&lt;span&gt;,&lt;/span&gt;&#xA;    StoreDevtoolsModule&lt;span&gt;.&lt;/span&gt;&lt;span&gt;instrument&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;      maxAge&lt;span&gt;:&lt;/span&gt; &lt;span&gt;25&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      logOnly&lt;span&gt;:&lt;/span&gt; environment&lt;span&gt;.&lt;/span&gt;production&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    StoreModule&lt;span&gt;.&lt;/span&gt;&lt;span&gt;forRoot&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;reducers&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      metaReducers&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  declarations&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;AppComponent&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  bootstrap&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;AppComponent&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  providers&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      provide&lt;span&gt;:&lt;/span&gt; &lt;span&gt;HTTP_INTERCEPTORS&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      useClass&lt;span&gt;:&lt;/span&gt; AuthHttpInterceptor&lt;span&gt;,&lt;/span&gt;&#xA;      multi&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;AppModule&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Checkpoint:&lt;/strong&gt; You should see a list of menu items on your dashboard and navigating to the menu details page/edit/delete should display more information about each menu item. Only authenticated users with a &lt;code&gt;menu&lt;span&gt;-&lt;/span&gt;admin&lt;/code&gt; role can navigate to the create, update, and delete menu items part of the application. The &lt;code&gt;menu&lt;span&gt;-&lt;/span&gt;admin&lt;/code&gt; role bundles the necessary permissions to execute these write operations. Read more on how to configure role-based access control (RBAC) and how to create an admin user for this application in this &lt;a href=&#34;https://auth0.com/blog/node-js-and-typescript-tutorial-secure-an-express-api/#Configure-Role-Based-Access-Control--RBAC-&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;blogpost&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;As explained at the beginning of the post, Effects are where side effects of the Action are handled. For Menus, this will mostly be making an HTTP request to get data from the server or perform other CRUD operations.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s start with a simple effect that handles fetching the menu items from the API and updating the store with new data. Since this logic needs to be executed when the app loads and a new menu item is added successfully, you will pass in 2 actions - &lt;code&gt;MenusActions&lt;span&gt;.&lt;/span&gt;appLoaded&lt;span&gt;.&lt;/span&gt;type&lt;/code&gt; and &lt;code&gt;MenusActions&lt;span&gt;.&lt;/span&gt;addMenuItemSuccess&lt;/code&gt;. You will then &lt;code&gt;switchMap&lt;/code&gt; to the &lt;code&gt;apiService&lt;/code&gt; to get the menu items. If it&amp;#39;s successful, dispatch the &lt;code&gt;fecthMenuSuccess&lt;/code&gt; action with the menu items returned from the API which will update the store with this new data. If unsuccessful, it will jump to the &lt;code&gt;catchError&lt;/code&gt; block, which dispatches the &lt;code&gt;fetchMenuFailed&lt;/code&gt; action with the error thrown.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1Su3I5GfVvBSFwjltn1SO9/3ce9abb4b1e44940391ac9a9f11410e4/04_ngrx-fetch-menu-effects.png&#34; alt=&#34;Diagram of how the fetch menu effect works&#34;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Tip: add your &lt;code&gt;catchError&lt;/code&gt; to the inner observable in your &lt;code&gt;switchMap&lt;/code&gt; instead of on the main observable to prevent the action stream from being closed when an error is thrown&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Open &lt;code&gt;menus&lt;span&gt;.&lt;/span&gt;effects&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/menus/menus.effects.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Injectable &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Actions&lt;span&gt;,&lt;/span&gt; createEffect&lt;span&gt;,&lt;/span&gt; ofType &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/effects&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;of&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;rxjs&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; switchMap&lt;span&gt;,&lt;/span&gt; map&lt;span&gt;,&lt;/span&gt; catchError &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;rxjs/operators&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; ApiService &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../../services&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; MenusActions &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.actions&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Injectable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MenusEffects&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; actions$&lt;span&gt;:&lt;/span&gt; Actions&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;any&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; apiService&lt;span&gt;:&lt;/span&gt; ApiService&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  fetchMenus$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createEffect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;actions$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;// you can pass in multiple actions here that will trigger the same effect&lt;/span&gt;&#xA;      &lt;span&gt;ofType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenusActions&lt;span&gt;.&lt;/span&gt;appLoaded&lt;span&gt;.&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; MenusActions&lt;span&gt;.&lt;/span&gt;addMenuItemSuccess&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;switchMap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;apiService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getItems&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;menuItems&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;            MenusActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fetchMenuSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuItems&lt;span&gt;:&lt;/span&gt; menuItems &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;catchError&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;error&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;of&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenusActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fetchMenuFailed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; error&lt;span&gt;:&lt;/span&gt; error &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Following the same logic, let&amp;#39;s create effects for &lt;code&gt;addMenu&lt;/code&gt;, &lt;code&gt;editMenu&lt;/code&gt;, and &lt;code&gt;deleteMenu&lt;/code&gt;. Open &lt;code&gt;menus&lt;span&gt;.&lt;/span&gt;effects&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and update it with the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/menus/menus.effects.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Injectable &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Location &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/common&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Router &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/router&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Actions&lt;span&gt;,&lt;/span&gt; createEffect&lt;span&gt;,&lt;/span&gt; ofType &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/effects&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;of&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;rxjs&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; switchMap&lt;span&gt;,&lt;/span&gt; map&lt;span&gt;,&lt;/span&gt; tap&lt;span&gt;,&lt;/span&gt; catchError &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;rxjs/operators&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; ApiService &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../../services&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; MenusActions &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.actions&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;Injectable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MenusEffects&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; router&lt;span&gt;:&lt;/span&gt; Router&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; location&lt;span&gt;:&lt;/span&gt; Location&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; actions$&lt;span&gt;:&lt;/span&gt; Actions&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;any&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; apiService&lt;span&gt;:&lt;/span&gt; ApiService&#xA;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  fetchMenus$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createEffect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;actions$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;ofType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenusActions&lt;span&gt;.&lt;/span&gt;appLoaded&lt;span&gt;.&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; MenusActions&lt;span&gt;.&lt;/span&gt;addMenuItemSuccess&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;switchMap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;apiService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getItems&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;menuItems&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;            MenusActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fetchMenuSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuItems&lt;span&gt;:&lt;/span&gt; menuItems &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;catchError&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;error&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;of&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenusActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fetchMenuFailed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; error&lt;span&gt;:&lt;/span&gt; error &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  addMenu$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createEffect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;actions$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;ofType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenusActions&lt;span&gt;.&lt;/span&gt;addMenuItemFormSubmitted&lt;span&gt;.&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;switchMap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;action&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;apiService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;action&lt;span&gt;.&lt;/span&gt;menuItem&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;tap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;router&lt;span&gt;.&lt;/span&gt;&lt;span&gt;navigate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;/menu&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; MenusActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addMenuItemSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;catchError&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;error&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;of&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenusActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addMenuItemFailed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; error&lt;span&gt;:&lt;/span&gt; error &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  editMenu$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createEffect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;actions$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;ofType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenusActions&lt;span&gt;.&lt;/span&gt;editMenuItemFormSubmitted&lt;span&gt;.&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;switchMap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;action&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;apiService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;updateItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;action&lt;span&gt;.&lt;/span&gt;menuItem&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;tap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;location&lt;span&gt;.&lt;/span&gt;&lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;            MenusActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;editMenuItemSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuItem&lt;span&gt;:&lt;/span&gt; action&lt;span&gt;.&lt;/span&gt;menuItem &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;catchError&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;error&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;of&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenusActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;editMenuItemFailed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; error&lt;span&gt;:&lt;/span&gt; error &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;  deleteMenu$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createEffect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;actions$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;ofType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenusActions&lt;span&gt;.&lt;/span&gt;deleteMenuItemInitiated&lt;span&gt;.&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;switchMap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;action&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;apiService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;deleteItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;action&lt;span&gt;.&lt;/span&gt;menuId&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;tap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;router&lt;span&gt;.&lt;/span&gt;&lt;span&gt;navigate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;/menu&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;            MenusActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;deleteMenuItemSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; menuId&lt;span&gt;:&lt;/span&gt; action&lt;span&gt;.&lt;/span&gt;menuId &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;catchError&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;error&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;of&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenusActions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;deleteMenuItemFailed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; error&lt;span&gt;:&lt;/span&gt; error &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;Tip: You can add the following effect if you want to listen to every action that gets dispatched for debugging purposes (more on debugging in the devtools section) 👇&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;init$ &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createEffect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;actions$&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;tap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;action&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;console&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;action&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt; dispatch&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add &lt;code&gt;menus&lt;span&gt;-&lt;/span&gt;effects&lt;/code&gt; to menu directory&amp;#39;s barrel export. Open &lt;code&gt;index&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/core/state/menus/index.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.actions&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.selector&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./menus.effects&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Configure-Effects-Module&#34;&gt;Configure Effects Module&lt;/h4&gt;&lt;p&gt;You will then need to initialize NgRx&amp;#39;s &lt;code&gt;EffectsModule&lt;/code&gt; passing in all your feature Effects (in our case, just the &lt;code&gt;MenusEffects&lt;/code&gt; for now). Open &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;module&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt; and add the following code 👇&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/app/app.module.ts&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; BrowserModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/platform-browser&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; NgModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; HttpClientModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@angular/common/http&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; StoreDevtoolsModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store-devtools&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; StoreModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; EffectsModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@ngrx/effects&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; AppRoutingModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./app-routing.module&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; AppComponent &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./app.component&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; NavBarModule &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./shared&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; reducers&lt;span&gt;,&lt;/span&gt; metaReducers &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./core/state&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; MenusEffects &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;./core/state/menus&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;@&lt;span&gt;NgModule&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  imports&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    BrowserModule&lt;span&gt;,&lt;/span&gt;&#xA;    HttpClientModule&lt;span&gt;,&lt;/span&gt;&#xA;    AppRoutingModule&lt;span&gt;,&lt;/span&gt;&#xA;    NavBarModule&lt;span&gt;,&lt;/span&gt;&#xA;    StoreDevtoolsModule&lt;span&gt;.&lt;/span&gt;&lt;span&gt;instrument&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;      maxAge&lt;span&gt;:&lt;/span&gt; &lt;span&gt;25&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      logOnly&lt;span&gt;:&lt;/span&gt; environment&lt;span&gt;.&lt;/span&gt;production&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    StoreModule&lt;span&gt;.&lt;/span&gt;&lt;span&gt;forRoot&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;reducers&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      metaReducers&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;// ✨ New 👇&lt;/span&gt;&#xA;    EffectsModule&lt;span&gt;.&lt;/span&gt;&lt;span&gt;forRoot&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;MenusEffects&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  declarations&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;AppComponent&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  bootstrap&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;AppComponent&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  providers&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      provide&lt;span&gt;:&lt;/span&gt; &lt;span&gt;HTTP_INTERCEPTORS&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      useClass&lt;span&gt;:&lt;/span&gt; AuthHttpInterceptor&lt;span&gt;,&lt;/span&gt;&#xA;      multi&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;AppModule&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Checkpoint:&lt;/strong&gt; Executing any CRUD operations such as adding a new menu item and editting or deleting an existing menu item should make an API call to update the server&amp;#39;s database and also update the app&amp;#39;s state. Only authenticated users with a &lt;code&gt;menu&lt;span&gt;-&lt;/span&gt;admin&lt;/code&gt; role can create, update, and delete menu items. The &lt;code&gt;menu&lt;span&gt;-&lt;/span&gt;admin&lt;/code&gt; role bundles the necessary permissions to execute these write operations. Read more on how to configure role-based access control (RBAC) and how to create an admin user for this application in this &lt;a href=&#34;https://auth0.com/blog/node-js-and-typescript-tutorial-secure-an-express-api/#Configure-Role-Based-Access-Control--RBAC-&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;blogpost&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/state-management-in-angular-with-ngrx-1/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">See how it&#39;s easy to manage your Angular application&#39;s state using NgRx and learn how you can use NgRx with Auth0&#39;s SDK to handle user-related functionalities.</summary>
  </entry>
  <entry>
    <title>.NET 6 Highlights</title>
    <updated>2021-11-19T15:51:00Z</updated>
    <id>tag:auth0.com,2021-11-19:/blog/dotnet6-whats-new/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;With the release of .NET 6, Microsoft consolidates its plan to create a unified platform to develop applications for any device and operating system. Together with this vision, .NET 6 brings many new features aiming to simplify development and gain performance. Let&amp;#39;s take a quick look at the main points.&lt;/p&gt;&lt;h2 id=&#34;Unified-Platform-Support&#34;&gt;Unified Platform Support&lt;/h2&gt;&lt;p&gt;The vision of a &lt;a href=&#34;https://auth0.com/blog/dotnet-5-whats-new/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;unified platform for the .NET world started with .NET 5&lt;/a&gt;. That release was meant to be the unified successor of &lt;a href=&#34;https://auth0.com/blog/navigating-dotnet-maze/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the various .NET flavors: .NET Framework, .NET Standard, .NET Core, Mono&lt;/a&gt;, etc. Beyond this goal, .NET 5 wanted to be a development platform to create any kind of application for any platform. However, at that time, an important piece was missing to complete the puzzle: a unified framework to create cross-platform UIs. Now, with &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-10/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;.NET MAUI&lt;/a&gt;, i.e., the &lt;strong&gt;.NET Multi-platform App UI&lt;/strong&gt; framework, the puzzle is complete. Although at the time of writing &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-10/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;.NET MAUI is in preview&lt;/a&gt;, it is mature enough to be considered part of the .NET 6 release.&lt;/p&gt;&lt;p&gt;Now with .NET 6, you can really create the application you want and run it practically everywhere: from desktop to mobile, from the web to the cloud.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/GOa5gfL6LckpRRhqaBRJe/69341464075cbd46cf88fcbe36af4aa5/dotnet-unified-platform.png&#34; alt=&#34;.NET 6 unified platform&#34;/&gt;&lt;/p&gt;&lt;p&gt;[&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-6/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Source: Microsoft&lt;/em&gt;&lt;/a&gt;]&#xA;&lt;/p&gt;&lt;p&gt;In particular, the new &lt;a href=&#34;https://github.com/dotnet/maui&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;.NET MAUI&lt;/a&gt; framework allows you to build desktop and mobile native user interfaces with a single codebase.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4WkvXpMRwu7j5T82HiW04A/069649d85ea4e1def0831672b5fc8698/dotnet-maui-overview.png&#34; alt=&#34;.NET MAUI overview&#34;/&gt;&lt;/p&gt;&lt;p&gt;[&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/introducing-net-multi-platform-app-ui/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Source: Microsoft&lt;/em&gt;&lt;/a&gt;]&#xA;&lt;/p&gt;&lt;h2 id=&#34;Simplified-Development&#34;&gt;Simplified Development&lt;/h2&gt;&lt;p&gt;One of the main goals of the .NET 6 release is to provide developers with features that simplify their work. You can find support for simplified development throughout the platform, but three contexts are really exciting: new C# features, Hot Reload support, and minimal web APIs.&lt;/p&gt;&lt;h3 id=&#34;C--10-features&#34;&gt;C# 10 features&lt;/h3&gt;&lt;p&gt;.NET 6 brings you &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/welcome-to-csharp-10/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;C# 10 with plenty of new features&lt;/a&gt; that help you write code more easily. Let&amp;#39;s take a quick look at a few of them.&lt;/p&gt;&lt;h4 id=&#34;Global-and-implicit-usings&#34;&gt;Global and implicit usings&lt;/h4&gt;&lt;p&gt;As a C# developer, you know how annoying it is to declare the same namespace in every file of your project. Consider, for example, the &lt;code&gt;System&lt;/code&gt; namespace. Its use is very common, and I&amp;#39;m pretty sure you forget it all the time and let Visual Studio suggest it.&lt;/p&gt;&lt;p&gt;Now you can declare namespaces using a global &lt;code&gt;using&lt;/code&gt;, as shown in the following example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;global&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this declaration, you don&amp;#39;t need to insert the &lt;code&gt;using System&lt;span&gt;;&lt;/span&gt;&lt;/code&gt; declaration in all files anymore. You can declare a namespace through &lt;code&gt;global using&lt;/code&gt; in any file, and it will be available in the entire project.&lt;/p&gt;&lt;p&gt;If you prefer (and I think it&amp;#39;s a good practice), you can declare your namespaces in a file named &lt;code&gt;GlobalUsings&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;You can also take advantage of implicit &lt;code&gt;using&lt;/code&gt;s by configuring the &lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;ImplicitUsings&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; element in your &lt;code&gt;&lt;span&gt;.&lt;/span&gt;csproj&lt;/code&gt; file, as shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;PropertyGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;!-- ...existing properties... --&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;ImplicitUsings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;enable&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;ImplicitUsings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;PropertyGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This way, the compiler will automatically add the required &lt;code&gt;global using&lt;/code&gt; directives based on the type of your project.&lt;/p&gt;&lt;h4 id=&#34;New-namespace-syntax&#34;&gt;New namespace syntax&lt;/h4&gt;&lt;p&gt;You know that the usual way to declare a namespace is as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;Geometry&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Triangle&lt;/span&gt; &#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ...class members...&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can use the file-scoped namespace syntax to get the same result:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;namespace&lt;/span&gt; Geometry&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Triangle&lt;/span&gt; &#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// ...class members...&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this approach, everything you define in the current file belongs to the declared namespace. By removing a nesting level, you make the code a bit cleaner. However, you can&amp;#39;t create nested namespaces with this new syntax.&lt;/p&gt;&lt;h4 id=&#34;Natural-types-for-lambda-expressions&#34;&gt;Natural types for lambda expressions&lt;/h4&gt;&lt;p&gt;Consider the following assignment of a lambda expression to a variable:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;Func&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; parse &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; s&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Parse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You need to declare the target type of the lambda expression, &lt;code&gt;Func&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;span&gt;,&lt;/span&gt; int&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; in the example. Starting with C# 10, you can write the above code as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; parse &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; s&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Parse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The compiler will try to infer the &amp;#34;natural&amp;#34; type of the lambda expression.&lt;/p&gt;&lt;h3 id=&#34;Hot-Reload&#34;&gt;Hot Reload&lt;/h3&gt;&lt;p&gt;To improve the developer&amp;#39;s productivity, .NET 6 extends &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-6/#hot-reload&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the Hot Reload feature&lt;/a&gt; to Visual Studio and almost any type of project. It allows you to run an application in your development environment, make changes, and get the changes applied without stopping, rebuilding, and rerunning the application.&lt;/p&gt;&lt;p&gt;In previous .NET releases, this feature was available just for the .NET CLI via the &lt;code&gt;dotnet watch&lt;/code&gt; command. Not without &lt;a href=&#34;https://www.theverge.com/2021/10/22/22740701/microsoft-dotnet-hot-reload-removal-decision-open-source&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;some minor hiccups with the community&lt;/a&gt;, you can now benefit from it in &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/update-on-net-hot-reload-progress-and-visual-studio-2022-highlights/#improved-user-experience-in-visual-studio-2022&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Visual Studio 2022&lt;/a&gt; as well by simply clicking a button:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3wu09sA8C4IQ5uKfmGoITK/e13d618f3f497e72281665de780b472d/vs2022-hot-reload-button.png&#34; alt=&#34;Visual Studio 2022 Hot Reload button&#34;/&gt;&lt;/p&gt;&lt;p&gt;[&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/update-on-net-hot-reload-progress-and-visual-studio-2022-highlights/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Source: Microsoft&lt;/em&gt;&lt;/a&gt;]&#xA;&lt;/p&gt;&lt;h3 id=&#34;Minimal-web-APIs&#34;&gt;Minimal web APIs&lt;/h3&gt;&lt;p&gt;One astonishing feature introduced by .NET 6 to simplify your code is &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;minimal web APIs&lt;/a&gt;. Along the lines of top-level statements, now you can build a fully working web API application with a few lines of code. Consider the following sample:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;//Program.cs&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; app &lt;span&gt;=&lt;/span&gt; WebApplication&lt;span&gt;.&lt;/span&gt;&lt;span&gt;CreateBuilder&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;args&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapGet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is all the code you need to run a simple &lt;em&gt;Hello World!&lt;/em&gt; web API.&lt;/p&gt;&lt;p&gt;If you have some experience building web APIs with ASP.NET Core, you know that you usually need a more articulate project. You need at least a &lt;code&gt;Program&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; file with the setup code for the application, a &lt;code&gt;Startup&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; file where you configure your API, and a controller class defining the API routes and implementing the endpoints.&lt;/p&gt;&lt;p&gt;That&amp;#39;s a lot of simplification!&lt;/p&gt;&lt;h2 id=&#34;Performance-Improvements&#34;&gt;Performance Improvements&lt;/h2&gt;&lt;p&gt;In the last years, the .NET team put a lot of effort into improving the platform performance in compiling and execution time and reducing memory consumption. With .NET 6, you can appreciate these improvements in many parts of the framework. For example, the effort to &lt;a href=&#34;https://github.com/dotnet/core/issues/5510&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;improve inner-loop performance&lt;/a&gt; in building .NET projects has given awesome results, as you can see from the following diagram:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2ZVS4o4DKc6OroBO0Lb76b/187a5cbf18d934d9a1cefae71f1535f5/dotnet6-build-improvements.png&#34; alt=&#34;dotnet6-build-improvements&#34;/&gt;&lt;/p&gt;&lt;p&gt;[&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-2/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Source: Microsoft&lt;/em&gt;&lt;/a&gt;]&#xA;&lt;/p&gt;&lt;p&gt;Other performance improvements include the IO subsystem. For example, the &lt;code&gt;FileStream&lt;/code&gt; class &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/file-io-improvements-in-dotnet-6/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;was almost completely rewritten&lt;/a&gt; with amazing results even with respect to .NET 5, as the following table summarizes for the writing operation:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6RgFjbKytdIQk6pHtEaHxT/1d524bb8a02e4688979d71f3151aef3f/filestream-performance-improvement.png&#34; alt=&#34;FileStream performance improvement&#34;/&gt;&lt;/p&gt;&lt;p&gt;[&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-6/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Source: Microsoft&lt;/em&gt;&lt;/a&gt;]&#xA;&lt;/p&gt;&lt;p&gt;You can check out &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-6/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;a detailed report on performance improvements in .NET 6&lt;/a&gt; with related benchmarks for more information.&lt;/p&gt;&lt;h2 id=&#34;Summary&#34;&gt;Summary&lt;/h2&gt;&lt;p&gt;This quick overview of .NET 6 shows that this is a consolidation release of the .NET platform. It aims to complete the unified platform vision started with .NET 5, improves the internals of the platform to provide the best performance, and starts a process of development simplification that probably will go further in future releases.&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;Aside--Securing-ASP-NET-Core-with-Auth0&#34;&gt;Aside: Securing ASP.NET Core with Auth0&lt;/h2&gt;&lt;p&gt;Securing ASP.NET Core applications with Auth0 is easy and brings a lot of great features to the table. With &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0&lt;/a&gt;, you only have to write a few lines of code to get a solid &lt;a href=&#34;https://auth0.com/user-management&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;identity management solution&lt;/a&gt;, &lt;a href=&#34;https://auth0.com/docs/sso/single-sign-on&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;single sign-on&lt;/a&gt;, support for &lt;a href=&#34;https://auth0.com/docs/identityproviders&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;social identity providers (like Facebook, GitHub, Twitter, etc.)&lt;/a&gt;, and support for &lt;a href=&#34;https://auth0.com/enterprise&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;enterprise identity providers (like Active Directory, LDAP, SAML, custom, etc.)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;On ASP.NET Core, you need &lt;a href=&#34;https://auth0.com/docs/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;to create an API in your Auth0 Management Dashboard&lt;/a&gt; and change a few things on your code. To create an API, you need to &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free Auth0 account&lt;/a&gt;. After that, you need to go to &lt;a href=&#34;https://manage.auth0.com/#/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the API section of the dashboard&lt;/a&gt; and click on &amp;#34;Create API&amp;#34;. On the dialog shown, you can set the &lt;em&gt;Name&lt;/em&gt; of your API as &amp;#34;Books&amp;#34;, the &lt;em&gt;Identifier&lt;/em&gt; as &amp;#34;&lt;a href=&#34;http://books.mycompany.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://books.mycompany.com&lt;/a&gt;&amp;#34;, and leave the &lt;em&gt;Signing Algorithm&lt;/em&gt; as &amp;#34;RS256&amp;#34;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6HrObJ2eGY7YehLzbBM0sH/066be814a124d98f03224d9b177caa22/net-core-2_creating-api-on-auth0.png&#34; alt=&#34;Creating API on Auth0&#34;/&gt;&lt;/p&gt;&lt;p&gt;After that, you have to add the call to &lt;code&gt;services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; in the &lt;code&gt;&lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method of the &lt;code&gt;Startup&lt;/code&gt; class as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; authority &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; audience &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Audience&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;DefaultAuthenticateScheme &lt;span&gt;=&lt;/span&gt; JwtBearerDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;DefaultChallengeScheme &lt;span&gt;=&lt;/span&gt; JwtBearerDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddJwtBearer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;Authority &lt;span&gt;=&lt;/span&gt; authority&lt;span&gt;;&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;Audience &lt;span&gt;=&lt;/span&gt; audience&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the body of the &lt;code&gt;&lt;span&gt;Configure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method of the &lt;code&gt;Startup&lt;/code&gt; class, you also need to add an invocation to &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; as shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseRouting&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseEndpoints&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;endpoints &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    endpoints&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapControllers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;Make sure you invoke these methods in the order shown above. It is essential so that everything works properly.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Finally, add the following element to the &lt;code&gt;appsettings&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; configuration file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Logging&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ...&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Domain&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_DOMAIN&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Audience&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_AUDIENCE&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Replace the placeholders &lt;code&gt;&lt;span&gt;YOUR_DOMAIN&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;YOUR_AUDIENCE&lt;/span&gt;&lt;/code&gt; with the actual values for the domain that you specified when creating your Auth0 account and the &lt;em&gt;Identifier&lt;/em&gt; you assigned to your API.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/dotnet6-whats-new/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">What&#39;s new in .NET 6? What are the main relevant features brought by the new version of the .NET platform? Let&#39;s take a quick look.</summary>
  </entry>
  <entry>
    <title>Using Next.js and Auth0 with Supabase</title>
    <updated>2021-11-17T16:03:00Z</updated>
    <id>tag:auth0.com,2021-11-17:/blog/using-nextjs-and-auth0-with-supabase/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;h2 id=&#34;Overview&#34;&gt;Overview&lt;/h2&gt;&lt;p&gt;In this article, we are going to explore using &lt;a href=&#34;https://nextjs.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Next.js&lt;/a&gt;, &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0&lt;/a&gt;, and &lt;a href=&#34;https://supabase.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Supabase&lt;/a&gt; to build a classic Todo app. Each user will only be able to see their own todos, so we will need to implement authentication, authorization, and a database.&lt;/p&gt;&lt;p&gt;This article will cover:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;configuring Auth0, Next.js, and Supabase to work together seamlessly&lt;/li&gt;&lt;li&gt;using the &lt;code&gt;nextjs&lt;span&gt;-&lt;/span&gt;auth0&lt;/code&gt; library for authentication&lt;/li&gt;&lt;li&gt;implementing Row Level Security (RLS) and policies for authorization&lt;/li&gt;&lt;li&gt;what a JWT is and how to sign our own&lt;/li&gt;&lt;li&gt;using PostgreSQL Functions to extract values from a JWT&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The final version of the Todo app code can be found &lt;a href=&#34;https://github.com/auth0-blog/auth0-supabase&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;This article does not assume prior experience with any of these technologies. However, you will need &lt;a href=&#34;https://nodejs.org/en/download/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Node.js&lt;/a&gt; installed to follow along. In addition, plan to have accounts for the managed services in the section below (Auth0 and Supabase). Both are free as of this writing and don&amp;#39;t require a credit card.&lt;/p&gt;&lt;h2 id=&#34;Stack&#34;&gt;Stack&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Next.js&lt;/strong&gt; is a React framework that makes building efficient web apps super easy. It also gives us the ability to write server-side logic — which we will need to ensure our application is secure — without needing to maintain our own server.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Auth0&lt;/strong&gt; is an authentication and authorization solution that makes managing users and securing applications a breeze. It is an extremely battle-tested and mature solution for auth.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Supabase&lt;/strong&gt; is an open-source backend-as-a-service, which makes it possible to build an application in a weekend and scale to millions. It is a convenient wrapper around a collection of open source tools that enable database storage, file storage, authentication, authorization, and real-time subscriptions. While these are all great features, this article will only use database storage and authorization.&lt;/p&gt;&lt;p&gt;&amp;#34;Wait, if Supabase handles auth, why are we using Auth0?&amp;#34;&lt;/p&gt;&lt;p&gt;One of the real strengths of Supabase is the lack of vendor lockin. Maybe you already have users in Auth0, your company has a lot of experience with it, or you&amp;#39;re interacting with other applications that use it. Any of the Supabase components can be swapped out for a similar service and hosted anywhere.&lt;/p&gt;&lt;p&gt;So let&amp;#39;s do just that!&lt;/p&gt;&lt;h2 id=&#34;Auth0&#34;&gt;Auth0&lt;/h2&gt;&lt;p&gt;The first thing we need to do is sign up for a free account with &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0&lt;/a&gt;. Once at the dashboard, we need to create a new &lt;code&gt;Tenant&lt;/code&gt; for our project.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A tenant is a way of isolating our users and settings from other applications we have with Auth0.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Click the name of your account in the top left, and then select &lt;code&gt;Create tenant&lt;/code&gt; from the dropdown.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6q8TslJ4RHXYLN9gLHBBrD/e0391ad0f255cd966c85c3383e116ebe/01_supabase.png&#34; alt=&#34;Create tenant from Auth0 dashboard&#34;/&gt;&lt;/p&gt;&lt;p&gt;Give your tenant a unique &lt;code&gt;Domain&lt;/code&gt;, set the &lt;code&gt;Region&lt;/code&gt; closest to you, and leave the &lt;code&gt;Environment Tag&lt;/code&gt; set to &lt;code&gt;Development&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2wyQwGyJfbHMBJmnooUCvW/0e58c38c3ffd35c3e2b20ef6707dbd96/02_supabase.png&#34; alt=&#34;Auth0 tenant settings&#34;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;In a production application, you want your region to be as close as possible to the majority of your users.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Next, we want to create an Application. Select &lt;code&gt;Applications&lt;/code&gt; &amp;gt; &lt;code&gt;Applications&lt;/code&gt; from the sidebar menu, and click &lt;code&gt;&lt;span&gt;+&lt;/span&gt; Create Application&lt;/code&gt;. We want to give it a name (this can be the same as the Tenant) and select &lt;code&gt;Regular Web Applications&lt;/code&gt;. Click &lt;code&gt;Create&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/64sx7MYchwYOIh9C5CP74o/cbb0647dfb5b3100e61b88ee175c30d0/03_supabase.png&#34; alt=&#34;Auth0 application settings&#34;/&gt;&lt;/p&gt;&lt;p&gt;From the application&amp;#39;s page, you are redirected to select the &lt;code&gt;Settings&lt;/code&gt; tab and scroll down to the &lt;code&gt;Application URIs&lt;/code&gt; section.&lt;/p&gt;&lt;p&gt;Add the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Allowed Callback URLs&lt;/code&gt;: &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;auth&lt;span&gt;/&lt;/span&gt;callback&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Allowed Logout URLs&lt;/code&gt;: &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Go to &lt;code&gt;Advanced Settings&lt;/code&gt; &amp;gt; &lt;code&gt;OAuth&lt;/code&gt; and confirm the &lt;code&gt;&lt;span&gt;JSON&lt;/span&gt; Web &lt;span&gt;Token&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;JWT&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; Signature Algorithm&lt;/code&gt; is set to &lt;code&gt;&lt;span&gt;RS256&lt;/span&gt;&lt;/code&gt; and that &lt;code&gt;&lt;span&gt;OIDC&lt;/span&gt; Conformant&lt;/code&gt; is &lt;code&gt;enabled&lt;/code&gt;. Be sure to save your changes.&lt;/p&gt;&lt;p&gt;Awesome. We now have an Auth0 instance configured to handle authentication for our application. So let&amp;#39;s build an app!&lt;/p&gt;&lt;p&gt;While we could use any web application framework for this example, I am going to use Next.js. It gives us a super-efficient React application and includes file-based routing out of the box. In addition, it allows us to run server-side logic while building our app with &lt;code&gt;getStaticProps&lt;/code&gt; and (when the user requests a page) with the &lt;code&gt;getServerSideProps&lt;/code&gt; function. We will need to do things like authentication server-side, but we don&amp;#39;t want the hassle of setting up, maintaining, and paying for another server.&lt;/p&gt;&lt;h2 id=&#34;Next-js&#34;&gt;Next.js&lt;/h2&gt;&lt;p&gt;The fastest way to create a Next.js application is using the &lt;code&gt;create&lt;span&gt;-&lt;/span&gt;next&lt;span&gt;-&lt;/span&gt;app&lt;/code&gt; package:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;npx create-next-app supabase-auth0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Replace the contents of &lt;code&gt;pages&lt;span&gt;/&lt;/span&gt;index&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; with:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/index.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; styles &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../styles/Home.module.css&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;Index&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;styles&lt;span&gt;.&lt;/span&gt;container&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Working!&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; Index&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run the project in Development mode:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;npm&lt;/span&gt; run dev&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And confirm it is working at &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;h2 id=&#34;Authentication&#34;&gt;Authentication&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s integrate the &lt;code&gt;nextjs&lt;span&gt;-&lt;/span&gt;auth0&lt;/code&gt; package. This is a convenient wrapper around the Auth0 JS SDK but specifically built for Next.js:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;npm&lt;/span&gt; i @auth0/nextjs-auth0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create a new folder at &lt;code&gt;pages&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;auth&lt;span&gt;/&lt;/span&gt;&lt;/code&gt; and add a file called &lt;code&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;auth0&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; with the following content:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/api/auth/[...auth0].js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; handleAuth &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/nextjs-auth0&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;handleAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;The &lt;code&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;auth0&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; is a catch all route. This means that any url that starts with &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;auth0&lt;/code&gt; will load this component — &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;auth0&lt;/code&gt;, &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;auth0&lt;span&gt;/&lt;/span&gt;login&lt;/code&gt;, &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;auth0&lt;span&gt;/&lt;/span&gt;some&lt;span&gt;/&lt;/span&gt;deeply&lt;span&gt;/&lt;/span&gt;nested&lt;span&gt;/&lt;/span&gt;url&lt;/code&gt; etc.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This is one of those awesome things &lt;code&gt;nextjs&lt;span&gt;-&lt;/span&gt;auth0&lt;/code&gt; gives us for free! Calling &lt;code&gt;&lt;span&gt;handleAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; automatically creates a collection of convenient routes — such as &lt;code&gt;&lt;span&gt;/&lt;/span&gt;login&lt;/code&gt; and &lt;code&gt;&lt;span&gt;/&lt;/span&gt;logout&lt;/code&gt; — and all the necessary logic for handling tokens and sessions. There&amp;#39;re no extra steps required besides calling this method.&lt;/p&gt;&lt;p&gt;Replace the contents of &lt;code&gt;pages&lt;span&gt;/&lt;/span&gt;_app&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; with:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/_app.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; React &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; UserProvider &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/nextjs-auth0&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; Component&lt;span&gt;,&lt;/span&gt; pageProps &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;UserProvider&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;pageProps&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;UserProvider&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; App&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create a &lt;code&gt;&lt;span&gt;.&lt;/span&gt;env&lt;span&gt;.&lt;/span&gt;local&lt;/code&gt; file in your root project folder and add:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;AUTH0_SECRET&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;generate&lt;span&gt;-&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;below&#xA;&lt;span&gt;AUTH0_BASE_URL&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&#xA;&lt;span&gt;AUTH0_ISSUER_BASE_URL&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;name&lt;span&gt;-&lt;/span&gt;&lt;span&gt;of&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;your&lt;span&gt;-&lt;/span&gt;tenant&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;region&lt;span&gt;-&lt;/span&gt;you&lt;span&gt;-&lt;/span&gt;selected&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;com&#xA;&lt;span&gt;AUTH0_CLIENT_ID&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;get&lt;span&gt;-&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;auth0&lt;span&gt;-&lt;/span&gt;dashboard&#xA;&lt;span&gt;AUTH0_CLIENT_SECRET&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;get&lt;span&gt;-&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;auth0&lt;span&gt;-&lt;/span&gt;dashboard&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;See &lt;a href=&#34;https://nextjs.org/docs/basic-features/environment-variables&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the Next.js documentation for Environment variables&lt;/a&gt; to learn more.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Generate a secure &lt;code&gt;&lt;span&gt;AUTH0_SECRET&lt;/span&gt;&lt;/code&gt; by running:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;node -e &lt;span&gt;&amp;#34;console.log(crypto.randomBytes(32).toString(&amp;#39;hex&amp;#39;))&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;AUTH0_CLIENT_ID&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;AUTH0_CLIENT_SECRET&lt;/span&gt;&lt;/code&gt; can be found at &lt;code&gt;Applications &lt;span&gt;&amp;gt;&lt;/span&gt; Settings &lt;span&gt;&amp;gt;&lt;/span&gt; Basic Information&lt;/code&gt; in the Auth0 Dashboard.&lt;/p&gt;&lt;p&gt;You will need to quit the Next.js server and re-run the &lt;code&gt;npm run dev&lt;/code&gt; command anytime new environment variables are added to the &lt;code&gt;&lt;span&gt;.&lt;/span&gt;env&lt;span&gt;.&lt;/span&gt;local&lt;/code&gt; file&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Let&amp;#39;s update our &lt;code&gt;pages&lt;span&gt;/&lt;/span&gt;index&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; file to add the ability to sign in and out:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/index.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; styles &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../styles/Home.module.css&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; useUser &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/nextjs-auth0&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; Link &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;next/link&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;Index&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; user &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;useUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;styles&lt;span&gt;.&lt;/span&gt;container&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;user &lt;span&gt;?&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;          Welcome &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;}&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;/api/auth/logout&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;            &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Logout&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;/api/auth/login&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Login&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; Index&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are using the &lt;code&gt;&lt;span&gt;useUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; hook to get the &lt;code&gt;user&lt;/code&gt; object if they have signed in. If not, we are rendering a link to the Login page.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Next.js&amp;#39; &lt;code&gt;Link&lt;/code&gt; component is being used to enable client-side routing rather than needing to reload the entire page from the server.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;We can also add the ability to handle the &lt;code&gt;loading&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; states:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/index.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; styles &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../styles/Home.module.css&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; useUser &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/nextjs-auth0&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; Link &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;next/link&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;Index&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; user&lt;span&gt;,&lt;/span&gt; error&lt;span&gt;,&lt;/span&gt; isLoading &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;useUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;isLoading&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;styles&lt;span&gt;.&lt;/span&gt;container&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Loading...&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;error&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;styles&lt;span&gt;.&lt;/span&gt;container&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;error&lt;span&gt;.&lt;/span&gt;message&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// rest of component&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; Index&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We need our users to be signed in to see their &lt;code&gt;todos&lt;/code&gt; or add a new &lt;code&gt;todo&lt;/code&gt;. To accomplish this, we&amp;#39;ll protect this route — requiring the user to be signed in. We&amp;#39;ll also automatically redirect them to the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;login&lt;/code&gt; route if they are not.&lt;/p&gt;&lt;p&gt;Thankfully, the &lt;code&gt;nextjs&lt;span&gt;-&lt;/span&gt;auth0&lt;/code&gt; library makes this super simple with the &lt;code&gt;withPageAuthRequired&lt;/code&gt; function. We can tell Next.js to call this function on the server before rendering our page by setting it to the &lt;code&gt;getServerSideProps&lt;/code&gt; function.&lt;/p&gt;&lt;p&gt;Add the following to the &lt;code&gt;pages&lt;span&gt;/&lt;/span&gt;index&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// other imports&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; withPageAuthRequired &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/nextjs-auth0&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// rest of component&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; getServerSideProps &lt;span&gt;=&lt;/span&gt; &lt;span&gt;withPageAuthRequired&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// other export&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This function checks if we have a user signed in and handles redirecting them to the Login page if not. If we have a user, it automatically passes the &lt;code&gt;user&lt;/code&gt; object to our &lt;code&gt;Index&lt;/code&gt; component as a prop. Since this is happening on the server before our component is rendered, we no longer need to handle loading, error states, or whether or not the user is logged in. This means we can significantly clean up our rendering logic.&lt;/p&gt;&lt;p&gt;This is what our entire file should look like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/index.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; styles &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../styles/Home.module.css&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; withPageAuthRequired &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/nextjs-auth0&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; Link &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;next/link&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;Index&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; user &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;styles&lt;span&gt;.&lt;/span&gt;container&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        Welcome &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;}&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;/api/auth/logout&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Logout&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; getServerSideProps &lt;span&gt;=&lt;/span&gt; &lt;span&gt;withPageAuthRequired&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; Index&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Very clean!&lt;/p&gt;&lt;p&gt;We want to display a list of todos as the landing page, but first, we need somewhere to store them.&lt;/p&gt;&lt;h2 id=&#34;Supabase&#34;&gt;Supabase&lt;/h2&gt;&lt;p&gt;Head over to &lt;a href=&#34;http://app.supabase.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;app.supabase.io&lt;/a&gt; and click &lt;code&gt;Sign In&lt;/code&gt; to authenticate with GitHub. This will create a free Supabase account. From the dashboard, click &lt;code&gt;New project&lt;/code&gt; and choose your &lt;code&gt;Organization&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Enter a name, password and select a region geographically close to what you chose for your Auth0 region.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/23CToNqw6BxzPn4FZrIIuX/ab135e1e29289b0571819b8e39076fe1/04_supabase.png&#34; alt=&#34;New Supabase project settings&#34;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Make sure you choose a secure password, as this will also apply to your PostgreSQL Database.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;It will take a few minutes for Supabase to provision all the bits in the background, but this page conveniently displays all the values we need to get our Next.js app configured.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3ZcykZgerUbAcESpqzNPeV/1c21f08ef7cf4ce658be3f1e98fdb06a/05_supabase.png&#34; alt=&#34;Supabase app URL and secrets&#34;/&gt;&lt;/p&gt;&lt;p&gt;Add these values to the &lt;code&gt;&lt;span&gt;.&lt;/span&gt;env&lt;span&gt;.&lt;/span&gt;local&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;NEXT_PUBLIC_SUPABASE_URL&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;your&lt;span&gt;-&lt;/span&gt;url&#xA;&lt;span&gt;NEXT_PUBLIC_SUPABASE_KEY&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;your&lt;span&gt;-&lt;/span&gt;anon&lt;span&gt;-&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;key&#xA;&lt;span&gt;SUPABASE_SIGNING_SECRET&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;your&lt;span&gt;-&lt;/span&gt;jwt&lt;span&gt;-&lt;/span&gt;secret&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;Prepending an environment variable with &lt;code&gt;&lt;span&gt;NEXT_PUBLIC_&lt;/span&gt;&lt;/code&gt; makes it available in the Next.js client. All other values will only be available in &lt;code&gt;getStaticProps&lt;/code&gt;, &lt;code&gt;getServerSideProps&lt;/code&gt; and serverless functions in the &lt;code&gt;pages&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;&lt;/code&gt; directory.&lt;/p&gt;&lt;p&gt;Adding new values to the &lt;code&gt;&lt;span&gt;.&lt;/span&gt;env&lt;span&gt;.&lt;/span&gt;local&lt;/code&gt; file requires a restart of the Next.js dev server.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Hopefully, that stalled you long enough and provisioning to complete, and your Supabase project is ready to go.&lt;/p&gt;&lt;p&gt;Click the &lt;code&gt;Table editor&lt;/code&gt; icon in the sidebar menu and select &lt;code&gt;&lt;span&gt;+&lt;/span&gt; Create a &lt;span&gt;new&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5ejdPvTVZVhff4Po63TDDw/3a34b12025890bb8fec9a33f2391b567/06_supabase.png&#34; alt=&#34;Create new table button&#34;/&gt;&lt;/p&gt;&lt;p&gt;Create a &lt;code&gt;todo&lt;/code&gt; table and add columns for &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;user_id&lt;/code&gt; and &lt;code&gt;is_complete&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/72MqBhF1zbucc7sWQUniHO/8baee467f254a3825846d676b78f519d/07_supabase.png&#34; alt=&#34;New table settings&#34;/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;content&lt;/code&gt; will be the text displayed for our todo.&lt;/li&gt;&lt;li&gt;&lt;code&gt;user_id&lt;/code&gt; will be the user that owns the todo.&lt;/li&gt;&lt;li&gt;&lt;code&gt;is_complete&lt;/code&gt; will signify whether the todo is done yet. We are setting the default value to &lt;code&gt;&lt;span&gt;false&lt;/span&gt;&lt;/code&gt;, as we would assume for a new todo.&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Leave &lt;code&gt;Row Level Security&lt;/code&gt; disabled for now. We will worry about this later.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Click &lt;code&gt;Insert row&lt;/code&gt; to create some example &lt;code&gt;todos&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3JVxCHIhAZfQSyPAMMkRsQ/77db8be1d980cee17c45a3dc14543c9a/08_supabase.png&#34; alt=&#34;New row settings&#34;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;We can leave &lt;code&gt;user_id&lt;/code&gt; blank and the default value of &lt;code&gt;&lt;span&gt;false&lt;/span&gt;&lt;/code&gt; for &lt;code&gt;is_complete&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Let&amp;#39;s head back to our Next.js application and install the &lt;code&gt;supabase&lt;span&gt;-&lt;/span&gt;js&lt;/code&gt; library:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;npm&lt;/span&gt; i @supabase/supabase-js&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create a new folder called &lt;code&gt;utils&lt;/code&gt; and add a file called &lt;code&gt;supabase&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// utils/supabase.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; createClient &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@supabase/supabase-js&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;getSupabase&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; supabase &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    process&lt;span&gt;.&lt;/span&gt;env&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NEXT_PUBLIC_SUPABASE_URL&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    process&lt;span&gt;.&lt;/span&gt;env&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NEXT_PUBLIC_SUPABASE_KEY&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;return&lt;/span&gt; supabase&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; getSupabase &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;We are making this a function as we will need to extend it later.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This function uses the environment variables we declared earlier to create a new Supabase client. Let&amp;#39;s use our new client to fetch &lt;code&gt;todos&lt;/code&gt; in &lt;code&gt;pages&lt;span&gt;/&lt;/span&gt;index&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;We can pass a configuration object to the &lt;code&gt;withPageAuthRequired&lt;/code&gt; function and declare our own &lt;code&gt;getServerSideProps&lt;/code&gt; function, which will only run if the user is signed in.&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/index.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; getServerSideProps &lt;span&gt;=&lt;/span&gt; &lt;span&gt;withPageAuthRequired&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;async&lt;/span&gt; &lt;span&gt;getServerSideProps&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; supabase &lt;span&gt;=&lt;/span&gt; &lt;span&gt;getSupabase&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; data&lt;span&gt;:&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; supabase&lt;span&gt;.&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;todo&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      props&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We need to remember to import the &lt;code&gt;getSupabase&lt;/code&gt; function:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; getSupabase &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../utils/supabase&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And now we can iterate over our &lt;code&gt;todos&lt;/code&gt; and display them in our component:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;Index&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; user&lt;span&gt;,&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;styles&lt;span&gt;.&lt;/span&gt;container&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        Welcome &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;}&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;/api/auth/logout&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Logout&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todos&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;todo&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;content&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can also handle the case where there are no &lt;code&gt;todos&lt;/code&gt; to display:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;Index&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; user&lt;span&gt;,&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;styles&lt;span&gt;.&lt;/span&gt;container&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        Welcome &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;}&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;/api/auth/logout&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Logout&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todos&lt;span&gt;?.&lt;/span&gt;length &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        todos&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;todo&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;content&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;You have completed all todos!&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;The &lt;code&gt;todos&lt;span&gt;?.&lt;/span&gt;length&lt;/code&gt; statement is using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Optional Chaining&lt;/a&gt;. This is a fallback in case the &lt;code&gt;todos&lt;/code&gt; prop is &lt;code&gt;&lt;span&gt;undefined&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span&gt;null&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Our whole component should look something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/index.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; styles &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../styles/Home.module.css&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; withPageAuthRequired &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/nextjs-auth0&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; getSupabase &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../utils/supabase&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; Link &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;next/link&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;Index&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; user&lt;span&gt;,&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;styles&lt;span&gt;.&lt;/span&gt;container&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        Welcome &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;}&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;/api/auth/logout&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Logout&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todos&lt;span&gt;?.&lt;/span&gt;length &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        todos&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;todo&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;content&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;You have completed all todos!&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; getServerSideProps &lt;span&gt;=&lt;/span&gt; &lt;span&gt;withPageAuthRequired&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;async&lt;/span&gt; &lt;span&gt;getServerSideProps&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; supabase &lt;span&gt;=&lt;/span&gt; &lt;span&gt;getSupabase&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; data&lt;span&gt;:&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; supabase&lt;span&gt;.&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;todo&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      props&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; Index&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Awesome! We should now be seeing our todos in our Next.js app.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5yph3i8Ui8j99mmrDss4ml/5bbac527eb959eff4cf9fae9a19b80a1/09_supabase.png&#34; alt=&#34;List of todo items&#34;/&gt;&lt;/p&gt;&lt;p&gt;But wait, we see &lt;em&gt;all&lt;/em&gt; the todos.&lt;/p&gt;&lt;p&gt;We only want users to see &lt;em&gt;their&lt;/em&gt; todos. For this, we need to implement authorization. Let&amp;#39;s create a helper function in Postgres to extract the currently logged-in user from the request&amp;#39;s JWT.&lt;/p&gt;&lt;h2 id=&#34;PostgreSQL-Functions&#34;&gt;PostgreSQL Functions&lt;/h2&gt;&lt;p&gt;Head back to the Supabase dashboard, click &lt;code&gt;&lt;span&gt;SQL&lt;/span&gt;&lt;/code&gt; in the side panel and select &lt;code&gt;New query&lt;/code&gt;. This will create a snippet entitled &lt;code&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;sql&lt;/span&gt; snippet&lt;/code&gt;. Add the following SQL blob and click &lt;code&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;or&lt;/span&gt; &lt;span&gt;replace&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; auth&lt;span&gt;.&lt;/span&gt;user_id&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;returns&lt;/span&gt; &lt;span&gt;text&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; $$&#xA;  &lt;span&gt;select&lt;/span&gt; &lt;span&gt;nullif&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;current_setting&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;request.jwt.claim.userId&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;::&lt;span&gt;text&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;$$ &lt;span&gt;language&lt;/span&gt; &lt;span&gt;sql&lt;/span&gt; stable&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Okay, this one may look a little intimidating. Let&amp;#39;s break down the bits we need to understand:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;We are creating a new function called &lt;code&gt;user_id&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;auth&lt;span&gt;.&lt;/span&gt;&lt;/code&gt; part is just a way to namespace it as it is related to auth — also called a schema and is a convention in Postgres.&lt;/li&gt;&lt;li&gt;This function will return a &lt;code&gt;text&lt;/code&gt; value.&lt;/li&gt;&lt;li&gt;The body of the function is fetching the value from the &lt;code&gt;userId&lt;/code&gt; field of the &lt;code&gt;jwt&lt;/code&gt; that came along with the &lt;code&gt;request&lt;/code&gt;. We will talk about JWTs later in the article.&lt;/li&gt;&lt;li&gt;If there is no &lt;code&gt;request&lt;span&gt;.&lt;/span&gt;jwt&lt;span&gt;.&lt;/span&gt;claim&lt;span&gt;.&lt;/span&gt;userId&lt;/code&gt;, we are just returning an empty string — &lt;code&gt;&lt;span&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Not that scary!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Check out &lt;a href=&#34;https://www.youtube.com/watch?v=MJZCCpCYEqk&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this video on Postgres functions&lt;/a&gt; to learn more.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Let&amp;#39;s enable &lt;code&gt;Row Level Security&lt;/code&gt; and use our new function to ensure only users who own the &lt;code&gt;todo&lt;/code&gt; can see it.&lt;/p&gt;&lt;h2 id=&#34;Row-Level-Security&#34;&gt;Row Level Security&lt;/h2&gt;&lt;p&gt;Because Supabase is just a PostgreSQL Database under the hood, we can take advantage of a killer feature — Row Level Security (RLS). RLS allows us to write authorization rules in the database itself, which can be much more efficient, and much more secure!&lt;/p&gt;&lt;p&gt;Head back to the Supabase dashboard, and from the side panel, select &lt;code&gt;Authentication&lt;/code&gt; &amp;gt; &lt;code&gt;Policies&lt;/code&gt; and click &lt;code&gt;Enable &lt;span&gt;RLS&lt;/span&gt;&lt;/code&gt; for the &lt;code&gt;todo&lt;/code&gt; table.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3VSbRaEkQUdQcOuxilxpux/6a8a71cde38a10b35b423a10f7e659cf/09b_supabase.png&#34; alt=&#34;Supabase dashboard showing RLS enabled for todo table&#34;/&gt;&lt;/p&gt;&lt;p&gt;Now, if we refresh our application, we will see the empty state message.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2u6N6bHgfG6sm1sbpgr51l/c70b28db417814e6f8934b3f49b50f22/10_supabase.png&#34; alt=&#34;Empty todo list&#34;/&gt;&lt;/p&gt;&lt;p&gt;Where did our &lt;code&gt;todos&lt;/code&gt; go?&lt;/p&gt;&lt;p&gt;By default, RLS will deny access to all rows. If we want a user to see their &lt;code&gt;todos&lt;/code&gt;, we need to write a policy.&lt;/p&gt;&lt;p&gt;Back in the Supabase dashboard, click &lt;code&gt;New Policy&lt;/code&gt;, then &lt;code&gt;Create a policy &lt;span&gt;from&lt;/span&gt; scratch&lt;/code&gt; and fill in the following:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3wR5iw6ZEyrdn7ZdNdNsrW/a382ee739b0597dbbfa5428a71b2df1e/11_supabase.png&#34; alt=&#34;Policy settings for SELECT&#34;/&gt;&lt;/p&gt;&lt;p&gt;This might look a little unfamiliar, so let&amp;#39;s break it down.&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;We are giving our policy a &lt;code&gt;name&lt;/code&gt;. This can be anything.&lt;/li&gt;&lt;li&gt;We declare which actions we would like to enable. Since we want users to be able to read their own &lt;code&gt;todos&lt;/code&gt;, we are choosing &lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;We need to specify a condition that can be &lt;code&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span&gt;false&lt;/span&gt;&lt;/code&gt;. If it evaluates to &lt;code&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt;, the action will be allowed. Otherwise, it will continue to be denied.&lt;/li&gt;&lt;li&gt;We call our &lt;code&gt;auth&lt;span&gt;.&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; function to get the currently logged-in user&amp;#39;s &lt;code&gt;id&lt;/code&gt; and compare it to the &lt;code&gt;user_id&lt;/code&gt; column for this &lt;code&gt;todo&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;I recommend checking out &lt;a href=&#34;https://www.youtube.com/watch?v=Ow_Uzedfohk&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this video&lt;/a&gt; to learn more about how awesome and powerful Row Level Security is in Supabase.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Click &lt;code&gt;Review&lt;/code&gt; to see the SQL that is being generated for us.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3n5LovurNMA2Hz5R8nCphH/3ec72d6c5be7dfca3efb522ea46d47e2/12_supabase.png&#34; alt=&#34;Generated SQL for SELECT policy&#34;/&gt;&lt;/p&gt;&lt;p&gt;Not even scary. It has just formatted the fields we entered into the correct SQL syntax.&lt;/p&gt;&lt;p&gt;While we&amp;#39;re here, let&amp;#39;s add a policy for creating new &lt;code&gt;todos&lt;/code&gt;. This will be an &lt;code&gt;&lt;span&gt;INSERT&lt;/span&gt;&lt;/code&gt; action:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3aAUpryEo8sTGn0Dt2IrbF/c4fe30d560ed50f4a30105469f127254/13_supabase.png&#34; alt=&#34;Policy settings for INSERT&#34;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;While we probably want to permit users to perform all CRUD actions, it is good practice to specify separate policies rather than selecting &lt;code&gt;&lt;span&gt;ALL&lt;/span&gt;&lt;/code&gt;. This makes them easier to extend and remove in the future.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Our application does not yet need to be able to update or delete &lt;code&gt;todos&lt;/code&gt;; therefore, we will not create policies for these actions.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;It is good security practice to enable the minimum amount of permissions for the application to function. We can easily write policies for these actions in the future if we want to enable them.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Let&amp;#39;s see if we can view our todos yet by refreshing our Next.js app.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7rZX7pmjdogsOe1KAW8P0Z/f04bca604bc76bfa796c6bd8b720d252/14_supabase.png&#34; alt=&#34;Empty todo list&#34;/&gt;&lt;/p&gt;&lt;p&gt;Still no todos 🙁 Did we mess something up?&lt;/p&gt;&lt;p&gt;No! We just need to add a little bit more glue to transform the JWT that Auth0 is giving our Next.js application to the format that Supabase is expecting.&lt;/p&gt;&lt;h2 id=&#34;What-is-a-JWT-&#34;&gt;What is a JWT?&lt;/h2&gt;&lt;p&gt;To understand this problem, we must first understand what a JWT is. A JWT encodes a JSON object into a big string that we can use to send data between different services.&lt;/p&gt;&lt;p&gt;By default, the data in a JWT is not encrypted or private, just encoded.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Aditya Shukla wrote &lt;a href=&#34;https://medium.com/swlh/the-difference-between-encoding-encryption-and-hashing-878c606a7aff&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;a great article&lt;/a&gt; about the differences between encoding, encryption, and hashing. Give it a read to learn more.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2dyNvJiSFD9h999ZdC6jsN/be5270413ae2402f4faf9533d4eff7dc/15_supabase.png&#34; alt=&#34;Screenshot from JWT.io showing the encoded and decoded values of a JWT&#34;/&gt;&lt;/p&gt;&lt;p&gt;This is an example taken from &lt;a href=&#34;http://jwt.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;jwt.io&lt;/a&gt; — a great tool for working with JWTs. On the left, we can see the JWT value. On the right, we can see what each part represents when decoded. We have some header information about how the JWT was encoded, the payload of user data, and a signature that can be used to &lt;code&gt;verify&lt;/code&gt; the token.&lt;/p&gt;&lt;p&gt;Don&amp;#39;t put secret things in a JWT!!&lt;/p&gt;&lt;p&gt;The reason we can trust JWTs for authentication is that we can &lt;code&gt;sign&lt;/code&gt; it using a secret value. This value is run through an algorithm with the payload data, and a JWT string comes out the other side. We can use the signing secret to &lt;code&gt;verify&lt;/code&gt; the JWT on our server. This ensures that an attacker hasn&amp;#39;t tinkered with our token in transit. If they have, the value of the JWT will be different, and it will fail verification.&lt;/p&gt;&lt;p&gt;The only way it could be modified and pass the &lt;code&gt;verify&lt;/code&gt; step is if someone has your signing secret. This would be bad. And this is why we can only sign JWTs with our server — or in the case of Next.js, the &lt;code&gt;getStaticProps&lt;/code&gt;, &lt;code&gt;getServerSideProps&lt;/code&gt;, or API routes in the &lt;code&gt;pages&lt;span&gt;/&lt;/span&gt;api&lt;/code&gt; directory.&lt;/p&gt;&lt;p&gt;Never expose the signing secret to the client!!&lt;/p&gt;&lt;p&gt;Okay, so now that we understand JWTs, what is the problem?&lt;/p&gt;&lt;p&gt;The signing secret used by Auth0 does not match Supabase&amp;#39;s signing secret. While we&amp;#39;re not using Supabase for authentication, it still uses the secret to verify the JWT each time we request data. Neither of these services makes the signing secret&amp;#39;s value configurable.&lt;/p&gt;&lt;p&gt;To solve this problem, we can just grab the &lt;code&gt;sub&lt;/code&gt; property — the user&amp;#39;s ID — from Auth0 and &lt;code&gt;sign&lt;/code&gt; a new token using the signing secret that Supabase is expecting.&lt;/p&gt;&lt;h2 id=&#34;Signing-a-JWT&#34;&gt;Signing a JWT&lt;/h2&gt;&lt;p&gt;When working with JWTs, we want to use a well-trusted library from a reputable source. Auth0 has a very widely used and trusted one called &lt;code&gt;jsonwebtoken&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s install it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;npm&lt;/span&gt; i jsonwebtoken&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can use another hook that the &lt;code&gt;@auth0&lt;span&gt;/&lt;/span&gt;nextjs&lt;span&gt;-&lt;/span&gt;auth0&lt;/code&gt; library gives us to run some logic after the user signs in. This is called &lt;code&gt;afterCallback&lt;/code&gt; and can be passed as a configuration to our &lt;code&gt;handleAuth&lt;/code&gt; function. Let&amp;#39;s replace the contents of the &lt;code&gt;pages&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;auth&lt;span&gt;/&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;auth0&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; file with:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/api/auth/[...auth0].js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; handleAuth&lt;span&gt;,&lt;/span&gt; handleCallback &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/nextjs-auth0&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;afterCallback&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;req&lt;span&gt;,&lt;/span&gt; res&lt;span&gt;,&lt;/span&gt; session&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// do some stuff&lt;/span&gt;&#xA;  &lt;span&gt;// modify the session&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;return&lt;/span&gt; session&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;handleAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;async&lt;/span&gt; &lt;span&gt;callback&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;req&lt;span&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;try&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;await&lt;/span&gt; &lt;span&gt;handleCallback&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;req&lt;span&gt;,&lt;/span&gt; res&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; afterCallback &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;catch&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;error&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      res&lt;span&gt;.&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;error&lt;span&gt;.&lt;/span&gt;status &lt;span&gt;||&lt;/span&gt; &lt;span&gt;500&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;error&lt;span&gt;.&lt;/span&gt;message&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this function, we want to:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;get the user object from Auth0&amp;#39;s session&lt;/li&gt;&lt;li&gt;create a new payload&lt;/li&gt;&lt;li&gt;sign a new token using Supabase&amp;#39;s signing secret&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let&amp;#39;s extend our &lt;code&gt;afterCallback&lt;/code&gt; function to perform this logic:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/api/auth/[...auth0].js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// other imports&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; jwt &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;jsonwebtoken&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;afterCallback&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;req&lt;span&gt;,&lt;/span&gt; res&lt;span&gt;,&lt;/span&gt; session&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; payload &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    userId&lt;span&gt;:&lt;/span&gt; session&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;sub&lt;span&gt;,&lt;/span&gt;&#xA;    exp&lt;span&gt;:&lt;/span&gt; Math&lt;span&gt;.&lt;/span&gt;&lt;span&gt;floor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Date&lt;span&gt;.&lt;/span&gt;&lt;span&gt;now&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;/&lt;/span&gt; &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;60&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;60&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  session&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;accessToken &lt;span&gt;=&lt;/span&gt; jwt&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sign&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    payload&lt;span&gt;,&lt;/span&gt;&#xA;    process&lt;span&gt;.&lt;/span&gt;env&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SUPABASE_SIGNING_SECRET&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;return&lt;/span&gt; session&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;sub&lt;/code&gt; field represents Auth0&amp;#39;s unique ID for this user. Since this is the only value we actually need to tell Supabase who our user is, we can create a new payload that contains only this value.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;It is good security practice to only give things the minimum amount of data and permissions they need to handle the task.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Additionally, we are setting an expiry for our token — 1 hour. This means that if someone does get a hold of our token, they do not have access to our database indefinitely.&lt;/p&gt;&lt;p&gt;Lastly, we are signing a new token with that payload, using the &lt;code&gt;&lt;span&gt;SUPABASE_SIGNING_SECRET&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Awesome! Our whole file should look something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/api/auth/[...auth0].js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; handleAuth&lt;span&gt;,&lt;/span&gt; handleCallback &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/nextjs-auth0&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; jwt &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;jsonwebtoken&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;afterCallback&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;req&lt;span&gt;,&lt;/span&gt; res&lt;span&gt;,&lt;/span&gt; session&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; payload &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    userId&lt;span&gt;:&lt;/span&gt; session&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;sub&lt;span&gt;,&lt;/span&gt;&#xA;    exp&lt;span&gt;:&lt;/span&gt; Math&lt;span&gt;.&lt;/span&gt;&lt;span&gt;floor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Date&lt;span&gt;.&lt;/span&gt;&lt;span&gt;now&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;/&lt;/span&gt; &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;60&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;60&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  session&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;accessToken &lt;span&gt;=&lt;/span&gt; jwt&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sign&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    payload&lt;span&gt;,&lt;/span&gt;&#xA;    process&lt;span&gt;.&lt;/span&gt;env&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SUPABASE_SIGNING_SECRET&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;return&lt;/span&gt; session&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;handleAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;async&lt;/span&gt; &lt;span&gt;callback&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;req&lt;span&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;try&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;await&lt;/span&gt; &lt;span&gt;handleCallback&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;req&lt;span&gt;,&lt;/span&gt; res&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; afterCallback &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;catch&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;error&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      res&lt;span&gt;.&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;error&lt;span&gt;.&lt;/span&gt;status &lt;span&gt;||&lt;/span&gt; &lt;span&gt;500&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;error&lt;span&gt;.&lt;/span&gt;message&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s extend our &lt;code&gt;getSupabase&lt;/code&gt; function in &lt;code&gt;utils&lt;span&gt;/&lt;/span&gt;supabase&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; to accept an optional &lt;code&gt;access_token&lt;/code&gt; parameter.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// utils/supabase.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; createClient &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@supabase/supabase-js&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;getSupabase&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;access_token&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; supabase &lt;span&gt;=&lt;/span&gt; &lt;span&gt;createClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    process&lt;span&gt;.&lt;/span&gt;env&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NEXT_PUBLIC_SUPABASE_URL&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    process&lt;span&gt;.&lt;/span&gt;env&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NEXT_PUBLIC_SUPABASE_KEY&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;access_token&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    supabase&lt;span&gt;.&lt;/span&gt;auth&lt;span&gt;.&lt;/span&gt;&lt;span&gt;session&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;      access_token&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;return&lt;/span&gt; supabase&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; getSupabase &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we pass this function an &lt;code&gt;access_token&lt;/code&gt;, it will attach it to the Supabase session, which will go along for the ride when we request data from Supabase.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s extend our &lt;code&gt;getServerSideProps&lt;/code&gt; function in &lt;code&gt;pages&lt;span&gt;/&lt;/span&gt;index&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; to get the &lt;code&gt;accessToken&lt;/code&gt; from the session&amp;#39;s user, and pass it to the &lt;code&gt;getSupabase&lt;/code&gt; function:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/index.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; getServerSideProps &lt;span&gt;=&lt;/span&gt; &lt;span&gt;withPageAuthRequired&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;async&lt;/span&gt; &lt;span&gt;getServerSideProps&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; req&lt;span&gt;,&lt;/span&gt; res &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      user&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; accessToken &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; &lt;span&gt;getSession&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;req&lt;span&gt;,&lt;/span&gt; res&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;const&lt;/span&gt; supabase &lt;span&gt;=&lt;/span&gt; &lt;span&gt;getSupabase&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;accessToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; data&lt;span&gt;:&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; supabase&lt;span&gt;.&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;todo&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      props&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We also need to remember to add &lt;code&gt;getSession&lt;/code&gt; to the import from &lt;code&gt;@auth0&lt;span&gt;/&lt;/span&gt;nextjs&lt;span&gt;-&lt;/span&gt;auth0&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; withPageAuthRequired&lt;span&gt;,&lt;/span&gt; getSession &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/nextjs-auth0&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our whole component should look something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/index.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; styles &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../styles/Home.module.css&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; withPageAuthRequired&lt;span&gt;,&lt;/span&gt; getSession &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/nextjs-auth0&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; getSupabase &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../utils/supabase&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; Link &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;next/link&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;Index&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; user&lt;span&gt;,&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;styles&lt;span&gt;.&lt;/span&gt;container&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        Welcome &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;}&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;/api/auth/logout&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Logout&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todos&lt;span&gt;?.&lt;/span&gt;length &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        todos&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;todo&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;content&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;You have completed all todos!&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; getServerSideProps &lt;span&gt;=&lt;/span&gt; &lt;span&gt;withPageAuthRequired&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;async&lt;/span&gt; &lt;span&gt;getServerSideProps&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; req&lt;span&gt;,&lt;/span&gt; res &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      user&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; accessToken &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; &lt;span&gt;getSession&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;req&lt;span&gt;,&lt;/span&gt; res&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;const&lt;/span&gt; supabase &lt;span&gt;=&lt;/span&gt; &lt;span&gt;getSupabase&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;accessToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; data&lt;span&gt;:&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; supabase&lt;span&gt;.&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;todo&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      props&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; Index&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since Auth0&amp;#39;s &lt;code&gt;afterCallback&lt;/code&gt; function runs after the user signs in, we need to log out of our application by clicking the &lt;code&gt;Logout&lt;/code&gt; link on the landing page or manually navigating to &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;auth&lt;span&gt;/&lt;/span&gt;logout&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;This will sign us out and automatically redirect us to Auth0&amp;#39;s sign-in page.&lt;/p&gt;&lt;p&gt;Sign back in, and we should have our new JWT attached to our Auth0 session&amp;#39;s user.&lt;/p&gt;&lt;p&gt;Now when we refresh our application, we should finally see todos.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5driL3cnbUYrnzTMPBnBOK/902610989e531f3c7ea3b80a4310697f/17_supabase.png&#34; alt=&#34;Empty todo list&#34;/&gt;&lt;/p&gt;&lt;p&gt;Nope!&lt;/p&gt;&lt;p&gt;But we are very close. If we look at the &lt;code&gt;Table editor&lt;/code&gt; in the Supabase dashboard. Who is the user that owns the todos?&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/53Hn3LhbL6Vw9vMj1eSk6R/071d261e22d1155b535f111fad46684c/18_supabase.png&#34; alt=&#34;User ID null in Supabase Table Editor&#34;/&gt;&lt;/p&gt;&lt;p&gt;NULL!!&lt;/p&gt;&lt;p&gt;So we just need to find out what our current &lt;code&gt;user_id&lt;/code&gt; is and add it to those rows.&lt;/p&gt;&lt;p&gt;Head back to the Auth0 dashboard, click &lt;code&gt;User Management&lt;/code&gt; &amp;gt; &lt;code&gt;Users&lt;/code&gt; in the sidebar, and select your user.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/23UgAZaPfCyZIcGts2s7ew/4b4a05649d91d7dbc702e1d0b0a8d7ce/19_supabase.png&#34; alt=&#34;List of users in Auth0 dashboard&#34;/&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;user_id&lt;/code&gt; is displayed at the top of your user&amp;#39;s details page.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/44sstE7gRjeXxTe6J5ELzy/0106a84fdd7377a01262521b4d76612e/20_supabase.png&#34; alt=&#34;User ID in Auth0 dashboard&#34;/&gt;&lt;/p&gt;&lt;p&gt;Let&amp;#39;s copy this value and paste it as the &lt;code&gt;user_id&lt;/code&gt; for the &lt;code&gt;todos&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/RxINXvWlSt8VyJOX4BZX3/43d70087dcc4777e572f0a119c88c8b6/21_supabase.png&#34; alt=&#34;User ID set to Auth0 user&#34;/&gt;&lt;/p&gt;&lt;p&gt;Refresh our Next.js application.&lt;/p&gt;&lt;p&gt;Voilà! Todos!!!&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/HMMRW0BEkFuDqneJDhGT0/969993d5311123cb7c8b15930f83f0ca/22_supabase.png&#34; alt=&#34;List of todo items&#34;/&gt;&lt;/p&gt;&lt;p&gt;The last thing we need to implement is the functionality to add a &lt;code&gt;todo&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s add the form logic to our &lt;code&gt;pages&lt;span&gt;/&lt;/span&gt;index&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; component.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/index.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// other imports&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; useState &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;Index&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; user&lt;span&gt;,&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;content&lt;span&gt;,&lt;/span&gt; setContent&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;useState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;allTodos&lt;span&gt;,&lt;/span&gt; setAllTodos&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;useState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;todos&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;handleSubmit&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    e&lt;span&gt;.&lt;/span&gt;&lt;span&gt;preventDefault&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; supabase &lt;span&gt;=&lt;/span&gt; &lt;span&gt;getSupabase&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; resp &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; supabase&#xA;      &lt;span&gt;.&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;todo&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;.&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; content&lt;span&gt;,&lt;/span&gt; user_id&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;sub &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;setAllTodos&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;todos&lt;span&gt;,&lt;/span&gt; resp&lt;span&gt;.&lt;/span&gt;data&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;setContent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;styles&lt;span&gt;.&lt;/span&gt;container&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        Welcome &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;}&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;/api/auth/logout&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Logout&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt; &lt;span&gt;onSubmit&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;handleSubmit&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span&gt;onChange&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;setContent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;e&lt;span&gt;.&lt;/span&gt;target&lt;span&gt;.&lt;/span&gt;value&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;content&lt;span&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;allTodos&lt;span&gt;?.&lt;/span&gt;length &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        allTodos&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;todo&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;content&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;You have completed all todos!&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// exports&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our final component should look something like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// pages/index.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; styles &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../styles/Home.module.css&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; withPageAuthRequired&lt;span&gt;,&lt;/span&gt; getSession &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;@auth0/nextjs-auth0&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; getSupabase &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../utils/supabase&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; Link &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;next/link&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; useState &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;Index&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; user&lt;span&gt;,&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;content&lt;span&gt;,&lt;/span&gt; setContent&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;useState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;allTodos&lt;span&gt;,&lt;/span&gt; setAllTodos&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;useState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;todos&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;handleSubmit&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    e&lt;span&gt;.&lt;/span&gt;&lt;span&gt;preventDefault&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; supabase &lt;span&gt;=&lt;/span&gt; &lt;span&gt;getSupabase&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; resp &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; supabase&#xA;      &lt;span&gt;.&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;todo&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;.&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; content&lt;span&gt;,&lt;/span&gt; user_id&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;sub &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;setAllTodos&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;todos&lt;span&gt;,&lt;/span&gt; resp&lt;span&gt;.&lt;/span&gt;data&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;setContent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;styles&lt;span&gt;.&lt;/span&gt;container&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        Welcome &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;}&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;/api/auth/logout&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;          &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Logout&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Link&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt; &lt;span&gt;onSubmit&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;handleSubmit&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span&gt;onChange&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;setContent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;e&lt;span&gt;.&lt;/span&gt;target&lt;span&gt;.&lt;/span&gt;value&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;content&lt;span&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;allTodos&lt;span&gt;?.&lt;/span&gt;length &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        allTodos&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;todo&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;todo&lt;span&gt;.&lt;/span&gt;content&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;You have completed all todos!&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&#xA;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; getServerSideProps &lt;span&gt;=&lt;/span&gt; &lt;span&gt;withPageAuthRequired&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;async&lt;/span&gt; &lt;span&gt;getServerSideProps&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; req&lt;span&gt;,&lt;/span&gt; res &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      user&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; accessToken &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; &lt;span&gt;getSession&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;req&lt;span&gt;,&lt;/span&gt; res&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;const&lt;/span&gt; supabase &lt;span&gt;=&lt;/span&gt; &lt;span&gt;getSupabase&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;accessToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; data&lt;span&gt;:&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; supabase&lt;span&gt;.&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;todo&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      props&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; todos &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; Index&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We now have an input field above our list of &lt;code&gt;todos&lt;/code&gt;. When we enter the &lt;code&gt;content&lt;/code&gt; for our todo and click &lt;code&gt;add&lt;/code&gt;, a new &lt;code&gt;todo&lt;/code&gt; will be inserted into our DB. We are also setting the &lt;code&gt;user_id&lt;/code&gt; column to the value of our &lt;code&gt;user&lt;span&gt;.&lt;/span&gt;sub&lt;/code&gt;, so we know who the &lt;code&gt;todo&lt;/code&gt; belongs to.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;We&amp;#39;re introducing &lt;code&gt;allTodos&lt;/code&gt; so that we can call &lt;code&gt;setAllTodos&lt;/code&gt; after insertion of a new &lt;code&gt;todo&lt;/code&gt;. It will trigger a partial re-render, displaying the newly inserted &lt;code&gt;todo&lt;/code&gt; without a full page refresh.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Awesome! We now have a Next.js application using Auth0 for all things authentication and Supabase with row-level policies for authorization. We learned about JWTs and how to sign our own, as well as writing a Postgres function to lookup values in a JWT in our database.&lt;/p&gt;&lt;p&gt;If you liked this article, &lt;a href=&#34;https://twitter.com/_dijonmusters&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;follow me on Twitter&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/c/jonmeyers&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;subscribe to my YouTube channel&lt;/a&gt; and &lt;a href=&#34;https://jonmeyers.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check out my blog&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;For all things Supabase &lt;a href=&#34;https://twitter.com/supabase/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;follow our Twitter&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/c/supabase&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;subscribe to our YouTube channel&lt;/a&gt; and &lt;a href=&#34;https://supabase.io/blog&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check out our blog&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Thanks for reading!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/using-nextjs-and-auth0-with-supabase/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to integrate Auth0 authentication with database storage and row-level security authorization in Supabase.</summary>
  </entry>
  <entry>
    <title>Auth0 Expands Reach to Mexico with TEC360 Partnership</title>
    <updated>2021-11-17T02:01:00Z</updated>
    <id>tag:auth0.com,2021-11-17:/blog/auth0-expands-reach-to-mexico-with-tec360-partnership/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;BUENOS AIRES, Argentina – Nov. 17, 2021&lt;/strong&gt; – The &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Identity Platform&lt;/a&gt;, a product unit within Okta (NASDAQ: OKTA), announced today a new partnership with &lt;a href=&#34;http://www.tec360cloud.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;TEC360&lt;/a&gt;, a leading provider of cloud solutions for enterprises in Mexico and Latin America (LATAM). TEC360 is Auth0’s first partner in Mexico, and together, the two companies are helping enterprises across the region meet their evolving identity management and security goals.&lt;/p&gt;&lt;p&gt;TEC360 operates in Mexico and LATAM and provides cloud solutions for enterprises’ technological and security needs including customer experience (CX) and employee experience (EX), change management, edge infrastructure, identity management, and internet of things (IoT). The addition of TEC360 to Auth0’s &lt;a href=&#34;https://auth0.com/partners&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Partner Program&lt;/a&gt; and Auth0’s growth in the region indicates the growing demand and importance of identity management in securing the new and complex digital world as businesses have to meet the ever-growing expectations for security, privacy, and convenience.&lt;/p&gt;&lt;p&gt;Globally, the pandemic has &lt;a href=&#34;https://auth0.com/blog/how-brick-and-mortar-approaches-improve-digital-experiences/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;accelerated digital road maps across industries&lt;/a&gt;, and businesses now have to quickly respond to changes in digital expectations and buying patterns — and in LATAM the technology penetration has been rapidly growing at an average rate of 65% year-over-year since 2003 (&lt;a href=&#34;https://www.atlantico.vc/latin-america-digital-transformation-report&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;2020 Latin America Digital Transformation Report)&lt;/a&gt;, with Mexico as the second-highest country in LATAM, following Brazil. As the number of online identities continue to increase, so do the number of online threats — a modern identity platform offers the right balance of convenience, privacy, and security to protect and retain customers.&lt;/p&gt;&lt;p&gt;“At TEC360, our commitment is to provide enterprise customers with the best cloud solutions that give their organization and customers more choice and flexibility to accelerate growth and innovation,” said Peter Wiegandt, CEO of TEC360. “Identity management is a critical part of these projects, and by joining forces with Auth0 we will give our customers in Mexico and throughout LATAM the extensible building blocks to solve for an identity use case without having to compromise between convenience, privacy, or security.”&lt;/p&gt;&lt;p&gt;“More than ever, a modern identity solution can help accelerate digital transformation, remove security risks, and positively impact the business through improved user experiences,” said Ghazi Masood, SVP and General Manager, Americas at Auth0. “We are proud to join forces with TEC360 to help customers in the region customize identity for their exact use case, enabling them to free up time and resources previously spent on the complexities of identity management to focus more on their core value proposition.”&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;The Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;h3 id=&#34;Media-Contacts&#34;&gt;Media Contacts&lt;/h3&gt;&lt;p&gt;Global Communications &lt;br/&gt;Auth0 &lt;br/&gt;&lt;a href=&#34;mailto:press@auth0.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;press@auth0.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Grupo Muchnik PR for Auth0 &lt;br/&gt;&lt;a href=&#34;mailto:auth0@muchnik.co&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;auth0@muchnik.co&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 id=&#34;Investor-Contact&#34;&gt;Investor Contact&lt;/h3&gt;&lt;p&gt;Investor Relations &lt;br/&gt;&lt;a href=&#34;mailto:investor@okta.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;investor@okta.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/auth0-expands-reach-to-mexico-with-tec360-partnership/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Leading LATAM identity providers support Mexico’s top companies with identity management and security needs</summary>
  </entry>
  <entry>
    <title>Build and Secure a simple Symfony API server using Auth0</title>
    <updated>2021-11-16T15:36:00Z</updated>
    <id>tag:auth0.com,2021-11-16:/blog/build-and-secure-a-simple-symfony-api-server-using-auth0/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; In this post, you will learn how to build a Symfony API server from scratch. You will also take it a step further to secure some of the endpoints. You&amp;#39;ll use Auth0 to handle authentication and authorization. The complete source code for this tutorial can be found &lt;a href=&#34;https://github.com/yemiwebby/symfony-api-server&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;To follow along with this tutorial, you should have reasonable knowledge of Object-Oriented Programming in PHP and basic knowledge of building applications with Symfony. You will also need the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://getcomposer.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Composer&lt;/a&gt; globally installed on your computer to manage dependencies&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://symfony.com/download&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Symfony CLI&lt;/a&gt; installed on your computer. Follow the &lt;a href=&#34;https://symfony.com/download&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;instructions here&lt;/a&gt; to set it up for your operating system.&lt;/li&gt;&lt;li&gt;An Auth0 account. You can &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free Auth0 account here&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://angular.io/cli&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Angular CLI&lt;/a&gt; globally installed on your computer. Please note that you don&amp;#39;t have to be proficient in building applications with Angular. It is only required here to test the API that we will build.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;What-You-ll-Build&#34;&gt;What You&amp;#39;ll Build&lt;/h2&gt;&lt;p&gt;You will build a simple Symfony API server with three different endpoints. Each endpoint will return different types of messages depending on the access the user has.&lt;/p&gt;&lt;h3 id=&#34;Public-endpoint&#34;&gt;Public endpoint&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This endpoint should be exposed to anyone unauthorized. It is expected to return the following message:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;The API doesn&amp;#39;t require an access token to share this message.&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Protected-endpoint&#34;&gt;Protected endpoint&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This endpoint will be protected against unauthorized access. Only &lt;strong&gt;authorized users&lt;/strong&gt; with a valid access token in their HTTP request header will be able to see the following message:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;The API successfully validated your access token.&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Admin-endpoint&#34;&gt;Admin endpoint&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;admin&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Similar to the protected endpoint, this requires the access token to contain a &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt; permission to access the admin data. This is often referred to as &lt;a href=&#34;https://auth0.com/docs/authorization/rbac/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Role-Based Access Control (RBAC)&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Getting-Started&#34;&gt;Getting Started&lt;/h2&gt;&lt;p&gt;Here you will start building the Symfony API by setting up and installing a new Symfony application and its required dependencies.&lt;/p&gt;&lt;h3 id=&#34;Scaffolding-the-Symfony-application&#34;&gt;Scaffolding the Symfony application&lt;/h3&gt;&lt;p&gt;To begin, open your terminal, navigate to your preferred development directory, and issue the following command to scaffold a new project using &lt;a href=&#34;https://getcomposer.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Composer&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;composer&lt;/span&gt; create-project symfony/website-skeleton api-symfony-server&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the installation process is completed, switch to the new directory you just created:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;cd&lt;/span&gt; api-symfony-server&#xA;&#xA;```bash&#xA;&lt;span&gt;cp&lt;/span&gt; .env .env.local&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This file is ignored by Git as it matches an existing pattern in &lt;code&gt;&lt;span&gt;.&lt;/span&gt;gitignore&lt;/code&gt; (which Symfony generated). One of the benefits of this file is that it helps to store your credentials outside of code to keep them safe.&lt;/p&gt;&lt;p&gt;Next, update the &lt;code&gt;&lt;span&gt;DATABASE_URL&lt;/span&gt;&lt;/code&gt; parameter in &lt;code&gt;&lt;span&gt;.&lt;/span&gt;env&lt;span&gt;.&lt;/span&gt;local&lt;/code&gt; so that the app uses an SQLite database instead of the PostgreSQL default. To do that, comment out the existing &lt;code&gt;&lt;span&gt;DATABASE_URL&lt;/span&gt;&lt;/code&gt; entry and uncomment the SQLite option so that it matches the example below.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;DATABASE_URL&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;sqlite:///%kernel.project_dir%/var/data.db&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;NOTE: The database will be created in the var directory in the project&amp;#39;s root directory and be named &lt;code&gt;data&lt;span&gt;.&lt;/span&gt;db&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&#34;Running-the-application&#34;&gt;Running the application&lt;/h3&gt;&lt;p&gt;Make sure you&amp;#39;re in the main project directory and using the &lt;a href=&#34;https://symfony.com/download&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Symfony CLI&lt;/a&gt;, start the application with the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;symfony serve&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Navigate to &lt;a href=&#34;http://localhost:8000&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://localhost:8000&lt;/a&gt; to view the default homepage of the new Symfony application:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3ZJuxRs46wKcsyxHFWvk1a/1fdc14d3c974eb9d7b1402572cbc595e/01_symfony.jpg&#34; alt=&#34;Symfony Homepage&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Building-the-API&#34;&gt;Building the API&lt;/h2&gt;&lt;p&gt;In this section, we will focus on creating controllers that will handle the logic for each endpoint mentioned earlier. We will start with the public endpoint and gradually proceed to handle other endpoints.&lt;/p&gt;&lt;p&gt;Stop the application from running using &lt;code&gt;&lt;span&gt;CTRL&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;C&lt;/span&gt;&lt;/code&gt; and then hit &lt;code&gt;Enter&lt;/code&gt;&lt;/p&gt;&lt;h3 id=&#34;Create-controllers-and-configure-each-endpoint&#34;&gt;Create controllers and configure each endpoint&lt;/h3&gt;&lt;p&gt;Start by issuing the following command from the terminal within the root directory of your project to create a Controller:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;php bin/console make:controller APIController&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will see the following output:&lt;/p&gt;&lt;pre&gt;&lt;code&gt; created&lt;span&gt;:&lt;/span&gt; src&lt;span&gt;/&lt;/span&gt;Controller&lt;span&gt;/&lt;/span&gt;APIController&lt;span&gt;.&lt;/span&gt;php&#xA; created&lt;span&gt;:&lt;/span&gt; templates&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;index&lt;span&gt;.&lt;/span&gt;html&lt;span&gt;.&lt;/span&gt;twig&#xA;&#xA;  Success&lt;span&gt;!&lt;/span&gt;&#xA;&#xA; Next&lt;span&gt;:&lt;/span&gt; Open your &lt;span&gt;new&lt;/span&gt; &lt;span&gt;controller&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; add some pages&lt;span&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Locate the newly created controller in &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;Controller&lt;span&gt;/&lt;/span&gt;APIController&lt;span&gt;.&lt;/span&gt;php&lt;/code&gt; and update its content with the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// src/Controller/APIController.php&#xA;&lt;span&gt;&lt;span&gt;&amp;lt;?php&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;App&lt;span&gt;\&lt;/span&gt;Controller&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Bundle&lt;span&gt;\&lt;/span&gt;FrameworkBundle&lt;span&gt;\&lt;/span&gt;Controller&lt;span&gt;\&lt;/span&gt;AbstractController&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;HttpFoundation&lt;span&gt;\&lt;/span&gt;JsonResponse&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;HttpFoundation&lt;span&gt;\&lt;/span&gt;Response&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;Routing&lt;span&gt;\&lt;/span&gt;Annotation&lt;span&gt;\&lt;/span&gt;Route&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;/**&#xA; * @Route(&amp;#34;/api/messages&amp;#34;)&#xA; */&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;APIController&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;AbstractController&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;/**&#xA;     * @Route(&amp;#34;/public&amp;#34;, name=&amp;#34;public&amp;#34;)&#xA;     */&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;publicAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;:&lt;/span&gt; &lt;span&gt;JsonResponse&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;The API doesn&amp;#39;t require an access token to share this message.&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Response&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;HTTP_OK&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;/**&#xA;     * @Route(&amp;#34;/protected&amp;#34;, name=&amp;#34;protected&amp;#34;)&#xA;     */&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;protectedAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;:&lt;/span&gt; &lt;span&gt;JsonResponse&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;The API successfully validated your access token.&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Response&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;HTTP_OK&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;/**&#xA;     * @Route(&amp;#34;/admin&amp;#34;, name=&amp;#34;admin&amp;#34;)&#xA;     */&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;adminAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;JsonResponse&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;The API successfully recognized you as an admin.&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Response&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;HTTP_OK&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From the snippet above, this controller contains three different methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;publicAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;protectedAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;adminAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Each is designed to handle &lt;code&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span&gt;/&lt;/span&gt;admin&lt;/code&gt; endpoints and returns the appropriate messages, respectively.&lt;/p&gt;&lt;p&gt;Back in the terminal, start the application again with &lt;code&gt;symfony serve&lt;/code&gt; and open up an API testing tool such as &lt;a href=&#34;https://www.getpostman.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Postman&lt;/a&gt; to test each endpoint.&lt;/p&gt;&lt;p&gt;Start with the public endpoint. Create a new GET request to this endpoint &lt;a href=&#34;http://localhost:8000/api/messages/public&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://localhost:8000/api/messages/public&lt;/a&gt;. You will get the message &lt;code&gt;The &lt;span&gt;API&lt;/span&gt; doesn&amp;#39;t require an access token to share &lt;span&gt;this&lt;/span&gt; message&lt;/code&gt;, as shown below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1EVW07UZTck5Ed6VuLwnCP/d8c9ef7f1e726cbe990eee619ff21b6a/02_symfony.png&#34; alt=&#34;Public Endpoint Using Postman&#34;/&gt;&lt;/p&gt;&lt;p&gt;Next, try out the protected endpoint on &lt;a href=&#34;http://localhost:8000/api/messages/protected&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://localhost:8000/api/messages/protected&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4rNwtFqz9vDFG208KDCEYL/9d0f71f61e1689397240487559531303/03_symfony.png&#34; alt=&#34;Protected Endpoint using Postman&#34;/&gt;&lt;/p&gt;&lt;p&gt;And lastly, the admin endpoint on [&lt;a href=&#34;http://localhost:8000/api/messages/admin&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://localhost:8000/api/messages/admin&lt;/a&gt;] (&lt;a href=&#34;http://localhost:8000/api/messages/admin&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://localhost:8000/api/messages/admin&lt;/a&gt;) will give you the message &lt;code&gt;The &lt;span&gt;API&lt;/span&gt; successfully recognized you &lt;span&gt;as&lt;/span&gt; an admin&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7ApYe4u0vxvxjAafSJB4XO/4d5a1fe9f1ed3187c7f076ff06b4638d/04_symfony.png&#34; alt=&#34;Admin Endpoint using Postman&#34;/&gt;&lt;/p&gt;&lt;p&gt;At the moment, all the created endpoints can be accessed by anyone. Of course, this is not what we want. You need to ensure that &lt;code&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;/&lt;/span&gt;admin&lt;/code&gt; endpoints are exposed to authorized users only. You will start the configuration in the next section.&lt;/p&gt;&lt;p&gt;If you haven&amp;#39;t yet, make sure you &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;create a free Auth0 account now&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;Securing-protected-and-admin-endpoints&#34;&gt;Securing protected and admin endpoints&lt;/h3&gt;&lt;p&gt;You will use Auth0 to secure the endpoints (protected and admin). To do that, you will need to head back to your &lt;a href=&#34;https://manage.auth0.com/dashboard&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 dashboard&lt;/a&gt; and configure an API.&lt;/p&gt;&lt;p&gt;To begin, navigate to &lt;a href=&#34;https://manage.auth0.com/#/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the API section of your Auth0 management dashboard&lt;/a&gt; by clicking &amp;#34;Applications&amp;#34;&amp;gt; &amp;#34;APIs&amp;#34;. If you have created any APIs before, this will show you the list of all APIs for your account, but for this tutorial, go ahead and click on the &lt;strong&gt;&amp;#34;CREATE API&amp;#34;&lt;/strong&gt; button and set up a new one.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3U1zGzKsMkPCD0BzsmsPwq/9ba551bcb9448c3dc5ea6e9118bd7bb7/05_symfony.png&#34; alt=&#34;Create New API&#34;/&gt;&lt;/p&gt;&lt;p&gt;Provide a friendly name such as &lt;code&gt;Symfony &lt;span&gt;API&lt;/span&gt; Server&lt;/code&gt; for the API and set its identifier to &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8000&lt;/span&gt;&lt;/code&gt;. You are free to use any name and identifier, but if you want to follow this tutorial exactly, you should maintain the values above. Leave the signing algorithm as &lt;code&gt;&lt;span&gt;RS256&lt;/span&gt;&lt;/code&gt; and click on the &lt;strong&gt;&amp;#34;Create&amp;#34;&lt;/strong&gt; button to proceed. You will need the values from here later in the tutorial.&lt;/p&gt;&lt;h3 id=&#34;Install-dependencies-and-configure-authentication&#34;&gt;Install dependencies and configure authentication&lt;/h3&gt;&lt;p&gt;To secure the &lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;admin&lt;/code&gt; endpoints you will use the JWT authentication bundle for Symfony named &lt;a href=&#34;https://github.com/auth0/jwt-auth-bundle&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;auth0/jwt-auth-bundle&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Stop the application from running using &lt;code&gt;&lt;span&gt;CTRL&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;C&lt;/span&gt;&lt;/code&gt; and run the following command to install the bundle using composer:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;composer&lt;/span&gt; require auth0/jwt-auth-bundle:&lt;span&gt;&amp;#34;~4.0&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After installing the bundle in your project, you should find a new file located at &lt;code&gt;config&lt;span&gt;/&lt;/span&gt;packages&lt;span&gt;/&lt;/span&gt;jwt_auth&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt;. If not, create the file and paste the following content in it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;jwt_auth&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;domain&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;%env(AUTH0_DOMAIN)%&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;client_id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;%env(AUTH0_CLIENT_ID)%&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;audience&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;%env(AUTH0_AUDIENCE)%&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Earlier, when you created an API, Auth0 also automatically created a test application for your API. This will be the Auth0 application that will hold your users. You can find this by clicking &lt;code&gt;Applications&lt;/code&gt; &amp;gt; &lt;code&gt;Applications&lt;/code&gt;, then selecting the Test Application from the list that matches what you named your API. If you named it the same as in this tutorial, it will be &amp;#34;Symfony API Server (Test Application)&amp;#34;. You can also select and use any other applications for your account. But for this tutorial, click on the test application, and you will see a page as shown here:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3futjuuyRCj6GKwAcZDsCb/6f75f56df649b0c7798afc5444b944fc/06_symfony.jpg&#34; alt=&#34;Test Application&#34;/&gt;&lt;/p&gt;&lt;p&gt;Open &lt;code&gt;&lt;span&gt;.&lt;/span&gt;env&lt;span&gt;.&lt;/span&gt;local&lt;/code&gt; file and update the values of the environment variables below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;CLIENT_ORIGIN_URL&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;4040&lt;/span&gt;&#xA;&lt;span&gt;AUTH0_AUDIENCE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8000&lt;/span&gt;&#xA;&lt;span&gt;AUTH0_DOMAIN&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;YOUR_AUTH0_DOMAIN&lt;/span&gt;&#xA;&lt;span&gt;AUTH0_CLIENT_ID&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;YOUR_AUTH0_ID&lt;/span&gt;&#xA;&lt;span&gt;AUTH0_CLIENT_SECRET&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;YOUR_AUTH0_CLIENT_SECRET&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ensure to replace &lt;code&gt;&lt;span&gt;YOUR_AUTH0_DOMAIN&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;YOUR_AUTH0_CLIENT_ID&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span&gt;YOUR_AUTH0_CLIENT_SECRET&lt;/span&gt;&lt;/code&gt; placeholders with the appropriate values as obtained from your Auth0 Dashboard.&lt;/p&gt;&lt;h3 id=&#34;Setting-up-User-and-User-provider&#34;&gt;Setting up User and User provider&lt;/h3&gt;&lt;p&gt;Handling authentication and authorization requires Auth0 to be aware of the currently authenticated user. This is the job of a &lt;a href=&#34;https://symfony.com/doc/current/security/user_provider.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;User provider&lt;/a&gt; in Symfony, as it helps to reload a user from the session and load the user for other specific features like using username or email for authentication.&lt;/p&gt;&lt;p&gt;If users of our API were stored in the database, creating a custom user provider might not be necessary, but here, we will load users from a custom location (Auth0), hence the need to create one.&lt;/p&gt;&lt;p&gt;To begin with, navigate to the &lt;code&gt;src&lt;/code&gt; folder and create a new folder named &lt;code&gt;Security&lt;/code&gt; and within the newly created folder, create another one and call it &lt;code&gt;User&lt;/code&gt;. Next, create the user class within the &lt;code&gt;User&lt;/code&gt; folder and name it &lt;code&gt;WebServiceUser&lt;span&gt;.&lt;/span&gt;php&lt;/code&gt;. Open the newly created file and paste the following code into it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;App&lt;span&gt;\&lt;/span&gt;Security&lt;span&gt;\&lt;/span&gt;User&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;Security&lt;span&gt;\&lt;/span&gt;Core&lt;span&gt;\&lt;/span&gt;User&lt;span&gt;\&lt;/span&gt;EquatableInterface&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;Security&lt;span&gt;\&lt;/span&gt;Core&lt;span&gt;\&lt;/span&gt;User&lt;span&gt;\&lt;/span&gt;UserInterface&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WebServiceUser&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt;&#xA;    &lt;span&gt;UserInterface&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; EquatableInterface &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$roles&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$jwt&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;__construct&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;$jwt&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;$roles&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;roles&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;$roles&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;jwt&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;$jwt&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;/**&#xA;     * @inheritDoc&#xA;     */&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;getRoles&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;:&lt;/span&gt; &lt;span&gt;array&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;roles&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;/**&#xA;     * @inheritDoc&#xA;     */&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;getPassword&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;:&lt;/span&gt; &lt;span&gt;?&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;/**&#xA;     * @inheritDoc&#xA;     */&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;getSalt&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;:&lt;/span&gt; &lt;span&gt;?&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;isEqualTo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;UserInterface&lt;/span&gt; &lt;span&gt;$user&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;:&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;$user&lt;/span&gt; &lt;span&gt;instanceof&lt;/span&gt; &lt;span&gt;WebServiceUser&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;getUsername&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;===&lt;/span&gt; &lt;span&gt;$user&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;getUsername&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;/**&#xA;     * @inheritDoc&#xA;     */&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;getUsername&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;jwt&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;??&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;jwt&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;/**&#xA;     * @inheritDoc&#xA;     */&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;eraseCredentials&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;getUserIdentifier&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;jwt&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;??&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;jwt&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, the &lt;code&gt;WebServiceUser&lt;/code&gt; class implements two different interfaces:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://api.symfony.com/4.1/Symfony/Component/Security/Core/User/UserInterface.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;UserInterface&lt;/a&gt; — represents the interface that all User classes must implement&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://api.symfony.com/4.1/Symfony/Component/Security/Core/User/EquatableInterface.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;EquatableInterface&lt;/a&gt; — used to test if two objects are equal in security and re-authentication context&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Next, create a file in the &lt;code&gt;User&lt;/code&gt; folder and name it &lt;code&gt;WebServiceAnonymousUser&lt;span&gt;.&lt;/span&gt;php&lt;/code&gt;. This will return the anonymous user. Use the following content for it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;App&lt;span&gt;\&lt;/span&gt;Security&lt;span&gt;\&lt;/span&gt;User&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WebServiceAnonymousUser&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;WebServiceUser&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;__construct&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;parent&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;__construct&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;IS_AUTHENTICATED_ANONYMOUSLY&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;getUsername&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To wrap thing up, create another file within the &lt;code&gt;User&lt;/code&gt; folder and name it &lt;code&gt;WebServiceUserProvider&lt;span&gt;.&lt;/span&gt;php&lt;/code&gt;. Once you are done, paste the following code in it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;App&lt;span&gt;\&lt;/span&gt;Security&lt;span&gt;\&lt;/span&gt;User&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Auth0&lt;span&gt;\&lt;/span&gt;JWTAuthBundle&lt;span&gt;\&lt;/span&gt;Security&lt;span&gt;\&lt;/span&gt;Core&lt;span&gt;\&lt;/span&gt;JWTUserProviderInterface&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;Security&lt;span&gt;\&lt;/span&gt;Core&lt;span&gt;\&lt;/span&gt;Exception&lt;span&gt;\&lt;/span&gt;UnsupportedUserException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;Security&lt;span&gt;\&lt;/span&gt;Core&lt;span&gt;\&lt;/span&gt;User&lt;span&gt;\&lt;/span&gt;UserInterface&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Polyfill&lt;span&gt;\&lt;/span&gt;Intl&lt;span&gt;\&lt;/span&gt;Icu&lt;span&gt;\&lt;/span&gt;Exception&lt;span&gt;\&lt;/span&gt;NotImplementedException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WebServiceUserProvider&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;JWTUserProviderInterface&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;loadUserByJWT&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;$jwt&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;:&lt;/span&gt; &lt;span&gt;WebServiceUser&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;$data&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;sub&amp;#39;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;$jwt&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;sub&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;$roles&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;$roles&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;ROLE_OAUTH_AUTHENTICATED&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;WebServiceUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;$data&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;$roles&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;getAnonymousUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;:&lt;/span&gt; &lt;span&gt;WebServiceAnonymousUser&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;WebServiceAnonymousUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;loadUserByUsername&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;$username&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;NotImplementedException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;method not implemented&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;refreshUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;UserInterface&lt;/span&gt; &lt;span&gt;$user&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;$user&lt;/span&gt; &lt;span&gt;instanceof&lt;/span&gt; &lt;span&gt;WebServiceUser&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;UnsupportedUserException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                &lt;span&gt;sprintf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;Instances of &amp;#34;%s&amp;#34; are not supported.&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;get_class&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;$user&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;loadUserByUsername&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;$user&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;getUsername&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;supportsClass&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;$class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;:&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$class&lt;/span&gt; &lt;span&gt;===&lt;/span&gt; &lt;span&gt;&amp;#39;App\Security\User\WebServiceUser&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;loadUserByIdentifier&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; &lt;span&gt;$identifier&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;NotImplementedException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;method not implemented&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This class implements the &lt;code&gt;JWTUserProviderInterface&lt;/code&gt; from the &lt;a href=&#34;https://github.com/auth0/jwt-auth-bundle&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 bundle&lt;/a&gt; installed earlier, which specifies the important methods that the &lt;code&gt;WebServiceUserProvider&lt;/code&gt; class must implement. These methods are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;loadUserByJWT&lt;/code&gt;: it receives the decoded JWT Access Token and returns a User.&lt;/li&gt;&lt;li&gt;&lt;code&gt;getAnonymousUser&lt;/code&gt;: returns an anonymous user that represents an unauthenticated one (usually represented by the role &lt;code&gt;&lt;span&gt;IS_AUTHENTICATED_ANONYMOUSLY&lt;/span&gt;&lt;/code&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Creating-a-Guard-Authenticator&#34;&gt;Creating a Guard Authenticator&lt;/h3&gt;&lt;p&gt;Next, we need to create a guard authenticator in Symfony. To do that, create a new file within the &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;Security&lt;span&gt;/&lt;/span&gt;User&lt;/code&gt; folder and name it &lt;code&gt;GuardAuthenticator&lt;span&gt;.&lt;/span&gt;php&lt;/code&gt;. Open the new file and use the following content for it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;App&lt;span&gt;\&lt;/span&gt;Security&lt;span&gt;\&lt;/span&gt;User&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Auth0&lt;span&gt;\&lt;/span&gt;JWTAuthBundle&lt;span&gt;\&lt;/span&gt;Security&lt;span&gt;\&lt;/span&gt;Guard&lt;span&gt;\&lt;/span&gt;JwtGuardAuthenticator&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;HttpFoundation&lt;span&gt;\&lt;/span&gt;JsonResponse&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;HttpFoundation&lt;span&gt;\&lt;/span&gt;Request&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;Security&lt;span&gt;\&lt;/span&gt;Core&lt;span&gt;\&lt;/span&gt;Exception&lt;span&gt;\&lt;/span&gt;AuthenticationException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;GuardAuthenticator&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;JwtGuardAuthenticator&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Request&lt;/span&gt; &lt;span&gt;$request&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;AuthenticationException&lt;/span&gt; &lt;span&gt;$authException&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;$responseBody&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#39;No authorization token was found&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;JsonResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;$responseBody&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;JsonResponse&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;HTTP_UNAUTHORIZED&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This &lt;code&gt;GuardAuthenticator&lt;/code&gt; extends the &lt;code&gt;JwtGuardAuthenticator&lt;/code&gt; class from the &lt;code&gt;jwt&lt;/code&gt; bundle and checks if an access token is present in an HTTP request header. If not, it returns an appropriate message.&lt;/p&gt;&lt;h3 id=&#34;Configure-the-Security-Provider&#34;&gt;Configure the Security Provider&lt;/h3&gt;&lt;p&gt;Before configuring the security provider, create a service for &lt;code&gt;WebServiceUserProvider&lt;/code&gt;. Services are a great way to make your applications easier to maintain and adapt to new requirements. You can create one by adding this code to the bottom of &lt;code&gt;config&lt;span&gt;/&lt;/span&gt;services&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;parameters&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;&#xA;&lt;span&gt;services&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;...&lt;/span&gt;&#xA;    &lt;span&gt;# 👇  new code starts here&lt;/span&gt;&#xA;    &lt;span&gt;web_service_user_provider&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;class&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; App\Security\User\WebServiceUserProvider&#xA;        &lt;span&gt;arguments&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;@jwt_auth.auth0_service&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lastly, modify the &lt;code&gt;security&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt; file located in &lt;code&gt;config&lt;span&gt;/&lt;/span&gt;packages&lt;span&gt;/&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt; file such that it contains the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;code&gt;web_service_user_provider&lt;/code&gt; service&lt;/li&gt;&lt;li&gt;The secured area that you want to authenticate using an access token&lt;/li&gt;&lt;li&gt;The &lt;code&gt;access_control&lt;/code&gt; section with the roles needed for each route&#xA;You can replace it completely with the following:&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;security&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;enable_authenticator_manager&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;# https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers&lt;/span&gt;&#xA;  &lt;span&gt;providers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;#        users_in_memory: { memory: null }&lt;/span&gt;&#xA;    &lt;span&gt;web_service_user_provider&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; App\Security\User\WebServiceUserProvider&#xA;  &lt;span&gt;firewalls&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;dev&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;pattern&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^/(_(profiler&lt;span&gt;|&lt;/span&gt;wdt)&lt;span&gt;|&lt;/span&gt;css&lt;span&gt;|&lt;/span&gt;images&lt;span&gt;|&lt;/span&gt;js)/&#xA;      &lt;span&gt;security&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&#xA;    &lt;span&gt;secured_area&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;pattern&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^/api&#xA;      &lt;span&gt;stateless&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;      &lt;span&gt;guard&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;authenticators&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;          &lt;span&gt;id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; App\Security\User\GuardAuthenticator&#xA;      &lt;span&gt;provider&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; web_service_user_provider&#xA;  &lt;span&gt;# Easy way to control access for large sections of your site&lt;/span&gt;&#xA;  &lt;span&gt;# Note: Only the *first* access control that matches will be used&lt;/span&gt;&#xA;  &lt;span&gt;access_control&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;path&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^/api/messages/public&lt;span&gt;,&lt;/span&gt; &lt;span&gt;roles&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; PUBLIC_ACCESS &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;path&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^/api/messages/protected&lt;span&gt;,&lt;/span&gt; &lt;span&gt;roles&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ROLE_OAUTH_AUTHENTICATED &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;path&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^/api/messages/admin&lt;span&gt;,&lt;/span&gt; &lt;span&gt;roles&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ROLE_OAUTH_AUTHENTICATED &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, you can test this again with Postman by accessing the protected route. Start the application by running &lt;code&gt;symfony serve&lt;/code&gt; and access &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8000&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/code&gt;. You will receive a message indicating that &amp;#34;No authorization token was found&amp;#34; as shown below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/W8OEoQQABuZQWnZpoGeCs/d66c3fa6067de9bef86f882cd86d2156/07_symfony.png&#34; alt=&#34;No token found&#34;/&gt;&lt;/p&gt;&lt;p&gt;This is because you need an access token to successfully retrieve contents from the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/code&gt; endpoint.&lt;/p&gt;&lt;p&gt;Generating an access token on the fly will require your client application to get authorized by Auth0, but as a proof of concept, for now, you will obtain and use a test token for your API from the Auth0 Dashboard. To do this, navigate to the &lt;a href=&#34;https://manage.auth0.com/dashboard/#/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;API section in your Auth0 Dashboard&lt;/a&gt; and click on the API that you created earlier. Next, click on the &lt;code&gt;Test&lt;/code&gt; tab and scroll down to copy the &lt;code&gt;access_token&lt;/code&gt; shown under the &lt;strong&gt;Response&lt;/strong&gt; subtitle.&lt;/p&gt;&lt;p&gt;Open up Postman again and select &lt;code&gt;Bearer Token&lt;/code&gt; from the &lt;strong&gt;Authorization&lt;/strong&gt; tab and then paste the Access Token:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2Qa1yYH7IZNXpzKAAdWOKZ/be0b70f9356f9772599c7abe515dde03/08_symfony.png&#34; alt=&#34;Bearer Token&#34;/&gt;&lt;/p&gt;&lt;p&gt;Now you can try out the protected &lt;code&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/code&gt; endpoint, and you&amp;#39;ll get the message &lt;code&gt;The &lt;span&gt;API&lt;/span&gt; successfully validated your access token&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;, as shown below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7ia6ftq19laFNCTQxPsuEm/9abc397335a2005c37170afb5670cb1d/09_symfony.png&#34; alt=&#34;Protected Endpoint Response&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Implementing-Role-Based-Access-Control-for-the-API&#34;&gt;Implementing Role-Based Access Control for the API&lt;/h2&gt;&lt;p&gt;As mentioned earlier, the &lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;admin&lt;/code&gt; endpoint requires the access token to contain a &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt; permission to access the admin data. This is often referred to as &lt;a href=&#34;https://auth0.com/docs/authorization/rbac/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Role-Based Access Control (RBAC)&lt;/a&gt;, where permissions have to be assigned to users based on their role within an organization.&lt;/p&gt;&lt;p&gt;In this section, to implement and configure this access control, you will do the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Enable RBAC (Role-Based Access Control) Settings within your Auth0 Dashboard&lt;/li&gt;&lt;li&gt;Create an &lt;code&gt;admin&lt;/code&gt; role within the Dashboard&lt;/li&gt;&lt;li&gt;Create specific permission. &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt; to be precise.&lt;/li&gt;&lt;li&gt;Add the newly created permission to the &lt;code&gt;admin&lt;/code&gt; role.&lt;/li&gt;&lt;li&gt;Assign the new role to a particular user&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Enable-RBAC-Settings&#34;&gt;Enable RBAC Settings&lt;/h3&gt;&lt;p&gt;For role-based access control (RBAC) to work properly, you must enable it for your API using either the Dashboard or the &lt;a href=&#34;https://auth0.com/docs/api/management/v2&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Management API&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Navigate to your Auth0 Dashboard and click on APIs, then select the API created earlier &lt;code&gt;Symfony &lt;span&gt;API&lt;/span&gt; Server&lt;/code&gt;, and scroll down to the &lt;strong&gt;RBAC Settings&lt;/strong&gt; section:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/50vg4Z7jVryiHpYPAejaNq/6bd3f21c3a44cfa4b8eaed123df54760/10_symfony.png&#34; alt=&#34;RBAC Settings&#34;/&gt;&lt;/p&gt;&lt;p&gt;Enable RBAC by toggling both buttons here: &amp;#34;Enable RBAC&amp;#34; and &amp;#34;Add Permissions in the Access Token&amp;#34;. This will enforce role-based access control authorization policies for any endpoint of choice and ensure that the &lt;code&gt;permissions&lt;/code&gt; claim is added to the access token. Click on the &lt;strong&gt;Save&lt;/strong&gt; button to update the changes.&lt;/p&gt;&lt;h3 id=&#34;Create-an-Admin-Role&#34;&gt;Create an Admin Role&lt;/h3&gt;&lt;p&gt;You can create &lt;a href=&#34;https://auth0.com/docs/authorization/rbac&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;roles&lt;/a&gt; using Auth0&amp;#39;s Dashboard or the Management API. The roles can be used with the &lt;a href=&#34;https://auth0.com/docs/authorization/rbac/auth-core-features&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;API Authorization Core feature set&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Go to the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://manage.auth0.com/dashboard&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Dashboard&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Click on &lt;strong&gt;User Management&lt;/strong&gt; from the side menu bar&lt;/li&gt;&lt;li&gt;Click on &lt;a href=&#34;https://manage.auth0.com/#/roles&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Roles&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Next, click on the &lt;strong&gt;Create role&lt;/strong&gt; button&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Give the role a name, such as &amp;#34;Admin&amp;#34; and add a description, such as &amp;#34;Read all admin messages&amp;#34;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6flmQaBc2CZhz6Qv0rfFlL/55641a0338d351a75ba27001e9002122/11_symfony.png&#34; alt=&#34;Create New Role&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Create-permissions&#34;&gt;Create permissions&lt;/h3&gt;&lt;p&gt;Go back to the &lt;code&gt;Symfony &lt;span&gt;API&lt;/span&gt; Server&lt;/code&gt; page from the API menu in the dashboard, and click on the &amp;#34;Permissions&amp;#34; tab from the same page to define permission and its scope.&lt;/p&gt;&lt;p&gt;Under &amp;#34;Permission (Scope), paste &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt;. For &amp;#34;Description&amp;#34;, put &amp;#34;Read admin messages&amp;#34;. Make sure you click &amp;#34;Add&amp;#34; to save the permission.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6aqPdSpcjKwpgw8JsXmKUm/8edbf0ada35c1f0c93e2453fd6d3d592/12_symfony.png&#34; alt=&#34;Create Permission&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Add-permissions-to-roles&#34;&gt;Add permissions to roles&lt;/h3&gt;&lt;p&gt;Now that you have created the &lt;code&gt;Admin&lt;/code&gt; role and its corresponding permission, the next thing to do is to add the permission to the newly created role.&lt;/p&gt;&lt;p&gt;Go back to the &amp;#34;Roles&amp;#34; page in &amp;#34;User Management&amp;#34;&amp;gt; &amp;#34;Roles&amp;#34;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/63t7lSYYZ9brPwZ4AwnUIi/c3c65755cc2be2b7c1002af967f2b64d/13_symfony.png&#34; alt=&#34;List of Roles&#34;/&gt;&lt;/p&gt;&lt;p&gt;Click on the Admin role that you created earlier, and then click on the Permissions tab. Now click on the &lt;strong&gt;Add Permissions&lt;/strong&gt; button. You will see a page like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6UWjqagHeVrmhZzPsgWNrg/02528dd102b21ca9d77b005f319f76be/14_symfony.png&#34; alt=&#34;Add Permission&#34;/&gt;&lt;/p&gt;&lt;p&gt;Select the API from the list; in our case, that would be &lt;code&gt;Symfony &lt;span&gt;API&lt;/span&gt; Server&lt;/code&gt;. Check the box next &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt; to indicate the permission for the Admin role. Finally, click on the &lt;strong&gt;Add Permissions&lt;/strong&gt; to save the changes.&lt;/p&gt;&lt;h3 id=&#34;Assign-roles-to-users&#34;&gt;Assign roles to users&lt;/h3&gt;&lt;p&gt;There are two ways to assign a role to a user. You can choose a user from the &lt;strong&gt;Users&lt;/strong&gt; list and then assign a role, or you can go to the &lt;strong&gt;User Details&lt;/strong&gt; (user profile) page for an individual user and choose a role to assign in the &lt;strong&gt;Roles&lt;/strong&gt; tab. You will stick with the Users list in this tutorial.&lt;/p&gt;&lt;p&gt;To do that:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Go to &lt;a href=&#34;https://manage.auth0.com/#/users&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Dashboard &amp;gt; User Management &amp;gt; Users&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Click &amp;#34;&lt;strong&gt;...&lt;/strong&gt;&amp;#34; next to the user you want to modify, and select &lt;strong&gt;Assign Roles&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose the role (s) you wish to assign, then click &lt;strong&gt;Assign&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/26wQrwLBmhjIRzggtIEHIb/ccf3b5ab7dd160e97c75b25b8bee0cb7/15_symfony.png&#34; alt=&#34;Assign Role to User&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Updating-Web-Service-User-Provider&#34;&gt;Updating Web Service User Provider&lt;/h2&gt;&lt;p&gt;At this point, once a user is authenticated via the API, the &lt;code&gt;access token&lt;/code&gt; that will be returned will either contain a &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt; permission or not. To check for this permission before allowing the user to access admin data, you will update the &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;Security&lt;span&gt;/&lt;/span&gt;User&lt;span&gt;/&lt;/span&gt;WebServiceUserProvider&lt;span&gt;.&lt;/span&gt;php&lt;/code&gt; file as shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;...&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WebServiceUserProvider&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;JWTUserProviderInterface&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;loadUserByJWT&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;$jwt&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;:&lt;/span&gt; &lt;span&gt;WebServiceUser&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;$data&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;sub&amp;#39;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;$jwt&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;sub&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;$roles&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;$roles&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;in_array&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;read:admin-messages&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;$jwt&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;permissions&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; &lt;span&gt;&amp;#39;ROLE_ADMIN&amp;#39;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;ROLE_OAUTH_AUTHENTICATED&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;WebServiceUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;$data&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;$roles&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;...&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, you checked if the &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt; is present in the permissions array or not. If present, then a role of a &lt;code&gt;&lt;span&gt;ROLE_ADMIN&lt;/span&gt;&lt;/code&gt; will be assigned to the authenticated user. Otherwise, a role of &lt;code&gt;&lt;span&gt;ROLE_OAUTH_AUTHENTICATED&lt;/span&gt;&lt;/code&gt; would be assigned.&lt;/p&gt;&lt;p&gt;Also, open &lt;code&gt;config&lt;span&gt;/&lt;/span&gt;packages&lt;span&gt;/&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt; and update its content as shown here:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;security&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;enable_authenticator_manager&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;# https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers&lt;/span&gt;&#xA;  &lt;span&gt;providers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;#        users_in_memory: { memory: null }&lt;/span&gt;&#xA;    &lt;span&gt;web_service_user_provider&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; App\Security\User\WebServiceUserProvider&#xA;  &lt;span&gt;firewalls&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;dev&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;pattern&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^/(_(profiler&lt;span&gt;|&lt;/span&gt;wdt)&lt;span&gt;|&lt;/span&gt;css&lt;span&gt;|&lt;/span&gt;images&lt;span&gt;|&lt;/span&gt;js)/&#xA;      &lt;span&gt;security&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&#xA;    &lt;span&gt;secured_area&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;pattern&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^/api&#xA;      &lt;span&gt;stateless&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;      &lt;span&gt;guard&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;authenticators&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;          &lt;span&gt;id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; App\Security\User\GuardAuthenticator&#xA;      &lt;span&gt;provider&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; web_service_user_provider&#xA;  &lt;span&gt;role_hierarchy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;ROLE_ADMIN&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;ROLE_OAUTH_AUTHENTICATED&lt;span&gt;,&lt;/span&gt; ROLE_ALLOWED_TO_SWITCH&lt;span&gt;]&lt;/span&gt;&#xA;  &lt;span&gt;# Easy way to control access for large sections of your site&lt;/span&gt;&#xA;  &lt;span&gt;# Note: Only the *first* access control that matches will be used&lt;/span&gt;&#xA;  &lt;span&gt;access_control&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;path&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^/api/messages/public&lt;span&gt;,&lt;/span&gt; &lt;span&gt;roles&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; PUBLIC_ACCESS &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;path&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^/api/messages/protected&lt;span&gt;,&lt;/span&gt; &lt;span&gt;roles&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ROLE_OAUTH_AUTHENTICATED &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;path&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^/api/messages/admin&lt;span&gt;,&lt;/span&gt; &lt;span&gt;roles&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ROLE_ADMIN &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From the snippet above, you updated the role for the &lt;code&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;admin&lt;/code&gt; endpoint.&lt;/p&gt;&lt;h2 id=&#34;Creating-an-event-subscriber&#34;&gt;Creating an event subscriber&lt;/h2&gt;&lt;p&gt;Once an unauthorized user tries to access any of the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;admin&lt;/code&gt; endpoints without the appropriate permission, an exception will be thrown, indicating that such access is forbidden.&lt;/p&gt;&lt;p&gt;In this section, you will create an event subscriber that will listen to the forbidden event and return an appropriate message. To do that, create a folder named &lt;code&gt;EventSubscriber&lt;/code&gt; within the &lt;code&gt;src&lt;/code&gt; directory, and then create a new file named &lt;code&gt;ExceptionSubscriber&lt;span&gt;.&lt;/span&gt;php&lt;/code&gt; within it. Open the newly created file and use the following content for it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;App&lt;span&gt;\&lt;/span&gt;EventSubscriber&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;EventDispatcher&lt;span&gt;\&lt;/span&gt;EventSubscriberInterface&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;HttpKernel&lt;span&gt;\&lt;/span&gt;Event&lt;span&gt;\&lt;/span&gt;ExceptionEvent&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;HttpKernel&lt;span&gt;\&lt;/span&gt;Exception&lt;span&gt;\&lt;/span&gt;AccessDeniedHttpException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;HttpKernel&lt;span&gt;\&lt;/span&gt;KernelEvents&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;HttpFoundation&lt;span&gt;\&lt;/span&gt;JsonResponse&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;use&lt;/span&gt; &lt;span&gt;Symfony&lt;span&gt;\&lt;/span&gt;Component&lt;span&gt;\&lt;/span&gt;HttpFoundation&lt;span&gt;\&lt;/span&gt;Response&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ExceptionSubscriber&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;EventSubscriberInterface&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;getSubscribedEvents&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;KernelEvents&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;EXCEPTION&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;onKernelException&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;        &lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;onKernelException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ExceptionEvent&lt;/span&gt; &lt;span&gt;$event&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;$exception&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;$event&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;getThrowable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;$exception&lt;/span&gt; &lt;span&gt;instanceof&lt;/span&gt; &lt;span&gt;AccessDeniedHttpException&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;$event&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;JsonResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;                &lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;Insufficient scopes.&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Response&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;HTTP_UNAUTHORIZED&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;$event&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;stopPropagation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$exception&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With all the required changes made, run the API server by issuing the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;symfony serve&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Testing-the-Admin-Endpoint&#34;&gt;Testing the Admin Endpoint&lt;/h2&gt;&lt;p&gt;As mentioned, unlike other endpoints created so far, the &lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;admin&lt;/code&gt; endpoint requires that the access token contains the &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt; permission. Since it&amp;#39;s a bit difficult and not advisable to manipulate the access token from the Machine-to-Machine application on the Auth0 Dashboard, we will take a different approach and use a client application to simulate and test the client-server interaction.&lt;/p&gt;&lt;p&gt;This is the best way, for now, to ensure that we have an interface for users to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Log in and Logout&lt;/li&gt;&lt;li&gt;Retrieve user profile information&lt;/li&gt;&lt;li&gt;Protect application routes&lt;/li&gt;&lt;li&gt;Make secure calls to an API&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Note: Feel free to use your client app, if any, for this process.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;To use a pre-built client app, issue the following command from the terminal to clone the app from GitHub:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;git&lt;/span&gt; clone https://github.com/auth0-sample-gallery/spa_angular_typescript_hello-world.git hello-world-demo&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will clone the demo application within a new folder named &lt;code&gt;hello&lt;span&gt;-&lt;/span&gt;world&lt;span&gt;-&lt;/span&gt;demo&lt;/code&gt; in your development directory.&lt;/p&gt;&lt;p&gt;Before installing the project&amp;#39;s dependencies, ensure that you have &lt;a href=&#34;https://angular.io/cli&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Angular CLI&lt;/a&gt; installed. You can verify by issuing this command from the terminal on your system.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ng --version&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output will be the details of the current version of Angular CLI that you have installed on your system. If not installed, follow the instructions &lt;a href=&#34;https://github.com/angular/angular-cli&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here to configure Angular CLI globally&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Move into the new project&amp;#39;s folder and issue the following command to install the required dependencies:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// Change directory&#xA;&lt;span&gt;cd&lt;/span&gt; hello-world-demo&#xA;&#xA;// Install dependencies&#xA;&lt;span&gt;npm&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The starter project uses a custom stylesheet to style and layout the application, so you don&amp;#39;t have to make any changes.&lt;/p&gt;&lt;h3 id=&#34;Connect-client-application-to-Auth0&#34;&gt;Connect client application to Auth0&lt;/h3&gt;&lt;p&gt;Next, you need to connect this application to Auth0. Back in your Auth0 dashboard, click on &amp;#34;Applications&amp;#34; &amp;gt; &amp;#34;Applications&amp;#34; &amp;gt; &amp;#34;Create Application&amp;#34;.&lt;/p&gt;&lt;p&gt;Give it a name like &amp;#34;Angular Symfony App&amp;#34; and select &amp;#34;Single Page Web Applications&amp;#34; for the application name. Finally, click &amp;#34;Create&amp;#34;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3oAEPM8mTPAzkwMbXsiMNT/68c9e03567ccabda8065f38804bf0bf4/16_symfony.png&#34; alt=&#34;Auth0&#34;/&gt;&lt;/p&gt;&lt;p&gt;The Angular demo application will redirect users to the Auth0 Login page whenever an authentication request is made. Auth0 will then redirect back with the necessary credentials.&lt;/p&gt;&lt;p&gt;For that redirection to happen securely, you must specify the URL to which Auth0 can redirect once it validates a user&amp;#39;s credentials. Back in the &lt;a href=&#34;https://manage.auth0.com/#/applications&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 dashboard&lt;/a&gt;, select the application created for your API, click on the &lt;strong&gt;Settings&lt;/strong&gt; tab on that page, and scroll down to locate the following fields:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Allowed Callback URLs&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Allowed Web Origins&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Allowed Logout URLs&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Use &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;4040&lt;/span&gt;&lt;/code&gt; as the value for each of the fields because the Client application will be accessible on that URL during development. Click on the &lt;strong&gt;Save Changes&lt;/strong&gt; to proceed.&lt;/p&gt;&lt;p&gt;With the URLs properly specified, connect the client application with Auth0 by creating a new file named &lt;code&gt;env&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; in the root directory of the client application and populating it as shown here:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;domain&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_AUTH0_DOMAIN&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;clientId&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_AUTH0_CLIENT_ID&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;audience&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;http://localhost:8000&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;apiServerUrl&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;http://localhost:8000&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Make sure you fill in &amp;#34;Domain&amp;#34; and &amp;#34;Client ID&amp;#34; with your values from the Application page in the &lt;a href=&#34;https://manage.auth0.com/dashboard/#/applications&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 dashboard&lt;/a&gt;.&#xA;Now, go ahead and run the application using the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ng serve&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Navigate to &lt;a href=&#34;http://localhost:4040&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://localhost:4040&lt;/a&gt; to access the application.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2cBS41pGxIJyUGUQcMXMgU/4eca3d53388a6a963d43daf5af8b6a61/17_symfony.jpg&#34; alt=&#34;Angular Demo App Page&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Enable-communication-between-the-client-application-and-Symfony-API-Server&#34;&gt;Enable communication between the client application and Symfony API Server&lt;/h3&gt;&lt;p&gt;By default, browsers have security measures that disable interaction and sharing of resources between applications of different domains unless it is explicitly allowed by any of the applications. This means that sending HTTP requests from the client application to the Symfony API will be disabled at the moment. To enable communication between both apps, you will need to enable &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CORS (Cross-Origin Resource Sharing)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;To enable the Symfony API, you will need to use &lt;a href=&#34;https://github.com/nelmio/NelmioCorsBundle&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the Nelmo Bundle&lt;/a&gt;. Run the following command to install it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;composer&lt;/span&gt; require nelmio/cors-bundle&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the installation process is completed, a default configuration file named &lt;code&gt;nelmio_cors&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt; will be generated in the &lt;code&gt;config&lt;span&gt;/&lt;/span&gt;packages&lt;/code&gt; folder as shown here:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;nelmio_cors&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;defaults&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;origin_regex&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;    &lt;span&gt;allow_origin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;%env(CORS_ALLOW_ORIGIN)%&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;allow_methods&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;OPTIONS&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;PUT&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;PATCH&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;DELETE&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;allow_headers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;Authorization&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;expose_headers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Link&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;max_age&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;3600&lt;/span&gt;&#xA;  &lt;span&gt;paths&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;^/&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The default configuration specified here would suffice as it stated all the appropriate HTTP verbs. Next, navigate to the &lt;code&gt;&lt;span&gt;.&lt;/span&gt;env&lt;span&gt;.&lt;/span&gt;local&lt;/code&gt; file and update its content as shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;####&amp;gt; nelmio/cors-bundle ###&lt;/span&gt;&#xA;&lt;span&gt;CORS_ALLOW_ORIGIN&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$&amp;#39;&lt;/span&gt;&#xA;&lt;span&gt;####&amp;lt; nelmio/cors-bundle ###&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, we specified that the localhost URL should be allowed.&lt;/p&gt;&lt;p&gt;Finally, start the Symfony server with:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    symfony serve&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In &lt;a href=&#34;http://localhost:4040/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the client application&lt;/a&gt;, click on the &lt;strong&gt;External API&lt;/strong&gt; button and provide your credentials.&lt;/p&gt;&lt;p&gt;Ensure that you log in with the details of the user with the Admin role as specified on the Auth0 Dashboard.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/nNt6mUe39bjuTfEDiwuAo/bb8fa2ef904d49e6125d4828fb207b1f/18_symfony.jpg&#34; alt=&#34;View Admin Endpoint Response&#34;/&gt;&lt;/p&gt;&lt;p&gt;You can also check the other endpoints by clicking on the &lt;strong&gt;PUBLIC&lt;/strong&gt; button for &lt;code&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/code&gt; endpoint or the &lt;strong&gt;PROTECTED&lt;/strong&gt; button for &lt;code&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/code&gt; endpoints as shown, respectively, below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/76DV9IFOvfN4ooG4LBN9jA/87b9f808382f8123d0f7df62be9937ca/19_symfony.jpg&#34; alt=&#34;View Public Endpoint Response&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5wnSvLgIC97PwmPTALoqtj/cf71f3c4299cecdc3b888b6e82812370/20_symfony.jpg&#34; alt=&#34;View Protected Endpoint Response&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;As shown here in this tutorial, you learned how to easily build a Symfony API server with an endpoint that can be accessed by anyone on the internet without authentication and other endpoints that require the appropriate authorization and role.&lt;/p&gt;&lt;p&gt;You created these endpoints successionally by starting with the public endpoint and going further to create two protected endpoints, namely private and admin. To completely set up and configure authentication and authorization for the protected endpoints, you leveraged Auth0&amp;#39;s API to ensure that only HTTP requests that contain the valid access token in their authorization header can retrieve data.&lt;/p&gt;&lt;p&gt;I hope that you found this tutorial helpful. The complete source code for the API server built in this post can be found &lt;a href=&#34;https://github.com/yemiwebby/symfony-api-server&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Happy coding, and please feel free to share your thoughts and questions in the comment section below.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/build-and-secure-a-simple-symfony-api-server-using-auth0/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to build a secured Symfony API server using Auth0</summary>
    <author>
      <name>Obtain a token and authorize the test application</name>
    </author>
  </entry>
  <entry>
    <title>Why Auth0 “Shifted Left” with Azure</title>
    <updated>2021-11-15T16:00:00Z</updated>
    <id>tag:auth0.com,2021-11-15:/blog/why-auth0-shifted-left-with-azure/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Choice is good. We like it when our supermarket shelves are stocked with hundreds of varieties of breakfast cereal. We pick the smartphones we use and the cars we drive. The same should be true for businesses and the technologies they use.&lt;/p&gt;&lt;p&gt;Today, we brought the Auth0 Identity Platform to Microsoft Azure, giving our private cloud customers the ability to pick the right infrastructure provider for their needs.&lt;/p&gt;&lt;p&gt;This means a greater selection of regions. Microsoft currently operates in over 60 regions around the world, making it easier to comply with data residency and sovereignty requirements.&lt;/p&gt;&lt;p&gt;And if you’re already running your app on Azure’s cloud servers, you’ll benefit from a converged infrastructure, with every component running on the same underlying cloud platform.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3LjSNS6Motv1nFGNKkIQn/3f9353b41dd9653536e2e9b9f664689a/72798-Auth0_AzureMap-D2-02-01.jpg&#34; alt=&#34;Azure&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Shifting-Security-Left-on-Microsoft-Azure&#34;&gt;Shifting Security Left on Microsoft Azure&lt;/h2&gt;&lt;p&gt;We’re equally excited to tell you about the development process. Auth0 has always prioritized security. Last year, we took this a step further with the adoption of “Shift-Left” principles. This puts security-related tasks at the start of the Software Development Life Cycle (SDLC), making it easier to build a stronger, more resilient product.&lt;/p&gt;&lt;p&gt;We remained true to these principles when building the Auth0 Identity Platform for Microsoft Azure, and are thrilled with the end result. The final product is one that reflects our &lt;strong&gt;Secure by Design&lt;/strong&gt; philosophy and faithfully adheres to industry best practices.&lt;/p&gt;&lt;p&gt;Let’s talk about what “Shift-Left” means. This is an established term in the software development sphere, and refers to a variety of domains, both security-related and otherwise. In short, you take something that would typically happen at the end of the development lifecycle and tackle it at the beginning. Test-driven development (TDD) is a notable example.&lt;/p&gt;&lt;p&gt;As Auth0’s CISO Jameeka Aaron said: “Nobody wants their CISO to show up at the last minute with 800 vulnerabilities to be fixed before release.” Our security engineering team looks for vulnerabilities during the design and development phases, and remediates issues early on to prevent a last-minute crunch, or worse, having to rework the design.&lt;/p&gt;&lt;p&gt;At Auth0, our Shift-Left process tackles both the human and technical elements of secure software development. All code must meet strict security requirements and is constantly tested against sophisticated static analysis benchmarks.&lt;/p&gt;&lt;p&gt;We also provide all developers with secure coding training, with some designated as “security champions.” These employees act as liaisons between the engineering and our dedicated platform security teams. They also receive additional training to act as security advocates within their teams.&lt;/p&gt;&lt;h2 id=&#34;Security-First-Architecture&#34;&gt;Security First Architecture&lt;/h2&gt;&lt;p&gt;As we developed the Auth0 Identity Platform for Microsoft Azure, we emphasized “shift-left” principles and focused on building a strong security architecture at the start of the development cycle.&lt;/p&gt;&lt;p&gt;We established a dedicated Azure AD tenant and automated governance controls to support resource and identity isolation, required MFA and Azure PIM for privileged access, and enforced security standards with Azure Policy. Prioritizing security in the early stages of the development process is part of our Secure by Design strategy to mitigate risk and keep customers safe from cyberthreats.&lt;/p&gt;&lt;p&gt;The Security Engineering team is also responsible for Azure customer account provisioning and management. In Azure, these are called subscriptions. These are used to isolate private cloud environments and all the associated provisioned resources, like VMs, data storage, and more.&lt;/p&gt;&lt;p&gt;We built a new service for managing Azure subscriptions, and it is integrated directly into our platform infrastructure workflows. This helped to automate how we manage our Azure Private Cloud environments and dramatically improved environment creation time. This was another part of our Azure governance to keep customer environments isolated and secure.&lt;/p&gt;&lt;h2 id=&#34;Cloudflare-on-the-Edge&#34;&gt;Cloudflare on the Edge&lt;/h2&gt;&lt;p&gt;To help protect against network-based attacks, the Auth0 Identity Platform uses Cloudflare — a popular reverse proxy and content delivery network (CDN) product.&lt;/p&gt;&lt;p&gt;Cloudflare acts as a gateway between the application and the outside world. The service proactively analyzes all inbound traffic, and blocks things that could harm the smooth functioning of the Azure instance, including malicious bots and DDoS attacks. Further protection comes from its customizable rate limiting and firewall rules.&lt;/p&gt;&lt;p&gt;This means a better, more reliable service for your users. It also comes with some significant performance advantages, too. With Cloudflare&amp;#39;s CDN, static assets (like images and scripts) are hosted close to the user, thereby reducing load times. Traffic is routed through Cloudflare&amp;#39;s Anycast network, which consists of over 250 locations in 100 countries, and provides greater resiliency and latencies below 50ms.&lt;/p&gt;&lt;h2 id=&#34;Detection---Response&#34;&gt;Detection &amp;amp; Response&lt;/h2&gt;&lt;p&gt;In the hands of an IT engineer, security professional, or developer, logs are a powerful tool. They&amp;#39;re the first place you look when remediating a fiendishly tricky problem, or trying to identify an attempted intrusion.&lt;/p&gt;&lt;p&gt;When building the Auth0 Identity Platform for Microsoft Azure, we wanted to make it easy to audit and monitor. Logging is enabled by default on all Azure instances, as well as with the back-end databases. By default, we retain logs for 13 months.&lt;/p&gt;&lt;p&gt;Each Azure environment is covered by Auth0&amp;#39;s host monitoring agents. This monitors the security, performance, configuration and state of each host. We also enabled Azure Security Center &amp;amp; Defender by default, further bolstering our security monitoring capabilities.&lt;/p&gt;&lt;h2 id=&#34;Disaster-Recovery&#34;&gt;Disaster Recovery&lt;/h2&gt;&lt;p&gt;Identity is fundamental to business. Your CIAM system is the gateway between your application and its users. You can’t afford significant downtime. With this in mind, we spent a lot of time thinking about resilience when designing the Auth0 Identity Platform for Microsoft Azure.&lt;/p&gt;&lt;p&gt;All services are provisioned across three Availability Zones (AZ). In the case of an AZ failure, service are designed to automatically resume in one of the other healthy AZs. Backups are captured every six hours and securely retained in the same region as the deployment, and we can restore an instance from the last snapshot in four hours.&lt;/p&gt;&lt;h2 id=&#34;Azure-s-Solid-Foundations&#34;&gt;Azure’s Solid Foundations&lt;/h2&gt;&lt;p&gt;Let’s wrap up by talking about Microsoft Azure itself. After all, what’s the point in building a secure platform if the underlying infrastructure isn’t up to standard?&lt;/p&gt;&lt;p&gt;Fortunately, there’s no such concerns here. We have come to appreciate the security features and tools within the underlying Azure platform and ecosystem. Microsoft also has the right mindset. The Azure access control best practices urge users to regard identity as the primary security perimeter. This reflects the changes in enterprise IT, particularly the rise of BYOD and cloud computing, which make it harder to build watertight network defenses.&lt;/p&gt;&lt;p&gt;Identity is the best way to protect your most important data. Well-defined permissions can limit the impact of a security breach, while using MFA and SSO can help prevent an account being compromised in the first place. To find out how the Auth0 Identity Platform on Microsoft Azure can benefit your organization, &lt;a href=&#34;https://auth0.com/contact-us&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;click here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/why-auth0-shifted-left-with-azure/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">How we expanded customer choice while building a security-first architecture.</summary>
  </entry>
  <entry>
    <title>Spring Cloud Streams with Apache Kafka</title>
    <updated>2021-11-10T16:43:00Z</updated>
    <id>tag:auth0.com,2021-11-10:/blog/spring-cloud-streams-with-apache-kafka/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Have you ever wondered how features like Google Maps&amp;#39; live traffic work? These systems have to gather and process data in real-time. The architecture of these systems generally involves a data pipeline that processes and transfers data to be processed further until it reaches the clients. In this article, we will see something similar with a simple example using Kafka Streams. The sample app can be found &lt;a href=&#34;https://github.com/auth0-blog/spring-cloud-stream-sample&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Introduction-to-Spring-Cloud-Stream&#34;&gt;Introduction to Spring Cloud Stream&lt;/h2&gt;&lt;p&gt;Spring Cloud Stream is a framework designed to support stream processing provided by various messaging systems like Apache Kafka, RabbitMQ, etc. The framework allows you to create processing logic without having to deal with any specific platform. It helps you build highly scalable event-driven microservices connected using these messaging systems.&lt;/p&gt;&lt;p&gt;The framework provides a flexible programming model built on already established and familiar Spring idioms and best practices. The way it works is simple; you have to provide implementations (called Binder implementations)for the messaging system that you are using. Spring cloud stream supports:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/spring-cloud/spring-cloud-stream-binder-rabbit&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;RabbitMQ&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/spring-cloud/spring-cloud-stream-binder-kafka&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Apache Kafka&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/spring-cloud/spring-cloud-stream-binder-kafka/tree/main/spring-cloud-stream-binder-kafka-streams&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Kafka Streams&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/spring-cloud/spring-cloud-stream-binder-aws-kinesis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Amazon Kinesis&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And a few others. The links above will take you to the binder implementations. In this article, we will look into a simple application that uses Kafka Streams as a stream processor listening to events on a topic, processing the data, and publishing it to the outgoing topic.&lt;/p&gt;&lt;h2 id=&#34;Introduction-to-Apache-Kafka&#34;&gt;Introduction to Apache Kafka&lt;/h2&gt;&lt;p&gt;Apache Kafka is a distributed publish-subscribe messaging system. It is a system that publishes and subscribes to a stream of records, similar to a message queue. Kafka is suitable for both offline and online message consumption. It is fault-tolerant, robust, and has a high throughput. Kafka is run as a cluster on one or more servers that can span multiple data centers. The Kafka cluster stores stream of records in categories called topics. Each record consists of a key, a value, and a timestamp. For more information on topics, Producer API, Consumer API, and event streaming, please visit this &lt;a href=&#34;https://kafka.apache.org/intro&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Introduction-to-Kafka-Streams&#34;&gt;Introduction to Kafka Streams&lt;/h2&gt;&lt;p&gt;Kafka Streams is a library that can be used to consume data, process it, and produce new data, all in real-time. It works on a continuous, never-ending stream of data. Consider an example of the stock market. The stock prices fluctuate every second, and to be able to provide real-time value to the customer, you would use something like Kafka streams.&lt;/p&gt;&lt;h2 id=&#34;Pre-requisites-&#34;&gt;Pre-requisites:&lt;/h2&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Basic knowledge of &lt;a href=&#34;https://jdk.java.net/archive/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Java 11&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Basic knowledge of &lt;a href=&#34;https://spring.io/projects/spring-boot&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring Boot&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;A basic understanding of &lt;a href=&#34;https://kafka.apache.org/intro&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Apache Kafka&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Docker&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/compose/install/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Docker Compose&lt;/a&gt; for running Kafka locally.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;Setting-up-Spring-Boot-App&#34;&gt;Setting up Spring Boot App&lt;/h2&gt;&lt;p&gt;Let us first create a Spring Boot project with the help of the &lt;a href=&#34;https://start.spring.io/#!type=mavenproject&amp;amp;language=java&amp;amp;platformVersion=2.4.5.RELEASE&amp;amp;packaging=jar&amp;amp;jvmVersion=11&amp;amp;groupId=io.pratik&amp;amp;artifactId=springcloudsqs&amp;amp;name=springcloudsqs&amp;amp;description=Demo%20project%20for%20Spring%20cloud%20sqs&amp;amp;packageName=io.pratik.springcloudsqs&amp;amp;dependencies=web,lombok&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring boot Initializr&lt;/a&gt;, and then open the project in our favorite IDE. Select Gradle project and Java language. Last but not least, select Spring boot version &lt;code&gt;&lt;span&gt;2.5&lt;/span&gt;&lt;span&gt;.4&lt;/span&gt;&lt;/code&gt;. Fill in the project metadata and click generate.&lt;/p&gt;&lt;p&gt;For Spring Cloud, We need to configure Spring Kafka and Kafka Streams in our &lt;code&gt;gradle&lt;span&gt;.&lt;/span&gt;build&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;dependencies &lt;span&gt;{&lt;/span&gt;&#xA;    implementation &lt;span&gt;&amp;#39;org.springframework.boot:spring-boot-starter&amp;#39;&lt;/span&gt;&#xA;    implementation &lt;span&gt;&amp;#39;org.apache.kafka:kafka-streams&amp;#39;&lt;/span&gt;&#xA;    implementation &lt;span&gt;&amp;#39;org.springframework.kafka:spring-kafka&amp;#39;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s setup the config for Kafka. We need to define a few parameters on how we want to serialize and deserialize the data. The config is easy to set up and understand. Since our application will be listening to a topic and producing the output to a different topic, our application is a producer and a consumer both. So, we need to define config for both producer and consumer.&lt;/p&gt;&lt;p&gt;In the application.yml file, we need to add these entries.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;kafka&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;bootstrap-servers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;9092&lt;/span&gt;&#xA;  &lt;span&gt;properties&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;schema.registry.url&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; http&lt;span&gt;:&lt;/span&gt;//localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8081&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;producer&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;client-id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; $&lt;span&gt;{&lt;/span&gt;spring.application.name&lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;key-serializer&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; org.apache.kafka.common.serialization.StringSerializer&#xA;    &lt;span&gt;value-serializer&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; org.apache.kafka.common.serialization.StringSerializer&#xA;&#xA;  &lt;span&gt;consumer&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;client-id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; $&lt;span&gt;{&lt;/span&gt;spring.application.name&lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;group-id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; $&lt;span&gt;{&lt;/span&gt;spring.application.name&lt;span&gt;}&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;group&#xA;    &lt;span&gt;key-deserializer&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; org.apache.kafka.common.serialization.StringDeserializer&#xA;    &lt;span&gt;value-deserializer&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; org.apache.kafka.common.serialization.StringDeserializer&#xA;    &lt;span&gt;auto-offset-reset&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; earliest&#xA;&#xA;  &lt;span&gt;streams&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;client-id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; $&lt;span&gt;{&lt;/span&gt;spring.application.name&lt;span&gt;}&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;stream&#xA;    &lt;span&gt;application-id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; $&lt;span&gt;{&lt;/span&gt;spring.application.name&lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;properties&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;default.key.serde&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; org.apache.kafka.common.serialization.Serdes$StringSerde&#xA;      &lt;span&gt;default.value.serde&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; org.apache.kafka.common.serialization.Serdes$StringSerde&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you look at the config carefully, we are setting up serializers and de-serializers for the producer, the consumer, and the streams (serde is just short for serializer-deserializer). This is the only setup we need for the Spring boot project.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s jump into creating the producer, the consumer, and the stream processor. I have taken a simple example here. We are producing random numbers every 2 seconds using a scheduler.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&#xA;&lt;span&gt;@AllArgsConstructor&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;NumberProducer&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;NumberPublisher&lt;/span&gt; numberPublisher&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Scheduled&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;fixedRate &lt;span&gt;=&lt;/span&gt; &lt;span&gt;2000&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;produceIntStream&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;Random&lt;/span&gt; random &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Random&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        numberPublisher&lt;span&gt;.&lt;/span&gt;&lt;span&gt;produce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;random&lt;span&gt;.&lt;/span&gt;&lt;span&gt;nextInt&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The number publisher is the actual publisher that puts the data on a topic. We set a key for the message and the data (which is a random number in our case).&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf4j&lt;/span&gt;&#xA;&lt;span&gt;@Component&lt;/span&gt;&#xA;&lt;span&gt;@AllArgsConstructor&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;NumberPublisher&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;KafkaTemplate&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; kafkaTemplate&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;produce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Integer&lt;/span&gt; randomNumber&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;String&lt;/span&gt; s &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Odd&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;randomNumber &lt;span&gt;%&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; s &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Even&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;System&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;out&lt;span&gt;.&lt;/span&gt;&lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Produced number: &amp;#34;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; randomNumber&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        kafkaTemplate&lt;span&gt;.&lt;/span&gt;&lt;span&gt;send&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;INPUT_TOPIC_NAME&lt;span&gt;,&lt;/span&gt; s&lt;span&gt;,&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;valueOf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;randomNumber&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The key is defined as a String, which is either even or odd based on the number. We use the Kafka template to send the message; this comes from the spring-kafka library. It abstracts out the logic for publishing and consuming the messages.&lt;/p&gt;&lt;p&gt;Next up, we set up our stream processor that listens to the topic on which the publisher is putting the messages. This is where it gets interesting. We listen to the &lt;code&gt;&lt;span&gt;INPUT_TOPIC&lt;/span&gt;&lt;/code&gt; and then process the data. In this case, the job of the stream processor is to filter out the odd numbers and only send the even numbers on the &lt;code&gt;&lt;span&gt;OUTPUT_TOPIC&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&#xA;&lt;span&gt;@EnableKafkaStreams&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;KafkaStream&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; OUTPUT_TOPIC_NAME &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;even-number-topic&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; INPUT_TOPIC_NAME &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;number-topic&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Bean&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;KStream&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;evenNumbersStream&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;StreamsBuilder&lt;/span&gt; kStreamBuilder&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;KStream&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; input &lt;span&gt;=&lt;/span&gt; kStreamBuilder&lt;span&gt;.&lt;/span&gt;&lt;span&gt;stream&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;INPUT_TOPIC_NAME&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;KStream&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; output &lt;span&gt;=&lt;/span&gt; input&lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;,&lt;/span&gt; value&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&amp;gt;&lt;/span&gt; key&lt;span&gt;.&lt;/span&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Even&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        output&lt;span&gt;.&lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;OUTPUT_TOPIC_NAME&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; output&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You might be wondering about that KStream in the return type of our method. I will give a brief overview here as it is outside the scope of this article.&lt;/p&gt;&lt;p&gt;KStream -&amp;gt; A Kafka stream that is append-only. When you provide data with the same key, it will not update the previous record. It provides several operations that are very useful for data processing, like a filter, map, partition, flatMap, etc. You can read more about KStreams &lt;a href=&#34;https://www.confluent.co.uk/blog/introducing-kafka-streams-stream-processing-made-simple/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Finally, when we have processed the data, we put it on an &lt;code&gt;&lt;span&gt;OUTGOING_TOPIC&lt;/span&gt;&lt;/code&gt;. For the sake of simplicity and completion, I am listening to that topic in our application. This generally will not be the case, as there would be another application that would be consuming from that topic and hence the name &lt;code&gt;&lt;span&gt;OUTGOING_TOPIC&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&#xA;&lt;span&gt;@EnableKafka&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;EvenNumberConsumer&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@KafkaListener&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;topics &lt;span&gt;=&lt;/span&gt; OUTPUT_TOPIC_NAME&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;receive&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt; value&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;System&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;out&lt;span&gt;.&lt;/span&gt;&lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Received number: &amp;#34;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; value&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The application code is complete. Let&amp;#39;s set up Kafka locally.&lt;/p&gt;&lt;h2 id=&#34;Setting-up-Kafka-Locally&#34;&gt;Setting up Kafka Locally&lt;/h2&gt;&lt;p&gt;Setting up Kafka is easy, but it requires some dependency to run, you just need to use the docker-compose file below, and it will start the Kafka server locally. Add the &lt;code&gt;docker compose&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt; to the repository&amp;#39;s root directory. Start the required dependency using: &lt;code&gt;docker&lt;span&gt;-&lt;/span&gt;compose up&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;3.7&amp;#39;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;services&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;kafka&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; confluentinc/cp&lt;span&gt;-&lt;/span&gt;kafka&lt;span&gt;:&lt;/span&gt;5.5.0&#xA;    &lt;span&gt;container_name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; kafka&#xA;    &lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; kafka&#xA;    &lt;span&gt;restart&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; always&#xA;    &lt;span&gt;environment&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;KAFKA_LISTENERS&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; LISTENER_DOCKER_INTERNAL&lt;span&gt;:&lt;/span&gt;//&lt;span&gt;:&lt;/span&gt;&lt;span&gt;29092&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;LISTENER_DOCKER_EXTERNAL&lt;span&gt;:&lt;/span&gt;//&lt;span&gt;:&lt;/span&gt;&lt;span&gt;9092&lt;/span&gt;&#xA;      &lt;span&gt;KAFKA_ADVERTISED_LISTENERS&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; LISTENER_DOCKER_INTERNAL&lt;span&gt;:&lt;/span&gt;//kafka&lt;span&gt;:&lt;/span&gt;&lt;span&gt;29092&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;LISTENER_DOCKER_EXTERNAL&lt;span&gt;:&lt;/span&gt;//localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;9092&lt;/span&gt;&#xA;      &lt;span&gt;KAFKA_LISTENER_SECURITY_PROTOCOL_MAP&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; LISTENER_DOCKER_INTERNAL&lt;span&gt;:&lt;/span&gt;PLAINTEXT&lt;span&gt;,&lt;/span&gt;LISTENER_DOCKER_EXTERNAL&lt;span&gt;:&lt;/span&gt;PLAINTEXT&#xA;      &lt;span&gt;KAFKA_ZOOKEEPER_CONNECT&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; zookeeper&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2181&lt;/span&gt;&#xA;      &lt;span&gt;KAFKA_INTER_BROKER_LISTENER_NAME&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; LISTENER_DOCKER_INTERNAL&#xA;      &lt;span&gt;KAFKA_AUTO_CREATE_TOPICS_ENABLE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&#xA;      &lt;span&gt;KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&#xA;    &lt;span&gt;ports&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;-&lt;/span&gt; 9092&lt;span&gt;:&lt;/span&gt;&lt;span&gt;9092&lt;/span&gt;&#xA;      &lt;span&gt;-&lt;/span&gt; 9999&lt;span&gt;:&lt;/span&gt;&lt;span&gt;9999&lt;/span&gt;&#xA;    &lt;span&gt;depends_on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;-&lt;/span&gt; zookeeper&#xA;&#xA;  &lt;span&gt;zookeeper&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;container_name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; zookeeper&#xA;    &lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; zookeeper&#xA;    &lt;span&gt;image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; confluentinc/cp&lt;span&gt;-&lt;/span&gt;zookeeper&lt;span&gt;:&lt;/span&gt;5.5.0&#xA;    &lt;span&gt;environment&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;ZOOKEEPER_CLIENT_PORT&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;2181&lt;/span&gt;&#xA;    &lt;span&gt;ports&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;-&lt;/span&gt; 2181&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2181&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;schema-registry&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; confluentinc/cp&lt;span&gt;-&lt;/span&gt;schema&lt;span&gt;-&lt;/span&gt;registry&lt;span&gt;:&lt;/span&gt;5.5.0&#xA;    &lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; schema&lt;span&gt;-&lt;/span&gt;registry&#xA;    &lt;span&gt;container_name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; schema&lt;span&gt;-&lt;/span&gt;registry&#xA;    &lt;span&gt;restart&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; always&#xA;    &lt;span&gt;environment&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;kafka:29092&amp;#34;&lt;/span&gt;&#xA;      &lt;span&gt;SCHEMA_REGISTRY_HOST_NAME&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; schema&lt;span&gt;-&lt;/span&gt;registry&#xA;      &lt;span&gt;SCHEMA_REGISTRY_LISTENERS&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;http://0.0.0.0:8081&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;ports&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;-&lt;/span&gt; 8081&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8081&lt;/span&gt;&#xA;    &lt;span&gt;depends_on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;-&lt;/span&gt; zookeeper&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;#39;s it!&lt;/p&gt;&lt;h2 id=&#34;Verify-Sending--Processing--and-Receiving-of-Events&#34;&gt;Verify Sending, Processing, and Receiving of Events&lt;/h2&gt;&lt;p&gt;Run the Spring Boot app:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Clone the sample code from the repo. Go to the root directory.&lt;/li&gt;&lt;li&gt;Use the Gradle plugin to run your Spring Boot app using the command in the project directory.&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;./gradlew bootRun&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Just run the application. You should see logs like this.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Received number: &lt;span&gt;910&lt;/span&gt;&#xA;Received number: &lt;span&gt;320&lt;/span&gt;&#xA;Received number: &lt;span&gt;16&lt;/span&gt;&#xA;Received number: &lt;span&gt;526&lt;/span&gt;&#xA;Received number: &lt;span&gt;76&lt;/span&gt;&#xA;Received number: &lt;span&gt;936&lt;/span&gt;&#xA;Received number: &lt;span&gt;642&lt;/span&gt;&#xA;Produced number: &lt;span&gt;510&lt;/span&gt;&#xA;Received number: &lt;span&gt;510&lt;/span&gt;&#xA;Produced number: &lt;span&gt;996&lt;/span&gt;&#xA;Received number: &lt;span&gt;996&lt;/span&gt;&#xA;Produced number: &lt;span&gt;897&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Spring Cloud Stream provides a simple and convenient way to create apps that can process streams and publish data to different topics. You can build micro-services that talk to each other using Kafka messages and process data like you would process in a single application.&lt;/p&gt;&lt;p&gt;In this article, we have learned how to build a Spring Cloud Stream app that uses Kafka Streams. We saw how Spring Cloud Stream provides an easy way to set up and run an application that can consumer, process, and publish messages to Kafka topics without the hassle of configuring each. With such little code, we could do so much.&lt;/p&gt;&lt;p&gt;You can refer to the repository used in the article on &lt;a href=&#34;https://github.com/auth0-blog/spring-cloud-stream-sample&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/spring-cloud-streams-with-apache-kafka/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to process streams of data from Apache Kafka topics using Spring Cloud Streams</summary>
  </entry>
  <entry>
    <title>Introducing Cost Savings for Nonprofits on All Auth0 Plans</title>
    <updated>2021-11-10T16:14:00Z</updated>
    <id>tag:auth0.com,2021-11-10:/blog/introducing-cost-savings-for-nonprofits-on-all-auth0-plans/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;As a former business owner, nonprofit board member, developer, and volunteer; I know of one consistent, daunting, universal expenditure all modern organizations face - their tech stack. While some items, such as hardware, have a front-loaded cost that can be justified and managed through a lifetime; taking an uncertain “digital leap” for philanthropic entities can be challenging. Even when it&amp;#39;s known and agreed that improvements to legacy systems and tools are needed, or that building something completely custom from the ground up to meet the demands of a digital-first economy is in order, there is always trepidation when it comes to modernization and understandably so.&lt;/p&gt;&lt;p&gt;All these issues are even more challenging for charitable, nonprofit organizations and social enterprises, collectively “SIOs,” or Social Impact Organizations. These organizations are critical to our society but sufficient unrestricted funds, tech expertise and time to upgrade their systems and processes are especially precious commodities.&lt;/p&gt;&lt;h2 id=&#34;Digital-Is-Primal&#34;&gt;Digital Is Primal&lt;/h2&gt;&lt;p&gt;As evidenced by the existence of social sector industry associations like &lt;a href=&#34;http://nten.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;nten&lt;/a&gt; and &lt;a href=&#34;http://tagtech.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;tagtech&lt;/a&gt; that seek to enhance technology capacity building, Social Impact Organizations (SIOs) have recognized the need to modernize their operations. A message we frequently hear from many sources is that younger generations are contributing to a better world as part of their core lifestyle, and SIOs need to “meet their audience where they are at.” What we have learned from these groups and analysts is that 80% of SIOs are smaller organizations that need sustainable, scalable growth - but that growth is dependent on utilizing and creating affordable digital solutions. Knowing this, we feel expanding our product offer to SIOs for all of our products, not just Enterprise plans but now including Self Service plans for small to medium-sized organizations we can support SIOs regardless of organizational size, internal tech expertise or IT budget levels.&lt;/p&gt;&lt;p&gt;Stakeholders expect a secure, quality digital experience from SIOs just as they would from commercial enterprises. We’re committed to creating an offer which helps SIOs satisfy that expectation with minimal cost, installation effort, and ongoing maintenance. We help SIOs secure their stakeholder identities and access so they can focus on what matters: delivering innovative, high-impact services to people most in need in our communities. There is no higher calling for them or for us.&lt;/p&gt;&lt;h2 id=&#34;Understanding-Your-Need-as-an-SIO&#34;&gt;Understanding Your Need as an SIO&lt;/h2&gt;&lt;p&gt;Nonprofits and for-profit social enterprises looking to upgrade the experience of their donors, staff, volunteers, and mission-beneficiaries without compromising on security and compliance, should look at the modern, platform-agnostic Customer Identity &amp;amp; Access Management solutions that Auth0 has to offer.&lt;/p&gt;&lt;p&gt;In fact, our products and services were built with the unique needs of nonprofit and social enterprise organizations in mind. Much like our Healthcare and Public Sector clients, we know yours is an industry with stringent trust requirements, and like these other verticals, we know that the ability to rapidly iterate, respond, and evolve has been a constant challenge plaguing everyone in a digital-first economy.&lt;/p&gt;&lt;p&gt;By reducing the hours and specialty skills required to create “a great login experience” (which we better know as identity, access, authentication, and security), application development becomes attainable and affordable for any size organization.&lt;/p&gt;&lt;h2 id=&#34;We-Want-Everyone-to-Be-SAFEr&#34;&gt;We Want Everyone to Be SAFEr&lt;/h2&gt;&lt;p&gt;SAFEr, where do we derive that from? Secure Access For Everyone, &lt;em&gt;but not just anyone&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Auth0 has always offered a free plan to help everyone easily deploy modern identity and security in their websites and applications.&lt;/p&gt;&lt;p&gt;You do not need to have a sophisticated developer on staff to rapidly and simply begin utilizing Auth0.&lt;/p&gt;&lt;p&gt;We provide resources, documentation, SDKs, and plugins that support developers and non-developers alike deploy better security no matter if it’s a small website or an enterprise application. &lt;strong&gt;Everyone&lt;/strong&gt;. &lt;strong&gt;SAFEr&lt;/strong&gt;. This applies to SIOs, too.&lt;/p&gt;&lt;h2 id=&#34;Enterprise-Cost-Savings&#34;&gt;Enterprise Cost Savings&lt;/h2&gt;&lt;p&gt;In addition to our free plan, unique cost savings are available on all Enterprise and Self Service plans for Social Impact customers. We established a resilient organization and funding structure, &lt;a href=&#34;http://auth0.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0.org&lt;/a&gt;, to make sure this discount is sustainable and attainable for the long-term.&lt;/p&gt;&lt;p&gt;For &lt;a href=&#34;https://auth0.com/pricing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Enterprise Plans&lt;/a&gt; eligible&lt;a href=&#34;#1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; nonprofits receive a:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;25% &lt;a href=&#34;https://auth0.com/social-impact/pricing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;discount&lt;/a&gt; on 1 year contract plans&lt;/li&gt;&lt;li&gt;30% &lt;a href=&#34;https://auth0.com/social-impact/pricing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;discount&lt;/a&gt; on 2 year contract plans&lt;/li&gt;&lt;li&gt;35% &lt;a href=&#34;https://auth0.com/social-impact/pricing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;discount&lt;/a&gt; on 3 year contract plans&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Complimentary Design &amp;amp; Discovery sessions for Enterprise Plans are available.&lt;/p&gt;&lt;h2 id=&#34;The-Big-Announcement---Our-Newest-Offer---Self-Service-&#34;&gt;The Big Announcement - Our Newest Offer - Self Service!&lt;/h2&gt;&lt;p&gt;Social Impact Organizations can rapidly become SAFEr Social Impact Organizations with a whopping 50% &lt;a href=&#34;https://auth0.com/social-impact/pricing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;cost-savings&lt;/a&gt; on our new &lt;a href=&#34;http://auth0.com/pricing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Essentials and Professional Self-Service Plans&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And with our free trial, no payment is required to start building today.&lt;/p&gt;&lt;p&gt;Not sure which plan may be right for you? Check out our compare plans feature on our &lt;a href=&#34;https://auth0.com/pricing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;pricing page&lt;/a&gt; or, &lt;a href=&#34;https://auth0.com/contact-us?place=subscription%20column&amp;amp;type=button&amp;amp;text=contact%20us&amp;amp;target=contact-us&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;contact us&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/introducing-cost-savings-for-nonprofits-on-all-auth0-plans/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Continuing our Pledge to create SAFEr Social Impact Organizations</summary>
  </entry>
  <entry>
    <title>How to Add Authorization to a Rails API Following TDD</title>
    <updated>2021-11-09T16:07:00Z</updated>
    <id>tag:auth0.com,2021-11-09:/blog/authorization-for-rails-api-with-tdd/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;When you&amp;#39;re adding authorization to an application, there are two crucial questions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Are users that shouldn&amp;#39;t have access &lt;em&gt;actually&lt;/em&gt; out?&lt;/li&gt;&lt;li&gt;Are users that should have access &lt;em&gt;actually&lt;/em&gt; in?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you can&amp;#39;t answer with certainty both questions, how can you claim to have a secure application? This is something that you can test manually, but a better alternative is test automation. Concretely, I think the best methodology to get there is using Test-Driven Development (&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;TDD&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;This piece is about adding authorization to a &lt;a href=&#34;https://rubyonrails.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Ruby on Rails&lt;/a&gt; API by following TDD. You can check out &lt;a href=&#34;https://auth0.com/blog/secure-rails-api&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this article to learn in detail how to secure a Rails API with Auth0&lt;/a&gt;. Also, you can follow this article along with this &lt;a href=&#34;https://github.com/auth0-blog/securing-api-rails&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;The-TDD-Cycle&#34;&gt;The TDD Cycle&lt;/h2&gt;&lt;p&gt;In its essence, TDD is about a loop with the three steps shown in the following picture:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3FjI42yPKNne2NmL01bPbf/08cd0fca38b916370207e3a16f1c174e/tdd.png&#34; alt=&#34;TDD loop&#34;/&gt;&lt;/p&gt;&lt;p&gt;[&lt;a href=&#34;https://www.thoughtworks.com/insights/blog/test-driven-development-best-thing-has-happened-software-design&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Source: Thoughtworks&lt;/em&gt;&lt;/a&gt;]&lt;/p&gt;&lt;ul&gt;&lt;li&gt;First, you make a test for a new feature. Initially, the &lt;strong&gt;test will fail&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Then, you write the minimum amount of code that &lt;strong&gt;makes the test pass&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Lastly, you &lt;strong&gt;refactor&lt;/strong&gt; the code to make the implementation more solid.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Simple, isn&amp;#39;t it? It creates a feedback loop where you write code incrementally to fulfill the task at hand. Moreover, it ensures that you build testability, i.e., you write your code so that it can be tested.&lt;/p&gt;&lt;p&gt;To show how to use TDD, let&amp;#39;s add authorization to our application step by step, starting with tests. I will use &lt;a href=&#34;https://auth0.com/docs/protocols/protocol-oauth2&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OAuth&lt;/a&gt; to authorize requests to the API via Auth0. As I explained in &lt;a href=&#34;https://auth0.com/blog/secure-rails-api&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;my previous article&lt;/a&gt;, you can &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free Auth0 account&lt;/a&gt;. Check it out to get &lt;a href=&#34;https://auth0.com/blog/secure-rails-api/#Creating-an-API-on-Auth0&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;all the details about setting up Auth0&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;The-Starting-Application&#34;&gt;The Starting Application&lt;/h2&gt;&lt;p&gt;Our journey starts with an API bootstrapped with Rails 6. It has three routes that need different levels of protection:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/code&gt;: Public route.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/code&gt;: Requires a valid access token.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;admin&lt;/code&gt;: Requires a valid access token. Since Auth0 uses JWT as its access token format, we can inspect it and make sure it has a &lt;code&gt;permissions&lt;/code&gt; claim that contains the scope &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This &lt;a href=&#34;https://github.com/auth0-blog/securing-api-rails/tree/starter&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;branch&lt;/a&gt; is the correct starting point. These are the baseline tests for the three routes:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# spec/api/messages_controller_spec.rb&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;rails_helper&amp;#39;&lt;/span&gt;&#xA;&#xA;describe &lt;span&gt;Api&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;MessagesController&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; type&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:controller&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;  describe &lt;span&gt;&amp;#39;#public&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;    subject &lt;span&gt;{&lt;/span&gt; get &lt;span&gt;:public&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; params&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; format&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:json&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    it &lt;span&gt;&amp;#39;returns an accepted answer for the public endpoint&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;      subject&#xA;&#xA;      expect&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to be_ok&#xA;&#xA;      message &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;The API doesn\&amp;#39;t require an access token to share this message.&amp;#39;&lt;/span&gt;&#xA;      expect&lt;span&gt;(&lt;/span&gt;json_response&lt;span&gt;!&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to &lt;span&gt;include&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; message&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;  describe &lt;span&gt;&amp;#39;#protected&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;    subject &lt;span&gt;{&lt;/span&gt; get &lt;span&gt;:protected&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; params&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; format&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:json&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    it &lt;span&gt;&amp;#39;returns an accepted answer for the protected endpoint&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;      subject&#xA;&#xA;      expect&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to be_ok&#xA;&#xA;      message &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;The API successfully validated your access token.&amp;#39;&lt;/span&gt;&#xA;      expect&lt;span&gt;(&lt;/span&gt;json_response&lt;span&gt;!&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to &lt;span&gt;include&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; message&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;  describe &lt;span&gt;&amp;#39;#admin&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;    subject &lt;span&gt;{&lt;/span&gt; get &lt;span&gt;:admin&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; params&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; format&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:json&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    it &lt;span&gt;&amp;#39;returns an accepted answer for the admin endpoint&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;      subject&#xA;&#xA;      expect&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to be_ok&#xA;&#xA;      message &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;The API successfully recognized you as an admin.&amp;#39;&lt;/span&gt;&#xA;      expect&lt;span&gt;(&lt;/span&gt;json_response&lt;span&gt;!&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to &lt;span&gt;include&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; message&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We&amp;#39;re not enforcing authorization yet. The requests work, but that&amp;#39;ll change soon enough.&lt;/p&gt;&lt;p&gt;To launch the tests, move in the project&amp;#39;s root folder and run the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;./go &lt;span&gt;test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;go&lt;/code&gt; script allows you to execute different tasks, but we will use it here to run our tests.&lt;/p&gt;&lt;p&gt;For now, we have a pleasant list of green tests, as you can see in the following screenshot:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5MNgIu9a2dQIHpWXCf2Lro/58ec0f5a6a59a3a05dd7d8248351b2df/green-tests-unprotected-endpoints.png&#34; alt=&#34;Green tests with unprotected endpoints&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;The-Initial-Tests&#34;&gt;The Initial Tests&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s start by decoding the access token in the &lt;a href=&#34;https://jwt.io/introduction&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;JWT&lt;/a&gt; format that we get from Auth0. We&amp;#39;re leveraging the excellent &lt;a href=&#34;https://github.com/jwt/ruby-jwt&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;jwt&lt;/a&gt; gem. We don&amp;#39;t want to test that the library works, so we&amp;#39;re going to be relatively sparse with the testing. We want to make sure that incorrect requests fail. So, create a &lt;code&gt;lib&lt;/code&gt; folder under the &lt;code&gt;spec&lt;/code&gt; folder and add a file named &lt;code&gt;json_web_token_spec&lt;span&gt;.&lt;/span&gt;rb&lt;/code&gt; with the following content:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# spec/lib/json_web_token_spec.rb&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;rails_helper&amp;#39;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;json_web_token&amp;#39;&lt;/span&gt;&#xA;&#xA;describe &lt;span&gt;JsonWebToken&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;  subject &lt;span&gt;{&lt;/span&gt; described_class &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  describe &lt;span&gt;&amp;#39;.verify&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;    before &lt;span&gt;do&lt;/span&gt;&#xA;      allow&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Net&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;HTTP&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to receive&lt;span&gt;(&lt;/span&gt;&lt;span&gt;:get&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;and_return&lt;span&gt;(&lt;/span&gt;jwks_raw&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;    it &lt;span&gt;&amp;#39;raises exception if the token is incorrect&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;      expect &lt;span&gt;{&lt;/span&gt; subject&lt;span&gt;.&lt;/span&gt;verify&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to raise_exception&lt;span&gt;(&lt;/span&gt;&lt;span&gt;JWT&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;DecodeError&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;    it &lt;span&gt;&amp;#39;raises exception if the token is expired&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;      expect &lt;span&gt;{&lt;/span&gt; subject&lt;span&gt;.&lt;/span&gt;verify&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to raise_exception&lt;span&gt;(&lt;/span&gt;&lt;span&gt;JWT&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;DecodeError&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To integrate it in our application, we have to wrap the &lt;a href=&#34;https://github.com/jwt/ruby-jwt&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;jwt&lt;/a&gt; library with a little bit of code. For this purpose, add a file named &lt;code&gt;json_web_token&lt;span&gt;.&lt;/span&gt;rb&lt;/code&gt; to the &lt;code&gt;lib&lt;/code&gt; folder in the root of the project. Put the following code in that file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# lib/json_web_token.rb&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;jwt&amp;#39;&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;net/http&amp;#39;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;JsonWebToken&lt;/span&gt;&#xA;  &lt;span&gt;class&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;verify&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;JWT&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;decode&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;,&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                 &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;# Verify the signature of this token&lt;/span&gt;&#xA;                 algorithm&lt;span&gt;:&lt;/span&gt; algorithm&lt;span&gt;,&lt;/span&gt;&#xA;                 iss&lt;span&gt;:&lt;/span&gt; issuer&lt;span&gt;,&lt;/span&gt;&#xA;                 verify_iss&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;do&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;header&lt;span&gt;|&lt;/span&gt;&#xA;        key&lt;span&gt;(&lt;/span&gt;header&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;end&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;algorithm&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;RS256&amp;#39;&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;header&lt;span&gt;)&lt;/span&gt;&#xA;      jwks_hash&lt;span&gt;[&lt;/span&gt;header&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;kid&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;jwks_hash&lt;/span&gt;&lt;/span&gt;&#xA;      jwks_raw &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Net&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;HTTP&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;get &lt;span&gt;URI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;span&gt;&lt;span&gt;#{&lt;/span&gt;issuer&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;.well-known/jwks.json&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      jwks_keys &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;JSON&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;parse&lt;span&gt;(&lt;/span&gt;jwks_raw&lt;span&gt;)&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      jwks_keys&lt;span&gt;.&lt;/span&gt;map &lt;span&gt;do&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;k&lt;span&gt;|&lt;/span&gt;&#xA;        &lt;span&gt;[&lt;/span&gt;&#xA;          k&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;kid&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;OpenSSL&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;X509&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;Certificate&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Base64&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;decode64&lt;span&gt;(&lt;/span&gt;k&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;x5c&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;first&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;public_key&#xA;        &lt;span&gt;]&lt;/span&gt;&#xA;      &lt;span&gt;end&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to_h&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;issuer&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;https://&lt;span&gt;&lt;span&gt;#{&lt;/span&gt;&lt;span&gt;Rails&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;application&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;x&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;issuerUri&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;/&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We&amp;#39;re calling the library with the token that we want to decode. The &lt;code&gt;decode&lt;/code&gt; method expects to receive the right key as the argument of the block. The &lt;code&gt;key&lt;/code&gt; method calls the &lt;code&gt;jwks_hash&lt;/code&gt; helper, which in turn fetches the list of keys from the &lt;code&gt;&lt;span&gt;.&lt;/span&gt;well&lt;span&gt;-&lt;/span&gt;known&lt;/code&gt; URL. To find the right key easier, we convert the list to a hash using the id (&lt;code&gt;kid&lt;/code&gt;) as an identifier.&lt;/p&gt;&lt;p&gt;The tricky part here is that we need to pass actual tokens, otherwise the library will reject them outright.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s start by building our tests to verify that the protected endpoint works as expected.&lt;/p&gt;&lt;h3 id=&#34;Using-test-tokens&#34;&gt;Using test tokens&lt;/h3&gt;&lt;p&gt;I have set up a bunch of tokens to use in our tests. They live in the &lt;a href=&#34;https://github.com/auth0-blog/securing-api-rails/tree/add-authorization/spec/fixtures&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;fixtures folder&lt;/a&gt;. They specify different conditions like being expired or using the wrong audience. This makes the tests a bit more resilient than using straight mocks.&lt;/p&gt;&lt;p&gt;I&amp;#39;m defining a helper to include one of these tokens in the request. So, add a &lt;code&gt;token_helper&lt;span&gt;.&lt;/span&gt;rb&lt;/code&gt; file to the &lt;code&gt;spec&lt;span&gt;/&lt;/span&gt;support&lt;/code&gt; folder with the following content:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# spec/support/token_helper.rb&lt;/span&gt;&#xA;&lt;span&gt;module&lt;/span&gt; &lt;span&gt;TokenHelper&lt;/span&gt;&#xA;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;read_token&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;)&lt;/span&gt;&#xA;    path &lt;span&gt;=&lt;/span&gt; &lt;span&gt;File&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;expand_path&lt;span&gt;(&lt;/span&gt;&lt;span&gt;File&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;join&lt;span&gt;(&lt;/span&gt;&lt;span&gt;File&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;dirname&lt;span&gt;(&lt;/span&gt;__FILE__&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;fixtures&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; name&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;@token&lt;/span&gt; &lt;span&gt;||&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;File&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;read&lt;span&gt;(&lt;/span&gt;path&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;authorize&lt;/span&gt;&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;)&lt;/span&gt;&#xA;    request&lt;span&gt;.&lt;/span&gt;headers&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Bearer &lt;span&gt;&lt;span&gt;#{&lt;/span&gt;read_token&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&#xA;&#xA;&lt;span&gt;RSpec&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;configure &lt;span&gt;do&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;c&lt;span&gt;|&lt;/span&gt;&#xA;  c&lt;span&gt;.&lt;/span&gt;&lt;span&gt;include&lt;/span&gt; &lt;span&gt;TokenHelper&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, I attach the right token to the protected requests:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# spec/api/messages_controller_spec.rb&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;rails_helper&amp;#39;&lt;/span&gt;&#xA;&#xA;describe &lt;span&gt;Api&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;MessagesController&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; type&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:controller&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;     &lt;span&gt;# ...existing code...&lt;/span&gt;&#xA;  &#xA;     subject &lt;span&gt;{&lt;/span&gt; get &lt;span&gt;:protected&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; params&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; format&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:json&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;     it &lt;span&gt;&amp;#39;returns an accepted answer for the protected endpoint&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;       &lt;span&gt;# 👇 new code&lt;/span&gt;&#xA;       authorize&lt;span&gt;!&lt;/span&gt; &lt;span&gt;&amp;#39;validToken&amp;#39;&lt;/span&gt;&#xA;       &lt;span&gt;# 👆 new code&lt;/span&gt;&#xA;&#xA;       subject&#xA;&#xA;       expect&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to be_ok&#xA;     &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;     &lt;span&gt;# ...existing code...&lt;/span&gt;&#xA;&#xA;     subject &lt;span&gt;{&lt;/span&gt; get &lt;span&gt;:admin&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; params&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; format&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:json&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;     it &lt;span&gt;&amp;#39;returns an accepted answer for the admin endpoint&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;       &lt;span&gt;# 👇 new code&lt;/span&gt;&#xA;       authorize&lt;span&gt;!&lt;/span&gt; &lt;span&gt;&amp;#39;validWithPermissionsToken&amp;#39;&lt;/span&gt;&#xA;       &lt;span&gt;# 👆 new code&lt;/span&gt;&#xA;&#xA;       subject&#xA;&#xA;       expect&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to be_ok&#xA;     &lt;span&gt;end&lt;/span&gt;&#xA;  &#xA;     &lt;span&gt;# ...existing code...&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These tests will prevent regressions when we enforce authorization. Let&amp;#39;s add some tests to define the expectations that we want to enforce in the protected route:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# spec/api/messages_controller_spec.rb&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;rails_helper&amp;#39;&lt;/span&gt;&#xA;&#xA;describe &lt;span&gt;Api&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;MessagesController&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; type&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:controller&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;  &lt;span&gt;# ...existing code...&lt;/span&gt;&#xA;  &#xA;  describe &lt;span&gt;&amp;#39;#protected&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;    it &lt;span&gt;&amp;#39;returns error for the protected endpoint if there is no token&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;      can_authenticate&#xA;&#xA;      subject&#xA;&#xA;      expect&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to be_unauthorized&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;    it &lt;span&gt;&amp;#39;returns error for the protected endpoint if the token is expired&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;      authorize&lt;span&gt;!&lt;/span&gt; &lt;span&gt;&amp;#39;expiredToken&amp;#39;&lt;/span&gt;&#xA;&#xA;      subject&#xA;&#xA;      expect&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to be_unauthorized&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;    it &lt;span&gt;&amp;#39;returns error for the protected endpoint if the token has the wrong issuer&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;      authorize&lt;span&gt;!&lt;/span&gt; &lt;span&gt;&amp;#39;wrongIssuerToken&amp;#39;&lt;/span&gt;&#xA;&#xA;      subject&#xA;&#xA;      expect&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to be_unauthorized&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;# ...existing code...&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For reasons of space, I&amp;#39;m grouping them, but to remain closer to the spirit of TDD, you should add them one by one. See how they fail:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3k1ZLpZhkETEoCIngYSawa/7aab01b4ceae70fe267f4c9027d33875/failing-tests.png&#34; alt=&#34;Failing Tests&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Implementing-authorization&#34;&gt;Implementing authorization&lt;/h3&gt;&lt;p&gt;To implement the authorization, we&amp;#39;re using a &lt;a href=&#34;https://api.rubyonrails.org/v6.1.3.2/classes/AbstractController/Callbacks/ClassMethods.html#method-i-before_action&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;before_action&lt;/a&gt; callback. We pick the token out of the header and verify it with our library. Traditionally, this type of helper method goes in the &lt;code&gt;ApplicationController&lt;/code&gt;, which is the base class for all of our controllers. Here is the code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# app/controllers/application_controller.rb&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;json_web_token&amp;#39;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ApplicationController&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;ActionController&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&#xA;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;authorize&lt;/span&gt;&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&#xA;    valid&lt;span&gt;,&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; verify&lt;span&gt;(&lt;/span&gt;raw_token&lt;span&gt;(&lt;/span&gt;request&lt;span&gt;.&lt;/span&gt;headers&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    head &lt;span&gt;:unauthorized&lt;/span&gt; &lt;span&gt;unless&lt;/span&gt; valid&#xA;    &lt;span&gt;@token&lt;/span&gt; &lt;span&gt;||&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; result&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;private&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;verify&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;)&lt;/span&gt;&#xA;    payload&lt;span&gt;,&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;JsonWebToken&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;verify&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; payload&lt;span&gt;]&lt;/span&gt;&#xA;  &lt;span&gt;rescue&lt;/span&gt; &lt;span&gt;JWT&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;DecodeError&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; e&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; e&lt;span&gt;]&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;raw_token&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;headers&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; headers&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;split&lt;span&gt;.&lt;/span&gt;last &lt;span&gt;if&lt;/span&gt; headers&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;present&lt;span&gt;?&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;nil&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And we ensure it&amp;#39;s used only for the routes we want:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# app/controllers/api/messages_controller.rb&lt;/span&gt;&#xA;&lt;span&gt;module&lt;/span&gt; &lt;span&gt;Api&lt;/span&gt;&#xA;  &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MessagesController&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;ApplicationController&lt;/span&gt;&#xA;    before_action &lt;span&gt;:authorize!&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; except&lt;span&gt;:&lt;/span&gt; &lt;span&gt;%i[public]&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we see the tests passing:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3n98MGbakFURNupujEG8CZ/6de791a632850a1bdb9cfd8dc6a6ef07/passing-tests.png&#34; alt=&#34;Passing Tests&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Custom-messages&#34;&gt;Custom messages&lt;/h3&gt;&lt;p&gt;Next, we want to get a more detailed error message in the payload of the response. We need some extra assertions in the tests we wrote:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# spec/api/messages_controller_spec.rb&lt;/span&gt;&#xA;describe &lt;span&gt;Api&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;MessagesController&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; type&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:controller&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;       subject&#xA;&#xA;       expect&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to be_unauthorized&#xA;&#xA;       &lt;span&gt;# 👇 new code&lt;/span&gt;&#xA;       message &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;Nil JSON web token&amp;#39;&lt;/span&gt;&#xA;       expect&lt;span&gt;(&lt;/span&gt;json_response&lt;span&gt;!&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to &lt;span&gt;include&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; message&lt;span&gt;)&lt;/span&gt;&#xA;       &lt;span&gt;# 👆 new code&lt;/span&gt;&#xA;     &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;     it &lt;span&gt;&amp;#39;returns error for the protected endpoint if the token is expired&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;       subject&#xA;&#xA;       expect&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to be_unauthorized&#xA;       &lt;span&gt;# 👇 new code&lt;/span&gt;&#xA;       expect&lt;span&gt;(&lt;/span&gt;json_response&lt;span&gt;!&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to &lt;span&gt;include&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;Signature has expired&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;       &lt;span&gt;# 👆 new code&lt;/span&gt;&#xA;     &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;     it &lt;span&gt;&amp;#39;returns error for the protected endpoint if the token has the wrong issuer&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;       subject&#xA;&#xA;       expect&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to be_unauthorized&#xA;       &lt;span&gt;# 👇 new code&lt;/span&gt;&#xA;       expect&lt;span&gt;(&lt;/span&gt;json_response&lt;span&gt;!&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to &lt;span&gt;include&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;Invalid issuer&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;       &lt;span&gt;# 👆 new code&lt;/span&gt;&#xA;     &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;     it &lt;span&gt;&amp;#39;returns error for the protected endpoint if the token has the wrong audience&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To implement this capability, we need to pass the message in the response whenever an error happens.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# app/controllers/application_controller.rb&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ApplicationController&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;ActionController&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&#xA;   &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;authorize&lt;/span&gt;&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&#xA;     valid&lt;span&gt;,&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; verify&lt;span&gt;(&lt;/span&gt;raw_token&lt;span&gt;(&lt;/span&gt;request&lt;span&gt;.&lt;/span&gt;headers&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;     &lt;span&gt;# 👇 old code&lt;/span&gt;&#xA;     &lt;span&gt;# head :unauthorized unless valid&lt;/span&gt;&#xA;     &lt;span&gt;# 👇 new code&lt;/span&gt;&#xA;     render json&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; message&lt;span&gt;:&lt;/span&gt; result &lt;span&gt;}&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to_json&lt;span&gt;,&lt;/span&gt; status&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:unauthorized&lt;/span&gt; &lt;span&gt;unless&lt;/span&gt; valid&#xA;&#xA;     &lt;span&gt;@token&lt;/span&gt; &lt;span&gt;||&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; result&#xA;   &lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Validating-the-audience&#34;&gt;Validating the audience&lt;/h3&gt;&lt;p&gt;Our code has a serious flaw: it doesn&amp;#39;t validate the &lt;em&gt;audience&lt;/em&gt; contained in the JWT. Let&amp;#39;s fix that to make sure that the application is the intended user of the token. A new test codes the behavior:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# spec/api/messages_controller_spec.rb&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;rails_helper&amp;#39;&lt;/span&gt;&#xA;&#xA;describe &lt;span&gt;Api&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;MessagesController&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; type&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:controller&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;  &lt;span&gt;# ...existing code...&lt;/span&gt;&#xA;  &#xA;  describe &lt;span&gt;&amp;#39;#protected&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;    subject &lt;span&gt;{&lt;/span&gt; get &lt;span&gt;:protected&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; params&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; format&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:json&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    it &lt;span&gt;&amp;#39;returns error for the protected endpoint if the token has the wrong audience&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;      authorize&lt;span&gt;!&lt;/span&gt; &lt;span&gt;&amp;#39;wrongAudienceToken&amp;#39;&lt;/span&gt;&#xA;&#xA;      subject&#xA;&#xA;      expect&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to be_unauthorized&#xA;      expect&lt;span&gt;(&lt;/span&gt;json_response&lt;span&gt;!&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to &lt;span&gt;include&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;Invalid audience&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;# ...existing code...&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Conveniently, the change happens in the &lt;code&gt;&lt;span&gt;JWT&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;decode&lt;/code&gt; method that we rely on:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# lib/json_web_token.rb&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;jwt&amp;#39;&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;net/http&amp;#39;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;JsonWebToken&lt;/span&gt;&#xA;  &lt;span&gt;class&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;verify&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;JWT&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;decode&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;,&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                 &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;# Verify the signature of this token&lt;/span&gt;&#xA;                 algorithm&lt;span&gt;:&lt;/span&gt; algorithm&lt;span&gt;,&lt;/span&gt;&#xA;                 iss&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Rails&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;application&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;x&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;issuerUri&lt;span&gt;,&lt;/span&gt;&#xA;                  &lt;span&gt;# 👇 new code&lt;/span&gt;&#xA;                  verify_iss&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                  aud&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Rails&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;application&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;x&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;audience&lt;span&gt;,&lt;/span&gt;&#xA;                  verify_aud&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;do&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;header&lt;span&gt;|&lt;/span&gt;&#xA;                  &lt;span&gt;# 👆 new code&lt;/span&gt;&#xA;        key&lt;span&gt;(&lt;/span&gt;header&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;end&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;# ...existing code...&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Testing-Permissions&#34;&gt;Testing Permissions&lt;/h2&gt;&lt;p&gt;At this point, we&amp;#39;ve got the protected route covered. Now, we shall focus on the admin route. The next step is checking for the correct &lt;code&gt;permission&lt;/code&gt; claim in the token. Our regular token doesn&amp;#39;t have the claim, so it should fail the test:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# spec/api/messages_controller_spec.rb&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;rails_helper&amp;#39;&lt;/span&gt;&#xA;&#xA;describe &lt;span&gt;Api&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;MessagesController&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; type&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:controller&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;  &lt;span&gt;# ...existing code...&lt;/span&gt;&#xA;  &#xA;  describe &lt;span&gt;&amp;#39;#admin&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;    subject &lt;span&gt;{&lt;/span&gt; get &lt;span&gt;:admin&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; params&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; format&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:json&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    it &lt;span&gt;&amp;#39;returns error for the admin endpoint if the token does not have permissions&amp;#39;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&#xA;      authorize&lt;span&gt;!&lt;/span&gt; &lt;span&gt;&amp;#39;validToken&amp;#39;&lt;/span&gt;&#xA;&#xA;      subject&#xA;&#xA;      expect&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to be_unauthorized&#xA;      expect&lt;span&gt;(&lt;/span&gt;json_response&lt;span&gt;!&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to &lt;span&gt;include&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;Access is denied&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;# ...existing code...&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, let&amp;#39;s implement the permission check in the controller:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# app/controllers/application_controller.rb&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;json_web_token&amp;#39;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ApplicationController&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;ActionController&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&#xA;  &lt;span&gt;# ...existing code...&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;can_read_admin_messages&lt;/span&gt;&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&#xA;    check_permissions&lt;span&gt;(&lt;/span&gt;&lt;span&gt;@token&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;read:admin-messages&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;check_permissions&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;,&lt;/span&gt; permission&lt;span&gt;)&lt;/span&gt;&#xA;    permissions &lt;span&gt;=&lt;/span&gt; token&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;permissions&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    permissions &lt;span&gt;=&lt;/span&gt; permissions&lt;span&gt;.&lt;/span&gt;split &lt;span&gt;if&lt;/span&gt; permissions&lt;span&gt;.&lt;/span&gt;is_a&lt;span&gt;?&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;unless&lt;/span&gt; permissions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;permission&lt;span&gt;)&lt;/span&gt;&#xA;      render json&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; message&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;Access is denied&amp;#39;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to_json&lt;span&gt;,&lt;/span&gt;&#xA;             status&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:unauthorized&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;# ...existing code...&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To make sure the check is applied to the correct route, we follow a similar approach to before, based on a &lt;code&gt;before_action&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# app/controllers/api/messages_controller.rb&lt;/span&gt;&#xA;&lt;span&gt;module&lt;/span&gt; &lt;span&gt;Api&lt;/span&gt;&#xA;  &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MessagesController&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;ApplicationController&lt;/span&gt;&#xA;    &lt;span&gt;# ...existing code...&lt;/span&gt;&#xA;    &#xA;    before_action &lt;span&gt;:can_read_admin_messages!&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; only&lt;span&gt;:&lt;/span&gt; &lt;span&gt;%i[admin]&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can run the tests to make sure everything works as expected.&lt;/p&gt;&lt;h2 id=&#34;We-Got-There-&#34;&gt;We Got There!&lt;/h2&gt;&lt;p&gt;Writing code following TDD is all about having a tight feedback loop. This isn&amp;#39;t easy to show in writing due to a large number of small changes, but I hope I have given you a good glimpse.&lt;/p&gt;&lt;p&gt;Using TDD brings several benefits:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;We&amp;#39;ve confirmed that our implementation, you know, works&lt;/li&gt;&lt;li&gt;Our test suite describes the application&amp;#39;s behavior in an executable way instead of potentially misleading documentation&lt;/li&gt;&lt;li&gt;We&amp;#39;re incorporating testability into our code from the beginning&lt;/li&gt;&lt;li&gt;Often, we tend to build things that we might need for a future that never comes. If you encode your expectations as tests, that becomes more visible, and it helps prevent it from happening.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Perhaps not every line of code that you write needs to be covered by tests. Nevertheless, a focus on testability helps to deliver better products &lt;a href=&#34;https://itrevolution.com/book/accelerate/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;more reliably&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;You can download the sample project shown in this article from &lt;a href=&#34;https://github.com/auth0-blog/securing-api-rails&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/authorization-for-rails-api-with-tdd/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to secure a Rails API with Auth0 by letting you drive by tests.</summary>
    <author>
      <name>Testing Authorization</name>
    </author>
  </entry>
  <entry>
    <title>Lush Transforms its Login Experience with Auth0</title>
    <updated>2021-11-09T13:34:00Z</updated>
    <id>tag:auth0.com,2021-11-09:/blog/lush-transforms-its-login-experience-with-auth0/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;LONDON. – 9th November, 2021&lt;/strong&gt; – The &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Identity Platform&lt;/a&gt;, a product unit within Okta, has been selected by &lt;a href=&#34;https://www.lush.com/uk/en&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Lush&lt;/a&gt;, the global cosmetics retailer, to provide a superior login experience for customers and staff interacting with the online brand. Auth0 will initially power the login experience for Lush’s new chat function and add website authentication, along with centralising its point-of-sale (PoS) system to simplify access to information throughout the organisation, while helping to ensure privacy.&lt;/p&gt;&lt;p&gt;When it comes to pursuing more &lt;a href=&#34;https://weare.lush.com/lush-life/our-ethics/digital-ethics/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ethical ways of doing business&lt;/a&gt;, Lush is no stranger to pushing the limits. Founded in the 1990s, its commitment to sustainable, cruelty-free production was initially an outlier in cosmetics, but the brand has influenced the direction of the industry as a whole. In the process, it has grown into a successful multinational business and operates in 47 countries with 937 global Lush shops. The latest business numbers can be found on &lt;a href=&#34;https://weare.lush.com/numbers&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Lush’s company information website&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Traditionally, Lush preferred to build its digital services in-house following its digital ethics code. However, when it restructured its digital business using a microservices architecture, the company found that its approach to authentication complicated its ability to protect customer data, which raised security concerns within the company. What’s more, the time taken for developers to maintain its internally-built authentication system strained innovation across other parts of the business.&lt;/p&gt;&lt;p&gt;“While we didn&amp;#39;t experience any major data leaks, our home-baked solution raised red flags for our internal data privacy team, and that posed a huge risk for us since we are a business built on ethics,” said Simon Ince, Lush’s creative technology and innovation lead. “During the development of a new customer chat function, we hit a roadblock with our existing authentication system. Time was not on our side, so we evaluated open standards as an alternative to building in-house. That’s when we discovered Auth0, and the problem was solved in thirty minutes.”&lt;/p&gt;&lt;p&gt;Following the success of the chat system, Lush evaluated Auth0’s solution for use across other parts of the business — including its website redesign and centralizing its global POS system — to create a more seamless, secure, and personalized end-user experience. With Auth0, just two developers were able to add authentication to Lush&amp;#39;s website without impacting Lush&amp;#39;s existing timeline or roadmap.&lt;/p&gt;&lt;p&gt;“When business and consumer needs rapidly evolve, and the security landscape becomes even more complex, maintaining in-house systems can be a difficult and time-consuming process — one that takes developers away from other, more pressing tasks,” said Steven Rees-Pullman, SVP International at Auth0. “Auth0’s identity platform enables Lush to refocus its development teams where they can bring the most value, while meeting the company’s ethical standards for data privacy and customer security.”&lt;/p&gt;&lt;p&gt;Learn more about &lt;a href=&#34;https://auth0.com/case-studies/lush-cs/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Lush’s implementation&lt;/a&gt; on Auth0.com.&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;The Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;h3 id=&#34;Media-Contacts&#34;&gt;Media Contacts&lt;/h3&gt;&lt;p&gt;Auth0 Global Communications&lt;br/&gt;&lt;a href=&#34;mailto:press@auth0.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;press@auth0.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/lush-transforms-its-login-experience-with-auth0/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Cosmetics firm replaces home-built authentication with Auth0 to optimise developers’ time and simplify security for customers and staff throughout the business</summary>
  </entry>
  <entry>
    <title>Auth0 Integration with Singpass</title>
    <updated>2021-11-05T17:59:00Z</updated>
    <id>tag:auth0.com,2021-11-05:/blog/auth0-integration-with-singpass/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;When it comes to national digital identity, Singapore has a lot to say. &#xA;Singapore launched &lt;a href=&#34;https://www.singpass.gov.sg/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Singpass&lt;/a&gt; in 2003 and has been enhancing it over the years. &#xA;Singpass’s initial goal was to authenticate citizens to government agencies and has since expanded to use in the private sector quite successfully.&#xA;Today, Singapore residents use Singpass to securely access over 1,700 services from more than 460 government agencies and private sector organisations. &lt;/p&gt;&lt;p&gt;With Auth0&amp;#39;s customer base quickly growing in Southeast Asia, Singapore and Japan, it was about time to officially offer Singpass services on the Auth0 platform.&lt;/p&gt;&lt;p&gt;This is the first of a two-post series. In this post, we’ll learn how to integrate Singpass QR Login with Auth0 Universal Login. &#xA;In the next post, we’ll look into integrating Myinfo to share selective personal data such as name and email address.&lt;/p&gt;&lt;h2 id=&#34;How-Singpass-QR-Login-Works&#34;&gt;How Singpass QR Login Works&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://api.singpass.gov.sg/library/login/developers/overview-at-a-glance&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Singpass QR login&lt;/a&gt; uses OIDC authorization code flow. &#xA;Singpass offers an embedded SDK that renders a QR code returned from the authorization endpoint.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span&gt;src&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;”https://id.singpass.gov.sg/static/ndi_embedded_auth.js”&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Websites integrate with Singpass by hosting NDI embedded Javascript SDK. On page load, the Singpass SDK starts an authorization flow, with the &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;nonce&lt;/code&gt; loaded to the page from the backend.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;authParamsSupplier&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; state&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;my-state&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; nonce&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;my-nonce&amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;onError&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;errorId&lt;span&gt;,&lt;/span&gt; message&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;Error. errorId:&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;errorId&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt; message:&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;message&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; initAuthSessionResponse &lt;span&gt;=&lt;/span&gt; window&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NDI&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;initAuthSession&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#39;ndi-qr&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        clientId&lt;span&gt;:&lt;/span&gt; &lt;span&gt;SINGPASS_CLIENT_ID&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;        redirectUri&lt;span&gt;:&lt;/span&gt; &lt;span&gt;SINGPASS_REDIRECT_URL&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        scope&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;openid&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        responseType&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    authParamsSupplier&lt;span&gt;,&lt;/span&gt;&#xA;    onError&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;NDI clients call authorization endpoint to return an embedded QR code. The Singpass app then scans the generated QR code, and the user then confirms the login. &#xA;Next, the Embedded SDK receives a confirmation over Websocket and redirects to the client’s callback URL with an authorization code and state. &lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/vfNDWisx8csQ7Ifg777EQ/7037d43c9924c70239e6d49fd365c988/01_private-qr.png&#34; alt=&#34;Singpass sequence diagram&#34;/&gt;&lt;/p&gt;&lt;p&gt;After the exchange, &lt;code&gt;id_token&lt;/code&gt;’s &lt;code&gt;sub&lt;/code&gt; claim contains either an opaque digital identifier known as UUID or a combination of UUID and NRIC. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt; &#xA;   &lt;span&gt;&amp;#34;sub&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;s=S8829314B,u=1c0cee38-3a8f-4f8a-83bc-7a0e4c59d6a9&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;aud&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;xxNsTfleQMHoW6tbUgSVNwnLWQ0xTeV0&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;iss&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;https://stg-id.singpass.gov.sg&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;exp&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;1609907975&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;iat&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;1609907375&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;nonce&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;alh5DS2Gfndv9i0jXYViqGIhiQdP4+4BrUvBhDXBYKk=&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;amr&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt; &lt;span&gt;&amp;#34;pwd&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;swk&amp;#34;&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Depending on the information requested, &lt;code&gt;id_token&lt;/code&gt; is either signed or encrypted.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1IrIEcWP6iAmJQ4pS7iNrp/e0cb15a685523ab581f7567c543411b8/Screen_Shot_2021-10-13_at_13.12.10.png&#34; alt=&#34;id_token&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Integrate-Singpass-with-Auth0&#34;&gt;Integrate Singpass with Auth0&lt;/h2&gt;&lt;p&gt;During the discovery phase, we noticed some gaps between what Auth0 offers for integration with external OIDC providers and what Singpass required.&lt;/p&gt;&lt;p&gt;First challenge was that the &lt;code&gt;nonce&lt;/code&gt; parameter that applications send to Auth0 is not available within UL where we wanted to initiate the NDI SDK.&lt;/p&gt;&lt;p&gt;Second, Auth0 currently does not support the &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7523#section-2.2&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;client-assertion&lt;/a&gt; for token endpoints of OIDC connections. &#xA;Singpass expects clients to use asymmetric &lt;a href=&#34;https://stg-id.singpass.gov.sg/docs/authorization/api#_client_jwk_requirements&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;client_assertion JWT&lt;/a&gt; and customers should follow NDI’s process to generate an Elliptic-curve keypair and host public key in a public-facing &lt;code&gt;jwks&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; file. &#xA;Customer’s public-key URL is shared with Singpass during lodging the application.&lt;/p&gt;&lt;p&gt;Lastly, Singpass’s &lt;code&gt;id_token&lt;/code&gt; signing signature (&lt;code&gt;id_token_signing_alg_values_supported&lt;/code&gt;), is &lt;code&gt;&lt;span&gt;ES256&lt;/span&gt;&lt;/code&gt; as pointed in their &lt;a href=&#34;https://id.singpass.gov.sg/.well-known/openid-configuration&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;openid-configuration&lt;/a&gt;. &#xA;Auth0 only supports &lt;code&gt;&lt;span&gt;RS256&lt;/span&gt;&lt;/code&gt; signed &lt;code&gt;id_tokens&lt;/code&gt; from upstream connections.&lt;/p&gt;&lt;p&gt;While integrating Singpass with Auth0 is not a native feature, we hope to build a simpler and easier solution in the future.&lt;/p&gt;&lt;h3 id=&#34;Technical-Details&#34;&gt;Technical Details&lt;/h3&gt;&lt;p&gt;Our field team decided to challenge themselves by taking available tools within the Auth0 extensibility platform and develop an integration path for Singpass on Auth0.&lt;/p&gt;&lt;p&gt;We decided to proxy both authorization and token endpoints. The proxied version adds missing features of appending nonce, performing exchange with client_assertion, and validating the &lt;code&gt;&lt;span&gt;ES256&lt;/span&gt;&lt;/code&gt; signature in return.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4IpSoCXSxRbyByzRnXk8jl/2d9c90bba361a99b9426ffbed16c1e20/singpass-seq.png&#34; alt=&#34;Singpass component diagram&#34;/&gt;&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;User visits an application that requires authentication against Auth0&lt;/li&gt;&lt;li&gt;Auth0 detects no session and redirects to Universal Login page for interactive authentication&lt;/li&gt;&lt;li&gt;User selects login with Singpass from available logon options&lt;/li&gt;&lt;li&gt;NDI library inside UL page initiates connection with Singpass, fetches QR code, and displays it&lt;/li&gt;&lt;li&gt;User opens up Singpass app and scans the QR code&lt;/li&gt;&lt;li&gt;Singpass app communicates to Singpass authorization server in back-channel and accepts logon&lt;/li&gt;&lt;li&gt;Singpass redirects a callback to Auth0’s/login/callback endpoint using the front channel from the NDI SDK on the UL page&lt;/li&gt;&lt;li&gt;Auth0 connects to the proxy /token endpoint to exchange authorization code. Token endpoint validates client credentials&lt;/li&gt;&lt;li&gt;Proxy endpoint creates private_jwt client assertion and exchanges authorization code, validates response and returns results to Auth0&lt;/li&gt;&lt;li&gt;Auth0 decodes returning &lt;code&gt;id_token&lt;/code&gt; from Singpass and issues its own &lt;code&gt;id_token&lt;/code&gt; to the application, completing the sign-in flow&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We developed four open-source versions of proxy endpoint; &#xA;&lt;a href=&#34;https://github.com/auth0-extensions/auth0-singpass-extension&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;hosted on Auth0&lt;/a&gt;, &lt;a href=&#34;https://github.com/auth0-blog/auth0-singpass/tree/main/aws&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;AWS Lambda&lt;/a&gt;, &lt;a href=&#34;https://github.com/auth0-blog/auth0-singpass/tree/main/cloudflare&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Cloudflare Workers&lt;/a&gt;, and vanilla &lt;a href=&#34;https://github.com/auth0-blog/auth0-singpass/tree/main/express&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Express.js&lt;/a&gt;. &#xA;In the rest of this article, we will focus on the configuration of the Singpass integration proxy inside Auth0. For production use, we suggest hosting proxy endpoints in your environment.&lt;/p&gt;&lt;h3 id=&#34;Deploying-Singpass-Integration-Proxy&#34;&gt;Deploying Singpass Integration Proxy&lt;/h3&gt;&lt;p&gt;First, create a SPA companion app with Allowed Callback URLs set to &amp;#34;&lt;a href=&#34;https://your-custom-domain/login/callback&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://your-custom-domain/login/callback&lt;/a&gt;&amp;#34;. &lt;/p&gt;&lt;p&gt;Then head to Extensions, click on &amp;#34;Create Extension&amp;#34; and enter GitHub URL &lt;a href=&#34;https://github.com/auth0-extensions/auth0-singpass-extension&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://github.com/auth0-extensions/auth0-singpass-extension&lt;/a&gt;. During installation populate with the correct values as follows:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1YGwCulxPHWHiH9OPImMvC/f361a7bb82c2a1baaf0110160272a4da/03_singpass-extension-settings.jpg&#34; alt=&#34;Extension settings&#34;/&gt;&lt;/p&gt;&lt;p&gt;Values are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Auth0 custom domain&lt;/strong&gt;&lt;br/&gt;This is your Auth0 custom domain name. You need to have a custom domain name enabled in Auth0&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Auth0 client id&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;client_id&lt;/code&gt; of companion app in Auth0&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Auth0 client secret&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;client_secret&lt;/code&gt; of companion app in Auth0&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Singpass environment&lt;/strong&gt;&lt;br/&gt;Is set to Staging only.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Singpass client id&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;client_id&lt;/code&gt; assigned to you from Singpass&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Singpass signing alg&lt;/strong&gt;&lt;br/&gt;Always &lt;code&gt;&lt;span&gt;ES256&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Relying on party jwks endpoint&lt;/strong&gt;&lt;br/&gt;This is your JWKS endpoint used during Singpass onboarding registration&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Relying on party private key&lt;/strong&gt;&lt;br/&gt;Your Elliptic-curve private key used during Singpass onboarding registration. This is not required if the proxy endpoint is running in your own infrastructure, which is the preferred deployment method for production&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Relying on party kid&lt;/strong&gt;&lt;br/&gt;This is your JWKS key ID used during Singpass onboarding registration&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Once installed, you’ll need to Singpass connection under Authentication &amp;gt; Social &amp;gt; Create Connection &amp;gt; Create Custom. Use client_id and secret from companion app and populate URLs depending on your tenant region and node version as documented &lt;a href=&#34;https://github.com/auth0-extensions/auth0-singpass-extension#usage&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;. Fetch User Profile script template is also available in &lt;a href=&#34;https://github.com/auth0-blog/auth0-singpass/blob/main/oauth2-connection-config/fetchUserProfile.js&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Github repo&lt;/a&gt;. Ultimately &lt;a href=&#34;https://github.com/auth0-blog/auth0-singpass/blob/main/enable-pkce.sh&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;enable PKCE&lt;/a&gt; on this connection.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2h8ucNIa0Pns4bzRZMnJSe/9bb19078adc8e67a43f224d3ca6a3ffe/04_singpass-connection.jpg&#34; alt=&#34;singpass social connection&#34;/&gt;&lt;/p&gt;&lt;p&gt;Then enable this connection to applications that require sign-in with Singpass:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2Drur5RknH2jD9KEWQVSsJ/5eee8e828e78fa107c495e1ff3017a27/singpass-demo-app.png&#34; alt=&#34;singpass application connection&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Universal-Login&#34;&gt;Universal Login&lt;/h3&gt;&lt;p&gt;Next, configure Universal Login to host NDI SDK and render QR login code when requested. &#xA;Head to Branding &amp;gt; Universal Login &amp;gt; Login. Enable “Customize Login Page” and configure page HTML.  &lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span&gt;src&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;https://cdn.auth0.com/js/lock/11.30/lock.min.js&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;!-- ADDED for Singpass --&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span&gt;src&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;//code.jquery.com/jquery-3.1.0.min.js&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span&gt;src&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;https://stg-id.singpass.gov.sg/static/ndi_embedded_auth.js&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;!-- /ADDED --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add &lt;code&gt;authButtons&lt;/code&gt; under &lt;code&gt;theme&lt;/code&gt; object of Lock configuration:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; lock &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Auth0Lock&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;clientID&lt;span&gt;,&lt;/span&gt; config&lt;span&gt;.&lt;/span&gt;auth0Domain&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ...&lt;/span&gt;&#xA;    theme&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      authButtons&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;singpass&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;          displayName&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Singpass&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          primaryColor&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;#cf0b15&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          foregroundColor&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;#FFFFFF&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          icon&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;https://app.singpass.gov.sg/apple-touch-icon.png&amp;#34;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And logic to render QR code as following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lock&lt;span&gt;.&lt;/span&gt;&lt;span&gt;once&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;signin ready&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;siginin ready&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;extraParams&lt;span&gt;.&lt;/span&gt;singpass&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;$&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;.auth0-lock.auth0-lock&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;removeProp&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;box-sizing&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;var&lt;/span&gt; connectionConfig &lt;span&gt;=&lt;/span&gt; &lt;span&gt;initConnnectionConfig&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;addEnterpriseConnections&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;connectionConfig&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;init&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;lock&lt;span&gt;.&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;initConnectionConfig&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    general&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      backButton&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;&amp;lt;span class=&amp;#34;auth0-lock-back-button&amp;#34;&amp;gt;&amp;lt;svg focusable=&amp;#34;false&amp;#34; enable-background=&amp;#34;new 0 0 24 24&amp;#34; version=&amp;#34;1.0&amp;#34; viewBox=&amp;#34;0 0 24 24&amp;#34; xml:space=&amp;#34;preserve&amp;#34; xmlns=&amp;#34;http://www.w3.org/2000/svg&amp;#34; xmlns:xlink=&amp;#34;http://www.w3.org/1999/xlink&amp;#34;&amp;gt; &amp;lt;polyline fill=&amp;#34;none&amp;#34; points=&amp;#34;12.5,21 3.5,12 12.5,3 &amp;#34; stroke=&amp;#34;#000000&amp;#34; stroke-miterlimit=&amp;#34;10&amp;#34; stroke-width=&amp;#34;2&amp;#34;&amp;gt;&amp;lt;/polyline&amp;gt; &amp;lt;line fill=&amp;#34;none&amp;#34; stroke=&amp;#34;#000000&amp;#34; stroke-miterlimit=&amp;#34;10&amp;#34; stroke-width=&amp;#34;2&amp;#34; x1=&amp;#34;22&amp;#34; x2=&amp;#34;3.5&amp;#34; y1=&amp;#34;12&amp;#34; y2=&amp;#34;12&amp;#34;&amp;gt;&amp;lt;/line&amp;gt; &amp;lt;/svg&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      enterprise_panel&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;&amp;lt;div id=&amp;#34;ndi-qr&amp;#34; class=&amp;#34;auth0-enterprise-button-content&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;addEnterpriseConnections&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;connectionConfig&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;var&lt;/span&gt; backButton &lt;span&gt;=&lt;/span&gt; &lt;span&gt;$&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;connectionConfig&lt;span&gt;.&lt;/span&gt;general&lt;span&gt;.&lt;/span&gt;backButton&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;$&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;.auth0-lock-submit&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hide&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  backButton&lt;span&gt;.&lt;/span&gt;&lt;span&gt;appendTo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;.auth0-lock-header&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  backButton&lt;span&gt;.&lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    e&lt;span&gt;.&lt;/span&gt;&lt;span&gt;preventDefault&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    window&lt;span&gt;.&lt;/span&gt;history&lt;span&gt;.&lt;/span&gt;&lt;span&gt;back&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;var&lt;/span&gt; enterprisePanel &lt;span&gt;=&lt;/span&gt; &lt;span&gt;$&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;connectionConfig&lt;span&gt;.&lt;/span&gt;general&lt;span&gt;.&lt;/span&gt;enterprise_panel&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  enterprisePanel&lt;span&gt;.&lt;/span&gt;&lt;span&gt;appendTo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;.auth0-lock-body-content&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;$&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;.auth0-lock-content&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hide&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  enterprisePanel&lt;span&gt;.&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;authParamsSupplier&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// Replace the below with an `await`ed call to initiate an auth session on your backend&lt;/span&gt;&#xA;    &lt;span&gt;// which will generate state+nonce values, e.g&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; state&lt;span&gt;:&lt;/span&gt; &lt;span&gt;decodeURIComponent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;extraParams&lt;span&gt;.&lt;/span&gt;ndi_state&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; nonce&lt;span&gt;:&lt;/span&gt; &lt;span&gt;decodeURIComponent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;extraParams&lt;span&gt;.&lt;/span&gt;ndi_nonce&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;onError&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;errorId&lt;span&gt;,&lt;/span&gt; message&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;onError. errorId:&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;errorId&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt; message:&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;message&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;const&lt;/span&gt; initAuthSessionResponse &lt;span&gt;=&lt;/span&gt; window&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NDI&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;initAuthSession&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#39;ndi-qr&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;{&lt;/span&gt;&#xA;            clientId&lt;span&gt;:&lt;/span&gt; &lt;span&gt;SINGPASS_CLIENT_ID&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;// Replace with your Singpass client ID&lt;/span&gt;&#xA;            redirectUri&lt;span&gt;:&lt;/span&gt; &lt;span&gt;SINGPASS_AUTH0_CALLBACK&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;        &lt;span&gt;// Replace with your Auth0 custom domain&lt;/span&gt;&#xA;            scope&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;openid&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            responseType&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&#xA;          &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          authParamsSupplier&lt;span&gt;,&lt;/span&gt;&#xA;          onError&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;{&lt;/span&gt;&#xA;            renderDownloadLink&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            appLaunchUrl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span&gt;// Replace with your iOS/Android App Link&lt;/span&gt;&#xA;          &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;initAuthSession: &amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; initAuthSessionResponse&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can find the full version of the custom Universal Login page &lt;a href=&#34;https://github.com/auth0-blog/auth0-singpass/tree/main/universal-login&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;How-it-Looks-in-Action&#34;&gt;How it Looks in Action&lt;/h3&gt;&lt;p&gt;You should be able to see Log in with Singpass as connections options on the login page.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1qhC2Zg65ZshMGMEgXVmzs/a3c692bb512777eca5ee93dde07c3285/lock-singpass-p1v3.png&#34; alt=&#34;singpass login selection&#34;/&gt;&lt;/p&gt;&lt;p&gt;Click on &amp;#34;Log in with Singpass. QR code renders.&#xA;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5cIFPyXvsCJ0u4iwrOWaIh/dc1aec1d8421154d375222f0e3cc1c4d/lock-singpass-qrv2.png&#34; alt=&#34;singpass QR in lock&#34;/&gt;&lt;/p&gt;&lt;p&gt;Scan the QR code with the Singpass mobile app.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6pGbrMObvL33JzKFWnkJ1Y/4de633516efb24f40220ab0a2a513b0b/singpass-app-combined.png&#34; alt=&#34;app combined&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;User-Profile&#34;&gt;User Profile&lt;/h3&gt;&lt;p&gt;We’re taking Singpass UUID to form Auth0 &lt;code&gt;user_id&lt;/code&gt;. That logic is sitting in the Fetch User Profile script of the Singpass connection.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/glYisSzA8BDvvAmOJfAyV/3bcc4833cce7954c922efe336ca6ddad/14_singpass-user-profile.png&#34; alt=&#34;singpass user profile&#34;/&gt;&lt;/p&gt;&lt;p&gt;In the next article, we will enable Myinfo, where you will fetch email and name information and use it to link Singpass users with existing customers with matching details. Stay tuned!&lt;/p&gt;&lt;h2 id=&#34;Login-experience-in-Action&#34;&gt;Login experience in Action&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Note: This video is captured with staging app (v13.0.0-stg) in the staging environment. The actual app interface might be different.&lt;/p&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;p&gt;&lt;img src=&#34;https://fast.wistia.com/embed/medias/dybrofix9e/swatch&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;The Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/auth0-integration-with-singpass/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to enable Singpass login with QR code in Auth0 Universal Login</summary>
  </entry>
  <entry>
    <title>Auth0 Announces the Winners of the Actions Hackathon</title>
    <updated>2021-11-04T16:01:00Z</updated>
    <id>tag:auth0.com,2021-11-04:/blog/auth0-announces-the-winners-of-the-actions-hackathon/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Auth0 was excited to host our first Actions Hackathon on Oct 28, 2021. Teams from around the globe participated in a day-long event that saw hackers take their best shot at creating their versions of the newest Auth0 extensibility feature - Actions.&lt;/p&gt;&lt;h2 id=&#34;But--What-Even-Is-Actions-Anyway-&#34;&gt;But, What Even Is Actions Anyway?&lt;/h2&gt;&lt;p&gt;We are always looking for new tools and solutions that allow you to customize your identity solution. Our first extensibility tool was Auth0 Rules, serverless code blocks that can be customized to extend Auth0&amp;#39;s core capabilities. Next up was Auth0 Hooks, similar to Rules but can be executed against several extensibility points.&lt;/p&gt;&lt;p&gt;Auth0 Actions is the next evolution in our extensibility toolset. An Action is a functional service that fires after specific triggers across an identity flow; these could be events such as a post-login or client credential exchange.&lt;/p&gt;&lt;h2 id=&#34;Okay--so-Let-s-Get-down-to-the-Winning-Teams-and-What-They-Built&#34;&gt;Okay, so Let’s Get down to the Winning Teams and What They Built&lt;/h2&gt;&lt;p&gt;The Hack kicked off Thursday morning with six developer teams.&lt;/p&gt;&lt;p&gt;After a roughly four-hour coding session, the teams came back to make their presentations to the judges. And the judges picked the top two winners.&lt;/p&gt;&lt;h2 id=&#34;Facial-Recognition-and-Vaccination-Status&#34;&gt;Facial Recognition and Vaccination Status&lt;/h2&gt;&lt;p&gt;Second place was awarded to the &lt;strong&gt;A-Team&lt;/strong&gt;, a team consisting of just one person! Augustine Correa from Mumbai utilized two Auth0 Actions: Yoonik, the Face Authentication Action found in the &lt;a href=&#34;https://marketplace.auth0.com/integrations/yoonik-face-authentication&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 marketplace&lt;/a&gt;, and a custom one built by the team during the Hackathon named “Vaccination Status.” This action was designed to interface with India’s COVID19 vaccination portal and verify the vaccination status of the person logging in.&lt;/p&gt;&lt;p&gt;India is enforcing vaccine mandates for entry to enclosed physical spaces. The A-Team’s Login Flow solution ascertains a registrant’s vaccination status and ensures the integrity of the process with a non-contact biometric authentication.&lt;/p&gt;&lt;p&gt;“For app developers, Auth0 Actions has a comforting familiarity with our current software practices,” reflected Augustin. “While we channel our efforts to code the unique functionality of our app, we incorporate packages for everything else. This assembly of components enables rapid development of high-quality software.”&lt;/p&gt;&lt;h2 id=&#34;Authenticate-Your-VPN-at-Login&#34;&gt;Authenticate Your VPN at Login&lt;/h2&gt;&lt;p&gt;The winners of the Auth0 Hackathon were &lt;strong&gt;Knights of the Pass&lt;/strong&gt;, composed of Inna Shablygin, Kirill Kotyagin, Rostislav Kondratenko, and Igor Vladimirskiy. The Knights of the Pass designed an Auth0 Login flow that streamlines access to corporate resources by recognizing authorization at login for access to VPN.&lt;/p&gt;&lt;p&gt;VPN is a widely-used security tool for remote workers but often creates significant inconvenience for users and systems administrators alike, contributing to productivity and compromised security.&lt;/p&gt;&lt;p&gt;The Knights of the Pass team created an Auth0 application for their test demo and set up a reverse proxy that restricts access to the application from the Internet (e.g., only the login page of the app is exposed). Next, they created an Auth0 action that generates one-time tickets for VPN authentication when the user is being logged in. These tickets are later verified by the RADIUS server. Lastly, their Action displays a webpage in the middle of the login process. The webpage verifies if the user is currently in the corporate network and, if not, starts the VPN client software on the user machine to connect to VPN.&lt;/p&gt;&lt;p&gt;“Companies which utilize Auth0 identity management with WWPass passwordless authentication can use Auth0 Actions to streamline access to corporate resources,” said Inna Shablygin, VP of Operations at WWPass. “Protected by corporate VPN, with extremely transparent and simple user experience, Auth0 Actions is a fantastic tool to glue different pieces of technology together.”&lt;/p&gt;&lt;h2 id=&#34;Want-to-Know-More-&#34;&gt;Want to Know More?&lt;/h2&gt;&lt;p&gt;To learn more about &lt;a href=&#34;https://auth0.com/actions&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;how to use Actions&lt;/a&gt; in an Auth0 login flow, check out our &lt;a href=&#34;https://auth0.com/docs/actions&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;docs&lt;/a&gt; section to see how to use Actions in your customer flow.&lt;/p&gt;&lt;p&gt;If you’ve built an Action and think you’re ready to share it as an integration, find out more in the &lt;a href=&#34;https://marketplace.auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Marketplace&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/auth0-announces-the-winners-of-the-actions-hackathon/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Developers from around the world created awesome new Actions</summary>
  </entry>
  <entry>
    <title>From Idea to Standard: How the JWT Profile for OAuth 2.0 Access Tokens Became RFC9068</title>
    <updated>2021-11-04T15:25:00Z</updated>
    <id>tag:auth0.com,2021-11-04:/blog/how-the-jwt-profile-for-oauth-20-access-tokens-became-rfc9068/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/ZEd0TLgFgvxqdJYcSiwvg/2fd1748691bc5e16c631735e7c6ae62c/Uploaded_from_From_Idea_to_Standard__How_the_JWT_Profile_for_OAuth_2&#34; alt=&#34;OAuth&#34;/&gt;&lt;/p&gt;&lt;p&gt;OAuth 2 Core does not say what an access token (AT) should look like, only what it should be used for. Left to their own devices, the most important OAuth-based services and products chose to encode access tokens as JWTs. Without guidance from standards, however, they ended up producing as many incompatible variants.&lt;br/&gt;This article is the story of how this issue bugged me so much that I took it on myself to work with the IETF standards community to try fixing it, culminating in the publication of a new standard document describing how to encode and validate an OAuth 2.0 AT in JWT format.&lt;br/&gt;I am taking this opportunity to give you a glimpse of how the standardization process works, but most importantly: I hope this will show you that today anyone has the power to contribute to the community.&lt;/p&gt;&lt;h2 id=&#34;Preamble--Why-Are-Issuers-Encoding-Access-Tokens-as-JWTs-&#34;&gt;Preamble: Why Are Issuers Encoding Access Tokens as JWTs?&lt;/h2&gt;&lt;p&gt;In the first version of OAuth, the access token issuer and the resource-consuming it (service provider and the protected resource, respectively, in OAuth 1 parlance) were co-located: the consumer (old name for client) would request an access token from &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;photos&lt;span&gt;.&lt;/span&gt;example&lt;span&gt;.&lt;/span&gt;net&lt;span&gt;/&lt;/span&gt;access\_token&lt;span&gt;?.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt; and use it to access the resource at &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;photos&lt;span&gt;.&lt;/span&gt;example&lt;span&gt;.&lt;/span&gt;net&lt;span&gt;/&lt;/span&gt;photo&lt;span&gt;?.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;OAuth 2 introduced better role separation, making it possible for the authorization server (AS) and resource server (RS) to live on different domains and be run by different owners. However, the scenario where AS and RS live together was still the quintessential use case, think Google issuing tokens to protect Google APIs.&lt;/p&gt;&lt;p&gt;When the token issuer and token consumer are essentially the same entity, validating tokens is an easy problem (see Figure 1). Say that a client asks and obtains delegated authorization to read your Google Calendar. At authorization request time, Google can write somewhere in its backend that you granted consent for that client, and return as AT the ID of the row where it recorded your preference. When the client wants to access the calendar, it just presents the AT to the API: the API turns around, looks up the ID in the DB it shares with the AS, and consults the record to decide whether to grant access. This is definitely oversimplified (and I have no insight on how google really does things, I just picked a relatable example) but should give a rough idea.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/IJRZvuawYe651McJaKsjP/92c105976b851db0c78c93ebc0cad3a7/Uploaded_from_From_Idea_to_Standard__How_the_JWT_Profile_for_OAuth_2&#34; alt=&#34;Authorization&#34;/&gt;&#xA;&lt;em&gt;Figure 1: if authorization server and resource server are co-located, access tokens are easy to validate&lt;/em&gt;&lt;/p&gt;&lt;p&gt;This trick clearly doesn’t work if the AS and RS are separate and don’t share any common state (figure 2). Just like it’s common for web apps to outsource authentication to a separate entity, it’s common for API to integrate with 3rd party services (such as IDaaS, local IdP software, etc) running elsewhere. And of course, APIs can be deployed anywhere (Lambda, Azure Functions, etc). The case in which AS and RS are separate is completely mainstream nowadays.&lt;/p&gt;&lt;p&gt;Imagine you are such an API. A caller sends you a request, including an AT allegedly indicating that they should be authorized to perform that request. Strictly adhering to the core spec, the AT is just an opaque blob. How are you going to determine whether you should serve the request?&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5B0yuKwp0LC2pCHIic9gJa/325c4684cffbda80ce45df58d41064de/Uploaded_from_From_Idea_to_Standard__How_the_JWT_Profile_for_OAuth_2&#34; alt=&#34;API&#34;/&gt;&#xA;&lt;em&gt;Figure 2: if the authorization server and resource server are separate and distinct entities, the API needs an explicit strategy for validating access tokens.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Absent the luxury of shared state with the AS, you mostly have two alternatives: calling back the AS asking for help, or trying to make that determination by looking at the AT content. Neither approach were included in the core OAuth 2 specification.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The “calling back the AS asking for help” route is known as &lt;em&gt;introspection&lt;/em&gt;. The idea is that your API can open a direct SSL channel with the AS, present the AT and find out whether the token is valid, what relevant information it contains/refers to, and so on.&lt;br/&gt;That’s a perfectly valid method, which has the advantage of immediately reflecting the revocation state of a token. It does however come with some tradeoffs: doing network IO from the API every time it gets a token is expensive, and puts network latency/failures/throttling risks on the API critical path. It’s expensive for the AS, too.&lt;/li&gt;&lt;li&gt;The “looking at the AT content” route is just an extension of what other boundary-crossing protocols have been doing for decades. If AS and the RS/API can agree on a format for encoding ATs, and associated validation methods, the API can now independently validate the incoming AT, without depending on network performance, AS availability, throttling, and so on. This approach is extraordinarily popular, adopted by hyperscale IDaaS and nimble SDKs alike.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;That hopefully clarifies why it’s handy to use a format for ATs. Why JWT in particular? I believe that’s because most AS also implement OpenID Connect, hence already needed to use the JWT format to issue ID tokens. Same deal on the consumer side: lots of OpenID Connect SDKs relying on lower-level components implementing JWT, at the ready to be used in APIs.&lt;br/&gt;Whatever the reason, everywhere I looked I saw products and companies issuing ATs as JWTs: and that’s where our story begins.&lt;/p&gt;&lt;h2 id=&#34;Framing-the-Problem--JWT--JWT-ATs-Everywhere&#34;&gt;Framing the Problem: JWT, JWT ATs Everywhere&lt;/h2&gt;&lt;p&gt;Throughout my years of tenure at Microsoft, I have consistently seen API calls secured using tokens in a known format, JWT in particular. I helped many product teams build features predicated on that, and hundreds of customers to achieve their goals via architectures that included encoding access tokens as JWTs. Doing so wasn’t against any standards, it just didn’t benefit from standard guidance. All the practices and implementation decisions had to be derived from the concrete experience of running solutions predicated on that approach.&lt;/p&gt;&lt;p&gt;When I moved to Auth0, I found the approach used to secure the customer’s API to be very similar to the one I was already used to. Two hyperscale services, handling API authorization in the same way… make you think, doesn’t it?&lt;br/&gt;And yet, there were small differences- details that made reusing exactly the same SDKs to handle the two different JWT ATs impossible. For example, Azure AD placed the scopes granted to the client in a claim called scp, whereas Auth0 used a claim called scope. Exact same functionality, but incompatible formats for a pure matter of formatting. Makes you think some more! If other well-adopted vendors are using JWT to encode ATs, and are all mostly sending the same info with some minor syntactic differences, perhaps devising a common profile might be a good thing! It was a hypothesis worth investigating.&lt;/p&gt;&lt;p&gt;In March 2019 I reached out to friends and contacts working at key providers I knew were using JWT as AT format. I explained my hypothesis and asked if they’d share with me sample ATs.&lt;/p&gt;&lt;p&gt;I got answers and samples from Dominick Baier (IdentityServer), Brian Campbell (PingIdentity), Daniel Dobalian (Microsoft), Karl McGuinness (Okta- this was years before the merger news) and I of course sourced Auth0 ATs myself. For good measure, I threw in JWT ATs from AWS as extracted from their public documentation.&lt;/p&gt;&lt;p&gt;Putting all the AT claims in a table, I found more similarities than differences.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/KtfrSGPakBBawFDXtV4p8/123efc182d522ca0783c0e0432308a7c/Uploaded_from_From_Idea_to_Standard__How_the_JWT_Profile_for_OAuth_2&#34; alt=&#34;Table&#34;/&gt;&lt;/p&gt;&lt;p&gt;I found that the claims could be roughly classified into 4 categories:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Validation. Structural claims used to validate the token, largely echoing the ones defined by OpenID Connect for IDTokens&lt;/li&gt;&lt;li&gt;Identity. Contrary to popular belief, which insists on ATs being exclusively (delegated) authorization constructs, nearly everyone included identity attributes (and the one instance who didn’t, allowed them as optional)&lt;/li&gt;&lt;li&gt;Authorization. Besides the scope claim, present in all samples albeit in varying formats, various providers allowed the inclusion of other classic authorization artifacts (groups, roles)&lt;/li&gt;&lt;li&gt;Context/misc. A loose category carrying miscellaneous information, with some common elements like client identifiers and authentication methods info.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This further confirmed my hypothesis that everyone was roughly pursuing the same goals and using the same attributes, but just happened to use a different syntax for pure happenstance.&lt;/p&gt;&lt;p&gt;To me that was interesting evidence that deserved being shared with the OAuth community. Luckily, there was just the right forum coming up: the OAuth Security Workshop.&lt;/p&gt;&lt;h2 id=&#34;Probing-Interest--the-Stuttgart-Pitch&#34;&gt;Probing Interest: the Stuttgart Pitch&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5abeLJalBQD6VdWUsuwmfZ/e3fcb24b09fb6c097604dec414986afd/Uploaded_from_From_Idea_to_Standard__How_the_JWT_Profile_for_OAuth_2&#34; alt=&#34;Stuttgart Pitch&#34;/&gt;&lt;/p&gt;&lt;p&gt;In late March 2019, I flew to Stuttgart, Germany, to attend the OAuth Security Workshop. It is a fantastic conference, a watering hole toward which the most brilliant (and generous) experts in the OAuth community converge once a year. That made it the absolute ideal place and time to explore whether others saw the problem and the opportunity.&lt;/p&gt;&lt;p&gt;I grabbed a one-hour slot and presented my research. You can still find the deck I used &lt;a href=&#34;https://osw2019.sec.uni-stuttgart.de/documents/slides/bertocci_-_a_jwt_profile_for_ats.pptx&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;br/&gt;I got a lot of nodding, the room definitely already knew what I was talking about: the data I presented was consistent with their experience. I did one more session on the topic, this time focusing on what an interop profile could look like, and got tons of enthusiastic contributions to it. &lt;a href=&#34;https://twitter.com/tlodderstedt/status/1109118437006196737?s=20&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;The interest was there&lt;/a&gt;: it was time to get serious about starting formal work on the problem.&lt;br/&gt;The IETF was going to meet just a few days later for IETF104: the OAuth chairs were open to let me put this in front of the working group via remote presentation, but in order to do that I had to jot down my proposal as an &amp;#34;individual draft&amp;#34; (see below). That’s where I started to realize just how much process I was going to have to deal with!&lt;/p&gt;&lt;h2 id=&#34;From-Individual-Draft-to-Working-Group-Adoption--IETF-104&#34;&gt;From Individual Draft to Working Group Adoption: IETF 104&lt;/h2&gt;&lt;p&gt;Have you ever seen an RFC? They live at addresses like &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc9068&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://datatracker.ietf.org/doc/html/rfc9068&lt;/a&gt; and have a characteristic look (tho they can be visualized in many formats).&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2oWuv172MyYRrXqkrGlDMK/da9b0705fd051e6485bba5934692fd5c/Uploaded_from_From_Idea_to_Standard__How_the_JWT_Profile_for_OAuth_2&#34; alt=&#34;RFC&#34;/&gt;&lt;/p&gt;&lt;p&gt;As it turns out, documents that eventually become RFCs usually start their life as an &lt;em&gt;individual draft&lt;/em&gt;, containing an initial proposal of an author on how to tackle something that, in the author’s opinion, deserves to become formal guidance. That is a document that must be authored in a very specific format and must be submitted using the tooling and processes that the IETF provides (and enforces). The result is something that looks very similar to an RFC, as it looks the same and lives on the IETF pages, but that at this stage has &lt;em&gt;no formal weight whatsoever&lt;/em&gt;. For a funny example, &lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-abr-twitter-reply-00&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check this out&lt;/a&gt; (and &lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-wkumari-not-a-draft-14&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this one&lt;/a&gt;, too).&lt;/p&gt;&lt;p&gt;Nonetheless, an individual draft was what I had to produce in order to even suggest the idea to the IETF meeting. I had to do it FAST, likely while on the plane back from Germany. And I had to do it right, given that anything incorrectly formatted would have been rejected by the uploading tools.&lt;/p&gt;&lt;p&gt;I took a look at the official guidance &lt;a href=&#34;https://www.ietf.org/standards/ids/guidelines/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;, and it was just overwhelming. Luckily, the identity community is full of good people who are generous with their time. My good friend Brian Campbell was incredibly helpful, leading me through the labyrinth of tools, options, and templates, helping me to troubleshoot when things broke down, and in general, making it possible for me to produce a draft on time for the presentation.&lt;/p&gt;&lt;p&gt;As is the case for all things IETF, where the story of everything is pretty much always available, you can still find that first individual draft at &lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-bertocci-oauth-access-token-jwt&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://datatracker.ietf.org/doc/html/draft-bertocci-oauth-access-token-jwt&lt;/a&gt;. At that point that was just my own thoughts, not reflecting any working group discussion. A true individual draft. The secret to recognizing those is to look at the name of the file. If it’s of the form draft-&amp;lt; lastname &amp;gt;-*, it’s just the opinion of the author- nothing more.&lt;/p&gt;&lt;p&gt;Once I uploaded the draft, an automated mail informed the OAuth WG mailing list of its existence and location. Shortly after, I gave my presentation at the IETF104 conference: you can find the rather terse minutes &lt;a href=&#34;https://datatracker.ietf.org/doc/minutes-104-oauth/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;. It was well-received there, too, but the real test came a few days after the conference. The working group chairs sent a message to the mailing list, issuing what is known as a call for adoption: the group members are asked to share whether they accept or object to the adoption of the draft document as a starting point for work in the OAuth working group. To my delight, the support for the adoption was strong- no one objected, and &lt;a href=&#34;https://twitter.com/vibronet/status/1120382180029423616?s=20&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the motion passed&lt;/a&gt;. I re-submitted the draft, which changed into &lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-ietf-oauth-access-token-jwt-00&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://datatracker.ietf.org/doc/html/draft-&lt;strong&gt;ietf&lt;/strong&gt;-oauth-access-token-jwt-00&lt;/a&gt;. That’s another stage of our pokemon here: from the individual draft, the document turned into an &lt;strong&gt;&lt;em&gt;internet&lt;/em&gt; draft&lt;/strong&gt;. When you see a document whose name is in the form draft-ietf-*[-&amp;lt; digits &amp;gt;], you know it’s a document that is being worked on by a working group. That is NOT yet a standard, it is still very likely to change, but already received some degree of scrutiny (at the very least, it successfully went through a call for adoption as a work item).&lt;/p&gt;&lt;p&gt;That was when the REAL fun began.&lt;/p&gt;&lt;h2 id=&#34;The-Working-Group-Discussion&#34;&gt;The Working Group Discussion&lt;/h2&gt;&lt;p&gt;The raison d’etre of this work was that one important area of OAuth was left underspecified, so I was strongly motivated to swing the pendulum in the other direction and generate truly actionable guidance that would help developers achieve an end to end interop in no uncertain terms. That meant going beyond just defining the layout of an AT encoded as a JWT, but also defining how the authorization server should take request parameters into account when populating ATs, and providing clear guidance about how resource servers should validate JWT ATs. On top of that, there were years of lessons learned in terms of security and privacy practices that had to be codified in the spec recommendations. All noble goals! As I was about to discover, however, the cost of consensus doesn’t grow linearly with the amount of stuff a group needs to agree on: if it’s not exponential, it’s pretty darn close.&lt;/p&gt;&lt;p&gt;I contributed to the discussion on the working group many times before, but this was the first time I felt responsible to ensure things moved forward and in the right way. No more &lt;a href=&#34;https://en.wikipedia.org/wiki/Bystander_effect&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;bystander effect&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;I don’t want to bore you with a detailed chronicle of how the discussion went, but just give you a feel of what the process looks like. In broad strokes, it was something along the lines of&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Send to the mailing list a writeup about some detail of the document, proposing something or seeking opinions: whether a certain claim should be optional or mandatory, whether a certain recommendation should be included in the security considerations, and so on. At times, someone else will do this- asking a question about the document, sharing an opinion.&lt;/li&gt;&lt;li&gt;Actively engage in the discussion, soliciting points of view, asking for clarifications, summarizing to steer toward consensus or uncover remaining disagreements, spawn separate threads when necessary, facilitate closure when things don’t seem to converge on their own&lt;/li&gt;&lt;li&gt;Reflect the outcome of the conversations in the draft and upload new versions&lt;/li&gt;&lt;li&gt;At key milestones (IETF F2F events, conferences, etc) present to the group in high bandwidth settings, bringing up issues that are hard to close in email form&lt;/li&gt;&lt;li&gt;Repeat as many times as it is necessary to reach a form that enjoys widespread consensus, no longer generates disagreements&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I found all of the above a challenging, humbling, and profoundly formative experience.&lt;/p&gt;&lt;p&gt;One of the most important lessons I got was that I didn&amp;#39;t know nearly as much as I thought on the topic. After years of hands-on experience using JWT ATs with many customers in the most diverse circumstances, I thought the bulk of the work was going to be putting down that experience in spec form. Goodness was I wrong. I think I did supply a solid starting point, but I was absolutely blown away by the diversity of viewpoints, goals, scenarios, and ways to look at the problem that were just as valid and backed by concrete experience as mine. The working group sports some really, really smart members. Luckily I was fully committed to identifying the right guidance and channel consensus rather than “being right”, so I genuinely enjoyed learning those things - even when they required some reframing.&lt;/p&gt;&lt;p&gt;Extracting the insight was not always easy. Not everyone follows the discussion closely (we all have day jobs) so it wasn’t uncommon for someone to comment on something that has been already discussed, often presenting the same arguments - to which I had to either summarize the outcome of the discussion and/or provide pointers to the relevant threads in the mail archive, hoping they would read it before diving further. Of course that occasionally caused people unsatisfied with the outcome of the former discussion to give it another shot, relitigating issues large and small in what at times felt like a Sisyphean task. I remember the chill in my spine when during the QA of my presentation at an in-person IETF meeting, someone walked up to the microphone and opened with “I didn’t read the specification or follow the discussion, but here there’s my take on this…” :D that caused an avalanche of comments along those lines, largely repeating a discussion that already occurred on the mailing list, and ate all the precious face time I had. ARGH :D&lt;/p&gt;&lt;p&gt;For a while, it looked like most of the work was on tracking down, digesting, and curating context and content to ensure that the opinions being shared were well informed rather than the result of incomplete understanding. Throw in the mix the occasional individual pursuing their own agenda regardless of what spec is being discussed, and you get the picture. Ultimately, things always worked out in a way or another- but it was HARD. I admit that for a while seeing new messages appear in the OAUTH WG folder in my inbox caused me little anxiety spikes :’)&lt;/p&gt;&lt;p&gt;But, as I said- formative experience. I developed a stoic stance toward the endeavor, resolving to do my best without expecting fast progress. There was incredible insight being shared in the discussion, and even if the process felt at times painful, I had faith in its ability to eventually distill the collective wisdom.&lt;/p&gt;&lt;h2 id=&#34;The-Last-Stretch--Last-Calls--IESG--RFC-Editor&#34;&gt;The Last Stretch: Last Calls, IESG, RFC Editor&lt;/h2&gt;&lt;h3 id=&#34;Working-Group-Last-Call-s-&#34;&gt;Working Group Last Call(s)&lt;/h3&gt;&lt;p&gt;At a certain point in the process, the working group chairs establish that the draft is close enough to completion, and issue what it’s known as a working group last call (WGLC): it basically says that if by a certain date no one had anything of substance to discuss, the draft will move to the next stage. My spec went through not one, but THREE WGLCs.&lt;/p&gt;&lt;p&gt;The first one, issued on March 23, 2020, and ending on April 6, 2020, generated LOTS of comments from many people, on fundamental matters.&lt;/p&gt;&lt;p&gt;The second, from 4/15 to 4/29, got less substantive traffic but still useful observations. It also got WAY more drama than I would have ever expected to witness in the process of developing a standard, but there’s no point rehashing any of that here. The mailing list records are public, and you can always catch me at some conference to get a TL;DR- especially if I have an adult beverage in my hands.&lt;/p&gt;&lt;p&gt;The third one, from 5/5 to 5/12, was meant to be the last, last… but in fact, the next stage didn’t really start in earnest until &lt;a href=&#34;https://twitter.com/dzhuvi/status/1354101508187578368?s=21&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;January 2021&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;The-IESG&#34;&gt;The IESG&lt;/h3&gt;&lt;p&gt;The next stage is a review from the IESG, a group of experts (area directors) with scope beyond OAuth that will give very detailed commentary and formally vote whether to move the doc forward or if they need to get further clarifications.&lt;/p&gt;&lt;p&gt;In order to pass the buck to IESG, the working group chair has to produce a “shepherd writeup”- basically a backgrounder preempting a fixed series of questions about the specification, from the standard track the document is in, to whether all the intellectual properties considerations have been cleared. Mine was authored and submitted in October 2020 by the always excellent Hannes Tschofenig, you can find it &lt;a href=&#34;https://datatracker.ietf.org/doc/draft-ietf-oauth-access-token-jwt/shepherdwriteup/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;One particularly interesting aspect the shepherd writeup needs to cover is whether there are already implementations of the draft in actual products- I was delighted to discover that there were already FOUR products offering support for the profile! There was &lt;a href=&#34;https://leastprivilege.com/2020/06/15/the-jwt-profile-for-oauth-2-0-access-tokens-and-identityserver/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;IdentityServer&lt;/a&gt;, Filip Skokan’s Node &lt;a href=&#34;https://github.com/panva/node-oidc-provider&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OIDC library&lt;/a&gt;, &lt;a href=&#34;https://connect2id.com/products/server/docs/datasheet#access-token-encoding-jwt&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ConnectID&lt;/a&gt;, &lt;a href=&#34;https://github.com/babelouest/glewlwyd/blob/master/docs/OIDC.md#access-token-format&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Glewlwyd OIDC plugin&lt;/a&gt;... That placed a huge smile on my face.&lt;/p&gt;&lt;p&gt;The &lt;a href=&#34;https://twitter.com/oauth_2/status/1432731166440759301?s=20&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;IESG review went very smoothly&lt;/a&gt;. As expected, some of the questions were repeats of things already discussed; others were brand new, and very insightful. And there were LOTS of them, it was a thorough combing. What made it go smoothly was that every reviewer was familiar with the process, paid very close attention to the replies, and relentlessly drove toward resolution. I was pretty worried about that phase, but it turned out to be one of the best parts of this experience.&lt;/p&gt;&lt;h3 id=&#34;RFC-Editor-and-Publication&#34;&gt;RFC Editor and Publication&lt;/h3&gt;&lt;p&gt;After their approval, the last stage (I am skipping some stuff here, notably the IANA parts pertaining to the registration of new media and claim types the spec defines) was the RFC editor- an extraordinarily thorough editorial review, for some reason (and confusingly, for identity people) called AUTH48, where the author is asked to review every proposed edit (all good edits that enhance clarity). Once that’s done, the document receives a number and becomes an official IETF standard, assuming the characteristic &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc9068&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://datatracker.ietf.org/doc/html/rfc9068&lt;/a&gt; form.&lt;/p&gt;&lt;p&gt;The publication happened during the AuthenticateCon/FIDO plenary conference - that made me miss the magical window for tweeting about it (&lt;a href=&#34;https://twitter.com/selfissued/status/1451352723853504514?s=21&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Mike did the honors&lt;/a&gt;) but it also created the awesome opportunity to &lt;a href=&#34;https://twitter.com/vibronet/status/1451406207206375424?s=20&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;celebrate on that very evening&lt;/a&gt; with many of my identity friends, also in town for the conference.&lt;/p&gt;&lt;h2 id=&#34;Where-to-Go-from-Here&#34;&gt;Where to Go from Here&lt;/h2&gt;&lt;p&gt;Our brief tour de force showed us how it really is possible to go from an idea, a pet peeve to an official standard. Even better, if you exclude the time I and the other WG members offered when working on this, and the occasional trip to in-person IETF events, this was substantially free - no hefty corporate membership required. The rational question you should ask, dear reader, is: was it worth it?&lt;/p&gt;&lt;p&gt;After all this brouhaha to make the JWT profile a standard, everyone’s going to drop what they’re doing and change their existing JWT encoding logic for ATs to comply with the profile, right? ...right?&lt;/p&gt;&lt;p&gt;Not likely. What companies have today, my starting point, already works for their scenarios. Moreover, their customers are taking at least some degree of dependency on it. The incentive for a wholesale swap isn’t strong. But frankly, it was never the main point of standardizing this. Describing what a JWT AT would look like in the platonic ideal scenario gave the working group a chance to provide guidance on the security and privacy implications of using a JWT (and, more generally, a parseable format) for encoding ATs. That’s guidance that can be successfully applied to existing solutions, without having to fully commit to the profile in its entirety. Furthermore, the profile provides an authoritative reference for important functionality ATs are expected to perform: if all existing implementations pick up from rfc9068 is what claim type and format to use to transmit scopes, opening the way for SDKs to offer scope based policies reliably applicable to multiple vendors, that alone would be worth the effort of pushing this heavy boulder to completion.&lt;br/&gt;And of course, new SDK work will hopefully build on the guidance. There are already products supporting the profile: besides the four products I listed earlier in this post, Auth0’s very own Node JS API middleware offers a strict option that will enforce the profile.&lt;/p&gt;&lt;p&gt;To me, that makes all the effort absolutely worth it. The process might be at times frustrating, maddeningly slow… but it is open, thorough, and effective. It’s not perfect and it doesn’t yield perfect results, but it’s pretty much the best we have today. I feel grateful to have had (and have) the chance to contribute. I am constantly amazed at the generosity of so many world-class identity experts freely offering their insights: besides the chance of steering the community in the right direction, all they can hope for is an entry in the spec’s acknowledgment section, with a non zero chance to have their names misspelled.&lt;/p&gt;&lt;p&gt;I hope this was more inspiring than discouraging. If you are interested in contributing to the IETF standards work, please always feel free to reach out at &lt;a href=&#34;https://twitter.com/vibronet&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;twitter.com/vibronet&lt;/a&gt;: I received so much help that I don’t think I’ll ever be able to pay it back. Your experience and scenarios are important, and I assure you many people are eager to hear about them!&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thanks to Aaron Parecki for his thorough review and feedback on this article!&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/how-the-jwt-profile-for-oauth-20-access-tokens-became-rfc9068/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">A first-person account of how modern open identity standards are made</summary>
  </entry>
  <entry>
    <title>Full Stack Java with React, Spring Boot, and JHipster</title>
    <updated>2021-11-03T17:18:00Z</updated>
    <id>tag:auth0.com,2021-11-03:/blog/full-stack-java-with-react-spring-boot-and-jhipster/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;If you search for &amp;#34;Full Stack Java&amp;#34; on the internet, you&amp;#39;ll likely find a lot of recruiting, courses, and jobs. Being a full-stack developer can be exciting because you can create the backend and frontend of an app all by yourself. There is business logic and algorithms as well as like styling, making things look good, and securing everything. It also pays pretty well. Today, I&amp;#39;m going to show you how you can be a full-stack Java developer with Spring Boot, React, and JHipster.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Node.js 14+&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://sdkman.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Java 11+&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Docker Compose&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you&amp;#39;re on Windows, you may need to install the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/about&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Windows Subsystem for Linux&lt;/a&gt; for some commands to work.&lt;/p&gt;&lt;p&gt;I recommend using SDKMAN to manage your OpenJDK installations. Just run &lt;code&gt;sdk install java &lt;span&gt;11.0&lt;/span&gt;&lt;span&gt;.2&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;open&lt;/code&gt; to install Java 11 and &lt;code&gt;sdk install java &lt;span&gt;17&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;open&lt;/code&gt; for Java 17.&lt;/p&gt;&lt;p&gt;This tutorial won&amp;#39;t provide the nitty-gritty details on how to write code in Java, React, or Spring Boot. That&amp;#39;s because JHipster will write most of the code for you! However, if you&amp;#39;re brand new to programming with these technologies, I recommend the following resources:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://dev.java/learn/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Oracle&amp;#39;s Learn Java Tutorials&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://spring.io/guides&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring Guides&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://reactjs.org/tutorial/tutorial.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Tutorial: Intro to React&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can skip around between sections of this tutorial using the table of contents below. &lt;/p&gt;&lt;p&gt;You can also clone &lt;a href=&#34;https://github.com/oktadev/auth0-full-stack-java-example&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the completed example&lt;/a&gt; and follow along that way.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;git clone https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;github&lt;span&gt;.&lt;/span&gt;com&lt;span&gt;/&lt;/span&gt;oktadev&lt;span&gt;/&lt;/span&gt;auth0&lt;span&gt;-&lt;/span&gt;full&lt;span&gt;-&lt;/span&gt;stack&lt;span&gt;-&lt;/span&gt;java&lt;span&gt;-&lt;/span&gt;example&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Full-Stack-Development-with-React-and-Spring-Boot&#34;&gt;Full Stack Development with React and Spring Boot&lt;/h2&gt;&lt;p&gt;One of the easiest ways to get started with React is by using &lt;a href=&#34;https://create-react-app.dev/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Create React App&lt;/a&gt; (CRA). You install it locally, then run &lt;code&gt;create&lt;span&gt;-&lt;/span&gt;react&lt;span&gt;-&lt;/span&gt;app &lt;span&gt;&amp;lt;&lt;/span&gt;project&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; to generate a React application with minimal dependencies. It uses webpack under-the-covers to build the project, launch a web server, and run its tests.&lt;/p&gt;&lt;p&gt;Spring Boot has a similar tool called &lt;a href=&#34;https://start.spring.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring Initializr&lt;/a&gt;. Spring Initializer is a bit different than CRA because it&amp;#39;s a website (and API) that you can create applications with.&lt;/p&gt;&lt;p&gt;Today, I&amp;#39;ll show you how to build a Flickr clone with React and Spring Boot. However, I&amp;#39;m going to cheat. Rather than building everything using the aforementioned tools, I&amp;#39;m going to use JHipster. JHipster is an application generator that initially only supported Angular and Spring Boot. Now it supports Angular, React, and Vue for the frontend. JHipster also has support for &lt;a href=&#34;https://www.jhipster.tech/modules/official-blueprints/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Kotlin, Micronaut, Quarkus, .NET, and Node.js&lt;/a&gt; on the backend.&lt;/p&gt;&lt;p&gt;In this tutorial, we&amp;#39;ll use React since it seems to be &lt;a href=&#34;https://trends.google.com/trends/explore?q=angular,react,vuejs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the most popular&lt;/a&gt; frontend framework nowadays. &lt;/p&gt;&lt;h2 id=&#34;Get-Started-with-JHipster-7&#34;&gt;Get Started with JHipster 7&lt;/h2&gt;&lt;p&gt;If you haven&amp;#39;t heard of &lt;a href=&#34;https://www.jhipster.tech&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;JHipster&lt;/a&gt;, boy do I have a treat for you! JHipster started as a Yeoman application generator back in 2013 and has grown to become a development platform. It allows you to quickly generate, develop, and deploy modern web apps and microservice architectures. Today, I&amp;#39;ll show you how to build a Flickr clone with JHipster and lock it down with OAuth and OpenID Connect (OIDC).&lt;/p&gt;&lt;p&gt;To get started with JHipster, you&amp;#39;ll need a fast internet connection and Node.js installed. The project recommends you use the latest LTS (Long Term Support) version, which is 14.7.6 at the time of this writing. To run the app, you&amp;#39;ll need to have Java 11 installed. If you have Git installed, JHipster will auto-commit your project after creating it. This will allow you to upgrade between versions.&lt;/p&gt;&lt;p&gt;Run the following command to install JHipster:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;npm&lt;/span&gt; i -g generator-jhipster@7&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To create a full-stack app with JHipster, create a directory, and run &lt;code&gt;jhipster&lt;/code&gt; in it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;mkdir&lt;/span&gt; full-stack-java&#xA;&lt;span&gt;cd&lt;/span&gt; full-stack-java&#xA;jhipster&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JHipster will prompt you for the type of application to create and what technologies you&amp;#39;d like to include. For this tutorial, make the following choices:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Question&lt;/th&gt;&lt;th&gt;Answer&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Type of application?&lt;/td&gt;&lt;td&gt;&lt;code&gt;Monolithic application&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Name?&lt;/td&gt;&lt;td&gt;&lt;code&gt;flickr2&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Spring WebFlux?&lt;/td&gt;&lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Java package name?&lt;/td&gt;&lt;td&gt;&lt;code&gt;com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;flickr2&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Type of authentication?&lt;/td&gt;&lt;td&gt;&lt;code&gt;OAuth &lt;span&gt;2.0&lt;/span&gt; &lt;span&gt;/&lt;/span&gt; &lt;span&gt;OIDC&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Type of database?&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;SQL&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Production database?&lt;/td&gt;&lt;td&gt;&lt;code&gt;PostgreSQL&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Development database?&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;H2&lt;/span&gt; &lt;span&gt;with&lt;/span&gt; disk&lt;span&gt;-&lt;/span&gt;based persistence&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Which cache?&lt;/td&gt;&lt;td&gt;&lt;code&gt;Ehcache&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Use Hibernate 2nd level cache?&lt;/td&gt;&lt;td&gt;&lt;code&gt;Yes&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Maven or Gradle?&lt;/td&gt;&lt;td&gt;&lt;code&gt;Maven&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Use the JHipster Registry?&lt;/td&gt;&lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Other technologies?&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;blank&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Client framework?&lt;/td&gt;&lt;td&gt;&lt;code&gt;React&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Admin UI?&lt;/td&gt;&lt;td&gt;&lt;code&gt;Yes&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Bootswatch theme?&lt;/td&gt;&lt;td&gt;&lt;code&gt;United&lt;/code&gt; &amp;gt; &lt;code&gt;Dark&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Enable i18n?&lt;/td&gt;&lt;td&gt;&lt;code&gt;Yes&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Native language of application?&lt;/td&gt;&lt;td&gt;&lt;code&gt;English&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Additional languages?&lt;/td&gt;&lt;td&gt;Your choice!&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Additional testing frameworks?&lt;/td&gt;&lt;td&gt;&lt;code&gt;Cypress&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Install other generators?&lt;/td&gt;&lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Press &lt;strong&gt;Enter&lt;/strong&gt;, and JHipster will create your app in the current directory and run &lt;code&gt;npm install&lt;/code&gt; to install all the dependencies specified in &lt;code&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt;.&lt;/p&gt;&lt;h3 id=&#34;Verify-Everything-Works-with-Cypress-and-Keycloak&#34;&gt;Verify Everything Works with Cypress and Keycloak&lt;/h3&gt;&lt;p&gt;When you choose OAuth 2.0 and OIDC for authentication, the users are stored outside of the application rather than in it. You need to configure an identity provider (IdP) to store your users and allow your app to retrieve information about them. By default, JHipster ships with a Keycloak file for Docker Compose. A default set of users and groups is imported at startup, and it has a client registered for your JHipster app.&lt;/p&gt;&lt;p&gt;Here&amp;#39;s what the &lt;code&gt;keycloak&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt; looks like in your app&amp;#39;s &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;main&lt;span&gt;/&lt;/span&gt;docker&lt;/code&gt; directory:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# This configuration is intended for development purpose; it&amp;#39;s **your** responsibility&lt;/span&gt;&#xA;&lt;span&gt;# to harden it for production&lt;/span&gt;&#xA;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;3.8&amp;#39;&lt;/span&gt;&#xA;&lt;span&gt;services&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;keycloak&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; jboss/keycloak&lt;span&gt;:&lt;/span&gt;15.0.2&#xA;    &lt;span&gt;command&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;[&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#39;-b&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#39;-Dkeycloak.migration.action=import&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#39;-Dkeycloak.migration.provider=dir&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#39;-Dkeycloak.migration.dir=/opt/jboss/keycloak/realm-config&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#39;-Dkeycloak.migration.strategy=OVERWRITE_EXISTING&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#39;-Djboss.socket.binding.port-offset=1000&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#39;-Dkeycloak.profile.feature.upload_scripts=enabled&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;volumes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;-&lt;/span&gt; ./realm&lt;span&gt;-&lt;/span&gt;config&lt;span&gt;:&lt;/span&gt;/opt/jboss/keycloak/realm&lt;span&gt;-&lt;/span&gt;config&#xA;    &lt;span&gt;environment&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;-&lt;/span&gt; KEYCLOAK_USER=admin&#xA;      &lt;span&gt;-&lt;/span&gt; KEYCLOAK_PASSWORD=admin&#xA;      &lt;span&gt;-&lt;/span&gt; DB_VENDOR=h2&#xA;    &lt;span&gt;# If you want to expose these ports outside your dev PC,&lt;/span&gt;&#xA;    &lt;span&gt;# remove the &amp;#34;127.0.0.1:&amp;#34; prefix&lt;/span&gt;&#xA;    &lt;span&gt;ports&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;-&lt;/span&gt; 127.0.0.1&lt;span&gt;:&lt;/span&gt;9080&lt;span&gt;:&lt;/span&gt;&lt;span&gt;9080&lt;/span&gt;&#xA;      &lt;span&gt;-&lt;/span&gt; 127.0.0.1&lt;span&gt;:&lt;/span&gt;9443&lt;span&gt;:&lt;/span&gt;&lt;span&gt;9443&lt;/span&gt;&#xA;      &lt;span&gt;-&lt;/span&gt; 127.0.0.1&lt;span&gt;:&lt;/span&gt;10990&lt;span&gt;:&lt;/span&gt;&lt;span&gt;10990&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Start Keycloak with the following command in your project&amp;#39;s root directory.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;docker-compose -f src/main/docker/keycloak.yml up -d&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can verify everything works by starting your app with Maven:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;./mvnw&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Open another terminal to run your new app&amp;#39;s Cypress tests:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;npm&lt;/span&gt; run e2e&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should see output like the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  &lt;span&gt;(&lt;/span&gt;Run Finished&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;       Spec                                              Tests  Passing  Failing  Pending  Skipped&#xA;  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐&#xA;  │ ✔  administration/administration.spec.      00:12        &lt;span&gt;5&lt;/span&gt;        &lt;span&gt;5&lt;/span&gt;        -        -        - │&#xA;  │    ts                                                                                          │&#xA;  └────────────────────────────────────────────────────────────────────────────────────────────────┘&#xA;    ✔  All specs passed&lt;span&gt;!&lt;/span&gt;                        00:12        &lt;span&gt;5&lt;/span&gt;        &lt;span&gt;5&lt;/span&gt;        -        -        -&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Change-Your-Identity-Provider-to-Auth0&#34;&gt;Change Your Identity Provider to Auth0&lt;/h2&gt;&lt;p&gt;JHipster uses Spring Security&amp;#39;s OAuth 2.0 and OIDC support to configure which IdP it uses. When using Spring Security with Spring Boot, you can configure most settings in a properties file. You can even override properties with environment variables.&lt;/p&gt;&lt;p&gt;To switch from Keycloak to Auth0, you only need to override the default properties (for Spring Security OAuth). You don&amp;#39;t even need to write any code!&lt;/p&gt;&lt;p&gt;To see how it works, create a &lt;code&gt;&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;env&lt;/code&gt; file in the root of your project, and fill it with the code below to override the default OIDC settings:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;https://&lt;span&gt;&amp;lt;&lt;/span&gt;your-auth0-domain&lt;span&gt;&amp;gt;&lt;/span&gt;/&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;your-client-id&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;your-client-secret&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;JHIPSTER_SECURITY_OAUTH2_AUDIENCE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;https://&lt;span&gt;&amp;lt;&lt;/span&gt;your-auth0-domain&lt;span&gt;&amp;gt;&lt;/span&gt;/api/v2/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;⚠️ &lt;strong&gt;WARNING:&lt;/strong&gt; Modify your existing &lt;code&gt;&lt;span&gt;.&lt;/span&gt;gitignore&lt;/code&gt; file to have &lt;code&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;env&lt;/code&gt; so you don&amp;#39;t accidentally check in your secrets!&lt;/p&gt;&lt;p&gt;You&amp;#39;ll need to create a new web application in Auth0 and fill in the &lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; placeholders before this works. &lt;/p&gt;&lt;h3 id=&#34;Create-an-OpenID-Connect-App-on-Auth0&#34;&gt;Create an OpenID Connect App on Auth0&lt;/h3&gt;&lt;p&gt;Log in to your Auth0 account (or &lt;a href=&#34;https://auth0.com/signup&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up&lt;/a&gt; if you don&amp;#39;t have an account). You should have a unique domain like &lt;code&gt;dev&lt;span&gt;-&lt;/span&gt;xxx&lt;span&gt;.&lt;/span&gt;eu&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;Press the &lt;strong&gt;Create Application&lt;/strong&gt; button in &lt;a href=&#34;https://manage.auth0.com/#/applications&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Applications section&lt;/a&gt;. Use a name like &lt;code&gt;JHipster Baby&lt;span&gt;!&lt;/span&gt;&lt;/code&gt;, select &lt;code&gt;Regular Web Applications&lt;/code&gt;, and click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Switch to the &lt;strong&gt;Settings&lt;/strong&gt; tab and configure your application settings:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Allowed Callback URLs: &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;login&lt;span&gt;/&lt;/span&gt;oauth2&lt;span&gt;/&lt;/span&gt;code&lt;span&gt;/&lt;/span&gt;oidc&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Allowed Logout URLs: &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;localhost:8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Scroll to the bottom and click &lt;strong&gt;Save Changes&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;In the &lt;a href=&#34;https://manage.auth0.com/#/roles&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;roles&lt;/a&gt; section, create new roles named &lt;code&gt;&lt;span&gt;ROLE_ADMIN&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;ROLE_USER&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Create a new user account in the &lt;a href=&#34;https://manage.auth0.com/#/users&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;users&lt;/a&gt; section. Click on the &lt;strong&gt;Role&lt;/strong&gt; tab to assign the roles you just created to the new account. &lt;/p&gt;&lt;p&gt;&lt;em&gt;Make sure your new user&amp;#39;s email is verified before attempting to log in!&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Next, head to &lt;strong&gt;Auth Pipeline&lt;/strong&gt; &amp;gt; &lt;strong&gt;Rules&lt;/strong&gt; &amp;gt; &lt;strong&gt;Create&lt;/strong&gt;. Select the &lt;code&gt;Empty rule&lt;/code&gt; template. Provide a meaningful name like &lt;code&gt;Group claims&lt;/code&gt; and replace the Script content with the following.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;span&gt;,&lt;/span&gt; context&lt;span&gt;,&lt;/span&gt; callback&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  user&lt;span&gt;.&lt;/span&gt;preferred_username &lt;span&gt;=&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;email&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; roles &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;authorization &lt;span&gt;||&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;roles&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;function&lt;/span&gt; &lt;span&gt;prepareCustomClaimKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;claim&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;https://www.jhipster.tech/&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;claim&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;const&lt;/span&gt; rolesClaim &lt;span&gt;=&lt;/span&gt; &lt;span&gt;prepareCustomClaimKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;roles&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;idToken&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    context&lt;span&gt;.&lt;/span&gt;idToken&lt;span&gt;[&lt;/span&gt;rolesClaim&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; roles&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    context&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;[&lt;/span&gt;rolesClaim&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; roles&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;callback&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; user&lt;span&gt;,&lt;/span&gt; context&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This code is adding the user&amp;#39;s roles to a custom claim (prefixed with &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;www&lt;span&gt;.&lt;/span&gt;jhipster&lt;span&gt;.&lt;/span&gt;tech&lt;span&gt;/&lt;/span&gt;roles&lt;/code&gt;). This claim is mapped to Spring Security authorities in &lt;code&gt;SecurityUtils&lt;span&gt;.&lt;/span&gt;java&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;List&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;GrantedAuthority&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;extractAuthorityFromClaims&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Map&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; claims&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;mapRolesToGrantedAuthorities&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getRolesFromClaims&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;claims&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@SuppressWarnings&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;unchecked&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;Collection&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;getRolesFromClaims&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Map&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; claims&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;Collection&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; claims&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getOrDefault&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;groups&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        claims&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getOrDefault&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; claims&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getOrDefault&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;CLAIMS_NAMESPACE &lt;span&gt;+&lt;/span&gt; &lt;span&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ArrayList&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;List&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;GrantedAuthority&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;mapRolesToGrantedAuthorities&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Collection&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; roles&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; roles&lt;span&gt;.&lt;/span&gt;&lt;span&gt;stream&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;role &lt;span&gt;-&amp;gt;&lt;/span&gt; role&lt;span&gt;.&lt;/span&gt;&lt;span&gt;startsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;ROLE_&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;SimpleGrantedAuthority&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;collect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Collectors&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toList&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;SecurityConfiguration&lt;span&gt;.&lt;/span&gt;java&lt;/code&gt; class has a bean that calls this method to configure a user&amp;#39;s roles from their OIDC data.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Bean&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;GrantedAuthoritiesMapper&lt;/span&gt; &lt;span&gt;userAuthoritiesMapper&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; authorities &lt;span&gt;-&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;Set&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;GrantedAuthority&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; mappedAuthorities &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;HashSet&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        authorities&lt;span&gt;.&lt;/span&gt;&lt;span&gt;forEach&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;authority &lt;span&gt;-&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;// Check for OidcUserAuthority because Spring Security 5.2 returns&lt;/span&gt;&#xA;            &lt;span&gt;// each scope as a GrantedAuthority, which we don&amp;#39;t care about.&lt;/span&gt;&#xA;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;authority &lt;span&gt;instanceof&lt;/span&gt; &lt;span&gt;OidcUserAuthority&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;OidcUserAuthority&lt;/span&gt; oidcUserAuthority &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;OidcUserAuthority&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; authority&lt;span&gt;;&lt;/span&gt;&#xA;                mappedAuthorities&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;SecurityUtils&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;extractAuthorityFromClaims&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;oidcUserAuthority&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getUserInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getClaims&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; mappedAuthorities&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Click &lt;strong&gt;Save changes&lt;/strong&gt; to continue.&lt;/p&gt;&lt;p&gt;ℹ️ &lt;strong&gt;NOTE&lt;/strong&gt;: Want to have all these steps automated for you? Vote for &lt;a href=&#34;https://github.com/auth0/auth0-cli/issues/351&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this issue&lt;/a&gt; in the Auth0 CLI project.&lt;/p&gt;&lt;h3 id=&#34;Run-Your-JHipster-App-with-Auth0&#34;&gt;Run Your JHipster App with Auth0&lt;/h3&gt;&lt;p&gt;Stop your JHipster app using &lt;strong&gt;Ctrl+C&lt;/strong&gt;, set your Auth0 properties in &lt;code&gt;&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;env&lt;/code&gt;, and start your app again.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;source&lt;/span&gt; .auth0.env&#xA;./mvnw&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Voilà&lt;/em&gt; - your full-stack app is now using Auth0! Open your favorite browser to &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1Zma6iIU9n6P4CguG8CcQh/e7faa31be47593107329d0128d947b0a/04_jhipster-homepage.png&#34; alt=&#34;JHipster default homepage&#34;/&gt;&lt;/p&gt;&lt;p&gt;You should see your app&amp;#39;s homepage with a link to sign in. Click &lt;strong&gt;sign in&lt;/strong&gt;, and you&amp;#39;ll be redirected to Auth0 to log in.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/M4rpafdRgJwaqkvm7gaZl/578bd56bd6c85bbdc180aeb7537d3a63/02_auth0-login.png&#34; alt=&#34;Auth0 Login&#34;/&gt;&lt;/p&gt;&lt;p&gt;After entering your credentials, you&amp;#39;ll be redirected back to your app. &lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7CBL7VFB4PSkcazRLSIyEG/6da5d9f23d170ba3c9b1e5c492220af7/05_jhipster-logged-in.png&#34; alt=&#34;Authenticated&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Test-Your-Full-Stack-Java-App-with-Cypress&#34;&gt;Test Your Full Stack Java App with Cypress&lt;/h2&gt;&lt;p&gt;JHipster has Auth0 support built-in, so you can specify your credentials for Cypress tests and automate your UI testing!&lt;/p&gt;&lt;p&gt;To do this, open a new terminal window, specify the credentials for the Auth0 user you just created, and run &lt;code&gt;npm run e2e&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;CYPRESS_E2E_USERNAME&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;new-username&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;CYPRESS_E2E_PASSWORD&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;new-password&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;npm&lt;/span&gt; run e2e&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt; If you want to use a &lt;code&gt;&lt;span&gt;.&lt;/span&gt;env&lt;/code&gt; file for your environment variables, you can use &lt;a href=&#34;https://www.npmjs.com/package/cypress-dotenv&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;cypress-dotenv&lt;/a&gt;. You can also put these values in &lt;code&gt;cypress&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt;, but since this file will be in source control, it&amp;#39;s a bad practice to put your secrets in it.&lt;/p&gt;&lt;p&gt;Everything should pass in around a minute.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;       Spec                                              Tests  Passing  Failing  Pending  Skipped&#xA;  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐&#xA;  │ ✔  administration/administration.spec.      00:31        &lt;span&gt;5&lt;/span&gt;        &lt;span&gt;5&lt;/span&gt;        -        -        - │&#xA;  │    ts                                                                                          │&#xA;  └────────────────────────────────────────────────────────────────────────────────────────────────┘&#xA;    ✔  All specs passed&lt;span&gt;!&lt;/span&gt;                        00:31        &lt;span&gt;5&lt;/span&gt;        &lt;span&gt;5&lt;/span&gt;        -        -        -&#xA;&#xA;Execution time: &lt;span&gt;44&lt;/span&gt; s.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Shut down the process running your JHipster app - it&amp;#39;s time to create some data handling for your Flickr clone!&lt;/p&gt;&lt;h2 id=&#34;Create-Entities-to-allow-CRUD-on-Photos&#34;&gt;Create Entities to allow CRUD on Photos&lt;/h2&gt;&lt;p&gt;I&amp;#39;ve talked a lot about how to secure your application, but we haven&amp;#39;t done anything with photos! JHipster has a JDL (JHipster Domain Language) feature that allows you to model the data in your app and generate entities from it. You can use the &lt;a href=&#34;https://start.jhipster.tech/jdl-studio/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;JDL Studio&lt;/a&gt; to do this online and save it locally once you&amp;#39;ve finished.&lt;/p&gt;&lt;p&gt;My data model for this app has &lt;code&gt;Album&lt;/code&gt;, &lt;code&gt;Photo&lt;/code&gt;, and &lt;code&gt;Tag&lt;/code&gt; entities and sets up relationships between them. Below is a screenshot of what it looks like in JDL Studio.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/73z2OABdygvcVuMzVCzjIP/7d9a84eb719ecac66290b367ecaa3682/03_jdl-studio.png&#34; alt=&#34;JDL Studio&#34;/&gt;&lt;/p&gt;&lt;p&gt;Copy the JDL below and save it in a &lt;code&gt;flickr2&lt;span&gt;.&lt;/span&gt;jdl&lt;/code&gt; file in the root directory of your project.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;entity Album &lt;span&gt;{&lt;/span&gt;&#xA;  title String required&#xA;  description TextBlob&#xA;  created Instant&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;entity Photo &lt;span&gt;{&lt;/span&gt;&#xA;  title String required&#xA;  description TextBlob&#xA;  image ImageBlob required&#xA;  height Integer&#xA;  width Integer&#xA;  taken Instant&#xA;  uploaded Instant&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;entity Tag &lt;span&gt;{&lt;/span&gt;&#xA;  name String required &lt;span&gt;minlength&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;relationship ManyToOne &lt;span&gt;{&lt;/span&gt;&#xA;  Album&lt;span&gt;{&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;login&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt; to User&#xA;  Photo&lt;span&gt;{&lt;/span&gt;&lt;span&gt;album&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;title&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt; to Album&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;relationship ManyToMany &lt;span&gt;{&lt;/span&gt;&#xA;  Photo&lt;span&gt;{&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt; to Tag&lt;span&gt;{&lt;/span&gt;photo&lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;paginate Album &lt;span&gt;with&lt;/span&gt; pagination&#xA;paginate Photo&lt;span&gt;,&lt;/span&gt; Tag &lt;span&gt;with&lt;/span&gt; infinite&lt;span&gt;-&lt;/span&gt;scroll&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can generate entities and &lt;a href=&#34;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CRUD&lt;/a&gt; code (Java for Spring Boot; TypeScript and JSX for React) by using the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;jhipster jdl flickr2.jdl&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When prompted, type &lt;code&gt;a&lt;/code&gt; to allow overwriting of existing files.&lt;/p&gt;&lt;p&gt;This process will create Liquibase changelog files (to create your database tables), entities, repositories, Spring MVC controllers, and all the React code necessary to create, read, update, and delete your entities. It&amp;#39;ll even generate JUnit unit tests, Jest unit tests, and Cypress end-to-end tests!&lt;/p&gt;&lt;p&gt;After the process completes, you can restart your app, log in, and browse through the &lt;strong&gt;Entities&lt;/strong&gt; menu. Try adding some data to confirm everything works.&lt;/p&gt;&lt;p&gt;By now, you can see that JHipster is pretty powerful. It recognized that you had an image property of &lt;code&gt;ImageBlob&lt;/code&gt; type and created the logic necessary to upload and store images in your database! &lt;em&gt;Booyah!&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&#34;Add-Image-EXIF-Processing-in-Your-Spring-Boot-API&#34;&gt;Add Image EXIF Processing in Your Spring Boot API&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;Photo&lt;/code&gt; entity has a few properties that can be calculated by reading the uploaded photo&amp;#39;s &lt;a href=&#34;https://yourphotoadvisor.com/understanding-exif-data-what-it-is-and-what-to-do-with-it/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;EXIF&lt;/a&gt; (Exchangeable Image File Format) data. You might ask, how do you do that in Java?&lt;/p&gt;&lt;p&gt;Thankfully, Drew Noakes created a &lt;a href=&#34;https://github.com/drewnoakes/metadata-extractor&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;metadata-extractor&lt;/a&gt; library to do just that. Add a dependency on Drew&amp;#39;s library to your &lt;code&gt;pom&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;com.drewnoakes&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;metadata-extractor&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;2.16.0&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then modify the &lt;code&gt;PhotoResource&lt;span&gt;#createPhoto&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to set the metadata when an image is uploaded.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;drew&lt;span&gt;.&lt;/span&gt;imaging&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ImageMetadataReader&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;drew&lt;span&gt;.&lt;/span&gt;imaging&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ImageProcessingException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;drew&lt;span&gt;.&lt;/span&gt;metadata&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Metadata&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;drew&lt;span&gt;.&lt;/span&gt;metadata&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;MetadataException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;drew&lt;span&gt;.&lt;/span&gt;metadata&lt;span&gt;.&lt;/span&gt;exif&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ExifSubIFDDirectory&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;drew&lt;span&gt;.&lt;/span&gt;metadata&lt;span&gt;.&lt;/span&gt;jpeg&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;JpegDirectory&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;javax&lt;span&gt;.&lt;/span&gt;xml&lt;span&gt;.&lt;/span&gt;bind&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;DatatypeConverter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;io&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;BufferedInputStream&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;io&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ByteArrayInputStream&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;io&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;IOException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;io&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;InputStream&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;time&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Instant&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;util&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Date&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;PhotoResource&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Photo&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;createPhoto&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;@Valid&lt;/span&gt; &lt;span&gt;@RequestBody&lt;/span&gt; &lt;span&gt;Photo&lt;/span&gt; photo&lt;span&gt;)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;Exception&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        log&lt;span&gt;.&lt;/span&gt;&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;REST request to save Photo : {}&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; photo&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;photo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;BadRequestAlertException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;A new photo cannot already have an ID&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; ENTITY_NAME&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;idexists&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;try&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            photo &lt;span&gt;=&lt;/span&gt; &lt;span&gt;setMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;photo&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt; &lt;span&gt;catch&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;ImageProcessingException&lt;/span&gt; ipe&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            log&lt;span&gt;.&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;ipe&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;Photo&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; photoRepository&lt;span&gt;.&lt;/span&gt;&lt;span&gt;save&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;photo&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&#xA;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;created&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;URI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/photos/&amp;#34;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; result&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;headers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;HeaderUtil&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;createEntityCreationAlert&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;applicationName&lt;span&gt;,&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; ENTITY_NAME&lt;span&gt;,&lt;/span&gt; result&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;result&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Photo&lt;/span&gt; &lt;span&gt;setMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Photo&lt;/span&gt; photo&lt;span&gt;)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;ImageProcessingException&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;IOException&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;MetadataException&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;String&lt;/span&gt; str &lt;span&gt;=&lt;/span&gt; &lt;span&gt;DatatypeConverter&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;printBase64Binary&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;photo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getImage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; data2 &lt;span&gt;=&lt;/span&gt; &lt;span&gt;DatatypeConverter&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;parseBase64Binary&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;str&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;InputStream&lt;/span&gt; inputStream &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ByteArrayInputStream&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;data2&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;BufferedInputStream&lt;/span&gt; bis &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;BufferedInputStream&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;inputStream&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;Metadata&lt;/span&gt; metadata &lt;span&gt;=&lt;/span&gt; &lt;span&gt;ImageMetadataReader&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;readMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;bis&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;ExifSubIFDDirectory&lt;/span&gt; directory &lt;span&gt;=&lt;/span&gt; metadata&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getFirstDirectoryOfType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ExifSubIFDDirectory&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;directory &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;Date&lt;/span&gt; date &lt;span&gt;=&lt;/span&gt; directory&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getDateDigitized&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;date &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                photo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setTaken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;date&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toInstant&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;photo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getTaken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            log&lt;span&gt;.&lt;/span&gt;&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Photo EXIF date digitized not available, setting taken on date to now...&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            photo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setTaken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Instant&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;now&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        photo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setUploaded&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Instant&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;now&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;JpegDirectory&lt;/span&gt; jpgDirectory &lt;span&gt;=&lt;/span&gt; metadata&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getFirstDirectoryOfType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;JpegDirectory&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;jpgDirectory &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            photo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setHeight&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;jpgDirectory&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getImageHeight&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            photo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setWidth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;jpgDirectory&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getImageWidth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; photo&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since you&amp;#39;re extracting the information, you can remove the fields from the UI and tests so the user cannot set these values.&lt;/p&gt;&lt;p&gt;In &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;main&lt;span&gt;/&lt;/span&gt;webapp&lt;span&gt;/&lt;/span&gt;app&lt;span&gt;/&lt;/span&gt;entities&lt;span&gt;/&lt;/span&gt;photo&lt;span&gt;/&lt;/span&gt;photo&lt;span&gt;-&lt;/span&gt;update&lt;span&gt;.&lt;/span&gt;tsx&lt;/code&gt;, hide the metadata so users can&amp;#39;t edit it. Rather than displaying the &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;taken&lt;/code&gt;, and &lt;code&gt;uploaded&lt;/code&gt; values, hide them. You can do this by searching for &lt;code&gt;photo&lt;span&gt;-&lt;/span&gt;height&lt;/code&gt;, grabbing the elements (and its following three elements), and adding them to a &lt;code&gt;metadata&lt;/code&gt; constant just after &lt;code&gt;&lt;span&gt;defaultValues&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; lambda function.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;const defaultValues = () =&amp;gt;&#xA;  ...&#xA;&#xA;const metadata = (&#xA;  &amp;lt;div&amp;gt;&#xA;    &amp;lt;ValidatedField label={translate(&amp;#39;flickr2App.photo.height&amp;#39;)} id=&amp;#34;photo-height&amp;#34; name=&amp;#34;height&amp;#34; data-cy=&amp;#34;height&amp;#34; type=&amp;#34;text&amp;#34; /&amp;gt;&#xA;    &amp;lt;ValidatedField label={translate(&amp;#39;flickr2App.photo.width&amp;#39;)} id=&amp;#34;photo-width&amp;#34; name=&amp;#34;width&amp;#34; data-cy=&amp;#34;width&amp;#34; type=&amp;#34;text&amp;#34; /&amp;gt;&#xA;    &amp;lt;ValidatedField&#xA;      label={translate(&amp;#39;flickr2App.photo.taken&amp;#39;)}&#xA;      id=&amp;#34;photo-taken&amp;#34;&#xA;      name=&amp;#34;taken&amp;#34;&#xA;      data-cy=&amp;#34;taken&amp;#34;&#xA;      type=&amp;#34;datetime-local&amp;#34;&#xA;      placeholder=&amp;#34;YYYY-MM-DD HH:mm&amp;#34;&#xA;    /&amp;gt;&#xA;    &amp;lt;ValidatedField&#xA;      label={translate(&amp;#39;flickr2App.photo.uploaded&amp;#39;)}&#xA;      id=&amp;#34;photo-uploaded&amp;#34;&#xA;      name=&amp;#34;uploaded&amp;#34;&#xA;      data-cy=&amp;#34;uploaded&amp;#34;&#xA;      type=&amp;#34;datetime-local&amp;#34;&#xA;      placeholder=&amp;#34;YYYY-MM-DD HH:mm&amp;#34;&#xA;    /&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;);&#xA;const metadataRows = isNew ? &amp;#39;&amp;#39; : metadata;&#xA;&#xA;return ( ... );&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, in the &lt;code&gt;&lt;span&gt;return&lt;/span&gt;&lt;/code&gt; block, remove the JSX between the &lt;code&gt;image&lt;/code&gt; property and &lt;code&gt;album&lt;/code&gt; property and replace it with &lt;code&gt;&lt;span&gt;{&lt;/span&gt;metadataRows&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;ValidatedBlobField&#xA;  label={translate(&amp;#39;flickr2App.photo.image&amp;#39;)}&#xA;  id=&amp;#34;photo-image&amp;#34;&#xA;  name=&amp;#34;image&amp;#34;&#xA;  data-cy=&amp;#34;image&amp;#34;&#xA;  isImage&#xA;  accept=&amp;#34;image/*&amp;#34;&#xA;  validate={{&#xA;    required: { value: true, message: translate(&amp;#39;entity.validation.required&amp;#39;) },&#xA;  }}&#xA;/&amp;gt;&#xA;{metadataRows}&#xA;&amp;lt;ValidatedField id=&amp;#34;photo-album&amp;#34; name=&amp;#34;albumId&amp;#34; data-cy=&amp;#34;album&amp;#34; label={translate(&amp;#39;flickr2App.photo.album&amp;#39;)} type=&amp;#34;select&amp;#34;&amp;gt;&#xA;  &amp;lt;option value=&amp;#34;&amp;#34; key=&amp;#34;0&amp;#34; /&amp;gt;&#xA;  {albums&#xA;    ? albums.map(otherEntity =&amp;gt; (&#xA;      &amp;lt;option value={otherEntity.id} key={otherEntity.id}&amp;gt;&#xA;        {otherEntity.title}&#xA;      &amp;lt;/option&amp;gt;&#xA;    ))&#xA;    : null}&#xA;&amp;lt;/ValidatedField&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;test&lt;span&gt;/&lt;/span&gt;javascript&lt;span&gt;/&lt;/span&gt;cypress&lt;span&gt;/&lt;/span&gt;integration&lt;span&gt;/&lt;/span&gt;entity&lt;span&gt;/&lt;/span&gt;photo&lt;span&gt;.&lt;/span&gt;spec&lt;span&gt;.&lt;/span&gt;ts&lt;/code&gt;, remove the code that sets the data in these fields:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cy&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;[data-cy=&amp;#34;height&amp;#34;]&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;99459&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;should&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;have.value&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;99459&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;cy&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;[data-cy=&amp;#34;width&amp;#34;]&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;61514&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;should&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;have.value&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;61514&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;cy&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;[data-cy=&amp;#34;taken&amp;#34;]&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;2021-10-11T16:46&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;should&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;have.value&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;2021-10-11T16:46&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;cy&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;[data-cy=&amp;#34;uploaded&amp;#34;]&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;2021-10-11T15:23&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;should&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;have.value&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;2021-10-11T15:23&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Stop your Maven process, run &lt;code&gt;source &lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;env&lt;/code&gt;, then &lt;code&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;mvwn&lt;/code&gt; again. Open a new terminal window, set your Auth0 credentials, and run &lt;code&gt;npm run e2e&lt;/code&gt; to make sure everything still works. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;CYPRESS_E2E_USERNAME&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;auth0-username&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;CYPRESS_E2E_PASSWORD&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;auth0-password&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;npm&lt;/span&gt; run e2e&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ℹ️ &lt;strong&gt;NOTE&lt;/strong&gt;: If you experience authentication errors in your Cypress tests, it&amp;#39;s likely because you&amp;#39;ve violated Auth0&amp;#39;s &lt;a href=&#34;https://auth0.com/docs/support/policies/rate-limit-policy&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Rate Limit Policy&lt;/a&gt;. As a workaround, I recommend you use Keycloak for Cypress tests. You can do this by opening a new terminal window and starting your app there using &lt;code&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;mvnw&lt;/code&gt;. Then, open a second terminal window and run &lt;code&gt;npm run e2e&lt;/code&gt;.  &lt;/p&gt;&lt;p&gt;If you upload an image you took with your smartphone, the height, width, and taken values should all be populated. If they&amp;#39;re not, chances are your image doesn&amp;#39;t have the data in it.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Need some sample photos with EXIF data? You can download pictures of my 1966 VW Bus from &lt;a href=&#34;https://www.flickr.com/photos/mraible/albums/72157689027458320&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;an album on Flickr&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Add-a-React-Photo-Gallery&#34;&gt;Add a React Photo Gallery&lt;/h2&gt;&lt;p&gt;You&amp;#39;ve added metadata extraction to your backend, but your photos still display in a list rather than in a grid (like Flickr). To fix that, you can use the &lt;a href=&#34;https://github.com/neptunian/react-photo-gallery&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;React Photo Gallery&lt;/a&gt; component. Install it using npm:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;npm&lt;/span&gt; i react-photo-gallery@8&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;main&lt;span&gt;/&lt;/span&gt;webapp&lt;span&gt;/&lt;/span&gt;app&lt;span&gt;/&lt;/span&gt;entities&lt;span&gt;/&lt;/span&gt;photo&lt;span&gt;/&lt;/span&gt;photo&lt;span&gt;.&lt;/span&gt;tsx&lt;/code&gt;, add an import for &lt;code&gt;Gallery&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; Gallery &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#39;react-photo-gallery&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then add the following just after &lt;code&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; match &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; props&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;. This adds the photos to a set with source, height, and width information.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; photoSet &lt;span&gt;=&lt;/span&gt; photoList&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;photo &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  src&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;data:&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;photo&lt;span&gt;.&lt;/span&gt;imageContentType&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;base64,&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;photo&lt;span&gt;.&lt;/span&gt;image&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  width&lt;span&gt;:&lt;/span&gt; photo&lt;span&gt;.&lt;/span&gt;height &lt;span&gt;&amp;gt;&lt;/span&gt; photo&lt;span&gt;.&lt;/span&gt;width &lt;span&gt;?&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; photo&lt;span&gt;.&lt;/span&gt;height &lt;span&gt;===&lt;/span&gt; photo&lt;span&gt;.&lt;/span&gt;width &lt;span&gt;?&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  height&lt;span&gt;:&lt;/span&gt; photo&lt;span&gt;.&lt;/span&gt;height &lt;span&gt;&amp;gt;&lt;/span&gt; photo&lt;span&gt;.&lt;/span&gt;width &lt;span&gt;?&lt;/span&gt; &lt;span&gt;4&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; photo&lt;span&gt;.&lt;/span&gt;height &lt;span&gt;===&lt;/span&gt; photo&lt;span&gt;.&lt;/span&gt;width &lt;span&gt;?&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, add a &lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Gallery&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; component right after the closing &lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;h2&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return (&#xA;  &amp;lt;div&amp;gt;&#xA;    &amp;lt;h2 id=&amp;#34;photo-heading&amp;#34; data-cy=&amp;#34;PhotoHeading&amp;#34;&amp;gt;&#xA;      ...&#xA;    &amp;lt;/h2&amp;gt;&#xA;    &amp;lt;Gallery photos={photoSet} /&amp;gt;&#xA;    ...&#xA;);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Save all your changes and restart your app.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;source&lt;/span&gt; .auth0.env&#xA;./mvnw&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Log in and navigate to &lt;strong&gt;Entities&lt;/strong&gt; &amp;gt; &lt;strong&gt;Photo&lt;/strong&gt; in the top nav bar. You will see a plethora of photos loaded by &lt;a href=&#34;https://www.liquibase.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Liquibase&lt;/a&gt; and &lt;a href=&#34;https://marak.github.io/faker.js/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;faker.js&lt;/a&gt;. To make a clean screenshot without this data, I modified &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;main&lt;span&gt;/&lt;/span&gt;resources&lt;span&gt;/&lt;/span&gt;config&lt;span&gt;/&lt;/span&gt;application&lt;span&gt;-&lt;/span&gt;dev&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt; to remove the &amp;#34;faker&amp;#34; context for Liquibase.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;liquibase&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;# Append &amp;#39;, faker&amp;#39; to the line below if you want sample data to be loaded automatically&lt;/span&gt;&#xA;  &lt;span&gt;contexts&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; dev&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Stop your Spring Boot backend and run &lt;code&gt;rm &lt;span&gt;-&lt;/span&gt;r target&lt;span&gt;/&lt;/span&gt;h2db&lt;/code&gt; to clear out your database (or just delete the &lt;code&gt;target&lt;span&gt;/&lt;/span&gt;h2db&lt;/code&gt; directory). Restart your backend.&lt;/p&gt;&lt;p&gt;Now you should be able to upload photos and see the results in a nice grid at the top of the list.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6RIASq72N4JN9b3ya5UVra/c0530addbbf28020d1a42f6b18ea0bae/08_photo-gallery.jpg&#34; alt=&#34;Gallery with Photos&#34;/&gt;&lt;/p&gt;&lt;p&gt;You can also add a &amp;#34;lightbox&amp;#34; feature to the grid so you can click on photos and zoom in. The &lt;a href=&#34;https://neptunian.github.io/react-photo-gallery/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;React Photo Gallery docs&lt;/a&gt; shows how to do this. I&amp;#39;ve integrated it into the example for this post, but I won&amp;#39;t show the code here for the sake of brevity. You can see the &lt;a href=&#34;https://github.com/oktadev/auth0-full-stack-java-example/blob/main/src/main/webapp/app/entities/photo/photo.tsx&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;final &lt;code&gt;photo&lt;span&gt;.&lt;/span&gt;tsx&lt;/code&gt; with Lightbox added on GitHub&lt;/a&gt; or a &lt;a href=&#34;https://github.com/oktadev/auth0-full-stack-java-example/commit/76dcf711816cb2f3455ba4b46264bf48002487f7&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;diff of the necessary changes&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Make-Your-Full-Stack-Java-App-Into-a-PWA&#34;&gt;Make Your Full Stack Java App Into a PWA&lt;/h2&gt;&lt;p&gt;Progressive Web Apps, aka PWAs, are the best way for developers to make their webapps load faster and more performant. In a nutshell, PWAs are websites that use recent web standards to allow for installation on a user&amp;#39;s computer or device and deliver an app-like experience to those users. To make a web app into a PWA:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Your app must be served over HTTPS&lt;/li&gt;&lt;li&gt;Your app must register a service worker so it can cache requests and work offline&lt;/li&gt;&lt;li&gt;Your app must have a webapp manifest with installation information and icons&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For HTTPS, you can &lt;a href=&#34;https://letsencrypt.org/docs/certificates-for-localhost/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;set up a certificate for localhost&lt;/a&gt; or (even better), deploy it to production! Cloud providers like Heroku will provide you with HTTPS out-of-the-box, but they won&amp;#39;t &lt;em&gt;force&lt;/em&gt; HTTPS. To force HTTPS, open &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;main&lt;span&gt;/&lt;/span&gt;java&lt;span&gt;/&lt;/span&gt;com&lt;span&gt;/&lt;/span&gt;auth0&lt;span&gt;/&lt;/span&gt;flickr2&lt;span&gt;/&lt;/span&gt;config&lt;span&gt;/&lt;/span&gt;SecurityConfiguration&lt;span&gt;.&lt;/span&gt;java&lt;/code&gt; and add a rule to force a secure channel when an &lt;code&gt;&lt;span&gt;X&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;Forwarded&lt;span&gt;-&lt;/span&gt;Proto&lt;/code&gt; header is sent.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&#xA;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;configure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;HttpSecurity&lt;/span&gt; http&lt;span&gt;)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;Exception&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    http&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;and&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;frameOptions&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;deny&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;and&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;requiresChannel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;requestMatchers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;r &lt;span&gt;-&amp;gt;&lt;/span&gt; r&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getHeader&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;X-Forwarded-Proto&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;requiresSecure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;and&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;authorizeRequests&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;a href=&#34;https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;workbox-webpack-plugin&lt;/a&gt; is configured already for generating a service worker, but it only works when running your app with a production profile. This is nice because it means your data isn&amp;#39;t cached in the browser when you&amp;#39;re developing.&lt;/p&gt;&lt;p&gt;To register a service worker, open &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;main&lt;span&gt;/&lt;/span&gt;webapp&lt;span&gt;/&lt;/span&gt;index&lt;span&gt;.&lt;/span&gt;html&lt;/code&gt; and uncomment the following block of code.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;serviceWorker&amp;#39;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; navigator&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    window&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addEventListener&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      navigator&lt;span&gt;.&lt;/span&gt;serviceWorker&lt;span&gt;.&lt;/span&gt;&lt;span&gt;register&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/service-worker.js&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;Service Worker Registered&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The final feature — a webapp manifest — is included at &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;main&lt;span&gt;/&lt;/span&gt;webapp&lt;span&gt;/&lt;/span&gt;manifest&lt;span&gt;.&lt;/span&gt;webapp&lt;/code&gt;. It defines an app name, colors, and icons. You might want to adjust these to fit your app.&lt;/p&gt;&lt;h2 id=&#34;Deploy-Your-React---Spring-Boot-App-to-Heroku&#34;&gt;Deploy Your React + Spring Boot App to Heroku&lt;/h2&gt;&lt;p&gt;To deploy your app to Heroku, you&amp;#39;ll first need to install the &lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-cli&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Heroku CLI&lt;/a&gt;. You can confirm it&amp;#39;s installed by running &lt;code&gt;heroku &lt;span&gt;--&lt;/span&gt;version&lt;/code&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you don&amp;#39;t have a Heroku account, go to &lt;a href=&#34;https://www.heroku.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;heroku.com&lt;/a&gt; and sign up. Don&amp;#39;t worry, it&amp;#39;s free, and chances are you&amp;#39;ll love the experience.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Run &lt;code&gt;heroku login&lt;/code&gt; to log in to your account, then start the deployment process with JHipster:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;jhipster heroku&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will start the &lt;a href=&#34;https://www.jhipster.tech/heroku/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Heroku sub-generator&lt;/a&gt; that asks you a couple of questions about your app: what you want to name it and whether you want to deploy it to a US region or EU. Then it&amp;#39;ll prompt you to choose between building locally or with Git on Heroku&amp;#39;s servers. Choose Git, so you don&amp;#39;t have to upload a fat JAR. When prompted to use Okta for OIDC, select &lt;code&gt;No&lt;/code&gt;. Then, the deployment process will begin.&lt;/p&gt;&lt;p&gt;You&amp;#39;ll be prompted to overwrite &lt;code&gt;pom&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt;—type &lt;code&gt;a&lt;/code&gt; to allow overwriting all files.&lt;/p&gt;&lt;p&gt;If you have a stable and fast internet connection, your app should be live on the internet in around six minutes!&lt;/p&gt;&lt;pre&gt;&lt;code&gt;remote&lt;span&gt;:&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Compressing&lt;span&gt;...&lt;/span&gt;&#xA;remote&lt;span&gt;:&lt;/span&gt;        Done&lt;span&gt;:&lt;/span&gt; &lt;span&gt;120.9&lt;/span&gt;M&#xA;remote&lt;span&gt;:&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Launching&lt;span&gt;...&lt;/span&gt;&#xA;remote&lt;span&gt;:&lt;/span&gt;        Released v7&#xA;remote&lt;span&gt;:&lt;/span&gt;        https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;flickr&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2.&lt;/span&gt;herokuapp&lt;span&gt;.&lt;/span&gt;com&lt;span&gt;/&lt;/span&gt; deployed to Heroku&#xA;remote&lt;span&gt;:&lt;/span&gt;&#xA;remote&lt;span&gt;:&lt;/span&gt; Verifying deploy&lt;span&gt;...&lt;/span&gt; done&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;To https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;git&lt;span&gt;.&lt;/span&gt;heroku&lt;span&gt;.&lt;/span&gt;com&lt;span&gt;/&lt;/span&gt;flickr&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2.&lt;/span&gt;git&#xA; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;branch&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;      &lt;span&gt;HEAD&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; main&#xA;&#xA;Your app should now be live&lt;span&gt;.&lt;/span&gt; To view it&lt;span&gt;,&lt;/span&gt; run&#xA;    heroku open&#xA;And you can view the logs &lt;span&gt;with&lt;/span&gt; &lt;span&gt;this&lt;/span&gt; command&#xA;    heroku logs &lt;span&gt;--&lt;/span&gt;tail&#xA;After application modification&lt;span&gt;,&lt;/span&gt; redeploy it &lt;span&gt;with&lt;/span&gt;&#xA;    jhipster heroku&#xA;Congratulations&lt;span&gt;,&lt;/span&gt; JHipster execution&lt;span&gt;,&lt;/span&gt; is complete&lt;span&gt;!&lt;/span&gt;&#xA;Sponsored &lt;span&gt;with&lt;/span&gt; ❤️ by @oktadev&lt;span&gt;.&lt;/span&gt;&#xA;Execution time&lt;span&gt;:&lt;/span&gt; &lt;span&gt;6&lt;/span&gt; min&lt;span&gt;.&lt;/span&gt; &lt;span&gt;19&lt;/span&gt; s&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Configure-for-Auth0-and-Analyze-Your-PWA-Score-with-Lighthouse&#34;&gt;Configure for Auth0 and Analyze Your PWA Score with Lighthouse&lt;/h3&gt;&lt;p&gt;To configure your app to work with Auth0 on Heroku, run the following command to set your Auth0 variables on Heroku.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;heroku config:set &lt;span&gt;\&lt;/span&gt;&#xA;  &lt;span&gt;SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;https://&amp;lt;your-auth0-domain&amp;gt;/&amp;#34;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;  &lt;span&gt;SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;lt;your-client-id&amp;gt;&amp;#34;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;  &lt;span&gt;SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;lt;your-client-secret&amp;gt;&amp;#34;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;  &lt;span&gt;JHIPSTER_SECURITY_OAUTH2_AUDIENCE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;https://&amp;lt;your-auth0-domain&amp;gt;/api/v2/&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, log in to your Auth0 account, navigate to your app, and add your Heroku URLs as valid redirect URIs:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Allowed Callback URLs: &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;flickr&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2.&lt;/span&gt;herokuapp&lt;span&gt;.&lt;/span&gt;com&lt;span&gt;/&lt;/span&gt;login&lt;span&gt;/&lt;/span&gt;oauth2&lt;span&gt;/&lt;/span&gt;code&lt;span&gt;/&lt;/span&gt;oidc&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Allowed Logout URLs: &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;flickr&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2.&lt;/span&gt;herokuapp&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After Heroku restarts your app, open it with &lt;code&gt;heroku open&lt;/code&gt; and log in.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3MDBfwDhZiuKW8uzrlm291/2c574c89ca11c7b853bf01d850f06ee9/09_app-on-heroku.png&#34; alt=&#34;Running on Heroku!&#34;/&gt;&lt;/p&gt;&lt;p&gt;Then, test it with &lt;a href=&#34;https://developers.google.com/web/tools/lighthouse/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Lighthouse&lt;/a&gt; (using the Lighthouse tab in Chrome developer tools). Looks pretty good, eh?! 💯&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2udHZaYwD4vfVtTf9SrpzB/c6888183a1364142f5edca732a0ad02c/06_lighthouse-score.png&#34; alt=&#34;Lighthouse Score 💯&#34;/&gt;&lt;/p&gt;&lt;p&gt;It&amp;#39;s pretty darn secure too, at least according to &lt;a href=&#34;https://securityheaders.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;securityheaders.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/Y1O0MLjbMSojaSH1UOnuN/48d36a1abdb9007c0dfa2a45bd61057e/09_security-headers.png&#34; alt=&#34;Security Headers on Heroku&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Learn-More-About-Full-Stack-Java-Development&#34;&gt;Learn More About Full Stack Java Development&lt;/h2&gt;&lt;p&gt;This tutorial shows you how to streamline full-stack Java development with JHipster. You developed a working application with a React frontend and a Spring Boot backend. You can find the app created in this tutorial on GitHub, in the &lt;a href=&#34;https://github.com/oktadev/auth0-full-stack-java-example&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;auth0-full-stack-java-example&lt;/a&gt; repository.&lt;/p&gt;&lt;p&gt;You might also enjoy these related blog posts:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://auth0.com/blog/2018/12/11/learning-java-first-language&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Learning Java as a First Language&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://auth0.com/blog/2021/01/20/reactive-java-microservices&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Reactive Java Microservices with Spring Boot and JHipster&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://auth0.com/blog/build-and-secure-an-api-with-spring-boot/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Build and Secure an API with Spring Boot and Kotlin&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://auth0.com/blog/complete-guide-to-react-user-authentication/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;The Complete Guide to React User Authentication with Auth0&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To see when we publish more developer topics on Auth0 and the Okta developer blog, follow &lt;a href=&#34;https://twitter.com/auth0&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/oktadev&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OktaDev&lt;/a&gt; on Twitter.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/full-stack-java-with-react-spring-boot-and-jhipster/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">This tutorial shows you how to create a slick-looking, full-stack, secure application using React, Spring Boot, and JHipster.</summary>
  </entry>
  <entry>
    <title>Okta and Okta (Auth0) Both Named as Leaders in 2021 Gartner® Magic Quadrant™ for Access Management</title>
    <updated>2021-11-03T16:37:00Z</updated>
    <id>tag:auth0.com,2021-11-03:/blog/okta-and-auth0-named-leaders-in-2021-gartner-magic-quadrant-for-access-management/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;SAN FRANCISCO – Nov. 3, 2021 –&lt;/strong&gt; &lt;a href=&#34;https://www.okta.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Okta, Inc.&lt;/a&gt; (NASDAQ:OKTA) the leading independent identity provider, today announced that it has been recognized as a Leader in the 2021 Gartner Magic Quadrant for Access Management, for both Okta and Auth0 (which Okta acquired in &lt;a href=&#34;https://www.okta.com/press-room/press-releases/okta-completes-acquisition-of-auth0/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;May 2021&lt;/a&gt;). This marks the fifth consecutive year in which Okta has been named Leader, and the first for Okta (Auth0). A complimentary version of the full report can be found &lt;a href=&#34;https://auth0.com/resources/whitepapers/gartner-magic-quadrant-access-management&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Gartner&amp;#39;s view of the market is focused on transformational technologies or approaches delivering on the future needs of end users. The access management (AM) market is defined by customers’ needs to establish, enforce, and manage run-time access controls for internal and external types of identities, interacting with cloud, modern standards-based web, and legacy web applications. The report evaluated 12 vendors on 15 criteria and placed both Okta and Okta (Auth0) in the Leaders Quadrant.&lt;/p&gt;&lt;p&gt;Okta and Auth0 together provide the breadth of modern Workforce and Customer Identity and Access Management (CIAM) solutions needed to seamlessly manage the digital complexities of security, agility, and user experience. The Okta Identity Cloud and the Auth0 Identity Platform deliver the identity solutions that are built for customer choice, connecting best-of-breed technology for seamless integration into any ecosystem; addressing compliance and regulatory requirements; and empowering users with secure and frictionless experiences. Any development style (no-code, low-code, to pro-code) and deployment choice (multi-tenant cloud or a dedicated tenant) is satisfied with the extensibility and breadth that Okta and Auth0 offer.&lt;/p&gt;&lt;p&gt;“This dual recognition from Gartner is an honor, and one that I believe is a testament to the individual leadership of our complementary platforms and the incredible value that we offer together,” said Todd McKinnon, CEO and co-founder, Okta. “Companies that proactively build an identity-first architecture and prioritize identity as the foundation to all digital experiences will have the competitive edge. The breadth of technology across both Okta’s and Auth0’s platforms provide industry-leading execution and innovation for driving secure and seamless digital experiences.”&lt;/p&gt;&lt;p&gt;“Becoming part of Okta was a transformational milestone for both companies, as well as the identity industry as a whole,” said Eugenio Pace, CEO and co-founder, Auth0. “We are just scratching the surface of the breadth of use cases we can solve together. We are grateful for the recognition of Okta (Auth0) as a Leader from Gartner. We will continue to innovate our modern identity platform to satisfy the many complex identity needs of our customers.”&lt;/p&gt;&lt;p&gt;Okta recently featured Auth0 and the future plans as a combined company at its annual Showcase event, which was held virtually on October 13. The rich content from the event, including commentary from both CEOs, customer interviews, and product demos can be seen &lt;a href=&#34;https://www.okta.com/resources/showcase21-content/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Additional detail on the overall Gartner Magic Quadrant evaluation can be found respectively on the &lt;a href=&#34;https://auth0.com/blog/okta-and-auth0-recognized-as-a-leader-in-the-2021-gartner-magic-quadrant-for-access-management&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 blog&lt;/a&gt; and the &lt;a href=&#34;https://www.okta.com/blog/2021/11/tracking-upward-and-innovating-for-our-customers-together/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Okta blog&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;*Gartner, Inc., Magic Quadrant for Access Management, Henrique Teixeira, Michael Kelley, Abhyuday Data, November 1, 2021.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Gartner Disclaimer:&lt;br/&gt;&lt;em&gt;Gartner does not endorse any vendor, product or service depicted in our research publications, and does not advise technology users to select only those vendors with the highest ratings or other designation. Gartner research publications consist of the opinions of Gartner&amp;#39;s research organization and should not be construed as statements of fact. Gartner disclaims all warranties, expressed or implied, with respect to this research, including any warranties of merchantability or fitness for a particular purpose.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Gartner and Magic Quadrant are registered trademarks of Gartner, Inc. and/or its affiliates in the U.S. and internationally and is used herein with permission. All rights reserved&lt;/em&gt;&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;The Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;h2 id=&#34;About-Okta&#34;&gt;About Okta&lt;/h2&gt;&lt;p&gt;Okta is the leading independent identity provider. The Okta Identity Cloud enables organizations to securely connect the right people to the right technologies at the right time. With more than 7,000 pre-built integrations to applications and infrastructure providers, Okta provides simple and secure access to people and organizations everywhere, giving them the confidence to reach their full potential. More than 13,050 organizations, including JetBlue, Nordstrom, Siemens, Slack, Takeda, Teach for America, and Twilio, trust Okta to help protect the identities of their workforces and customers.&lt;/p&gt;&lt;h3 id=&#34;Media-Contacts&#34;&gt;Media Contacts&lt;/h3&gt;&lt;p&gt;Communications Team&lt;br/&gt;Okta&lt;br/&gt;&lt;a href=&#34;mailto:press@okta.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;press@okta.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Global Communications&lt;br/&gt;Auth0&lt;br/&gt;&lt;a href=&#34;mailto:press@auth0.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;press@auth0.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 id=&#34;Investor-Contact-&#34;&gt;Investor Contact:&lt;/h3&gt;&lt;p&gt;Investor Relations&lt;br/&gt;&lt;a href=&#34;mailto:investor@okta.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;investor@okta.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/okta-and-auth0-named-leaders-in-2021-gartner-magic-quadrant-for-access-management/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Okta positioned highest in Ability to Execute</summary>
  </entry>
  <entry>
    <title>Okta (Auth0) recognized as a Leader in the 2021 Gartner® Magic Quadrant™ Gartner Magic Quadrant for Access Management, Worldwide</title>
    <updated>2021-11-03T16:03:00Z</updated>
    <id>tag:auth0.com,2021-11-03:/blog/okta-and-auth0-recognized-as-a-leader-in-the-2021-gartner-magic-quadrant-for-access-management/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;We are proud to announce that Auth0, a product unit within Okta, has been recognized as a Leader in the 2021 Gartner Magic Quadrant for Access Management, Worldwide. Gartner defines the Access Management market as: &amp;#34;&lt;em&gt;The access management (AM) market is defined by customers’ needs to establish, enforce, and manage run-time access controls for internal and external types of identities, as well as machine identities, interacting with cloud, modern standards-based web and legacy web applications&lt;/em&gt;&amp;#34; Auth0 focuses on SaaS-delivered developer-centric and Customer Identity and Access Management (CIAM) use cases.&lt;/p&gt;&lt;p&gt;For more information, please download the full 2021 Gartner Magic Quadrant for Access Management &lt;a href=&#34;https://auth0.com/resources/whitepapers/gartner-magic-quadrant-access-management&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;report&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2R3F2vxbxOSS9HtrO3Odcf/f8351826feee0286580150623d6d53b4/Figure1_2.jpg&#34; alt=&#34;Access Management&#34;/&gt;&lt;/p&gt;&lt;p&gt;The Magic Quadrant recognized Okta (Auth0) as a Leader based on our Ability to Execute and Completeness of Vision.  &lt;/p&gt;&lt;p&gt;Auth0 believes that CIAM should do more to balance the three forces of security, privacy and convenience — not just keeping the bad actors out, but also driving customer loyalty and conversion and revenue to create a great experience for our customers, partners, and their end-users.&lt;/p&gt;&lt;p&gt;We believe vendors&amp;#39; experience in the space is a key consideration for Gartner in their Magic Quadrant Evaluations. As stated by one of our customers in their &lt;a href=&#34;https://www.gartner.com/reviews/market/access-management/vendor/auth0/product/auth0-platform/review/view/1363099&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;review&lt;/a&gt; of Auth0, included in the &lt;a href=&#34;https://auth0.com/resources/ebooks/gartner-peer-insights-ciam&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;2021 Gartner Peer Insights Voice of the Customer Access Management Report&lt;/a&gt;, Auth0 comes with great features out-of-the-box. We went live easily with Auth0 as our Identity Provider. The platform/vendor does not just support us in a technical angle, but also understanding our user journey and sharing their experience (with other clients) and what approaches to take to minimize risk and even enhance user experience during the migration. — VP, Core Product Development, Retail industry&lt;/p&gt;&lt;h2 id=&#34;Auth0---Okta-Both-Recognized-as-Leaders&#34;&gt;Auth0 / Okta Both Recognized as Leaders&lt;/h2&gt;&lt;p&gt;Because &lt;a href=&#34;https://auth0.com/blog/okta-acquisition-announcement/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Okta closed the acquisition of Auth0 in May 2021&lt;/a&gt;, we believe we are both represented as vendors in the 2021 Magic Quadrant for Access Management. Our capabilities and visions were evaluated separately, but to great success — both Okta and Auth0 were recognized as Leaders.  &lt;/p&gt;&lt;p&gt;As we move forward we will combine Okta’s proven ability to execute and leadership in Workforce and CIAM with Auth0’s role as the innovator of a modern CIAM and developer experience. Together, Okta and Auth0 are the future of identity, working to solve every identity use case for customers.&lt;/p&gt;&lt;h2 id=&#34;Next-Steps-with-Okta&#34;&gt;Next Steps with Okta&lt;/h2&gt;&lt;p&gt;Bringing together two strong market leaders is a challenge — but we both see the positive impact this will bring for our customers and for the identity market. We know we have a lot of work ahead of us and will rely on customer feedback. We’re grateful for your trust as we continue to innovate with Okta.&lt;/p&gt;&lt;p&gt;&lt;em&gt;*Gartner, Inc., Magic Quadrant for Access Management, Henrique Teixeira, Michael Kelley, Abhyuday Data, November 1, 2021.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;This graphic was published by Gartner, Inc. as part of a larger research document and should be evaluated in the context of the entire document. The Gartner document is available upon request from Okta.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Gartner does not endorse any vendor, product or service depicted in its research publications, and does not advise technology users to select only those vendors with the highest ratings or other designation. Gartner research publications consist of the opinions of Gartner’s research organization and should not be construed as statements of fact. Gartner disclaims all warranties, express or implied, with respect to this research, including any warranties of merchantability or fitness for a particular purpose.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Gartner and Magic Quadrant are registered trademarks of Gartner, Inc. and/or its affiliates in the U.S. and internationally and is used herein with permission. All rights reserved&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Gartner Peer Insights reviews constitute the subjective opinions of individual end users based on their own experiences and do not represent the views of Gartner or its affiliates.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/okta-and-auth0-recognized-as-a-leader-in-the-2021-gartner-magic-quadrant-for-access-management/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Okta (Auth0) was placed into the Leader Quadrant for 2021, parent company Okta also named a Leader</summary>
  </entry>
  <entry>
    <title>Role-Based Authorization for ASP.NET Web APIs</title>
    <updated>2021-11-02T16:20:00Z</updated>
    <id>tag:auth0.com,2021-11-02:/blog/role-based-authorization-for-aspnet-webapi/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Role-Based Access Control, also known as RBAC, is one of the most common strategies to restrict access to protected resources within an organization. It simplifies permission assignment by categorizing users in roles. However, many people making their first foray into RBAC have questions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;How can you reflect this user categorization on your application to check users&amp;#39; privileges?&lt;/li&gt;&lt;li&gt;How can you deal with roles in your code?&lt;/li&gt;&lt;li&gt;Is role control appropriate for Web APIs?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In this article, you will learn the best way to implement RBAC in your ASP.NET Core Web API by using Auth0&amp;#39;s capabilities.&lt;/p&gt;&lt;h2 id=&#34;What-is-RBAC-&#34;&gt;What is RBAC?&lt;/h2&gt;&lt;p&gt;Consider a payroll system in a company. Different people accessing this system have different rights to view and change data. Each employee can view their own data, while HR people can view all employees&amp;#39; data. Also, while an employee can just view their own data, HR people can change them. Roles may also not be assigned just by department. For example, the HR department may have just a few people who should have the ability to add new employees to the payroll system, with the remainder only having permission to update employees.&lt;/p&gt;&lt;p&gt;Assigning specific permissions individually to each employee can be challenging and lead to mistakes. To expand on the payroll system example, consider that we have at least 4 types of permissions. Each of these must be assigned with perfect accuracy to each employee in your company.  With just a handful of employees and a few HR events a month, this would quickly spiral into a time-consuming and error-prone activity. This doesn&amp;#39;t even consider needing to reassign permissions for a large group of people due to a security policy change.&lt;/p&gt;&lt;p&gt;Role-Based Access Control helps with the permission assignment by introducing the concept of role. A role is a collection of permissions. Basically, you build a predefined set of permissions, give it a name, such as &lt;em&gt;Employee&lt;/em&gt;, &lt;em&gt;HR Assistant&lt;/em&gt;, &lt;em&gt;HR Manager&lt;/em&gt;, and assign that role to a user. If you need to add or remove a permission from all the users who have a specific role, you just need to add or remove that permission from the role they are assigned. That&amp;#39;s a great improvement!&lt;/p&gt;&lt;h2 id=&#34;Setting-up-the-Sample-Application&#34;&gt;Setting up the Sample Application&lt;/h2&gt;&lt;p&gt;In order to best show how to use roles in an ASP.NET Web API application integrated with Auth0, you will build on a sample application. I&amp;#39;ve provided a starting point that you can download by running the following command in a terminal window:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;git&lt;/span&gt; clone --branch starter --single-branch https://github.com/auth0-blog/glossary-rbac-web-api-aspnet.git&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;Make sure you have &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/current&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the latest .NET SDK&lt;/a&gt; already installed on your machine to run the sample ASP.NET application.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The Web API implements a CRUD interface for a glossary of terms. It has some basic endpoints that allow you to create a definition, read a list of term definitions or a single one, and update or delete them. To learn more about the details of &lt;a href=&#34;https://auth0.com/blog/aspnet-web-api-authorization/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;building and securing this application, check out this blog post&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Once you download the application on your machine, register it with Auth0 in order to enable support for authorization. If you don&amp;#39;t yet have an Auth0 account, you can &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free one&lt;/a&gt;. Follow the &lt;a href=&#34;https://auth0.com/blog/aspnet-web-api-authorization/#Registering-the-Web-API-with-Auth0&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;instructions in this article to register the application with Auth0&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;After you have completed the registration, move to the &lt;code&gt;glossary&lt;span&gt;-&lt;/span&gt;rbac&lt;span&gt;-&lt;/span&gt;web&lt;span&gt;-&lt;/span&gt;api&lt;span&gt;-&lt;/span&gt;aspnet&lt;/code&gt; folder and open the &lt;code&gt;appsettings&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; configuration file. Its content should look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// appsettings.json&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Logging&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;LogLevel&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Default&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Information&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Microsoft&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Warning&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Microsoft.Hosting.Lifetime&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Information&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;AllowedHosts&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Domain&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_AUTH0_DOMAIN&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Audience&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_UNIQUE_IDENTIFIER&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Replace the &lt;code&gt;&lt;span&gt;YOUR_AUTH0_DOMAIN&lt;/span&gt;&lt;/code&gt; placeholder with your Auth0 domain and the &lt;code&gt;&lt;span&gt;YOUR_UNIQUE_IDENTIFIER&lt;/span&gt;&lt;/code&gt; placeholder with the value you provided as a unique identifier of your API (&lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;glossary&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt;, if you kept the value suggested in &lt;a href=&#34;https://auth0.com/blog/aspnet-web-api-authorization/#Registering-the-Web-API-with-Auth0&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the mentioned article&lt;/a&gt;).&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note: Your Auth0 domain is a string in the form &lt;code&gt;&lt;span&gt;YOUR&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;TENANT&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt; where &lt;code&gt;&lt;span&gt;YOUR&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;TENANT&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;/code&gt; is the name you provided when you created your account with Auth0. For more information, &lt;a href=&#34;https://auth0.com/docs/getting-started/the-basics#domains&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check the documentation&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;To test that everything works as expected, launch the ASP.NET Web API application by typing &lt;code&gt;dotnet run&lt;/code&gt; in a terminal window. Now point your browser to &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;5001&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;swagger&lt;/code&gt;, and you should see the &lt;a href=&#34;https://swagger.io/tools/swagger-ui/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Swagger UI&lt;/a&gt; shown below to test the API interactively:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/uhfec4Zt8OyMK6svN3SK3/63c5e9f43f19e70d5720ca92c8a8fd3d/protected-swagger-ui-webapi.png&#34; alt=&#34;Swagger UI for the Glossary API&#34;/&gt;&lt;/p&gt;&lt;p&gt;To call the POST, PUT, and DELETE actions, &lt;a href=&#34;https://auth0.com/blog/aspnet-web-api-authorization/#Testing-the-Secure-Web-API&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;you need an access token, as explained in this section&lt;/a&gt;. The related endpoints already require an access token, but they don&amp;#39;t perform any check on the permissions granted to the users. This means that any user authorized to access the protected endpoints can do anything: create a new term, modify an existing term, and delete them.&lt;/p&gt;&lt;p&gt;In the following sections, you will implement RBAC to allow just specific users to perform specific actions.&lt;/p&gt;&lt;h2 id=&#34;Defining-Permissions-for-Your-API&#34;&gt;Defining Permissions for Your API&lt;/h2&gt;&lt;p&gt;As a first step to enable a more granular control on the access to your Web API, you have to define the permissions needed for your application. In the case of the glossary Web API application, define the permissions using the following strings:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;create&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt;. This permission allows you to add a new term to the glossary.&lt;/li&gt;&lt;li&gt;&lt;code&gt;update&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt;. With this permission, you can update an existing term.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt;. This permission allows you to delete a term from the glossary.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To associate these permissions with the API, go to the &lt;a href=&#34;https://manage.auth0.com/#/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;API section&lt;/a&gt; of your Auth0 Dashboard and select the API you defined for the glossary application. Then select the &lt;em&gt;Permissions&lt;/em&gt; tab. Here you can add the permissions with their descriptions as defined above. At the end of this process, that page will look like the following:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6eX5PaBGmIVpwgbQnhuc24/0730de2e62b8f0080edb8b54857c4aca/defining-permissions-auth0-dashboard.png.png&#34; alt=&#34;Defining permissions in the Auth0 Dashboard&#34;/&gt;&lt;/p&gt;&lt;p&gt;This configuration informs Auth0 that the glossary Web API supports these permissions.&lt;/p&gt;&lt;p&gt;Next, move to the &lt;em&gt;Settings&lt;/em&gt; tab and scroll down to the &lt;em&gt;RBAC Settings&lt;/em&gt; section. Here, click the &lt;em&gt;Enable RBAC&lt;/em&gt; and the &lt;em&gt;Add Permissions in the Access Token&lt;/em&gt; toggle buttons, as in the following picture, and then click the &lt;em&gt;Save&lt;/em&gt; button at the bottom:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/743TgQU6zPGJmPZSC5fLqp/b8e982ab6255144ba111044d34251f6d/enabling-rbac-and-permissions.png&#34; alt=&#34;Enabling RBAC&#34;/&gt;&lt;/p&gt;&lt;p&gt;These settings will enforce the evaluation of roles and permissions assignments during the user login.&lt;/p&gt;&lt;h2 id=&#34;Auth0-and-RBAC&#34;&gt;Auth0 and RBAC&lt;/h2&gt;&lt;p&gt;Auth0 lets you organize your RBAC easily through its &lt;a href=&#34;https://manage.auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Dashboard&lt;/a&gt;. If you have more complex or specific needs, you can also manage users and roles by using the &lt;a href=&#34;https://auth0.com/docs/api/management/v2&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Management API&lt;/a&gt;. In this article, you will use the Dashboard to manage users and roles.&lt;/p&gt;&lt;p&gt;Your goal is to create roles so that only specific users can perform specific actions. In practice, you have to create:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;an &lt;em&gt;Editor&lt;/em&gt; role, which includes the permission to create (&lt;code&gt;create&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt;) and update (&lt;code&gt;update&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt;) a glossary term,&lt;/li&gt;&lt;li&gt;an &lt;em&gt;Admin&lt;/em&gt; role, which includes the permission to delete (&lt;code&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt;) a glossary term in addition to being able to create and modify it.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Creating-roles&#34;&gt;Creating roles&lt;/h3&gt;&lt;p&gt;With this goal in mind, head to the Auth0 Dashboard and select &lt;a href=&#34;https://manage.auth0.com/#/roles&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Roles&lt;/a&gt; under the User Management section of the side menu. Click the &lt;em&gt;Create Role&lt;/em&gt; button in the upper right corner and fill the form with the following data:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;glossary&lt;span&gt;-&lt;/span&gt;admin&lt;/code&gt; as the name.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Glossary administrator&lt;/em&gt; as the description.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Now click the &lt;em&gt;Create&lt;/em&gt; button. In the screen you get, select the &lt;em&gt;Permissions&lt;/em&gt; tab and associate the required permissions to define this role by clicking the &lt;em&gt;Add Permissions&lt;/em&gt; button. You need to select the API you registered with Auth0 (&lt;em&gt;Glossary&lt;/em&gt;, if you kept the suggested name) and select all its permissions, as shown in the following image:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1tzvcX3VlK5DoB79yXXjSh/e39f4c885685eff93fa709a2826c3435/assign-permissions-to-admin-role.png&#34; alt=&#34;Assign permissions to the admin role&#34;/&gt;&lt;/p&gt;&lt;p&gt;Finally, click the &lt;em&gt;Add Permissions&lt;/em&gt; button. You have just created the &lt;code&gt;glossary&lt;span&gt;-&lt;/span&gt;admin&lt;/code&gt; role as a collection of &lt;code&gt;create&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt;, &lt;code&gt;update&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt;, and &lt;code&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt; permissions&lt;/p&gt;&lt;p&gt;Now, repeat the same process to create the &lt;em&gt;Editor&lt;/em&gt; role with the following data:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;glossary&lt;span&gt;-&lt;/span&gt;editor&lt;/code&gt; as the name.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Glossary editor&lt;/em&gt; as the description.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This time, you will add only the &lt;code&gt;create&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt; and &lt;code&gt;update&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt; permissions to this role, as shown below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/SNU8KS0SCf6EOEbx9eKPs/912fdb65b668cc90d36a9064b896c51e/assigning-permissions-to-editor-role.png&#34; alt=&#34;Assigning permissions to the editor role&#34;/&gt;&lt;/p&gt;&lt;p&gt;Remember to click the &lt;em&gt;Add Permissions&lt;/em&gt; button to finalize the creation of the &lt;code&gt;glossary&lt;span&gt;-&lt;/span&gt;editor&lt;/code&gt; role.&lt;/p&gt;&lt;h3 id=&#34;Creating-users-with-roles&#34;&gt;Creating users with roles&lt;/h3&gt;&lt;p&gt;Ultimately, roles are meaningless without users. Now, you&amp;#39;ll create two users and assign them the roles you&amp;#39;ve made to test the application.&lt;/p&gt;&lt;p&gt;The first user will have &lt;code&gt;john@example&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt; as their email and username and will be assigned the &lt;code&gt;glossary&lt;span&gt;-&lt;/span&gt;editor&lt;/code&gt; role.&lt;/p&gt;&lt;p&gt;The second user will have &lt;code&gt;jane@example&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt; as their email and username and will be assigned the &lt;code&gt;glossary&lt;span&gt;-&lt;/span&gt;admin&lt;/code&gt; role.&lt;/p&gt;&lt;p&gt;Open the &lt;a href=&#34;https://manage.auth0.com/#/users&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Users&lt;/a&gt; section in your Auth0 Dashboard and click the &lt;em&gt;Create User&lt;/em&gt; button. Then, fill the form with the required data for the first user:&lt;code&gt;john@example&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt; as the email, a password of your choice, and &lt;code&gt;Username&lt;span&gt;-&lt;/span&gt;Password&lt;span&gt;-&lt;/span&gt;Authentication&lt;/code&gt; as the connection. The following is an example of a filled form:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/MUw60srrqjaN82e9N2eKo/818ff48164cd4d4b47aea198dd3a992c/creating-user-auth0-dashboard.png&#34; alt=&#34;creating-user-auth0-dashboard&#34;/&gt;&lt;/p&gt;&lt;p&gt;Click the &lt;em&gt;Create&lt;/em&gt; button to create the user.&lt;/p&gt;&lt;p&gt;Now, on the user&amp;#39;s page, select the &lt;em&gt;Roles&lt;/em&gt; tab and click the &lt;em&gt;Assign Roles&lt;/em&gt; button. In the popup window, select the &lt;code&gt;glossary&lt;span&gt;-&lt;/span&gt;editor&lt;/code&gt; role from the drop-down list and click the &lt;em&gt;Assign&lt;/em&gt; button. The window should look as follows:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/60KIekM6LsTkdps1bn9cmH/9f11e710bd29983c50eb4eb816a029ad/assign-role-to-user.png&#34; alt=&#34;Assign editor role to the user&#34;/&gt;&lt;/p&gt;&lt;p&gt;Repeat the same steps described so far to create the user &lt;code&gt;jane@example&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt; and assign them the &lt;code&gt;glossary&lt;span&gt;-&lt;/span&gt;admin&lt;/code&gt; role.&lt;/p&gt;&lt;h2 id=&#34;Checking-Permissions-in-Your-API&#34;&gt;Checking Permissions in Your API&lt;/h2&gt;&lt;p&gt;At this point, you&amp;#39;ve configured your API and created users with their respective roles on Auth0. Now it&amp;#39;s time to enable your app to have more granular control over the HTTP requests it receives.&lt;/p&gt;&lt;p&gt;Recall that roles are collections of permissions. When you enabled RBAC for your API in the Auth0 Dashboard, you ensured that tokens issued by Auth0 for the API will include permissions within the access token. As a result, when clients use that same token for HTTP requests, the API can parse the token&amp;#39;s permissions.&lt;/p&gt;&lt;p&gt;To correctly authorize the incoming HTTP requests, your API needs to make sure the access token has the necessary permissions. You can accomplish this task by defining one or more authorization policies and applying them to the methods that implement your ASP.NET Web API.&lt;/p&gt;&lt;p&gt;An &lt;strong&gt;authorization policy&lt;/strong&gt; is a set of requirements that users or applications must meet in order to be allowed to perform an action on a resource. Let&amp;#39;s see how you can define and apply an authorization policy in practice.&lt;/p&gt;&lt;p&gt;To define an authorization policy for the glossary Web API, open the &lt;code&gt;Startup&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; file in the root folder of the project and append the following code to the body of the &lt;code&gt;&lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Startup.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;Glossary&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Startup&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt; services&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;      &#xA;      &lt;span&gt;//👇 new code&lt;/span&gt;&#xA;      services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt;&#xA;        options&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddPolicy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;CreateAccess&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; policy &lt;span&gt;=&amp;gt;&lt;/span&gt; &#xA;                          policy&lt;span&gt;.&lt;/span&gt;&lt;span&gt;RequireClaim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;permissions&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;create:term&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        options&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddPolicy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;UpdateAccess&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; policy &lt;span&gt;=&amp;gt;&lt;/span&gt; &#xA;                          policy&lt;span&gt;.&lt;/span&gt;&lt;span&gt;RequireClaim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;permissions&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;update:term&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        options&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddPolicy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;DeleteAccess&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; policy &lt;span&gt;=&amp;gt;&lt;/span&gt; &#xA;                          policy&lt;span&gt;.&lt;/span&gt;&lt;span&gt;RequireClaim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;permissions&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;delete:term&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;//👆 new code&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, you&amp;#39;ve invoked the &lt;code&gt;&lt;span&gt;AddAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to configure the ASP.NET authorization service. You&amp;#39;ve also defined three authorization policies via the &lt;code&gt;&lt;span&gt;AddPolicy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method of the &lt;code&gt;options&lt;/code&gt; parameter. Each policy has a name and a lambda expression. For example, the &lt;code&gt;CreateAccess&lt;/code&gt; authorization policy is defined by requiring the &lt;code&gt;permissions&lt;/code&gt; &lt;a href=&#34;https://auth0.com/docs/tokens/json-web-tokens/json-web-token-claims&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;claim&lt;/a&gt; in the access token whose value must be &lt;code&gt;create&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt;. Similarly, for the &lt;code&gt;UpdateAccess&lt;/code&gt; and the  &lt;code&gt;DeleteAccess&lt;/code&gt; policies.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Different approaches to creating authorization policies in ASP.NET exist. For example, you can use a &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/security/authorization/claims&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;claim-based authorization&lt;/a&gt; or a &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;policy-based authorization&lt;/a&gt; approach. You can even create your own approach by &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/security/authorization/customizingauthorizationmiddlewareresponse&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;customizing the built-in ASP.NET authorization middleware&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&#34;Applying-an-authorization-policy&#34;&gt;Applying an authorization policy&lt;/h3&gt;&lt;p&gt;Once you define and register your authorization policies, you can apply them in your Web API. Applying an authorization policy is just a matter of passing parameters to the &lt;code&gt;Authorize&lt;/code&gt; attribute. So, open the &lt;code&gt;GlossaryController&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; file under the &lt;code&gt;Controllers&lt;/code&gt; folder and apply the changes pointed out in the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Controllers/GlossaryController.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;Glossary&lt;span&gt;.&lt;/span&gt;Controllers&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;ApiController&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;  &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Route&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;api/[controller]&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;GlossaryController&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;ControllerBase&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;HttpPost&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Authorize&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;Policy &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;CreateAccess&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;    &lt;span&gt;//👈 changed code&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ActionResult&lt;/span&gt; &lt;span&gt;Post&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;GlossaryItem&lt;/span&gt; glossaryItem&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;HttpPut&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Authorize&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;Policy &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;UpdateAccess&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;    &lt;span&gt;//👈 changed code&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ActionResult&lt;/span&gt; &lt;span&gt;Put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;GlossaryItem&lt;/span&gt; glossaryItem&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;HttpDelete&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Route&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;{term}&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Authorize&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;Policy &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;DeleteAccess&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;    &lt;span&gt;//👈 changed code&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ActionResult&lt;/span&gt; &lt;span&gt;Delete&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; term&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This way, you are requesting that the ASP.NET authorization middleware evaluates a specific policy to authorize the execution of the related controller&amp;#39;s method.&lt;/p&gt;&lt;p&gt;Your Web API is ready to run and check permissions!&lt;/p&gt;&lt;h2 id=&#34;Testing-the-Web-API&#34;&gt;Testing the Web API&lt;/h2&gt;&lt;p&gt;To test your glossary Web API, you need a client that allows your users to authenticate with Auth0 and get an access token with the proper permissions based on their role. Fortunately, the Swagger UI of the sample Web API is built to be very much an actual client of your API. You just need to enable OAuth support so that the user can authenticate and get their access token.&lt;/p&gt;&lt;h3 id=&#34;Configuring-the-client&#34;&gt;Configuring the client&lt;/h3&gt;&lt;p&gt;To configure your Swagger UI, you need to register it with Auth0. Head to the &lt;a href=&#34;https://manage.auth0.com/#/applications&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Application section of your Auth0 Dashboard&lt;/a&gt; and click the &lt;em&gt;Create Application&lt;/em&gt; button in the upper right corner. In the window that appears, provide a meaningful name, e.g., &lt;em&gt;Glossary client&lt;/em&gt;, and select &lt;em&gt;Regular Web Applications&lt;/em&gt; as the application type. That window should look like the following:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3RmuR8F9nAIR7bk9xA0mkM/2a732e3f8ab67e14d149498a927f291a/register-glossary-client-with-auth0.png&#34; alt=&#34;Register the glossary client with Auth0&#34;/&gt;&lt;/p&gt;&lt;p&gt;Now, click the &lt;em&gt;Create&lt;/em&gt; button to confirm. After the client page is created, move to the &lt;em&gt;Settings&lt;/em&gt; tab and take note of the Client ID and the Client Secret values.&lt;/p&gt;&lt;p&gt;Now, back in your project, open the &lt;code&gt;appsettings&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; configuration file and apply the changes highlighted below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// appsettings.json&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Logging&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;LogLevel&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Default&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Information&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Microsoft&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Warning&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Microsoft.Hosting.Lifetime&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Information&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;AllowedHosts&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Domain&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_AUTH0_DOMAIN&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Audience&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_UNIQUE_IDENTIFIER&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;// 👇 new keys&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;ClientId&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_CLIENT_ID&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;ClientSecret&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_CLIENT_SECRET&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;// 👆 new keys&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;SwaggerUISecurityMode&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;oauth2&amp;#34;&lt;/span&gt;        &lt;span&gt;// 👈 new key&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You added the &lt;code&gt;ClientId&lt;/code&gt; and &lt;code&gt;ClientSecret&lt;/code&gt; keys within the &lt;code&gt;Auth0&lt;/code&gt; section. Replace the &lt;code&gt;&lt;span&gt;YOUR_CLIENT_ID&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;YOUR_CLIENT_SECRET&lt;/span&gt;&lt;/code&gt; placeholders with the corresponding values you just annotated from the Auth0 Dashboard. The &lt;code&gt;Domain&lt;/code&gt; and &lt;code&gt;Audience&lt;/code&gt; keys keep the values you already assigned at the beginning of this article.&lt;/p&gt;&lt;p&gt;Also, you added the &lt;code&gt;SwaggerUISecurityMode&lt;/code&gt; key with the &lt;code&gt;oauth2&lt;/code&gt; value. This key enables the Swagger UI to act as an OAuth client so that it asks Auth0 for an access token on behalf of a user. You will see how it works in a moment.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Keep in mind that the &lt;code&gt;SwaggerUISecurityMode&lt;/code&gt; key is a custom key supported by this sample project. It is only required for demo purposes in order to test your API with the Swagger UI. In a real-world scenario, your API will be called by a real client.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Now, launch the Web API by typing &lt;code&gt;dotnet run&lt;/code&gt; in a terminal window and point your browser to &lt;a href=&#34;https://localhost:5001/swagger&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://localhost:5001/swagger&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I suggest using your browser in incognito mode to switch between users easily.&#xA;In fact, an unresolved issue in Swagger UI prevents you from logging out from the authorization server. See &lt;a href=&#34;https://github.com/swagger-api/swagger-ui/issues/3368&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;these&lt;/a&gt; &lt;a href=&#34;https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/436&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;issues&lt;/a&gt; for more information.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&#34;Testing-access-with-the-Editor-role&#34;&gt;Testing access with the Editor role&lt;/h3&gt;&lt;p&gt;In the Swagger UI of your Web API, click the &lt;em&gt;Authorize&lt;/em&gt; button. You should see a window like the following:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7yvXburi6A2FwFtLED0OAr/3bbe5d0f2c6a3895a35b72349db107c5/swagger-ui-authorization-window.png&#34; alt=&#34;Swagger UI authorization window&#34;/&gt;&lt;/p&gt;&lt;p&gt;This window asks to authorize the Swagger UI client to obtain an access token on behalf of the user. By clicking the &lt;em&gt;Authorize&lt;/em&gt; button here, you will be redirected to the &lt;a href=&#34;https://auth0.com/docs/login/universal-login&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Universal Login page&lt;/a&gt;. On that page, authenticate as a user having the Editor role by providing the credentials of &lt;code&gt;john@example&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt;, as you &lt;a href=&#34;#Creating-users-with-roles&#34;&gt;created them before&lt;/a&gt;. After you authenticate, you will be redirected back to the following screen:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4osuAFMDIObnRv0yOdA4Zs/d31188f8c819d8bbc7969ea5da667648/swagger-ui-authorized-window.png&#34; alt=&#34;Swagger UI authorized window&#34;/&gt;&lt;/p&gt;&lt;p&gt;Your Swagger UI client has now received the access token for that user. Click the &lt;em&gt;Close&lt;/em&gt; button and try to add a new term to the glossary through the POST action. In the Swagger UI, click the &lt;em&gt;POST /api/Glossary&lt;/em&gt; row and then the &lt;em&gt;Try it out&lt;/em&gt; button. Now, add a new term definition as in the following example:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/198INMtj79uGHzSj0GFf6C/8c5cdc291681c150f4932ff2a9175151/create-new-glossary-term.png&#34; alt=&#34;Create a new glossary term&#34;/&gt;&lt;/p&gt;&lt;p&gt;By clicking the &lt;em&gt;Execute&lt;/em&gt; button, you should get a successful response similar to the following:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/GKma6edlyKq8Er3g7FzAE/840c64bd654a0f8460a54cd6598dc375/successful-response-to-creating-new-term.png&#34; alt=&#34;Successful response to creating a new term&#34;/&gt;&lt;/p&gt;&lt;p&gt;If you &lt;a href=&#34;https://auth0.com/docs/security/tokens/access-tokens/get-management-api-access-tokens-for-production#use-access-tokens&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;copy the access token&lt;/a&gt; from the &lt;code&gt;curl&lt;/code&gt; statement text box and decode it in &lt;a href=&#34;https://jwt.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;jwt.io&lt;/a&gt;, you should see a payload similar to the following:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3BWPIoM8PTjxXjmE13EpBp/d7d31e8a349915925d1935ff3c6f5567/editor-access-token-payload.png&#34; alt=&#34;Editor access token payload&#34;/&gt;&lt;/p&gt;&lt;p&gt;You can see the &lt;code&gt;permissions&lt;/code&gt; claim containing the &lt;code&gt;create&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt; and &lt;code&gt;update&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt; permissions. These permissions are assigned to the current user thanks to their Editor role. Also, the &lt;code&gt;create&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt; permission is the one required by the &lt;code&gt;CreateAccess&lt;/code&gt; policy that controls the access to the &lt;code&gt;&lt;span&gt;Post&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method in your API controller. So, everything works as expected.&lt;/p&gt;&lt;p&gt;If you try to modify a glossary term through the PUT action, you should get a successful response as well.&lt;/p&gt;&lt;h3 id=&#34;Testing-the-API-with-the-Administrator-Role&#34;&gt;Testing the API with the Administrator Role&lt;/h3&gt;&lt;p&gt;However, if you attempt to delete the newly created term, you should receive a &lt;code&gt;&lt;span&gt;403&lt;/span&gt; Forbidden&lt;/code&gt; status code. In fact, your access token doesn&amp;#39;t contain the &lt;code&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt; permission. Only users with the Admin role are allowed to delete terms.&lt;/p&gt;&lt;p&gt;So, clear the cookies in your browser (or close it and reopen it in incognito mode).&lt;/p&gt;&lt;p&gt;Click the &lt;em&gt;Authorize&lt;/em&gt; button again and this time authenticate as the &lt;code&gt;jane@example&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt; user. That user has the Admin role. Now, try to execute all the three protected actions: POST, PUT, and DELETE. You should be able to perform them successfully.&lt;/p&gt;&lt;h2 id=&#34;Roles-and-APIs&#34;&gt;Roles and APIs&lt;/h2&gt;&lt;p&gt;Applying RBAC to Web APIs shown above leverages the Auth0&amp;#39;s ability to extract permissions from user roles at login time and add them to the &lt;code&gt;permissions&lt;/code&gt; access token&amp;#39;s claim. As the API developer, this approach lets you focus just on permissions and leave the role management to Auth0.&lt;/p&gt;&lt;p&gt;As an ASP.NET developer, you may know that you could use the &lt;code&gt;Roles&lt;/code&gt; parameter with the &lt;code&gt;Authorize&lt;/code&gt; attribute, as shown in the following example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;HttpPost&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Authorize&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;Roles &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;glossary-editor, glossary-admin&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ActionResult&lt;/span&gt; &lt;span&gt;Post&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;GlossaryItem&lt;/span&gt; glossaryItem&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// ... existing code ...&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, you might ask yourself a couple of questions at this point:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Is it possible to include user roles in the access token issued by Auth0?&lt;/li&gt;&lt;li&gt;Why not check roles instead of permissions on the Web API side?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Let&amp;#39;s try to answer both questions.&lt;/p&gt;&lt;h3 id=&#34;Including-roles-in-the-access-token&#34;&gt;Including roles in the access token&lt;/h3&gt;&lt;p&gt;Auth0 allows you to add user roles in the access token issued at login time. However, this is not a built-in feature, i.e., something that you got without any explicit intervention. To enrich the access token with the user&amp;#39;s roles, you need to add an &lt;a href=&#34;https://auth0.com/docs/actions&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Action&lt;/a&gt; to the login flow. An Action is a JavaScript function that allows you to customize the standard behavior of different &lt;a href=&#34;https://auth0.com/docs/actions/triggers&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 flows&lt;/a&gt;. Check out &lt;a href=&#34;https://auth0.com/blog/introducing-auth0-actions/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this blog post to get an overview of Auth0 Actions&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Showing how to use Auth0 Actions to add user roles in the access token is out of the scope of this article. However, you can &lt;a href=&#34;https://auth0.com/docs/actions/triggers/post-login#add-user-roles-to-tokens&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;take a look at this Action example&lt;/a&gt; to get an idea of how it works.&lt;/p&gt;&lt;h3 id=&#34;Checking-permissions-or-roles-&#34;&gt;Checking permissions or roles?&lt;/h3&gt;&lt;p&gt;One of the reasons you may want to check roles instead of permissions on the Web API side could be that they are easy to read and understand quickly. They lead to a direct mapping between user roles and your API. They are easy to read and understand. Looking at the following code, you know at a glance who is allowed to do a given action:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;HttpDelete&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Route&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;{term}&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Authorize&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;Roles &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;glossary-admin&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ActionResult&lt;/span&gt; &lt;span&gt;Delete&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; term&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// ... existing code ...&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is immediately obvious that only the glossary administrator can delete a glossary term. Having the permission instead of the role requires you to think about who the users having the &lt;code&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt; permission may be. It implies you have an extra layer of mapping between roles and permissions in mind.&lt;/p&gt;&lt;p&gt;However, there are some drawbacks in checking roles on the Web API side in return for this benefit.&lt;/p&gt;&lt;p&gt;Imagine you implemented your glossary Web API with role checking instead of permission checking. After your Web API is published, you need a new role for your glossary application: the Assistant role. Say you name this role &lt;code&gt;glossary&lt;span&gt;-&lt;/span&gt;assistant&lt;/code&gt;. Users in this role can only update existing terms, and so they will only have the &lt;code&gt;update&lt;span&gt;:&lt;/span&gt;term&lt;/code&gt; permission.&lt;/p&gt;&lt;p&gt;To enable this role on your Web API, you now need to change its code in the controller. You need to add the &lt;code&gt;glossary&lt;span&gt;-&lt;/span&gt;assistant&lt;/code&gt; role to the list of the allowed roles of the &lt;code&gt;&lt;span&gt;Put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method. Not complicated... But now, you need to redeploy your API with the new code!&lt;/p&gt;&lt;p&gt;If you check permissions instead of roles, you don&amp;#39;t need any updates on the Web API side. The role management and the permission unpacking is an Auth0 responsibility.&lt;/p&gt;&lt;p&gt;Once again: roles are just collections of permissions. While, in general, permissions are quite static, roles are more dynamic. The need to group permissions for new roles or combine multiple roles for the same user makes permission checking more convenient and lower-maintenance.&lt;/p&gt;&lt;p&gt;Think of the simple glossary Web API. It relies on only three permissions. However, it can lead to the creation of seven roles (eight, if we also consider the empty role). This should make you think about the opportunity to deal with roles on the Web API side.&lt;/p&gt;&lt;p&gt;Finally, consider that &lt;a href=&#34;https://auth0.com/docs/authorization/rbac/rbac-users/assign-permissions-to-users&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 allows you to directly assign permissions to a user&lt;/a&gt;. In that case, if you only check roles, you miss any directly assigned permissions causing a security flaw in your Web API.&lt;/p&gt;&lt;h2 id=&#34;Summary&#34;&gt;Summary&lt;/h2&gt;&lt;p&gt;Throughout this article, you learned how to use Auth0 Role-Based Access Control in your ASP.NET Web API.&lt;/p&gt;&lt;p&gt;You started by defining and assigning roles to your users. Then, you registered a glossary Web API with Auth0 and enabled RBAC support. Next, you implemented an authorization policy in your Web API to check user permissions.&lt;/p&gt;&lt;p&gt;Finally, you learned why checking permissions on the API side is better than directly checking roles.&lt;/p&gt;&lt;p&gt;You can find the final version of the glossary Web API implemented throughout the article in &lt;a href=&#34;https://github.com/auth0-blog/glossary-rbac-web-api-aspnet&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/role-based-authorization-for-aspnet-webapi/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">What is the best way to apply Role-Based Access Control (RBAC) to your ASP.NET Web API? Let&#39;s find out together.</summary>
    <author>
      <name>Registering an authorization policy</name>
    </author>
  </entry>
  <entry>
    <title>Auth0 Wins Gold at WorkL Workplace Awards 2021</title>
    <updated>2021-11-02T13:24:00Z</updated>
    <id>tag:auth0.com,2021-11-02:/blog/auth0-wins-gold-at-workl-workplace-awards-2021/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;LONDON – 2 November 2021&lt;/strong&gt; – The &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Identity Platform&lt;/a&gt;, a product unit within &lt;a href=&#34;https://www.okta.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Okta, Inc.&lt;/a&gt; (NASDAQ: OKTA), today announced it has been named among Britain’s five best places to work in technology, and one of the top 20 “most engaged” employers in the &lt;a href=&#34;https://www.telegraph.co.uk/business/2021/10/26/winners-workl-workplace-awards-2021-revealed/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;WorkL Workplace Awards 2021&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Conducted in partnership with The Telegraph, the awards recognize UK employers across 26 industries that score highest on a staff satisfaction survey. The five companies with the highest scores in each category are awarded gold status for the most engaged workforce. Of the 20,000 companies that entered, a select few are also recognized as the most inclusive, best in well-being, and having the most engaged employees – including Auth0.&lt;/p&gt;&lt;p&gt;“I’m pleased to congratulate Auth0 on its gold medal. After such a difficult 18 months in business, I’m pleased that our awards are celebrating organizations that are leading the way, creating happy and engaged employees,” said Lord Mark Price, founder of WorkL, and former UK Trade Minister and ex-managing director of British supermarket brand, Waitrose &amp;amp; Partners.&lt;/p&gt;&lt;p&gt;Employer scores, called the “Workplace Happiness Score,” are calculated based on employee feedback about reward and recognition, information sharing, empowerment, well-being, and other elements of job satisfaction over the past year. The awards are the latest in a series of accolades recognizing Auth0’s remote working DNA and culture, including the &lt;a href=&#34;https://auth0.com/blog/auth0-named-one-of-the-10-best-mid-sized-companies-to-work-for-in-london/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;UK’s Best Companies to Work For List&lt;/a&gt; and &lt;a href=&#34;https://auth0.com/blog/auth0-awarded-highest-accreditation-by-best-companies-uk/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Best Companies Accreditation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;“We owe a tremendous debt of gratitude to our employees who responded to the survey, and all who continue to make Auth0 a great place to work,” said Steven Rees-Pullman, SVP International at Auth0. “From Auth0&amp;#39;s inception, our founders instilled values of transparency, collaboration, and experimentation into the business. Those values are exemplified by all of our employees and create this award-winning culture. Many congratulations to all!”&lt;/p&gt;&lt;p&gt;Auth0 is now part of Okta, the leading independent identity provider, with a vision to provide secure access to any technology. Learn more about what it’s like to work here, and apply to join our growing team on the &lt;a href=&#34;https://auth0.com/careers&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Careers Page&lt;/a&gt;.&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;The Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;h3 id=&#34;Media-Contacts&#34;&gt;Media Contacts&lt;/h3&gt;&lt;p&gt;Auth0 Global Communications &lt;br/&gt;&lt;a href=&#34;mailto:press@auth0.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;press@auth0.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/auth0-wins-gold-at-workl-workplace-awards-2021/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Auth0 recognized among Britain’s five best places to work in technology, and one of 20 “most engaged” employers</summary>
  </entry>
  <entry>
    <title>We Are Thankful for Our Team</title>
    <updated>2021-11-01T16:01:00Z</updated>
    <id>tag:auth0.com,2021-11-01:/blog/we-are-thankful-for-our-team/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section itemscope=&#34;&#34; itemtype=&#34;http://schema.org/BlogPosting&#34; itemprop=&#34;mainEntity&#34;&gt;&lt;header&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;Culture&lt;/span&gt;&lt;/p&gt;&lt;p itemprop=&#34;description&#34;&gt;Recognizing the efforts of the Okta and Auth0 teams during 2021&lt;/p&gt;&lt;/div&gt;&lt;p&gt;November 01, 2021&lt;/p&gt;&lt;meta itemprop=&#34;datePublished&#34; content=&#34;2021-11-01&#34;/&gt;&lt;meta itemprop=&#34;dateModified&#34; content=&#34;2021-11-01&#34;/&gt;&lt;/div&gt;&lt;/header&gt;&lt;header&gt;&lt;div&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2G5alVFWdMmLBVZZeHPkaq/dc4092634b2a6956e7f825ae149eddac/auth0-blue-logo&#34;/&gt;&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;Culture&lt;/span&gt;&lt;/p&gt;&lt;p itemprop=&#34;description&#34;&gt;Recognizing the efforts of the Okta and Auth0 teams during 2021&lt;/p&gt;&lt;p&gt;November 01, 2021&lt;/p&gt;&lt;meta itemprop=&#34;datePublished&#34; content=&#34;2021-11-01&#34;/&gt;&lt;meta itemprop=&#34;dateModified&#34; content=&#34;2021-11-01&#34;/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/header&gt;&lt;article&gt;&lt;main id=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;&lt;div&gt;&lt;p&gt;As 2021 starts to draw to a close, we all find ourselves reflecting on the year. We’ve all been through a lot — both inside and outside of work — and I know how hard our employees have worked this year to provide the best possible product, innovations, and service for our customers.&lt;/p&gt;&lt;p&gt;So to say thanks for all their efforts — and to ensure everyone has the chance to spend time with family, go on an adventure, or just kick back on the couch with ice cream — both Okta and Auth0 teams will have the week of US Thanksgiving and the week following Christmas as a company holiday.&lt;/p&gt;&lt;p&gt;While these weeks are designated holidays, business continuity and reliability are our first priority. All support, customer success, engineering, and communications teams will rotate weeks away to ensure there is no disruption for our customers. We’ve also implemented an extended period of code freeze during the holiday season, with an elevated approval process for exceptions to limit any risk of service disruption. For all of the details on our ongoing resiliency efforts, &lt;a href=&#34;https://auth0.com/blog/improving-our-platform-resiliency-and-upcoming-holiday-plans/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;please visit here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Too often in our industry, we overvalue work and undervalue rest. We don’t work so we can rest. We rest so we can work — and grow and change, which lets us continue to provide our customers the best possible experiences.&lt;/p&gt;&lt;p&gt;We are committed to bringing our very best to you all in the coming year.&lt;/p&gt;&lt;p&gt;Thank you,&lt;/p&gt;&lt;p&gt;Eugenio Pace&lt;/p&gt;&lt;/div&gt;&lt;/main&gt;&lt;/article&gt;&lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/we-are-thankful-for-our-team/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Recognizing the efforts of the Okta and Auth0 teams during 2021</summary>
  </entry>
  <entry>
    <title>Getting To Know Will Johnson, Developer Advocate @ Auth0</title>
    <updated>2021-10-28T15:08:00Z</updated>
    <id>tag:auth0.com,2021-10-28:/blog/will-johnson-developer-advocate-auth0/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Hi! My name is Will Johnson, and I&amp;#39;m going to tell you the story of how I ended up in the Developer Relations world.&#xA;One thing I&amp;#39;ve learned is that where you begin does not guarantee where you will end. It&amp;#39;s been an ever-changing path for me, but it&amp;#39;s never too late to take control and direct your path.&lt;/p&gt;&lt;h2 id=&#34;My-Interest-In-Computers-Is-Sparked&#34;&gt;My Interest In Computers Is Sparked&lt;/h2&gt;&lt;p&gt;I remember sitting in my 3rd-grade class: all the kids were quiet, but you could feel the excitement in the air. Something new was coming: our desks were lined around the walls of the room. At first, everyone faced the middle of the class. Then, the doors opened, everyone looked anxiously, waiting for what was to come through.&lt;/p&gt;&lt;p&gt;One by one, the computer lab team rolled in brand new colored iMacs! The class went wild! Before this, we had blocky computers with green and black UI&amp;#39;s. They were huge, slow, and boring. The iMacs were cool, colorful, and small. Something completely new!&lt;/p&gt;&lt;p&gt;That sparked my interest in computers. I always wanted to be on the computer and do things on it. I remember telling my teachers I want to tell computers what to do. I had no idea what that meant, and usually, they would direct me to learn the hardware part of computers. But I had no interest in that. The programs were what caught my attention.&lt;/p&gt;&lt;h2 id=&#34;Writing-My-First-Lines-of-Code&#34;&gt;Writing My First Lines of Code&lt;/h2&gt;&lt;p&gt;Growing up, we never had a computer at home. I would only use the ones at school during lab time. I got my own computer right around the time the social media site MySpace was getting popular. One of the cool features was using HTML and CSS (even JavaScript, which I later learned) to customize my page. I spent hours googling different layouts and animations I could add to my page. (Yes, I used the &lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;marquee&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; tag all over the place). Then I started doing my friends&amp;#39; pages. I enjoyed playing around with the code so much. I didn&amp;#39;t even know you could use HTML and CSS to make real websites; I thought only MySpace used them. I would just search &amp;#34;how to make moving text myspace&amp;#34; without realizing I was using HTML and CSS at that time.&lt;/p&gt;&lt;p&gt;After MySpace lost its popularity, I stopped customizing pages. At that time, I was unaware that I had a valuable skill that aligned with my interests. I started planning what I would do for work, so I looked into the local college programs. They were all IT; no computer programming, computer science, or anything that would let me &amp;#34;tell computers what to do.&amp;#34; Since I didn&amp;#39;t want to go into a bunch of debt for something I wasn&amp;#39;t sure was my thing, I put my tech dreams on hold.&lt;/p&gt;&lt;h2 id=&#34;Getting-Over-My-Fears&#34;&gt;Getting Over My Fears&lt;/h2&gt;&lt;p&gt;When working at my day jobs, I would still do random tech things on the side. Like taking broken cell phones and replacing the parts, so they looked like new. Once, I had a Windows smartphone that I modded to run Android. I think I even used Java for that, some instructions were quite tricky, but I enjoyed the process of learning and kept going. I would search Google or YouTube and try stuff, and because of that, I&amp;#39;ve broken and bricked plenty of phones, but I was always having fun.&lt;/p&gt;&lt;p&gt;Around this time, I started to hear more and more about making apps and coding. Every time computer programming came up, people said: &amp;#34;You have to be good at math or coding on a computer since you are young.&amp;#34; Neither of those was me, so it made me stop pursuing any further. People always made it seem like working with computers was really hard, and you had to be a super genius or something like that.&lt;/p&gt;&lt;p&gt;After being fed up with manual labor jobs, I decided to change careers and try different things. Then one day, I came across a forum post where everyone was buying online courses. In particular, I noticed that everyone was buying a specific course on web development. I spent $10 and purchased that course. I was skeptical if this was legit or not. Could I get a job just by learning online? I was willing to give it a shot. I mean, it was only $10.&lt;/p&gt;&lt;p&gt;As soon as I started learning, I began to recognize the syntax. &amp;#34;Yo! This is the stuff from MySpace that I learned a long time ago. I&amp;#39;ve already done this.&amp;#34;&lt;/p&gt;&lt;h2 id=&#34;Breaking-Into-Tech&#34;&gt;Breaking Into Tech&lt;/h2&gt;&lt;p&gt;Learning to code and breaking into tech involved reading lots of blogs, watching videos, and listening to podcasts. I was so thankful that developers took time out of their day to create content to help other developers. So I started doing the same: I wrote blog posts, recorded screencasts, volunteered to mentor for workshops, spoke at meetups, and hosted a podcast. I would also tweet what I was learning and help others on Twitter as well. Every time I helped another dev get unstuck, it felt really good.&lt;/p&gt;&lt;p&gt;All of this content and community work was very fulfilling. I was learning new things and helping people reach new levels in their careers.&#xA;At that time, I started to see the role of Developer Advocate pop up a lot. I didn&amp;#39;t quite understand it at first, but it aligned with me more as I learned more about it. I liked tinkering with code and showing others how to do the same. Then people started to tell me all the time, &amp;#34;You should get into Developer Relations&amp;#34; or &amp;#34;You&amp;#39;d be a great developer advocate.&amp;#34;&lt;/p&gt;&lt;p&gt;It took me some time and a lot of thinking, and then it clicked: I love the tech community! I&amp;#39;ve met a lot of incredible people, and I love helping them learn new things so they can crush their goals. It&amp;#39;s a great joy for me.&lt;/p&gt;&lt;p&gt;I like to be remembered as a person that tried his best to help people in any way I could. That&amp;#39;s why, in August 2021, I joined the Auth0 developer relations team. Their vision of empowering developers aligns with mine perfectly. That&amp;#39;s why I look forward to creating content that humanizes the technical jargon and helps developers with their daily work.&lt;/p&gt;&lt;p&gt;So, this is my story of how I ended up fulfilling my early dream. Even if you are not working on something that energizes you, it is never too late to pivot to what you are passionate about. Don&amp;#39;t get discouraged, and keep pursuing your dreams.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/will-johnson-developer-advocate-auth0/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Meet Will Johnson, part of the developer relations team at Auth0.</summary>
  </entry>
  <entry>
    <title>Wharton Interactive Selects Auth0 to Help Securely Democratize and Transform Education</title>
    <updated>2021-10-28T13:00:00Z</updated>
    <id>tag:auth0.com,2021-10-28:/blog/wharton-interactive-selects-auth0-to-help-securely-democratize-and-transform-education/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;BELLEVUE, Wash. – Oct. 28, 2021&lt;/strong&gt; – The &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Identity Platform&lt;/a&gt;, a product unit within Okta (NASDAQ: OKTA), today announced it has been selected as the identity and authentication provider for &lt;a href=&#34;https://interactive.wharton.upenn.edu/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Wharton Interactive&lt;/a&gt;, an interactive learning platform that draws on games, simulations, and research to make Ivy League business education more accessible to all. To enable a seamless, end-to-end experience for learners and educators, Auth0’s platform will provide a &lt;a href=&#34;https://auth0.com/blog/what-is-single-sign-on-a-non-developer-s-guide/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Single Sign-on&lt;/a&gt; (SSO) solution for learners and educators throughout their journey.&lt;/p&gt;&lt;p&gt;Wharton Interactive — founded by Sarah Toms, executive director, and Professor Ethan Mollick at the Wharton School, The University of Pennsylvania — has developed different modes of delivering education on its Alternate Reality Courseware (ARC) platform. ARCs knit together leading subject matter expertise and an immersive games-based experience where users gain mastery through practice and receive personal feedback about their performance every step of the way. By increasing inclusive access to business education, this unique higher ed initiative strives to better the socio-economic status of individuals and lift economies through job creation.&lt;/p&gt;&lt;p&gt;To aid in Wharton Interactive’s marketplace launch, the team wanted to create one, seamless user experience across the entire platform, from the user’s account creation and management to the interactive simulations and classes, and selected Auth0 to help. By implementing SSO, students and educators can enter their login credentials once and automatically gain access to multiple applications. Through the implementation of Auth0’s SSO solution, Wharton Interactive’s platform benefits from increased security and privacy while improving the end-to-end experience for users.&lt;/p&gt;&lt;p&gt;“Auth0 plays an integral role in making Wharton Interactive’s mission to transform education a reality by eliminating the hurdles associated with having to login to multiple systems along the customer journey,” said Sarah Toms, co-founder and Executive Director for Wharton Interactive. “We were searching for a top-notch identity provider with proven expertise in SSO, and are so pleased that we have partnered with Auth0. From vendor selection to launch, it took only a few months to build and deliver a comprehensive solution that was ready for market.”&lt;/p&gt;&lt;p&gt;“Wharton Interactive is democratizing higher education and transforming the eLearning space with its cutting-edge approaches, and identity is a key enabler in supporting this mission — strong user experience, security, and privacy practices all start at login,” said Ghazi Masood, General Manager and SVP of Americas at Auth0. “We’re honored to support Wharton Interactive’s identity needs and help them seamlessly scale as they make education more attainable and secure for educators and learners around the world.”&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;The Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;h3 id=&#34;Media-Contacts&#34;&gt;Media Contacts&lt;/h3&gt;&lt;p&gt;Auth0 Global Communications&lt;br/&gt;&lt;a href=&#34;mailto:press@auth0.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;press@auth0.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Matter Communications for Auth0&lt;br/&gt;&lt;a href=&#34;mailto:auth0@matternow.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;auth0@matternow.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 id=&#34;Investor-Contact-&#34;&gt;Investor Contact:&lt;/h3&gt;&lt;p&gt;Investor Relations &lt;br/&gt;&lt;a href=&#34;mailto:investor@okta.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;investor@okta.com&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/wharton-interactive-selects-auth0-to-help-securely-democratize-and-transform-education/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Global identity management provider supports the launch of Ivy League MBA interactive learning platform</summary>
  </entry>
  <entry>
    <title>Improving Our Platform Resiliency and Upcoming Holiday Plans</title>
    <updated>2021-10-27T16:48:00Z</updated>
    <id>tag:auth0.com,2021-10-27:/blog/improving-our-platform-resiliency-and-upcoming-holiday-plans/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Over the last few months, there has been an increase in service degradation and outages that has shaken our customer’s confidence in Auth0. Our number one mission is to provide you with the highest level of service and reliability at all times, for the full spectrum of customers from free users to enterprise. The production environments in US-1 and EU have been impacted the most frequently and, in extreme cases, has caused downtime for some of our customers. As the Auth0 CPO, I sincerely apologize for the pain this caused you and your customers. We take ownership for the failures and recognize how disappointed you are.&lt;/p&gt;&lt;p&gt;We know that identity plays a critical role in your company, and it is our responsibility to make our service reliable. It is also our responsibility to provide guidance to our customers on appropriate architecture patterns. When we experience failures or degradation of our service, we correct them as swiftly as possible. Today, I wanted to share the active measures we are taking to protect against similar issues from occurring in the future.&lt;/p&gt;&lt;h2 id=&#34;First--What-Caused-the-Outages-&#34;&gt;First, What Caused the Outages?&lt;/h2&gt;&lt;p&gt;Before we explore all of the actions we have taken, it’s good to understand the patterns we have observed in these environments:&lt;/p&gt;&lt;h3 id=&#34;Noisy-neighbors-in-our-large-multi-tenant-environments-create-throughput-bottlenecks&#34;&gt;Noisy neighbors in our large multi-tenant environments create throughput bottlenecks&lt;/h3&gt;&lt;p&gt;The noisy neighbor phenomenon is a well-known issue in multi-tenant environments. In our case, one co-tenant may experience a spike in traffic which can lead them to monopolize resources available and thus reduce the throughput (requests-per-second) on the environment for the other co-tenants.&lt;/p&gt;&lt;p&gt;Most of our customers in the US-1 and EU environments have enjoyed many years of uninterrupted service. These environments have grown significantly and are now the longest-running and largest, which exacerbates the noisy neighbor impact.&lt;/p&gt;&lt;p&gt;We have not strictly enforced restrictions to the frequency of customer API calls (rate limits) and at times allowed for a 10X increase in requests-per-second (RPS) for certain tenants in a single environment. Typically, our architecture would allow us to absorb these spikes as it is the case in most of our environments, but given the volume and size of the customers in US-1 and EU, these concurrent requests restrict throughput for other tenants. We do not fault our customers for their peak traffic needs and it is on us to put in place the right protections and guardrails around each tenant. Unfortunately, we are not able to actively load shed today (i.e. automatically move tenants to other environments such as US-3, because we don’t currently have the migration tooling nor can we do it without any downtime). There are some customer scenarios where a planned migration by a customer is possible, but it requires time and effort on your part. I will cover migration scenarios and timing in the ‘Looking beyond the next 60 days’ section below.&lt;/p&gt;&lt;h3 id=&#34;Region-Mean-Time-To-Recovery--MTTR--outside-of-our-15-min-target&#34;&gt;Region Mean Time To Recovery (MTTR) outside of our 15-min target&lt;/h3&gt;&lt;p&gt;The other item we are solving is meeting our 15 minutes target for region failover. This is caused by dependencies on an underlying managed service that doesn’t support automated failover within our target timeframe. Our teams are in the final stages of completing the switch, a managed service that allows us to automatically failover within 15-minutes, in Q1 2022.&lt;/p&gt;&lt;p&gt;We can successfully failover Availability Zones (AZ) today within our 1-minute target window as validated by quarterly testing.&lt;/p&gt;&lt;h2 id=&#34;What-Actions-Have-We-Taken-Already-&#34;&gt;What Actions Have We Taken Already?&lt;/h2&gt;&lt;h3 id=&#34;Slowing-down-and-invoking-our-change-freeze-earlier&#34;&gt;Slowing down and invoking our change freeze earlier&lt;/h3&gt;&lt;p&gt;Effective Sept. 30, 2021, we’ve significantly reduced the number and frequency of changes that we’re introducing into production for the remainder of the year. This is to introduce increased testing and soak time in pre-production environments. Heading into the holiday season, our protocols may change slightly, however, we anticipate continuing a conservative posture to maintain the stability of our production environments. We are mostly allowing changes that are related to our resiliency initiatives or security patches. Being an authentication platform, security-related changes are non-negotiable, as is our mission to protect you and your customers.&lt;/p&gt;&lt;h3 id=&#34;New-staging-environment&#34;&gt;New staging environment&lt;/h3&gt;&lt;p&gt;As of early October, we have a staging environment that has the same load as US-1, so that we can simulate test cases reproducing production traffic at large scale. The volume and high load-related issues described above can now be more easily detected.&lt;/p&gt;&lt;h3 id=&#34;Additional-resources-and-re-prioritization-of-our-roadmap&#34;&gt;Additional resources and re-prioritization of our roadmap&lt;/h3&gt;&lt;p&gt;We have added team members and reprioritized resilience projects in order to complete these improvements in time for the holiday season. I am personally doing a daily stand-up with our Engineering leadership team to ensure there is an elevated review process and all blockers are actively being addressed. In addition, all new product and feature initiatives have been deferred until the new year.&lt;/p&gt;&lt;h3 id=&#34;Resilience-and-holiday-readiness-efforts&#34;&gt;Resilience and holiday readiness efforts&lt;/h3&gt;&lt;p&gt;After our outage on April 20th, a dedicated team of 40 engineers completed a 10-week task force to reduce the load on our environments that resulted in:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Reduced cache load by removing unused feature flags and added in-memory caching of multiple per-environment feature flags.&lt;/li&gt;&lt;li&gt;Removed 2 collections from our database that reduced total database writes by 10%.&lt;/li&gt;&lt;li&gt;Reduced reads to the collection with the most reads within the database by 12%.&lt;/li&gt;&lt;li&gt;Added limits to refresh tokens queries from the Management API.&lt;/li&gt;&lt;li&gt;Added missing indexes for new collections in the database.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Some of the improvements identified were multi-quarter projects that are still underway and are expected to be completed this November. These projects will:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Reduce the read/write workload by 10%.&lt;/li&gt;&lt;li&gt;Reduce 40% of inserts/deletes from our database.&lt;/li&gt;&lt;li&gt;Reduce 30% of inserts/deletes from our database in US-1 enviroment. This requires a deprecation of opaque access tokens and will take 6 months to complete.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In October, we started the following remediation projects to further reduce the probability of these failures:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Refactoring our connections schema to remove high cardinality issues.&lt;/li&gt;&lt;li&gt;Addressing noisy neighbor issues in our extensibility stack (also known as Webtask).&lt;/li&gt;&lt;li&gt;Implementing an additional caching layer for reading requests.&lt;/li&gt;&lt;li&gt;Proactively and significantly over-provisioning our stack in an effort to get ready for holiday traffic.&lt;/li&gt;&lt;li&gt;Enforcing global active rate management per tenant at the edge.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The projects listed above are also scheduled to be live and in production by November 10. We know that all of the initiatives above will reduce the load on our environments and should significantly reduce the noisy neighbor issue I referenced above.&lt;/p&gt;&lt;p&gt;We are also initiating code change freeze windows over the holidays:&lt;/p&gt;&lt;p&gt;🟧 &lt;strong&gt;Orange Change Freeze&lt;/strong&gt; 10/12 - 11/11 &lt;br/&gt;&lt;/p&gt;&lt;p&gt;🟥 &lt;strong&gt;Red Change Freeze&lt;/strong&gt; 11/12 - 11/29 &lt;br/&gt;&lt;/p&gt;&lt;p&gt;🟧 &lt;strong&gt;Orange Change Freeze&lt;/strong&gt; 11/30 - 12/16 &lt;br/&gt;&lt;/p&gt;&lt;p&gt;🟥 &lt;strong&gt;Red Change Freeze&lt;/strong&gt; 12/17 - 01/03 &lt;br/&gt;&lt;/p&gt;&lt;p&gt;🟧 &lt;strong&gt;Orange Change Freeze:&lt;/strong&gt; During this window, all production deployments are halted, and only work related to stability for Mission Critical Services, security patches or urgent releases on other components may be deployed. Changes must meet testing and approval criteria. &lt;br/&gt;&lt;/p&gt;&lt;p&gt;🟥 &lt;strong&gt;Red Change Freeze&lt;/strong&gt;: During this window, all production deployments are halted. Exceptions allowed only to resolve critical customer issues or security patches. Changes must meet testing and approval criteria. &lt;br/&gt;&lt;/p&gt;&lt;h2 id=&#34;Looking-Beyond-the-Next-60-Days&#34;&gt;Looking Beyond the Next 60 Days&lt;/h2&gt;&lt;h3 id=&#34;New-environments-and-migration-capabilities&#34;&gt;New environments and migration capabilities&lt;/h3&gt;&lt;p&gt;We are now actively working on creating new environments in our US and EU regions. Our target is to progressively introduce 4 new environments in the US and up to 3 new environments in the EU in CY Q1 2022. The new environments allow us to dynamically allocate load as part of our demand response strategies and significantly reduce the blast radius of disruptions and outages. Our team is also actively scoping and designing an automated tenant migration process. We expect to have an automated tenant migration tool that will enable us to work with you and migrate you over to one of our newer environments beginning late CY Q1 2022.&lt;/p&gt;&lt;h3 id=&#34;New-platform-rollout-across-clouds-and-regions&#34;&gt;New platform rollout across clouds and regions&lt;/h3&gt;&lt;p&gt;We began working on a modern platform last year that is poised to roll out across the regions and clouds that we operate in. This month we began the gradual rollout of this new platform and made it available on Microsoft&amp;#39;s Azure cloud. This new platform architecture has been purposefully designed from the ground up to deliver a scalable, reliable, and resilient service that meets the current and future needs of our customers. We are targeting to make this available on AWS starting CY 1H 2022.&lt;/p&gt;&lt;p&gt;Finally, we truly appreciate your trust in Auth0 and will do everything that we can to keep that trust. I will post another public update in early CY Q1 2022 to share the results of all of our work in future blog updates including the progress of the improvement initiatives listed above.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Please note: any unreleased products, features, or functionality referenced in this disclosure may not be currently available and may not be delivered on time or at all. Product roadmaps do not represent a commitment, obligation, or promise to deliver any product, feature, or functionality, and you should not rely on them to make your purchase decisions.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/improving-our-platform-resiliency-and-upcoming-holiday-plans/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">We are committed to delivering a Tier 0 service for our customers</summary>
  </entry>
  <entry>
    <title>How To Protect Against Ransomware In 2021</title>
    <updated>2021-10-27T14:48:00Z</updated>
    <id>tag:auth0.com,2021-10-27:/blog/how-to-protect-against-ransomware-in-2021/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;As digital assets increase in value (in some cases, being &lt;em&gt;the most&lt;/em&gt; valuable assets a company owns), threats become more profitable to criminals too. The largest ransomware payout made by an insurance company ($40 million) to date happened in 2021, and the trend doesn’t show any signs of slowing down.&lt;/p&gt;&lt;p&gt;The major problem with attacks like these is that computers today are so fast and interconnected that malware can harness those resources to spread itself throughout the network and encrypt an enormous amount of files before the victim can respond.&lt;/p&gt;&lt;p&gt;Unfortunately, after the files have been encrypted, there is not much that can be done. Most modern ransomware has good, or at least good-enough implementation of encryption algorithms, all but guaranteeing that the victim won’t be able to recover their data.&lt;/p&gt;&lt;h2 id=&#34;How-Ransomware-Works&#34;&gt;How Ransomware Works&lt;/h2&gt;&lt;p&gt;The first versions of ransomware were poorly implemented, and the victim stood a decent chance of recovering their files without paying the ransom.&lt;/p&gt;&lt;p&gt;Since the virus had to encrypt the victim’s files as fast as possible to increase the chances of a successful attack, it relied on a &lt;strong&gt;symmetric cipher&lt;/strong&gt;, such as AES, as they encrypt data much faster than asymmetric ciphers.&lt;/p&gt;&lt;p&gt;The problem is that symmetric ciphers use the same key to encrypt &lt;em&gt;and&lt;/em&gt; decrypt the files.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/uG54F3Ra1JmRNUnLVBPWM/e7079f11b2a6f61114409660eebfe6d3/Uploaded_from_How_To_Protect_Against_Ransomware_In_2021&#34; alt=&#34;Symmetric cipher encryption&#34;/&gt;&#xA;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Symmetric cipher encryption&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The bad actor would have to hard code the key into the malware and hope that the victim wouldn’t have the means to look for the keys in the code, or they would have to send a copy to a remote server which they controlled and delete the key on the victim’s computer. Neither option is very good for the attacker.&lt;/p&gt;&lt;p&gt;Most modern ransomware uses a hybrid encryption mechanism. While asymmetric ciphers are slow and not meant to encrypt huge amounts of data, using them to encrypt just &lt;em&gt;the encryption key&lt;/em&gt; created by a symmetric cipher is not a problem.&lt;/p&gt;&lt;p&gt;Here’s how it works. Before the attack, the attacker generates an asymmetric key pair, and the public key is embedded into the malware. Once the malware is executed, it encrypts the victim’s files with a fast, symmetric cipher, and its key will then be encrypted with the public key from earlier.&lt;/p&gt;&lt;p&gt;To get their files back, the victim would need the attacker’s private key to decrypt the public key to then, finally, decrypt the files using the symmetric cipher key.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4sJ4KsUjN5Ez4b9u1A4YUY/4677b2dbb6a638166b57805c20b43c14/Uploaded_from_How_To_Protect_Against_Ransomware_In_2021&#34; alt=&#34;Asymmetric cipher encryption&#34;/&gt;&#xA;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Asymmetric cipher encryption&lt;/i&gt;&lt;/p&gt;&lt;p&gt;(This is assuming the attacker went through the trouble of providing a way for the victim to get their data back. They could just encrypt everything with AES and delete the key with no intention of ever recovering the data.)&lt;/p&gt;&lt;p&gt;Other than that, the only “realistic” scenario to decrypt the data is by brute-forcing it. I use quotes because it’s not really realistic – we already went over the math behind it. You would need more time than the age of the universe to decrypt AES-128 even if you were using all the computational power available today.&lt;/p&gt;&lt;h2 id=&#34;How-To-Protect-Against-Ransomware&#34;&gt;How To Protect Against Ransomware&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;When it comes to ransomware, the best defense is being &lt;em&gt;proactive&lt;/em&gt; instead of &lt;em&gt;reactive&lt;/em&gt;. If you got hit by ransomware and didn’t already have a plan in place, your chances of ever recovering your files are slim.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;With that in mind, the tips below will help you mitigate some of the risks &lt;em&gt;before&lt;/em&gt; something bad happens.&lt;/p&gt;&lt;h3 id=&#34;1--Update-Your-Systems-Regularly&#34;&gt;1. Update Your Systems Regularly&lt;/h3&gt;&lt;p&gt;In May 2017, a strain of ransomware known as WannaCry was deployed around the world, affecting more than 230,000 computers in 24 hours.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5Xhk4JfQznetFAIRvPo0mf/feb1235ce512cf13d7b581d24a526129/Uploaded_from_How_To_Protect_Against_Ransomware_In_2021&#34; alt=&#34;UWannaCry note&#34;/&gt;&#xA;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Screenshot of the WannaCry note&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The malware exploited a vulnerability in SMB, a file-sharing protocol in Windows, that allowed the virus to spread itself through the network without being executed by the user.&lt;/p&gt;&lt;p&gt;To get infected, you didn’t need to run anything – being connected to the same network as someone else who ran it and having an unpatched version of Windows was enough.&lt;/p&gt;&lt;p&gt;Microsoft had released a security update a month before, in April, so only the organizations that weren’t as diligent with their software updates were affected by the attack.&lt;/p&gt;&lt;p&gt;Keeping your systems up-to-date is your first line of defense, and in most cases, can be automated. Low-effort, high-reward.&lt;/p&gt;&lt;h3 id=&#34;2--Think-Hard-Before-Paying-The-Ransom&#34;&gt;2. Think Hard Before Paying The Ransom&lt;/h3&gt;&lt;p&gt;If you’re hit by ransomware and your data is now encrypted, you might be tempted to throw the flag and pay the ransom. After all, in the short term, paying the ransom might seem like the less expensive option. But you should think hard before paying.&lt;/p&gt;&lt;p&gt;There’s a reason why the official US government response is to “never negotiate with terrorists.” Caving in opens a can of worms and doesn’t guarantee that your problem will be solved.&lt;/p&gt;&lt;p&gt;First of all, paying the ransom doesn’t guarantee that the attackers will decrypt your data – they could just ask for more money instead. Furthermore, it signals that it’s profitable to target your company, and they (and others) will target your organization again in the future. A report by Cybereason found that 80% of the companies that pay the ransom are attacked again soon.&lt;/p&gt;&lt;p&gt;You should also be aware that, to pressure you into paying the ransom, criminals may perform a double extortion attack, where they first exfiltrate proprietary company information before encrypting the files and then threaten to release those secrets if the ransom isn’t paid.&lt;/p&gt;&lt;h3 id=&#34;3--Make-a-Plan-For--Foul-Weather--in-Advance&#34;&gt;3. Make a Plan For “Foul-Weather” in Advance&lt;/h3&gt;&lt;p&gt;Regardless of the decision, it’s best if it’s made in advance. The stakeholders can keep a cool head and aren’t in a bind to come up with a solution on the fly.&lt;/p&gt;&lt;p&gt;Ever noticed that laminated paper that every NFL coach holds during the games? They contain the plays they have planned for different game situations. It was pioneered by Bill Walsh during the 80s:&lt;/p&gt;&lt;p&gt;&lt;em&gt;Having a well-thought-out plan ready to go in advance of a change in the weather is the key to success. In the closing moments [of a playoff game against the Raiders], we recovered a fumble. We were trailing by three points, and a field goal would send us into overtime. My job [as an assistant coach] was to figure out how to get us within range of a field goal quickly. Unfortunately, the severe pressure and absolute pandemonium up at the booth where I was sitting destroyed my thinking. I completely forgot the plays we had practiced that would have worked best under those circumstances, but equally important, I recognized (in retrospect) that I had no specific plan for what to do in that “foul-weather” circumstance.”&lt;/em&gt;&lt;/p&gt;&lt;p&gt;He started scripting his entire opening drive after that game and then every “foul weather” situation he could think of before the game even started. Consider doing the same for ransomware – the procedures for what to do during an attack should be prepared in advance when you are &lt;em&gt;not&lt;/em&gt; under duress.&lt;/p&gt;&lt;p&gt;Your plan should be as detailed as you can get away with. Here are some things you could write explicit instructions for:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;What to do during an attack (step-by-step)&lt;/li&gt;&lt;li&gt;How to contact the person in charge during an attack&lt;/li&gt;&lt;li&gt;How communication will happen during the attack&lt;/li&gt;&lt;li&gt;Where the backup is stored and how to retrieve it&lt;/li&gt;&lt;li&gt;How to wipe the disks clean and how to restore backup images&lt;/li&gt;&lt;li&gt;List the partners or clients that would have to be notified and in which order, should such an attack happen&lt;/li&gt;&lt;li&gt;Answer to difficult questions: Do you need to contact insurance? Which equipment would you need to rent or buy immediately to keep the operation running?&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;4--Be-Aware-of-Phishing-Emails&#34;&gt;4. Be Aware of Phishing Emails&lt;/h3&gt;&lt;p&gt;Phishing is the main attack vector used in ransomware cyberattacks. The attacker will send an initial malware disguised as a seemingly harmless file – for example, an Excel or Word document.&lt;/p&gt;&lt;p&gt;This malware, known as a dropper, is responsible for downloading the main malware that will encrypt the files and possibly other malware to exfiltrate other valuable data it finds on the organization’s network: intellectual property, passwords, trade secrets, etc.&lt;/p&gt;&lt;p&gt;Phishing is a hard problem to solve; it works because people are focused on work and aren’t expecting to be tricked. However, here are some things that you can consider doing to reduce the attack surface of phishing attacks:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Implement email filtering.&lt;/strong&gt; Block emails with dangerous extensions, such as .exe and .bat attached. It may stop some, but as mentioned before, sophisticated attacks will try to disguise the files.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Create a process for phishing response.&lt;/strong&gt; Here’s what we do at Auth0 when someone receives a phishing email.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Train employees at your organization.&lt;/strong&gt; Spam filters are very smart today, but even Google’s spam filter lets around 0.1% of spam emails reach your inbox. Employees must understand the risks of phishing emails.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These measures won’t stop you from getting compromised, but they will stop the low-effort attacks that can be automated.  &lt;/p&gt;&lt;h3 id=&#34;5--Implement-IAM--Identity-and-Access-Management--and-a-Password-Manager-Where-You-Can&#34;&gt;5. Implement IAM (Identity and Access Management) and a Password Manager Where You Can&lt;/h3&gt;&lt;p&gt;The second most common attack vector is trying to penetrate the network directly, either by brute force or by exploiting a vulnerability. Bloomberg reported in June that hackers were able to get into the network of the largest fuel pipeline in the US, Colonial Pipeline, and deploy a ransomware attack.&lt;/p&gt;&lt;p&gt;The bad actors got in through a company VPN by using employee credentials found in a data breach. The VPN also wasn’t protected by 2FA, which could have prevented the hackers from getting in.&lt;/p&gt;&lt;p&gt;Implementing IAM (Identity and Access Management) controls help organizations manage who has access to what and prove they are who they say they are (for example, via fingerprint scanning or hardware tokens).&lt;/p&gt;&lt;p&gt;On top of that, consider using a password manager. It’s likely that the employee used the same password elsewhere, and the bad actors simply used those same credentials to connect through the company’s VPN. A password manager ensures good password policies for all employees and makes sure that they don’t use duplicate passwords elsewhere.&lt;/p&gt;&lt;h3 id=&#34;6--Remove-Local-Administrative-Rights-From-Endpoints&#34;&gt;6. Remove Local Administrative Rights From Endpoints&lt;/h3&gt;&lt;p&gt;Most ransomware (and malware in general) perform many actions that require administrative rights during an attack. Removing such rights reduces the chance it will spread throughout the network.&lt;/p&gt;&lt;p&gt;Employees shouldn’t have access to local administrative accounts, and the IT staff should not have administrative rights for day-to-day activities.&lt;/p&gt;&lt;p&gt;Moreover, the local admin passwords should never be the same across workstations, as the attacker may pass the hash across machines with the same password to move laterally throughout the network.&lt;/p&gt;&lt;h3 id=&#34;7--Restrict-Permissions-To-Run-Software--And-Macros-&#34;&gt;7. Restrict Permissions To Run Software (And Macros)&lt;/h3&gt;&lt;p&gt;Only a few applications are needed to run the business on a day-to-day basis. Determine the few applications that are needed, and block any other application from running using Microsoft’s Group Policy if you’re a Windows user (macOS and Linux users must look for third-party solutions).&lt;/p&gt;&lt;p&gt;This will prevent unauthorized processes, including those created by malware, from running.&lt;/p&gt;&lt;h3 id=&#34;8--Limit-Network-Access&#34;&gt;8. Limit Network Access&lt;/h3&gt;&lt;p&gt;As mentioned earlier, direct network exploits, such as remote services like RDP (Remote Desktop Protocol), are the second most common infection vector.&lt;/p&gt;&lt;p&gt;Review your ports and block anything that you don’t use. For example, port 3389 (RDP) and port 445 (SMB) are commonly exploited by hackers to infiltrate your network.&lt;/p&gt;&lt;p&gt;If you need them, limit them as much as possible. You probably don’t need your RDP port open to the Internet. Make it so that it’s only accessible via the organization’s VPN and secure it with 2FA.&lt;/p&gt;&lt;p&gt;Also, create firewall rules to automatically block incoming access after sufficient failed attempts and use a filter to block any outgoing connection from unauthorized applications. Most malware will need to connect to a remote server to carry on its attack.&lt;/p&gt;&lt;p&gt;Make sure that your network is properly segmented to avoid losing network drives to a single endpoint infection. Create a guest network with extremely limited access for untrusted devices. Implement read-only shares so that you can restore backups with limited attack surface; separate subnets according to purpose or application.&lt;/p&gt;&lt;h3 id=&#34;9--Create-a-Robust-Backup-Solution&#34;&gt;9. Create a Robust Backup Solution&lt;/h3&gt;&lt;p&gt;No system in the world is impenetrable – even the most well-funded corporations in the world have been compromised. Instead of betting that you are the exception, assume the worst and create a plan to mitigate the damage when all else fails.&lt;/p&gt;&lt;p&gt;At roughly 3 cents per GB, it’s tough to beat hard drives when it comes to insurance against ransomware (but it doesn’t hurt to check if your insurance policy covers cyberattacks too).&lt;/p&gt;&lt;p&gt;When designing your backup plan, keep in mind that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;It must be automated.&lt;/strong&gt; Any backup that depends on human intervention is prone to be neglected at some point.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;It must be rock-solid.&lt;/strong&gt; Test your snapshots from time to time. You don’t want to &lt;em&gt;think&lt;/em&gt; you have your files backed up, only to discover it hasn’t been copying the proper files this whole time.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;It must have at least one air-gapped copy.&lt;/strong&gt; Air-gapped backups (disks not connected to another computer or network) make sure that, if the ransomware spreads through your systems, at least one copy is safe. Since they require manual intervention – someone has to plug the drive-in and disconnect it afterward – air-gapped copies generally aren’t as up-to-date as other hard drives in your backup plan. Still, it’s better to have a one-week-old copy than to have no copy at all.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;It must follow the 3-2-1 backup rule.&lt;/strong&gt; You must have three copies of your data, in at least two different media types, with one of them in an offsite location.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6gZ3ZuZ4THbAAXeggjhHcn/82b94644dfff001d0270d5a365e460f6/Uploaded_from_How_To_Protect_Against_Ransomware_In_2021&#34; alt=&#34;Create a Robust Backup Solution&#34;/&gt;&#xA;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;a href=&#34;https://www.keepitsafe.com/blog/post/3-2-1-rule-for-cloud-backup/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Source&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;How that plan is going to be implemented will depend on company policy (or personal preference). Having a backup in an offsite location could be as easy as using a third-party cloud provider, but it could be against company policy to have proprietary data uploaded to someone else’s cloud. So, it will vary.&lt;/p&gt;&lt;p&gt;In the majority of cases, though, it makes sense to have central storage connected to the network performing automated backups, even if it is at risk of being affected by ransomware. It’s much easier to mirror the data to an offsite location or to air-gapped hard disks from one location than every computer on the network.&lt;/p&gt;&lt;h2 id=&#34;Staying-Safe&#34;&gt;Staying Safe&lt;/h2&gt;&lt;p&gt;Do the tips above &lt;em&gt;guarantee&lt;/em&gt; you won’t be hit by ransomware? No, but no one can make such a promise when it comes to security. Staying safe is a process you must continually engage in, and the pointers above are a good starting point.&lt;/p&gt;&lt;p&gt;Ransomware attacks are still one of the most profitable attacks for bad actors, which means it’s one of the most costly for you. You can’t stop attacks from happening, as it’s completely outside of your control. What you &lt;em&gt;can&lt;/em&gt; do, however, is to make it as costly as possible to attack your organization. And as the saying goes, you don’t have to outrun the bear, only the person running next to you.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/how-to-protect-against-ransomware-in-2021/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Ransomware attacks are among the most profitable for criminals and remain the most prominent malware threat today</summary>
  </entry>
  <entry>
    <title>What is Smishing?</title>
    <updated>2021-10-26T16:02:00Z</updated>
    <id>tag:auth0.com,2021-10-26:/blog/what-is-smishing/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;You know &lt;em&gt;all&lt;/em&gt; about phishing. From time to time, emails purporting to be from Facebook or your bank drift into your inbox and insist you “verify your account.” Look closer and you spot the telltale signs of a scam: a sketchy-looking sender address, sloppy writing, and a complete lack of personalization. You sigh and hit delete.&lt;/p&gt;&lt;p&gt;It’s easy to be cynical about opportunistic, mass-mailed phishing attempts. Although some look genuine to even the most cautious eye, others feel decidedly amateurish and are readily identifiable. Billions of emails are sent each month, with over 245,000 phishing-related websites created in January alone &lt;a href=&#34;https://docs.apwg.org/reports/apwg_trends_report_q1_2021.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;according to the Anti-Phishing Working Group (APWG)&lt;/a&gt;. But when it comes to SMS-based phishing, or ‘smishing,’ things are a little different.&lt;/p&gt;&lt;p&gt;Smishing is when a malicious actor harvests credentials and credit card details by pretending to be someone else over text. This novel spin on phishing has grown exponentially in recent years, with the volume of messages sent to North American phones &lt;a href=&#34;https://www.proofpoint.com/us/blog/threat-protection/mobile-phishing-increases-more-300-2020-chaos-continues&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;increasing by 328% in Q3 2020 alone&lt;/a&gt;. Similar trends can be found in other territories. In the UK, one survey found 61% of respondents received &lt;a href=&#34;https://www.which.co.uk/news/2021/06/three-in-five-people-have-received-a-scam-delivery-text-in-the-last-year/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;at least one smishing text during 2020&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;For the perpetrators, smishing can prove incredibly lucrative. For the victims, it can be financially devastating. This article will explain how the scam works, why it’s effective, and how individuals and organizations can fight back.&lt;/p&gt;&lt;h2 id=&#34;How-a-Smishing-Scam-Works&#34;&gt;How a Smishing Scam Works&lt;/h2&gt;&lt;p&gt;If you’re reasonably tech-savvy — or have listened to the dire warnings issued by tech companies, financial institutions, and governments — chances are high you understand the risk posed by traditional email-based phishing.&lt;/p&gt;&lt;p&gt;You know that email accounts can be created and hijacked. Spammers can even spoof the origins of an email. And, after countless high-profile data breaches, you may have grudgingly reconciled with the reality that your personal information is irrevocably available online.&lt;/p&gt;&lt;p&gt;Smishing scams, on the other hand, feel comparatively opaque. How do attackers successfully impersonate well-known brands? How do they operate at such a large scale, sending tens of thousands of messages at a time?&lt;/p&gt;&lt;p&gt;Let’s start by looking at the methodology. Attackers have plenty of options when it comes to the bulk distribution of text messages. They may choose to buy a device created explicitly for that purpose, with examples available online for just a few hundred dollars. Alternatively, they can use a standard mobile phone or USB cellular modem, combined with an automation program that costs just $69.&lt;/p&gt;&lt;p&gt;This isn&amp;#39;t the most inconspicuous method. In June, UK law enforcement were &lt;a href=&#34;https://www.gmp.police.uk/news/greater-manchester/news/news/2021/june/man-arrested-in-manchester-hotel-after-over-25000-phishing-messages-sent-in-one-day/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;called to a hotel in Manchester&lt;/a&gt; after staff became suspicious of a guest carrying a bag filled with unusual-looking wires and electrical devices. Upon inspecting his room, police found a laptop containing 44,000 mobile numbers, as well as an SMS hardware gateway. They later determined the device was used to send 26,000 messages in the previous day alone.&lt;/p&gt;&lt;p&gt;Alternatively, as pointed out by veteran cybersecurity journalist Brian Krebs, attackers may choose a provider to send the messages out on their behalf. Earlier this year, UK authorities arrested the 20-year-old operator &lt;a href=&#34;https://krebsonsecurity.com/2021/02/u-k-arrest-in-sms-bandits-phishing-service/#comment-527047&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;behind the SMS Bandits gateway&lt;/a&gt;, which he marketed within criminal circles as “spam friendly.” Messages sent via SMS Bandits impersonated government agencies, financial services organizations, and telecommunications providers.&lt;/p&gt;&lt;p&gt;Now, let&amp;#39;s talk about the composition of the text. SMS messaging is a relatively ‘flat’ medium. There is no room for a visual flair or branding. This works to the advantage of attackers, as they don’t have to painstakingly recreate the style of the organizations being impersonated. And many phishing approaches works&lt;/p&gt;&lt;p&gt;Within the body of the text, the attacker faithfully adheres to the phishing playbook. One common tactic is to create a false sense of urgency. They want the recipient to be anxious, as they’ll be more likely to hand over their credentials without scrutinizing the message too closely.&lt;/p&gt;&lt;p&gt;The pandemic has provided many examples of this. In May, a UK man was sentenced to 4 years and three months imprisonment after perpetrating a scam where &lt;a href=&#34;https://www.cps.gov.uk/cps/news/covid-19-fraudster-jailed-mass-cyber-scam&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;victims were asked to provide their bank details&lt;/a&gt; in order to verify their eligibility for a Covid vaccine.&lt;/p&gt;&lt;p&gt;Another SMS phishing campaign &lt;a href=&#34;https://www.f-secure.com/gb-en/consulting/our-thinking/how-smishing-uses-urgency-to-manipulate-victims-during-lockdown&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;identified in South Africa in March 2020&lt;/a&gt; purported to be from local financial institutions and warned the recipient that their account would be terminated if they didn’t verify their credentials.&lt;/p&gt;&lt;p&gt;It’s interesting to note that this campaign began during the early months of the first lockdown, at a point when many contact centers were operating at a vastly reduced capacity. The ensuing long wait times ultimately disincentivized recipients from trying to independently verify the message with their bank, which contributed to its success.&lt;/p&gt;&lt;h2 id=&#34;Why-is-Smishing-so-Effective-&#34;&gt;Why is Smishing so Effective?&lt;/h2&gt;&lt;p&gt;It&amp;#39;s hard to find solid data on the financial cost of smishing. In most cases, it is grouped together with traditional email phishing and ‘vishing’ (voice phishing), rather than a standalone category. However, police reports and testimony from victims suggest it can be hugely profitable for the perpetrators.&lt;/p&gt;&lt;p&gt;One &lt;a href=&#34;https://inews.co.uk/news/pair-jailed-for-text-message-fraud-that-swindled-20m-from-bank-customers-and-funded-luxury-shopping-sprees-911561&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;gang made at least £20m over just eight years&lt;/a&gt;, allowing them to live a celebrity lifestyle of five-star hotels and designer clothing brands. Another man, &lt;a href=&#34;https://www.ukfinance.org.uk/press/press-releases/enfield-student-behind-scam-texts-jailed-22-months&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;a 22-year-old computer science student from London&lt;/a&gt;, made £125,000 before his arrest. In 2019, a Georgia federal court convicted three Romanian men for their role in a smishing scheme that &lt;a href=&#34;https://www.justice.gov/usao-ndga/pr/three-romanian-citizens-plead-guilty-participating-multi-million-dollar-vishing-and&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;cost individuals and institutions an estimated $21M&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And then there are the victims. One Hong Kong flight attendant saw &lt;a href=&#34;https://www.scmp.com/news/hong-kong/law-and-crime/article/3141567/hong-kong-sees-sharp-rise-phishing-scams-victims&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;her $10,000 life savings&lt;/a&gt; drained after she clicked through a text purporting to be from her bank. A student in the UK was pushed &lt;a href=&#34;https://www.bbc.co.uk/news/uk-england-birmingham-56500599&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;into her overdraft after receiving a text ostensibly from Barclays Bank&lt;/a&gt;. Another woman in Topeka, Kansas &lt;a href=&#34;https://www.ksnt.com/news/local-news/topeka-woman-falls-victim-to-text-message-scam-warning-others-what-to-look-for/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;lost $600&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;So, why is it so effective? It falls down to a number of reasons.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Smishing is a relatively novel phenomenon, especially when compared to traditional email phishing, and much of its growth has occurred in recent years. In the UK, the volume of smishing messages &lt;a href=&#34;https://news.sky.com/story/smishing-reports-increase-nearly-700-in-first-six-months-of-this-year-12407504&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;grew 700% in the first six months of 2021 alone&lt;/a&gt;. There isn&amp;#39;t the same level of awareness, and therefore, skepticism, among the wider populace.&lt;/li&gt;&lt;li&gt;Text messages have a visibility advantage over emails. While your Gmail inbox may contain thousands of unread messages, odds are good you read every single text that shows up on your phone.&lt;/li&gt;&lt;li&gt;For scammers hoping to establish credibility, SMS messages are hard to get wrong. As mentioned, it is a purely plaintext medium, with no visual flair to mimic.&lt;/li&gt;&lt;li&gt;This simplicity allows scammers to quickly respond to events. Delivery scams — which account for over half of all smishing attempts in the UK — are a good example, having proliferated after the UK concluded its withdrawal from the EU. In the US, smishing epidemics have coincided with the distribution of stimulus checks, tax season, and the widespread difficulties in obtaining unemployment insurance during the early months of the pandemic.&lt;/li&gt;&lt;li&gt;Finally, many of the tactics that make traditional email phishing successful also work over text, such as the creation of a false sense of urgency.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Fighting-Back&#34;&gt;Fighting Back&lt;/h2&gt;&lt;p&gt;It’s easy to dismiss smishing as a purely consumer problem. That would be a mistake. First, there is an overlap between the tools and services used by the general public, and those used by the public and private sectors. Gmail is a good example. You might also use the same bank or the same social media platforms.&lt;/p&gt;&lt;p&gt;Additionally, there are many examples of text messages being used to distribute malware, or as the basis for a spear-phishing campaign. This raises the prospect of smishing becoming a major headache for public and private-sector organizations.&lt;/p&gt;&lt;p&gt;That all said, SMS remains a prime mode of communication due to its ease of use and sheer ubiquity. Although services like WhatsApp and Facebook Messenger offer more functionality, you can’t beat the humble text message for sheer universality.&lt;/p&gt;&lt;p&gt;An &lt;a href=&#34;https://www.smscomparison.com/mass-text-messaging/2021-statistics/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;estimated 96% of US adults&lt;/a&gt; own a device capable of receiving text messages, while 95% of SMS messages are read and responded to within three minutes of receipt.&lt;/p&gt;&lt;p&gt;It&amp;#39;s therefore crucial that organizations proactively develop a strategy for combating smishing, with awareness at the heart of any such strategy. Employees and partners must understand that text messages are not inherently safe. They should be treated with the same level of cautiousness as email.&lt;/p&gt;&lt;p&gt;Employees should also feel empowered to report suspected smishing scams targeting the business. The sooner an organization becomes aware of an attack in progress, the quicker it can act.&lt;/p&gt;&lt;p&gt;Auth0 Security Culture Manager Annybell Villarroel notes that we’re seeing an increase in smishing attempts and recommends creating a culture of security and awareness for employees and partners through regular training.&lt;/p&gt;&lt;p&gt;But the biggest thing for all of us is just to learn to take a “skeptical pause,” says Annybell. “Pausing to ask yourself if the message makes sense can make a big difference. It can take you out of an emotional response back to logic. That extra few seconds can save you from a smishing click.”&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/what-is-smishing/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">How text messaging scams work and why a ‘skeptical pause’ can save you</summary>
  </entry>
  <entry>
    <title>How Social Engineering Has (And Hasn’t) Evolved Over Time</title>
    <updated>2021-10-25T14:47:00Z</updated>
    <id>tag:auth0.com,2021-10-25:/blog/how-social-engineering-has-and-hasnt-evolved-over-time/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Let’s face it. We all make mistakes. Even the most diligent, well-intentioned employee can inadvertently open the floodgates to an attack. Telecoms giant Verizon illustrated this earlier this year, when it published the 2021 edition of its Data Breach Investigations Report (DBIR).&lt;/p&gt;&lt;p&gt;The DBIR examined approximately 5,250 successful security breaches, gathering data about the methodologies used. It found 35 percent of attacks incorporated a social element. Of these, the vast majority (85%) used phishing tactics.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;In short:&lt;/strong&gt; you can deploy all the technological measures you want, but unless you address the human element, an attacker can defeat your defenses with a simple phone call or email.&lt;/p&gt;&lt;p&gt;Social engineering has always intrigued me. There’s something weirdly compelling about someone circumventing the defenses of a company with nothing but a winning smile and a confident tone, and industry raconteurs like Jenny “The People Hacker” Radcliffe and Kevin Mitnick have some incredible stories to share.&lt;/p&gt;&lt;p&gt;But there’s something else. Many of the tactics successfully employed by social engineers can be found throughout history, used in the fields of warfare, espionage, and criminality. Shadowy state actors targeting government departments can be found using the same playbook as Classical-era Greek military tacticians.&lt;/p&gt;&lt;p&gt;There’s a reason for this. Humans are social animals. We have certain inherent traits. We’re often willing to trust strangers, and we help those we don’t necessarily know. We live by a set of rules, both written and unwritten. These attributes allowed us to develop societies, permanent settlements, and eventually nation states. But they can also be exploited by malicious actors seeking to further a particular goal.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Technologies and tactics change. Human nature is a constant.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This article will explore some of these historical parallels. We’ll take a journey through time that starts in the Roman city of Brundisium, circa 19 BCE, with detours through the swinging sixties, the latter years of the Vietnam War, and the early days of the Internet. We’ll put the tactics used by social engineers into context, and show why they’re so effective. And finally, we’ll learn how to defend against them.&lt;/p&gt;&lt;h2 id=&#34;Our-Unpatchable-Human-Zero-Days&#34;&gt;Our Unpatchable Human Zero-Days&lt;/h2&gt;&lt;p&gt;Before we start our trip, it’s probably a good idea to talk about the human qualities commonly targeted by social engineers.&lt;/p&gt;&lt;p&gt;While researching this post, I sought out as many tales of real-world social engineering as I could find. I thumbed through books by Chris Hadnagy and Kevin Mitnick. I listened to conference talks from the likes of Paul Wilson and Jenny Radcliffe. I devoured entire episodes of The Darknet Diaries.&lt;/p&gt;&lt;p&gt;As I went through, I noted most attacks focused on certain human attributes. These included:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Curiosity&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;&lt;/em&gt;Every great scientific and technological leap started with the words: “What if?” But you don’t need to be Einstein to have curiosity. We use trial-and-error and experimentation to make sense of our environment. Social engineers frequently exploit this when harvesting credentials or &lt;a href=&#34;https://darknetdiaries.com/episode/100/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;deploying malware&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Trust&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;&lt;/em&gt;Life’s easier (and nicer) when you assume everyone acts in good faith. And so, we take people at their word. If an unfamiliar voice calls and claims to be from your bank or phone company, you might instinctively believe them. Social engineers can — and often do — exploit this.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Desire to Help&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;&lt;/em&gt;Since we’re social animals, collaboration is inevitable. If we see someone in need of assistance, chances are we’ll offer it. When exploiting this, a social engineer might pretend to be a low-ranking employee in need of credentials, access, or documents. They’ll count on the target feeling pity for them.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Fear&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;&lt;/em&gt;The “fear factor” frequently features in social engineering attacks. You’re probably familiar with phishing emails claiming your bank account has been hacked, or your social media profile will be deleted unless you click a link. This tactic pressurizes the target into making hasty decisions and dropping their skepticism.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Desire to Comply&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;&lt;/em&gt;Almost all organizations — both public and private sector — are hierarchical. There’s a pecking order, with some people at the top, and others at the bottom. We tend to listen to (and obey) those higher up in the echelons. Attackers can exploit this by masquerading as high-ranking employees and issuing edicts to junior employees.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Each of the historical examples listed in this article uses these innate attributes, often to devastating effect.&lt;/p&gt;&lt;h2 id=&#34;From-USB-Sticks-to-Wooden-Horses&#34;&gt;From USB Sticks to Wooden Horses&lt;/h2&gt;&lt;p&gt;The year is 2008. A threat actor, most likely working for a foreign state, had broken into the heart of the United States defense establishment. Showing remarkable skil, the attacker had successfully deployed a data-siphoning worm onto a Central Command (CENTCOM) computer. From there, it proliferated like a fungus, spreading undetected into other computers.&lt;/p&gt;&lt;p&gt;William J. Lynn III, an Obama-era Deputy Secretary of Defense, later described it as &amp;#34;&lt;a href=&#34;https://archive.defense.gov/home/features/2010/0410_cybersec/lynn-article1.aspx&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the most significant breach of U.S. military computers ever.&lt;/a&gt;&amp;#34; He wasn’t wrong. The worm took almost 14 months to eradicate, and it infected both classified and unclassified machines. It’s hard to quantify the damage it inflicted on the Department of Defense.&lt;/p&gt;&lt;p&gt;Adding insult to injury, the damage was arguably self-inflicted. The virus, later dubbed Agent.biz, was distributed on USB sticks dropped in the parking lot at an unnamed Middle East military base. A CENTCOM employee picked one up and plugged it into their laptop.&lt;/p&gt;&lt;p&gt;The Department of Defense never identified the employee responsible for the first infection. We’ll never know their motivations. Were they curious about the drive’s contents? Did they want to reunite the drive with its owner? Or did they just want to save the $20 on a new memory stick? It’s not clear.&lt;/p&gt;&lt;p&gt;In the end, it doesn’t matter. The damage was done. The Department of Defense was forced to spend critical resources identifying and wiping infected machines, as they eliminated the worm one computer at a time. And it forced the military to radically change their approach to computer security, ultimately leading to the creation of the United States Cyber Command.&lt;/p&gt;&lt;p&gt;Still, I can’t help but wonder what the ancient Roman poet Virgil would think of this tale. Two millennia prior, Virgil was spending his twilight years in the city of Brundisium (now Brindisi), where he worked on his opus, the epic poem Aeneid.&lt;/p&gt;&lt;p&gt;Aeneid described the Siege of Troy. This is perhaps the most famous battle that never actually took place — or, at least, in the way depicted. Pretty much everything below is apocryphal. Still, it’s a great story, so indulge me.&lt;/p&gt;&lt;p&gt;Here’s the TL;DR: Greece was at war with Troy. It wasn’t going well. Both sides were effectively at a stalemate. Troy had retreated behind the walls of its capital city, where it could hold out indefinitely. After an exhausting decades-long siege, the Greeks were eager to end the campaign. And so, their leader, Odysseus, conjured a devious ruse.&lt;/p&gt;&lt;p&gt;Greece would pretend to surrender. Their forces would retreat. By means of apology, they left a large wooden horse at the gates of the city, which the Trojans interpreted as a tribute to their greatness.&lt;/p&gt;&lt;p&gt;We all know what happened next. The Trojans hauled the horse into the city, unbeknownst to the shock force of Greek warriors lurking within its interior. As night fell, they crept out and unlocked the gates to the city. The rest of the Greek army surged forward, flooding in and bringing the war to its conclusion in a matter of hours.&lt;/p&gt;&lt;p&gt;Technologically, USB drives and wooden horses couldn’t be more different. But in both of the examples cited, they were used to inflict devastating losses to the target. More importantly, they were only effective because the victim implicitly trusted they wouldn’t be used to harm them. Trust can be a dangerous thing.&lt;/p&gt;&lt;h2 id=&#34;Helpful-Humans&#34;&gt;Helpful Humans&lt;/h2&gt;&lt;p&gt;In the 1990s, Kevin Mitnick was the ultimate cybercrime bogeyman. He won his notoriety by breaking into some of the most powerful technology and telecommunications companies in the world. His misadventures were front-page news and even inspired two feature-length movies (one documentary, another dramatic).&lt;/p&gt;&lt;p&gt;Now, Mitnick is a legitimate cybersecurity professional and author. Through talks, articles, and books, he warns about the risks posed by social engineering attacks, giving examples from his own criminal past.&lt;/p&gt;&lt;p&gt;Many of his tales describe interactions with relatively low-level employees at the target company. He would build a rapport with the worker and gather information, which he would later use to achieve his larger goals.&lt;/p&gt;&lt;p&gt;In one example, detailed in his book &lt;a href=&#34;https://www.amazon.com/Ghost-Wires-Adventures-Worlds-Wanted/dp/0316037729&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Ghost in the Wires&lt;/a&gt;, Mitnick sought to access the phone records of a friend he suspected of working for the FBI. He repeatedly called the phone provider, each time building a rapport with the employee and teasing out details relating to the account. Once he gathered enough information, he convinced the provider to fax the target’s previous invoice, claiming he needed it to rebuild his phone book.&lt;/p&gt;&lt;p&gt;Mitnick was successful because the employees didn’t question whether he was the real account holder. They weren’t motivated by data security, but rather customer happiness. They simply weren’t suspicious. He would successfully re-use these tactics again and again, before the FBI brought his criminal career to an abrupt end in 1995.&lt;/p&gt;&lt;p&gt;Twenty-five years earlier, a group of Anti-Vietnam War activists used a similar approach when breaking into a Delaware draft office. The group had already penetrated several military offices, as they sought to frustrate the recruitment of new soldiers into the highly unpopular war. They were seasoned burglars.&lt;/p&gt;&lt;p&gt;This Delaware office, however, proved a challenge. It was protected by an advanced, heavy duty door. Their usual tools — crowbars and lock picks — were useless here. And so, they had to think outside the box.&lt;/p&gt;&lt;p&gt;During the daytime, the office’s door was unlocked. A member of the group crept in and left a note behind. It read: “Please don’t lock this door tonight.”&lt;/p&gt;&lt;p&gt;It was simple. Obvious, even. And it worked. The group later returned under the cover of darkness. They approached the door and twisted its handle. It opened with a satisfying click. They gathered the documents they came for and left. In 2014, after the statute of limitations expired, the group would tell their tale to veteran Washington Post journalist Betty Medsger.&lt;/p&gt;&lt;p&gt;No doubt, the draft office was staffed by seasoned military servicemen. They understood risk, and no doubt knew of the widespread opposition to the Vietnam war. And yet, this experience was overridden by their desire to be helpful, and to comply with the request of a colleague or superior. They trusted the note’s provenance, and didn’t think to consider that it may have been left by an adversary.&lt;/p&gt;&lt;p&gt;The term “social engineering” sounds deceptively modern. In reality, it could be used to describe the kind of subterfuge used by criminals and military leaders throughout history.&lt;/p&gt;&lt;p&gt;You can draw parallels between the approaches detailed in Chris Hadnagy’s book &lt;a href=&#34;https://www.amazon.com/Human-Hacking-Friends-Influence-People/dp/0063001780&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Human Hacking&lt;/a&gt;, which focuses on their application in legitimate offensive security procedures, and those used by convicted fraudster Frank Abagnale, as described in his book &lt;a href=&#34;https://www.amazon.com/s?k=catch+me+if+you+can+book&amp;amp;gclid=Cj0KCQjwwNWKBhDAARIsAJ8HkhcNRSvRdVegZPvCiI176SCZvOnGn3rDQGLMGOoA039SYYck0AfzRFAaAtWEEALw_wcB&amp;amp;hvadid=409998390125&amp;amp;hvdev=c&amp;amp;hvlocphy=9033339&amp;amp;hvnetw=g&amp;amp;hvqmt=e&amp;amp;hvrand=1184131583828329460&amp;amp;hvtargid=kwd-421448854&amp;amp;hydadcr=24630_11410023&amp;amp;tag=googhydr-20&amp;amp;ref=pd_sl_7yubf00gv6_e&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Catch Me If You Can&lt;/a&gt;. The basic concepts are the same, with the only real point of differentiation being how they’re used.&lt;/p&gt;&lt;p&gt;Complicating matters, it’s now possible to perform social engineering attacks at scale. Through phishing (as well as its evil siblings, Smishing, or SMS phishing, and Vishing, or phishing via voice), a bad actor can reach millions in a matter of moments.&lt;/p&gt;&lt;p&gt;In 2020, the FBI received 231,000 reports of phishing attacks — or double that previous year’s figure. The real figure is almost certainly significantly higher, with most attempts unreported to the bureau. It affects non-profit organizations, businesses, and individuals, albeit to varying levels, and the costs can measure in the millions.&lt;/p&gt;&lt;p&gt;Earlier this year, US authorities sentenced the ringleader of a Business Email Compromise (BEC) scam to ten years in prison. The man, Obinwanne Okeke, stole $11m from companies in the construction industry by issuing fake invoices with the funds directed to foreign bank accounts.&lt;/p&gt;&lt;p&gt;Looking further back, in May 2000, Filipino malware developer Onel De Guzman caused an estimated $5.5bn to $8.7bn in damages, after he released a self-propagating worm masquerading as a love letter. The ILOVEYOU worm sought to steal dial-up internet credentials, and inadvertently took down the mail services of the UK parliament, Microsoft, and the US Department of defense.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Here’s the good news: You can take steps to mitigate the risk social engineering poses to your organization.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Technical measures, as recommended by the US Computer Emergency Response Team (US-CERT), include the use of multi-factor authentication (MFA), email filtering, and firewalls. It helps to stay abreast of recent developments, and the Anti-Phishing Working Group provides helpful information about new threat actors and trends.&lt;/p&gt;&lt;p&gt;Training also plays an important role. It’s possible your colleagues are unaware that social engineering exists. Teach them about the tactics used and the importance of verifying the identities and details of those they interact with, along with your organization’s phishing reporting procedures. If you don’t have one, make a point to create one, even if it’s something as simple as a dedicated inbox, where employees can forward suspicious communications.&lt;/p&gt;&lt;p&gt;Finally, creating a culture of transparency and collaboration is important. Your colleagues should feel able to report security issues without fear or judgment.&lt;/p&gt;&lt;p&gt;&amp;#34;Our innate human traits make us vulnerable to social engineering attacks, and always will. The best and most scalable defense is to create a strong security culture, both within organizations and across society at large. When we empower people to detect and respond to these attacks, we build a more secure Internet for all,&amp;#34; said Annybell Villarroel, Security Awareness and Culture Manager. To find out how Auth0 can meet your organization’s identity needs, click here.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/how-social-engineering-has-and-hasnt-evolved-over-time/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">There’s no patch for humanity, but that’s not a bad thing</summary>
  </entry>
  <entry>
    <title>Should You Give Users Access Before They Register</title>
    <updated>2021-10-21T15:03:00Z</updated>
    <id>tag:auth0.com,2021-10-21:/blog/should-you-give-users-access-before-they-register/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Gating your content can be something of a gamble. On the one hand, allowing users to prematurely access your product means that you might wind up serving a lot of users who you never truly monetize. On the other hand, putting a login wall between potential users and content could lead to slower growth and a smaller user base.&lt;/p&gt;&lt;p&gt;According to Blue Research, &lt;a href=&#34;http://www.prweb.com/releases/2012/1/prweb9086226.htm&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;54% of users will abandon a website&lt;/a&gt; if the registration process is too cumbersome. Good product designers know all too well that interrupting a user in their intended path can be a great way to lose them.&lt;/p&gt;&lt;p&gt;Over and over again, the data shows that the more cumbersome a signup process is, the less likely a user is to bother with it at all. &lt;a href=&#34;http://unbounce.com/conversion-rate-optimization/how-to-optimize-contact-forms/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Eighty-six percent of users&lt;/a&gt; say lengthy forms make them quit registrations, and 88% will simply &lt;a href=&#34;https://web.archive.org/web/20171209150724/http://www1.janrain.com/rs/janrain/images/Industry-Research-Value-of-Social-Login-2013.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;enter incomplete or false information&lt;/a&gt; if the signup process is too exhaustive or intrusive.&lt;/p&gt;&lt;p&gt;But how do you solve for registration drop off when your signup process &lt;em&gt;does&lt;/em&gt; follow best practices? Lazy registration could be the solution.&lt;/p&gt;&lt;h2 id=&#34;What-is-Lazy-Registration-&#34;&gt;What is Lazy Registration?&lt;/h2&gt;&lt;p&gt;Lazy registration allows users to access content &lt;em&gt;before&lt;/em&gt; they register as a user. This allows users to experience the product without inputting any of their information and can increase the loyalty and lifetime value (LTV) of a registered user base by building a relationship with the user ahead of account creation.&lt;/p&gt;&lt;p&gt;Where you put the login wall is a conversation similar to deciding where to put a paywall within an app. Ultimately, you’ll have to look at what’s within your user experience that users are going to want to see and use for themselves before deciding the app has value.&lt;/p&gt;&lt;p&gt;Lazy registration has the potential to mitigate some install-to-signup dropoff by giving users time to explore the app, and then prompting them to set up an account when they want to save the information or personalize their experience.&lt;/p&gt;&lt;h3 id=&#34;How-progressive-profiling-fits-in&#34;&gt;How progressive profiling fits in&lt;/h3&gt;&lt;p&gt;Lazy registration doesn’t just benefit the users of an application. By collecting data from your users as they interact with the application, you’ll be able to tailor their experience to their needs, without bombarding them with questions.&lt;/p&gt;&lt;p&gt;This process is known as progressive profiling, and it means that your users get the content that’s most relevant to them, without being inundated with requests for more information. Examples of progressive profiling include incentivizing certain behaviors with points or rewards, collecting data from pop-ups as the user progresses through the application, or even prompting users to add more data via email or push notification.&lt;/p&gt;&lt;p&gt;Progressive profiling used in tandem with lazy registration allows you to collect a rich store of data on your users, without putting the burden on them. You’re able to build a relationship with them and establish trust ahead of asking for their personal information and use their behavioral data to serve them with more relevant information and experiences.&lt;/p&gt;&lt;p&gt;If your motivation for implementing lazy registration is for the purposes of progressively profiling your users, it might make sense to also look at incorporating some form of single sign on, or SSO, into your user signup experience.&lt;/p&gt;&lt;p&gt;SSO allows you to build a &lt;a href=&#34;https://auth0.com/learn/social-login/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;richer user profile&lt;/a&gt;, without asking your users manually for a lot of information. Implementing SSO can also have a dramatic impact on your install-to-signup conversion rate. Slowly learning about your consumers also aids in serving more targeted information to them. In the case of Moogsoft, their team found &lt;a href=&#34;https://auth0.com/case-studies/moogsoft/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;after implementing SSO&lt;/a&gt; with Auth0, that 60% of their users were signing up using Google.&lt;/p&gt;&lt;h2 id=&#34;Lazy-Registration-Doesn-t-Have-to-Mean-Zero-Data-Collection&#34;&gt;Lazy Registration Doesn’t Have to Mean Zero Data Collection&lt;/h2&gt;&lt;p&gt;In the age-old tug of war between user experience and data collection, it’s the product designer’s job to ensure that the former isn’t being compromised too much for the latter. Often it’s inevitable that there will be some form of the tradeoff between an easy user experience and a richer user profile, but technology is rapidly accelerating to close in on this gap.&lt;/p&gt;&lt;p&gt;Apps can use lazy registration to encourage brand engagement ahead of the acquisition, much like an eCommerce store allows users to browse products without an account, right up until they want to favorite an item or complete a checkout. Lazy registration coupled with SSO and progressive profiling can reduce the burden of effort on the user to register for use while allowing for richer data collection, and an all around more customizable user experience. If you’d like to learn how lazy registration can benefit your business and your customers, please &lt;a href=&#34;https://auth0.com/contact-us&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;reach out to the team at Auth0&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/should-you-give-users-access-before-they-register/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">The business case for lazy registration</summary>
  </entry>
  <entry>
    <title>Top 6 Cybersecurity Predictions for 2022</title>
    <updated>2021-10-20T14:51:00Z</updated>
    <id>tag:auth0.com,2021-10-20:/blog/top-6-cybersecurity-predictions-for-2022/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;From the Colonial Pipeline attack, which resulted in fuel shortages across much of the East Coast, to the devastating breach on Microsoft Exchange, it’s safe to say 2021 was a tumultuous year for cybersecurity. But what will the next year look like?&lt;/p&gt;&lt;p&gt;I reached out to Auth0’s leading security and privacy experts to hear their predictions for 2022, and to learn how organizations will grapple with a changing threat landscape and the ongoing pandemic.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/e8LLSbz9kUTIssTNzD33k/1c58e52ea17e0bf67b104322e8ade137/cybersecurity-prediction-sep1&#34; alt=&#34;Predictions&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;1--The-Visibility-Challenge&#34;&gt;1. The Visibility Challenge&lt;/h2&gt;&lt;p&gt;It’s been almost eighteen months since the Covid-19 pandemic forced us to rethink everyday life. The workplace was no exception. States ordered tens of millions to work from home, as they sought to limit the virus’ spread. To accommodate this flood of remote working, IT departments raced against the clock to build the necessary technology infrastructure.&lt;/p&gt;&lt;p&gt;Now, the dust has settled. The pressure has eased slightly. It’s time to take a breath. But don’t get too comfortable.&lt;/p&gt;&lt;p&gt;The next challenge for IT leaders — and CISOs in particular — is in securing the newly acquired devices and services underpinning remote working. Monitoring and threat detection will likely prove to be the biggest headache.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“Visibility is fundamental to security,” explained Cassio Sampaio, Senior Vice President of Product at Auth0. “You can’t stop attacks you don’t see. It’s always better to see attacks in progress, rather than after they’ve occurred.”&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Many workplaces deployed new hardware and software in record time to ensure the continuity of the business, leaving little time to integrate them into existing security workflows. Sampaio says the big priority for 2022 will be to bring this infrastructure into view.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“With teams working remotely for the foreseeable future, now’s the time for IT teams to start focusing on security, with monitoring and threat detection both high priorities,” Sampaio added. “Hybrid working, as well as the growth of BYOD and cloud computing, has shifted the definition of a security perimeter. It now includes identity systems, as well as firewalls and IPS tools. It’s critical organizations extend their visibility to include these.”&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;2--Secure-by-Default-Becomes-the-Norm&#34;&gt;2. Secure by Default Becomes the Norm&lt;/h2&gt;&lt;p&gt;Security breaches can occur because of simple user errors. In some cases, vendors inadvertently facilitate that by issuing products with insecure default configurations, putting the onus on the customer to harden them.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“Far too often, security is treated as the user’s responsibility. This approach has arguably contributed to several high-profile incidents,” said Shiven Ramji, Chief Product Officer at Auth0.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In August, researchers at Upguard learned some apps running on a popular infrastructure provider were leaking sensitive customer and business data totaling 39m records. This included Covid-19 contact tracing details, payroll records, and biographical customer data.&lt;/p&gt;&lt;p&gt;UpGuard attributed the issue to a default configuration that allowed unauthorized third parties to remotely query the underlying data source. But instead of considering it a bug, the provider described the issue as a well-documented feature.&lt;/p&gt;&lt;p&gt;In the face of massive data breaches and other unwelcome security lapses, we expect vendors will take a more proactive approach in creating guardrails for their customers. A Secure by Design approach will become the default. This philosophy sees products shipped with the most cautious settings by default, accompanied by other vital protective features, including Multi-Factor Authentication (MFA) and Privileged Access Management (PAM)&lt;/p&gt;&lt;h2 id=&#34;3--Malicious-Actors-Will-Exploit-Supply-Chain-Woes&#34;&gt;3. Malicious Actors Will Exploit Supply Chain Woes&lt;/h2&gt;&lt;p&gt;Global supply chains are in disarray. The cost of shipping products between continents spiked during the pandemic, with ships and containers both in short supply. Meanwhile, soaring demand for semiconductors has resulted in widespread shortages of graphics cards, games consoles, and cars, with the “chip drought” expected to last until 2023.&lt;/p&gt;&lt;p&gt;Amid this turmoil, we can expect to see malicious actors take advantage of the situation, exploiting the widespread sense of desperation among businesses and consumers. There is evidence this has already started to occur, with the FBI reporting an increase in Business Email Compromise (BEC) attacks at the start of the year.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“If you’re a school awaiting a shipment of Chromebooks for remote learning, or a retailer expecting stock from overseas, you might not question an unexpected invoice, especially if it comes from someone you know. The urgency may override your skepticism,” said Annybell Villaroel, Security Awareness and Culture Manager at Auth0.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;4--Diversity-of-Thought-and-Skill-Becomes-Regarded-as-an-Asset&#34;&gt;4. Diversity of Thought and Skill Becomes Regarded as an Asset&lt;/h2&gt;&lt;p&gt;The security landscape continuously evolves. In the past decade alone, we’ve witnessed the emergence of malware-as-a-service (MaaS), threat actors expanding by franchising their brand and technology to others, and attacks upon national infrastructure. Deepfake technology and bulk SMS messaging have been used to devastating effect.  &lt;/p&gt;&lt;p&gt;IT teams now face increasingly sophisticated opponents, with attacks delivered in greater volume over a variety of mediums. Combatting this will require organizations to draw from a wider range of skills when filling cybersecurity roles.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“Bad actors have already diversified their thinking. Businesses must do the same,” said Jameeka Aaron, CISO at Auth0. &lt;br/&gt;“I’ve always argued for a holistic approach to information security,” she added. “Technical skills are important, but so are the soft skills.”&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;To find candidates with these skills, organizations will have to broaden their hiring criteria and recruit from places they didn’t previously.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“To respond to this new threat landscape, businesses will have to shift their focus away from GPAs and certifications. You need people who can build bridges within the organization and evangelize good security practices. And going forward, I can imagine hiring managers will recognize communication and language skills as assets, too,” said Aaron.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;5--Consumer-patience-wanes-over-privacy-breaches&#34;&gt;5. Consumer patience wanes over privacy breaches&lt;/h2&gt;&lt;p&gt;Five years ago, Have I Been Pwned — a service that allows members of the public to check whether their personal credentials have been leaked — held records on 1.4 billion accounts. Today, that figure is almost 11.5 billion.&lt;/p&gt;&lt;p&gt;Coinciding with that almost tenfold rise is a greater awareness of security breaches among the general public, and signs their patience has begun to wane. According to Auth0’s latest CIAM survey, 92% of consumers expect businesses to keep their personal information safe.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“A decade ago, security breaches were smaller and less likely to be headline news,” said Sampaio. “Now, they’re front-page news, and they’ve ensnared some of the largest brands in the world. People are tired and scared, and they want businesses to raise their game.”&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Perhaps surprisingly, the survey showed that a larger percentage of businesses, 97%, believe they are obligated to protect their customers’ personal information.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“This figure likely has its roots in many places. Security breaches are bad PR and are hugely costly for the company involved,” said Sampaio.&#xA;“Recent legislation, most notably GDPR, LGPD, and APPI, introduces significant monetary penalties for organizations that experience a security breach. That raises the pressure further.”&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;6--Consumers-Begin-Expecting-Data-Portability---Interoperability&#34;&gt;6. Consumers Begin Expecting Data Portability &amp;amp; Interoperability&lt;/h2&gt;&lt;p&gt;From healthcare and financial services to social networks, consumers increasingly recognize the value of data interoperability and portability. It allows you to seamlessly share medical records between practitioners, to see your banking and credit card information from a single central hub, and port your playlist between streaming services.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“One of the most popular apps in the App Store is Mint, which lets users track spending across their accounts. In the US, FHIR (Fast Healthcare Interoperability Resources) is making it easier for doctors to see the information held on their patients by other medical professionals. From a consumer’s perspective, interoperability is something that makes their lives easier, and data portability allows them to make real choices about who they do business with,” said Lucy McGrath, VP of Privacy at Auth0.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/11v4gylcGVWijlKWnhibFw/f7e091c1883197d00af99737574c649d/cybersecurity-prediction-sep2&#34; alt=&#34;Interoperability&#34;/&gt;&lt;/p&gt;&lt;p&gt;Data portability is already a consumer right in Europe thanks in part to GDPR and a number of global sectoral laws - particularly in finance and banking. McGrath expects demand for both portability and interoperability to increase in 2021 and beyond. The OECD has outlined the detailed benefits and challenges in its report &lt;em&gt;Data portability, interoperability and digital platform competition, OECD Competition Committee Discussion Paper,&lt;/em&gt; &lt;a href=&#34;https://www.oecd.org/daf/competition/data-portability-interoperability-and-digital-platform-competition-2021.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“It’s likely that we’ll see consumers’ expectation for choice - data portability and interoperability - enshrined in more global laws. It’s an exciting space that is spurring innovation - it’s essential the technology supporting the choice continues to protect the privacy of consumers and security of their data in these complex ecosystems” McGrath said.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/top-6-cybersecurity-predictions-for-2022/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Security leaders will increase visibility and diversity of thought to meet consumer (and business) expectations</summary>
  </entry>
  <entry>
    <title>A Tour Through the OWASP Top 10</title>
    <updated>2021-10-19T14:56:00Z</updated>
    <id>tag:auth0.com,2021-10-19:/blog/a-tour-through-the-owasp-top-10/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;October is &lt;a href=&#34;https://www.dhs.gov/national-cyber-security-awareness-month&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;National Cyber Security Awareness Month&lt;/a&gt;. On top of that, OWASP just celebrated its 20th anniversary. To celebrate, we’re going to run through the newly updated &lt;a href=&#34;https://www.owasptopten.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OWASP TOP 10&lt;/a&gt; to remind everyone of how you can better protect your applications, your businesses, and your customers from unlawful and damaging cyber attacks. We’ll also be highlighting where the updates were made and why and throw in some tips on how strengthening your identity solution can help mitigate these threats.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The new Top 10 is still a working draft, and OWASP is soliciting &lt;a href=&#34;https://github.com/OWASP/Top10/issues&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;feedback&lt;/a&gt; on errors and corrections.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;What-is-OWASP-&#34;&gt;What is OWASP?&lt;/h2&gt;&lt;p&gt;The &lt;a href=&#34;https://www.owasp.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Open Web Application Security Project&lt;/a&gt; (OWASP) is a non-profit organization that was set up to help raise awareness around web application security and provides guidance on how to incorporate preventative measures into your applications, infrastructure, and internal processes.  &lt;/p&gt;&lt;p&gt;They have several projects, including &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Juice_Shop_Project&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;an insecure JavaScript application used for security training&lt;/a&gt;, but the one that we’re focusing on today is the newly updated 2021 edition of their list of the top 10 threats to web app security.  &lt;/p&gt;&lt;p&gt;Updated regularly, the OWASP Top 10 lists the main security threats that affect web applications today. Each entry enumerates the threat, shows possible attack vectors, and highlights preventive measures to reduce the risk of such threat. At Auth0, we take steps to mitigate most of the issues outlined below, so when you delegate your authentication needs to us, a lot of this is already taken care of for you.&lt;/p&gt;&lt;p&gt;Let’s run through the list, looking at the threats and what we could be doing to make sure our own applications are secure and examining some features of the Auth0 platform that help to mitigate or entirely remove such threats.&lt;/p&gt;&lt;p&gt;For a high-level overview of the list updates, please refer to this handy chart, provided by &lt;a href=&#34;https://owasp.org/Top10/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OWASP&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3GzLwhF5nSZnDaHvvotBLf/3d6cca202946de7ce52e3ef02865082e/Uploaded_from_A_Tour_Through_the_OWASP_Top_10&#34; alt=&#34;A Tour Through the OWASP Top 10&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;-1--Broken-Access-Control&#34;&gt;#1: Broken Access Control&lt;/h2&gt;&lt;p&gt;Moving up to the #1 spot from its 2017 position at #5, broken access control is an umbrella term for possible weaknesses associated with the implementation of a reliable access control system. Access control systems have the ability to distinguish users based on privileges or permissions and determine who gets what access to content and functions. Weaknesses emerging from access control systems can be leveraged by attackers to elevate their permissions to levels they shouldn’t have. Some examples of this are:  &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Failing to prevent access to ‘members only’ pages when the user is not logged in or does not have the right permissions to view the page.&lt;/li&gt;&lt;li&gt;Not validating URL parameters that could be changed by the user (e.g., swapping one user ID out for another).&lt;/li&gt;&lt;li&gt;Trusting that cookie values have not been altered where the value can be used to determine the user’s role.&lt;/li&gt;&lt;li&gt;Forgoing security considerations in access control token management&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Once Auth0 issues access and ID tokens, they cannot be revoked in the same way as cookies with session IDs for server-side sessions. As a result, tokens should be issued for relatively short periods and then &lt;a href=&#34;https://auth0.com/docs/security/tokens/refresh-tokens&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;refreshed&lt;/a&gt; periodically if the user remains active. You can revoke refresh tokens in case they become compromised. Auth0 treats token revocation as though the token has been potentially exposed to malicious adversaries. Taking care to validate user permissions is key. Do not trust any input that could be modified by the user when it comes to working out what that user can do.&lt;/p&gt;&lt;h2 id=&#34;-2--Cryptographic-Failures&#34;&gt;#2: Cryptographic Failures&lt;/h2&gt;&lt;p&gt;Formerly sitting at #3 and referred to as “Sensitive Data Exposure,” this entry in the OWASP Top 10 focuses on failures related to cryptography (or lack thereof) which often lead to exposure of sensitive data. It also deals with protecting sensitive information under normal operating conditions. It’s about handling sensitive data securely, encrypting data at rest, and being diligent about holding only as much data as you need only for as long as you need it. One of the reasons that the EU’s &lt;a href=&#34;https://auth0.com/gdpr&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;General Data Protection Regulation&lt;/a&gt; (GDPR) exists today is because of improper handling of sensitive personal data.  &lt;/p&gt;&lt;p&gt;Some things that you can do to help prevent sensitive data being stolen from your application include:  &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Making sure that web traffic is encrypted and transmitted over HTTPS using a valid SSL certificate and that &lt;a href=&#34;https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;insecure connections are upgraded where possible&lt;/a&gt;. &lt;a href=&#34;https://letsencrypt.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Let’s Encrypt&lt;/a&gt; issue &lt;strong&gt;free&lt;/strong&gt; SSL certificates, making it very easy to make sure your web traffic is secure.&lt;/li&gt;&lt;li&gt;Encrypting &lt;em&gt;and&lt;/em&gt; signing any browser cookies that contain sensitive information.&lt;/li&gt;&lt;li&gt;Removing any sensitive data that is no longer needed.&lt;/li&gt;&lt;li&gt;Hashing passwords using a strong hashing algorithm such as Bcrypt or PBKDF2.&lt;/li&gt;&lt;li&gt;Encrypting sensitive data at rest.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Note that using automatic database encryption technology could still leave you exposed if an SQL injection attack is successful, as the data has to be read and decrypted at the database level. Doing the encryption and decryption step as part of your core application logic would help mitigate this.&lt;/p&gt;&lt;h2 id=&#34;-3--Injection&#34;&gt;#3: Injection&lt;/h2&gt;&lt;p&gt;Injection flaws are a well-known attack vector and have been around for a long time. This vector particularly impacts legacy code. Despite slipping two spots from its former status as #1, OWASP continues to recognize SQL injection as a common attack that is not only easy to exploit and detect as a weakness in an application but can also have devastating effects if successfully exploited by an attacker. Injection has been expanded to include the former #7 — Cross-site scripting (XSS). This type of attack mostly involves the injection of unsanitized input that causes the user to unwittingly interact with a malicious site or file.  &lt;/p&gt;&lt;p&gt;In most cases, these types of attacks are successful because either:  &lt;/p&gt;&lt;ul&gt;&lt;li&gt;the application relies on user input that has not been sanitized directly in an SQL query, or;&lt;/li&gt;&lt;li&gt;the query itself is not parameterized.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Assuming that all user input could potentially be malicious is a good mantra to have when validating and processing it. &lt;a href=&#34;https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Parameterizing your SQL queries&lt;/a&gt; can also help to protect your datastore from malformed queries manipulating your data in undesirable and damaging ways.  &lt;/p&gt;&lt;p&gt;As an example of what SQL query parameterization looks like, imagine a query that inserts a new user into a database:  &lt;/p&gt;&lt;pre&gt;&lt;code&gt;sql &lt;span&gt;=&lt;/span&gt; db&lt;span&gt;.&lt;/span&gt;prepare &lt;span&gt;&amp;#34;INSERT INTO users (name, email) VALUES (&amp;#39;&lt;span&gt;&lt;span&gt;#{&lt;/span&gt;name&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&amp;#39;, &amp;#39;&lt;span&gt;&lt;span&gt;#{&lt;/span&gt;email&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&amp;#39;)&amp;#34;&lt;/span&gt;&#xA;sql&lt;span&gt;.&lt;/span&gt;execute&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the code snippet above, the values for &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; are inserted into the SQL string without any sanitization performed on the input values. If those input values were to come from form fields, then an attacker could potentially supply malicious values that malform the SQL string and perform an attack. The same query using parameterized values might look like the following:  &lt;/p&gt;&lt;pre&gt;&lt;code&gt;sql &lt;span&gt;=&lt;/span&gt; db&lt;span&gt;.&lt;/span&gt;prepare &lt;span&gt;&amp;#34;INSERT INTO users (name, email) VALUES (?, ?)&amp;#34;&lt;/span&gt;&#xA;sql&lt;span&gt;.&lt;/span&gt;execute &lt;span&gt;&amp;#39;some_user&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;some_user@email.com&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case, the values can be escaped and sanitized by the database library before they are included in the SQL statement. This way the SQL statement cannot be malformed in such a way that it can do damage or expose data.  &lt;/p&gt;&lt;p&gt;In more recent times, &lt;a href=&#34;https://www.owasp.org/index.php/Testing_for_NoSQL_injection&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;NoSQL Injection&lt;/a&gt; has become a factor when using NoSQL databases such as Mongo. Although it doesn’t use SQL, it’s still potentially susceptible to attacks when user input has not been validated and sanitized, as the query itself can be manipulated. Validating your user input and rejecting values that do not conform to an expected format would be a good strategy.&lt;/p&gt;&lt;p&gt;SQL and NoSQL injection attacks are just a subset of a broad category of injection attacks, which also includes &lt;a href=&#34;https://cwe.mitre.org/data/definitions/77.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Command&lt;/a&gt;, &lt;a href=&#34;https://cwe.mitre.org/data/definitions/917.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Expression Language&lt;/a&gt;, and &lt;a href=&#34;https://www.owasp.org/index.php/LDAP_injection&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;LDAP&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Many XSS issues can be mitigated by making sure that any data retrieved from third-party sources is properly encoded according to the context. Also, using frameworks that contain built-in mechanisms for sanitizing user input (such as Ruby on Rails or Play Framework) would go a long way to protecting your applications from these types of attacks.&lt;/p&gt;&lt;h2 id=&#34;-4--Insecure-Design&#34;&gt;#4: Insecure Design&lt;/h2&gt;&lt;p&gt;Making its debut at #4 on this year&amp;#39;s list, Insecure Design is a new entry that focuses on the design and architectural flaws. It is defined by OWASP as a broad category that centers around missing or ineffective control design.&lt;/p&gt;&lt;p&gt;Before we go further into this one, it’s important to understand that there is a difference between insecure design and insecure implementation. We differentiate between design flaws and implementation defects for a reason; they have different root causes and remediation. A secure design can still have implementation defects leading to vulnerabilities that may be exploited. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks.&lt;/p&gt;&lt;p&gt;Insecure design issues can be identified and remediated through effective threat modeling in the design phase. Threat modeling should be performed early in the development cycle when potential issues can be caught early and remedied, preventing a much costlier fix down the line. Threat modeling methods are used to create:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;an abstraction of the system (Assets, components involved, and data flow between them)&lt;/li&gt;&lt;li&gt;personae of potential attackers and attack surfaces&lt;/li&gt;&lt;li&gt;a catalog of potential threats that may arise&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The outcome of threat modeling is documentation that outlines secure design recommendations and requirements for the system under consideration. This helps identify potential vulnerabilities earlier in the software development lifecycle.&lt;/p&gt;&lt;h2 id=&#34;-5--Security-Misconfiguration&#34;&gt;#5: Security Misconfiguration&lt;/h2&gt;&lt;p&gt;Moving up one spot from #6, this entry in the Top 10 list has been identified by OWASP as something that is easy to exploit, easy to discover, and extremely common. It concerns themes such as:  &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Out of date security patches on the host system&lt;/li&gt;&lt;li&gt;Application framework security feature not turned on or improperly configured&lt;/li&gt;&lt;li&gt;Default accounts, passwords, and secure keys left enabled and unchanged&lt;/li&gt;&lt;li&gt;Unused or default ports and services enabled on the host system&lt;/li&gt;&lt;li&gt;Verbose error pages or directory listing turned on&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This item also incorporates aspects of the former #4 on the list, XML External Entities (XXE). An XXE attack is designed to expose a vulnerability in poorly configured XML parsers. Such attacks can be used to expose sensitive data (such as reading system password files) or invoke a &lt;a href=&#34;https://msdn.microsoft.com/en-us/magazine/ee335713.aspx&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Denial of Service&lt;/a&gt; (DoS) attack on a resource.&lt;/p&gt;&lt;p&gt;It is important to make sure that the host system running your applications is updated with the latest security patches, and that your application frameworks have all of the appropriate security features turned on in order to mitigate these types of misconfiguration vulnerabilities.  &lt;/p&gt;&lt;p&gt;Another serious concern in this area is making sure that any secret keys for third-party platforms (such as Auth0) are not committed and uploaded to your source control provider along with the rest of your code, particularly if your application is open source. These can be scanned by attackers using automation tools. Better to store these keys securely separate from your source code.&lt;/p&gt;&lt;h2 id=&#34;-6--Vulnerable-and-Outdated-Components&#34;&gt;#6: Vulnerable and Outdated Components&lt;/h2&gt;&lt;p&gt;This entry jumped three spots from 2017 and was renamed from “using components with known vulnerabilities.” Software these days tends to make use of many third-party components, and so being diligent about which version of these components you are using and keeping them up to date is paramount in protecting your application from attacks that stem from vulnerable dependencies.  &lt;/p&gt;&lt;p&gt;Unfortunately, the number of dependencies that a given application uses — directly or indirectly — can sometimes make identifying and triaging vulnerable components difficult, usually meaning that the task doesn’t get done and developers are completely unaware as to their existence.  &lt;/p&gt;&lt;p&gt;OWASP recommends a few tools that can help to identify and upgrade components that present a security risk, including their own &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Dependency_Check&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OWASP Dependency-Check&lt;/a&gt;. Node.js applications using NPM version 5.10.0 or 6 and above can make use of the ‘&lt;a href=&#34;https://docs.npmjs.com/cli/audit&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;audit&lt;/a&gt;’ command in the terminal, which can &lt;a href=&#34;https://blog.npmjs.org/post/173719309445/npm-audit-identify-and-fix-insecure&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;identify and automatically upgrade dependencies&lt;/a&gt; that have been identified as vulnerable.  &lt;/p&gt;&lt;p&gt;Another popular tool (and one that we use ourselves here at Auth0) for the checking of vulnerabilities in dependencies is &lt;a href=&#34;https://snyk.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Snyk&lt;/a&gt;. Snyk can be set up to evaluate your projects directly in GitHub or can be used as a &lt;a href=&#34;https://snyk.io/docs/using-snyk/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;command-line tool&lt;/a&gt; to act directly on your project code.&lt;/p&gt;&lt;h2 id=&#34;-7--Identification-and-Authentication-Failures&#34;&gt;#7: Identification and Authentication Failures&lt;/h2&gt;&lt;p&gt;Formerly sitting at #2 and called “broken authentication,” this entry is close to our hearts here at Auth0. OWASP acknowledges this as easily exploitable with extreme damage potential.  &lt;/p&gt;&lt;p&gt;Broken authentication covers many things to do with authenticating users with an application or service, including:  &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Automated brute-force attacks using known password lists&lt;/li&gt;&lt;li&gt;Permission of weak or well-known passwords&lt;/li&gt;&lt;li&gt;Storage of plain-text or weakly-hashed passwords over strong hashes&lt;/li&gt;&lt;li&gt;Lack of &lt;a href=&#34;https://auth0.com/docs/multifactor-authentication&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;multi-factor authentication (MFA)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Improper invalidation of a session when logging out or after a period of inactivity&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Implementing features like Auth0’s adaptive MFA into your application will help prevent &lt;a href=&#34;https://auth0.com/blog/what-is-credential-stuffing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;credential stuffing&lt;/a&gt; and other brute force attacks, as the attacker will not be able to complete the authentication steps. Regarding passwords, validating for weak or well-known passwords using a common password list and hashing the user’s password using a strong hashing algorithm (such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Bcrypt&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Bcrypt&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/PBKDF2&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;PBKDF2&lt;/a&gt;) take the protection a step further. Never use a weak hash like MD5, and never store your passwords in plain text.  &lt;/p&gt;&lt;p&gt;It’s also good practice to purposefully use vague login failure messages when your users enter an incorrect username or password. Otherwise, attackers may be able to identify valid accounts that they could use in order to instigate an attack.&lt;/p&gt;&lt;p&gt;The Auth0 identity platform has built-attack protection to address most of the issues around brute-force attacks, including cross-site scripting attacks (XSS) and strong password hashing are all handled for you. Additionally, we make it very easy to turn on and &lt;a href=&#34;https://auth0.com/blog/auth0-introduces-adaptive-mfa/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;integrate MFA into your applications&lt;/a&gt; for that extra level of security.&lt;/p&gt;&lt;h2 id=&#34;-8--Software-and-Data-Integrity-Failures&#34;&gt;#8: Software and Data Integrity Failures&lt;/h2&gt;&lt;p&gt;Another new entry for 2021, this category includes the former #8: Insecure Deserialization. OWASP expanded the definition to include other ways software and data integrity can slip between the cracks and end in calamity. An insecure CI/CD pipeline, using plug-ins or modules from untrusted repositories or CDNs, along with situations where data is serialized in a structure that an attacker can access and modify are all possible vectors of attack covered by this category.&lt;/p&gt;&lt;p&gt;A partial list of security measures to implement includes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensuring your CI/CD processes are securely configured and have access controls in place to enable integrity checks on the code flowing through them.&lt;/li&gt;&lt;li&gt;Incorporate software supply chain security controls to verify the integrity of any modules and plug-ins being used.&lt;/li&gt;&lt;li&gt;Run any unsigned or unencrypted data through an integrity check before usage.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If your application deserializes objects from untrusted sources, you could be open to this kind of attack. The only safe way to prevent these from happening is to not accept serialized objects from untrusted locations. If that’s not possible, OWASP recommends using digital signatures to verify integrity, enforcing strict primitive type checking, and performing deserialization logic inside a low-privilege environment.&lt;/p&gt;&lt;h2 id=&#34;-9--Security-Logging-and-Monitoring-Failures&#34;&gt;#9: Security Logging and Monitoring Failures&lt;/h2&gt;&lt;p&gt;Entry 9 was bumped up from #10 and renamed from “insufficient logging and monitoring.” Being able to discover breaches, attack patterns, and user activity is a key property of a secure system. Without &lt;a href=&#34;https://auth0.com/blog/log-streaming--what-it-is-and-why-it-matters/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sufficient logging&lt;/a&gt; and application monitoring, it will be difficult to ascertain how a system was breached, where the breach came from, and where the holes lie in your application security strategy. If you don’t know where the holes are, you can’t fill them in!  &lt;/p&gt;&lt;p&gt;OWASP recommends that application activity — particularly around authentication and permission activities — are logged in a common format that can be easily processed by a centralized logging system. As much detail about user context should be logged and retained as possible without compromising their personal data, which not only includes personally identifiable information (PII) but also secure keys, access tokens, and session tokens. If detailed information that could be used to identify a person must be recorded for forensics purposes, use a secure data warehouse coupled with tight access controls available only to trusted individuals.&lt;/p&gt;&lt;h2 id=&#34;-10--Server-Side-Request-Forgery--SSRF-&#34;&gt;#10: Server-Side Request Forgery (SSRF)&lt;/h2&gt;&lt;p&gt;Making a debut at #10 this year is Server-Side Request Forgery, an item from OWASPs industry survey. Despite relatively low incidence rates (per the survey), this attack vector rates high in potential impact and damage, so it garnered the #10 spot. SSRF is a flaw that occurs when a web app fails to validate a user-supplied URL. An attacker can exploit this scenario to send a malicious request to any destination server they want.&lt;/p&gt;&lt;p&gt;There are numerous common ways to prevent this type of attack, some are more apt to be overlooked than others:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Disable HTTP redirection&lt;/li&gt;&lt;li&gt;Segment remote access functionality to a secure network separate from potential target resources&lt;/li&gt;&lt;li&gt;Validate all client-supplied input data&lt;/li&gt;&lt;li&gt;Employ a robust identity and access management solution&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Mitigating-Security-Issues-with-Auth0&#34;&gt;Mitigating Security Issues with Auth0&lt;/h2&gt;&lt;p&gt;The Auth0 platform has many features which help protect your application and your users from security attacks. For starters, simply by using our Universal Login offering, you are effectively delegating all the work of making your login pages &lt;a href=&#34;https://auth0.com/docs/hosted-pages/login#why-use-universal-login&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;secure and resilient to attacks&lt;/a&gt;.  &lt;/p&gt;&lt;p&gt;Additionally, &lt;a href=&#34;https://auth0.com/blog/multifactor-authentication-mfa/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Multi-factor Authentication&lt;/a&gt; (MFA) can easily be enabled on any application to provide an extra layer of security when your users log in and decrease the likelihood of unauthorized access. Options for completing the MFA step include receiving push notifications and codes via mobile authenticator apps.  &lt;/p&gt;&lt;p&gt;Auth0’s &lt;a href=&#34;https://auth0.com/docs/anomaly-detection&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Anomaly Detection&lt;/a&gt; includes options for protecting against brute-force attacks, blocking repeated attempts to log in, and notifying designated recipients of such unauthorized attempts. Furthermore, enabling our &lt;a href=&#34;https://auth0.com/breached-passwords&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Breached Password Detection&lt;/a&gt; feature means that your users will be notified if we detect that their credentials were part of a published security breach.  &lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://auth0.com/blog/log-streaming--what-it-is-and-why-it-matters/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Comprehensive logging&lt;/a&gt; is a feature of the Auth0 platform, which can be interrogated for events, such as:  &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Failed login attempts&lt;/li&gt;&lt;li&gt;Failed password changes&lt;/li&gt;&lt;li&gt;Failed Access Token exchanges&lt;/li&gt;&lt;li&gt;Too many failures&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Logs can also be shipped to other providers via &lt;a href=&#34;https://marketplace.auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;marketplace&lt;/a&gt; integrations, such as &lt;a href=&#34;https://auth0.com/docs/extensions/logstash&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Logstash&lt;/a&gt;, &lt;a href=&#34;https://auth0.com/docs/extensions/papertrail&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Papertrail&lt;/a&gt;, and &lt;a href=&#34;https://auth0.com/docs/extensions/splunk&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Splunk&lt;/a&gt;.  &lt;/p&gt;&lt;p&gt;As added protection against &lt;a href=&#34;https://us.norton.com/internetsecurity-wifi-what-is-a-man-in-the-middle-attack.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;man-in-the-middle attacks&lt;/a&gt;, we also enforce HTTPS connections to our services, meaning that any non-HTTPS connections are upgraded according to &lt;a href=&#34;https://tools.ietf.org/html/rfc6797&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;HSTS specifications&lt;/a&gt;.  &lt;/p&gt;&lt;p&gt;Finally, to protect against XXE attacks through SAML, we use &lt;a href=&#34;https://github.com/auth0/xmldom&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;our own fork of XML parsing library &amp;#39;XMLDOM&amp;#39;&lt;/a&gt;, which does not allow DOCTYPE entity parsing at all—a key component of XXE attacks.&lt;/p&gt;&lt;h2 id=&#34;Summary&#34;&gt;Summary&lt;/h2&gt;&lt;p&gt;In this article, we’ve had a brief run through the newly updated OWASP Top 10 and examined the main threats to web application security that exist today. We&amp;#39;ve also considered some of the possible mitigations against such threats and how we can all do better to help protect our businesses and our users from problems arising as a result of poor and insecure implementation.&lt;/p&gt;&lt;p&gt;Some of these solutions are easy to implement and take only a short amount of time, while others require a bit more thought and planning to do properly. However, anything that can be done to improve the security of your products — especially where personal information and other sensitive data is concerned — can only be beneficial, and could be a key factor in &lt;a href=&#34;https://auth0.com/blog/the-worst-data-breaches-of-2021-q1-and-q2/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;preventing a data disaster&lt;/a&gt; should an attack be attempted.&lt;/p&gt;&lt;p&gt;We&amp;#39;ve also looked at several key features of the Auth0 platform that bolster the security of web applications and APIs, from relieving you of a lot of these issues through Universal Login to rich audit trails through comprehensive logging. To start taking advantage, &lt;a href=&#34;https://auth0.com/signup&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free account today&lt;/a&gt; or &lt;a href=&#34;https://auth0.com/contact-us&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;reach out to our team of identity experts&lt;/a&gt; to have your questions answered.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/a-tour-through-the-owasp-top-10/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">A quick look at the refreshed OWASP Top 10 to celebrate Cybersecurity Awareness Month</summary>
  </entry>
  <entry>
    <title>Exploring the Auth0 ASP.NET Core Authentication SDK</title>
    <updated>2021-10-15T15:05:00Z</updated>
    <id>tag:auth0.com,2021-10-15:/blog/exploring-auth0-aspnet-core-authentication-sdk/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Auth0 brings you the new &lt;a href=&#34;https://github.com/auth0/auth0-aspnetcore-authentication&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ASP.NET Core Authentication SDK&lt;/a&gt;, which improves your development experience and better integrates with Auth0 features! Let&amp;#39;s take a tour through the main features of the SDK to see how easy it becomes to integrate your ASP.NET applications with Auth0.&lt;/p&gt;&lt;h2 id=&#34;The-SDK-Overview&#34;&gt;The SDK Overview&lt;/h2&gt;&lt;p&gt;So far, you were used to relying on the standard &lt;code&gt;Microsoft&lt;span&gt;.&lt;/span&gt;AspNetCore&lt;span&gt;.&lt;/span&gt;Authentication&lt;span&gt;.&lt;/span&gt;OpenIdConnect&lt;/code&gt; package to integrate your ASP.NET application with Auth0. That library does its job very well. However, when you move away from implementing the simple login and logout, your code starts becoming verbose until it gets messy.&lt;/p&gt;&lt;p&gt;You can mitigate this issue by &lt;a href=&#34;https://auth0.com/blog/using-csharp-extension-methods-for-auth0-authentication/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;implementing your authentication with C# extension methods&lt;/a&gt;. But why do it yourself when the experts at Auth0 can provide you with a ready-to-use SDK?&lt;/p&gt;&lt;p&gt;The  &lt;a href=&#34;https://github.com/auth0/auth0-aspnetcore-authentication&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ASP.NET Core Authentication SDK&lt;/a&gt; allows you to write less code to integrate Auth0 authentication and authorization into your ASP.NET applications. It simplifies configuration, supports additional query parameters and refresh tokens, natively supports &lt;a href=&#34;https://auth0.com/docs/organizations&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Organizations&lt;/a&gt; and user invitations. It is actually a wrapper around the &lt;code&gt;Microsoft&lt;span&gt;.&lt;/span&gt;AspNetCore&lt;span&gt;.&lt;/span&gt;Authentication&lt;span&gt;.&lt;/span&gt;OpenIdConnect&lt;/code&gt; library, but it brings you a standard and easy way to integrate Auth0 into your applications.&lt;/p&gt;&lt;p&gt;You can use the SDK for all your ASP.NET applications that require authentication, such as ASP.NET MVC apps, Razor web apps, and Blazor server apps.&lt;/p&gt;&lt;h2 id=&#34;Install-the-ASP-NET-Core-Authentication-SDK&#34;&gt;Install the ASP.NET Core Authentication SDK&lt;/h2&gt;&lt;p&gt;You can install the Auth0 ASP.NET Core SDK by using the NuGet Package Manager UI in Visual Studio, as shown below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/52AB2b6XDotBDpBlPPR1F7/f4b71a1b33c3cecb56b46d96b2e27788/installing-auth0-aspnet-core-authentication-sdk.png&#34; alt=&#34;Installing the Auth0 ASP.NET SDK with NuGet Package Manager UI&#34;/&gt;&lt;/p&gt;&lt;p&gt;You can also install it by running the following command in the Package Manager Console:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;Install-Package&lt;/span&gt; Auth0&lt;span&gt;.&lt;/span&gt;AspNetCore&lt;span&gt;.&lt;/span&gt;Authentication&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or you can use the following command in a terminal window:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;dotnet &lt;span&gt;add&lt;/span&gt; package Auth0.AspNetCore.Authentication&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Independently of your preferred approach, you will get the &lt;code&gt;Auth0&lt;span&gt;.&lt;/span&gt;AspNetCore&lt;span&gt;.&lt;/span&gt;Authentication&lt;/code&gt; dependency in your ASP.NET project.&lt;/p&gt;&lt;h2 id=&#34;The-Basic-Login-Use-Case&#34;&gt;The Basic Login Use Case&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s start to take a look at the way the new SDK improves your developer experience. Of course, you need an Auth0 account to integrate your ASP.NET application with Auth0. If you haven&amp;#39;t, you can &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free one&lt;/a&gt; right now. Follow &lt;a href=&#34;https://auth0.com/docs/quickstart/webapp/aspnet-core#configure-auth0&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the Auth0 ASP.NET Core Authentication SDK quickstart to register your application and get your application keys&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;The following is the typical code you write to enable authentication in your ASP.NET application when using &lt;code&gt;Microsoft&lt;span&gt;.&lt;/span&gt;AspNetCore&lt;span&gt;.&lt;/span&gt;Authentication&lt;span&gt;.&lt;/span&gt;OpenIdConnect&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt; services&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;DefaultAuthenticateScheme &lt;span&gt;=&lt;/span&gt; CookieAuthenticationDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;DefaultSignInScheme &lt;span&gt;=&lt;/span&gt; CookieAuthenticationDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;DefaultChallengeScheme &lt;span&gt;=&lt;/span&gt; CookieAuthenticationDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddCookie&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddOpenIdConnect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; options &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Authority &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ClientId &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientId&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;CallbackPath &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;PathString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/callback&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;TokenValidationParameters &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;TokenValidationParameters&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      NameClaimType &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Events &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;OpenIdConnectEvents&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      OnRedirectToIdentityProviderForSignOut &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; logoutUri &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/v2/logout?client_id=&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientId&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; postLogoutUri &lt;span&gt;=&lt;/span&gt; context&lt;span&gt;.&lt;/span&gt;Properties&lt;span&gt;.&lt;/span&gt;RedirectUri&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsNullOrEmpty&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;postLogoutUri&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;          &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;postLogoutUri&lt;span&gt;.&lt;/span&gt;&lt;span&gt;StartsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;// transform to absolute&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; request &lt;span&gt;=&lt;/span&gt; context&lt;span&gt;.&lt;/span&gt;Request&lt;span&gt;;&lt;/span&gt;&#xA;            postLogoutUri &lt;span&gt;=&lt;/span&gt; request&lt;span&gt;.&lt;/span&gt;Scheme &lt;span&gt;+&lt;/span&gt; &lt;span&gt;&amp;#34;://&amp;#34;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; request&lt;span&gt;.&lt;/span&gt;Host &lt;span&gt;+&lt;/span&gt; request&lt;span&gt;.&lt;/span&gt;PathBase &lt;span&gt;+&lt;/span&gt; postLogoutUri&lt;span&gt;;&lt;/span&gt;&#xA;          &lt;span&gt;}&lt;/span&gt;&#xA;          logoutUri &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;&amp;amp;returnTo=&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; Uri&lt;span&gt;.&lt;/span&gt;&lt;span&gt;EscapeDataString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;postLogoutUri&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        context&lt;span&gt;.&lt;/span&gt;Response&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Redirect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;logoutUri&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        context&lt;span&gt;.&lt;/span&gt;&lt;span&gt;HandleResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;CompletedTask&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I will not go through that code to explain every single step. You just need to know it implements the login and logout features in your applications by relying on the &lt;a href=&#34;https://auth0.com/docs/login/universal-login&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Universal Login&lt;/a&gt; page.&lt;/p&gt;&lt;p&gt;By using the Auth0 ASP.NET Core Authentication SDK, your code shortens as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt; services&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuth0WebAppAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Domain &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ClientId &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientId&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Impressive, isn&amp;#39;t it? 😲&lt;/p&gt;&lt;p&gt;The SDK takes care of all the configuration stuff you previously needed to do manually. And that&amp;#39;s just the beginning! 🎉&lt;/p&gt;&lt;h2 id=&#34;Get-an-Access-Token&#34;&gt;Get an Access Token&lt;/h2&gt;&lt;p&gt;What if you want to call an API from your ASP.NET application? In this case, you need to &lt;a href=&#34;https://auth0.com/docs/security/tokens/access-tokens/get-access-tokens#control-access-token-audience&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;request an access token for a specific audience&lt;/a&gt; to Auth0.&lt;/p&gt;&lt;p&gt;Doing it without the SDK would require a code similar to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt; services&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;DefaultAuthenticateScheme &lt;span&gt;=&lt;/span&gt; CookieAuthenticationDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;DefaultSignInScheme &lt;span&gt;=&lt;/span&gt; CookieAuthenticationDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;DefaultChallengeScheme &lt;span&gt;=&lt;/span&gt; CookieAuthenticationDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddCookie&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddOpenIdConnect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; options &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Authority &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ClientId &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientId&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;//👇new code&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ClientSecret &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientSecret&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;SaveTokens &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ResponseType &lt;span&gt;=&lt;/span&gt; OpenIdConnectResponseType&lt;span&gt;.&lt;/span&gt;Code&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;//👆new code&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;CallbackPath &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;PathString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/callback&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;TokenValidationParameters &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;TokenValidationParameters&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      NameClaimType &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Events &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;OpenIdConnectEvents&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      OnRedirectToIdentityProviderForSignOut &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; logoutUri &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/v2/logout?client_id=&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientId&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; postLogoutUri &lt;span&gt;=&lt;/span&gt; context&lt;span&gt;.&lt;/span&gt;Properties&lt;span&gt;.&lt;/span&gt;RedirectUri&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsNullOrEmpty&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;postLogoutUri&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;          &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;postLogoutUri&lt;span&gt;.&lt;/span&gt;&lt;span&gt;StartsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;// transform to absolute&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; request &lt;span&gt;=&lt;/span&gt; context&lt;span&gt;.&lt;/span&gt;Request&lt;span&gt;;&lt;/span&gt;&#xA;            postLogoutUri &lt;span&gt;=&lt;/span&gt; request&lt;span&gt;.&lt;/span&gt;Scheme &lt;span&gt;+&lt;/span&gt; &lt;span&gt;&amp;#34;://&amp;#34;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; request&lt;span&gt;.&lt;/span&gt;Host &lt;span&gt;+&lt;/span&gt; request&lt;span&gt;.&lt;/span&gt;PathBase &lt;span&gt;+&lt;/span&gt; postLogoutUri&lt;span&gt;;&lt;/span&gt;&#xA;          &lt;span&gt;}&lt;/span&gt;&#xA;          logoutUri &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;&amp;amp;returnTo=&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; Uri&lt;span&gt;.&lt;/span&gt;&lt;span&gt;EscapeDataString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;postLogoutUri&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        context&lt;span&gt;.&lt;/span&gt;Response&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Redirect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;logoutUri&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        context&lt;span&gt;.&lt;/span&gt;&lt;span&gt;HandleResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;CompletedTask&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;      &lt;span&gt;//👇new code&lt;/span&gt;&#xA;      OnRedirectToIdentityProvider &lt;span&gt;=&lt;/span&gt; context &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt;&#xA;        context&lt;span&gt;.&lt;/span&gt;ProtocolMessage&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetParameter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;audience&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Audience&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;&lt;span&gt;FromResult&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;      &lt;span&gt;//👆new code&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Basically, you need to add a few more lines to the previous code in order to change the OAuth flow, provide the client secret, enable token saving, and attach the audience value to the authorization request.&lt;/p&gt;&lt;p&gt;The equivalent code to achieve the same result using the SDK is as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt; services&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuth0WebAppAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Domain &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ClientId &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientId&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ClientSecret &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientSecret&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;WithAccessToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Audience &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Audience&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Aren&amp;#39;t you excited about this? 💥 Your code will be more concise, clean, and clear!&lt;/p&gt;&lt;h2 id=&#34;Refresh-Tokens-As-Magic&#34;&gt;Refresh Tokens As Magic&lt;/h2&gt;&lt;p&gt;And in case you need a &lt;a href=&#34;https://auth0.com/docs/security/tokens/refresh-tokens&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;refresh token&lt;/a&gt;? 🤔 Nothing could be simpler. Just set a flag:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt; services&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuth0WebAppAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Domain &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ClientId &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientId&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ClientSecret &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientSecret&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;WithAccessToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Audience &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Audience&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;UseRefreshTokens &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;   &lt;span&gt;//👈 new code&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Compare it with the code you need to add to the SDK-less code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt; services&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;//...the code to configure authentication...&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddCookie&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Events&lt;span&gt;.&lt;/span&gt;OnValidatePrincipal &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; options &lt;span&gt;=&lt;/span&gt; context&lt;span&gt;.&lt;/span&gt;HttpContext&lt;span&gt;.&lt;/span&gt;RequestServices&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&lt;span&gt;GetRequiredService&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Auth0Options&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; accessToken&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;Properties&lt;span&gt;.&lt;/span&gt;Items&lt;span&gt;.&lt;/span&gt;&lt;span&gt;TryGetValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;.Token.access_token&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; accessToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;options&lt;span&gt;.&lt;/span&gt;UseRefreshTokens&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; refreshToken&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;Properties&lt;span&gt;.&lt;/span&gt;Items&lt;span&gt;.&lt;/span&gt;&lt;span&gt;TryGetValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;.Token.refresh_token&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; refreshToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;          &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; now &lt;span&gt;=&lt;/span&gt; DateTimeOffset&lt;span&gt;.&lt;/span&gt;Now&lt;span&gt;;&lt;/span&gt;&#xA;          &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; expiresAt &lt;span&gt;=&lt;/span&gt; DateTimeOffset&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Parse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;Properties&lt;span&gt;.&lt;/span&gt;Items&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;.Token.expires_at&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;          &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; leeway &lt;span&gt;=&lt;/span&gt; &lt;span&gt;60&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;          &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; difference &lt;span&gt;=&lt;/span&gt; DateTimeOffset&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Compare&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;expiresAt&lt;span&gt;,&lt;/span&gt; now&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddSeconds&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;leeway&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;          &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; isExpired &lt;span&gt;=&lt;/span&gt; difference &lt;span&gt;&amp;lt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;          &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;isExpired &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;refreshToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; &lt;span&gt;RefreshTokens&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options&lt;span&gt;,&lt;/span&gt; refreshToken&lt;span&gt;,&lt;/span&gt; auth0Options&lt;span&gt;.&lt;/span&gt;Backchannel&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;result &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;              context&lt;span&gt;.&lt;/span&gt;Properties&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UpdateTokenValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;access_token&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; result&lt;span&gt;.&lt;/span&gt;AccessToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;              context&lt;span&gt;.&lt;/span&gt;Properties&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UpdateTokenValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;refresh_token&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; result&lt;span&gt;.&lt;/span&gt;RefreshToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;              context&lt;span&gt;.&lt;/span&gt;Properties&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UpdateTokenValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;id_token&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; result&lt;span&gt;.&lt;/span&gt;IdToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;              context&lt;span&gt;.&lt;/span&gt;Properties&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UpdateTokenValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;expires_at&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; DateTimeOffset&lt;span&gt;.&lt;/span&gt;Now&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddSeconds&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;result&lt;span&gt;.&lt;/span&gt;ExpiresIn&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ToString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;o&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;            &lt;span&gt;else&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;              context&lt;span&gt;.&lt;/span&gt;Properties&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UpdateTokenValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;refresh_token&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;            context&lt;span&gt;.&lt;/span&gt;ShouldRenew &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;          &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt; &#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddOpenIdConnect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; options &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;//...the code to configure OpenID Connect...&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should take care of all the details about determining the token expiration and requesting a new access token. The Auth0 ASP.NET Core Authentication SDK does this on your behalf. Do you agree it&amp;#39;s magic? ✨&lt;/p&gt;&lt;h2 id=&#34;Auth0-Organizations-Support&#34;&gt;Auth0 Organizations Support&lt;/h2&gt;&lt;p&gt;Not only the ASP.NET Core Authentication SDK lets you deal with standard OpenID Connect and OAuth duties, but it also simplifies your life in using specific Auth0 features such as &lt;a href=&#34;https://auth0.com/docs/organizations&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Organizations&lt;/a&gt;. By using Organizations, you can represent logical groups of users such as teams, partners, business customers, and so on. They can have specific policies, branding, and other customizations. So, to enable a user to log in to an organization, you need to specify it in your ASP.NET application. The following is an example of how you can accomplish this by using the SDK:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt; services&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuth0WebAppAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Domain &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ClientId &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientId&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Organization &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Organization&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pretty straightforward, right? 🙌 Of course, you can do more with Organizations. Please, take a look at &lt;a href=&#34;https://github.com/auth0/auth0-aspnetcore-authentication#organization&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the ASP.NET Core Authentication SDK documentation&lt;/a&gt; to learn more.&lt;/p&gt;&lt;h2 id=&#34;Customization&#34;&gt;Customization&lt;/h2&gt;&lt;p&gt;At this point, you may think that having an SDK forces you to use its methods to work with OpenID Connect and OAuth. So you no longer have the freedom of adding extra parameters to the authorization request, for example. Or you may think you can&amp;#39;t anymore apply your custom token validation or freely manage OpenID Connect events.&lt;/p&gt;&lt;p&gt;I have good news: you don&amp;#39;t need to worry about this. The ASP.NET Core Authentication SDK leaves you the freedom to customize many things.&lt;/p&gt;&lt;p&gt;For example, you can add custom parameters to the authorization request. Look at the following example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt; services&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuth0WebAppAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Domain &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ClientId &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientId&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;LoginParameters &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Dictionary&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &#xA;      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;&amp;#34;screen_hint&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;signup&amp;#34;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here you configured your ASP.NET application to attach the &lt;code&gt;screen_hint&lt;/code&gt; parameter with the &lt;code&gt;signup&lt;/code&gt; value  to the authorization request. In this specific case, the user will see the signup window instead of the default login screen.&lt;/p&gt;&lt;p&gt;But you can also apply your custom validation, as in the following case:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt; services&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuth0WebAppAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Domain &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ClientId &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientId&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;OpenIdConnectEvents &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;OpenIdConnectEvents&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      OnTokenValidated &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; birthDateClaim &lt;span&gt;=&lt;/span&gt; context&lt;span&gt;.&lt;/span&gt;SecurityToken&lt;span&gt;.&lt;/span&gt;Claims&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SingleOrDefault&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;claim &lt;span&gt;=&amp;gt;&lt;/span&gt; claim&lt;span&gt;.&lt;/span&gt;Type &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#34;birthdate&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;?.&lt;/span&gt;Value&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;birthDateClaim&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;          context&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Fail&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;The &amp;#39;birthdate&amp;#39; claim must be present in the ID token.&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;            &#xA;        &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;CompletedTask&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, the ASP.NET Core Authentication SDK exposes the &lt;code&gt;OpenIdConnectEvents&lt;/code&gt; option to let you handle the standard events triggered by the &lt;code&gt;Microsoft&lt;span&gt;.&lt;/span&gt;AspNetCore&lt;span&gt;.&lt;/span&gt;Authentication&lt;span&gt;.&lt;/span&gt;OpenIdConnect&lt;/code&gt; library. This way, you can combine the SDK simplicity with the standard library behavior to get the maximum flexibility.&lt;/p&gt;&lt;h2 id=&#34;Summary&#34;&gt;Summary&lt;/h2&gt;&lt;p&gt;Now you should have a clearer idea about the benefits you have by using the ASP.NET Core Authentication SDK to integrate Auth0 into your ASP.NET applications: less code, more readability, flexibility, and best practices inside. So, give a try to the SDK and integrate your &lt;a href=&#34;https://auth0.com/docs/quickstart/webapp/aspnet-core&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ASP.NET applications with Auth0 by following the QuickStart&lt;/a&gt;. Check out &lt;a href=&#34;https://auth0.github.io/auth0-aspnetcore-authentication/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the SDK documentation&lt;/a&gt; to learn more.&lt;/p&gt;&lt;p&gt;You can also &lt;a href=&#34;https://github.com/auth0/auth0-aspnetcore-authentication#contributing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;contribute to it&lt;/a&gt;: it&amp;#39;s open-source!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/exploring-auth0-aspnet-core-authentication-sdk/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">The new Auth0 ASP.NET Core Authentication SDK makes adding authentication and authorization to your web applications a breeze. Learn how.</summary>
  </entry>
  <entry>
    <title>The Future of Healthcare Relies on Adaptation</title>
    <updated>2021-10-14T14:41:00Z</updated>
    <id>tag:auth0.com,2021-10-14:/blog/the-future-of-healthcare-relies-on-adaptation/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;The delivery of healthcare services has gone through an unprecedented transformation during the COVID-19 pandemic. COVID-19 has accelerated the move to a digital-forward model and elevated trends that were previously slow to be adopted. In addition, the final rule of the 21st Century Cures Act, effective June 30, 2020, implements provisions to “advance interoperability and support the access, exchange, and use of electronic health information”.&lt;/p&gt;&lt;p&gt;Technology leaders in the healthcare industry will drive positive business outcomes by continuing to innovate in ways that meet the demands of consumers while also meeting security compliance requirements. Healthcare companies have an opportunity to leverage the current momentum to capture more market share by providing cutting-edge, secure experiences for patients, providers, payers, and insurance companies.&lt;/p&gt;&lt;h2 id=&#34;Consumer-Demands&#34;&gt;Consumer Demands&lt;/h2&gt;&lt;p&gt;Consumer habits have permanently changed across industries over the past 18 months. Healthcare companies providing the best digital experiences will be the ones to attract consumers. In healthcare, consumers include the patients themselves, but could also be caregivers, parents, or patient representatives. Consumers are also the medical staff providing care. A digital experience that makes it easy to share data, retrieve lab results, check coverage, pay bills, etc. will make a big difference to all of these kinds of consumers. It’s likely that in healthcare, consumers will follow the best user experience, as they have in other industries.&lt;/p&gt;&lt;p&gt;A &lt;a href=&#34;https://www.healthcaredive.com/news/convenience-more-important-to-patients-than-quality-of-care-survey-finds/545365/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;survey&lt;/a&gt; of healthcare consumers found that 51% said convenience and access to care are the most important factors in their decision-making. Convenience ranked above insurance coverage (46%), doctor/nurse conduct (44%), brand reputation (40%), and quality of care (35%). Healthcare companies that continue to require patients and providers to use antiquated and disconnected methods to share information with hospitals, specialists, and insurance companies will become less compelling, leading consumers to choose something else. The same applies to providers that stop offering telehealth options for patients. Although the personal experience of an in-person visit cannot be replicated via Zoom, most consumers and providers enjoy having the option when needed.&lt;/p&gt;&lt;p&gt;The intersection of factors such as COVID-19 driving the rise in telehealth services, consumer demand for improved digital access to healthcare data, and recent regulatory mandates creates a shifting technology landscape in healthcare.&lt;/p&gt;&lt;h2 id=&#34;Enabling-Patient-Control-over-Data--Interoperability-with-SMART-on-FHIR&#34;&gt;Enabling Patient Control over Data: Interoperability with SMART on FHIR&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://auth0.com/blog/what-smart-on-fhir-means-for-the-future-of-healthcare/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SMART on FHIR&lt;/a&gt; is an API that facilitates the exchange of healthcare data. It is part of the 21st Century Cures Act certification requirements. SMART on FHIR is built on open standards including HL7’s FHIR, OAuth2, and OpenID Connect. Developers have the ability to write apps that will run anywhere in the healthcare system. The SMART on FHIR Patient Access API and Provider Directory API came into force on July 1, 2021. The Payer-to-Payer Data Exchange is applicable from January 1, 2022.&lt;/p&gt;&lt;p&gt;SMART on FHIR creates the potential for interoperability and will enable patients, providers, payers, and any other healthcare-related organizations to securely share information, giving patients control over their healthcare data. Patients will no longer have to request records and wait to have them mailed or picked up. Patient control over how and when information is shared will lead to a smoother experience for all parties.&lt;/p&gt;&lt;h2 id=&#34;Unlocking-Interoperability--Identity-as-the-Key-to-the-Digital-Front-Door&#34;&gt;Unlocking Interoperability: Identity as the Key to the Digital Front Door&lt;/h2&gt;&lt;h3 id=&#34;ID-linking&#34;&gt;ID linking&lt;/h3&gt;&lt;p&gt;Identity is the key to the digital front door for any healthcare transaction, and also provides the backbone to securely interconnecting systems. Many users have multiple identities that they use to log in to various applications. Frequently, patients will have to reenter credentials to access every application or portal. This approach is frustrating for patients and increases the risk of phishing attacks and other security breaches. The ability to link disparate identities through a common platform can reduce user friction and increase security.&lt;/p&gt;&lt;p&gt;Centralizing patient identity and providing a seamless SSO experience between all of those identities helps consumers reduce the number of login credentials they need to access their data. Each login attempt can be evaluated for malicious or risky behavior and properly blocked or logged. This protects the user, resources, and the applications or platforms they use. Using this approach creates a patient-focused ecosystem leading to better service and outcomes.&lt;/p&gt;&lt;h3 id=&#34;Managing-identity&#34;&gt;Managing identity&lt;/h3&gt;&lt;p&gt;Many healthcare companies have developed in-house custom solutions for managing identity and access to their applications. This traditional stovepiped approach worked when there were limited numbers of users and much of the data remained in-house. Custom solutions don’t easily scale or integrate with other systems. They also require a significant amount of maintenance and IT costs. This can lead to end-user friction in the form of multiple passwords to manage, an inconsistent experience, and a lack of adoption.&lt;/p&gt;&lt;p&gt;With these in-house solutions, organizations are also responsible for supporting end-users with account management activities, such as password reset and account recovery and handling costly help desk tickets. Poor identity management creates a poor user experience. Automating user account functions, such as signup, password reset, and self-enrollment in MFA greatly reduces friction and inefficiency.&lt;/p&gt;&lt;h3 id=&#34;Data-security&#34;&gt;Data security&lt;/h3&gt;&lt;p&gt;Securing patient data should be the top consideration for any solution, yet based on a recent &lt;a href=&#34;https://marketing.rsvpportal.com/acton/attachment/3648/f-49df9907-d20f-4de6-87f4-ac7736211d20/1/-/-/-/-/Okta_Healthcare_Pulse_Survey_Whitepaper.pdf?sid=TV2:fx7gELoz4&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;survey&lt;/a&gt; of 100 healthcare executives, speed was prioritized over security with the move to telehealth during COVID-19. Even more worryingly, 95% of these leaders admitted that confidential patient records are only secured with a password. Providing built-in security features, such as multi-factor authentication, bot detection, breached password detection, suspicious IP throttling, and brute force detection can significantly increase the security posture of protecting critical data. Cyber attacks are increasingly common, and the cost of a breach can be devastating. In addition, new security threats are constantly exposed.&lt;/p&gt;&lt;h3 id=&#34;Secure-identity-and-focus-on-core-competencies&#34;&gt;Secure identity and focus on core competencies&lt;/h3&gt;&lt;p&gt;Most healthcare organizations are and should be, focused on their core business pursuits, such as patient care or processing insurance claims. Information security and identity management is not their core business, yet is a critical factor in compliant, secure business operations. Focusing on core competencies while ensuring secure identity management doesn’t mean giving up control of identity management but instead places the responsibility for the technical aspects of identity building and protection in the hands of experts who work with identity every day.&lt;/p&gt;&lt;p&gt;Identity and security are complex and require a particular skill set to ensure that data is properly handled and protected. As the industry moves to meet the compliance requirements for interoperability, this leaves the systems dependent on each other to properly secure and protect user data, including usernames and passwords. Choosing an identity provider that focuses on security as their core business can greatly reduce the burden and risk for healthcare companies.&lt;/p&gt;&lt;p&gt;Auth0 has helped many healthcare customers provide their users with a highly customized, secure, seamless user experience while driving down costs and reducing risk. To learn more, &lt;a href=&#34;https://auth0.com/contact-us&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;reach out to the team at Auth0&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/the-future-of-healthcare-relies-on-adaptation/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Interoperability, liberating patient data, and the identity lynchpin</summary>
  </entry>
  <entry>
    <title>Okta + Auth0 Showcase 2021: Identity for All</title>
    <updated>2021-10-13T15:42:00Z</updated>
    <id>tag:auth0.com,2021-10-13:/blog/okta-auth0-showcase-2021-identity-for-all/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Today, we’re bringing you Okta’s third &lt;a href=&#34;https://www.okta.com/showcase/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;Showcase&lt;/strong&gt;&lt;/a&gt;, joining forces virtually with teammates, customers, and partners from around the world for our annual fall event that provides an inside look at how the company is innovating. &lt;/p&gt;&lt;p&gt;This year, it’s not just Okta taking the stage: it’s &lt;strong&gt;Okta + Auth0&lt;/strong&gt;. Six months ago, we officially embarked on a mission to join our two companies and lead together in the customer identity and access management (CIAM) market with our shared worldview for a neutral, independent identity cloud. While we came from very different backgrounds, we both built our companies to innovate on identity from the ground up and prioritize customer success—so we connect on helping customers drive outcomes that matter most to them. Our cultures are strongly aligned with a strong focus on transparency and innovation, all with trust at the center. &lt;/p&gt;&lt;p&gt;Since the acquisition closed in May, we’ve learned so much about our teams, companies, and technology. This partnership (eight years in the making!) has exceeded expectations beyond what we’ve imagined and has reinforced our commitment to continue investing in both platforms. We’ve invited both teams here today to share our joint story of growth, momentum, and strategy in the CIAM market. &lt;/p&gt;&lt;h2 id=&#34;The-World-Is-Shifting-to-Identity-First&#34;&gt;The World Is Shifting to Identity-First&lt;/h2&gt;&lt;p&gt;It has become clear that the role of identity in the world has evolved, and we’re here to address that shift. Together, Okta and Auth0 are reimagining identity’s role in every organization’s technology strategy. Cloud, mobile, and Bring Your Own Device (BYOD) have transformed the dynamics of the digital world over the past decade. At the same time, IT is struggling to keep up with all of these changes, and developers are more burdened than ever to build more applications quickly and without sacrificing security and user experience. Identity is the perimeter, and it’s at the heart of every technology choice and transformation. Governments globally are shifting to identity-first through initiatives like MFA mandates with Zero Trust security architecture. Customer experiences must be identity-first as companies rush to secure platforms and provide seamless, personalized experiences amidst a growing number of data breaches in the wake of the pandemic. &lt;/p&gt;&lt;p&gt;This Showcase, we’re thrilled to introduce product innovation and joint momentum on the heels of the acquisition—all with the goal of helping organizations thrive in an identity-first world.&lt;/p&gt;&lt;h2 id=&#34;Adopting-an-Identity-First-Strategy-with-Okta---Auth0&#34;&gt;Adopting an Identity-First Strategy with Okta + Auth0&lt;/h2&gt;&lt;p&gt;The digital world is heterogeneous: we all work across multiple stacks, many clouds, and myriad applications. Digital experiences are connecting more companies, customers, and employees than ever before. Okta understands this need to connect. Through the &lt;a href=&#34;https://www.okta.com/okta-integration-network/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Okta Integration Network&lt;/a&gt;, we have the broadest and deepest set of independent and neutral integrations to securely connect to everything. And through our Workflows technology, we empower companies to weave the best employee and customer experience throughout those integrations and applications.&lt;/p&gt;&lt;p&gt;Okta Workflows is the key to simplifying and automating identity processes in an identity-first world at scale. We first introduced this technology to customers with democratization at the heart. Democratizing identity means providing everyone with the choice of tools and technology needed to harness it. Today we’re excited to announce &lt;strong&gt;Workflows for Any Identity Use Case&lt;/strong&gt;, meaning our identity automation and orchestration solution is now available as a standalone product for all customers, including a no-cost option for up to five flows. We really mean anyone: anyone at any company, development or non-development teams alike, can now leverage the power and extensibility of identity in a low or no-code user interface. &lt;/p&gt;&lt;p&gt;What’s more, we’re also introducing new connectors, including Jamf, Microsoft Teams, ITSM (FreshService), and alert management (OpsGenie), along with new templates such as app access requests with Slack. Okta Workflows helps customers solve highly complex use cases and now enables even more innovation to happen more securely and faster. &lt;/p&gt;&lt;p&gt;We are also announcing the availability of the &lt;strong&gt;Auth0 Identity Platform on Microsoft Azure&lt;/strong&gt;, offering customers the ability to choose Azure as a private cloud deployment option from Auth0. This addition provides customers with another secure cloud deployment option that better aligns with their technology stack and supports regional data residency needs, unlocking a comprehensive CIAM solution for organizations in regions where Azure has a larger infrastructure presence. Ultimately, more flexibility means more ways to deploy identity in the way that works best for each business. &lt;/p&gt;&lt;h2 id=&#34;Accelerating-Momentum---Innovation-in-the-CIAM-Market&#34;&gt;Accelerating Momentum &amp;amp; Innovation in the CIAM Market&lt;/h2&gt;&lt;p&gt;Every company connecting directly with customers must manage customer identities and the massive volumes of data and insight accompanying them. An identity-first, CX strategy is critical in a world where businesses feel increased urgency around digital transformation, security threats, and growing user experience demands.&lt;/p&gt;&lt;p&gt;As a joint Okta + Auth0 team, we can better meet the demands of a fast-growing CIAM market. When we look closely inside our customers’ technology environments, we see a wide range of situations—some are digital natives, others are building their first apps to connect with customers. While some live fully in the cloud, others choose a hybrid model, and some still manage massive legacy on-premises deployments. It’s within this diversity of technology environments that we see the biggest opportunity to make a difference.&lt;/p&gt;&lt;p&gt;To further our offerings in this space, we’re rolling out new CIAM capabilities across Okta’s CIAM offering, including &lt;strong&gt;Device Authorization Grant, Branding&lt;/strong&gt;, and &lt;strong&gt;Custom Administration Roles&lt;/strong&gt; to deliver universal customization from internal management and compliance to devices and customer-facing applications. These features address critical pain points across IT, security, and engineering when implementing identity and are rooted in choice and extensibility. Together, Okta and Auth0 now enable end-to-end customer journeys and address every use case imaginable, driving better digital customer experiences. &lt;/p&gt;&lt;p&gt;With our combined company, we have one vision for identity. We’re ready to create solutions for all, offering more opportunities for current and future customers. The world now is identity-first; it ensures our environments are kept safe and secure and that every digital experience fits each customer’s needs. We’re just at the beginning of our journey together—we can’t wait to see what the future holds.&lt;/p&gt;&lt;p&gt;If you missed the live event, you can watch the &lt;a href=&#34;https://www.okta.com/showcase/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;on-demand content&lt;/strong&gt;&lt;/a&gt; beginning on October 14.&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;The Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/okta-auth0-showcase-2021-identity-for-all/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">CEOs Todd McKinnon and Eugenio Pace highlight the exciting opportunities ahead for the combined company</summary>
  </entry>
  <entry>
    <title>Auth0 Identity Platform Now Available on Microsoft Azure</title>
    <updated>2021-10-13T12:48:00Z</updated>
    <id>tag:auth0.com,2021-10-13:/blog/auth0-identity-platform-now-available-on-microsoft-azure/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section itemscope=&#34;&#34; itemtype=&#34;http://schema.org/BlogPosting&#34; itemprop=&#34;mainEntity&#34;&gt;&lt;header&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;Azure&lt;/span&gt;&lt;/p&gt;&lt;p itemprop=&#34;description&#34;&gt;New private cloud deployment option offers customers greater choice, scalability, and reliability&lt;/p&gt;&lt;/div&gt;&lt;p&gt;October 13, 2021&lt;/p&gt;&lt;meta itemprop=&#34;datePublished&#34; content=&#34;2021-10-13&#34;/&gt;&lt;meta itemprop=&#34;dateModified&#34; content=&#34;2021-10-13&#34;/&gt;&lt;/div&gt;&lt;/header&gt;&lt;header&gt;&lt;div&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/48HABlVaavxkvSpCEpgHdZ/f9de8b608b229dda310c5296187890f4/Announcements3.png&#34;/&gt;&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;Azure&lt;/span&gt;&lt;/p&gt;&lt;p itemprop=&#34;description&#34;&gt;New private cloud deployment option offers customers greater choice, scalability, and reliability&lt;/p&gt;&lt;p&gt;October 13, 2021&lt;/p&gt;&lt;meta itemprop=&#34;datePublished&#34; content=&#34;2021-10-13&#34;/&gt;&lt;meta itemprop=&#34;dateModified&#34; content=&#34;2021-10-13&#34;/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/header&gt;&lt;article&gt;&lt;main id=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;BELLEVUE, Wash. – Oct. 13, 2021 –&lt;/strong&gt; The &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Identity Platform&lt;/a&gt;, a product unit within Okta (NASDAQ: OKTA), today announced the launch of the &lt;a href=&#34;https://auth0.com/cloud/azure&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Identity Platform on Microsoft Azure&lt;/a&gt;. The launch gives customers the ability to choose Azure as their cloud deployment option from Auth0. The addition of Azure as an Auth0 private cloud platform option unlocks a secure cloud deployment option for organizations seeking strategic fit with their technology stack, supporting regional data residency capabilities and higher control over customer data.&lt;/p&gt;&lt;p&gt;Today, organizations moving to the cloud and selecting a &lt;a href=&#34;https://auth0.com/blog/what-is-ciam/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Customer Identity and Access Management (CIAM)&lt;/a&gt; solution require significant control over sensitive customer data and may require local data residency capabilities. They often have to make a hard choice of selecting either a CIAM solution that supports their product differentiation goals or one that meets their technical requirements and regulatory needs. Auth0’s modern identity platform eliminates the need to choose by providing organizations with tools designed to support security, compliance, and data residency needs that may apply to them across multiple regions globally. The platform’s design can accelerate their time to value and go-to-market strategies to meet their long-term growth goals. &lt;/p&gt;&lt;p&gt;Key benefits of the Auth0 Identity Platform on Azure include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Technology Stack Alignment:&lt;/strong&gt; Organizations have the flexibility to choose Azure as their preferred cloud vendor for greater technology stack alignment with existing investments in Azure.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Data Residency:&lt;/strong&gt; Improved data residency capabilities for Auth0 customers with Azure’s widespread geographic infrastructure.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Streamlined Experience with Private Cloud:&lt;/strong&gt; A modern, cloud-native platform built with a focus on security and compliance at every level. Organizations requiring data residency options can take advantage of periodic feature updates while maintaining control over the timing and the ability to roll back without the hassle of having to maintain them — resulting in faster time to market and a more seamless experience for organizations and their customers.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;“As more applications move to the cloud and expand globally, organizations depend on their identity service to protect and manage access for their most critical users, applications, and data,” said Shiv Ramji, Chief Product Officer at Auth0. “The Auth0 Identity Platform on Azure can help unlock a secure and compliant cloud deployment experience for organizations seeking support across CIAM use cases. This is especially true for organizations in industries like retail or financial services where selecting vendors that are not competitive to their business is top priority, organizations operating in regions where certain cloud providers have higher geographic availability, and those that have existing technology investments in Azure.”&lt;/p&gt;&lt;p&gt;“Companies like Auth0 add value by integrating their solutions with Microsoft Azure,” said Mandana Javaheri, Global Senior Director, SCI Business Development at Microsoft Corp. “With Azure, Auth0 customers have ultimate performance capabilities and control over their environment without the hassle of maintaining it, allowing customers to focus more on their core business proposition.”&lt;/p&gt;&lt;p&gt;More detailed information on the Auth0 Identity Platform on Azure can be found on &lt;a href=&#34;https://auth0.com/blog/auth0-on-microsoft-azure-as-a-private-cloud-deployment-option&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0’s blog&lt;/a&gt;. Auth0 will discuss this offering in greater detail with Okta at Showcase21 taking place today, Oct. 13, 2021. To learn more, visit: &lt;a href=&#34;https://www.okta.com/showcase/register&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://www.okta.com/showcase/register&lt;/a&gt;  &lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;The Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;h3 id=&#34;Media-Contacts-&#34;&gt;Media Contacts:&lt;/h3&gt;&lt;p&gt;Global Communications&lt;br/&gt;Auth0&lt;br/&gt;&lt;a href=&#34;mailto:press@auth0.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;press@auth0.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Matter Communications for Auth0&lt;br/&gt;&lt;a href=&#34;mailto:auth0@matternow.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;auth0@matternow.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 id=&#34;Investor-Contact-&#34;&gt;Investor Contact:&lt;/h3&gt;&lt;p&gt;Investor Relations&lt;br/&gt;&lt;a href=&#34;mailto:investor@okta.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;investor@okta.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;&lt;/main&gt;&lt;/article&gt;&lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/auth0-identity-platform-now-available-on-microsoft-azure/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">New private cloud deployment option offers customers greater choice, scalability, and reliability</summary>
  </entry>
  <entry>
    <title>Auth0 Identity Platform Now Available on Microsoft Azure</title>
    <updated>2021-10-13T10:31:00Z</updated>
    <id>tag:auth0.com,2021-10-13:/blog/auth0-on-microsoft-azure-as-a-private-cloud-deployment-option/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;We’re excited to announce the availability&lt;a href=&#34;#1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; of Auth0 &lt;strong&gt;Identity Platform&lt;/strong&gt; as a private cloud deployment option &lt;strong&gt;on &lt;a href=&#34;https://auth0.com/cloud/azure&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Microsoft Azure&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;&lt;p&gt;Auth0 is an Identity-as-a-Service platform that eliminates the complexity of implementing authentication and authorization capabilities by providing easy-to-use APIs (application programming interfaces) that you can use in a variety of applications. It processes billions of login transactions each month across thousands of customers, ensuring that end-users get a secure, fast and seamless login experience within their applications.&lt;/p&gt;&lt;p&gt;Auth0’s capabilities are available in two deployment options — public cloud and private cloud. Public cloud is a multi-tenant SaaS application available in four regions (United States, Europe, Japan, and Australia), &lt;strong&gt;used by companies of all sizes&lt;/strong&gt;. Alternatively, a private cloud deployment provides Auth0’s comprehensive CIAM capabilities to enterprises who want dedicated resources. &lt;/p&gt;&lt;h2 id=&#34;The-Benefits-of-Auth0-on-Azure&#34;&gt;The Benefits of Auth0 on Azure&lt;/h2&gt;&lt;p&gt;Microsoft Azure is an industry-leading cloud computing provider, offering hundreds of products and services used by developers and organizations around the world. With this release, Auth0 customers now have the flexibility to choose Azure (in addition to AWS) as the target cloud for their private cloud deployment.&lt;/p&gt;&lt;p&gt;Some of the key reasons for customers to choose Auth0 on Azure for their private cloud deployment are:&lt;/p&gt;&lt;h3 id=&#34;Data-Residency-and-Compliance&#34;&gt;Data Residency and Compliance&lt;/h3&gt;&lt;p&gt;Azure offers &lt;a href=&#34;https://azure.microsoft.com/en-us/global-infrastructure/geographies/#overview&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;over 60 regions&lt;/a&gt; worldwide, and has plans to continue &lt;a href=&#34;https://azure.microsoft.com/en-us/global-infrastructure/geographies/#new-regions&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;expanding&lt;/a&gt; worldwide. This global coverage lets Auth0 meet your data residency and other regulatory compliance requirements by offering greater choice when planning deployments.&lt;/p&gt;&lt;h3 id=&#34;Microsoft-Ecosystem-and-Security&#34;&gt;Microsoft Ecosystem and Security&lt;/h3&gt;&lt;p&gt;Many customers prefer to pick a SaaS vendor deployed in the same cloud as their core applications. This is due to a number of considerations, including security or performance. Azure Private Link reduces latency between Auth0 and the customer’s applications. This also gives a choice to customers that have an internal strategic requirement to pick one cloud over another.&lt;/p&gt;&lt;h2 id=&#34;How-We-Evolved-our-Platform&#34;&gt;How We Evolved our Platform&lt;/h2&gt;&lt;p&gt;Adding support for Microsoft Azure meant that we had an opportunity to improve our technology stack and development processes. As part of this effort, we focused on improving the resilience, reliability, and customer experience provided by the platform.&lt;/p&gt;&lt;p&gt;The private cloud support of Azure is built on top of a modern, cloud-native platform that is also compatible with AWS. As well as providing a number of internal benefits due to standardization and automation, here are some of the additional highlights for customers:&lt;/p&gt;&lt;h3 id=&#34;Fully-Automated-Environment-Creation-and-Management&#34;&gt;Fully Automated Environment Creation and Management&lt;/h3&gt;&lt;p&gt;Creating a new environment is now fully automated. Behind the scenes, we use cutting-edge automation tools to kick off environment provisioning. This ensures all environments are represented as code and are immutable. A host of flexible, scalable, and cloud-independent services are used as part of the technology stack.&lt;/p&gt;&lt;h3 id=&#34;High-Availability-and-Disaster-Recovery&#34;&gt;High Availability and Disaster Recovery&lt;/h3&gt;&lt;p&gt;Similar to our existing AWS deployment option, all Azure deployment service components are deployed in a highly-available, three Availability Zones (AZ) configuration. If an AZ is affected as a result of an incident, services automatically reorganize their workload on the remaining AZs within the same region. In addition to HA, all customer data is backed up at a regular cadence, backups are encrypted at rest and in transit, and there is an option to restore a customer’s environment from the last backup.&lt;/p&gt;&lt;h3 id=&#34;Security-first-Architecture--Shifting-Left&#34;&gt;Security-first Architecture: Shifting Left&lt;/h3&gt;&lt;p&gt;As we developed the Auth0 Identity Platform for Microsoft Azure, we emphasized “shift-left” principles, focussing on building a strong security architecture at the start of the development cycle. We established a dedicated Azure AD tenant and automated governance controls to ensure resource and identity isolation, required MFA and Azure PIM for privileged access, and enforced security standards with Azure Policy. Prioritizing security in the early stages of the development process is part of our secure by design strategy to mitigate risk and keep customers safe from cyber threats.&lt;/p&gt;&lt;h3 id=&#34;Automated--Periodic-Release-Updates--and-Roll-back-Option&#34;&gt;Automated, Periodic Release Updates, and Roll-back Option&lt;/h3&gt;&lt;p&gt;With this modern platform, we will now ship smaller, weekly releases that automatically deploy to private cloud environments. Additionally, the private cloud platform provides the ability to schedule deployments and roll back specific versions within predefined time windows, enabling greater control over the software delivery process.&lt;/p&gt;&lt;p&gt;With this launch, customers have the option of choosing a comprehensive CIAM solution on Azure, built on a technology stack geared for resilience, reliance, and security. Learn more about Auth0 Identity Platform on Azure&lt;a href=&#34;https://auth0.com/contact-us?place=header&amp;amp;type=button&amp;amp;text=contact%20sales&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt; here&lt;/a&gt;.&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;The Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/auth0-on-microsoft-azure-as-a-private-cloud-deployment-option/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Take advantage of cloud provider flexibility, data residency options, and a streamlined experience for your identity needs with a private cloud deployment</summary>
  </entry>
  <entry>
    <title>Configuring PostgreSQL as Auth0 Custom Database</title>
    <updated>2021-10-12T14:55:00Z</updated>
    <id>tag:auth0.com,2021-10-12:/blog/configuring-postgresql-as-auth0-custom-database/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;You can use Auth0 to create and maintain your own user store while also providing a secure authentication system on top of it. Auth0 lets you store users in your own database. Furthermore, Auth0 uses &lt;a href=&#34;https://oauth.net/2/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OAuth 2.0&lt;/a&gt; as an authorization framework with which you can be confident in terms of security. Using a custom database as a user store in Auth0 facilitates &lt;a href=&#34;https://auth0.com/docs/users/import-and-export-users&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;user migration&lt;/a&gt; and adds an OAuth and &lt;a href=&#34;https://openid.net/connect/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OpenID Connect&lt;/a&gt; layer to your existing user database. You can configure any database or web service, including ASP.NET Membership Provider, MongoDB, MySQL, PostgreSQL, as an Auth0 custom database. In this article, you will learn how to set up PostgreSQL as a custom database for Auth0.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Limited Access:&lt;/strong&gt; Some features are available depending on your Auth0 subscription. For more information, see &lt;a href=&#34;https://auth0.com/pricing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 pricing plans&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Enabling-Custom-Databases&#34;&gt;Enabling Custom Databases&lt;/h2&gt;&lt;p&gt;Don&amp;#39;t already have an Auth0 account yet? &lt;a href=&#34;https://auth0.com/signup/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Sign up for free right now!&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Once you &lt;a href=&#34;https://auth0.com/auth/login&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;log in&lt;/a&gt;, navigate to the &lt;a href=&#34;https://manage.auth0.com/#/connections/database&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Database connections page&lt;/a&gt; (Auth0 Dashboard &amp;gt; Authentication &amp;gt; Database). Click on the &lt;strong&gt;Create DB Connection&lt;/strong&gt; button, give your database a nice name, and click the &lt;strong&gt;Create&lt;/strong&gt; button. Go to the &lt;strong&gt;Custom Database&lt;/strong&gt; tab and enable &lt;strong&gt;Use my own database&lt;/strong&gt; to configure the custom database.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/OGyNXnaAOAwmDmJeSS29o/f2462f845f94aba70a41caac89f0d495/01_8enable-custom-database.png&#34; alt=&#34;Enabling &amp;#39;use my own database&amp;#39; on custom database tab of Auth0 interface&#34;/&gt;&lt;/p&gt;&lt;p&gt;Auth0 uses Node.js scripts, called Action Scripts, for connecting and accessing your database. These scripts include JavaScript functions that allow you to execute a variety of tasks such as adding a new user, logging in a user, and so on. You should define &lt;strong&gt;Custom Database Action Scripts&lt;/strong&gt; to perform the following actions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Create: The &lt;strong&gt;Create&lt;/strong&gt; script inserts a new user with &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; into your PostgreSQL database.&lt;/li&gt;&lt;li&gt;Login: The &lt;strong&gt;Login&lt;/strong&gt; script verifies the identity of the user in your PostgreSQL database whenever a user needs to authenticate.&lt;/li&gt;&lt;li&gt;Verify: The &lt;strong&gt;Verify&lt;/strong&gt; script updates the verification status of a user&amp;#39;s email address in your database.&lt;/li&gt;&lt;li&gt;Change Password: The &lt;strong&gt;Change Password&lt;/strong&gt; script modifies the password for the user&amp;#39;s email address. It changes the user&amp;#39;s password in the database for future logins (forgot password functionality).&lt;/li&gt;&lt;li&gt;Get User: The &lt;strong&gt;Get User&lt;/strong&gt; script retrieves a specified user&amp;#39;s information from your database. It returns &lt;code&gt;&lt;span&gt;undefined&lt;/span&gt;&lt;/code&gt; if the user is not present in your database.&lt;/li&gt;&lt;li&gt;Delete: The &lt;strong&gt;Delete&lt;/strong&gt; script removes the specified user identity from your database.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Fortunately, Auth0 provides templates for these custom database scripts. You can use the template and update the &lt;strong&gt;connection string&lt;/strong&gt; with your database URL. Refer to the &lt;a href=&#34;https://auth0.com/docs/connections/database/custom-db/templates&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;official documentation&lt;/a&gt; for additional information on Auth0 custom database action scripts. Let&amp;#39;s start by creating a PostgreSQL database to connect with Auth0.&lt;/p&gt;&lt;h2 id=&#34;Setting-up-a-PostgreSQL-Database&#34;&gt;Setting up a PostgreSQL Database&lt;/h2&gt;&lt;p&gt;You cannot use the database in your local environment. You should make your database accessible via the internet or use tools like &lt;a href=&#34;https://www.ibm.com/cloud/learn/dbaas&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Database as A Service&lt;/a&gt;. In this tutorial, I&amp;#39;ll use &lt;a href=&#34;https://www.elephantsql.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ElephantSQL&lt;/a&gt;, which offers a fully configured and cloud-hosted PostgreSQL database in few minutes. However, it does not display any data inside your database; instead, you can run SQL commands to show your data. You can design your own database and host it on any cloud provider like &lt;a href=&#34;https://aws.amazon.com/rds/postgresql/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;AWS&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/sql/docs/postgres/quickstart&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Google Cloud&lt;/a&gt; or &lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-postgresql&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Heroku&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/67kI5tanFdPenloG7UPWmo/a9901332759fdf407562eedfefce6f0a/02_5elephant-sql.png&#34; alt=&#34;Elephant sql home page&#34;/&gt;&lt;/p&gt;&lt;p&gt;Head over to &lt;a href=&#34;https://www.elephantsql.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://www.elephantsql.com/&lt;/a&gt; and create an account for yourself or log in if you already have one. It takes you to the dashboard page; Click on the &lt;strong&gt;Create New Instance&lt;/strong&gt; to create a new database instance. Give a suitable name to your database instance and choose a plan and a region. I&amp;#39;ll use the free plan for demonstration purposes. Configure the database to meet your requirements, then click &lt;strong&gt;Create instance&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2KypO18fJdOwAUAUzAvEaI/f0637c4914da6ed6c106f203bf1651a2/03_0create-new-instance.png&#34; alt=&#34;Elephantsql create instance confirmation page&#34;/&gt;&lt;/p&gt;&lt;p&gt;If you encounter any error in creating an instance, refer to the &lt;a href=&#34;https://www.elephantsql.com/docs/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ElephantSQL documentation&lt;/a&gt; for troubleshooting.&lt;/p&gt;&lt;p&gt;Now, navigate to the freshly created database instance and copy the &lt;strong&gt;URL&lt;/strong&gt; from the details page. You&amp;#39;ll need this to connect your Auth0 application to this database. Anyone can access your database with this connection string. It would help if you were to keep it very secret for security purposes.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6ygHuLT6dz2nL3E7rLGprV/5ac2748f274fec16755aa97402506126/04_9instance-details.png&#34; alt=&#34;Click on show button and copy the &amp;#39;URL&amp;#39; on the ElephantSQL instance details page&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; Auth0 provides several IP addresses to configure your database network connections if you&amp;#39;re using a firewall. You can find them under the action scripts.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7z4pzq4dETiiHaHk3hUY1T/8e22ded36e15b4eaffa7588d65ed30a3/05_3database-ips.png&#34; alt=&#34;List of IP addresses under action scripts&#34;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Using your own database leads to several security concerns. Allowing your database accessible over the internet without any firewalls or security measures may result in data leakage.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Creating-a-Table-for-Storing-Users&#34;&gt;Creating a Table for Storing Users&lt;/h2&gt;&lt;p&gt;Switch to the &lt;strong&gt;Browser&lt;/strong&gt; tab and execute the following command.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; users&lt;span&gt;(&lt;/span&gt;&#xA;    id UUID &lt;span&gt;DEFAULT&lt;/span&gt; uuid_generate_v4&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    nickname &lt;span&gt;VARCHAR&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    email &lt;span&gt;VARCHAR&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;UNIQUE&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    password &lt;span&gt;VARCHAR&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    email_Verified &lt;span&gt;BOOLEAN&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;FALSE&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/57cmWLADlzyKQcMgIj7hVk/f4758d8ccdc9bcc214b9b30da842b2fe/06_1create-table.png&#34; alt=&#34;creating a new table using SQL command in SQL Browser&#34;/&gt;&lt;/p&gt;&lt;p&gt;The above command creates a new table called &lt;code&gt;users&lt;/code&gt; to store the user information from Auth0. You need at least the above five columns to save and validate the user identity.&lt;/p&gt;&lt;h2 id=&#34;Defining-the-Auth0-Custom-Database-Scripts&#34;&gt;Defining the Auth0 Custom Database Scripts&lt;/h2&gt;&lt;p&gt;Open the custom database tab in the Auth0 interface and navigate to the &lt;strong&gt;Database Action Scripts&lt;/strong&gt; section. Select a script (say &lt;em&gt;Login&lt;/em&gt;) to edit and choose &lt;strong&gt;PostgreSQL&lt;/strong&gt; from the templates drop-down. To connect your database to Auth0, you should add the connection string (&lt;code&gt;conString&lt;/code&gt;) of your database in the action scripts.&lt;/p&gt;&lt;p&gt;Scroll down a little to the &lt;strong&gt;Database Settings&lt;/strong&gt; under the Action scripts section. Add the database URL you copied from your ElephantSQL as an environment variable (to keep it as a secret).&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/qkAAeUkyauInLsJYqqGZw/fdddd502f0dbf1048d40bf47c3526c56/07_4database-settings.png&#34; alt=&#34;Adding the database URL as an env variable &amp;#39;POSTGRES_URL&amp;#39; settings section&#34;/&gt;&lt;/p&gt;&lt;p&gt;Now, update the &lt;code&gt;conString&lt;/code&gt; in your action scripts with this value.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; const conString = &amp;#39;postgres://user:pass@localhost/mydb&amp;#39;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; const conString = configuration.POSTGRES_URL;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remember to add the connection string in every database action script, and that&amp;#39;s all! Now you can click on &lt;strong&gt;Save and Try&lt;/strong&gt; button to test your database.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also link an existing user database to Auth0. You should modify some code in the action scripts to match your database configuration.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Testing-the-Database&#34;&gt;Testing the Database&lt;/h2&gt;&lt;p&gt;First, try creating a user in the database using &lt;strong&gt;Create&lt;/strong&gt; script.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7EZTXGBq7Yks8RnklmrcfP/66a3c8c9c4c6c2dcffc6c61c456116ec/08_2create-user.png&#34; alt=&#34;user created successfully after trying the custom create script&#34;/&gt;&lt;/p&gt;&lt;p&gt;You can find the user in your database. Open the &lt;strong&gt;SQL Browser&lt;/strong&gt; in ElephantSQL and run the following command. It retrieves the first 100 records from the database containing information about the users.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;&amp;#34;public&amp;#34;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&amp;#34;users&amp;#34;&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2OEtiruBOBch1KQuxrJxlm/6c799eba9dcd0693d2f08a9e89259b52/09_7elephantsql-users.png&#34; alt=&#34;database rows will be displayed on the browser tab after executing the above command&#34;/&gt;&lt;/p&gt;&lt;p&gt;Similarly, login, validate your email and delete the user. For deleting a user, you should use the unique id of the specific user. Test all the scripts and use this database in applications that you create on the Auth0 dashboard. You can select to use this database on &lt;strong&gt;Connections&lt;/strong&gt; tab in your application. If you experience any problem through the whole process, reach out to the &lt;a href=&#34;https://community.auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 community&lt;/a&gt; for assistance.&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this article, you learned how to set up your PostgreSQL database as an Auth0 custom database. Even if you have a different type of database, you can easily connect to Auth0 using the templates provided. In this tutorial, you merely changed the Auth0 templates. Modify the action scripts accordingly if you need to keep more information about the user or want to configure the already existing user store as Auth0 custom database. &lt;/p&gt;&lt;p&gt;Using a custom database introduces several security issues as well as additional configuration work. You should keep your database in a secure cloud to prevent data leakage. You can rely on Auth0 if you don&amp;#39;t want to put in any extra effort. It saves your users&amp;#39; information in very secure databases (&lt;a href=&#34;https://auth0.com/blog/how-we-store-data-in-the-cloud-at-auth0/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;see how Auth0 stores data?&lt;/a&gt;).&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/configuring-postgresql-as-auth0-custom-database/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Connect Auth0 to PostgreSQL to create and maintain your own user store.</summary>
  </entry>
  <entry>
    <title>Build and Secure a FastAPI Server with Auth0</title>
    <updated>2021-10-08T20:00:00Z</updated>
    <id>tag:auth0.com,2021-10-08:/blog/build-and-secure-fastapi-server-with-auth0/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;FastAPI is a relatively new Python framework that enables you to create applications very quickly. This framework allows you to read API request data seamlessly with built-in modules and is a lightweight alternative to Flask.&lt;/p&gt;&lt;p&gt;In this article, we will go over the features of &lt;code&gt;FastAPI&lt;/code&gt;, set up a basic API, protect an endpoint using Auth0, and you&amp;#39;ll learn how simple it is to get started.&lt;/p&gt;&lt;p&gt;Before we get started, you can also check out the contents of this blog post in video format by playing the video below: 👇&lt;/p&gt;&#xA;&lt;p&gt;&lt;iframe src=&#34;https://www.youtube.com/embed/gkkDP_SVxyk&#34; frameborder=&#34;0&#34; allowfullscreen=&#34;&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;h2 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;Before you start building with &lt;a href=&#34;https://fastapi.tiangolo.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;FastAPI&lt;/a&gt;, you need to have Python &lt;code&gt;&lt;span&gt;3.8&lt;/span&gt;&lt;span&gt;.2&lt;/span&gt;&lt;/code&gt; and a &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;free Auth0 account; you can sign up here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you got that Python version installed and your Auth0 account, you can create a new &lt;code&gt;FastAPI&lt;/code&gt; application. To begin, create a new directory to develop within. For this example, you will make a directory called &lt;code&gt;fastapi&lt;span&gt;-&lt;/span&gt;example&lt;/code&gt; and a subfolder called &lt;code&gt;application&lt;/code&gt;; this subfolder is where your code will live.&lt;/p&gt;&lt;p&gt;In the &lt;code&gt;fastapi&lt;span&gt;-&lt;/span&gt;example&lt;/code&gt; folder, create a virtual environment using the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;python3 -m venv .env&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This creates a virtual environment, and it separates the dependencies from the rest of your computer libraries. In other words, you don&amp;#39;t pollute the global namespace with libraries and dependencies, which might impact other Python projects.&lt;/p&gt;&lt;p&gt;After creating the virtual environment, you need to activate it. For Unix-based operating systems, here&amp;#39;s the command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;source&lt;/span&gt; .env/bin/activate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are in another operating system, you can find a list of &lt;a href=&#34;https://docs.python.org/3/library/venv.html#creating-virtual-environments&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;how you can activate an environment on this documentation page&lt;/a&gt;. After activating your virtual environment, you can install the packages you are going to use: &lt;code&gt;FastAPI&lt;/code&gt;, &lt;a href=&#34;https://www.uvicorn.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;uvicorn&lt;/a&gt; server, &lt;a href=&#34;https://pyjwt.readthedocs.io/en/latest/usage.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;pyjwt&lt;/a&gt;, and update &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pip &lt;span&gt;install&lt;/span&gt; -U pip&#xA;pip &lt;span&gt;install&lt;/span&gt; fastapi uvicorn &lt;span&gt;&amp;#39;pyjwt[crypto]&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Get-Started-with-FastAPI&#34;&gt;Get Started with FastAPI&lt;/h2&gt;&lt;p&gt;Now that all the libraries are installed, you can create a &lt;code&gt;main&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file inside the &lt;code&gt;application&lt;/code&gt; folder; that&amp;#39;s where your API code will live. The contents of the &lt;code&gt;main&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; will look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;#34;&amp;#34;&amp;#34;main.py&#xA;Python FastAPI Auth0 integration example&#xA;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA; &#xA;&lt;span&gt;from&lt;/span&gt; fastapi &lt;span&gt;import&lt;/span&gt; FastAPI&#xA;&lt;span&gt;# Creates app instance&lt;/span&gt;&#xA;app &lt;span&gt;=&lt;/span&gt; FastAPI&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA; &#xA; &#xA;&lt;span&gt;@app&lt;span&gt;.&lt;/span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/public&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;No access token required to access this route&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&#xA;    result &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;success&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Hello from a public endpoint! You don&amp;#39;t need to be &amp;#34;&lt;/span&gt;&#xA;                &lt;span&gt;&amp;#34;authenticated to see this.&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; result&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s break this down:&#xA; - To start, you are importing the &lt;code&gt;FastAPI&lt;/code&gt; library;&#xA; - Then creating your app by instantiating a &lt;code&gt;&lt;span&gt;FastAPI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; object;&#xA; - After that, you use &lt;code&gt;@app&lt;span&gt;.&lt;/span&gt;get&lt;/code&gt; to define a route that handles &lt;code&gt;&lt;span&gt;GET&lt;/span&gt;&lt;/code&gt; requests;&#xA; - Finally, you have the path operation function called &lt;code&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, which is a function that will run each time that route is called, and it returns a dictionary with the welcome message.&lt;/p&gt;&lt;p&gt;Now that you&amp;#39;ve got your first endpoint code, to get the server up and running, run the following command on the root directory of the project:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;uvicorn application.main:app --reload&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With your server is running, you can go either to &lt;a href=&#34;http://127.0.0.1:8000/docs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://127.0.0.1:8000/docs&lt;/a&gt; to see the automatically generated documentation for the first endpoint like shown in the image below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3fE3ngkaleHJw78ZNzQway/24719642235593cbf2016b4b86f38c54/Screen_Shot_2021-10-04_at_09.55.16.png&#34; alt=&#34;FastAPI documentation page showing the public endpoint&#34;/&gt;&lt;/p&gt;&lt;p&gt;Or you can make your first request in a new terminal window by using &lt;code&gt;cURL&lt;/code&gt;. Keep in mind that if you are a Windows user on an older version of the operating system, you will have to &lt;a href=&#34;https://curl.se/dlwiz/?type=bin&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;install curl&lt;/a&gt; before running the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; -X &lt;span&gt;&amp;#39;GET&amp;#39;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;  --url http://127.0.0.1:8000/api/public&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And you should see a JSON as a result of the request you just did similar to this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;success&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Hello from a public endpoint! You don&amp;#39;t need to be authenticated to see this.&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For simplicity&amp;#39;s sake, you are going to use the &lt;code&gt;cURL&lt;/code&gt; for the rest of this post.&lt;/p&gt;&lt;h2 id=&#34;Create-a-Private-Endpoint&#34;&gt;Create a Private Endpoint&lt;/h2&gt;&lt;p&gt;Now that a base API server is set up, you will add one more endpoint to your &lt;code&gt;main&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file. In this application, you will have a &lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/code&gt; route available for everyone and a &lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/code&gt; route that only you can access with the access token you&amp;#39;ll get from Auth0.&lt;/p&gt;&lt;p&gt;Now you need to update the &lt;code&gt;main&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file. Here&amp;#39;s what you&amp;#39;ll need to change to the imports section:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;First, you need to import &lt;code&gt;Depends&lt;/code&gt; from the &lt;code&gt;fastapi&lt;/code&gt; module, that&amp;#39;s FastAPI dependency injection system;&lt;/li&gt;&lt;li&gt;Then, you&amp;#39;ll also need to import the &lt;code&gt;HTTPBearer&lt;/code&gt; class from the &lt;code&gt;fastapi&lt;span&gt;.&lt;/span&gt;security&lt;/code&gt; module, a built-in security scheme for authorization headers with bearer tokens;&lt;/li&gt;&lt;li&gt;You will need to create the authorization scheme based on the &lt;code&gt;HTTPBearer&lt;/code&gt;. This will be used to guarantee the presence of the authorization header with the &lt;code&gt;Bearer&lt;/code&gt; token in each request made to the private endpoint.&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;The &lt;a href=&#34;https://auth0.com/docs/security/tokens/access-tokens&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;token informs the API that the bearer of the token&lt;/a&gt; has been authorized to access the API and perform specific actions specified by the scope that was granted during authorization.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Other than updating the imports, you need to implement the private endpoint. The &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/code&gt; endpoint will also accept &lt;code&gt;&lt;span&gt;GET&lt;/span&gt;&lt;/code&gt; requests, and here is what the code &lt;code&gt;main&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; looks like for now:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;#34;&amp;#34;&amp;#34;main.py&#xA;Python FastAPI Auth0 integration example&#xA;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA; &#xA;&lt;span&gt;from&lt;/span&gt; fastapi &lt;span&gt;import&lt;/span&gt; Depends&lt;span&gt;,&lt;/span&gt; FastAPI  &lt;span&gt;# 👈 new imports&lt;/span&gt;&#xA;&lt;span&gt;from&lt;/span&gt; fastapi&lt;span&gt;.&lt;/span&gt;security &lt;span&gt;import&lt;/span&gt; HTTPBearer  &lt;span&gt;# 👈 new imports&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;# Scheme for the Authorization header&lt;/span&gt;&#xA;token_auth_scheme &lt;span&gt;=&lt;/span&gt; HTTPBearer&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;  &lt;span&gt;# 👈 new code&lt;/span&gt;&#xA; &#xA;&lt;span&gt;# Creates app instance&lt;/span&gt;&#xA;app &lt;span&gt;=&lt;/span&gt; FastAPI&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@app&lt;span&gt;.&lt;/span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/public&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;No access token required to access this route&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA; &#xA;    result &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;success&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Hello from a public endpoint! You don&amp;#39;t need to be &amp;#34;&lt;/span&gt;&#xA;                &lt;span&gt;&amp;#34;authenticated to see this.&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; result&#xA;&#xA;&#xA;&lt;span&gt;# new code 👇&lt;/span&gt;&#xA;&lt;span&gt;@app&lt;span&gt;.&lt;/span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/private&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;:&lt;/span&gt; &lt;span&gt;str&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; Depends&lt;span&gt;(&lt;/span&gt;token_auth_scheme&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;A valid access token is required to access this route&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA; &#xA;    result &lt;span&gt;=&lt;/span&gt; token&lt;span&gt;.&lt;/span&gt;credentials&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; result&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;Depends&lt;/code&gt; class is responsible for evaluating each request that a given endpoint receives against a function, class, or instance. In this case, it will evaluate the requests against the &lt;code&gt;HTTPBearer&lt;/code&gt; scheme that will check the request for an authorization header with a bearer token.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;You can find more details on how &lt;code&gt;FastAPI&lt;/code&gt; &lt;a href=&#34;https://fastapi.tiangolo.com/tutorial/dependencies/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;dependency injection works on its documentation&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Now your private endpoint returns the received token. If no token is provided, it will return a &lt;code&gt;&lt;span&gt;403&lt;/span&gt; Forbidden&lt;/code&gt; status code with the detail saying you are &lt;code&gt;&lt;span&gt;&amp;#34;Not authenticated&amp;#34;&lt;/span&gt;&lt;/code&gt;. Because you used the &lt;code&gt;&lt;span&gt;--&lt;/span&gt;reload&lt;/code&gt; flag while running your server, you don&amp;#39;t need to re-run the command; &lt;code&gt;uvicorn&lt;/code&gt; will pick up the changes and update the server every time you save your files. Now make a request to the &lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/code&gt; endpoint to check its behavior. First, let&amp;#39;s make a request &lt;em&gt;without&lt;/em&gt; passing an authorization header:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; -X &lt;span&gt;&amp;#39;GET&amp;#39;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;  --url &lt;span&gt;&amp;#39;http://127.0.0.1:8000/api/private&amp;#39;&lt;/span&gt;&#xA;&lt;span&gt;# {&amp;#34;detail&amp;#34;: &amp;#34;Not authenticated&amp;#34;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And now, if you make a request with the authorization header, but with a &lt;strong&gt;random&lt;/strong&gt; string as token value, you should see the same random value as a result:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; -X &lt;span&gt;&amp;#39;GET&amp;#39;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;  --url &lt;span&gt;&amp;#39;http://127.0.0.1:8000/api/private&amp;#39;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;  --header &lt;span&gt;&amp;#39;Authorization: Bearer FastAPI is awesome&amp;#39;&lt;/span&gt;&#xA;&lt;span&gt;# &amp;#34;FastAPI is awesome&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, your endpoint &lt;strong&gt;isn&amp;#39;t protected&lt;/strong&gt; since it accepts any string as the value for the authorization header. It is &lt;strong&gt;not enough&lt;/strong&gt; to receive an authorization header; you must also &lt;strong&gt;verify the value of the bearer token&lt;/strong&gt; to let somebody access the endpoint. Let&amp;#39;s fix that behavior.&lt;/p&gt;&lt;h2 id=&#34;Set-up-Auth0-an-API&#34;&gt;Set up Auth0 an API&lt;/h2&gt;&lt;p&gt;Before you get to the point where you are ready to validate tokens in your endpoints, you need to &lt;a href=&#34;https://auth0.com/docs/get-started/set-up-apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;set up an API in Auth0&lt;/a&gt;. When this API is set up, you get access to a few pieces of information that Auth0 requires - an audience, client ID, and client secret.&lt;/p&gt;&lt;p&gt;You also need to have access to that information from within the server; that&amp;#39;s where a configuration file comes into play. You will need to create a configuration file called &lt;code&gt;&lt;span&gt;.&lt;/span&gt;config&lt;/code&gt; at the root of the project. This is what the &lt;code&gt;&lt;span&gt;.&lt;/span&gt;config&lt;/code&gt; file should look like below. Remember to update the values accordingly:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# .config&#xA; &#xA;[AUTH0]&#xA;DOMAIN = your.domain.auth0.com&#xA;API_AUDIENCE = your.api.audience&#xA;ALGORITHMS = RS256&#xA;ISSUER = https://your.domain.auth0.com/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This configuration is the first piece of the puzzle of checking for the Auth0 configuration settings in the token validation stage. Another good rule to follow is to never commit your configuration files with environment variables to source code. To prevent this from occurring, you should create a &lt;code&gt;&lt;span&gt;.&lt;/span&gt;gitignore&lt;/code&gt; file in the project&amp;#39;s root and add the &lt;code&gt;&lt;span&gt;.&lt;/span&gt;config&lt;/code&gt; file as an entry:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# .gitignore&#xA;.config&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Add-JSON-Web-Token--JWT--Validation&#34;&gt;Add JSON Web Token (JWT) Validation&lt;/h2&gt;&lt;p&gt;Your &lt;code&gt;FastAPI&lt;/code&gt; server now has a &lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/code&gt; route, but it is not protected yet. It only checks if you have an authorization header in the request, which means you are missing a step in the process: you need to validate the access token. To do that, you need to create an object that does &lt;a href=&#34;https://auth0.com/learn/json-web-tokens/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;all the steps for validating a JWT&lt;/a&gt; because Auth0&amp;#39;s access tokens are JWTs.&lt;/p&gt;&lt;p&gt;To separate responsibilities from the routing definition, you should create a new file called &lt;code&gt;utils&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; inside the &lt;code&gt;application&lt;/code&gt; folder to hold all the utility code, like validating the access token and reading the configuration information.&lt;/p&gt;&lt;p&gt;Start by importing the Python &lt;code&gt;os&lt;/code&gt; library, as well as the &lt;code&gt;PyJWT&lt;/code&gt; and &lt;code&gt;configparser&lt;/code&gt; libraries. The OS library gives you access to the environment variables. The JWT library gives you functions to check and validate a JWT. The &lt;code&gt;ConfigParser&lt;/code&gt; class from the namesake library provides a way for Python to read the configuration settings found in the &lt;code&gt;&lt;span&gt;.&lt;/span&gt;config&lt;/code&gt; file you created earlier. And the first thing you have after the imports is a function called &lt;code&gt;&lt;span&gt;set_up&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, which you can see below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;#34;&amp;#34;&amp;#34;utils.py&#xA;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; os&#xA;&lt;span&gt;import&lt;/span&gt; jwt&#xA;&lt;span&gt;from&lt;/span&gt; configparser &lt;span&gt;import&lt;/span&gt; ConfigParser&#xA;&#xA; &#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;set_up&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;Sets up configuration for the app&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&#xA;    env &lt;span&gt;=&lt;/span&gt; os&lt;span&gt;.&lt;/span&gt;getenv&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;ENV&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;.config&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;if&lt;/span&gt; env &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#34;.config&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        config &lt;span&gt;=&lt;/span&gt; ConfigParser&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        config&lt;span&gt;.&lt;/span&gt;read&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;.config&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        config &lt;span&gt;=&lt;/span&gt; config&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;AUTH0&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        config &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;DOMAIN&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; os&lt;span&gt;.&lt;/span&gt;getenv&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;DOMAIN&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;your.domain.com&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;API_AUDIENCE&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; os&lt;span&gt;.&lt;/span&gt;getenv&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;API_AUDIENCE&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;your.audience.com&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;ISSUER&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; os&lt;span&gt;.&lt;/span&gt;getenv&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;ISSUER&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;https://your.domain.com/&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;ALGORITHMS&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; os&lt;span&gt;.&lt;/span&gt;getenv&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;ALGORITHMS&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;RS256&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; config&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;&lt;span&gt;set_up&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; function is responsible for reading the &lt;code&gt;&lt;span&gt;.&lt;/span&gt;config&lt;/code&gt; file and creating a configuration object that works like a dictionary. Because this sample code is prepared to also run on environment variables, the &lt;code&gt;&lt;span&gt;set_up&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; function by default will try to read the &lt;code&gt;&lt;span&gt;.&lt;/span&gt;config&lt;/code&gt; file. You can change this behavior by setting the &lt;code&gt;&lt;span&gt;ENV&lt;/span&gt;&lt;/code&gt; environment variable to any other value, in which case a dictionary will be created by reading all the environment variables you can see under the &lt;code&gt;&lt;span&gt;else&lt;/span&gt;&lt;/code&gt; clause above.&lt;/p&gt;&lt;p&gt;The next piece of the puzzle is where the magic happens. You&amp;#39;ll create a &lt;code&gt;VerifyToken&lt;/code&gt; class to handle JWT token validation:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# paste the code 👇 after the set_up() function in the utils.py file&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;VerifyToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;Does all the token verification using PyJWT&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;,&lt;/span&gt; token&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;token &lt;span&gt;=&lt;/span&gt; token&#xA;        self&lt;span&gt;.&lt;/span&gt;config &lt;span&gt;=&lt;/span&gt; set_up&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;# This gets the JWKS from a given URL and does processing so you can&lt;/span&gt;&#xA;        &lt;span&gt;# use any of the keys available&lt;/span&gt;&#xA;        jwks_url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;f&amp;#39;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;self&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;DOMAIN&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/.well-known/jwks.json&amp;#39;&lt;/span&gt;&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;jwks_client &lt;span&gt;=&lt;/span&gt; jwt&lt;span&gt;.&lt;/span&gt;PyJWKClient&lt;span&gt;(&lt;/span&gt;jwks_url&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;verify&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;# This gets the &amp;#39;kid&amp;#39; from the passed token&lt;/span&gt;&#xA;        &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;            self&lt;span&gt;.&lt;/span&gt;signing_key &lt;span&gt;=&lt;/span&gt; self&lt;span&gt;.&lt;/span&gt;jwks_client&lt;span&gt;.&lt;/span&gt;get_signing_key_from_jwt&lt;span&gt;(&lt;/span&gt;&#xA;                self&lt;span&gt;.&lt;/span&gt;token&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;key&#xA;        &lt;span&gt;except&lt;/span&gt; jwt&lt;span&gt;.&lt;/span&gt;exceptions&lt;span&gt;.&lt;/span&gt;PyJWKClientError &lt;span&gt;as&lt;/span&gt; error&lt;span&gt;:&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;error&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; error&lt;span&gt;.&lt;/span&gt;__str__&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;except&lt;/span&gt; jwt&lt;span&gt;.&lt;/span&gt;exceptions&lt;span&gt;.&lt;/span&gt;DecodeError &lt;span&gt;as&lt;/span&gt; error&lt;span&gt;:&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;error&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; error&lt;span&gt;.&lt;/span&gt;__str__&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;            payload &lt;span&gt;=&lt;/span&gt; jwt&lt;span&gt;.&lt;/span&gt;decode&lt;span&gt;(&lt;/span&gt;&#xA;                self&lt;span&gt;.&lt;/span&gt;token&lt;span&gt;,&lt;/span&gt;&#xA;                self&lt;span&gt;.&lt;/span&gt;signing_key&lt;span&gt;,&lt;/span&gt;&#xA;                algorithms&lt;span&gt;=&lt;/span&gt;self&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;ALGORITHMS&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                audience&lt;span&gt;=&lt;/span&gt;self&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;API_AUDIENCE&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                issuer&lt;span&gt;=&lt;/span&gt;self&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;ISSUER&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;except&lt;/span&gt; Exception &lt;span&gt;as&lt;/span&gt; e&lt;span&gt;:&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;error&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;e&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; payload&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s break down this class to understand the steps here:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;First, you have the &lt;code&gt;&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method:&#xA; &lt;ol start=&#34;1&#34;&gt;&lt;li&gt;This method is responsible for specifying the &lt;code&gt;token&lt;/code&gt; parameter the &lt;code&gt;VerifyToken&lt;/code&gt; class needs;&lt;/li&gt;&lt;li&gt;It also runs the &lt;code&gt;&lt;span&gt;set_up&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; function to build the configuration the class will need;&lt;/li&gt;&lt;li&gt;And finally, it sets the path for the &lt;code&gt;&lt;span&gt;JWKS&lt;/span&gt;&lt;/code&gt; file by using the &lt;code&gt;PyJWKClient&lt;/code&gt; from the &lt;code&gt;PyJWT&lt;/code&gt; package. A &lt;a href=&#34;https://auth0.com/docs/tokens/json-web-tokens/json-web-key-sets&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;JSON Web Key Set, or JWKS for short&lt;/a&gt; contains the information necessary to validate a token signature and ensure that it is a valid token. Because Auth0 implements OAuth 2.0, it has a &amp;#34;well-known&amp;#34; endpoint which you can call and get the extra metadata used to validate the token and its properties.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Second, you have the &lt;code&gt;&lt;span&gt;verify&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method:&#xA; &lt;ol start=&#34;1&#34;&gt;&lt;li&gt;This method uses the key ID (&lt;code&gt;kid&lt;/code&gt; claim present in the token header) to grab the key used from the JWKS to verify the token signature. If this step fails by any of the possible errors, the error message is returned;&lt;/li&gt;&lt;li&gt;Then, the method tries to decode the JWT by using the information gathered so far. In case of errors, it returns the error message. When successful, the token payload is returned.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let&amp;#39;s see how to use this piece of code in our private endpoint in the section ahead.&lt;/p&gt;&lt;h2 id=&#34;Validate-an-Auth0-Access-Token&#34;&gt;Validate an Auth0 Access Token&lt;/h2&gt;&lt;p&gt;The final puzzle piece is to import the class you just created in the &lt;code&gt;utils&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file and use it in the &lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/code&gt; endpoint. Here&amp;#39;s what you need to change:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Update the imports section to add the import clause for the &lt;code&gt;VerifyToken&lt;/code&gt;, then head to your endpoint; you will also need to import the &lt;code&gt;Response&lt;/code&gt; class and the &lt;code&gt;status&lt;/code&gt; object from &lt;code&gt;fastapi&lt;/code&gt; so you can give a detailed response in case of an error;&lt;/li&gt;&lt;li&gt;Then, you&amp;#39;ll need to adjust the endpoint by passing the token to the &lt;code&gt;VerifyToken&lt;/code&gt; class and checking whether the result of the &lt;code&gt;&lt;span&gt;verify&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method is an error.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Here&amp;#39;s what your &lt;code&gt;main&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file should look like with all the changes above:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;#34;&amp;#34;&amp;#34;main.py&#xA;Python FastAPI Auth0 integration example&#xA;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA; &#xA;&lt;span&gt;from&lt;/span&gt; fastapi &lt;span&gt;import&lt;/span&gt; Depends&lt;span&gt;,&lt;/span&gt; FastAPI&lt;span&gt;,&lt;/span&gt; Response&lt;span&gt;,&lt;/span&gt; status  &lt;span&gt;# 👈 new imports&lt;/span&gt;&#xA;&lt;span&gt;from&lt;/span&gt; fastapi&lt;span&gt;.&lt;/span&gt;security &lt;span&gt;import&lt;/span&gt; HTTPBearer&#xA; &#xA;&lt;span&gt;from&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;utils &lt;span&gt;import&lt;/span&gt; VerifyToken  &lt;span&gt;# 👈 new import&lt;/span&gt;&#xA;&#xA;&lt;span&gt;# Scheme for the Authorization header&lt;/span&gt;&#xA;token_auth_scheme &lt;span&gt;=&lt;/span&gt; HTTPBearer&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA; &#xA;&lt;span&gt;# Creates app instance&lt;/span&gt;&#xA;app &lt;span&gt;=&lt;/span&gt; FastAPI&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA; &#xA; &#xA;&lt;span&gt;@app&lt;span&gt;.&lt;/span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/public&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;No access token required to access this route&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA; &#xA;   result &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;       &lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;success&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;       &lt;span&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Hello from a public endpoint! You don&amp;#39;t need to be &amp;#34;&lt;/span&gt;&#xA;               &lt;span&gt;&amp;#34;authenticated to see this.&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;   &lt;span&gt;}&lt;/span&gt;&#xA;   &lt;span&gt;return&lt;/span&gt; result&#xA; &#xA; &#xA;&lt;span&gt;@app&lt;span&gt;.&lt;/span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/private&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;:&lt;/span&gt; Response&lt;span&gt;,&lt;/span&gt; token&lt;span&gt;:&lt;/span&gt; &lt;span&gt;str&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; Depends&lt;span&gt;(&lt;/span&gt;token_auth_scheme&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;  &lt;span&gt;# 👈 updated code&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;A valid access token is required to access this route&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA; &#xA;    result &lt;span&gt;=&lt;/span&gt; VerifyToken&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;.&lt;/span&gt;credentials&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;verify&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;  &lt;span&gt;# 👈 updated code&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;# 👇 new code&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; result&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;       response&lt;span&gt;.&lt;/span&gt;status_code &lt;span&gt;=&lt;/span&gt; status&lt;span&gt;.&lt;/span&gt;HTTP_400_BAD_REQUEST&#xA;       &lt;span&gt;return&lt;/span&gt; result&#xA;    &lt;span&gt;# 👆 new code&lt;/span&gt;&#xA; &#xA;    &lt;span&gt;return&lt;/span&gt; result&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this update, you are properly setting up your protected endpoint and doing all the verification steps for the access tokens you need. 🎉&lt;/p&gt;&lt;p&gt;Even though you started your server with the &lt;code&gt;&lt;span&gt;--&lt;/span&gt;reload&lt;/code&gt; flag because you need to make sure the configuration is loaded, it is a good time to terminate the &lt;code&gt;uvicorn&lt;/code&gt; process and then restart the server. That will guarantee the proper functionality of your API with the configuration parameters from the &lt;code&gt;&lt;span&gt;.&lt;/span&gt;config&lt;/code&gt; file or environment variables.&lt;/p&gt;&lt;p&gt;Before you can make requests to the protected endpoint in the &lt;code&gt;FastAPI&lt;/code&gt; server, you need the access token from Auth0. You can get it by copying it from the Auth0 dashboard in the &lt;code&gt;Test&lt;/code&gt; tab of your API. &lt;/p&gt;&lt;p&gt;You can also use a curl &lt;code&gt;&lt;span&gt;POST&lt;/span&gt;&lt;/code&gt; request to Auth0&amp;#39;s &lt;code&gt;oauth&lt;span&gt;/&lt;/span&gt;token&lt;/code&gt; endpoint to get the access token, and you can copy this request from the &lt;code&gt;Test&lt;/code&gt; tab of your API in the Auth0 dashboard. The curl request will look like this; remember to fill the values as necessary:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; -X &lt;span&gt;&amp;#39;POST&amp;#39;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;--url &lt;span&gt;&amp;#39;https://&amp;lt;YOUR DOMAIN HERE&amp;gt;/oauth/token&amp;#39;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA; --header &lt;span&gt;&amp;#39;content-type: application/x-www-form-urlencoded&amp;#39;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA; --data &lt;span&gt;grant_type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;client_credentials &lt;span&gt;\&lt;/span&gt;&#xA; --data &lt;span&gt;&amp;#39;client_id=&amp;lt;YOUR CLIENT ID HERE&amp;gt;&amp;#39;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA; --data &lt;span&gt;client_secret&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;YOUR CLIENT SECRET HERE&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA; --data &lt;span&gt;audience&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;YOUR AUDIENCE HERE&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the command line, you should see a response containing your bearer token, like this one:​​&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;access_token&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;lt;YOUR_BEARER_TOKEN&amp;gt;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;expires_in&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;86400&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;token_type&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Bearer&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can use this access token to access the private endpoint:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; -X &lt;span&gt;&amp;#39;GET&amp;#39;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;--url &lt;span&gt;&amp;#39;http://127.0.0.1:8000/api/private&amp;#39;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;--header  &lt;span&gt;&amp;#39;Authorization: Bearer &amp;lt;YOUR_BEARER_TOKEN&amp;gt;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the request succeeds, the server will send back the payload of the access token:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;iss&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;https://&amp;lt;YOUR_DOMAIN&amp;gt;/&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;iojadoijawdioWDasdijasoid@clients&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;aud&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;http://&amp;lt;YOUR_AUDIENCE&amp;gt;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;iat&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1630341660&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;exp&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1630428060&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;azp&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;ADKASDawdopjaodjwopdAWDdsd&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;gty&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;client-credentials&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Keep in mind that if the validation fails, you should see the details of what went wrong. &lt;/p&gt;&lt;p&gt;And that’s it — you have finished protecting the private endpoint and testing its protection.&lt;/p&gt;&lt;h2 id=&#34;Recap&#34;&gt;Recap&lt;/h2&gt;&lt;p&gt;You learned quite a few things in this blog post. To start, you learned the basics of &lt;code&gt;FastAPI&lt;/code&gt; by implementing two endpoints — one public, one private. You saw how simple it is to make requests to both of these endpoints. You created a verification class and saw how PyJWT helps you validate an Auth0 access token, and you learned what JWKS is.&lt;/p&gt;&lt;p&gt;You went through the process of creating your API in the Auth0 dashboard. You also learned how to secure one of your endpoints by leveraging the dependency injection system FastAPI provides to help you implement integrations. And you did all of this very quickly.&lt;/p&gt;&lt;p&gt;In short, you’ve learned how easy it is to get up and running with &lt;code&gt;FastAPI&lt;/code&gt;, as well as how to use Auth0 for protecting your endpoints.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/auth0-blog/auth0-python-fastapi-sample&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;In this GitHub repo&lt;/a&gt;, you’ll find the full code for the sample application you built today. If you have any questions, ask them in the community forum thread for this blog post.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/build-and-secure-fastapi-server-with-auth0/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn the basics of FastAPI, how to quickly set up a server and secure endpoints with Auth0.</summary>
  </entry>
  <entry>
    <title>Secure a Rails API with Auth0</title>
    <updated>2021-10-07T15:03:00Z</updated>
    <id>tag:auth0.com,2021-10-07:/blog/secure-rails-api/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;If you want to expose an API publicly on the Internet, authorization will be a requirement for you sooner or later. You want to verify that the client consuming the API has the appropriate permissions.&lt;/p&gt;&lt;p&gt;This guide is exactly about that. We&amp;#39;ll be securing an API written using &lt;a href=&#34;https://rubyonrails.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Ruby On Rails&lt;/a&gt;, with &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0&lt;/a&gt; as the authorization server.&lt;/p&gt;&lt;p&gt;There&amp;#39;s a repository with the code so that you can follow along in &lt;a href=&#34;https://github.com/auth0-blog/rails-api-auth0&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Securing-an-API&#34;&gt;Securing an API&lt;/h2&gt;&lt;p&gt;I didn&amp;#39;t explain what I mean by securing an API yet. Essentially, we&amp;#39;re ensuring that protected routes are accessible only for the users with enough rights.&lt;/p&gt;&lt;p&gt;When it comes to security, it&amp;#39;s generally considered a bad idea to roll your own bespoke implementation. Instead, I&amp;#39;m using &lt;a href=&#34;https://auth0.com/docs/protocols/protocol-oauth2&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OAuth&lt;/a&gt;, a battle-tested and widely used authorization framework for web applications.&lt;/p&gt;&lt;p&gt;In this context, Auth0 fulfills the role of the &lt;em&gt;authorization server&lt;/em&gt; and abstracts a significant part of the work away from us. That way, we can focus on delivering value to our users.&lt;/p&gt;&lt;p&gt;Without getting into too many details on how OAuth works, we assume that calls to our API will include a bearer token using the industry-standard &lt;a href=&#34;https://jwt.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;JWT&lt;/a&gt; format. The token contains a series of claims regarding its issuer, how long it is valid, and what rights it grants. Let&amp;#39;s have a look at a sample token:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;iss&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;https://yourTenant.eu.auth0.com/&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;zHwnsh0j2sTj4u3ss6YedSFrzyb2&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;aud&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;https://targetAudience.com&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;iat&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1621369130&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;exp&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1791455530&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;azp&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;ThEkgdG1NndLlWoNMcEdEr2KJIs9vKad&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;scope&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;openid profile read:admin-messages&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;permissions&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;read:admin-messages&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We&amp;#39;re going to implement verification for that token and reject requests that don&amp;#39;t have the required permissions.&lt;/p&gt;&lt;h2 id=&#34;Getting-Started&#34;&gt;Getting Started&lt;/h2&gt;&lt;p&gt;We&amp;#39;re getting started with our base application, bootstrapped with Rails 6. This &lt;a href=&#34;https://github.com/auth0-blog/rails-api-auth0/tree/starter&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;branch&lt;/a&gt; is a good starting point. You can download it by running the following command in a terminal window:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;git&lt;/span&gt; clone -b starter --single-branch https://github.com/auth0-blog/rails-api-auth0.git&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The API has three endpoints with different levels of protection:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/code&gt;: Public route.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/code&gt;: Requires a valid access token.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;admin&lt;/code&gt;: Requires a valid access token. Since Auth0 uses JWT as its access token format, we can inspect it and make sure it has a &lt;code&gt;permissions&lt;/code&gt; claim that contains the scope &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Running-the-Application&#34;&gt;Running the Application&lt;/h3&gt;&lt;p&gt;To run the application, we first need the correct ruby version. The easiest way to do so is to use a version manager like &lt;a href=&#34;https://github.com/rbenv/rbenv&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;rbenv&lt;/a&gt;. Once you install it, run this command inside the repository to install the right version of ruby:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rbenv &lt;span&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Install the dependencies for the application:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;bundle &lt;span&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And finally, run the application:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;bin/rails s&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can verify that the application is working correctly with &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; localhost:6060/api/messages/public&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The command will return a 200 code, plus the message:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;The API doesn&amp;#39;t require an access token to share this message.&amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Creating-an-API-on-Auth0&#34;&gt;Creating an API on Auth0&lt;/h3&gt;&lt;p&gt;To secure the API with Auth0, you need an Auth0 account. If you haven&amp;#39;t one, you can &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for free&lt;/a&gt; right now. In the &lt;em&gt;APIs&lt;/em&gt; section of the &lt;a href=&#34;https://manage.auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 dashboard&lt;/a&gt;, click &lt;em&gt;Create API&lt;/em&gt;. Provide a name and an identifier for your API. You will use the identifier as an &lt;code&gt;audience&lt;/code&gt; later, when you are configuring the access token verification. Leave the &lt;em&gt;Signing Algorithm&lt;/em&gt; as RS256.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5y9rQHvjBzjxQo5aDIrsKE/842c2fadf99e521fc20a8326dfa8ee2e/create-auth0-api.png&#34; alt=&#34;Create API&#34;/&gt;&lt;/p&gt;&lt;p&gt;Once you create the API, go to the &lt;em&gt;Permissions&lt;/em&gt; tab in the API details and add a permission called &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/jT9dzB4AcCM0BAoYgCizu/2abc44d5604d03267b957281e93749a8/configure-permissions.png&#34; alt=&#34;Create permission&#34;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: While you are in the Auth0 Dashboard, take note of your Auth0 domain. You will need it soon. This is a string in the form &lt;code&gt;&lt;span&gt;YOUR&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;TENANT&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt; where &lt;code&gt;&lt;span&gt;YOUR&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;TENANT&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;/code&gt; is the name you provided when you created your account with Auth0. For more information, &lt;a href=&#34;https://auth0.com/docs/getting-started/the-basics#domains&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check the documentation&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Preparing-the-Application-for-Validation&#34;&gt;Preparing the Application for Validation&lt;/h2&gt;&lt;p&gt;Alright, our application is ready to go and in dire need of some &lt;em&gt;security&lt;/em&gt;. Before that, we need to add some configurations.&lt;/p&gt;&lt;p&gt;You dutifully stored the &lt;code&gt;domain&lt;/code&gt; and the &lt;code&gt;audience&lt;/code&gt; after creating the API, right? Let&amp;#39;s use them. In the &lt;em&gt;Rails&lt;/em&gt; world, the convention is to add this in the &lt;code&gt;config&lt;/code&gt; folder, using &lt;a href=&#34;https://yaml.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;YAML&lt;/a&gt;. The file is called &lt;code&gt;config&lt;span&gt;/&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;We don&amp;#39;t want to store credentials in our code, so we&amp;#39;ll export the values as environment variables, named &lt;code&gt;&lt;span&gt;AUTH0_DOMAIN&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;AUTH0_AUDIENCE&lt;/span&gt;&lt;/code&gt;. The configuration uses those values and keeps them safely away from source control!&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;development&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;issuerUri&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &amp;lt;%= ENV&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;AUTH0_DOMAIN&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; %&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;audience&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &amp;lt;%= ENV&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;AUTH0_AUDIENCE&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; %&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, set &lt;code&gt;&lt;span&gt;AUTH0_DOMAIN&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;AUTH0_AUDIENCE&lt;/span&gt;&lt;/code&gt; environment variables to the &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;audience&lt;/code&gt; values for your API.&lt;/p&gt;&lt;p&gt;With this, the application is ready to connect with Auth0. Let&amp;#39;s move on to the implementation.&lt;/p&gt;&lt;h2 id=&#34;Validating-the-Access-Token&#34;&gt;Validating the Access Token&lt;/h2&gt;&lt;p&gt;Before we get started, let&amp;#39;s talk for a second about authentication frameworks for rails. There are a bunch of alternatives in the ecosystem, such as &lt;a href=&#34;https://github.com/CanCanCommunity/cancancan&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CanCanCan&lt;/a&gt;, or &lt;a href=&#34;https://github.com/heartcombo/devise&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;devise&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;However, our case is an awkward fit for those. We don&amp;#39;t want to take over user management. We only want to validate tokens issued by the authorization server. In this case, using a framework won&amp;#39;t bring us as much benefit as something like, say, &lt;a href=&#34;https://spring.io/projects/spring-security&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring Security&lt;/a&gt;. That&amp;#39;s why we only rely on an extra gem, &lt;a href=&#34;https://github.com/jwt/ruby-jwt&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;jwt&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The code implementing the authorization check lives in the &lt;a href=&#34;https://github.com/auth0-blog/rails-api-auth0/tree/add-authorization&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;add-authorization&lt;/a&gt; branch. Let&amp;#39;s see how it works!&lt;/p&gt;&lt;h3 id=&#34;Utilizing-the-JWT-Library&#34;&gt;Utilizing the JWT Library&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;jwt&lt;/code&gt; library brings a lot of functionality to make our API able to validate and manage tokens in JWT formats like the ones issued by Auth0. We need to do three things:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;We need to fetch the &lt;a href=&#34;https://auth0.com/docs/tokens/json-web-tokens/json-web-key-sets&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;JWKS&lt;/a&gt; configuration from &lt;em&gt;Auth0&lt;/em&gt; so that we know what is the public key to verify the access token signature&lt;/li&gt;&lt;li&gt;With the public key, the issuer, and the audience, we want to verify the token&lt;/li&gt;&lt;li&gt;After verifying the token, we&amp;#39;re decoding it to access the &lt;code&gt;permissions&lt;/code&gt; claim (or any other information contained in the token, really)&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Decoding-the-Token&#34;&gt;Decoding the Token&lt;/h3&gt;&lt;p&gt;Let&amp;#39;s get down to business. We&amp;#39;re implementing the verification/decoding logic in the &lt;code&gt;lib&lt;/code&gt; folder, in a file called &lt;code&gt;json_web_token&lt;span&gt;.&lt;/span&gt;rb&lt;/code&gt;. We&amp;#39;re starting by fetching the &lt;em&gt;JWKS&lt;/em&gt; data:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# lib/json_web_token.rb&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;jwt&amp;#39;&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;net/http&amp;#39;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;JsonWebToken&lt;/span&gt;&#xA;  &lt;span&gt;class&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;algorithm&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;RS256&amp;#39;&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;header&lt;span&gt;)&lt;/span&gt;&#xA;      jwks_hash&lt;span&gt;[&lt;/span&gt;header&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;kid&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;jwks_hash&lt;/span&gt;&lt;/span&gt;&#xA;      jwks_raw &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Net&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;HTTP&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;get &lt;span&gt;URI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;span&gt;&lt;span&gt;#{&lt;/span&gt;issuer&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;.well-known/jwks.json&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      jwks_keys &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;JSON&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;parse&lt;span&gt;(&lt;/span&gt;jwks_raw&lt;span&gt;)&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      jwks_keys&lt;span&gt;.&lt;/span&gt;map &lt;span&gt;do&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;k&lt;span&gt;|&lt;/span&gt;&#xA;        &lt;span&gt;[&lt;/span&gt;&#xA;          k&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;kid&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;OpenSSL&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;X509&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;Certificate&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Base64&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;decode64&lt;span&gt;(&lt;/span&gt;k&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;x5c&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;first&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;public_key&#xA;        &lt;span&gt;]&lt;/span&gt;&#xA;      &lt;span&gt;end&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to_h&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;issuer&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;https://&lt;span&gt;&lt;span&gt;#{&lt;/span&gt;&lt;span&gt;Rails&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;application&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;x&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;issuerUri&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;/&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, through the &lt;code&gt;issuerUri&lt;/code&gt; we know where to look for the data. Then, we parse the key so that we can consume it in the library.&lt;/p&gt;&lt;p&gt;The next step is to add an extra method to the class, &lt;code&gt;verify&lt;/code&gt;, that verifies and decodes the token at the same time:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# lib/json_web_token.rb&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;JsonWebToken&lt;/span&gt;&#xA;  &lt;span&gt;class&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;verify&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;JWT&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;decode&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;,&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                 &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;# Verify the signature of this token&lt;/span&gt;&#xA;                 algorithm&lt;span&gt;:&lt;/span&gt; algorithm&lt;span&gt;,&lt;/span&gt;&#xA;                 iss&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Rails&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;application&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;x&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;issuerUri&lt;span&gt;,&lt;/span&gt;&#xA;                 verify_iss&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                 aud&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Rails&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;application&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;x&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;audience&lt;span&gt;,&lt;/span&gt;&#xA;                 verify_aud&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;do&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;header&lt;span&gt;|&lt;/span&gt;&#xA;        key&lt;span&gt;(&lt;/span&gt;header&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;end&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;# ... existing code ...&lt;/span&gt;&#xA;    &#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is all the code that we need for the actual verification. Neat, isn&amp;#39;t it? But our controllers are still insecure. Not for long, though.&lt;/p&gt;&lt;h2 id=&#34;Protecting-the-Endpoints&#34;&gt;Protecting the Endpoints&lt;/h2&gt;&lt;p&gt;To make it as convenient as possible, we&amp;#39;re creating a hook that we&amp;#39;re going to run before any route that needs authentication. To make it available for every controller, it lives in the &lt;code&gt;app&lt;span&gt;/&lt;/span&gt;controllers&lt;span&gt;/&lt;/span&gt;application_controller&lt;span&gt;.&lt;/span&gt;rb&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# app/controllers/application_controller.rb&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;json_web_token&amp;#39;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ApplicationController&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;ActionController&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&#xA;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;authorize&lt;/span&gt;&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&#xA;    valid&lt;span&gt;,&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; verify&lt;span&gt;(&lt;/span&gt;raw_token&lt;span&gt;(&lt;/span&gt;request&lt;span&gt;.&lt;/span&gt;headers&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    head &lt;span&gt;:unauthorized&lt;/span&gt; &lt;span&gt;unless&lt;/span&gt; valid&#xA;&#xA;    &lt;span&gt;@token&lt;/span&gt; &lt;span&gt;||&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; result&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;private&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;verify&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;)&lt;/span&gt;&#xA;    payload&lt;span&gt;,&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;JsonWebToken&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;verify&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; payload&lt;span&gt;]&lt;/span&gt;&#xA;  &lt;span&gt;rescue&lt;/span&gt; &lt;span&gt;JWT&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;DecodeError&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; e&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; e&lt;span&gt;]&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;raw_token&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;headers&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; headers&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;split&lt;span&gt;.&lt;/span&gt;last &lt;span&gt;if&lt;/span&gt; headers&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;present&lt;span&gt;?&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;nil&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We take the token from the standard &lt;em&gt;Authorization&lt;/em&gt; header. Then, we verify it with the code from the previous section. There are two possible paths after running &lt;code&gt;authorize&lt;span&gt;!&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If the token isn&amp;#39;t there, or it&amp;#39;s invalid for any reason, the processing stops right there, and the call returns a 401&lt;/li&gt;&lt;li&gt;If the token is valid, we continue the execution and store the token in &lt;code&gt;@token&lt;/code&gt; so that it&amp;#39;s available&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We&amp;#39;re protecting both the &lt;code&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/code&gt; and the &lt;code&gt;admin&lt;/code&gt; routes with this hook, thanks to &lt;a href=&#34;https://api.rubyonrails.org/v6.1.4/classes/AbstractController/Callbacks/ClassMethods.html#method-i-before_action&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;before_action&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# app/controllers/api/messages_controller.rb&lt;/span&gt;&#xA;&lt;span&gt;module&lt;/span&gt; &lt;span&gt;Api&lt;/span&gt;&#xA;  &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MessagesController&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;ApplicationController&lt;/span&gt;&#xA;    before_action &lt;span&gt;:authorize!&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; except&lt;span&gt;:&lt;/span&gt; &lt;span&gt;%i[public]&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Custom-Error-Messages&#34;&gt;Custom Error Messages&lt;/h3&gt;&lt;p&gt;Don&amp;#39;t you feel better knowing that the application is not exposing private stuff anymore? I definitely do. But we got to help our users. A blank 401 message might not give them enough information to debug the issue. Let&amp;#39;s extend the hook to return something more explicit:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# app/controllers/application_controller.rb&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ApplicationController&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;ActionController&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&#xA;   &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;authorize&lt;/span&gt;&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&#xA;     valid&lt;span&gt;,&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; verify&lt;span&gt;(&lt;/span&gt;raw_token&lt;span&gt;(&lt;/span&gt;request&lt;span&gt;.&lt;/span&gt;headers&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;     &lt;span&gt;# 👇 old code&lt;/span&gt;&#xA;     &lt;span&gt;# head :unauthorized unless valid&lt;/span&gt;&#xA;     &lt;span&gt;# 👇 new code&lt;/span&gt;&#xA;     render json&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; message&lt;span&gt;:&lt;/span&gt; result &lt;span&gt;}&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to_json&lt;span&gt;,&lt;/span&gt; status&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:unauthorized&lt;/span&gt; &lt;span&gt;unless&lt;/span&gt; valid&#xA;&#xA;     &lt;span&gt;@token&lt;/span&gt; &lt;span&gt;||&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; result&#xA;   &lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we get a message that&amp;#39;s more helpful than an HTTP code without a body.&lt;/p&gt;&lt;h2 id=&#34;Testing-the-Protected-Endpoints&#34;&gt;Testing the Protected Endpoints&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s test the protected endpoint:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; localhost:6060/api/messages/protected&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The command will return a 401, because we&amp;#39;re not authorized. We need to get a valid token from Auth0.&lt;/p&gt;&lt;p&gt;The simplest way is to access the &lt;a href=&#34;https://manage.auth0.com/#/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;API section of your Auth0 Dashboard&lt;/a&gt; again, select the API that you created before and click the &lt;em&gt;Test&lt;/em&gt; tab. In this section, you can get a temporary token to test your Web API by clicking the &lt;em&gt;Copy Token&lt;/em&gt; icon as shown in the following picture:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6zmU9XWwgZLWIAFF0qu6IP/50e2aa27469142c138b814731aa0233d/copy-access-token.png&#34; alt=&#34;Test Token&#34;/&gt;&lt;/p&gt;&lt;p&gt;Let&amp;#39;s attach the token to the request:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;TOKEN&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;the-test-token&#xA;&lt;span&gt;curl&lt;/span&gt; localhost:6060/api/messages/protected -H &lt;span&gt;&amp;#34;Authorization: Bearer &lt;span&gt;$TOKEN&lt;/span&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The request works now! &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;The API successfully validated your access token.&amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Checking-for-permissions&#34;&gt;Checking for permissions&lt;/h2&gt;&lt;p&gt;There&amp;#39;s one requirement pending. As you might recall, for &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;admin&lt;/code&gt; a valid token isn&amp;#39;t enough. Rather, we expect the correct permission in the &lt;code&gt;permissions&lt;/code&gt; claim. This extra check allows us to define more granular access criteria for our endpoints. This functionality is implemented in the &lt;a href=&#34;https://github.com/auth0-blog/rails-api-auth0/tree/add-rbac&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;add-rbac&lt;/a&gt; branch.&lt;/p&gt;&lt;p&gt;We&amp;#39;re adding a new method in the &lt;code&gt;application_controller&lt;/code&gt;, &lt;code&gt;check_permissions&lt;/code&gt;. It takes the decoded token and looks for a given permission:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# app/controllers/application_controller.rb&lt;/span&gt;&#xA;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;json_web_token&amp;#39;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ApplicationController&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;ActionController&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&#xA;  &lt;span&gt;# ... existing code ...&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;can_read_admin_messages&lt;/span&gt;&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&#xA;    check_permissions&lt;span&gt;(&lt;/span&gt;&lt;span&gt;@token&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;read:admin-messages&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;&lt;span&gt;check_permissions&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;token&lt;span&gt;,&lt;/span&gt; permission&lt;span&gt;)&lt;/span&gt;&#xA;    permissions &lt;span&gt;=&lt;/span&gt; token&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;permissions&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    permissions &lt;span&gt;=&lt;/span&gt; permissions&lt;span&gt;.&lt;/span&gt;split &lt;span&gt;if&lt;/span&gt; permissions&lt;span&gt;.&lt;/span&gt;is_a&lt;span&gt;?&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;unless&lt;/span&gt; permissions&lt;span&gt;.&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;permission&lt;span&gt;)&lt;/span&gt;&#xA;      render json&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; message&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;Access is denied&amp;#39;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;to_json&lt;span&gt;,&lt;/span&gt;&#xA;             status&lt;span&gt;:&lt;/span&gt; &lt;span&gt;:unauthorized&lt;/span&gt;&#xA;    &lt;span&gt;end&lt;/span&gt;&#xA;  &lt;span&gt;end&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;# ... existing code ...&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We use a &lt;code&gt;before_action&lt;/code&gt; again to protect the &lt;code&gt;admin&lt;/code&gt; endpoint:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# app/controllers/api/messages_controller.rb&lt;/span&gt;&#xA;&lt;span&gt;module&lt;/span&gt; &lt;span&gt;Api&lt;/span&gt;&#xA;  &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MessagesController&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;ApplicationController&lt;/span&gt;&#xA;    before_action &lt;span&gt;:can_read_admin_messages!&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; only&lt;span&gt;:&lt;/span&gt; &lt;span&gt;%i[admin]&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;# ... existing code ...&lt;/span&gt;&#xA;&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this, each route in our sample application is safe the way we wanted.&lt;/p&gt;&lt;h3 id=&#34;Testing-Permissions&#34;&gt;Testing Permissions&lt;/h3&gt;&lt;p&gt;If you try to call the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;messages&lt;span&gt;/&lt;/span&gt;admin&lt;/code&gt; endpoint with the token we generated before, it will return a 401. Our token is valid but doesn&amp;#39;t have the necessary permissions. Let&amp;#39;s create a new one!&lt;/p&gt;&lt;p&gt;Back in your &lt;a href=&#34;https://manage.auth0.com/#/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;API configuration page on the Auth0 Dashboard&lt;/a&gt;, select the &lt;em&gt;Machine to Machine Applications&lt;/em&gt; tab. You&amp;#39;ll get a list of applications, some of them with the &lt;em&gt;(Test Application)&lt;/em&gt; label in the name. These applications are automatically created by Auth0 when you create an API there. They are meant as test clients from your API. One of them should have the &lt;em&gt;Authorized&lt;/em&gt; switch on. Click the dropdown next to it and check the &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt; permission:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2Iva8EtxfjdsunLbDTGVyD/71034bf799e82e51c7e5f7152ccd6adf/adding-permissions.png&#34; alt=&#34;Adding Permissions&#34;/&gt;&lt;/p&gt;&lt;p&gt;Then, click the &lt;em&gt;Update&lt;/em&gt; button, move again to the &lt;em&gt;Test&lt;/em&gt; tab, and copy the new token that has been generated for you. Let&amp;#39;s try again:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;TOKEN&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;the-new-test-token&#xA;&lt;span&gt;curl&lt;/span&gt; localhost:6060/api/messages/admin -H &lt;span&gt;&amp;#34;Authorization: Bearer &lt;span&gt;$TOKEN&lt;/span&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The request works now!&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;The API successfully recognized you as an admin.&amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this guide, we&amp;#39;ve added authorization to a Rails API by using Auth0 as an authorization server. Thanks to the &lt;code&gt;jwt&lt;/code&gt; gem, we don&amp;#39;t have to invest much effort. We use the library to decode the bearer token that the API receives. After that, it&amp;#39;s a matter of checking the relevant routes before each request.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/secure-rails-api/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to secure an API written using Ruby On Rails with Auth0 authorization services.</summary>
  </entry>
  <entry>
    <title>Auth0 Welcomes Bhawna Singh to the Team</title>
    <updated>2021-10-07T14:18:00Z</updated>
    <id>tag:auth0.com,2021-10-07:/blog/auth0-welcomes-bhawna-singh-to-the-team/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section itemscope=&#34;&#34; itemtype=&#34;http://schema.org/BlogPosting&#34; itemprop=&#34;mainEntity&#34;&gt;&lt;header&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;ENGINEERING&lt;/span&gt;&lt;/p&gt;&lt;p itemprop=&#34;description&#34;&gt;Bhawna Singh joined Auth0 as SVP of Engineering. Why she plans to focus on mentoring innovation.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;October 07, 2021&lt;/p&gt;&lt;meta itemprop=&#34;datePublished&#34; content=&#34;2021-10-07&#34;/&gt;&lt;meta itemprop=&#34;dateModified&#34; content=&#34;2021-10-07&#34;/&gt;&lt;/div&gt;&lt;/header&gt;&lt;header&gt;&lt;div&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7AsuaROfW0vGJaHpUPqGrW/c509de75eeb8c42543afe95883138554/Bhawna_Singh.jpg&#34;/&gt;&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;ENGINEERING&lt;/span&gt;&lt;/p&gt;&lt;p itemprop=&#34;description&#34;&gt;Bhawna Singh joined Auth0 as SVP of Engineering. Why she plans to focus on mentoring innovation.&lt;/p&gt;&lt;p&gt;October 07, 2021&lt;/p&gt;&lt;meta itemprop=&#34;datePublished&#34; content=&#34;2021-10-07&#34;/&gt;&lt;meta itemprop=&#34;dateModified&#34; content=&#34;2021-10-07&#34;/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/header&gt;&lt;article&gt;&lt;main id=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;&lt;div&gt;&lt;p&gt;Relying on Ask.com for quick answers or researching your next role at Glassdoor? You’re likely leaning on innovations &lt;a href=&#34;https://auth0.com/blog/bhawna-singh-joins-auth0-leadership-team-as-senior-vice-president-of-engineering&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Bhawna Singh&lt;/a&gt; helped make possible. With over twenty years of helping companies through tech transformations, scaling challenges, and participating in multiple acquisitions, Bhawna brings an understanding of how to deliver growth that serves end users and develops talent on the way to building revenue.&lt;/p&gt;&lt;p&gt;That experience is coming to Auth0 at a critical moment. While we’re seeking to strongly align our product and engineering teams, we’re also working through our recent acquisition by Okta — and we want to do that while sustaining our growth trajectory.&lt;/p&gt;&lt;p&gt;We sat down with Bhawna to learn more about how she grows talent through innovation, what brought her to Auth0, and why she’ll be applying the power of diversity of thought to the global identity market.&lt;/p&gt;&lt;h3 id=&#34;Why-join-Auth0-&#34;&gt;Why join Auth0?&lt;/h3&gt;&lt;p&gt;Three things intrigued me. &lt;/p&gt;&lt;p&gt;First, you, Eugenio [Pace], Matias [Woloski], were upfront and transparent about challenges. More importantly, though, Auth0’s mission and roadmap was compelling. &lt;/p&gt;&lt;p&gt;Second, I really enjoy the people interaction that comes from working with a global team. But Auth0’s engineering talent spread across many countries presents an interesting time zone challenge.&lt;/p&gt;&lt;p&gt;Third, the technological challenges presented with Auth0’s high growth. Auth0 needs to work across 21 deployment regions to securely and reliably support billions of logins a month while continuously calling the team and technology to meet growth demands. This is an area where I can help and learn at the same time. Bottom line? I see the high growth and complexity of challenges ahead as an opportunity to make a larger impact.&lt;/p&gt;&lt;h3 id=&#34;Now-that-you-re-here--what-are-your-short-term-goals-&#34;&gt;Now that you’re here, what are your short-term goals?&lt;/h3&gt;&lt;p&gt;In the short term, hiring is my top priority. Even before Okta’s acquisition, Auth0 had big hiring goals. I am currently partnering with multiple teams and leaders on our hiring and onboarding strategy. At Auth0, we are solving hard problems around authentication, security, scale, and a product that needs to be highly available, along with continuous innovation in the identity space. So making sure new engineers understand that when they come to Auth0, they’re going to get to solve hard problems with leadership support (which means mentorship, team building, and securing proper funding) and strong cross-org alignment, specifically with product and process teams.&lt;/p&gt;&lt;h3 id=&#34;Longer-term-&#34;&gt;Longer-term?&lt;/h3&gt;&lt;p&gt;Mid-term, I’m looking to build Auth0’s engineering vision and roadmap to align our technology investments and product innovation plans. This will also play into our longer-term Okta + Auth0 vision. As a team, we are constantly innovating and making big bets. It is important that we build external awareness of key initiatives (watch for more engineering-specific content) to help continue attracting top talent and satisfying evolving customer needs.&lt;/p&gt;&lt;h3 id=&#34;If-I-m-a-new-or-current-engineer-at-Auth0--what-kind-of-leadership-can-I-expect-from-you-&#34;&gt;If I’m a new or current engineer at Auth0, what kind of leadership can I expect from you?&lt;/h3&gt;&lt;p&gt;Table stakes for me are genuine empathy. But if I am going to ask you to rally behind me, there are really four core qualities that I look for in leaders, whether I am looking in the mirror or at leadership across an org.&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;strong&gt;High-accountability.&lt;/strong&gt; Everyone is going to make mistakes. I hold myself highly accountable for what happens in my org. This helps build team integrity, trust, and collective ethics. The point is never to be mistake-free but to make sure we take the time to learn from our mistakes.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Listening-based communication.&lt;/strong&gt; For a lot of people, listening is passive. For me, active listening means checking that you’ve effectively communicated what needs to be communicated and making sure it was received correctly. Information and feedback need to flow both ways, which is also key to building a transparent organization.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Planning long-term.&lt;/strong&gt; As we look at our organization and tech stack, we need to invest in our long-term vision and strategy along with making short-term bets and wins. Aligning engineering with our vision and long-term goals means investing in people, investing in our technology, and strengthening innovation.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Investing in leaders.&lt;/strong&gt; The mentors I wanted and needed weren’t right there at the start of my career. If I could go back and change something in my own career, it would be to mentor sooner. Investing in developing team leadership through mentoring, coaching, or providing access to additional training and contacts can make a huge difference in the amount of creativity and innovation that comes out of an org. But more importantly, it helps keep the entire industry growing and innovating. I ensure that I am coaching my leaders to grow, and together we are building an organization inspired by learning and problem-solving. I also make every effort in connecting with underrepresented groups regularly and evaluate how effectively I help them to achieve their goals. If you’re on my team and would appreciate mentorship, I will either mentor you directly or connect you with someone within my network.&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;What-did-it-take-to-break-into-executive-roles--Especially-if-you-re-a-woman-or-underrepresented-person-in-tech--what-five-steps-should-you-take-to-break-in-&#34;&gt;What did it take to break into executive roles? Especially if you’re a woman or underrepresented person in tech, what five steps should you take to break in?&lt;/h3&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;strong&gt;Say yes to stretch assignments.&lt;/strong&gt; Mentors or coaches are usually telling you what’s happening, but if an opportunity comes your way, it means someone has vouched for you. Of course, you need to evaluate whether or not this assignment is right for you at this point in your life, but if you can, say “yes”.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Seek mentors — and trust them to identify your gaps.&lt;/strong&gt; We all have self-doubts, but I sometimes see women calling out “gaps” that I don’t really see as their weakness. Finding a mentor who can confirm your true gaps and strengths is critical. Then it’s important to do that homework to actively address the things you need to do in order to reach that goal.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Get comfortable with taking risks and failing.&lt;/strong&gt; As an executive, the situations that come your way usually do not have a playbook. Being comfortable with taking risks, failing, and learning from the experience is the only path forward.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Network.&lt;/strong&gt; Look for peers (in addition to mentors) that you can lean on and ask for best practices. This is easier for some than others. Here are concrete steps that work:&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Talk to your manager and express interest in mentorship.&lt;/strong&gt; Your manager can lean in and help and/or provide recommendations and intros to other mentors.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Reach out to your People/Human Resources partner for mentorship.&lt;/strong&gt; They can connect you with internal mentors, in addition to external opportunities.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Identify your goals.&lt;/strong&gt; Work on self-awareness. Avoid an open-ended discussion. Identify two to three areas you’d like to work on. This will make it easier for your network to help you take action that matters.&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;Our-security-team-talks-about-relying-on--diversity-of-thought--to-help-secure-our-product-and-ensure-a-stronger-security-culture-that-protects-our-customers-and-the-internet--How-does-diverse-thinking-help-fuel-an-effective-engineering-team-&#34;&gt;Our security team talks about relying on “diversity of thought” to help secure our product and ensure a stronger security culture that protects our customers and the internet. How does diverse thinking help fuel an effective engineering team?&lt;/h3&gt;&lt;p&gt;Security is part of engineering, and the teams collaborate closely to identify solutions grounded in the &lt;a href=&#34;https://auth0.com/blog/why-auth0-is-shifting-left-on-security/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Secure by Design approach&lt;/a&gt;. Diverse backgrounds bring diverse thoughts with multiple perspectives to get us to the right solution for all our customers. Auth0 was not created for just one company in the US or one company in another country. Our customer space requires a large global setup. One perspective just won’t work.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Tell me about why you helped found the &lt;a href=&#34;https://www.linkedin.com/company/neythri-futures-fund/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Neythri Futures Fund&lt;/a&gt; (NFF).&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The core reason we all came together to found the NFF was to fuel diversity at the top. We focus specifically on funding companies founded by women and underrepresented groups because we weren’t seeing women investors in this space. If you want to fuel diversity, you have to fund it.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;What makes a good ally?&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;We all feel we should know the answer here, but this is an evolving area. I am a continual learner in this space, so this means making sure I am listening and aware that I am going to make mistakes. Not intentionally, of course, but coming from a place of being comfortable with learning and listening hopefully makes it easier for others to point out my mistakes so I can learn from them. Immediately trying to fix everything is not the answer. The constant learning can’t stop with me. I need to pass it on to my team, leadership, and my network. We need to share what we learn to build collective awareness in this area.&lt;/p&gt;&lt;h3 id=&#34;After-being-through-more-than-five-acquisitions--what-kind-of-leadership-does-it-take-to-move-companies-through-mergers-and-acquisitions-towards-success-for-both-employees-and-customers-&#34;&gt;After being through more than five acquisitions, what kind of leadership does it take to move companies through mergers and acquisitions towards success for both employees and customers?&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Aligning mission and core values.&lt;/strong&gt; How does the acquiree fit in/influence the mission?&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Bringing people along through communication.&lt;/strong&gt; An acquisition is change management at a grand scale. Being clear about challenges and opportunities, especially for growth acquisitions, helps people bring the collaborative vision into reality.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Put together a plan for how you will bring people together — and actively communicate that plan.&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Understand that this is a complex process.&lt;/strong&gt; Know that there are areas that might not work out, while there are people who thrive on complex challenges. Actively choose to let those people lead and bring in those who are looking to work collaboratively. Frankly, I’m excited to be able to help Okta and Auth0 at this time.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Learn-more-about-identity-and-opportunities-at-Auth0&#34;&gt;Learn more about identity and opportunities at Auth0&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;If you’d like to learn more about how Auth0 can help speed your product to market, reach &lt;a href=&#34;https://auth0.com/contact-us&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;out to our team&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;If you’re interested in helping us solve complex problems, you’ll find &lt;a href=&#34;https://auth0.com/careers/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;current listings here&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/main&gt;&lt;/article&gt;&lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/auth0-welcomes-bhawna-singh-to-the-team/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Bhawna Singh joined Auth0 as SVP of Engineering. Why she plans to focus on mentoring innovation.</summary>
  </entry>
  <entry>
    <title>Bhawna Singh Joins Auth0 Leadership Team as Senior Vice President of Engineering</title>
    <updated>2021-10-07T14:16:00Z</updated>
    <id>tag:auth0.com,2021-10-07:/blog/bhawna-singh-joins-auth0-leadership-team-as-senior-vice-president-of-engineering/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section itemscope=&#34;&#34; itemtype=&#34;http://schema.org/BlogPosting&#34; itemprop=&#34;mainEntity&#34;&gt;&lt;header&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;Leadership&lt;/span&gt;&lt;/p&gt;&lt;p itemprop=&#34;description&#34;&gt;Former SVP of Engineering and CTO at Glassdoor and Ask.com bolsters management team&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Last Updated On: October 07, 2021&lt;/p&gt;&lt;meta itemprop=&#34;datePublished&#34; content=&#34;2021-10-07&#34;/&gt;&lt;meta itemprop=&#34;dateModified&#34; content=&#34;2021-10-07&#34;/&gt;&lt;/div&gt;&lt;/header&gt;&lt;header&gt;&lt;div&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4WvCBPXRYPtxWSIIO3yHVJ/b42049305c220e3957595e0d32eeb5f3/Announcements1.png&#34;/&gt;&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;Leadership&lt;/span&gt;&lt;/p&gt;&lt;p itemprop=&#34;description&#34;&gt;Former SVP of Engineering and CTO at Glassdoor and Ask.com bolsters management team&lt;/p&gt;&lt;p&gt;Last Updated On: October 07, 2021&lt;/p&gt;&lt;meta itemprop=&#34;datePublished&#34; content=&#34;2021-10-07&#34;/&gt;&lt;meta itemprop=&#34;dateModified&#34; content=&#34;2021-10-07&#34;/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/header&gt;&lt;article&gt;&lt;main id=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;BELLEVUE, Wash. – Oct. 7, 2021 –&lt;/strong&gt; The &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Identity Platform&lt;/a&gt;, a product unit within Okta (NASDAQ: OKTA), today announced that &lt;a href=&#34;https://www.linkedin.com/in/bhawnasingh/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Bhawna Singh&lt;/a&gt; has joined the company as Senior Vice President (SVP) of Engineering. With more than two decades of engineering and technology leadership, Singh will be instrumental in continuing to build and lead Auth0’s talented team of engineers in transforming technology and increasing value to its growing customer base.&lt;/p&gt;&lt;p&gt;Prior to joining Auth0, Singh held senior engineering and technology roles, including SVP of Engineering and CTO at Glassdoor, where she was responsible for technological innovation overseeing the company’s websites and mobile platforms, in addition to its software engineering data platform and machine learning teams. Before Glassdoor, Singh held engineering leadership roles at Ask.com, Sybase, and AT&amp;amp;T. As SVP of Engineering, Singh will lead the high growth of Auth0’s solutions, strengthen trust and reliability for their global customer base, and continue to invest in engineering excellence. &lt;/p&gt;&lt;p&gt;“The technological complexity of identity, innovation of the company’s solutions, and transparent and inclusive workplace culture immediately drew me to Auth0,” said Singh. “I’m excited to join a global team filled with experts that continuously innovate and all share one common vision — secure access for all.”&lt;/p&gt;&lt;p&gt;“Identity is one of the most strategic investments an organization will make today, and as a company deeply passionate about our customers and dedicated to continuous improvement, Bhawna will play a critical role in helping us shape the future of identity and enabling our customers to accelerate innovation,” said Shiv Ramji, Chief Product Officer at Auth0. “With deeply experienced leadership in engineering and technology, Bhawna is an invaluable addition to Auth0, and we are honored she is joining us.”&lt;/p&gt;&lt;p&gt;To learn more about Singh and Auth0’s engineering team, visit &lt;a href=&#34;https://auth0.com/blog/auth0-welcomes-bhawna-singh-to-the-team&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0’s blog&lt;/a&gt;.&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;The Auth0 Identity Platform, a product unit within Okta, takes a modern approach to identity and enables organizations to provide secure access to any application, for any user. Auth0 is a highly customizable platform that is as simple as development teams want, and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;h3 id=&#34;Media-Contacts-&#34;&gt;Media Contacts:&lt;/h3&gt;&lt;p&gt;Global Communications&lt;br/&gt;Auth0&lt;br/&gt;&lt;a href=&#34;mailto:press@auth0.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;press@auth0.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Matter Communications for Auth0&lt;br/&gt;&lt;a href=&#34;mailto:auth0@matternow.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;auth0@matternow.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 id=&#34;Investor-Contact-&#34;&gt;Investor Contact:&lt;/h3&gt;&lt;p&gt;Investor Relations&lt;br/&gt;&lt;a href=&#34;mailto:investor@okta.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;investor@okta.com&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/main&gt;&lt;/article&gt;&lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/bhawna-singh-joins-auth0-leadership-team-as-senior-vice-president-of-engineering/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Former SVP of Engineering and CTO at Glassdoor and Ask.com bolsters management team</summary>
  </entry>
  <entry>
    <title>What Your Customers Really Want From Your Login Box</title>
    <updated>2021-10-06T12:53:00Z</updated>
    <id>tag:auth0.com,2021-10-06:/blog/what-your-customers-really-want-from-your-login-box/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3ECzfjyrDSou0kNDj6grh6/dcd039b4cd4f6f4b85d3aa4da305d679/Uploaded_from_What_Your_Customers_Really_Want_From_Your_Login_Box_-_Steven_Rees-Pullman&#34; alt=&#34;image&#34;/&gt;&lt;/p&gt;&lt;p&gt;We think a lot about login boxes. &lt;/p&gt;&lt;p&gt;But you would be surprised by just how much your customers are thinking about them as well.&lt;/p&gt;&lt;p&gt;Now, we would say that, since we are in the business of making login boxes. So that’s why we went out and asked people what &lt;em&gt;they&lt;/em&gt; thought: more than 17,000 global technology leaders and consumers across 12 global markets: United States, United Kingdom, Belgium, France, Germany, the Netherlands, Australia, Singapore, Japan, Argentina, Brazil, and Mexico.&lt;/p&gt;&lt;p&gt;The survey report, called “&lt;a href=&#34;https://info.auth0.com/expectation-vs-reality&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Expectation vs. Reality at The Log Inn&lt;/a&gt;,” and conducted in partnership with third-party research firm YouGov, revealed that most organizations fail to meet consumer expectations around login experiences.&lt;/p&gt;&lt;p&gt;Everywhere we looked, consumers&amp;#39; expectations didn’t match reality. If you’ve ever had to fill out endless registration forms just to buy a pair of jeans, or create yet another (weak) password for websites owned by the same company (even worse), you know the pain. &lt;/p&gt;&lt;p&gt;And it makes sense, right? Login should be simple, invisible almost. Because it’s a marketer’s worst nightmare when you get frustrated and decide to take your business elsewhere.&lt;/p&gt;&lt;p&gt;At least, that &lt;em&gt;would&lt;/em&gt; &lt;em&gt;be&lt;/em&gt; the case, if anyone were paying attention to the login box.&lt;/p&gt;&lt;h2 id=&#34;Won-t-Somebody-Think-of-the-Login-Boxes-&#34;&gt;Won’t Somebody Think of the Login Boxes?&lt;/h2&gt;&lt;p&gt;It’s easy to forget about login boxes. After all, no one visits a website just to play with the &lt;a href=&#34;https://auth0.com/blog/introducing-auth0-craptchas/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CAPTCHA&lt;/a&gt; – and they are rarely the first place executives and their marketing teams look to increase revenue and reduce churn. But, if you have a website or application, it’s likely you have a login box, and it’s the first thing that customers see. &lt;/p&gt;&lt;p&gt;So, what did the study show customers want?&lt;/p&gt;&lt;p&gt;A winning lottery ticket?&lt;/p&gt;&lt;p&gt;No.&lt;/p&gt;&lt;p&gt;They want choice.&lt;/p&gt;&lt;p&gt;When they arrive at your login, customers want convenience and control: they want to choose which authentication method to use – whether it’s MFA or SSO or biometrics. They want a brand experience that resembles a concierge desk: a 24/7 service where no demand is too big. To top it off, they don’t want to see any technical glitches, or have to re-sign up on another device: they want seamless omni-channel experiences – not to be left out in the cold.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Passwords just don’t do it for people&lt;/strong&gt; — Consumers rank “Creating a password that has to meet certain requirements” (e.g. number of digits, symbols) among their top frustrations with the sign-up process (47%).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;One ID to rule them all&lt;/strong&gt; — Almost half (48%) of consumers are likely to sign up to an app or service if they can use Single Sign-On (SSO) – using a single ID and password for multiple related services. This number is higher for Latin American (61%) consumers compared to their global counterparts (APAC 52%, EMEA 41%, and the US 47%).&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;But-Login-Boxes-Aren-t-Really-a-Big-Deal--Right-&#34;&gt;But Login Boxes Aren’t Really a Big Deal, Right?&lt;/h2&gt;&lt;p&gt;To make things interesting, we asked businesses what they thought consumers thought (getting meta with this study), and they often didn’t realize just how important login experiences really are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Minding the gap with biometrics&lt;/strong&gt;&#xA;  &lt;ul&gt;&lt;li&gt;44% of consumers are likely to sign up to an app or online service if a company offers biometric authentication — only 25% of companies offer biometrics as an option.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Going fully passwordless&lt;/strong&gt;&#xA;  &lt;ul&gt;&lt;li&gt;LATAM (43%), US (42%), and APAC (40%) consumers are more likely than their EMEA counterparts (29%) to sign-up to an app/online service if they were able to use passwordless services. Across the globe, just 20% of companies offer passwordless authentication.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;It-s-More-than-Just-a-Login-Box&#34;&gt;It’s More than Just a Login Box&lt;/h2&gt;&lt;p&gt;Not having the technologies above is not just a minor annoyance; it’s an actual turn-off for many consumers when it comes to engaging with your brand. Oftentimes your login box is actually standing in the way of users signing up to your app or making a purchase.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;It’s not about the journey, it’s about the destination&lt;/strong&gt;&#xA;  &lt;ul&gt;&lt;li&gt;About half of the consumers (48%) are frustrated by having to fill in long login or sign-up forms. This number rises for consumers in APAC (55%) and LATAM (51%) compared to consumers in EMEA (46%) and the US (36%).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;I’m outta here&lt;/strong&gt;&#xA;  &lt;ul&gt;&lt;li&gt;Our research shows that 83% of consumers have abandoned a purchase or an account setup because the login process was too arduous. This rises to the highest levels in Singapore (89%), Brazil (87%), Australia (86%), France (86%), US (86%), UK (85%), and Mexico (85%).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Okay--You-Have-My-Attention&#34;&gt;Okay, You Have My Attention&lt;/h2&gt;&lt;p&gt;Good. Very few executives are used to paying much attention to customer identity management (their login box). But as many of us emerge from the past year, more digital than we’ve ever been, creating safe and simple access to online services is essential. &lt;/p&gt;&lt;p&gt;The opportunity to build trust is massive.&lt;/p&gt;&lt;p&gt;This is admittedly just a glimpse into the minds and behaviors of consumers. We are working on a series of blogs that look deeper at what consumers want, and how the login box can help.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/what-your-customers-really-want-from-your-login-box/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Taking a closer look at our recent YouGov survey results</summary>
  </entry>
  <entry>
    <title>Implementing an API Gateway in ASP.NET Core with Ocelot</title>
    <updated>2021-10-05T14:51:00Z</updated>
    <id>tag:auth0.com,2021-10-05:/blog/implementing-api-gateway-in-aspnet-core-with-ocelot/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;The urge towards adopting microservices architecture has been a welcome trend in the software development industry.  Microservices architecture has been one of the most talked-about technologies in recent times – it has been embraced by many leading organizations worldwide. Originally developed to solve the limitations of monolithic systems, microservices architecture has seen a significant increase in popularity over the last several years, mainly due to increased scalability, flexibility, and performance.&lt;/p&gt;&lt;p&gt;Since microservices-based applications comprise several different services, you often need a common interface or gateway to call these services so that you define and manage all concerns in one place rather than replicate them across all downstream services. This is precisely where an API Gateway comes in. This article briefly discusses the concepts around microservices architecture and how you can work with API Gateways to have a consistent way to connect to the microservices. Let&amp;#39;s get started!&lt;/p&gt;&lt;h2 id=&#34;What-Is-Microservices-Architecture-&#34;&gt;What Is Microservices Architecture?&lt;/h2&gt;&lt;p&gt;Microservices architecture is a service-oriented architecture (SOA) variant in which an application comprises a collection of lightweight, loosely coupled, modular services. These services can be built to execute on various platforms and independently developed, tested, deployed, and managed.&lt;/p&gt;&lt;p&gt;Microservices architecture can replace long-running, complicated monolithic systems requiring considerable resource and management overhead. Microservice is a word that refers to a service having a limited set of functionalities rather than referring to the length of the code used to create it.&lt;/p&gt;&lt;h2 id=&#34;What-Is-an-API-Gateway-&#34;&gt;What Is an API Gateway?&lt;/h2&gt;&lt;p&gt;When building microservices-based applications, an API Gateway is needed to have a central place where authentication, throttling, orchestration, etc., is implemented. Without an API Gateway in place, you might typically implement each of these in each service, and hence maintaining them for each service would be a daunting task at hand. An API Gateway decouples the service producer from its consumer, providing a security layer since you need not expose your microservices directly.&lt;/p&gt;&lt;p&gt;As soon as it receives a request, it breaks it into multiple requests (if needed) and then routes them to the appropriate downstream microservice. You can take advantage of an API Gateway to centralize, manage, and monitor the non-functional requirements of an application, orchestrate the cross-functional microservices, and reduce roundtrips. By managing requests consistently, an API Gateway can help reduce the latency and improve security.&lt;/p&gt;&lt;p&gt;The figure below illustrates an API Gateway used to connect to two downstream microservices named Customer and Product.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3GS9a9hK4MG45UQuG2DVC8/bf86b3d095b072199d88dce416907472/api-gateway-architecture.png&#34; alt=&#34;API Gateway architecture diagram&#34;/&gt;&lt;/p&gt;&lt;p&gt;Usually, the service consumers or clients of a microservice don&amp;#39;t communicate with it directly. Instead, an API Gateway provides a single entry point for directing traffic to various microservices, as shown in the figure above. Hence the clients don&amp;#39;t have any direct access to the services and cannot exploit the services. If your API Gateway is behind the firewall, you can add an extra layer of protection around the attack surface.&lt;/p&gt;&lt;p&gt;An API Gateway pattern corresponds to two famous &lt;a href=&#34;https://en.wikipedia.org/wiki/Design_Patterns&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Gang of Four design patterns&lt;/a&gt;: Facade and Adapter. Like the Facade design pattern, an API Gateway provides an API to the consumers while encapsulating the internal architecture. An API Gateway enables communication and collaboration like in the Adapter design pattern, even if the interfaces are incompatible.&lt;/p&gt;&lt;h3 id=&#34;--Why-Do-We-Need-an-API-Gateway---&#34;&gt;&lt;strong&gt;Why Do We Need an API Gateway?&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;A microservices-based application comprises many different microservices built using homogenous or heterogeneous technologies. An API Gateway provides a centralized point of entry for external consumers, regardless of the number or composition of the downstream microservices. An API Gateway can often contain an additional layer of rate-limiting and security.&lt;/p&gt;&lt;p&gt;Here are the main benefits of an API Gateway:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Better isolation&lt;/strong&gt;: An API Gateway provides isolation by preventing direct access to internal concerns. As a result, it can encapsulate service discovery, versioning, and other internal details from the service consumers or clients. Additionally, an API Gateway enables you to add more microservices or change boundaries without impacting the external consumers.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Improved security&lt;/strong&gt;: An API Gateway provides a security layer for your microservices that can help prevent attack vectors such as SQL Injection, Denial-of-Service (DoS), etc. You can leverage an API Gateway to authenticate users. If a particular service consumer needs data from multiple services, you need to authenticate the user just once hence reducing latency and making your authentication mechanism consistent across the application.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Performance metrics&lt;/strong&gt;: Since an API Gateway is a single component through which all requests and responses flow, it is a great place to collect metrics. For example, you can measure the count and execution times of the requests forwarded to the downstream microservices.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Reduced complexity&lt;/strong&gt;: Microservices have specific common concerns that include logging, rate-limiting, security, etc. You&amp;#39;ll need more time to develop these concerns in each of the microservices your application is using. An API Gateway can eliminate this code duplication hence reducing the effort required to create these components.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;API-Gateways-and-reverse-proxies&#34;&gt;API Gateways and reverse proxies&lt;/h3&gt;&lt;p&gt;There is a lot of confusion around a reverse proxy and an API Gateway. While there are similarities between them, there are subtle differences between the two as well.&lt;/p&gt;&lt;p&gt;Reverse proxy servers typically sit behind a firewall and route requests from the client to the appropriate back-end server. A reverse proxy is a lightweight API Gateway that comprises a few basic security and monitoring capabilities. So, if you need an API Gateway with basic features, a reverse proxy server should suffice. Note that a reverse proxy is incapable of performing transformation or orchestration.&lt;/p&gt;&lt;p&gt;An API gateway sits between the client and a set of back-end services and provides much more extensive security and monitoring capabilities than a reverse proxy server. An API Gateway provides support for comprehensive service orchestration, transformation, and mediation. It also offers extensive support for transport security - much more than a simple proxy can provide.&lt;/p&gt;&lt;h2 id=&#34;Introducing-Ocelot&#34;&gt;Introducing Ocelot&lt;/h2&gt;&lt;p&gt;In this article, we are going to use &lt;a href=&#34;https://github.com/ThreeMammals/Ocelot&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Ocelot API Gateway&lt;/a&gt;. It is a lightweight, open-source, scalable, and fast API Gateway based on .NET Core and specially designed for microservices architecture. Basically, it is a set of middleware designed to work with ASP.NET Core. It has several features such as routing, caching, security, rate limiting, etc.&lt;/p&gt;&lt;h2 id=&#34;The-Order-Processing-Microservices-Based-Application&#34;&gt;The Order Processing Microservices-Based Application&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s now put the concepts we&amp;#39;ve learned thus far into practice by implementing a concrete example. We&amp;#39;ll build an order processing application that illustrates how an API Gateway can be used to invoke each service to retrieve customer and product data using the Customer and Product microservice, respectively. &lt;/p&gt;&lt;p&gt;Typically, an order processing microservices-based application comprises microservices such as Product, Customer, Order, OrderDetails, etc. In this example, we&amp;#39;ll consider a minimalistic microservices-based application. This application will contain an API Gateway and two microservices - the Product and Customer microservice. The application would be simple so that we can focus more on building the API Gateway.&lt;/p&gt;&lt;h3 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;&lt;p&gt;To execute the code examples shown in this article, here are the minimum requirements you should have installed in your system:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;.NET 5 SDK&lt;/li&gt;&lt;li&gt;Visual Studio 2019&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;The-solution-structure&#34;&gt;The solution structure&lt;/h3&gt;&lt;p&gt;The application you are going to build will comprise the following projects as part of a single Visual Studio solution:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;OrderProcessing&lt;/code&gt; project - This project represents the API Gateway and is responsible for getting requests from the clients and invoking the microservices.&lt;/li&gt;&lt;li&gt;&lt;code&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Customer&lt;/code&gt; project - This project defines the classes and interfaces used to represent the customer microservice.&lt;/li&gt;&lt;li&gt;&lt;code&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Product&lt;/code&gt; project - This project defines the types used to represent the product microservice.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The Customer microservice project will comprise the following classes and interfaces:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Customer&lt;/code&gt; class – This represents the customer entity class.&lt;/li&gt;&lt;li&gt;&lt;code&gt;ICustomerRepository&lt;/code&gt; interface – This represents the interface for the customer repository.&lt;/li&gt;&lt;li&gt;&lt;code&gt;CustomerRepository&lt;/code&gt;class – This represents the customer repository class that implements the &lt;code&gt;ICustomerRepository&lt;/code&gt; interface.&lt;/li&gt;&lt;li&gt;&lt;code&gt;CustomerController&lt;/code&gt; class – This class represents the API controller for the Customer microservice.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The Product microservice project will contain the following types:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Product&lt;/code&gt; class – This class represents the product entity.&lt;/li&gt;&lt;li&gt;&lt;code&gt;IProductRepository&lt;/code&gt; interface – This represents the interface for the product repository.&lt;/li&gt;&lt;li&gt;&lt;code&gt;ProductRepository&lt;/code&gt; class – This is the product repository class that implements the &lt;code&gt;IProductRepository&lt;/code&gt; interface.&lt;/li&gt;&lt;li&gt;&lt;code&gt;ProductController&lt;/code&gt; class – This represents the API controller class for the Product microservice.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The following picture shows how the solution structure of the completed&#xA;application will look like:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5eiiZahb4K7nC6X3W8IIGw/1d3fca58dfba684ba2be6c9902fc6beb/demo-project-structure.png&#34; alt=&#34;Solution Structure of the OrderProcessing Application&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Create-the-projects-for-the-Order-Processing-application&#34;&gt;Create the projects for the Order Processing application&lt;/h3&gt;&lt;p&gt;Open a command shell and enter the following commands to create the three ASP.NET projects we need:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;dotnet new web --framework &lt;span&gt;&amp;#34;net5.0&amp;#34;&lt;/span&gt; -o OrderProcessing&#xA;dotnet new webapi --framework &lt;span&gt;&amp;#34;net5.0&amp;#34;&lt;/span&gt; -o OrderProcessing.Customer&#xA;dotnet new webapi --framework &lt;span&gt;&amp;#34;net5.0&amp;#34;&lt;/span&gt; -o OrderProcessing.Product&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While the &lt;code&gt;OrderProcessing&lt;/code&gt; project is an empty ASP.NET project, the other two projects are WebAPI projects. Ensure that you delete the default controller and entity classes from these two projects as we don’t need them.&lt;/p&gt;&lt;h3 id=&#34;Create-the-Customer-microservice&#34;&gt;Create the Customer microservice&lt;/h3&gt;&lt;p&gt;Create a new file named &lt;code&gt;Customer&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; at the root of the &lt;code&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Customer&lt;/code&gt; project with the following code in there:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing.Customer/Customer.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Customer&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Customer&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Guid&lt;/span&gt; Id &lt;span&gt;{&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; FirstName &lt;span&gt;{&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; LastName &lt;span&gt;{&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; EmailAddress &lt;span&gt;{&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Create-the-CustomerRepository-class&#34;&gt;Create the CustomerRepository class&lt;/h4&gt;&lt;p&gt;Create an interface named &lt;code&gt;ICustomerRepository&lt;/code&gt; in a file named &lt;code&gt;ICustomerRepository&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; at the root of the &lt;code&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Customer&lt;/code&gt; project with the following code in there:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing.Customer/ICustomerRepository.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Collections&lt;span&gt;.&lt;/span&gt;Generic&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Threading&lt;span&gt;.&lt;/span&gt;Tasks&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Customer&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;ICustomerRepository&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;List&lt;span&gt;&amp;lt;&lt;/span&gt;Customer&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;GetAllCustomers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create the &lt;code&gt;CustomerRepository&lt;/code&gt; class that implements the &lt;code&gt;ICustomerRepository&lt;/code&gt; interface at the root of the &lt;code&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Customer&lt;/code&gt; project as shown in the following code snippet:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing.Customer/CustomerRepository.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Collections&lt;span&gt;.&lt;/span&gt;Generic&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Linq&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Threading&lt;span&gt;.&lt;/span&gt;Tasks&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Customer&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomerRepository&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;ICustomerRepository&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;List&lt;span&gt;&amp;lt;&lt;/span&gt;Customer&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; customers &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;List&lt;span&gt;&amp;lt;&lt;/span&gt;Customer&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;CustomerRepository&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            customers&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;Customer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;                Id &lt;span&gt;=&lt;/span&gt; Guid&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NewGuid&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                FirstName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Joydip&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                LastName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Kanjilal&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                EmailAddress &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;joydipkanjilal@yahoo.com&amp;#34;&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;            customers&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;Customer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;                Id &lt;span&gt;=&lt;/span&gt; Guid&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NewGuid&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                FirstName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Steve&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                LastName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Smith&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                EmailAddress &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;stevesmith@yahoo.com&amp;#34;&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;List&lt;span&gt;&amp;lt;&lt;/span&gt;Customer&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;GetAllCustomers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;&lt;span&gt;FromResult&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;customers&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Create-the-CustomerController-class&#34;&gt;Create the CustomerController class&lt;/h4&gt;&lt;p&gt;In the &lt;code&gt;Controllers&lt;/code&gt; folder of the &lt;code&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Customer&lt;/code&gt; project, create an API controller named &lt;code&gt;CustomerController&lt;/code&gt; and replace the default code with the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing.Customer/Controllers/CustomerController.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;Microsoft&lt;span&gt;.&lt;/span&gt;AspNetCore&lt;span&gt;.&lt;/span&gt;Mvc&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Collections&lt;span&gt;.&lt;/span&gt;Generic&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Threading&lt;span&gt;.&lt;/span&gt;Tasks&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Customer&lt;span&gt;.&lt;/span&gt;Controllers&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Route&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;api/[controller]&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;ApiController&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomerController&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;ControllerBase&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;ICustomerRepository&lt;/span&gt; _customerRepository&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;CustomerController&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ICustomerRepository&lt;/span&gt; customerRepository&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            _customerRepository &lt;span&gt;=&lt;/span&gt; customerRepository&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;HttpGet&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;ActionResult&lt;span&gt;&amp;lt;&lt;/span&gt;List&lt;span&gt;&amp;lt;&lt;/span&gt;Customer&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;GetAllCustomers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; _customerRepository&lt;span&gt;.&lt;/span&gt;&lt;span&gt;GetAllCustomers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Create-the-Product-microservice&#34;&gt;Create the Product microservice&lt;/h3&gt;&lt;p&gt;Create a new file named &lt;code&gt;Product&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; at the root of the &lt;code&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Product&lt;/code&gt; project with the following code in there:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing.Product/Product.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Product&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Product&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Guid&lt;/span&gt; Id &lt;span&gt;{&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; Code &lt;span&gt;{&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; Name &lt;span&gt;{&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; Quantity_In_Stock &lt;span&gt;{&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;decimal&lt;/span&gt;&lt;/span&gt; Unit_Price &lt;span&gt;{&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Create-the-ProductRepository-class&#34;&gt;Create the ProductRepository class&lt;/h4&gt;&lt;p&gt;Next, you should create a new file called &lt;code&gt;IProductRepository&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; in the &lt;code&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Product&lt;/code&gt; project and write the following code to create the &lt;code&gt;IProductRepository&lt;/code&gt; interface.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing.Product/IProductRepository.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Collections&lt;span&gt;.&lt;/span&gt;Generic&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Threading&lt;span&gt;.&lt;/span&gt;Tasks&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Product&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;IProductRepository&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;List&lt;span&gt;&amp;lt;&lt;/span&gt;Product&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;GetAllProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create the &lt;code&gt;ProductRepository&lt;/code&gt; class that implements the &lt;code&gt;IProductRepository&lt;/code&gt; interface at the root of the &lt;code&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Product&lt;/code&gt; project as shown in the following code snippet:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing.Product/ProductRepository.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Collections&lt;span&gt;.&lt;/span&gt;Generic&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Threading&lt;span&gt;.&lt;/span&gt;Tasks&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Product&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ProductRepository&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;IProductRepository&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;List&lt;span&gt;&amp;lt;&lt;/span&gt;Product&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; products &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;List&lt;span&gt;&amp;lt;&lt;/span&gt;Product&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ProductRepository&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            products&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;Product&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;                Id &lt;span&gt;=&lt;/span&gt; Guid&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NewGuid&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                Code &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;P0001&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                Name &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Lenovo Laptop&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                Quantity_In_Stock &lt;span&gt;=&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                Unit_Price &lt;span&gt;=&lt;/span&gt; &lt;span&gt;125000&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;            products&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;Product&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;                Id &lt;span&gt;=&lt;/span&gt; Guid&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NewGuid&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                Code &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;P0002&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                Name &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;DELL Laptop&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                Quantity_In_Stock &lt;span&gt;=&lt;/span&gt; &lt;span&gt;25&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                Unit_Price &lt;span&gt;=&lt;/span&gt; &lt;span&gt;135000&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;            products&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;Product&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;                Id &lt;span&gt;=&lt;/span&gt; Guid&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NewGuid&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                Code &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;P0003&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                Name &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;HP Laptop&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                Quantity_In_Stock &lt;span&gt;=&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                Unit_Price &lt;span&gt;=&lt;/span&gt; &lt;span&gt;115000&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;List&lt;span&gt;&amp;lt;&lt;/span&gt;Product&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;GetAllProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;&lt;span&gt;FromResult&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;products&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Create-the-ProductController-class&#34;&gt;Create the ProductController class&lt;/h4&gt;&lt;p&gt;In the &lt;code&gt;Controllers&lt;/code&gt; folder of the &lt;code&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Product&lt;/code&gt; project, create an API controller named &lt;code&gt;ProductController&lt;/code&gt; and replace the default code with the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing.Product/ProductController.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;Microsoft&lt;span&gt;.&lt;/span&gt;AspNetCore&lt;span&gt;.&lt;/span&gt;Mvc&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Collections&lt;span&gt;.&lt;/span&gt;Generic&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Threading&lt;span&gt;.&lt;/span&gt;Tasks&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;OrderProcessing&lt;span&gt;.&lt;/span&gt;Product&lt;span&gt;.&lt;/span&gt;Controllers&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Route&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;api/[controller]&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;ApiController&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ProductController&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;ControllerBase&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;IProductRepository&lt;/span&gt; _productRepository&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ProductController&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IProductRepository&lt;/span&gt; customerRepository&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            _productRepository &lt;span&gt;=&lt;/span&gt; customerRepository&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;HttpGet&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;ActionResult&lt;span&gt;&amp;lt;&lt;/span&gt;List&lt;span&gt;&amp;lt;&lt;/span&gt;Product&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;GetAllCustomers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; _productRepository&lt;span&gt;.&lt;/span&gt;&lt;span&gt;GetAllProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Implement-the-API-Gateway-Using-Ocelot&#34;&gt;Implement the API Gateway Using Ocelot&lt;/h2&gt;&lt;p&gt;Now that the projects have been created with the necessary files in them, let’s implement the API Gateway using Ocelot.&lt;/p&gt;&lt;p&gt;Before going any further, you should be aware of the terms &lt;strong&gt;upstream&lt;/strong&gt; and &lt;strong&gt;downstream&lt;/strong&gt;. While upstream refers to the request sent by the client to the API Gateway, downstream is related to the request that the API Gateway sends to a particular microservice.&lt;/p&gt;&lt;h3 id=&#34;Install-the-required-package&#34;&gt;Install the required package&lt;/h3&gt;&lt;p&gt;To work with Ocelot, you must install it in your ASP.NET Core project. In our case, you will install Ocelot in the &lt;code&gt;OrderProcessing&lt;/code&gt; project. You can do it by using the NuGet Package Manager inside Visual Studio IDE. Alternatively, you can execute the following command at the Package Manager Console window:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;Install-Package&lt;/span&gt; Ocelot&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Implement-routing&#34;&gt;Implement routing&lt;/h3&gt;&lt;p&gt;An Ocelot API Gateway accepts an incoming HTTP request and forwards it to a downstream service. Ocelot makes use of routes to  define how a request is routed from one place to another. Add a new file named &lt;code&gt;ocelot&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; to this project with the following content in there:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing/Ocelot.json&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;Routes&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;      &lt;span&gt;//Customer API{&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamPathTemplate&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/api/Customer&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamScheme&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamHostAndPorts&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;               &lt;span&gt;&amp;#34;Host&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;               &lt;span&gt;&amp;#34;Port&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;20057&amp;#34;&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;         &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;UpstreamPathTemplate&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/Customer&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;UpstreamHttpMethod&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&#xA;         &lt;span&gt;]&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;//Product API{&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamPathTemplate&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/api/Product&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamScheme&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamHostAndPorts&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;               &lt;span&gt;&amp;#34;Host&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;               &lt;span&gt;&amp;#34;Port&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;32345&amp;#34;&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;         &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;UpstreamPathTemplate&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/Product&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;UpstreamHttpMethod&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&#xA;         &lt;span&gt;]&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;   &lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above configuration specifies the downstream and upstream metadata (scheme, path, ports) for the customer and product microservices. So, while use the upstream metadata to call the endpoints specified here, the request is routed to the appropriate downstream service as specified in the downstream metadata. In other words, the downstream metadata is used to specify the internal service URL to redirect a request to when the API Gateway receives a new request.&lt;/p&gt;&lt;p&gt;You should add Ocelot to the service container by calling the &lt;code&gt;AddOcelot&lt;/code&gt; method in the &lt;code&gt;ConfigureServices&lt;/code&gt; method of the &lt;code&gt;Startup&lt;/code&gt; class as shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing/Startup.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ... existing code&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt; services&lt;span&gt;)&lt;/span&gt; &#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddOcelot&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Configuration&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ... existing code&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, you should enable Ocelot in the &lt;code&gt;Configure&lt;/code&gt; method of the &lt;code&gt;Startup&lt;/code&gt; class by calling the &lt;code&gt;UseOcelot&lt;/code&gt; extension method as shown here:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing/Startup.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ... existing code&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Configure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IApplicationBuilder&lt;/span&gt; app&lt;span&gt;,&lt;/span&gt; &lt;span&gt;IWebHostEnvironment&lt;/span&gt; env&lt;span&gt;)&lt;/span&gt; &#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;env&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsDevelopment&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseDeveloperExceptionPage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseRouting&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseOcelot&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseEndpoints&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;endpoints &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    endpoints&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapGet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; context &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;await&lt;/span&gt; context&lt;span&gt;.&lt;/span&gt;Response&lt;span&gt;.&lt;/span&gt;&lt;span&gt;WriteAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ... existing code&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Run-the-projects&#34;&gt;Run the projects&lt;/h3&gt;&lt;p&gt;Now make sure that you&amp;#39;ve made all three projects as startup projects. To do this, follow these steps:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;In the Solution Explorer window, right-click on the solution file.&lt;/li&gt;&lt;li&gt;Click &amp;#34;Properties&amp;#34;.&lt;/li&gt;&lt;li&gt;In the &amp;#34;Property Pages&amp;#34; window, select the &amp;#34;Multiple startup projects&amp;#34; radio button:&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6has5yWrFDhGSMhgwEkrzK/6f237e6c673353528c0b7dbe2b8eef59/multiple-startup-projects-option.png&#34; alt=&#34;Multiple startup projects option in Visual Studio&#34;/&gt;&lt;/p&gt;&lt;ol start=&#34;4&#34;&gt;&lt;li&gt;Click Ok.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Press the F5 key to run the application. Now send an HTTP Get request to the following URL from &lt;a href=&#34;https://www.postman.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Postman&lt;/a&gt; or any other HTTP client of your choice:&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;http://localhost:39469/Customer&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://localhost:39469/Customer&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The HTTP Get method of the Customer controller will be executed and the output will look like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1HXo0qIRynV06ghuJGWzF9/3f3e0a5d04b69e8c9b7f752efa1eabc6/customer-response-from-microservice.png&#34; alt=&#34;The Customer Microservice in Execution!&#34;/&gt;&lt;/p&gt;&lt;p&gt;Send an HTTP Get request from Postman to the following URL:&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;http://localhost:39469/Product&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://localhost:39469/Product&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The request first goes to the API Gateway. Next, the API Gateway routes the request to the correct downstream microservice as specified in &lt;code&gt;ocelot&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt;. The HTTP Get method named &lt;code&gt;GetAllProducts&lt;/code&gt; of the &lt;code&gt;ProductController&lt;/code&gt; will be called, and the output will look like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/Y9M6Ephso4Stg4JJcDTQC/fa5e9ac505ca25b855ed544af7d1a0cf/product-response-from-microservice.png&#34; alt=&#34;The Product Microservice in Execution!&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;--Implement-rate-limiting--&#34;&gt;&lt;strong&gt;Implement rate limiting&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Rate limiting is a technique for controlling network traffic. It sets a limit on how many times you can perform a specific activity within a given period - for example, accessing a particular resource, logging into an account, etc. Typically, rate-limiting keeps track of the IP addresses and the time elapsed between requests. The IP address helps determine the source of a particular request.&lt;/p&gt;&lt;p&gt;A rate-limiting solution is adept at tracking the time elapsed between each request and the total number of requests in a particular period. If a single IP address makes excessive requests within a specific timeframe, the rate-limiting solution will reject the requests for a specified period.&lt;/p&gt;&lt;p&gt;In order to prevent your downstream services from being overburdened,  Ocelot enables rate-limiting of upstream requests. The following configuration illustrates how you specify rate-limiting in Ocelot:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing/Ocelot.json&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&amp;#34;RateLimitOptions&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;ClientWhitelist&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;      &#xA;   &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;EnableRateLimiting&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;Period&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;5s&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;PeriodTimespan&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;Limit&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;HttpStatusCode&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;429&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let us now examine each of these options briefly:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ClientWhitelist&lt;/code&gt; setting - This is an array used to specify the clients that should not be affected by the rate-limiting.&lt;/li&gt;&lt;li&gt;&lt;code&gt;EnableRateLimiting&lt;/code&gt; setting - This is a boolean value, &lt;code&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt; if you want to enable rate-limiting, &lt;code&gt;&lt;span&gt;false&lt;/span&gt;&lt;/code&gt; otherwise.&lt;/li&gt;&lt;li&gt;&lt;code&gt;HttpStatusCode&lt;/code&gt; setting - This is used to specify &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the HTTP status code that is returned when rate limiting occurs&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Period&lt;/code&gt; setting - This specifies the duration that the rate limit is applicable, which in turn implies that if you make more requests within this duration than what is allowed, you&amp;#39;ll need to wait for the duration specified in the &lt;code&gt;PeriodTimespan&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;PeriodTimespan&lt;/code&gt; setting - This is used to specify the duration after which you can retry to connect to a service.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Limit&lt;/code&gt; setting - This specifies the maximum number of requests that are allowed within the duration specified in &lt;code&gt;Period&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Let us assume that rate limiting is applied to the Product microservice only. The updated &lt;code&gt;ocelot&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; file will now look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing/Ocelot.json&lt;/span&gt;&#xA;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;Routes&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;      &lt;span&gt;//Customer API&lt;/span&gt;&#xA;     &lt;span&gt;{&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamPathTemplate&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/api/Customer&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamScheme&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamHostAndPorts&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;               &lt;span&gt;&amp;#34;Host&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;               &lt;span&gt;&amp;#34;Port&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;20057&amp;#34;&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;         &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;UpstreamPathTemplate&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/Customer&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;UpstreamHttpMethod&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&#xA;         &lt;span&gt;]&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;//Product API&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamPathTemplate&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/api/Product&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamScheme&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamHostAndPorts&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;               &lt;span&gt;&amp;#34;Host&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;               &lt;span&gt;&amp;#34;Port&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;32345&amp;#34;&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;         &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;RateLimitOptions&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;ClientWhitelist&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;               &#xA;            &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;EnableRateLimiting&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;Period&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;5s&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;PeriodTimespan&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;Limit&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&#xA;         &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;UpstreamPathTemplate&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/Product&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;UpstreamHttpMethod&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&#xA;         &lt;span&gt;]&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;   &lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, run the application and send frequent requests (more than 1 per 5sec) and you’ll see the following error:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4E7h9U32IrkfVkDUte217c/adcd0d2f62ed0bdebd623ff74ac324c7/rate-limit-error.png&#34; alt=&#34;Rate Limiting at work!&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Implement-caching&#34;&gt;Implement caching&lt;/h3&gt;&lt;p&gt;Caching is a widely popular technique used in web applications to keep data in memory so that the same data may be quickly accessed when required by the application. Ocelot provides support for basic caching. To take advantage of it, you should install the &lt;code&gt;Ocelot&lt;span&gt;.&lt;/span&gt;Cache&lt;span&gt;.&lt;/span&gt;CacheManager&lt;/code&gt; NuGet package as shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;Install-Package&lt;/span&gt; Ocelot&lt;span&gt;.&lt;/span&gt;Cache&lt;span&gt;.&lt;/span&gt;CacheManager&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, you should configure caching using the following code in the &lt;code&gt;ConfigureServices&lt;/code&gt; method:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing/Startup.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ... existing code ...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt; services&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddOcelot&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Configuration&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddCacheManager&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;x &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt;&#xA;        x&lt;span&gt;.&lt;/span&gt;&lt;span&gt;WithDictionaryHandle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ... existing code ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lastly, you should specify caching on a particular route in the route configuration using the following settings:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing/Ocelot.json&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ... existing settings ...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&amp;#34;Routes&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;   &lt;span&gt;//Customer API{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;DownstreamPathTemplate&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/api/Customer&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;DownstreamScheme&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;DownstreamHostAndPorts&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;         &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;Host&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;Port&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;20057&amp;#34;&lt;/span&gt;&#xA;         &lt;span&gt;}&lt;/span&gt;&#xA;      &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;FileCacheOptions&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;TtlSeconds&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;Region&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;customercaching&amp;#34;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;UpstreamPathTemplate&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/Customer&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;UpstreamHttpMethod&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&#xA;      &lt;span&gt;]&lt;/span&gt;&#xA;   &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;]&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ... existing settings ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, we&amp;#39;ve set &lt;code&gt;TtlSeconds&lt;/code&gt; to 30 seconds which implies that the cache will expire after this time has elapsed. Note that you should specify your cache configuration in the &lt;code&gt;FileCacheOptions&lt;/code&gt; section. The &lt;code&gt;Region&lt;/code&gt; setting identifies the area within the cache that will contain the data. This way you can clear that area by using the Ocelot&amp;#39;s administration API. &lt;/p&gt;&lt;p&gt;To test this, you can set a breakpoint on the HTTP Get method named &lt;code&gt;GetAllCustomers&lt;/code&gt; in the &lt;code&gt;CustomerController&lt;/code&gt; class. When you execute the application and send an HTTP Get request to the endpoint, the breakpoint will be hit as usual. However, all subsequent calls to the same endpoint within 30 seconds (this is the duration we&amp;#39;ve specified) will fetch data, but the breakpoint will not be hit anymore.&lt;/p&gt;&lt;h3 id=&#34;Implement-correlation-ID&#34;&gt;Implement correlation ID&lt;/h3&gt;&lt;p&gt;Ocelot enables a client to send a request Id in the header to the  server. Once this request Id is available in the middleware pipeline,  you can log it along with other information. Ocelot can also forward  this request Id to the downstream services if required. A &lt;strong&gt;correlation ID&lt;/strong&gt; is a unique identifier attached to every request and response and used to track requests and responses in a distributed application. You can use either a request Id or a correlation ID when working with Ocelot to track requests.&lt;/p&gt;&lt;p&gt;The primary difference between a request Id and a correlation ID is that while the former uniquely identifies every HTTP request, the latter is a unique identifier attached to a particular request-response chain. While you can use &lt;code&gt;Request&lt;span&gt;-&lt;/span&gt;Id&lt;/code&gt; for every HTTP request, you can use &lt;code&gt;&lt;span&gt;X&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;Correlation&lt;span&gt;-&lt;/span&gt;Id&lt;/code&gt; for an event chain of requests and responses. &lt;code&gt;&lt;span&gt;X&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;Correlation&lt;span&gt;-&lt;/span&gt;Id&lt;/code&gt; is the name of the HTTP header attached to the downstream requests used to track HTTP requests that flow through multiple back-end services.&lt;/p&gt;&lt;p&gt;Ocelot must know the URL that it is running on in order to perform certain administration configurations. This is the &lt;code&gt;BaseUrl&lt;/code&gt; specified in the &lt;code&gt;ocelot&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; file. Note that this URL should be the URL that your clients will see the API Gateway running on.&lt;/p&gt;&lt;p&gt;Here&amp;#39;s the complete source code of the &lt;code&gt;ocelot&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; file for your reference:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// OrderProcessing/Ocelot.json&lt;/span&gt;&#xA;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;Routes&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;      &lt;span&gt;//Customer API&lt;/span&gt;&#xA;     &lt;span&gt;{&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamPathTemplate&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/api/Customer&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamScheme&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamHostAndPorts&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;               &lt;span&gt;&amp;#34;Host&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;               &lt;span&gt;&amp;#34;Port&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;20057&amp;#34;&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;         &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;FileCacheOptions&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;TtlSeconds&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;Region&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;customercaching&amp;#34;&lt;/span&gt;&#xA;         &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;UpstreamPathTemplate&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/Customer&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;UpstreamHttpMethod&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&#xA;         &lt;span&gt;]&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;//Product API&lt;/span&gt;&#xA;     &lt;span&gt;{&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamPathTemplate&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/api/Product&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamScheme&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;DownstreamHostAndPorts&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;               &lt;span&gt;&amp;#34;Host&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;               &lt;span&gt;&amp;#34;Port&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;32345&amp;#34;&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;         &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;RateLimitOptions&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;ClientWhitelist&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;               &#xA;            &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;EnableRateLimiting&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;Period&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;5s&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;PeriodTimespan&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;Limit&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&#xA;         &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;UpstreamPathTemplate&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/Product&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         &lt;span&gt;&amp;#34;UpstreamHttpMethod&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&#xA;         &lt;span&gt;]&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;   &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;   &lt;span&gt;&amp;#34;GlobalConfiguration&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;RequestIdKey&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;X-Correlation-Id&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;BaseUrl&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;http://localhost:39469&amp;#34;&lt;/span&gt;&#xA;   &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Choosing an exemplary architecture for the needs of your business is the first and foremost step in building applications that are flexible, scalable, and high performant. One of the most significant advantages of microservices architecture is its support for heterogeneous platforms and technologies.&lt;/p&gt;&lt;p&gt;Your API Gateway can manage concerns such as security, rate limiting, performance, and scalability. However, you should be aware of handling the complexity it brings in and the risk of a single point of failure. Besides, there is a learning curve when you&amp;#39;re building microservices-based applications using an API Gateway. Possible performance degradation is yet another concern that you must handle.&lt;/p&gt;&lt;p&gt;The complete source code of the &lt;em&gt;OrderProcessing&lt;/em&gt; application built throughout this article is available &lt;a href=&#34;https://github.com/auth0-blog/api-gateway-aspnetcore-ocelot&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;Aside--Securing-ASP-NET-Core-with-Auth0&#34;&gt;Aside: Securing ASP.NET Core with Auth0&lt;/h2&gt;&lt;p&gt;Securing ASP.NET Core applications with Auth0 is easy and brings a lot of great features to the table. With &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0&lt;/a&gt;, you only have to write a few lines of code to get a solid &lt;a href=&#34;https://auth0.com/user-management&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;identity management solution&lt;/a&gt;, &lt;a href=&#34;https://auth0.com/docs/sso/single-sign-on&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;single sign-on&lt;/a&gt;, support for &lt;a href=&#34;https://auth0.com/docs/identityproviders&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;social identity providers (like Facebook, GitHub, Twitter, etc.)&lt;/a&gt;, and support for &lt;a href=&#34;https://auth0.com/enterprise&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;enterprise identity providers (like Active Directory, LDAP, SAML, custom, etc.)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;On ASP.NET Core, you need &lt;a href=&#34;https://auth0.com/docs/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;to create an API in your Auth0 Management Dashboard&lt;/a&gt; and change a few things on your code. To create an API, you need to &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free Auth0 account&lt;/a&gt;. After that, you need to go to &lt;a href=&#34;https://manage.auth0.com/#/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the API section of the dashboard&lt;/a&gt; and click on &amp;#34;Create API&amp;#34;. On the dialog shown, you can set the &lt;em&gt;Name&lt;/em&gt; of your API as &amp;#34;Books&amp;#34;, the &lt;em&gt;Identifier&lt;/em&gt; as &amp;#34;&lt;a href=&#34;http://books.mycompany.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://books.mycompany.com&lt;/a&gt;&amp;#34;, and leave the &lt;em&gt;Signing Algorithm&lt;/em&gt; as &amp;#34;RS256&amp;#34;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6HrObJ2eGY7YehLzbBM0sH/066be814a124d98f03224d9b177caa22/net-core-2_creating-api-on-auth0.png&#34; alt=&#34;Creating API on Auth0&#34;/&gt;&lt;/p&gt;&lt;p&gt;After that, you have to add the call to &lt;code&gt;services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; in the &lt;code&gt;&lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method of the &lt;code&gt;Startup&lt;/code&gt; class as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; authority &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; audience &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Audience&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;DefaultAuthenticateScheme &lt;span&gt;=&lt;/span&gt; JwtBearerDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;DefaultChallengeScheme &lt;span&gt;=&lt;/span&gt; JwtBearerDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddJwtBearer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;Authority &lt;span&gt;=&lt;/span&gt; authority&lt;span&gt;;&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;Audience &lt;span&gt;=&lt;/span&gt; audience&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the body of the &lt;code&gt;&lt;span&gt;Configure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method of the &lt;code&gt;Startup&lt;/code&gt; class, you also need to add an invocation to &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; as shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseRouting&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseEndpoints&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;endpoints &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    endpoints&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapControllers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;Make sure you invoke these methods in the order shown above. It is essential so that everything works properly.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Finally, add the following element to the &lt;code&gt;appsettings&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; configuration file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Logging&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ...&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Domain&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_DOMAIN&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Audience&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_AUDIENCE&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Replace the placeholders &lt;code&gt;&lt;span&gt;YOUR_DOMAIN&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;YOUR_AUDIENCE&lt;/span&gt;&lt;/code&gt; with the actual values for the domain that you specified when creating your Auth0 account and the &lt;em&gt;Identifier&lt;/em&gt; you assigned to your API.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/implementing-api-gateway-in-aspnet-core-with-ocelot/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn what an API Gateway is and how to build yours in ASP.NET Core by using Ocelot.</summary>
  </entry>
  <entry>
    <title>Auth0 Introduces zanzibar.academy</title>
    <updated>2021-10-05T13:54:00Z</updated>
    <id>tag:auth0.com,2021-10-05:/blog/auth0-introduces-zanzibar-academy/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;While our customers tell us they appreciate our Authentication (AuthN) features, we’ve seen an increase in requests to expand our Authorization (AuthZ) offering to help builders accelerate their development. This is why we’ve released key features like &lt;a href=&#34;https://auth0.com/blog/introducing-auth0-organizations/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Organizations&lt;/a&gt; and &lt;a href=&#34;https://auth0.com/docs/authorization/rbac/roles&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Roles&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;While reading &lt;a href=&#34;https://research.google/pubs/pub48190/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Google’s Zanzibar paper&lt;/a&gt; describing their global access system, we found the approach to be highly creative and inspiring. It had the flexibility to support so many of their products and was scalable, highly reliable, and extremely fast. Companies like &lt;a href=&#34;https://medium.com/airbnb-engineering/himeji-a-scalable-centralized-system-for-authorization-at-airbnb-341664924574&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Airbnb&lt;/a&gt; and &lt;a href=&#34;https://medium.com/building-carta/authz-cartas-highly-scalable-permissions-system-782a7f2c840f&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Carta&lt;/a&gt; have developed their own version, and companies and new products are being built inspired by Zanzibar. This is why we believe that Authorization systems built using the Zanzibar model are going to grow in number over the next few years.&lt;/p&gt;&lt;h2 id=&#34;What-is-Zanzibar&#34;&gt;What is Zanzibar&lt;/h2&gt;&lt;p&gt;Zanzibar is Google’s global authorization system. It powers authorization for YouTube, Google Drive, Google Workspaces, Google Cloud Platform, and their other services. It drives Google’s core collaboration features like sharing a document with someone or sharing photos with a friend. Like anything Google makes, it has to scale to billions of users and trillions of digital objects. Creating an access control system for that many people and object combinations is a daunting task, and Google laid out how they did it in their &lt;a href=&#34;https://research.google/pubs/pub48190/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;2019 Google Zanzibar paper&lt;/a&gt;. It talks about the different considerations and tradeoffs they made. Simplicity and extensibility were key considerations because Google needed to ensure that its internal teams could use the system for a wide array of use cases with certainty with how it would respond to their specific needs.&lt;/p&gt;&lt;p&gt;Zanzibar has steadily grown in popularity since the paper’s release. We set out this past year to talk with the organizations about their implementation experiences, and learn from what worked and didn’t work. You can find some of those discussions &lt;a href=&#34;https://www.youtube.com/playlist?list=PLZuCrkqyqw9wY0bCosGYDMI9enFpg_tk-&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLZuCrkqyqw9wY0bCosGYDMI9enFpg_tk-.&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6NDVD79nUcJB0wtfL9OM4v/1ec383bc257192ca0b2c83438c27891b/Uploaded_from_Auth0_Introduces_zanzibar&#34; alt=&#34;Zanzibar&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Introducing-Zanzibar-Academy&#34;&gt;Introducing Zanzibar Academy&lt;/h2&gt;&lt;p&gt;We&amp;#39;ve always pushed to create content that is useful for the global development community and today we’re taking another important step in our Authorization journey by releasing the &lt;a href=&#34;http://zanzibar.academy&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;zanzibar.academy&lt;/a&gt; learning site. &lt;a href=&#34;http://zanzibar.academy&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Zanzibar.academy&lt;/a&gt; is meant to help builders understand the value and power of Zanzibar style systems, much like &lt;a href=&#34;http://jwt.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;JWT.io&lt;/a&gt; educates and spreads the understanding of the JSON Web Token standard. It’s a place for builders to learn the Zanzibar concepts in a progressive, guided way.&lt;/p&gt;&lt;h2 id=&#34;ReBAC-in-a-Wider-AuthZ-World&#34;&gt;ReBAC in a Wider AuthZ World&lt;/h2&gt;&lt;p&gt;One of the key differences between Google Zanzibar and other AuthZ systems is that Google Zanzibar uses graph-based data structures to create Relationship-Based Access Control (ReBAC). ReBAC centralizes more data so Access Control Lists (ACLs) are less cumbersome to manage.&lt;/p&gt;&lt;p&gt;With no viable alternatives, organizations have been rolling their own AuthZ, or extending systems like OPA, that handle policies for authorization based on attribute-based access control (ABAC), to manage things outside their typical use cases. These types of systems give developers an incredible amount of control over their authorization decisions, but also an incredible amount of responsibility to develop and manage them. Policies are also hard to build against, it’s very hard to create filtered lists of accessible resources in a search function based on a policy system.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/68daT6P0GYPtQtDBUFqTFL/3eecd0d6e0390c61e23d0e454bd6c09c/Uploaded_from_Auth0_Introduces_zanzibar&#34; alt=&#34;ReBAC&#34;/&gt;&lt;/p&gt;&lt;p&gt;Instead, Zanzibar offers a system that can be indexed and reverse indexed for various purposes in an application. It’s easily extensible, so new features can easily be added. In our own version we’re working to make this process easier for developers by creating an out-of-the-box assertions system, so developers can create automated tests of changes to their implementation. Zanzibar-style systems won’t solve all AtuthZ problems, there is still an important place for OPA-style ABAC systems, but Zanzibar systems will only be more widely adopted as time goes on.&lt;/p&gt;&lt;h2 id=&#34;Supporting-Builders&#34;&gt;Supporting Builders&lt;/h2&gt;&lt;p&gt;Auth0 is here to support builders — and, frankly, what the team at Google created is inspiring. But learning from a paper isn’t always easy. With the Zanzibar Academy website and related presentations, we seek to make the concepts and practices in the Zanzibar paper easier to understand with interactive descriptions and examples — always with full credit to the original team.&lt;/p&gt;&lt;p&gt;We’re further supporting builders by creating our own version for developers to use. You can explore our implementation &lt;a href=&#34;http://learn.sandcastle.cloud&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;. Inspired by the Zanzibar paper, we’ve applied our 8 years of experience in building tools for developers to build a version all builders will be delighted to use.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3f4HlkamlZDMh86euuxGTo/8675f6c32d593e6d3f96fc5aec43c379/Uploaded_from_Auth0_Introduces_zanzibar&#34; alt=&#34;Supporting&#34;/&gt;&lt;/p&gt;&lt;p&gt;We’re excited for you to learn more at &lt;a href=&#34;http://zanzibar.academy&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;zanzibar.academy&lt;/a&gt;, we’ll see you there! If you’re interested in learning more about Zanzibar and &lt;a href=&#34;http://learn.sandcastle.cloud&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0s new Zanzibar based AuthZ platform&lt;/a&gt;, join our &lt;a href=&#34;https://discord.com/invite/pvbNmqC&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Discord community&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/auth0-introduces-zanzibar-academy/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">A microsite to help developers understand how a Zanzibar style system works.</summary>
  </entry>
  <entry>
    <title>Flutter Authentication and Authorization with Auth0, Part 3: Adding Real-Time Chat to the App</title>
    <updated>2021-10-04T17:13:00Z</updated>
    <id>tag:auth0.com,2021-10-04:/blog/flutter-authentication-authorization-with-auth0-part-3-adding-real-time-chat-to-the-app/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;In the previous sections of this tutorial, you added authentication to &lt;em&gt;MJ Coffee&lt;/em&gt;, a Flutter app, and then enhanced that authentication by adding refresh token rotation and social logins. You also looked at customizing the login page with your own branding, and user management in Auth0.&lt;/p&gt;&lt;p&gt;In this section, we’ll focus on authorization. Remember:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt; concerns itself with answering the question “Who are you?”&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Authorization&lt;/strong&gt; — this section’s topic — is all about answering the question “What are you allowed to do?”&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We’ll cover authorization by adding real-time chat to &lt;em&gt;MJ Coffee&lt;/em&gt; so that we can later see how the chat can be integrated with Auth0, limit its functionalities and UIs based on roles and permissions.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Look for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Add-Real-Time-Chat-to-the-Flutter-Application&#34;&gt;Add Real-Time Chat to the Flutter Application&lt;/h2&gt;&lt;p&gt;Having a real-time chat service in the &lt;em&gt;MJ Coffee&lt;/em&gt; app can significantly improve how fast users can communicate with our customer service or employees. Having looked around, I found &lt;a href=&#34;https://getstream.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Stream&lt;/a&gt;, an exciting service with a solid Flutter SDK that you can integrate and customize quickly and easily.&lt;/p&gt;&lt;h2 id=&#34;Install-Dependencies&#34;&gt;Install Dependencies&lt;/h2&gt;&lt;p&gt;Stream comes with several SDKs that can be used in Dart or Flutter applications. However, one of them comes with all features, a beautiful theme, and enough API so that you can customize it as much as you wish. We’ll use that one.&lt;/p&gt;&lt;p&gt;🛠 Open the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;pubspec&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt; file and add &lt;code&gt;stream_chat_flutter&lt;/code&gt; to your dependencies. The &lt;code&gt;dependencies&lt;/code&gt; section of the file should end up looking like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// /pubspec.yaml&#xA;&#xA;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;flutter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;sdk&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; flutter&#xA;  &lt;span&gt;font_awesome_flutter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^9.1.0&#xA;  &lt;span&gt;flutter_svg&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^0.22.0&#xA;  &lt;span&gt;google_fonts&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^2.1.0&#xA;  &lt;span&gt;json_annotation&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^4.0.1&#xA;  &lt;span&gt;http&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^0.13.3&#xA;  &lt;span&gt;flutter_appauth&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^1.1.0&#xA;  &lt;span&gt;flutter_secure_storage&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^4.2.0&#xA;  &lt;span&gt;stream_chat_flutter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^2.0.0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I recommend using a version later than 2.0, which is fully compatible with Flutter 2 and its support for &lt;a href=&#34;https://flutter.dev/docs/null-safety&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;null safety&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you’re only targeting Android, you can ignore the next section.&lt;/p&gt;&lt;h4 id=&#34;If-you-re-targeting-iOS&#34;&gt;If you’re targeting iOS&lt;/h4&gt;&lt;p&gt;🛠 If you’re targeting iOS, you’ll need to take a few extra steps:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The Stream library uses the &lt;a href=&#34;https://github.com/miguelpruivo/flutter_file_picker&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;flutter file picker&lt;/em&gt; plugin&lt;/a&gt; to present the user with an interface to select files. You’ll need to follow the steps in &lt;a href=&#34;https://github.com/miguelpruivo/flutter_file_picker/wiki/Setup#ios&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the &lt;em&gt;iOS&lt;/em&gt; section of this page&lt;/a&gt; to make use of it.&lt;/li&gt;&lt;li&gt;The library also uses the &lt;em&gt;video_player&lt;/em&gt; plugin to display inline videos. Follow &lt;a href=&#34;https://pub.dev/packages/video_player#installation&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this guide&lt;/a&gt; to install and enable it.&lt;/li&gt;&lt;li&gt;Finally, the library uses the &lt;em&gt;image_picker&lt;/em&gt; plugin to provide a user interface for selecting images. Follow [these instructions] to use this plugin.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 Don’t forget to actually install the dependencies! Enter &lt;code&gt;flutter pub get&lt;/code&gt; in the terminal or PowerShell, or &lt;code&gt;Pub get&lt;/code&gt; in your IDE.&lt;/p&gt;&lt;h2 id=&#34;Create-a-Stream-Account-and-App&#34;&gt;Create a Stream Account and App&lt;/h2&gt;&lt;p&gt;Before you can integrate Stream with your app, you need a Stream account, which you’ll use to register the app.&lt;/p&gt;&lt;p&gt;🛠 &lt;a href=&#34;https://getstream.io/accounts/signup/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Create your account if you don’t already have one,&lt;/a&gt; then log in and go to the Stream dashboard:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5g116jkNGeqaZvFk5nesaZ/e01470d789d92e658ca0d4ac16605d5e/stream_dashboard.png&#34; alt=&#34;Stream dashboard.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Tap on the &lt;strong&gt;Create App&lt;/strong&gt; button, then follow these steps:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Enter a name for your app in the &lt;strong&gt;App Name&lt;/strong&gt; field. For this example, we’ll use &lt;code&gt;MJCoffee&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;In the &lt;strong&gt;Feeds Server Location&lt;/strong&gt; menu, select the location closest to you.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Don’t&lt;/em&gt; select anything from the &lt;strong&gt;Clone Existing App&lt;/strong&gt; menu — just leave it set to &lt;code&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Select your environment. Usually, it&amp;#39;s a good idea to create separate apps for production and development. In this tutorial, we’ll focus on production, so select &lt;strong&gt;Production&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Finally, click the &lt;strong&gt;Create App&lt;/strong&gt; button.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You should see this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3Zh9QmY69R9Bwo4p3PZawt/f8c55e169d20282c17e3592216344fd6/stream_app.png&#34; alt=&#34;A newly-created app in Stream.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Once your app has been created, make a note of your Stream key. &lt;/p&gt;&lt;p&gt;Notice that you will need a secret key to sign the user ID and get a production user token to connect users. You’ll learn how to do that with Auth0 Actions.&lt;/p&gt;&lt;p&gt;I recommend passing sensitive data and keys with &lt;code&gt;&lt;span&gt;--&lt;/span&gt;dart&lt;span&gt;-&lt;/span&gt;define&lt;/code&gt; via the command line or adding to your editor or IDE run command rather than storing it in your app’s code.&lt;/p&gt;&lt;p&gt;You took this approach when implementing basic authentication for the app. You passed two sensitive values — your Auth0 domain and Auth0 client ID — as command-line arguments when launching the app. You’ll simply add the Stream key as a third argument, like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;flutter run -d all --dart-define&lt;span&gt;=&lt;/span&gt;AUTH0_DOMAIN&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;YOUR DOMAIN&lt;span&gt;]&lt;/span&gt; --dart-define&lt;span&gt;=&lt;/span&gt;AUTH0_CLIENT_ID&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;YOUR CLIENT ID&lt;span&gt;]&lt;/span&gt; --dart-define&lt;span&gt;=&lt;/span&gt;STREAM_API_KEY&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;YOUR STREAM KEY&lt;span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In order for your application to use the Stream key argument, you’ll need to define a new constant.&lt;/p&gt;&lt;p&gt;🛠 Add the following to your &lt;code&gt;constants&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file, which is located in the in the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;helpers&lt;span&gt;/&lt;/span&gt;&lt;/code&gt; directory:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/helpers/constants.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; STREAM_API_KEY &lt;span&gt;=&lt;/span&gt; String&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromEnvironment&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;STREAM_API_KEY&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Integrate-Chat-Into-the-Flutter-Application&#34;&gt;Integrate Chat Into the Flutter Application&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s start by creating a new &lt;code&gt;StreamChatClient&lt;/code&gt; in the &lt;code&gt;ChatService&lt;/code&gt; singleton class. In doing this, there are three essential things that you need to take into account:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Initializing the Dart API client with your API Key&lt;/li&gt;&lt;li&gt;Setting the current user&lt;/li&gt;&lt;li&gt;Passing the client to the top-level StreamChat widget&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;🛠 Open &lt;code&gt;chat_service&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; (located in the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;services&lt;span&gt;/&lt;/span&gt;&lt;/code&gt; directory) and initialize &lt;code&gt;StreamChatClient&lt;/code&gt; by updating the &lt;code&gt;ChatService&lt;/code&gt; class so that it appears as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/chat_service.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ChatService&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ChatService instance &lt;span&gt;=&lt;/span&gt; ChatService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;_internal&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;factory&lt;/span&gt; &lt;span&gt;ChatService&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; instance&lt;span&gt;;&lt;/span&gt;&#xA;  ChatService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;_internal&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;final&lt;/span&gt; StreamChatClient client &lt;span&gt;=&lt;/span&gt; &lt;span&gt;StreamChatClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    STREAM_API_KEY&lt;span&gt;,&lt;/span&gt;&#xA;    logLevel&lt;span&gt;:&lt;/span&gt; isInDebugMode &lt;span&gt;?&lt;/span&gt; Level&lt;span&gt;.&lt;/span&gt;INFO &lt;span&gt;:&lt;/span&gt; Level&lt;span&gt;.&lt;/span&gt;OFF&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The only required positional parameter for &lt;code&gt;&lt;span&gt;StreamChatClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; is &lt;code&gt;&lt;span&gt;STREAM_API_KEY&lt;/span&gt;&lt;/code&gt;, but you have more options to configure your client. For instance, it might be pretty helpful to see all the logs during debugging. That&amp;#39;s why we used the optional &lt;code&gt;logLevel&lt;/code&gt; parameter to set the amount of logging that will take place, based on whether or not the app is in debug mode.&lt;/p&gt;&lt;p&gt;Now that you‘ve created the client, you need to ensure that your current user is connected appropriately.&lt;/p&gt;&lt;p&gt;🛠 Add the &lt;code&gt;&lt;span&gt;connectUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; to the &lt;code&gt;ChatService&lt;/code&gt; class in  &lt;code&gt;chat_service&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/chat_service.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ChatService&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;  Future&lt;span&gt;&amp;lt;&lt;/span&gt;Auth0User&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;connectUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Auth0User&lt;span&gt;?&lt;/span&gt; user&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;user &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;Exception&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;User was not received&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;await&lt;/span&gt; client&lt;span&gt;.&lt;/span&gt;&lt;span&gt;connectUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;User&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        id&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;,&lt;/span&gt;&#xA;        extraData&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#39;image&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;picture&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;// To be replaced with PRODUCTION TOKEN for user&lt;/span&gt;&#xA;      client&lt;span&gt;.&lt;/span&gt;&lt;span&gt;devToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;rawValue&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; user&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This new method of the &lt;code&gt;ChatService&lt;/code&gt; class, &lt;code&gt;&lt;span&gt;connectUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, will handle the logic for connecting the current user. It accepts an &lt;code&gt;Auth0User&lt;/code&gt; object. If it doesn‘t receive one, it means the authentication has probably failed and that the user should not be connected to the chat.&lt;/p&gt;&lt;p&gt;🛠 Open &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;screens&lt;span&gt;/&lt;/span&gt;home&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;, look for the &lt;code&gt;_HomeScreenState&lt;/code&gt; class, and within it, the &lt;code&gt;&lt;span&gt;setSuccessAuthState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method. Update &lt;code&gt;&lt;span&gt;setSuccessAuthState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/home.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;setSuccessAuthState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    isProgressing &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    isLoggedIn &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    name &lt;span&gt;=&lt;/span&gt; AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;idToken&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  ChatService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;connectUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;profile&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  CoffeeRouter&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;push&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenuScreen&lt;span&gt;.&lt;/span&gt;&lt;span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You need to pass two required positional parameters:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;code&gt;User&lt;/code&gt; object with a defined user ID, and&lt;/li&gt;&lt;li&gt;the user token, a signed and encrypted hash string.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Typically, the user token should be generated on a back-end server to store the aforementioned secret key and to sign and get the token. You&amp;#39;ll soon learn how Auth0 can handle that as your backend.&lt;/p&gt;&lt;p&gt;To continue, you need to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Get a development token,&lt;/li&gt;&lt;li&gt;pass &lt;code&gt;user&lt;span&gt;.&lt;/span&gt;id&lt;/code&gt; to the &lt;code&gt;&lt;span&gt;devToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method on the chat client, and&lt;/li&gt;&lt;li&gt;Get the &lt;code&gt;rawValue&lt;/code&gt; which is the token string.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 To ensure that &lt;code&gt;devToken&lt;/code&gt; works, you need to disable auth checks. In the &lt;code&gt;GetStream&lt;/code&gt; app’s chat dashboard, turn on the &lt;strong&gt;Disable Auth0 Checks&lt;/strong&gt; option.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3DMx1hZFHbDqt50gtJErjO/9c4c7e3c1da342ddf10c8fb208ac8960/disable_auth_checks.png&#34; alt=&#34;Stream dashboard.&#34;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;When you move the app to production and you have a proper method to receive the production token, make sure that you turn off the &lt;strong&gt;Disable Auth0 Checks&lt;/strong&gt; option.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Stream chat UI components will accept additional data that you provide while connecting a user. For example, you may create a &lt;code&gt;Map&lt;/code&gt; containing the user‘s image and name, so they appear automatically and beautifully throughout the chat widget.&lt;/p&gt;&lt;p&gt;At the time of writing, Stream does not accept Auth0’s user ID format, which includes &lt;code&gt;&lt;span&gt;|&lt;/span&gt;&lt;/code&gt; between the Auth source and user hash ID. You’ll need to make a change to the &lt;code&gt;id&lt;/code&gt; arrow function in the &lt;code&gt;Auth0User&lt;/code&gt; model to account for this.&lt;/p&gt;&lt;p&gt;🛠 Open &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;models&lt;span&gt;/&lt;/span&gt;auth0_user&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; and make this change to the &lt;code&gt;id&lt;/code&gt; arrow function: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/models/auth0_user.dart&lt;/span&gt;&#xA;&#xA;String &lt;span&gt;get&lt;/span&gt; id &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; sub&lt;span&gt;.&lt;/span&gt;&lt;span&gt;split&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;join&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next and final step is to create &lt;code&gt;StreamChat&lt;/code&gt;, the root widget of the application.&lt;/p&gt;&lt;p&gt;🛠 Open the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;main&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file, locate the call to  &lt;code&gt;MaterialApp&lt;/code&gt;, and add the &lt;code&gt;builder&lt;/code&gt; parameter so that it returns a &lt;code&gt;StreamChat&lt;/code&gt; object:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/main.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;MaterialApp&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  debugShowCheckedModeBanner&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  themeMode&lt;span&gt;:&lt;/span&gt; ThemeMode&lt;span&gt;.&lt;/span&gt;system&lt;span&gt;,&lt;/span&gt;&#xA;  home&lt;span&gt;:&lt;/span&gt; &lt;span&gt;HomeScreen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  navigatorKey&lt;span&gt;:&lt;/span&gt; CoffeeRouter&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;navigatorKey&lt;span&gt;,&lt;/span&gt;&#xA;  theme&lt;span&gt;:&lt;/span&gt; &lt;span&gt;getTheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  builder&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;,&lt;/span&gt; child&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;StreamChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      child&lt;span&gt;:&lt;/span&gt; child&lt;span&gt;,&lt;/span&gt;&#xA;      client&lt;span&gt;:&lt;/span&gt; ChatService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;client&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;StreamChat&lt;/code&gt; object returned by &lt;code&gt;builder&lt;/code&gt; is an inherited widget and aims to provide APIs for advanced customization. It requires a child and a client that you have initialized in the &lt;code&gt;ChatService&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;That&amp;#39;s it — your chat is ready! Restart the app, and let&amp;#39;s continue to add the support screen and community screen using the prebuilt &lt;code&gt;StreamChat&lt;/code&gt; UI widget to leverage the chat service that you added.&lt;/p&gt;&lt;h2 id=&#34;Implement-the-Support-Chat-Screen&#34;&gt;Implement the Support Chat Screen&lt;/h2&gt;&lt;p&gt;Typically, a support chat consists of a user and an agent interacting in a channel created for both. Hence the support chat screen will do the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Create a private channel for the current user and one of the available agents&lt;/li&gt;&lt;li&gt;Listen to the channel for updates&lt;/li&gt;&lt;li&gt;Load existing chat content, if any&lt;/li&gt;&lt;li&gt;Upon chat completion, archive the chat history&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Let&amp;#39;s create a &lt;code&gt;&lt;span&gt;createSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method in the &lt;code&gt;ChatService&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;🛠 First, add the following instance variable to the start of the &lt;code&gt;ChatService&lt;/code&gt; class:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/chat_service.dart&lt;/span&gt;&#xA;&#xA;String&lt;span&gt;?&lt;/span&gt; _currentChannelId&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Then add the &lt;code&gt;&lt;span&gt;createSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to the &lt;code&gt;ChatService&lt;/code&gt; class:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/chat_service.dart&lt;/span&gt;&#xA;&#xA;Future&lt;span&gt;&amp;lt;&lt;/span&gt;Channel&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;createSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// To be replaced with EmployeeRole via Auth0&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String employeeId &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;rootEmployeeId&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; channel &lt;span&gt;=&lt;/span&gt; client&lt;span&gt;.&lt;/span&gt;&lt;span&gt;channel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#39;support&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    id&lt;span&gt;:&lt;/span&gt; _currentChannelId&lt;span&gt;,&lt;/span&gt;&#xA;    extraData&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;MJCoffee Support&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;members&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;        employeeId&lt;span&gt;,&lt;/span&gt;&#xA;        client&lt;span&gt;.&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;await&lt;/span&gt; channel&lt;span&gt;.&lt;/span&gt;&lt;span&gt;watch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  _currentChannelId &lt;span&gt;=&lt;/span&gt; channel&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; channel&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There’s a lot going on here. Let&amp;#39;s review it step by step.&lt;/p&gt;&lt;p&gt;First, to create a support chat channel for the current user, you need to know the ID of an available agent. In this tutorial, you will eventually learn how to create an API to get an available agent via Auth0 based on their roles. However, we’ll skip this part for now.&lt;/p&gt;&lt;p&gt;Second, you need to create a channel with a specific type. In this case, the type will be &lt;code&gt;support&lt;/code&gt;. Stream provides default types for channels; however, you can define your types as needed. To create a channel type, navigate to the Stream dashboard, go to your app in the Chat overview tab, and add your channel types to the list.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6W33zODRlOuxetIMT5FFX5/c3b4894e13324aa8db4822545716248e/streamchat_type.png&#34; alt=&#34;Stream channel types.&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2Waym3vZQnTvKNejptTCJp/64b96fb65f65f5b1ceae5bf485eb2856/chat_type.png&#34; alt=&#34;New stream channel type.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Next, you can pass an existing channel ID to reconnect to a channel or leave it &lt;code&gt;&lt;span&gt;null&lt;/span&gt;&lt;/code&gt; to create a new channel. Stream will automatically assign an ID to new channels. Since this support chat is private and exclusive to one agent and a current user, you may add IDs to &lt;code&gt;members&lt;/code&gt; in the &lt;code&gt;extraData&lt;/code&gt; map.&lt;/p&gt;&lt;p&gt;Then, call the &lt;code&gt;&lt;span&gt;watch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method on the channel to create and listen to the events on that channel. The &lt;code&gt;&lt;span&gt;watch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method is a &lt;code&gt;Future&lt;/code&gt; and will perform its tasks asynchronously. You can assign the channel ID to the &lt;code&gt;_currentChannelId&lt;/code&gt; private instance variable so that you can reconnect to the channel when needed.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Later on, it might be a good idea to store the channel ID in an external database or local secure storage in the app so that it persists between user sessions.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Finally, the method returns the newly created channel.&lt;/p&gt;&lt;p&gt;With the &lt;code&gt;&lt;span&gt;createSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method implemented, you can now implement the chat UI.&lt;/p&gt;&lt;p&gt;🛠 Open the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;screens&lt;span&gt;/&lt;/span&gt;support&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file, where you’ll find the &lt;code&gt;SupportChatScreen&lt;/code&gt; class. Update the file’s contents to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/support.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:flutter/material.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:flutter/widgets.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SupportChatScreen&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;StatefulWidget&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  _SupportChatScreenState &lt;span&gt;createState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;_SupportChatScreenState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;_SupportChatScreenState&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;State&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;SupportChatScreen&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  Auth0User&lt;span&gt;?&lt;/span&gt; profile &lt;span&gt;=&lt;/span&gt; AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;profile&lt;span&gt;;&lt;/span&gt;&#xA;  Channel&lt;span&gt;?&lt;/span&gt; channel&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  &lt;span&gt;void&lt;/span&gt; &lt;span&gt;initState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;initState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;createChannel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;createChannel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;final&lt;/span&gt; _channel &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; ChatService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;createSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      channel &lt;span&gt;=&lt;/span&gt; _channel&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  Widget &lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;BuildContext context&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; channel &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&#xA;        &lt;span&gt;?&lt;/span&gt; &lt;span&gt;Center&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Text&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;You are in the queue!, please wait...&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;:&lt;/span&gt; &lt;span&gt;Scaffold&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            body&lt;span&gt;:&lt;/span&gt; &lt;span&gt;SafeArea&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;              child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;StreamChannel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                channel&lt;span&gt;:&lt;/span&gt; channel&lt;span&gt;!&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Column&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                  children&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;Widget&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;                    &lt;span&gt;Expanded&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                      child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;MessageListView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                    &lt;span&gt;MessageInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                      disableAttachments&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                      sendButtonLocation&lt;span&gt;:&lt;/span&gt; SendButtonLocation&lt;span&gt;.&lt;/span&gt;inside&lt;span&gt;,&lt;/span&gt;&#xA;                      actionsLocation&lt;span&gt;:&lt;/span&gt; ActionsLocation&lt;span&gt;.&lt;/span&gt;leftInside&lt;span&gt;,&lt;/span&gt;&#xA;                      showCommandsButton&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;              &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here’s what’s happening in this UI implementation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;This support chat screen, &lt;code&gt;SupportChatScreen&lt;/code&gt;, is a &lt;code&gt;StatefulWidget&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;profile&lt;/code&gt; variable is the user profile from &lt;code&gt;AuthService&lt;/code&gt; that you created in the previous section.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;channel&lt;/code&gt; variable is used to detect if a support channel has been created.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;&lt;span&gt;createChannel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method calls &lt;code&gt;ChatService&lt;/code&gt;’s &lt;code&gt;&lt;span&gt;createSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method, which you recently defined.&lt;/li&gt;&lt;li&gt;Once the channel is ready, &lt;code&gt;&lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; is called, which renders the chat UI.&lt;/li&gt;&lt;li&gt;In the &lt;code&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method, you can show a message while the channel is being created or return a &lt;code&gt;StreamChannel&lt;/code&gt; object, which provides information about the channel to the widget tree and passes a reference to the &lt;code&gt;channel&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Typically, a child of &lt;code&gt;SupportChatScreen&lt;/code&gt; should be a &lt;code&gt;Column&lt;/code&gt; that includes &lt;code&gt;&lt;span&gt;MessageListView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and is wrapped by &lt;code&gt;Expanded&lt;/code&gt; to ensure it takes up all the available space.&lt;/li&gt;&lt;li&gt;You can highly customize &lt;code&gt;&lt;span&gt;MessageInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; in a number of ways, such as disabling the file attachment or command buttons. You’ll do this later by using Auth0’s permissions and roles to determine which buttons should be enabled or disabled, so stay tuned.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Congratulations — you’ve implemented the support chat screen! Let&amp;#39;s move on to the community view.&lt;/p&gt;&lt;p&gt;It&amp;#39;s time to make a screen to allow agents to see all the messages they receive via support. Let&amp;#39;s call this screen &lt;code&gt;CommunityScreen&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;🛠 Open the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;screens&lt;span&gt;/&lt;/span&gt;community&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file, and update the &lt;code&gt;CommunityScreen&lt;/code&gt; class within to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/community.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CommunityScreen&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;StatelessWidget&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; userId &lt;span&gt;=&lt;/span&gt; ChatService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;client&lt;span&gt;.&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;as&lt;/span&gt; Object&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  Widget &lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;BuildContext context&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Scaffold&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      body&lt;span&gt;:&lt;/span&gt; &lt;span&gt;ChannelsBloc&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;ChannelListView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          filter&lt;span&gt;:&lt;/span&gt; Filter&lt;span&gt;.&lt;/span&gt;&lt;span&gt;in_&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#39;members&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;[&lt;/span&gt;userId&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;// current user is employee (role/permission)&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          sort&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;SortOption&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;last_message_at&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          pagination&lt;span&gt;:&lt;/span&gt; &lt;span&gt;PaginationParams&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            limit&lt;span&gt;:&lt;/span&gt; &lt;span&gt;30&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          channelWidget&lt;span&gt;:&lt;/span&gt; &lt;span&gt;ChannelPage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ChannelPage&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;StatelessWidget&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  Widget &lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;BuildContext context&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Scaffold&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      appBar&lt;span&gt;:&lt;/span&gt; &lt;span&gt;ChannelHeader&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      body&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Column&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        children&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;Widget&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;          &lt;span&gt;Expanded&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;MessageListView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;MessageInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The logic behind this page is relatively simple. You want to load all channels seen by the current user, an agent in this context, then open each channel to answer its respective customer.&lt;/p&gt;&lt;p&gt;&lt;code&gt;ChannelsBloc&lt;/code&gt; manages a list of channels with pagination, re-ordering, querying, and other operations associated with channels together with &lt;code&gt;&lt;span&gt;ChannelListView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;. The &lt;code&gt;Bloc&lt;/code&gt; is not related to the &lt;code&gt;Bloc&lt;/code&gt; package or pattern; this is just a coincidence.&lt;/p&gt;&lt;p&gt;You need to filter all channels by the membership of the current user. If necessary, do custom sorting and pagination too.&lt;/p&gt;&lt;p&gt;Lastly, you need to ensure that the &lt;code&gt;&lt;span&gt;ChannelPage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; is also passed to correctly as it makes channels routable. The &lt;code&gt;&lt;span&gt;ChannelPage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; is nothing fancy — just a straightforward implementation of what you have done already in &lt;code&gt;SupportScreen&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Perfect! You have created all screens for the app. However, we still need to implement permissions and roles to load each screen and functionalities based on what we can define and receive via Auth0 tokens. But if you are curious, you can simply add another tab to the &lt;code&gt;MenuScreen&lt;/code&gt; and load these pages (although you might not see any channels yet).&lt;/p&gt;&lt;p&gt;🛠 In the file &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;screens&lt;span&gt;/&lt;/span&gt;menu&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;, locate &lt;code&gt;final List&lt;span&gt;&amp;lt;&lt;/span&gt;Widget&lt;span&gt;&amp;gt;&lt;/span&gt; tabs&lt;/code&gt; in &lt;code&gt;MenuScreenState&lt;/code&gt; and update it to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/menu.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; List&lt;span&gt;&amp;lt;&lt;/span&gt;Widget&lt;span&gt;&amp;gt;&lt;/span&gt; tabs &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;MenuList&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;coffees&lt;span&gt;:&lt;/span&gt; coffees&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;SupportChatScreen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;ProfileScreen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 In the same file, add a new icon to &lt;code&gt;bottomNavigationBar&lt;/code&gt; by replacing the &lt;code&gt;items&lt;/code&gt; parameter with the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/menu.dart&lt;/span&gt;&#xA;&#xA;items&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;BottomNavigationBarItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;  &lt;span&gt;BottomNavigationBarItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    icon&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Icon&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Icons&lt;span&gt;.&lt;/span&gt;list_alt&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    label&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Menu&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;BottomNavigationBarItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    icon&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Icon&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Icons&lt;span&gt;.&lt;/span&gt;support&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    label&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Support&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;BottomNavigationBarItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    icon&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Icon&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Icons&lt;span&gt;.&lt;/span&gt;person&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    label&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Profile&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Before you can test the chat, you should temporarily add the &lt;code&gt;rootEmployeeId&lt;/code&gt; user ID that you defined in &lt;code&gt;createSupportChat&lt;/code&gt;  in the Stream dashboard.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2RqndsI9Xp4CR35fYyRRSG/4832ae874ee2b4622ae4282560d1f396/chat_custom_user.png&#34; alt=&#34;Custom user in the chat.&#34;/&gt;&lt;/p&gt;&lt;p&gt;You can skip this step, but it’s still a good idea to have a root support user in case of a specific agent is unavailable. That way, the user with the absent agent can still get support.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/qFcfGuNTipVpuEWJtAfM0/312b8561bbbbc47ed9a97342dbd46764/custom_user_root.png&#34; alt=&#34;Custom user in the chat.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Run your app in the emulator, go to the support chat screen, and try it out!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you encounter an error regarding an outdated Kotlin version on the Android emulator, open &lt;code&gt;android&lt;span&gt;/&lt;/span&gt;app&lt;span&gt;/&lt;/span&gt;build&lt;span&gt;.&lt;/span&gt;gradle&lt;/code&gt;, and search for &lt;code&gt;ext&lt;span&gt;.&lt;/span&gt;kotlin_version&lt;/code&gt;. Change that line to &lt;code&gt;ext&lt;span&gt;.&lt;/span&gt;kotlin_version &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;1.5.10&amp;#39;&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Auth0-Actions-and-Generating-Stream-User-Production-Tokens&#34;&gt;Auth0 Actions and Generating Stream User Production Tokens&lt;/h2&gt;&lt;p&gt;Until now, for each user, you have been using a token generated for the development environment. In order to release your app, the app will have to request production tokens.&lt;/p&gt;&lt;p&gt;As I mentioned earlier, retrieving production tokens is usually done by your backend server. Auth0 can act as this service and retrieve those tokens for you, thanks to a potent tool called &lt;em&gt;Auth0 Actions&lt;/em&gt;. &lt;/p&gt;&lt;p&gt;You can use Auth0 Actions to handle your application logic and fit it into a particular flow. They are secure, tenant-specific, versioned functions written in Node.js that execute at specific points when Auth0 is doing its work. This allows you to customize and extend Auth0&amp;#39;s capabilities with custom logic. Think of Actions as serverless functions, such as AWS Lambda or Google Cloud Functions.&lt;/p&gt;&lt;p&gt;You can determine when and where to execute an Action in the Auth0 runtime environment. Your flows might be:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Login:&lt;/strong&gt; Executed after a user logs in and when refresh tokens are issued.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Machine to Machine:&lt;/strong&gt; Executed after a user logs in after the Client Credentials hook.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Pre-User Registration:&lt;/strong&gt; Executed before a user is added to the database or passwordless connections.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Post-User Registration:&lt;/strong&gt; Executed after a user is added to a database or passwordless connections. The execution is asynchronous and will not affect the transaction.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Post-Change Password:&lt;/strong&gt; Executed after a password is changed for a database connection user.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Send Phone Message:&lt;/strong&gt; Executed when using a custom MFA provider.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7fpne9yUGBpXYzAT5km5l5/83ab5c891c02495d53a9d2661e10083e/actions_flow.png&#34; alt=&#34;Actions flow&#34;/&gt;&lt;/p&gt;&lt;p&gt;You’ve probably already thought of several use cases for each of these scenarios.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s create a custom action to exchange Stream production user tokens for users after they logged in and hooked it up to the ID token and user metadata received by the Flutter app.&lt;/p&gt;&lt;p&gt;First, you need to create a new action. Go to the Custom Actions menu under Actions in Auth0 Dashboard and hit the &amp;#34;Create&amp;#34; button.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/oR6jv9IA92twMdtRrAvIz/e414cac9a740c5fdd5eaab85a7795ebb/create_action.png&#34; alt=&#34;Create action&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 You should provide a name for the action, select a trigger from the list, and then create it. For the purpose of generating a chat token and attaching it to &lt;code&gt;idToken&lt;/code&gt;, select the &lt;strong&gt;Login / Post Login&lt;/strong&gt; trigger, which allows you to use the action in the login flow.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5wbUmlcD0qq7FrgBCiURrS/a95bb544b5d4fdaa4eac2a87b5fd9361/create_action_trigger.png&#34; alt=&#34;Create action trigger&#34;/&gt;&lt;/p&gt;&lt;p&gt;You&amp;#39;ll see an editor where you can write your logic. You can run the code, try it out before deploying it, add your secrets to the environment instead of putting it in the application code, and even add almost all public NPM packages!&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/46DWkLU05SPD1kTE6i5oGF/54f46b0d30cd13bf141b4beb28a2445e/action_module.png&#34; alt=&#34; action module&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Start by adding the &lt;code&gt;getstream&lt;/code&gt; npm package. At the time of writing, the current version of the package is &lt;code&gt;&lt;span&gt;7.2&lt;/span&gt;&lt;span&gt;.10&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;🛠 Go back to the Stream dashboard, copy your secret and client keys...&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5aLtEOAjfXguB6BQlI8fmB/b55f3fd1d0c7c44c91c760c5850d8457/chat_app_secret.png&#34; alt=&#34;chat app secret&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 ...and then add them with the name of &lt;code&gt;&lt;span&gt;GET_STREAM_CHAT_SECRET_KEY&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;GET_STREAM_CHAT_CLIENT_KEY&lt;/span&gt;&lt;/code&gt;, respectively, to this function in Auth0.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4JgG1WLTfWa2RTlkzAkV8j/1704cdf6b2e7abfd23e611171440dce5/action_secrets.png&#34; alt=&#34; action secrets&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Lastly, you can import &lt;code&gt;getStream&lt;/code&gt; and connect and create a user token bypassing &lt;code&gt;user_id&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Javascript&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; stream &lt;span&gt;=&lt;/span&gt; &lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;getstream&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;exports&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onExecutePostLogin&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;event&lt;span&gt;,&lt;/span&gt; api&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; getStreamClient &lt;span&gt;=&lt;/span&gt; stream&lt;span&gt;.&lt;/span&gt;&lt;span&gt;connect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    event&lt;span&gt;.&lt;/span&gt;secrets&lt;span&gt;.&lt;/span&gt;&lt;span&gt;GET_STREAM_CHAT_CLIENT_KEY&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    event&lt;span&gt;.&lt;/span&gt;secrets&lt;span&gt;.&lt;/span&gt;&lt;span&gt;GET_STREAM_CHAT_SECRET_KEY&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; getStreamToken &lt;span&gt;=&lt;/span&gt; getStreamClient&lt;span&gt;.&lt;/span&gt;&lt;span&gt;createUserToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;event&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;user_id&lt;span&gt;.&lt;/span&gt;&lt;span&gt;split&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;join&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span&gt;// getstream does not support `|` in the ID yet, so we have to omit it.&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// api.user.setAppMetadata(&amp;#34;stream_chat_token&amp;#34;, getStreamToken);&lt;/span&gt;&#xA;  &lt;span&gt;// api.user.setUserMetadata(&amp;#34;stream_chat_token&amp;#34;, getStreamToken);&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; namespace &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;https://getstream.mjcoffee.app&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;event&lt;span&gt;.&lt;/span&gt;authorization&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    api&lt;span&gt;.&lt;/span&gt;idToken&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setCustomClaim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;namespace&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/user_token&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; getStreamToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    api&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setCustomClaim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;namespace&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/user_token&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; getStreamToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s explore the implementation above. &lt;/p&gt;&lt;p&gt;Once you get the token, you can set a user or app metadata named &lt;code&gt;stream_chat_token&lt;/code&gt; with the token value. &lt;/p&gt;&lt;p&gt;Alternately, you can set a custom claim on &lt;code&gt;idToken&lt;/code&gt; and &lt;code&gt;accessToken&lt;/code&gt;. A custom claim must take the form of a URI, which means that &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;getstream&lt;span&gt;.&lt;/span&gt;mjcoffee&lt;span&gt;.&lt;/span&gt;app&lt;span&gt;/&lt;/span&gt;user_token&lt;/code&gt; is an acceptable name for a claim, while &lt;code&gt;user_token&lt;/code&gt; alone is not.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; In Stream, only the characters &lt;code&gt;a&lt;/code&gt; through &lt;code&gt;z&lt;/code&gt;, &lt;code&gt;&lt;span&gt;0&lt;/span&gt;&lt;/code&gt; through &lt;code&gt;&lt;span&gt;9&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, and &lt;code&gt;&lt;span&gt;-&lt;/span&gt;&lt;/code&gt; are allowed in the user ID. Therefore, we shouldn’t use the &lt;code&gt;&lt;span&gt;|&lt;/span&gt;&lt;/code&gt; for &lt;code&gt;user_id&lt;/code&gt; in Auth0.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Let&amp;#39;s run and test this function before we deploy. Click on the play icon and run with the example event, which is automatically generated for you.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1b3pOpx8O1g4MBOqmhI6ix/88e2335e0b2bb8a3730dba6ebcc57e44/action_run.png&#34; alt=&#34; action run&#34;/&gt;&lt;/p&gt;&lt;p&gt;If everything goes well, you’ll get a generated token in JWT format. Its payload will contain &lt;code&gt;user_id&lt;/code&gt;, and it will be signed with your secret key by the Stream servers.&lt;/p&gt;&lt;p&gt;Here’s an example of what you’ll get:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// response in Action run&lt;/span&gt;&#xA;&#xA;&lt;span&gt;[&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;https://getstream.mjcoffee.app/user_token&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    target&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;idToken&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    type&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;SetCustomClaim&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    value&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYXV0aDA1ZjdjOGVjN2MzM2M2YzAwNGJiYWZlODIifQ.7ZIyr27skgrGm6REEz5o-WvoCArNblDnwiOdxXW4dp8&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;https://getstream.mjcoffee.app/user_token&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    target&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;accessToken&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    type&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;SetCustomClaim&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    value&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYXV0aDA1ZjdjOGVjN2MzM2M2YzAwNGJiYWZlODIifQ.7ZIyr27skgrGm6REEz5o-WvoCArNblDnwiOdxXW4dp8&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/Ax6b4nRMkHyjvfGBK47bV/d15969eb0f4740dfe1057372e04c4437/jwt_stream.png&#34; alt=&#34;action run&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Next, go back to &lt;strong&gt;Flow&lt;/strong&gt;, select &lt;strong&gt;Login&lt;/strong&gt;, and drag your newly-created custom action to the flow and apply the changes:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5oYj9z0hIawXOi3dSW8dEZ/4684098fb3b108dd0cc4f32e01aa4e59/login_flow.png&#34; alt=&#34; action run&#34;/&gt;&lt;/p&gt;&lt;p&gt;For the last step, the Flutter app needs to read this token and add it to the user model. That way, when you connect a user to Stream’s chat, instead of the development tokens you’ve been using, you can replace it with the token that Auth0 received.&lt;/p&gt;&lt;p&gt;🛠 Since it&amp;#39;s a custom claim, it will show up in &lt;code&gt;idToken&lt;/code&gt;; thus you’ll need to modify your &lt;code&gt;Auth0IdToken&lt;/code&gt; model class (located in &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;models&lt;span&gt;/&lt;/span&gt;auth0_id_token&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;)...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/models/auth0_id_token.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@JsonSerializable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Auth0IdToken&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;Auth0IdToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;  &#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;streamChatUserToken&lt;span&gt;,&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;https://getstream.mjcoffee.app/user_token&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String streamChatUserToken&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Then do the same with your &lt;code&gt;Auth0User&lt;/code&gt; class (located in &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;models&lt;span&gt;/&lt;/span&gt;auth0_user&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;), as it will be part of the user details:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// m/lib/models/auth0_user.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@JsonSerializable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Auth0User&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;Auth0User&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;      required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;streamChatUserToken&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;https://getstream.mjcoffee.app/user_token&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String streamChatUserToken&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Once you are done, run the &lt;code&gt;build_runner&lt;/code&gt; command to generate models again.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;flutter pub run build_runner build --delete-conflicting-outputs&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Locate &lt;code&gt;connectUser&lt;/code&gt; in the &lt;code&gt;ChatService&lt;/code&gt; class (located in &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;services&lt;span&gt;/&lt;/span&gt;chat_service&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;) and replace &lt;code&gt;&lt;span&gt;devToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; with the newly-received token on the user object.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/chat_service.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;await&lt;/span&gt; client&lt;span&gt;.&lt;/span&gt;&lt;span&gt;connectUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;User&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    id&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;,&lt;/span&gt;&#xA;    extraData&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;image&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;picture&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;// client.devToken(user.id).rawValue,&lt;/span&gt;&#xA;    user&lt;span&gt;.&lt;/span&gt;streamChatUserToken&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well done! Log out of the app, restart it. and log in again. This time, you&amp;#39;ll receive a production-ready user token. When you go to the support chat screen, everything should work as expected.&lt;/p&gt;&lt;h2 id=&#34;Looking-Ahead&#34;&gt;Looking Ahead&lt;/h2&gt;&lt;p&gt;Now that the app has a real-time chat is ready with a proper authentication flow, you can move on to the next section to focus on authorization, roles, and permissions.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-3-adding-real-time-chat-to-the-app/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.</summary>
  </entry>
  <entry>
    <title>Flutter Authentication and Authorization with Auth0, Part 4: Roles and Permissions</title>
    <updated>2021-10-04T17:13:00Z</updated>
    <id>tag:auth0.com,2021-10-04:/blog/flutter-authentication-authorization-with-auth0-part-4-roles-permissions/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;In the previous section, you learned how to add real-time chat to the application and set up the &lt;em&gt;MJ Coffee&lt;/em&gt; app to load different chat screens. &lt;/p&gt;&lt;p&gt;In this section, you will learn how to manage roles and permissions in Auth0 and a Flutter app, as well as how to apply a proper authorization flow. You&amp;#39;ll also learn how to leverage RBAC and permission-based functionalities in a Flutter application.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Look for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Managing-Roles&#34;&gt;Managing Roles&lt;/h2&gt;&lt;p&gt;In a previous section in this tutorial, you learned how to create roles in the Auth0 dashboard. It’s time to see why you need roles and learn how you can leverage them into your app.&lt;/p&gt;&lt;p&gt;Role-based access control (RBAC) is a way to assign permissions to users based on their roles. It offers a simple approach to access management that is less prone to error than assigning permissions to users individually.&lt;/p&gt;&lt;p&gt;For example, suppose you use RBAC to control Customer/Employee access in the &lt;em&gt;MJ Coffee&lt;/em&gt; application. In that case, you could give employees a role that allows them to update users’ details or access the community chat screen. In contrast, customers would view the support screen, but wouldn’t be authorized to perform tasks such as deleting messages or uploading attachments.&lt;/p&gt;&lt;p&gt;When planning your access control strategy, it’s generally a good idea to assign users a smalled number of permissions that allow them to get their work done.&lt;/p&gt;&lt;p&gt;You can leverage Auth0 Actions to assign roles automatically to each user after they sign up.&lt;/p&gt;&lt;p&gt;🛠 Once more, create a new custom action. In the left column menu of the Auth0 dashboard, select &lt;strong&gt;Actions&lt;/strong&gt;, then &lt;strong&gt;Flows&lt;/strong&gt;. The &lt;strong&gt;Choose Flow&lt;/strong&gt; page will appear. Select &lt;strong&gt;Post User Registration&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1pbuab4m48ur5r0abMjpx5/0c67319150786f3ccff7a1fd4f788b60/create_new_post_user_registration.png&#34; alt=&#34;Creating a new post user registration&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Name the action &lt;code&gt;Assign Role&lt;/code&gt; and add the &lt;code&gt;auth0&lt;/code&gt; npm module with version &lt;code&gt;&lt;span&gt;2.35&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;🛠 Add the following handler, which will be called during the execution of a &lt;code&gt;PostUserRegistration&lt;/code&gt; flow:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Auth0 Actions&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; ManagementClient &lt;span&gt;=&lt;/span&gt; &lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;auth0&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;ManagementClient&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;const&lt;/span&gt; AuthenticationClient &lt;span&gt;=&lt;/span&gt; &lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;auth0&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;AuthenticationClient&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;exports&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onExecutePostUserRegistration&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;DOMAIN&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;{YOUR_DOMAIN}&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; auth0 &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;AuthenticationClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    domain&lt;span&gt;:&lt;/span&gt; &lt;span&gt;DOMAIN&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    clientId&lt;span&gt;:&lt;/span&gt; event&lt;span&gt;.&lt;/span&gt;secrets&lt;span&gt;.&lt;/span&gt;&lt;span&gt;M2M_CLIENT_ID&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    clientSecret&lt;span&gt;:&lt;/span&gt; event&lt;span&gt;.&lt;/span&gt;secrets&lt;span&gt;.&lt;/span&gt;&lt;span&gt;M2M_CLIENT_SECRET&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; response &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; auth0&lt;span&gt;.&lt;/span&gt;&lt;span&gt;clientCredentialsGrant&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    audience&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;DOMAIN&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/api/v2/&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    scope&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;read:users update:users&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;API_TOKEN&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;access_token&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; management &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ManagementClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    domain&lt;span&gt;:&lt;/span&gt; &lt;span&gt;DOMAIN&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    token&lt;span&gt;:&lt;/span&gt; &lt;span&gt;API_TOKEN&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;event&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;email&lt;span&gt;.&lt;/span&gt;&lt;span&gt;endsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;@mjcoffee.app&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// employee&lt;/span&gt;&#xA;    &lt;span&gt;await&lt;/span&gt; management&lt;span&gt;.&lt;/span&gt;&lt;span&gt;assignRolestoUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; event&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;user_id &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt; roles&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;rol_CHpJMdZUPCLzo6E2&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// customer&lt;/span&gt;&#xA;    &lt;span&gt;await&lt;/span&gt; management&lt;span&gt;.&lt;/span&gt;&lt;span&gt;assignRolestoUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; event&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;user_id &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt; roles&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;rol_fG50GuNE9S72jNZn&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s analyze this handler’s logic step by step.&lt;/p&gt;&lt;p&gt;The handler imports both &lt;code&gt;ManagementClient&lt;/code&gt; and &lt;code&gt;AuthenticationClient&lt;/code&gt; from the &lt;code&gt;auth0&lt;/code&gt; module, a Node.js SDK that conveniently provides official Auth0 public APIs.&lt;/p&gt;&lt;p&gt;It then defines your domain name, &lt;code&gt;&lt;span&gt;DOMAIN&lt;/span&gt;&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;🛠 In the handler, replace &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;YOUR_DOMAIN&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with your application’s domain, which you’ll find in the Auth0 dashboard.&lt;/p&gt;&lt;p&gt;The handler initializes an authentication client, passing its constructor the application’s domain, client ID, and client secret. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Note that the application client is a bit special here!&lt;/strong&gt; This is &lt;em&gt;not&lt;/em&gt; the application you have created and worked with so far. You need to create a Machine-to-Machine (M2M) application or Auth0 non-interactive client, which makes it possible to request a client credentials grant.&lt;/p&gt;&lt;p&gt;🛠 Open the Auth0 dashboard in a new tab in your browser. Go to the &lt;strong&gt;Applications&lt;/strong&gt; page and creating a new application, selecting the &lt;strong&gt;Machine to Machine Applications&lt;/strong&gt; type:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4s9EPsMj5Lg5StnSURGU4X/df7a4f7a97be3e83a4ff84d446137df3/create_new_m2m_app.png&#34; alt=&#34;Creating a new M2M application in the Auth0 dashboard&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Once the M2M application is created, take a note of Client ID and Client Secret. You will need to add them to your Actions’ secrets in the next step, then go to the &lt;strong&gt;APIs&lt;/strong&gt; tab and authorize the Auth0 Management API.&lt;/p&gt;&lt;p&gt;As mentioned before, it&amp;#39;s always a good idea to limit the permissions. Hence, select only those permissions needed to perform actions with this Client. &lt;/p&gt;&lt;p&gt;🛠 We want to be able to add roles to users, so select the &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;users&lt;/code&gt; and &lt;code&gt;update&lt;span&gt;:&lt;/span&gt;users&lt;/code&gt; permissions:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1zQbWKfW0orBdHROj3RR3j/ce856b0663b4f78610c9d3aa1ea9e0e5/authorize_api.png&#34; alt=&#34;Authorizing the API&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Add the following to the action:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The key &lt;code&gt;&lt;span&gt;M2M_CLIENT_ID&lt;/span&gt;&lt;/code&gt;, with the client ID as its corresponding value&lt;/li&gt;&lt;li&gt;The key &lt;code&gt;&lt;span&gt;M2M_CLIENT_SECRET&lt;/span&gt;&lt;/code&gt;, with the client secret as the value&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can now successfully authenticate an Auth0 client and request a management API token by specifying audiences and scopes. Scopes are the ones that you have selected in the previous steps in the permission tab under Auth0 management API.&lt;/p&gt;&lt;p&gt;Once access is granted and the token is received, you can create a management client.&lt;/p&gt;&lt;p&gt;The logic is relatively simple for this MJ Coffee app.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;event&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;email&lt;span&gt;.&lt;/span&gt;&lt;span&gt;endsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;@mjcoffee.app&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// employee&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// customer&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Simply put, if the user’s email address ends with  &lt;code&gt;@mjcoffee&lt;span&gt;.&lt;/span&gt;app&lt;/code&gt; they will be assigned the &lt;em&gt;employee&lt;/em&gt; role; otherwise, they’ll be assigned the &lt;em&gt;customer&lt;/em&gt; role. This, of course, could change based on your implementation.&lt;/p&gt;&lt;p&gt;Finally, the handler calls &lt;code&gt;&lt;span&gt;assignRolesToUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; on the &lt;code&gt;management&lt;/code&gt; client and passes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;a map containing the user ID, and&lt;/li&gt;&lt;li&gt;a list of role IDs.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To get a role’s ID, select &lt;strong&gt;User Management&lt;/strong&gt; in the Auth0 dashboard’s left column menu, then select &lt;strong&gt;Roles&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4WKeTj5YRcq1IZUcxCO32d/d627b895fe44352d1e4f7de01fa406c6/role_id.png&#34; alt=&#34;Getting a Role’s ID&#34;/&gt;&lt;/p&gt;&lt;p&gt;Fantastic! Don’t forget to deploy your function.&lt;/p&gt;&lt;p&gt;🛠 For the last step, go to &lt;strong&gt;Flows&lt;/strong&gt;, then &lt;strong&gt;Post User Registration&lt;/strong&gt;. Add your &lt;code&gt;Assign Role&lt;/code&gt; custom action to the flow.&lt;/p&gt;&lt;p&gt;If you are impatient to test what you have created so far, navigate to the Auth0 dashboard’s &lt;strong&gt;Users&lt;/strong&gt; page and create new users with and without email addresses that you have specified in your function logic. Then, go to the &lt;strong&gt;Role&lt;/strong&gt; tab — you should see that for each user, their role was assigned automatically:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/30XsYPDx2euHspY9BGnk6s/ddcaf08706e6dda515179b46611cd724/user_role.png&#34; alt=&#34;Users and their automatically assigned roles&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Managing-Permissions&#34;&gt;Managing Permissions&lt;/h2&gt;&lt;p&gt;You’ll often need to create a custom API that defines permissions. Then you can assign those permissions to roles, which can then be assigned to users.&lt;/p&gt;&lt;p&gt;🛠 In the Auth0 dashboard, select &lt;strong&gt;Applications&lt;/strong&gt; in the left column menu, select &lt;strong&gt;APIs&lt;/strong&gt; in the submenu, and then click the &lt;strong&gt;Create API&lt;/strong&gt; button to create a new custom API.&lt;/p&gt;&lt;p&gt;🛠 Give the API a recognizable name, such as &lt;code&gt;StreamChat Management &lt;span&gt;API&lt;/span&gt;&lt;/code&gt;, then define your identifier. This identifier will become your API audience. Note that the identifier cannot be modified. A good practice for naming identifiers is to use a URL, even if that URL is not publicly available. For example, you could name the identifier &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;getStreamChat&lt;span&gt;.&lt;/span&gt;mjcoffee&lt;span&gt;.&lt;/span&gt;app&lt;span&gt;/&lt;/span&gt;v1&lt;span&gt;/&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4NdodtRf9CZSY8O8Onb5fP/7b0216eed696a44a99ef5a99437431a5/custom_api.png&#34; alt=&#34;Creating a new custom API&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Once the API is created, go to the RBAC Settings section and enable RBAC and Add Permissions in the Access Token. The API is supposed to be flagged as First Party so that you can turn on Allow Skipping User Consent. Turn on Allow Offline Access so that Auth0 will allow applications to ask for Refresh Tokens for this API.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1egWhGNMvy0g12Oh6ccQyq/ee28278cf4831101c95dc9ceb5acbf50/rbac-api.png&#34; alt=&#34;RBAC API&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Navigate to the &lt;strong&gt;Permissions&lt;/strong&gt; tab and add your permissions and description. I recommend at adding at least these permissions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;message&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;edit&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;message&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;upload&lt;span&gt;.&lt;/span&gt;attachments&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/47v9LpCiZKbnsTL3VDBQoe/fc80c54e22f8d316b3bf02a6ab3e656f/custom_permissions.png&#34; alt=&#34;Custome permissions&#34;/&gt;&lt;/p&gt;&lt;p&gt;The more permissions you define, and the more explicit they are,  the better you can control the resources.&lt;/p&gt;&lt;p&gt;🛠 Next, head over to &lt;strong&gt;Roles&lt;/strong&gt; under &lt;strong&gt;User Management&lt;/strong&gt;. Go to each role and assign the following permissions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Employee&lt;/strong&gt;&#xA;&lt;ul&gt;&lt;li&gt;&lt;code&gt;edit&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;message&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;upload&lt;span&gt;.&lt;/span&gt;attachments&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Customer&lt;/strong&gt;&#xA;&lt;ul&gt;&lt;li&gt;&lt;code&gt;edit&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;message&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Admin&lt;/strong&gt;&#xA;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;message&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;edit&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;message&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;upload&lt;span&gt;.&lt;/span&gt;attachments&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6JylazPCTIIvUKwrSicEib/116523b7e52452211349376dff85dba0/role_permission.png&#34; alt=&#34;Defining custom permissions&#34;/&gt;&lt;/p&gt;&lt;p&gt;You have managed to create roles and users are automatically assigned roles on registration. Although role assignment is automatic now, you can still alter user roles manually. For example, you can add the &lt;strong&gt;Admin&lt;/strong&gt; role to specific users in the Auth0 dashboard.&lt;/p&gt;&lt;p&gt;The only step remaining is to expose the roles and permissions to &lt;code&gt;idToken&lt;/code&gt; and &lt;code&gt;accessToken&lt;/code&gt; that the Flutter app can consume.&lt;/p&gt;&lt;h2 id=&#34;Exposing-Roles-and-Permission&#34;&gt;Exposing Roles and Permission&lt;/h2&gt;&lt;p&gt;🛠 This step is pretty similar to what you have done when assigning roles. As a reminder, here are the steps:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Create a custom action, triggering Login/Post Login&lt;/li&gt;&lt;li&gt;Name the action “Revealing User Roles &amp;amp; Permissions”&lt;/li&gt;&lt;li&gt;Add the machine-to-machine application’s client ID and client key to the action’s secrets&lt;/li&gt;&lt;li&gt;Add &lt;code&gt;auth0&lt;/code&gt; npm package version &lt;code&gt;&lt;span&gt;2.35&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 Once you’ve done that, follow the code below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Auth0 Actions&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; ManagementClient &lt;span&gt;=&lt;/span&gt; &lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;auth0&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;ManagementClient&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;const&lt;/span&gt; AuthenticationClient &lt;span&gt;=&lt;/span&gt; &lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;auth0&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;AuthenticationClient&lt;span&gt;;&lt;/span&gt;&#xA;exports&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onExecutePostLogin&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;event&lt;span&gt;,&lt;/span&gt; api&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;DOMAIN&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;mhadaily.eu.auth0.com&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; auth0 &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;AuthenticationClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    domain&lt;span&gt;:&lt;/span&gt; &lt;span&gt;DOMAIN&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    clientId&lt;span&gt;:&lt;/span&gt; event&lt;span&gt;.&lt;/span&gt;secrets&lt;span&gt;.&lt;/span&gt;&lt;span&gt;M2M_CLIENT_ID&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    clientSecret&lt;span&gt;:&lt;/span&gt; event&lt;span&gt;.&lt;/span&gt;secrets&lt;span&gt;.&lt;/span&gt;&lt;span&gt;M2M_CLIENT_SECRET&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; response &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; auth0&lt;span&gt;.&lt;/span&gt;&lt;span&gt;clientCredentialsGrant&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    audience&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;DOMAIN&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/api/v2/&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    scope&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;read:users update:users read:roles&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;API_TOKEN&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;access_token&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; management &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ManagementClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    domain&lt;span&gt;:&lt;/span&gt; &lt;span&gt;DOMAIN&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    token&lt;span&gt;:&lt;/span&gt; &lt;span&gt;API_TOKEN&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;const&lt;/span&gt; params &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; event&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;user_id &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; roles &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; management&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getUserRoles&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;params&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; permissions &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; management&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getUserPermissions&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;params&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;const&lt;/span&gt; namespace &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;https://users.mjcoffee.app&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;event&lt;span&gt;.&lt;/span&gt;authorization&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    api&lt;span&gt;.&lt;/span&gt;idToken&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setCustomClaim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;namespace&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/roles&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; roles&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    api&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setCustomClaim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;namespace&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/roles&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; roles&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    api&lt;span&gt;.&lt;/span&gt;idToken&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setCustomClaim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;namespace&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/permissions&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; permissions&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    api&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setCustomClaim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;namespace&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/permissions&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; permissions&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code is pretty similar to what you have written once before. The first change is that it adds &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;roles&lt;/code&gt; to the scope. Make sure you have enabled this permission under the M2M application as you have done once for the &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;users update&lt;span&gt;:&lt;/span&gt;users&lt;/code&gt; permissions; otherwise, you will face an “unauthorized” error.&lt;/p&gt;&lt;p&gt;It then calls &lt;code&gt;&lt;span&gt;getUserRoles&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;getUserPermissions&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;,  passing the user ID. These functions will return user roles and permissions respectively.&lt;/p&gt;&lt;p&gt;After defining a namespace, the code calls &lt;code&gt;&lt;span&gt;setCustomClaim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; to add both roles and permission custom claims to the ID and access tokens.&lt;/p&gt;&lt;p&gt;🛠 Make sure you deploy and then navigate to &lt;strong&gt;Flows&lt;/strong&gt;. You want to add the new custom action to the login flow right before the previous action you created earlier:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5XinnapiJ1AUQN0LiHY5sV/bf95d7da7f1333aafe30f80f0e81f14e/new_login_flow.png&#34; alt=&#34;new flow login&#34;/&gt;&lt;/p&gt;&lt;p&gt;So far so good, but you still need to go to the Flutter app and add roles and permissions to the models.&lt;/p&gt;&lt;h2 id=&#34;Read-Roles-and-Permissions-in-Flutter&#34;&gt;Read Roles and Permissions in Flutter&lt;/h2&gt;&lt;p&gt;Now that both roles and permissions are available in the ID and access tokens, you can add them to &lt;code&gt;Auth0IdToken&lt;/code&gt; and &lt;code&gt;Auth0UserInfo&lt;/code&gt;, respectively.&lt;/p&gt;&lt;p&gt;🛠 First, create a file named &lt;code&gt;auth0_roles&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file in the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;models&lt;/code&gt; folder:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/models/auth0_roles.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:json_annotation/json_annotation.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;part&lt;/span&gt; &lt;span&gt;&amp;#39;auth0_roles.g.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;enum&lt;/span&gt; Role &lt;span&gt;{&lt;/span&gt;&#xA;  Employee&lt;span&gt;,&lt;/span&gt;&#xA;  Admin&lt;span&gt;,&lt;/span&gt;&#xA;  Customer&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@JsonSerializable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Auth0Role&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;Auth0Role&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;description&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;final&lt;/span&gt; String id&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; Role name&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String description&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;factory&lt;/span&gt; Auth0Role&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Map&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; &lt;span&gt;dynamic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; json&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      _$&lt;span&gt;Auth0RoleFromJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;json&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  Map&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; &lt;span&gt;dynamic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;toJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; _$&lt;span&gt;Auth0RoleToJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  String &lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;#39;&amp;#39;&amp;#39;$name&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Then create &lt;code&gt;auth0_permissions&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; in the same directory, with the code below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/models/auth0_permissions.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:json_annotation/json_annotation.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;part&lt;/span&gt; &lt;span&gt;&amp;#39;auth0_permissions.g.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserPermissions&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;static&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; String delete &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;delete.user.message&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;static&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; String edit &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;edit.user.message&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;static&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; String upload &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;upload.attachments&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@JsonSerializable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Auth0Permission&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;Auth0Permission&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;permissionName&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;description&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;resourceServerName&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;resourceServerIdentifier&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;sources&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;permission_name&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String permissionName&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;final&lt;/span&gt; String description&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;resource_server_name&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String resourceServerName&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;resource_server_identifier&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String resourceServerIdentifier&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;final&lt;/span&gt; List&lt;span&gt;&amp;lt;&lt;/span&gt;Auth0PermissionsSource&lt;span&gt;&amp;gt;&lt;/span&gt; sources&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;factory&lt;/span&gt; Auth0Permission&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Map&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; &lt;span&gt;dynamic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; json&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      _$&lt;span&gt;Auth0PermissionFromJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;json&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  Map&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; &lt;span&gt;dynamic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;toJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; _$&lt;span&gt;Auth0PermissionToJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  String &lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;#39;&amp;#39;&amp;#39;$permissionName&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@JsonSerializable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Auth0PermissionsSource&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;Auth0PermissionsSource&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;sourceId&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;sourceName&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;sourceType&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;source_id&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String sourceId&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;source_name&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String sourceName&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;source_type&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String sourceType&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;factory&lt;/span&gt; Auth0PermissionsSource&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Map&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; &lt;span&gt;dynamic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; json&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      _$&lt;span&gt;Auth0PermissionsSourceFromJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;json&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  Map&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; &lt;span&gt;dynamic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;toJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; _$&lt;span&gt;Auth0PermissionsSourceToJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  String &lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;#39;&amp;#39;&amp;#39;&#xA;      sourceId: $sourceId,&#xA;      sourceName: $sourceName,&#xA;      sourceType: $sourceType,&#xA;      &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What you want to achieve here is to serialize and deserialize the roles and permissions for each model.&lt;/p&gt;&lt;p&gt;🛠 The next step is to update the &lt;code&gt;Auth0IdToken&lt;/code&gt; model:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/models/auth0_id_token.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@JsonSerializable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Auth0IdToken&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;Auth0IdToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;roles&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;permissions&lt;span&gt;,&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;https://users.mjcoffee.app/roles&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; List&lt;span&gt;&amp;lt;&lt;/span&gt;Auth0Role&lt;span&gt;&amp;gt;&lt;/span&gt; roles&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;https://users.mjcoffee.app/permissions&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; List&lt;span&gt;&amp;lt;&lt;/span&gt;Auth0Permission&lt;span&gt;&amp;gt;&lt;/span&gt; permissions&lt;span&gt;;&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Do the same for the &lt;code&gt;Auth0User&lt;/code&gt; model:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/models/auth0_user.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@JsonSerializable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Auth0User&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;Auth0User&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;permissions&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;roles&lt;span&gt;,&lt;/span&gt;&#xA;    &#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;https://users.mjcoffee.app/roles&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; List&lt;span&gt;&amp;lt;&lt;/span&gt;Auth0Role&lt;span&gt;&amp;gt;&lt;/span&gt; roles&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;https://users.mjcoffee.app/permissions&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; List&lt;span&gt;&amp;lt;&lt;/span&gt;Auth0Permission&lt;span&gt;&amp;gt;&lt;/span&gt; permissions&lt;span&gt;;&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Finally, run the &lt;code&gt;build_runner&lt;/code&gt; command to ensure that the models are generated properly:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;flutter pub run build_runner build --delete-conflicting-outputs&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can now restart the &lt;em&gt;MJ Coffee&lt;/em&gt; app, and everything should work as expected.&lt;/p&gt;&lt;h2 id=&#34;Role-Based-Screens-in-Flutter&#34;&gt;Role-Based Screens in Flutter&lt;/h2&gt;&lt;p&gt;It’s finally time to have a loading screen based on the user&amp;#39;s role. If you remember, we wanted to add Support and Community screens for customers and employees, respectively. You created both screens earlier.&lt;/p&gt;&lt;p&gt;It would be easier to define getter methods in &lt;code&gt;Auth0User&lt;/code&gt; to determine whether a user has a particular role or permission.&lt;/p&gt;&lt;p&gt;🛠 Add code to the &lt;code&gt;Auth0User&lt;/code&gt; class as shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/models/auth0_user.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Auth0User&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;  bool &lt;span&gt;get&lt;/span&gt; hasImage &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; picture&lt;span&gt;.&lt;/span&gt;isNotEmpty&lt;span&gt;;&lt;/span&gt;&#xA;  bool &lt;span&gt;can&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;String permission&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; permissions&#xA;      &lt;span&gt;.&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;(&lt;/span&gt;p&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; p&lt;span&gt;.&lt;/span&gt;permissionName &lt;span&gt;==&lt;/span&gt; permission&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;.&lt;/span&gt;isNotEmpty&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;get&lt;/span&gt; isAdmin &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; roles&lt;span&gt;.&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;role&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; role&lt;span&gt;.&lt;/span&gt;name &lt;span&gt;==&lt;/span&gt; Role&lt;span&gt;.&lt;/span&gt;Admin&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;isNotEmpty&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;get&lt;/span&gt; isEmployee &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      roles&lt;span&gt;.&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;role&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; role&lt;span&gt;.&lt;/span&gt;name &lt;span&gt;==&lt;/span&gt; Role&lt;span&gt;.&lt;/span&gt;Employee&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;isNotEmpty&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;get&lt;/span&gt; isCustomer &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      roles&lt;span&gt;.&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;role&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; role&lt;span&gt;.&lt;/span&gt;name &lt;span&gt;==&lt;/span&gt; Role&lt;span&gt;.&lt;/span&gt;Customer&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;isNotEmpty&lt;span&gt;;&lt;/span&gt;&#xA;      &#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These getters are pretty self-explanatory.&lt;/p&gt;&lt;p&gt;🛠 Next, open &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;screens&lt;span&gt;/&lt;/span&gt;menu&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; and locate the &lt;code&gt;tabs&lt;/code&gt; list in the &lt;code&gt;_MenuScreenState&lt;/code&gt; class:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/menu.dart&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;final&lt;/span&gt; List&lt;span&gt;&amp;lt;&lt;/span&gt;Widget&lt;span&gt;&amp;gt;&lt;/span&gt; tabs &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;      &lt;span&gt;MenuList&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;coffees&lt;span&gt;:&lt;/span&gt; coffees&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;profile&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;isCustomer&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;SupportChatScreen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;else&lt;/span&gt;&#xA;        &lt;span&gt;CommunityScreen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;ProfileScreen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 In the same file, find &lt;code&gt;BottomNavigationBar&lt;/code&gt; and add &lt;code&gt;BottomNavigationBarItem&lt;/code&gt; to the second position in the list:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/menu.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;BottomNavigationBar &lt;span&gt;_bottomNavigationBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Auth0User&lt;span&gt;?&lt;/span&gt; user&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;BottomNavigationBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &#xA;      &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;      &#xA;      items&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;BottomNavigationBarItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;      &#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;      &#xA;        &lt;span&gt;BottomNavigationBarItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          icon&lt;span&gt;:&lt;/span&gt; AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;profile&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;isCustomer&#xA;              &lt;span&gt;?&lt;/span&gt; &lt;span&gt;Icon&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Icons&lt;span&gt;.&lt;/span&gt;support_agent&lt;span&gt;)&lt;/span&gt;&#xA;              &lt;span&gt;:&lt;/span&gt; &lt;span&gt;Icon&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Icons&lt;span&gt;.&lt;/span&gt;group&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          label&lt;span&gt;:&lt;/span&gt; AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;profile&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;isCustomer&#xA;              &lt;span&gt;?&lt;/span&gt; &lt;span&gt;&amp;#34;Support&amp;#34;&lt;/span&gt;&#xA;              &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Community&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &#xA;       &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;       &#xA;      &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &#xA;     &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;     &#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 To make the UI look better, you can add the user&amp;#39;s avatar to the &lt;code&gt;appBar&lt;/code&gt; so that the complete implementation is as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/menu.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MenuScreen&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;StatefulWidget&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;static&lt;/span&gt; String routeName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;menuScreen&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;static&lt;/span&gt; Route&lt;span&gt;&amp;lt;&lt;/span&gt;MenuScreen&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; MaterialPageRoute&lt;span&gt;&amp;lt;&lt;/span&gt;MenuScreen&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      settings&lt;span&gt;:&lt;/span&gt; &lt;span&gt;RouteSettings&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; routeName&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      builder&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;BuildContext context&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;MenuScreen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  _MenuScreenState &lt;span&gt;createState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;_MenuScreenState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;_MenuScreenState&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;State&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;MenuScreen&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  int _selectedIndex &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  Auth0User&lt;span&gt;?&lt;/span&gt; profile &lt;span&gt;=&lt;/span&gt; AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;profile&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  &lt;span&gt;void&lt;/span&gt; &lt;span&gt;initState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;initState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;final&lt;/span&gt; List&lt;span&gt;&amp;lt;&lt;/span&gt;Widget&lt;span&gt;&amp;gt;&lt;/span&gt; tabs &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;MenuList&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;coffees&lt;span&gt;:&lt;/span&gt; coffees&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;profile&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;isCustomer&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;SupportChatScreen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;else&lt;/span&gt;&#xA;      &lt;span&gt;CommunityScreen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;ProfileScreen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;void&lt;/span&gt; &lt;span&gt;_onItemTapped&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;int index&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      _selectedIndex &lt;span&gt;=&lt;/span&gt; index&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  Widget &lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;BuildContext context&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Scaffold&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      backgroundColor&lt;span&gt;:&lt;/span&gt; Colors&lt;span&gt;.&lt;/span&gt;white&lt;span&gt;,&lt;/span&gt;&#xA;      appBar&lt;span&gt;:&lt;/span&gt; &lt;span&gt;AppBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        automaticallyImplyLeading&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        centerTitle&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        title&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Text&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Welcome ${profile?.name}&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        actions&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;          &lt;span&gt;_avatar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;profile&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      body&lt;span&gt;:&lt;/span&gt; tabs&lt;span&gt;[&lt;/span&gt;_selectedIndex&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      bottomNavigationBar&lt;span&gt;:&lt;/span&gt; &lt;span&gt;_bottomNavigationBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;profile&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  BottomNavigationBar &lt;span&gt;_bottomNavigationBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Auth0User&lt;span&gt;?&lt;/span&gt; user&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;BottomNavigationBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      backgroundColor&lt;span&gt;:&lt;/span&gt; Colors&lt;span&gt;.&lt;/span&gt;white&lt;span&gt;,&lt;/span&gt;&#xA;      type&lt;span&gt;:&lt;/span&gt; BottomNavigationBarType&lt;span&gt;.&lt;/span&gt;fixed&lt;span&gt;,&lt;/span&gt;&#xA;      unselectedItemColor&lt;span&gt;:&lt;/span&gt; Colors&lt;span&gt;.&lt;/span&gt;brown&lt;span&gt;.&lt;/span&gt;shade300&lt;span&gt;,&lt;/span&gt;&#xA;      items&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;BottomNavigationBarItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;        &lt;span&gt;BottomNavigationBarItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          icon&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Icon&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Icons&lt;span&gt;.&lt;/span&gt;list_alt&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          label&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Menu&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;BottomNavigationBarItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          icon&lt;span&gt;:&lt;/span&gt;&#xA;              user&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;isCustomer &lt;span&gt;?&lt;/span&gt; &lt;span&gt;Icon&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Icons&lt;span&gt;.&lt;/span&gt;support_agent&lt;span&gt;)&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;Icon&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Icons&lt;span&gt;.&lt;/span&gt;group&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          label&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;isCustomer &lt;span&gt;?&lt;/span&gt; &lt;span&gt;&amp;#34;Support&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Community&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;BottomNavigationBarItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          icon&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Icon&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Icons&lt;span&gt;.&lt;/span&gt;person&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          label&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Profile&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      currentIndex&lt;span&gt;:&lt;/span&gt; _selectedIndex&lt;span&gt;,&lt;/span&gt;&#xA;      selectedItemColor&lt;span&gt;:&lt;/span&gt; Colors&lt;span&gt;.&lt;/span&gt;brown&lt;span&gt;.&lt;/span&gt;shade800&lt;span&gt;,&lt;/span&gt;&#xA;      onTap&lt;span&gt;:&lt;/span&gt; _onItemTapped&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  Padding &lt;span&gt;_avatar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Auth0User&lt;span&gt;?&lt;/span&gt; profile&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Padding&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      padding&lt;span&gt;:&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; EdgeInsets&lt;span&gt;.&lt;/span&gt;&lt;span&gt;all&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;8.0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;FittedBox&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        fit&lt;span&gt;:&lt;/span&gt; BoxFit&lt;span&gt;.&lt;/span&gt;cover&lt;span&gt;,&lt;/span&gt;&#xA;        child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;ClipRRect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          clipBehavior&lt;span&gt;:&lt;/span&gt; Clip&lt;span&gt;.&lt;/span&gt;antiAlias&lt;span&gt;,&lt;/span&gt;&#xA;          borderRadius&lt;span&gt;:&lt;/span&gt; BorderRadius&lt;span&gt;.&lt;/span&gt;&lt;span&gt;all&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Radius&lt;span&gt;.&lt;/span&gt;&lt;span&gt;circular&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;600&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Container&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;_avatarPhoto&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;profile&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  Widget &lt;span&gt;_avatarPhoto&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Auth0User&lt;span&gt;?&lt;/span&gt; profile&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; profile &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; profile&lt;span&gt;.&lt;/span&gt;hasImage&#xA;        &lt;span&gt;?&lt;/span&gt; Image&lt;span&gt;.&lt;/span&gt;&lt;span&gt;network&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            profile&lt;span&gt;.&lt;/span&gt;picture&lt;span&gt;,&lt;/span&gt;&#xA;            width&lt;span&gt;:&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            height&lt;span&gt;:&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;:&lt;/span&gt; &lt;span&gt;Container&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            width&lt;span&gt;:&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            height&lt;span&gt;:&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            color&lt;span&gt;:&lt;/span&gt; darkBrown&lt;span&gt;,&lt;/span&gt;&#xA;            child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Center&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;              child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Text&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;${profile?.name[0].toUpperCase()}&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can create a new user and assign it the “employee” role so that you can also test the Employee role screen.&lt;/p&gt;&lt;p&gt;Well done! Restart your app, log out, and log in again, and you’ll see the appropriate screen for your role:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4viiFWih2Zdu8FzWeIQYmS/489c1e5a9dda80abbf13e97a3541b945/role_based_screens.png&#34; alt=&#34; role base screen flutter &#34;/&gt;&lt;/p&gt;&lt;p&gt;But that&amp;#39;s not all! You still need an employee ID to create a private channel between the currently signed-in customer and an employee.&lt;/p&gt;&lt;p&gt;You can define an API that can return available agents to create a channel. However, another strategy that would work for the &lt;em&gt;MJ Coffee&lt;/em&gt; app is to retrieve all employees&amp;#39; user IDs via ID tokens’ custom claims and randomly pick one of them.&lt;/p&gt;&lt;p&gt;You can create other custom actions, similar to the previous steps for permissions and roles. I won’t walk you through all steps since you’ve already done it twice.&lt;/p&gt;&lt;p&gt;🛠 Name this action &lt;code&gt;Retrieve Employees User IDs&lt;/code&gt; and define its logic as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Auth0 Action&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; ManagementClient &lt;span&gt;=&lt;/span&gt; &lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;auth0&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;ManagementClient&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;const&lt;/span&gt; AuthenticationClient &lt;span&gt;=&lt;/span&gt; &lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;auth0&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;AuthenticationClient&lt;span&gt;;&lt;/span&gt;&#xA;exports&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onExecutePostLogin&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;event&lt;span&gt;,&lt;/span&gt; api&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;DOMAIN&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;mhadaily.eu.auth0.com&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; auth0 &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;AuthenticationClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    domain&lt;span&gt;:&lt;/span&gt; &lt;span&gt;DOMAIN&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    clientId&lt;span&gt;:&lt;/span&gt; event&lt;span&gt;.&lt;/span&gt;secrets&lt;span&gt;.&lt;/span&gt;&lt;span&gt;M2M_CLIENT_ID&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    clientSecret&lt;span&gt;:&lt;/span&gt; event&lt;span&gt;.&lt;/span&gt;secrets&lt;span&gt;.&lt;/span&gt;&lt;span&gt;M2M_CLIENT_SECRET&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; response &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; auth0&lt;span&gt;.&lt;/span&gt;&lt;span&gt;clientCredentialsGrant&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    audience&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;DOMAIN&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/api/v2/&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    scope&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;read:users read:roles&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;API_TOKEN&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;access_token&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; management &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ManagementClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    domain&lt;span&gt;:&lt;/span&gt; &lt;span&gt;DOMAIN&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    token&lt;span&gt;:&lt;/span&gt; &lt;span&gt;API_TOKEN&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; params &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; event&lt;span&gt;.&lt;/span&gt;secrets&lt;span&gt;.&lt;/span&gt;&lt;span&gt;EMPLOYEE_ROLE_ID&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; per_page&lt;span&gt;:&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; page&lt;span&gt;:&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; employees &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; management&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getUsersInRole&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;params&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; employee_ids &lt;span&gt;=&lt;/span&gt; employees&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;employee&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; employee&lt;span&gt;.&lt;/span&gt;user_id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; namespace &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;https://employees.mjcoffee.app&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;event&lt;span&gt;.&lt;/span&gt;authorization&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    api&lt;span&gt;.&lt;/span&gt;idToken&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setCustomClaim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;namespace&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/id&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; employee_ids&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Again, you will use &lt;code&gt;ManagementClient&lt;/code&gt; to get the first ten users based on their role by calling &lt;code&gt;&lt;span&gt;getUsersInRole&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and passing the role ID that &lt;code&gt;&lt;span&gt;EMPLOYEE_ROLE_ID&lt;/span&gt;&lt;/code&gt; identifies from secrets, then define the namespace and set a custom claim on &lt;code&gt;idToken&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;🛠 Lastly, deploy this action and add it to the &lt;strong&gt;Login&lt;/strong&gt; flow right after the GetStream User Token action and apply:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3T7JSFv4ogGggqg8ig34hh/d12e912be13cf17ce9f74f0ac73f9ca7/role-actions.png&#34; alt=&#34; role in login flow &#34;/&gt;&lt;/p&gt;&lt;p&gt;Locate the &lt;code&gt;Auth0IdToken&lt;/code&gt; and &lt;code&gt;Auth0User&lt;/code&gt; classes in the Flutter app and add a new property, &lt;code&gt;availableAgents&lt;/code&gt;, to both of them.&lt;/p&gt;&lt;p&gt;🛠 In &lt;code&gt;Auth0IdToken&lt;/code&gt; you should have:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/models/auth0_id_token.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@JsonSerializable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Auth0IdToken&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;Auth0IdToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;  &#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;availableAgents&lt;span&gt;,&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;    &#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;https://employees.mjcoffee.app/id&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; defaultValue&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; List&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;&amp;gt;&lt;/span&gt; availableAgents&lt;span&gt;;&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 ...and in &lt;code&gt;Auth0User&lt;/code&gt; you can do the same:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/models/auth0_user.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@JsonSerializable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Auth0User&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;Auth0User&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;  &#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;availableAgents&lt;span&gt;,&lt;/span&gt;&#xA;  &#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;    &#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;https://employees.mjcoffee.app/id&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; defaultValue&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; List&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;&amp;gt;&lt;/span&gt; availableAgents&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Don’t forget to run this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;flutter pub run build_runner build --delete-conflicting-outputs&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 It&amp;#39;s perfectly fine if you decide to make this change only to the user class. Locate &lt;code&gt;createSupportChat&lt;/code&gt; in &lt;code&gt;ChatService&lt;/code&gt; class. You left the employee ID blank, so now you can refactor this to pick an employee ID randomly:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/chat_service.dart&lt;/span&gt;&#xA;&#xA; String&lt;span&gt;?&lt;/span&gt; _currentEmployeeId&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;Future&lt;span&gt;&amp;lt;&lt;/span&gt;Channel&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;createSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;List&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;&amp;gt;&lt;/span&gt; availableAgents&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// skip if the chat is still open with current employeeId&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;_currentEmployeeId &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;final&lt;/span&gt; _random &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Random&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;final&lt;/span&gt; randomNumber &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; _random&lt;span&gt;.&lt;/span&gt;&lt;span&gt;nextInt&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;availableAgents&lt;span&gt;.&lt;/span&gt;length &lt;span&gt;-&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;final&lt;/span&gt; String employeeId &lt;span&gt;=&lt;/span&gt; availableAgents&lt;span&gt;[&lt;/span&gt;randomNumber&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;split&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;join&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      _currentEmployeeId &lt;span&gt;=&lt;/span&gt; employeeId&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;final&lt;/span&gt; channel &lt;span&gt;=&lt;/span&gt; client&lt;span&gt;.&lt;/span&gt;&lt;span&gt;channel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;support&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      id&lt;span&gt;:&lt;/span&gt; _currentChannelId&lt;span&gt;,&lt;/span&gt;&#xA;      extraData&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;MJCoffee Support&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#39;members&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;          _currentEmployeeId&lt;span&gt;,&lt;/span&gt;&#xA;          client&lt;span&gt;.&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;]&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;await&lt;/span&gt; channel&lt;span&gt;.&lt;/span&gt;&lt;span&gt;watch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    _currentChannelId &lt;span&gt;=&lt;/span&gt; channel&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; channel&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s examine this code. First, it passes a list of employee IDs to &lt;code&gt;createSupportChat&lt;/code&gt;. Then, it makes sure it is storing the current employee ID that has an open support chat in order to avoid recreating a new channel.&lt;/p&gt;&lt;p&gt;Finally, it randomly picks an ID from the list and creates a channel with the current customer.&lt;/p&gt;&lt;p&gt;This solution might not be the best possible one. However, it would work for our small coffee store. Ideally, you would define an API that can return an available employee to a customer on-demand. I may write another article to show you how you can better with other solutions.&lt;/p&gt;&lt;p&gt;🛠 Lastly, locate the &lt;code&gt;&lt;span&gt;createChannel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method in the &lt;code&gt;_SupportChatScreenState&lt;/code&gt; class (it’s in the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;screens&lt;span&gt;/&lt;/span&gt;support&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file) and refactor it to pass the &lt;code&gt;availableAgents&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/support.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;createChannel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;profile &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;final&lt;/span&gt; _channel &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; ChatService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;createSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        profile&lt;span&gt;!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;availableAgents&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        channel &lt;span&gt;=&lt;/span&gt; _channel&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;It&amp;#39;s very important that you have registered all of your employees’ IDs in Stream chat. Typically, users can log in as employees should log in and everything will work. However, if you still have not registered all of your employees, you might get an error with the message &lt;code&gt;The following users are specified &lt;span&gt;in&lt;/span&gt; channel&lt;span&gt;.&lt;/span&gt;members but don&amp;#39;t exist&lt;/code&gt;. This usually happens if you have created any users before the Login flow and Custom token generation action have been created.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Nicely done! You can restart your app, and this time you can see the support channel screen.&lt;/p&gt;&lt;h2 id=&#34;Permission-Based-Functionalities&#34;&gt;Permission-Based Functionalities&lt;/h2&gt;&lt;p&gt;After applying roles to have specific kinds of access in the app, you can go one step deeper and use functionalities based on the user&amp;#39;s permission inherited from the role.&lt;/p&gt;&lt;p&gt;You have already defined the &lt;code&gt;can&lt;/code&gt; method on &lt;code&gt;Auth0User&lt;/code&gt; in the previous section. The purpose of this method is to check if the user has given permission. Let&amp;#39;s use it.&lt;/p&gt;&lt;p&gt;🛠 Locate &lt;code&gt;MessageInput&lt;/code&gt; in the &lt;code&gt;support&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file, and you can replace it with&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/support.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;MessageInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  disableAttachments&lt;span&gt;:&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;profile&lt;span&gt;!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;can&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;UserPermissions&lt;span&gt;.&lt;/span&gt;upload&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  sendButtonLocation&lt;span&gt;:&lt;/span&gt; SendButtonLocation&lt;span&gt;.&lt;/span&gt;inside&lt;span&gt;,&lt;/span&gt;&#xA;  actionsLocation&lt;span&gt;:&lt;/span&gt; ActionsLocation&lt;span&gt;.&lt;/span&gt;leftInside&lt;span&gt;,&lt;/span&gt;&#xA;  showCommandsButton&lt;span&gt;:&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;profile&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;isCustomer&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the implementation above, &lt;code&gt;disableAttachments&lt;/code&gt; is enabled based on the user&amp;#39;s permission, or &lt;code&gt;showCommandsButton&lt;/code&gt; is active only for the Customer role.&lt;/p&gt;&lt;p&gt;Another approach you can take is to limit the delete message functionality and apply &lt;code&gt;UserPermissions&lt;span&gt;.&lt;/span&gt;delete&lt;/code&gt; to remove the applicable UI.&lt;/p&gt;&lt;p&gt;Moreover, you may want to apply for these permissions on your back-end or API to perform. I will leave this part as homework.&lt;/p&gt;&lt;h2 id=&#34;Closing-a-Support-Chat-Channel&#34;&gt;Closing a Support Chat Channel&lt;/h2&gt;&lt;p&gt;For the last section of this tutorial, I&amp;#39;d like to show you how to close a support channel chat.&lt;/p&gt;&lt;p&gt;🛠 First, you need to create a method for the &lt;code&gt;ChatService&lt;/code&gt; class to send the command to close a channel.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/chat_service.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;Future&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;archiveSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;   &lt;span&gt;await&lt;/span&gt; client&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hideChannel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      _currentChannelId&lt;span&gt;!&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;support&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      clearHistory&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  client&lt;span&gt;.&lt;/span&gt;&lt;span&gt;channel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;support&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; _currentChannelId&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;dispose&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  _currentChannelId &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  _currentEmployeeId &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this implementation, you can hide a chat with an existing ID and the type &lt;code&gt;support&lt;/code&gt; and finally, set both &lt;code&gt;_currentChannelId&lt;/code&gt; and &lt;code&gt;_currentEmployeeId&lt;/code&gt; to &lt;code&gt;&lt;span&gt;null&lt;/span&gt;&lt;/code&gt; so that next time users come to a support screen, they’ll see a new channel created, and it will connect them to another employee.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Hiding a channel makes it invisible to the query channels. It can be retrieved if the user adds a new message to it or calls the &lt;code&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to remove the hidden status.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;However, there are other possibilities. For example, you can &lt;code&gt;archive&lt;/code&gt; or &lt;code&gt;&lt;span&gt;delete&lt;/span&gt;&lt;/code&gt; a channel. At the moment, &lt;code&gt;archive&lt;/code&gt; is not exposed to the Stream Dart SDK. Therefore, for now, you can hide a channel.&lt;/p&gt;&lt;p&gt;🛠 Next, locate &lt;code&gt;MessageInput&lt;/code&gt; in the &lt;code&gt;support&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file, and add &lt;code&gt;actions&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/support.dart&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;MessageInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  actions&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;_closeChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  disableAttachments&lt;span&gt;:&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;profile&lt;span&gt;!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;can&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;UserPermissions&lt;span&gt;.&lt;/span&gt;upload&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  sendButtonLocation&lt;span&gt;:&lt;/span&gt; SendButtonLocation&lt;span&gt;.&lt;/span&gt;inside&lt;span&gt;,&lt;/span&gt;&#xA;  actionsLocation&lt;span&gt;:&lt;/span&gt; ActionsLocation&lt;span&gt;.&lt;/span&gt;leftInside&lt;span&gt;,&lt;/span&gt;&#xA;  showCommandsButton&lt;span&gt;:&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;profile&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;isCustomer&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;/// method in the class&lt;/span&gt;&#xA;  CommonButton &lt;span&gt;_closeChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;CommonButton&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      onPressed&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        ChatService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;archiveSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        CoffeeRouter&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;push&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenuScreen&lt;span&gt;.&lt;/span&gt;&lt;span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Icon&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        Icons&lt;span&gt;.&lt;/span&gt;close&lt;span&gt;,&lt;/span&gt;&#xA;        color&lt;span&gt;:&lt;/span&gt; Colors&lt;span&gt;.&lt;/span&gt;white&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;actions&lt;/code&gt; parameter adds a list of additional actions to the &lt;code&gt;GetStream&lt;/code&gt; chat input UI. You can call the &lt;code&gt;archiveSupportChat&lt;/code&gt; method &lt;code&gt;&lt;span&gt;OnPressed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and hide the chat, and redirect the user to the menu screen to show a proper message that the discussion is closed. They can reopen by returning to the support screen.&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Authentication and authorization are complex but necessary features of most applications, and they can be tricky to implement and manage. Auth0 provides a reliable service that takes on these tasks. You can this service in Flutter applications without having to set up a server or maintain infrastructure. You can also make use of serverless tools such as Auth0 Actions, which you can use to add sophistication to your authentication and authorization process.&lt;/p&gt;&lt;p&gt;You have seen how you can speed up your development by adding a support chat using &lt;code&gt;GetStreamChat&lt;/code&gt; to a Flutter application. You’ve also seen how you can limit the functionality available to users by leveraging roles and permissions received from Auth0 via tokens.&lt;/p&gt;&lt;p&gt;Congratulations! You’ve come a long way over this tutorial’s four parts, and I hope that you have learned a lot. This is just the beginning — you can still implement and configure a lot, using both Stream and Auth0, and take your apps to the next level.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-4-roles-permissions/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.</summary>
  </entry>
  <entry>
    <title>Flutter Authentication and Authorization with Auth0, Part 4: Roles and Permissions</title>
    <updated>2021-10-04T17:13:00Z</updated>
    <id>tag:auth0.com,2021-10-04:/blog/flutter-authentication-authorization-with-auth0-part-4-roles-permissions/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://twitter.com/auth0&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://facebook.com/getauth0&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://linkedin.com/company/auth0&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/weareauth0/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/auth0&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;© 2013-2021 Auth0 Inc. All Rights Reserved.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-4-roles-permissions/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.</summary>
  </entry>
  <entry>
    <title>Flutter Authentication and Authorization with Auth0, Part 3: Adding Real-Time Chat to the App</title>
    <updated>2021-10-04T17:13:00Z</updated>
    <id>tag:auth0.com,2021-10-04:/blog/flutter-authentication-authorization-with-auth0-part-3-adding-real-time-chat-to-the-app/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;In the previous sections of this tutorial, you added authentication to &lt;em&gt;MJ Coffee&lt;/em&gt;, a Flutter app, and then enhanced that authentication by adding refresh token rotation and social logins. You also looked at customizing the login page with your own branding, and user management in Auth0.&lt;/p&gt;&lt;p&gt;In this section, we’ll focus on authorization. Remember:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt; concerns itself with answering the question “Who are you?”&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Authorization&lt;/strong&gt; — this section’s topic — is all about answering the question “What are you allowed to do?”&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We’ll cover authorization by adding real-time chat to &lt;em&gt;MJ Coffee&lt;/em&gt; so that we can later see how the chat can be integrated with Auth0, limit its functionalities and UIs based on roles and permissions.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Look for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Add-Real-Time-Chat-to-the-Flutter-Application&#34;&gt;Add Real-Time Chat to the Flutter Application&lt;/h2&gt;&lt;p&gt;Having a real-time chat service in the &lt;em&gt;MJ Coffee&lt;/em&gt; app can significantly improve how fast users can communicate with our customer service or employees. Having looked around, I found &lt;a href=&#34;https://getstream.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Stream&lt;/a&gt;, an exciting service with a solid Flutter SDK that you can integrate and customize quickly and easily.&lt;/p&gt;&lt;h2 id=&#34;Install-Dependencies&#34;&gt;Install Dependencies&lt;/h2&gt;&lt;p&gt;Stream comes with several SDKs that can be used in Dart or Flutter applications. However, one of them comes with all features, a beautiful theme, and enough API so that you can customize it as much as you wish. We’ll use that one.&lt;/p&gt;&lt;p&gt;🛠 Open the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;pubspec&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt; file and add &lt;code&gt;stream_chat_flutter&lt;/code&gt; to your dependencies. The &lt;code&gt;dependencies&lt;/code&gt; section of the file should end up looking like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// /pubspec.yaml&#xA;&#xA;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;flutter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;sdk&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; flutter&#xA;  &lt;span&gt;font_awesome_flutter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^9.1.0&#xA;  &lt;span&gt;flutter_svg&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^0.22.0&#xA;  &lt;span&gt;google_fonts&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^2.1.0&#xA;  &lt;span&gt;json_annotation&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^4.0.1&#xA;  &lt;span&gt;http&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^0.13.3&#xA;  &lt;span&gt;flutter_appauth&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^1.1.0&#xA;  &lt;span&gt;flutter_secure_storage&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^4.2.0&#xA;  &lt;span&gt;stream_chat_flutter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^2.0.0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I recommend using a version later than 2.0, which is fully compatible with Flutter 2 and its support for &lt;a href=&#34;https://flutter.dev/docs/null-safety&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;null safety&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you’re only targeting Android, you can ignore the next section.&lt;/p&gt;&lt;h4 id=&#34;If-you-re-targeting-iOS&#34;&gt;If you’re targeting iOS&lt;/h4&gt;&lt;p&gt;🛠 If you’re targeting iOS, you’ll need to take a few extra steps:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The Stream library uses the &lt;a href=&#34;https://github.com/miguelpruivo/flutter_file_picker&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;flutter file picker&lt;/em&gt; plugin&lt;/a&gt; to present the user with an interface to select files. You’ll need to follow the steps in &lt;a href=&#34;https://github.com/miguelpruivo/flutter_file_picker/wiki/Setup#ios&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the &lt;em&gt;iOS&lt;/em&gt; section of this page&lt;/a&gt; to make use of it.&lt;/li&gt;&lt;li&gt;The library also uses the &lt;em&gt;video_player&lt;/em&gt; plugin to display inline videos. Follow &lt;a href=&#34;https://pub.dev/packages/video_player#installation&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this guide&lt;/a&gt; to install and enable it.&lt;/li&gt;&lt;li&gt;Finally, the library uses the &lt;em&gt;image_picker&lt;/em&gt; plugin to provide a user interface for selecting images. Follow [these instructions] to use this plugin.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 Don’t forget to actually install the dependencies! Enter &lt;code&gt;flutter pub get&lt;/code&gt; in the terminal or PowerShell, or &lt;code&gt;Pub get&lt;/code&gt; in your IDE.&lt;/p&gt;&lt;h2 id=&#34;Create-a-Stream-Account-and-App&#34;&gt;Create a Stream Account and App&lt;/h2&gt;&lt;p&gt;Before you can integrate Stream with your app, you need a Stream account, which you’ll use to register the app.&lt;/p&gt;&lt;p&gt;🛠 &lt;a href=&#34;https://getstream.io/accounts/signup/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Create your account if you don’t already have one,&lt;/a&gt; then log in and go to the Stream dashboard:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5g116jkNGeqaZvFk5nesaZ/e01470d789d92e658ca0d4ac16605d5e/stream_dashboard.png&#34; alt=&#34;Stream dashboard.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Tap on the &lt;strong&gt;Create App&lt;/strong&gt; button, then follow these steps:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Enter a name for your app in the &lt;strong&gt;App Name&lt;/strong&gt; field. For this example, we’ll use &lt;code&gt;MJCoffee&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;In the &lt;strong&gt;Feeds Server Location&lt;/strong&gt; menu, select the location closest to you.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Don’t&lt;/em&gt; select anything from the &lt;strong&gt;Clone Existing App&lt;/strong&gt; menu — just leave it set to &lt;code&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Select your environment. Usually, it&amp;#39;s a good idea to create separate apps for production and development. In this tutorial, we’ll focus on production, so select &lt;strong&gt;Production&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Finally, click the &lt;strong&gt;Create App&lt;/strong&gt; button.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You should see this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3Zh9QmY69R9Bwo4p3PZawt/f8c55e169d20282c17e3592216344fd6/stream_app.png&#34; alt=&#34;A newly-created app in Stream.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Once your app has been created, make a note of your Stream key. &lt;/p&gt;&lt;p&gt;Notice that you will need a secret key to sign the user ID and get a production user token to connect users. You’ll learn how to do that with Auth0 Actions.&lt;/p&gt;&lt;p&gt;I recommend passing sensitive data and keys with &lt;code&gt;&lt;span&gt;--&lt;/span&gt;dart&lt;span&gt;-&lt;/span&gt;define&lt;/code&gt; via the command line or adding to your editor or IDE run command rather than storing it in your app’s code.&lt;/p&gt;&lt;p&gt;You took this approach when implementing basic authentication for the app. You passed two sensitive values — your Auth0 domain and Auth0 client ID — as command-line arguments when launching the app. You’ll simply add the Stream key as a third argument, like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;flutter run -d all --dart-define&lt;span&gt;=&lt;/span&gt;AUTH0_DOMAIN&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;YOUR DOMAIN&lt;span&gt;]&lt;/span&gt; --dart-define&lt;span&gt;=&lt;/span&gt;AUTH0_CLIENT_ID&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;YOUR CLIENT ID&lt;span&gt;]&lt;/span&gt; --dart-define&lt;span&gt;=&lt;/span&gt;STREAM_API_KEY&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;YOUR STREAM KEY&lt;span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In order for your application to use the Stream key argument, you’ll need to define a new constant.&lt;/p&gt;&lt;p&gt;🛠 Add the following to your &lt;code&gt;constants&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file, which is located in the in the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;helpers&lt;span&gt;/&lt;/span&gt;&lt;/code&gt; directory:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/helpers/constants.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; STREAM_API_KEY &lt;span&gt;=&lt;/span&gt; String&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromEnvironment&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;STREAM_API_KEY&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Integrate-Chat-Into-the-Flutter-Application&#34;&gt;Integrate Chat Into the Flutter Application&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s start by creating a new &lt;code&gt;StreamChatClient&lt;/code&gt; in the &lt;code&gt;ChatService&lt;/code&gt; singleton class. In doing this, there are three essential things that you need to take into account:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Initializing the Dart API client with your API Key&lt;/li&gt;&lt;li&gt;Setting the current user&lt;/li&gt;&lt;li&gt;Passing the client to the top-level StreamChat widget&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;🛠 Open &lt;code&gt;chat_service&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; (located in the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;services&lt;span&gt;/&lt;/span&gt;&lt;/code&gt; directory) and initialize &lt;code&gt;StreamChatClient&lt;/code&gt; by updating the &lt;code&gt;ChatService&lt;/code&gt; class so that it appears as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/chat_service.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ChatService&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ChatService instance &lt;span&gt;=&lt;/span&gt; ChatService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;_internal&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;factory&lt;/span&gt; &lt;span&gt;ChatService&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; instance&lt;span&gt;;&lt;/span&gt;&#xA;  ChatService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;_internal&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;final&lt;/span&gt; StreamChatClient client &lt;span&gt;=&lt;/span&gt; &lt;span&gt;StreamChatClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    STREAM_API_KEY&lt;span&gt;,&lt;/span&gt;&#xA;    logLevel&lt;span&gt;:&lt;/span&gt; isInDebugMode &lt;span&gt;?&lt;/span&gt; Level&lt;span&gt;.&lt;/span&gt;INFO &lt;span&gt;:&lt;/span&gt; Level&lt;span&gt;.&lt;/span&gt;OFF&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The only required positional parameter for &lt;code&gt;&lt;span&gt;StreamChatClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; is &lt;code&gt;&lt;span&gt;STREAM_API_KEY&lt;/span&gt;&lt;/code&gt;, but you have more options to configure your client. For instance, it might be pretty helpful to see all the logs during debugging. That&amp;#39;s why we used the optional &lt;code&gt;logLevel&lt;/code&gt; parameter to set the amount of logging that will take place, based on whether or not the app is in debug mode.&lt;/p&gt;&lt;p&gt;Now that you‘ve created the client, you need to ensure that your current user is connected appropriately.&lt;/p&gt;&lt;p&gt;🛠 Add the &lt;code&gt;&lt;span&gt;connectUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; to the &lt;code&gt;ChatService&lt;/code&gt; class in  &lt;code&gt;chat_service&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/chat_service.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ChatService&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;  Future&lt;span&gt;&amp;lt;&lt;/span&gt;Auth0User&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;connectUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Auth0User&lt;span&gt;?&lt;/span&gt; user&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;user &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;Exception&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;User was not received&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;await&lt;/span&gt; client&lt;span&gt;.&lt;/span&gt;&lt;span&gt;connectUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;User&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        id&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;,&lt;/span&gt;&#xA;        extraData&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#39;image&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;picture&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;// To be replaced with PRODUCTION TOKEN for user&lt;/span&gt;&#xA;      client&lt;span&gt;.&lt;/span&gt;&lt;span&gt;devToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;rawValue&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; user&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This new method of the &lt;code&gt;ChatService&lt;/code&gt; class, &lt;code&gt;&lt;span&gt;connectUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, will handle the logic for connecting the current user. It accepts an &lt;code&gt;Auth0User&lt;/code&gt; object. If it doesn‘t receive one, it means the authentication has probably failed and that the user should not be connected to the chat.&lt;/p&gt;&lt;p&gt;🛠 Open &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;screens&lt;span&gt;/&lt;/span&gt;home&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;, look for the &lt;code&gt;_HomeScreenState&lt;/code&gt; class, and within it, the &lt;code&gt;&lt;span&gt;setSuccessAuthState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method. Update &lt;code&gt;&lt;span&gt;setSuccessAuthState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/home.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;setSuccessAuthState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    isProgressing &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    isLoggedIn &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    name &lt;span&gt;=&lt;/span&gt; AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;idToken&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  ChatService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;connectUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;profile&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  CoffeeRouter&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;push&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenuScreen&lt;span&gt;.&lt;/span&gt;&lt;span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You need to pass two required positional parameters:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;code&gt;User&lt;/code&gt; object with a defined user ID, and&lt;/li&gt;&lt;li&gt;the user token, a signed and encrypted hash string.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Typically, the user token should be generated on a back-end server to store the aforementioned secret key and to sign and get the token. You&amp;#39;ll soon learn how Auth0 can handle that as your backend.&lt;/p&gt;&lt;p&gt;To continue, you need to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Get a development token,&lt;/li&gt;&lt;li&gt;pass &lt;code&gt;user&lt;span&gt;.&lt;/span&gt;id&lt;/code&gt; to the &lt;code&gt;&lt;span&gt;devToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method on the chat client, and&lt;/li&gt;&lt;li&gt;Get the &lt;code&gt;rawValue&lt;/code&gt; which is the token string.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 To ensure that &lt;code&gt;devToken&lt;/code&gt; works, you need to disable auth checks. In the &lt;code&gt;GetStream&lt;/code&gt; app’s chat dashboard, turn on the &lt;strong&gt;Disable Auth0 Checks&lt;/strong&gt; option.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3DMx1hZFHbDqt50gtJErjO/9c4c7e3c1da342ddf10c8fb208ac8960/disable_auth_checks.png&#34; alt=&#34;Stream dashboard.&#34;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;When you move the app to production and you have a proper method to receive the production token, make sure that you turn off the &lt;strong&gt;Disable Auth0 Checks&lt;/strong&gt; option.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Stream chat UI components will accept additional data that you provide while connecting a user. For example, you may create a &lt;code&gt;Map&lt;/code&gt; containing the user‘s image and name, so they appear automatically and beautifully throughout the chat widget.&lt;/p&gt;&lt;p&gt;At the time of writing, Stream does not accept Auth0’s user ID format, which includes &lt;code&gt;&lt;span&gt;|&lt;/span&gt;&lt;/code&gt; between the Auth source and user hash ID. You’ll need to make a change to the &lt;code&gt;id&lt;/code&gt; arrow function in the &lt;code&gt;Auth0User&lt;/code&gt; model to account for this.&lt;/p&gt;&lt;p&gt;🛠 Open &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;models&lt;span&gt;/&lt;/span&gt;auth0_user&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; and make this change to the &lt;code&gt;id&lt;/code&gt; arrow function: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/models/auth0_user.dart&lt;/span&gt;&#xA;&#xA;String &lt;span&gt;get&lt;/span&gt; id &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; sub&lt;span&gt;.&lt;/span&gt;&lt;span&gt;split&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;join&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next and final step is to create &lt;code&gt;StreamChat&lt;/code&gt;, the root widget of the application.&lt;/p&gt;&lt;p&gt;🛠 Open the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;main&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file, locate the call to  &lt;code&gt;MaterialApp&lt;/code&gt;, and add the &lt;code&gt;builder&lt;/code&gt; parameter so that it returns a &lt;code&gt;StreamChat&lt;/code&gt; object:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/main.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;MaterialApp&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  debugShowCheckedModeBanner&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  themeMode&lt;span&gt;:&lt;/span&gt; ThemeMode&lt;span&gt;.&lt;/span&gt;system&lt;span&gt;,&lt;/span&gt;&#xA;  home&lt;span&gt;:&lt;/span&gt; &lt;span&gt;HomeScreen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  navigatorKey&lt;span&gt;:&lt;/span&gt; CoffeeRouter&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;navigatorKey&lt;span&gt;,&lt;/span&gt;&#xA;  theme&lt;span&gt;:&lt;/span&gt; &lt;span&gt;getTheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  builder&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;,&lt;/span&gt; child&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;StreamChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      child&lt;span&gt;:&lt;/span&gt; child&lt;span&gt;,&lt;/span&gt;&#xA;      client&lt;span&gt;:&lt;/span&gt; ChatService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;client&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;StreamChat&lt;/code&gt; object returned by &lt;code&gt;builder&lt;/code&gt; is an inherited widget and aims to provide APIs for advanced customization. It requires a child and a client that you have initialized in the &lt;code&gt;ChatService&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;That&amp;#39;s it — your chat is ready! Restart the app, and let&amp;#39;s continue to add the support screen and community screen using the prebuilt &lt;code&gt;StreamChat&lt;/code&gt; UI widget to leverage the chat service that you added.&lt;/p&gt;&lt;h2 id=&#34;Implement-the-Support-Chat-Screen&#34;&gt;Implement the Support Chat Screen&lt;/h2&gt;&lt;p&gt;Typically, a support chat consists of a user and an agent interacting in a channel created for both. Hence the support chat screen will do the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Create a private channel for the current user and one of the available agents&lt;/li&gt;&lt;li&gt;Listen to the channel for updates&lt;/li&gt;&lt;li&gt;Load existing chat content, if any&lt;/li&gt;&lt;li&gt;Upon chat completion, archive the chat history&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Let&amp;#39;s create a &lt;code&gt;&lt;span&gt;createSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method in the &lt;code&gt;ChatService&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;🛠 First, add the following instance variable to the start of the &lt;code&gt;ChatService&lt;/code&gt; class:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/chat_service.dart&lt;/span&gt;&#xA;&#xA;String&lt;span&gt;?&lt;/span&gt; _currentChannelId&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Then add the &lt;code&gt;&lt;span&gt;createSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to the &lt;code&gt;ChatService&lt;/code&gt; class:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/chat_service.dart&lt;/span&gt;&#xA;&#xA;Future&lt;span&gt;&amp;lt;&lt;/span&gt;Channel&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;createSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// To be replaced with EmployeeRole via Auth0&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String employeeId &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;rootEmployeeId&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; channel &lt;span&gt;=&lt;/span&gt; client&lt;span&gt;.&lt;/span&gt;&lt;span&gt;channel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#39;support&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    id&lt;span&gt;:&lt;/span&gt; _currentChannelId&lt;span&gt;,&lt;/span&gt;&#xA;    extraData&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;MJCoffee Support&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;members&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;        employeeId&lt;span&gt;,&lt;/span&gt;&#xA;        client&lt;span&gt;.&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;await&lt;/span&gt; channel&lt;span&gt;.&lt;/span&gt;&lt;span&gt;watch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  _currentChannelId &lt;span&gt;=&lt;/span&gt; channel&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; channel&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There’s a lot going on here. Let&amp;#39;s review it step by step.&lt;/p&gt;&lt;p&gt;First, to create a support chat channel for the current user, you need to know the ID of an available agent. In this tutorial, you will eventually learn how to create an API to get an available agent via Auth0 based on their roles. However, we’ll skip this part for now.&lt;/p&gt;&lt;p&gt;Second, you need to create a channel with a specific type. In this case, the type will be &lt;code&gt;support&lt;/code&gt;. Stream provides default types for channels; however, you can define your types as needed. To create a channel type, navigate to the Stream dashboard, go to your app in the Chat overview tab, and add your channel types to the list.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6W33zODRlOuxetIMT5FFX5/c3b4894e13324aa8db4822545716248e/streamchat_type.png&#34; alt=&#34;Stream channel types.&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2Waym3vZQnTvKNejptTCJp/64b96fb65f65f5b1ceae5bf485eb2856/chat_type.png&#34; alt=&#34;New stream channel type.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Next, you can pass an existing channel ID to reconnect to a channel or leave it &lt;code&gt;&lt;span&gt;null&lt;/span&gt;&lt;/code&gt; to create a new channel. Stream will automatically assign an ID to new channels. Since this support chat is private and exclusive to one agent and a current user, you may add IDs to &lt;code&gt;members&lt;/code&gt; in the &lt;code&gt;extraData&lt;/code&gt; map.&lt;/p&gt;&lt;p&gt;Then, call the &lt;code&gt;&lt;span&gt;watch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method on the channel to create and listen to the events on that channel. The &lt;code&gt;&lt;span&gt;watch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method is a &lt;code&gt;Future&lt;/code&gt; and will perform its tasks asynchronously. You can assign the channel ID to the &lt;code&gt;_currentChannelId&lt;/code&gt; private instance variable so that you can reconnect to the channel when needed.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Later on, it might be a good idea to store the channel ID in an external database or local secure storage in the app so that it persists between user sessions.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Finally, the method returns the newly created channel.&lt;/p&gt;&lt;p&gt;With the &lt;code&gt;&lt;span&gt;createSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method implemented, you can now implement the chat UI.&lt;/p&gt;&lt;p&gt;🛠 Open the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;screens&lt;span&gt;/&lt;/span&gt;support&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file, where you’ll find the &lt;code&gt;SupportChatScreen&lt;/code&gt; class. Update the file’s contents to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/support.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:flutter/material.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:flutter/widgets.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SupportChatScreen&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;StatefulWidget&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  _SupportChatScreenState &lt;span&gt;createState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;_SupportChatScreenState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;_SupportChatScreenState&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;State&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;SupportChatScreen&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  Auth0User&lt;span&gt;?&lt;/span&gt; profile &lt;span&gt;=&lt;/span&gt; AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;profile&lt;span&gt;;&lt;/span&gt;&#xA;  Channel&lt;span&gt;?&lt;/span&gt; channel&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  &lt;span&gt;void&lt;/span&gt; &lt;span&gt;initState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;initState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;createChannel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;createChannel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;final&lt;/span&gt; _channel &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; ChatService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;createSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      channel &lt;span&gt;=&lt;/span&gt; _channel&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  Widget &lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;BuildContext context&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; channel &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&#xA;        &lt;span&gt;?&lt;/span&gt; &lt;span&gt;Center&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Text&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;You are in the queue!, please wait...&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;:&lt;/span&gt; &lt;span&gt;Scaffold&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            body&lt;span&gt;:&lt;/span&gt; &lt;span&gt;SafeArea&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;              child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;StreamChannel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                channel&lt;span&gt;:&lt;/span&gt; channel&lt;span&gt;!&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Column&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                  children&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;Widget&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;                    &lt;span&gt;Expanded&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                      child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;MessageListView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                    &lt;span&gt;MessageInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                      disableAttachments&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                      sendButtonLocation&lt;span&gt;:&lt;/span&gt; SendButtonLocation&lt;span&gt;.&lt;/span&gt;inside&lt;span&gt;,&lt;/span&gt;&#xA;                      actionsLocation&lt;span&gt;:&lt;/span&gt; ActionsLocation&lt;span&gt;.&lt;/span&gt;leftInside&lt;span&gt;,&lt;/span&gt;&#xA;                      showCommandsButton&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;              &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here’s what’s happening in this UI implementation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;This support chat screen, &lt;code&gt;SupportChatScreen&lt;/code&gt;, is a &lt;code&gt;StatefulWidget&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;profile&lt;/code&gt; variable is the user profile from &lt;code&gt;AuthService&lt;/code&gt; that you created in the previous section.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;channel&lt;/code&gt; variable is used to detect if a support channel has been created.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;&lt;span&gt;createChannel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method calls &lt;code&gt;ChatService&lt;/code&gt;’s &lt;code&gt;&lt;span&gt;createSupportChat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method, which you recently defined.&lt;/li&gt;&lt;li&gt;Once the channel is ready, &lt;code&gt;&lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; is called, which renders the chat UI.&lt;/li&gt;&lt;li&gt;In the &lt;code&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method, you can show a message while the channel is being created or return a &lt;code&gt;StreamChannel&lt;/code&gt; object, which provides information about the channel to the widget tree and passes a reference to the &lt;code&gt;channel&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Typically, a child of &lt;code&gt;SupportChatScreen&lt;/code&gt; should be a &lt;code&gt;Column&lt;/code&gt; that includes &lt;code&gt;&lt;span&gt;MessageListView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and is wrapped by &lt;code&gt;Expanded&lt;/code&gt; to ensure it takes up all the available space.&lt;/li&gt;&lt;li&gt;You can highly customize &lt;code&gt;&lt;span&gt;MessageInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; in a number of ways, such as disabling the file attachment or command buttons. You’ll do this later by using Auth0’s permissions and roles to determine which buttons should be enabled or disabled, so stay tuned.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Congratulations — you’ve implemented the support chat screen! Let&amp;#39;s move on to the community view.&lt;/p&gt;&lt;p&gt;It&amp;#39;s time to make a screen to allow agents to see all the messages they receive via support. Let&amp;#39;s call this screen &lt;code&gt;CommunityScreen&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;🛠 Open the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;screens&lt;span&gt;/&lt;/span&gt;community&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file, and update the &lt;code&gt;CommunityScreen&lt;/code&gt; class within to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/community.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CommunityScreen&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;StatelessWidget&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; userId &lt;span&gt;=&lt;/span&gt; ChatService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;client&lt;span&gt;.&lt;/span&gt;state&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;as&lt;/span&gt; Object&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  Widget &lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;BuildContext context&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Scaffold&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      body&lt;span&gt;:&lt;/span&gt; &lt;span&gt;ChannelsBloc&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;ChannelListView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          filter&lt;span&gt;:&lt;/span&gt; Filter&lt;span&gt;.&lt;/span&gt;&lt;span&gt;in_&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#39;members&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;[&lt;/span&gt;userId&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;// current user is employee (role/permission)&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          sort&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;SortOption&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;last_message_at&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          pagination&lt;span&gt;:&lt;/span&gt; &lt;span&gt;PaginationParams&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            limit&lt;span&gt;:&lt;/span&gt; &lt;span&gt;30&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          channelWidget&lt;span&gt;:&lt;/span&gt; &lt;span&gt;ChannelPage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ChannelPage&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;StatelessWidget&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  Widget &lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;BuildContext context&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Scaffold&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      appBar&lt;span&gt;:&lt;/span&gt; &lt;span&gt;ChannelHeader&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      body&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Column&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        children&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;Widget&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;          &lt;span&gt;Expanded&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;MessageListView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;MessageInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The logic behind this page is relatively simple. You want to load all channels seen by the current user, an agent in this context, then open each channel to answer its respective customer.&lt;/p&gt;&lt;p&gt;&lt;code&gt;ChannelsBloc&lt;/code&gt; manages a list of channels with pagination, re-ordering, querying, and other operations associated with channels together with &lt;code&gt;&lt;span&gt;ChannelListView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;. The &lt;code&gt;Bloc&lt;/code&gt; is not related to the &lt;code&gt;Bloc&lt;/code&gt; package or pattern; this is just a coincidence.&lt;/p&gt;&lt;p&gt;You need to filter all channels by the membership of the current user. If necessary, do custom sorting and pagination too.&lt;/p&gt;&lt;p&gt;Lastly, you need to ensure that the &lt;code&gt;&lt;span&gt;ChannelPage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; is also passed to correctly as it makes channels routable. The &lt;code&gt;&lt;span&gt;ChannelPage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; is nothing fancy — just a straightforward implementation of what you have done already in &lt;code&gt;SupportScreen&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Perfect! You have created all screens for the app. However, we still need to implement permissions and roles to load each screen and functionalities based on what we can define and receive via Auth0 tokens. But if you are curious, you can simply add another tab to the &lt;code&gt;MenuScreen&lt;/code&gt; and load these pages (although you might not see any channels yet).&lt;/p&gt;&lt;p&gt;🛠 In the file &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;screens&lt;span&gt;/&lt;/span&gt;menu&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;, locate &lt;code&gt;final List&lt;span&gt;&amp;lt;&lt;/span&gt;Widget&lt;span&gt;&amp;gt;&lt;/span&gt; tabs&lt;/code&gt; in &lt;code&gt;MenuScreenState&lt;/code&gt; and update it to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/menu.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; List&lt;span&gt;&amp;lt;&lt;/span&gt;Widget&lt;span&gt;&amp;gt;&lt;/span&gt; tabs &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;MenuList&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;coffees&lt;span&gt;:&lt;/span&gt; coffees&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;SupportChatScreen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;ProfileScreen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 In the same file, add a new icon to &lt;code&gt;bottomNavigationBar&lt;/code&gt; by replacing the &lt;code&gt;items&lt;/code&gt; parameter with the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/menu.dart&lt;/span&gt;&#xA;&#xA;items&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;BottomNavigationBarItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;  &lt;span&gt;BottomNavigationBarItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    icon&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Icon&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Icons&lt;span&gt;.&lt;/span&gt;list_alt&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    label&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Menu&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;BottomNavigationBarItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    icon&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Icon&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Icons&lt;span&gt;.&lt;/span&gt;support&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    label&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Support&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;BottomNavigationBarItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    icon&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Icon&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Icons&lt;span&gt;.&lt;/span&gt;person&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    label&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Profile&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Before you can test the chat, you should temporarily add the &lt;code&gt;rootEmployeeId&lt;/code&gt; user ID that you defined in &lt;code&gt;createSupportChat&lt;/code&gt;  in the Stream dashboard.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2RqndsI9Xp4CR35fYyRRSG/4832ae874ee2b4622ae4282560d1f396/chat_custom_user.png&#34; alt=&#34;Custom user in the chat.&#34;/&gt;&lt;/p&gt;&lt;p&gt;You can skip this step, but it’s still a good idea to have a root support user in case of a specific agent is unavailable. That way, the user with the absent agent can still get support.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/qFcfGuNTipVpuEWJtAfM0/312b8561bbbbc47ed9a97342dbd46764/custom_user_root.png&#34; alt=&#34;Custom user in the chat.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Run your app in the emulator, go to the support chat screen, and try it out!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you encounter an error regarding an outdated Kotlin version on the Android emulator, open &lt;code&gt;android&lt;span&gt;/&lt;/span&gt;app&lt;span&gt;/&lt;/span&gt;build&lt;span&gt;.&lt;/span&gt;gradle&lt;/code&gt;, and search for &lt;code&gt;ext&lt;span&gt;.&lt;/span&gt;kotlin_version&lt;/code&gt;. Change that line to &lt;code&gt;ext&lt;span&gt;.&lt;/span&gt;kotlin_version &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;1.5.10&amp;#39;&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Auth0-Actions-and-Generating-Stream-User-Production-Tokens&#34;&gt;Auth0 Actions and Generating Stream User Production Tokens&lt;/h2&gt;&lt;p&gt;Until now, for each user, you have been using a token generated for the development environment. In order to release your app, the app will have to request production tokens.&lt;/p&gt;&lt;p&gt;As I mentioned earlier, retrieving production tokens is usually done by your backend server. Auth0 can act as this service and retrieve those tokens for you, thanks to a potent tool called &lt;em&gt;Auth0 Actions&lt;/em&gt;. &lt;/p&gt;&lt;p&gt;You can use Auth0 Actions to handle your application logic and fit it into a particular flow. They are secure, tenant-specific, versioned functions written in Node.js that execute at specific points when Auth0 is doing its work. This allows you to customize and extend Auth0&amp;#39;s capabilities with custom logic. Think of Actions as serverless functions, such as AWS Lambda or Google Cloud Functions.&lt;/p&gt;&lt;p&gt;You can determine when and where to execute an Action in the Auth0 runtime environment. Your flows might be:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Login:&lt;/strong&gt; Executed after a user logs in and when refresh tokens are issued.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Machine to Machine:&lt;/strong&gt; Executed after a user logs in after the Client Credentials hook.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Pre-User Registration:&lt;/strong&gt; Executed before a user is added to the database or passwordless connections.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Post-User Registration:&lt;/strong&gt; Executed after a user is added to a database or passwordless connections. The execution is asynchronous and will not affect the transaction.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Post-Change Password:&lt;/strong&gt; Executed after a password is changed for a database connection user.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Send Phone Message:&lt;/strong&gt; Executed when using a custom MFA provider.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7fpne9yUGBpXYzAT5km5l5/83ab5c891c02495d53a9d2661e10083e/actions_flow.png&#34; alt=&#34;Actions flow&#34;/&gt;&lt;/p&gt;&lt;p&gt;You’ve probably already thought of several use cases for each of these scenarios.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s create a custom action to exchange Stream production user tokens for users after they logged in and hooked it up to the ID token and user metadata received by the Flutter app.&lt;/p&gt;&lt;p&gt;First, you need to create a new action. Go to the Custom Actions menu under Actions in Auth0 Dashboard and hit the &amp;#34;Create&amp;#34; button.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/oR6jv9IA92twMdtRrAvIz/e414cac9a740c5fdd5eaab85a7795ebb/create_action.png&#34; alt=&#34;Create action&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 You should provide a name for the action, select a trigger from the list, and then create it. For the purpose of generating a chat token and attaching it to &lt;code&gt;idToken&lt;/code&gt;, select the &lt;strong&gt;Login / Post Login&lt;/strong&gt; trigger, which allows you to use the action in the login flow.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5wbUmlcD0qq7FrgBCiURrS/a95bb544b5d4fdaa4eac2a87b5fd9361/create_action_trigger.png&#34; alt=&#34;Create action trigger&#34;/&gt;&lt;/p&gt;&lt;p&gt;You&amp;#39;ll see an editor where you can write your logic. You can run the code, try it out before deploying it, add your secrets to the environment instead of putting it in the application code, and even add almost all public NPM packages!&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/46DWkLU05SPD1kTE6i5oGF/54f46b0d30cd13bf141b4beb28a2445e/action_module.png&#34; alt=&#34; action module&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Start by adding the &lt;code&gt;getstream&lt;/code&gt; npm package. At the time of writing, the current version of the package is &lt;code&gt;&lt;span&gt;7.2&lt;/span&gt;&lt;span&gt;.10&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;🛠 Go back to the Stream dashboard, copy your secret and client keys...&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5aLtEOAjfXguB6BQlI8fmB/b55f3fd1d0c7c44c91c760c5850d8457/chat_app_secret.png&#34; alt=&#34;chat app secret&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 ...and then add them with the name of &lt;code&gt;&lt;span&gt;GET_STREAM_CHAT_SECRET_KEY&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;GET_STREAM_CHAT_CLIENT_KEY&lt;/span&gt;&lt;/code&gt;, respectively, to this function in Auth0.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4JgG1WLTfWa2RTlkzAkV8j/1704cdf6b2e7abfd23e611171440dce5/action_secrets.png&#34; alt=&#34; action secrets&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Lastly, you can import &lt;code&gt;getStream&lt;/code&gt; and connect and create a user token bypassing &lt;code&gt;user_id&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Javascript&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; stream &lt;span&gt;=&lt;/span&gt; &lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;getstream&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;exports&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onExecutePostLogin&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;event&lt;span&gt;,&lt;/span&gt; api&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; getStreamClient &lt;span&gt;=&lt;/span&gt; stream&lt;span&gt;.&lt;/span&gt;&lt;span&gt;connect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    event&lt;span&gt;.&lt;/span&gt;secrets&lt;span&gt;.&lt;/span&gt;&lt;span&gt;GET_STREAM_CHAT_CLIENT_KEY&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    event&lt;span&gt;.&lt;/span&gt;secrets&lt;span&gt;.&lt;/span&gt;&lt;span&gt;GET_STREAM_CHAT_SECRET_KEY&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; getStreamToken &lt;span&gt;=&lt;/span&gt; getStreamClient&lt;span&gt;.&lt;/span&gt;&lt;span&gt;createUserToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;event&lt;span&gt;.&lt;/span&gt;user&lt;span&gt;.&lt;/span&gt;user_id&lt;span&gt;.&lt;/span&gt;&lt;span&gt;split&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;join&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span&gt;// getstream does not support `|` in the ID yet, so we have to omit it.&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// api.user.setAppMetadata(&amp;#34;stream_chat_token&amp;#34;, getStreamToken);&lt;/span&gt;&#xA;  &lt;span&gt;// api.user.setUserMetadata(&amp;#34;stream_chat_token&amp;#34;, getStreamToken);&lt;/span&gt;&#xA;  &lt;span&gt;const&lt;/span&gt; namespace &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;https://getstream.mjcoffee.app&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;event&lt;span&gt;.&lt;/span&gt;authorization&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    api&lt;span&gt;.&lt;/span&gt;idToken&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setCustomClaim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;namespace&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/user_token&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; getStreamToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    api&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setCustomClaim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;namespace&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/user_token&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; getStreamToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s explore the implementation above. &lt;/p&gt;&lt;p&gt;Once you get the token, you can set a user or app metadata named &lt;code&gt;stream_chat_token&lt;/code&gt; with the token value. &lt;/p&gt;&lt;p&gt;Alternately, you can set a custom claim on &lt;code&gt;idToken&lt;/code&gt; and &lt;code&gt;accessToken&lt;/code&gt;. A custom claim must take the form of a URI, which means that &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;getstream&lt;span&gt;.&lt;/span&gt;mjcoffee&lt;span&gt;.&lt;/span&gt;app&lt;span&gt;/&lt;/span&gt;user_token&lt;/code&gt; is an acceptable name for a claim, while &lt;code&gt;user_token&lt;/code&gt; alone is not.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; In Stream, only the characters &lt;code&gt;a&lt;/code&gt; through &lt;code&gt;z&lt;/code&gt;, &lt;code&gt;&lt;span&gt;0&lt;/span&gt;&lt;/code&gt; through &lt;code&gt;&lt;span&gt;9&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, and &lt;code&gt;&lt;span&gt;-&lt;/span&gt;&lt;/code&gt; are allowed in the user ID. Therefore, we shouldn’t use the &lt;code&gt;&lt;span&gt;|&lt;/span&gt;&lt;/code&gt; for &lt;code&gt;user_id&lt;/code&gt; in Auth0.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Let&amp;#39;s run and test this function before we deploy. Click on the play icon and run with the example event, which is automatically generated for you.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1b3pOpx8O1g4MBOqmhI6ix/88e2335e0b2bb8a3730dba6ebcc57e44/action_run.png&#34; alt=&#34; action run&#34;/&gt;&lt;/p&gt;&lt;p&gt;If everything goes well, you’ll get a generated token in JWT format. Its payload will contain &lt;code&gt;user_id&lt;/code&gt;, and it will be signed with your secret key by the Stream servers.&lt;/p&gt;&lt;p&gt;Here’s an example of what you’ll get:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// response in Action run&lt;/span&gt;&#xA;&#xA;&lt;span&gt;[&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;https://getstream.mjcoffee.app/user_token&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    target&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;idToken&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    type&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;SetCustomClaim&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    value&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYXV0aDA1ZjdjOGVjN2MzM2M2YzAwNGJiYWZlODIifQ.7ZIyr27skgrGm6REEz5o-WvoCArNblDnwiOdxXW4dp8&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;https://getstream.mjcoffee.app/user_token&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    target&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;accessToken&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    type&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;SetCustomClaim&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    value&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYXV0aDA1ZjdjOGVjN2MzM2M2YzAwNGJiYWZlODIifQ.7ZIyr27skgrGm6REEz5o-WvoCArNblDnwiOdxXW4dp8&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/Ax6b4nRMkHyjvfGBK47bV/d15969eb0f4740dfe1057372e04c4437/jwt_stream.png&#34; alt=&#34;action run&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Next, go back to &lt;strong&gt;Flow&lt;/strong&gt;, select &lt;strong&gt;Login&lt;/strong&gt;, and drag your newly-created custom action to the flow and apply the changes:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5oYj9z0hIawXOi3dSW8dEZ/4684098fb3b108dd0cc4f32e01aa4e59/login_flow.png&#34; alt=&#34; action run&#34;/&gt;&lt;/p&gt;&lt;p&gt;For the last step, the Flutter app needs to read this token and add it to the user model. That way, when you connect a user to Stream’s chat, instead of the development tokens you’ve been using, you can replace it with the token that Auth0 received.&lt;/p&gt;&lt;p&gt;🛠 Since it&amp;#39;s a custom claim, it will show up in &lt;code&gt;idToken&lt;/code&gt;; thus you’ll need to modify your &lt;code&gt;Auth0IdToken&lt;/code&gt; model class (located in &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;models&lt;span&gt;/&lt;/span&gt;auth0_id_token&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;)...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/models/auth0_id_token.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@JsonSerializable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Auth0IdToken&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;Auth0IdToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;  &#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;streamChatUserToken&lt;span&gt;,&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;  &#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;https://getstream.mjcoffee.app/user_token&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String streamChatUserToken&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Then do the same with your &lt;code&gt;Auth0User&lt;/code&gt; class (located in &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;models&lt;span&gt;/&lt;/span&gt;auth0_user&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;), as it will be part of the user details:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// m/lib/models/auth0_user.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@JsonSerializable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Auth0User&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;Auth0User&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;      required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;streamChatUserToken&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;https://getstream.mjcoffee.app/user_token&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String streamChatUserToken&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Once you are done, run the &lt;code&gt;build_runner&lt;/code&gt; command to generate models again.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;flutter pub run build_runner build --delete-conflicting-outputs&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Locate &lt;code&gt;connectUser&lt;/code&gt; in the &lt;code&gt;ChatService&lt;/code&gt; class (located in &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;services&lt;span&gt;/&lt;/span&gt;chat_service&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;) and replace &lt;code&gt;&lt;span&gt;devToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; with the newly-received token on the user object.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/chat_service.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;await&lt;/span&gt; client&lt;span&gt;.&lt;/span&gt;&lt;span&gt;connectUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  &lt;span&gt;User&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    id&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;,&lt;/span&gt;&#xA;    extraData&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;image&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;picture&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; user&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;// client.devToken(user.id).rawValue,&lt;/span&gt;&#xA;    user&lt;span&gt;.&lt;/span&gt;streamChatUserToken&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well done! Log out of the app, restart it. and log in again. This time, you&amp;#39;ll receive a production-ready user token. When you go to the support chat screen, everything should work as expected.&lt;/p&gt;&lt;h2 id=&#34;Looking-Ahead&#34;&gt;Looking Ahead&lt;/h2&gt;&lt;p&gt;Now that the app has a real-time chat is ready with a proper authentication flow, you can move on to the next section to focus on authorization, roles, and permissions.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-3-adding-real-time-chat-to-the-app/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.</summary>
  </entry>
  <entry>
    <title>Flutter Authentication and Authorization with Auth0, Part 2: Refresh Tokens, Social Logins, and More</title>
    <updated>2021-10-04T17:12:00Z</updated>
    <id>tag:auth0.com,2021-10-04:/blog/flutter-authentication-authorization-with-auth0-part-2-refresh-tokens-social-logins-more/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;In the exercise from the previous section, you added Auth0 authentication to an existing Flutter app. This added a username/password authentication flow to the app. You also gave the app the ability to request and submit refresh tokens, which enhance the user experience by not requiring the user to authenticate every time they use the app.&lt;/p&gt;&lt;p&gt;This section will expand on the app by examining some useful Auth0 features:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Refresh token rotation&lt;/li&gt;&lt;li&gt;Social logins&lt;/li&gt;&lt;li&gt;Managing your Auth0 account&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Look for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Add-Refresh-Token-Rotation&#34;&gt;Add Refresh Token Rotation&lt;/h2&gt;&lt;p&gt;When the app makes an authentication request to Auth0’s authentication server, it includes the &lt;code&gt;offline_access&lt;/code&gt; scope. This causes the authentication server to issue a refresh token, which the app can use to re-authenticate without requiring the user to log in again. The app stores this token in the device’s secure storage.&lt;/p&gt;&lt;p&gt;While this enhances the app’s user experience, it also introduces risk. The refresh token is long-lived, and the app could use it as a “lifetime pass” to endlessly request new access tokens and keep the user logged in forever.&lt;/p&gt;&lt;p&gt;I highly recommend taking advantage of &lt;em&gt;Refresh Token Rotation&lt;/em&gt; and &lt;em&gt;Automatic Reuse Detection&lt;/em&gt; to help mitigate this risk. With these features enabled, each refresh token can be used only once. When the app exchanges its refresh token for a new access token, the authentication server also returns a new refresh token and invalidates the old one. &lt;/p&gt;&lt;p&gt;Let’s enable these features!&lt;/p&gt;&lt;p&gt;🛠 Navigate to the &lt;strong&gt;Applications&lt;/strong&gt; section of your Auth0 dashboard, select the &lt;strong&gt;MJ Coffee&lt;/strong&gt; application, and then select its &lt;strong&gt;Settings&lt;/strong&gt; tab. Scroll down the page to the &lt;strong&gt;Refresh Token Rotation&lt;/strong&gt; section and turn on the &lt;strong&gt;Rotation&lt;/strong&gt; and &lt;strong&gt;Absolute Expiration&lt;/strong&gt; options:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6EizPZZnkGjxoAOle1Q8eL/e06c99f4a49413572736bbf0f470436c/rotation_and_absolute_expiration.png&#34; alt=&#34;Turn on the “Rotation” and “Absolute Expiration” options.&#34;/&gt;&lt;/p&gt;&lt;p&gt;It is recommended that you issue a refresh token that expires after a preset lifetime. The refresh token’s lifetime can be extended each time one is used to get a new access token or access token/refresh token pair.&lt;/p&gt;&lt;p&gt;There are two options for token lifetimes, and they can be set independently of each other:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Absolute Lifetime:&lt;/strong&gt; Enabling &lt;strong&gt;Absolute Expiration&lt;/strong&gt; sets a specified &lt;em&gt;absolute lifetime&lt;/em&gt; for the application’s refresh tokens. Refresh tokens can be exchanged for new access tokens during this lifetime. Once the token’s age goes past its lifetime, the user will need to re-authenticate in order to get a new access token. If &lt;strong&gt;Absolute Expiration&lt;/strong&gt; is disabled, the refresh token has an indefinite absolute lifetime.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Inactivity Lifetime:&lt;/strong&gt; Enabling &lt;strong&gt;Inactivity Expiration&lt;/strong&gt; specified &lt;em&gt;inactivity lifetime&lt;/em&gt; for the application’s refresh tokens. Refresh tokens can be exchanged for new access tokens if the user is active in the application during this lifetime. If the user is inactive in the application for a period longer than the inactivity lifetime, they will need to re-authenticate in order to get a new access token.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 Scroll to the bottom of the page and click the &lt;strong&gt;Save Changes&lt;/strong&gt; button:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7KsLW4adJ6PNIPAI12al4g/f2c0e8abf6d7377595cfb7df11493e67/save_changes.png&#34; alt=&#34;The “Save Changes” button. The user is directed to click it.&#34;/&gt;&lt;/p&gt;&lt;p&gt;These days, it&amp;#39;s pretty common to have login methods beyond the standard username/password combination. These include logging in with social media account, which will significantly enhance your users’ experiences.&lt;/p&gt;&lt;p&gt;Implementing these additional login methods and adding them to your authorization server is time-consuming and will come with many considerations and risks. &lt;/p&gt;&lt;p&gt;Luckily, Auth0 provides lots of integration with well-known third parties’ authentication systems, and even allows you to write your custom connections. Let&amp;#39;s add connections to both Google’s and Apple’s authentication systems.&lt;/p&gt;&lt;p&gt;🛠 In the Auth0 dashboard, select &lt;strong&gt;Authentication&lt;/strong&gt; in the left column menu, then select &lt;strong&gt;Social&lt;/strong&gt;. This takes you to the &lt;strong&gt;Social Connections&lt;/strong&gt; page, where you should click the &lt;strong&gt;Create Social Connection&lt;/strong&gt; button:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/61w1eXrbY7bGOpNo6ODbaU/da810c63bacd28cabf71e6dee4baa349/create_social_connection.png&#34; alt=&#34;The steps to create a new social connection in Auth0&#34;/&gt;&lt;/p&gt;&lt;p&gt;You will be taken to the &lt;strong&gt;New Social Connection&lt;/strong&gt; page, which has a list of social login providers that integrate with Auth0. &lt;/p&gt;&lt;p&gt;🛠 Select &lt;strong&gt;Google&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2YdUxIkwmCTcc9QFlo584q/22f7fd0bf4bc1c93c4ebc555e21009f8/select_google.png&#34; alt=&#34;Selecting Google from all the available social connections&#34;/&gt;&lt;/p&gt;&lt;p&gt;You will now be on the  &lt;strong&gt;New Google / Gmail Social Connection&lt;/strong&gt; page, which tells you what kind of user information is accessed by Google social login.&lt;/p&gt;&lt;p&gt;🛠 Click &lt;strong&gt;Continue&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2SQwtF0vqtXJucnGbE3DNS/baf5bd9d7103a6ecbd59b879bbe2aaf4/click_continue.png&#34; alt=&#34;Initial page for creating a new Google/Gmail social connection&#34;/&gt;&lt;/p&gt;&lt;p&gt;A new page with a number of fields will appear; this is the connection’s &lt;strong&gt;Settings&lt;/strong&gt; tab. &lt;/p&gt;&lt;p&gt;As long as you’re working in a development environment, you only need to fill the &lt;strong&gt;Name&lt;/strong&gt; field (which provides a name for this connection) and leave all the other fields empty. You can always use the default value in the &lt;strong&gt;Name&lt;/strong&gt; field:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7Jzsn4ryILOOdACN2urlSo/fdaa205ef09352c0b9aba0acbd592977/new_google_gmail_social_connection.png&#34; alt=&#34;New Google/Gmail social connection&#34;/&gt;&lt;/p&gt;&lt;p&gt;However, production apps require you to provide a &lt;strong&gt;Client ID&lt;/strong&gt; and &lt;strong&gt;Client Secret&lt;/strong&gt; (&lt;a href=&#34;https://auth0.com/docs/connections/social/google&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;doc&lt;/a&gt;) and specify the &lt;strong&gt;Allowed Mobile Client IDs&lt;/strong&gt;. These topics will be covered in another video or article.&lt;/p&gt;&lt;p&gt;🛠 Create the Google/Gmail connection by scrolling to the bottom of the page and clicking &lt;strong&gt;Create&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4S8AJUaj4xehVwVxhNDt5X/69eb88b8bec557d310d0e9d678fe9b7e/click_create.png&#34; alt=&#34;Creating the Google/Gmail connection&#34;/&gt;&lt;/p&gt;&lt;p&gt;This will create the connection, and you’ll be taken to its &lt;strong&gt;Applications&lt;/strong&gt; tab. You’ll see a list of your applications, which will allow you to enable the Google/Gmail connection for any of them. Enable the connection for the &lt;em&gt;MJ Coffee&lt;/em&gt; application:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/681u1RRcha4ABJJ5GRZivy/c7eea90ca4e19ec5ab3b333caa47e5ba/google-oauth2_applications_tab.png&#34; alt=&#34;The Google/OAuth2 applications tab&#34;/&gt;&lt;/p&gt;&lt;p&gt;You may also set more permissions that the end-user will need to approve during authorization. These permissions depend on your application and what you want to do on behalf of the user. The &lt;em&gt;MJ Coffee&lt;/em&gt; app doesn’t need any extra permissions beyond the basic and extended profile.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/13CvLX8tQUTuqU6jpZ6K94/a0eaac13b8fc83fc11b3ca3f6651ebd9/google_permissions.png&#34; alt=&#34;Google Permission&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Make sure you sync user profile attributes at each login and hit the &lt;strong&gt;Save&lt;/strong&gt; button.&lt;/p&gt;&lt;p&gt;🛠 Once again in the Auth0 dashboard, select &lt;strong&gt;Authentication&lt;/strong&gt; in the left column menu, then select &lt;strong&gt;Social&lt;/strong&gt;. This takes you to the &lt;strong&gt;Social Connections&lt;/strong&gt; page, where you should click the &lt;strong&gt;Create Social Connection&lt;/strong&gt; button:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1sohaZxDHuq8X8ZvT5nhvE/d2b7a7e2647708327f8fc6971ddb43a9/create_connection.png&#34; alt=&#34;The steps to create a new social connection in Auth0&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 This time, select &lt;strong&gt;Apple&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3JAgbtDSNOsfYrjxkE1wCI/e51d80f7418706c29cd6e9dc06b93719/select_apple.png&#34; alt=&#34;Selecting Apple from all the available social connections&#34;/&gt;&lt;/p&gt;&lt;p&gt;You will now be on the  &lt;strong&gt;New Apple Social Connection&lt;/strong&gt; page, which tells you what kind of user information is accessed by Apple social login.&lt;/p&gt;&lt;p&gt;🛠 Click &lt;strong&gt;Continue&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3zt2ntLwoHwp6bldLmOOsD/8db3e7f5c057d5782c7202b748013420/click_connect_-_apple.png&#34; alt=&#34;Continue&#34;/&gt;&lt;/p&gt;&lt;p&gt;As long as you’re working in a development environment, you can leave the &lt;strong&gt;Client ID&lt;/strong&gt; and &lt;strong&gt;Client Secret Signing Key&lt;/strong&gt; fields empty. You &lt;em&gt;will&lt;/em&gt; need proper keys for those fields when the app goes to production; &lt;a href=&#34;https://auth0.com/docs/connections/apple-siwa/set-up-apple&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this document covers that topic in more detail&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;Apple Team ID&lt;/strong&gt; and &lt;strong&gt;Key ID&lt;/strong&gt; values are required:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2qNvT5zkxB1TY06ywkH5Re/7c46fa1399743de9e7bb05d1d804fab0/apple_dev.png&#34; alt=&#34;Google Permission&#34;/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;To get your Apple Team ID, you need an Apple Developer Account.&lt;/li&gt;&lt;li&gt;To get a Key ID for your app, you need to register that app using your Apple Developer Account.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 Sign in to your Apple Developer Account, and go to the &lt;strong&gt;Membership&lt;/strong&gt; page and make a note of your Team ID.&lt;/p&gt;&lt;p&gt;🛠 If you have a registered app, you can skip the following steps and jump to the list of tasks for creating a service ID. Otherwise, follow the steps below:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;In the Apple Developer Portal, go to &lt;strong&gt;Certificates, IDs, &amp;amp; Profiles &amp;gt; Identifiers&lt;/strong&gt; and click the blue “plus” icon next to &lt;strong&gt;Identifiers&lt;/strong&gt; to create a new App ID.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;App IDs&lt;/strong&gt; as the identifier type and click &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Provide a description and a Bundle ID in reverse-domain name format (e.g.: &lt;code&gt;com&lt;span&gt;.&lt;/span&gt;mydomain&lt;span&gt;.&lt;/span&gt;mjcoffee&lt;/code&gt;).&lt;/li&gt;&lt;li&gt;Scroll down and check &lt;strong&gt;Sign In with Apple&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Click &lt;strong&gt;Continue&lt;/strong&gt;, and then click &lt;strong&gt;Register&lt;/strong&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 Once the app is registered, it’s time to create a service ID:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Return to the &lt;strong&gt;Certificates, IDs, &amp;amp; Profiles&lt;/strong&gt; section, and click the blue “plus” icon next to &lt;strong&gt;Identifiers&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Service IDs&lt;/strong&gt; and select &lt;strong&gt;Continue&lt;/strong&gt;. Fill in the description and identifier (e.g.: &lt;code&gt;com&lt;span&gt;.&lt;/span&gt;mydomain&lt;span&gt;.&lt;/span&gt;mjcoffee&lt;/code&gt;).&lt;/li&gt;&lt;li&gt;After checking &lt;strong&gt;Sign In with Apple&lt;/strong&gt;, select &lt;strong&gt;Configure&lt;/strong&gt;, and define your Web Domain (e.g.: &lt;code&gt;com&lt;span&gt;.&lt;/span&gt;mydomain&lt;span&gt;.&lt;/span&gt;mjcoffee&lt;/code&gt;) and your &amp;#34;Return URL&amp;#34;. Ensure that your Return URL is your Auth0 domain and that it follows this format: &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;YOUR_AUTH0_DOMAIN&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;login&lt;span&gt;/&lt;/span&gt;callback&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5Wetff0Tutv55UXsYz0gKq/ab19cd3e48604aea314410d22d194982/callback_apple.png&#34; alt=&#34;Return URL apple sign in&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Finally: save, continue and then register the service.&lt;/p&gt;&lt;h4 id=&#34;Set-up-your-Client-Secret-Signing-Key&#34;&gt;Set up your Client Secret Signing Key&lt;/h4&gt;&lt;p&gt;🛠 Follow these steps:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Go to &lt;strong&gt;Keys&lt;/strong&gt;, which is located in the &lt;strong&gt;Certificates, Identifiers, &amp;amp; Profiles&lt;/strong&gt; section of your Apple developer dashboard.&lt;/li&gt;&lt;li&gt;Select the blue “plus” icon to add a new key.&lt;/li&gt;&lt;li&gt;Enter a &lt;strong&gt;Key Name&lt;/strong&gt; and check the &lt;strong&gt;Sign In with Apple&lt;/strong&gt; option.&lt;/li&gt;&lt;li&gt;Select &lt;strong&gt;Configure&lt;/strong&gt; to make sure the &lt;strong&gt;Choose a Primary App ID&lt;/strong&gt; field is filled with the correct App ID.&lt;/li&gt;&lt;li&gt;Select &lt;strong&gt;Save, Continue&lt;/strong&gt;, and then &lt;strong&gt;Register&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;On the page to which you&amp;#39;re redirected after registering, make a note of the Key ID. Then download the key; it will have a &lt;code&gt;&lt;span&gt;.&lt;/span&gt;p8&lt;/code&gt; filename extension.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 Go back to your Apple social connection settings and paste the Key ID. Ensure the proper attributes are selected (Name, Email) and sync user profile at each login is enabled. Hit &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;🛠 Once you have created all your social connections and set them up correctly, go back to your applications. Go to the &lt;strong&gt;Connections&lt;/strong&gt; tab and enable your newly-made social connections:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/59SCRbiX055qDcmTSNwPVl/fa175f974ceb43515893f24f7747d549/app_social_connections.png&#34; alt=&#34;app social connections&#34;/&gt;&lt;/p&gt;&lt;p&gt;As you can see, adding and removing social connections for your apps is now as simple and flicking a switch.&lt;/p&gt;&lt;p&gt;On the Flutter side, I have good news: you don’t need to implement anything there! &lt;/p&gt;&lt;p&gt;Restart the app, log out, then try to log in. You’ll see this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4b6BIaeZ8EHcN1a3MYVOrF/91c9039cf0d56051c99397d1a7524a3e/social_buttons_flutter.png&#34; alt=&#34;app social connections&#34;/&gt;&lt;/p&gt;&lt;p&gt;That&amp;#39;s it! The login screen will now display social login buttons, and their login flows will be ready to use.&lt;/p&gt;&lt;h2 id=&#34;Branding&#34;&gt;Branding&lt;/h2&gt;&lt;p&gt;While it’s fine to use the default branding in development, you want the login page to be customized to your “look and feel” once the app’s in production.&lt;/p&gt;&lt;p&gt;Auth0 allows you to customize your login page through a number of options. You can change the look and feel of the login page by adding colors and logos, and you can customize the user notification part of the process as well: email templates, text messages, and so on. It’s all in the &lt;strong&gt;Branding&lt;/strong&gt; section of the Auth0 dashboard:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7oq6VzFQ3nSUcStZTXvjQu/38d1e272f3bef751d9feaca704d580dc/branding.png&#34; alt=&#34;Auth0 branding&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Add-Roles&#34;&gt;Add Roles&lt;/h3&gt;&lt;p&gt;You may want to provide certain functionalities to the user based on their roles. This is easy with proper authorization server such as Auth0, which facilitates adding roles and specifying what users in each role are allowed to do. &lt;/p&gt;&lt;p&gt;In the MJ Coffee app, there are three different roles:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Admin:&lt;/strong&gt; These are administrators, and they will have access to all the app’s functionality with full permissions.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Customer:&lt;/strong&gt; This is the default role for registered or logged-in users. They are limited to the app’s customer-facing features. You will automatically assign this role to all users upon registration or login, and you will learn how to do so later on in this tutorial.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Employee:&lt;/strong&gt; These are coffee shop employees. They can access the community screen to answer customer requests in the support chat, as well as other employee-facing features.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7nVdiU86TPCF1tLXrBg6ID/54a078bfe7d2382a6776c26adfc5cba4/roles.png&#34; alt=&#34;Auth0 roles&#34;/&gt;&lt;/p&gt;&lt;p&gt;You can add more roles to the app as the need arises.&lt;/p&gt;&lt;h2 id=&#34;User-Management-in-Auth0&#34;&gt;User Management in Auth0&lt;/h2&gt;&lt;p&gt;Auth0 provides the infrastructure to store users and their information on its cloud database.&lt;/p&gt;&lt;p&gt;For the &lt;em&gt;MJ Coffee&lt;/em&gt; app, Auth0’s cloud database is sufficient. One of Auth0’s goals is to reduce the cost of extra infrastructure maintenance and cost.&lt;/p&gt;&lt;p&gt;You can access users by selecting &lt;strong&gt;User Management&lt;/strong&gt; in the left column menu of the Auth0 dashboard. The &lt;strong&gt;Users&lt;/strong&gt; page allows you to create new users and manage your existing ones by changing their details, adding permissions and roles, or revoking their access.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3O0JDGBqXHmPfrKaEavP2D/260c804cf50a308e696ecd9a446ab4a9/users.png&#34; alt=&#34;Auth0 users&#34;/&gt;&lt;/p&gt;&lt;p&gt;When you open a user, you’ll see that Auth0 provides in-depth details about that user, including basic account data, metadata, their devices, and their history, which might be pretty helpful for debugging the application or investigating a particular user’s access activity, permissions, and roles.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/JcGTMspZ9hKtu9RAi4Oq9/257a692aa9a65cd12e96f645b56aafd1/user_roles.png&#34; alt=&#34;Auth0 user roles&#34;/&gt;&lt;/p&gt;&lt;p&gt;Each user account stores some basic information about the user: name, email address, the date and time when the account was created, and so on. &lt;/p&gt;&lt;p&gt;Additional information can be attached to a user by adding to these metadata stores:  their user metadata, which is a key-value structure for storing information about the user. You can also store information in the user&lt;em&gt;metadata or manipulating `app&lt;/em&gt;metadata`, which helps to provide more information to the Flutter application while receiving user details.&lt;/p&gt;&lt;h2 id=&#34;Moving-Forward&#34;&gt;Moving Forward&lt;/h2&gt;&lt;p&gt;In the next section of this tutorial, you will learn how to add real-time chat to the app.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-2-refresh-tokens-social-logins-more/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.</summary>
  </entry>
  <entry>
    <title>Flutter Authentication and Authorization with Auth0, Part 1: Adding Authentication to an App</title>
    <updated>2021-10-04T17:12:00Z</updated>
    <id>tag:auth0.com,2021-10-04:/blog/flutter-authentication-authorization-with-auth0-part-1-adding-authentication-to-an-app/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;h2 id=&#34;Welcome-&#34;&gt;Welcome!&lt;/h2&gt;&lt;p&gt;In this four-part tutorial, you’ll take a Flutter app and enhance it with Auth0. You’ll start by adding basic username/password authentication to it, followed by social logins, and then enable real-time support chat that makes use of authorization.&lt;/p&gt;&lt;p&gt;By the end of this tutorial, you’ll have built a fairly complex Flutter app that you can use as the basis for your own creations, and you will also have covered a lot of Auth0’s features.&lt;/p&gt;&lt;p&gt;Before we begin, let’s get our terminology straight...&lt;/p&gt;&lt;p&gt;Authentication and authorization are two key security components in applications, whether they are mobile apps, web apps, or machine-to-machine connections. Many people are confused by these terms, so here are some simple definitions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;Authentication&lt;/em&gt;&lt;/strong&gt; deals with the question &lt;strong&gt;&amp;#34;Who are you?&amp;#34;&lt;/strong&gt;. You’ll implement it in this section with the help of an authentication protocol called &lt;a href=&#34;https://auth0.com/docs/protocols/openid-connect-protocol&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OpenID Connect&lt;/a&gt;, or “OIDC” for short.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;Authorization&lt;/em&gt;&lt;/strong&gt; answers the question &lt;strong&gt;&amp;#34;What are you allowed to do?&amp;#34;&lt;/strong&gt;. You’ll implement it in a later section with the help of an authorization protocol called &lt;a href=&#34;https://auth0.com/intro-to-iam/what-is-oauth-2/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OAuth 2.0&lt;/a&gt;, or “OAuth2” for short.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Adding-Authentication-to-a-Flutter-App&#34;&gt;Adding Authentication to a Flutter App&lt;/h2&gt;&lt;p&gt;In this section, you’ll learn how to secure a Flutter app with Auth0. You’ll take a production-ready Flutter app and add a login screen and logout functionality to it, and you’ll do it with only a fraction of the effort required to implement login and logout yourself!&lt;/p&gt;&lt;p&gt;You’ll be able to follow this tutorial a little more smoothly if you know the basics of Flutter, but it&amp;#39;s not a hard requirement. If you have experience with any modern web framework, you’ll probably be able to understand the code and learn Flutter and Dart (Flutter’s programming language) as you go.&lt;/p&gt;&lt;h3 id=&#34;What-you-ll-learn-and-build&#34;&gt;What you’ll learn and build&lt;/h3&gt;&lt;p&gt;While you &lt;em&gt;could&lt;/em&gt; create a new Flutter project and implement everything you will learn in this tutorial, adding authentication to an existing production-ready app is pretty common. I’ll provide a production-ready app, &lt;strong&gt;&lt;em&gt;MJ Coffee&lt;/em&gt;&lt;/strong&gt;, which you’ll secure by adding authentication.&lt;/p&gt;&lt;p&gt;In later sections, you’ll enable authentication through a social identity provider, such as Google or Apple. You’ll then work on authorization by adding roles and permissions to limit app functionalities based on each user’s permissions and roles.&lt;/p&gt;&lt;p&gt;I’ll explain more about what this tutorial will cover in &lt;a href=&#34;https://img.youtube.com/vi/bHdSLwWFNJ4/0.jpg&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this video overview.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I will provide the source code for both the “starter” and “final” versions of the application. I strongly recommend that you use the “starter” version and follow the tutorial step by step in order to better understand the application and your additions to it.&lt;/p&gt;&lt;p&gt;Additionally, I have recorded videos that support this tutorial. You’ll find them on my &lt;a href=&#34;https://www.youtube.com/playlist?list=PLCOnzDflrUceRLfHEkl-u2ipjsre6ZwjV&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Youtube channel&#xA;playlist&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Look for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Set-Up-the-Initial-App&#34;&gt;Set Up the Initial App&lt;/h2&gt;&lt;h3 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;&lt;p&gt;Before getting started, you need to have the following installed on your machine:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://flutter.dev/docs/get-started/install&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Flutter SDK&lt;/a&gt; version 2.0 or later.&lt;/strong&gt; I used version &lt;strong&gt;2.2&lt;/strong&gt; for building my application.&lt;/li&gt;&lt;li&gt;If you want to build the app for iOS, you’ll need the following:&#xA;  &lt;ul&gt;&lt;li&gt;&lt;strong&gt;Xcode 11 or later.&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Ruby 2.6.0 or later.&lt;/strong&gt; This is required for the next iOS requirement, which is...&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://cocoapods.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CocoaPods&lt;/a&gt; 1.10.0 or later.&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;A basic understanding of &lt;em&gt;null safety&lt;/em&gt;.&lt;/strong&gt; If you’ve used Kotlin’s or Swift’s optional types, you should be fine; if not, please read &lt;a href=&#34;https://flutter.dev/docs/null-safety&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Null safety in Flutter&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;The IDE or an editor of your choice.&lt;/strong&gt; I recommend:&#xA;&lt;ul&gt;&lt;li&gt;Android Studio, or&lt;/li&gt;&lt;li&gt;IntelliJ, or&lt;/li&gt;&lt;li&gt;Visual Studio Code (which I will use in this series).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Dart and Flutter plugins&lt;/strong&gt; for your IDE.&lt;/li&gt;&lt;li&gt;A cup of tea or coffee.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Get-the-project--configure-it--and-run-it&#34;&gt;Get the project, configure it, and run it&lt;/h3&gt;&lt;p&gt;🛠 &lt;a href=&#34;https://github.com/mhadaily/serverless-authentication-authorization-flutter&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Open the repository for the MJ Coffee app&lt;/a&gt; and download the source from the &lt;em&gt;main&lt;/em&gt; branch. This contains a fully functioning app that is ready for you to add Auth0 authentication/authorization and chat.&lt;/p&gt;&lt;p&gt;🛠 If you want to build the app for iOS, you’ll need to specify your own development team for the build process. Open the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;ios&lt;span&gt;/&lt;/span&gt;Runner&lt;span&gt;.&lt;/span&gt;xcworkspace&lt;span&gt;/&lt;/span&gt;&lt;/code&gt; file with Xcode, select the &lt;strong&gt;Runner&lt;/strong&gt; project, then the &lt;strong&gt;Runner&lt;/strong&gt; target, open the &lt;strong&gt;Signing &amp;amp; Capabilities&lt;/strong&gt; tab, and select your team in the &lt;strong&gt;Team&lt;/strong&gt; drop-down menu:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3URlDK6kyBY0Op3OU1GX02/1701db29ed00c3e364063984981c5efd/select_development_team.png&#34; alt=&#34;Screenshot of Xcode. The reader is instructed to select the “Runner” project and then the “Runner” target, then select “Signing and Capabilities”, and finally select their development team.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Confirm that the app works by running it. Open a command-line interface, navigate to the project’s root directory, and enter  &lt;code&gt;flutter run&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;Flutter will compile the project and run it on any mobile device connected to your computer or any mobile device emulator running on it. If it can’t find any of those, it will run a mobile device emulation in a browser window.&lt;/p&gt;&lt;p&gt;You will see the app’s home screen:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6kebmOTiWF0KJvdk3yRhZv/a564bccc4f49415742375a9a597db8aa/mj_coffee_screen_1.png&#34; alt=&#34;The MJ Coffee App’s home screen&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Take-a-quick-tour-of-the-app&#34;&gt;Take a quick tour of the app&lt;/h3&gt;&lt;p&gt;🛠 Tap the &lt;strong&gt;Login | Register&lt;/strong&gt; button. Right now, there is no login functionality, so the app immediately takes you to the &lt;strong&gt;Menu&lt;/strong&gt; screen:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/26VWlWFGMfEkt3lxzB4Vtl/d76d8e9157544008eb45706196be9e58/mj_coffee_screen_2.png&#34; alt=&#34;The MJ Coffee App’s “Menu” screen&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Tap the &lt;strong&gt;Support&lt;/strong&gt; button located at the bottom center of the screen. It will take you to the screen where you’ll eventually implement that support chat feature:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6kP1psYGYxUYjP2lfmGGSy/cf9f8fe20aeb4dcf6aabfc717706ec45/mj_coffee_screen_3.png&#34; alt=&#34;The MJ Coffee App’s “Support” screen, which is currently blank&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Now tap the &lt;strong&gt;Profile&lt;/strong&gt; button located at the bottom right of the screen. It will take you to the profile screen, which will eventually display some information about the logged-in user:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/66R156m2DmiVcOy3NDAUrx/768da6f50629ec4084ba0cdfd974045e/mj_coffee_screen_4.png&#34; alt=&#34;The MJ Coffee App’s “Profile” screen, which currently shows a coffee illustration&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 And finally, tap the &lt;strong&gt;Logout&lt;/strong&gt; button, which will bring you back to the home screen.&lt;/p&gt;&lt;p&gt;Now that you’ve had a tour of the app, it’s time to start implementing the new features!&lt;/p&gt;&lt;h2 id=&#34;Implement-Login&#34;&gt;Implement Login&lt;/h2&gt;&lt;h3 id=&#34;Install-Flutter-dependencies&#34;&gt;Install Flutter dependencies&lt;/h3&gt;&lt;p&gt;The first step is to import the required libraries. You’ll do that by specifying three new dependencies:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/http&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;http&lt;/strong&gt;&lt;/a&gt;: A composable, Future-based library for making HTTP requests published by the &lt;a href=&#34;https://dart.dev/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Dart team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_appauth&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;flutter_appauth&lt;/strong&gt;&lt;/a&gt; : A well-maintained wrapper package around &lt;a href=&#34;https://appauth.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;AppAuth&lt;/a&gt; for Flutter developed by &lt;a href=&#34;https://dexterx.dev/about/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Michael Bui&lt;/a&gt;. AppAuth authenticates and authorizes users and supports the PKCE extension.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_secure_storage&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;fluttersecurestorage&lt;/strong&gt;&lt;/a&gt;: A library for securely persisting data locally; it was developed by &lt;a href=&#34;https://github.com/mogol&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;German Saprykin&lt;/a&gt;. You will need this to safely store tokens and other necessary information.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You’ll install them by adding entries to the project’s &lt;code&gt;&lt;span&gt;/&lt;/span&gt;pubspec&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt; file (located in the root directory), where dependencies are specified.&lt;/p&gt;&lt;p&gt;🛠 Add the following lines to the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;pubspec&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt;’s &lt;code&gt;dependencies&lt;span&gt;:&lt;/span&gt;&lt;/code&gt; section, just after the line that starts with &lt;code&gt;json_annotation&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  &lt;span&gt;http&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^0.13.3&#xA;  &lt;span&gt;flutter_appauth&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^1.1.0&#xA;  &lt;span&gt;flutter_secure_storage&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^4.2.0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;dependencies&lt;span&gt;:&lt;/span&gt;&lt;/code&gt; section should end up looking like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;flutter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;sdk&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; flutter&#xA;  &lt;span&gt;font_awesome_flutter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^9.1.0&#xA;  &lt;span&gt;flutter_svg&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^0.22.0&#xA;  &lt;span&gt;google_fonts&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^2.1.0&#xA;  &lt;span&gt;json_annotation&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^4.0.1&#xA;  &lt;span&gt;http&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^0.13.3&#xA;  &lt;span&gt;flutter_appauth&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^1.1.0&#xA;  &lt;span&gt;flutter_secure_storage&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ^4.2.0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Save the file and then install the dependencies by either:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Running the &lt;code&gt;flutter pub get&lt;/code&gt; command in the root of your project on the command line, or&lt;/li&gt;&lt;li&gt;Running &lt;code&gt;Pub get&lt;/code&gt; in your editor or IDE.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Configure-the-callback-URL&#34;&gt;Configure the callback URL&lt;/h3&gt;&lt;p&gt;A callback URL is a mechanism that an authorization server such as Auth0 uses to communicate back to your application. It specifies a location where the user should be returned after the user had been authenticated.&lt;/p&gt;&lt;p&gt;Because unauthorized parties can manipulate callback URLs, Auth0 recognizes only URLs in a list of allowed callback URLs. These are stored in the application’s Settings page in the Auth0 dashboard.&lt;/p&gt;&lt;p&gt;For web applications, a callback URL is a valid HTTPS URL. For native apps, your Flutter implementation, you need to create a “pseudo-URL” based on your app’s unique name (the name is the &lt;em&gt;application ID&lt;/em&gt; in Android and the &lt;em&gt;bundle name&lt;/em&gt; in iOS). These are similar in format to an URL.&lt;/p&gt;&lt;p&gt;You will specify that this app’s name is &lt;code&gt;mj&lt;span&gt;.&lt;/span&gt;coffee&lt;span&gt;.&lt;/span&gt;app&lt;/code&gt;, which means that the callback URL for this application will be &lt;code&gt;mj&lt;span&gt;.&lt;/span&gt;coffee&lt;span&gt;.&lt;/span&gt;app&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;login&lt;span&gt;-&lt;/span&gt;callback&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;flutter_appauth&lt;/code&gt; will register your app with an intent filter on that callback URL. If there&amp;#39;s no match, the app will not receive the result.&lt;/p&gt;&lt;h4 id=&#34;Configure-the-callback-URL-for-Android&#34;&gt;Configure the callback URL for Android&lt;/h4&gt;&lt;p&gt;🛠 To configure the Android version of the app, open the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;android&lt;span&gt;/&lt;/span&gt;app&lt;span&gt;/&lt;/span&gt;build&lt;span&gt;.&lt;/span&gt;gradle&lt;/code&gt; file. Update the &lt;code&gt;defaultConfig&lt;/code&gt; section of the file by adding a new item: &lt;code&gt;manifestPlaceHolders&lt;/code&gt; and its value, &lt;code&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;appAuthRedirectScheme&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;mj.coffee.app&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/code&gt;. The value of &lt;code&gt;appAuthRedirectScheme&lt;/code&gt; must be in lower case letters.&lt;/p&gt;&lt;p&gt;🛠 You should set the value for &lt;code&gt;minSdkVersion&lt;/code&gt; to at least &lt;code&gt;&lt;span&gt;18&lt;/span&gt;&lt;/code&gt;, as it&amp;#39;s a requirement for the &lt;code&gt;flutter_secure_storage&lt;/code&gt; package. For the MJ Coffee app, I changed the &lt;code&gt;minSdkVersion&lt;/code&gt; to &lt;code&gt;&lt;span&gt;21&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The result should look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /android/app/build.gradle&lt;/span&gt;&#xA;&#xA;    defaultConfig &lt;span&gt;{&lt;/span&gt;&#xA;        applicationId &lt;span&gt;&amp;#34;mj.coffee.app&amp;#34;&lt;/span&gt;&#xA;        minSdkVersion &lt;span&gt;21&lt;/span&gt;&#xA;        targetSdkVersion &lt;span&gt;29&lt;/span&gt;&#xA;        versionCode flutterVersionCode&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toInteger&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        versionName flutterVersionName&#xA;        multiDexEnabled &lt;span&gt;true&lt;/span&gt;&#xA;        testInstrumentationRunner &lt;span&gt;&amp;#34;androidx.test.runner.AndroidJUnitRunner&amp;#34;&lt;/span&gt;&#xA;        manifestPlaceholders &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#39;appAuthRedirectScheme&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;mj.coffee.app&amp;#39;&lt;/span&gt;&#xA;        &lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Configure-the-callback-URL-for-iOS&#34;&gt;Configure the callback URL for iOS&lt;/h4&gt;&lt;p&gt;The only change that you need to make in order to configure the iOS version of the app is to add a callback scheme.&lt;/p&gt;&lt;p&gt;🛠 To do this, open the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;ios&lt;span&gt;/&lt;/span&gt;Runner&lt;span&gt;/&lt;/span&gt;Info&lt;span&gt;.&lt;/span&gt;plist&lt;/code&gt; file. Inside the &lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dict&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; tag, add a new key, &lt;code&gt;CFBundleURLTypes&lt;/code&gt; so that the start of the &lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dict&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; tag looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- /ios/Runner/Info.plist --&amp;gt;&lt;/span&gt;&#xA;&#xA;...&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dict&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;   &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;key&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;CFBundleURLTypes&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;key&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;array&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dict&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;key&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;CFBundleTypeRole&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;key&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Editor&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;key&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;CFBundleURLSchemes&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;key&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;array&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;mj.coffee.app&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;array&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dict&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;array&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Run both Android and iOS versions and ensure that the app runs on all devices or emulators/simulators with no error by using the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;flutter run -d all&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Configure-Auth0&#34;&gt;Configure Auth0&lt;/h3&gt;&lt;p&gt;The next step is to register MJ Coffee as an application in the Auth0 dashboard.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;You’ll need an Auth0 account for this step.&lt;/strong&gt; If you don’t already have one, &lt;a href=&#34;https://auth0.com/signup&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;you can sign up for a free account&lt;/a&gt;. The free tier is generous enough for many small applications.&lt;/p&gt;&lt;p&gt;🛠 Log in to into your Auth0 account and follow the steps below to register the application:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;🛠 Go to the &lt;strong&gt;Applications&lt;/strong&gt; section of your dashboard:&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/11V2MgaHACXkpzvWYTDrGC/61f2f0b37a0a15b1bfb2dead062f02ad/click_applications.png&#34; alt=&#34;The main page of the Auth0 dashboard. The reader is directed to click “Applications”.&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1mH6wEsUHtZizYdp4Jitu1/8d653eb1249f22347d2c67eb403f2c88/click_applications_2.png&#34; alt=&#34;The main page of the Auth0 dashboard. The reader is directed to click the “Applications” menu item in the “Applications” menu.&#34;/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;🛠 Click the &lt;strong&gt;Create Application&lt;/strong&gt; button:&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3uRVLR5qdjjvLBwvNJ4Xpk/40ff5b6358a332453e3062a830a19a37/click_create_application.png&#34; alt=&#34;The main page of the Auth0 dashboard’s “Applications” page. The reader is directed to click the “Create Application” button.&#34;/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;🛠 Enter a name for your application (e.g., &amp;#34;MJ Coffee Flutter Application&amp;#34;) and select the &lt;strong&gt;Native&lt;/strong&gt; application type:&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3uxWZltP1uokojsifZoGky/61a5b804ecde79755448907169e63ed9/create_application_dialog.png&#34; alt=&#34;The “Create Application” dialog. The reader is directed to enter a name for the application, select the “Native” application type, and click the “Create” button.&#34;/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;🛠 You’ll see the &lt;strong&gt;Quick Start&lt;/strong&gt; page of your newly-registered application. Go to the &lt;strong&gt;Connections&lt;/strong&gt; page...&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1hGTF4bDiVDLTTtF8cNN7G/b928a2d8737efe5c61fc9629cff8503e/click_connections.png&#34; alt=&#34;The “Quick Start” tab for the “MJ Coffee” application in the Auth0 dashboard. The user is directed to click the “Connections” tab.&#34;/&gt;&lt;/p&gt;&lt;p&gt;...and ensure that &lt;strong&gt;Username-Password-Authentication&lt;/strong&gt;(in the &lt;strong&gt;Database&lt;/strong&gt; section of the page) is selected. You can, and you will add a social connection later to this application too:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5MVzC4D9RA4l27SKsnFTH0/f68ea1b0c2bd7215ddb7ae504383ed20/connections_page.png&#34; alt=&#34;The “Connections” tab for the “MJ Coffee” application in the Auth0 dashboard. The user is directed to click the “Connections” tab.&#34;/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;🛠 Then go to the &lt;strong&gt;Settings&lt;/strong&gt; page. You can find all information, including client ID, client secret, domain (Tenant), etc.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1nDE9yyCNNRKhfYcAC348j/61be08ddfab99158d3dff17e3dfd6336/settings_page.png&#34; alt=&#34;The “Settings” tab for the “MJ Coffee” application in the Auth0 dashboard. The user is directed to copy the values in the “Domain” and “Client ID” fields.&#34;/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;🛠 You need to add a callback URL for the app to the &lt;strong&gt;Allowed Callback URLs&lt;/strong&gt; under &lt;strong&gt;Application URIs&lt;/strong&gt;. Use the value &lt;code&gt;mj&lt;span&gt;.&lt;/span&gt;coffee&lt;span&gt;.&lt;/span&gt;app&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;login&lt;span&gt;-&lt;/span&gt;callback&lt;/code&gt;:&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6Fxhp8QMl1sWcijlnP3L6w/9c99382a1d2cd330ebf11b3e47f48e46/add_callback_url.png&#34; alt=&#34;The “Quick Start” tab for the “MJ Coffee” application in the Auth0 dashboard. The user is directed to add the callback URL for the app to the “Allowed Callback URLs” list.&#34;/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;🛠 Scroll to the bottom of the page and click the &lt;strong&gt;Save Changes&lt;/strong&gt; button:&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7KsLW4adJ6PNIPAI12al4g/f2c0e8abf6d7377595cfb7df11493e67/save_changes.png&#34; alt=&#34;The “Save Changes” button. The user is directed to click it.&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Provide-the-domain-and-client-ID-to-the-app&#34;&gt;Provide the domain and client ID to the app&lt;/h3&gt;&lt;p&gt;You will need to use the domain and client ID that you copied from the &lt;strong&gt;Settings&lt;/strong&gt; page in your Flutter application. You can either store these values in constant variables in the app’s code, or you can pass these values to the app by providing them as &lt;code&gt;&lt;span&gt;--&lt;/span&gt;dart&lt;span&gt;-&lt;/span&gt;define&lt;/code&gt; arguments when you run it. &lt;/p&gt;&lt;p&gt;Rather than store this sensitive information in your code (which is a big security risk), I suggest that you supply the app with these values as &lt;code&gt;&lt;span&gt;--&lt;/span&gt;dart&lt;span&gt;-&lt;/span&gt;define&lt;/code&gt; arguments when you run it. &lt;/p&gt;&lt;p&gt;🛠 To do this in Terminal or PowerShell, use this command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;flutter run -d all --dart-define&lt;span&gt;=&lt;/span&gt;AUTH0_DOMAIN&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;YOUR DOMAIN&lt;span&gt;}&lt;/span&gt; --dart-define&lt;span&gt;=&lt;/span&gt;AUTH0_CLIENT_ID&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;YOUR CLIENT ID&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can optionally have your editor of choice provide these values. For example, you can have Visual Studio Code pass these additional &lt;code&gt;&lt;span&gt;--&lt;/span&gt;dart&lt;span&gt;-&lt;/span&gt;define&lt;/code&gt; values by adding them to the &lt;code&gt;args&lt;/code&gt; field of your launch configuration file (&lt;code&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;vscode&lt;span&gt;/&lt;/span&gt;launch&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt;):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;#34;configurations&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Flutter&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;request&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;launch&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;flutterMode&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;debug&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;dart&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;--dart-define&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;AUTH0_DOMAIN={YOUR DOMAIN}&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;--dart-define&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;AUTH0_CLIENT_ID={YOUR CLIENT ID}&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;]&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 The app should capture the values you pass to it. Do this by defining these constants in the &lt;code&gt;constants&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file in the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;helpers&lt;span&gt;/&lt;/span&gt;&lt;/code&gt; directory -- add these just after the &lt;code&gt;&lt;span&gt;import&lt;/span&gt;&lt;/code&gt; statements:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/helpers/constants.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; AUTH0_DOMAIN &lt;span&gt;=&lt;/span&gt; String&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromEnvironment&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;AUTH0_DOMAIN&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;const&lt;/span&gt; AUTH0_CLIENT_ID &lt;span&gt;=&lt;/span&gt; String&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromEnvironment&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;AUTH0_CLIENT_ID&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;const&lt;/span&gt; AUTH0_ISSUER &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;https://$AUTH0_DOMAIN&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;const&lt;/span&gt; BUNDLE_IDENTIFIER &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;mj.coffee.app&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;const&lt;/span&gt; AUTH0_REDIRECT_URI &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;$BUNDLE_IDENTIFIER://login-callback&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that you only need the domain and client ID because the Authorization Code Flow with PKCE does not require a client secret. &lt;/p&gt;&lt;p&gt;The code also defines a top-level domain for your tenant, which is called the issuer.&lt;/p&gt;&lt;p&gt;As mentioned earlier, you need to create your redirect URI based on your bundle identifier, which you added to the &amp;#34;Allowed Callback URLs&amp;#34; list earlier. However, it would be best to keep in mind that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The bundle identifier must match &lt;code&gt;appAuthRedirectScheme&lt;/code&gt; on Android, and&lt;/li&gt;&lt;li&gt;The scheme part of the redirect URL must match and &lt;code&gt;CFBundleURLSchemes&lt;/code&gt; on iOS...&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;...and that both values must be in all lowercase.&lt;/p&gt;&lt;h3 id=&#34;Integrating-Auth0-with-Flutter&#34;&gt;Integrating Auth0 with Flutter&lt;/h3&gt;&lt;p&gt;Since Auth0 is a standard OAuth 2.0 authorization server, you can utilize any standard OpenID Connect SDK to authenticate against Auth0. One of them is &lt;code&gt;flutter_appauth&lt;/code&gt;, a wrapper around the &lt;code&gt;AppAuth&lt;/code&gt; SDK for native applications. You will need to integrate it into your application.&lt;/p&gt;&lt;p&gt;🛠 Open the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;services&lt;span&gt;/&lt;/span&gt;auth_service&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file and update it to import the necessary libraries as well as instantiate &lt;code&gt;FlutterAppAuth&lt;/code&gt; and &lt;code&gt;FlutterSecureStorage&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/auth_service.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;dart:convert&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:http/http.dart&amp;#39;&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; http&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:flutter/services.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:flutter_appauth/flutter_appauth.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:flutter_secure_storage/flutter_secure_storage.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:mjcoffee/helpers/constants.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:mjcoffee/models/auth0_id_token.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:mjcoffee/models/auth0_user.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AuthService&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; AuthService instance &lt;span&gt;=&lt;/span&gt; AuthService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;_internal&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;factory&lt;/span&gt; &lt;span&gt;AuthService&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; instance&lt;span&gt;;&lt;/span&gt;&#xA;  AuthService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;_internal&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;final&lt;/span&gt; FlutterAppAuth appAuth &lt;span&gt;=&lt;/span&gt; &lt;span&gt;FlutterAppAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; FlutterSecureStorage secureStorage &lt;span&gt;=&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;FlutterSecureStorage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;OpenID Connect has a protocol, &lt;a href=&#34;https://auth0.com/docs/protocols/oidc/openid-connect-discovery&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OpenID Connect Discovery&lt;/a&gt;, that provides a standard way to discover authorization server endpoints in JSON documents. &lt;/p&gt;&lt;p&gt;In Auth0, you can find the discovery document at the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;well&lt;span&gt;-&lt;/span&gt;known&lt;span&gt;/&lt;/span&gt;openid&lt;span&gt;-&lt;/span&gt;configuration&lt;/code&gt; endpoint of your tenant address. For MJ Coffee, this endpoint is &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;YOUR-AUTH0-TENANT-NAME.auth0.com&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;well&lt;span&gt;-&lt;/span&gt;known&lt;span&gt;/&lt;/span&gt;openid&lt;span&gt;-&lt;/span&gt;configuration&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;If you watch &lt;a href=&#34;https://www.youtube.com/playlist?list=PLCOnzDflrUceRLfHEkl-u2ipjsre6ZwjV&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;my videos&lt;/a&gt;, you will see an example of a discovery URL.&lt;/p&gt;&lt;p&gt;AppAuth supports &lt;a href=&#34;https://pub.dev/packages/flutter_appauth#getting-started&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;three methods to configure endpoints&lt;/a&gt;. Conveniently, you just pass the top-level domain name (i.e., issuer) as a parameter to AppAuth methods. AppAuth then internally fetches the discovery documents from the &lt;code&gt;openid&lt;span&gt;-&lt;/span&gt;configuration&lt;/code&gt; endpoint and figures out where to send subsequent requests.&lt;/p&gt;&lt;p&gt;🛠 Let&amp;#39;s create a login method in our &lt;code&gt;AuthService&lt;/code&gt; to construct the &lt;code&gt;AuthorizationTokenRequest&lt;/code&gt;. Add the following to &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;services&lt;span&gt;/&lt;/span&gt;auth_service&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/auth_service.dart&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;final&lt;/span&gt; authorizationTokenRequest &lt;span&gt;=&lt;/span&gt; &lt;span&gt;AuthorizationTokenRequest&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        AUTH0_CLIENT_ID&lt;span&gt;,&lt;/span&gt; AUTH0_REDIRECT_URI&lt;span&gt;,&lt;/span&gt;&#xA;        issuer&lt;span&gt;:&lt;/span&gt; AUTH0_ISSUER&lt;span&gt;,&lt;/span&gt;&#xA;        scopes&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;openid&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;profile&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;offline_access&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;final&lt;/span&gt; AuthorizationTokenResponse&lt;span&gt;?&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt;&#xA;          &lt;span&gt;await&lt;/span&gt; appAuth&lt;span&gt;.&lt;/span&gt;&lt;span&gt;authorizeAndExchangeCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        authorizationTokenRequest&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;result&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To construct the request, you can create &lt;code&gt;AuthorizationTokenRequest&lt;/code&gt; object bypassing the mandatory &lt;code&gt;clientID&lt;/code&gt; and &lt;code&gt;redirectUrl&lt;/code&gt; parameters using the values of &lt;code&gt;&lt;span&gt;AUTH0_CLIENT_ID&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;AUTH0_REDIRECT_URI&lt;/span&gt;&lt;/code&gt; respectively, and the value of &lt;code&gt;&lt;span&gt;AUTH0_ISSUER&lt;/span&gt;&lt;/code&gt; as the value for &lt;code&gt;issuer&lt;/code&gt; to enable discovery.&lt;/p&gt;&lt;p&gt;It would be best if you defined &lt;code&gt;scopes&lt;/code&gt; so that when the user allows them, you can perform actions on their behalf. Here are the scopes that we have requested in the code above:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;openid&lt;/code&gt;: Perform an OpenID connect sign-in.&lt;/li&gt;&lt;li&gt;&lt;code&gt;profile&lt;/code&gt;: Retrieve the user’s profile.&lt;/li&gt;&lt;li&gt;&lt;code&gt;offline_access&lt;/code&gt;: Retrieve a Refresh Token for &lt;code&gt;offline_access&lt;/code&gt; from the application.&lt;/li&gt;&lt;li&gt;&lt;code&gt;email&lt;/code&gt;: Retrieve the user’s email.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You will add more scopes later in this tutorial.&lt;/p&gt;&lt;p&gt;Once the request is constructed, calling &lt;code&gt;appAuth&lt;span&gt;.&lt;/span&gt;&lt;span&gt;authorizeAndExchangeCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; starts a sign-in transaction. The authentication process will start, and upon completion, the user will return to the application with the &lt;code&gt;AuthorizationTokenResponse&lt;/code&gt;, which is shown below and contains an Access Token, ID Token, and Refresh Token:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;AuthorizationTokenResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    String&lt;span&gt;?&lt;/span&gt; accessToken&lt;span&gt;,&lt;/span&gt;&#xA;    String&lt;span&gt;?&lt;/span&gt; refreshToken&lt;span&gt;,&lt;/span&gt;&#xA;    DateTime&lt;span&gt;?&lt;/span&gt; accessTokenExpirationDateTime&lt;span&gt;,&lt;/span&gt;&#xA;    String&lt;span&gt;?&lt;/span&gt; idToken&lt;span&gt;,&lt;/span&gt;&#xA;    String&lt;span&gt;?&lt;/span&gt; tokenType&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;authorizationAdditionalParameters&lt;span&gt;,&lt;/span&gt;&#xA;    Map&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; &lt;span&gt;dynamic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; tokenAdditionalParameters&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;The-Access-Token--Refresh-Token--and-ID-Token&#34;&gt;The Access Token, Refresh Token, and ID Token&lt;/h3&gt;&lt;p&gt;You can use the Access Token to access APIs. Clients can’t decode this token, which is all right since it only means something to the API’s authorization server.&lt;/p&gt;&lt;p&gt;As a security measure, the Access Token usually has a short time to live. There are different methods to keep it alive for a longer period. One way is to use Refresh Tokens, which re-authorize your users. If a Refresh Token is available, the app can use it to silently get a new Access Token. For this reason, the app will store Refresh Tokens, and for security reasons, it will securely store them.&lt;/p&gt;&lt;p&gt;🛠 I recommend defining a constant key for your Refresh Token. Add this to your &lt;code&gt;constants&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/helpers/constants.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; REFRESH_TOKEN_KEY &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;refresh_token&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While the contents of the Access Token are opaque to the client, the&lt;code&gt;AppAuth&lt;/code&gt; SDK validates the ID Token since it’s part of an OpenID Connect client’s responsibility. The app should decode the ID Token’s body to receive its JSON payload.&lt;/p&gt;&lt;p&gt;🛠 To get the ID Token’s payload, we’ll need to create a model. We’ll call it &lt;code&gt;Auth0IdToken&lt;/code&gt;. Create a new file named &lt;code&gt;auth0_id_token&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; in the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;models&lt;/code&gt; directory, where models go:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/models/auth0_id_token.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:json_annotation/json_annotation.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;part&lt;/span&gt; &lt;span&gt;&amp;#39;auth0_id_token.g.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@JsonSerializable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Auth0IdToken&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;Auth0IdToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;nickname&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;email&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;picture&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;updatedAt&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;iss&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;sub&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;aud&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;iat&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;exp&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;authTime&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;final&lt;/span&gt; String nickname&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String name&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String picture&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;updated_at&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String updatedAt&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;final&lt;/span&gt; String iss&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;// In OIDC, &amp;#34;sub&amp;#34; means &amp;#34;subject identifier&amp;#34;,&lt;/span&gt;&#xA;  &lt;span&gt;// which for our purposes is the user ID.&lt;/span&gt;&#xA;  &lt;span&gt;// This getter makes it easier to understand.&lt;/span&gt;&#xA;  String &lt;span&gt;get&lt;/span&gt; userId &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; sub&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String sub&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;final&lt;/span&gt; String aud&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String email&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; int iat&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; int exp&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;auth_time&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; int&lt;span&gt;?&lt;/span&gt; authTime&lt;span&gt;;&lt;/span&gt; &lt;span&gt;// this might be null for the first time login&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;factory&lt;/span&gt; Auth0IdToken&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Map&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; &lt;span&gt;dynamic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; json&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      _$&lt;span&gt;Auth0IdTokenFromJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;json&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  Map&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; &lt;span&gt;dynamic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;toJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; _$&lt;span&gt;Auth0IdTokenToJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The ID Token is made up of &lt;em&gt;claims&lt;/em&gt;, which are name/value pairs that contain either information about the user or meta-information about the Open ID Connect service. The &lt;code&gt;Auth0IdToken&lt;/code&gt; model contains fields to contain the token’s claims, which are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;iss&lt;/code&gt;: An identifier for the &lt;strong&gt;iss&lt;/strong&gt;uer of the response. Its value is an URL.&lt;/li&gt;&lt;li&gt;&lt;code&gt;sub&lt;/code&gt;: An identifier for the &lt;strong&gt;sub&lt;/strong&gt;ject. In the case of our app, it’s the user’s ID. Since &lt;code&gt;sub&lt;/code&gt; is not an often-used term outside of Open ID Connect, we created a getter named &lt;code&gt;userId&lt;/code&gt; that simply returns &lt;code&gt;sub&lt;/code&gt;’s value.&lt;/li&gt;&lt;li&gt;&lt;code&gt;aud&lt;/code&gt;: An identifier for the &lt;strong&gt;aud&lt;/strong&gt;ience — that is, whom the ID Token is intended for.&lt;/li&gt;&lt;li&gt;&lt;code&gt;iat&lt;/code&gt;: The time when JWT that makes up the token was issued (&lt;code&gt;iat&lt;/code&gt; is short for “&lt;strong&gt;i&lt;/strong&gt;ssued &lt;strong&gt;at&lt;/strong&gt;).&lt;/li&gt;&lt;li&gt;&lt;code&gt;exp&lt;/code&gt;: The &lt;strong&gt;exp&lt;/strong&gt;iration time for the token. After this time, the token cannot be used.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The other fields — &lt;code&gt;nickname&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;picture&lt;/code&gt;, and &lt;code&gt;updatedAt&lt;/code&gt; are for claims that contain specific information about the user.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Auth0IdToken&lt;/code&gt; class needs methods to convert data from the authentication server into an &lt;code&gt;Auth0IdToken&lt;/code&gt; object and an &lt;code&gt;Auth0IdToken&lt;/code&gt; object to JSON. You could write them manually, but it’s easier and less error-prone to generate them instead.&lt;/p&gt;&lt;p&gt;You may have noticed these two lines at the start of the file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:json_annotation/json_annotation.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;part&lt;/span&gt; &lt;span&gt;&amp;#39;auth0_id_token.g.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;The &lt;code&gt;&lt;span&gt;import&lt;/span&gt;&lt;/code&gt; line brings in the &lt;code&gt;json_annotation&lt;/code&gt; library, which you’ll use to generate code to serialize and deserialize an object. The &lt;code&gt;@&lt;span&gt;JsonSerializable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; annotation in the code specifies these are &lt;code&gt;Auth0IdToken&lt;/code&gt; objects that are to be serialized and deserialized.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;part&lt;/code&gt; line specifies that the contents of the file &lt;code&gt;auth0_id_token&lt;span&gt;.&lt;/span&gt;g&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; belong to this file. The &lt;code&gt;g&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; filename extension indicates that it’s a generated dart file.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 Run the following command to generate the JSON conversion methods for &lt;code&gt;Auth0IdToken&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;flutter pub run build_runner build --delete-conflicting-outputs&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Once you have generated the JSON conversion methods, you can implement the &lt;code&gt;&lt;span&gt;parseIdToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method in the &lt;code&gt;AuthService&lt;/code&gt; class by adding the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/auth_service.dart&lt;/span&gt;&#xA;&#xA;  Auth0IdToken &lt;span&gt;parseIdToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;String idToken&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;final&lt;/span&gt; parts &lt;span&gt;=&lt;/span&gt; idToken&lt;span&gt;.&lt;/span&gt;&lt;span&gt;split&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;r&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;assert&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;parts&lt;span&gt;.&lt;/span&gt;length &lt;span&gt;==&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;final&lt;/span&gt; Map&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; &lt;span&gt;dynamic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; json &lt;span&gt;=&lt;/span&gt; &lt;span&gt;jsonDecode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      utf8&lt;span&gt;.&lt;/span&gt;&lt;span&gt;decode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        base64Url&lt;span&gt;.&lt;/span&gt;&lt;span&gt;decode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          base64Url&lt;span&gt;.&lt;/span&gt;&lt;span&gt;normalize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;parts&lt;span&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; Auth0IdToken&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;json&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that you have the ID Token, you can get information about the user from the OpenID Connect endpoint for user details, which is &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;AUTH0_DOMAIN&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;userinfo&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;Let&amp;#39;s create another model, &lt;code&gt;Auth0User&lt;/code&gt;, so that we can deserialize and serialize the data from the &lt;code&gt;userinfo&lt;/code&gt; endpoint. &lt;/p&gt;&lt;p&gt;🛠 Create a file &lt;code&gt;auth0_user&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt; in the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;models&lt;span&gt;/&lt;/span&gt;&lt;/code&gt; directory with the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/models/auth0_user.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:json_annotation/json_annotation.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;part&lt;/span&gt; &lt;span&gt;&amp;#39;auth0_user.g.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@JsonSerializable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Auth0User&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;Auth0User&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;nickname&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;email&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;picture&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;updatedAt&lt;span&gt;,&lt;/span&gt;&#xA;    required &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;sub&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String nickname&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String name&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String picture&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@JsonKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;updated_at&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String updatedAt&lt;span&gt;;&lt;/span&gt;&#xA;&#xA; &lt;span&gt;// userID getter to understand it easier&lt;/span&gt;&#xA;  String &lt;span&gt;get&lt;/span&gt; id &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; sub&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; String sub&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;final&lt;/span&gt; String email&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;factory&lt;/span&gt; Auth0User&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Map&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; &lt;span&gt;dynamic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; json&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      _$&lt;span&gt;Auth0UserFromJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;json&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  Map&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; &lt;span&gt;dynamic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;toJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; _$&lt;span&gt;Auth0UserToJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Like &lt;code&gt;Auth0IdToken&lt;/code&gt;, &lt;code&gt;Auth0User&lt;/code&gt; uses the &lt;code&gt;json_annotation&lt;/code&gt; library to generate code to serialize and deserialize its instances. Run the following command to generate that code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;flutter pub run build_runner build --delete-conflicting-outputs&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 This completes the model for Auth0 users, so let’s create a &lt;code&gt;&lt;span&gt;getUserDetails&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method for the &lt;code&gt;AuthService&lt;/code&gt; class as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/auth_service.dart&lt;/span&gt;&#xA;&#xA; Future&lt;span&gt;&amp;lt;&lt;/span&gt;Auth0User&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;getUserDetails&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;String accessToken&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;final&lt;/span&gt; url &lt;span&gt;=&lt;/span&gt; Uri&lt;span&gt;.&lt;/span&gt;&lt;span&gt;https&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      AUTH0_DOMAIN&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;/userinfo&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;final&lt;/span&gt; response &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; http&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      url&lt;span&gt;,&lt;/span&gt;&#xA;      headers&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;Bearer $accessToken&amp;#39;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;getUserDetails ${response.body}&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;response&lt;span&gt;.&lt;/span&gt;statusCode &lt;span&gt;==&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;return&lt;/span&gt; Auth0User&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromJson&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;jsonDecode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;.&lt;/span&gt;body&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;Exception&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;Failed to get user details&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 &lt;code&gt;&lt;span&gt;getUserDetails&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; uses Dart’s &lt;a href=&#34;https://pub.dev/packages/http&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt; library, so add this &lt;code&gt;&lt;span&gt;import&lt;/span&gt;&lt;/code&gt; statement at the top of the file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/auth_service.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:http/http.dart&amp;#39;&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; http&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Since you will need to reuse &lt;code&gt;idToken&lt;/code&gt;, &lt;code&gt;profile&lt;/code&gt;, and &lt;code&gt;accessToken&lt;/code&gt; throughout the application, it would be nice to store their values as members of &lt;code&gt;AuthService&lt;/code&gt; to access them easily. Add these instance variables to &lt;code&gt;AuthService&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/auth_service.dart&lt;/span&gt;&#xA;&#xA;  Auth0User&lt;span&gt;?&lt;/span&gt; profile&lt;span&gt;;&lt;/span&gt;&#xA;  Auth0IdToken&lt;span&gt;?&lt;/span&gt; idToken&lt;span&gt;;&lt;/span&gt;&#xA;  String&lt;span&gt;?&lt;/span&gt; auth0AccessToken&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 You can create a simple method, &lt;code&gt;&lt;span&gt;_setLocalVariables&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, to store these local values. Add the following to &lt;code&gt;AuthService&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/auth_service.dart&lt;/span&gt;&#xA;&#xA;  Future&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;_setLocalVariables&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;result&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;final&lt;/span&gt; bool isValidResult &lt;span&gt;=&lt;/span&gt;&#xA;        result &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; result&lt;span&gt;.&lt;/span&gt;accessToken &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; result&lt;span&gt;.&lt;/span&gt;idToken &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;isValidResult&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      auth0AccessToken &lt;span&gt;=&lt;/span&gt; result&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;;&lt;/span&gt;&#xA;      idToken &lt;span&gt;=&lt;/span&gt; &lt;span&gt;parseIdToken&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;result&lt;span&gt;.&lt;/span&gt;idToken&lt;span&gt;!&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      profile &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; &lt;span&gt;getUserDetails&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;result&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;!&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;      &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;result&lt;span&gt;.&lt;/span&gt;refreshToken &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;await&lt;/span&gt; secureStorage&lt;span&gt;.&lt;/span&gt;&lt;span&gt;write&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          key&lt;span&gt;:&lt;/span&gt; REFRESH_TOKEN_KEY&lt;span&gt;,&lt;/span&gt;&#xA;          value&lt;span&gt;:&lt;/span&gt; result&lt;span&gt;.&lt;/span&gt;refreshToken&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;#39;Success&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;#39;Something is Wrong!&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the Access Token and ID Token are available, it stores their values. If the Refresh Token is also available, it writes its value to secure storage, and that value is retrievable only with the Refresh Token key.&lt;/p&gt;&lt;p&gt;🛠 With the changes you have made, you can now update &lt;code&gt;AuthService&lt;/code&gt;’s &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to return the response for a successful login. Update the method so that it looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/auth_service.dart&lt;/span&gt;&#xA;&#xA;Future&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;try&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;final&lt;/span&gt; authorizationTokenRequest &lt;span&gt;=&lt;/span&gt; &lt;span&gt;AuthorizationTokenRequest&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        AUTH0_CLIENT_ID&lt;span&gt;,&lt;/span&gt;&#xA;        AUTH0_REDIRECT_URI&lt;span&gt;,&lt;/span&gt;&#xA;        issuer&lt;span&gt;:&lt;/span&gt; AUTH0_ISSUER&lt;span&gt;,&lt;/span&gt;&#xA;        scopes&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;openid&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;profile&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;offline_access&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;      &lt;span&gt;final&lt;/span&gt; AuthorizationTokenResponse&lt;span&gt;?&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt;&#xA;          &lt;span&gt;await&lt;/span&gt; appAuth&lt;span&gt;.&lt;/span&gt;&lt;span&gt;authorizeAndExchangeCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        authorizationTokenRequest&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; &lt;span&gt;_setLocalVariables&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;result&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; PlatformException &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;#39;User has cancelled or no internet!&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;catch&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;e&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;#39;Unkown Error!&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can catch any exceptions and return a specific response based on their type to handle errors better.&lt;/p&gt;&lt;h3 id=&#34;Handling-the-app-s-initial-state&#34;&gt;Handling the app’s initial state&lt;/h3&gt;&lt;p&gt;The only thing missing is handling the authentication state when the app is launched. You might want to be able to silently login and retrieve a new Access Token if a Refresh Token is available.&lt;/p&gt;&lt;p&gt;🛠 Let’s add a new method, &lt;code&gt;&lt;span&gt;init&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, to deal with the app’s initial state. Implement this method by adding the following to &lt;code&gt;AuthService&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/auth_service.dart&lt;/span&gt;&#xA;&#xA;  Future&lt;span&gt;&amp;lt;&lt;/span&gt;bool&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;final&lt;/span&gt; storedRefreshToken &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; secureStorage&lt;span&gt;.&lt;/span&gt;&lt;span&gt;read&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;:&lt;/span&gt; REFRESH_TOKEN_KEY&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;storedRefreshToken &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;try&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;final&lt;/span&gt; TokenResponse&lt;span&gt;?&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; appAuth&lt;span&gt;.&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;TokenRequest&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          AUTH0_CLIENT_ID&lt;span&gt;,&lt;/span&gt;&#xA;          AUTH0_REDIRECT_URI&lt;span&gt;,&lt;/span&gt;&#xA;          issuer&lt;span&gt;:&lt;/span&gt; AUTH0_ISSUER&lt;span&gt;,&lt;/span&gt;&#xA;          refreshToken&lt;span&gt;:&lt;/span&gt; storedRefreshToken&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;final&lt;/span&gt; String setResult &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; &lt;span&gt;_setLocalVariables&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;result&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;return&lt;/span&gt; setResult &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#39;Success&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;catch&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;e&lt;span&gt;,&lt;/span&gt; s&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;error on Refresh Token: $e - stack: $s&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;// logOut() possibly&lt;/span&gt;&#xA;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;init&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; checks for a Refresh Token in secure storage and immediately returns &lt;code&gt;&lt;span&gt;false&lt;/span&gt;&lt;/code&gt; if there isn’t one. However, if it finds a Refresh Token, &lt;code&gt;&lt;span&gt;init&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; passes the retrieved request token via a &lt;code&gt;TokenRequest&lt;/code&gt; object to &lt;code&gt;appAuth&lt;span&gt;.&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; in order to automatically get new access, ID, and Refresh Tokens without requiring the user to log in manually.&lt;/p&gt;&lt;h3 id=&#34;Enabling-login-on-the-home-screen&#34;&gt;Enabling login on the home screen&lt;/h3&gt;&lt;p&gt;Now that you have the underlying methods for login and initial setup, it’s time to implement similar methods for the app’s screens, whose code is in the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;screens&lt;span&gt;/&lt;/span&gt;&lt;/code&gt; directory. &lt;/p&gt;&lt;p&gt;🛠 The app’s home screen is implemented in the &lt;code&gt;HomeScreen&lt;/code&gt; class, located in &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;screens&lt;span&gt;/&lt;/span&gt;home&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;. Open that file and add this line to the other &lt;code&gt;&lt;span&gt;import&lt;/span&gt;&lt;/code&gt; statements:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/home.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:mjcoffee/services/auth_service.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now scroll past the &lt;code&gt;HomeScreen&lt;/code&gt; class to the &lt;code&gt;_HomeScreenState&lt;/code&gt; class. You’ll need to make some changes to this class.&lt;/p&gt;&lt;p&gt;🛠 The first set of changes is to the instance variables at the start of &lt;code&gt;_HomeScreenState&lt;/code&gt;. Change them to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/home.dart&lt;/span&gt;&#xA;&#xA;    bool isProgressing &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    bool isLoggedIn &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    String errorMessage &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    String&lt;span&gt;?&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 The &lt;code&gt;&lt;span&gt;initState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method is just below those variables. Right now, the only thing it does is call its counterpart in the superclass. Replace the &lt;code&gt;implement init action&lt;/code&gt; comments with a call to &lt;code&gt;&lt;span&gt;initAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;. The method should look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/home.dart&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;@override&lt;/span&gt;&#xA;  &lt;span&gt;void&lt;/span&gt; &lt;span&gt;initState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;initAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;initState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You’ll implement &lt;code&gt;&lt;span&gt;initAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; shortly.&lt;/p&gt;&lt;p&gt;Finally, look at the &lt;code&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method, which defines the home screen’s user interface. Scroll through this method until you find this &lt;code&gt;&lt;span&gt;Row&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; function call:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;Row&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  mainAxisAlignment&lt;span&gt;:&lt;/span&gt; MainAxisAlignment&lt;span&gt;.&lt;/span&gt;center&lt;span&gt;,&lt;/span&gt;&#xA;  children&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;Widget&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;isProgressing&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;CircularProgressIndicator&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;isLoggedIn&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;CommonButton&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        onPressed&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            CoffeeRouter&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pushReplacement&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenuScreen&lt;span&gt;.&lt;/span&gt;&lt;span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;/// ----------------------&lt;/span&gt;&#xA;            &lt;span&gt;/// Implement login action&lt;/span&gt;&#xA;            &lt;span&gt;/// ----------------------&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        text&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;Login | Register&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;else&lt;/span&gt;&#xA;      &lt;span&gt;Text&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;Welcome $name&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;// &amp;lt;Widget&amp;gt;[]&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Replace the &lt;code&gt;Implement login section&lt;/code&gt; comments so that the &lt;code&gt;&lt;span&gt;Row&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; function call in the &lt;code&gt;build&lt;/code&gt; looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;Row&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  mainAxisAlignment&lt;span&gt;:&lt;/span&gt; MainAxisAlignment&lt;span&gt;.&lt;/span&gt;center&lt;span&gt;,&lt;/span&gt;&#xA;  children&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;Widget&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;isProgressing&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;CircularProgressIndicator&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;isLoggedIn&lt;span&gt;)&lt;/span&gt;&#xA;      &lt;span&gt;CommonButton&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        onPressed&lt;span&gt;:&lt;/span&gt; loginAction&lt;span&gt;,&lt;/span&gt;&#xA;        text&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;Login | Register&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;else&lt;/span&gt;&#xA;      &lt;span&gt;Text&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;Welcome $name&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;// &amp;lt;Widget&amp;gt;[]&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Now add these methods to &lt;code&gt;_HomeScreenState&lt;/code&gt;, after the &lt;code&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;setSuccessAuthState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    isProgressing &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    isLoggedIn &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    name &lt;span&gt;=&lt;/span&gt; AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;idToken&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  CoffeeRouter&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;push&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenuScreen&lt;span&gt;.&lt;/span&gt;&lt;span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;setLoadingState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    isProgressing &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    errorMessage &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;Future&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;loginAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;setLoadingState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; message &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;message &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#39;Success&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;setSuccessAuthState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      isProgressing &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      errorMessage &lt;span&gt;=&lt;/span&gt; message&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;initAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;setLoadingState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;final&lt;/span&gt; bool isAuth &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;init&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;isAuth&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;setSuccessAuthState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      isProgressing &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some notes about these methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;initAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; is called when the home screen is initiated and handles the case where the app has a Refresh Token.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;&lt;span&gt;Row&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; function call in the &lt;code&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method determines what the user sees based on their login status. When the user is logged in, the screen shows a welcome message containing the user’s name. When the user isn’t logged in, it shows a progress indicator if the login is in progress, or the “Login | Register” button otherwise.&lt;/li&gt;&lt;li&gt;Pressing the “Login | Register” button causes the &lt;code&gt;&lt;span&gt;loginAction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to be called.&lt;/li&gt;&lt;li&gt;A loading indicator will appear if the login is in progress.&lt;/li&gt;&lt;li&gt;A number of methods call &lt;code&gt;&lt;span&gt;setSuccessAuthState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, which set the home screen’s instance variables to the appropriate values and redirects the user to the proper screen. In case some operation fails, you can easily display an error message onscreen.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Logging-in&#34;&gt;Logging in&lt;/h3&gt;&lt;p&gt;🛠 If you’ve made it this far, you’ve done well, and it’s now time to see what you’ve achieved so far. Make sure your emulators or devices are active and stop any earlier versions of this app. Once you’ve done that, run the app using this command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;flutter run -d all --dart-define&lt;span&gt;=&lt;/span&gt;AUTH0_DOMAIN&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;YOUR DOMAIN&lt;span&gt;]&lt;/span&gt; --dart-define&lt;span&gt;=&lt;/span&gt;AUTH0_CLIENT_ID&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;YOUR CLIENT ID&lt;span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the app is loaded, tap on the &amp;#34;Login | Register&amp;#34; button.&lt;/p&gt;&lt;p&gt;On iOS, when you run the app for the first time, you will see a prompt like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/35URcfKhXm5Mw9H6UCEZMh/f60c8a3bf99f629b5fad6884c1c1d579/ASWebAuthenticationSession.png&#34; alt=&#34;Allowed callback URLs&#34;/&gt;&lt;/p&gt;&lt;p&gt;This prompt is a result of iOS’ &lt;a href=&#34;https://developer.apple.com/documentation/authenticationservices/aswebauthenticationsession&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;ASWebAuthenticationSession&lt;/code&gt;&lt;/a&gt;, a session where the user is authenticated through a web service. iOS is notifying the user that the app intends to log the user in using Auth0.&lt;/p&gt;&lt;p&gt;If you tap “Continue” and all goes well, you will see the &lt;a href=&#34;https://auth0.com/docs/universal-login&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Universal Login page&lt;/a&gt;, shown below (the Android version is on the left, and the iOS version is on the right): &lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4XJ2EMjdhToaGmbQfYrSq5/a1273bdef7feacf4bdc82de2d7ef3379/auth0-login.png&#34; alt=&#34;Allowed callback URLs&#34;/&gt;&lt;/p&gt;&lt;p&gt;Note that you can style this page or even choose other templates in the Auth0 dashboard. &lt;a href=&#34;https://www.youtube.com/playlist?list=PLCOnzDflrUceRLfHEkl-u2ipjsre6ZwjV&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Watch this video to learn more about the theming of the login page in Auth0&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Once you log in, you will be redirected to the application, where you’ll be greeted by name. You’ll then be redirected to the menu screen, as specified by the final line in &lt;code&gt;_HomeScreenState&lt;/code&gt;’s &lt;code&gt;&lt;span&gt;setSuccessAuthState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;CoffeeRouter&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;push&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MenuScreen&lt;span&gt;.&lt;/span&gt;&lt;span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;If you signed up for a new account using the app, you might receive a confirmation email from Auth0 for the app.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;🛠 To confirm that the Refresh Token works, terminate the app, and run it again. The application will retrieve the Refresh Token from a secure store, get a new Access Token and ID Token, and then take you straight to the menu screen, bypassing the login process and not asking for your credentials.&lt;/p&gt;&lt;h2 id=&#34;Simple-Logout&#34;&gt;Simple Logout&lt;/h2&gt;&lt;h3 id=&#34;Layers-of-sessions&#34;&gt;Layers of sessions&lt;/h3&gt;&lt;p&gt;Every login requires logout! It’s more complicated than it looks  since there are typically three-session layers you need to consider:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Application Session Layer:&lt;/strong&gt; This is the application, which in this case is the MJ Coffee app.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Auth0 Session Layer:&lt;/strong&gt; Auth0 maintains a session for each logged-in user and stores their information inside a cookie or in some other way.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Identity Provider Session Layer:&lt;/strong&gt; This is another service providing identity services, such as Facebook or Google.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After users log out, you can redirect users to a specific URL. You need to register the redirect URL in your tenant or application settings.&lt;/p&gt;&lt;p&gt;One of the parameters for OIDC authentication requests is called &lt;code&gt;prompt&lt;/code&gt;, which specifies how the user should be prompted for reauthentication and consent. It also makes it easy to clear sessions. &lt;/p&gt;&lt;p&gt;&lt;code&gt;prompt&lt;/code&gt; takes a list that can contain any combination of these values:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;none&lt;/code&gt;&lt;/strong&gt;: Do not display any authentication or consent user interface pages.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;login&lt;/code&gt;&lt;/strong&gt;: Ignore any existing session and require the user to log in.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;consent&lt;/code&gt;&lt;/strong&gt;: Ask the user for consent before returning information to the app.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;select_account&lt;/code&gt;&lt;/strong&gt;: Show a prompt asking the user to select a user account. Useful in cases where the user has multiple accounts.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 Luckily, &lt;code&gt;prompt&lt;/code&gt; is supported in the &lt;code&gt;AppAuth&lt;/code&gt; SDK. In the &lt;code&gt;AuthService&lt;/code&gt; class (located in &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;services&lt;span&gt;/&lt;/span&gt;auth_service&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;) locate the &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method, where you have constructed &lt;code&gt;AuthorizationTokenRequest&lt;/code&gt;. Change your call to the &lt;code&gt;AuthorizationTokenRequest&lt;/code&gt; constructor so that it includes &lt;code&gt;login&lt;/code&gt; as a &lt;code&gt;prompt&lt;/code&gt; value:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/auth_service.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;final&lt;/span&gt; authorizationTokenRequest &lt;span&gt;=&lt;/span&gt; &lt;span&gt;AuthorizationTokenRequest&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  AUTH0_CLIENT_ID&lt;span&gt;,&lt;/span&gt;&#xA;  AUTH0_REDIRECT_URI&lt;span&gt;,&lt;/span&gt;&#xA;  issuer&lt;span&gt;:&lt;/span&gt; AUTH0_ISSUER&lt;span&gt;,&lt;/span&gt;&#xA;  scopes&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;openid&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;profile&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;offline_access&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  promptValues&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Remove-the-Refresh-Token&#34;&gt;Remove the Refresh Token&lt;/h3&gt;&lt;p&gt;Thanks to the Refresh Token, the user should be able to switch to another app or even close it and then return to MJ Coffee without having to re-authenticate because they’re still logged in. Logging out implies that the user is done with the app for now. The next time someone uses the app, they should be required to log in. This is done by removing the Refresh Token.&lt;/p&gt;&lt;p&gt;🛠 To remove the Refresh Token, we’ll need to remove the Refresh Token key from secure storage. Add this &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to &lt;code&gt;AuthService&lt;/code&gt;, just after the &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/services/auth_service.dart&lt;/span&gt;&#xA;&#xA;Future&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;await&lt;/span&gt; secureStorage&lt;span&gt;.&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;:&lt;/span&gt; REFRESH_TOKEN_KEY&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next time the user runs the app, they’ll be sent to the home screen and its login button since the app no longer has a Refresh Token and hence no way to authenticate automatically. &lt;/p&gt;&lt;p&gt;While this is approach is sufficient for the MJ Coffee app, I would like to mention that you can also manually call logout endpoints and pass necessary parameters, and shown in the example below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Example:&lt;/span&gt;&#xA;&#xA;Future&lt;span&gt;&amp;lt;&lt;/span&gt;bool&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;await&lt;/span&gt; secureStorage&lt;span&gt;.&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;:&lt;/span&gt; REFRESH_TOKEN_KEY&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;final&lt;/span&gt; url &lt;span&gt;=&lt;/span&gt; Uri&lt;span&gt;.&lt;/span&gt;&lt;span&gt;https&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      AUTH0_DOMAIN&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;/v2/logout&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; AUTH0_CLIENT_ID&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#39;federated&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;//&amp;#39;returnTo&amp;#39;: &amp;#39;YOUR_RETURN_LOGOUT_URL&amp;#39;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;final&lt;/span&gt; response &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; http&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      url&lt;span&gt;,&lt;/span&gt;&#xA;      headers&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;Bearer $auth0AccessToken&amp;#39;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;logout: ${response.request} ${response.statusCode} ${response.body}&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;statusCode &lt;span&gt;==&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For more information, you can read &lt;a href=&#34;https://auth0.com/docs/logout&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0’s documentation on logout.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;🛠 Let’s enable the “Logout” button. It is on the profile screen, which is implemented by the &lt;code&gt;ProfileScreen&lt;/code&gt; class (located in &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;screens&lt;span&gt;/&lt;/span&gt;profile&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;). In the &lt;code&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method, locate the   “Logout” button and its &lt;code&gt;onPressed&lt;/code&gt; parameter. Replace the “Perform logout” comments so that the call to the &lt;code&gt;&lt;span&gt;Padding&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; function looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /lib/screens/profile.dart&lt;/span&gt;&#xA;&#xA;&lt;span&gt;Padding&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;  padding&lt;span&gt;:&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; EdgeInsets&lt;span&gt;.&lt;/span&gt;&lt;span&gt;symmetric&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;horizontal&lt;span&gt;:&lt;/span&gt; &lt;span&gt;30&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  child&lt;span&gt;:&lt;/span&gt; &lt;span&gt;CommonButton&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    onPressed&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;await&lt;/span&gt; AuthService&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      CoffeeRouter&lt;span&gt;.&lt;/span&gt;instance&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pushReplacement&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;HomeScreen&lt;span&gt;.&lt;/span&gt;&lt;span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    text&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;Logout&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When the user presses “Logout”, the &lt;code&gt;AuthService&lt;/code&gt; instance’s &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; is called and the user is redirected to the home screen.&lt;/p&gt;&lt;p&gt;🛠 Since you’re making use of &lt;code&gt;AuthService&lt;/code&gt;’s &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method, you’ll have to import its file. Add the following to the &lt;code&gt;&lt;span&gt;import&lt;/span&gt;&lt;/code&gt; statements at the top of &lt;code&gt;&lt;span&gt;/&lt;/span&gt;lib&lt;span&gt;/&lt;/span&gt;screens&lt;span&gt;/&lt;/span&gt;profile&lt;span&gt;.&lt;/span&gt;dart&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;package:mjcoffee/services/auth_service.dart&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Restart your application, go to the &lt;strong&gt;Profile&lt;/strong&gt; screen and log out. You’ll be sent back to the home screen. You will have to log in to use the app again.&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Congratulations! You have just integrated Auth0-powered login and logout into the MJ Coffee app.&lt;/p&gt;&lt;p&gt;In an upcoming section, you will continue to add authentication features to the app. You’ll learn more about Refresh Token rotation, managing the branding that appears in the login box, roles and adding social login via Apple and Google accounts.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/flutter-authentication-authorization-with-auth0-part-1-adding-authentication-to-an-app/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">In this tutorial, you’ll learn how to enhance your Flutter apps by enabling authentication, supporting federated identity providers, adding authorization by introducing roles and permissions, all leveraging Auth0.</summary>
    <author>
      <name>Authentication vs. authorization</name>
    </author>
  </entry>
  <entry>
    <title>Let the Hunt Begin: Introducing Auth0’s First Capture the Flag Event.</title>
    <updated>2021-10-01T14:56:00Z</updated>
    <id>tag:auth0.com,2021-10-01:/blog/introducing-auth0-ctf/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;From companies to consumers, we believe everyone has a responsibility to make technology as secure as possible. For Auth0, this means building secure processes, technology, tools, and a culture of trust that puts people at the center. So this year we want you to join us for our first-ever custom Capture The Flag (CTF) with &lt;a href=&#34;https://www.hackthebox.eu/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Hack The Box&lt;/a&gt; from October 18th to October 25th.&lt;/p&gt;&lt;h2 id=&#34;But-Wait-a-Minute--What-Is-a-CTF-&#34;&gt;But Wait a Minute, What Is a CTF?&lt;/h2&gt;&lt;p&gt;A CTF or Capture The Flag is a cybersecurity competitive game where you have to solve or hack different types of challenges to gain access to a string -the flag- which looks something like this: &lt;code&gt;&lt;span&gt;HTB&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;m1_f1rst_fl4g&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;You enter that flag into Hack The Box and get points depending on the difficulty of the challenge. The team with the most points wins the game.&lt;/p&gt;&lt;h2 id=&#34;Sounds-Easy--Is-That-It-&#34;&gt;Sounds Easy, Is That It?&lt;/h2&gt;&lt;p&gt;But winning alone is not the goal in our case. We designed our CTF with developers getting started in the security world in mind. &lt;/p&gt;&lt;p&gt;The benefit of learning cybersecurity principles and hacking techniques through a CTF is that you have certainty that the vulnerability exists in the challenge. When you go hacking in the real world, you don’t know whether the environment will be vulnerable or not. CTFs can also help you develop an attacker mindset, so the more you practice, the more secure and defensive your code will be.&lt;/p&gt;&lt;p&gt;Rikaard Hosein, Offensive Security Engineer (i.e hacker) at Auth0, and the mastermind behind this event got started in cybersecurity thanks to CTFs. &lt;em&gt;“I solved my first cybersecurity web challenge when I was 15 and I was hooked. I kept on practicing CTFs in my spare time, and thanks to them I was able to transition from a developer role to Auth0’s offensive security engineering team. I designed the challenge concepts for this CTF to give you a little taste of what the CTF world is like, and to help you learn about cybersecurity”&lt;/em&gt;. &lt;/p&gt;&lt;p&gt;Our CTF is a Jeopardy-style one, meaning that the team that gets the most points wins. We have different types of challenges:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Web: &lt;/strong&gt;here you’ll find mostly web-based vulnerability and also authentication/authorization issues (of course we had to include that!). Web development knowledge will come in very handy on these.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cryptography:&lt;/strong&gt; here you can find some improperly implemented encryption schemes, different (and perhaps a bit uncommon 😉) ciphers, and more.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Reverse Engineering:&lt;/strong&gt; some challenges may include a lower-level programming language like Assembly, decompiling code, debugging by doing step-by-step execution.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Pwn - Binary Exploitation: &lt;/strong&gt;the 0s and 1s! Finding a vulnerability in a binary or executable file.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Misc:&lt;/strong&gt; surprise&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To solve these challenges you can use a wide range of freely available tools and decipher websites. Rikaard recommends a simple tool belt: a great mindset (learn, have fun, keep trying), &lt;a href=&#34;https://portswigger.net/burp/communitydownload&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;burp suite community edition&lt;/a&gt;, your favorite scripting language, &lt;a href=&#34;https://www.gnu.org/software/gdb/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GDB&lt;/a&gt; and &lt;a href=&#34;https://hex-rays.com/ida-free/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;IDA&lt;/a&gt;. You may need other tools but finding those is also part of the challenge 😉.&lt;/p&gt;&lt;h2 id=&#34;I-m-Excited--How-Can-I-Join-&#34;&gt;I’m Excited. How Can I Join?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;No prior experience is required.&lt;/li&gt;&lt;li&gt;You can participate either on your own or with a team of up to five people. We strongly recommend you find a team.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://ctf.hackthebox.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Create an account in Hack The Box&lt;/a&gt; and sign up for the CTF starting now to get ready for October 18th. If you are part of a team, only the team captain needs to join the CTF (but everyone needs to have an account)&lt;/li&gt;&lt;li&gt;Join Hack The Box’s &lt;a href=&#34;https://discord.gg/hackthebox&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;discord channel&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Get ready to hack your way to the podium.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Resources-to-Get-Started&#34;&gt;Resources to Get Started&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://help.hackthebox.eu/en/articles/5200851-gs-introduction-to-ctf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Hack The Box Introduction to CTFs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://ctf101.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CTF 101&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://ctftime.org/writeups&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CTF Write ups &lt;/a&gt;(solutions to previous worldwide events)&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://trailofbits.github.io/ctf/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CTF Field Guide by Trailofbits&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/introducing-auth0-ctf/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Auth0’s first custom CTF with Hack The Box in honor of October Security Awareness Month</summary>
  </entry>
  <entry>
    <title>Spring Boot Logs Aggregation and Monitoring Using ELK Stack</title>
    <updated>2021-09-30T14:53:00Z</updated>
    <id>tag:auth0.com,2021-09-30:/blog/spring-boot-logs-aggregation-and-monitoring-using-elk-stack/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Logs are the most critical way for debugging. They can help us follow the different operations carried out by the various services of our system.&lt;/p&gt;&lt;p&gt;This article will demonstrate how to integrate ELK Stack with a Spring Boot application for logs aggregation and monitoring in a centralized and scalable way.&#xA;You will also learn how to create custom index patterns through a Filebeat configuration and separate logs of different services of the same application by different indexes.&#xA;The application&amp;#39;s source code used in this tutorial is available in this &lt;a href=&#34;https://github.com/ApoorvTyagi/Spring-ELK&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Introduction&#34;&gt;Introduction&lt;/h2&gt;&lt;p&gt;Having a good log monitoring infrastructure is a key feature to have while developing any software. For instance, in a microservices architecture, any single operation triggers a chain of API calls making it challenging to debug the entire application in case an error comes.&lt;/p&gt;&lt;p&gt;This is where Logs act as essential information that allows us to investigate better and diagnose the errors. They can help sysadmins, support teams, and even developers to follow the different operations carried out by the different services of the system.&lt;/p&gt;&lt;p&gt;But it becomes very complex to maintain this critical data in a distributed environment where many applications, services, and systems are running. As a solution for this problem, we&amp;#39;re going to look at the &lt;strong&gt;ELK stack&lt;/strong&gt;, a useful tool for centralized log aggregation and analysis.&lt;/p&gt;&lt;p&gt;This article will demonstrate how you can integrate ELK Stack with a Spring Boot application to collect, process, store, and view the logs.&lt;/p&gt;&lt;p&gt;Apart from this, while working with the ELK stack, the default action is to show all the logs of a particular application at a single place inside Kibana.&lt;/p&gt;&lt;p&gt;In this article, you will also tackle this problem and learn how you can view the logs of multiple services separately that are running in parallel inside one single application.&lt;/p&gt;&lt;h2 id=&#34;Introducing-ELK-Stack&#34;&gt;Introducing ELK Stack&lt;/h2&gt;&lt;p&gt;ELK is a collection of three open-source applications - &lt;a href=&#34;https://www.elastic.co/elasticsearch/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Elasticsearch&lt;/a&gt;, &lt;a href=&#34;https://www.elastic.co/logstash/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Logstash&lt;/a&gt;, and &lt;a href=&#34;https://www.elastic.co/kibana/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Kibana&lt;/a&gt; from &lt;a href=&#34;https://www.elastic.co/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Elastic&lt;/a&gt; that accepts data from any source or format, on which you can then perform search, analysis, and visualize that data.&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;strong&gt;Elasticsearch&lt;/strong&gt; — Elasticsearch stores and indexes the data. It is a NoSQL database based on Lucene&amp;#39;s open-source search engine. Since Elasticsearch is developed using Java, therefore, it can run on different platforms. One particular aspect where it excels is indexing streams of data such as logs.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Logstash&lt;/strong&gt; — Logstash is a tool that integrates with a variety of deployments. It is used to collect, parse, transform, and buffer data from a variety of sources. The data collected by Logstash can be shipped to one or more targets like Elasticsearch.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Kibana&lt;/strong&gt; — Kibana acts as an analytics and visualization layer on top of Elasticsearch.  Kibana can be used to search, view, and interpret the data stored in Elasticsearch.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;ELK-Installation---Other-Configurations&#34;&gt;ELK Installation &amp;amp; Other Configurations&lt;/h2&gt;&lt;p&gt;Now that you understand what ELK means, let&amp;#39;s learn how to configure all three components to your local development environment:&lt;/p&gt;&lt;h3 id=&#34;Elasticsearch&#34;&gt;Elasticsearch&lt;/h3&gt;&lt;p&gt;Download the Elasticsearch zip file from the &lt;a href=&#34;https://www.elastic.co/downloads/elasticsearch&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;official elastic website&lt;/a&gt; and extract the zip file contents.&lt;/p&gt;&lt;p&gt;Next, you can start the Elasticsearch cluster by running &lt;code&gt;bin&lt;span&gt;/&lt;/span&gt;elasticsearch&lt;/code&gt; on Linux and macOS or &lt;code&gt;bin\elasticsearch&lt;span&gt;.&lt;/span&gt;bat&lt;/code&gt; on Windows.&lt;/p&gt;&lt;p&gt;To make sure the Elasticsearch cluster is up and working fine, open the browser at &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;9200&lt;/span&gt;&lt;/code&gt;. You must see something similar to this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_PC_NAME&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;cluster_name&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;elasticsearch&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;cluster_uuid&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Qz59cUdbQRuRTVct1h3HiA&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;version&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;number&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;7.13.2&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;build_flavor&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;build_type&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;zip&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;build_hash&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;4d960a0733be83dd2543ca018aa4ddc42e956800&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;build_date&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;2021-06-10T21:01:55.251515791Z&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;build_snapshot&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;lucene_version&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;8.8.2&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;minimum_wire_compatibility_version&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;6.8.0&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;minimum_index_compatibility_version&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;6.0.0-beta1&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;tagline&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;You Know, for Search.&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Kibana&#34;&gt;Kibana&lt;/h3&gt;&lt;p&gt;Setting up Kibana is similar to Elasticsearch. Just download the latest version application from the &lt;a href=&#34;https://www.elastic.co/downloads/kibana&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;official website&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;To start Kibana, run &lt;code&gt;bin&lt;span&gt;/&lt;/span&gt;kibana&lt;/code&gt; on Linux and macOS or &lt;code&gt;bin&lt;span&gt;/&lt;/span&gt;kibana&lt;span&gt;.&lt;/span&gt;bat&lt;/code&gt; on Windows.&lt;/p&gt;&lt;p&gt;By default, Kibana listens on port 5601. If you go to &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;5601&lt;/span&gt;&lt;/code&gt;, you should be redirected to the Kibana home page:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7AHCnDDJCuJoGdIeu9kEme/27f2716e95dc611dbd0f69d79fe9a6e4/elk_01.png&#34; alt=&#34;Kibana_Start&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Logstash&#34;&gt;Logstash&lt;/h3&gt;&lt;p&gt;Download and extract the latest version of Logstash from &lt;a href=&#34;https://www.elastic.co/downloads/logstash&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;official Logstash downloads&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Here, inside the &lt;code&gt;bin&lt;/code&gt; folder, you need to create one configuration(.conf) file. For instance, in this case, you will be creating &lt;code&gt;logstash&lt;span&gt;.&lt;/span&gt;conf&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;A Logstash configuration consists of 3 components:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. Input&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The input section in the configuration file defines the name and the absolute path of the file from where data has to be fetched. In your case, it will be from the log file generated by the spring boot application.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. Filter&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The filter section defines what processing you want to apply to the data.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. Output&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The output section defines the target where you want to send the data (elasticsearch, for example).&lt;/p&gt;&lt;p&gt;So your &lt;code&gt;logstash&lt;span&gt;.&lt;/span&gt;conf&lt;/code&gt; file should look similar to this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;input &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;filter &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;output &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the further section, you will be making the changes in this file to pass the Spring Boot application logs to elasticsearch.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;To run the logstash configuration file, use command: &lt;code&gt;logstash &lt;span&gt;-&lt;/span&gt;f &lt;span&gt;&amp;lt;&lt;/span&gt;file&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;conf&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Apart from these, the other prerequisites required to follow this tutorial are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/in/java/technologies/javase-jdk11-downloads.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Java 11&lt;/a&gt; or later version&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://maven.apache.org/download.cgi&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Apache Maven&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.postman.com/downloads/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Postman App&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Also, this tutorial requires you have a basic understanding of how REST APIs work in Spring Boot.&lt;/p&gt;&lt;h2 id=&#34;Creating-a-Spring-Boot-Application&#34;&gt;Creating a Spring Boot Application&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s now begin with creating the microservice. You will be using Spring Boot to create the REST APIs, and then you&amp;#39;ll integrate it with the ELK stack that you saw above.&lt;/p&gt;&lt;p&gt;To start with Spring Boot, you can create a basic project using the &lt;a href=&#34;https://start.spring.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring Boot Initializr&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;Select Maven project and Java language. For the Spring Boot version, select &lt;code&gt;&lt;span&gt;2.5&lt;/span&gt;&lt;span&gt;.4&lt;/span&gt;&lt;/code&gt;. You will also have to add the &lt;code&gt;spring&lt;span&gt;-&lt;/span&gt;boot&lt;span&gt;-&lt;/span&gt;starter&lt;span&gt;-&lt;/span&gt;web&lt;/code&gt; dependency.&lt;/p&gt;&lt;p&gt;Next, fill in the project metadata. Set group as &lt;code&gt;com&lt;span&gt;.&lt;/span&gt;demo&lt;/code&gt;, artifact and name as &lt;code&gt;&lt;span&gt;ELK&lt;/span&gt;&lt;/code&gt;, package as &lt;code&gt;com&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ELK&lt;/span&gt;&lt;/code&gt;. Last but not least, enter a short description and click the &lt;code&gt;generate&lt;/code&gt; button.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2YRj4WBbKsNyC8w1ebSQdc/5a8d316ff646df959f549f712e3449e8/elk_02.png&#34; alt=&#34;Spring&#34;/&gt;&lt;/p&gt;&lt;p&gt;Open the project folder in your favorite IDE and open the &lt;code&gt;pom&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;Add the following code to the &lt;code&gt;pom&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; to configure the extra dependencies that you are going to use in this Spring Boot project:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;project&lt;/span&gt; &lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;http://maven.apache.org/POM/4.0.0&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;xmlns:&lt;/span&gt;xsi&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;http://www.w3.org/2001/XMLSchema-instance&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;xsi:&lt;/span&gt;schemaLocation&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;4.0.0&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;2.5.3&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;com.demo&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;ELK&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;ELK&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Logs monitoring and aggregation using ELK stack&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;11&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;test&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.json&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;json&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;20180130&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;com.googlecode.json-simple&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;json-simple&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;1.1&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, create a new package &lt;code&gt;com&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ELK&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;controller&lt;/code&gt;. Inside this, make a new Java file called &lt;code&gt;ELKController&lt;span&gt;.&lt;/span&gt;java&lt;/code&gt; to define the REST Controller for exposing the API endpoints. &lt;/p&gt;&lt;p&gt;You will call these APIs to print the content to your log file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;ELK&lt;span&gt;.&lt;/span&gt;controller&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;fasterxml&lt;span&gt;.&lt;/span&gt;jackson&lt;span&gt;.&lt;/span&gt;databind&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;JsonNode&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;json&lt;span&gt;.&lt;/span&gt;simple&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;JSONArray&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;slf4j&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Logger&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;slf4j&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;LoggerFactory&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;beans&lt;span&gt;.&lt;/span&gt;factory&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Autowired&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;bind&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;GetMapping&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;bind&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;PathVariable&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;bind&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;RequestMapping&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;bind&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;RestController&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;util&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Date&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@RestController&lt;/span&gt;&#xA;&lt;span&gt;@RequestMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;value &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;/api&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ELKController&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// Initializing instance of Logger for Controller&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;Logger&lt;/span&gt; log &lt;span&gt;=&lt;/span&gt; &lt;span&gt;LoggerFactory&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getLogger&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ELKController&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;ELKService&lt;/span&gt; service&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;RestService&lt;/span&gt; restService&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ELKController&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ELKService&lt;/span&gt; service&lt;span&gt;,&lt;/span&gt; &lt;span&gt;RestService&lt;/span&gt; restService&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;service &lt;span&gt;=&lt;/span&gt; service&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;restService &lt;span&gt;=&lt;/span&gt; restService&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@GetMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;value &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;/hello&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;helloWorld&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        log&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Inside Hello World Function&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;String&lt;/span&gt; response &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Hello World! &amp;#34;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        log&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Response =&amp;gt; {}&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; response&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@GetMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;value &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;/Food-Details&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;JSONArray&lt;/span&gt; &lt;span&gt;foodDetails&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        log&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Inside Food Detail Function&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; service&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getAllFoodDetails&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here you are exposing two endpoints which are: &lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;hello&lt;/code&gt; — It returns the &amp;#34;Hello World!&amp;#34; message with the current timestamp.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;Food&lt;span&gt;-&lt;/span&gt;Details&lt;/code&gt; — It gives the details of some food data, which is stored inside a JSON file.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The &lt;code&gt;ELKService&lt;/code&gt; class for that is as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;ELK&lt;span&gt;.&lt;/span&gt;services&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;json&lt;span&gt;.&lt;/span&gt;simple&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;JSONArray&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;json&lt;span&gt;.&lt;/span&gt;simple&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;JSONObject&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;json&lt;span&gt;.&lt;/span&gt;simple&lt;span&gt;.&lt;/span&gt;parser&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;JSONParser&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;json&lt;span&gt;.&lt;/span&gt;simple&lt;span&gt;.&lt;/span&gt;parser&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ParseException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;slf4j&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Logger&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;slf4j&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;LoggerFactory&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;stereotype&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Service&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;io&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;FileReader&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;io&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;IOException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;nio&lt;span&gt;.&lt;/span&gt;charset&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;StandardCharsets&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@Service&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ELKService&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// Initializing instance of Logger for Service&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;Logger&lt;/span&gt; log &lt;span&gt;=&lt;/span&gt; &lt;span&gt;LoggerFactory&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getLogger&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ELKService&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;JSONArray&lt;/span&gt; &lt;span&gt;getAllFoodDetails&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;        log&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Fetching ALL food details...&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;JSONArray&lt;/span&gt; foodDetail &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;JSONArray&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;try&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;JSONParser&lt;/span&gt; parser &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;JSONParser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;Object&lt;/span&gt; obj &lt;span&gt;=&lt;/span&gt; parser&lt;span&gt;.&lt;/span&gt;&lt;span&gt;parse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;FileReader&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;example.json&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;StandardCharsets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;UTF_8&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;JSONObject&lt;/span&gt; jsonObject &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;JSONObject&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; obj&lt;span&gt;;&lt;/span&gt;&#xA;            foodDetail &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;JSONArray&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; jsonObject&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;}&lt;/span&gt; &lt;span&gt;catch&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;IOException&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;ParseException&lt;/span&gt; e&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            log&lt;span&gt;.&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Error occurred in reading JSON file&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            e&lt;span&gt;.&lt;/span&gt;&lt;span&gt;printStackTrace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; foodDetail&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And following is the content inside the &lt;code&gt;example&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; file which you are reading:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;    &#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;productName&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Fresh Avocados&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;🥑&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;from&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Spain&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;nutrients&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Vitamin B, Vitamin K&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;quantity&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;4 🥑&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;price&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;6.50&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;organic&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;A ripe avocado yields to gentle pressure when held in the palm and squeezed. &amp;#34;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;productName&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Cheese&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;🧀&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;from&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Portugal&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;nutrients&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Vitamin A, Calcium&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;quantity&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;250g&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;price&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;5.00&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;organic&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Creamy and distinct in flavor, goat cheese is a dairy product enjoyed around the world.&amp;#34;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;productName&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Broccoli&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;🥦&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;from&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Portugal&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;nutrients&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Vitamin C, Vitamin K&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;quantity&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;3 🥦&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;price&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;5.50&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;organic&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Broccoli is known to be a hearty and tasty vegetable which is rich in dozens of nutrients.&amp;#34;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Creating-Logback-Spring-xml&#34;&gt;Creating Logback-Spring.xml&lt;/h3&gt;&lt;p&gt;Next, you also have to configure the &lt;code&gt;logback&lt;span&gt;-&lt;/span&gt;spring&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; file inside the &lt;code&gt;resources&lt;/code&gt; folder of your project. It will be responsible for printing the logs in the console and to a log file. Logstash will use this log file to feed the data to Elasticsearch.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;appender&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;STDOUT&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;ch.qos.logback.core.ConsoleAppender&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; %d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;appender&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;appender&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;SAVE-TO-FILE&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;ch.qos.logback.core.FileAppender&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;logs/application.log&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;encoder&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;ch.qos.logback.classic.encoder.PatternLayoutEncoder&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; %d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;Pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;logger&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;com.demo.ELK&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;additivity&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;false&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;level&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;info&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;SAVE-TO-FILE&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;STDOUT&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;logger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;root&lt;/span&gt; &lt;span&gt;level&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;INFO&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;STDOUT&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;root&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Loggers&lt;/strong&gt; are responsible for capturing events and passing them to the appender. &lt;strong&gt;Appenders&lt;/strong&gt; (also known as Handlers in some logging frameworks) are responsible for documenting the log events to a destination.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Here inside appenders, you have defined a custom log pattern - &lt;code&gt;&lt;span&gt;%&lt;/span&gt;d&lt;span&gt;{&lt;/span&gt;dd&lt;span&gt;-&lt;/span&gt;&lt;span&gt;MM&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;yyyy &lt;span&gt;HH&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;mm&lt;span&gt;:&lt;/span&gt;ss&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SSS&lt;/span&gt;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;thread&lt;span&gt;]&lt;/span&gt; &lt;span&gt;%&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;level &lt;span&gt;%&lt;/span&gt;logger&lt;span&gt;{&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;M&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; &lt;span&gt;%&lt;/span&gt;msg&lt;span&gt;%&lt;/span&gt;n&lt;/code&gt;. Let us first understand what each of these terms means:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;%d&lt;/strong&gt; – Returns the time when the log message occurred.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;%thread&lt;/strong&gt; – Returns the name of the thread in which the log message occurred.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;%-5level&lt;/strong&gt; – Returns the logging level of the log message (ERROR, WARN, INFO, DEBUG, and TRACE).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;%logger{64}&lt;/strong&gt; – Returns the package with the package and class name where the log message occurred. The number 64 inside the brackets represents the maximum length of the package and class name combined. You can change this number as per your need.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;%M&lt;/strong&gt; – Returns the name of the method where the log message has occurred.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;%msg&lt;/strong&gt; – Returns the actual log message.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;%n&lt;/strong&gt; – Line break.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You have added two appenders here, one for logging in to the console and another one to log to a file.&lt;/p&gt;&lt;p&gt;With that covered, let&amp;#39;s see how you can start your Spring Boot app server using CLI:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Since you are using Maven, run the &lt;code&gt;mvn clean install&lt;/code&gt; command in a terminal window inside your project root directory. This creates a JAR(Java archive) file that contains a compressed version of .class files, audio files, image files, or other directories.&lt;/li&gt;&lt;li&gt;This JAR will be created inside the &lt;code&gt;target&lt;/code&gt; folder in the root directory. Navigate to that directory and run &lt;code&gt;java &lt;span&gt;-&lt;/span&gt;jar &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;JAR_NAME&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;jar &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MAIN_CLASS_NAME&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;. For example - &lt;strong&gt;java -jar ELK-0.0.1-SNAPSHOT.jar com.demo.ELK.ElkApplication&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This will start your Spring Boot application on the default 8080 port:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  &lt;span&gt;.&lt;/span&gt;   ____          _            __ _ _&#xA; &lt;span&gt;/&lt;/span&gt;\\ &lt;span&gt;/&lt;/span&gt; ___&lt;span&gt;&amp;#39;_ __ _ _(_)_ __  __ _ \ \ \ \&#xA;( ( )\___ | &amp;#39;&lt;/span&gt;_ &lt;span&gt;|&lt;/span&gt; &lt;span&gt;&amp;#39;_| | &amp;#39;&lt;/span&gt;_ \&lt;span&gt;/&lt;/span&gt; _` &lt;span&gt;|&lt;/span&gt; \ \ \ \&#xA; \\&lt;span&gt;/&lt;/span&gt;  ___&lt;span&gt;)&lt;/span&gt;&lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;_&lt;span&gt;)&lt;/span&gt;&lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;_&lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;)&lt;/span&gt; &lt;span&gt;)&lt;/span&gt; &lt;span&gt;)&lt;/span&gt;&#xA;  &amp;#39;  &lt;span&gt;|&lt;/span&gt;____&lt;span&gt;|&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;__&lt;span&gt;|&lt;/span&gt;_&lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;_&lt;span&gt;|&lt;/span&gt;_&lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;_\__&lt;span&gt;,&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;/&lt;/span&gt; &lt;span&gt;/&lt;/span&gt; &lt;span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;/span&gt;&#xA; &lt;span&gt;===&lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;_&lt;span&gt;|=&lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;___&lt;span&gt;/=&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;_&lt;span&gt;/&lt;/span&gt;_&lt;span&gt;/&lt;/span&gt;_&lt;span&gt;/&lt;/span&gt;&#xA; &lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Spring Boot &lt;span&gt;:&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;                &lt;span&gt;(&lt;/span&gt;v2&lt;span&gt;.&lt;/span&gt;&lt;span&gt;5.4&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;16.090&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;main&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  com&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ELK&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;ElkApplication&lt;span&gt;.&lt;/span&gt;logStarting &lt;span&gt;-&lt;/span&gt; Starting ElkApplication using Java &lt;span&gt;11.0&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt; on Vulcan &lt;span&gt;with&lt;/span&gt; &lt;span&gt;PID&lt;/span&gt; &lt;span&gt;18048&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;\Git Projects\&lt;span&gt;ELK&lt;/span&gt; Logs Monitoring\&lt;span&gt;ELK&lt;/span&gt;\target\classes started by ApoorvTyagi &lt;span&gt;in&lt;/span&gt; &lt;span&gt;D&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;\Git Projects\&lt;span&gt;ELK&lt;/span&gt; Logs Monitoring\&lt;span&gt;ELK&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;16.098&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;main&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  com&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ELK&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;ElkApplication&lt;span&gt;.&lt;/span&gt;logStartupProfileInfo &lt;span&gt;-&lt;/span&gt; No active profile set&lt;span&gt;,&lt;/span&gt; falling back to &lt;span&gt;default&lt;/span&gt; profiles&lt;span&gt;:&lt;/span&gt; &lt;span&gt;default&lt;/span&gt;&#xA;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;17.573&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;main&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  o&lt;span&gt;.&lt;/span&gt;s&lt;span&gt;.&lt;/span&gt;b&lt;span&gt;.&lt;/span&gt;w&lt;span&gt;.&lt;/span&gt;e&lt;span&gt;.&lt;/span&gt;tomcat&lt;span&gt;.&lt;/span&gt;TomcatWebServer&lt;span&gt;.&lt;/span&gt;initialize &lt;span&gt;-&lt;/span&gt; Tomcat initialized &lt;span&gt;with&lt;/span&gt; &lt;span&gt;port&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;8080&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;http&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;17.589&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;main&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  o&lt;span&gt;.&lt;/span&gt;a&lt;span&gt;.&lt;/span&gt;coyote&lt;span&gt;.&lt;/span&gt;http11&lt;span&gt;.&lt;/span&gt;Http11NioProtocol&lt;span&gt;.&lt;/span&gt;log &lt;span&gt;-&lt;/span&gt; Initializing ProtocolHandler &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;http-nio-8080&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;17.589&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;main&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  o&lt;span&gt;.&lt;/span&gt;a&lt;span&gt;.&lt;/span&gt;catalina&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;StandardService&lt;span&gt;.&lt;/span&gt;log &lt;span&gt;-&lt;/span&gt; Starting service &lt;span&gt;[&lt;/span&gt;Tomcat&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;17.589&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;main&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  o&lt;span&gt;.&lt;/span&gt;a&lt;span&gt;.&lt;/span&gt;catalina&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;StandardEngine&lt;span&gt;.&lt;/span&gt;log &lt;span&gt;-&lt;/span&gt; Starting Servlet engine&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;Apache Tomcat&lt;span&gt;/&lt;/span&gt;&lt;span&gt;9.0&lt;/span&gt;&lt;span&gt;.50&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;17.679&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;main&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  o&lt;span&gt;.&lt;/span&gt;a&lt;span&gt;.&lt;/span&gt;c&lt;span&gt;.&lt;/span&gt;c&lt;span&gt;.&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;Tomcat&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;localhost&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;log &lt;span&gt;-&lt;/span&gt; Initializing Spring embedded WebApplicationContext&#xA;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;17.679&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;main&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  o&lt;span&gt;.&lt;/span&gt;s&lt;span&gt;.&lt;/span&gt;b&lt;span&gt;.&lt;/span&gt;w&lt;span&gt;.&lt;/span&gt;s&lt;span&gt;.&lt;/span&gt;c&lt;span&gt;.&lt;/span&gt;ServletWebServerApplicationContext&lt;span&gt;.&lt;/span&gt;prepareWebApplicationContext &lt;span&gt;-&lt;/span&gt; Root WebApplicationContext&lt;span&gt;:&lt;/span&gt; initialization completed &lt;span&gt;in&lt;/span&gt; &lt;span&gt;1533&lt;/span&gt; ms&#xA;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;18.143&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;main&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  o&lt;span&gt;.&lt;/span&gt;a&lt;span&gt;.&lt;/span&gt;coyote&lt;span&gt;.&lt;/span&gt;http11&lt;span&gt;.&lt;/span&gt;Http11NioProtocol&lt;span&gt;.&lt;/span&gt;log &lt;span&gt;-&lt;/span&gt; Starting ProtocolHandler &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;http-nio-8080&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;18.321&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;main&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  o&lt;span&gt;.&lt;/span&gt;s&lt;span&gt;.&lt;/span&gt;b&lt;span&gt;.&lt;/span&gt;w&lt;span&gt;.&lt;/span&gt;e&lt;span&gt;.&lt;/span&gt;tomcat&lt;span&gt;.&lt;/span&gt;TomcatWebServer&lt;span&gt;.&lt;/span&gt;start &lt;span&gt;-&lt;/span&gt; Tomcat started on &lt;span&gt;port&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;8080&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;http&lt;span&gt;)&lt;/span&gt; &lt;span&gt;with&lt;/span&gt; context path &lt;span&gt;&amp;#39;&amp;#39;&lt;/span&gt;&#xA;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;18.329&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;main&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  com&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ELK&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;ElkApplication&lt;span&gt;.&lt;/span&gt;logStarted &lt;span&gt;-&lt;/span&gt; Started ElkApplication &lt;span&gt;in&lt;/span&gt; &lt;span&gt;3.131&lt;/span&gt; &lt;span&gt;seconds&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;JVM&lt;/span&gt; running &lt;span&gt;for&lt;/span&gt; &lt;span&gt;3.654&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In case you are using an IDE like IntelliJ IDEA, you can run the Spring Boot application by following these instructions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Click on &lt;code&gt;Add Configuration&lt;/code&gt; from the top menu bar&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2VWREZTi4rbVfGvv2varl/f4bcec85847f6b47b7daacbad03296e5/elk_03.png&#34; alt=&#34;IntelliJ_Start&#34;/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A new dialog box will open, click on &lt;code&gt;Add &lt;span&gt;new&lt;/span&gt; &lt;span&gt;run&lt;/span&gt; configurations&lt;/code&gt; and select &lt;code&gt;Maven&lt;/code&gt; from the dropdown&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/gAXnX1CalajGsuEZnNi2n/a45ea122ea20e219d458b9ad2ea13597/elk_04.png&#34; alt=&#34;Intellij_2&#34;/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Give your run configuration a name. The working directory will automatically get picked. You just have to put the command &lt;code&gt;spring&lt;span&gt;-&lt;/span&gt;boot&lt;span&gt;:&lt;/span&gt;run&lt;/code&gt; inside the command line and then click Apply and OK&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6MFpFMhOUDNL4O3CB3ntcL/ed25b8a5c5a584767897ce3ea81bcba5/elk_05.png&#34; alt=&#34;IntelliJ_3&#34;/&gt;&lt;/p&gt;&lt;p&gt;Now run the application, and the next thing you have to do is to hit the endpoints via the Postman app to generate the response and logs:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;GET: &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;get&lt;span&gt;/&lt;/span&gt;hello&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;Hello World&lt;span&gt;!&lt;/span&gt; Tue Aug &lt;span&gt;10&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;01&lt;/span&gt; &lt;span&gt;IST&lt;/span&gt; &lt;span&gt;2021&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;GET: &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;get&lt;span&gt;/&lt;/span&gt;Food&lt;span&gt;-&lt;/span&gt;Details&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;[&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;🥑&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;quantity&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;4 🥑&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;price&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;6.50&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;A ripe avocado yields to gentle pressure when held in the palm and squeezed. &amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;from&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Spain&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;productName&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Fresh Avocados&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;organic&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;nutrients&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Vitamin B, Vitamin K&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;🧀&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;quantity&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;250g&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;price&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;5.00&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Creamy and distinct in flavor, goat cheese is a dairy product enjoyed around the world.&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;from&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Portugal&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;productName&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Cheese&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;organic&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;nutrients&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Vitamin A, Calcium&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;🥦&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;quantity&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;3 🥦&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;price&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;5.50&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Broccoli is known to be a hearty and tasty vegetable which is rich in dozens of nutrients.&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;from&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Portugal&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;productName&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Broccoli&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;organic&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;nutrients&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Vitamin C, Vitamin K&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you check your IDE console, you can see the logs being printed inside it:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Console Logs&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;08&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;01.368&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;http&lt;span&gt;-&lt;/span&gt;nio&lt;span&gt;-&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;exec&lt;span&gt;-&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  c&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ELK&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;controller&lt;span&gt;.&lt;/span&gt;ELKController&lt;span&gt;.&lt;/span&gt;helloWorld &lt;span&gt;-&lt;/span&gt; Inside Hello World Function&#xA;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;08&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;01.376&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;http&lt;span&gt;-&lt;/span&gt;nio&lt;span&gt;-&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;exec&lt;span&gt;-&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  c&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ELK&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;controller&lt;span&gt;.&lt;/span&gt;ELKController&lt;span&gt;.&lt;/span&gt;helloWorld &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Response&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; Hello World&lt;span&gt;!&lt;/span&gt; Sun Aug &lt;span&gt;29&lt;/span&gt; &lt;span&gt;09&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;IST&lt;/span&gt; &lt;span&gt;2021&lt;/span&gt;&#xA;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;08&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;03.955&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;http&lt;span&gt;-&lt;/span&gt;nio&lt;span&gt;-&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;exec&lt;span&gt;-&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  c&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ELK&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;controller&lt;span&gt;.&lt;/span&gt;ELKController&lt;span&gt;.&lt;/span&gt;foodDetails &lt;span&gt;-&lt;/span&gt; Inside Food Detail Function&#xA;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;08&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;03.955&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;http&lt;span&gt;-&lt;/span&gt;nio&lt;span&gt;-&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;exec&lt;span&gt;-&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  com&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ELK&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;services&lt;span&gt;.&lt;/span&gt;ELKService&lt;span&gt;.&lt;/span&gt;getAllFoodDetails &lt;span&gt;-&lt;/span&gt; Fetching &lt;span&gt;ALL&lt;/span&gt; food details&lt;span&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also, a new folder called &lt;code&gt;logs&lt;/code&gt; is created inside the project root directory as specified in the &lt;code&gt;logback&lt;span&gt;-&lt;/span&gt;spring&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt;. Navigate inside this folder, and you will have your &lt;code&gt;application&lt;span&gt;.&lt;/span&gt;log&lt;/code&gt; file containing all the logs generated after hitting those two API endpoints:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;File Logs&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4jojUsThftoW86uIMMzW0y/9043727cb170eb1eb8ecd42cbdf02334/elk_06.png&#34; alt=&#34;File_Logs_1&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Integrating-Logstash-Pipeline&#34;&gt;Integrating Logstash Pipeline&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s go back to where you have your Logstash folder and open the &lt;code&gt;logstash&lt;span&gt;.&lt;/span&gt;conf&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;Add the following content to it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;input &lt;span&gt;{&lt;/span&gt;&#xA;  file &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;type&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;log&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;path&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;/ELK/logs/application.log&amp;#34;&lt;/span&gt;    # Make sure you provide the absolute path &lt;span&gt;of&lt;/span&gt; the file here&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;filter &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;message&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;~&lt;/span&gt; &lt;span&gt;&amp;#34;\tat&amp;#34;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    grok &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;match&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;^(\tat)&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;      &lt;span&gt;add_tag&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;stacktrace&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA; &#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;output &lt;span&gt;{&lt;/span&gt;&#xA;  stdout &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;codec&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; rubydebug&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA; &#xA;  elasticsearch &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;hosts&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;localhost:9200&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;In the input&lt;/strong&gt;, you have specified the type and the complete path of your file. Note that the value of the &lt;code&gt;path&lt;/code&gt; must be absolute and cannot be relative.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;In filters&lt;/strong&gt;, wherever in the logs you will find a Tab character(\t) followed by &amp;#34;at&amp;#34;, you will tag that entry as a stacktrace of an error. &lt;em&gt;Grok&lt;/em&gt; is simply a filter plugin useful to parse and apply queries to unstructured data in Logstash.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;In the output&lt;/strong&gt;, you have defined a response that prints to the STDOUT of the console running Logstash using output codecs.&lt;/p&gt;&lt;p&gt;According to the &lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/plugins-outputs-file.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;official docs&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Output codecs are a convenient method for encoding your data before it leaves the output without needing a separate filter in your Logstash pipeline. Here, &lt;code&gt;rubydebug&lt;/code&gt; outputs event data using the ruby &amp;#34;awesome_print&amp;#34; library. This is the default codec for stdout.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;And finally, you have defined the &lt;strong&gt;output target&lt;/strong&gt;  where these logs have to be sent from logstash, that is, Elasticsearch running locally on port 9200.&lt;/p&gt;&lt;p&gt;Hit the API endpoints again to generate the logs:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;get&lt;span&gt;/&lt;/span&gt;hello&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;get&lt;span&gt;/&lt;/span&gt;Food&lt;span&gt;-&lt;/span&gt;Details&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;This time you can see the logs printing in the logstash console as well. It means Logstash is successfully able to pick the Logs generated inside the &lt;code&gt;application&lt;span&gt;.&lt;/span&gt;log&lt;/code&gt; file: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;@timestamp&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;2021&lt;/span&gt;-09-05T06:34:11.977Z,&#xA;       &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;29-08-2021 09:34:56.368 [http-nio-8080-exec-6] INFO  c.demo.ELK.controller.ELKController.helloWorld - Inside Hello World Function&lt;span title=&#34;\r&#34;&gt;\r&lt;/span&gt;&amp;#34;&lt;/span&gt;,&#xA;          &lt;span&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;log&amp;#34;&lt;/span&gt;,&#xA;      &lt;span&gt;&amp;#34;@version&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,&#xA;          &lt;span&gt;&amp;#34;host&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;Vulcan&amp;#34;&lt;/span&gt;,&#xA;          &lt;span&gt;&amp;#34;path&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;D:/Git Projects/ELK Logs Monitoring/ELK/logs/application.log&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;@timestamp&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;2021&lt;/span&gt;-09-05T06:34:11.977Z,&#xA;       &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;29-08-2021 09:34:56.376 [http-nio-8080-exec-6] INFO  c.demo.ELK.controller.ELKController.helloWorld - Response =&amp;gt; Hello World! Sun Aug 29 09:34:56 IST 2021&lt;span title=&#34;\r&#34;&gt;\r&lt;/span&gt;&amp;#34;&lt;/span&gt;,&#xA;          &lt;span&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;log&amp;#34;&lt;/span&gt;,&#xA;      &lt;span&gt;&amp;#34;@version&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,&#xA;          &lt;span&gt;&amp;#34;host&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;Vulcan&amp;#34;&lt;/span&gt;,&#xA;          &lt;span&gt;&amp;#34;path&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;D:/Git Projects/ELK Logs Monitoring/ELK/logs/application.log&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;@timestamp&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;2021&lt;/span&gt;-09-05T06:34:11.977Z,&#xA;       &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;28-08-2021 20:33:24.598 [http-nio-8080-exec-1] INFO  c.demo.ELK.controller.ELKController.foodDetails - Inside Food Detail Function&lt;span title=&#34;\r&#34;&gt;\r&lt;/span&gt;&amp;#34;&lt;/span&gt;,&#xA;          &lt;span&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;log&amp;#34;&lt;/span&gt;,&#xA;      &lt;span&gt;&amp;#34;@version&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,&#xA;          &lt;span&gt;&amp;#34;host&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;Vulcan&amp;#34;&lt;/span&gt;,&#xA;          &lt;span&gt;&amp;#34;path&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;D:/Git Projects/ELK Logs Monitoring/ELK/logs/application.log&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;@timestamp&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;2021&lt;/span&gt;-09-05T06:34:11.977Z,&#xA;       &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;28-08-2021 20:33:24.600 [http-nio-8080-exec-1] INFO  com.demo.ELK.services.ELKService.getAllFoodDetails - Fetching ALL food details...&lt;span title=&#34;\r&#34;&gt;\r&lt;/span&gt;&amp;#34;&lt;/span&gt;,&#xA;          &lt;span&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;log&amp;#34;&lt;/span&gt;,&#xA;      &lt;span&gt;&amp;#34;@version&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,&#xA;          &lt;span&gt;&amp;#34;host&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;Vulcan&amp;#34;&lt;/span&gt;,&#xA;          &lt;span&gt;&amp;#34;path&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;D:/Git Projects/ELK Logs Monitoring/ELK/logs/application.log&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Creating-Indexes-and-Viewing-Logs-in-Kibana&#34;&gt;Creating Indexes and Viewing Logs in Kibana&lt;/h3&gt;&lt;p&gt;To access data from Elasticsearch, Kibana requires index patterns. As an analogy, in kibana, indexes are like the tables of a SQL database where you can store the data. Therefore, you must create an index pattern first to explore your data.&lt;/p&gt;&lt;p&gt;But how do you know what index to create?&lt;/p&gt;&lt;p&gt;For this, navigate to &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;9200&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;_cat&lt;span&gt;/&lt;/span&gt;indices&lt;/code&gt;; it will display all the indexes that have ever been created inside elasticsearch. Here you will see an index name starting with &amp;#34;logstash-&amp;#34;. This is the index that has been created by Logstash.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4XTKYRUo8MtA57PcHZipQn/cc4b8667e6ea32b9696292b21a8b4f71/elk_07.png&#34; alt=&#34;Indexes_Half&#34;/&gt;&lt;/p&gt;&lt;p&gt;Next, go to &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;5601&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;app&lt;span&gt;/&lt;/span&gt;management&lt;span&gt;/&lt;/span&gt;kibana&lt;span&gt;/&lt;/span&gt;indexPatterns&lt;/code&gt; and click on &lt;strong&gt;create index pattern&lt;/strong&gt; on the top right.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6Tfx0m2k17VGJAdcWa1f8c/78e7c84c9f5082261de82a97b3c2641e/elk_08.png&#34; alt=&#34;Create_Index&#34;/&gt;&lt;/p&gt;&lt;p&gt;Type the index name as &lt;code&gt;logstash&lt;span&gt;-&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/code&gt; and then click on next.&lt;/p&gt;&lt;p&gt;Optionally, in the next step, you can pick a field for filtering the data. You can choose &lt;code&gt;@timestamp&lt;/code&gt; and then click on &lt;strong&gt;Create index pattern&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;After this, head on to the &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;5601&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;app&lt;span&gt;/&lt;/span&gt;discover&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Select the index from the filters that you just created, and you&amp;#39;ll be able to see and analyze the logs.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6NZ3memL5i50CMouUEJOm4/da541dcbd31e093f0e69da9bf95dac62/elk_09.png&#34; alt=&#34;Kibana_Logs_1&#34;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you don&amp;#39;t see data in Kibana, try changing the time filter to a larger range. By default, Kibana shows data for the last 15 minutes.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Clicking and expanding any one particular Log data and then selecting JSON will show the response in easier to read JSON format:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/wZYP9Z6aoBpOTujAHC2MM/6f8cce8b1094fa3d15e109eb604558d9/elk_10.png&#34; alt=&#34;Expand_Logs.png&#34;/&gt;&lt;/p&gt;&lt;p&gt;Here&amp;#39;s how you can integrate the ELK stack with your Spring Boot app to collect, process, and visualize logs at a centralized place.&lt;/p&gt;&lt;h2 id=&#34;Introducing-Beats&#34;&gt;Introducing Beats&lt;/h2&gt;&lt;p&gt;Until now, you have seen how to use the ELK stack for monitoring Spring Boot logs. Here, &lt;strong&gt;Logstash was reading log files&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Now, suppose you have to read data from log files from multiple file servers. &lt;/p&gt;&lt;p&gt;How should you approach this?&lt;/p&gt;&lt;p&gt;One simple option is adding Logstash on all the servers and passing the data to Elasticsearch. &lt;/p&gt;&lt;p&gt;But there is one problem, &lt;strong&gt;Logstash consumes a lot of resources&lt;/strong&gt;. This can cause performance issues for high-traffic deployments servers. So it is not the best solution to use Logstash on all file servers.&lt;/p&gt;&lt;p&gt;As a solution to this, &lt;strong&gt;Beats&lt;/strong&gt; were introduced. &lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/beats/libbeat/current/beats-reference.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Beats&lt;/a&gt; are open source data shippers that can be installed as agents on servers to send data directly to Elasticsearch or via Logstash, where it can be further processed and enhanced.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;There are various Beats for different purposes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Filebeat&lt;/strong&gt;: For file monitoring&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Metricbeat&lt;/strong&gt;: For metrics monitoring&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Packetbeat&lt;/strong&gt;: For network data monitoring&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Heartbeat&lt;/strong&gt;: For uptime monitoring&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You will be specifically looking at Filebeat for this tutorial.&lt;/p&gt;&lt;h3 id=&#34;When-to-Use-Filebeat-and-When-to-Use-Logstash-&#34;&gt;When to Use Filebeat and When to Use Logstash?&lt;/h3&gt;&lt;p&gt;Filebeat is considered one of the best log shippers as it is lightweight, supports SSL &amp;amp; TLS encryption, and is extremely reliable. However, it cannot transform the logs into easy-to-analyze structured data. That&amp;#39;s the part performed by Logstash.&lt;/p&gt;&lt;p&gt;So, if you require advanced log enhancement like filtering out unwanted bits of data or transforming data to another format, you have to go for Logstash.&lt;/p&gt;&lt;p&gt;But if you are only interested in the timestamp and message content, you can choose Filebeat to act as your log aggregator, especially in a distributed environment. &lt;/p&gt;&lt;p&gt;Filebeat can either ship data directly to Elasticsearch or first to Logstash, and then Logstash can ingest this data to Elasticsearch. If you want to use the benefit of Filebeat and Logstash, you can very well go with the second approach.&lt;/p&gt;&lt;h3 id=&#34;Configuring-Filebeat&#34;&gt;Configuring Filebeat&lt;/h3&gt;&lt;p&gt;You can configure Filebeat similar to how you have done for other ELK stacks.&lt;/p&gt;&lt;p&gt;Just extract the zip file after downloading it from the &lt;a href=&#34;https://www.elastic.co/downloads/beats/filebeat&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;official Filebeat Downloads&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In Logstash, you have to modify the &lt;code&gt;logstash&lt;span&gt;.&lt;/span&gt;conf&lt;/code&gt; file; similarly, here, you have to do the same thing in &lt;code&gt;filebeat&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;To run Filebeat, use the command &lt;code&gt;filebeat&lt;span&gt;.&lt;/span&gt;exe &lt;span&gt;-&lt;/span&gt;c filebeat&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Let&amp;#39;s now look at how you can incorporate it with your already existing Spring Boot project.&lt;/p&gt;&lt;h3 id=&#34;Integrating-Filebeat-with-Spring-Boot&#34;&gt;Integrating Filebeat with Spring Boot&lt;/h3&gt;&lt;p&gt;Open filebeat.yml and add the following content:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;filebeat&lt;span&gt;.&lt;/span&gt;inputs&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;-&lt;/span&gt; type&lt;span&gt;:&lt;/span&gt; log&#xA;    enabled&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;    paths&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;&lt;span&gt;ELK&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;logs&lt;span&gt;/&lt;/span&gt;application&lt;span&gt;.&lt;/span&gt;log  # Make sure to provide the absolute path &lt;span&gt;of&lt;/span&gt; the file&#xA;&#xA;output&lt;span&gt;.&lt;/span&gt;elasticsearch&lt;span&gt;:&lt;/span&gt;&#xA;  hosts&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;localhost:9200&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;  protocol&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;In the input&lt;/strong&gt;, you have to specify the complete path of the log file from where Filebeat will read the data. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;In the output&lt;/strong&gt;, you have to define the hosts as the Elasticsearch and the port on which it is configured to listen. The protocol takes either HTTP or HTTPS as one of its values. It specifies where Elasticsearch is reachable. In this case, it is &lt;strong&gt;HTTP&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Now run the file with the command &lt;code&gt;filebeat&lt;span&gt;.&lt;/span&gt;exe &lt;span&gt;-&lt;/span&gt;c filebeat&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Similar to what you have done for logstash, you need to create a filebeat index inside Kibana by getting the index name from the &lt;a href=&#34;http://localhost:9200/_cat/indices&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Elasticsearch indices list&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6P9fymE1Qm7knKCEGw9d4n/0aa6773c0e8942b652f6903ea8be8b6a/elk_11.png&#34; alt=&#34;Filebeat index&#34;/&gt;&lt;/p&gt;&lt;p&gt;Here, you will see a new index name starting with &amp;#34;filebeat-&amp;#34;. This is the index that has been created by Filebeat.&lt;/p&gt;&lt;p&gt;Next, navigate back to the &lt;a href=&#34;http://localhost:5601/app/management/kibana/indexPatterns&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;index pattern management&lt;/a&gt; console in Kibana. &lt;/p&gt;&lt;p&gt;Click on the &lt;code&gt;Create index pattern&lt;/code&gt; and type the index name as &lt;code&gt;filebeat&lt;span&gt;-&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;In the next step, pick a field for filtering the data. You can again pick &lt;code&gt;@timestamp&lt;/code&gt; and then click on &lt;code&gt;Create index pattern&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;After this, head on to the &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;5601&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;app&lt;span&gt;/&lt;/span&gt;discover&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Select the &lt;code&gt;filebeat&lt;/code&gt; index from the filters that you just created, and you&amp;#39;ll be able to see and analyze the logs.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6BPgSritTgGvxxh21mh7PP/25551fe01a44e68c90a422d3f9e484dd/elk_12.png&#34; alt=&#34;FilebeatConsole&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Combining-Filebeat-with-Logstash&#34;&gt;Combining Filebeat with Logstash&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s say you are using Filebeat as your log shipper, and you want to transform the data which you are getting from the log file before passing it to Elasticsearch. &lt;/p&gt;&lt;p&gt;Since Filebeat doesn&amp;#39;t allow any transformation to data, therefore, in this case, you have to use Logstash along with Filebeat.&lt;/p&gt;&lt;p&gt;Let us see how you can do that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change the Filebeat output to Logstash and the port on which it is enabled, instead of Elasticsearch&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;filebeat&lt;span&gt;.&lt;/span&gt;inputs&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;-&lt;/span&gt; type&lt;span&gt;:&lt;/span&gt; log&#xA;    enabled&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;    paths&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;&lt;span&gt;ELK&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;logs&lt;span&gt;/&lt;/span&gt;application&lt;span&gt;.&lt;/span&gt;log  # Absolute path &lt;span&gt;of&lt;/span&gt; the log file&#xA;&#xA; output&lt;span&gt;.&lt;/span&gt;logstash&lt;span&gt;:&lt;/span&gt;&#xA;    hosts&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;localhost:5044&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;  # Output is now pointing to Logstash&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;Modify the Logstash&amp;#39;s input to read data from Filebeat instead of picking it from a file&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;input &lt;span&gt;{&lt;/span&gt;&#xA;      beats &lt;span&gt;{&lt;/span&gt;  # Notice the input is now being taken &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#39;Beats&amp;#39;&lt;/span&gt; instead &lt;span&gt;of&lt;/span&gt; a &lt;span&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&#xA;        &lt;span&gt;type&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;logs&amp;#34;&lt;/span&gt;&#xA;        &lt;span&gt;port&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;5044&amp;#34;&lt;/span&gt; &#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;filter &lt;span&gt;{&lt;/span&gt;  # Adding the filters&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;message&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt;~&lt;/span&gt; &lt;span&gt;&amp;#34;\tat&amp;#34;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    grok &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;match&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;^(\tat)&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;      &lt;span&gt;add_tag&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;stacktrace&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA; mutate &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;replace&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;&amp;#34;[host]&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;%{[host][name]}&amp;#34;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;output &lt;span&gt;{&lt;/span&gt;  # Output pointing to Elasticsearch&#xA;  stdout &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;codec&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; rubydebug&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA; &#xA;  elasticsearch &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;hosts&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;localhost:9200&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also, note that you have to add a new plugin(&lt;code&gt;mutate&lt;/code&gt;) inside the filters.&lt;/p&gt;&lt;p&gt;This is because when you&amp;#39;re using Filebeat and Logstash together, Filebeat automatically adds a &lt;code&gt;host&lt;/code&gt; field with the type as an object to the logs events. At the same time, Logstash adds another &lt;code&gt;host&lt;/code&gt; field of its own to the log events. But this host is of the string type instead of an object.&lt;/p&gt;&lt;p&gt;Because of these two different types of hosts, Elaticsearch will start throwing an error. To solve this, you need to decide whether you want to have the &lt;code&gt;host&lt;/code&gt; as an object or a string.&lt;/p&gt;&lt;p&gt;In this case, we will go with the more straightforward way to replace the type of the host coming from Filebeat with a string type.&lt;/p&gt;&lt;p&gt;To do this, you have to use the &lt;code&gt;Mutate&lt;/code&gt; filter plugin that allows you to perform general mutations on any field. You can replace and modify fields in your log events, as shown in the configuration above.&lt;/p&gt;&lt;h3 id=&#34;Verifying-the-Configurations&#34;&gt;Verifying the Configurations&lt;/h3&gt;&lt;p&gt;The next thing you have to do is to verify if the provided configurations are correct or not. The process for that remains the same as you did earlier. The Only difference is that this time you need to run both the &lt;code&gt;filebeat&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt; &amp;amp; &lt;code&gt;logstash&lt;span&gt;.&lt;/span&gt;conf&lt;/code&gt; together. &lt;/p&gt;&lt;p&gt;The complete process for that is mentioned below:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Start your &lt;code&gt;filebeat&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt; and &lt;code&gt;logstash&lt;span&gt;.&lt;/span&gt;conf&lt;/code&gt; files. Also, make sure the predefined &lt;code&gt;logsatsh&lt;span&gt;-&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/code&gt; index pattern is selected inside Kibana.&lt;/li&gt;&lt;li&gt;Next, just hit any one of the API endpoints again, and you will see the new logs coming in the Logstash console:&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;@timestamp&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;T16&lt;span&gt;:&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;40.112&lt;/span&gt;Z&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;09-09-2021 22:25:36.174 [http-nio-8080-exec-3] INFO  c.demo.ELK.controller.ELKController.helloWorld - Inside Hello World Function&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;input&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;log&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;logs&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;       &lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;&amp;#34;beats_input_codec_plain_applied&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;@version&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;ecs&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;version&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;1.8.0&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;host&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;Vulcan&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;agent&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;version&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;7.13.2&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;Vulcan&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;filebeat&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;ephemeral_id&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;94a3a0f3-165f-4308-8333-c1afbef0e016&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;hostname&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;Vulcan&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;f1b9d79a-9cf0-4a51-b12f-29c41ed05f60&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;@timestamp&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;T16&lt;span&gt;:&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;40.112&lt;/span&gt;Z&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;09-09-2021 22:25:36.177 [http-nio-8080-exec-3] INFO  c.demo.ELK.controller.ELKController.helloWorld - Response =&amp;gt; Hello World! Thu Sep 09 22:25:36 IST 2021&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;input&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;log&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;logs&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;&amp;#34;beats_input_codec_plain_applied&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;@version&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;ecs&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;version&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;1.8.0&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;agent&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;version&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;7.13.2&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;Vulcan&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;filebeat&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;hostname&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;Vulcan&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;ephemeral_id&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;94a3a0f3-165f-4308-8333-c1afbef0e016&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;f1b9d79a-9cf0-4a51-b12f-29c41ed05f60&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;host&amp;#34;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;#34;Vulcan&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;Finally, navigate to the &lt;a href=&#34;http://localhost:5601/app/discover#&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Kibana console&lt;/a&gt;, and you will see the logs coming under the Logstash index:&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4zsSRslO3w8pF9M7MqKCNT/00d2235fa3de83250371feabb58ae1eb/elk_13.png&#34; alt=&#34;Combined&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Separating-Logs-in-Kibana&#34;&gt;Separating Logs in Kibana&lt;/h2&gt;&lt;p&gt;In a large-scale distributed environment, there are high chances that you would have to run multiple interlinked applications. To visualize logs of all of them under a single index can sometimes become very cumbersome.&lt;/p&gt;&lt;p&gt;To solve this, you can simply separate the logs of each application by different indexes depending on your use cases.&lt;/p&gt;&lt;p&gt;For doing this, you have to differentiate between multiple log files using the property &lt;code&gt;file&lt;span&gt;.&lt;/span&gt;type&lt;/code&gt; inside the &lt;code&gt;filebeat&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s look at that with an example - Suppose in your application you have a service that asynchronously calls a third-party API to fetch some data.&lt;/p&gt;&lt;p&gt;It makes sense if you want to monitor the logs for this process in a separate index because it is independent of your application, and any failure occurring in this service should not be accounted inside the rest of the application&amp;#39;s failure.&lt;/p&gt;&lt;p&gt;To achieve this, you will have to process the logs of this new service in a separate log file. So let&amp;#39;s first add another logger and appender inside the &lt;code&gt;logback&lt;span&gt;-&lt;/span&gt;spring&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;appender&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;STDOUT&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;ch.qos.logback.core.ConsoleAppender&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;%d{dd-MM-yyyy HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %logger{36}.%M - %msg%n&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;appender&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;appender&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;SAVE-TO-FILE&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;ch.qos.logback.core.FileAppender&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;logs/application.log&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;encoder&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;ch.qos.logback.classic.encoder.PatternLayoutEncoder&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;%d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;Pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;appender&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;appender&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;OUTBOUND_LOGS&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;ch.qos.logback.core.FileAppender&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;logs/application-outbound.log&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;encoder&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;ch.qos.logback.classic.encoder.PatternLayoutEncoder&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;%d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;Pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;encoder&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;appender&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;logger&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;com.demo.ELK&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;additivity&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;false&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;level&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;info&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;SAVE-TO-FILE&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;STDOUT&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;logger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;logger&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;outbound-logs&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;additivity&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;false&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;level&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;info&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;OUTBOUND_LOGS&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;STDOUT&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;logger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;root&lt;/span&gt; &lt;span&gt;level&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;INFO&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;STDOUT&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;root&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here you have added another appender and logger by the name &lt;code&gt;outbound&lt;span&gt;-&lt;/span&gt;logs&lt;/code&gt; and have specified a different file name to print your logs in.&lt;/p&gt;&lt;p&gt;To use this inside your application, you have to initialize the logger object like this: &#xA;&lt;code&gt;Logger log &lt;span&gt;=&lt;/span&gt; LoggerFactory&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getLogger&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;outbound-logs&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Now let&amp;#39;s apply it inside one of your services:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;ELK&lt;span&gt;.&lt;/span&gt;services&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;fasterxml&lt;span&gt;.&lt;/span&gt;jackson&lt;span&gt;.&lt;/span&gt;databind&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;JsonNode&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;fasterxml&lt;span&gt;.&lt;/span&gt;jackson&lt;span&gt;.&lt;/span&gt;databind&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ObjectMapper&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;slf4j&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Logger&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;slf4j&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;LoggerFactory&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;boot&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;client&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;RestTemplateBuilder&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;stereotype&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Service&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;client&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;RestTemplate&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@Service&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;RestService&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;// Initializing logger with new appender&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;Logger&lt;/span&gt; log &lt;span&gt;=&lt;/span&gt; &lt;span&gt;LoggerFactory&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getLogger&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;outbound-logs&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;RestTemplate&lt;/span&gt; restTemplate&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; BASE_URL &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;https://goweather.herokuapp.com/weather/&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;RestService&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;RestTemplateBuilder&lt;/span&gt; restTemplateBuilder&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;restTemplate &lt;span&gt;=&lt;/span&gt; restTemplateBuilder&lt;span&gt;.&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;JsonNode&lt;/span&gt; &lt;span&gt;getPostsPlainJSON&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt; city&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        log&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Getting Weather Information for {}&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;city&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;String&lt;/span&gt; url &lt;span&gt;=&lt;/span&gt; BASE_URL &lt;span&gt;+&lt;/span&gt; city&lt;span&gt;;&lt;/span&gt;&#xA;        log&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Final URL =&amp;gt; {}&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;url&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;try&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;String&lt;/span&gt; response &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;restTemplate&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getForObject&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;url&lt;span&gt;,&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;ObjectMapper&lt;/span&gt; mapper &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ObjectMapper&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            log&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Response =&amp;gt; {}&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; mapper&lt;span&gt;.&lt;/span&gt;&lt;span&gt;readTree&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;response&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt; &lt;span&gt;catch&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;Exception&lt;/span&gt; e&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            log&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Error occurred in Outbound Request... =&amp;gt; {}&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;e&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Everything that you log in to this service will go to the &lt;code&gt;application&lt;span&gt;-&lt;/span&gt;outbound&lt;span&gt;.&lt;/span&gt;log&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s create another endpoint in your controller class to test it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@GetMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;value &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;/weather/{city}&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;JsonNode&lt;/span&gt; &lt;span&gt;getWeatherInformation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;@PathVariable&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; city&lt;span&gt;)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;   &lt;span&gt;return&lt;/span&gt; restService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getPostsPlainJSON&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;city&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, let&amp;#39;s invoke it using HTTP GET method, e.g.: &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;weather&lt;span&gt;/&lt;/span&gt;ohio&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;temperature&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;+33 °C&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;wind&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;14 km/h&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Partly cloudy&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;forecast&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;day&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;temperature&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;+38 °C&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;wind&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;17 km/h&amp;#34;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;day&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;temperature&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;37 °C&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;wind&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;14 km/h&amp;#34;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;day&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;temperature&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;+39 °C&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;wind&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;22 km/h&amp;#34;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this, you should see the new logs being printed inside the &lt;code&gt;application&lt;span&gt;-&lt;/span&gt;outbound&lt;span&gt;.&lt;/span&gt;log&lt;/code&gt; file in your logs folder:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;08&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;03&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;38.328&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;http&lt;span&gt;-&lt;/span&gt;nio&lt;span&gt;-&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;exec&lt;span&gt;-&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  outbound&lt;span&gt;-&lt;/span&gt;logs&lt;span&gt;.&lt;/span&gt;getPostsPlainJSON &lt;span&gt;-&lt;/span&gt; Getting Weather Information &lt;span&gt;for&lt;/span&gt; ohio&#xA;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;08&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;03&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;38.330&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;http&lt;span&gt;-&lt;/span&gt;nio&lt;span&gt;-&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;exec&lt;span&gt;-&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  outbound&lt;span&gt;-&lt;/span&gt;logs&lt;span&gt;.&lt;/span&gt;getPostsPlainJSON &lt;span&gt;-&lt;/span&gt; Final &lt;span&gt;&lt;span&gt;URL&lt;/span&gt;&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;goweather&lt;span&gt;.&lt;/span&gt;herokuapp&lt;span&gt;.&lt;/span&gt;com&lt;span&gt;/&lt;/span&gt;weather&lt;span&gt;/&lt;/span&gt;ohio&#xA;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;08&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2021&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;03&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;39.912&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;http&lt;span&gt;-&lt;/span&gt;nio&lt;span&gt;-&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;exec&lt;span&gt;-&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;INFO&lt;/span&gt;  outbound&lt;span&gt;-&lt;/span&gt;logs&lt;span&gt;.&lt;/span&gt;getPostsPlainJSON &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Response&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;temperature&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;+33 °C&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;#34;wind&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;14 km/h&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;Partly cloudy&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;#34;forecast&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;day&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;#34;temperature&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;+38 °C&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;#34;wind&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;17 km/h&amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;day&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;#34;temperature&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;37 °C&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;#34;wind&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;14 km/h&amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;day&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;#34;temperature&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;+39 °C&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;#34;wind&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;22 km/h&amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Modifying-Filebeat-and-Creating-Custom-Index-Pattern&#34;&gt;Modifying Filebeat and Creating Custom Index Pattern&lt;/h3&gt;&lt;p&gt;Next, you also have to change your &lt;code&gt;filebeat&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt; to fetch the data from two different locations. &lt;/p&gt;&lt;p&gt;This is an important section where you will also learn how to create custom indexes instead of using the default ones that Filebeat generates.&lt;/p&gt;&lt;p&gt;An &lt;strong&gt;IMPORTANT&lt;/strong&gt; thing to note here is that you have to disable ILM(Index Lifecycle Management) for using the custom indexes. (This is not mentioned in any elastic documentation but is a very important step)&lt;/p&gt;&lt;p&gt;ILM is nothing but the policy to manage indices according to the performance requirements. If this is enabled (which is true by default), you&amp;#39;ll not be able to give any custom name to the index.&lt;/p&gt;&lt;p&gt;You also have to set the value for &lt;code&gt;setup&lt;span&gt;.&lt;/span&gt;template&lt;span&gt;.&lt;/span&gt;name&lt;/code&gt; and &lt;code&gt;setup&lt;span&gt;.&lt;/span&gt;template&lt;span&gt;.&lt;/span&gt;pattern&lt;/code&gt; to modify the index name.&lt;/p&gt;&lt;p&gt;By default, Filebeat creates index in pattern: “filebeat-%{[version]}-%{+yyyy.MM.dd}”. &lt;/p&gt;&lt;p&gt;To change this format, inside &lt;code&gt;setup&lt;span&gt;.&lt;/span&gt;template&lt;span&gt;.&lt;/span&gt;name&lt;/code&gt; you have to set your custom index name like &amp;#34;myapp&amp;#34; and inside &lt;code&gt;setup&lt;span&gt;.&lt;/span&gt;template&lt;span&gt;.&lt;/span&gt;pattern&lt;/code&gt; you have to put the same custom index name that you provided, followed by a hyphen(-) and asterisk (*), e.g., myapp-*&lt;/p&gt;&lt;pre&gt;&lt;code&gt;filebeat&lt;span&gt;.&lt;/span&gt;inputs&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;-&lt;/span&gt; type&lt;span&gt;:&lt;/span&gt; log&#xA;    enabled&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;    fields&lt;span&gt;:&lt;/span&gt;&#xA;        type&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;service_logs&amp;#34;&lt;/span&gt;&#xA;    paths&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;&lt;span&gt;ELK&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;logs&lt;span&gt;/&lt;/span&gt;application&lt;span&gt;.&lt;/span&gt;log  # Absolute path &lt;span&gt;of&lt;/span&gt; application&lt;span&gt;.&lt;/span&gt;log file&#xA;  &lt;span&gt;-&lt;/span&gt; type&lt;span&gt;:&lt;/span&gt; log&#xA;    enabled&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;    fields&lt;span&gt;:&lt;/span&gt;&#xA;        type&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;outbound_logs&amp;#34;&lt;/span&gt;&#xA;    paths&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;&lt;span&gt;ELK&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;logs&lt;span&gt;/&lt;/span&gt;application&lt;span&gt;-&lt;/span&gt;outbound&lt;span&gt;.&lt;/span&gt;log  # Absolute path &lt;span&gt;of&lt;/span&gt; application&lt;span&gt;-&lt;/span&gt;outbound&lt;span&gt;.&lt;/span&gt;log file&#xA;&#xA;setup&lt;span&gt;.&lt;/span&gt;ilm&lt;span&gt;.&lt;/span&gt;enabled&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&#xA;setup&lt;span&gt;.&lt;/span&gt;template&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;myapp-%{[fields.type]:other}&amp;#34;&lt;/span&gt;&#xA;setup&lt;span&gt;.&lt;/span&gt;template&lt;span&gt;.&lt;/span&gt;pattern&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;myapp-%{[fields.type]:other}-*&amp;#34;&lt;/span&gt;&#xA;&#xA;output&lt;span&gt;.&lt;/span&gt;elasticsearch&lt;span&gt;:&lt;/span&gt;&#xA;  hosts&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;localhost:9200&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;  protocol&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&#xA;  index&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;myapp-%{[fields.type]:other}-%{+yyyy.MM.dd}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In Filebeat configuration, you have to use &lt;code&gt;fields&lt;span&gt;.&lt;/span&gt;type&lt;/code&gt; to distinguish among the different inputs from where you&amp;#39;re fetching the data in case of multiple inputs.&lt;/p&gt;&lt;p&gt;Now go to the &lt;a href=&#34;http://localhost:9200/_cat/indices&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Elasticsearch indices&lt;/a&gt;, and you&amp;#39;ll see two new additional indexes starting with the name &amp;#34;myapp&amp;#34; followed by their respective values of &lt;code&gt;fields&lt;span&gt;.&lt;/span&gt;type&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/34wU3NOVwfT7iovbKF2AvK/98a5d87a72c016b4ce252ded9f900f97/elk_14.png&#34; alt=&#34;Indexes_myapp&#34;/&gt;&lt;/p&gt;&lt;p&gt;Create these two new patterns inside your &lt;a href=&#34;http://localhost:5601/app/management/kibana/indexPatterns&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Kibana index pattern management&lt;/a&gt; console by the name &lt;code&gt;myapp&lt;span&gt;-&lt;/span&gt;outbound_logs&lt;span&gt;-&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;myapp&lt;span&gt;-&lt;/span&gt;service_logs&lt;span&gt;-&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Next, hit the REST APIs again, and you should be able to view the logs of your applications in separate indexes depending on the API you are hitting.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2IE0qGNm79KxHRpt2U5dnI/1501124e0a2be6307c630973ae13c827/elk_15.png&#34; alt=&#34;Myapp_Logs&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Summary&#34;&gt;Summary&lt;/h2&gt;&lt;p&gt;For any developer, logs are the most critical way for debugging. ELK Stack simplifies the delivery of logs in a centralized and scalable way. This article was an introduction to how it all works. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;You have gone through the step-by-step process of sending out Spring Boot application logs to the Elastic Stack(ELK).&lt;/li&gt;&lt;li&gt;You got introduced to Filebeat and learned about the advantages and disadvantages of Filebeat and Logstash as log shippers.&lt;/li&gt;&lt;li&gt;You learned how to create custom index patterns through a Filebeat configuration.&lt;/li&gt;&lt;li&gt;You also got the hang of how you can manage logs of different services of the same applications by putting them in separate indexes.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;The complete code used in this tutorial is available on this &lt;a href=&#34;https://github.com/ApoorvTyagi/Spring-ELK&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GitHub repository&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/spring-boot-logs-aggregation-and-monitoring-using-elk-stack/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how you can integrate ELK stack with your Spring Boot application for logs aggregation and monitoring in a centralized way.</summary>
  </entry>
  <entry>
    <title>Create an API in Swift and Deploy It to AWS Lambda</title>
    <updated>2021-09-29T16:28:00Z</updated>
    <id>tag:auth0.com,2021-09-29:/blog/create-an-api-in-swift-and-deploy-it-to-aws-lambda/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;In almost every real mobile application, we are probably going to need a backend side where our business logic will be handled. In most cases, there will be two different teams, one for mobile and one for the backend side of the project. But, what if we, as iOS developers, could write our own backend in our preferred language? Let&amp;#39;s explore in this article how we can achieve this using Swift AWS Lambda Runtime together with AWS Lambda.&lt;/p&gt;&lt;h2 id=&#34;What-is-AWS-Lambda-&#34;&gt;What is AWS Lambda?&lt;/h2&gt;&lt;p&gt;In simple terms, it is a service provider by AWS in which we can run our code without the need to configure and manage a server. We just upload our code as a zip file, and AWS automatically does all the configurations needed in the server to make our software available.&lt;/p&gt;&lt;p&gt;One of the main differences between this approach and having a dedicated server, in addition to simpler administration, is that if at some point we need to increase our processing power to scale up our application, AWS Lambda does that automatically for us if we design the application correctly.&lt;/p&gt;&lt;p&gt;You can check out more at this &lt;a href=&#34;https://aws.amazon.com/lambda/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Swift-AWS-Lambda-Runtime&#34;&gt;Swift AWS Lambda Runtime&lt;/h2&gt;&lt;p&gt;A custom AWS Lambda runtime is basically a library that is in charge of managing and executing the Lambda function&amp;#39;s code when it is called. With &lt;a href=&#34;https://swift.org/blog/aws-lambda-runtime/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Swift AWS Lambda Runtime&lt;/a&gt;, we can now write serverless code in Swift and make it ready for use with AWS Lambda service.&lt;/p&gt;&lt;h2 id=&#34;Creating-Our-HTTP-API&#34;&gt;Creating Our HTTP API&lt;/h2&gt;&lt;p&gt;For this tutorial, we will create a simple HTTP API in Swift and expose it through &lt;a href=&#34;https://aws.amazon.com/api-gateway/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;API Gateway&lt;/a&gt;, which is another service available in AWS suite that allows us to expose our Lambda function as HTTP endpoints.&lt;/p&gt;&lt;h3 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Have XCode installed&lt;/li&gt;&lt;li&gt;Have an AWS account.&lt;/li&gt;&lt;li&gt;Have an Auth0 account.&lt;/li&gt;&lt;li&gt;Have Docker installed in your machine to compile the code that we will upload to AWS.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Step-1--Defining-the-API&#34;&gt;Step 1: Defining the API&lt;/h3&gt;&lt;p&gt;We&amp;#39;re going to create a simple API to handle a simple todo list with three operations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;POST&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;todoitem&lt;/code&gt; Create a new todo item.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;todoitems&lt;/code&gt; Return all the items in the list.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;todoitems&lt;span&gt;/&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;id&lt;/code&gt; Return a specific item in the list.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Just to simplify things, our TodoItem will only have an id and a description.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;ToDoItem&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;var&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Int&lt;/span&gt;&#xA;    &lt;span&gt;let&lt;/span&gt; description&lt;span&gt;:&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Step-2--Setup-the-project&#34;&gt;Step 2: Setup the project&lt;/h3&gt;&lt;p&gt;The next thing we need to do is create our project. In this case, we need to create a new &lt;a href=&#34;https://swift.org/package-manager/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Swift Package&lt;/a&gt;. To do this, we can open Xcode and go to &lt;strong&gt;File → New → Swift Package&lt;/strong&gt; option and name it &lt;strong&gt;ToDoList-API&lt;/strong&gt;. We can also create it from the console by running the following command: &lt;code&gt;$ swift &lt;span&gt;package&lt;/span&gt; init &lt;span&gt;--&lt;/span&gt;type executable&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Once that we have our project created, let&amp;#39;s open and modify our &lt;strong&gt;Package.swift&lt;/strong&gt; file with all the information needed.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// swift-tools-version:5.3&lt;/span&gt;&#xA;&lt;span&gt;// The swift-tools-version declares the minimum version of Swift required to build this package.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;PackageDescription&lt;/span&gt;&#xA;&#xA;&lt;span&gt;let&lt;/span&gt; package &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Package&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;ToDoList-API&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    platforms&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;macOS&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;v10_15&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    products&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;executable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;ToDoList-API&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; targets&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;ToDoList-API&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    dependencies&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;url&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;https://github.com/swift-server/swift-aws-lambda-runtime.git&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;span&gt;upToNextMajor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;from&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;0.3.0&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    targets&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;ToDoList-API&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            dependencies&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;                &lt;span&gt;.&lt;/span&gt;&lt;span&gt;product&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;AWSLambdaRuntime&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; package&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;swift-aws-lambda-runtime&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                &lt;span&gt;.&lt;/span&gt;&lt;span&gt;product&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;AWSLambdaEvents&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; package&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;swift-aws-lambda-runtime&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            resources&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&#xA;                &lt;span&gt;.&lt;/span&gt;&lt;span&gt;process&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Config.plist&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;]&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you save the file, Xcode will start downloading all the needed resources and dependencies. For this example, we&amp;#39;re going to use two dependencies:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;AWSLambdaRuntime&lt;/strong&gt; to handle the communications with &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;AWS Lambda runtime API&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;AWSLambdaEvents&lt;/strong&gt; to handle the events with API Gateway in our code.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Step-3--Create-our-first-Lambda-function&#34;&gt;Step 3: Create our first Lambda function&lt;/h3&gt;&lt;p&gt;We now have to develop our Lambda function. To do so, we must create a new file inside the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;Source&lt;/code&gt; directory and name it &lt;strong&gt;main.swift&lt;/strong&gt;. Inside this file, we&amp;#39;ll use the Swift Lambda Runtime by calling &lt;code&gt;Lambda&lt;span&gt;.&lt;/span&gt;run&lt;/code&gt; function. This function takes an input and a callback as parameters. We can use the callback to return whatever we want if the operation is successful or an error otherwise.&lt;/p&gt;&lt;p&gt;For every invocation that Lambada receives, our Runtime will execute whatever we put inside the &lt;code&gt;Lambda&lt;span&gt;.&lt;/span&gt;run&lt;/code&gt; function. In this case, we are going to take just a string as input and return a greeting message.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;AWSLambdaRuntime&lt;/span&gt;&#xA;&#xA;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Input&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Codable&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;let&lt;/span&gt; name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Output&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Codable&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;let&lt;/span&gt; greeting&lt;span&gt;:&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;Lambda&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;run &lt;span&gt;{&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;,&lt;/span&gt; input&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Input&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; callback&lt;span&gt;:&lt;/span&gt; @escaping &lt;span&gt;(&lt;/span&gt;&lt;span&gt;Result&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Output&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;Void&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&#xA;  &lt;span&gt;callback&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Output&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;greeting&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Hello &lt;span&gt;&lt;span&gt;\(&lt;/span&gt;input&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In order to run our lambda in our machine, we need to add a custom environment variable (&lt;code&gt;&lt;span&gt;LOCAL_LAMBDA_SERVER_ENABLED&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt;) to our scheme&amp;#39;s run settings. This will simulate the Lambda server in our local environment. &lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/42lm5qsyLdzZ9sVnvs6Ipn/c177634055ba4886f3863e6a4232d4fb/swift_lambda_01.png&#34; alt=&#34;Enable AWS Lambda local&#34;/&gt;&lt;/p&gt;&lt;p&gt;Now, if we run the target, we will get something like this in the console:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;08&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;14T23&lt;span&gt;:&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;0300&lt;/span&gt; info &lt;span&gt;LocalLambdaServer&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;LocalLambdaServer&lt;/span&gt; started and listening on &lt;span&gt;127.0&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;7000&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; receiving events on &lt;span&gt;/&lt;/span&gt;invoke&#xA;&lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;08&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;14T23&lt;span&gt;:&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;0300&lt;/span&gt; info &lt;span&gt;Lambda&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; lambda lifecycle starting with &lt;span&gt;Configuration&lt;/span&gt;&#xA;  &lt;span&gt;General&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;logLevel&lt;span&gt;:&lt;/span&gt; info&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;Lifecycle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;9908899204653&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; maxTimes&lt;span&gt;:&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; stopSignal&lt;span&gt;:&lt;/span&gt; &lt;span&gt;TERM&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;RuntimeEngine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;ip&lt;span&gt;:&lt;/span&gt; &lt;span&gt;127.0&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; port&lt;span&gt;:&lt;/span&gt; &lt;span&gt;7000&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; requestTimeout&lt;span&gt;:&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This means that our Lambda function is running on port &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;700&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;invoke&lt;/code&gt;. So let&amp;#39;s go ahead and make our first request to the function.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ curl \&#xA;    &lt;span&gt;--&lt;/span&gt;header &lt;span&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; \&#xA;  &lt;span&gt;--&lt;/span&gt;request &lt;span&gt;POST&lt;/span&gt; \&#xA;  &lt;span&gt;--&lt;/span&gt;data &lt;span&gt;&amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;Bruno&amp;#34;}&amp;#39;&lt;/span&gt; \&#xA;  http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;7000&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;invoke&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we are getting something like this: &lt;code&gt;$ &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;greeting&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;Hello Bruno&amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;, it means that we did everything right so far!.&lt;/p&gt;&lt;p&gt;We have our first function up and running, so we are in a pretty good spot to move on and create our HTTP API.&lt;/p&gt;&lt;h3 id=&#34;Step-4--Create-HTTP-API&#34;&gt;Step 4: Create HTTP API&lt;/h3&gt;&lt;p&gt;Let&amp;#39;s start by creating the model that we are going to deal with. Since we&amp;#39;re going to return static data, we&amp;#39;ll create some helpers functions as well. Go ahead and create a new file  &lt;strong&gt;TodoItem.swift&lt;/strong&gt; inside &lt;strong&gt;Sources/ToDoList-API&lt;/strong&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;ToDoItem&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Codable&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;let&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Int&lt;/span&gt;&#xA;    &lt;span&gt;let&lt;/span&gt; description&lt;span&gt;:&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// MARK: - Static helpers&lt;/span&gt;&#xA;&#xA;&lt;span&gt;extension&lt;/span&gt; &lt;span&gt;ToDoItem&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;func&lt;/span&gt; &lt;span&gt;getToDoList&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;ToDoItem&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;var&lt;/span&gt; list &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;ToDoItem&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        list&lt;span&gt;.&lt;/span&gt;&lt;span&gt;append&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;init&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; description&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Pay credit card&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        list&lt;span&gt;.&lt;/span&gt;&lt;span&gt;append&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;init&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; description&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Clean apartment&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        list&lt;span&gt;.&lt;/span&gt;&lt;span&gt;append&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;init&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; description&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Call John&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; list&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;func&lt;/span&gt; &lt;span&gt;getItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;with id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;ToDoItem&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;getToDoList&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; $&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;==&lt;/span&gt; id &lt;span&gt;}&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next thing we need to do is adjust our Lambda function to interact with APIGateway. For this, we are going to use two types included in &lt;strong&gt;AWSLambdaEvents&lt;/strong&gt; for our function&amp;#39;s input and output:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;APIGateway.V2.Request&lt;/li&gt;&lt;li&gt;APIGateway.V2.Response&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Make the following changes inside our &lt;strong&gt;main.swift&lt;/strong&gt; file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;typealias&lt;/span&gt; &lt;span&gt;In&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;APIGateway&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;V2&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Request&lt;/span&gt;&#xA;&lt;span&gt;typealias&lt;/span&gt; &lt;span&gt;Out&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;APIGateway&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;V2&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Response&lt;/span&gt;&#xA;&#xA;&lt;span&gt;Lambda&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;run &lt;span&gt;{&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;,&lt;/span&gt; &#xA;              request&lt;span&gt;:&lt;/span&gt; &lt;span&gt;In&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;              callback&lt;span&gt;:&lt;/span&gt; @escaping &lt;span&gt;(&lt;/span&gt;&lt;span&gt;Result&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Out&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;Void&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&#xA;    &lt;span&gt;// Implementation... &lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we receive an &lt;strong&gt;APIGateway.V2.Request&lt;/strong&gt; type as an input, and we must return an &lt;strong&gt;APIGateway.V2.Response&lt;/strong&gt; type as an output. However, we want to obtain a &lt;strong&gt;ToDoItem&lt;/strong&gt; type when we receive a &lt;code&gt;&lt;span&gt;POST&lt;/span&gt;&lt;/code&gt;, and we want to return a &lt;strong&gt;TodoItem&lt;/strong&gt; type if we receive a &lt;code&gt;&lt;span&gt;GET&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Both types, &lt;strong&gt;APIGateway.V2.Request&lt;/strong&gt; and &lt;strong&gt;APIGateway.V2.Response,&lt;/strong&gt; have a body property in which we will receive and send the payload from our endpoints. This property is a String type, so we must do some transformation using an &lt;a href=&#34;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;encoder&lt;/a&gt; (or decoder in the case we want to return something) in order to use our Swift type before sending it back or before start processing it. &lt;/p&gt;&lt;p&gt;The only missing part in our code design is how we distinguish between different routes and methods. We can access the endpoint path from our request type. In our example, we are only going to have one path: &lt;code&gt;&lt;span&gt;/&lt;/span&gt;todoitems&lt;/code&gt;. If we get another path, we should return a 404 error.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s put all the pieces together and modify our lambda function.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;Foundation&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;AWSLambdaRuntime&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;AWSLambdaEvents&lt;/span&gt;&#xA;&#xA;&lt;span&gt;typealias&lt;/span&gt; &lt;span&gt;In&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;APIGateway&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;V2&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Request&lt;/span&gt;&#xA;&lt;span&gt;typealias&lt;/span&gt; &lt;span&gt;Out&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;APIGateway&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;V2&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Response&lt;/span&gt;&#xA;&#xA;&lt;span&gt;Lambda&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;run &lt;span&gt;{&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;,&lt;/span&gt;&#xA;              request&lt;span&gt;:&lt;/span&gt; &lt;span&gt;In&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;              callback&lt;span&gt;:&lt;/span&gt; @escaping &lt;span&gt;(&lt;/span&gt;&lt;span&gt;Result&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Out&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;Void&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;let&lt;/span&gt; routeKey &lt;span&gt;=&lt;/span&gt; request&lt;span&gt;.&lt;/span&gt;routeKey&#xA;    &#xA;    &lt;span&gt;switch&lt;/span&gt; routeKey &lt;span&gt;{&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&amp;#34;GET /todoitems&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;let&lt;/span&gt; items &lt;span&gt;=&lt;/span&gt; &lt;span&gt;ToDoItem&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getToDoList&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;let&lt;/span&gt; bodyOutput &lt;span&gt;=&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;span&gt;!&lt;/span&gt; &lt;span&gt;JSONEncoder&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;encodeAsString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;items&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;let&lt;/span&gt; output &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Out&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;statusCode&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;ok&lt;span&gt;,&lt;/span&gt; headers&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; body&lt;span&gt;:&lt;/span&gt; bodyOutput&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;callback&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;output&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &#xA;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&amp;#34;GET /todoitems/{id}&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; idString &lt;span&gt;=&lt;/span&gt; request&lt;span&gt;.&lt;/span&gt;pathParameters&lt;span&gt;?&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; id &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;idString&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;           &lt;span&gt;let&lt;/span&gt; item &lt;span&gt;=&lt;/span&gt; &lt;span&gt;ToDoItem&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;with&lt;span&gt;:&lt;/span&gt; id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &#xA;            &lt;span&gt;let&lt;/span&gt; bodyOutput &lt;span&gt;=&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;span&gt;!&lt;/span&gt; &lt;span&gt;JSONEncoder&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;encodeAsString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;item&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;let&lt;/span&gt; output &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Out&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;statusCode&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;ok&lt;span&gt;,&lt;/span&gt; headers&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; body&lt;span&gt;:&lt;/span&gt; bodyOutput&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;callback&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;output&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;callback&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Out&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;statusCode&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;notFound&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &#xA;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&amp;#34;POST /todoitems&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;do&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;let&lt;/span&gt; input &lt;span&gt;=&lt;/span&gt; &lt;span&gt;try&lt;/span&gt; &lt;span&gt;JSONDecoder&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;decode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ToDoItem&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; from&lt;span&gt;:&lt;/span&gt; request&lt;span&gt;.&lt;/span&gt;body &lt;span&gt;?&lt;/span&gt;&lt;span&gt;?&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;let&lt;/span&gt; bodyOutput &lt;span&gt;=&lt;/span&gt; &lt;span&gt;try&lt;/span&gt; &lt;span&gt;JSONEncoder&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;encodeAsString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;input&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;let&lt;/span&gt; output &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Out&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;statusCode&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;ok&lt;span&gt;,&lt;/span&gt; headers&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; body&lt;span&gt;:&lt;/span&gt; bodyOutput&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;callback&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;output&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt; &lt;span&gt;catch&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;callback&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Out&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;statusCode&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;badRequest&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &#xA;    &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;callback&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Out&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;statusCode&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;notFound&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ---------------&lt;/span&gt;&#xA;&#xA;&lt;span&gt;extension&lt;/span&gt; &lt;span&gt;JSONEncoder&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;func&lt;/span&gt; encodeAsString&lt;span&gt;&amp;lt;&lt;/span&gt;T&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Encodable&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_&lt;/span&gt; value&lt;span&gt;:&lt;/span&gt; T&lt;span&gt;)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;try&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;decoding&lt;span&gt;:&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;encode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;value&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Unicode&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UTF8&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;extension&lt;/span&gt; &lt;span&gt;JSONDecoder&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;func&lt;/span&gt; decode&lt;span&gt;&amp;lt;&lt;/span&gt;T&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Decodable&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_&lt;/span&gt; type&lt;span&gt;:&lt;/span&gt; T&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Type&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; from string&lt;span&gt;:&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; T &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;try&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;decode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;type&lt;span&gt;,&lt;/span&gt; from&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Data&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;utf8&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Test-the-API-Locally&#34;&gt;Test the API Locally&lt;/h2&gt;&lt;p&gt;We now have everything in place to start testing our API before deploying it to AWS. Let&amp;#39;s try to get all the items.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ &lt;span&gt;curl&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;    --header &lt;span&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;  --request GET &lt;span&gt;\&lt;/span&gt;&#xA;  http://localhost:7000/invoke/todoitems&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will get a &lt;code&gt;&lt;span&gt;404&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; Not found&lt;/code&gt; error, which is weird because we have configured that endpoint in the right way inside our Lambda function. Well, this is because our local Runtime is only listening for requests at &lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;7000&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;invoke&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;In addition, we are using Amazon API Gateway to expose our Lambda function as an HTTP API. This means that all incoming HTTP requests will get transformed into JSON data by the API Gateway and provide the Lambda function with that payload already transformed. Then, our function will process that JSON payload and respond with another JSON payload itself, which the API Gateway will transform back into an HTTP response. &lt;/p&gt;&lt;p&gt;So, if we want to simulate this interaction, we must provide an HTTP request (in JSON format) in which we need to include all the relevant information like the method we want to call, the route path, the body, and so on.&lt;/p&gt;&lt;p&gt;This is a standard HTTP request after the API Gateway makes its transformations:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;routeKey&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;GET /todoitems&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;rawPath&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/todoitems&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;requestContext&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;accountId&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;apiId&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;domainName&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;domainPrefix&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;stage&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;requestId&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;/todoitems&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;method&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;HTTP/1.1&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;sourceIp&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;userAgent&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;time&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;timeEpoch&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;isBase64Encoded&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;rawQueryString&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We don&amp;#39;t have to provide all the values, but all the keys must be present. Otherwise, we&amp;#39;ll get a decoding error from the Lambda function.&lt;/p&gt;&lt;p&gt;With this in mind, let&amp;#39;s make a request again. We can do it using the terminal like before or an API client tool like &lt;a href=&#34;https://www.postman.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Postman&lt;/a&gt;. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ &lt;span&gt;curl&lt;/span&gt; --header &lt;span&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;  --request POST &lt;span&gt;\&lt;/span&gt;&#xA;  --data &lt;span&gt;&amp;#39;{&#xA;    &amp;#34;routeKey&amp;#34;:&amp;#34;GET /todoitems&amp;#34;,&#xA;    &amp;#34;version&amp;#34;:&amp;#34;2.0&amp;#34;,&#xA;    &amp;#34;rawPath&amp;#34;:&amp;#34;/todoitems&amp;#34;,&#xA;    &amp;#34;requestContext&amp;#34;:{&#xA;        &amp;#34;accountId&amp;#34;:&amp;#34;&amp;#34;,&#xA;        &amp;#34;apiId&amp;#34;:&amp;#34;&amp;#34;,&#xA;        &amp;#34;domainName&amp;#34;:&amp;#34;&amp;#34;,&#xA;        &amp;#34;domainPrefix&amp;#34;:&amp;#34;&amp;#34;,&#xA;        &amp;#34;stage&amp;#34;: &amp;#34;&amp;#34;,&#xA;        &amp;#34;requestId&amp;#34;: &amp;#34;&amp;#34;,&#xA;        &amp;#34;http&amp;#34;:{&#xA;            &amp;#34;path&amp;#34;:&amp;#34;/todoitems&amp;#34;,&#xA;            &amp;#34;method&amp;#34;:&amp;#34;GET&amp;#34;,&#xA;            &amp;#34;protocol&amp;#34;:&amp;#34;HTTP/1.1&amp;#34;,&#xA;            &amp;#34;sourceIp&amp;#34;:&amp;#34;&amp;#34;,&#xA;            &amp;#34;userAgent&amp;#34;:&amp;#34;&amp;#34;&#xA;        },&#xA;        &amp;#34;time&amp;#34;: &amp;#34;&amp;#34;,&#xA;        &amp;#34;timeEpoch&amp;#34;:0&#xA;    },&#xA;    &amp;#34;isBase64Encoded&amp;#34;:false,&#xA;    &amp;#34;rawQueryString&amp;#34;:&amp;#34;&amp;#34;,&#xA;    &amp;#34;headers&amp;#34;:{}&#xA;}&amp;#39;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;http://localhost:7000/invoke&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we want to retrieve only one item, we need to add an entry into our data JSON. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;#34;pathParameters&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Last, if we want to test the &lt;code&gt;&lt;span&gt;POST&lt;/span&gt;&lt;/code&gt; method, we must add the following entry to our data JSON. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;#34;body&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;{\&amp;#34;id\&amp;#34;:1, \&amp;#34;description\&amp;#34;: \&amp;#34;Test\&amp;#34;}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And, other than that, we also need to modify the &lt;strong&gt;routeKey&lt;/strong&gt; to &lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;todoitems&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; and the &lt;strong&gt;http.method&lt;/strong&gt; property to &lt;strong&gt;POST&lt;/strong&gt; instead of &lt;strong&gt;GET&lt;/strong&gt;.&lt;/p&gt;&lt;h2 id=&#34;Deploy-to-AWS&#34;&gt;Deploy to AWS&lt;/h2&gt;&lt;h3 id=&#34;Compile---Package&#34;&gt;Compile &amp;amp; Package&lt;/h3&gt;&lt;p&gt;We will execute our Lambda function on &lt;strong&gt;Amazon Linux 2&lt;/strong&gt; OS, so we need to compile our function for this particular OS. For convenience, we&amp;#39;ll use &lt;a href=&#34;https://www.docker.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Docker&lt;/a&gt; to do this. Create a new folder named &lt;strong&gt;Scripts&lt;/strong&gt; in your root project folder. Inside this folder, create a new &lt;strong&gt;build.sh&lt;/strong&gt; file with the following code&lt;/p&gt;&lt;pre&gt;&lt;code&gt;docker run &lt;span&gt;\&lt;/span&gt;&#xA;    --rm &lt;span&gt;\&lt;/span&gt;&#xA;    --volume &lt;span&gt;&amp;#34;&lt;span&gt;&lt;span&gt;$(&lt;/span&gt;&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;/:/src&amp;#34;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;    --workdir &lt;span&gt;&amp;#34;/src/&amp;#34;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;    swift:5.3.1-amazonlinux2 &lt;span&gt;\&lt;/span&gt;&#xA;    swift build --product ToDoList-API -c release -Xswiftc -static-stdlib&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Understanding Docker commands is beyond the scope of this article, but what this code does is compiles our code for a container. If you&amp;#39;d like to learn more about using Docker and its available commands, check out the &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/cli/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;oficial documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Now go ahead and create another file inside the &lt;strong&gt;Scripts&lt;/strong&gt; folder: &lt;strong&gt;package.sh&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&#xA;&#xA;&lt;span&gt;set&lt;/span&gt; -eu&#xA;&#xA;&lt;span&gt;executable&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;$1&lt;/span&gt;&#xA;&#xA;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;.build/lambda/&lt;span&gt;$executable&lt;/span&gt;&#xA;&lt;span&gt;rm&lt;/span&gt; -rf &lt;span&gt;&amp;#34;&lt;span&gt;$target&lt;/span&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;mkdir&lt;/span&gt; -p &lt;span&gt;&amp;#34;&lt;span&gt;$target&lt;/span&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;cp&lt;/span&gt; &lt;span&gt;&amp;#34;.build/release/&lt;span&gt;$executable&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span&gt;&amp;#34;&lt;span&gt;$target&lt;/span&gt;/&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;cd&lt;/span&gt; &lt;span&gt;&amp;#34;&lt;span&gt;$target&lt;/span&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;ln&lt;/span&gt; -s &lt;span&gt;&amp;#34;&lt;span&gt;$executable&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span&gt;&amp;#34;bootstrap&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;zip&lt;/span&gt; --symlinks lambda.zip *&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create a new zip file with the right structure ready for us to upload to AWS.&lt;/p&gt;&lt;p&gt;We only need to follow these simple steps to build and package our code:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;code&gt;$ sh &lt;span&gt;.&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;Scripts&lt;span&gt;/&lt;/span&gt;build&lt;span&gt;.&lt;/span&gt;sh&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;$ sh &lt;span&gt;.&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;Scripts&lt;span&gt;/&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;sh ToDoList&lt;span&gt;-&lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;In many environments, we may get privilege errors upon executing these scripts. If that happens, we just need to mark the file as executable by running the following commands:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ &lt;span&gt;chmod&lt;/span&gt; +x Scripts/build.sh&#xA;$ &lt;span&gt;chmod&lt;/span&gt; +x Scripts/package.sh&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Upload-Lambda-file&#34;&gt;Upload Lambda file&lt;/h3&gt;&lt;p&gt;The next step is to create our Lambda function and upload the zip file that we&amp;#39;ve just generated. Login into your AWS account, go to AWS Lambda, and click on &lt;strong&gt;Create function&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5pfB1jTuOtVriJgoushAI5/0998fd7778997150dd2b85d01d80564a/swift_lambda_02.png&#34; alt=&#34;Crate AWS Lambda function - Step 1&#34;/&gt;&lt;/p&gt;&lt;p&gt;Click on the &lt;strong&gt;Create function&lt;/strong&gt; button after entering a function name and the runtime option. You will be redirected to the next screen to upload the file.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/67bsSmxRcFkaROyOYicx2o/59a3679578ae60617f795065e5f3546b/swift_lambda_03.png&#34; alt=&#34;Crate AWS Lambda function - Step 2&#34;/&gt;&lt;/p&gt;&lt;p&gt;Click on the .zip file and locate your &lt;strong&gt;lambda.zip&lt;/strong&gt; file on your computer. It should be available on &lt;code&gt;$ your&lt;span&gt;-&lt;/span&gt;project&lt;span&gt;-&lt;/span&gt;path&lt;span&gt;/&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;build&lt;span&gt;/&lt;/span&gt;lambda&lt;span&gt;/&lt;/span&gt;ToDoList&lt;span&gt;-&lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;lambda&lt;span&gt;.&lt;/span&gt;zip&lt;/code&gt;&lt;/p&gt;&lt;h3 id=&#34;Connect-the-API-Gateway&#34;&gt;Connect the API Gateway&lt;/h3&gt;&lt;p&gt;The last thing we need to do is connect our function to the API Gateway. Go to the API Gateway dashboard from your AWS console and click on &lt;strong&gt;Create API.&lt;/strong&gt; Then choose the &lt;strong&gt;HTTP API&lt;/strong&gt; option by clicking on the &lt;strong&gt;Build&lt;/strong&gt; button.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Click on &lt;strong&gt;Add Integration&lt;/strong&gt; and select the Lambda option&#xA;  &lt;ul&gt;&lt;li&gt;Search for the Lambda function we just created in the previous section.&lt;/li&gt;&lt;li&gt;Make sure that the version is &lt;strong&gt;2.0&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Chose a name for the API.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3O9bqK0RSD2116B4akcjJ5/a8dff34110d14a5065c6058e7823c73e/swift_lambda_04.png&#34; alt=&#34;API Gateway - Step 1&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Here we must configure our routes. If we don&amp;#39;t want to restrict the routing, we can use &lt;strong&gt;$default&lt;/strong&gt; in the &lt;strong&gt;Resource path&lt;/strong&gt; field. This will map all the requests to our Lambda. &lt;/p&gt;&lt;p&gt;For this tutorial, we&amp;#39;re going to set the three endpoints that we defined at the beginning.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1ttSD1ozz3vM1IJ4ERKX8H/93a7c3d609759f6138c338e09c721f7a/swift_lambda_05.png&#34; alt=&#34;API Gateway - Step 2&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;In this step, we can configure different environments for our API, like development and production. In our case, we can leave &lt;strong&gt;$default&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/515U5zI0IewKQpHvK5vTeC/4a0772d20ce1fd9f1778edecfefa928b/swift_lambda_06.png&#34; alt=&#34;API Gateway - Step 3&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Review all the information and click on &lt;strong&gt;Create&lt;/strong&gt;. &lt;/p&gt;&lt;p&gt;And that&amp;#39;s it! We now have our API deployed to AWS. The invoke url should be something like this: &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;your&lt;span&gt;-&lt;/span&gt;gateway&lt;span&gt;-&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;execute&lt;span&gt;-&lt;/span&gt;api&lt;span&gt;.&lt;/span&gt;us&lt;span&gt;-&lt;/span&gt;east&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1.&lt;/span&gt;amazonaws&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt;&lt;/p&gt;&lt;h3 id=&#34;Test-it-&#34;&gt;Test it!&lt;/h3&gt;&lt;p&gt;We&amp;#39;re using Postman for this part, but you can use whatever other tool you want.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Get all items&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/iz0F35N6VrbMOJfBSU58p/5bf838ddda1dbb529c2a4973d1f626a3/swift_lambda_07.png&#34; alt=&#34;Get all items reques&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Get one item&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/OF1HGO3P1B51ioF5JdfdR/1af20c65c0addbc106f7a974312bd74d/swift_lambda_08.png&#34; alt=&#34;Get one item request&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Create new item&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7yuttuwCtspW5xxmy0ug0r/ab7e81aa859b84948a304c7a3abed3c6/swift_lambda_09.png&#34; alt=&#34;Create new item request&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Secure-the-API-Using-Auth0&#34;&gt;Secure the API Using Auth0&lt;/h2&gt;&lt;p&gt;Of course, you&amp;#39;d never want to leave an unauthenticated API up - you&amp;#39;ll be responsible for paying for every call made to it!. To demonstrate how we can secure our endpoints, let&amp;#39;s make the &lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;todoitems&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; endpoint only be accessible by authenticated users (in a real application, we&amp;#39;d protect all of these endpoints). &lt;/p&gt;&lt;p&gt;To accomplish this, we are going to create a custom &lt;a href=&#34;https://es.wikipedia.org/wiki/JSON_Web_Token&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;JSON Web Tokens (JWTs)&lt;/a&gt; authorizer with &lt;strong&gt;Auth0&lt;/strong&gt; and attach it to our API Gateway endpoint.&lt;/p&gt;&lt;h3 id=&#34;Create-a-new-Auth0-API&#34;&gt;Create a new Auth0 API&lt;/h3&gt;&lt;p&gt;First thing first, login into your Auth0 account and go to &lt;strong&gt;Applications → APIs&lt;/strong&gt; in the left menu, and click on + &lt;strong&gt;Create API&lt;/strong&gt; button.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3GZG3baxHOc6e2CaNEv0iu/12d2dc752a4753bdd7b9cba95c72f91e/swift_lambda_10.png&#34; alt=&#34;New Auth0 API&#34;/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: This will be the internal name for the API&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Identifier&lt;/strong&gt;: &lt;a href=&#34;https://auth0-jwt-authorizer/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://auth0-jwt-authorizer&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Signing Algorithm&lt;/strong&gt;: Just leave the default here&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Go back to your API Gateway Dashboard and click the &lt;strong&gt;Authorization&lt;/strong&gt; option on the left panel below the &lt;strong&gt;Develop&lt;/strong&gt; section.&lt;/p&gt;&lt;p&gt;Select the endpoints that you want to restrict access to; in our case, it will be &lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;todoitems&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;, and click on &lt;strong&gt;Create and attach an authorizer&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2muFgeJURgJInk8TGe7UgA/bfe4a098b1b9912f319879ee4356bb9a/swift_lambda_11.png&#34; alt=&#34;Authorizer&#34;/&gt;&lt;/p&gt;&lt;p&gt;Select &lt;strong&gt;JWT&lt;/strong&gt; type and fill in the required information:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: The name that you want to call the authorizer&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Identity source&lt;/strong&gt;: &lt;code&gt;$request&lt;span&gt;.&lt;/span&gt;header&lt;span&gt;.&lt;/span&gt;Authorization&lt;/code&gt; This means that the authorizer can access the access token in the Authorization header.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Issuer URL&lt;/strong&gt;: &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;tenant&lt;span&gt;-&lt;/span&gt;name&lt;span&gt;}&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;com&lt;/code&gt;. The authorizer uses this to validate the &lt;strong&gt;iss&lt;/strong&gt; field inside the JWT. You can find your Auth0 tenant-name in &lt;strong&gt;Applications → Default App → Domain&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Audience&lt;/strong&gt;: &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;auth0&lt;span&gt;-&lt;/span&gt;jwt&lt;span&gt;-&lt;/span&gt;authorizer&lt;/code&gt;. This will be used by the authorizer to validate the &lt;strong&gt;aud&lt;/strong&gt; field inside the JWT. This needs to match with the identifier that we configured our Auth0 API before.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6CBOYYxuepwvH5GuJBy4Sa/a2fa0221485d3351bbb3b789b26276fa/swift_lambda_12.png&#34; alt=&#34;Add AWS Lambda authorizer&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Test-it-Again&#34;&gt;Test it Again&lt;/h3&gt;&lt;p&gt;If we now try to call &lt;code&gt;&lt;span&gt;GET&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;todoitems&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;, we will get an unauthorized error.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Unauthorized&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is because if we want to use this endpoint, we must provide an authentication header. In a real app, we will return a valid token after the user was authenticated by our app, but just for testing purposes, we can get a token from Auth0.&lt;/p&gt;&lt;p&gt;Go again to your Auth0 dashboard, and on the left panel, click on &lt;strong&gt;Applications → APIs → AWS JWT Authorizer&lt;/strong&gt; &lt;strong&gt;→&lt;/strong&gt; &lt;strong&gt;Test&lt;/strong&gt;. Find the response section and copy the bearer token provided.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6rxP91y2vKpJLm2sJ72nb7/ac0c048e856f3e8fedbecbf097317d53/swift_lambda_13.png&#34; alt=&#34;Auth0 dashboard&#34;/&gt;&lt;/p&gt;&lt;p&gt;Now go back to Postman, add an Authorization header with this token, and send the request. &lt;/p&gt;&lt;p&gt;Because our request has an authentication token, we get a response!&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1QIhmYdn0hGKDGqAhKcuSJ/170a0ef548ff64bc57770f9aa9ae72a7/swift_lambda_14.png&#34; alt=&#34;Authentication Token Response&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;With this type of solution, we, as iOS developers, are in a position to start shifting to a mobile full-stack role, where we don&amp;#39;t need a separate team for the backend side. Of course, every team and project is different. However, for small projects or proof of concepts, this solution should work like a charm. Understanding backend technologies will increase your understanding of software and make you more of an asset to any iOS team.&lt;/p&gt;&lt;p&gt;The Swift AWS Lambda Runtime has room for improvement (like everything in the tech industry), but it gives us a start point to write backend code without the need of learning a new development language. &lt;/p&gt;&lt;p&gt;If you want a more detailed example with a database (DynamoDB) connection, you can check the full project &lt;a href=&#34;https://github.com/blorenzo10/lambda-swift&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/create-an-api-in-swift-and-deploy-it-to-aws-lambda/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to create and deploy a serverless HTTP API using Swift and AWS Lambda.</summary>
    <author>
      <name>Attach new Authorizer</name>
    </author>
  </entry>
  <entry>
    <title>Get Started with Custom Error Handling in Spring Boot (Java)</title>
    <updated>2021-09-27T15:29:00Z</updated>
    <id>tag:auth0.com,2021-09-27:/blog/get-started-with-custom-error-handling-in-spring-boot-java/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;TL/DR:&lt;/strong&gt; Let’s take a look at everything required to build custom error handling logic in both Spring Boot Web and Spring Boot Security&lt;/p&gt;&lt;p&gt;REST applications developed in Spring Boot automatically take advantage of its default error handling logic. Specifically, whenever an error occurs, a default response containing some information is returned. The problem is that this information may be poor or insufficient for the API callers to deal with the error properly. This is why implementing custom error handling logic is such a common and desirable task. Achieving it requires more effort than you might think, and you need to delve into a few essential Spring Boot notions. Let&amp;#39;s see everything required to get started with custom error handling in Spring Boot and Java.&lt;/p&gt;&lt;h2 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;This is the list of all the prerequisites for following the article:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Java &amp;gt;= 1.8 (Java &amp;gt;= 13 recommended)&lt;/li&gt;&lt;li&gt;Spring Boot &amp;gt;= 2.5&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring Boot Starter Web&lt;/a&gt; &amp;gt;= 2.5&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/org.springframework.security/spring-security-core&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring Security&lt;/a&gt; &amp;gt;= 5.5&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/org.projectlombok/lombok&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Project Lombok&lt;/a&gt; &amp;gt;= 1.18&lt;/li&gt;&lt;li&gt;Gradle &amp;gt;= 4.x or Maven 3.6.x&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Default-Error-Handling-in-Spring-Boot&#34;&gt;Default Error Handling in Spring Boot&lt;/h2&gt;&lt;p&gt;By default, Spring Boot offers a fallback error-handling page, as well as an error-handling response in case of REST requests. Particularly, Spring Boot looks for a mapping for the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;error&lt;/code&gt; endpoint during the start-up. This mapping depends on what is set on a &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/ViewResolver.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;ViewResolver&lt;/code&gt;&lt;/a&gt; class. When no valid mappings can be found, Spring Boot automatically configures a default fallback error page. This so-called &lt;em&gt;Whitelabel Error Page&lt;/em&gt; is nothing more than a white HTML page containing the HTTP status code and a vague error message. This is what such a page looks like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;   &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;   &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt; &lt;span&gt;data-new-gr-c-s-check-loaded&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;14.1026.0&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;data-gr-ext-installed&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Whitelabel Error Page&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;created&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Sun Aug 15 14:32:17 UTC 2021&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;There was an unexpected error (type=Internal Server Error, status=500).&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;   &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is what the &lt;em&gt;Whitelabel&lt;/em&gt; HTML page looks like in your browser:&#xA;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3uDV4oIkM9VkBKdc37xA9n/647cc2fc212b61a1aa3ff4d52a99c032/whitelabel-error-page.jpg&#34; alt=&#34;The Spring Boot Whitelabel HTML Error Page&#34; title=&#34;The Spring Boot Whitelabel HTML Error Page&#34;/&gt;&#xA;&lt;/p&gt;&lt;p&gt;&lt;i&gt;The Spring Boot Whitelabel HTML Error Page&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Similarly, when dealing with REST requests, Spring Boot automatically returns a default JSON response in case of errors. This contains the same information as the aforementioned &lt;em&gt;Whitelabel&lt;/em&gt; HTML error page and looks as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;2021-15-08T14:32:17.947+0000&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;500&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;error&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Internal Server Error&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;/test&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, the default Spring Boot error handling responses for REST does not provide much information. This can quickly become a problem, especially when trying to debug. It is also problematic for front-end developers, who need detailed information coming from API error response messages to be able to explain to the end users what happened properly. &lt;/p&gt;&lt;p&gt;Let’s see how to replace this default response with custom-defined messages. While this may appear like an easy task, this is actually a tricky one. To achieve it, you first need to know a few Spring Boot fundamentals. Let&amp;#39;s learn more about them.&lt;/p&gt;&lt;h2 id=&#34;Custom-Error-Handling-in-Spring-Boot&#34;&gt;Custom Error Handling in Spring Boot&lt;/h2&gt;&lt;p&gt;You are about to see two different approaches to custom error handling in Spring Boot REST applications. Both are based on a &lt;code&gt;@ControllerAdvice&lt;/code&gt; annotated class handling all exceptions that may occur. So, let’s first see what a &lt;code&gt;@ControllerAdvice&lt;/code&gt; annotated class is, why to use it, how, and when. Then, you will learn how to implement the two different approaches in detail. Finally, the pros and cons of each method will be explained.&lt;/p&gt;&lt;h2 id=&#34;Handling-Exceptions-with---ControllerAdvice-&#34;&gt;Handling Exceptions with &lt;code&gt;@ControllerAdvice&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;The &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@ControllerAdvice&lt;/code&gt;&lt;/a&gt; annotation was introduced in &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/3.2.8.RELEASE/changelog.txt&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring 3.2&lt;/a&gt; to make exception handling logic easier and entirely definable in one place. In fact, &lt;code&gt;@ControllerAdvice&lt;/code&gt; allows you to address exception handling across the whole application. In other words, a single &lt;code&gt;@ControllerAdvice&lt;/code&gt; annotated class can handle exceptions thrown from any place in your application. Thus, classes annotated with &lt;code&gt;@ControllerAdvice&lt;/code&gt; are powerful and flexible tools. Not only do they allow you to centralize exception-handling logic into a global component, but also give you control over the body response, as well as the HTTP status code. This is especially important when trying to achieve custom error handling. Let’s see &lt;code&gt;@ControllerAdvice&lt;/code&gt; in action.&lt;/p&gt;&lt;p&gt;Now, you are about to see everything required to implement two custom error handling approaches based on &lt;code&gt;@ControllerAdvice&lt;/code&gt;. First, you should clone &lt;a href=&#34;https://github.com/Tonel/spring-boot-custom-error-handling&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the GitHub repository&lt;/a&gt; supporting this article. By analyzing the codebase, going through this article will become easier. Also, you will be able to immediately see the two approaches in action.&lt;/p&gt;&lt;p&gt;So, clone the repository with the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;git&lt;/span&gt; clone https://github.com/Tonel/spring-boot-custom-error-handling&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, run the &lt;code&gt;DemoApplication&lt;/code&gt; main class by following &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/using-boot-running-your-application.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this guide from the Spring Boot official documentation&lt;/a&gt;, and reach one of the following 4 endpoints to see the custom error handling responses:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;test&lt;span&gt;-&lt;/span&gt;custom&lt;span&gt;-&lt;/span&gt;data&lt;span&gt;-&lt;/span&gt;not&lt;span&gt;-&lt;/span&gt;found&lt;span&gt;-&lt;/span&gt;exception&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;test&lt;span&gt;-&lt;/span&gt;custom&lt;span&gt;-&lt;/span&gt;parameter&lt;span&gt;-&lt;/span&gt;constraint&lt;span&gt;-&lt;/span&gt;exception&lt;span&gt;?&lt;/span&gt;value&lt;span&gt;=&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;test&lt;span&gt;-&lt;/span&gt;custom&lt;span&gt;-&lt;/span&gt;error&lt;span&gt;-&lt;/span&gt;exception&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;test&lt;span&gt;-&lt;/span&gt;generic&lt;span&gt;-&lt;/span&gt;exception&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The first two APIs apply the first approach to error handling you are about to see, while the third API uses the second approach. The fourth and last API shows the fallback error handling logic presented above in action. Now, let&amp;#39;s delve into implementing these two approaches to custom error handling in Spring Boot.&lt;/p&gt;&lt;p&gt;Both of them rely on an &lt;code&gt;ErrorMessage&lt;/code&gt; class representing the custom error body placed in an &lt;code&gt;error&lt;/code&gt; package, containing everything needed to deal with custom error handling logic. This can be implemented as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/java/com/customerrorhandling/demo/errors/ErrorResponse.java&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;customerrorhandling&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;errors&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;fasterxml&lt;span&gt;.&lt;/span&gt;jackson&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;JsonFormat&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;lombok&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Getter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;lombok&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;util&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Date&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@Getter&lt;/span&gt;&#xA;&lt;span&gt;@Setter&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ErrorResponse&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// customizing timestamp serialization format&lt;/span&gt;&#xA;    &lt;span&gt;@JsonFormat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;shape &lt;span&gt;=&lt;/span&gt; &lt;span&gt;JsonFormat&lt;span&gt;.&lt;/span&gt;Shape&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;STRING&lt;span&gt;,&lt;/span&gt; pattern &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;dd-MM-yyyy hh:mm:ss&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt; timestamp&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; code&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; status&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; message&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; stackTrace&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt; data&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ErrorResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        timestamp &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ErrorResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;HttpStatus&lt;/span&gt; httpStatus&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;String&lt;/span&gt; message&#xA;    &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;code &lt;span&gt;=&lt;/span&gt; httpStatus&lt;span&gt;.&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;status &lt;span&gt;=&lt;/span&gt; httpStatus&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;message &lt;span&gt;=&lt;/span&gt; message&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ErrorResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;HttpStatus&lt;/span&gt; httpStatus&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;String&lt;/span&gt; message&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;String&lt;/span&gt; stackTrace&#xA;    &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                httpStatus&lt;span&gt;,&lt;/span&gt;&#xA;                message        &#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;stackTrace &lt;span&gt;=&lt;/span&gt; stackTrace&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ErrorResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;HttpStatus&lt;/span&gt; httpStatus&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;String&lt;/span&gt; message&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;String&lt;/span&gt; stackTrace&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;Object&lt;/span&gt; data&#xA;    &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                httpStatus&lt;span&gt;,&lt;/span&gt;&#xA;                message&lt;span&gt;,&lt;/span&gt;&#xA;        stackTrace&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;data &lt;span&gt;=&lt;/span&gt; data&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;a href=&#34;https://projectlombok.org/features/GetterSetter&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Getter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://projectlombok.org/features/GetterSetter&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Setter&lt;/code&gt;&lt;/a&gt; annotations used in the code examples above are part of the &lt;a href=&#34;https://projectlombok.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;Project Lombok&lt;/code&gt;&lt;/a&gt;. They are used to automatically generate getters and setters. This is not mandatory and is just an additional way to avoid boilerplate code. Read &lt;a href=&#34;https://auth0.com/blog/a-complete-guide-to-lombok/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this&lt;/a&gt; article to find out more about Lombok.&lt;/p&gt;&lt;p&gt;&lt;code&gt;ErrorResponse&lt;/code&gt; carries information such as an HTTP status &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;, a &lt;code&gt;timestamp&lt;/code&gt; indicating when the error occurred, an optional error &lt;code&gt;message&lt;/code&gt;, an optional &lt;a href=&#34;https://en.wikibooks.org/wiki/Java_Programming/Stack_trace&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;exception stacktrace&lt;/code&gt;&lt;/a&gt;, and an optional object containing any kind of &lt;code&gt;data&lt;/code&gt;. You should try to provide values to the first three fields, while the latter should be used only when required. In particular, the &lt;code&gt;stackTrace&lt;/code&gt; field should be valorized only in staging or development environments, as explained &lt;a href=&#34;https://betterprogramming.pub/environment-based-error-handling-with-spring-boot-and-kotlin-b36b901135ad&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;. Similarly, the data field should be used only when additional data is required. Specifically, to explain in detail what happened or let the front-end better handle the error.&lt;/p&gt;&lt;p&gt;This class can be used to achieve a custom response when handling exceptions with &lt;code&gt;@ControllerAdvice&lt;/code&gt; as below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/java/com/customerrorhandling/demo/errors/CustomControllerAdvice.java&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;customerrorhandling&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;errors&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;exceptions&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;CustomDataNotFoundException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;exceptions&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;CustomErrorException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;exceptions&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;CustomParameterConstraintException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;bind&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ControllerAdvice&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;bind&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ExceptionHandler&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;io&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;PrintWriter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;io&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;StringWriter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@ControllerAdvice&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomControllerAdvice&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;@ExceptionHandler&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;NullPointerException&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;// exception handled&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ErrorResponse&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;handleNullPointerExceptions&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;Exception&lt;/span&gt; e&#xA;    &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;// ... potential custom logic&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;HttpStatus&lt;/span&gt; status &lt;span&gt;=&lt;/span&gt; &lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;NOT_FOUND&lt;span&gt;;&lt;/span&gt; &lt;span&gt;// 404&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ErrorResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;              status&lt;span&gt;,&lt;/span&gt; &#xA;              e&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            status&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// fallback method&lt;/span&gt;&#xA;    &lt;span&gt;@ExceptionHandler&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Exception&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;// exception handled&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ErrorResponse&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;handleExceptions&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;Exception&lt;/span&gt; e&#xA;    &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;// ... potential custom logic&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;HttpStatus&lt;/span&gt; status &lt;span&gt;=&lt;/span&gt; &lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;INTERNAL_SERVER_ERROR&lt;span&gt;;&lt;/span&gt; &lt;span&gt;// 500&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// converting the stack trace to String&lt;/span&gt;&#xA;    &lt;span&gt;StringWriter&lt;/span&gt; stringWriter &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;StringWriter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;PrintWriter&lt;/span&gt; printWriter &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;PrintWriter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;stringWriter&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    e&lt;span&gt;.&lt;/span&gt;&lt;span&gt;printStackTrace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;printWriter&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;String&lt;/span&gt; stackTrace &lt;span&gt;=&lt;/span&gt; stringWriter&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ErrorResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;              status&lt;span&gt;,&lt;/span&gt; &#xA;              e&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;              stackTrace &lt;span&gt;// specifying the stack trace in case of 500s&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            status&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, &lt;code&gt;@ControllerAdvice&lt;/code&gt; works by employing the &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@ExceptionHandler&lt;/code&gt;&lt;/a&gt; method-level annotation. This annotation allows you to define which method should be called in case of an error. Specifically, the exception thrown is compared to the exceptions passed as parameters to &lt;code&gt;@ExceptionHandler&lt;/code&gt; based on type. The first method where there is a match is called. If none matched, then the exception&amp;#39;s parent class is tested, and so on. This is also why you should implement a fallback method to cover all remaining cases. You can achieve this by passing the &lt;a href=&#34;https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Exception.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; class to the &lt;code&gt;@ExceptionHandler&lt;/code&gt; annotation, just like in the &lt;code&gt;handleExceptions&lt;/code&gt; method. In fact, any exception in Java must have &lt;code&gt;Exception&lt;/code&gt; as one of its ancestors in their inheritance chain. So, they all extend directly — or as subclasses — the &lt;code&gt;Exception&lt;/code&gt; &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;superclass&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Then, each method handles the error and might even implement custom logic, such as logging. In this example, each exception is handled by returning a &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;ResponseEntity&lt;/code&gt;&lt;/a&gt; having the desired &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/HttpStatus.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;HttpStatus&lt;/code&gt;&lt;/a&gt;. This will be used as an HTTP status code associated with the error response. Similarly, the &lt;code&gt;ErrorResponse&lt;/code&gt; instance passed to the &lt;code&gt;ResponseEntity&lt;/code&gt; constructor will be automatically serialized in JSON and used as the message body. This way, custom error handling has just been achieved.&lt;/p&gt;&lt;p&gt;Now, you will dive into how to use &lt;code&gt;@ConfrollerAdvice&lt;/code&gt; to implement two different approaches to custom error handling for REST in Spring Boot Web. The first one involves boilerplate code, but it is clean and best-practice based. In contrast, the second represents a good solution in terms of convenience, although it is a bit dirty.&lt;/p&gt;&lt;h3 id=&#34;Defining-Many-Custom-Exceptions&#34;&gt;Defining Many Custom Exceptions&lt;/h3&gt;&lt;p&gt;This approach involves having as many methods in your &lt;code&gt;@ControllerAdvice&lt;/code&gt; as many HTTP error status codes you want to handle. These methods will be related to one or more exceptions and return an error message with a particular HTTP status code. Implementing such an approach required three steps. First, you have to think about all the HTTP error status codes you want your application to return. Then, you have to define a method for each of them in your &lt;code&gt;@ControllerAdvice&lt;/code&gt; annotated class. Lastly, you have to associate these methods with their exceptions with the &lt;code&gt;@ExceptionHandler&lt;/code&gt; annotation.&lt;/p&gt;&lt;p&gt;This means that all exceptions of a particular type will be traced back to their relative method in the &lt;code&gt;@ControllerAdvice&lt;/code&gt; annotated class. This may represent a problem, especially considering some exceptions are more common than others, such as &lt;a href=&#34;https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/NullPointerException.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;NullPointerException&lt;/code&gt;&lt;/a&gt;. Since these exceptions can be thrown in many parts of your logic, they might have different meanings. Thus, they represent various errors and, therefore, other HTTP status codes.&lt;/p&gt;&lt;p&gt;The solution is to introduce new custom exceptions wrapping these frequent exceptions. For example, a &lt;code&gt;NullPointerException&lt;/code&gt; can become a &lt;code&gt;CustomParameterConstraintException&lt;/code&gt; exception at the controller layer, and a &lt;code&gt;CustomDataNotFoundException&lt;/code&gt; at the DAO  (&lt;a href=&#34;https://it.wikipedia.org/wiki/Data_Access_Object&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Data Access Object&lt;/a&gt;) layer. In this case, the first one can be associated with a &lt;em&gt;400 Bad Request&lt;/em&gt;, and the second with a &lt;em&gt;404 Not Found&lt;/em&gt; HTTP status. The idea behind these exceptions is to give the error that occurred a more specific meaning. This better characterizes the error and makes it more handleable in the &lt;code&gt;@ControllerAdvice&lt;/code&gt; annotated class accordingly. So, you should define a custom exception for each particular error you want to handle. Also, using custom exception classes represents undoubtedly a clean code principle. Thus, by adopting it, you are going to have more than one benefit.&lt;/p&gt;&lt;p&gt;So, let’s see this approach in action through an example. Firstly, you have to define custom exceptions, as shown here:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/java/exceptions/CustomParameterConstraintException.java&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;exceptions&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomParameterConstraintException&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;RuntimeException&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;  &#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;CustomParameterConstraintException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;CustomParameterConstraintException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt; message&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;message&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/java/exceptions/CustomDataNotFoundException.java&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;exceptions&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomDataNotFoundException&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;RuntimeException&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;  &#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;CustomDataNotFoundException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;CustomDataNotFoundException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt; message&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;message&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, use them to wrap frequent exceptions, or to throw them in case of particular circumstances representing errors in your business logic. Let’s see how with two examples:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// DAO-level method&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Foo&lt;/span&gt; &lt;span&gt;retrieveFooById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;int&lt;/span&gt; id&#xA;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;try&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;// data retrieving logic&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;catch&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;NullPointerException&lt;/span&gt; e&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;CustomDataNotFoundException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;e&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As shown above, a generic &lt;code&gt;NullPointerException&lt;/code&gt; is turned into a more meaningful &lt;code&gt;CustomDataNotFoundException&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// controller-level method method&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Void&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;performOperation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;int&lt;/span&gt; numberOfAttempts&#xA;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;numberOfAttempts &lt;span&gt;&amp;lt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; numberOfAttempts &lt;span&gt;&amp;gt;=&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;CustomParameterConstraintException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;numberOfAttempts must be &amp;gt;= 0 and &amp;lt;= 5!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &#xA;    &lt;span&gt;// business logic&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, a particular behavior that should not happen is intercepted. Then, the custom &lt;code&gt;CustomParameterConstraintException&lt;/code&gt; exception describing it is thrown.&lt;/p&gt;&lt;p&gt;Finally, all you have to do is add two particular methods to your &lt;code&gt;@ControllerAdvice&lt;/code&gt; annotated class, one for each specific error.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/java/com/customerrorhandling/demo/errors/CustomControllerAdvice.java&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;customerrorhandling&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;errors&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;exceptions&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;CustomDataNotFoundException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;exceptions&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;CustomErrorException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;exceptions&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;CustomParameterConstraintException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;bind&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ControllerAdvice&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;bind&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ExceptionHandler&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;io&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;PrintWriter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;io&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;StringWriter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@ControllerAdvice&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomControllerAdvice&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ...&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@ExceptionHandler&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;CustomDataNotFoundException&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ErrorResponse&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;handleCustomDataNotFoundExceptions&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;Exception&lt;/span&gt; e&#xA;    &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;HttpStatus&lt;/span&gt; status &lt;span&gt;=&lt;/span&gt; &lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;NOT_FOUND&lt;span&gt;;&lt;/span&gt; &lt;span&gt;// 404&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// converting the stack trace to String&lt;/span&gt;&#xA;    &lt;span&gt;StringWriter&lt;/span&gt; stringWriter &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;StringWriter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;PrintWriter&lt;/span&gt; printWriter &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;PrintWriter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;stringWriter&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    e&lt;span&gt;.&lt;/span&gt;&lt;span&gt;printStackTrace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;printWriter&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;String&lt;/span&gt; stackTrace &lt;span&gt;=&lt;/span&gt; stringWriter&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ErrorResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;              status&lt;span&gt;,&lt;/span&gt; &#xA;              e&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          stackTrace&lt;span&gt;,&lt;/span&gt; &lt;span&gt;// assuming to be in staging environment, otherwise stackTrace should not be valorized&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            status&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@ExceptionHandler&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;CustomParameterConstraintException&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ErrorResponse&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;handleCustomParameterConstraintExceptions&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;Exception&lt;/span&gt; e&#xA;    &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;HttpStatus&lt;/span&gt; status &lt;span&gt;=&lt;/span&gt; &lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;BAD_REQUEST&lt;span&gt;;&lt;/span&gt; &lt;span&gt;// 400&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ErrorResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;              status&lt;span&gt;,&lt;/span&gt; &#xA;              e&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            status&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// ...&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Et voilà! Both errors originally related to the same exception were first characterized and then handled accordingly.&lt;/p&gt;&lt;p&gt;Now, let&amp;#39;s see the difference. This is what the default error response would look like on a 404 error:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;2021-15-08T14:32:17.947+0000&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;404&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;error&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Not Found&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;/test404&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And this is what the custom error response just implemented looks like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;2021-15-08 14:32:17&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;code&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;404&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;NOT_FOUND&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Resource not found&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;stackTrace&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &amp;#34;Exception in thread \&amp;#34;main\&amp;#34; com.example.demo.exceptions.CustomDataNotFoundException&#xA;        at com.example.demo.AuthorController.getAuthor(AuthorController.java&lt;span&gt;:&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;)&#xA;        at com.example.demo.AuthorService.getAuthor(AuthorService.java&lt;span&gt;:&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;)&#xA;        at com.example.demo.AuthorDao.getById(AuthorDao.java&lt;span&gt;:&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;)&amp;#34;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Defining-a-Single-Custom-Exception-Carrying-All-Data&#34;&gt;Defining a Single Custom Exception Carrying All Data&lt;/h3&gt;&lt;p&gt;This approach involves defining a custom exception carrying the HTTP status to use, and all the data required to describe the error that occurred. The idea is to turn every exception you want to handle, or you would like to throw under special circumstances, into an instance of this particular exception. This way, you are spreading the error characterization logic into all your code. So, you will only have to add a new method in your &lt;code&gt;@ControllerAdvice&lt;/code&gt; annotated class to handle this custom exception accordingly.&lt;/p&gt;&lt;p&gt;First, you have to define a custom error handling exception. This can be achieved as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/java/exceptions/CustomErrorException.java&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;exceptions&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;lombok&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Getter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;lombok&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@Getter&lt;/span&gt;&#xA;&lt;span&gt;@Setter&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomErrorException&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;RuntimeException&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;HttpStatus&lt;/span&gt; status &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt; data &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;CustomErrorException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;   &lt;span&gt;public&lt;/span&gt; &lt;span&gt;CustomErrorException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;String&lt;/span&gt; message&#xA;   &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &#xA;      &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;message&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;   &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;CustomErrorException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;HttpStatus&lt;/span&gt; status&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;String&lt;/span&gt; message&#xA;    &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;message&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;status &lt;span&gt;=&lt;/span&gt; status&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;CustomErrorException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;HttpStatus&lt;/span&gt; status&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;String&lt;/span&gt; message&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;Object&lt;/span&gt; data&#xA;    &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          status&lt;span&gt;,&lt;/span&gt;&#xA;      message&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;data &lt;span&gt;=&lt;/span&gt; data&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Again, the &lt;a href=&#34;https://projectlombok.org/features/GetterSetter&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Getter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://projectlombok.org/features/GetterSetter&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Setter&lt;/code&gt;&lt;/a&gt; annotations were used to avoid boilerplate code and are not mandatory. As you can see, the &lt;code&gt;CustomErrorException&lt;/code&gt; class carries the same data used in the &lt;code&gt;ErrorResponse&lt;/code&gt; class to better describe what happened and present the errors to the end-users.&lt;/p&gt;&lt;p&gt;So, you can use this exception to wrap other exceptions, or you can throw it in case of particular circumstances constituting errors in your business logic. Now, let’s see how with two examples:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// DAO-level method&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Foo&lt;/span&gt; &lt;span&gt;retrieveFooById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;int&lt;/span&gt; id&#xA;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;try&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;// data retrieving logic&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;catch&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;NullPointerException&lt;/span&gt; e&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;CustomErrorException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;NOT_FOUND&lt;span&gt;,&lt;/span&gt;&#xA;          e&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;(&lt;/span&gt;&lt;span&gt;Integer&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; id&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, an insufficiently significant &lt;code&gt;NullPointerException&lt;/code&gt; is turned into a more detailed &lt;code&gt;CustomErrorException&lt;/code&gt; containing all the data to describe why the error occurred.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// controller-level method method&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Void&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;performOperation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;int&lt;/span&gt; numberOfAttempts&#xA;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;numberOfAttempts &lt;span&gt;&amp;lt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; numberOfAttempts &lt;span&gt;&amp;gt;=&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;CustomErrorException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;BAD_REQUEST&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#34;numberOfAttempts must be &amp;gt;= 0 and &amp;lt;= 5!&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;(&lt;/span&gt;&lt;span&gt;Integer&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; numberOfAttempts&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;        &#xA;    &lt;span&gt;// business logic&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Similarly, a particular behavior that is not supposed to happen is intercepted. Consequently, a &lt;code&gt;CustomErrorException&lt;/code&gt; exception containing all the useful data to represent the error is thrown.&lt;/p&gt;&lt;p&gt;Lastly, add one method to handle &lt;code&gt;CustomErrorException&lt;/code&gt; exception instances to your &lt;code&gt;@ControllerAdvice&lt;/code&gt; annotated class, as below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/java/com/customerrorhandling/demo/errors/CustomControllerAdvice.java&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;customerrorhandling&lt;span&gt;.&lt;/span&gt;demo&lt;span&gt;.&lt;/span&gt;errors&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;exceptions&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;CustomDataNotFoundException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;exceptions&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;CustomErrorException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;exceptions&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;CustomParameterConstraintException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;bind&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ControllerAdvice&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;bind&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ExceptionHandler&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;io&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;PrintWriter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;io&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;StringWriter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@ControllerAdvice&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomControllerAdvice&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ...&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@ExceptionHandler&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;CustomErrorException&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ErrorResponse&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;handleCustomErrorExceptions&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;Exception&lt;/span&gt; e&#xA;    &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;// casting the generic Exception e to CustomErrorException&lt;/span&gt;&#xA;        &lt;span&gt;CustomErrorException&lt;/span&gt; customErrorException &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;CustomErrorException&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; e&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;HttpStatus&lt;/span&gt; status &lt;span&gt;=&lt;/span&gt; customErrorException&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getStatus&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;// converting the stack trace to String&lt;/span&gt;&#xA;        &lt;span&gt;StringWriter&lt;/span&gt; stringWriter &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;StringWriter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;PrintWriter&lt;/span&gt; printWriter &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;PrintWriter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;stringWriter&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        customErrorException&lt;span&gt;.&lt;/span&gt;&lt;span&gt;printStackTrace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;printWriter&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;String&lt;/span&gt; stackTrace &lt;span&gt;=&lt;/span&gt; stringWriter&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ErrorResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                        status&lt;span&gt;,&lt;/span&gt;&#xA;                        customErrorException&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                        stackTrace&lt;span&gt;,&lt;/span&gt;&#xA;                        customErrorException&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;                &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                status&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// ...&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that &lt;code&gt;@ExceptionHandler&lt;/code&gt; can accept more than one exception type. This means that the parameter of the method representing the exception must be downcasted. Otherwise, a &lt;a href=&#34;https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/ClassCastException.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;ClassCastException&lt;/code&gt;&lt;/a&gt; will be throw. So, upcast the exception &lt;code&gt;e&lt;/code&gt; to &lt;code&gt;CustomErrorException&lt;/code&gt; inside the method. Then, you will be able to access its particular fields and define a valid &lt;code&gt;ErrorResponse&lt;/code&gt; instance.&lt;/p&gt;&lt;p&gt;Done! This way each error that occurs is encapsulated into an exception containing everything required to describe it.&lt;/p&gt;&lt;p&gt;Now, let&amp;#39;s see the difference. This is what the default error response on a 404 error would look like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;2021-15-08T14:32:17.947+0000&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;404&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;error&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Not Found&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;/test404&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And this is what the custom error response just implemented looks like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;2021-15-08 14:32:17&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;code&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;404&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;NOT_FOUND&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Resource not found&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;stackTrace&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &amp;#34;Exception in thread \&amp;#34;main\&amp;#34; com.example.demo.exceptions.CustomErrorException&#xA;        at com.example.demo.AuthorController.getAuthor(AuthorController.java&lt;span&gt;:&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;)&#xA;        at com.example.demo.AuthorService.getAuthor(AuthorService.java&lt;span&gt;:&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;)&#xA;        at com.example.demo.AuthorDao.getById(AuthorDao.java&lt;span&gt;:&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;)&amp;#34;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Pros-and-Cons-of-Each-Approach&#34;&gt;Pros and Cons of Each Approach&lt;/h3&gt;&lt;p&gt;The first approach should be used when you do not want to spread error handling logic all over your codebase. In fact, the HTTP status code is only associated with errors in your &lt;code&gt;@ControllerAdvice&lt;/code&gt; annotated class. This means that no layer knows how the error will be handled and presented to users. Although this should be the desired behavior because it respects the &lt;a href=&#34;https://en.wikipedia.org/wiki/Principle_of_least_privilege&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;principle of least privilege&lt;/a&gt;, it does involve boilerplate code. In fact, you may easily end up with dozens of custom exceptions, and define them is a tedious and not-scalable approach.&lt;/p&gt;&lt;p&gt;So, you may want a less restricting approach, and this is why the second approach was presented. Unfortunately, this one is definitely dirtier. In fact, it requires you to spread detail about error handling logic in many different points of your code. In contrast, it is scalable and quicker to be implemented. So, despite not being the cleanest approach, it allows you to achieve the desired result with little effort. Plus, it is more maintainable than the first approach because it involves only a custom exception.&lt;/p&gt;&lt;h2 id=&#34;Custom-Error-Handling-in-Spring-Security&#34;&gt;Custom Error Handling in Spring Security&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://spring.io/projects/spring-security&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring Security&lt;/a&gt; is a powerful and highly customizable framework that provides both authentication and authorization. It is one of the most widely used Spring dependencies and represents the de-facto standard for securing a Spring Boot application.&lt;/p&gt;&lt;p&gt;In case of authentication and authorization failures, &lt;a href=&#34;https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/AuthenticationException.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;AuthenticationException&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/access/AccessDeniedException.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;AccessDeniedException&lt;/code&gt;&lt;/a&gt; are thrown respectively. Then, Spring Security takes care of encapsulating them in default error handling responses. If you want to customize them, the two approaches presented above are of no use. This is because &lt;code&gt;@ControllerAdvice&lt;/code&gt; can handle only exceptions thrown by controllers, but &lt;code&gt;AuthenticationException&lt;/code&gt; and &lt;code&gt;AccessDeniedException&lt;/code&gt; are thrown by the Spring Security &lt;a href=&#34;https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/access/intercept/AbstractSecurityInterceptor.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;AbstractSecurityInterceptor&lt;/code&gt;&lt;/a&gt; component - which is not a controller. In other words, a &lt;code&gt;@ControllerAdvice&lt;/code&gt; annotated class cannot catch them. Achieving this requires custom logic. &lt;/p&gt;&lt;h3 id=&#34;Implementing-Custom-Error-Handling-Logic-in-Spring-Security&#34;&gt;Implementing Custom Error Handling Logic in Spring Security&lt;/h3&gt;&lt;p&gt;Let’s take a look at how to implement custom error handling in Spring Security. Luckily, this is not too complex since you can easily provide Spring Security with two components to handle authentication and authorization errors, respectively. What you need to do is to provide the &lt;a href=&#34;https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/authentication/AuthenticationFailureHandler.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;AuthenticationFailureHandler&lt;/code&gt;&lt;/a&gt; interface with implementation, as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/java/com/auth0/hotsauces/security/CustomAuthenticationFailureHandler.java&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;hotsauces&lt;span&gt;.&lt;/span&gt;security&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;fasterxml&lt;span&gt;.&lt;/span&gt;jackson&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;JsonFormat&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;fasterxml&lt;span&gt;.&lt;/span&gt;jackson&lt;span&gt;.&lt;/span&gt;databind&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ObjectMapper&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AuthenticationException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;authentication&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AuthenticationFailureHandler&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;util&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;javax&lt;span&gt;.&lt;/span&gt;servlet&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;HttpServletRequest&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;javax&lt;span&gt;.&lt;/span&gt;servlet&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;HttpServletResponse&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;util&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;HashMap&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomAuthenticationFailureHandler&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;AuthenticationFailureHandler&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// Jackson JSON serializer instance&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;ObjectMapper&lt;/span&gt; objectMapper &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ObjectMapper&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Override&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onAuthenticationFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;HttpServletRequest&lt;/span&gt; request&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;HttpServletResponse&lt;/span&gt; response&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;AuthenticationException&lt;/span&gt; exception&#xA;    &lt;span&gt;)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;IOException&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ServletException&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &#xA;        &lt;span&gt;HttpStatus&lt;/span&gt; httpStatus &lt;span&gt;=&lt;/span&gt; &lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;UNAUTHORIZED&lt;span&gt;;&lt;/span&gt; &lt;span&gt;// 401        &lt;/span&gt;&#xA;&#xA;        &lt;span&gt;Map&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; data &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;HashMap&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        data&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;          &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        data&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#34;code&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;          httpStatus&lt;span&gt;.&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        data&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;          httpStatus&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        data&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;          exception&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &#xA;        &lt;span&gt;// setting the response HTTP status code&lt;/span&gt;&#xA;        response&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setStatus&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;httpStatus&lt;span&gt;.&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &#xA;        &lt;span&gt;// serializing the response body in JSON&lt;/span&gt;&#xA;        response&#xA;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;getOutputStream&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;              objectMapper&lt;span&gt;.&lt;/span&gt;&lt;span&gt;writeValueAsString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;data&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will be used to handle &lt;code&gt;AuthenticationExceptions&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Similarly, you can provide the &lt;a href=&#34;https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/access/AccessDeniedHandler.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;AccessDeniedHandler&lt;/code&gt;&lt;/a&gt; interface with implementation to handle &lt;code&gt;AccessDeniedExceptions&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/java/com/auth0/hotsauces/security/CustomAccessDeniedHandler.java&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;hotsauces&lt;span&gt;.&lt;/span&gt;security&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;fasterxml&lt;span&gt;.&lt;/span&gt;jackson&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;JsonFormat&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;fasterxml&lt;span&gt;.&lt;/span&gt;jackson&lt;span&gt;.&lt;/span&gt;databind&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ObjectMapper&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AuthenticationException&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;authentication&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AuthenticationFailureHandler&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;util&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;javax&lt;span&gt;.&lt;/span&gt;servlet&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;HttpServletRequest&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;javax&lt;span&gt;.&lt;/span&gt;servlet&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;HttpServletResponse&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;util&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;HashMap&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomAccessDeniedHandler&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;AccessDeniedHandler&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// Jackson JSON serializer instance&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;ObjectMapper&lt;/span&gt; objectMapper &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ObjectMapper&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Override&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;handle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;HttpServletRequest&lt;/span&gt; request&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;HttpServletResponse&lt;/span&gt; response&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;AccessDeniedException&lt;/span&gt; exception&#xA;    &lt;span&gt;)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;IOException&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ServletException&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &#xA;        &lt;span&gt;HttpStatus&lt;/span&gt; httpStatus &lt;span&gt;=&lt;/span&gt; &lt;span&gt;HttpStatus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;FORBIDDEN&lt;span&gt;;&lt;/span&gt; &lt;span&gt;// 403        &lt;/span&gt;&#xA;&#xA;        &lt;span&gt;Map&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; data &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;HashMap&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        data&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;          &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        data&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#34;code&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;          httpStatus&lt;span&gt;.&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        data&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;          httpStatus&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        data&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;          exception&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &#xA;        &lt;span&gt;// setting the response HTTP status code&lt;/span&gt;&#xA;        response&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setStatus&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;httpStatus&lt;span&gt;.&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &#xA;        &lt;span&gt;// serializing the response body in JSON&lt;/span&gt;&#xA;        response&#xA;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;getOutputStream&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;              objectMapper&lt;span&gt;.&lt;/span&gt;&lt;span&gt;writeValueAsString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;data&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, you just need to register these two custom implementations as authentication and authorization error handlers. You can do this as below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/java/com/auth0/hotsauces/security/SecurityConfig.java&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;hotsauces&lt;span&gt;.&lt;/span&gt;security&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;beans&lt;span&gt;.&lt;/span&gt;factory&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Value&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Bean&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;builders&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;HttpSecurity&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;configuration&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;EnableWebSecurity&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;configuration&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;WebSecurityConfigurerAdapter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;oauth2&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;DelegatingOAuth2TokenValidator&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;oauth2&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;OAuth2TokenValidator&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;oauth2&lt;span&gt;.&lt;/span&gt;jwt&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;oauth2&lt;span&gt;.&lt;/span&gt;server&lt;span&gt;.&lt;/span&gt;resource&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;BearerTokenAuthenticationFilter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;access&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AccessDeniedHandler&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;authentication&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AuthenticationFailureHandler&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@EnableWebSecurity&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;SecurityConfig&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ...&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Override&lt;/span&gt;&#xA;    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;configure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;HttpSecurity&lt;/span&gt; http&lt;span&gt;)&lt;/span&gt; &#xA;      &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;Exception&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        http&#xA;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;authorizeRequests&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;anyRequest&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;authenticated&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;and&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;formLogin&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;failureHandler&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;authenticationFailureHandler&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &#xA;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;and&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;exceptionHandling&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;accessDeniedHandler&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;accessDeniedHandler&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Bean&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;AuthenticationFailureHandler&lt;/span&gt; &lt;span&gt;authenticationFailureHandler&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;CustomAuthenticationFailureHandler&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Bean&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;AccessDeniedHandler&lt;/span&gt; &lt;span&gt;accessDeniedHandler&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;CustomAccessDeniedHandler&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Et voilà! Custom error handling in Spring Boot has just been achieved thanks to the &lt;code&gt;failureHandler&lt;/code&gt; and &lt;code&gt;accessDeniedHandler&lt;/code&gt; methods, which allows you to register a custom authentication error handler and a custom authorization error handler.&lt;/p&gt;&lt;h3 id=&#34;Spring-Security-Custom-Error-Handling-in-Action&#34;&gt;Spring Security Custom Error Handling in Action&lt;/h3&gt;&lt;p&gt;Now, let’s see how to implement it in a real-world example. First, read &lt;a href=&#34;https://auth0.com/blog/build-and-secure-an-api-with-spring-boot/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this&lt;/a&gt; article on how to protect APIs with Spring Security and Auth0. In the demo application produced in that article, no custom error handling is implemented. So, by making a request to a protected API including a wrong access token, the default Spring Boot error handling logic is applied. Let’s test it out.&lt;/p&gt;&lt;p&gt;If you are a macOS or Linux user, enter this command into the terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;curl &lt;span&gt;-&lt;/span&gt;i &lt;span&gt;--&lt;/span&gt;request &lt;span&gt;GET&lt;/span&gt; \&#xA;     &lt;span&gt;--&lt;/span&gt;url http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;span&gt;/&lt;/span&gt; \&#xA;     &lt;span&gt;-&lt;/span&gt;&lt;span&gt;H&lt;/span&gt; &lt;span&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; \&#xA;     &lt;span&gt;-&lt;/span&gt;&lt;span&gt;H&lt;/span&gt; &lt;span&gt;&amp;#34;authorization: Bearer wrong-token&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Otherwise, if you are a Windows user, enter this command into PowerShell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$accessToken &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;wrong-token&amp;#34;&lt;/span&gt;&#xA;$headers &lt;span&gt;=&lt;/span&gt; @&lt;span&gt;{&lt;/span&gt;&#xA;    Authorization &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Bearer $accessToken&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;$response &lt;span&gt;=&lt;/span&gt; Invoke&lt;span&gt;-&lt;/span&gt;RestMethod &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/&amp;#34;&lt;/span&gt; `&#xA;    &lt;span&gt;-&lt;/span&gt;Headers $headers&#xA;$response &lt;span&gt;|&lt;/span&gt; ConvertTo&lt;span&gt;-&lt;/span&gt;Json&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, the following response will be returned:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Invoke&lt;span&gt;-&lt;/span&gt;WebRequest&lt;span&gt;:&lt;/span&gt; The remote server returned an error&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;401&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; Unauthorized&lt;span&gt;.&lt;/span&gt;&#xA;At line&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; char&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&#xA;&lt;span&gt;+&lt;/span&gt; Invoke&lt;span&gt;-&lt;/span&gt;WebRequest &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&#xA;&lt;span&gt;+&lt;/span&gt; CategoryInfo          &lt;span&gt;:&lt;/span&gt; InvalidOperation&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;System&lt;span&gt;.&lt;/span&gt;Net&lt;span&gt;.&lt;/span&gt;HttpWebRequest&lt;span&gt;:&lt;/span&gt;HttpWebRequest&lt;span&gt;)&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;Invoke&lt;span&gt;-&lt;/span&gt;WebRequest&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; WebExc&#xA;   eption&#xA;&lt;span&gt;+&lt;/span&gt; FullyQualifiedErrorId &lt;span&gt;:&lt;/span&gt; WebCmdletWebResponseException&lt;span&gt;,&lt;/span&gt;Microsoft&lt;span&gt;.&lt;/span&gt;PowerShell&lt;span&gt;.&lt;/span&gt;Commands&lt;span&gt;.&lt;/span&gt;InvokeWebRequestCommand&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, a 401 error status code is returned, but with no details on what happened.&lt;/p&gt;&lt;p&gt;Now, let’s test the demo application extended with custom error handling logic. You can find it in &lt;a href=&#34;https://github.com/Tonel/HotSauces&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this GitHub repository&lt;/a&gt;. The application is exactly the same as the previous one, except for the error handling logic. In particular, the aforementioned presented logic was implemented. &lt;/p&gt;&lt;p&gt;In this case, by launching the commands above, this message will be returned:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Invoke&lt;span&gt;-&lt;/span&gt;RestMethod &lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;code&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;401&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;An error occurred while attempting to decode the Jwt: Invalid JWT serialization: Missing dot delimiter(s)&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1629880611013&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;UNAUTHORIZED&amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;At line&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; char&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&#xA;&lt;span&gt;+&lt;/span&gt; $response &lt;span&gt;=&lt;/span&gt; Invoke&lt;span&gt;-&lt;/span&gt;RestMethod &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/&amp;#34;&lt;/span&gt;  &lt;span&gt;...&lt;/span&gt;&#xA;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&#xA;&lt;span&gt;+&lt;/span&gt; CategoryInfo          &lt;span&gt;:&lt;/span&gt; InvalidOperation&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;System&lt;span&gt;.&lt;/span&gt;Net&lt;span&gt;.&lt;/span&gt;HttpWebRequest&lt;span&gt;:&lt;/span&gt;HttpWebRequest&lt;span&gt;)&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;Invoke&lt;span&gt;-&lt;/span&gt;WebRequest&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; WebExc&#xA;   eption&#xA;&lt;span&gt;+&lt;/span&gt; FullyQualifiedErrorId &lt;span&gt;:&lt;/span&gt; WebCmdletWebResponseException&lt;span&gt;,&lt;/span&gt;Microsoft&lt;span&gt;.&lt;/span&gt;PowerShell&lt;span&gt;.&lt;/span&gt;Commands&lt;span&gt;.&lt;/span&gt;InvokeWebRequestCommand&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, a JSON message representing the custom error handling logic was returned as expected. This contains the status code, the exception message, a timestamp, and the HTTP status code name, as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;code&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;401&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;An error occurred while attempting to decode the Jwt: Invalid JWT serialization: Missing dot delimiter(s)&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1629880611013&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;UNAUTHORIZED&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this article, we looked at how to implement custom error handling logic when dealing with REST applications in Spring Boot. This is not as easy a task as it may seem, and it requires knowing a few Spring Boot fundamentals. First, we delved into default error handling in Spring Boot and saw how poor the responses are. Then, we looked at &lt;code&gt;@ControllerAdvice&lt;/code&gt; and learn everything required to implement custom error handling logic. In particular, two different approaches were shown. Both allow you to define custom error handling responses but have specific pros and cons. Finally, we learned how to achieve the same result when dealing with Spring Boot Security errors, which requires specific logic. As shown, achieving custom error handling in Spring Boot is not easy but definitely possible, and explaining when, why, and how to do it was what this article was aimed at.&lt;/p&gt;&lt;p&gt;Thanks for reading! I hope that you found this article helpful. Feel free to reach out to me with any questions, comments, or suggestions.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/get-started-with-custom-error-handling-in-spring-boot-java/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to implement custom error handling logic in Spring Boot. You will see two approaches based on the @ControllerAdvice annotation. Similarly, you will learn how to deal with authentication and access denied errors in Spring Security.</summary>
  </entry>
  <entry>
    <title>ID Token and Access Token: What Is the Difference?</title>
    <updated>2021-09-23T14:31:00Z</updated>
    <id>tag:auth0.com,2021-09-23:/blog/id-token-access-token-what-is-the-difference/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&amp;#34;Let’s use a token to secure this API call. Should I use the ID token or the access token? 🤔 The ID token looks nicer to me. After all, if I know who the user is, I can make better authorization decisions, right?&amp;#34;&lt;/p&gt;&lt;p&gt;How many times have you found yourself making similar arguments? Choices based on your intuition may sound good, however, what looks intuitive not always is correct. In the case of ID and access tokens, they have clear and well-defined purposes, so you should use them based on that, not on your intuition.&lt;/p&gt;&lt;p&gt;&amp;#34;What changes after all? They are just tokens. I can use them as I see fit. What can happen?&amp;#34;&lt;/p&gt;&lt;p&gt;Let’s take a closer look at these two security tokens to better understand their role in authentication and authorization processes.&lt;/p&gt;&lt;p&gt;If you prefer, you can also watch this video on the same topic:&lt;/p&gt;&lt;p&gt;&lt;iframe src=&#34;https://www.youtube.com/embed/M4JIvUIE17c&#34; frameborder=&#34;0&#34; allowfullscreen=&#34;&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;h2 id=&#34;What-Is-an-ID-Token-&#34;&gt;What Is an ID Token?&lt;/h2&gt;&lt;p&gt;An ID token is an artifact that proves that &lt;strong&gt;the user has been authenticated&lt;/strong&gt;. &lt;a href=&#34;https://openid.net/connect/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OpenID Connect&lt;/a&gt; provides you with it as the result of the user authentication process. By the way, OpenID Connect is an open standard for decentralized authentication used by many Identity providers such as Google, Facebook, Twitter, and, of course, Auth0. Check out &lt;a href=&#34;https://auth0.com/docs/protocols/openid-connect-protocol&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this document for more details on OpenID Connect&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Well, this is a very basic definition of what an ID token is. Let’s see some other details.&lt;/p&gt;&lt;p&gt;An ID token is &lt;strong&gt;encoded as a JSON Web Token&lt;/strong&gt; (JWT), a standard format that allows your application to easily inspect its content and make sure it comes from the expected issuer and no one else changed it. If you want to learn more on JWTs, check out &lt;a href=&#34;https://auth0.com/resources/ebooks/jwt-handbook&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;The JWT Handbook&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;To put it simply, an example of ID token looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&lt;span&gt;.&lt;/span&gt;eyJpc3MiOiJodHRwOi8vbXktZG9tYWluLmF1dGgwLmNvbSIsInN1YiI6ImF1dGgwfDEyMzQ1NiIsImF1ZCI6IjEyMzRhYmNkZWYiLCJleHAiOjEzMTEyODE5NzAsImlhdCI6MTMxMTI4MDk3MCwibmFtZSI6IkphbmUgRG9lIiwiZ2l2ZW5fbmFtZSI6IkphbmUiLCJmYW1pbHlfbmFtZSI6IkRvZSJ9&lt;span&gt;.&lt;/span&gt;bql&lt;span&gt;-&lt;/span&gt;jxlG9B_bielkqOnjTY9Di9FillFb6IMQINXoYsw&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Of course, this isn&amp;#39;t readable to the human eye, so you have to decode it to see what content the JWT holds. You can use one of the &lt;a href=&#34;https://jwt.io/#libraries-io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;many available libraries&lt;/a&gt; to decode it or you can examine it yourself with the &lt;a href=&#34;https://jwt.io/?id_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwOi8vbXktZG9tYWluLmF1dGgwLmNvbSIsInN1YiI6ImF1dGgwfDEyMzQ1NiIsImF1ZCI6IjEyMzRhYmNkZWYiLCJleHAiOjEzMTEyODE5NzAsImlhdCI6MTMxMTI4MDk3MCwibmFtZSI6IkphbmUgRG9lIiwiZ2l2ZW5fbmFtZSI6IkphbmUiLCJmYW1pbHlfbmFtZSI6IkRvZSJ9.bql-jxlG9B_bielkqOnjTY9Di9FillFb6IMQINXoYsw&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;jwt.io&lt;/a&gt; debugger.&lt;/p&gt;&lt;p&gt;Without going deeper into the details, the relevant information carried by the ID token above looks like the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt; &#xA;  &lt;span&gt;&amp;#34;iss&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;http://my-domain.auth0.com&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;  &lt;span&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;auth0|123456&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;  &lt;span&gt;&amp;#34;aud&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;1234abcdef&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;  &lt;span&gt;&amp;#34;exp&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1311281970&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;  &lt;span&gt;&amp;#34;iat&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1311280970&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;  &lt;span&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Jane Doe&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;  &lt;span&gt;&amp;#34;given_name&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Jane&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &#xA;  &lt;span&gt;&amp;#34;family_name&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Doe&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These JSON properties are called &lt;strong&gt;claims&lt;/strong&gt;, and they are &lt;strong&gt;declarations about the user&lt;/strong&gt; and the token itself. The claims about the user define the user’s identity. Hence the name &amp;#34;ID token&amp;#34;.&lt;/p&gt;&lt;p&gt;One of the claims that is usually underrated is the &lt;code&gt;aud&lt;/code&gt; claim. This claim defines the &lt;strong&gt;audience&lt;/strong&gt; of the token, i.e., the application that is meant as &lt;strong&gt;the final recipient of the token&lt;/strong&gt;. Its value is the client ID of the application that should use the token.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Remember this small detail about the audience claim because it will help you better understand what its correct use is later on.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Optionally, the ID token may have additional information about the user, such as their email address, picture, birthday, and so on.&lt;/p&gt;&lt;p&gt;Cool! Now you know what an ID token is. But, what can you do with an ID token?&lt;/p&gt;&lt;p&gt;First, it demonstrates that the user has been authenticated and so &lt;strong&gt;you can trust their identity&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Also, your application can &lt;strong&gt;personalize the user’s experience&lt;/strong&gt; by using the claims about the user included in the ID token. For example, you can show their name on the UI, or display a wish message on their birthday. The fun part is that you don’t need to make additional requests, so you may get &lt;strong&gt;a little gain in performance&lt;/strong&gt; for your application.&lt;/p&gt;&lt;h2 id=&#34;What-Is-an-Access-Token-&#34;&gt;What Is an Access Token?&lt;/h2&gt;&lt;p&gt;Now that you know what an ID token is, let’s try to understand what an access token is.&lt;/p&gt;&lt;p&gt;As the name says, an access token is an artifact that &lt;strong&gt;allows you to access a resource&lt;/strong&gt;. That resource can be a file, an API, a database, or anything else which is protected from unauthorized access. The authorization server issues the access token.&lt;/p&gt;&lt;p&gt;In the &lt;a href=&#34;https://auth0.com/docs/protocols/protocol-oauth2&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OAuth 2&lt;/a&gt; context, the access token &lt;strong&gt;allows an application to access a specific resource on behalf of the user&lt;/strong&gt;. That means, for example, that you can authorize your LinkedIn app to access Twitter’s API on your behalf to cross-post on both social platforms.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6749&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OAuth 2 specifications&lt;/a&gt; say nothing about the access token format. It &lt;strong&gt;can be a string in any format&lt;/strong&gt;. A common format used for access tokens is JWT, and &lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-ietf-oauth-access-token-jwt&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;a standard is along the way&lt;/a&gt; at the time of writing. However, this doesn’t mean that access tokens should be in that format. Keep the following in mind: &lt;strong&gt;your client application should treat access tokens as opaque strings&lt;/strong&gt;, that is, a string with no specific meaning such as &lt;code&gt;ab5&lt;span&gt;?&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;Gtse9ITg&lt;/code&gt; or &lt;code&gt;&lt;span&gt;1234&lt;/span&gt;&lt;/code&gt; and so on.&lt;/p&gt;&lt;p&gt;Only the intended recipient of the access token can (and must) make assumptions on the access token’s format. Wait! Who is the intended recipient of an access token? 🤔 &lt;strong&gt;The intended recipient is the resource server&lt;/strong&gt;, that is, the server that protects the resource your application is trying to access.&lt;/p&gt;&lt;p&gt;Last but not least, an access token is not bound to a specific client. It can be used by any application that presents it: &lt;strong&gt;it grants authorization to its bearer&lt;/strong&gt;. This is extremely important since you need to take care of it and avoid it falling into the wrong hands.&lt;/p&gt;&lt;p&gt;Alright! Now you know what an ID token and an access token are. 🎉 So you are ready to use them without any fear of making mistakes. But, wait. I do not see you convinced. 🤔 Maybe you need some other information. Ok. So, let’s see what these tokens are &lt;em&gt;not&lt;/em&gt; suitable for.&lt;/p&gt;&lt;h2 id=&#34;What-Is-an-ID-Token-NOT-Suitable-For-&#34;&gt;What Is an ID Token NOT Suitable For?&lt;/h2&gt;&lt;p&gt;One of the most common mistakes developers make with an ID token is to use it for authorization. As said above, an ID token has to do with authentication. It &lt;strong&gt;is not meant for authorization&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;If your API accepts an ID token as an authorization token, to begin with, you are ignoring the intended recipient stated by the audience claim. That claim says that it is meant for your client application, not for the resource server (i.e., the API).&lt;/p&gt;&lt;p&gt;You may think this is just a formality, but &lt;strong&gt;there are security implications&lt;/strong&gt; here.&lt;/p&gt;&lt;p&gt;First of all, your API shouldn’t accept a token that is not meant for it. If it does so, its security is at risk. In fact, if your API doesn&amp;#39;t care if a token is meant for it, an ID token stolen from any client application can be used to access your API.&lt;/p&gt;&lt;p&gt;In addition, your ID token will not have granted &lt;a href=&#34;https://auth0.com/docs/scopes&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;scopes&lt;/a&gt; (I know, this is another pain point). To briefly explain, OAuth has a specific process to allow the user to grant the minimum permissions (scopes) to the application. Those scopes are associated with the access token so that your API knows what the client application can do and what it can&amp;#39;t do. If you use an ID token, you ignore this feature and potentially allow the application to do actions that the user has not authorized.&lt;/p&gt;&lt;p&gt;Another mistake you can make with ID tokens is to use them for user session management. An ID token &lt;strong&gt;isn’t an appropriate choice for session management&lt;/strong&gt;. In fact, ID tokens have a few specific drawbacks. First, they are larger than a typical session cookie. You need to validate them on the server side just to check if the session is still alive. You also cannot remove them from the client application at the end of a session, e.g., at logout. It requires the active collaboration of the client, but this is not something you can rely on.&lt;/p&gt;&lt;h2 id=&#34;What-Is-an-Access-Token-NOT-Suitable-For-&#34;&gt;What Is an Access Token NOT Suitable For?&lt;/h2&gt;&lt;p&gt;As you guess, on the access token side, you can’t use it for authentication. I mean, &lt;strong&gt;you can’t make any assumption about the user’s identity&lt;/strong&gt; based on the access token. The access token can’t tell you if the user has authenticated. &lt;strong&gt;You can’t ever deduce that the user is currently logged in&lt;/strong&gt; to your application. Based on the OAuth specifications, the access token authorizes the client application to operate on behalf of the user. Once the application is authorized, the user can log out with no issue and the access token will continue to work.&lt;/p&gt;&lt;p&gt;In addition, the access token &lt;strong&gt;has nothing to tell the client application&lt;/strong&gt;. It is intended for the resource server. Even if you know the access token format, you shouldn’t try to interpret the access token content in your client application. The access token format is an agreement between the authorization server and the resource server. Period! The client application should not intrude.&lt;/p&gt;&lt;h2 id=&#34;A-Quick-Recap&#34;&gt;A Quick Recap&lt;/h2&gt;&lt;p&gt;The confusion over the use of ID and access tokens is very common, and it can be difficult to wrap your head around the differences. And maybe it mostly derives from the difference between authentication and authorization that also confuses many developers. Nevertheless, I hope this topic is a little more clear now.&lt;/p&gt;&lt;p&gt;To recap, here is a quick summary of what you learned about what you can and can’t do with ID and access tokens:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6OoxJnwLaEumCzNxa53J1f/473d3e0483e8a06b2318175ca1b03f16/id-token-vs-access-token.jpg&#34; alt=&#34;ID token vs access token&#34;/&gt;&lt;/p&gt;&lt;p&gt;If you want to see ID and access tokens in action, &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free Auth0 account&lt;/a&gt; and start to add authentication and authorization to your applications in minutes with &lt;a href=&#34;https://auth0.com/docs/libraries&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;your preferred programming language and framework&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/id-token-access-token-what-is-the-difference/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn what ID and access tokens are and how to correctly use them in the OpenID Connect and OAuth context.</summary>
  </entry>
  <entry>
    <title>How to Explain Public-Key Cryptography and Digital Signatures to Anyone</title>
    <updated>2021-09-22T14:53:00Z</updated>
    <id>tag:auth0.com,2021-09-22:/blog/how-to-explain-public-key-cryptography-digital-signatures-to-anyone/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;If you work in cybersecurity or any computer-related field, sooner or later, you’ll have to explain public-key cryptography and digital signatures to non-technical people.&lt;/strong&gt; With the recent rise of remote work and stories about system breaches, computer security has become a topic of discussion even among laypeople.&lt;/p&gt;&lt;p&gt;After trying to explain public-key cryptography and digital signatures to some clients with varying degrees of success, I wanted to develop an analogy that explained them and was easy to remember. I’ve found that even techies get confused by the formal definitions, and many non-technical explanations just seem unsatisfying.&lt;/p&gt;&lt;p&gt;That’s when I stumbled upon &lt;a href=&#34;https://twitter.com/vrypan&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Panayotis Vryonis’&lt;/a&gt; article, &lt;a href=&#34;https://blog.vrypan.net/2013/08/28/public-key-cryptography-for-non-geeks/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Public-key cryptography for non-geeks&lt;/em&gt;&lt;/a&gt;. It became my go-to analogy until my computer science professor, &lt;a href=&#34;http://research.cs.queensu.ca/home/dawes/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Dr. Robin Dawes&lt;/a&gt; pointed out a flaw. I refined it with his help, and a suggestion from Matthew Ernest, and the result is below. I hope you find it helpful when trying to explain these concepts to anyone!&lt;/p&gt;&lt;h2 id=&#34;The-Box&#34;&gt;The Box&lt;/h2&gt;&lt;p&gt;Imagine a box with a special lock, as pictured below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4nm7EvXpqVqMxfOPkjUlXe/bca6b7d8d0a00658045dd4f3fd0a5c7f/the_box_has_a_lock_with_three_positions.png&#34; alt=&#34;Photo of a box with a lock. There is a key inserted into the lock. Caption: &amp;#34;The box has a lock with three positions: Locked (at the 9:00 position), unlocked (at the 12:00 position), and locked (at the 3:00 position).&amp;#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;The lock has three positions:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;When the lock is at the “9:00” position, the box is locked, and its contents are inaccessible.&lt;/li&gt;&lt;li&gt;When the lock is at the “12:00” position, the box is unlocked, which means you can open it and view its contents.&lt;/li&gt;&lt;li&gt;When the lock is at the “3:00” position, the box is locked, and its contents are inaccessible.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;In order to avoid wandering into endless “What if...?” tangents, assume that it’s prohibitively costly to pick the lock or break the box.&lt;/p&gt;&lt;h2 id=&#34;The-Keys&#34;&gt;The Keys&lt;/h2&gt;&lt;p&gt;There are two kinds of keys that work with the box’s lock.&lt;/p&gt;&lt;h3 id=&#34;The-private-key&#34;&gt;The private key&lt;/h3&gt;&lt;p&gt;The first kind of key belongs to you, and only you. You don’t share it with anyone else, which is why it’s called the &lt;strong&gt;private key&lt;/strong&gt;. You might make a backup copy in case of emergencies, but you keep it in a safe place that only you know.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2PJXCaqzggdgTpN4FSm8Qj/4a1228e2e8a6a46ad103c01ffd197e58/you_keep_the_private_key_to_yourself.png&#34; alt=&#34;Photo of a single key. Caption: &amp;#34;You keep the private key to yourself.&amp;#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;The private key fits the lock, but it has a particular limitation: it can only turn &lt;em&gt;clockwise&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/qqPVi6JTc2HOW4SuE4sEj/8fcd841021e55b659a3c5b92ad9b2da2/the_private_key_only_turns_clockwise.png&#34; alt=&#34;Photo of the box with lock and key. An arrow indicates that the key is being turned clockwise. Caption: &amp;#34;The private key only turns clockwise.&amp;#34;&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;The-public-key&#34;&gt;The public key&lt;/h3&gt;&lt;p&gt;You treat the second kind of key very differently. Unlike the first key, you’ve made many, many copies of these keys. You’ve given them to everyone you know, and even people you don’t know. You’ve left them in as many public places as you could reach: restaurants, stores, busy streets, dark alleys, and any place you happened to pass through. You’ve even left them in other towns, and even other countries! Because of the way you treat this key, it’s called the &lt;strong&gt;public key&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2LTNf9JxfjDuB4rMZyM7K6/4a3a6264b81bf2b90efaffe469d3406c/you_hand_out_copies_of_the_public_key_freely.png&#34; alt=&#34;Photo of hundreds of keys hanging on hooks on a wall. Caption: &amp;#34;You hand out copies of the public key freely.&amp;#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;Like the private key, public keys also fit the lock, and they also have a particular limitation — but in the opposite direction. They can only turn &lt;em&gt;counterclockwise&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6QVsGSSoLuNdRgpfHznh6H/b5f42c68a9d5aa9e322e898cac14aeb3/the_public_key_only_turns_counterclockwise.png&#34; alt=&#34;Photo of the box with lock and key. An arrow indicates that the key is being turned counterclockwise. Caption: &amp;#34;The public key only turns counterclockwise.&amp;#34;&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;How-They-Work-Together&#34;&gt;How They Work Together&lt;/h2&gt;&lt;p&gt;The lock, private key, and public keys work together to produce these interesting outcomes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If the box is locked with a public key, only the private key can unlock it.&lt;/li&gt;&lt;li&gt;If the box is locked with the private key, only a public key can unlock it.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The keys are designed so that you can’t use one key to figure out how to make the other key.&lt;/p&gt;&lt;p&gt;We can use the box and keys to create two useful kinds of secure communication:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;I can send you a secret message.&lt;/li&gt;&lt;li&gt;You can send me a message with proof that you (and not some impostor) sent it and that it wasn’t altered &lt;em&gt;en route&lt;/em&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let’s take a closer look at each of these kinds of secure communication.&lt;/p&gt;&lt;h2 id=&#34;Sending-Secret-Messages&#34;&gt;Sending Secret Messages&lt;/h2&gt;&lt;p&gt;Suppose I wanted to send you a message that I wanted only you to read. We have enemies in common who’d love nothing more than to know what’s in the messages I send you.&lt;/p&gt;&lt;p&gt;We each have a cadre of minions to deliver our messages. We trust them... to a limited extent. It would be all too easy for our foes to intercept our messages through force or bribery. &lt;/p&gt;&lt;p&gt;There must be a way to send messages to you secretly, and that’s where the box comes in. I can use the box to send the message so that no one but you can read it. &lt;/p&gt;&lt;p&gt;You have the only private key. Everyone else has at least one of the public keys because you’ve been giving them away like candy. &lt;/p&gt;&lt;p&gt;I put my message in the open box. Since it’s open, it’s unlocked, which means the lock is at the “12:00” position. &lt;/p&gt;&lt;p&gt;I use one of the many copies of the public key that I own to lock it, turning it counterclockwise from the unlocked “12:00” position to the locked “9:00” position.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3WnNKlXN7MC0BfDdEU8GyX/2bcc1521f829c80ff548cf7234078bba/i_lock_the_message_with_public_key.png&#34; alt=&#34;Photo of the box with lock and key. An arrow indicates that the key is being turned counterclockwise. Caption: &amp;#34;I lock the message in the box with the public key...&amp;#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;The message is now ready for a minion to deliver to you.&lt;/p&gt;&lt;p&gt;I’m not worried that my minion or anyone other than you will be able to read the message while it’s in transit. Even though anyone can easily find the public key, they can’t use it to unlock the box. Only the private key can unlock the box if it’s been locked with the public key.&lt;/p&gt;&lt;p&gt;When you receive the box, you use the private key to unlock it, turning the key clockwise from the “3:00” position to the “12:00” position.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2kwG5ogtYDYCkDtjC0MqgN/75f2cb365ea0014a0af58a7dbc90c481/you_unlock_it_with_the_private_key.png&#34; alt=&#34;Photo of the box with lock and key. An arrow indicates that the key is being turned clockwise. Caption: &amp;#34;...and you unlock it with the private key.&amp;#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;In summary: to send you a secret message, I use a public key to lock the message so nobody can read it, and you use a private key to unlock the message so that you can read it.&lt;/p&gt;&lt;p&gt;This is the general idea behind public-key encryption: &lt;strong&gt;encrypt with the public key, decrypt with the private key.&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&#34;Signing-Messages&#34;&gt;Signing Messages&lt;/h2&gt;&lt;p&gt;The “secret messages” use case for the box and private and public keys is intuitive: anyone with a public key can lock a message, but only the holder of the private key can unlock it.&lt;/p&gt;&lt;p&gt;There’s another way to use the box and keys: you can lock a message with the private key, which anyone with the public key can unlock. What could a possible use case there be for a system where anyone can unlock the box?&lt;/p&gt;&lt;p&gt;Suppose one of our common enemies has been trying to break up our alliance and that I’ve been receiving very hurtful messages that appear to have come from you. (I’ll leave the content of those messages to your imagination.)&lt;/p&gt;&lt;p&gt;That enemy has either been sending fake messages or has been intercepting and altering your real ones. There has to be a way to package a message in order to prove that it’s actually from you!&lt;/p&gt;&lt;p&gt;There &lt;em&gt;is&lt;/em&gt; a way: the box!&lt;/p&gt;&lt;p&gt;In this scenario, you put your message in the open box. Since it’s open, it’s unlocked, which means the lock is at the “12:00” position. &lt;/p&gt;&lt;p&gt;Using the private key, you “sign” the message by locking it, turning the key counterclockwise from the “12:00” position to the “9:00” position.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1U2aOr7mKgMtGdZM8lPLWT/82ff89d7160d93b04fff8ac635fd41d7/you_sign_the_message_with_the_private_key.png&#34; alt=&#34;Photo of the box with lock and key. An arrow indicates that the key is being turned clockwise. Caption: &amp;#34;You &amp;#39;sign&amp;#39; the message with the private key...&amp;#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;One of your minions delivers the box to me.&lt;/p&gt;&lt;p&gt;Since you locked the box with the private key, anyone can unlock it with any one of the many public keys you have distributed. Our common enemy, knowing that this message is in transit, could intercept it and replace your invitation to tea with a “top ten” list of very cutting insults that would surely dissolve our alliance.&lt;/p&gt;&lt;p&gt;The problem with the enemy’s plan is that it won’t work. Intercepting and altering the message means that they would have to do one of two things before forwarding the box to me.&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;They could leave the box unlocked. Since the box is supposed to arrive locked, this is an obvious sign that the message may have been tampered with.&lt;/li&gt;&lt;li&gt;They could lock the box. They would have to do it with a public key, which means that only the private key can unlock it. I wouldn’t be able to unlock the box with the only key I had — the public key — which would lead me to conclude that someone had unlocked the box before I did.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;If the box arrives at my doorstep and...&lt;/p&gt;&lt;ul&gt;&lt;li&gt;It’s locked&lt;/li&gt;&lt;li&gt;I can unlock it with the public key&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;...then, I can be assured that the message came from you and wasn’t changed &lt;em&gt;en route&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4Fax8BanX5Qts7KJzW7166/b4dc34b169f6eca961c8d8f3c7452af4/i_verify_your_signature_with_the_public_key.png&#34; alt=&#34;Photo of the box with lock and key. An arrow indicates that the key is being turned counterclockwise. Caption: &amp;#34;...and I verify your &amp;#39;signature&amp;#39; with the public key.&amp;#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;In summary: to send me a message with proof that you are the sender, you use the private key to lock the message. You’re the only person with the private key, and only a public key can unlock messages locked with the private key. If one of the public keys can unlock that message, I know that it came from you.&lt;/p&gt;&lt;p&gt;This is the general idea behind digital signatures: &lt;strong&gt;sign with the private key, verify with a public key.&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&#34;How-About-Sending-a-Message-That-s-Both-Secret--and--Signed-&#34;&gt;How About Sending a Message That’s Both Secret &lt;em&gt;and&lt;/em&gt; Signed?&lt;/h2&gt;&lt;p&gt;You might think that sending a message that is both secret and signed is paranoid. I would answer by saying, “Paranoia is the &lt;strong&gt;&lt;em&gt;mistaken&lt;/em&gt;&lt;/strong&gt; impression that people are out to get you.”&lt;/p&gt;&lt;p&gt;Suppose I wanted to send you a secret signed message. I could do it with two boxes:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;A smaller box, which I own. It will prove that I sent the message. I have the private key for this box, and you have one of its public keys.&lt;/li&gt;&lt;li&gt;A larger box, which you own. It will keep the message secret. You have the private key for this box, and I have one of its public keys.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I would lock the message in my smaller box using my private key and then lock it in your larger box using your public key.&lt;/p&gt;&lt;p&gt;When you receive the delivery, you will unlock your larger box first, using your private key. This would reveal my smaller box inside, which you would unlock with my public key.&lt;/p&gt;&lt;h2 id=&#34;It-s-Not-Keys-and-Boxes--but-Numbers-and-Algorithms&#34;&gt;It’s Not Keys and Boxes, but Numbers and Algorithms&lt;/h2&gt;&lt;p&gt;Of course, we’re not really dealing with boxes, keys (at least the kind that goes into locks), or minions. Here’s a list of elements in these stories and their real-world equivalents:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;The message&lt;/strong&gt;: Anything that you’d want to send that can you can view or edit with a computer. It could be text, one or more pictures, an audio or video recording, a database, or even an application. As far as the computer is concerned, messages are just a long series of numbers.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;The private and public keys&lt;/strong&gt;: Very large numbers that are used in a lengthy math process to encrypt, decrypt, sign, and verify messages.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;The box&lt;/strong&gt;: An algorithm that takes the message and keys and performs the math process to encrypt, decrypt, sign, and verify messages.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Minions&lt;/strong&gt;: The way in which the message is sent. This could be the internet but could just as easily be an actual minion, such as an unsuspecting summer intern with a USB key.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In the alternate universe where messages are sent with boxes and keys, everyone would have their own set of boxes with their own private keys, as well as copies of other people’s public keys. In the real world, we run applications that run public-key encryption and digital signature algorithms to secure our messages. We still use public and private keys in the real world; they’re just digital.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/how-to-explain-public-key-cryptography-digital-signatures-to-anyone/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Here’s an easy-to-understand analogy to help your non-technical friends and customers understand public keys and private keys, and how they relate to cryptography and digital signatures.</summary>
  </entry>
  <entry>
    <title>Dependency Injection with Kotlin and Koin</title>
    <updated>2021-09-21T17:05:00Z</updated>
    <id>tag:auth0.com,2021-09-21:/blog/dependency-injection-with-kotlin-and-koin/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Inversion of Control (IoC) is a broad term to describe how responsibility for some aspect of a system is lifted out of the custom code written by the end developer and into a framework. &lt;a href=&#34;https://martinfowler.com/bliki/InversionOfControl.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Martin Fowler describes a framework in terms of IoC&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Inversion of Control is a key part of what makes a framework different from a library. A library is essentially a set of functions that you can call, these days usually organized into classes. Each call does some work and returns control to the client.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;A framework embodies some abstract design, with more behavior built-in. In order to use it, you need to insert your behavior into various places in the framework, either by subclassing or by plugging in your own classes. The framework&amp;#39;s code then calls your code at these points.&lt;/p&gt;&lt;p&gt;Dependency injection (DI) is one specific example of IoC where classes no longer directly instantiate member properties by creating new objects but instead declare their dependencies and allow an external system, in this case, a dependency injection framework to satisfy those dependencies.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://insert-koin.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Koin&lt;/a&gt; is a dependency injection framework for Kotlin. It is lightweight, can be used in Android applications, is implemented via a concise DSL, and takes advantage of Kotlin features like delegate properties rather than relying on annotations. &lt;/p&gt;&lt;p&gt;In this post, we&amp;#39;ll look at a simple application taking advantage of Koin to inject dependencies into our custom classes.&lt;/p&gt;&lt;h2 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;To build the sample application, you&amp;#39;ll need to have JDK 11 or above, which is available from many sources, including &lt;a href=&#34;https://openjdk.java.net/install/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OpenJDK&lt;/a&gt;, &lt;a href=&#34;https://adoptopenjdk.net/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;AdoptOpenJDK&lt;/a&gt;, &lt;a href=&#34;https://www.azul.com/downloads/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Azul&lt;/a&gt;, or &lt;a href=&#34;https://www.oracle.com/au/java/technologies/javase-jdk11-downloads.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Oracle&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The code for the sample Koin application can be found &lt;a href=&#34;https://github.com/mcasperson/KotlinKoinExample&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;The-Gradle-Project-Definition&#34;&gt;The Gradle Project Definition&lt;/h2&gt;&lt;p&gt;We start with the Gradle build file, which includes dependencies for Kotlin and Koin, and makes use of the &lt;a href=&#34;https://github.com/johnrengelman/shadow&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;shadow plugin&lt;/a&gt; to create self-contained uberjars:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;buildscript &lt;span&gt;{&lt;/span&gt;&#xA;    repositories &lt;span&gt;{&lt;/span&gt;&#xA;        maven &lt;span&gt;{&lt;/span&gt;&#xA;            url &lt;span&gt;&amp;#34;https://plugins.gradle.org/m2/&amp;#34;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    dependencies &lt;span&gt;{&lt;/span&gt;&#xA;        classpath &lt;span&gt;&amp;#39;com.github.jengelman.gradle.plugins:shadow:6.1.0&amp;#39;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;plugins &lt;span&gt;{&lt;/span&gt;&#xA;    id &lt;span&gt;&amp;#34;org.jetbrains.kotlin.jvm&amp;#34;&lt;/span&gt; version &lt;span&gt;&amp;#34;1.5.21&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;apply plugin&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;kotlin&amp;#39;&lt;/span&gt;&#xA;apply plugin&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;com.github.johnrengelman.shadow&amp;#39;&lt;/span&gt;&#xA;&#xA;repositories &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;mavenLocal&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;mavenCentral&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;dependencies &lt;span&gt;{&lt;/span&gt;&#xA;    implementation &lt;span&gt;&amp;#34;org.jetbrains.kotlin:kotlin-stdlib:1.5.21&amp;#34;&lt;/span&gt;&#xA;    implementation &lt;span&gt;&amp;#34;io.insert-koin:koin-core:3.1.2&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To build the uberjar, run this command from Bash or PowerShell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;./gradlew shadowJar&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Registering-Singletons&#34;&gt;Registering Singletons&lt;/h2&gt;&lt;p&gt;The first demonstration of Koin will register a class as a singleton, ensuring each time we request a new instance of the class, we are returned a single, shared object. Here is the code from the file &lt;code&gt;single&lt;span&gt;.&lt;/span&gt;kt&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/kotlin/com/matthewcasperson/single.kt&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;matthewcasperson&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;GlobalContext&lt;span&gt;.&lt;/span&gt;startKoin&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;dsl&lt;span&gt;.&lt;/span&gt;module&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; SingleInstance &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;companion&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;var&lt;/span&gt; count&lt;span&gt;:&lt;/span&gt; Int &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;init&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;++&lt;/span&gt;count&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;I am instance number &lt;span&gt;$count&lt;/span&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;fun&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; singleModule &lt;span&gt;=&lt;/span&gt; module &lt;span&gt;{&lt;/span&gt;&#xA;        single &lt;span&gt;{&lt;/span&gt; &lt;span&gt;SingleInstance&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;var&lt;/span&gt; app &lt;span&gt;=&lt;/span&gt; startKoin &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;modules&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;singleModule&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;&amp;lt;&lt;/span&gt;SingleInstance&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;&amp;lt;&lt;/span&gt;SingleInstance&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;&amp;lt;&lt;/span&gt;SingleInstance&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This class is run with the command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;java -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.SingleKt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We start by defining a typical class, but with a companion object containing a variable called &lt;code&gt;count&lt;/code&gt;. The &lt;code&gt;count&lt;/code&gt; variable is incremented by 1 each time we create a new &lt;code&gt;SingleInstance&lt;/code&gt; object, which we will use to track how many new &lt;code&gt;SingleInstance&lt;/code&gt; objects have been created:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;class&lt;/span&gt; SingleInstance &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;companion&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;var&lt;/span&gt; count&lt;span&gt;:&lt;/span&gt; Int &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;init&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;++&lt;/span&gt;count&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;I am instance number &lt;span&gt;$count&lt;/span&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Inside the &lt;code&gt;main&lt;/code&gt; function we create a &lt;a href=&#34;https://insert-koin.io/docs/reference/koin-core/modules/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Koin module&lt;/a&gt;. Modules are used to group related Koin definitions, and here we use the &lt;code&gt;single&lt;/code&gt; definition to instruct Koin to create a single instance of the supplied object:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;fun&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; singleModule &lt;span&gt;=&lt;/span&gt; module &lt;span&gt;{&lt;/span&gt;&#xA;        single &lt;span&gt;{&lt;/span&gt; &lt;span&gt;SingleInstance&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next we call the &lt;code&gt;startKoin&lt;/code&gt; function, which is part of the &lt;code&gt;GlobalContext&lt;/code&gt; object. &lt;code&gt;GlobalContext&lt;/code&gt; is a singleton (defined as an &lt;a href=&#34;https://kotlinlang.org/docs/object-declarations.html#object-declarations-overview&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;object declaration&lt;/a&gt;), and is typically used as the default context for applications. Here we register our module into the global context:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;var&lt;/span&gt; app &lt;span&gt;=&lt;/span&gt; startKoin &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;modules&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;singleModule&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We&amp;#39;re now able to request instances of any of our registered objects with &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;get&lt;/code&gt;. To demonstrate that our &lt;code&gt;single&lt;/code&gt; definitions are working as expected, we get an instance of the &lt;code&gt;SingleInstance&lt;/code&gt; class three times and print the message containing the instance count to the console: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;&amp;lt;&lt;/span&gt;SingleInstance&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;&amp;lt;&lt;/span&gt;SingleInstance&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;&amp;lt;&lt;/span&gt;SingleInstance&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output shows we have been given the same &lt;code&gt;SingleInstance&lt;/code&gt; object each time:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;I am instance number &lt;span&gt;1&lt;/span&gt;&#xA;I am instance number &lt;span&gt;1&lt;/span&gt;&#xA;I am instance number &lt;span&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Registering-a-Factory&#34;&gt;Registering a Factory&lt;/h2&gt;&lt;p&gt;There are times when you want a new instance each time you request a dependency from Koin. To support this, Koin has a &lt;code&gt;factory&lt;/code&gt; definition. This is demonstrated in the file &lt;code&gt;factory&lt;span&gt;.&lt;/span&gt;kt&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/kotlin/com/matthewcasperson/factory.kt&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;matthewcasperson&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;GlobalContext&lt;span&gt;.&lt;/span&gt;startKoin&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;dsl&lt;span&gt;.&lt;/span&gt;module&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; FactoryInstance &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;companion&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;var&lt;/span&gt; count&lt;span&gt;:&lt;/span&gt; Int &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;init&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;++&lt;/span&gt;count&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;I am instance number &lt;span&gt;$count&lt;/span&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;fun&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; factoryModule &lt;span&gt;=&lt;/span&gt; module &lt;span&gt;{&lt;/span&gt;&#xA;        factory &lt;span&gt;{&lt;/span&gt; &lt;span&gt;FactoryInstance&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;var&lt;/span&gt; app &lt;span&gt;=&lt;/span&gt; startKoin &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;modules&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;factoryModule&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;&amp;lt;&lt;/span&gt;FactoryInstance&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;&amp;lt;&lt;/span&gt;FactoryInstance&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;&amp;lt;&lt;/span&gt;FactoryInstance&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This class is run with the command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;java -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.FactoryKt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This code is almost a line for line copy of the previous example, with some different class and variable names. The most significant difference is how the module is built, where we use the &lt;code&gt;factory&lt;/code&gt; definition:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;val&lt;/span&gt; factoryModule &lt;span&gt;=&lt;/span&gt; module &lt;span&gt;{&lt;/span&gt;&#xA;        factory &lt;span&gt;{&lt;/span&gt; &lt;span&gt;FactoryInstance&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Whereas the &lt;code&gt;single&lt;/code&gt; definition registered a singleton dependency, the &lt;code&gt;factory&lt;/code&gt; definition calls the supplied lambda every time a dependency is requested.&lt;/p&gt;&lt;p&gt;This is reflected in the console output, which shows that we have indeed constructed three instances, one for each call to &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;get&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;I am instance number &lt;span&gt;1&lt;/span&gt;&#xA;I am instance number &lt;span&gt;2&lt;/span&gt;&#xA;I am instance number &lt;span&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Registering-Interfaces&#34;&gt;Registering Interfaces&lt;/h2&gt;&lt;p&gt;The previous two examples registered concrete classes with Koin, but good object-oriented practice is to work with interfaces rather than classes. The example below from the file &lt;code&gt;interfaces&lt;span&gt;.&lt;/span&gt;kt&lt;/code&gt; shows how to register a class via its base interface with Koin:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/kotlin/com/matthewcasperson/interfaces.kt&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;matthewcasperson&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;GlobalContext&lt;span&gt;.&lt;/span&gt;startKoin&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;dsl&lt;span&gt;.&lt;/span&gt;module&#xA;&#xA;&lt;span&gt;interface&lt;/span&gt; HelloService &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; String&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; HelloServiceImpl &lt;span&gt;:&lt;/span&gt; HelloService &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;fun&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; helloService &lt;span&gt;=&lt;/span&gt; module &lt;span&gt;{&lt;/span&gt;&#xA;        single &lt;span&gt;{&lt;/span&gt; &lt;span&gt;HelloServiceImpl&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; HelloService &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;var&lt;/span&gt; app &lt;span&gt;=&lt;/span&gt; startKoin &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;modules&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;helloService&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;&amp;lt;&lt;/span&gt;HelloService&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This class is run with the command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;java -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.InterfacesKt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We start with a basic interface:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;interface&lt;/span&gt; HelloService &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; String&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We then implement the interface in a class:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;class&lt;/span&gt; HelloServiceImpl &lt;span&gt;:&lt;/span&gt; HelloService &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To make the class available to Koin via its interface, we cast the new object back to the interface with the &lt;code&gt;&lt;span&gt;as&lt;/span&gt;&lt;/code&gt; operator while building the module:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;val&lt;/span&gt; helloService &lt;span&gt;=&lt;/span&gt; module &lt;span&gt;{&lt;/span&gt;&#xA;        single &lt;span&gt;{&lt;/span&gt; &lt;span&gt;HelloServiceImpl&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; HelloService &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We then retrieve a dependency from its interface:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;&amp;lt;&lt;/span&gt;HelloService&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Resolving-Nested-Dependencies&#34;&gt;Resolving Nested Dependencies&lt;/h2&gt;&lt;p&gt;All the previous examples have resolved objects with no additional dependencies. A more typical scenario is where Koin is used to resolve classes that themselves have additional dependencies. This is demonstrated in the file called &lt;code&gt;nested&lt;span&gt;.&lt;/span&gt;kt&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/kotlin/com/matthewcasperson/nested.kt&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;matthewcasperson&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;GlobalContext&lt;span&gt;.&lt;/span&gt;startKoin&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;dsl&lt;span&gt;.&lt;/span&gt;module&#xA;&#xA;&lt;span&gt;data&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;HelloMessageData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;val&lt;/span&gt; message &lt;span&gt;:&lt;/span&gt; String &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Hello from wrapped class!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;interface&lt;/span&gt; HelloServiceWrapper &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; String&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HelloServiceWrapperImpl&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; helloMessageData&lt;span&gt;:&lt;/span&gt;HelloMessageData&lt;span&gt;)&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; HelloServiceWrapper &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; helloMessageData&lt;span&gt;.&lt;/span&gt;message&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;fun&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; helloService &lt;span&gt;=&lt;/span&gt; module &lt;span&gt;{&lt;/span&gt;&#xA;        single &lt;span&gt;{&lt;/span&gt; &lt;span&gt;HelloMessageData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;        single &lt;span&gt;{&lt;/span&gt; &lt;span&gt;HelloServiceWrapperImpl&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; HelloServiceWrapper &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;var&lt;/span&gt; app &lt;span&gt;=&lt;/span&gt; startKoin &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;modules&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;helloService&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;&amp;lt;&lt;/span&gt;HelloServiceWrapper&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This class is run with the command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;java -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.NestedKt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We start with a data class defining a string property:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;data&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;HelloMessageData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;val&lt;/span&gt; message &lt;span&gt;:&lt;/span&gt; String &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Hello from wrapped class!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As with the previous example, we define an interface and then implement the interface with a class. This time, however, the class has a constructor that takes an instance of &lt;code&gt;HelloMessageData&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;interface&lt;/span&gt; HelloServiceWrapper &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; String&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HelloServiceWrapperImpl&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; helloMessageData&lt;span&gt;:&lt;/span&gt;HelloMessageData&lt;span&gt;)&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; HelloServiceWrapper &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; helloMessageData&lt;span&gt;.&lt;/span&gt;message&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When defining the module, we register an instance of the &lt;code&gt;HelloMessageData&lt;/code&gt; class, and then resolve that class in the &lt;code&gt;HelloServiceWrapperImpl&lt;/code&gt; constructor with a call to &lt;code&gt;get&lt;/code&gt;, which will return the appropriate dependency for us. Note the order is not important here, and &lt;code&gt;HelloServiceWrapperImpl&lt;/code&gt; could have been defined in the module first:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;val&lt;/span&gt; helloService &lt;span&gt;=&lt;/span&gt; module &lt;span&gt;{&lt;/span&gt;&#xA;        single &lt;span&gt;{&lt;/span&gt; &lt;span&gt;HelloMessageData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;        single &lt;span&gt;{&lt;/span&gt; &lt;span&gt;HelloServiceWrapperImpl&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; HelloServiceWrapper &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Creating-a-KoinComponent&#34;&gt;Creating a KoinComponent&lt;/h2&gt;&lt;p&gt;We noted earlier that Koin creates a default global context that our dependencies are registered with. Koin uses this global context, in conjunction with Kotlin &lt;a href=&#34;https://kotlinlang.org/docs/delegated-properties.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;delegated properties&lt;/a&gt;, through the &lt;code&gt;KoinComponent&lt;/code&gt; interface to allow classes to resolve their own dependencies without an explicit reference to the &lt;code&gt;KoinApplication&lt;/code&gt; returned by &lt;code&gt;startKoin&lt;/code&gt;. An example of this is shown in the file &lt;code&gt;koinComponent&lt;span&gt;.&lt;/span&gt;kt&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// src/main/kotlin/com/matthewcasperson/koinComponent.kt&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;matthewcasperson&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;KoinComponent&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;component&lt;span&gt;.&lt;/span&gt;inject&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;GlobalContext&lt;span&gt;.&lt;/span&gt;startKoin&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;koin&lt;span&gt;.&lt;/span&gt;dsl&lt;span&gt;.&lt;/span&gt;module&#xA;&#xA;&lt;span&gt;data&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;GoodbyeMessageData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;val&lt;/span&gt; message &lt;span&gt;:&lt;/span&gt; String &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Goodbye!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;interface&lt;/span&gt; GoodbyeService &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;goodbye&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; String&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;GoodbyeServiceImpl&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; goodbyeMessageData&lt;span&gt;:&lt;/span&gt; GoodbyeMessageData&lt;span&gt;)&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; GoodbyeService &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;goodbye&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;GoodbyeServiceImpl says: &lt;span&gt;&lt;span&gt;${&lt;/span&gt;goodbyeMessageData&lt;span&gt;.&lt;/span&gt;message&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; GoodbyeApplication &lt;span&gt;:&lt;/span&gt; KoinComponent &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; goodbyeService &lt;span&gt;by&lt;/span&gt; inject&lt;span&gt;&amp;lt;&lt;/span&gt;GoodbyeService&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;sayGoodbye&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;goodbyeService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;goodbye&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;fun&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; goodbyeModule &lt;span&gt;=&lt;/span&gt; module &lt;span&gt;{&lt;/span&gt;&#xA;        single &lt;span&gt;{&lt;/span&gt; &lt;span&gt;GoodbyeMessageData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;        single &lt;span&gt;{&lt;/span&gt; &lt;span&gt;GoodbyeServiceImpl&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; GoodbyeService &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    startKoin &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;modules&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;goodbyeModule&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;GoodbyeApplication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sayGoodbye&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This class is run with the command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;java -cp ./build/libs/KotlinKoinExample-all.jar com.matthewcasperson.KoinComponentKt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This example draws from the features demonstrated in previous sections to define a class called &lt;code&gt;GoodbyeServiceImpl&lt;/code&gt;, with a nested dependency on the data class called &lt;code&gt;GoodbyeMessageData&lt;/code&gt;, and which implements an interface called &lt;code&gt;GoodbyeService&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;data&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;GoodbyeMessageData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;val&lt;/span&gt; message &lt;span&gt;:&lt;/span&gt; String &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Goodbye!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;interface&lt;/span&gt; GoodbyeService &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;goodbye&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; String&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;GoodbyeServiceImpl&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; goodbyeMessageData&lt;span&gt;:&lt;/span&gt; GoodbyeMessageData&lt;span&gt;)&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; GoodbyeService &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;goodbye&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;GoodbyeServiceImpl says: &lt;span&gt;&lt;span&gt;${&lt;/span&gt;goodbyeMessageData&lt;span&gt;.&lt;/span&gt;message&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We then define a class called &lt;code&gt;GoodbyeApplication&lt;/code&gt; implementing the &lt;code&gt;KoinComponent&lt;/code&gt; interface. This class has a delegate property called &lt;code&gt;goodbyService&lt;/code&gt; initialized by the &lt;code&gt;inject&lt;/code&gt; function made available through the &lt;code&gt;KoinComponent&lt;/code&gt; interface:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;class&lt;/span&gt; GoodbyeApplication &lt;span&gt;:&lt;/span&gt; KoinComponent &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; goodbyeService &lt;span&gt;by&lt;/span&gt; inject&lt;span&gt;&amp;lt;&lt;/span&gt;GoodbyeService&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;sayGoodbye&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;goodbyeService&lt;span&gt;.&lt;/span&gt;&lt;span&gt;goodbye&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The module is defined in much the same way as it has been in previous examples. Note however that the &lt;code&gt;GoodbyeApplication&lt;/code&gt; class is not defined in the module:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;val&lt;/span&gt; goodbyeModule &lt;span&gt;=&lt;/span&gt; module &lt;span&gt;{&lt;/span&gt;&#xA;        single &lt;span&gt;{&lt;/span&gt; &lt;span&gt;GoodbyeMessageData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;        single &lt;span&gt;{&lt;/span&gt; &lt;span&gt;GoodbyeServiceImpl&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; GoodbyeService &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this example, we don&amp;#39;t assign the result of the &lt;code&gt;startKoin&lt;/code&gt; function to any variable; registering the module with the global context is enough here:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    startKoin &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;modules&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;goodbyeModule&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We then create a new instance of the &lt;code&gt;GoodbyeApplication&lt;/code&gt; class and call its &lt;code&gt;sayGoodbye&lt;/code&gt; function. By implementing the &lt;code&gt;KoinComponent&lt;/code&gt; interface, the &lt;code&gt;GoodbyeApplication&lt;/code&gt; class can resolve its own dependencies from the global context and will resolve its &lt;code&gt;GoodbyeService&lt;/code&gt; dependency in order to print a message to the console:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;GoodbyeApplication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sayGoodbye&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;KoinComponent&lt;/code&gt; interface is convenient, but be aware that it means your classes are now dependant on the Koin framework. Constructor-based injection is recommended when you wish to share code without any explicit dependency on Koin. &lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Koin is a lightweight dependency injection framework with a concise DSL taking advantage of Kotlin&amp;#39;s modern syntax and features. In this post, we looked at how Koin creates singletons and factories, registers dependencies against their interfaces, and allows classes to resolve their own dependencies with delegated properties.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/dependency-injection-with-kotlin-and-koin/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to implement common dependency injection scenarios with Koin and Kotlin</summary>
  </entry>
  <entry>
    <title>Get Started with Android Authentication Using Kotlin: Part 2</title>
    <updated>2021-09-20T18:29:00Z</updated>
    <id>tag:auth0.com,2021-09-20:/blog/get-started-with-android-authentication-using-kotlin-part-2/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;In the previous section, you started an Android project that uses Auth0 for user login, logout, and reading and updating user metadata. You set up the project on both the Auth0 and app sides. In this section, you’ll complete the project and update it to ensure that it works in both portrait and landscape orientations.&lt;/p&gt;&lt;h2 id=&#34;Write-the-code&#34;&gt;Write the code&lt;/h2&gt;&lt;p&gt;Everything you’ve done so far in this exercise is just a preamble. It’s now time to write the actual code! This is the biggest task in the exercise, so let’s do it in small steps.​&lt;/p&gt;&lt;p&gt;🛠 Move to the &lt;code&gt;app&lt;span&gt;/&lt;/span&gt;java&lt;span&gt;/&lt;/span&gt;com&lt;span&gt;.&lt;/span&gt;example&lt;span&gt;.&lt;/span&gt;login&lt;/code&gt; folder and open the main activity’s file, &lt;code&gt;MainActivity&lt;span&gt;.&lt;/span&gt;kt&lt;/code&gt;. Its contents should look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;example&lt;span&gt;.&lt;/span&gt;myapplication&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; androidx&lt;span&gt;.&lt;/span&gt;appcompat&lt;span&gt;.&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;AppCompatActivity&#xA;&lt;span&gt;import&lt;/span&gt; android&lt;span&gt;.&lt;/span&gt;os&lt;span&gt;.&lt;/span&gt;Bundle&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; MainActivity &lt;span&gt;:&lt;/span&gt; &lt;span&gt;AppCompatActivity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;savedInstanceState&lt;span&gt;:&lt;/span&gt; Bundle&lt;span&gt;?&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;savedInstanceState&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;setContentView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;layout&lt;span&gt;.&lt;/span&gt;activity_main&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Import-the-necessary-libraries&#34;&gt;Import the necessary libraries&lt;/h3&gt;&lt;p&gt;🛠 Add the following &lt;code&gt;&lt;span&gt;import&lt;/span&gt;&lt;/code&gt; statements to the ones already in the file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; androidx&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;view&lt;span&gt;.&lt;/span&gt;isVisible&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;Auth0&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;authentication&lt;span&gt;.&lt;/span&gt;AuthenticationAPIClient&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;authentication&lt;span&gt;.&lt;/span&gt;AuthenticationException&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;callback&lt;span&gt;.&lt;/span&gt;Callback&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;management&lt;span&gt;.&lt;/span&gt;ManagementException&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;management&lt;span&gt;.&lt;/span&gt;UsersAPIClient&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;provider&lt;span&gt;.&lt;/span&gt;WebAuthProvider&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;result&lt;span&gt;.&lt;/span&gt;Credentials&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;result&lt;span&gt;.&lt;/span&gt;UserProfile&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;google&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;material&lt;span&gt;.&lt;/span&gt;snackbar&lt;span&gt;.&lt;/span&gt;Snackbar&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Most of these &lt;code&gt;&lt;span&gt;import&lt;/span&gt;&lt;/code&gt; statements import classes from Auth0’s libraries. Here’s what those classes do:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;AuthenticationAPIClient&lt;/code&gt;: Accesses the Auth0 Authentication API. The app uses this to retrieve the user’s profile information.&lt;/li&gt;&lt;li&gt;&lt;code&gt;AuthenticationException&lt;/code&gt;: Defines errors and exceptions that may arise during authentication.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Callback&lt;/code&gt;: Defines an object containing “success” and “failure” callback functions that Auth0 should call after completing an API function.&lt;/li&gt;&lt;li&gt;&lt;code&gt;ManagementException&lt;/code&gt;: Defines errors and exceptions that &lt;code&gt;Callback&lt;/code&gt; objects may have to handle.&lt;/li&gt;&lt;li&gt;&lt;code&gt;UsersAPIClient&lt;/code&gt;: Manages user information. The app uses this to retrieve the user’s profile information.&lt;/li&gt;&lt;li&gt;&lt;code&gt;WebAuthProvider&lt;/code&gt;: Provides Auth0’s web page-based login to the app. The app uses this to log the user in via a login page in a web browser and log the user out.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Credentials&lt;/code&gt;: Stores the user’s credentials, including ID, access, and refresh tokens.&lt;/li&gt;&lt;li&gt;&lt;code&gt;UserProfile&lt;/code&gt;: Stores the user’s profile information, including their user ID, names, email address, and metadata.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 You’ll also need to import the &lt;code&gt;Activity&lt;/code&gt; ’s auto-generated view binding library, which will make it possible for your code to reference views in the layout (or, to put it more simply: access the onscreen widgets). Do this by adding the following &lt;code&gt;&lt;span&gt;import&lt;/span&gt;&lt;/code&gt; statement, replacing &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;YOUR_PACKAGE_NAME_HERE&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with the name of your app’s package, which you’ll find on the first line of the file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;YOUR_PACKAGE_NAME_HERE&lt;span&gt;}&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;databinding&lt;span&gt;.&lt;/span&gt;ActivityMainBinding&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The package name for my app is &lt;code&gt;com&lt;span&gt;.&lt;/span&gt;example&lt;span&gt;.&lt;/span&gt;login&lt;/code&gt;, so my &lt;code&gt;&lt;span&gt;import&lt;/span&gt;&lt;/code&gt; statement looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;example&lt;span&gt;.&lt;/span&gt;login&lt;span&gt;.&lt;/span&gt;databinding&lt;span&gt;.&lt;/span&gt;ActivityMainBinding&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Add-class-properties&#34;&gt;Add class properties&lt;/h3&gt;&lt;p&gt;🛠 Add the following properties to &lt;code&gt;MainActivity&lt;/code&gt; so that the start of the class looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;class&lt;/span&gt; MainActivity &lt;span&gt;:&lt;/span&gt; &lt;span&gt;AppCompatActivity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;lateinit&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; binding&lt;span&gt;:&lt;/span&gt; ActivityMainBinding&#xA;&#xA;    &lt;span&gt;// Login/logout-related properties&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;lateinit&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; account&lt;span&gt;:&lt;/span&gt; Auth0&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; cachedCredentials&lt;span&gt;:&lt;/span&gt; Credentials&lt;span&gt;?&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; cachedUserProfile&lt;span&gt;:&lt;/span&gt; UserProfile&lt;span&gt;?&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&#xA;&#xA;&#xA;    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;savedInstanceState&lt;span&gt;:&lt;/span&gt; Bundle&lt;span&gt;?&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;..&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You’ll use the first property, &lt;code&gt;binding&lt;/code&gt;, to access the widgets on the screen. The other three properties are related to logging in and out and are described in more detail below:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;account&lt;/code&gt;: represents the app’s Auth0 account and is instantiated using the app’s client ID and the domain for the app’s Auth0 tenant. Let me make this clear: this isn’t the account of the user trying to log in, but the account of the developer or organization who is delegating the login/logout process to Auth0. In the case of this example, it’s &lt;em&gt;your&lt;/em&gt; Auth0 developer account. &lt;code&gt;account&lt;/code&gt;’s value is set in &lt;code&gt;&lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; when the activity is instantiated.&lt;/li&gt;&lt;li&gt;&lt;code&gt;cachedCredentials&lt;/code&gt;: contains the user’s credentials that are returned from Auth0 after a successful login. Its value should be &lt;code&gt;&lt;span&gt;null&lt;/span&gt;&lt;/code&gt; when the user is &lt;em&gt;not&lt;/em&gt; logged in. When the user is logged in, it should reference an instance of &lt;code&gt;Credentials&lt;/code&gt;. A &lt;code&gt;Credentials&lt;/code&gt; instance has the following properties:&#xA;  &lt;ul&gt;&lt;li&gt;&lt;code&gt;idToken&lt;/code&gt;: The &lt;a href=&#34;https://auth0.com/docs/tokens/id-tokens&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ID token&lt;/a&gt;, which contains user information that the app can use to customize the user’s experience.&lt;/li&gt;&lt;li&gt;&lt;code&gt;accessToken&lt;/code&gt;: The &lt;a href=&#34;https://auth0.com/docs/tokens/access-tokens&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;access token&lt;/a&gt;, which is a credential that allows the app to access the Auth0 API.&lt;/li&gt;&lt;li&gt;&lt;code&gt;refreshToken&lt;/code&gt;: The &lt;a href=&#34;https://auth0.com/docs/tokens/refresh-tokens&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;refresh token&lt;/a&gt;, which can be used to request a new access token when the original access token expires, without requiring the user to re-authenticate.&lt;/li&gt;&lt;li&gt;&lt;code&gt;type&lt;/code&gt;: The type of the received access token.&lt;/li&gt;&lt;li&gt;&lt;code&gt;expiresAt&lt;/code&gt;: The date/time when the received access token expires.&lt;/li&gt;&lt;li&gt;&lt;code&gt;scope&lt;/code&gt;: The scopes granted to the access token. I’ll explain what scopes are in the next section, &lt;em&gt;The login method&lt;/em&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;cachedUserProfile&lt;/code&gt;: holds the user’s profile information. Its value should be &lt;code&gt;&lt;span&gt;null&lt;/span&gt;&lt;/code&gt; when the user is &lt;em&gt;not&lt;/em&gt; logged in. When the user is logged in, it should reference an instance of &lt;code&gt;UserProfile&lt;/code&gt;. A &lt;code&gt;UserProfile&lt;/code&gt; instance has the following properties:&#xA;&lt;ul&gt;&lt;li&gt;&lt;code&gt;email&lt;/code&gt;: The email address corresponding to the user account.&lt;/li&gt;&lt;li&gt;&lt;code&gt;isEmailVerified&lt;/code&gt;: &lt;code&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt; if the user responded to the verification email sent by Auth0 after they registered themselves as a user.&lt;/li&gt;&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: The user’s full name.&lt;/li&gt;&lt;li&gt;&lt;code&gt;givenName&lt;/code&gt;: The user’s given name, often referred to as their “first name” or “forename”.&lt;/li&gt;&lt;li&gt;&lt;code&gt;familyName&lt;/code&gt;: The user’s family name, often referred to as their “last name” or “surname”.&lt;/li&gt;&lt;li&gt;&lt;code&gt;nickname&lt;/code&gt;: The user’s nickname, sometimes referred to as thier “familiar name” or “moniker”.&lt;/li&gt;&lt;li&gt;&lt;code&gt;PictureURL&lt;/code&gt;: The URL where the user’s picture can be retrieved.&lt;/li&gt;&lt;li&gt;&lt;code&gt;createdAt&lt;/code&gt;: The creation date and time of the user’s account.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Update-the--onCreate----method&#34;&gt;Update the &lt;code&gt;&lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method&lt;/h3&gt;&lt;p&gt;First, let’s fill out the &lt;code&gt;&lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method that was automatically generated for the project and use it to initialize everything in the activity.&lt;/p&gt;&lt;p&gt;🛠 Update the &lt;code&gt;&lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method so that it looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;savedInstanceState&lt;span&gt;:&lt;/span&gt; Bundle&lt;span&gt;?&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;savedInstanceState&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    account &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Auth0&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;com_auth0_client_id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;com_auth0_domain&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    binding &lt;span&gt;=&lt;/span&gt; ActivityMainBinding&lt;span&gt;.&lt;/span&gt;&lt;span&gt;inflate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;layoutInflater&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;setContentView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;binding&lt;span&gt;.&lt;/span&gt;root&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    binding&lt;span&gt;.&lt;/span&gt;buttonLogin&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setOnClickListener&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    binding&lt;span&gt;.&lt;/span&gt;buttonLogout&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setOnClickListener&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    binding&lt;span&gt;.&lt;/span&gt;buttonGet&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setOnClickListener&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    binding&lt;span&gt;.&lt;/span&gt;buttonSet&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setOnClickListener&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;setUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This method:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Defines the account object, which contains the necessary credentials to connect to your Auth0 account.&lt;/li&gt;&lt;li&gt;Creates a view binding object, which you’ll use to access the onscreen widgets.&lt;/li&gt;&lt;li&gt;Connects the &lt;strong&gt;Log in&lt;/strong&gt;, &lt;strong&gt;Log out&lt;/strong&gt;, &lt;strong&gt;Get&lt;/strong&gt;, and &lt;strong&gt;Set&lt;/strong&gt; buttons to the methods they should call when tapped.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Add-the--login----method&#34;&gt;Add the &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method&lt;/h3&gt;&lt;p&gt;The next step is to implement the method that gets called when the user taps the &lt;strong&gt;Log In&lt;/strong&gt; button.&lt;/p&gt;&lt;p&gt;🛠 Add this to the class after &lt;code&gt;&lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    WebAuthProvider&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;account&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withScheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;com_auth0_scheme&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withScope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;login_scopes&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withAudience&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;login_audience&lt;span&gt;,&lt;/span&gt; &lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;com_auth0_domain&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; Callback&lt;span&gt;&amp;lt;&lt;/span&gt;Credentials&lt;span&gt;,&lt;/span&gt; AuthenticationException&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;exception&lt;span&gt;:&lt;/span&gt; AuthenticationException&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;login_failure_message&lt;span&gt;,&lt;/span&gt; exception&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;credentials&lt;span&gt;:&lt;/span&gt; Credentials&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                cachedCredentials &lt;span&gt;=&lt;/span&gt; credentials&#xA;                &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;login_success_message&lt;span&gt;,&lt;/span&gt; credentials&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;                &lt;span&gt;updateUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;                &lt;span&gt;showUserProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; uses the Auth0 SDK’s &lt;code&gt;WebAuthProvider&lt;/code&gt; class, which gives the app the ability to use Auth0’s authentication service. The &lt;code&gt;WebAuthProvider&lt;/code&gt; methods that you’ll use most often are its &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; methods.&lt;/p&gt;&lt;p&gt;Although this method is formatted to span several lines, it’s just a single line of code. The single line is made of a call to a chain of &lt;code&gt;WebAuthProvider&lt;/code&gt; ’s methods starting with &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;. If you ignore all the comments and parameters, the method chain looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;WebAuthProvider&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withScheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withScope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withAudience&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is the &lt;a href=&#34;https://www.baeldung.com/kotlin/builder-pattern&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Builder design pattern&lt;/a&gt; in action. From &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span&gt;withAudience&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, each method in the chain takes an argument that provides additional information about the login, using that information to creates a &lt;code&gt;WebAuthProvider&lt;/code&gt; object that it passes to the next method in the chain. The final method in the chain, &lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, takes the resulting &lt;code&gt;WebAuthProvider&lt;/code&gt; object as its argument and uses it to display the login page and define what should happen when the login succeeds and when it fails.&lt;/p&gt;&lt;p&gt;Let’s take a look at what each of the methods in the chain does.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; initiates the login process and specifies the Auth0 account used by the application.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;withScheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; specifies the scheme to use for the URL that Auth0 redirects to after a successful login. For web apps, the scheme is &lt;code&gt;http&lt;/code&gt; or &lt;code&gt;https&lt;/code&gt;. This value is arbitrary for native mobile apps, so we use &lt;code&gt;app&lt;/code&gt; to make it clear to other developers and other people who may use the Auth0 settings for this app that the redirect is &lt;em&gt;not&lt;/em&gt; to a web page.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;withScope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; specifies which sets of user data the app is authorized to use if the user logs in successfully. The OpenID Connect and OAuth frameworks, on which Auth0’s authentication and authorization are based, use the term &lt;a href=&#34;https://auth0.com/docs/scopes/openid-connect-scopes&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;scope&lt;/em&gt;&lt;/a&gt; to represent the authorization to access user’s data and resources. The method takes a space-delimited string as its argument, where each “word” in the string specifies a different scope. The string used in this app contains these scopes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;openid&lt;/code&gt;: Indicates that application that uses OpenID Connect for authentication. This is the only required scope; all other scopes are optional.&lt;/li&gt;&lt;li&gt;&lt;code&gt;profile&lt;/code&gt;: Authorizes the application to access basic user profile information, including first name, surname, nickname, their photo or avatar, and so on.&lt;/li&gt;&lt;li&gt;&lt;code&gt;email&lt;/code&gt;: Authorizes the application to access the user’s email address.&lt;/li&gt;&lt;li&gt;&lt;code&gt;read&lt;span&gt;:&lt;/span&gt;current_user&lt;/code&gt;: Authorizes the application with read-only access to the &lt;code&gt;current_user&lt;/code&gt; claim.&lt;/li&gt;&lt;li&gt;&lt;code&gt;update&lt;span&gt;:&lt;/span&gt;current_user_metadata&lt;/code&gt;: Authorizes the application with read and write  access to the &lt;code&gt;current_user_metadata&lt;/code&gt; claim. This scope allows us to get and set the &lt;code&gt;country&lt;/code&gt; value in the user’s metadata.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;withAudience&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; specifies the URL that the app will use to connect to Auth0’s login service. This URL is constructed using the domain of the Auth0 tenant used by the app and the endpoint for the Auth0 authentication API.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; takes the &lt;code&gt;WebAuthProvider&lt;/code&gt; object constructed by all the previous methods in the chain and opens the browser window to display the login page. It takes two parameters: a context (a reference to the &lt;code&gt;Activity&lt;/code&gt; that’s initiating the browser window) and an anonymous object with two callback methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;onFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;: Defines what should happen if the user returns from the browser login screen without successfully logging in. This typically happens when the user closes the browser login screen or taps the “back” button while on that screen. The app displays a &lt;code&gt;SnackBar&lt;/code&gt; that notifies the user that login failed, followed by an error code.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;: Defines what should happen if the user returns from the browser login screen after successfully logging in. The app processes the successful response, displays a &lt;code&gt;SnackBar&lt;/code&gt; notifying the user that login was successful, and updates the UI to its “logged in” state.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Add-the--logout----method&#34;&gt;Add the &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method&lt;/h3&gt;&lt;p&gt;You’ve probably guessed that if there’s a &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method that’s called when the user presses the &lt;strong&gt;Log In&lt;/strong&gt; button, there must also be a &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method that’s called when the user presses the &lt;strong&gt;Log Out&lt;/strong&gt; button.&lt;/p&gt;&lt;p&gt;🛠 Add this method to the class after &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    WebAuthProvider&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;account&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withScheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;com_auth0_scheme&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; Callback&lt;span&gt;&amp;lt;&lt;/span&gt;Void&lt;span&gt;?&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; AuthenticationException&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;exception&lt;span&gt;:&lt;/span&gt; AuthenticationException&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;updateUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;                &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;general_failure_with_exception_code&lt;span&gt;,&lt;/span&gt;&#xA;                    exception&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;payload&lt;span&gt;:&lt;/span&gt; Void&lt;span&gt;?&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                cachedCredentials &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&#xA;                cachedUserProfile &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&#xA;                &lt;span&gt;updateUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As with &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; also uses the Auth0 SDK’s &lt;code&gt;WebAuthProvider&lt;/code&gt; class and is a one-liner that uses the Builder pattern. This time, that one line calls a shorter chain of &lt;code&gt;WebAuthProvider&lt;/code&gt; ’s methods starting with &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;. If you ignore all the parameters, the method chain looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;WebAuthProvider&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withScheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; initiates the logout process and specifies the Auth0 account used by the application, which should be the same account as the one used to log in.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;withScheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; specifies the scheme to use for the URL that Auth0 redirects to after successful logout. This should be the same scheme as the one used to log in.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; takes the &lt;code&gt;WebAuthProvider&lt;/code&gt; object constructed by all the previous methods in the chain to log the user out. It takes two parameters: a context (a reference to the &lt;code&gt;Activity&lt;/code&gt; that’s initiating the logout process) and an anonymous object with two callback methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;onFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;: Defines what should happen when the logout process fails. This rarely happens and usually indicates a network or server issue. In this example, the app updates the UI (which remains in the “logged in” state) and displays a &lt;code&gt;SnackBar&lt;/code&gt; that notifies the user that logout failed, followed by an error code.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;: Defines what should happen when the logout process succeeds. In this example, the app destroys its local copies of the user’s credentials and profile and updates the UI to its “logged out” state.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Add-the--showUserProfile----method&#34;&gt;Add the &lt;code&gt;&lt;span&gt;showUserProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method&lt;/h3&gt;&lt;p&gt;Every Auth0 user has a &lt;em&gt;user profile&lt;/em&gt; associated with their account. The user profile contains the following basic information about the user:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Names: The user’s full name, given name, surname, and nickname&lt;/li&gt;&lt;li&gt;Email info: The user’s email address, and whether it was verified&lt;/li&gt;&lt;li&gt;Picture: The location of an image that identifies the user&lt;/li&gt;&lt;li&gt;Creation date: The date and time when the user’s account was created&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;When the user successfully logs in, the app should display their name and email onscreen. It does so by calling &lt;code&gt;&lt;span&gt;showUserProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; immediately after a successful login.&lt;/p&gt;&lt;p&gt;🛠 Add this method to the class after &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;showUserProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// Guard against showing the profile when no user is logged in&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;cachedCredentials &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;val&lt;/span&gt; client &lt;span&gt;=&lt;/span&gt; &lt;span&gt;AuthenticationAPIClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;account&lt;span&gt;)&lt;/span&gt;&#xA;    client&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;userInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;cachedCredentials&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;object&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; Callback&lt;span&gt;&amp;lt;&lt;/span&gt;UserProfile&lt;span&gt;,&lt;/span&gt; AuthenticationException&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;exception&lt;span&gt;:&lt;/span&gt; AuthenticationException&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;general_failure_with_exception_code&lt;span&gt;,&lt;/span&gt;&#xA;                    exception&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;profile&lt;span&gt;:&lt;/span&gt; UserProfile&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                cachedUserProfile &lt;span&gt;=&lt;/span&gt; profile&#xA;                &lt;span&gt;updateUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This method is the final task performed by the &lt;code&gt;&lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; callback method in  &lt;code&gt;&lt;span&gt;loginWithBrowser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;. It initializes the &lt;code&gt;cachedUserProfile&lt;/code&gt; property, which contains the user’s profile information.&lt;/p&gt;&lt;p&gt;As a precaution, it returns immediately if the &lt;code&gt;cachedCredentials&lt;/code&gt; property is &lt;code&gt;&lt;span&gt;null&lt;/span&gt;&lt;/code&gt;, which implies that no user is logged in, and therefore there isn’t any user profile to show.&lt;/p&gt;&lt;p&gt;In order to get this information, it does the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;It creates an instance of &lt;code&gt;AuthenticationAPIClient&lt;/code&gt;, which retrieves Auth0 account information. Like the login and logout methods, this also uses the Builder pattern.&lt;/li&gt;&lt;li&gt;It uses &lt;code&gt;AuthenticationAPIClient&lt;/code&gt; ’s &lt;code&gt;&lt;span&gt;userInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to specify that we want to retrieve user profile information from Auth0. This method requires a valid access token, which it extracts from the &lt;code&gt;cachedCredentials&lt;/code&gt; property.&lt;/li&gt;&lt;li&gt;Finally, it defines callback methods for the cases where it failed and succeeded in retrieving the user profile information from Auth0. If the retrieval was successful, the profile information is stored in &lt;code&gt;cachedUserProfile&lt;/code&gt;, and the UI is updated to display the user’s name and email address.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Add-the--getUserMetadata----and--setUserMetadata----methods&#34;&gt;Add the &lt;code&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;setUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; methods&lt;/h3&gt;&lt;p&gt;The user profile contains information that generally applies to &lt;em&gt;every&lt;/em&gt; user account regardless of the type of application it’s being used for — name, email, photo, and date/time created. While this is necessary information, it’s probably not &lt;em&gt;all&lt;/em&gt; the user information that you want to store in their profile.&lt;/p&gt;&lt;p&gt;That what the &lt;em&gt;user metadata&lt;/em&gt; is for. Think of it as a key-value store where you can place additional user information that isn’t covered by the user profile. In this app, the user metadata will store just one additional piece of user information — their country — and it will allow the user to retrieve and update this information.&lt;/p&gt;&lt;p&gt;🛠 Add the following to the class after &lt;code&gt;&lt;span&gt;showUserProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// Guard against getting the metadata when no user is logged in&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;cachedCredentials &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;val&lt;/span&gt; usersClient &lt;span&gt;=&lt;/span&gt; &lt;span&gt;UsersAPIClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;account&lt;span&gt;,&lt;/span&gt; cachedCredentials&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    usersClient&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;getProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;cachedUserProfile&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;object&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; Callback&lt;span&gt;&amp;lt;&lt;/span&gt;UserProfile&lt;span&gt;,&lt;/span&gt; ManagementException&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;exception&lt;span&gt;:&lt;/span&gt; ManagementException&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;general_failure_with_exception_code&lt;span&gt;,&lt;/span&gt;&#xA;                    exception&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;userProfile&lt;span&gt;:&lt;/span&gt; UserProfile&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                cachedUserProfile &lt;span&gt;=&lt;/span&gt; userProfile&#xA;                &lt;span&gt;updateUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;                &lt;span&gt;val&lt;/span&gt; country &lt;span&gt;=&lt;/span&gt; userProfile&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;country&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; String&lt;span&gt;?&lt;/span&gt;&#xA;                binding&lt;span&gt;.&lt;/span&gt;edittextCountry&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setText&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;country&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;setUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// Guard against getting the metadata when no user is logged in&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;cachedCredentials &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;val&lt;/span&gt; usersClient &lt;span&gt;=&lt;/span&gt; &lt;span&gt;UsersAPIClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;account&lt;span&gt;,&lt;/span&gt; cachedCredentials&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; metadata &lt;span&gt;=&lt;/span&gt; &lt;span&gt;mapOf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;country&amp;#34;&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; binding&lt;span&gt;.&lt;/span&gt;edittextCountry&lt;span&gt;.&lt;/span&gt;text&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    usersClient&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;updateMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;cachedUserProfile&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; metadata&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;object&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; Callback&lt;span&gt;&amp;lt;&lt;/span&gt;UserProfile&lt;span&gt;,&lt;/span&gt; ManagementException&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;exception&lt;span&gt;:&lt;/span&gt; ManagementException&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;general_failure_with_exception_code&lt;span&gt;,&lt;/span&gt;&#xA;                    exception&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;profile&lt;span&gt;:&lt;/span&gt; UserProfile&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                cachedUserProfile &lt;span&gt;=&lt;/span&gt; profile&#xA;                &lt;span&gt;updateUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;                &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;general_success_message&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While &lt;code&gt;&lt;span&gt;showUserProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; uses an instance of &lt;code&gt;AuthenticationAPIClient&lt;/code&gt; to get the user profile information, &lt;code&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;setUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; use a different object type: &lt;code&gt;UsersAPIClient&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Unlike &lt;code&gt;AuthenticationAPIClient&lt;/code&gt;, which needs only an &lt;code&gt;Auth0&lt;/code&gt; account object to be instantiated, you need both an &lt;code&gt;Auth0&lt;/code&gt; account object and an access token to instantiate a &lt;code&gt;UsersAPIClient&lt;/code&gt; object.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; specifies the user profile using &lt;code&gt;UsersAPIClient&lt;/code&gt; ’s &lt;code&gt;&lt;span&gt;getProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method and the ID of the user, followed by the &lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to attempt to get the user profile and define callback methods for failure and success.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;’s &lt;code&gt;&lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; callback is almost the same as &lt;code&gt;&lt;span&gt;showUserProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;’s — it just has these two additional lines that extract the &lt;code&gt;country&lt;/code&gt; value from the user’s metadata and display it onscreen:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;val&lt;/span&gt; country &lt;span&gt;=&lt;/span&gt; userProfile&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;country&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; String&lt;span&gt;?&lt;/span&gt;&#xA;binding&lt;span&gt;.&lt;/span&gt;edittextCountry&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setText&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;country&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;setUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; defines a &lt;code&gt;Map&lt;/code&gt; with a single key-value pair, where the key is the string &lt;code&gt;country&lt;/code&gt; and the corresponding value is the contents of the &lt;code&gt;EditText&lt;/code&gt; where the user enters the name of their country. It then passes that &lt;code&gt;Map&lt;/code&gt; along with the user’s ID to &lt;code&gt;UsersAPIClient&lt;/code&gt; ’s &lt;code&gt;&lt;span&gt;updateMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to specify the change to be made, followed by the &lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to initiate the update and define callback methods for failure and success.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;setUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;’s &lt;code&gt;&lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; callback is almost the same as &lt;code&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;’s — but instead of updating the &lt;code&gt;EditText&lt;/code&gt; where the user enters the name of their country, it simply displays a &lt;code&gt;SnackBar&lt;/code&gt; notifying the user that it was successful in updating the metadata.&lt;/p&gt;&lt;h3 id=&#34;Add-the-UI-methods&#34;&gt;Add the UI methods&lt;/h3&gt;&lt;p&gt;The final step is to add the methods that present information to the user.&lt;/p&gt;&lt;p&gt;🛠 Add the following to the class after &lt;code&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;setUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;updateUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; isLoggedIn &lt;span&gt;=&lt;/span&gt; cachedCredentials &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&#xA;&#xA;    binding&lt;span&gt;.&lt;/span&gt;textviewTitle&lt;span&gt;.&lt;/span&gt;text &lt;span&gt;=&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;isLoggedIn&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;logged_in_title&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;logged_out_title&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    binding&lt;span&gt;.&lt;/span&gt;buttonLogin&lt;span&gt;.&lt;/span&gt;isEnabled &lt;span&gt;=&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;isLoggedIn&#xA;    binding&lt;span&gt;.&lt;/span&gt;buttonLogout&lt;span&gt;.&lt;/span&gt;isEnabled &lt;span&gt;=&lt;/span&gt; isLoggedIn&#xA;    binding&lt;span&gt;.&lt;/span&gt;linearlayoutMetadata&lt;span&gt;.&lt;/span&gt;isVisible &lt;span&gt;=&lt;/span&gt; isLoggedIn&#xA;&#xA;    binding&lt;span&gt;.&lt;/span&gt;textviewUserProfile&lt;span&gt;.&lt;/span&gt;isVisible &lt;span&gt;=&lt;/span&gt; isLoggedIn&#xA;&#xA;    &lt;span&gt;val&lt;/span&gt; userName &lt;span&gt;=&lt;/span&gt; cachedUserProfile&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name &lt;span&gt;?:&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; userEmail &lt;span&gt;=&lt;/span&gt; cachedUserProfile&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;email &lt;span&gt;?:&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;    binding&lt;span&gt;.&lt;/span&gt;textviewUserProfile&lt;span&gt;.&lt;/span&gt;text &lt;span&gt;=&lt;/span&gt; &lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;user_profile&lt;span&gt;,&lt;/span&gt; userName&lt;span&gt;,&lt;/span&gt; userEmail&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;isLoggedIn&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        binding&lt;span&gt;.&lt;/span&gt;edittextCountry&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setText&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;text&lt;span&gt;:&lt;/span&gt; String&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    Snackbar&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;make&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        binding&lt;span&gt;.&lt;/span&gt;root&lt;span&gt;,&lt;/span&gt;&#xA;        text&lt;span&gt;,&lt;/span&gt;&#xA;        Snackbar&lt;span&gt;.&lt;/span&gt;LENGTH_LONG&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you’ve made it this far, I have great news for you: you’ve written all the code for the app!&lt;/p&gt;&lt;h2 id=&#34;See-the-App-in-Action&#34;&gt;See the App in Action&lt;/h2&gt;&lt;p&gt;Run the app. You’ll see this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7FSXqzXczgaNUC5NnY9q1F/d72b55833d1bf446c70d60488f7f4ae0/welcome_screen.png&#34; alt=&#34;The app’s screen when launched.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Tap the &lt;strong&gt;Log in&lt;/strong&gt; button. The app will open a browser window that will display the login web page:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/53TEQjPR0HhmvGIC8BXW7a/e7b6205b7c401883c61b162c498a00f7/universal_login.png&#34; alt=&#34;The Auth0 login web page.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Log in using the email address and password of the user account you created earlier. Since this is the first time the account has logged into the app, the &lt;strong&gt;Authorize App&lt;/strong&gt; page will appear in the browser window:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4AkDSwWeHROplHJV3KOFcg/98376afd920b0af2a2e732a06c7fb622/authorize_app.png&#34; alt=&#34;The “Authorize App” screen. It says that the app is requesting access to your user account, particularly the “profile”, “current_user”, and “current_user_metadata” information.&#34;/&gt;&lt;/p&gt;&lt;p&gt;This page is asking you to authorize the app to access the following information in your user account:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Profile: access to your profile and email&lt;/li&gt;&lt;li&gt;Current_user: read your current_user&lt;/li&gt;&lt;li&gt;Current_user_metadata: update your current_user_metadata&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If these items sound familiar, it’s because you’ve seen them recently. They’re the names of the scopes in the &lt;code&gt;login_scopes&lt;/code&gt; string in the &lt;code&gt;strings&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; resource...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;login_scopes&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    openid profile email read:current_user update:current_user_metadata&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;...which the call to &lt;code&gt;&lt;span&gt;withScope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; in the &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method uses to specify which sets of user data the app is authorized to use. This additional step informs the user of this use of their data and gives them a choice to approve or decline.&lt;/p&gt;&lt;p&gt;Tap the &lt;strong&gt;Approve&lt;/strong&gt; button. The browser will disappear, and you will return to the app, which will now look like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png&#34; alt=&#34;The app’s screen when the user is logged in.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Tap the &lt;strong&gt;Get&lt;/strong&gt; button. If you’ve never edited the value of the &lt;code&gt;country&lt;/code&gt; field in the user’s metadata, the metadata text box will display the hint text “Enter country”.&lt;/p&gt;&lt;p&gt;Enter a country’s name (or any other text if you like) into the text box and tap the &lt;strong&gt;Set&lt;/strong&gt; button. You’ll see this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5NE22T6w25nAVecqCIZ7x7/3c913e712052570af8908e860da37d2a/main_screen_3.png&#34; alt=&#34;The app’s screen, with the word “Morocco”, entered into the text field.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Two things just happened:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;If the user’s metadata already had a &lt;code&gt;country&lt;/code&gt; field, its value changed to whatever text you entered. If the user’s metadata didn’t have a &lt;code&gt;country&lt;/code&gt; field, a &lt;code&gt;country&lt;/code&gt; field was added to the metadata, and its value was set to whatever text you entered.&lt;/li&gt;&lt;li&gt;An Android pop-up message called a &lt;a href=&#34;https://developer.android.com/reference/com/google/android/material/snackbar/Snackbar&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;Snackbar&lt;/code&gt;&lt;/a&gt; appeared at the bottom of the screen with the message “Success!”&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Log out of the app, then log in again. Tap the &lt;strong&gt;Get&lt;/strong&gt; button. The app should fill the metadata text box with the value of the &lt;code&gt;country&lt;/code&gt; metadata field.&lt;/p&gt;&lt;p&gt;Let’s look at the updated user metadata from the Auth0 side. In the Auth0 dashboard, go to the list of users. Do this by clicking &lt;strong&gt;User Management&lt;/strong&gt; in the menu on the left side of the page, followed by clicking on &lt;strong&gt;Users&lt;/strong&gt;. Select the user that is currently logged in on the app. You’ll be taken to that user’s &lt;strong&gt;Details&lt;/strong&gt; page:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5nnVqPm4l6vVtgyvZpeYwI/db98ccbfb8b945ebde7ec7c8143724c5/user_details_page.png&#34; alt=&#34;The Auth0 dashboard displaying the user’s “User Details” page. In the “user_metadata” field, a JSON object contains a single key-value pair with the key “country” and the value “Morocco”.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Scroll down to the &lt;strong&gt;Metadata&lt;/strong&gt; section of the page. You’ll see an area labeled &lt;strong&gt;user_metadata&lt;/strong&gt;. If you filled out the &lt;code&gt;EditText&lt;/code&gt; in the app, you’ll see it in the JSON object there:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;country&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;WHATEVER_TEXT_YOU_ENTERED&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Each Auth0 user account can store two kinds of metadata:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;User metadata,&lt;/strong&gt; which is meant for data intentionally provided by and controlled by the user. It’s typically used for storing information that the user wants to share with the app, such as their address, contact information, preferences, and similar data. Only data that the user can read and edit should be stored here.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;App metadata,&lt;/strong&gt; which is meant for data provided by and controlled by the app. It’s typically used for storing information about the user that is primarily for the app’s use, such as the user’s roles, permissions, status, and similar data. There may be cases where the user can read this data, but you should not use app metadata to store data provided directly by the user.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;While a detailed look at the user account pages is beyond the scope of this article, you should explore them to see the kinds of data and functionality that are associated with user accounts.&lt;/p&gt;&lt;h2 id=&#34;When-Things-Go-Sideways&#34;&gt;When Things Go Sideways&lt;/h2&gt;&lt;p&gt;The expression “to go sideways” means “to go wrong” or “to not go according to plan.” In this section, I’ll show you what can go wrong when you’re writing an Android app and fail to account for what happens when the user turns their phone on its side. &lt;/p&gt;&lt;h3 id=&#34;Inducing-app-amnesia&#34;&gt;Inducing app amnesia&lt;/h3&gt;&lt;p&gt;Run the app and log in. You should see this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png&#34; alt=&#34;The app’s screen when the user is logged in, in portrait orientation.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Rotate your device to landscape orientation:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/48FY3obLHoGHnHfugbSn7I/8bc142a3e3e69bde3deed3223e6d02d7/orientation_change.png&#34; alt=&#34;The app screen viewed in landscape orientation. It has taken on the appearance of just having been launched.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Notice what happened: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;The greeting text changed from “You’re logged in.” to “Welcome to the app!”, which is its state when the app is launched.&lt;/li&gt;&lt;li&gt;The buttons have also been returned to their initial state:  &lt;strong&gt;Log in&lt;/strong&gt; is enabled, and &lt;strong&gt;Log out&lt;/strong&gt; is disabled.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;It appears as if turning your device on its side has given your app amnesia and returned it to its initial state. What happened?&lt;/p&gt;&lt;h3 id=&#34;Configuration-changes-and-reloading&#34;&gt;Configuration changes and reloading&lt;/h3&gt;&lt;p&gt;To use a developer cliché: this isn’t a bug, but a feature.&lt;/p&gt;&lt;p&gt;Whenever it detects a configuration change, Android’s default response is to reload the current activity. There are many configuration changes, such as language, keyboard availability, or the change you made just now: screen orientation. Reloading an activity when a configuration change happens makes it run its initialization methods again and reload resources, allowing it to set itself up for the new configuration.&lt;/p&gt;&lt;p&gt;This behavior was designed for applications that present different interfaces in different orientations. YouTube is an example of such an app, which has different portrait and landscape UI setups:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4jHUrVT9Ekh5252HZc3T95/706f6ddb57bb1b6be1a37c82b1201297/youtube_portrait_and_landscape.png&#34; alt=&#34;The YouTube app, shown in both orientations. In portrait orientation, it shows the video, ratings, and comments. In landscape orientation, the video takes up the entire screen.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Changing the screen orientation reloaded the activity and restored the app to its initial state, but it &lt;em&gt;did not&lt;/em&gt; change your “logged in” status. The &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method was not called when you turned your device on its side. You’re still logged in!&lt;/p&gt;&lt;p&gt;You can confirm your “logged in” status by tapping the &lt;strong&gt;Log in&lt;/strong&gt; button. Note that there wasn’t an intermediate step where you had to enter your email address and password — you were taken straight to the app:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/01B8CQAD7K9uDYwkT7D1c7/08a21f19cdacc4ecdb065132cd2cf590/logged_in_sideways.png&#34; alt=&#34;The app screen, viewed in landscape orientation, showing the user logged in. The bottom portion of the screen is not in sight.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Note that that app never presented the login page. That’s because there wasn’t any need — you were still logged in. Let’s solve this problem.&lt;/p&gt;&lt;h3 id=&#34;Curing-your-app-s-amnesia&#34;&gt;Curing your app’s amnesia&lt;/h3&gt;&lt;p&gt;You can instruct Android &lt;em&gt;not&lt;/em&gt; to reload Activities in the event of specified configuration changes in the app’s manifest. &lt;/p&gt;&lt;p&gt;🛠 Open &lt;code&gt;AndroidManifest&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; and change the &lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;activity&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; tag to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;activity&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;.MainActivity&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;exported&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;true&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;configChanges&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;orientation|screenSize&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This change adds the attribute &lt;code&gt;android&lt;span&gt;:&lt;/span&gt;configChanges&lt;span&gt;=&lt;/span&gt; “orientation&lt;span&gt;|&lt;/span&gt;screenSize”&lt;/code&gt; to &lt;code&gt;MainActivity&lt;/code&gt;, which tells Android that the activity should &lt;em&gt;not&lt;/em&gt; reload if the device orientation or screen size changes. Instead of reloading the activity, Android uses a callback method to notify the app of the change. The assumption is that you’ll handle those configuration changes yourself. Since we’ll ignore this callback, the configuration change has no effect.&lt;/p&gt;&lt;p&gt;Run the app and log in. Change the screen orientation, going from portrait to landscape and back. It no longer causes the activity to reload.&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;You’ve just built a simple app that features basic username/password &lt;em&gt;authentication&lt;/em&gt; — the ability to identify a known user. In addition to log a user in and out, you can also retrieve the information in their profile, and read and update their metadata.&lt;/p&gt;&lt;p&gt;You can find the code for the complete project for this article in &lt;a href=&#34;https://github.com/auth0-blog/get-started-android-authentication-kotlin&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this repository on the &lt;em&gt;Auth0 Blog Samples&lt;/em&gt; GitHub account&lt;/a&gt;. The only change that you’ll need to make in order to run it is to enter your app’s client ID and tenant’s domain in the &lt;code&gt;auth0&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; resource file.&lt;/p&gt;&lt;p&gt;This is the first in a new series of articles on Android development with Auth0. Future articles will cover new developments in Android 12 and Android Studio, as well as deeper dives into authentication and authorization with Android and Auth0 and alternatives to the standard username-and-password approach. Watch this space!&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-1&#34; target=&#34;_blank&#34; rel=&#34;noopener referrer&#34;&gt;Next Step: Read the preview part here&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://community.auth0.com/t/developing-a-secure-api-with-nestjs/33026&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;I ran into an issue&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-2/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to implement login, logout, and user profiles in Android apps using Kotlin and Auth0.</summary>
  </entry>
  <entry>
    <title>Get Started with Android Authentication Using Kotlin: Part 1</title>
    <updated>2021-09-20T18:29:00Z</updated>
    <id>tag:auth0.com,2021-09-20:/blog/get-started-with-android-authentication-using-kotlin-part-1/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;If you’re planning to build a native Android app that requires users to log in, you should use Auth0. &lt;/p&gt;&lt;p&gt;Implementing user login/logout often turns into its own project. Just implementing the many ways users want to log in can easily take a lot of time. You’d also have to deal with issues such as user management, scaling, and security, each of which could have its own article.&lt;/p&gt;&lt;p&gt;With Auth0 and a few lines of code, your app can have a full-featured system that supports logging in with a basic username/password combination, single sign-on and social accounts, passwordless login, biometrics, and more. You won’t have to handle the “behind the scenes” issues, either!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;This tutorial covers the basics of using Auth0 to implement login/logout in an Android app written in Kotlin.&lt;/strong&gt; It also provides an introduction to reading and writing information into user profiles so that your app can customize itself for each user. Along the way, you’ll become familiar with the Auth0 dashboard and learn how to use it to register applications and users.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Look for the 🛠 emoji if you’d like to skim through the content while focusing on the build and execution steps.&lt;/strong&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;What-you-ll-build&#34;&gt;What you’ll build&lt;/h2&gt;&lt;p&gt;You’ll build a simple, single-screen Android app that will allow the user to log in and log out using Auth0. While logged in, the user will be able to see the following information from their user profile, namely:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Information that is part and parcel of the user account, namely:&#xA;  &lt;ul&gt;&lt;li&gt;The user’s name&lt;/li&gt;&lt;li&gt;The user’s email address&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Metadata attached to the user account, namely:&#xA;  &lt;ul&gt;&lt;li&gt;The user’s country&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The user will also be able to edit their country, and the result of that edit will be stored in the user account.&lt;/p&gt;&lt;p&gt;When you launch the completed app, you’ll see a greeting, a &lt;strong&gt;Log in&lt;/strong&gt; button, and a disabled &lt;strong&gt;Log out&lt;/strong&gt; button:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7FSXqzXczgaNUC5NnY9q1F/d72b55833d1bf446c70d60488f7f4ae0/welcome_screen.png&#34; alt=&#34;The finished app’s screen when launched. The greeting “Welcome to the app!” appears above the “Log in” and “Log out” buttons.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Tapping the &lt;strong&gt;Log in&lt;/strong&gt; button takes the user to the login screen, which appears in a custom Chrome tab:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/53TEQjPR0HhmvGIC8BXW7a/e7b6205b7c401883c61b162c498a00f7/universal_login.png&#34; alt=&#34;The default Auth0 login web page. It lets the user enter username and password or log in using a Google account.&#34;/&gt;&lt;/p&gt;&lt;p&gt;When you use Auth0 in your apps, you delegate authentication to a centralized login page in the same way that Google properties such as Gmail and YouTube redirect you to &lt;strong&gt;accounts.google.com&lt;/strong&gt; when you log in. In this exercise, you’ll use the default “look and feel” for the login page, but &lt;a href=&#34;https://auth0.com/docs/universal-login/new-experience/universal-login-page-templates&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;you can customize it to match your app or organization’s branding&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Logging in successfully returns you to the app, where you’ll see the following changes:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png&#34; alt=&#34;The finished app’s screen when the user is logged in. It displays information about the logged-in user.&#34;/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The greeting will have changed to a notification telling you that you’re now logged into the app.&lt;/li&gt;&lt;li&gt;The &lt;strong&gt;Log in&lt;/strong&gt; button will now be disabled, and the &lt;strong&gt;Log out&lt;/strong&gt; button will now be enabled.&lt;/li&gt;&lt;li&gt;The name and email address for the user account that you used to log in will be displayed.&lt;/li&gt;&lt;li&gt;There will now be a section for metadata, complete with an editable text box (an &lt;code&gt;EditText&lt;/code&gt; in Android parlance) and &lt;strong&gt;Get&lt;/strong&gt; and &lt;strong&gt;Set&lt;/strong&gt; buttons that will allow you to read and write to the &lt;code&gt;country&lt;/code&gt; field of the metadata for the user account.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As you might expect, logging out is done by tapping the &lt;strong&gt;Log out&lt;/strong&gt; button. Once logged out, you see the following changes onscreen:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2JqJGGpuuMVwdXSPyHH0iT/8c4153360bd7aa656dccc8170af42e4d/logout_screen.png&#34; alt=&#34;The finished app’s screen when the user is logged out. The title bar reads “You’re logged out”.&#34;/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The notification at the top of the screen will now inform you that you’re logged out of the app.&lt;/li&gt;&lt;li&gt;Logging out enables the &lt;strong&gt;Log in&lt;/strong&gt; button and disables the &lt;strong&gt;Log out&lt;/strong&gt; button.&lt;/li&gt;&lt;li&gt;The other controls that were visible when you were logged in will no longer be visible.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;You’ll need the following for this coding exercise:&lt;/p&gt;&lt;h3 id=&#34;What-you-ll-need&#34;&gt;What you’ll need&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;An Android development setup.&lt;/strong&gt; Make sure you have the following, in the order given below:&#xA;  &lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/technologies/javase-jdk16-downloads.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;Java SE Developer Kit (JDK), version 11 or later.&lt;/strong&gt;&lt;/a&gt; You can find out which version is on your computer by opening a command-line interface and entering &lt;code&gt;java &lt;span&gt;--&lt;/span&gt;version&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;Android Studio,&lt;/strong&gt;&lt;/a&gt; version 3.6 (February 2020) or later. I used the current stable version of Android Studio when writing this article: version 2020.3.1, also known as “Arctic Fox”.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;At least one Android SDK (Software Development Kit) platform.&lt;/strong&gt; You can confirm that you have one (and install one if you don’t) in Android Studio. Open &lt;strong&gt;Tools&lt;/strong&gt; → &lt;strong&gt;SDK Manager&lt;/strong&gt;. You’ll see a list of Android SDK platforms. Make sure that the current SDK (&lt;strong&gt;Android 11.0 (R)&lt;/strong&gt; at the time of writing) is checked; if it isn’t, check it, click the &lt;strong&gt;Apply&lt;/strong&gt; button, and click the &lt;strong&gt;OK&lt;/strong&gt;  button in the confirmation dialog that appears. Wait for the SDK platform to install and click the &lt;strong&gt;Finish&lt;/strong&gt; button when installation is complete.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;An Android device, real or virtual:&lt;/strong&gt;&#xA;  &lt;ul&gt;&lt;li&gt;&lt;strong&gt;Using a real device:&lt;/strong&gt; Connect the device to your computer with a USB cable. &lt;a href=&#34;https://developer.android.com/studio/debug/dev-options&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Make sure that your device has Developer Options and USB debugging enabled.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Using a virtual device:&lt;/strong&gt; Using Android Studio, you can build a virtual device (emulator) that runs on your computer. Here’s my recipe for a virtual device that simulates a current-model inexpensive Android phone:&#xA;  &lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Open &lt;strong&gt;Tools&lt;/strong&gt; → &lt;strong&gt;AVD Manager&lt;/strong&gt; (AVD is short for “Android Virtual Device”). The &lt;strong&gt;Your Virtual Devices&lt;/strong&gt; window will appear. Click the &lt;strong&gt;Create Virtual Device...&lt;/strong&gt; button.&lt;/li&gt;&lt;li&gt;The &lt;strong&gt;Select Hardware&lt;/strong&gt; window will appear. In the &lt;strong&gt;Phone&lt;/strong&gt; category, select &lt;strong&gt;Pixel 3a&lt;/strong&gt; and click the &lt;strong&gt;Next&lt;/strong&gt; button.&lt;/li&gt;&lt;li&gt;The &lt;strong&gt;System Image&lt;/strong&gt; window will appear, and you’ll see a list of Android versions. Select &lt;strong&gt;R&lt;/strong&gt; (API 30, also known as Android 11.0). If you see a &lt;strong&gt;Download&lt;/strong&gt; link beside R, click it, wait for the OS to download, then click the &lt;strong&gt;Finish&lt;/strong&gt; button. Then click the &lt;strong&gt;Next&lt;/strong&gt; button.&lt;/li&gt;&lt;li&gt;The &lt;strong&gt;Android Virtual Device (AVD)&lt;/strong&gt; window will appear. The &lt;strong&gt;AVD Name&lt;/strong&gt; field should contain &lt;strong&gt;Pixel 3a API 30&lt;/strong&gt;, the two rows below it should have the titles &lt;strong&gt;Pixel 3a&lt;/strong&gt; and &lt;strong&gt;R&lt;/strong&gt;, and in the &lt;strong&gt;Startup orientation&lt;/strong&gt; section, &lt;strong&gt;Portrait&lt;/strong&gt; should be selected. Click the &lt;strong&gt;Finish&lt;/strong&gt; button.&lt;/li&gt;&lt;li&gt;You will be back at the &lt;strong&gt;Your Virtual Devices&lt;/strong&gt; window. The list will now contain &lt;strong&gt;Pixel 3a API 30&lt;/strong&gt;, and that device will be available to you when you run the app.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;An Auth0 account.&lt;/strong&gt; &lt;a href=&#34;https://auth0.com/sign-up?tr=1&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;You can sign up for a free one now&lt;/a&gt;, or later on in the article.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;What-might-be-useful&#34;&gt;What might be useful&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;A little familiarity with Android development.&lt;/strong&gt; If you’re new to Android development or the Kotlin programming language, you might find Android Developers’ site, &lt;a href=&#34;https://developer.android.com/courses/android-basics-kotlin/course&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Android Basics in Kotlin&lt;/em&gt;&lt;/a&gt;, a good introduction.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Set-Up-the-Project-on-Android-Studio&#34;&gt;Set Up the Project on Android Studio&lt;/h2&gt;&lt;p&gt;🛠 Open Android Studio. Close any open project windows, which will cause the &lt;strong&gt;Welcome to Android Studio&lt;/strong&gt; window to appear. Create a new project by clicking the &lt;strong&gt;New project&lt;/strong&gt; button:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/515JGjc8Gu0kPUC9nSmABB/04464174cda6dd059c734157cf68de21/click_new_project.png&#34; alt=&#34;Android Studio’s “Welcome to Android Studio” screen. An arrow directs the reader to click the “New Project” button.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Make sure that &lt;strong&gt;Phone and Tablet&lt;/strong&gt; is selected in the menu of the left side of the window that appears, then select &lt;strong&gt;Empty Activity&lt;/strong&gt; from the selection of templates. Click the &lt;strong&gt;Next&lt;/strong&gt; button:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3C7qUdfN39HAixbVPi7cMs/0d6f2fe941ddf1f25c7ac1b56bd46344/select_empty_activity.png&#34; alt=&#34;Android Studio’s template screen for new projects. The reader is told to select the “Empty Activity” and click the “Next” button.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 In the next window, enter a name for the app, such as &lt;strong&gt;Login&lt;/strong&gt;. Make a note of the value that Android Studio generates in the &lt;strong&gt;Package Name&lt;/strong&gt; field — you’ll need it when registering the app with Auth0.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you used &lt;strong&gt;Login&lt;/strong&gt; as the name for the app, Android Studio will automatically generate the package name &lt;strong&gt;com.example.login&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2ke5fQE1zyH9OljmWbarEG/5715fffa863c2f193930679aadbd66da/new_project_name.png&#34; alt=&#34;The template screen for new project details: project name is “Login”, package name is “com.example.login”, language is Kotlin, minimum SDK is set to API 21.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Ensure that the selected &lt;strong&gt;Language&lt;/strong&gt; is &lt;strong&gt;Kotlin&lt;/strong&gt; and that the &lt;strong&gt;Minimum SDK&lt;/strong&gt; is set to &lt;strong&gt;API 21: Android 5.0 (Lollipop)&lt;/strong&gt; or later.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;API 21, which dates back to November 2014, is the oldest version of Android supported by Auth0. By targeting API 21 or later, you can write an app that will run on almost 95% of the active Android devices that are connected to the Play Store.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;🛠 Click the &lt;strong&gt;Finish&lt;/strong&gt; button. Android Studio will spend a few moments setting up your project. &lt;/p&gt;&lt;p&gt;🛠 Once Android Studio has finished setting up the project, run the app to confirm that it works. You should see the default “Hello, World!” app:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6PQgEXywNwmp7eKD50RSU6/ffe69b079f53c0d059264c541c3d5623/hello_world.png&#34; alt=&#34;The newly-created app’s screen when launched. Title bar reads “Login”; body reads “Hello World!”.&#34;/&gt;&lt;/p&gt;&lt;p&gt;With the app project set up on Android Studio, it’s time to turn your attention to the Auth0 side.&lt;/p&gt;&lt;h2 id=&#34;Register-the-App-with-Auth0&#34;&gt;Register the App with Auth0&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;To continue beyond this point, you’ll need an Auth0 account.&lt;/strong&gt; That’s because your app will delegate the heavy lifting of the login/logout process to Auth0 so that you can focus your effort, energy, and time on what your app actually does, instead of worrying about authenticating users and all the edges cases that come with it.&lt;/p&gt;&lt;h3 id=&#34;If-you-already-have-an-Auth0-account---&#34;&gt;If you already have an Auth0 account...&lt;/h3&gt;&lt;p&gt;🛠 ...log in, skip the next section, and proceed to the part titled &lt;strong&gt;&lt;em&gt;Register your app with Auth0&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;h3 id=&#34;If-you-don-t-have-an-Auth0-account-yet---&#34;&gt;If you don’t have an Auth0 account yet...&lt;/h3&gt;&lt;p&gt;🛠 &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;...go ahead and sign up for one!&lt;/strong&gt;&lt;/a&gt; It’s free, and we’ve taken great care to make the process as painless as possible.&lt;/p&gt;&lt;p&gt;Auth0 will ask you to fill just &lt;em&gt;two&lt;/em&gt; fields: your email address and a password. We &lt;em&gt; won’t&lt;/em&gt; ask for a credit card number or any other information. If &lt;em&gt;that&lt;/em&gt; seems like too much work, you can sign up with a single click by doing so using your GitHub, Google, or Microsoft account:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/Pk0WorUwp6mW9iJKj4Ar7/9d8c9e515765f118b5fdc06d3793b6ef/sign_up.png&#34; alt=&#34;Auth0’s “Sign Up” form, which has “Email” and “Password” fields, and links to sign up with a GitHub, Google, and Microsoft account.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Once you’ve provided an email address and password, you’ll see the “Let’s set you up for success” page:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4M6OV4hlEWk5J9kI2Vzs5p/fa8c33783e7255757f7710e219caeac0/set_up_auth0_account.png&#34; alt=&#34;The “Let’s set you up for success” page. The reader is directed to select the “Personal” account type and click the “Next” button.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Just select &lt;strong&gt;Personal&lt;/strong&gt; for your account type and click the &lt;strong&gt;Next&lt;/strong&gt; button. Your sign-up process will be complete, and you’ll see the Auth0 dashboard page.&lt;/p&gt;&lt;h3 id=&#34;Register-your-app-with-Auth0&#34;&gt;Register your app with Auth0&lt;/h3&gt;&lt;p&gt;🛠 In the menu on the left side of the &lt;a href=&#34;https://manage.auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 dashboard&lt;/a&gt;, click on &lt;strong&gt;Applications&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2PsBUajhnnXWJR7QS8PUfg/e9c6bd92175335286aa03224e1646e91/expand_applications_menu.png&#34; alt=&#34;The main page of the Auth0 dashboard. The reader is directed to expand the “Applications” menu.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 This will expand the &lt;strong&gt;Applications&lt;/strong&gt; menu. Select the first item in that menu, which also has the name &lt;strong&gt;Applications&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2UNcUhGNq16RFBJkokz7KS/854f3e92fbe58943bf05f0f4a761d177/select_applications_menu_item.png&#34; alt=&#34;The main page of the Auth0 dashboard, with the “Applications” menu expanded. The reader is directed to select the “Applications” menu item.&#34;/&gt;&lt;/p&gt;&lt;p&gt;You will now be on the &lt;strong&gt;Applications&lt;/strong&gt; page. It lists all the applications that you have registered so that Auth0 can handle their login/logout processes.&lt;/p&gt;&lt;p&gt;🛠 Let’s create a new registration for your app. Do this by clicking the &lt;strong&gt;Create application&lt;/strong&gt; button near the top right of the page:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4aOFH6mt7xs9CspYNkuU7Q/1cff580b803c09236ad959b18614119a/create_application.png&#34; alt=&#34;The “Applications” page. The reader is directed to click the “Create Application” button.&#34;/&gt;&lt;/p&gt;&lt;p&gt;You’ll see this dialog appear:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/lAiEqcCsTt5CcwrdA3IGb/8eda117f82ca08f55f120d058587443d/create_application.png&#34; alt=&#34;The “Create application” dialog. The application’s name is set to “Login”, and the selected application type is “Native”.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 You’ll need to provide two pieces of information to continue:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Enter a name for your app in the name field. It might be simplest to use the same name as your Android Studio project (if you’ve been following my example, use the name &lt;strong&gt;Login&lt;/strong&gt;).&lt;/li&gt;&lt;li&gt;Specify the application type, which in this case is &lt;strong&gt;Native&lt;/strong&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Click &lt;strong&gt;Create&lt;/strong&gt;. The &lt;strong&gt;Quick Start&lt;/strong&gt; page for your app will appear:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5yXXeZfsMDWTPUcWi49Jj6/73176affc85927351badee8172b831e8/quick_start_tab.png&#34; alt=&#34;The “Quick Start” page. It contains several icons, each one representing an operating system or platform.&#34;/&gt;&lt;/p&gt;&lt;p&gt;This page provides you with ready-made projects for several different platforms that you can use as the basis for an application that delegates login/logout to Auth0. You won’t be using any of them in this exercise; instead, you’ll make use of a couple of Auth0 libraries and write the code yourself. It’s more educational — and more importantly, &lt;em&gt;fun&lt;/em&gt; — that way.&lt;/p&gt;&lt;p&gt;🛠 Click the &lt;strong&gt;Settings&lt;/strong&gt; tab, which will take you to this page:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6uxBjXmnlf1uD7hocTif0p/b3701340069e48b6f8dfe1e151a9d7cb/settings_page.png&#34; alt=&#34;The “Application” page’s “Settings” tab.&#34;/&gt;&lt;/p&gt;&lt;p&gt;You’re going to do two critical things on this page:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Get information that your app needs to know about Auth0, and&lt;/li&gt;&lt;li&gt;Provide information that Auth0 needs to know about your app.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let’s take care of the first one: Getting the information that your app needs, namely:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;strong&gt;domain&lt;/strong&gt;, which is the URL that your app will use to contact Auth0. It uniquely identifies your Auth0 &lt;em&gt;tenant&lt;/em&gt;, which is a collection of applications, users, and other information that you have registered with your Auth0 account.&lt;/li&gt;&lt;li&gt;The &lt;strong&gt;client ID&lt;/strong&gt;, which is the identifier that Auth0 assigned to your app. It’s how Auth0 knows which app of yours it’s working with.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 Get this information by copying the contents of the &lt;strong&gt;Domain&lt;/strong&gt; and &lt;strong&gt;Client ID&lt;/strong&gt; fields for later reference:  &lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7m7XUrzgnR5A1OZIJdzPkd/b4c421d8f0a2c15d94fd685bea0e3b3e/settings_-_get_info.png&#34; alt=&#34;The “Application” page’s “Settings” tab. The reader is directed to copy the values of the “Domain” and “Client ID” text fields, then to scroll down the page.&#34;/&gt;&lt;/p&gt;&lt;p&gt;You’ll enter them into your Android Studio project as string resources soon.&lt;/p&gt;&lt;p&gt;🛠 Scroll down to the &lt;strong&gt;Applications URIs&lt;/strong&gt; section. This is where you provide two pieces of information that Auth0 needs to know about your app, which are:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;A &lt;strong&gt;callback URL:&lt;/strong&gt; the URL that Auth0 will redirect to after the user successfully logs in. There can be more than one of these.&lt;/li&gt;&lt;li&gt;A &lt;strong&gt;logout URL:&lt;/strong&gt; the URL that Auth0 will redirect to after the user logs out. There can be more than one of these.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;At this point, you’re probably thinking: “Wait a minute — I’m writing an &lt;em&gt;Android app&lt;/em&gt;. It doesn’t have &lt;em&gt;web pages&lt;/em&gt; that you navigate to using URLs, but &lt;em&gt;activities&lt;/em&gt; that you navigate to using &lt;em&gt;intents&lt;/em&gt;!”&lt;/p&gt;&lt;p&gt;You’re absolutely right. In the case of native applications, the callback and logout URLs are the same string, and Auth0 sends that string to your app to inform it that a user has logged in or logged out.&lt;/p&gt;&lt;p&gt;The string that Android native apps use for both the callback URL and the logout URL use this format:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;SCHEME&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;YOUR_DOMAIN&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;android&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;YOUR_APP_PACKAGE_NAME&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;callback&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 To construct the string, do the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Replace &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;SCHEME&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with &lt;code&gt;app&lt;/code&gt;. &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;SCHEME&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; is the URL’s protocol, and if you were writing a web app, this value would be &lt;code&gt;http&lt;/code&gt;, or better, &lt;code&gt;https&lt;/code&gt;. Since this is an Android native app, you can pick any string for this value. I like to use &lt;code&gt;app&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Replace &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;YOUR_DOMAIN&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with the value from the &lt;strong&gt;Domain&lt;/strong&gt; field that you saw earlier on this page.&lt;/li&gt;&lt;li&gt;Replace &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;YOUR_APP_PACKAGE_NAME&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with the package name of your Android app. If you’ve been following the example in this article, your app’s package name is &lt;code&gt;com&lt;span&gt;.&lt;/span&gt;example&lt;span&gt;.&lt;/span&gt;login&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 Enter this string into both the &lt;strong&gt;Allowed Callback URLs&lt;/strong&gt; and &lt;strong&gt;Allowed Login URLs&lt;/strong&gt; fields. Remember, it’s the same string going into both fields.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2OXT7ElyikvL8JNCO3RzFk/658591a0c5a67dc7e8499bb0ea02b7e5/settings_-_put_info.png&#34; alt=&#34;The “Application URIs” section of the page. The reader is directed to enter the callback URL into “Allowed Callback URLs” and “Allowed Logout URLs”.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 You’ve done everything you need to do on this page. Scroll down to the bottom of the page and click the &lt;strong&gt;Save changes&lt;/strong&gt; button:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3w6HT6fNOjiJPOjA5uduzt/bb290473a3ae601b70d7ce6456ac7fc4/settings_-_save_changes.png&#34; alt=&#34;The bottom of the page, which features the “Save Changes” button. An arrow directs the reader to click the button.&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Create-a-user-if-your-tenant-doesn-t-have-any&#34;&gt;Create a user if your tenant doesn’t have any&lt;/h3&gt;&lt;p&gt;If your tenant is brand new, it won’t have any user accounts, which means that there won’t be any way to log in to your app. If this is the case, follow these steps to create a user.&lt;/p&gt;&lt;p&gt;🛠 In the menu on the left side of the Auth0 dashboard, click on &lt;strong&gt;User Management&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/13qs824Uauwv78ewd682EO/6898da1b68642b10cb9c31413f358a95/user_management_menu.png&#34; alt=&#34;The bottom of the page. An arrow directs the reader to expand the “User Management” menu.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 This will expand the &lt;strong&gt;User Management&lt;/strong&gt; menu. Select the &lt;strong&gt;Users&lt;/strong&gt; item in that menu:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1tivj870qehY6oIaeDolj1/31b0544fab715b7fbded29fb63802a45/select_users_menu_item.png&#34; alt=&#34;The bottom of the page now featuring an expanded “User Management” menu. An arrow directs the reader to expand the “Users” menu item.&#34;/&gt;&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;Users&lt;/strong&gt; page will appear. It lists all the users registered to your tenant. If there are no users, you’ll see the “You don’t have any users yet” message.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1wCORw3pqSOLt65n48Qr56/7421164d02cfb112350882a4cccb4cca/click_create_user.png&#34; alt=&#34;The “Users” page. The page says, “You don’t have any users yet”. An arrow directs the reader to click the “Create User” button.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Click the &lt;strong&gt;Create User&lt;/strong&gt; button to create a new user, which will make this dialog box appear:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2s3GfTHNKRgts8lcXQJ0SH/6d6d0ca397684be75030d40bb6b94fb5/create_user_dialog.png&#34; alt=&#34;The “Create User” dialog. It has fields for email and password, as well as a drop-down menu displaying “Username-Password-Authentication”.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Enter an email address and password for the user. The only option for the &lt;strong&gt;Connection&lt;/strong&gt; will be &lt;strong&gt;Username-Password-Authentication&lt;/strong&gt;, so leave it as it is. Make a note of that email address and password — you’ll be using them to log in to the app.&lt;/p&gt;&lt;p&gt;🛠 Click the &lt;strong&gt;Create&lt;/strong&gt; button to create the user. The user’s &lt;strong&gt;Details&lt;/strong&gt; page will appear:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3TbGcAFo4e4N1coNCtHYdV/fa830264079fc661cbc683590729e4b1/user_details_page.png&#34; alt=&#34;The user’s “Details” page.&#34;/&gt;&lt;/p&gt;&lt;p&gt;That takes care of all the setup you need to do within the Auth0 dashboard. It’s time to build the app!&lt;/p&gt;&lt;h2 id=&#34;Set-Up-the-App&#34;&gt;Set Up the App&lt;/h2&gt;&lt;h3 id=&#34;Install-the-Auth0-SDK&#34;&gt;Install the Auth0 SDK&lt;/h3&gt;&lt;p&gt;The &lt;a href=&#34;https://github.com/auth0/Auth0.Android&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Android SDK&lt;/a&gt; enables Android apps to use Auth0’s APIs, including the &lt;a href=&#34;https://auth0.com/docs/api/authentication&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Authentication API&lt;/a&gt;, which you’ll use to implement login and logout in your app.&lt;/p&gt;&lt;p&gt;To install the SDK, you’ll need to perform two tasks:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Make changes to the app’s Gradle file to integrate Auth0. While you’re editing that file, you’ll also enable view binding.&lt;/li&gt;&lt;li&gt;Give the app permission to access the internet in the project’s manifest.&lt;/li&gt;&lt;/ol&gt;&lt;h4 id=&#34;Add-the-Auth0-SDK-as-a-project-dependency&#34;&gt;Add the Auth0 SDK as a project dependency&lt;/h4&gt;&lt;p&gt;🛠 Open &lt;code&gt;build&lt;span&gt;.&lt;/span&gt;gradle&lt;/code&gt; for the &lt;em&gt;app&lt;/em&gt; — it’s the file in the Project Structure menu that has the words &lt;strong&gt;Module&lt;/strong&gt; and &lt;strong&gt;app&lt;/strong&gt; in its name:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5tUS9ilXyP4KIxNqwSJZkg/bcb5c65a4d483149367211f0cbb9f63b/open_the_app_build.gradle_file.png&#34; alt=&#34;The project tree in Android Studio. An arrow points to the “build.gradle” file and instructs the reader to open it.&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Add the following line to the &lt;code&gt;defaultConfig&lt;/code&gt; block of the file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;manifestPlaceholders &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;auth0Domain&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;@string/com_auth0_domain&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; auth0Scheme&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;@string/com_auth0_scheme&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here’s what the &lt;code&gt;defaultConfig&lt;/code&gt; block should look like once you’ve added the line: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;defaultConfig &lt;span&gt;{&lt;/span&gt;&#xA;    applicationId &lt;span&gt;{&lt;/span&gt;&lt;span&gt;APPLICATION_ID_GOES_HERE&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;    minSdk &lt;span&gt;21&lt;/span&gt;&#xA;    targetSdk &lt;span&gt;31&lt;/span&gt;&#xA;    versionCode &lt;span&gt;1&lt;/span&gt;&#xA;    versionName &lt;span&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&#xA;    manifestPlaceholders &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;auth0Domain&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;@string/com_auth0_domain&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; auth0Scheme&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;@string/com_auth0_scheme&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&#xA;    testInstrumentationRunner &lt;span&gt;&amp;#34;androidx.test.runner.AndroidJUnitRunner&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Add this line to the &lt;code&gt;dependencies&lt;/code&gt; block, after all the other lines that begin with the keyword &lt;code&gt;implementation&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;implementation &lt;span&gt;&amp;#39;com.auth0.android:auth0:2.0.0&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This line tells Gradle to include version 2.0.0 of Auth0’s Android library in the application.&lt;/p&gt;&lt;p&gt;Here’s what the &lt;code&gt;dependencies&lt;/code&gt; block should look like once you’ve added the line:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;dependencies &lt;span&gt;{&lt;/span&gt;&#xA;    implementation &lt;span&gt;&amp;#39;androidx.core:core-ktx:1.6.0&amp;#39;&lt;/span&gt;&#xA;    implementation &lt;span&gt;&amp;#39;androidx.appcompat:appcompat:1.3.1&amp;#39;&lt;/span&gt;&#xA;    implementation &lt;span&gt;&amp;#39;com.google.android.material:material:1.4.0&amp;#39;&lt;/span&gt;&#xA;    implementation &lt;span&gt;&amp;#39;androidx.constraintlayout:constraintlayout:2.1.0&amp;#39;&lt;/span&gt;&#xA;    implementation &lt;span&gt;&amp;#39;com.auth0.android:auth0:2.0.0&amp;#39;&lt;/span&gt;&#xA;    testImplementation &lt;span&gt;&amp;#39;junit:junit:4.+&amp;#39;&lt;/span&gt;&#xA;    androidTestImplementation &lt;span&gt;&amp;#39;androidx.test.ext:junit:1.1.3&amp;#39;&lt;/span&gt;&#xA;    androidTestImplementation &lt;span&gt;&amp;#39;androidx.test.espresso:espresso-core:3.4.0&amp;#39;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Enable-view-binding&#34;&gt;Enable view binding&lt;/h4&gt;&lt;p&gt;Before Android Studio 3.6, if you wanted to refer to a view or widget in the user interface, you’d have to &lt;a href=&#34;https://www.tutorialkart.com/kotlin-android/access-a-view-programmatically-using-findviewbyid/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;create a new variable for every view or widget using &lt;code&gt;&lt;span&gt;findViewById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Suppose you had an &lt;code&gt;Activity&lt;/code&gt; whose layout file contains these views:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A &lt;code&gt;TextView&lt;/code&gt; whose &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;textview_instructions&lt;/code&gt;&lt;/li&gt;&lt;li&gt;An &lt;code&gt;EditText&lt;/code&gt; whose &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;edittext_input&lt;/code&gt;&lt;/li&gt;&lt;li&gt;A &lt;code&gt;Button&lt;/code&gt; whose &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;button_submit&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Here’s how you would create references to those views in code and set their &lt;code&gt;text&lt;/code&gt; properties:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// A quick example of findViewById() binding&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// Set this activity’s content to the layout specified&lt;/span&gt;&#xA;&lt;span&gt;// by activity_main.xml&lt;/span&gt;&#xA;&lt;span&gt;setContentView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;layout&lt;span&gt;.&lt;/span&gt;activity_main&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// Get references to the TextView, EditText, and Button:&lt;/span&gt;&#xA;&lt;span&gt;val&lt;/span&gt; textviewInstructions &lt;span&gt;=&lt;/span&gt; &lt;span&gt;findViewById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;.&lt;/span&gt; textview_instructions&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; TextView&#xA;&lt;span&gt;val&lt;/span&gt; edittextInput &lt;span&gt;=&lt;/span&gt; &lt;span&gt;findViewById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;.&lt;/span&gt; edittext_input&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; EditText&#xA;&lt;span&gt;val&lt;/span&gt; buttonSubmit &lt;span&gt;=&lt;/span&gt; &lt;span&gt;findViewById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;.&lt;/span&gt;button_submit&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; Button&#xA;&#xA;&lt;span&gt;// Set the widgets&amp;#39; text&lt;/span&gt;&#xA;textviewInstructions&lt;span&gt;.&lt;/span&gt;text &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Here are your instructions.&amp;#34;&lt;/span&gt;&#xA;edittextInput &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Edit this text.&amp;#34;&lt;/span&gt;&#xA;buttonSubmit &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Tap me!&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Android 3.6 introduced &lt;a href=&#34;https://medium.com/androiddevelopers/use-view-binding-to-replace-findviewbyid-c83942471fc&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;&lt;em&gt;view binding&lt;/em&gt;&lt;/strong&gt;, which generates a binding object that holds all the views in the activity&lt;/a&gt;. You no longer have to declare a variable for each view or widget because all the views and widgets in the activity are now properties of the binding object.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// A quick example of view binding&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// Bind this activity to the layout and create a binding object&lt;/span&gt;&#xA;&lt;span&gt;// that gives us access to all its views&lt;/span&gt;&#xA;binding &lt;span&gt;=&lt;/span&gt; ActivityMainBinding&lt;span&gt;.&lt;/span&gt;&lt;span&gt;inflate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;layoutInflater&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;setContentView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;binding&lt;span&gt;.&lt;/span&gt;root&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// Set the widgets&amp;#39; text&lt;/span&gt;&#xA;binding&lt;span&gt;.&lt;/span&gt;textviewInstructions&lt;span&gt;.&lt;/span&gt;text &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Here are your instructions.&amp;#34;&lt;/span&gt;&#xA;binding&lt;span&gt;.&lt;/span&gt;edittextInput &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Edit this text.&amp;#34;&lt;/span&gt;&#xA;binding&lt;span&gt;.&lt;/span&gt;buttonSubmit &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Tap me!&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that the system automatically converts the names of controls in the layout file, which use &lt;code&gt;snake_case&lt;/code&gt;, into &lt;code&gt;binding&lt;/code&gt; property names, which use &lt;code&gt;camelCase&lt;/code&gt;. For example, the control whose &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;button_submit&lt;/code&gt; in the layout file has a corresponding &lt;code&gt;binding&lt;/code&gt; property named &lt;code&gt;buttonSubmit&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Now that you’ve been introduced to view binding let’s enable it.&lt;/p&gt;&lt;p&gt;🛠 Add this &lt;code&gt;buildFeatures&lt;/code&gt; block to the &lt;code&gt;android&lt;/code&gt; block in the app’s &lt;code&gt;build&lt;span&gt;.&lt;/span&gt;gradle&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;buildFeatures &lt;span&gt;{&lt;/span&gt;&#xA;    viewBinding &lt;span&gt;true&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here’s what the &lt;code&gt;android&lt;/code&gt; block should look like once you’ve added the &lt;code&gt;buildFeatures&lt;/code&gt; block:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;android &lt;span&gt;{&lt;/span&gt;&#xA;    compileSdk &lt;span&gt;31&lt;/span&gt;&#xA;&#xA;    defaultConfig &lt;span&gt;{&lt;/span&gt;&#xA;        applicationId &lt;span&gt;&amp;#34;com.example.myapplicationx&amp;#34;&lt;/span&gt;&#xA;        minSdk &lt;span&gt;21&lt;/span&gt;&#xA;        targetSdk &lt;span&gt;31&lt;/span&gt;&#xA;        versionCode &lt;span&gt;1&lt;/span&gt;&#xA;        versionName &lt;span&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&#xA;        manifestPlaceholders &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;auth0Domain&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;@string/com_auth0_domain&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; auth0Scheme&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;@string/com_auth0_scheme&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&#xA;        testInstrumentationRunner &lt;span&gt;&amp;#34;androidx.test.runner.AndroidJUnitRunner&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    buildTypes &lt;span&gt;{&lt;/span&gt;&#xA;        release &lt;span&gt;{&lt;/span&gt;&#xA;            minifyEnabled &lt;span&gt;false&lt;/span&gt;&#xA;            proguardFiles &lt;span&gt;getDefaultProguardFile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;proguard-android-optimize.txt&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;proguard-rules.pro&amp;#39;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    compileOptions &lt;span&gt;{&lt;/span&gt;&#xA;        sourceCompatibility JavaVersion&lt;span&gt;.&lt;/span&gt;&lt;span&gt;VERSION_1_8&lt;/span&gt;&#xA;        targetCompatibility JavaVersion&lt;span&gt;.&lt;/span&gt;&lt;span&gt;VERSION_1_8&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    kotlinOptions &lt;span&gt;{&lt;/span&gt;&#xA;        jvmTarget &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;1.8&amp;#39;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    buildFeatures &lt;span&gt;{&lt;/span&gt;&#xA;        viewBinding &lt;span&gt;true&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Synchronize-the-project-with-the-updated-Gradle-file&#34;&gt;Synchronize the project with the updated Gradle file&lt;/h4&gt;&lt;p&gt;After making these changes to the Gradle file, you’ll need to synchronize the project with the new build configuration you defined. Android Studio will notify you that it detected the changes to the Gradle file and present you with the option to synchronize the project with the updated file.&lt;/p&gt;&lt;p&gt;🛠 Click the &lt;strong&gt;Sync Now&lt;/strong&gt; link that appears in the notification near the top of the Android Studio window:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7MfBWjCw726wDkiyg4PVyO/986c835490dbebb3fb26fd67dd5ac6ec/click_sync_now.png&#34; alt=&#34;The code window for the “build.gradle” file. A notification bar at the top of the window says, “Gradle files have changed since last project sync.&#34;/&gt;&lt;/p&gt;&lt;h4 id=&#34;Give-the-app-permission-to-access-the-internet&#34;&gt;Give the app permission to access the internet&lt;/h4&gt;&lt;p&gt;🛠 Open the Android manifest file, &lt;code&gt;AndroidManifest&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt;, located in the &lt;code&gt;app&lt;span&gt;/&lt;/span&gt;manifests&lt;/code&gt; folder, and add the XML element below as a child of the &lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;manifest&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; element:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;uses&lt;span&gt;-&lt;/span&gt;permission android&lt;span&gt;:&lt;/span&gt;name&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;android.permission.INTERNET&amp;#34;&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This line grants your app the permission to perform network operations, which will allow it to contact Auth0 and make use of its Authentication API.&lt;/p&gt;&lt;p&gt;Here’s what &lt;code&gt;AndroidManifest&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; should look like once you’ve added the XML element:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- AndroidManifest.xml --&amp;gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;manifest&lt;/span&gt; &lt;span&gt;&lt;span&gt;xmlns:&lt;/span&gt;android&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;http://schemas.android.com/apk/res/android&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;package&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;com.example.login&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;uses-permission&lt;/span&gt; &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;android.permission.INTERNET&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;application&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;allowBackup&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;true&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;icon&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@mipmap/ic_launcher&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;label&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@string/app_name&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;roundIcon&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@mipmap/ic_launcher_round&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;supportsRtl&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;true&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;theme&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@style/Theme.Login&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;activity&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;.MainActivity&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;exported&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;true&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;intent-filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;action&lt;/span&gt; &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;android.intent.action.MAIN&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;                &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;category&lt;/span&gt; &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;android.intent.category.LAUNCHER&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;intent-filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;activity&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;application&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;manifest&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Update-the-project-s-string-resource-file&#34;&gt;Update the project’s string resource file&lt;/h3&gt;&lt;p&gt;We’re going to follow the Android recommended practice and put all the string literals used by the app in &lt;a href=&#34;https://developer.android.com/guide/topics/resources/string-resource&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;string resource&lt;/a&gt; files.&lt;/p&gt;&lt;p&gt;By default, new Android projects come with a file located in &lt;code&gt;&lt;span&gt;/&lt;/span&gt;app&lt;span&gt;/&lt;/span&gt;res&lt;span&gt;/&lt;/span&gt;values&lt;span&gt;/&lt;/span&gt;&lt;/code&gt; named &lt;code&gt;strings&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt;. While resource files can contain resouces of any type, the convention is to use &lt;code&gt;strings&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; for strings only. Let’s put the non-sensitive strings into that file.&lt;/p&gt;&lt;p&gt;🛠 Open &lt;code&gt;strings&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt;. It should contain the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- strings.xml --&amp;gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;app_name&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;{APP_NAME}&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Instead of &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;APP_NAME&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;, you’ll see the name that you assigned to your app when you first created the project.&lt;/p&gt;&lt;p&gt;🛠 Replace the contents of &lt;code&gt;strings&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; with the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- strings.xml --&amp;gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;app_name&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;{APP_NAME}&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&amp;lt;!--&#xA;    Auth0 identifiers and settings&#xA;    ==============================&#xA;    --&amp;gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&amp;lt;!-- Identifiers --&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;com_auth0_scheme&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;app&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&amp;lt;!-- Settings --&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;login_scopes&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;openid profile email read:current_user update:current_user_metadata&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;login_audience&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;https://%1$s/api/v2/&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;&#xA;    &lt;span&gt;&amp;lt;!--&#xA;    Main activity&#xA;    =============&#xA;    --&amp;gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&amp;lt;!-- Title --&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;initial_title&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Welcome to the app!&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;logged_in_title&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;You\&amp;#39;re logged in.&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;logged_out_title&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;You\&amp;#39;re logged out.&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&amp;lt;!-- &amp;#34;Log in&amp;#34; and &amp;#34;Log out&amp;#34; buttons --&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;button_login&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Log in&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;button_logout&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Log out&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&amp;lt;!-- User profile --&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;user_profile&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        Name: %1$s\n&#xA;        Email: %2$s&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&amp;lt;!-- Metadata --&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;textview_metadata_heading&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Metadata&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;textview_metadata_info&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Use the text box and buttons below to get and set the \&amp;#39;country\&amp;#39; field in the user\&amp;#39;s metadata.&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&amp;lt;!-- &amp;#34;Get&amp;#34; and &amp;#34;Set&amp;#34; buttons --&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;button_get&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Get&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;button_set&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Set&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&amp;lt;!-- SnackBar messages--&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;login_success_message&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Successfully logged in! %1$s&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;login_failure_message&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Failed to log in. %1$s&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;general_failure_with_exception_code&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Failed - exception code: %1$s&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;general_success_message&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Success!&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Make the following replacements in the XML above:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Replace &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;APP_NAME&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with the name of your app.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Create-a-separate-string-resource-file-for-Auth0-credentials&#34;&gt;Create a separate string resource file for Auth0 credentials&lt;/h3&gt;&lt;p&gt;There are still two strings that we need to store in a resource file: the Auth0 domain and client ID that the app will use. &lt;/p&gt;&lt;p&gt;Unlike the values you’re storing in &lt;code&gt;strings&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt;, these are values that you want to keep secret and don’t want “leaked”. A common approach to dealing with is issue is to store “secret” values like these in a separate resource file so that you can limit access to them. Let’s create a new string resource file for our “secret” Auth0 values.&lt;/p&gt;&lt;p&gt;🛠 In Android Studio’s &lt;strong&gt;Project&lt;/strong&gt; pane, right-click on the &lt;code&gt;values&lt;/code&gt; folder. In the menu that appears, select &lt;strong&gt;New&lt;/strong&gt;, which will cause a sub-menu to appear. Select &lt;strong&gt;Values Resource File&lt;/strong&gt; from that sub-menu:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6g58ZVxykAAuh7hvHwtqlU/4c6289c47d6275c04df0257ffd2b78d8/creating_a_new_resource_file_1.png&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 The &lt;strong&gt;New Resource File&lt;/strong&gt; window will appear. Enter &lt;code&gt;auth0&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; into the &lt;strong&gt;File name:&lt;/strong&gt; field and click the &lt;strong&gt;OK&lt;/strong&gt; button to create a new resource file with that name:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3bfkNBq7tfwSYbPNTJ6zSR/627c9fd1aec651382fc44bc035555625/creating_a_new_resource_file_2.png&#34;/&gt;&lt;/p&gt;&lt;p&gt;🛠 Open the newly-created &lt;code&gt;auth0&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; file and enter the following into it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- auth0.xml --&amp;gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&amp;lt;!--&#xA;    Secret Auth0 identifiers and settings&#xA;    =====================================&#xA;    These values are required to connect to Auth0 for authorization,&#xA;    which is why we&amp;#39;re storing them in their own string resource file.&#xA;&#xA;    DO NOT CHECK THIS FILE INTO A PUBLIC REPOSITORY!&#xA;    --&amp;gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;com_auth0_domain&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;{DOMAIN}&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;com_auth0_client_id&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;{CLIENT_ID}&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🛠 Make the following replacements in the XML above:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Replace &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;DOMAIN&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with the domain of your app, which you copied from the &lt;strong&gt;Settings&lt;/strong&gt; page of the Auth0 dashboard.&lt;/li&gt;&lt;li&gt;Replace &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;CLIENT_ID&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with the client ID of your app, which you copied from the &lt;strong&gt;Settings&lt;/strong&gt; page of the Auth0 dashboard.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Define-the-app-s-user-interface&#34;&gt;Define the app’s user interface&lt;/h3&gt;&lt;p&gt;It’s time to define the app’s user interface. This is a single-screen app, so everything takes place in the Main Activity file, whose layout is defined in the &lt;code&gt;activity_main&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; file located in the &lt;code&gt;app&lt;span&gt;/&lt;/span&gt;res&lt;span&gt;/&lt;/span&gt;layout&lt;/code&gt; folder.&lt;/p&gt;&lt;p&gt;🛠 Open &lt;code&gt;activity_main&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt;, switch to the code view and replace the children of the &lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;androidx&lt;span&gt;.&lt;/span&gt;constraintlayout&lt;span&gt;.&lt;/span&gt;widget&lt;span&gt;.&lt;/span&gt;ConstraintLayout&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; tag with the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- activity_main.xml --&amp;gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;androidx.constraintlayout.widget.ConstraintLayout&lt;/span&gt; &lt;span&gt;&lt;span&gt;xmlns:&lt;/span&gt;android&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;http://schemas.android.com/apk/res/android&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;xmlns:&lt;/span&gt;app&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;http://schemas.android.com/apk/res-auto&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;xmlns:&lt;/span&gt;tools&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;http://schemas.android.com/tools&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;match_parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;match_parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;tools:&lt;/span&gt;context&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;.MainActivity&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;ScrollView&lt;/span&gt; &lt;span&gt;&lt;span&gt;xmlns:&lt;/span&gt;android&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;http://schemas.android.com/apk/res/android&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;fill_parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;fill_parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;tools:&lt;/span&gt;ignore&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;MissingConstraints&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;LinearLayout&lt;/span&gt; &lt;span&gt;&lt;span&gt;xmlns:&lt;/span&gt;android&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;http://schemas.android.com/apk/res/android&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;orientation&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;vertical&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;match_parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;match_parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;gravity&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;center&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;TextView&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/textview_title&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_marginTop&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;100dp&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;text&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@string/initial_title&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;textSize&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;26sp&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintEnd_toEndOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintTop_toTopOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Button&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/button_login&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;200dp&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_marginTop&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;36dp&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;text&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@string/button_login&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintEnd_toEndOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/textview_title&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/textview_title&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintTop_toBottomOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/textview_title&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Button&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/button_logout&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;200dp&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;text&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@string/button_logout&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;enabled&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;false&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintEnd_toEndOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/textview_title&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/textview_title&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintTop_toBottomOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/button_login&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;TextView&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/textview_user_profile&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintEnd_toEndOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintTop_toBottomOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@id/button_logout&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_margin&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;18dp&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;LinearLayout&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/linearlayout_metadata&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;visibility&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;invisible&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;orientation&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;vertical&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;gravity&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;center&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_marginTop&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;16dp&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintEnd_toEndOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintStart_toStartOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                &lt;span&gt;&lt;span&gt;app:&lt;/span&gt;layout_constraintTop_toBottomOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@id/textview_user_profile&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;                &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;TextView&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/textview_metadata_heading&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;textStyle&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;bold&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;text&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@string/textview_metadata_heading&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;                &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;TextView&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/textview_metadata_info&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;match_parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;50dp&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_margin&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;8dp&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;textAlignment&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;center&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;text&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@string/textview_metadata_info&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;textSize&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;12sp&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;                &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;EditText&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/edittext_country&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;match_parent&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;hint&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;Enter country&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;                &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;LinearLayout&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;orientation&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;horizontal&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;gravity&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;center&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;                    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Button&lt;/span&gt;&#xA;                        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/button_get&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;100dp&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;text&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@string/button_get&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_marginRight&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;8dp&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;                    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Button&lt;/span&gt;&#xA;                        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@+id/button_set&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;100dp&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;wrap_content&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;text&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;@string/button_set&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;layout_marginLeft&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;8dp&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;                &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;LinearLayout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;LinearLayout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;LinearLayout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;ScrollView&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;androidx.constraintlayout.widget.ConstraintLayout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This XML above defines:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A &lt;a href=&#34;https://developer.android.com/reference/android/widget/ScrollView&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;ScrollView&lt;/code&gt;&lt;/a&gt; that encapsulates the entire user interface. It allows the user to scroll up and down when the device screen isn’t tall enough to display the entire activity at once.&lt;/li&gt;&lt;li&gt;A &lt;a href=&#34;https://developer.android.com/reference/android/widget/LinearLayout&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;LinearLayout&lt;/code&gt;&lt;/a&gt; contained within the &lt;code&gt;ScrollView&lt;/code&gt;. A &lt;code&gt;ScrollView&lt;/code&gt; can contain only one child, so we’re using the &lt;code&gt;LinearLayout&lt;/code&gt; to encapsulate all the views in the &lt;code&gt;ScrollView&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;textview_title&lt;/code&gt;: A &lt;a href=&#34;https://developer.android.com/reference/android/widget/TextView&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;TextView&lt;/code&gt;&lt;/a&gt; that displays a greeting message when the app launches and the user’s logged-in/out status afterward.&lt;/li&gt;&lt;li&gt;&lt;code&gt;button_login&lt;/code&gt; and &lt;code&gt;button_logout&lt;/code&gt;: The &lt;a href=&#34;https://developer.android.com/reference/android/widget/Button&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;Button&lt;/code&gt;&lt;/a&gt;s that the user taps to log in and out.&lt;/li&gt;&lt;li&gt;&lt;code&gt;textview_user_profile&lt;/code&gt;: A &lt;code&gt;TextView&lt;/code&gt; that displays the name and email of the logged-in user.&lt;/li&gt;&lt;li&gt;&lt;code&gt;layout_metadata&lt;/code&gt;: A &lt;code&gt;LinearLayout&lt;/code&gt; that encapsulates all the metadata-related controls.&lt;/li&gt;&lt;li&gt;&lt;code&gt;textview_metadata_heading&lt;/code&gt;: A &lt;code&gt;TextView&lt;/code&gt; that displays the heading of the metadata section.&lt;/li&gt;&lt;li&gt;&lt;code&gt;textview_metadata_country&lt;/code&gt;: A &lt;code&gt;TextView&lt;/code&gt; that instructions for editing the user’s country.&lt;/li&gt;&lt;li&gt;&lt;code&gt;edittext_country&lt;/code&gt;: An &lt;a href=&#34;https://developer.android.com/reference/android/widget/EditText&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;EditText&lt;/code&gt;&lt;/a&gt; for displaying and editing the user’s country.&lt;/li&gt;&lt;li&gt;&lt;code&gt;button_get&lt;/code&gt; and &lt;code&gt;button_set&lt;/code&gt;: The &lt;code&gt;Button&lt;/code&gt;s to get and set the user’s country.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Here’s the “blueprint view” of the resulting layout. I’ve labeled the controls in the layout with their &lt;code&gt;id&lt;/code&gt;s:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4DF79VdhoNlyAKOKkmQOsa/f280540a8f0d8484ab55a08ac83c3c5a/app_layout.png&#34; alt=&#34;“Blueprint view” of the app’s main activity layout showing the ids of its controls.&#34;/&gt;&lt;/p&gt;&lt;p&gt;At this point in the exercise, you’ve completed all the setup. You’ve registered the app with Auth0 and set up the app’s build files and user interface. In the next step, you’ll write the app’s code!&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-2&#34; target=&#34;_blank&#34; rel=&#34;noopener referrer&#34;&gt;Next Step: Read the second part here&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://community.auth0.com/t/developing-a-secure-api-with-nestjs/33026&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;I ran into an issue&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-1/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to implement login, logout, and user profiles in Android apps using Kotlin and Auth0.</summary>
  </entry>
  <entry>
    <title>Get Started with Android Authentication Using Kotlin: Part 2</title>
    <updated>2021-09-20T18:29:00Z</updated>
    <id>tag:auth0.com,2021-09-20:/blog/get-started-with-android-authentication-using-kotlin-part-2/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;In the previous section, you started an Android project that uses Auth0 for user login, logout, and reading and updating user metadata. You set up the project on both the Auth0 and app sides. In this section, you’ll complete the project and update it to ensure that it works in both portrait and landscape orientations.&lt;/p&gt;&lt;h2 id=&#34;Write-the-code&#34;&gt;Write the code&lt;/h2&gt;&lt;p&gt;Everything you’ve done so far in this exercise is just a preamble. It’s now time to write the actual code! This is the biggest task in the exercise, so let’s do it in small steps.​&lt;/p&gt;&lt;p&gt;🛠 Move to the &lt;code&gt;app&lt;span&gt;/&lt;/span&gt;java&lt;span&gt;/&lt;/span&gt;com&lt;span&gt;.&lt;/span&gt;example&lt;span&gt;.&lt;/span&gt;login&lt;/code&gt; folder and open the main activity’s file, &lt;code&gt;MainActivity&lt;span&gt;.&lt;/span&gt;kt&lt;/code&gt;. Its contents should look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;example&lt;span&gt;.&lt;/span&gt;myapplication&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; androidx&lt;span&gt;.&lt;/span&gt;appcompat&lt;span&gt;.&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;AppCompatActivity&#xA;&lt;span&gt;import&lt;/span&gt; android&lt;span&gt;.&lt;/span&gt;os&lt;span&gt;.&lt;/span&gt;Bundle&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; MainActivity &lt;span&gt;:&lt;/span&gt; &lt;span&gt;AppCompatActivity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;savedInstanceState&lt;span&gt;:&lt;/span&gt; Bundle&lt;span&gt;?&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;savedInstanceState&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;setContentView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;layout&lt;span&gt;.&lt;/span&gt;activity_main&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Import-the-necessary-libraries&#34;&gt;Import the necessary libraries&lt;/h3&gt;&lt;p&gt;🛠 Add the following &lt;code&gt;&lt;span&gt;import&lt;/span&gt;&lt;/code&gt; statements to the ones already in the file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; androidx&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;view&lt;span&gt;.&lt;/span&gt;isVisible&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;Auth0&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;authentication&lt;span&gt;.&lt;/span&gt;AuthenticationAPIClient&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;authentication&lt;span&gt;.&lt;/span&gt;AuthenticationException&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;callback&lt;span&gt;.&lt;/span&gt;Callback&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;management&lt;span&gt;.&lt;/span&gt;ManagementException&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;management&lt;span&gt;.&lt;/span&gt;UsersAPIClient&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;provider&lt;span&gt;.&lt;/span&gt;WebAuthProvider&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;result&lt;span&gt;.&lt;/span&gt;Credentials&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;result&lt;span&gt;.&lt;/span&gt;UserProfile&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;google&lt;span&gt;.&lt;/span&gt;android&lt;span&gt;.&lt;/span&gt;material&lt;span&gt;.&lt;/span&gt;snackbar&lt;span&gt;.&lt;/span&gt;Snackbar&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Most of these &lt;code&gt;&lt;span&gt;import&lt;/span&gt;&lt;/code&gt; statements import classes from Auth0’s libraries. Here’s what those classes do:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;AuthenticationAPIClient&lt;/code&gt;: Accesses the Auth0 Authentication API. The app uses this to retrieve the user’s profile information.&lt;/li&gt;&lt;li&gt;&lt;code&gt;AuthenticationException&lt;/code&gt;: Defines errors and exceptions that may arise during authentication.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Callback&lt;/code&gt;: Defines an object containing “success” and “failure” callback functions that Auth0 should call after completing an API function.&lt;/li&gt;&lt;li&gt;&lt;code&gt;ManagementException&lt;/code&gt;: Defines errors and exceptions that &lt;code&gt;Callback&lt;/code&gt; objects may have to handle.&lt;/li&gt;&lt;li&gt;&lt;code&gt;UsersAPIClient&lt;/code&gt;: Manages user information. The app uses this to retrieve the user’s profile information.&lt;/li&gt;&lt;li&gt;&lt;code&gt;WebAuthProvider&lt;/code&gt;: Provides Auth0’s web page-based login to the app. The app uses this to log the user in via a login page in a web browser and log the user out.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Credentials&lt;/code&gt;: Stores the user’s credentials, including ID, access, and refresh tokens.&lt;/li&gt;&lt;li&gt;&lt;code&gt;UserProfile&lt;/code&gt;: Stores the user’s profile information, including their user ID, names, email address, and metadata.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🛠 You’ll also need to import the &lt;code&gt;Activity&lt;/code&gt; ’s auto-generated view binding library, which will make it possible for your code to reference views in the layout (or, to put it more simply: access the onscreen widgets). Do this by adding the following &lt;code&gt;&lt;span&gt;import&lt;/span&gt;&lt;/code&gt; statement, replacing &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;YOUR_PACKAGE_NAME_HERE&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with the name of your app’s package, which you’ll find on the first line of the file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;YOUR_PACKAGE_NAME_HERE&lt;span&gt;}&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;databinding&lt;span&gt;.&lt;/span&gt;ActivityMainBinding&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The package name for my app is &lt;code&gt;com&lt;span&gt;.&lt;/span&gt;example&lt;span&gt;.&lt;/span&gt;login&lt;/code&gt;, so my &lt;code&gt;&lt;span&gt;import&lt;/span&gt;&lt;/code&gt; statement looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;example&lt;span&gt;.&lt;/span&gt;login&lt;span&gt;.&lt;/span&gt;databinding&lt;span&gt;.&lt;/span&gt;ActivityMainBinding&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Add-class-properties&#34;&gt;Add class properties&lt;/h3&gt;&lt;p&gt;🛠 Add the following properties to &lt;code&gt;MainActivity&lt;/code&gt; so that the start of the class looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;class&lt;/span&gt; MainActivity &lt;span&gt;:&lt;/span&gt; &lt;span&gt;AppCompatActivity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;lateinit&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; binding&lt;span&gt;:&lt;/span&gt; ActivityMainBinding&#xA;&#xA;    &lt;span&gt;// Login/logout-related properties&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;lateinit&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; account&lt;span&gt;:&lt;/span&gt; Auth0&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; cachedCredentials&lt;span&gt;:&lt;/span&gt; Credentials&lt;span&gt;?&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; cachedUserProfile&lt;span&gt;:&lt;/span&gt; UserProfile&lt;span&gt;?&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&#xA;&#xA;&#xA;    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;savedInstanceState&lt;span&gt;:&lt;/span&gt; Bundle&lt;span&gt;?&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;..&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You’ll use the first property, &lt;code&gt;binding&lt;/code&gt;, to access the widgets on the screen. The other three properties are related to logging in and out and are described in more detail below:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;account&lt;/code&gt;: represents the app’s Auth0 account and is instantiated using the app’s client ID and the domain for the app’s Auth0 tenant. Let me make this clear: this isn’t the account of the user trying to log in, but the account of the developer or organization who is delegating the login/logout process to Auth0. In the case of this example, it’s &lt;em&gt;your&lt;/em&gt; Auth0 developer account. &lt;code&gt;account&lt;/code&gt;’s value is set in &lt;code&gt;&lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; when the activity is instantiated.&lt;/li&gt;&lt;li&gt;&lt;code&gt;cachedCredentials&lt;/code&gt;: contains the user’s credentials that are returned from Auth0 after a successful login. Its value should be &lt;code&gt;&lt;span&gt;null&lt;/span&gt;&lt;/code&gt; when the user is &lt;em&gt;not&lt;/em&gt; logged in. When the user is logged in, it should reference an instance of &lt;code&gt;Credentials&lt;/code&gt;. A &lt;code&gt;Credentials&lt;/code&gt; instance has the following properties:&#xA;  &lt;ul&gt;&lt;li&gt;&lt;code&gt;idToken&lt;/code&gt;: The &lt;a href=&#34;https://auth0.com/docs/tokens/id-tokens&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ID token&lt;/a&gt;, which contains user information that the app can use to customize the user’s experience.&lt;/li&gt;&lt;li&gt;&lt;code&gt;accessToken&lt;/code&gt;: The &lt;a href=&#34;https://auth0.com/docs/tokens/access-tokens&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;access token&lt;/a&gt;, which is a credential that allows the app to access the Auth0 API.&lt;/li&gt;&lt;li&gt;&lt;code&gt;refreshToken&lt;/code&gt;: The &lt;a href=&#34;https://auth0.com/docs/tokens/refresh-tokens&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;refresh token&lt;/a&gt;, which can be used to request a new access token when the original access token expires, without requiring the user to re-authenticate.&lt;/li&gt;&lt;li&gt;&lt;code&gt;type&lt;/code&gt;: The type of the received access token.&lt;/li&gt;&lt;li&gt;&lt;code&gt;expiresAt&lt;/code&gt;: The date/time when the received access token expires.&lt;/li&gt;&lt;li&gt;&lt;code&gt;scope&lt;/code&gt;: The scopes granted to the access token. I’ll explain what scopes are in the next section, &lt;em&gt;The login method&lt;/em&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;cachedUserProfile&lt;/code&gt;: holds the user’s profile information. Its value should be &lt;code&gt;&lt;span&gt;null&lt;/span&gt;&lt;/code&gt; when the user is &lt;em&gt;not&lt;/em&gt; logged in. When the user is logged in, it should reference an instance of &lt;code&gt;UserProfile&lt;/code&gt;. A &lt;code&gt;UserProfile&lt;/code&gt; instance has the following properties:&#xA;&lt;ul&gt;&lt;li&gt;&lt;code&gt;email&lt;/code&gt;: The email address corresponding to the user account.&lt;/li&gt;&lt;li&gt;&lt;code&gt;isEmailVerified&lt;/code&gt;: &lt;code&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt; if the user responded to the verification email sent by Auth0 after they registered themselves as a user.&lt;/li&gt;&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: The user’s full name.&lt;/li&gt;&lt;li&gt;&lt;code&gt;givenName&lt;/code&gt;: The user’s given name, often referred to as their “first name” or “forename”.&lt;/li&gt;&lt;li&gt;&lt;code&gt;familyName&lt;/code&gt;: The user’s family name, often referred to as their “last name” or “surname”.&lt;/li&gt;&lt;li&gt;&lt;code&gt;nickname&lt;/code&gt;: The user’s nickname, sometimes referred to as thier “familiar name” or “moniker”.&lt;/li&gt;&lt;li&gt;&lt;code&gt;PictureURL&lt;/code&gt;: The URL where the user’s picture can be retrieved.&lt;/li&gt;&lt;li&gt;&lt;code&gt;createdAt&lt;/code&gt;: The creation date and time of the user’s account.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Update-the--onCreate----method&#34;&gt;Update the &lt;code&gt;&lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method&lt;/h3&gt;&lt;p&gt;First, let’s fill out the &lt;code&gt;&lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method that was automatically generated for the project and use it to initialize everything in the activity.&lt;/p&gt;&lt;p&gt;🛠 Update the &lt;code&gt;&lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method so that it looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;savedInstanceState&lt;span&gt;:&lt;/span&gt; Bundle&lt;span&gt;?&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;savedInstanceState&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    account &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Auth0&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;com_auth0_client_id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;com_auth0_domain&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    binding &lt;span&gt;=&lt;/span&gt; ActivityMainBinding&lt;span&gt;.&lt;/span&gt;&lt;span&gt;inflate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;layoutInflater&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;setContentView&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;binding&lt;span&gt;.&lt;/span&gt;root&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    binding&lt;span&gt;.&lt;/span&gt;buttonLogin&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setOnClickListener&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    binding&lt;span&gt;.&lt;/span&gt;buttonLogout&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setOnClickListener&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    binding&lt;span&gt;.&lt;/span&gt;buttonGet&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setOnClickListener&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    binding&lt;span&gt;.&lt;/span&gt;buttonSet&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setOnClickListener&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;setUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This method:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Defines the account object, which contains the necessary credentials to connect to your Auth0 account.&lt;/li&gt;&lt;li&gt;Creates a view binding object, which you’ll use to access the onscreen widgets.&lt;/li&gt;&lt;li&gt;Connects the &lt;strong&gt;Log in&lt;/strong&gt;, &lt;strong&gt;Log out&lt;/strong&gt;, &lt;strong&gt;Get&lt;/strong&gt;, and &lt;strong&gt;Set&lt;/strong&gt; buttons to the methods they should call when tapped.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Add-the--login----method&#34;&gt;Add the &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method&lt;/h3&gt;&lt;p&gt;The next step is to implement the method that gets called when the user taps the &lt;strong&gt;Log In&lt;/strong&gt; button.&lt;/p&gt;&lt;p&gt;🛠 Add this to the class after &lt;code&gt;&lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    WebAuthProvider&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;account&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withScheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;com_auth0_scheme&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withScope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;login_scopes&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withAudience&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;login_audience&lt;span&gt;,&lt;/span&gt; &lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;com_auth0_domain&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; Callback&lt;span&gt;&amp;lt;&lt;/span&gt;Credentials&lt;span&gt;,&lt;/span&gt; AuthenticationException&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;exception&lt;span&gt;:&lt;/span&gt; AuthenticationException&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;login_failure_message&lt;span&gt;,&lt;/span&gt; exception&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;credentials&lt;span&gt;:&lt;/span&gt; Credentials&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                cachedCredentials &lt;span&gt;=&lt;/span&gt; credentials&#xA;                &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;login_success_message&lt;span&gt;,&lt;/span&gt; credentials&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;                &lt;span&gt;updateUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;                &lt;span&gt;showUserProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; uses the Auth0 SDK’s &lt;code&gt;WebAuthProvider&lt;/code&gt; class, which gives the app the ability to use Auth0’s authentication service. The &lt;code&gt;WebAuthProvider&lt;/code&gt; methods that you’ll use most often are its &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; methods.&lt;/p&gt;&lt;p&gt;Although this method is formatted to span several lines, it’s just a single line of code. The single line is made of a call to a chain of &lt;code&gt;WebAuthProvider&lt;/code&gt; ’s methods starting with &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;. If you ignore all the comments and parameters, the method chain looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;WebAuthProvider&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withScheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withScope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withAudience&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is the &lt;a href=&#34;https://www.baeldung.com/kotlin/builder-pattern&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Builder design pattern&lt;/a&gt; in action. From &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span&gt;withAudience&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, each method in the chain takes an argument that provides additional information about the login, using that information to creates a &lt;code&gt;WebAuthProvider&lt;/code&gt; object that it passes to the next method in the chain. The final method in the chain, &lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, takes the resulting &lt;code&gt;WebAuthProvider&lt;/code&gt; object as its argument and uses it to display the login page and define what should happen when the login succeeds and when it fails.&lt;/p&gt;&lt;p&gt;Let’s take a look at what each of the methods in the chain does.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; initiates the login process and specifies the Auth0 account used by the application.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;withScheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; specifies the scheme to use for the URL that Auth0 redirects to after a successful login. For web apps, the scheme is &lt;code&gt;http&lt;/code&gt; or &lt;code&gt;https&lt;/code&gt;. This value is arbitrary for native mobile apps, so we use &lt;code&gt;app&lt;/code&gt; to make it clear to other developers and other people who may use the Auth0 settings for this app that the redirect is &lt;em&gt;not&lt;/em&gt; to a web page.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;withScope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; specifies which sets of user data the app is authorized to use if the user logs in successfully. The OpenID Connect and OAuth frameworks, on which Auth0’s authentication and authorization are based, use the term &lt;a href=&#34;https://auth0.com/docs/scopes/openid-connect-scopes&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;scope&lt;/em&gt;&lt;/a&gt; to represent the authorization to access user’s data and resources. The method takes a space-delimited string as its argument, where each “word” in the string specifies a different scope. The string used in this app contains these scopes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;openid&lt;/code&gt;: Indicates that application that uses OpenID Connect for authentication. This is the only required scope; all other scopes are optional.&lt;/li&gt;&lt;li&gt;&lt;code&gt;profile&lt;/code&gt;: Authorizes the application to access basic user profile information, including first name, surname, nickname, their photo or avatar, and so on.&lt;/li&gt;&lt;li&gt;&lt;code&gt;email&lt;/code&gt;: Authorizes the application to access the user’s email address.&lt;/li&gt;&lt;li&gt;&lt;code&gt;read&lt;span&gt;:&lt;/span&gt;current_user&lt;/code&gt;: Authorizes the application with read-only access to the &lt;code&gt;current_user&lt;/code&gt; claim.&lt;/li&gt;&lt;li&gt;&lt;code&gt;update&lt;span&gt;:&lt;/span&gt;current_user_metadata&lt;/code&gt;: Authorizes the application with read and write  access to the &lt;code&gt;current_user_metadata&lt;/code&gt; claim. This scope allows us to get and set the &lt;code&gt;country&lt;/code&gt; value in the user’s metadata.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;withAudience&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; specifies the URL that the app will use to connect to Auth0’s login service. This URL is constructed using the domain of the Auth0 tenant used by the app and the endpoint for the Auth0 authentication API.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; takes the &lt;code&gt;WebAuthProvider&lt;/code&gt; object constructed by all the previous methods in the chain and opens the browser window to display the login page. It takes two parameters: a context (a reference to the &lt;code&gt;Activity&lt;/code&gt; that’s initiating the browser window) and an anonymous object with two callback methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;onFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;: Defines what should happen if the user returns from the browser login screen without successfully logging in. This typically happens when the user closes the browser login screen or taps the “back” button while on that screen. The app displays a &lt;code&gt;SnackBar&lt;/code&gt; that notifies the user that login failed, followed by an error code.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;: Defines what should happen if the user returns from the browser login screen after successfully logging in. The app processes the successful response, displays a &lt;code&gt;SnackBar&lt;/code&gt; notifying the user that login was successful, and updates the UI to its “logged in” state.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Add-the--logout----method&#34;&gt;Add the &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method&lt;/h3&gt;&lt;p&gt;You’ve probably guessed that if there’s a &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method that’s called when the user presses the &lt;strong&gt;Log In&lt;/strong&gt; button, there must also be a &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method that’s called when the user presses the &lt;strong&gt;Log Out&lt;/strong&gt; button.&lt;/p&gt;&lt;p&gt;🛠 Add this method to the class after &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    WebAuthProvider&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;account&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withScheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;com_auth0_scheme&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; Callback&lt;span&gt;&amp;lt;&lt;/span&gt;Void&lt;span&gt;?&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; AuthenticationException&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;exception&lt;span&gt;:&lt;/span&gt; AuthenticationException&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;updateUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;                &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;general_failure_with_exception_code&lt;span&gt;,&lt;/span&gt;&#xA;                    exception&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;payload&lt;span&gt;:&lt;/span&gt; Void&lt;span&gt;?&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                cachedCredentials &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&#xA;                cachedUserProfile &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&#xA;                &lt;span&gt;updateUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As with &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; also uses the Auth0 SDK’s &lt;code&gt;WebAuthProvider&lt;/code&gt; class and is a one-liner that uses the Builder pattern. This time, that one line calls a shorter chain of &lt;code&gt;WebAuthProvider&lt;/code&gt; ’s methods starting with &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;. If you ignore all the parameters, the method chain looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;WebAuthProvider&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withScheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; initiates the logout process and specifies the Auth0 account used by the application, which should be the same account as the one used to log in.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;withScheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; specifies the scheme to use for the URL that Auth0 redirects to after successful logout. This should be the same scheme as the one used to log in.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; takes the &lt;code&gt;WebAuthProvider&lt;/code&gt; object constructed by all the previous methods in the chain to log the user out. It takes two parameters: a context (a reference to the &lt;code&gt;Activity&lt;/code&gt; that’s initiating the logout process) and an anonymous object with two callback methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;onFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;: Defines what should happen when the logout process fails. This rarely happens and usually indicates a network or server issue. In this example, the app updates the UI (which remains in the “logged in” state) and displays a &lt;code&gt;SnackBar&lt;/code&gt; that notifies the user that logout failed, followed by an error code.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;: Defines what should happen when the logout process succeeds. In this example, the app destroys its local copies of the user’s credentials and profile and updates the UI to its “logged out” state.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Add-the--showUserProfile----method&#34;&gt;Add the &lt;code&gt;&lt;span&gt;showUserProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method&lt;/h3&gt;&lt;p&gt;Every Auth0 user has a &lt;em&gt;user profile&lt;/em&gt; associated with their account. The user profile contains the following basic information about the user:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Names: The user’s full name, given name, surname, and nickname&lt;/li&gt;&lt;li&gt;Email info: The user’s email address, and whether it was verified&lt;/li&gt;&lt;li&gt;Picture: The location of an image that identifies the user&lt;/li&gt;&lt;li&gt;Creation date: The date and time when the user’s account was created&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;When the user successfully logs in, the app should display their name and email onscreen. It does so by calling &lt;code&gt;&lt;span&gt;showUserProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; immediately after a successful login.&lt;/p&gt;&lt;p&gt;🛠 Add this method to the class after &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;showUserProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// Guard against showing the profile when no user is logged in&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;cachedCredentials &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;val&lt;/span&gt; client &lt;span&gt;=&lt;/span&gt; &lt;span&gt;AuthenticationAPIClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;account&lt;span&gt;)&lt;/span&gt;&#xA;    client&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;userInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;cachedCredentials&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;object&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; Callback&lt;span&gt;&amp;lt;&lt;/span&gt;UserProfile&lt;span&gt;,&lt;/span&gt; AuthenticationException&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;exception&lt;span&gt;:&lt;/span&gt; AuthenticationException&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;general_failure_with_exception_code&lt;span&gt;,&lt;/span&gt;&#xA;                    exception&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;profile&lt;span&gt;:&lt;/span&gt; UserProfile&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                cachedUserProfile &lt;span&gt;=&lt;/span&gt; profile&#xA;                &lt;span&gt;updateUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This method is the final task performed by the &lt;code&gt;&lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; callback method in  &lt;code&gt;&lt;span&gt;loginWithBrowser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;. It initializes the &lt;code&gt;cachedUserProfile&lt;/code&gt; property, which contains the user’s profile information.&lt;/p&gt;&lt;p&gt;As a precaution, it returns immediately if the &lt;code&gt;cachedCredentials&lt;/code&gt; property is &lt;code&gt;&lt;span&gt;null&lt;/span&gt;&lt;/code&gt;, which implies that no user is logged in, and therefore there isn’t any user profile to show.&lt;/p&gt;&lt;p&gt;In order to get this information, it does the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;It creates an instance of &lt;code&gt;AuthenticationAPIClient&lt;/code&gt;, which retrieves Auth0 account information. Like the login and logout methods, this also uses the Builder pattern.&lt;/li&gt;&lt;li&gt;It uses &lt;code&gt;AuthenticationAPIClient&lt;/code&gt; ’s &lt;code&gt;&lt;span&gt;userInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to specify that we want to retrieve user profile information from Auth0. This method requires a valid access token, which it extracts from the &lt;code&gt;cachedCredentials&lt;/code&gt; property.&lt;/li&gt;&lt;li&gt;Finally, it defines callback methods for the cases where it failed and succeeded in retrieving the user profile information from Auth0. If the retrieval was successful, the profile information is stored in &lt;code&gt;cachedUserProfile&lt;/code&gt;, and the UI is updated to display the user’s name and email address.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Add-the--getUserMetadata----and--setUserMetadata----methods&#34;&gt;Add the &lt;code&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;setUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; methods&lt;/h3&gt;&lt;p&gt;The user profile contains information that generally applies to &lt;em&gt;every&lt;/em&gt; user account regardless of the type of application it’s being used for — name, email, photo, and date/time created. While this is necessary information, it’s probably not &lt;em&gt;all&lt;/em&gt; the user information that you want to store in their profile.&lt;/p&gt;&lt;p&gt;That what the &lt;em&gt;user metadata&lt;/em&gt; is for. Think of it as a key-value store where you can place additional user information that isn’t covered by the user profile. In this app, the user metadata will store just one additional piece of user information — their country — and it will allow the user to retrieve and update this information.&lt;/p&gt;&lt;p&gt;🛠 Add the following to the class after &lt;code&gt;&lt;span&gt;showUserProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// Guard against getting the metadata when no user is logged in&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;cachedCredentials &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;val&lt;/span&gt; usersClient &lt;span&gt;=&lt;/span&gt; &lt;span&gt;UsersAPIClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;account&lt;span&gt;,&lt;/span&gt; cachedCredentials&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    usersClient&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;getProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;cachedUserProfile&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;object&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; Callback&lt;span&gt;&amp;lt;&lt;/span&gt;UserProfile&lt;span&gt;,&lt;/span&gt; ManagementException&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;exception&lt;span&gt;:&lt;/span&gt; ManagementException&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;general_failure_with_exception_code&lt;span&gt;,&lt;/span&gt;&#xA;                    exception&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;userProfile&lt;span&gt;:&lt;/span&gt; UserProfile&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                cachedUserProfile &lt;span&gt;=&lt;/span&gt; userProfile&#xA;                &lt;span&gt;updateUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;                &lt;span&gt;val&lt;/span&gt; country &lt;span&gt;=&lt;/span&gt; userProfile&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;country&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; String&lt;span&gt;?&lt;/span&gt;&#xA;                binding&lt;span&gt;.&lt;/span&gt;edittextCountry&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setText&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;country&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;setUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// Guard against getting the metadata when no user is logged in&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;cachedCredentials &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;val&lt;/span&gt; usersClient &lt;span&gt;=&lt;/span&gt; &lt;span&gt;UsersAPIClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;account&lt;span&gt;,&lt;/span&gt; cachedCredentials&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;accessToken&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; metadata &lt;span&gt;=&lt;/span&gt; &lt;span&gt;mapOf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;country&amp;#34;&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; binding&lt;span&gt;.&lt;/span&gt;edittextCountry&lt;span&gt;.&lt;/span&gt;text&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    usersClient&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;updateMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;cachedUserProfile&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; metadata&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;object&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; Callback&lt;span&gt;&amp;lt;&lt;/span&gt;UserProfile&lt;span&gt;,&lt;/span&gt; ManagementException&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onFailure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;exception&lt;span&gt;:&lt;/span&gt; ManagementException&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;general_failure_with_exception_code&lt;span&gt;,&lt;/span&gt;&#xA;                    exception&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;profile&lt;span&gt;:&lt;/span&gt; UserProfile&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                cachedUserProfile &lt;span&gt;=&lt;/span&gt; profile&#xA;                &lt;span&gt;updateUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;                &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;general_success_message&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While &lt;code&gt;&lt;span&gt;showUserProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; uses an instance of &lt;code&gt;AuthenticationAPIClient&lt;/code&gt; to get the user profile information, &lt;code&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;setUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; use a different object type: &lt;code&gt;UsersAPIClient&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Unlike &lt;code&gt;AuthenticationAPIClient&lt;/code&gt;, which needs only an &lt;code&gt;Auth0&lt;/code&gt; account object to be instantiated, you need both an &lt;code&gt;Auth0&lt;/code&gt; account object and an access token to instantiate a &lt;code&gt;UsersAPIClient&lt;/code&gt; object.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; specifies the user profile using &lt;code&gt;UsersAPIClient&lt;/code&gt; ’s &lt;code&gt;&lt;span&gt;getProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method and the ID of the user, followed by the &lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to attempt to get the user profile and define callback methods for failure and success.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;’s &lt;code&gt;&lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; callback is almost the same as &lt;code&gt;&lt;span&gt;showUserProfile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;’s — it just has these two additional lines that extract the &lt;code&gt;country&lt;/code&gt; value from the user’s metadata and display it onscreen:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;val&lt;/span&gt; country &lt;span&gt;=&lt;/span&gt; userProfile&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;country&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; String&lt;span&gt;?&lt;/span&gt;&#xA;binding&lt;span&gt;.&lt;/span&gt;edittextCountry&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setText&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;country&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;setUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; defines a &lt;code&gt;Map&lt;/code&gt; with a single key-value pair, where the key is the string &lt;code&gt;country&lt;/code&gt; and the corresponding value is the contents of the &lt;code&gt;EditText&lt;/code&gt; where the user enters the name of their country. It then passes that &lt;code&gt;Map&lt;/code&gt; along with the user’s ID to &lt;code&gt;UsersAPIClient&lt;/code&gt; ’s &lt;code&gt;&lt;span&gt;updateMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to specify the change to be made, followed by the &lt;code&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method to initiate the update and define callback methods for failure and success.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;setUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;’s &lt;code&gt;&lt;span&gt;onSuccess&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; callback is almost the same as &lt;code&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;’s — but instead of updating the &lt;code&gt;EditText&lt;/code&gt; where the user enters the name of their country, it simply displays a &lt;code&gt;SnackBar&lt;/code&gt; notifying the user that it was successful in updating the metadata.&lt;/p&gt;&lt;h3 id=&#34;Add-the-UI-methods&#34;&gt;Add the UI methods&lt;/h3&gt;&lt;p&gt;The final step is to add the methods that present information to the user.&lt;/p&gt;&lt;p&gt;🛠 Add the following to the class after &lt;code&gt;&lt;span&gt;getUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;setUserMetadata&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;updateUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; isLoggedIn &lt;span&gt;=&lt;/span&gt; cachedCredentials &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&#xA;&#xA;    binding&lt;span&gt;.&lt;/span&gt;textviewTitle&lt;span&gt;.&lt;/span&gt;text &lt;span&gt;=&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;isLoggedIn&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;logged_in_title&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;logged_out_title&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    binding&lt;span&gt;.&lt;/span&gt;buttonLogin&lt;span&gt;.&lt;/span&gt;isEnabled &lt;span&gt;=&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;isLoggedIn&#xA;    binding&lt;span&gt;.&lt;/span&gt;buttonLogout&lt;span&gt;.&lt;/span&gt;isEnabled &lt;span&gt;=&lt;/span&gt; isLoggedIn&#xA;    binding&lt;span&gt;.&lt;/span&gt;linearlayoutMetadata&lt;span&gt;.&lt;/span&gt;isVisible &lt;span&gt;=&lt;/span&gt; isLoggedIn&#xA;&#xA;    binding&lt;span&gt;.&lt;/span&gt;textviewUserProfile&lt;span&gt;.&lt;/span&gt;isVisible &lt;span&gt;=&lt;/span&gt; isLoggedIn&#xA;&#xA;    &lt;span&gt;val&lt;/span&gt; userName &lt;span&gt;=&lt;/span&gt; cachedUserProfile&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name &lt;span&gt;?:&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; userEmail &lt;span&gt;=&lt;/span&gt; cachedUserProfile&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;email &lt;span&gt;?:&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;    binding&lt;span&gt;.&lt;/span&gt;textviewUserProfile&lt;span&gt;.&lt;/span&gt;text &lt;span&gt;=&lt;/span&gt; &lt;span&gt;getString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;R&lt;span&gt;.&lt;/span&gt;string&lt;span&gt;.&lt;/span&gt;user_profile&lt;span&gt;,&lt;/span&gt; userName&lt;span&gt;,&lt;/span&gt; userEmail&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;isLoggedIn&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        binding&lt;span&gt;.&lt;/span&gt;edittextCountry&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setText&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;showSnackBar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;text&lt;span&gt;:&lt;/span&gt; String&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    Snackbar&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;make&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        binding&lt;span&gt;.&lt;/span&gt;root&lt;span&gt;,&lt;/span&gt;&#xA;        text&lt;span&gt;,&lt;/span&gt;&#xA;        Snackbar&lt;span&gt;.&lt;/span&gt;LENGTH_LONG&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you’ve made it this far, I have great news for you: you’ve written all the code for the app!&lt;/p&gt;&lt;h2 id=&#34;See-the-App-in-Action&#34;&gt;See the App in Action&lt;/h2&gt;&lt;p&gt;Run the app. You’ll see this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7FSXqzXczgaNUC5NnY9q1F/d72b55833d1bf446c70d60488f7f4ae0/welcome_screen.png&#34; alt=&#34;The app’s screen when launched.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Tap the &lt;strong&gt;Log in&lt;/strong&gt; button. The app will open a browser window that will display the login web page:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/53TEQjPR0HhmvGIC8BXW7a/e7b6205b7c401883c61b162c498a00f7/universal_login.png&#34; alt=&#34;The Auth0 login web page.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Log in using the email address and password of the user account you created earlier. Since this is the first time the account has logged into the app, the &lt;strong&gt;Authorize App&lt;/strong&gt; page will appear in the browser window:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4AkDSwWeHROplHJV3KOFcg/98376afd920b0af2a2e732a06c7fb622/authorize_app.png&#34; alt=&#34;The “Authorize App” screen. It says that the app is requesting access to your user account, particularly the “profile”, “current_user”, and “current_user_metadata” information.&#34;/&gt;&lt;/p&gt;&lt;p&gt;This page is asking you to authorize the app to access the following information in your user account:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Profile: access to your profile and email&lt;/li&gt;&lt;li&gt;Current_user: read your current_user&lt;/li&gt;&lt;li&gt;Current_user_metadata: update your current_user_metadata&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If these items sound familiar, it’s because you’ve seen them recently. They’re the names of the scopes in the &lt;code&gt;login_scopes&lt;/code&gt; string in the &lt;code&gt;strings&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; resource...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;login_scopes&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    openid profile email read:current_user update:current_user_metadata&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;...which the call to &lt;code&gt;&lt;span&gt;withScope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; in the &lt;code&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method uses to specify which sets of user data the app is authorized to use. This additional step informs the user of this use of their data and gives them a choice to approve or decline.&lt;/p&gt;&lt;p&gt;Tap the &lt;strong&gt;Approve&lt;/strong&gt; button. The browser will disappear, and you will return to the app, which will now look like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png&#34; alt=&#34;The app’s screen when the user is logged in.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Tap the &lt;strong&gt;Get&lt;/strong&gt; button. If you’ve never edited the value of the &lt;code&gt;country&lt;/code&gt; field in the user’s metadata, the metadata text box will display the hint text “Enter country”.&lt;/p&gt;&lt;p&gt;Enter a country’s name (or any other text if you like) into the text box and tap the &lt;strong&gt;Set&lt;/strong&gt; button. You’ll see this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5NE22T6w25nAVecqCIZ7x7/3c913e712052570af8908e860da37d2a/main_screen_3.png&#34; alt=&#34;The app’s screen, with the word “Morocco”, entered into the text field.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Two things just happened:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;If the user’s metadata already had a &lt;code&gt;country&lt;/code&gt; field, its value changed to whatever text you entered. If the user’s metadata didn’t have a &lt;code&gt;country&lt;/code&gt; field, a &lt;code&gt;country&lt;/code&gt; field was added to the metadata, and its value was set to whatever text you entered.&lt;/li&gt;&lt;li&gt;An Android pop-up message called a &lt;a href=&#34;https://developer.android.com/reference/com/google/android/material/snackbar/Snackbar&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;Snackbar&lt;/code&gt;&lt;/a&gt; appeared at the bottom of the screen with the message “Success!”&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Log out of the app, then log in again. Tap the &lt;strong&gt;Get&lt;/strong&gt; button. The app should fill the metadata text box with the value of the &lt;code&gt;country&lt;/code&gt; metadata field.&lt;/p&gt;&lt;p&gt;Let’s look at the updated user metadata from the Auth0 side. In the Auth0 dashboard, go to the list of users. Do this by clicking &lt;strong&gt;User Management&lt;/strong&gt; in the menu on the left side of the page, followed by clicking on &lt;strong&gt;Users&lt;/strong&gt;. Select the user that is currently logged in on the app. You’ll be taken to that user’s &lt;strong&gt;Details&lt;/strong&gt; page:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5nnVqPm4l6vVtgyvZpeYwI/db98ccbfb8b945ebde7ec7c8143724c5/user_details_page.png&#34; alt=&#34;The Auth0 dashboard displaying the user’s “User Details” page. In the “user_metadata” field, a JSON object contains a single key-value pair with the key “country” and the value “Morocco”.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Scroll down to the &lt;strong&gt;Metadata&lt;/strong&gt; section of the page. You’ll see an area labeled &lt;strong&gt;user_metadata&lt;/strong&gt;. If you filled out the &lt;code&gt;EditText&lt;/code&gt; in the app, you’ll see it in the JSON object there:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;country&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;WHATEVER_TEXT_YOU_ENTERED&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Each Auth0 user account can store two kinds of metadata:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;User metadata,&lt;/strong&gt; which is meant for data intentionally provided by and controlled by the user. It’s typically used for storing information that the user wants to share with the app, such as their address, contact information, preferences, and similar data. Only data that the user can read and edit should be stored here.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;App metadata,&lt;/strong&gt; which is meant for data provided by and controlled by the app. It’s typically used for storing information about the user that is primarily for the app’s use, such as the user’s roles, permissions, status, and similar data. There may be cases where the user can read this data, but you should not use app metadata to store data provided directly by the user.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;While a detailed look at the user account pages is beyond the scope of this article, you should explore them to see the kinds of data and functionality that are associated with user accounts.&lt;/p&gt;&lt;h2 id=&#34;When-Things-Go-Sideways&#34;&gt;When Things Go Sideways&lt;/h2&gt;&lt;p&gt;The expression “to go sideways” means “to go wrong” or “to not go according to plan.” In this section, I’ll show you what can go wrong when you’re writing an Android app and fail to account for what happens when the user turns their phone on its side. &lt;/p&gt;&lt;h3 id=&#34;Inducing-app-amnesia&#34;&gt;Inducing app amnesia&lt;/h3&gt;&lt;p&gt;Run the app and log in. You should see this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6D4JdPU0s5tGuplX9gEE4g/cfb0e2c57ead91059a2d6a26d6efdf44/main_screen_1.png&#34; alt=&#34;The app’s screen when the user is logged in, in portrait orientation.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Rotate your device to landscape orientation:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/48FY3obLHoGHnHfugbSn7I/8bc142a3e3e69bde3deed3223e6d02d7/orientation_change.png&#34; alt=&#34;The app screen viewed in landscape orientation. It has taken on the appearance of just having been launched.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Notice what happened: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;The greeting text changed from “You’re logged in.” to “Welcome to the app!”, which is its state when the app is launched.&lt;/li&gt;&lt;li&gt;The buttons have also been returned to their initial state:  &lt;strong&gt;Log in&lt;/strong&gt; is enabled, and &lt;strong&gt;Log out&lt;/strong&gt; is disabled.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;It appears as if turning your device on its side has given your app amnesia and returned it to its initial state. What happened?&lt;/p&gt;&lt;h3 id=&#34;Configuration-changes-and-reloading&#34;&gt;Configuration changes and reloading&lt;/h3&gt;&lt;p&gt;To use a developer cliché: this isn’t a bug, but a feature.&lt;/p&gt;&lt;p&gt;Whenever it detects a configuration change, Android’s default response is to reload the current activity. There are many configuration changes, such as language, keyboard availability, or the change you made just now: screen orientation. Reloading an activity when a configuration change happens makes it run its initialization methods again and reload resources, allowing it to set itself up for the new configuration.&lt;/p&gt;&lt;p&gt;This behavior was designed for applications that present different interfaces in different orientations. YouTube is an example of such an app, which has different portrait and landscape UI setups:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4jHUrVT9Ekh5252HZc3T95/706f6ddb57bb1b6be1a37c82b1201297/youtube_portrait_and_landscape.png&#34; alt=&#34;The YouTube app, shown in both orientations. In portrait orientation, it shows the video, ratings, and comments. In landscape orientation, the video takes up the entire screen.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Changing the screen orientation reloaded the activity and restored the app to its initial state, but it &lt;em&gt;did not&lt;/em&gt; change your “logged in” status. The &lt;code&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method was not called when you turned your device on its side. You’re still logged in!&lt;/p&gt;&lt;p&gt;You can confirm your “logged in” status by tapping the &lt;strong&gt;Log in&lt;/strong&gt; button. Note that there wasn’t an intermediate step where you had to enter your email address and password — you were taken straight to the app:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/01B8CQAD7K9uDYwkT7D1c7/08a21f19cdacc4ecdb065132cd2cf590/logged_in_sideways.png&#34; alt=&#34;The app screen, viewed in landscape orientation, showing the user logged in. The bottom portion of the screen is not in sight.&#34;/&gt;&lt;/p&gt;&lt;p&gt;Note that that app never presented the login page. That’s because there wasn’t any need — you were still logged in. Let’s solve this problem.&lt;/p&gt;&lt;h3 id=&#34;Curing-your-app-s-amnesia&#34;&gt;Curing your app’s amnesia&lt;/h3&gt;&lt;p&gt;You can instruct Android &lt;em&gt;not&lt;/em&gt; to reload Activities in the event of specified configuration changes in the app’s manifest. &lt;/p&gt;&lt;p&gt;🛠 Open &lt;code&gt;AndroidManifest&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; and change the &lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;activity&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; tag to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;activity&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;name&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;.MainActivity&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;exported&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;true&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;android:&lt;/span&gt;configChanges&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;orientation|screenSize&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This change adds the attribute &lt;code&gt;android&lt;span&gt;:&lt;/span&gt;configChanges&lt;span&gt;=&lt;/span&gt; “orientation&lt;span&gt;|&lt;/span&gt;screenSize”&lt;/code&gt; to &lt;code&gt;MainActivity&lt;/code&gt;, which tells Android that the activity should &lt;em&gt;not&lt;/em&gt; reload if the device orientation or screen size changes. Instead of reloading the activity, Android uses a callback method to notify the app of the change. The assumption is that you’ll handle those configuration changes yourself. Since we’ll ignore this callback, the configuration change has no effect.&lt;/p&gt;&lt;p&gt;Run the app and log in. Change the screen orientation, going from portrait to landscape and back. It no longer causes the activity to reload.&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;You’ve just built a simple app that features basic username/password &lt;em&gt;authentication&lt;/em&gt; — the ability to identify a known user. In addition to log a user in and out, you can also retrieve the information in their profile, and read and update their metadata.&lt;/p&gt;&lt;p&gt;You can find the code for the complete project for this article in &lt;a href=&#34;https://github.com/auth0-blog/get-started-android-authentication-kotlin&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this repository on the &lt;em&gt;Auth0 Blog Samples&lt;/em&gt; GitHub account&lt;/a&gt;. The only change that you’ll need to make in order to run it is to enter your app’s client ID and tenant’s domain in the &lt;code&gt;auth0&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; resource file.&lt;/p&gt;&lt;p&gt;This is the first in a new series of articles on Android development with Auth0. Future articles will cover new developments in Android 12 and Android Studio, as well as deeper dives into authentication and authorization with Android and Auth0 and alternatives to the standard username-and-password approach. Watch this space!&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-1&#34; target=&#34;_blank&#34; rel=&#34;noopener referrer&#34;&gt;Next Step: Read the preview part here&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://community.auth0.com/t/developing-a-secure-api-with-nestjs/33026&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;I ran into an issue&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/get-started-with-android-authentication-using-kotlin-part-2/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to implement login, logout, and user profiles in Android apps using Kotlin and Auth0.</summary>
  </entry>
  <entry>
    <title>Streamlining a React Monorepo</title>
    <updated>2021-09-16T15:47:00Z</updated>
    <id>tag:auth0.com,2021-09-16:/blog/streamlining-a-react-monorepo/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;a href=&#34;https://nx.dev&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Nx is a build framework for monorepos&lt;/a&gt; with first-class React support. It helps accelerate the adoption of proven development practices across projects of many sizes and scopes. Nx provides additional tooling for React projects to help scale and develop features at a faster pace. &lt;/p&gt;&lt;p&gt;This guide walks through some of the tooling provided by Nx, the creation, and structure of an Nx workspace, with an example to follow along with.&lt;/p&gt;&lt;p&gt;&lt;iframe src=&#34;https://www.youtube.com/embed/IMWk0P6EeRc&#34; frameborder=&#34;0&#34; allowfullscreen=&#34;&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;h2 id=&#34;What-are-Monorepos&#34;&gt;What are Monorepos&lt;/h2&gt;&lt;p&gt;A monorepo is a single collection of all your source code that spans multiple applications, libraries, and languages. Everything in the monorepo is not deployed at the same time but is all located in a central repository. Many companies use monorepos for different organizations and projects. Some even use a single monorepo to house all the source code for projects across their entire company.&lt;/p&gt;&lt;p&gt;Here are some of the benefits of a monorepo:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Shared code&lt;/strong&gt; — Promotes reuse of validation code, UI components, and types across the code base, including code between the backend and the frontend.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Atomic changes&lt;/strong&gt; — Make changes to a server API and modify the clients that consume that API in the same commit. No more coordinating commits across different repositories.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Developer mobility&lt;/strong&gt; — Provides consistency between building and testing applications written using different tools and technologies. Developers can confidently contribute to other teams’ applications and verify that their changes are safe.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;A single set of dependencies&lt;/strong&gt; — Use a single version of third-party dependencies for all your apps. Less frequently used applications don’t get left behind with a 3-year-old version of a framework library or an old version of a build tool.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are also a few common misconceptions with monorepos:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Strictly co-locating your code just by placing all your code in the same repository.&lt;/li&gt;&lt;li&gt;Running all the builds, tests, and quality checks on all applications for each PR or commit.&lt;/li&gt;&lt;li&gt;Deploying every application on every commit to the main branch.&lt;/li&gt;&lt;li&gt;Setting up multiple scripts across applications to handle common tasks.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Just because you have all your code in a monorepo, that does not mean you have run all the tests and checks on your monorepo for every single commit. This doesn&amp;#39;t scale well and leads to bottlenecks in your development and Continuous Integration (CI) and Continuous Deployment (CD) pipelines. Nx provides integrated tooling to intelligently determine what needs to be run through code analysis, affected commands, and computation caching. &lt;/p&gt;&lt;h3 id=&#34;Affected-commands&#34;&gt;Affected commands&lt;/h3&gt;&lt;p&gt;Nx uses code analysis to build a dependency graph of all projects in the workspace. It then uses the dependency graph to determine what projects are impacted based on your changes between your Git branches and the main branch. &lt;a href=&#34;https://nx.dev/latest/react/core-concepts/mental-model#affected-commands&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Nx’s Affected Commands&lt;/a&gt; use this code analysis to perform the minimum set of tasks based on what&amp;#39;s changed. Let’s look at two applications that depend on a library as an example.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3Msqcbm3M7zreqA7s3Yga/fa9a14ab5dd0970d45ff8603494a2530/Uploaded_from_Streamlining_a_React_Monorepo&#34;/&gt;&lt;/p&gt;&lt;p&gt;To see what applications are affected, use the &lt;strong&gt;&lt;a href=&#34;https://nx.dev/latest/angular/cli/affected-apps&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;nx affected:apps command&lt;/a&gt;&lt;/strong&gt;. Nx analyzes the nature of the changes and determines which projects, including applications and libraries, are impacted. In the example above, changing app1 doesn’t cause app2 to be impacted, so you don’t need to run all the pre-merge steps for app2. Alternatively, changing the lib, or packages that both apps depend on does impact both applications.&lt;/p&gt;&lt;h3 id=&#34;Computation-caching&#34;&gt;Computation caching&lt;/h3&gt;&lt;p&gt;Nx is smart in that it also knows the context in which you ran particular commands, the current hash of the files, and other environmental information. &lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1gsO5lGTZaluzgHVc3H3xr/f931ae116060c2def80962a764b4888b/Uploaded_from_Streamlining_a_React_Monorepo&#34;/&gt;&lt;/p&gt;&lt;p&gt;The image above displays an example of the information collected to build a unique hash used to identify the computation. With this information, Nx caches and stores these computations and can replay them if it seems the same computation is being run again.&lt;/p&gt;&lt;p&gt;This isn’t done through rebuilding source code. Only the artifacts produced from a given command are stored and replayed when possible. If Nx doesn’t find this computation, Nx runs the task, and after it completes, it takes the outputs and the terminal output and stores it locally (and if configured remotely). All of this happens transparently, so you don’t have to worry about it.&lt;/p&gt;&lt;h2 id=&#34;Creating-an-Nx-Workspace-Using-a-React-Preset&#34;&gt;Creating an Nx Workspace Using a React Preset&lt;/h2&gt;&lt;p&gt;Now that you know how Nx works, let’s try it out by building a small application that lists Star Wars characters.&lt;/p&gt;&lt;p&gt;Start with creating the Nx workspace with a React application using the &lt;code&gt;react&lt;/code&gt; preset. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;npx create-nx-workspace sw-org --preset react --appName myapp&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After running this command, you’ll be asked to select a stylesheet format. You can choose the default for this demo. You also have the option to connect your workspace to &lt;a href=&#34;https://nx.app/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Nx Cloud&lt;/a&gt; if you’d like.&lt;/p&gt;&lt;p&gt;After you make your selections, this command does the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Generates a new Nx workspace&lt;/li&gt;&lt;li&gt;Scaffolds out a new React application with modern tooling, including &lt;a href=&#34;https://jestjs.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Jest for unit tests&lt;/a&gt;, and &lt;a href=&#34;https://www.cypress.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Cypress for E2E tests&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are other presets available, such as &lt;code&gt;next&lt;/code&gt; for &lt;a href=&#34;https://nextjs.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Next.js&lt;/a&gt; projects, and &lt;code&gt;react&lt;span&gt;-&lt;/span&gt;express&lt;/code&gt; for a workspace with React and Express pre-configured.&lt;/p&gt;&lt;p&gt;Every Nx workspace has a file structure similar to this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;myorg/&#xA;├── apps/&#xA;├── libs/&#xA;├── tools/&#xA;├── workspace.json&#xA;├── nx.json&#xA;├── package.json&#xA;└── tsconfig.base.json&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;apps&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; contains the application projects. This is the main entry point for each runnable application.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;libs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; contains the library projects. Each library defines its external API so that boundaries between libraries remain clear.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;tools&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; contains scripts that act on your codebase.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;/&lt;/span&gt;workspace&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; contains the configuration for each project in your workspace.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;/&lt;/span&gt;nx&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; adds extra information about projects, including implicit dependencies and tags that can be used to restrict the ways projects are allowed to depend on each other.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;/&lt;/span&gt;tsconfig&lt;span&gt;.&lt;/span&gt;base&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; sets up the global TypeScript settings and aliases.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To serve up the application, enter into the &lt;code&gt;sw&lt;span&gt;-&lt;/span&gt;org&lt;/code&gt; directory and run the &lt;code&gt;serve&lt;/code&gt; command using the Nx CLI:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;nx serve&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;Note: If you don&amp;#39;t want to install Nx globally, you can use &lt;code&gt;npx nx serve&lt;/code&gt; instead.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The initial application page is displayed.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2EUaKnrpRkLehJempAp06f/a99c92b3282e79e42b16877c98cac1c9/Uploaded_from_Streamlining_a_React_Monorepo&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Generating-a-Feature-Library&#34;&gt;Generating a Feature Library&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://nx.dev/latest/react/structure/library-types#feature-libraries&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Generating libraries&lt;/a&gt; in an Nx workspace is done by using the &lt;code&gt;generate&lt;/code&gt; command with the Nx CLI. Feature libraries are used to display UI to the user, which could including routing information, and could use other libraries such as shared components.&lt;/p&gt;&lt;p&gt;Create one now by running:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;nx generate lib people&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; &lt;a href=&#34;https://nx.dev/latest/angular/getting-started/console&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Nx Console&lt;/a&gt; also provides a full l GUI to run Nx CLI commands in your editor with native VSCode and WebStorm support.&lt;/p&gt;&lt;h2 id=&#34;Generating-a-Data-Access-Library&#34;&gt;Generating a Data Access Library&lt;/h2&gt;&lt;p&gt;A &amp;#34;data access&amp;#34; library is where functionality for fetching and storing data for a feature exists. So any services necessary to manage the quotes are placed in this library. Throughout building applications, there will be data access libraries across multiple features.&lt;/p&gt;&lt;p&gt;Create the data access library by running:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;nx generate lib data-access&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; You can also create your custom generators similar to the &lt;code&gt;library&lt;/code&gt; generator inside an Nx workspace. This provides more flexibility to create more standards around your development processes and guidelines. Read more about workspace generators in our &lt;a href=&#34;https://nx.dev/latest/angular/generators/workspace-generators&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Workspace Generators&lt;/a&gt; guide.&lt;/p&gt;&lt;p&gt;Update the data-access library to fetch the characters from the Star Wars API.&lt;/p&gt;&lt;p&gt;Open up &lt;code&gt;data&lt;span&gt;-&lt;/span&gt;access&lt;span&gt;.&lt;/span&gt;tsx&lt;/code&gt; and replace it with the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; useEffect&lt;span&gt;,&lt;/span&gt; useState &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;IPerson&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA; birth_year&lt;span&gt;:&lt;/span&gt; string&lt;span&gt;;&lt;/span&gt;&#xA; eye_color&lt;span&gt;:&lt;/span&gt; string&lt;span&gt;;&lt;/span&gt;&#xA; films&lt;span&gt;:&lt;/span&gt; string&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA; gender&lt;span&gt;:&lt;/span&gt; string&lt;span&gt;;&lt;/span&gt;&#xA; hair_color&lt;span&gt;:&lt;/span&gt; string&lt;span&gt;;&lt;/span&gt;&#xA; height&lt;span&gt;:&lt;/span&gt; string&lt;span&gt;;&lt;/span&gt;&#xA; homeworld&lt;span&gt;:&lt;/span&gt; string&lt;span&gt;;&lt;/span&gt;&#xA; mass&lt;span&gt;:&lt;/span&gt; string&lt;span&gt;;&lt;/span&gt;&#xA; name&lt;span&gt;:&lt;/span&gt; string&lt;span&gt;;&lt;/span&gt;&#xA; skin_color&lt;span&gt;:&lt;/span&gt; string&lt;span&gt;;&lt;/span&gt;&#xA; created&lt;span&gt;:&lt;/span&gt; Date&lt;span&gt;;&lt;/span&gt;&#xA; edited&lt;span&gt;:&lt;/span&gt; Date&lt;span&gt;;&lt;/span&gt;&#xA; species&lt;span&gt;:&lt;/span&gt; string&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA; starships&lt;span&gt;:&lt;/span&gt; string&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA; url&lt;span&gt;:&lt;/span&gt; string&lt;span&gt;;&lt;/span&gt;&#xA; vehicles&lt;span&gt;:&lt;/span&gt; string&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Response&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA; count&lt;span&gt;:&lt;/span&gt; number&lt;span&gt;;&lt;/span&gt;&#xA; next&lt;span&gt;:&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; string&lt;span&gt;;&lt;/span&gt;&#xA; previous&lt;span&gt;:&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; string&lt;span&gt;;&lt;/span&gt;&#xA; results&lt;span&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;usePeople&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;page&lt;span&gt;:&lt;/span&gt; number&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;people&lt;span&gt;,&lt;/span&gt; setPeople&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; useState&lt;span&gt;&amp;lt;&lt;/span&gt;IPerson&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA; &lt;span&gt;useEffect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;   &lt;span&gt;fetch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;https://swapi.dev/api/people/?page=&lt;/span&gt;&lt;span&gt;&lt;span&gt;${&lt;/span&gt;page&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;   r&lt;span&gt;.&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;data&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; data&lt;span&gt;.&lt;/span&gt;results&lt;span&gt;)&lt;/span&gt;&#xA; &lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;data&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;     &lt;span&gt;setPeople&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;data&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;   &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA; &lt;span&gt;return&lt;/span&gt; people&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now update the people feature at &lt;code&gt;people&lt;span&gt;.&lt;/span&gt;tsx&lt;/code&gt; to list out the characters:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; usePeople &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#39;@sw-org/data-access&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;./people.module.css&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;People&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA; &lt;span&gt;const&lt;/span&gt; people &lt;span&gt;=&lt;/span&gt; &lt;span&gt;usePeople&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;   &lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;     &lt;span&gt;&amp;lt;&lt;/span&gt;h1&lt;span&gt;&amp;gt;&lt;/span&gt;Star Wars People&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;h1&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&#xA;     &lt;span&gt;&amp;lt;&lt;/span&gt;ul&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;       &lt;span&gt;{&lt;/span&gt;&#xA;         people&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;person&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;           &lt;span&gt;&amp;lt;&lt;/span&gt;li key&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;person&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;             &lt;span&gt;{&lt;/span&gt;person&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;}&lt;/span&gt;&#xA;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;li&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;         &lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;       &lt;span&gt;}&lt;/span&gt;&#xA;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;ul&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA; &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; People&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Replace the &lt;code&gt;App&lt;/code&gt; template with the &lt;code&gt;People&lt;/code&gt; component&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; styles &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#39;./app.module.css&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; People &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#39;@sw-org/people&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;   &lt;span&gt;&amp;lt;&lt;/span&gt;div className&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;styles&lt;span&gt;.&lt;/span&gt;app&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;     &lt;span&gt;&amp;lt;&lt;/span&gt;People&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA; &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; App&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Refreshing the application shows a list of characters.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3wmVIH8Sqz1ejavorzIzsI/99c44e96e4e44149da2e72e5e328baad/Uploaded_from_Streamlining_a_React_Monorepo&#34;/&gt;&lt;/p&gt;&lt;p&gt;The list of characters is simple. The business and data logic is kept in libraries. As your applications grow, the number of libraries grows along with it, but the applications remain relatively small and are only used for integrating core functionality for the app to run.&lt;/p&gt;&lt;h2 id=&#34;Dependency-Graph&#34;&gt;Dependency Graph&lt;/h2&gt;&lt;p&gt;Nx knows the dependencies between projects in your workspace and can generate your dependency graph visually at any point in time. &lt;/p&gt;&lt;p&gt;Run the &lt;strong&gt;nx dep-graph&lt;/strong&gt; command to see the current state of the workspace.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;nx dep-graph&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This displays the application, E2E project, and the two libraries. &lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4oiIpWdF5wIpz6y5qJkGA4/9a8802092e0de9c1a0e5c9e25d9828d7/Uploaded_from_Streamlining_a_React_Monorepo&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You can also have the dependency graph auto-refresh with the &lt;code&gt;&lt;span&gt;--&lt;/span&gt;watch&lt;/code&gt; flag.&lt;/p&gt;&lt;p&gt;You can also see what projects are impacted by a given change. Make a change to the App.tsx, such as removing the &lt;code&gt;className&lt;/code&gt;, save, and run the &lt;strong&gt;nx affected:dep-graph&lt;/strong&gt; command.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;nx affected:dep-graph&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This displays the &lt;strong&gt;myapp&lt;/strong&gt; and &lt;strong&gt;myapp-e2e&lt;/strong&gt; highlighted in red as affected projects.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2S5DueXJUNdbbguneKUjGJ/cc397167e5dc78a1835ab2db57b6dacb/Uploaded_from_Streamlining_a_React_Monorepo&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;strong&gt;myapp-e2e&lt;/strong&gt; application is directly tied to mapp, but is implicitly linked through the &lt;strong&gt;nx.json&lt;/strong&gt; file. Read more about Nx configuration here.&lt;/p&gt;&lt;h3 id=&#34;Using-Affected-Commands&#34;&gt;Using Affected Commands&lt;/h3&gt;&lt;p&gt;Nx provides affected commands to run certain tasks against affected projects. For example, make a change to the &lt;code&gt;data&lt;span&gt;-&lt;/span&gt;access&lt;/code&gt; library, and run &lt;strong&gt;nx affected:build&lt;/strong&gt;. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;nx affected:build&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nx finds the affected applications impacted by changing the &lt;strong&gt;data-access &lt;/strong&gt;library and runs the &lt;strong&gt;build&lt;/strong&gt; target for each one of them. That way, &lt;strong&gt;only&lt;/strong&gt; the affected projects are built for the given change, and not every project in the monorepo. The same commands work for &lt;strong&gt;test&lt;/strong&gt;, &lt;strong&gt;lint&lt;/strong&gt;, and &lt;strong&gt;e2e&lt;/strong&gt;, and others.&lt;/p&gt;&lt;p&gt;There is also the &lt;strong&gt;nx affected&lt;/strong&gt; command that works with any defined target. The alias for &lt;strong&gt;nx affected:build&lt;/strong&gt; is:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;nx affected --target&lt;span&gt;=&lt;/span&gt;build&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This allows you to run any target based on the affected projects.&lt;/p&gt;&lt;h3 id=&#34;Using-Computation-Caching&#34;&gt;Using Computation Caching&lt;/h3&gt;&lt;p&gt;Along with affected commands, Nx supports&lt;a href=&#34;https://nx.dev/latest/angular/core-extended/computation-caching&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt; computation caching&lt;/a&gt; to never execute the same computation twice. This computation cache is pluggable and can be distributed. Taking &lt;code&gt;&lt;span&gt;**&lt;/span&gt;myapp&lt;/code&gt;&lt;em&gt;&lt;/em&gt; as an example, run the build for &lt;code&gt;myapp&lt;/code&gt; twice.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;nx build myapp&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When running the same command the second time without changes, you immediately get the cached results from the previous computation. The computation cache is done locally, but can also be distributed and extended to the rest of your team and organization. &lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://nx.app&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Nx Cloud&lt;/a&gt; is one such option to distribute your computation cache. It includes a free tier with 5 hours of saved time per month, enterprise options, and is free for open-source projects.&lt;/p&gt;&lt;h2 id=&#34;Summary&#34;&gt;Summary&lt;/h2&gt;&lt;p&gt;Nx provides modern tooling including code analysis, code generation, code analysis, affected commands, and computation caching to scale your application development using a monorepo.&lt;/p&gt;&lt;p&gt;What did we cover?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Monorepos and why you should use one&lt;/li&gt;&lt;li&gt;Nx workspace structure and standardization&lt;/li&gt;&lt;li&gt;Smarter tooling with code analysis, affected commands, dependency visualization, and computation caching.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Find out more with the following resources:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Documentation at &lt;a href=&#34;https://nx.dev&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://nx.dev&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Free &lt;a href=&#34;https://egghead.io/playlists/scale-react-development-with-nx-4038&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Egghead course&lt;/a&gt; on Scaling React Development&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/streamlining-a-react-monorepo/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Whether you have a single application or a suite of applications, code reuse, standards around structure, process, and feature development help to ensure your codebase remains healthy in the long term.</summary>
  </entry>
  <entry>
    <title>4 Authentication Tools That Increase Retail Conversion Rates</title>
    <updated>2021-09-15T15:03:00Z</updated>
    <id>tag:auth0.com,2021-09-15:/blog/four-authentication-tools-that-increase-retail-conversion-rates/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;When consumers create e-commerce accounts, retailers can use their purchasing history to offer a more personalized shopping experience, which can boost &lt;a href=&#34;https://www.mckinsey.com/industries/retail/our-insights/personalizing-the-customer-experience-driving-differentiation-in-retail&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;retail conversion rates&lt;/a&gt; by up to 15%. However, it is tough for retailers to convince people to actually sign up — case in point, &lt;a href=&#34;https://baymard.com/lists/cart-abandonment-rate&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;a 2021 DMI survey&lt;/a&gt; found that 24% of U.S. shoppers abandoned an order just because they were asked to make an account.&lt;/p&gt;&lt;p&gt;We &lt;a href=&#34;https://images.ctfassets.net/2ntc334xpx65/7o4UAUaHOMHJeV5fmgK9S1/b4c300762c64becf6cef5989046aaf8f/Infograph_2_2x.jpg&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;surveyed&lt;/a&gt; over 8,000 consumers across six global markets (the UK, France, Germany, Australia, Singapore, and Japan) to learn about the login experience they preferred and discovered widespread frustration with standard username/password (UP) login methods and businesses that fail to meet their ease-of-login expectations.&lt;/p&gt;&lt;p&gt;Our survey found five problems that stop consumers from signing up for an online account:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Completing long login or sign-up forms (49%)&lt;/li&gt;&lt;li&gt;Meeting minimum password requirements (47%)&lt;/li&gt;&lt;li&gt;Entering private information (46%)&lt;/li&gt;&lt;li&gt;Creating a new ID and password for every app or online service (43%)&lt;/li&gt;&lt;li&gt;Verifying their account with one-time passwords (OTP) (23%)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Such frustrations lead to some of the worst security hygiene offenses, in particular, reuse of passwords across multiple accounts. Our survey found that 85% of international consumers reuse passwords, with 41% of them doing so “frequently or all the time” and 29% “sometimes”.&lt;/p&gt;&lt;p&gt;We asked consumers about the kind of login experience that would increase their chances of signing up for an account and found that adding certain authentication features would actually encourage them to do so. Our survey results indicated that, when available, consumers are more likely to complete the signup process if given more secure and easy-to-use login experiences.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/24uCeR7yhZbNmMpbFE7v3v/c2245aa707cc9d83b5242357ed06ac39/Passwordless-Authentication-sep1.jpg&#34; alt=&#34;Authentication 01&#34;/&gt;&lt;/p&gt;&lt;p&gt;Below are four authentication tools that can improve your retail conversion rate by creating a more streamlined, secure login experience that satisfies users.&lt;/p&gt;&lt;h2 id=&#34;1--Multi-factor-Authentication--MFA-&#34;&gt;1. Multi-factor Authentication (MFA)&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://auth0.com/learn/get-started-with-mfa/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;MFA&lt;/a&gt; requires users to verify their identity in more than one way, which helps reduce the potential for unauthorized access to their data. For instance, a user may submit a password and then have to additionally verify a secondary account or device they own using a link sent to their email address or phone.&lt;/p&gt;&lt;p&gt;Consumers want to know that companies are protecting their data. In a 2020 survey with 1,000 North American consumers asked about privacy and data collection, management consulting firm McKinsey &amp;amp; Company found that &lt;a href=&#34;https://www.mckinsey.com/business-functions/risk-and-resilience/our-insights/the-consumer-data-opportunity-and-the-privacy-imperative&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;87% of respondents said&lt;/a&gt; they “would not do business with a company if they had concerns about its security practices.” MFA helps retailers provide consumers with greater confidence their data is protected because it blocks &lt;a href=&#34;https://www.microsoft.com/security/blog/2019/08/20/one-simple-action-you-can-take-to-prevent-99-9-percent-of-account-attacks/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;99.9% of attacks&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;While 49% of our surveyed consumers noted they were more likely to sign up for an online account if a business offered MFA, only 28% of surveyed businesses currently offered it as part of their login process. This discrepancy arises from the perception that the multiple steps in MFA mean extra hassle for both users and the business.&lt;/p&gt;&lt;p&gt;However, MFA is actually fairly easy to implement — many companies &lt;a href=&#34;https://www.brighttalk.com/webcast/15793/483340/451-research-report-remote-work-during-covid-19-drives-mfa-adoption&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;quickly adopted it&lt;/a&gt; when COVID-19 forced them to pivot to a remote workforce in 2020.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Company use example&lt;/strong&gt;: According to &lt;a href=&#34;https://auth0.com/case-studies/ecobee/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Jordan Christensen&lt;/a&gt;, VP of Technology at &lt;a href=&#34;https://www.ecobee.com/en-us/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ecobee&lt;/a&gt;, the smart device retailer wanted to protect consumers using ecobee’s home monitoring products, so they outsourced MFA implementation. His team was thrilled they were able to bring MFA to customers “without needing to reinvent the wheel.”&lt;/p&gt;&lt;h2 id=&#34;2--Biometrics&#34;&gt;2. Biometrics&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://auth0.com/blog/what-are-biometrics-the-proscons-of-biometric-security/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Biometrics&lt;/a&gt; uses measurable human traits, characteristics, or behaviors to confirm user identity. Fingerprint scans and facial recognition are two of the most common forms of biometrics, but there’s a growing list that includes options like voice, gait, and even DNA recognition.&lt;/p&gt;&lt;p&gt;Biometric traits are harder for hackers to fake than usernames and passwords, so they can help mitigate security concerns that could keep consumers from signing up. &lt;a href=&#34;https://usa.visa.com/visa-everywhere/security/how-fingerprint-authentication-works.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Consumers&lt;/a&gt; also like it because it’s faster than username/password authentication, and they don’t have to struggle with remembering login credentials.&lt;/p&gt;&lt;p&gt;While 46% of our surveyed consumers responded that they’d be more likely to log in if they could use biometrics, only 21% of the businesses we surveyed currently offered it — the biggest consumer-business gap we found in the study. Taking steps to close the gap between consumer expectations and current business practices will result in a better customer experience and better retail conversion rates.&lt;/p&gt;&lt;p&gt;Steven Rees-Pullman, SVP, International at Auth0, explains that it can be a &lt;a href=&#34;https://auth0.com/blog/businesses-fall-short-of-consumer-expectations-for-login-experiences-auth0-survey-reveals/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;“heavy lift”&lt;/a&gt; for businesses to develop biometric authentication in-house due to factors like limited bandwidth of IT employees or a lack of expertise with the process. To prevent diverting company resources and adding additional stress on already busy IT teams, some companies are instead choosing to outsource implementation to third-party providers that specialize in identity management and already have &lt;a href=&#34;https://auth0.com/docs/mfa/configure-webauthn-device-biometrics-for-mfa&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;experience with biometrics&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Company use example&lt;/strong&gt;: Consumer use of &lt;a href=&#34;https://www.microsoft.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Microsoft’s&lt;/a&gt; biometric authentication tool Windows Hello, which lets users log in with a face, iris, or fingerprint scan instead of a password, jumped from &lt;a href=&#34;https://www.microsoft.com/security/blog/2020/12/17/a-breakthrough-year-for-passwordless-technology/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;69.4% to 84.7%&lt;/a&gt; in 2019 alone. Additionally, &lt;a href=&#34;https://www.disney.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Disney&lt;/a&gt; started experimenting with a &lt;a href=&#34;https://insidethemagic.net/2021/04/disney-world-facial-recognition-ks1/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;facial recognition system&lt;/a&gt; at Walt Disney World’s Magic Kingdom theme park this year and was using &lt;a href=&#34;https://insidethemagic.net/2020/10/disney-fingerprint-scanning-kj1/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;fingerprint scanning&lt;/a&gt; to prevent ticket fraud before COVID-19 hit.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://auth0.com/learn/social-login/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Social logins&lt;/a&gt; use existing login information from a social network provider that allows consumers to access a third-party website account without having to create another one. While the number of social providers &lt;a href=&#34;https://www.theverge.com/2021/5/7/22422980/tiktok-log-in-sound-kit-app-integration-developers&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;keeps growing&lt;/a&gt;, staple networks include Facebook, Google, and Twitter.&lt;/p&gt;&lt;p&gt;Consumers prefer social logins to traditional UP authentication because they typically allow them to create and log in to accounts with just one click. As a result, social logins generally &lt;a href=&#34;https://auth0.com/blog/how-to-use-social-login-to-drive-your-apps-growth/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;boost conversion rates&lt;/a&gt; by up to 20% — though some companies report seeing &lt;a href=&#34;https://www.quora.com/What-impact-does-social-login-have-on-conversion-rates&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;as high as 40%&lt;/a&gt;. Social logins also provide access to rich user data, allowing you to use more customized, targeted marketing with individual consumers.&lt;/p&gt;&lt;p&gt;Our survey found there wasn’t a huge gap between consumers and businesses with social logins, with 37% of consumers noting they were more likely to sign up with it and 31% of businesses currently offering it.&lt;/p&gt;&lt;p&gt;Social logins are typically connected to larger companies with established data privacy measures, but security can be compromised if users are reusing passwords. Martin Gontovnikas, former VP of Marketing at Auth0, says consumers using social logins should &lt;a href=&#34;https://auth0.com/blog/social-login-on-the-rise/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;vary their passwords across platforms&lt;/a&gt;, and you can choose to boost the security strength of social logins by combining it with MFA.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Company use example:&lt;/strong&gt; Kevin Ho, VP of Marketing for marketing agency &lt;a href=&#34;https://www.wishpond.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;WishPond&lt;/a&gt;, found that after featuring a social login option more prominently than UP authentication, the company saw an &lt;a href=&#34;https://blog.wishpond.com/post/115675436270/how-we-improved-sign-up-rates-by-8-5-with-this-simple-test&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;8.5% increase&lt;/a&gt; in their conversions.&lt;/p&gt;&lt;h2 id=&#34;4--Passwordless&#34;&gt;4. Passwordless&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://assets.ctfassets.net/2ntc334xpx65/3Ew2LXo2UJDQdlSukeQxwq/de57802e6a5da4a58de15ee68b42ccf5/Passwordless-Whitepaper-Auth0.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Passwordless&lt;/a&gt; authentication is exactly what it sounds like: confirming a consumer’s identity with something different from a password. Outside of biometrics, typical passwordless options include magic links, where a user is sent a link to log in after submitting their email, one-time codes, and push notifications.&lt;/p&gt;&lt;p&gt;With the average consumer having &lt;a href=&#34;https://tech.co/news/average-person-100-passwords#:~:text=According%20to%20new%20research%20from,has%20100%20passwords%20to%20remember!&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;approximately 100 passwords&lt;/a&gt;, passwordless authentication reduces potential user frustration with logins. Not having traditional UP authentication also means increased data security, with Verizon noting in its &lt;a href=&#34;https://www.verizon.com/business/resources/reports/dbir/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;2021 Data Breach Investigations Report&lt;/a&gt; that stolen login credentials are the main way organizations get hacked. Next Move Strategy Consulting published a report &lt;a href=&#34;https://www.nextmsc.com/report/passwordless-authentication-market&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this month&lt;/a&gt; predicting that the global passwordless authentication market will grow by 29.1% by 2030.&lt;/p&gt;&lt;p&gt;Even so, passwordless authentication came in last in our survey in terms of both consumer likelihood to sign up with it (34%) and business use (20%). Traditionally, &lt;a href=&#34;https://www.forbes.com/sites/forbestechcouncil/2021/04/20/why-is-passwordless-authentication-met-with-reluctance/?sh=5a946c366d06&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;IT infrastructure&lt;/a&gt; at large companies has been set up for UP authentication, so it can be a complex process for businesses to implement passwordless tech on a wide scale.&lt;/p&gt;&lt;p&gt;According to Cybersecurity Insiders’ 2021 &lt;a href=&#34;https://media.fidoalliance.org/wp-content/uploads/2021/03/The_State_Of_Passwordless_Authentication_2021_Report.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;“The State of Passwordless Authentication”&lt;/a&gt; report, many organizations that have chosen to implement passwordless authentication have done so because of its proven security, ease of use, and ability to “help consumer-facing businesses increase revenue.” Microsoft also reported that &lt;a href=&#34;https://www.microsoft.com/security/blog/2020/12/17/a-breakthrough-year-for-passwordless-technology/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;more than 150 million users&lt;/a&gt; were using passwordless authentication on Windows in May 2020.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Company use example:&lt;/strong&gt; Kunal Chakraborty, Global Vice President for Customer Experience and Digital at &lt;a href=&#34;https://www.grandvision.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GrandVision&lt;/a&gt;, the optical retailer, said the company made &lt;a href=&#34;https://auth0.com/case-studies/grandvision/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;“the checkout process as customer-friendly as possible”&lt;/a&gt; by having a third-party provider implement passwordless authentication — accounts are created just by clicking a box. As a result, GrandVision saw a &lt;a href=&#34;https://techbeacon.com/security/your-passwordless-future-make-it-sooner-rather-later&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;boost in their conversions by up to 54%&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3DuYOoznWG10geDOeYwBVm/02b5dbc23075eebf4d984f22dbaaec76/Passwordless-Authentication-sep2.jpg&#34; alt=&#34;Authentication 02&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Authentication-Technologies-Enhance-User-Experience&#34;&gt;Authentication Technologies Enhance User Experience&lt;/h2&gt;&lt;p&gt;While it may seem like adding a new element to your login box would drive consumers away, it’s actually the opposite. By using one of the authentication tools above to provide consumers with a simple, secure login experience, you can satisfy users and continue to strengthen their ties to your brand with personalized marketing — strengthening your retail conversion rate in the process.&lt;/p&gt;&lt;p&gt;Auth0 makes implementing the authentication technologies above simple — learn more &lt;a href=&#34;https://auth0.com/authentication&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;about Auth0’s platform&lt;/a&gt; here.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/four-authentication-tools-that-increase-retail-conversion-rates/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">How to decrease abandoned carts by improving the simplicity and security of your user login process.</summary>
  </entry>
  <entry>
    <title>Backend For Frontend Authentication Pattern with Auth0 and ASP.NET Core</title>
    <updated>2021-09-14T15:04:00Z</updated>
    <id>tag:auth0.com,2021-09-14:/blog/backend-for-frontend-pattern-with-auth0-and-dotnet/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; This article discusses the Backend For Frontend authentication pattern and how it can be used in practice in SPAs implemented with React that use ASP.NET Core 5 as backend. Basic knowledge of the OAuth 2.0 and OpenID Connect is desirable but not required.&lt;/p&gt;&lt;h2 id=&#34;What-Is-the-Backend-For-Frontend-Authentication-Pattern-&#34;&gt;What Is the Backend For Frontend Authentication Pattern?&lt;/h2&gt;&lt;p&gt;As you start looking into the different &lt;a href=&#34;https://auth0.com/docs/flows&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OAuth flows&lt;/a&gt; and the scenarios they cover, client type is one of those relevant aspects mentioned everywhere. The &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6749&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OAuth 2.0 specification&lt;/a&gt; defines two different client types, public and confidential clients, under &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6749#section-2.1&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;section #2.1&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Public clients are those that run in places where secrets could be exposed as part of the source code or if the binaries are decompiled. These usually are single-page apps running in a browser or native apps running in user devices such as mobile phones or smart TVs. &lt;/p&gt;&lt;p&gt;On the other hand, confidential clients are the ones that can keep secrets in a private store, like, for example, a web application running in a web server, which can store secrets on the backend. &lt;/p&gt;&lt;p&gt;The client type will determine one or more OAuth flows suitable for the application implementation. By sticking to one of those flows, you can also lower the risks of getting the application compromised from an authentication and authorization standpoint.&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;Backend For Frontend&lt;/strong&gt; (a.k.a BFF) pattern for authentication emerged to mitigate any risk that may occur from negotiating and handling access tokens from public clients running in a browser.  The name also implies that a dedicated backend must be available for performing all the authorization code exchange and handling of the access and refresh tokens. This pattern relies on &lt;a href=&#34;https://openid.net/connect/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OpenID Connect&lt;/a&gt;, which is an authentication layer that runs on top of OAuth to request and receive identity information about authenticated users.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This pattern does not work for a pure SPA that relies on calling external APIs directly from javascript or a serverless backend (e.g., AWS Lamba or Azure Functions).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The following diagram illustrates how this pattern works in detail:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7b2OEjgWLrP5EBOnPNK4MH/b9970c5cce10ee594477493785b17efb/BFF-Sequence.png&#34; alt=&#34;BFF sequence diagram&#34;/&gt;&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;When the frontend needs to authenticate the user, it calls an API endpoint (&lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;login&lt;/code&gt;) on the backend to start the login handshake.&lt;/li&gt;&lt;li&gt;The backend uses OpenID connect with Auth0 to authenticate the user and getting the id, access, and refresh tokens.&lt;/li&gt;&lt;li&gt;The backend stores the user&amp;#39;s tokens in a cache.&lt;/li&gt;&lt;li&gt;An encrypted cookie is issued for the frontend representing the user authentication session.&lt;/li&gt;&lt;li&gt;When the frontend needs to call an external API, it passes the encrypted cookie to the backend together with the URL and data to invoke the API.&lt;/li&gt;&lt;li&gt;The backend retrieves the access token from the cache and makes a call to the external API including that token on the authorization header.&lt;/li&gt;&lt;li&gt;When the external API returns a response to the backend, this one forwards that response back to the frontend.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;Backend-For-FrontEnd-in-ASP-NET-Core&#34;&gt;Backend For FrontEnd in ASP.NET Core&lt;/h2&gt;&lt;p&gt;Visual Studio ships with three templates for SPAs with an ASP.NET Core backend. As shown in the following picture, those templates are ASP.NET Core with Angular, ASP.NET Core with React.js, and ASP.NET Core with React.js and Redux, which includes all the necessary plumbing for using Redux.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4m19OOAccdvvxPsriVyior/9062c17f8c3a39820932ab0ff2789185/visualstudio-aspnet-templates.png&#34; alt=&#34;Available templates for SPA and ASP.NET Core&#34;/&gt;&lt;/p&gt;&lt;p&gt;As part of this article, we will be discussing how to implement this pattern with the ASP.NET Core with React.js template.&lt;/p&gt;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/auth0-blog/bff-auth0-dotnet&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this GitHub repository&lt;/a&gt; as a reference for the project you are about to build. &lt;/p&gt;&lt;h3 id=&#34;The-structure-of-the-project&#34;&gt;The structure of the project&lt;/h3&gt;&lt;p&gt;Projects created with that template from Visual Studio will have the following folder structure.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ClientApp&lt;/code&gt;, this folder contains a sample SPA implemented with React.js. This is the app that we will modify to support the BFF pattern.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Controllers&lt;/code&gt;, this folder contains the controllers implemented with ASP.NET Core for the API consumed from the SPA. In other words, it&amp;#39;s the backend.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Pages&lt;/code&gt;, this folder contains server-side pages, which are mostly used for rendering errors on the backend.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Startups&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt;, this is the file containing the main class where the ASP.NET Core middleware classes are configured as well as the dependency injection container.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Before modifying any code, we will proceed to configure first our application in Auth0. That configuration will give us access to the keys and authentication endpoints for the OpenID middleware in .NET Core.&lt;/p&gt;&lt;h2 id=&#34;Auth0-Configuration&#34;&gt;Auth0 Configuration&lt;/h2&gt;&lt;p&gt;To start, you need to access your &lt;a href=&#34;https://manage.auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Dashboard&lt;/a&gt;. If you don&amp;#39;t have an Auth0 account, you can &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free one&lt;/a&gt; right now!&lt;/p&gt;&lt;h3 id=&#34;Create-an-application-in-the-Auth0-Dashboard&#34;&gt;Create an application in the Auth0 Dashboard&lt;/h3&gt;&lt;p&gt;The first thing we will do is to create a new brand application in the Auth0 Dashboard. An Auth0 application is an entry point for getting the keys and endpoints we will need in our web application.&#xA;Go to your dashboard, click on the &lt;em&gt;Applications&lt;/em&gt; menu on the left, and then &lt;em&gt;Create Application&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/MTviQ3xdr6MFQQtkMFQ0n/123341f4c3cafaa17da2a8bac62e775e/auth0-dashboard-applications.png&#34; alt=&#34;Applications section in the Auth0 Dashboard&#34;/&gt;&lt;/p&gt;&lt;p&gt;The &lt;em&gt;Create Application&lt;/em&gt; button will start a wizard to define the configuration of our application. Pick a name for your web application, and select the option &lt;em&gt;Regular Web Applications&lt;/em&gt;. Do not confuse your application with a Single Page Web Application. Even if we are going to implement a SPA with React, we will rely on the .NET Core backend to negotiate the ID tokens. When choosing &lt;em&gt;Regular Web Applications&lt;/em&gt;, we are telling Auth0 that our application will use the &lt;a href=&#34;https://auth0.com/docs/flows/authorization-code-flow&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Authorization Code Flow&lt;/a&gt;, which requires a backend channel to receive the ID token for OpenID Connect, and that is exactly what we need to get that magic happening in our ASP.NET Core backend.&lt;/p&gt;&lt;p&gt; &lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/34sDIegR1jupeg8G8tJyjE/8bcef77e2d95415396876b996d8547c6/auth0-dashboard-create-application.png&#34; alt=&#34;Creating applications in the Auth0 Dashboard&#34;/&gt;&lt;/p&gt;&lt;p&gt;Once the application is created, go to the &lt;em&gt;Settings&lt;/em&gt; tab and take note of the following settings:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Domain&lt;/li&gt;&lt;li&gt;Client ID&lt;/li&gt;&lt;li&gt;Client Secret&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2YsEWLtSCwuUKt8ba2kRSx/e5d403296c36a4c506d87ce7b5dd711f/auth0-app-configuration-settings.png&#34; alt=&#34;Auth0 app configuration settings&#34;/&gt;&lt;/p&gt;&lt;p&gt;Those are the ones you will need to configure the OpenID middleware in the web application.&lt;/p&gt;&lt;h3 id=&#34;Configure-the-Callback-URL&#34;&gt;Configure the Callback URL&lt;/h3&gt;&lt;p&gt;The next thing is to configure the Callback URL for our web application. This is the URL where Auth0 will post the authorization code and ID token for OpenID Connect. &#xA;This URL can be added in the Allowed URLs field for our application. For our sample, we will use &lt;a href=&#34;https://localhost:5001/callback&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://localhost:5001/callback&lt;/a&gt;. If you are planning to deploy the application to a different URL, you will also need to ensure it is listed here.&lt;/p&gt;&lt;h3 id=&#34;Configure-the-Logout-URL&#34;&gt;Configure the Logout URL&lt;/h3&gt;&lt;p&gt;The logout URL is where Auth0 will redirect the user after the logout process has been completed. Our web application will pass this URL to Auth0 as part of &lt;a href=&#34;https://auth0.com/docs/logout/redirect-users-after-logout&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the &lt;code&gt;returnTo&lt;/code&gt; query string parameter&lt;/a&gt;. The logout URL for your app must be added to the &lt;em&gt;Allowed Logout URLs&lt;/em&gt; field under the application settings, or Auth0 will return an error otherwise when the user tries to do a logout. For our sample, we will use &lt;a href=&#34;https://localhost:5001&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://localhost:5001&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;Create-an-API-in-the-Auth0-Dashboard&#34;&gt;Create an API in the Auth0 Dashboard&lt;/h3&gt;&lt;p&gt;We also need to create an Auth0 API in the Auth0 Dashboard. So, go to the APIs section and click on &lt;em&gt;Create API&lt;/em&gt;, as shown in the following picture:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/41FoW31W6boGVYrtkfnyhK/2efc80b19495ecb27699ccc62052f14d/auth0-dashboard-create-api.png&#34; alt=&#34;Creating an API in the Auth0 Dashboard&#34;/&gt;&lt;/p&gt;&lt;p&gt;This will open a new window for configuring the API. Configure the following fields under the settings tab in that window.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;, a friendly name or description for the API. Enter &lt;strong&gt;Weather Forecast API&lt;/strong&gt; for this sample.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Identifier&lt;/strong&gt; or &lt;strong&gt;Audience&lt;/strong&gt;, which is an identifier that the client application uses to request access tokens for the API. Enter the string &lt;code&gt;https&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;weatherforecast&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Under the permissions tab, add a new permission &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;weather&lt;/code&gt; with the description &lt;em&gt;It allows getting the weather forecast&lt;/em&gt;. This is the scope that Auth0 will inject in the access token if the user approves it in the consent screen. &lt;/p&gt;&lt;p&gt;Finally, click on the Save button to save the changes. At this point, our API is ready to be used from .NET Core.&lt;/p&gt;&lt;h2 id=&#34;Configuring-the-ASP-NET-Core-Application&#34;&gt;Configuring the ASP.NET Core Application&lt;/h2&gt;&lt;p&gt;Our application will use two middleware: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;The OpenID Connect middleware for handling all the authentication handshake with Auth0.&lt;/li&gt;&lt;li&gt;The Authentication Cookie middleware for persisting the authentication session in a cookie also sharing it with the frontend running React.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Open the Package Manager Console for NuGet in Visual Studio and run the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Install-Package Microsoft.AspNetCore.Authentication.Cookies&#xA;Install-Package Microsoft.AspNetCore.Authentication.OpenIdConnect&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the Nuget packages are installed in our project, we can go ahead and configure the middleware in the &lt;code&gt;Startup&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; class under the root folder of the ASP.NET Core project.&lt;/p&gt;&lt;p&gt;Modify the &lt;code&gt;ConfigureServices&lt;/code&gt; method in that class to include the following code.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// BFF/Startup.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt; services&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        options&lt;span&gt;.&lt;/span&gt;DefaultAuthenticateScheme &lt;span&gt;=&lt;/span&gt; CookieAuthenticationDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;        options&lt;span&gt;.&lt;/span&gt;DefaultSignInScheme &lt;span&gt;=&lt;/span&gt; CookieAuthenticationDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;        options&lt;span&gt;.&lt;/span&gt;DefaultChallengeScheme &lt;span&gt;=&lt;/span&gt; CookieAuthenticationDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddCookie&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;o &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        o&lt;span&gt;.&lt;/span&gt;Cookie&lt;span&gt;.&lt;/span&gt;SecurePolicy &lt;span&gt;=&lt;/span&gt; CookieSecurePolicy&lt;span&gt;.&lt;/span&gt;Always&lt;span&gt;;&lt;/span&gt;&#xA;        o&lt;span&gt;.&lt;/span&gt;Cookie&lt;span&gt;.&lt;/span&gt;SameSite &lt;span&gt;=&lt;/span&gt; SameSiteMode&lt;span&gt;.&lt;/span&gt;Strict&lt;span&gt;;&lt;/span&gt;&#xA;        o&lt;span&gt;.&lt;/span&gt;Cookie&lt;span&gt;.&lt;/span&gt;HttpOnly &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddOpenIdConnect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; options &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;ConfigureOpenIdConnect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &#xA;    services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddHttpClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;   &lt;span&gt;// ...existing code...&lt;/span&gt;&#xA; &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureOpenIdConnect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;OpenIdConnectOptions&lt;/span&gt; options&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// Set the authority to your Auth0 domain&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Authority &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// Configure the Auth0 Client ID and Client Secret&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ClientId &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientId&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ClientSecret &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientSecret&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// Set response type to code&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ResponseType &lt;span&gt;=&lt;/span&gt; OpenIdConnectResponseType&lt;span&gt;.&lt;/span&gt;CodeIdToken&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    options&lt;span&gt;.&lt;/span&gt;ResponseMode &lt;span&gt;=&lt;/span&gt; OpenIdConnectResponseMode&lt;span&gt;.&lt;/span&gt;FormPost&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// Configure the scope&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Scope&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Clear&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Scope&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;openid&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Scope&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;offline_access&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;Scope&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;read:weather&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;// Set the callback path, so Auth0 will call back to http://localhost:3000/callback&lt;/span&gt;&#xA;    &lt;span&gt;// Also ensure that you have added the URL as an Allowed Callback URL in your Auth0 dashboard&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;CallbackPath &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;PathString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/callback&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// Configure the Claims Issuer to be Auth0&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;ClaimsIssuer &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// This saves the tokens in the session cookie&lt;/span&gt;&#xA;    options&lt;span&gt;.&lt;/span&gt;SaveTokens &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &#xA;    options&lt;span&gt;.&lt;/span&gt;Events &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;OpenIdConnectEvents&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;// handle the logout redirection&lt;/span&gt;&#xA;        OnRedirectToIdentityProviderForSignOut &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; logoutUri &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/v2/logout?client_id=&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ClientId&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; postLogoutUri &lt;span&gt;=&lt;/span&gt; context&lt;span&gt;.&lt;/span&gt;Properties&lt;span&gt;.&lt;/span&gt;RedirectUri&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsNullOrEmpty&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;postLogoutUri&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;postLogoutUri&lt;span&gt;.&lt;/span&gt;&lt;span&gt;StartsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;                &lt;span&gt;{&lt;/span&gt;&#xA;                    &lt;span&gt;// transform to absolute&lt;/span&gt;&#xA;                    &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; request &lt;span&gt;=&lt;/span&gt; context&lt;span&gt;.&lt;/span&gt;Request&lt;span&gt;;&lt;/span&gt;&#xA;                    postLogoutUri &lt;span&gt;=&lt;/span&gt; request&lt;span&gt;.&lt;/span&gt;Scheme &lt;span&gt;+&lt;/span&gt; &lt;span&gt;&amp;#34;://&amp;#34;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; request&lt;span&gt;.&lt;/span&gt;Host &lt;span&gt;+&lt;/span&gt; request&lt;span&gt;.&lt;/span&gt;PathBase &lt;span&gt;+&lt;/span&gt; postLogoutUri&lt;span&gt;;&lt;/span&gt;&#xA;                &lt;span&gt;}&lt;/span&gt;&#xA;                logoutUri &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;&amp;amp;returnTo=&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; Uri&lt;span&gt;.&lt;/span&gt;&lt;span&gt;EscapeDataString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;postLogoutUri&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;            context&lt;span&gt;.&lt;/span&gt;Response&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Redirect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;logoutUri&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            context&lt;span&gt;.&lt;/span&gt;&lt;span&gt;HandleResponse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;CompletedTask&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        OnRedirectToIdentityProvider &lt;span&gt;=&lt;/span&gt; context &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            context&lt;span&gt;.&lt;/span&gt;ProtocolMessage&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetParameter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;audience&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ApiAudience&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;CompletedTask&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This code configures the OpenID Connect middleware to point to Auth0 for authentication and the Cookie middleware for persisting the authentication session in cookies. Let&amp;#39;s discuss different parts of this code more in detail so you can understand what it does.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        options&lt;span&gt;.&lt;/span&gt;DefaultAuthenticateScheme &lt;span&gt;=&lt;/span&gt; CookieAuthenticationDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;        options&lt;span&gt;.&lt;/span&gt;DefaultSignInScheme &lt;span&gt;=&lt;/span&gt; CookieAuthenticationDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;        options&lt;span&gt;.&lt;/span&gt;DefaultChallengeScheme &lt;span&gt;=&lt;/span&gt; CookieAuthenticationDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddCookie&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;o &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        o&lt;span&gt;.&lt;/span&gt;Cookie&lt;span&gt;.&lt;/span&gt;SecurePolicy &lt;span&gt;=&lt;/span&gt; CookieSecurePolicy&lt;span&gt;.&lt;/span&gt;Always&lt;span&gt;;&lt;/span&gt;&#xA;        o&lt;span&gt;.&lt;/span&gt;Cookie&lt;span&gt;.&lt;/span&gt;SameSite &lt;span&gt;=&lt;/span&gt; SameSiteMode&lt;span&gt;.&lt;/span&gt;Strict&lt;span&gt;;&lt;/span&gt;&#xA;        o&lt;span&gt;.&lt;/span&gt;Cookie&lt;span&gt;.&lt;/span&gt;HttpOnly &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It configures authentication to rely on the session cookie as the primary authentication mechanism if no other is specified in one of the web application&amp;#39;s controllers. It also injects the cookie middleware with a few settings that restrict how the cookie can be used on the browsers. In our case, the cookie can only be used under HTTPS (&lt;code&gt;CookieSecurePolicy&lt;span&gt;.&lt;/span&gt;Always&lt;/code&gt;), it&amp;#39;s not available on the client side (&lt;code&gt;HttpOnly &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;/code&gt;), and uses a site policy equals to strict (&lt;code&gt;SameSiteMode&lt;span&gt;.&lt;/span&gt;Strict&lt;/code&gt;). This last one implies the cookie will only be sent if the domain for the cookie matches exactly the domain in the browser&amp;#39;s URL. All these settings help to prevent potential attacks with scripting on the client side.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;options&lt;span&gt;.&lt;/span&gt;ResponseType &lt;span&gt;=&lt;/span&gt; OpenIdConnectResponseType&lt;span&gt;.&lt;/span&gt;CodeIdToken&lt;span&gt;;&lt;/span&gt;&#xA;options&lt;span&gt;.&lt;/span&gt;ResponseMode &lt;span&gt;=&lt;/span&gt; OpenIdConnectResponseMode&lt;span&gt;.&lt;/span&gt;FormPost&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The OpenID Connect middleware is configured to use &lt;code&gt;ResponseType&lt;/code&gt; equals to &lt;code&gt;CodeIdToken&lt;/code&gt; (&lt;a href=&#34;https://auth0.com/docs/flows/hybrid-flow&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Hybrid flow&lt;/a&gt;), which means our web application will receive an authorization code and ID token directly from the authorization endpoint right after the user is authenticated. We will use the authorization code in exchange for an access token for calling a backend API hosted on a different site. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Configure the scope&lt;/span&gt;&#xA;options&lt;span&gt;.&lt;/span&gt;Scope&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Clear&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;options&lt;span&gt;.&lt;/span&gt;Scope&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;openid&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;options&lt;span&gt;.&lt;/span&gt;Scope&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;offline_access&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;options&lt;span&gt;.&lt;/span&gt;Scope&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;read:weather&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;openid&lt;/code&gt; scope is required as part of the OpenID Connect authentication flow. The &lt;code&gt;offline_access&lt;/code&gt; is for requesting a &lt;a href=&#34;https://auth0.com/docs/tokens/refresh-tokens&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;refresh token&lt;/a&gt; and &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;weather&lt;/code&gt; is specific to the API we will call later as part of this sample.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;options&lt;span&gt;.&lt;/span&gt;SaveTokens &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;SaveTokens&lt;/code&gt; option tells the OpenID Connect middleware that all the tokens (id token, refresh token, and access token) received from the authorization endpoint during the initial handshake must be persisted for later use. By default, the middleware persists those tokens in the encrypted session cookie, and we will use that for our sample.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;OnRedirectToIdentityProvider &lt;span&gt;=&lt;/span&gt; context &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    context&lt;span&gt;.&lt;/span&gt;ProtocolMessage&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetParameter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;audience&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:ApiAudience&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;CompletedTask&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The OpenID Connect middleware does not have any property to configure the &lt;code&gt;audience&lt;/code&gt; parameter that Auth0 requires for returning an authorization code for an API. We are attaching some code to the &lt;code&gt;OnRedirectToIdentityProvider&lt;/code&gt; event for setting that parameter before the user is redirected to Auth0 for authentication.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddHttpClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The extension method &lt;code&gt;AddHttpClient&lt;/code&gt; injects an &lt;code&gt;IHttpClientFactory&lt;/code&gt; with default settings to create instances of the class &lt;code&gt;HttpClient&lt;/code&gt;. We will use it to make calls to the external API.&lt;/p&gt;&lt;p&gt;The next step is to modify the &lt;code&gt;Configure&lt;/code&gt; method to tell ASP.NET Core that we want to use the authentication and authorization middleware. Those middleware will integrate automatically with the authentication session cookies.&lt;/p&gt;&lt;p&gt;Insert the following code as it is shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Startup.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Configure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IApplicationBuilder&lt;/span&gt; app&lt;span&gt;,&lt;/span&gt; &lt;span&gt;IWebHostEnvironment&lt;/span&gt; env&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;    app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseRouting&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// Code goes here&lt;/span&gt;&#xA;    app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseEndpoints&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;endpoints &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;      endpoints&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapControllerRoute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;pattern&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;{controller}/{action=Index}/{id?}&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;     &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &#xA;    &lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Update the existing &lt;code&gt;appSettings&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; file and include the settings we got from the Auth0 Dashboard before. Those are &lt;em&gt;Domain&lt;/em&gt;, &lt;em&gt;Client ID&lt;/em&gt;, &lt;em&gt;Client Secret&lt;/em&gt;, and &lt;em&gt;ApiAudience&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Logging&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;LogLevel&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Default&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Information&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Microsoft&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Warning&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Microsoft.Hosting.Lifetime&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Information&amp;#34;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;AllowedHosts&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Domain&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;lt;domain&amp;gt;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;ClientId&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;lt;client id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;ClientSecret&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;lt;client secret&amp;gt;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;ApiAudience&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;https://weatherforecast&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Add-the-ASP-NET-Core-Controllers-for-handling-authentication&#34;&gt;Add the ASP.NET Core Controllers for handling authentication&lt;/h3&gt;&lt;p&gt;Create a new ASP.NET controller in the &lt;code&gt;Controllers&lt;/code&gt; folder and call it &lt;code&gt;AuthController&lt;/code&gt;. This controller has three actions.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Login&lt;/code&gt; for initiating the OpenID Connect login handshake with Auth0.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Logout&lt;/code&gt; for logging out from the web application and also from Auth0.&lt;/li&gt;&lt;li&gt;&lt;code&gt;GetUser&lt;/code&gt; for getting data about the authenticated user in the current session. This is an API that the React application will invoke to get the authentication context for the user.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This is the code for the &lt;code&gt;Login&lt;/code&gt; action:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// BFF/Controllers/AuthController.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ActionResult&lt;/span&gt; &lt;span&gt;Login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; returnUrl &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ChallengeResult&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;AuthenticationProperties&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; RedirectUri &lt;span&gt;=&lt;/span&gt; returnUrl &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is an action that returns a &lt;code&gt;ChallengeResult&lt;/code&gt; with the authentication schema to be used. In this case, it is Auth0, which is the schema we associated with our OpenID Connect middleware in the &lt;code&gt;Startup&lt;/code&gt; class. This result is a built-in class shipped with ASP.NET Core to initiate an authentication handshake from the authentication middleware.&lt;/p&gt;&lt;p&gt;The logout action looks as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// BFF/Controllers/AuthController.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Authorize&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ActionResult&lt;/span&gt; &lt;span&gt;Logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;SignOutResult&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;AuthenticationProperties&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    RedirectUri &lt;span&gt;=&lt;/span&gt; Url&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Action&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Index&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;Home&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It returns a &lt;code&gt;SignOutResult&lt;/code&gt; that will log the user out of the application and also initiate the sign-out process with Auth0. As it happened with the &lt;code&gt;ChallengeResult&lt;/code&gt;, this &lt;code&gt;SignOutResult&lt;/code&gt; is also a built-in result that the authentication middleware will process. We also decorated the action with the &lt;code&gt;&lt;span&gt;[&lt;/span&gt;Authorize&lt;span&gt;]&lt;/span&gt;&lt;/code&gt; attribute as it should only be invoked if the user is authenticated.&lt;/p&gt;&lt;p&gt;Finally, the &lt;code&gt;GetUser&lt;/code&gt; API code is the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// BFF/Controllers/AuthController.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ActionResult&lt;/span&gt; &lt;span&gt;GetUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;User&lt;span&gt;.&lt;/span&gt;Identity&lt;span&gt;.&lt;/span&gt;IsAuthenticated&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; claims &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;ClaimsIdentity&lt;span&gt;)&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;User&lt;span&gt;.&lt;/span&gt;Identity&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;Claims&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;c &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;                    &lt;span&gt;new&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; type &lt;span&gt;=&lt;/span&gt; c&lt;span&gt;.&lt;/span&gt;Type&lt;span&gt;,&lt;/span&gt; &lt;span&gt;value&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; c&lt;span&gt;.&lt;/span&gt;Value &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;                    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;ToArray&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Json&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; isAuthenticated &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; claims &lt;span&gt;=&lt;/span&gt; claims &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA; &lt;span&gt;}&lt;/span&gt;&#xA;&#xA; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Json&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; isAuthenticated &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the user is authenticated, it returns the user identity as a set of claims serialized as JSON. Otherwise, it just returns a flag indicating the user is not authenticated.&lt;/p&gt;&lt;h3 id=&#34;Require-authentication-in-other-controllers&#34;&gt;Require authentication in other controllers&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;WeatherForecast&lt;/code&gt; controller included in the template allows anonymous calls. To make it more interesting in our sample, we will convert it to require authenticated calls. Fortunately, that is as simple as adding a top-level &lt;code&gt;Authorize&lt;/code&gt; attribute in the class definition.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// BFF/Controllers/WeatherForecastController.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;ApiController&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Authorize&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Route&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;[controller]&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;WeatherForecastController&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;ControllerBase&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Negotiate-an-Access-Token-and-call-a-remote-API&#34;&gt;Negotiate an Access Token and call a remote API&lt;/h3&gt;&lt;p&gt;We will convert the &lt;code&gt;WeatherForecast&lt;/code&gt; controller in our web application to act as a reverse proxy and call the equivalent API hosted remotely on a different site. This API will require an access token, so the controller will have to negotiate first the authorization code that is persisted in the session cookie.&lt;/p&gt;&lt;pre&gt;&lt;code&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;WeatherForecastController&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;IHttpClientFactory&lt;/span&gt; httpClientFactory&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;IConfiguration&lt;/span&gt; configuration&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    _httpClientFactory &lt;span&gt;=&lt;/span&gt; httpClientFactory&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;WeatherApiEndpoint&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ArgumentNullException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;The Weather Api Endpoint is missing from the configuration&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    _apiEndpoint &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Uri&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;WeatherApiEndpoint&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; UriKind&lt;span&gt;.&lt;/span&gt;Absolute&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The constructor on this controller receives an instance of an &lt;code&gt;IHttpClientFactory&lt;/code&gt; that we previously registered in the &lt;code&gt;Startup&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; file for creating &lt;code&gt;HttpClient&lt;/code&gt; instances and an instance of &lt;code&gt;IConfiguration&lt;/code&gt; to retrieve settings from the configuration file. The endpoint for the Weather API is retrieved from the configuration using the &lt;code&gt;WeatherApiEndpoint&lt;/code&gt; key. That key in the &lt;code&gt;appSettings&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; only references the URL for the remote API as it is shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// appSettings.json&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// ... other settings ...&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;WeatherApiEndpoint&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;https://localhost:44385/&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The following code shows the implementation of the &lt;code&gt;Get&lt;/code&gt; method. This is the actual remote API invoked by passing the expected authorization headers:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// BFF/Controllers/WeatherForecastController.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;HttpGet&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;Task&lt;/span&gt; &lt;span&gt;Get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; accessToken &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; HttpContext&lt;span&gt;.&lt;/span&gt;&lt;span&gt;GetTokenAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;access_token&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; httpClient &lt;span&gt;=&lt;/span&gt; _httpClientFactory&lt;span&gt;.&lt;/span&gt;&lt;span&gt;CreateClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; request &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;HttpRequestMessage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;HttpMethod&lt;span&gt;.&lt;/span&gt;Get&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Uri&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_apiEndpoint&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;WeatherForecast&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    request&lt;span&gt;.&lt;/span&gt;Headers&lt;span&gt;.&lt;/span&gt;Authorization &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;AuthenticationHeaderValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Bearer&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; accessToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; response &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; httpClient&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SendAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;request&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    response&lt;span&gt;.&lt;/span&gt;&lt;span&gt;EnsureSuccessStatusCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;await&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;Content&lt;span&gt;.&lt;/span&gt;&lt;span&gt;CopyToAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;HttpContext&lt;span&gt;.&lt;/span&gt;Response&lt;span&gt;.&lt;/span&gt;Body&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The trick for getting the access token is in the following line,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; accessToken &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; HttpContext&lt;span&gt;.&lt;/span&gt;&lt;span&gt;GetTokenAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;access_token&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;GetTokenAsync&lt;/code&gt; is an extension method available as part of the authentication middleware in ASP.NET Core. The first argument specifies the authentication schema to be used to get the token, which is our OpenID Connect middleware configured with the name &amp;#34;Auth0&amp;#34;. The second argument is the token to be used. In the case of OpenID Connect, the possible values are &amp;#34;access_token&amp;#34; or &amp;#34;id_token&amp;#34;. If the access token is not available or already expired, the middleware will use the refresh token and authorization code to get one. Since our middleware was pointing to the &lt;code&gt;WeatherForecast&lt;/code&gt; API with the audience attribute and the scope we previously configured, Auth0 will return an access token for that API.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; httpClient &lt;span&gt;=&lt;/span&gt; _httpClientFactory&lt;span&gt;.&lt;/span&gt;&lt;span&gt;CreateClient&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; request &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;HttpRequestMessage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;HttpMethod&lt;span&gt;.&lt;/span&gt;Get&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Uri&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_apiEndpoint&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;WeatherForecast&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;request&lt;span&gt;.&lt;/span&gt;Headers&lt;span&gt;.&lt;/span&gt;Authorization &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;AuthenticationHeaderValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Bearer&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; accessToken&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; response &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; httpClient&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SendAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;request&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;response&lt;span&gt;.&lt;/span&gt;&lt;span&gt;EnsureSuccessStatusCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;await&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;Content&lt;span&gt;.&lt;/span&gt;&lt;span&gt;CopyToAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;HttpContext&lt;span&gt;.&lt;/span&gt;Response&lt;span&gt;.&lt;/span&gt;Body&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code above forwards the request to the remote API using a new instance of &lt;code&gt;HttpClient&lt;/code&gt; created with the &lt;code&gt;IHttpClientFactory&lt;/code&gt; injected in the constructor. The access token is passed as a &lt;em&gt;Bearer&lt;/em&gt; token in the authorization header.&lt;/p&gt;&lt;h2 id=&#34;Configuring-the-Remote-API&#34;&gt;Configuring the Remote API&lt;/h2&gt;&lt;p&gt;As the remote API, we will use the one provided with Visual Studio&amp;#39;s ASP.NET Web API template that returns the weather forecast data.&lt;/p&gt;&lt;h3 id=&#34;Create-the-ASP-NET-Core-API-in-Visual-Studio&#34;&gt;Create the ASP.NET Core API in Visual Studio&lt;/h3&gt;&lt;p&gt;Visual Studio ships with a single template for .NET Core APIs. That is &lt;em&gt;ASP.NET Core Web API&lt;/em&gt;, as it is shown in the image below.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2BaHhqSQTjwbHWK9jjcP9X/31a204c719db633e53220a2563d68208/aspnet-visual-studio-template.png&#34; alt=&#34;ASP.NET template in Visual Studio&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;The-structure-of-the-project&#34;&gt;The structure of the project&lt;/h3&gt;&lt;p&gt;Projects created with that template from Visual Studio will have the following structure:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Controllers&lt;/code&gt;, this folder contains the controllers for the API implementation.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Startup&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt;, this is the main class where the ASP.NET Core middleware classes and the dependency injection container are configured.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Configuring-the-project&#34;&gt;Configuring the project&lt;/h3&gt;&lt;p&gt;Our application will only use the middleware for supporting authentication with JWT as bearer tokens.&lt;/p&gt;&lt;p&gt;Open the Package Manager Console for NuGet in Visual Studio and run the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Install-Package Microsoft.AspNetCore.Authentication.JwtBearer&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the NuGet packages are installed in our project, we can go ahead and configure them in the &lt;code&gt;Startup&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; class file.&lt;/p&gt;&lt;p&gt;Modify the &lt;code&gt;ConfigureServices&lt;/code&gt; method in that class to include the following code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Api/Startup.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt; services&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; authentication &lt;span&gt;=&lt;/span&gt; services&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;JwtBearerDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddJwtBearer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Bearer&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; c &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;        c&lt;span&gt;.&lt;/span&gt;Authority &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        c&lt;span&gt;.&lt;/span&gt;TokenValidationParameters &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;TokenValidationParameters&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            ValidateAudience &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            ValidAudiences &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Audience&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Split&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            ValidateIssuer &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            ValidIssuer &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddControllers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &#xA;    services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddSwaggerGen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;c &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        c&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SwaggerDoc&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;OpenApiInfo&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Title &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Api&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; Version &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;v1&amp;#34;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;o &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        o&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddPolicy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;read:weather&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; p &lt;span&gt;=&amp;gt;&lt;/span&gt; p&lt;span&gt;.&lt;/span&gt;&#xA;            &lt;span&gt;RequireAuthenticatedUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;            &lt;span&gt;RequireScope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;read:weather&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This code performs two things. It configures the JWT middleware to accept access tokens issued by Auth0 and defines an authorization policy for checking the scope set on the token. &#xA;The policy checks for a claim or attribute called &lt;em&gt;scope&lt;/em&gt; with a value &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;weather&lt;/code&gt;, which is the scope we previously configured for our API in the Auth0 dashboard. &#xA;&lt;code&gt;RequireScope&lt;/code&gt; is a custom extension we will write as part of this sample to check for the scope present in the JWT access token.&lt;/p&gt;&lt;p&gt;The next step is to modify the &lt;code&gt;Configure&lt;/code&gt; method to tell ASP.NET Core that we want to use the authentication and authorization middleware. That middleware will integrate automatically with the authentication session cookies.&lt;/p&gt;&lt;p&gt;Insert the new code as shown below in the &lt;code&gt;Startup&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Api/Startup.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Configure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IApplicationBuilder&lt;/span&gt; app&lt;span&gt;,&lt;/span&gt; &lt;span&gt;IWebHostEnvironment&lt;/span&gt; env&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;  &#xA;  app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseRouting&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &#xA;  app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseEndpoints&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;endpoints &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    endpoints&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapControllers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Update the existing &lt;code&gt;appSettings&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; file and include the settings we got from the Auth0 dashboard before. Those are &lt;em&gt;Domain&lt;/em&gt; and API&amp;#39;s &lt;em&gt;Audience&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Logging&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;LogLevel&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Default&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Information&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Microsoft&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Warning&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;Microsoft.Hosting.Lifetime&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Information&amp;#34;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;AllowedHosts&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Domain&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;lt;domain&amp;gt;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Audience&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;https://weatherforecast&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;RequireScope-policy&#34;&gt;RequireScope policy&lt;/h3&gt;&lt;p&gt;ASP.NET Core does not include any policy out of the box for checking an individual scope in a JWT access token. To overcome this shortcoming, we will create a custom policy. For this purpose, create a new &lt;code&gt;Authorization&lt;/code&gt; folder. Then add three new files on it, &lt;code&gt;ScopeHandler&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt;, &lt;code&gt;ScopeRequirement&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt;, and  &lt;code&gt;AuthorizationPolicyBuilderExtensions&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt;. We will discuss the purpose of each one next. &lt;/p&gt;&lt;p&gt;Add a new file &lt;code&gt;ScopeHandler&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; to the &lt;code&gt;Authorization&lt;/code&gt; folder with the following content:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Api/Authorization/ScopeHandler.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;Microsoft&lt;span&gt;.&lt;/span&gt;AspNetCore&lt;span&gt;.&lt;/span&gt;Authorization&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Collections&lt;span&gt;.&lt;/span&gt;Generic&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Linq&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Threading&lt;span&gt;.&lt;/span&gt;Tasks&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;Api&lt;span&gt;.&lt;/span&gt;Authorization&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ScopeHandler&lt;/span&gt; &lt;span&gt;:&lt;/span&gt;&#xA;             &lt;span&gt;&lt;span&gt;AuthorizationHandler&lt;span&gt;&amp;lt;&lt;/span&gt;ScopeRequirement&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;Task&lt;/span&gt; &lt;span&gt;HandleRequirementAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;          &lt;span&gt;AuthorizationHandlerContext&lt;/span&gt; context&lt;span&gt;,&lt;/span&gt;&#xA;          &lt;span&gt;ScopeRequirement&lt;/span&gt; requirement&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context &lt;span&gt;is&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ArgumentNullException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;nameof&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;context&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; success &lt;span&gt;=&lt;/span&gt; context&lt;span&gt;.&lt;/span&gt;User&lt;span&gt;.&lt;/span&gt;Claims&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Any&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;c &lt;span&gt;=&amp;gt;&lt;/span&gt; c&lt;span&gt;.&lt;/span&gt;Type &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#34;scope&amp;#34;&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &#xA;                c&lt;span&gt;.&lt;/span&gt;Value&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;requirement&lt;span&gt;.&lt;/span&gt;Scope&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;success&lt;span&gt;)&lt;/span&gt;&#xA;                context&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Succeed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;requirement&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;            &#xA;            &lt;span&gt;return&lt;/span&gt; Task&lt;span&gt;.&lt;/span&gt;CompletedTask&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The authentication middleware parses the JWT access token and converts each attribute in the token as a claim attached to the current user in context. Our policy handler uses the claim associated with the scope for checking that the expected scope is there (&lt;code&gt;read&lt;span&gt;:&lt;/span&gt;weather&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;Every implementation of &lt;code&gt;AuthorizationHandler&lt;/code&gt; must be associated with an implementation of &lt;code&gt;IAuthorizationRequirement&lt;/code&gt; that describes the authorization requirements for the handler. In our case, the implementation looks as it is described in the following.&lt;/p&gt;&lt;p&gt;Add the following content in the &lt;code&gt;ScopeRequirement&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; file,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Api/Authorization/ScopeRequirement.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;Microsoft&lt;span&gt;.&lt;/span&gt;AspNetCore&lt;span&gt;.&lt;/span&gt;Authorization&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Collections&lt;span&gt;.&lt;/span&gt;Generic&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Linq&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Threading&lt;span&gt;.&lt;/span&gt;Tasks&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;Api&lt;span&gt;.&lt;/span&gt;Authorization&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ScopeRequirement&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;IAuthorizationRequirement&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; Scope &lt;span&gt;{&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ScopeRequirement&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; scope&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            Scope &lt;span&gt;=&lt;/span&gt; scope&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&amp;#39;s a very simple implementation that describes a requirement in terms of a scope. That&amp;#39;s the expected scope in the JWT Access Token.&lt;/p&gt;&lt;p&gt;Finally, the class &lt;code&gt;AuthorizationPolicyBuilderExtensions&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; includes the &lt;code&gt;RequireScope&lt;/code&gt; extension method for injecting the &lt;code&gt;ScopeHandler&lt;/code&gt; instance in the &lt;code&gt;Startup&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; class when the policy is configured.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Api/Authorization/AuthorizationPolicyBuilderExtensions.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;Microsoft&lt;span&gt;.&lt;/span&gt;AspNetCore&lt;span&gt;.&lt;/span&gt;Authorization&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Collections&lt;span&gt;.&lt;/span&gt;Generic&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Linq&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Threading&lt;span&gt;.&lt;/span&gt;Tasks&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;Api&lt;span&gt;.&lt;/span&gt;Authorization&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;AuthorizationPolicyBuilderExtensions&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;AuthorizationPolicyBuilder&lt;/span&gt; &lt;span&gt;RequireScope&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt; &lt;span&gt;AuthorizationPolicyBuilder&lt;/span&gt; builder&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; scope&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; builder&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddRequirements&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;ScopeRequirement&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;scope&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Require-authentication-in-the-API-controller&#34;&gt;Require authentication in the API controller&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;WeatherForecast&lt;/code&gt; controller included in the template allows anonymous calls. We will convert it to require authenticated calls using the &lt;code&gt;Authorize&lt;/code&gt; attribute. That attribute will also reference the policy we previously defined in the &lt;code&gt;Startup&lt;span&gt;.&lt;/span&gt;cs&lt;/code&gt; file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Api/Controllers/WeatherForecastController.cs&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;ApiController&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Route&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;[controller]&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;WeatherForecastController&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;ControllerBase&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;HttpGet&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;  &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;Authorize&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;read:weather&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;IEnumerable&lt;span&gt;&amp;lt;&lt;/span&gt;WeatherForecast&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    &#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This attribute will do two things,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;It will activate the authorization middleware that will check if the call was authenticated and there is one user identity set in the current execution context.&lt;/li&gt;&lt;li&gt;It will run the &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;weather&lt;/code&gt; policy to make sure the user identity contains the required permissions. In our case, it will check the access token includes a scope called &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;weather&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Once we run this project in Visual Studio, the API will only accept authenticated calls with access tokens coming from Auth0.&lt;/p&gt;&lt;h2 id=&#34;Securing-the-React-Application&#34;&gt;Securing the React Application&lt;/h2&gt;&lt;p&gt;So far, we have added all the plumbing code on the backend to enable authentication with Auth0 using OpenID Connect. The backend handles user authentication and configures a cookie that we can share with the React app. We also added a &lt;code&gt;GetUser&lt;/code&gt; API that can be used to determine whether the user is authenticated and get basic identity information about them. Let&amp;#39;s now see the needed changes for the React client application.&lt;/p&gt;&lt;h3 id=&#34;React-Context-for-Authentication&#34;&gt;React Context for Authentication&lt;/h3&gt;&lt;p&gt;As authentication is a core concern that we will use across all the components in the React application, it makes sense to make it available as a global context using &lt;a href=&#34;https://reactjs.org/docs/context.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the context pattern&lt;/a&gt;. &#xA;Move into &lt;code&gt;&lt;span&gt;BFF&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;ClientApp&lt;span&gt;/&lt;/span&gt;src&lt;/code&gt; folder and create a &lt;code&gt;context&lt;/code&gt; folder. Then add a file &lt;code&gt;AuthContext&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; to the newly created folder. Paste the following code on the file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// BFF/ClientApp/src/context/AuthContext.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; React&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; useState&lt;span&gt;,&lt;/span&gt; useEffect&lt;span&gt;,&lt;/span&gt; useContext &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; AuthContext &lt;span&gt;=&lt;/span&gt; React&lt;span&gt;.&lt;/span&gt;&lt;span&gt;createContext&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;useAuth&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;useContext&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;AuthContext&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;AuthProvider&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    children&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;isAuthenticated&lt;span&gt;,&lt;/span&gt; setIsAuthenticated&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;useState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;user&lt;span&gt;,&lt;/span&gt; setUser&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;useState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;isLoading&lt;span&gt;,&lt;/span&gt; setIsLoading&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;useState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;getUser&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;const&lt;/span&gt; response &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; &lt;span&gt;fetch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/auth/getUser&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;const&lt;/span&gt; json &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;setIsAuthenticated&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;json&lt;span&gt;.&lt;/span&gt;isAuthenticated&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;setIsLoading&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;json&lt;span&gt;.&lt;/span&gt;isAuthenticated&lt;span&gt;)&lt;/span&gt; &lt;span&gt;setUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;json&lt;span&gt;.&lt;/span&gt;claims&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;useEffect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;getUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;login&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        window&lt;span&gt;.&lt;/span&gt;location&lt;span&gt;.&lt;/span&gt;href &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;/auth/login&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;logout&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        window&lt;span&gt;.&lt;/span&gt;location&lt;span&gt;.&lt;/span&gt;href &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;/auth/logout&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;AuthContext&lt;span&gt;.&lt;/span&gt;Provider&#xA;            value&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;                isAuthenticated&lt;span&gt;,&lt;/span&gt;&#xA;                user&lt;span&gt;,&lt;/span&gt;&#xA;                isLoading&lt;span&gt;,&lt;/span&gt;&#xA;                login&lt;span&gt;,&lt;/span&gt;&#xA;                logout&#xA;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;children&lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;AuthContext&lt;span&gt;.&lt;/span&gt;Provider&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This context object provides methods for starting the login and logout handshake with the backend and getting the authenticated user.&lt;/p&gt;&lt;p&gt;Modify the &lt;code&gt;index&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; file to reference this context provider.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// BFF/ClientApp/src/index.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;ReactDOM&lt;span&gt;.&lt;/span&gt;&lt;span&gt;render&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;AuthProvider&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;BrowserRouter basename&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;baseUrl&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;&amp;lt;&lt;/span&gt;App &lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;BrowserRouter&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;AuthProvider&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    rootElement&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Add-the-login-and-logout-routes&#34;&gt;Add the login and logout routes&lt;/h3&gt;&lt;p&gt;The React Router configuration uses the authentication context to redirect the user to login and logout URLs on the backend. It also forces the user authentication for routes that are protected, such as the one for fetching the weather data. &lt;/p&gt;&lt;p&gt;To add these protected routes, modify the &lt;code&gt;App&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; file to include this code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// BFF/ClientApp/src/App.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Redirect&lt;span&gt;,&lt;/span&gt; Route &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#39;react-router&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Layout &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#39;./components/Layout&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Home &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#39;./components/Home&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; FetchData &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#39;./components/FetchData&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; useAuth &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#39;./context/AuthContext&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&amp;#39;./custom.css&amp;#39;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; isAuthenticated&lt;span&gt;,&lt;/span&gt; login&lt;span&gt;,&lt;/span&gt; logout &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;useAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;Layout&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;&amp;lt;&lt;/span&gt;Route exact path&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;/&amp;#39;&lt;/span&gt; component&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;Home&lt;span&gt;}&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;&amp;lt;&lt;/span&gt;Route path&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;/fetch-data&amp;#39;&lt;/span&gt; component&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;isAuthenticated &lt;span&gt;?&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;FetchData &lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;&amp;lt;&lt;/span&gt;Route path&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;/login&amp;#39;&lt;/span&gt; component&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;login&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;&amp;lt;&lt;/span&gt;Route path&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;/logout&amp;#39;&lt;/span&gt; component&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;logout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;Route&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;Layout&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; App&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;fetch&lt;span&gt;-&lt;/span&gt;data&lt;/code&gt; route, for example, checks if the user is authenticated before returning the &lt;code&gt;FetchData&lt;/code&gt; component. If the user is not authenticated, it calls the &lt;code&gt;login&lt;/code&gt; function in the authentication context, which ultimately redirects the user to the &lt;code&gt;Login&lt;/code&gt; endpoint in the backend.&lt;/p&gt;&lt;p&gt;Another very common feature in web applications is to make menu options visible or not, depending on the user authentication status.&#xA;As we did in the React Router, the same thing can be accomplished for the menu options using the &lt;code&gt;isAuthenticated&lt;/code&gt; function from the authentication context.&lt;/p&gt;&lt;p&gt;So, move to the &lt;code&gt;ClientApp&lt;span&gt;/&lt;/span&gt;src&lt;span&gt;/&lt;/span&gt;components&lt;/code&gt; folder. Then modify the &lt;code&gt;NavMenu&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; file to check the authentication status as it is shown below.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// BFF/ClientApp/src/components/NavMenu.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&#xA;&#xA;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;header&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;&amp;lt;&lt;/span&gt;Navbar className&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3&amp;#34;&lt;/span&gt; light&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                &lt;span&gt;&amp;lt;&lt;/span&gt;Container&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&amp;lt;&lt;/span&gt;NavbarBrand tag&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;Link&lt;span&gt;}&lt;/span&gt; to&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Auth0 Backend For FrontEnd Authentication&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;NavbarBrand&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&amp;lt;&lt;/span&gt;NavbarToggler onClick&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;toggleNavbar&lt;span&gt;}&lt;/span&gt; className&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;mr-2&amp;#34;&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&amp;lt;&lt;/span&gt;Collapse className&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;d-sm-inline-flex flex-sm-row-reverse&amp;#34;&lt;/span&gt; isOpen&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;collapsed&lt;span&gt;}&lt;/span&gt; navbar&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&amp;lt;&lt;/span&gt;ul className&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;navbar-nav flex-grow&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                            &lt;span&gt;&amp;lt;&lt;/span&gt;NavItem&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                                &lt;span&gt;&amp;lt;&lt;/span&gt;NavLink tag&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;Link&lt;span&gt;}&lt;/span&gt; className&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;text-dark&amp;#34;&lt;/span&gt; to&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Home&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;NavLink&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;NavItem&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                            &lt;span&gt;&amp;lt;&lt;/span&gt;NavItem&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                                &lt;span&gt;&amp;lt;&lt;/span&gt;NavLink tag&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;Link&lt;span&gt;}&lt;/span&gt; className&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;text-dark&amp;#34;&lt;/span&gt; to&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;/fetch-data&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Fetch data&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;NavLink&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;NavItem&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                            &lt;span&gt;&amp;lt;&lt;/span&gt;NavItem&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                            &lt;span&gt;{&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;isAuthenticated &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;NavItem&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                                &lt;span&gt;&amp;lt;&lt;/span&gt;NavLink tag&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;Link&lt;span&gt;}&lt;/span&gt; className&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;text-dark&amp;#34;&lt;/span&gt; to&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Login&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;NavLink&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;NavItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;                            &lt;span&gt;{&lt;/span&gt;isAuthenticated &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;NavItem&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                                &lt;span&gt;&amp;lt;&lt;/span&gt;NavLink tag&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;Link&lt;span&gt;}&lt;/span&gt; className&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;text-dark&amp;#34;&lt;/span&gt; to&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;/logout&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Logout&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;NavLink&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;NavItem&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;ul&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;Collapse&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;Container&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;Navbar&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;header&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA; &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;                             &#xA;&lt;span&gt;// ...existing code...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Add-a-component-to-show-user-data&#34;&gt;Add a component to show user data&lt;/h3&gt;&lt;p&gt;The authentication context provides a &lt;code&gt;getUser&lt;/code&gt; function in case you want to show the user&amp;#39;s basic data coming from Auth0 on the React application. That function returns a collection of claims about the user&amp;#39;s identity coming from the backend API &lt;code&gt;GetUser&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;The following code shows a component that enumerates those claims.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// BFF/ClientApp/src/components/User.js&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; React&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; useEffect&lt;span&gt;,&lt;/span&gt; useState &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#39;react&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; useAuth &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#39;../context/AuthContext&amp;#39;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;User&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; user &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;useAuth&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;renderClaimsTable&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;claims&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;&amp;lt;&lt;/span&gt;table className&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;table table-striped&amp;#39;&lt;/span&gt; aria&lt;span&gt;-&lt;/span&gt;labelledby&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;tabelLabel&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                &lt;span&gt;&amp;lt;&lt;/span&gt;thead&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&amp;lt;&lt;/span&gt;tr&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&amp;lt;&lt;/span&gt;th&lt;span&gt;&amp;gt;&lt;/span&gt;Type&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;th&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&amp;lt;&lt;/span&gt;th&lt;span&gt;&amp;gt;&lt;/span&gt;Value&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;th&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;tr&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;thead&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                &lt;span&gt;&amp;lt;&lt;/span&gt;tbody&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                    &lt;span&gt;{&lt;/span&gt;claims&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;claim&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&amp;lt;&lt;/span&gt;tr key&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;claim&lt;span&gt;.&lt;/span&gt;type&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                            &lt;span&gt;&amp;lt;&lt;/span&gt;td&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;claim&lt;span&gt;.&lt;/span&gt;type&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;td&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                            &lt;span&gt;&amp;lt;&lt;/span&gt;td&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;claim&lt;span&gt;.&lt;/span&gt;value&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;td&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;tr&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;                    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;tbody&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;table&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;&amp;lt;&lt;/span&gt;h1 id&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;tabelLabel&amp;#34;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;User claims&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;h1&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;span&gt;&amp;gt;&lt;/span&gt;This component demonstrates fetching user identity claims &lt;span&gt;from&lt;/span&gt; the server&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;p&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&lt;span&gt;renderClaimsTable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;user&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Run-the-Web-Application&#34;&gt;Run the Web Application&lt;/h2&gt;&lt;p&gt;From Visual Studio, click on the Run button but select your project name from the dropdown option instead of &amp;#34;IIS Express&amp;#34;. That will run the application using the Kestrel, the built-in web server included in .NET Core. Kestrel runs on &amp;#34;&lt;a href=&#34;https://localhost:5001&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://localhost:5001&lt;/a&gt;&amp;#34;, which is the URL we previously configured in Auth0.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1VJBYyC1Z9GUCS5VQRA1dT/4b16fd875e261f2aa17cb968f1f01187/run-bff-application.png&#34; alt=&#34;Running your application&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;About-the-Login-Flow&#34;&gt;About the Login Flow&lt;/h2&gt;&lt;p&gt;Here is what happens when the user authenticates with the application we have built:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The user clicks on the &lt;em&gt;Log In&lt;/em&gt; button and is directed to the &lt;code&gt;Login&lt;/code&gt; route.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;ChallengeResult&lt;/code&gt; response tells the ASP.NET authentication middleware to issue a challenge to the authentication handler registered with the Auth0 authentication scheme parameter. The parameter uses the &amp;#34;Auth0&amp;#34; value you passed in the call to &lt;code&gt;AddOpenIdConnect&lt;/code&gt; in the &lt;code&gt;Startup&lt;/code&gt; class.&lt;/li&gt;&lt;li&gt;The OIDC handler redirects the user to the Auth0&amp;#39;s &lt;code&gt;&lt;span&gt;/&lt;/span&gt;authorize&lt;/code&gt; endpoint, which displays the &lt;a href=&#34;https://auth0.com/docs/universal-login&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Universal Login page&lt;/a&gt;. The user can log in with their username and password, social provider, or any other identity provider.&lt;/li&gt;&lt;li&gt;Once the user has logged in, Auth0 calls back to the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;callback&lt;/code&gt; endpoint in your application and passes along an authorization code.&lt;/li&gt;&lt;li&gt;The OIDC handler intercepts requests made to the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;callback&lt;/code&gt; path.&lt;/li&gt;&lt;li&gt;The handler looks for the authorization code, which Auth0 sent in the query string.&lt;/li&gt;&lt;li&gt;The OIDC handler calls the Auth0&amp;#39;s &lt;code&gt;&lt;span&gt;/&lt;/span&gt;oauth&lt;span&gt;/&lt;/span&gt;token&lt;/code&gt; endpoint to exchange the authorization code for the user&amp;#39;s ID and access token.&lt;/li&gt;&lt;li&gt;The OIDC middleware extracts the user information from the claims in the ID token.&lt;/li&gt;&lt;li&gt;The OIDC middleware returns a successful authentication response and sets a cookie that indicates that the user is authenticated. The cookie contains the claims with the user&amp;#39;s information. The cookie is stored so that the cookie middleware will automatically authenticate the user on any future requests. The OIDC middleware receives no more requests unless it is explicitly challenged.&lt;/li&gt;&lt;li&gt;The React application uses the authentication context to issue an API call to the &lt;code&gt;GetUser&lt;/code&gt; API. This API returns the user claims from the authentication cookie.&lt;/li&gt;&lt;li&gt;The React application renders the UI Component using the authenticated user&amp;#39;s identity.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;The BFF pattern is an ideal solution for authentication if you can afford to pay extra money for a dedicated backend. It will help you avoid headaches when dealing with access tokens and how to keep them safe on your client-side application. The backend will do all the heavy lifting, so that you can focus only on UI/UX concerns in the frontend.&lt;/p&gt;&lt;p&gt;You can download from &lt;a href=&#34;https://github.com/auth0-blog/bff-auth0-dotnet&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this GitHub repository&lt;/a&gt; the full source code of the sample project built in this article.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/backend-for-frontend-pattern-with-auth0-and-dotnet/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Understand the Backend For Frontend authentication pattern and how it can be implemented in ASP.NET with Auth0.</summary>
  </entry>
  <entry>
    <title>What SMART on FHIR Means for the Future of Healthcare</title>
    <updated>2021-09-07T15:00:00Z</updated>
    <id>tag:auth0.com,2021-09-07:/blog/what-smart-on-fhir-means-for-the-future-of-healthcare/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Most health systems know that seamless omnichannel customer engagement (a “digital front door”) is essential in order to deliver the personalized, value-based &lt;a href=&#34;https://www2.deloitte.com/us/en/insights/industry/health-care/consumer-health-trends.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;healthcare today’s consumers expect&lt;/a&gt;. In practice, however, implementing this digital front door strategy is challenging for &lt;a href=&#34;https://www.healthit.gov/sites/default/files/page/2021-02/Use-of-Certified-Health-IT-and-Methods-to-Enable-Interoperability-by-U.S.-Non-Federal-Acute-Care-Hospitals-2019.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;most healthcare systems&lt;/a&gt;, due to the &lt;a href=&#34;https://www.chiefhealthcareexecutive.com/view/consequences-of-fragmented-healthcare-information-systems&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;fragmented nature&lt;/a&gt; of healthcare information.&lt;/p&gt;&lt;p&gt;The Substitutable Medical Applications and Reusable Technologies (SMART) platform promises to solve these data fragmentation challenges by standardizing how patient data is accessed and shared. And given SMART’s inclusion in the &lt;a href=&#34;https://www.federalregister.gov/documents/2020/05/01/2020-07419/21st-century-cures-act-interoperability-information-blocking-and-the-onc-health-it-certification&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;21st Century Cures Act&lt;/a&gt;, the platform will become the standard protocol for accessing electronic health records (EHRs) in the near future.&lt;/p&gt;&lt;p&gt;Below, we explain what SMART means for the healthcare ecosystem and how it will improve both health data interoperability and the value of healthcare technology as a whole.&lt;/p&gt;&lt;h2 id=&#34;What-is-SMART-on-FHIR-&#34;&gt;What is SMART on FHIR?&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://smarthealthit.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SMART&lt;/a&gt; is an open-source, standards-based &lt;a href=&#34;https://auth0.com/blog/what-is-an-api-how-apis-work-for-non-developers/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;API&lt;/a&gt; that leverages the &lt;a href=&#34;https://auth0.com/intro-to-iam/what-is-oauth-2/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OAuth 2.0&lt;/a&gt; standard to provide secure, universal access to EHRs. The SMART platform builds on the existing Fast Health Interoperability Resources (hence the name &amp;#34;SMART on FHIR&amp;#34;).&lt;/p&gt;&lt;p&gt;Together, these two standards contain everything developers need to build applications that will work anywhere within the healthcare ecosystem:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;strong&gt;Open standards&lt;/strong&gt; for protocols for authentication, authorization, and UI integration that define how to build applications with universal access to EHRs&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Open-source tools and libraries&lt;/strong&gt; for developers that make it easier to use SMART standards during application development. The platform also offers a free sandbox that helps developers test their apps before deployment&lt;/li&gt;&lt;li&gt;&lt;strong&gt;An application gallery&lt;/strong&gt; that highlights all of the existing healthcare applications and software that currently uses SMART on FHIR&amp;#39;s platform&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The original idea behind SMART was first introduced in &lt;a href=&#34;https://www.nejm.org/doi/full/10.1056/NEJMp0900411&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;an article&lt;/a&gt; in the New England Journal of Medicine back in 2009. With the help of federal funding in 2010, SMART developed into the platform it is today, which is currently used by both &lt;a href=&#34;https://azure.microsoft.com/en-us/blog/azure-api-for-fhir-moves-to-general-availability/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Microsoft Azure&lt;/a&gt; and &lt;a href=&#34;https://www.apple.com/ios/health/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Apple&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;How-SMART-Improves-Healthcare-Interoperability-and-Delivery&#34;&gt;How SMART Improves Healthcare Interoperability and Delivery&lt;/h2&gt;&lt;p&gt;SMART improves healthcare interoperability in the same way standard electrical sockets and plugs simplify the process of powering different devices in your home.&lt;/p&gt;&lt;p&gt;Today, most EHR databases use a proprietary API (their own unique plug and socket configuration). As a result, tech companies have to build a custom connection to each database in order to access medical data. Not only is this costly, but it also hinders the ability of healthcare providers and patients to access their data with the technology that works best for them.&lt;/p&gt;&lt;p&gt;SMART, on the other hand, provides a standard, universal API for accessing EHRs. Any technology built with SMART works with any EHR database that uses SMART as well. As a result, healthcare technology becomes interchangeable, allowing health systems and patients to access medical data on the applications that best suit their needs, rather than only the ones that work with the EHR database they use.&lt;/p&gt;&lt;h2 id=&#34;How-Improved-Interoperability-Improves-The-Value-of-Healthcare-Technology&#34;&gt;How Improved Interoperability Improves The Value of Healthcare Technology&lt;/h2&gt;&lt;p&gt;Interoperability is valuable for healthcare tech companies because it &amp;#34;ensures [their] innovations can be broadly understood and developed,&amp;#34; as Dave Pickles, Founder and CTO of The Trade Desk, tells &lt;a href=&#34;https://www.forbes.com/sites/forbestechcouncil/2019/08/08/interoperability-and-the-future-of-software-development/?sh=2b59504d4767&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Forbes&lt;/a&gt;. And since SMART improves interoperability, it also encourages healthcare technology innovation.&lt;/p&gt;&lt;p&gt;For example, SMART decouples the protocols for accessing EHRs from a piece of software itself. So it allows healthcare technology companies to improve their products and services without worrying about how it will impact the way patients and providers access their data. The result is faster development of healthcare applications, which improves the quality of the entire marketplace (and care for consumers) as a whole.&lt;/p&gt;&lt;p&gt;SMART also simplifies app development for tech companies. Developers no longer need to build custom connections to each EHR database — they can develop their apps once using SMART, and those apps will work with any EHR databases built with SMART. As a result, their apps become more useful to a broader audience of health organizations and consumers.&lt;/p&gt;&lt;h2 id=&#34;What-SMART-s-Inclusion-in-the-21st-Century-Cures-Act-Means&#34;&gt;What SMART&amp;#39;s Inclusion in the 21st Century Cures Act Means&lt;/h2&gt;&lt;p&gt;The 21st Century Cures Act (passed in 2016) called for the adoption of a universal API that would &amp;#34;allow individuals to securely and easily access structured electronic health information using smartphone applications.&amp;#34; The Office of the National Coordinator for Health Information Technology’s (ONC’s) &lt;a href=&#34;https://www.healthit.gov/curesrule/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Final Rule on Interoperability&lt;/a&gt; (published in 2020) later named SMART as that universal API.&lt;/p&gt;&lt;p&gt;For &lt;a href=&#34;https://www.healthit.gov/topic/certification-ehrs/about-onc-health-it-certification-program&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ONC-certified health IT&lt;/a&gt; (primarily government applications), this means SMART&amp;#39;s API is now a requirement. However, since the ONC certification program is voluntary for the private sector, SMART&amp;#39;s API isn&amp;#39;t legally required for companies whose technologies are not used in government applications.&lt;/p&gt;&lt;p&gt;The Centers For Medicare and Medicaid Services (CMS) also includes policies in their regulations “which require or encourage payers to implement Application Programming Interfaces (APIs) to improve the electronic exchange of health care data.” SMART on FHIR is &lt;a href=&#34;https://www.cms.gov/Regulations-and-Guidance/Guidance/Interoperability/index&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;named as the preferred technical standard&lt;/a&gt; for doing so, meaning any health system that accepts Medicare or Medicaid must also adopt SMART.&lt;/p&gt;&lt;h2 id=&#34;SMART-on-FHIR-is-a-Must-For-Healthcare-Providers&#34;&gt;SMART on FHIR is a Must For Healthcare Providers&lt;/h2&gt;&lt;p&gt;Given the benefits, as well as its inclusion in the Cures Act, adopting SMART is practically a necessity for any health system. For this reason, major EHR players like &lt;a href=&#34;https://smarthealthit.org/an-app-platform-for-healthcare/who-is-using-smart/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Epic, Cerner, and Allscripts&lt;/a&gt; are already using SMART.&lt;/p&gt;&lt;p&gt;However, there are only 58 apps listed on &lt;a href=&#34;https://apps.smarthealthit.org/apps/featured&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SMART&amp;#39;s App Gallery&lt;/a&gt; as of the writing of this article, meaning few companies have incorporated the standard into their tech at this time. As a result, SMART adoption could be a sales advantage for some tech companies.&lt;/p&gt;&lt;p&gt;Outside of mandates, early adoption of SMART could also help healthcare tech companies ensure their applications become more widely adopted in the long run. Learn more about utilizing SMART on FHIR&amp;#39;s platform, tools, and API &lt;a href=&#34;https://smarthealthit.org/developer-resources/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/what-smart-on-fhir-means-for-the-future-of-healthcare/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">SMART on FHIR is poised to transform data interoperability — here&#39;s how it will improve healthcare.</summary>
  </entry>
  <entry>
    <title>Testing AWS Chalice Applications</title>
    <updated>2021-09-06T14:48:00Z</updated>
    <id>tag:auth0.com,2021-09-06:/blog/testing-aws-chalice-applications/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; In this tutorial, we will learn how to write unit tests and integration tests with Pytest in AWS Chalice applications. We will also learn how to measure test coverage.&lt;/p&gt;&lt;h2 id=&#34;Introduction&#34;&gt;Introduction&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://aws.github.io/chalice/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;AWS Chalice&lt;/a&gt; is a Python-based web micro-framework that leverages on the &lt;a href=&#34;https://aws.amazon.com/lambda/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;AWS Lambda&lt;/a&gt; and &lt;a href=&#34;https://aws.amazon.com/api-gateway/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;API Gateway&lt;/a&gt; services. It is used to create serverless applications. The Chalice experience is &lt;a href=&#34;https://flask.palletsprojects.com/en/2.0.x/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Flask&lt;/a&gt;-like by way of features like semantics and syntax. For more details on creating and deploying Chalice applications, you can go through the article on &lt;a href=&#34;https://auth0.com/blog/how-to-create-crud-rest-api-with-aws-chalice/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;how to create CRUD REST API with AWS Chalice&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;When building applications, there is a need to &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_testing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;test&lt;/a&gt; the code to avoid shipping bugs and unstable code. It also saves one a lot of debugging hours and makes deployments less stressful.&lt;/p&gt;&lt;p&gt;Common forms of tests in software development include:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Unit_testing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Unit test&lt;/a&gt;: This tests a particular function, component, or logic in the code. This way, edge cases can easily be identified, isolated, and fixed. Unit tests usually involve inspecting the output of a function against a known or expected output.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Integration_testing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Integration Test&lt;/a&gt;: examines multiple parts or the entire application in an end-to-end manner. It considers how each function or component works with the other.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;However, Chalice currently provides a test client for just unit tests. Therefore, the integration tests are written in a manner similar to unit tests with no major difference other than the fact that integration tests consist of multiple unit tests.&lt;/p&gt;&lt;h2 id=&#34;Where-to-Write-Tests&#34;&gt;Where to Write Tests&lt;/h2&gt;&lt;p&gt;In Python-based applications, tests are usually housed in &lt;code&gt;test&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; files. These are the test files that will import the application logic to be tested.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s assume we have a simple Chalice application with a folder structure that looks like the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;├── app.py&#xA;├── .chalice&#xA;├── requirements.txt&#xA;└── test.py&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, as the application becomes bigger, a single &lt;code&gt;test&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file would become bulky and can become difficult to work with. Hence, it is necessary to create a folder of tests called &lt;code&gt;tests&lt;/code&gt; and then split the tests into multiple test files inside the test folder.&lt;/p&gt;&lt;p&gt;Now, we&amp;#39;ll need to create a new folder called &lt;code&gt;tests&lt;/code&gt; and an empty &lt;code&gt;__init__&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file inside the folder. The &lt;code&gt;__init__&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; will allow Python to recognize the test directory as a package that could be run:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;mkdir&lt;/span&gt; tests &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;cd&lt;/span&gt; tests&#xA;&lt;span&gt;touch&lt;/span&gt; __init__.py&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, let&amp;#39;s create a test file for our application inside the test folder:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;touch&lt;/span&gt; test_unit.py&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, the folder structure will look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;├── app.py&#xA;├── .chalice&#xA;├── requirements.txt&#xA;└── tests&#xA;    ├── __init__.py&#xA;    └── test_unit.py&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can then create as many test files as we need in the &lt;code&gt;tests&lt;/code&gt; folder.&lt;/p&gt;&lt;h2 id=&#34;How-to-Do-Unit-Tests&#34;&gt;How to Do Unit Tests&lt;/h2&gt;&lt;p&gt;Since the release of v.1.17.0, AWS Chalice has shipped with a test client that serves as a test runner to write tests in Chalice applications. We no longer need to set up boilerplates and logic for testing. We only need to import the test client into our test file.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s assume we have our Chalice application has an &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file that looks like the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; chalice &lt;span&gt;import&lt;/span&gt; Chalice&#xA;&#xA;app &lt;span&gt;=&lt;/span&gt; Chalice&lt;span&gt;(&lt;/span&gt;app_name&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;chalice-api-sample&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;@app&lt;span&gt;.&lt;/span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;index&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, we&amp;#39;ll modify the &lt;code&gt;test_unit&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; app&#xA;&lt;span&gt;from&lt;/span&gt; chalice&lt;span&gt;.&lt;/span&gt;test &lt;span&gt;import&lt;/span&gt; Client&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the above code, we have just imported the &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; and the chalice test Client. Let&amp;#39;s add the following test code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;test_index&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;with&lt;/span&gt; Client&lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;app&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; client&lt;span&gt;:&lt;/span&gt;&#xA;        response &lt;span&gt;=&lt;/span&gt; client&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;assert&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;status_code &lt;span&gt;==&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&#xA;        &lt;span&gt;assert&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;json_body &lt;span&gt;==&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the above test code:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;we instantiated the test Client to be used within the context of the particular test function. That implies that whenever we run the test, a test environment with resources and environment variables will be set up and then cleaned up after running the test.&lt;/li&gt;&lt;li&gt;We made a &lt;code&gt;&lt;span&gt;GET&lt;/span&gt;&lt;/code&gt; request via HTTP using the &lt;code&gt;client&lt;span&gt;.&lt;/span&gt;http&lt;/code&gt; attribute.&lt;/li&gt;&lt;li&gt;We assert that a &lt;code&gt;&lt;span&gt;200&lt;/span&gt;&lt;/code&gt; status code is returned in the response with a JSON response body—&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We will install &lt;a href=&#34;https://docs.pytest.org/en/6.2.x/getting-started.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Pytest&lt;/a&gt; runner to run our test:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pip &lt;span&gt;install&lt;/span&gt; pytest&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, we will run with the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;py.test tests/test_unit.py&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We should get a response that looks like the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;test&lt;/span&gt; session starts &lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&#xA;platform win32 -- Python &lt;span&gt;3.7&lt;/span&gt;.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1&#xA;rootdir: C:&lt;span&gt;\&lt;/span&gt;aws-chalice-api-sample&#xA;collected &lt;span&gt;1&lt;/span&gt; item&#xA;&#xA;tests&lt;span&gt;\&lt;/span&gt;test_unit.py &lt;span&gt;.&lt;/span&gt;                                                                           &lt;span&gt;[&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;]&lt;/span&gt;&#xA;&#xA;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; passed &lt;span&gt;in&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;.11s &lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Creating-mocks&#34;&gt;Creating mocks&lt;/h3&gt;&lt;p&gt;We can try to &lt;a href=&#34;https://en.wikipedia.org/wiki/Mock_object&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;mock&lt;/a&gt; an external API in order to learn how to &lt;a href=&#34;https://docs.python.org/3/library/unittest.mock.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;test with mock variables&lt;/a&gt;. We will test a request from our app to an endpoint of &lt;a href=&#34;https://jsonplaceholder.typicode.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;JSONPlaceholder&lt;/a&gt; API data service to get a list of dummy posts. Firstly, let us install the Python requests module:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pip &lt;span&gt;install&lt;/span&gt; requests&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, let&amp;#39;s add a function inside &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file to make a &lt;code&gt;&lt;span&gt;GET&lt;/span&gt;&lt;/code&gt; request to the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;post&lt;/code&gt; endpoint of JSONPlaceholder and return a list of posts:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; requests&#xA;&#xA;&lt;span&gt;@app&lt;span&gt;.&lt;/span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/post&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;get_post&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    response &lt;span&gt;=&lt;/span&gt; requests&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;https://jsonplaceholder.typicode.com/posts/1&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;ok&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;json&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the above code, we wrote a function called &lt;code&gt;get_post&lt;/code&gt; that makes an HTTP request to the DummyAPI server and returns the response of the request in JSON form.&lt;/p&gt;&lt;p&gt;So, we&amp;#39;ll add a mock inside the &lt;code&gt;test_unit&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;from&lt;/span&gt; unittest&lt;span&gt;.&lt;/span&gt;mock &lt;span&gt;import&lt;/span&gt; patch&#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@patch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;app.requests.get&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;test_get_post&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;mock_get&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;Mocking with the patch decorator to get a post from an External API&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;    mock_get&lt;span&gt;.&lt;/span&gt;return_value&lt;span&gt;.&lt;/span&gt;ok &lt;span&gt;=&lt;/span&gt; &lt;span&gt;True&lt;/span&gt;&#xA;    response &lt;span&gt;=&lt;/span&gt; app&lt;span&gt;.&lt;/span&gt;get_post&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;assert&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;ok&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the above code, we imported the patch function of the mock module. Then, we defined the patch function as a decorator with reference to the project&amp;#39;s &lt;code&gt;request&lt;span&gt;.&lt;/span&gt;get&lt;/code&gt;. Then, we created a function called &lt;code&gt;test_get_post&lt;/code&gt; with a parameter called &lt;code&gt;mock_get&lt;/code&gt; to test the &lt;code&gt;get_post&lt;/code&gt; function inside the &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file. If the returned status of &lt;code&gt;mock_get&lt;/code&gt; is &lt;code&gt;ok&lt;/code&gt;, then a fake request to the JSONPlaceholder is made, after which an assertion of the status code of the response to the request is made. We ensured that the mock acts like it is making a real &lt;code&gt;request&lt;span&gt;.&lt;/span&gt;get&lt;/code&gt; request to the JSONPlaceholder server, whereas it is a fake request. This allows us to test our code without dependence on the JSONPlaceholder external API server. &lt;/p&gt;&lt;p&gt;If we run our test again with the following bash command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;py.test tests/test_unit.py&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We should get an output similar to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;test&lt;/span&gt; session starts &lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&#xA;platform win32 -- Python &lt;span&gt;3.7&lt;/span&gt;.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1&#xA;rootdir: C:&lt;span&gt;\&lt;/span&gt;aws-chalice-api-sample&#xA;plugins: cov-2.12.1&#xA;collected &lt;span&gt;2&lt;/span&gt; items&#xA;&#xA;tests&lt;span&gt;\&lt;/span&gt;unit&lt;span&gt;\&lt;/span&gt;test_unit.py &lt;span&gt;..&lt;/span&gt;                                                                     &lt;span&gt;[&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;]&lt;/span&gt;&#xA;&#xA;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; passed &lt;span&gt;in&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;.85s &lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;How can we test when the desired response is not returned? That&amp;#39;s why we have an &lt;code&gt;&lt;span&gt;else&lt;/span&gt;&lt;/code&gt; statement in the &lt;code&gt;&lt;span&gt;get_post&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; function inside the &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file, right? To accommodate situations when no post is returned when we request for a post from JSONPlaceholder. Therefore, we will add a test that will check when no post is returned. Let&amp;#39;s add the following code in the &lt;code&gt;test_unit&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;@patch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;app.requests.get&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;test_no_get_post&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;mock_get&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;Mock testing to check when no post is returned&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;    mock_get&lt;span&gt;.&lt;/span&gt;return_value&lt;span&gt;.&lt;/span&gt;ok &lt;span&gt;=&lt;/span&gt; &lt;span&gt;False&lt;/span&gt;&#xA;    response &lt;span&gt;=&lt;/span&gt; app&lt;span&gt;.&lt;/span&gt;get_post&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;assert&lt;/span&gt; response &lt;span&gt;==&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the above file, we asked the test to check if the returned value of the mock &lt;code&gt;&lt;span&gt;GET&lt;/span&gt;&lt;/code&gt; request is not &lt;code&gt;ok&lt;/code&gt; in the line &lt;code&gt;mock_get&lt;span&gt;.&lt;/span&gt;return_value&lt;span&gt;.&lt;/span&gt;ok &lt;span&gt;=&lt;/span&gt; False&lt;/code&gt;. We also asserted that a &lt;code&gt;None&lt;/code&gt; response is returned. So, we have been able to handle situations where a post is not returned.&lt;/p&gt;&lt;p&gt;We can then run the &lt;code&gt;test_unit&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file again as thus:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;py.test tests/test_unit.py&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will get the following output:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;test&lt;/span&gt; session starts &lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &#xA;platform win32 -- Python &lt;span&gt;3.7&lt;/span&gt;.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1&#xA;rootdir: &lt;span&gt;\&lt;/span&gt;aws-chalice-api-sample&#xA;plugins: cov-2.12.1&#xA;collected &lt;span&gt;3&lt;/span&gt; items&#xA;&#xA;tests&lt;span&gt;\&lt;/span&gt;unit&lt;span&gt;\&lt;/span&gt;test_unit.py &lt;span&gt;..&lt;/span&gt;.                                                                    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;]&lt;/span&gt; &#xA;&#xA;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; passed &lt;span&gt;in&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;.17s &lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Cool!&lt;/p&gt;&lt;p&gt;The full code of the &lt;code&gt;test_unit&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file is thus:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; unittest&lt;span&gt;.&lt;/span&gt;mock &lt;span&gt;import&lt;/span&gt; patch&#xA;&lt;span&gt;import&lt;/span&gt; app&#xA;&lt;span&gt;from&lt;/span&gt; chalice&lt;span&gt;.&lt;/span&gt;test &lt;span&gt;import&lt;/span&gt; Client&#xA;&lt;span&gt;import&lt;/span&gt; json&#xA;&#xA;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;test_index&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;with&lt;/span&gt; Client&lt;span&gt;(&lt;/span&gt;app&lt;span&gt;.&lt;/span&gt;app&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; client&lt;span&gt;:&lt;/span&gt;&#xA;        response &lt;span&gt;=&lt;/span&gt; client&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;assert&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;status_code &lt;span&gt;==&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&#xA;        &lt;span&gt;assert&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;json_body &lt;span&gt;==&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@patch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;app.requests.get&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;test_get_post&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;mock_get&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;Mocking with the patch decorator to get a post from an External API&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;    mock_get&lt;span&gt;.&lt;/span&gt;return_value&lt;span&gt;.&lt;/span&gt;ok &lt;span&gt;=&lt;/span&gt; &lt;span&gt;True&lt;/span&gt;&#xA;    response &lt;span&gt;=&lt;/span&gt; app&lt;span&gt;.&lt;/span&gt;get_post&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;assert&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;ok&#xA;&#xA;&lt;span&gt;@patch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;app.requests.get&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;test_no_get_post&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;mock_get&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;Mock testing to check when no post is returned&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;    mock_get&lt;span&gt;.&lt;/span&gt;return_value&lt;span&gt;.&lt;/span&gt;ok &lt;span&gt;=&lt;/span&gt; &lt;span&gt;False&lt;/span&gt;&#xA;    response &lt;span&gt;=&lt;/span&gt; app&lt;span&gt;.&lt;/span&gt;get_post&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;assert&lt;/span&gt; response &lt;span&gt;==&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;How-to-Write-Integration-Tests&#34;&gt;How to Write Integration Tests&lt;/h2&gt;&lt;p&gt;Integration tests check multiple components to see if they work together. These tests are usually written like unit tests, but they involve verifying multiple parts of the application at once. An integration test might require establishing a network connection, setting up a database, etc. These can be configured as fixtures. Fixtures are functions that set up the initial states/environment that you can create in your tests once and use multiple times.&lt;/p&gt;&lt;p&gt;It is a good habit to separate unit tests from integration tests by putting them in separate folders. Hence, we will create two folders inside the &lt;code&gt;test&lt;/code&gt; directory and call them &lt;code&gt;unit&lt;/code&gt; and &lt;code&gt;integration&lt;/code&gt;, respectively. Then,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;we will move the &lt;code&gt;test_unit&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file into the &lt;code&gt;unit&lt;/code&gt; folder.&lt;/li&gt;&lt;li&gt;also, we will create a new &lt;code&gt;test_integration&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file in the &lt;code&gt;integration&lt;/code&gt; folder&lt;/li&gt;&lt;li&gt;next, we will create a &lt;code&gt;conftest&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file in the &lt;code&gt;test&lt;/code&gt; folder to house our fixtures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So, the folder structure will look like the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;├── app.py&#xA;├── .chalice&#xA;├── requirements.txt&#xA;└── tests&#xA;    ├── __init__.py&#xA;    ├── conftest.py&#xA;    ├── unit/&#xA;    │   ├── __init__.py&#xA;    │   └── test_unit.py&#xA;    │&#xA;    └── integration/&#xA;        ├── __init__.py&#xA;        └── test_integration.py&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To start with, we will create a fixture called &lt;code&gt;app&lt;/code&gt;. This fixture will be the instance of our Chalice application. Let&amp;#39;s go to the &lt;code&gt;conftest&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file and change it thus:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; pytest&#xA;&lt;span&gt;from&lt;/span&gt; chalice &lt;span&gt;import&lt;/span&gt; Chalice&#xA;&lt;span&gt;import&lt;/span&gt; app &lt;span&gt;as&lt;/span&gt; chalice_app&#xA;&lt;span&gt;from&lt;/span&gt; chalice&lt;span&gt;.&lt;/span&gt;test &lt;span&gt;import&lt;/span&gt; Client&#xA;&#xA;&#xA;&lt;span&gt;@pytest&lt;span&gt;.&lt;/span&gt;fixture&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;app&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Chalice&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; chalice_app&#xA;&#xA;&#xA;&lt;span&gt;@pytest&lt;span&gt;.&lt;/span&gt;fixture&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;test_client&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;with&lt;/span&gt; Client&lt;span&gt;(&lt;/span&gt;chalice_app&lt;span&gt;.&lt;/span&gt;app&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; client&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;yield&lt;/span&gt; client&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the code above, we&amp;#39;ve abstracted an instance of our Chalice application as a fixture. We also created a fixture for our test client.&lt;/p&gt;&lt;p&gt;Going forward, let&amp;#39;s assume that we have set up a REST API for a bookshelf application in the &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; with CRUD endpoints like the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;# POST endpoint to add books to the bookshelf&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@app&lt;span&gt;.&lt;/span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/book&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; methods&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;create_book&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    book_as_json &lt;span&gt;=&lt;/span&gt; app&lt;span&gt;.&lt;/span&gt;current_request&lt;span&gt;.&lt;/span&gt;json_body&#xA;    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        Item &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;except&lt;/span&gt; Exception &lt;span&gt;as&lt;/span&gt; e&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;e&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;# PUT endpoint to update a book item based on the given ID&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@app&lt;span&gt;.&lt;/span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/book/{id}&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; methods&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;PUT&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;update_book&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    book_as_json &lt;span&gt;=&lt;/span&gt; app&lt;span&gt;.&lt;/span&gt;current_request&lt;span&gt;.&lt;/span&gt;json_body&#xA;    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        Item &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;ok - UPDATED&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;201&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;except&lt;/span&gt; Exception &lt;span&gt;as&lt;/span&gt; e&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;e&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;# DELETE endpoint to delete a particular book based on the given ID&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@app&lt;span&gt;.&lt;/span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/book/{id}&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; methods&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;DELETE&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;delete_book&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    book_as_json &lt;span&gt;=&lt;/span&gt; app&lt;span&gt;.&lt;/span&gt;current_request&lt;span&gt;.&lt;/span&gt;json_body&#xA;    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        Item &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;ok - DELETED&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;201&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;except&lt;/span&gt; Exception &lt;span&gt;as&lt;/span&gt; e&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;e&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code above consists of:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;add_book&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;: function for &lt;code&gt;&lt;span&gt;POST&lt;/span&gt;&lt;/code&gt; method to add books to the catalog&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;update_book&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;/code&gt;: uses the &lt;code&gt;&lt;span&gt;UPDATE&lt;/span&gt;&lt;/code&gt; method to update a specified book entry with a new title&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;delete_book&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;: deletes a particular book entry from the catalog&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Now, we can write tests for them using the Chalice &lt;a href=&#34;https://aws.github.io/chalice/api.html#Client.http&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;TestHTTPClient class&lt;/a&gt; inside the &lt;code&gt;test_integration&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file like the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; json&#xA;&#xA;&lt;span&gt;#  test for the create_book endpoint&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;test_add_book&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;test_client&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    response &lt;span&gt;=&lt;/span&gt; test_client&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;post&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#39;/book&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        headers&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        body&lt;span&gt;=&lt;/span&gt;json&lt;span&gt;.&lt;/span&gt;dumps&lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                &lt;span&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Javascript Know It All&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                &lt;span&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Chukwuma Obinna&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;assert&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;json_body &lt;span&gt;==&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Javascript Know It All&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Chukwuma Obinna&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;#  test for the update_book endpoint&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;test_update_book&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;test_client&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    response &lt;span&gt;=&lt;/span&gt; test_client&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;put&lt;span&gt;(&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#39;/book/{id}&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        headers&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        body&lt;span&gt;=&lt;/span&gt;json&lt;span&gt;.&lt;/span&gt;dumps&lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;&#xA;                &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                &lt;span&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Chalice Book&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;assert&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;json_body &lt;span&gt;==&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;ok - UPDATED&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;201&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;#  test for the delete_book endpoint&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;test_delete_book&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;test_client&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    response &lt;span&gt;=&lt;/span&gt; test_client&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;delete&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/book/{id}&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         headers&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;         body&lt;span&gt;=&lt;/span&gt;json&lt;span&gt;.&lt;/span&gt;dumps&lt;span&gt;(&lt;/span&gt;&#xA;              &lt;span&gt;{&lt;/span&gt;&#xA;                    &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                    &lt;span&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Chukwuma Obinna&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;              &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;assert&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;json_body &lt;span&gt;==&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;ok - DELETED&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;201&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the above code:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;We wrote the tests for each of our CRUD endpoints.&lt;/li&gt;&lt;li&gt;In each test function, we used the &lt;code&gt;test_client&lt;/code&gt; that we defined as a fixture earlier on in the &lt;code&gt;conftest&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file.&lt;/li&gt;&lt;li&gt;defined the header and body to be passed in each test request&lt;/li&gt;&lt;li&gt;We asserted known responses to the test requests&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Note: the database functionality is not included in the API used in order to simplify the example. Otherwise, we would have to write a fixture to setup a mock database for the integration test.&lt;/p&gt;&lt;p&gt;To run the above test, we&amp;#39;d use the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;py.test tests/test_integration.py&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We should get a response that looks like the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;test&lt;/span&gt; session starts &lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&#xA;platform win32 -- Python &lt;span&gt;3.7&lt;/span&gt;.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1&#xA;cachedir: .pytest_cache&#xA;rootdir: C:&lt;span&gt;\&lt;/span&gt;aws-chalice-api-sample&#xA;collected &lt;span&gt;4&lt;/span&gt; items&#xA;&#xA;tests/integration/test_integration.py::test_index PASSED                                     &lt;span&gt;[&lt;/span&gt; &lt;span&gt;25&lt;/span&gt;%&lt;span&gt;]&lt;/span&gt;&#xA;tests/integration/test_integration.py::test_add_book PASSED                                  &lt;span&gt;[&lt;/span&gt; &lt;span&gt;50&lt;/span&gt;%&lt;span&gt;]&lt;/span&gt;&#xA;tests/integration/test_integration.py::test_update_book PASSED                               &lt;span&gt;[&lt;/span&gt; &lt;span&gt;75&lt;/span&gt;%&lt;span&gt;]&lt;/span&gt;&#xA;tests/integration/test_integration.py::test_delete_book PASSED                               &lt;span&gt;[&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;]&lt;/span&gt;&#xA;&#xA;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;4&lt;/span&gt; passed &lt;span&gt;in&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;.01s &lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Generally, integration tests usually take a longer time to run than unit tests. Therefore, it is advisable to not run them every time but whenever one needs to deploy.&lt;/p&gt;&lt;p&gt;The full code of the &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file is thus:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; requests&lt;span&gt;.&lt;/span&gt;models &lt;span&gt;import&lt;/span&gt; Response&#xA;&lt;span&gt;from&lt;/span&gt; chalice &lt;span&gt;import&lt;/span&gt; Chalice&#xA;&lt;span&gt;import&lt;/span&gt; requests&#xA;&lt;span&gt;import&lt;/span&gt; json&#xA;&#xA;app &lt;span&gt;=&lt;/span&gt; Chalice&lt;span&gt;(&lt;/span&gt;app_name&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;aws-chalice-api-sample&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;@app&lt;span&gt;.&lt;/span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;index&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;# Function to make External API Call&lt;/span&gt;&#xA;&lt;span&gt;@app&lt;span&gt;.&lt;/span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/post&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;get_post&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    response &lt;span&gt;=&lt;/span&gt; requests&lt;span&gt;.&lt;/span&gt;get&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;https://jsonplaceholder.typicode.com/posts/1&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;ok&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; response&lt;span&gt;.&lt;/span&gt;json&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&#xA;&#xA;&lt;span&gt;# Function to make POST request to create a book&lt;/span&gt;&#xA;@ app&lt;span&gt;.&lt;/span&gt;route&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/book&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; methods&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;create_book&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;&#xA;    book_as_json &lt;span&gt;=&lt;/span&gt; app&lt;span&gt;.&lt;/span&gt;current_request&lt;span&gt;.&lt;/span&gt;json_body&#xA;    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        Item &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;except&lt;/span&gt; Exception &lt;span&gt;as&lt;/span&gt; e&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;e&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;# Function to make POST request to update a book&lt;/span&gt;&#xA;&lt;span&gt;@app&lt;span&gt;.&lt;/span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/book/{id}&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; methods&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;PUT&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;update_book&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    book_as_json &lt;span&gt;=&lt;/span&gt; app&lt;span&gt;.&lt;/span&gt;current_request&lt;span&gt;.&lt;/span&gt;json_body&#xA;    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        Item &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;ok - UPDATED&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;201&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;except&lt;/span&gt; Exception &lt;span&gt;as&lt;/span&gt; e&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;e&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;# Function to make POST request to delete a particular book a book&lt;/span&gt;&#xA;&lt;span&gt;@app&lt;span&gt;.&lt;/span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/book/{id}&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; methods&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;DELETE&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;delete_book&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    book_as_json &lt;span&gt;=&lt;/span&gt; app&lt;span&gt;.&lt;/span&gt;current_request&lt;span&gt;.&lt;/span&gt;json_body&#xA;    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        Item &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; book_as_json&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;ok - DELETED&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;201&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;except&lt;/span&gt; Exception &lt;span&gt;as&lt;/span&gt; e&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;e&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Measuring-Code-Coverage&#34;&gt;Measuring Code Coverage&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Code_coverage&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Code coverage&lt;/a&gt; is simply a means of quantifying how much of our code is being tested. We will use &lt;a href=&#34;https://pypi.org/project/pytest-cov/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;pytest-cov&lt;/a&gt; package to measure test coverage in this tutorial. It is a tool built off the &lt;a href=&#34;https://coverage.readthedocs.io/en/coverage-5.5/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;coverage.py&lt;/a&gt; tool used in measuring coverage in Python code. Fortunately, pytest-cov works well with pytest.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s install pytest-cov:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pip &lt;span&gt;install&lt;/span&gt; pytest-cov&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s measure the test coverage by using the &lt;code&gt;&lt;span&gt;-&lt;/span&gt;cov&lt;/code&gt; argument with pytest. We will measure the coverage over our source code in the &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pytest --cov&lt;span&gt;=&lt;/span&gt;app  --cov-report term-missing&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We used the &lt;code&gt;&lt;span&gt;--&lt;/span&gt;cov&lt;span&gt;-&lt;/span&gt;report&lt;/code&gt; &lt;code&gt;term&lt;span&gt;-&lt;/span&gt;missing&lt;/code&gt; command to specify that we want our coverage report to indicate the lines of code that are not covered by our tests.&lt;/p&gt;&lt;p&gt;We will get a terminal output that looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;test&lt;/span&gt; session starts &lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&#xA;platform win32 -- Python &lt;span&gt;3.7&lt;/span&gt;.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1&#xA;rootdir: &lt;span&gt;\&lt;/span&gt;aws-chalice-api-sample&#xA;plugins: cov-2.12.1&#xA;collected &lt;span&gt;7&lt;/span&gt; items&#xA;&#xA;tests&lt;span&gt;\&lt;/span&gt;integration&lt;span&gt;\&lt;/span&gt;test_integration.py &lt;span&gt;..&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;                                                    &lt;span&gt;[&lt;/span&gt; &lt;span&gt;57&lt;/span&gt;%&lt;span&gt;]&lt;/span&gt; &#xA;tests&lt;span&gt;\&lt;/span&gt;unit&lt;span&gt;\&lt;/span&gt;test_unit.py &lt;span&gt;..&lt;/span&gt;.                                                                   &lt;span&gt;[&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;]&lt;/span&gt; &#xA;&#xA;----------- coverage: platform win32, python &lt;span&gt;3.7&lt;/span&gt;.7-final-0 -----------&#xA;Name     Stmts   Miss  Cover   Missing&#xA;--------------------------------------&#xA;app.py      &lt;span&gt;33&lt;/span&gt;      &lt;span&gt;6&lt;/span&gt;    &lt;span&gt;82&lt;/span&gt;%   &lt;span&gt;46&lt;/span&gt;-47, &lt;span&gt;59&lt;/span&gt;-60, &lt;span&gt;72&lt;/span&gt;-73&#xA;--------------------------------------&#xA;TOTAL       &lt;span&gt;33&lt;/span&gt;      &lt;span&gt;6&lt;/span&gt;    &lt;span&gt;82&lt;/span&gt;%&#xA;&#xA;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;7&lt;/span&gt; passed &lt;span&gt;in&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;.16s &lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note: The 6 missed exception statements in lines 46-47, 59-60, and 72-73 above are in the &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt; file. The missing seemed to occur while running as a result of a pytest &lt;a href=&#34;https://github.com/nedbat/coveragepy/issues/605&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;error&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this article, we have considered how to run unit and integration tests in Chalice applications and APIs. We also learned how to use Pytest for testing and Pytest-cov for measuring code coverage. We can now go ahead and build &lt;a href=&#34;https://developer.ibm.com/devpractices/software-development/articles/5-steps-of-test-driven-development/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;test-driven&lt;/a&gt; Chalice applications with the knowledge gained.&#xA;Thanks for following through. We&amp;#39;d be glad to have your thoughts and suggestions in the comment section. Thanks.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/testing-aws-chalice-applications/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">A tutorial to learn how to write unit tests and integration tests for REST APIs in AWS Chalice. Additionally, we will see how to measure test coverage.</summary>
  </entry>
  <entry>
    <title>Welcome to the New Auth0 Careers Hub</title>
    <updated>2021-09-02T21:02:00Z</updated>
    <id>tag:auth0.com,2021-09-02:/blog/welcome-to-the-new-auth0-careers-hub/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;At Auth0, our core philosophy is based on the principles of collaboration, experimentation, learning, transparency, and passion. Our culture revolves around our core values, and we want to recruit others who share the same beliefs and passion for what we do. In that spirit, we are excited to present our new Auth0 Careers Hub.&lt;/p&gt;&lt;p&gt;More than just a refresh, our team set out to create new pages to reflect our brand, include a larger emphasis on diversity and inclusion, and share real stories from our employees. Our message with this new launch is that here at Auth0, we invest in a culture of inclusion where every Auziro can show up as their authentic self.&lt;/p&gt;&lt;h2 id=&#34;Real-Stories-from-Real-Employees&#34;&gt;Real Stories from Real Employees&lt;/h2&gt;&lt;p&gt;What better way to showcase our culture authentically than through stories from Auziros themselves? With a new page dedicated to Life at Auth0, highlighting our Employee Resource Groups, global, remote-friendly culture, and more, we showcase more than 60 stories from employees that highlight how we live and breathe our values. Hear from our teams on how we make remote work really work for our Auziros — from team meetings to performance reviews.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2iKl8xMHCzupRhjLbiujWz/a438b6f175a642b99c198cf2011a88d6/careers_blogpost_02.jpg&#34; alt=&#34;Real Stories from Real Employees&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;A-Transparent-Recruiting-Process&#34;&gt;A Transparent Recruiting Process&lt;/h2&gt;&lt;p&gt;Throughout the design process, we kept all candidate personas in mind when crafting the new content flow and structures. No matter which position a candidate may be looking for, we strive to provide clarity into our process and programs for those interested in learning more before embarking on this journey — so there are no surprises along the way.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2Sg9MZoRU09PtJAw6DKZxt/86593684a762e53ca71938c1c3d6c09e/careers_blogpost_03.png&#34; alt=&#34;A Transparent Recruiting Process&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;One-Team--One-Score&#34;&gt;One Team, One Score&lt;/h2&gt;&lt;p&gt;Like everything we do, this refresh was truly an embodiment of our core values in the amazing collaboration that was crucial in bringing this to life. And as we &lt;a href=&#34;https://auth0.com/blog/okta-acquisition-announcement/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;heard from Eugenio&lt;/a&gt; on the recent Okta acquisition, the Auth0 brand and product will continue to be part of the larger strategy, and hiring will always be an important focus. We hope this will resonate with all future Auziros that have yet to join our amazing team. &lt;/p&gt;&lt;p&gt;If this sounds like you, &lt;a href=&#34;https://auth0.com/careers&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check out our careers hub&lt;/a&gt; and help us make the internet safer.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/welcome-to-the-new-auth0-careers-hub/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Our redefined destination for exploring what makes Auth0 a great place to work.</summary>
  </entry>
  <entry>
    <title>State Pattern in Python</title>
    <updated>2021-09-02T15:02:00Z</updated>
    <id>tag:auth0.com,2021-09-02:/blog/state-pattern-in-python/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_design_pattern&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Design patterns&lt;/a&gt; are conventional solutions to common challenges in software development using &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-oriented_programming&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Object-oriented programming&lt;/a&gt;. One of the famous design patterns for developing scalable and flexible software is the state pattern. You&amp;#39;ll learn about the state pattern and how to apply it to improve your software project in this article.&lt;/p&gt;&lt;h2 id=&#34;Finite-State-Machine&#34;&gt;Finite State Machine&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s define a &lt;a href=&#34;https://en.wikipedia.org/wiki/Finite-state_machine&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;finite state machine&lt;/a&gt; (FSM) before moving on to the state design pattern. It is well known that the concepts of state patterns and finite-state machines have a close relationship. An FSM is something that behaves differently depending on its internal state. In computer programming, the behavior of an object in an application varies depending on its state. A switch and a lightbulb are simple examples of FSM. &amp;#34;ON&amp;#34; and &amp;#34;OFF&amp;#34; are the two possible states of the light bulb. To change the state of the bulb &amp;#39;ON&amp;#39; or &amp;#39;OFF&amp;#39;, simply flip the switch. Transition is the process of moving from one state to another. Transition is affected by several factors. In the case of the light bulb, it is dependent on the input from the switch. The state diagram, which is shown below, graphically depicts the states and transitions.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6Y4Ljm8KBa45GF54np9a8i/b5bff5c1cf9b5a8ead644a110f9db059/01_bulb_state_diagram.png&#34; alt=&#34;light bulb state diagram&#34;/&gt;&lt;/p&gt;&lt;p&gt;We can implement the state machine using any programming language. Depending on a few factors, our code behaves differently. You can implement the preceding light bulb example as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LightBulb&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  _state &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;OFF&amp;#39;&lt;/span&gt;    &lt;span&gt;# initial state of bulb&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;onOff&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;,&lt;/span&gt; switch&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; switch &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#39;ON&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;_state &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;ON&amp;#39;&lt;/span&gt;&#xA;    &lt;span&gt;elif&lt;/span&gt; switch &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#39;OFF&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;_state &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#39;OFF&amp;#39;&lt;/span&gt;&#xA;    &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;continue&lt;/span&gt;          &lt;span&gt;# if we get wrong input&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For small systems, such as the one described above, the code appears to be straightforward and simple. However, if there are many states and transitions, our code will get flabby with conditional statements. The code becomes more extensive, and it won&amp;#39;t be easy to maintain the application. If you want to add additional states or transitions to the program, you&amp;#39;ll have to change the entire code base. You can use the &lt;strong&gt;State Design Pattern&lt;/strong&gt; in these cases.&lt;/p&gt;&lt;h2 id=&#34;State-Pattern&#34;&gt;State Pattern&lt;/h2&gt;&lt;p&gt;It is a behavioral design pattern. You can use the state pattern to implement state-specific behavior in which objects can change their functionality at runtime. You can use it to avoid using conditional statements when changing an object&amp;#39;s behavior based on its state. In the state pattern, you should &lt;a href=&#34;https://en.wikipedia.org/wiki/Encapsulation_(computer_programming&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;encapsulate&lt;/a&gt;) different states in separate &lt;code&gt;State&lt;/code&gt; classes. The original class keeps a reference to a state object based on its current state rather than using conditional statements to implement state-dependent functionality.&lt;/p&gt;&lt;h2 id=&#34;UML-Diagram&#34;&gt;UML Diagram&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7EXrJIISe60aDo65BUFXgW/caabc74e7fe1d13bc1150ce6baa98edb/02_UML_state_class.png&#34; alt=&#34;UML class diagram of state pattern&#34;/&gt;&lt;/p&gt;&lt;p&gt;1) &lt;strong&gt;Context&lt;/strong&gt; - it is the original class of our application. It maintains a reference to one of the concrete states on which its behavior depends. It also has a method to modify the internal state.&lt;/p&gt;&lt;p&gt;2) &lt;strong&gt;State interface&lt;/strong&gt; - All supported states share the same state interface. Only the state interface allows &lt;em&gt;Context&lt;/em&gt; to communicate with state objects. &lt;em&gt;Context&lt;/em&gt; can only communicate with state objects via the state interface.&lt;/p&gt;&lt;p&gt;3) &lt;strong&gt;Concrete states&lt;/strong&gt; - For each state, these objects implement the &amp;#39;State&amp;#39; interface. These are the main objects which contain the state-specific methods.&lt;/p&gt;&lt;h2 id=&#34;How-does-it-work-&#34;&gt;How does it work?&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/9jQ2UH5r4b4amneAHwIxG/fa3b9affd7c467bc6513b64cd1362114/03_UML_state_sequence.png&#34; alt=&#34;UML sequence diagram of state pattern&#34;/&gt;&lt;/p&gt;&lt;p&gt;Assume the &lt;em&gt;Context&lt;/em&gt; is configured with an initial state, &lt;code&gt;concreteStateA&lt;/code&gt;.  It behaves according to its initial state. The &lt;em&gt;Context&lt;/em&gt; now implements the &lt;code&gt;doSomething&lt;/code&gt; method according to &lt;code&gt;concreteStateA&lt;/code&gt;. The concrete states should contain a back reference to call back and change &lt;em&gt;Context&amp;#39;s&lt;/em&gt; current state object. If a state transition occurs, the &lt;em&gt;Context&amp;#39;s&lt;/em&gt; &lt;code&gt;setSate&lt;/code&gt; method is invoked, referencing the new state, &lt;code&gt;concreteStateB&lt;/code&gt;. The &lt;em&gt;Context&lt;/em&gt; changed its internal state and behavior. Now, it uses the &lt;code&gt;concreteStateB&lt;/code&gt; to implement the &lt;code&gt;doSomething&lt;/code&gt; method. The basic idea is that the states can change the context&amp;#39;s state automatically. As a developer, you can modify the states by using any number of instances of &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;If you want to add another state, simply create a new concrete state object without changing the &lt;em&gt;Context&lt;/em&gt; of the application.&lt;/p&gt;&lt;h2 id=&#34;Implementation&#34;&gt;Implementation&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s take a step-by-step look at implementing the state pattern.&lt;/p&gt;&lt;p&gt;1) Find an existing class that contains state-dependent code, or create a suitable context class. It should include a reference to a specific state as well as a method for switching between states.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; __future__ &lt;span&gt;import&lt;/span&gt; annotations&#xA;&lt;span&gt;from&lt;/span&gt; abc &lt;span&gt;import&lt;/span&gt; ABC&lt;span&gt;,&lt;/span&gt; abstractmethod&#xA;&#xA;&lt;span&gt;# the context class contains a _state that references the concrete state and setState method to change between states.&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Context&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;&#xA;    _state &lt;span&gt;=&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;,&lt;/span&gt; state&lt;span&gt;:&lt;/span&gt; State&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;setState&lt;span&gt;(&lt;/span&gt;state&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;,&lt;/span&gt; state&lt;span&gt;:&lt;/span&gt; State&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;f&amp;#34;Context: Transitioning to &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;state&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;__name__&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;_state &lt;span&gt;=&lt;/span&gt; state&#xA;        self&lt;span&gt;.&lt;/span&gt;_state&lt;span&gt;.&lt;/span&gt;context &lt;span&gt;=&lt;/span&gt; self&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;doSomething&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;_state&lt;span&gt;.&lt;/span&gt;doSomething&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2) Create a common State interface for all concrete states. The State interface specifies all of the methods that all Concrete States must implement and a backreference to the &lt;em&gt;Context&lt;/em&gt; object. States can change the &lt;em&gt;Context&lt;/em&gt; to another state by using this backreference.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;State&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;ABC&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;@property&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;context&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Context&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; self&lt;span&gt;.&lt;/span&gt;_context&#xA;&#xA;    &lt;span&gt;@context&lt;span&gt;.&lt;/span&gt;setter&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;context&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;,&lt;/span&gt; context&lt;span&gt;:&lt;/span&gt; Context&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;_context &lt;span&gt;=&lt;/span&gt; context&#xA;&#xA;    &lt;span&gt;@abstractmethod&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;doSomething&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should define the &lt;em&gt;Context&lt;/em&gt; as a &lt;a href=&#34;https://www.geeksforgeeks.org/protected-variable-in-python/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;protected parameter&lt;/a&gt;. Above, &lt;a href=&#34;https://www.programiz.com/python-programming/property&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@property&lt;/code&gt;&lt;/a&gt; decorator is used to make the &lt;code&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method as property and &lt;code&gt;@context&lt;span&gt;.&lt;/span&gt;setter&lt;/code&gt; decorator to another overload of the &lt;code&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method as property setter method. Now, &lt;code&gt;_context&lt;/code&gt; is protected.&lt;/p&gt;&lt;p&gt;3) You can define the concrete states in the classes that implement the state interface. After the &lt;code&gt;doSomething&lt;/code&gt; method is called, the state of the &lt;em&gt;Context&lt;/em&gt; changes. You can also change the state by defining a specific method. The state transitions use the &lt;code&gt;setState&lt;/code&gt; method of the &lt;em&gt;Context&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ConcreteStateA&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;State&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;doSomething&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;The context is in the state of ConcreteStateA.&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;ConcreteStateA now changes the state of the context.&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;setState&lt;span&gt;(&lt;/span&gt;ConcreteStateB&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ConcreteStateB&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;State&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;doSomething&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;The context is in the state of ConcreteStateB.&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;ConcreteStateB wants to change the state of the context.&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;setState&lt;span&gt;(&lt;/span&gt;ConcreteStateA&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4) You can now initiate your application with an initial state and execute the methods.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# sample application&lt;/span&gt;&#xA;app &lt;span&gt;=&lt;/span&gt; Context&lt;span&gt;(&lt;/span&gt;ConcreteStateA&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;doSomething&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;    &lt;span&gt;# this method is executed as in state 1&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;doSomething&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;    &lt;span&gt;# this method is executed as in state 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output of the above code looks something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Context&lt;span&gt;:&lt;/span&gt; Transitioning to ConcreteStateA&#xA;The context is &lt;span&gt;in&lt;/span&gt; the state &lt;span&gt;of&lt;/span&gt; ConcreteStateA&lt;span&gt;.&lt;/span&gt;&#xA;ConcreteStateA now changes the state &lt;span&gt;of&lt;/span&gt; the context&lt;span&gt;.&lt;/span&gt;&#xA;Context&lt;span&gt;:&lt;/span&gt; Transitioning to ConcreteStateB&#xA;The context is &lt;span&gt;in&lt;/span&gt; the state &lt;span&gt;of&lt;/span&gt; ConcreteStateB&lt;span&gt;.&lt;/span&gt;&#xA;ConcreteStateB wants to change the state &lt;span&gt;of&lt;/span&gt; the context&lt;span&gt;.&lt;/span&gt;&#xA;Context&lt;span&gt;:&lt;/span&gt; Transitioning to ConcreteStateA&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Example&#34;&gt;Example&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s create a simple state machine that represents a real-world scenario. Consider an elevator system with buttons in the elevator cabin that allow you to go up or down. Consider that this lift only travels between two floors to keep things simple. There are primarily two possible states for the elevator: &lt;code&gt;&lt;span&gt;1&lt;/span&gt;st floor&lt;/code&gt; and &lt;code&gt;&lt;span&gt;2&lt;/span&gt;nd floor&lt;/code&gt;. The input from the two buttons determines the transition between states. The elevator performs different actions based on its state.&lt;/p&gt;&lt;p&gt;The following code is the implementation of the elevator example. Follow along with the comments for more descriptions about each method.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; __future__ &lt;span&gt;import&lt;/span&gt; annotations&#xA;&lt;span&gt;from&lt;/span&gt; abc &lt;span&gt;import&lt;/span&gt; ABC&lt;span&gt;,&lt;/span&gt; abstractmethod&#xA;&#xA;&lt;span&gt;# The Elevator class is the context. It should be initiated with a default state.&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Elevator&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;&#xA;    _state &lt;span&gt;=&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;,&lt;/span&gt; state&lt;span&gt;:&lt;/span&gt; State&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;setElevator&lt;span&gt;(&lt;/span&gt;state&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;# method to change the state of the object&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;setElevator&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;,&lt;/span&gt; state&lt;span&gt;:&lt;/span&gt; State&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;&#xA;        self&lt;span&gt;.&lt;/span&gt;_state &lt;span&gt;=&lt;/span&gt; state&#xA;        self&lt;span&gt;.&lt;/span&gt;_state&lt;span&gt;.&lt;/span&gt;elevator &lt;span&gt;=&lt;/span&gt; self&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;presentState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;f&amp;#34;Elevator is in &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;.&lt;/span&gt;_state&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;__name__&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;# the methods for executing the elevator functionality. These depends on the current state of the object.&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;pushDownBtn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;_state&lt;span&gt;.&lt;/span&gt;pushDownBtn&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;pushUpBtn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;_state&lt;span&gt;.&lt;/span&gt;pushUpBtn&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;# if both the buttons are pushed at a time, nothing should happen&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;pushUpAndDownBtns&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Oops.. you should press one button at a time&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;# if no button was pushed, it should just wait open for guests&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;noBtnPushed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Press any button. Up or Down&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;# The common state interface for all the states&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;State&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;ABC&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;@property&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;elevator&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Elevator&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; self&lt;span&gt;.&lt;/span&gt;_elevator&#xA;&#xA;    &lt;span&gt;@elevator&lt;span&gt;.&lt;/span&gt;setter&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;elevator&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;,&lt;/span&gt; elevator&lt;span&gt;:&lt;/span&gt; Elevator&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;_elevator &lt;span&gt;=&lt;/span&gt; elevator&#xA;&#xA;    &lt;span&gt;@abstractmethod&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;pushDownBtn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;pass&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@abstractmethod&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;pushUpBtn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;pass&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;# The concrete states&lt;/span&gt;&#xA;&lt;span&gt;# We have two states of the elevator: when it is on the First floor and the Second floor&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;firstFloor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;State&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;# If the down button is pushed when it is already on the first floor, nothing should happen&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;pushDownBtn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Already in the bottom floor&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;# if up button is pushed, move upwards then it changes its state to second floor.&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;pushUpBtn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Elevator moving upward one floor.&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;elevator&lt;span&gt;.&lt;/span&gt;setElevator&lt;span&gt;(&lt;/span&gt;secondFloor&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;secondFloor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;State&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;# if down button is pushed it should move one floor down and open the door&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;pushDownBtn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Elevator moving down a floor...&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        self&lt;span&gt;.&lt;/span&gt;elevator&lt;span&gt;.&lt;/span&gt;setElevator&lt;span&gt;(&lt;/span&gt;firstFloor&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;# if up button is pushed nothing should happen&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;pushUpBtn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Already in the top floor&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;if&lt;/span&gt; __name__ &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;# The client code.&lt;/span&gt;&#xA;&#xA;    myElevator &lt;span&gt;=&lt;/span&gt; Elevator&lt;span&gt;(&lt;/span&gt;firstFloor&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    myElevator&lt;span&gt;.&lt;/span&gt;presentState&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;# Up button is pushed&lt;/span&gt;&#xA;    myElevator&lt;span&gt;.&lt;/span&gt;pushUpBtn&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    myElevator&lt;span&gt;.&lt;/span&gt;presentState&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output of the above code looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Elevator is &lt;span&gt;in&lt;/span&gt; firstFloor&#xA;Elevator moving upward one floor&lt;span&gt;.&lt;/span&gt;&#xA;Elevator is &lt;span&gt;in&lt;/span&gt; secondFloor&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can implement many buttons and states elevator like in real-life one for the floor. Try using the state pattern to implement the light bulb example from the Finite state machine.&lt;/p&gt;&lt;h2 id=&#34;Advantages-and-Disadvantages&#34;&gt;Advantages and Disadvantages&lt;/h2&gt;&lt;p&gt;The state pattern, like any other programming concept, has a number of benefits as well as some drawbacks. You can avoid writing massive conditional blocks for switching between states by using the state pattern instead of hard-coding state-specific behavior. It allows you to develop a flexible and maintainable application. You can add new states and transitions to the &lt;em&gt;Context&lt;/em&gt; without changing it.&lt;/p&gt;&lt;p&gt;It&amp;#39;s a good idea to use the state pattern if the logic of each state is complex and the states change frequently. Otherwise, it complicates simple things by bringing a plethora of classes and objects. The state pattern adds another level of indirection by imposing clients to rely on a State object, and it extends the context class to allow State objects to change the state of the &lt;em&gt;Context&lt;/em&gt;.&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this article, you learned how to use the state pattern in Python programming to design state machines. Without using larger conditional blocks to implement state-specific behavior, the state pattern makes the development process a lot easier. You can also add new states that are not dependent on other states, giving your application more flexibility. The state pattern is very similar to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Strategy_pattern&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;strategy pattern&lt;/a&gt;, which alters strategies based on user choices. The main distinction is that concrete states are aware of other states, whereas the strategies do not. Why do we say that states are aware of other states? because each state has to know to which state they should move. For example, the first-floor state knows that they should change to the second-floor state. Another important difference with strategy pattern is that in the case of Strategy pattern, it&amp;#39;s the client, which provides a different strategy to Context, on State pattern, the state transition is managed by Context or State itself. Try to make use of the state pattern in your software to make the development process go more smoothly.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/state-pattern-in-python/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn to implement state pattern and finite state machines using Python.</summary>
  </entry>
  <entry>
    <title>TinyGo: Good Things Come in Small Packages</title>
    <updated>2021-08-31T14:10:00Z</updated>
    <id>tag:auth0.com,2021-08-31:/blog/tinygo-good-things-come-in-small-packages/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The concept of coding for IoT devices, CLIs and WebAssembly is not a new concept. However, what if I told you that it is possible to use Golang for all three. &lt;a href=&#34;https://tinygo.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;TinyGo&lt;/a&gt; is a specialized project specifically designed and used for development in small places. This article explains the benefits of TinyGo, what it is, and how you can use it. It also provides you with a Golang IoT code example for you to see TinyGo in action.&lt;/p&gt;&lt;h2 id=&#34;What-Is-TinyGo-&#34;&gt;What Is TinyGo?&lt;/h2&gt;&lt;p&gt;TinyGo is Golang&amp;#39;s baby brother. It is a compiler that allows a user to write the Golang code they are familiar with and run it in places people wouldn&amp;#39;t have thought were possible. What this means is that the barriers to entry into some tech spaces are being gradually lowered. I say this because I am writing through experience.&lt;/p&gt;&lt;h2 id=&#34;How-Is-TinyGo-Different-from-Golang-&#34;&gt;How Is TinyGo Different from Golang?&lt;/h2&gt;&lt;p&gt;Out of the box, Golang is a feature-rich, highly-performant, compiled language, which means that Golang is compiled to machine-readable code (those funky &lt;code&gt;&lt;span&gt;1&lt;/span&gt;&lt;/code&gt; &amp;#39;s and &lt;code&gt;&lt;span&gt;0&lt;/span&gt;&lt;/code&gt; &amp;#39;s everyone talks about).&lt;/p&gt;&lt;p&gt;In turn, being compiled to machine code allows it to run directly on the hardware — all that CPU/RAM power! Another really cool feature of Golang is that when building a binary of the written program, it includes extensive cross-compatibility for a wide from of different system architectures.&lt;/p&gt;&lt;p&gt;Once a binary has been built, it can be run on any compatible distribution/architecture, providing it has been specified during the build process. To find the list of supported architectures (after installing Go on your machine), run this command into your terminal: &lt;code&gt;go tool dist list&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The output will look something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;aix/ppc64&#xA;android/386&#xA;android/amd64&#xA;android/arm&#xA;android/arm64&#xA;darwin/amd64&#xA;darwin/arm64&#xA;dragonfly/amd64&#xA;freebsd/386&#xA;&lt;span&gt;..&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, how is TinyGo different? Well, it&amp;#39;s the same Golang you know and love, but TinyGo is a smaller compiler based on &lt;a href=&#34;https://llvm.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;LLVM&lt;/a&gt; technologies. It has essentially cherry-picked a number of important and available libraries and trimmed a lot of the fat from the core language.&lt;/p&gt;&lt;p&gt;By doing that, TinyGo becomes an even more powerful and efficient language that you can run in unexpected places. As an example of fat that&amp;#39;s been trimmed, the library &lt;code&gt;html&lt;span&gt;/&lt;/span&gt;template&lt;/code&gt; cannot be imported by TinyGo as it relies upon other dependencies, which in turn are not able to be imported.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;To read up on the packages supported by TinyGo, visit the &lt;a href=&#34;https://tinygo.org/docs/reference/lang-support/stdlib/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;documentation pages&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Where-Can-You-Use-TinyGo-&#34;&gt;Where Can You Use TinyGo?&lt;/h2&gt;&lt;h3 id=&#34;Use-TinyGo-with-WebAssembly&#34;&gt;Use TinyGo with WebAssembly&lt;/h3&gt;&lt;h4 id=&#34;What-is-WebAssembly-&#34;&gt;What is WebAssembly?&lt;/h4&gt;&lt;p&gt;Web development might usually be associated with JavaScript, but this isn&amp;#39;t always the case. WebAssembly is an official W3C standard and allows people to develop applications for the web without using JavaScript.&lt;/p&gt;&lt;p&gt;I first must stress, WebAssembly is not a replacement for JavaScript but can be an excellent complement. The two technologies can work well together to deliver web content. In one small sentence, WebAssembly is a format for writing code for the web. WebAssembly is designed to be highly performant, which is why a language with a small overhead is preferable.&lt;/p&gt;&lt;p&gt;WebAssembly allows developers to write code in a familiar language and run it through a web browser for end-users. Through this method, near-native performance is achieved, and the required support is already in your modern browser.&lt;/p&gt;&lt;p&gt;In essence, you can write your code in TinyGo and pass it through the WASM compiler, which turns that Golang code into machine-readable code. Then, you can run the application through a web browser easily.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/A4oW5u3cr5j5St4Z1bA0o/7714e2411c109a2e74347557be305cc1/01_tiny.png&#34; alt=&#34;WebAssembly diagram&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Use-TinyGo-to-build-a-CLI&#34;&gt;Use TinyGo to build a CLI&lt;/h3&gt;&lt;h4 id=&#34;What-is-a-CLI-&#34;&gt;What is a CLI?&lt;/h4&gt;&lt;p&gt;A Command Line Interface (CLI) is a standardized way for a user to interact textually with a system or application. The first primary use cases of CLIs were back in the 1960&amp;#39;s where users could use a terminal to interact with the operating system. This was a continuous trend throughout the following decades which enabled systems to become more complex and give users more freedom on the computer they are using.&lt;/p&gt;&lt;h4 id=&#34;Why-does-a-CLI-need-to-be-small-&#34;&gt;Why does a CLI need to be small?&lt;/h4&gt;&lt;p&gt;Some CLIs interact with the operating system directly, which in turn means they will need some low-level permissions and a secure library set. Initially, people might think of a C language or Python to accomplish that task. They are established, low-level languages that have been used in some high-profile CLIs in the past.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Golang enters the room&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;However, for those that don&amp;#39;t know, Go is derived from C. In fact, it&amp;#39;s so close that you can call C code from within a Go program — it&amp;#39;s called Cgo.&lt;/p&gt;&lt;p&gt;In recent years, Go has been the go-to language to create CLIs. Some of the most popular and most used CLIs are written in Go: Docker CLI, Kubernetes CLI (&lt;code&gt;kubectl&lt;/code&gt;), GitHub CLI, just to name a few. This has been made possible by the creation of third-party libraries and imports that take care of the complex tasks developers would otherwise have to take care of themselves. &lt;/p&gt;&lt;p&gt;Second to this is the power hidden under the hood of the language. Go has concurrency in the form of go-routines making asynchronous programming simplistic and a garbage collector helping with memory management. All of these features (and more) help reduce the size and space taken up by an integral program, all working towards keeping programs as performant as possible.&lt;/p&gt;&lt;p&gt;However, if a small project needs a CLI to be written for it or the CLI is only performing some basic tasks, sometimes these large libraries and imports can be overkill. Unless the end goal is to write a complex, multi-functional CLI like the ones mentioned before, a great number of the available libraries may not even be used, resulting in overhead the project could do without. To keep a CLI small and precise, reducing waste is a top priority. This makes TinyGo a great choice for small CLIs.&lt;/p&gt;&lt;h3 id=&#34;TinyGo-can-power-microcontrollers&#34;&gt;TinyGo can power microcontrollers&lt;/h3&gt;&lt;h4 id=&#34;What-is-a-microcontroller-&#34;&gt;What is a microcontroller?&lt;/h4&gt;&lt;p&gt;A microcontroller is usually a single chip on a small circuit board that allows input and output (I/O). A common and well-known example is an Arduino, which is fantastic for home automation and other smaller projects around the house.&lt;/p&gt;&lt;p&gt;With the IoT boom in recent years, Arduinos have also seen a rise in popularity. The trouble with this is that Arduinos are usually coded in C++. To some, this can be seen as a barrier to entry as it is a complex language, and not everyone wants to learn or use it when alternatives are available.&lt;/p&gt;&lt;p&gt;When I began to play with IoT, I purchased a bunch of Arduinos, thinking I could do some cool projects. Then I was personally struck with the C++ barrier. Most of my work is either in Node.js or Golang. With this being the case, I took a seat and thought about how I could write the code I know and love to create these cool projects I had in mind. This is where I came across TinyGo.&lt;/p&gt;&lt;h4 id=&#34;How-many-boards-does-TinyGo-support-&#34;&gt;How many boards does TinyGo support?&lt;/h4&gt;&lt;p&gt;TinyGo is a growing project. At the time of writing, TinyGo supports over 60 microcontroller boards. These range from &lt;a href=&#34;https://www.espressif.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Espressif boards (ESP&amp;#39;s)&lt;/a&gt; to &lt;a href=&#34;https://www.adafruit.com/category/851&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Adafruits&lt;/a&gt; and as previously mentioned, Arduinos, opening so many doors for people to begin their journey into IoT whilst coding in a familiar language.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Check the &lt;a href=&#34;https://tinygo.org/docs/reference/microcontrollers/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;documentation for each microcontroller board supported by TinyGo&lt;/a&gt; for more details.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Why-Is-TinyGo-a-Great-Alternative-to-C---and-MicroPython-&#34;&gt;Why Is TinyGo a Great Alternative to C++ and MicroPython?&lt;/h2&gt;&lt;p&gt;I am not going to the language bash. C, Python, and Go are all great languages in their own way. With that being said, there is plenty of room for this project to grow and come to fruition with the right support.&lt;/p&gt;&lt;p&gt;Golang has significantly grown in popularity over the past few years. It is quickly becoming the de facto choice of language for cloud-native development due to its &amp;#34;first-class&amp;#34; support. In the &lt;a href=&#34;https://insights.stackoverflow.com/survey/2017#most-popular-technologies&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Stack Overflow Developer Survey 2017 for Most popular technologies&lt;/a&gt;, Go entered the list for the first time and only scored 4.4%. In contrast to 2020, only 3 years later, it scored &lt;a href=&#34;https://insights.stackoverflow.com/survey/2020#technology-programming-scripting-and-markup-languages-all-respondents&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;8.8%&lt;/a&gt;. Let&amp;#39;s the couple that with Golang being associated with some of the most sought-after skills and top paying salaries worldwide. It is only right to assume this growth will continue.&lt;/p&gt;&lt;p&gt;In addition, looking at the IoT market, we can see yet another upwards trend. In 2017, Garner forecasted 8.4 billion IoT devices to be connected. Fast-track to 2025, and there is a prediction of up to 30 billion devices being connected. This is a huge leap! The growth of Golang and its baby sibling, TinyGo, can help fuel the IoT fire.&lt;/p&gt;&lt;h2 id=&#34;TinyGo-in-Action&#34;&gt;TinyGo in Action&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s look at how Golang IoT shapes up with some code!&lt;/p&gt;&lt;p&gt;For this blog post, I have created a small program for you to create that turns 4 LEDs on when a phototransistor detects no light. This is essentially how outdoor night lights work.&lt;/p&gt;&lt;p&gt;To do this, I have used:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Visual Studio Code + TinyGo plugin&lt;/li&gt;&lt;li&gt;TinyGo version &lt;code&gt;&lt;span&gt;0.18&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt; darwin&lt;span&gt;/&lt;/span&gt;amd64&lt;/code&gt; (using Golang version &lt;code&gt;&lt;span&gt;1.16&lt;/span&gt;&lt;/code&gt; and LLVM version &lt;code&gt;&lt;span&gt;11.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;1 x Arduino Uno R3&lt;/li&gt;&lt;li&gt;1 x  Breadboard&lt;/li&gt;&lt;li&gt;8 x Male-Male wires&lt;/li&gt;&lt;li&gt;5 x Resistors (1 x 10kΩ / 4 x 220Ω)&lt;/li&gt;&lt;li&gt;1 x Phototransistor&lt;/li&gt;&lt;li&gt;4 LEDs&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Step-1-&#34;&gt;Step 1:&lt;/h3&gt;&lt;p&gt;If you haven&amp;#39;t already, &lt;a href=&#34;https://golang.org/doc/install&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;install Go&lt;/a&gt; and then download and &lt;a href=&#34;https://tinygo.org/getting-started/install/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;install TinyGo&lt;/a&gt; on your machine.&lt;/p&gt;&lt;p&gt;To check if Go is installed, run the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;go version&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To check if TinyGo is installed, run the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tinygo version&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, install the TinyGo Visual Studio Code Plugin.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/TPJESp0S9pdn3L8uAvDKn/820fe16c173b0ba789be43ad7a7be94c/02_tiny.png&#34; alt=&#34;install tinygo vscode editor plugin&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Step-2-&#34;&gt;Step 2:&lt;/h3&gt;&lt;p&gt;Plugin the board with a USB cable (in this example, I am using an Arduino R3) and target it with the editor. Once targeted, the editor will prompt a reload of the window.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3fruuXSiUdJFWW9F3vvqAh/149c1725df6a52ae2e91546e74cc1b18/03_tiny.png&#34; alt=&#34;tinygo select the target board&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6QR634B8bipgZAIBUJvdoT/8e89bc62d7c9a858b1995ad732e78e58/04_tiny.png&#34; alt=&#34;reload the vscode editor&#34;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;🚨 Warning 🚨:&lt;/strong&gt; The editor might prompt you to update the &lt;code&gt;go dev&lt;/code&gt; tools within the editor. If you execute the update, you may get an error due to a known bug. Until this is fixed, it is advised to not update the tools.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/UgrMtLf7UmXwLxhenjy6X/a6e66e3910ca85f98752fe33234b8c5b/05_tiny.png&#34; alt=&#34;vscode update tools notification&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Step-3-&#34;&gt;Step 3:&lt;/h3&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Create a project in the directory &lt;code&gt;$&lt;span&gt;HOME&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;go&lt;span&gt;/&lt;/span&gt;src&lt;span&gt;/&lt;/span&gt;github&lt;span&gt;.&lt;/span&gt;com&lt;span&gt;/&lt;/span&gt;tinygo&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$ &lt;span&gt;mkdir&lt;/span&gt; light-sensor&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;Change into the newly created project directory&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$ &lt;span&gt;cd&lt;/span&gt; light-sensor&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;&lt;li&gt;Create a new &lt;code&gt;&lt;span&gt;.&lt;/span&gt;go&lt;/code&gt; file for the application within the project directory&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$ &lt;span&gt;touch&lt;/span&gt; light-sensor.go&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;&lt;li&gt;Create a go mod file if you are using go modules&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$ go mod init&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;5&#34;&gt;&lt;li&gt;Finally, open the project in Visual Studio Code&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;Step-4-&#34;&gt;Step 4:&lt;/h3&gt;&lt;p&gt;First, read the code and comments below, and then secondly, write it out. Don&amp;#39;t copy and paste!&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;machine&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;time&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// Initialise Analog pins&lt;/span&gt;&#xA;    machine&lt;span&gt;.&lt;/span&gt;&lt;span&gt;InitADC&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// Set the light sensor to Analog pin 0&lt;/span&gt;&#xA;    lightSensor &lt;span&gt;:=&lt;/span&gt; machine&lt;span&gt;.&lt;/span&gt;ADC&lt;span&gt;{&lt;/span&gt;Pin&lt;span&gt;:&lt;/span&gt; machine&lt;span&gt;.&lt;/span&gt;ADC0&lt;span&gt;}&lt;/span&gt;&#xA;    lightSensor&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Configure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;machine&lt;span&gt;.&lt;/span&gt;ADCConfig&lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;// Set the LEDs to the corresponding pins&lt;/span&gt;&#xA;    leds &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;machine&lt;span&gt;.&lt;/span&gt;Pin&lt;span&gt;{&lt;/span&gt;&#xA;        machine&lt;span&gt;.&lt;/span&gt;D7&lt;span&gt;,&lt;/span&gt;&#xA;        machine&lt;span&gt;.&lt;/span&gt;D8&lt;span&gt;,&lt;/span&gt;&#xA;        machine&lt;span&gt;.&lt;/span&gt;D9&lt;span&gt;,&lt;/span&gt;&#xA;        machine&lt;span&gt;.&lt;/span&gt;D10&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// Configure each LED as an output&lt;/span&gt;&#xA;    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;_&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; led &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; leds &lt;span&gt;{&lt;/span&gt;&#xA;        led&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Configure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;machine&lt;span&gt;.&lt;/span&gt;PinConfig&lt;span&gt;{&lt;/span&gt;Mode&lt;span&gt;:&lt;/span&gt; machine&lt;span&gt;.&lt;/span&gt;PinOutput&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// Constantly loop to get the light sensor reading every 0.1 seconds&lt;/span&gt;&#xA;    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;// 30000 is the lighting threshold for my environment&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; lightSensor&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;30000&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;// Turn the LEDs off&lt;/span&gt;&#xA;            &lt;span&gt;for&lt;/span&gt; &lt;span&gt;_&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; led &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; leds &lt;span&gt;{&lt;/span&gt;&#xA;                led&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Set&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;// Turn the LEDs on&lt;/span&gt;&#xA;            &lt;span&gt;for&lt;/span&gt; &lt;span&gt;_&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; led &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; leds &lt;span&gt;{&lt;/span&gt;&#xA;                led&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Set&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;// Time to wait before next light sensor reading is collected&lt;/span&gt;&#xA;        time&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Sleep&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;time&lt;span&gt;.&lt;/span&gt;Millisecond &lt;span&gt;*&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Step-5-&#34;&gt;Step 5:&lt;/h3&gt;&lt;p&gt;Connect the components, so they resemble the circuit board shown below.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2DfJWFFXVvp38jclNPNH0m/21c2eae0341fc09b98f8daff298063ed/06_tiny.png&#34; alt=&#34;circuit board diagram&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5CWIRVVG7BAMXeryu8d1EU/1be865f5accd679cd8ba55ca33576d12/07_tiny_pic.jpg&#34; alt=&#34;circuit board&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Step-6-&#34;&gt;Step 6:&lt;/h3&gt;&lt;p&gt;Next, find what port the connected device is running on. To do that, enter the following command into a terminal or navigate to the device manager.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Mac:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ &lt;span&gt;ls&lt;/span&gt; /dev/cu*&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Linux:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ &lt;span&gt;ls&lt;/span&gt; /dev/tty*&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Windows:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Open Device Manager and expand the Ports (COM &amp;amp; LPT) list. Find your connected device and make a note of the port number. You will need this to flash the device in the next step.&lt;/p&gt;&lt;p&gt;Alternatively, visit &lt;a href=&#34;https://www.mathworks.com/help/supportpkg/arduinoio/ug/find-arduino-port-on-windows-mac-and-linux.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;MathWorks&lt;/a&gt; website for more information on how to find the port number of your connected device.&lt;/p&gt;&lt;h3 id=&#34;Step-7-&#34;&gt;Step 7:&lt;/h3&gt;&lt;p&gt;Now you have the port number, the device is connected and targeted through the editor, and you have written the code. The next step is to flash the board. To do this, enter the command below into a terminal.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tinygo flash -target&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;board-you-are-targeting&lt;span&gt;&amp;gt;&lt;/span&gt; -port&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;device-port-from-step-&lt;span&gt;&lt;span&gt;6&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;name-of-file&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tinygo flash -target&lt;span&gt;=&lt;/span&gt;Arduino -port&lt;span&gt;=&lt;/span&gt;/dev/cu.usbmodem143201 light-sensor.go&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you have completed the device flash, it should look like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://imgur.com/srh5UM1.gif&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Takeaways&#34;&gt;Takeaways&lt;/h2&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;TinyGo is an excellent alternative for embedded systems and WebAssembly development.&lt;/li&gt;&lt;li&gt;Being a smaller compiler for the Go language, existing Go developers can enter the IoT space with their current skills.&lt;/li&gt;&lt;li&gt;Adoption is continuously growing, and TinyGo is supported by the most common microcontroller boards already, reducing the barriers to entry for newcomers and hobbyists.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;TinyGo is still a very experimental project which has come on leaps and bounds over a short period of time. With Go&amp;#39;s impact in the software world continuing to grow, TinyGo could be a project to keep an eye on. Having multiple lightweight alternatives to the main language is needed for IoT and edge computing since there is often limited compute power available and overall needs exploding. TinyGo is just another example of a great slimmed-down alternative to the dominant languages for microcontrollers. I, for one, will certainly be keeping an eye out for a linear adoption pattern and continue to monitor and research exciting projects like this.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/tinygo-good-things-come-in-small-packages/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">A beginners guide into the world of IoT with TinyGo.</summary>
  </entry>
  <entry>
    <title>Best Practices for Flask API Development</title>
    <updated>2021-08-30T14:56:00Z</updated>
    <id>tag:auth0.com,2021-08-30:/blog/best-practices-for-flask-api-development/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Python is my favorite programming language. Its adaptability, readability, and coding speed are unique and make &lt;a href=&#34;https://livecodestream.dev/post/what-is-python-best-for/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;python a powerful choice in various projects&lt;/a&gt;, from data science projects to scripting and, of course, APIs.&lt;/p&gt;&lt;p&gt;Python is a popular choice for API development, not only because it is one of the &lt;a href=&#34;https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;most loved programming languages&lt;/a&gt;, but also because of its rich ecosystem of libraries and frameworks that serve that goal, libraries with immense popularity such as &lt;a href=&#34;https://www.djangoproject.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Django&lt;/a&gt;, &lt;a href=&#34;https://flask.palletsprojects.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Flask&lt;/a&gt;, and &lt;a href=&#34;https://fastapi.tiangolo.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;FastAPI&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;But which framework should you use to build your APIs with Python? It’s 100% up to you, but there are important considerations to keep in mind. After all, some of these frameworks are different, even from the ideology.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Django is an all-inclusive framework. It provides tools and modules for handling API requests, serialization, database connections, automatic admin UI generation, and so much more.&lt;/li&gt;&lt;li&gt;Flask, on the contrary, is a minimalist framework, it provides only the necessary tools, but it extends its functionality with additional libraries and frameworks. The great part is, you decide exactly what you need for your project, nothing more.&lt;/li&gt;&lt;li&gt;FastAPI is a relatively new framework. It makes use of newer python features such as type-hints, concurrency handling (with async), and it’s super fast.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I work a lot with Flask and FastAPI, and I love both. I love the flexibility and adaptability of these frameworks, and for today&amp;#39;s article, we will be focusing on Flask.&lt;/p&gt;&lt;p&gt;The following tips and practices are the result of research and more than eight years of experience building and shipping production-grade APIs with Python:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Design your API endpoints with proper names and HTTP verbs&lt;/li&gt;&lt;li&gt;How to properly structure your application&lt;/li&gt;&lt;li&gt;Build your documentation from the code&lt;/li&gt;&lt;li&gt;Testing&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Let’s get started!&lt;/strong&gt; 🚀&lt;/p&gt;&lt;h2 id=&#34;Design-Your-API-Endpoints-with-Proper-Names-and-HTTP-Verbs&#34;&gt;Design Your API Endpoints with Proper Names and HTTP Verbs&lt;/h2&gt;&lt;p&gt;An adequately designed API is easy and straightforward for developers to understand. By reading the &lt;a href=&#34;https://en.wikipedia.org/wiki/Uniform_Resource_Identifier&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;URI&lt;/a&gt; and HTTP verb (more on this later), a developer can pretty much have a good understanding of what to expect to happen when calling a particular method.&lt;/p&gt;&lt;p&gt;But how does that work? Let’s start with naming URIs. In REST, we called &lt;code&gt;Resource&lt;/code&gt; to a first-level data representation. Naming these resources &lt;strong&gt;consistently&lt;/strong&gt; throughout your API will turn out to be one of the best decisions for the long term.&lt;/p&gt;&lt;p&gt;Note that I highlighted consistently in the previous sentence, as it’s a key factor. Sure, there are particular ways to name your resources, and we will cover them, but being consistent is more important to the actual convention you choose.&lt;/p&gt;&lt;p&gt;Let’s start getting practical by modeling a simple eCommerce website with customers, orders, and a checkout process.&lt;/p&gt;&lt;p&gt;Our primary resource is &lt;code&gt;customers&lt;/code&gt;, which is a collection of the instance &lt;code&gt;customer&lt;/code&gt;. With this information, we can identify the collection resource by the URI &lt;code&gt;&lt;span&gt;/&lt;/span&gt;customers&lt;/code&gt; or a single resource by using the URI &lt;code&gt;&lt;span&gt;/&lt;/span&gt;customers&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;customerId&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;. Subsequently, we can identify sub-resources such as &lt;code&gt;orders&lt;/code&gt;, and we can identify them as &lt;code&gt;&lt;span&gt;/&lt;/span&gt;customers&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;customerId&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;orders&lt;/code&gt;, or a single order resource by &lt;code&gt;&lt;span&gt;/&lt;/span&gt;customers&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;customerId&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;orders&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;orderId&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;h3 id=&#34;Best-practices-naming-resources&#34;&gt;Best practices naming resources&lt;/h3&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Use nouns in their plural form to represent resources, eg:&#xA; &lt;ul&gt;&lt;li&gt;✅ Users of a system: &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;/code&gt;, &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;✅ User’s playlists: &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;playlists&lt;/code&gt;, &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;playlists&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;playlistId&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Use hyphens “-” to separate words and improve redeability&#xA; &lt;ul&gt;&lt;li&gt;✅ &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;mobile&lt;span&gt;-&lt;/span&gt;devices&lt;/code&gt;&lt;/li&gt;&lt;li&gt;❌ &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;mobileDevices&lt;/code&gt;&lt;/li&gt;&lt;li&gt;❌ &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;mobile_devices&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Use forward slashes “/’ to indicate hierarchy&#xA; &lt;ul&gt;&lt;li&gt;✅ &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;mobile&lt;span&gt;-&lt;/span&gt;devices&lt;/code&gt;&lt;/li&gt;&lt;li&gt;❌ &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;-&lt;/span&gt;mobile&lt;span&gt;-&lt;/span&gt;devices&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;❌ &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;-&lt;/span&gt;mobile&lt;span&gt;-&lt;/span&gt;devices&lt;span&gt;/&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;userId&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Use only lowercase letters in URIs&#xA; &lt;ul&gt;&lt;li&gt;✅ &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;mobile&lt;span&gt;-&lt;/span&gt;devices&lt;/code&gt;&lt;/li&gt;&lt;li&gt;❌ &lt;code&gt;&lt;span&gt;/&lt;/span&gt;Users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;Mobile&lt;span&gt;-&lt;/span&gt;Devices&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Now that we understand how to name resources, we need to think about actions. There are methods in our APIs that are procedural by nature and are not related to a specific resource, e.g., checkout, run, play, etc.&lt;/p&gt;&lt;h3 id=&#34;Best-practices-naming-actions&#34;&gt;Best practices naming actions&lt;/h3&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Use verbs to represent actions, e.g.:&#xA; &lt;ul&gt;&lt;li&gt;✅ Execute a checkout action: &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;cart&lt;span&gt;/&lt;/span&gt;checkout&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Same as resources, use hyphens, forward slashes, and lowercase letters.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;One crucial point here is to differentiate between CRUD functions and actions, as both are actions. In REST, CRUD operations, such as Create, Read, Update and Delete, are handled through HTTP verbs and not by the URI.&lt;/p&gt;&lt;h3 id=&#34;But-what-are-HTTP-verbs-or-HTTP-request-methods-&#34;&gt;But what are HTTP verbs or HTTP request methods?&lt;/h3&gt;&lt;p&gt;HTTP defines a set of request methods to indicate an action to be performed for a resource (sounds familiar?). The list includes several, but we will be focusing on 5:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;: should be for data retrieval.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;: should be used to create a new resource.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;PUT&lt;/strong&gt;: should be used to update information about a specific resource.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;DELETE&lt;/strong&gt;: should be used to delete a particular resource.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;PATCH&lt;/strong&gt;: should be used to update partial information about a particular resource.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Example-for-our-eCommerce-website&#34;&gt;Example for our eCommerce website&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;✅ &lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;/code&gt;: lists of all users.&lt;/li&gt;&lt;li&gt;✅ &lt;strong&gt;POST&lt;/strong&gt; &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;/code&gt;: creates a new user.&lt;/li&gt;&lt;li&gt;✅ &lt;strong&gt;PUT&lt;/strong&gt; &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;: updates a user.&lt;/li&gt;&lt;li&gt;✅ &lt;strong&gt;DELETE&lt;/strong&gt; &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;: deletes a specific user.&lt;/li&gt;&lt;li&gt;✅ &lt;strong&gt;PATCH&lt;/strong&gt; &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;: partially updates a user.&lt;/li&gt;&lt;li&gt;✅ &lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;orders&lt;/code&gt;: lists of all orders for a particular user.&lt;/li&gt;&lt;li&gt;✅ &lt;strong&gt;POST&lt;/strong&gt; &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;cart&lt;span&gt;/&lt;/span&gt;checkout&lt;/code&gt;: runs the checkout process.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;What you shouldn&amp;#39;t do:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;❌ &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;get&lt;span&gt;-&lt;/span&gt;all&lt;/code&gt;&lt;/li&gt;&lt;li&gt;❌ &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;create&lt;/code&gt;&lt;/li&gt;&lt;li&gt;❌ &lt;code&gt;&lt;span&gt;/&lt;/span&gt;users&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;userId&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;list&lt;span&gt;-&lt;/span&gt;orders&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In any form of GET, POST, or another verb.&lt;/p&gt;&lt;h2 id=&#34;How-to-Properly-Structure-Your-Application&#34;&gt;How to Properly Structure Your Application&lt;/h2&gt;&lt;p&gt;I’d like to start this section by saying that there’s no one correct way to structure your application depending on application size, modules, requirements, or even personal preferences. This could vary. However, I’d like to introduce you to how my team structures Flask applications, and we used this setup for multiple production projects.&lt;/p&gt;&lt;p&gt;You can follow the explanation of the structure in the article, and you can also find this structure ready to use in the &lt;a href=&#34;https://github.com/bajcmartinez/flask-api-starter-kit&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Flask API starter kit on github&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;project/&#xA;    api/&#xA;        model/&#xA;            __init__.py&#xA;            welcome.py&#xA;        route/&#xA;            home.py&#xA;        schema/&#xA;            __init__.py&#xA;            welcome.py&#xA;        service&#xA;            __init__.py&#xA;            welcome.py&#xA;&#xA;    test/&#xA;        route/&#xA;            __init__.py&#xA;            test_home.py&#xA;        __init.py&#xA;&#xA;    .gitignore&#xA;    app.py&#xA;    Pipfile&#xA;    Pipfile.lock&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let’s now break it down and explain each module.&lt;/p&gt;&lt;p&gt;All the application magic happens inside the API module (&lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;/code&gt;), there, we split the code into 4 main parts:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;code&gt;models&lt;/code&gt; are the data descriptor of our application, in many cases related to the database model. How each model is defined will heavily depend on the library you use to connect to your database.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;routes&lt;/code&gt; are the URIs to our application, where we define our resources and actions.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;schemas&lt;/code&gt; are the definitions for inputs and outputs of our API, what parameters are allowed, what information we will output. They correlate to our resources, but they are not necessarily the same as our models.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;services&lt;/code&gt; are modules that define application logic or interact with other services or the db layer. Routes should be as simple as possible and delegate all logic to the services.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Each endpoint in Flask can be defined on its own or by groups called &lt;a href=&#34;https://flask.palletsprojects.com/en/2.0.x/blueprints/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;blueprints&lt;/a&gt;. In my case, I like the grouping Blueprints provide, and I use them for each resource. Let’s take a look at what an example of our welcome route (&lt;code&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;route&lt;span&gt;/&lt;/span&gt;home&lt;span&gt;.&lt;/span&gt;py&lt;/code&gt;) would look like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; http &lt;span&gt;import&lt;/span&gt; HTTPStatus&#xA;&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt; Blueprint&#xA;&lt;span&gt;from&lt;/span&gt; flasgger &lt;span&gt;import&lt;/span&gt; swag_from&#xA;&lt;span&gt;from&lt;/span&gt; api&lt;span&gt;.&lt;/span&gt;model&lt;span&gt;.&lt;/span&gt;welcome &lt;span&gt;import&lt;/span&gt; WelcomeModel&#xA;&lt;span&gt;from&lt;/span&gt; api&lt;span&gt;.&lt;/span&gt;schema&lt;span&gt;.&lt;/span&gt;welcome &lt;span&gt;import&lt;/span&gt; WelcomeSchema&#xA;&#xA;home_api &lt;span&gt;=&lt;/span&gt; Blueprint&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;api&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; __name__&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&#xA;&lt;span&gt;@home_api&lt;span&gt;.&lt;/span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;@swag_from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#39;responses&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        HTTPStatus&lt;span&gt;.&lt;/span&gt;OK&lt;span&gt;.&lt;/span&gt;value&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;Welcome to the Flask Starter Kit&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#39;schema&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; WelcomeSchema&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;welcome&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;    1 liner about the route&#xA;    A more detailed description of the endpoint&#xA;    ---&#xA;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;    result &lt;span&gt;=&lt;/span&gt; WelcomeModel&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; WelcomeSchema&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;dump&lt;span&gt;(&lt;/span&gt;result&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let’s break all of it into 3 pieces:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;home_api &lt;span&gt;=&lt;/span&gt; Blueprint&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;api&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; __name__&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is where we declared our Blueprint, which we can consequently use to declare our endpoints or routes. In this case, our grouping is pretty basic, but we can do much more with grouping, like defining prefixes, resource folders, and more.&lt;/p&gt;&lt;p&gt;For example if we would like to have our &lt;code&gt;home&lt;/code&gt; blueprint always as a nested route of &lt;code&gt;&lt;span&gt;/&lt;/span&gt;home&lt;span&gt;-&lt;/span&gt;service&lt;/code&gt;, we could do:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;home_api &lt;span&gt;=&lt;/span&gt; Blueprint&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;api&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; __name__&lt;span&gt;,&lt;/span&gt; url_prefix&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;/home-service&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next we declare one route, but we split it in 2 parts:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@home_api&lt;span&gt;.&lt;/span&gt;route&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;@swag_from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#39;responses&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        HTTPStatus&lt;span&gt;.&lt;/span&gt;OK&lt;span&gt;.&lt;/span&gt;value&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;Welcome to the Flask Starter Kit&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;&amp;#39;schema&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; WelcomeSchema&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We use annotations on top of functions to convert them into endpoints and provide additional information, e.g., documentation information, more on that in the next section.&lt;/p&gt;&lt;p&gt;And finally, our route code, which is just a Python function.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;welcome&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;    1 liner about the route&#xA;    A more detailed description of the endpoint&#xA;    ---&#xA;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;    result &lt;span&gt;=&lt;/span&gt; WelcomeModel&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; WelcomeSchema&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;dump&lt;span&gt;(&lt;/span&gt;result&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that we don’t simply return a string or JSON object directly, but we use our schemas instead. In our example, I’m using &lt;a href=&#34;https://flask-marshmallow.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;flask-marshmallow&lt;/a&gt; serialization library for its purposes.&lt;/p&gt;&lt;h2 id=&#34;Build-Your-Documentation-from-the-Code&#34;&gt;Build Your Documentation from the Code&lt;/h2&gt;&lt;p&gt;You build your API, you shipped to production, and developers are eager to consume it, but how would they know what endpoints are available and how to use them? The simple answer is by reading the documentation.&lt;/p&gt;&lt;p&gt;The documentation can be built in 2 ways, you can open up an editor and write it “manually”, or you can use the code to generate your documentation. If you like the idea of automatic documentation, you will love &lt;a href=&#34;https://swagger.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;swagger&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Swagger is an open-source specification that allows you to describe each element of your API so that any machine or system can interpret it and interact with it. Thanks to this specification, many tools have been developed to provide rich interfaces to make our documentation dynamic and interactive, but also to provide developers with tools to easily generate these swagger files.&lt;/p&gt;&lt;p&gt;For Flask, there are multiple libraries for automatic Swagger generation, but my favorite is &lt;a href=&#34;https://github.com/flasgger/flasgger&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;flasgger&lt;/a&gt;. Flassger provides annotations and other tools to generate your documentation, and it also provides a pretty web interface where you can see each endpoint, its inputs, and outputs and even run the endpoints directly from the docs.&lt;/p&gt;&lt;p&gt;Here is an image of it in action:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3Dz9nOtHkd2JlQxbcCKKKQ/b65d997f2bf20418a7143279e096940b/swagger_demo.png&#34; alt=&#34;Swagger demo page&#34;/&gt;&lt;/p&gt;&lt;p&gt;It’s highly configurable and compatible with our serialization library by using an additional library called &lt;a href=&#34;https://apispec.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;apispec&lt;/a&gt;. It’s all pretty easy to set up, but you can also make use of the &lt;a href=&#34;https://github.com/bajcmartinez/flask-api-starter-kit&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Flask starter kit&lt;/a&gt;, and you will have it all done for you.&lt;/p&gt;&lt;p&gt;But once you have it up and running, where is the information taken for the docs? From 2 places:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Remember our swag_from function annotation? There we can provide detailed information about the inputs and outputs&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  &lt;span&gt;@swag_from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#39;responses&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;          HTTPStatus&lt;span&gt;.&lt;/span&gt;OK&lt;span&gt;.&lt;/span&gt;value&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;              &lt;span&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;Welcome to the Flask Starter Kit&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;              &lt;span&gt;&amp;#39;schema&amp;#39;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; WelcomeSchema&#xA;          &lt;span&gt;}&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;We can also use string literals in functions to provide a description for the endpoint, similar to what we did here:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;welcome&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;      1 liner about the route&#xA;      A more detailed description of the endpoint&#xA;      ---&#xA;      &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are many more options and customizations; it’s all well documented on their &lt;a href=&#34;https://github.com/flasgger/flasgger&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;official docs&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Testing&#34;&gt;Testing&lt;/h2&gt;&lt;p&gt;If you are like me, perhaps you hate writing tests, but if you are like me, you know it’s worth it. Testing, when done properly, increases efficiency and quality in the long run. They also reassure developers when making changes, refactoring, or building new features on existing systems.&lt;/p&gt;&lt;p&gt;Building tests shouldn’t be too hard, and it should happen naturally during development. I struggled a lot with it in the past because I’d always first develop the feature, the endpoint, or the function and then write the tests, just to get it done.&lt;/p&gt;&lt;p&gt;I’m not saying that approach is wrong, but there’s a better way. TDD, or test-driven development, it’s a concept idea where you write tests first, and just then you write the actual code we want to test.&lt;/p&gt;&lt;p&gt;How does it work? Let’s suppose we need to write a function that will add 2 numbers and return the result; exciting, right?&lt;/p&gt;&lt;p&gt;With TDD, our approach would be first to write the tests.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;test_answer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;assert&lt;/span&gt; sum_two_numbers&lt;span&gt;(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, we run the tests, and it fails because our function doesn’t even exist yet. So next, we write our function:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sum_two_numbers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;num1&lt;span&gt;,&lt;/span&gt; num2&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; num1 &lt;span&gt;*&lt;/span&gt; num2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, we rerun our tests, and they still fail. Our assertion fails, but why? It turns out that I made a simple mistake. As clumsy as I am, I put a * instead of a +; this would have been very hard to notice without our tests, but thanks god, we have them.&lt;/p&gt;&lt;p&gt;We fix our function, and now everything runs perfectly.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sum_two_numbers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;num1&lt;span&gt;,&lt;/span&gt; num2&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; num1 &lt;span&gt;+&lt;/span&gt; num2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the exercise we did, it sounds kind of silly, but with more complex functions and code mistakes happen, and having tests first will help a lot; I say that from experience.&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Best practices can be different for different frameworks, problems to solve, or even people, there’s no one way of doing things right, and that’s something I love about programming. However, having basic principles to rely on when designing and developing APIs can help your team, and other developers consume your API products.&lt;/p&gt;&lt;p&gt;Being consistent in naming, separating concepts in modules or folders in your project, documenting directly from your code, and properly testing are just examples of things that can make your life easier, more productive, and take you to the next level.&lt;/p&gt;&lt;p&gt;I hope you enjoyed reading this article!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/best-practices-for-flask-api-development/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to design and build REST APIs with Python and Flask following best practices.</summary>
  </entry>
  <entry>
    <title>Introduction to Async Programming in C#</title>
    <updated>2021-08-26T14:55:00Z</updated>
    <id>tag:auth0.com,2021-08-26:/blog/introduction-to-async-programming-in-csharp/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;You probably already read about asynchronous programming. &lt;code&gt;&lt;span&gt;async&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;await&lt;/span&gt;&lt;/code&gt; words are used everywhere, no matter which programming language we choose. Talking about .NET framework, and C# in particular, we have some native functions, classes, and reserved words that we can use to implement asynchronous tasks and workflows in our projects.&lt;/p&gt;&lt;p&gt;In this article, we will talk about synchronism, parallelism, concurrency, and how to implement asynchronous algorithms in our C# applications.&lt;/p&gt;&lt;h2 id=&#34;Synchronous-and-Asynchronous-Tasks&#34;&gt;Synchronous and Asynchronous Tasks&lt;/h2&gt;&lt;p&gt;As a developer, you surely faced scenarios where certain actions or operations took a considerable amount of time to execute. We regularly have to do long-running tasks such as reading a file, calling an API, or downloading a big file. We could wait for one of these tasks to be finished before executing another task. If that&amp;#39;s the case, we say we are working in a &amp;#34;synchronous&amp;#34; way. By doing this, the whole application gets blocked and stops responding until the whole task is completed, and we can move on to a new one.&lt;/p&gt;&lt;p&gt;In some cases, we don&amp;#39;t have any alternative. If we have Task1 and Task2 that depend on the result of the first action, we will have to wait until Task1 finishes executing to start Task2. But we could have the scenario where the subsequent tasks (or some of them) don&amp;#39;t depend on the result of the previous long-running task. If that&amp;#39;s the case, we have different strategies and approaches that we could take to make our application faster and in a more performant way.&lt;/p&gt;&lt;p&gt;For example, we could have an application that runs concurrent tasks internally. There is a button and a task executed when it is clicked. Right after the user clicks on the button, the application can trigger a separate thread to run the requested task. In the meantime, the main thread becomes available to execute other actions while the button&amp;#39;s task is executed in the background. Doing this, we keep the UI responsive in case the user wants to interact with it.&lt;/p&gt;&lt;p&gt;Another scenario would be needing to run multiple copies of a certain group of actions or instructions. An example of this would be uploading many files at the same time. In this case, our application could trigger one thread per file and execute the necessary code inside of them. Doing this, we would be processing the files in a &amp;#34;parallel&amp;#34; way. In a nutshell, here is the difference between the two concepts: concurrency means the application is making progress on more than one task at the same time, while parallelism is about running multiple tasks simultaneously.&lt;/p&gt;&lt;p&gt;But let&amp;#39;s say we have to read a big file, call an API, and do some complex calculations. There is no dependency between the three tasks, but we need the result of all of them to continue the execution of our application and update the UI. In this case, we could execute our tasks &amp;#34;asynchronously&amp;#34; with the three ones running simultaneously and wait for their result to do the subsequent tasks.&lt;/p&gt;&lt;h2 id=&#34;What-Is-Asynchronous-Programming-&#34;&gt;What Is Asynchronous Programming?&lt;/h2&gt;&lt;p&gt;We could define asynchronous programming as the way of executing programming code in a thread without having to wait for an I/O-bound or CPU-bound task to finish. I/O-bound operations could be file-system accesses, HTTP requests, API calls, or database queries. And CPU-bound operations would be actions like encrypting data, complex calculations, image or document management.&lt;/p&gt;&lt;p&gt;One of the ideas of asynchronous programming is to divide our logic into &lt;em&gt;awaitable&lt;/em&gt; tasks so that we don&amp;#39;t block the execution of our application. We can call an async method and get a task object that represents it. In the meantime, we can do some not related and not dependant work. After we execute those operations, we await the async task, which may already be finished or not. If the execution is finished, we will get the resulting value from the task and use it in the next dependant operations.&lt;/p&gt;&lt;h3 id=&#34;Benefits&#34;&gt;Benefits&lt;/h3&gt;&lt;p&gt;Some of the benefits we have working with asynchronous tasks are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;We keep the UI of our app responsive.&lt;/li&gt;&lt;li&gt;We improve the performance of our application.&lt;/li&gt;&lt;li&gt;We avoid &lt;a href=&#34;https://medium.com/criteo-engineering/net-threadpool-starvation-and-how-queuing-makes-it-worse-512c8d570527&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;thread pool starvation&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Drawbacks&#34;&gt;Drawbacks&lt;/h3&gt;&lt;p&gt;Although, there are some drawbacks when working with async programming:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Code gets more complex and harder to maintain.&lt;/li&gt;&lt;li&gt;There is increased memory allocation, as some objects have to stay alive longer while awaiting other code to be executed.&lt;/li&gt;&lt;li&gt;It can get hard to find bugs occurring in asynchronous tasks.&lt;/li&gt;&lt;li&gt;When we&amp;#39;re writing an asynchronous piece of code, all our application code tends to become asynchronous.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Asynchronous-Programming-Patterns&#34;&gt;Asynchronous Programming Patterns&lt;/h2&gt;&lt;p&gt;To perform asynchronous operations in .NET, we can follow three different patterns:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Asynchronous Programming Model (APM)&lt;/strong&gt;: Let&amp;#39;s say we have two methods, and we name them &lt;code&gt;BeginOperation&lt;/code&gt; and &lt;code&gt;EndOperation&lt;/code&gt;. After calling &lt;code&gt;BeginOperation&lt;/code&gt;, our application can continue executing tasks on the calling thread while the async task is executed on a different thread. For each call to &lt;code&gt;BeginOperation&lt;/code&gt;, our app should also call &lt;code&gt;EndOperation&lt;/code&gt; method to get the results. In .NET, it can be implemented using &lt;code&gt;IAsyncResult&lt;/code&gt;. Let&amp;#39;s see an example of this model:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;IO&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Threading&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Program&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; buffer &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; fs &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;FileStream&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;bigFile.txt&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; FileMode&lt;span&gt;.&lt;/span&gt;Open&lt;span&gt;,&lt;/span&gt; FileAccess&lt;span&gt;.&lt;/span&gt;Read&lt;span&gt;,&lt;/span&gt; FileShare&lt;span&gt;.&lt;/span&gt;Read&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1024&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; FileOptions&lt;span&gt;.&lt;/span&gt;Asynchronous&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;IAsyncResult&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; fs&lt;span&gt;.&lt;/span&gt;&lt;span&gt;BeginRead&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;buffer&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; buffer&lt;span&gt;.&lt;/span&gt;Length&lt;span&gt;,&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;// Do other things...&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; numBytes &lt;span&gt;=&lt;/span&gt; fs&lt;span&gt;.&lt;/span&gt;&lt;span&gt;EndRead&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;result&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        fs&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Close&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;WriteLine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Read {0}  Bytes:&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; numBytes&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Event-based Asynchronous Pattern (EAP)&lt;/strong&gt;: We start an async method that will trigger a &lt;code&gt;Completed&lt;/code&gt; event when the task is completed, making the result available to our application. This would be an example of this model:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ExampleHandler&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;event&lt;/span&gt; &lt;span&gt;EventHandler&lt;/span&gt; OnTriggerCompleted&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; timeout&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; timer &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Timer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;TimerCallback&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;state&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            OnTriggerCompleted&lt;span&gt;?.&lt;/span&gt;&lt;span&gt;Invoke&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        timer&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Change&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;timeout&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Program&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; handler &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ExampleHandler&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        handler&lt;span&gt;.&lt;/span&gt;OnTriggerCompleted &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;sender&lt;span&gt;,&lt;/span&gt; e&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&#xA;            Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;WriteLine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;$&amp;#34;Triggered at: &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; DateTime&lt;span&gt;.&lt;/span&gt;Now&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ToLongTimeString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        handler&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;WriteLine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;$&amp;#34;Start waiting at &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;DateTime&lt;span&gt;.&lt;/span&gt;Now&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ToLongTimeString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;WriteLine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;$&amp;#34;Processing...&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ReadLine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Task-based Asynchronous Pattern (TAP)&lt;/strong&gt;: We have an &lt;code&gt;OperationAsync&lt;/code&gt; method that returns a &lt;code&gt;Task&lt;/code&gt; object, as in the following example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ClassName&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Task&lt;/span&gt; &lt;span&gt;OperationAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;byte&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt; buffer&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; offset&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; count&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can await that method, using &lt;code&gt;&lt;span&gt;async&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;await&lt;/span&gt;&lt;/code&gt; keywords. We will go deeper into this approach in a while.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Keep in mind that &lt;strong&gt;the APM and EAP approaches are legacy models and they are no longer recommended&lt;/strong&gt;. Microsoft recommends using the &lt;em&gt;Task-based Asynchronous Pattern&lt;/em&gt; to implement async programming in our applications.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Asynchronous-Programming-in-C-&#34;&gt;Asynchronous Programming in C#&lt;/h2&gt;&lt;p&gt;As we mentioned, async programming in C# can be accomplished by implementing the &lt;em&gt;Task-based Asynchronous Pattern&lt;/em&gt;. We will have methods that return a &lt;code&gt;Task&lt;/code&gt; or &lt;code&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; object. Defining those methods as async operations will enable us to await them and keep using the same execution thread to run other operations that are not linked to the awaited task.&lt;/p&gt;&lt;p&gt;C# provides us two keywords to handle &lt;code&gt;Task&lt;/code&gt; objects in an easier way: &lt;code&gt;&lt;span&gt;async&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;await&lt;/span&gt;&lt;/code&gt;. Adding the keyword &lt;code&gt;&lt;span&gt;async&lt;/span&gt;&lt;/code&gt; to a method signature allows us to use the &lt;code&gt;&lt;span&gt;await&lt;/span&gt;&lt;/code&gt; keyword inside the method while instructs the compiler to create a state machine to handle the asynchronicity. On the other hand, the &lt;code&gt;&lt;span&gt;await&lt;/span&gt;&lt;/code&gt; keyword is used to pause the execution of a method and asynchronously wait for a &lt;code&gt;Task&lt;/code&gt; to finish, while the current thread is sent back to the thread pool instead of keeping it in a blocked state. Everything happens in the background, avoiding us to implement and maintain the complexity of thread management and the state of the calls.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s analyze this piece of code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;User&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;GetLoggedUserEmailAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; userId &lt;span&gt;=&lt;/span&gt; &lt;span&gt;GetId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; email &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; &lt;span&gt;GetEmailAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;userId&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;User&lt;/span&gt; user &lt;span&gt;=&lt;/span&gt; &lt;span&gt;GetUserByEmail&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;email&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;return&lt;/span&gt; user&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;GetEmailAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; userId&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;// Do something&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An async method should return &lt;code&gt;&lt;span&gt;void&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;Task&lt;/code&gt;, or &lt;code&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, where &lt;code&gt;&lt;span&gt;T&lt;/span&gt;&lt;/code&gt; is the return data type that we need. Returning &lt;code&gt;&lt;span&gt;void&lt;/span&gt;&lt;/code&gt; is normally used for event handlers. The keyword &lt;code&gt;&lt;span&gt;async&lt;/span&gt;&lt;/code&gt; enables us to use the command &lt;code&gt;&lt;span&gt;await&lt;/span&gt;&lt;/code&gt; within the method so that we can wait for the asynchronous method processing as expected.&lt;/p&gt;&lt;p&gt;Notice that the methods end with &amp;#34;Async&amp;#34;. Although it is not mandatory, there is a naming convention that an asynchronous method name should end with the word &amp;#34;Async&amp;#34;. This convention aims to make it clear to the consumer of the functionality that the method won&amp;#39;t complete all of its work synchronously.&lt;/p&gt;&lt;p&gt;In our previous example, &lt;code&gt;&lt;span&gt;GetId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; is called synchronously. When the execution thread encounters the &lt;code&gt;&lt;span&gt;await&lt;/span&gt;&lt;/code&gt; keyword on &lt;code&gt;&lt;span&gt;await&lt;/span&gt; &lt;span&gt;GetEmailAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;userId&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, it creates a &lt;code&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;User&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; that contains the remainder of the &lt;code&gt;GetLoggedUserEmailAsync&lt;/code&gt; method. This task is executed asynchronously after the &lt;code&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; returned by &lt;code&gt;GetEmailAsync&lt;/code&gt;. So, the &lt;code&gt;User&lt;/code&gt; object is returned from the &lt;code&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;User&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; created by the &lt;code&gt;&lt;span&gt;await&lt;/span&gt;&lt;/code&gt; keyword.&lt;/p&gt;&lt;h2 id=&#34;Asynchronous-Code-in-Action&#34;&gt;Asynchronous Code in Action&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s see a short example to review the concepts previously explained. Having the following console application:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;IO&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Threading&lt;span&gt;.&lt;/span&gt;Tasks&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Program&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;   &lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;Task&lt;/span&gt; &lt;span&gt;Main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt; args&lt;span&gt;)&lt;/span&gt;&#xA;   &lt;span&gt;{&lt;/span&gt;&#xA;       &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; filePath &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;bigFile.txt&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;       &lt;span&gt;// Create a big file&lt;/span&gt;&#xA;       &lt;span&gt;FileStream&lt;/span&gt; fs &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;FileStream&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;filePath&lt;span&gt;,&lt;/span&gt; FileMode&lt;span&gt;.&lt;/span&gt;CreateNew&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       fs&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Seek&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1024&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;1024&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; SeekOrigin&lt;span&gt;.&lt;/span&gt;Begin&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       fs&lt;span&gt;.&lt;/span&gt;&lt;span&gt;WriteByte&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       fs&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Close&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;       &lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt; task &lt;span&gt;=&lt;/span&gt; &lt;span&gt;ReadFileAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;filePath&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;       Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;WriteLine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;A synchronous message&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;       &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; length &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; task&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;       Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;WriteLine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Total file length: &amp;#34;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; length&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;WriteLine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;After reading message&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ReadLine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;   &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;   &lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;Task&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;ReadFileAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; file&lt;span&gt;)&lt;/span&gt;&#xA;   &lt;span&gt;{&lt;/span&gt;&#xA;       Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;WriteLine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Start reading file&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;       &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; length &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;       &lt;span&gt;using&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;StreamReader&lt;/span&gt; reader &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;StreamReader&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;file&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;       &lt;span&gt;{&lt;/span&gt;&#xA;           &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; fileContent &lt;span&gt;=&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; reader&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ReadToEndAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;           length &lt;span&gt;=&lt;/span&gt; fileContent&lt;span&gt;.&lt;/span&gt;Length&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;       Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;WriteLine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Finished reading file&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;       &lt;span&gt;return&lt;/span&gt; length&lt;span&gt;;&lt;/span&gt;&#xA;   &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this application, we read a big file, count the number of characters it has, and print different messages in the console. The method that triggers the file reading operation is defined as asynchronous, and it&amp;#39;s the one that starts the asynchronous thread reading the text. While the message &amp;#34;A synchronous message&amp;#34; is printed, the reading of the file continues. If we execute the application, we can see how the execution thread behaves based on the output messages:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6QF3i0BPAoDOSdF0T1jm07/269b11a895d0f74b415d49aa5b23d106/async-program-console.png&#34; alt=&#34;Asynchronous sample application output&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Summary&#34;&gt;Summary&lt;/h2&gt;&lt;p&gt;In this article, we talked about how we can manage and organize the tasks in our application based on the dependency and order of execution. We talked about synchronism, parallelism, concurrency, and asynchronism. We described async programming, its benefits, and how we can implement it in our C# applications. You can find the code shown in this article in &lt;a href=&#34;https://github.com/auth0-blog/c-sharp-async-intro&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you want to learn more about asynchronous programming in C# and what advanced features we have available, you can go to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/async-in-depth&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Async in depth&lt;/a&gt; by Microsoft.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Asynchronous programming with async and await&lt;/a&gt; by Microsoft.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Asynchronous Programming Guidance&lt;/a&gt; by David Fowler.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Async/Await - Best Practices in Asynchronous Programming&lt;/a&gt; by Microsoft.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h2 id=&#34;Aside--Securing-ASP-NET-Core-with-Auth0&#34;&gt;Aside: Securing ASP.NET Core with Auth0&lt;/h2&gt;&lt;p&gt;Securing ASP.NET Core applications with Auth0 is easy and brings a lot of great features to the table. With &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0&lt;/a&gt;, you only have to write a few lines of code to get a solid &lt;a href=&#34;https://auth0.com/user-management&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;identity management solution&lt;/a&gt;, &lt;a href=&#34;https://auth0.com/docs/sso/single-sign-on&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;single sign-on&lt;/a&gt;, support for &lt;a href=&#34;https://auth0.com/docs/identityproviders&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;social identity providers (like Facebook, GitHub, Twitter, etc.)&lt;/a&gt;, and support for &lt;a href=&#34;https://auth0.com/enterprise&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;enterprise identity providers (like Active Directory, LDAP, SAML, custom, etc.)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;On ASP.NET Core, you need &lt;a href=&#34;https://auth0.com/docs/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;to create an API in your Auth0 Management Dashboard&lt;/a&gt; and change a few things on your code. To create an API, you need to &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free Auth0 account&lt;/a&gt;. After that, you need to go to &lt;a href=&#34;https://manage.auth0.com/#/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the API section of the dashboard&lt;/a&gt; and click on &amp;#34;Create API&amp;#34;. On the dialog shown, you can set the &lt;em&gt;Name&lt;/em&gt; of your API as &amp;#34;Books&amp;#34;, the &lt;em&gt;Identifier&lt;/em&gt; as &amp;#34;&lt;a href=&#34;http://books.mycompany.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://books.mycompany.com&lt;/a&gt;&amp;#34;, and leave the &lt;em&gt;Signing Algorithm&lt;/em&gt; as &amp;#34;RS256&amp;#34;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6HrObJ2eGY7YehLzbBM0sH/066be814a124d98f03224d9b177caa22/net-core-2_creating-api-on-auth0.png&#34; alt=&#34;Creating API on Auth0&#34;/&gt;&lt;/p&gt;&lt;p&gt;After that, you have to add the call to &lt;code&gt;services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; in the &lt;code&gt;&lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method of the &lt;code&gt;Startup&lt;/code&gt; class as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; authority &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; audience &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Audience&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;DefaultAuthenticateScheme &lt;span&gt;=&lt;/span&gt; JwtBearerDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;DefaultChallengeScheme &lt;span&gt;=&lt;/span&gt; JwtBearerDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddJwtBearer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;Authority &lt;span&gt;=&lt;/span&gt; authority&lt;span&gt;;&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;Audience &lt;span&gt;=&lt;/span&gt; audience&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the body of the &lt;code&gt;&lt;span&gt;Configure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method of the &lt;code&gt;Startup&lt;/code&gt; class, you also need to add an invocation to &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; as shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseRouting&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseEndpoints&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;endpoints &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    endpoints&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapControllers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;Make sure you invoke these methods in the order shown above. It is essential so that everything works properly.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Finally, add the following element to the &lt;code&gt;appsettings&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; configuration file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Logging&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ...&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Domain&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_DOMAIN&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Audience&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_AUDIENCE&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Replace the placeholders &lt;code&gt;&lt;span&gt;YOUR_DOMAIN&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;YOUR_AUDIENCE&lt;/span&gt;&lt;/code&gt; with the actual values for the domain that you specified when creating your Auth0 account and the &lt;em&gt;Identifier&lt;/em&gt; you assigned to your API.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/introduction-to-async-programming-in-csharp/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Most languages and frameworks support asynchronous programming. But, what is it exactly? Learn about async programming and how to implement it in C#.</summary>
  </entry>
  <entry>
    <title>Auth0 No-Code Actions Integrations Now Available in Beta</title>
    <updated>2021-08-25T16:57:00Z</updated>
    <id>tag:auth0.com,2021-08-25:/blog/auth0-no-code-actions-integrations-now-available-in-beta/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;a href=&#34;https://auth0.com/blog/actions-now-generally-available/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Actions launched recently&lt;/a&gt; as the next evolution of extensibility with Auth0, picking up where our legacy extensibility tools Rules and Hooks leave off. Actions unifies the Auth0 extensibility experience in one place. With it, we took the power of Rules and Hooks and created a greatly improved developer experience with features such as an industry-standard VS Code style editor, typescript, draft mode, version control, improved secret management, and an expanded library of NPM modules. Actions gives developers the ability to customize Auth0 using the full spectrum of coding options from pro-code to &lt;a href=&#34;https://auth0.com/blog/what-is-low-code-how-low-code-can-speed-digital-transformation/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;low-code&lt;/a&gt;, with the addition of no-code Actions Integrations.&lt;/p&gt;&lt;p&gt;Actions Integrations, as our new zero-code layer, offers an easy experience to extend Auth0 with partner-built innovations with no coding required. Now you can implement key integrations such as Identity Verification or Consent Management to your workflow without writing or maintaining a single line of code, the provider of the integration takes care of that. To use Actions Integrations, simply install an integration from the Auth0 Marketplace and drag-and-drop it into your Actions workflow. Then with only a few configuration settings, the integration is part of your tenant.&lt;/p&gt;&lt;p&gt;Actions Integrations, currently in Beta, are now available through the &lt;a href=&#34;https://marketplace.auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Marketplace&lt;/a&gt; and in Actions in the Auth0 Dashboard. This marks an essential milestone in how you can leverage innovations from Marketplace Partners into your Customer Identity Access Management (CIAM) workflows. Through Actions and Marketplace, we are creating an ecosystem of sustainable, and ever-growing plug-and-play partner integrations that allows developers to solve many identity extensibility scenarios faster and without extra code.&lt;/p&gt;&lt;p&gt;Pro-Code custom Actions will continue to be a core feature of Auth0, with all the support you’ve come to expect. By adding Actions Integrations to our offerings, we give you the option to replace the custom code for common solutions with no-code integrations and leave the custom code layer for unique use cases to you. This reduces your overall maintenance and risks associated with custom code.&lt;/p&gt;&lt;h2 id=&#34;Plug---Play-Extensibility&#34;&gt;Plug &amp;amp; Play Extensibility&lt;/h2&gt;&lt;h3 id=&#34;Endless-innovation--centrally-maintained&#34;&gt;Endless innovation, centrally maintained&lt;/h3&gt;&lt;p&gt;Satisfy your identity requirements right out-of-the-box without having to write custom code. Actions Integrations are reusable modules that are centrally maintained by a vetted Marketplace Partner. Integrations are designed to be maintained by the Partners with updates propagating automatically to all instances.This results in faster time-to-market while greatly reducing maintenance costs and resource drain associated with code updates that can result in having to rebuild Rules and Hooks.&lt;/p&gt;&lt;h3 id=&#34;Common-use-cases&#34;&gt;Common use cases&lt;/h3&gt;&lt;p&gt;Actions Integrations exist for the most common use cases of custom extensibility. These currently include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ID DataWeb:&lt;/strong&gt; Real time and self service global identity verification&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Eva:&lt;/strong&gt; Second-factor voice biometric&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Scaled Access:&lt;/strong&gt; Delegated user access management&lt;/li&gt;&lt;li&gt;&lt;strong&gt;One Trust:&lt;/strong&gt; Consent and user preferences management&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Incognia:&lt;/strong&gt; Mobile identity proofing with address verification&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Incognia:&lt;/strong&gt; Mobile login with location behavioral biometrics&lt;/li&gt;&lt;li&gt;&lt;strong&gt;SecZetta:&lt;/strong&gt; Real-time, risk-based authentication&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Yoonik:&lt;/strong&gt; Second-factor facial biometric&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Infobip:&lt;/strong&gt; Global SMS messaging&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Amazon:&lt;/strong&gt; Simple Notification Service (SNS) for microservices and serverless applications by Amazon&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ClickSend:&lt;/strong&gt; Global SMS messaging&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cumul.io:&lt;/strong&gt; Self-service data visualization platform&lt;/li&gt;&lt;li&gt;&lt;strong&gt;DataGuard:&lt;/strong&gt; Consent and user preference management&lt;/li&gt;&lt;li&gt;&lt;em&gt;&lt;/em&gt;Esendex: SMS authentication&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Mitto:&lt;/strong&gt; Global SMS messaging&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Plivo:&lt;/strong&gt; SMS authentication&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Telesign:&lt;/strong&gt; Global SMS messaging&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vonage:&lt;/strong&gt; Global SMS messaging&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;With Marketplace, we are building partnerships to deliver innovations that further reduce your need to code features from scratch. After the public launch of Actions Integrations, we will continue to grow our Marketplace catalog, adding more services and modules to help you expand and customize your CIAM implementation.&lt;/p&gt;&lt;p&gt;We encourage you to start using Actions integrations to satisfy any of the common use cases that apply to you. And of course, if you encounter any questions or have any comments, please direct them to our team of identity specialists.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/auth0-no-code-actions-integrations-now-available-in-beta/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Actions Integrations reduce the amount of custom code you need to write, maintain, and update.</summary>
  </entry>
  <entry>
    <title>Secure Software Supply Chain with GitHub Security Features</title>
    <updated>2021-08-23T17:03:00Z</updated>
    <id>tag:auth0.com,2021-08-23:/blog/secure-software-supply-chain-with-github-security-features/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; &#xA;One of the most critical aspects of modern software delivery is security. In the era of open-source projects, it is challenging and not easy to control every vulnerability and make sure that our solution does not use a package with serious vulnerabilities.  Today&amp;#39;s threat to supply chain security is unpatched software. In this article, we will learn how to improve code security with GitHub security features.&lt;/p&gt;&lt;h2 id=&#34;Security-Role-in-the-Software-Supply-Chain&#34;&gt;Security Role in the Software Supply Chain&lt;/h2&gt;&lt;p&gt;Application implementation nowadays looks slightly different than a few years ago. Open-source software has become a standard. Using open-source libraries in different kinds of projects is something normal nowadays, and we do not have to write every part of our application from scratch.&lt;/p&gt;&lt;p&gt;When using some open-source code or a library, it is worth not forgetting about security aspects. Industry data suggests that 99 percent of codebases contain open-source code. This is a lot! With this fact, we have to remember about dangers related to vulnerabilities and bugs that can lead to bad consequences. Many examples can be provided where an open-source library was used, but then serious vulnerability was discovered, and in the end, there were problems with keeping security at the right level.&lt;/p&gt;&lt;p&gt;Before we discuss the role of security in the software supply chain, we have to find out what it is. &lt;strong&gt;Software supply chain&lt;/strong&gt; is anything that goes into or affects the source code from development through Continuous Integration and Delivery pipelines until it gets deployed into production and used broadly. Any examples? The software supply chain includes information about who wrote a specific fragment of code, which tools were used to apply security scanning, what is the infrastructure used to host our solution, or what dependencies are used.&lt;/p&gt;&lt;p&gt;When a solution is being developed, often security part is missed or left as the last step in the whole process of the software supply chain. One of the biggest threats to supply chain security nowadays is unpatched software. This is why we should not include security assessment as the last step of our software supply chain. Security should be an ongoing part of software development to make sure that any potential vulnerabilities can be quickly mitigated.&lt;/p&gt;&lt;p&gt;Keeping an eye on every security aspect can be challenging, especially for developers who are focused on the code implementation rather than scanning and searching for vulnerabilities. Also, it is important to provide security feedback to developers right away so that any potential vulnerabilities are eliminated as quickly as possible.&lt;/p&gt;&lt;p&gt;In the following, we will focus on the security features available on GitHub to make sure that our software supply chain is more secure.&lt;/p&gt;&lt;h2 id=&#34;The-Sample-Application&#34;&gt;The Sample Application&lt;/h2&gt;&lt;p&gt;To present some of the security features in action, you can use the sample application that is available on &lt;a href=&#34;https://github.com/auth0-blog/Globomantics-Games&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this GitHub repository&lt;/a&gt;. This repository contains a simple web game written as an ASP .NET Core MVC application in .NET 5. We will not focus on the implementation details in this article. Our goal is to discover and understand different security features available on GitHub and see security scanning in action. With this repository, you can try security features on your own. Use the &lt;a href=&#34;https://github.com/auth0-blog/Globomantics-Games/tree/for-security-features-testing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;security&lt;span&gt;-&lt;/span&gt;features&lt;span&gt;-&lt;/span&gt;testing&lt;/code&gt;&lt;/a&gt; branch as a starting point by running the following command on your machine:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;git&lt;/span&gt; clone -b for-security-features-testing https://github.com/auth0-blog/Globomantics-Games.git&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;GitHub-Security-Features-to-Keep-Secure-Your-Repository&#34;&gt;GitHub Security Features to Keep Secure Your Repository&lt;/h2&gt;&lt;p&gt;GitHub provides a few built-in tools to keep our source code security at the right level. However, we can also integrate third-party tools. Let&amp;#39;s start by discussing GitHub&amp;#39;s built-in security features first.&lt;/p&gt;&lt;h3 id=&#34;Repository-dependency-graph&#34;&gt;Repository dependency graph&lt;/h3&gt;&lt;p&gt;When using open-source libraries in our project, it is sometimes hard to track all dependencies. Of course, we can open our package managers (like NuGet) and see all the open-source packages added to the project. But what about a deeper knowledge about other packages used by the packages we referenced? Confusing and challenging, right? This is where the GitHub repository dependency graph can be helpful. With a dependency graph, we can recursively track all of the dependencies used in the project. &lt;/p&gt;&lt;p&gt;We can find the dependency graph by opening our repository&amp;#39;s main page on GitHub, under the &lt;em&gt;Insights&lt;/em&gt; tab as in the picture below.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7s3HZp8ib6ApzkU5U6rJg7/80b3b277a0789dce93b8457d2a2b9b14/github-dependency-graph-example.png&#34; alt=&#34;GitHub dependency graph&#34;/&gt;&lt;/p&gt;&lt;p&gt;The dependency graph is enabled by default for each repository hosted on GitHub. It can scan common package manifests like:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;requirements&lt;span&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;packages&lt;span&gt;.&lt;/span&gt;config&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;.&lt;/span&gt;csproj&lt;/code&gt; files&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Automated-dependency-scanning&#34;&gt;Automated dependency scanning&lt;/h3&gt;&lt;p&gt;Once we know what dependencies are used in our project, it would be nice to scan them automatically and detect potential vulnerabilities. This is where automated dependency scanning can help. GitHub provides automated dependency alerts (using &lt;a href=&#34;https://dependabot.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Dependabot&lt;/a&gt;) that watch dependency graphs. It cross-references the target versions of your project&amp;#39;s dependencies with the versions on known vulnerability lists aggregated in the &lt;a href=&#34;https://github.com/advisories&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GitHub Advisory Database&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;When a risk is detected, the project is alerted as presented in the picture below.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4W7rjQeVo8dH6lH51bfRdn/ea2f3f83ebd48ff46c4af4326ae0e1fb/dependency-scanning-example.png&#34; alt=&#34;GitHub dependency scanning&#34;/&gt;&lt;/p&gt;&lt;p&gt;This is not enough. To make it easier for developers, once a vulnerability is detected in one of the libraries used, an automatic pull request is created, which contains the upgraded version of that library.&lt;/p&gt;&lt;p&gt;We can enable the &lt;em&gt;Dependabot alerts&lt;/em&gt; and the &lt;em&gt;Dependabot security updates&lt;/em&gt; features accessing the &lt;em&gt;Security &amp;amp; analysis&lt;/em&gt; section under the &lt;em&gt;Settings&lt;/em&gt; tab on GitHub, as in the picture below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/bwJP4ppPL73UEvIp1r9cD/b9a3883afba99ca0aa4e225c3fb53d1c/dependabot-alerts-configuration.png&#34; alt=&#34;GitHub security updates&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Secret-scanning&#34;&gt;Secret scanning&lt;/h3&gt;&lt;p&gt;Storing secrets and credentials in any source code repository is a bad practice. When a push is done to a public repository, GitHub scans the content of the commits for secrets and credentials.&lt;/p&gt;&lt;p&gt;What is more, GitHub detects known types of secrets from different providers like Adobe, Microsoft Azure, Atlassian, Dropbox, and so on.&lt;/p&gt;&lt;p&gt;When a secret is detected, the repository owner is alerted. The below picture presents the scanning flow.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3r4yctOqQmbX9K7TEyfKyS/e0697600af24c0de9c62e62cf2f49edd/secret-scanning-example-flow.png&#34; alt=&#34;GitHub secret scanning&#34;/&gt;&lt;/p&gt;&lt;p&gt;[&lt;a href=&#34;https://docs.github.com/en/developers/overview/secret-scanning-partner-program#how-secret-scanning-works-in-a-public-repository&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Source: GitHub&lt;/em&gt;&lt;/a&gt;]&lt;/p&gt;&lt;p&gt;Once a new push with a secret embedded in the source code is done, GitHub applies regex scanning to verify if there is any secret with a known pattern. If a secret is detected, GitHub sends the found secret value to a service provider&amp;#39;s verify endpoint. If verification is successful, the secret is revoked and an email alert is sent to the source code repository owner.&lt;/p&gt;&lt;p&gt;Secret scanning is available for all public repositories and for private repositories owned by organizations where &lt;em&gt;GitHub Advanced Security&lt;/em&gt; is enabled. You can read more about &lt;a href=&#34;https://docs.github.com/en/developers/overview/secret-scanning-partner-program&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the secret scanning partner program here&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;Security-policy&#34;&gt;Security policy&lt;/h3&gt;&lt;p&gt;Automated scanning is helpful, but it is also important to provide a way for other developers and people who use/contribute to our project, in general, to report found vulnerabilities. We can facilitate reporting security issues by providing a &lt;code&gt;&lt;span&gt;SECURITY&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;md&lt;/code&gt; file in the repository&amp;#39;s &lt;code&gt;root&lt;/code&gt;, &lt;code&gt;docs&lt;/code&gt;, or &lt;code&gt;&lt;span&gt;.&lt;/span&gt;github&lt;/code&gt; folders. This file provides guidance on how to report vulnerability and contact the repository owner or which versions are supported with security updates. Providing guidance through this file can speed up the resolution of critical issues. When someone creates an issue in our repository, they will see a link to our project&amp;#39;s security policy.&lt;/p&gt;&lt;p&gt;The following picture shows the document you can find in our sample project:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/37g2XyZ40VmAOoxWCaoSob/ed480113688b023108dcf774e14e9aaa/security-policy-document.png&#34; alt=&#34;GitHub security policy&#34;/&gt;&lt;/p&gt;&lt;p&gt;By convention, the &lt;code&gt;&lt;span&gt;SECURITY&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;md&lt;/code&gt; file lives in the root of our GitHub repository. There is no default template for security policy. However, we should try to put at least our contact information and explain how reported security issues can be verified. The security policy file is part of &lt;a href=&#34;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;default community health files&lt;/a&gt; on GitHub, so it means that we have to name it exactly in this way: &lt;code&gt;&lt;span&gt;SECURITY&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;md&lt;/code&gt;.&lt;/p&gt;&lt;h3 id=&#34;Automated-code-scanning&#34;&gt;Automated code scanning&lt;/h3&gt;&lt;p&gt;With &lt;a href=&#34;https://github.com/features/actions&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GitHub Actions&lt;/a&gt;, we can enable automated code scanning so that each time a new merge is done, our code will be scanned. With code scanning enabled, we can analyze and find security vulnerabilities and errors in the code hosted in our GitHub repository.&lt;/p&gt;&lt;p&gt;GitHub provides a built-in code scanning tool called CodeQL, but we can integrate other third-party tools, of course. Adding code scanning is useful to help prevent developers from introducing any new security problems into the source code. Code scanning can also help improve our code quality.&lt;/p&gt;&lt;p&gt;At a high level, CodeQL is an analysis engine used by developers to automate security checks, and by security researchers to perform variant analysis. In the following section, we will discover how to enable code scanning with CodeQL and what configuration options are available. To learn more about CodeQL, &lt;a href=&#34;https://codeql.github.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check out the official documentation&lt;/a&gt;. &lt;/p&gt;&lt;h2 id=&#34;Repository-Code-Scanning-with-CodeQL&#34;&gt;Repository Code Scanning with CodeQL&lt;/h2&gt;&lt;p&gt;When using CodeQL, our source code is treated as data. Security vulnerabilities, bugs, and other errors are modeled as queries that can be executed against databases extracted from source code. There are three main steps in CodeQL analysis:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;em&gt;Preparation&lt;/em&gt;, preparing the code by creating a CodeQL database.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Analysis&lt;/em&gt;, running CodeQL queries against the database.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Interpretation&lt;/em&gt;, interpreting the query results to check if any vulnerabilities or code bugs were found.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;CodeQL can be used to scan many different languages like C++, C#, Java, or Phyton. We can use multiple queries when CodeQL scanning is done. To make it easier, we can use &lt;a href=&#34;https://codeql.github.com/docs/codeql-cli/creating-codeql-query-suites/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;query suites&lt;/a&gt;. CodeQL query suites are &lt;code&gt;&lt;span&gt;.&lt;/span&gt;qls&lt;/code&gt; files that allow us to pass multiple queries to CodeQL without having to specify the path to each query file individually.&lt;/p&gt;&lt;p&gt;In the following, we are going to see how to use the &lt;em&gt;Security and Quality&lt;/em&gt; query suite to detect bugs and security issues in the source code.&lt;/p&gt;&lt;p&gt;To enable CodeQL scanning, we open the &lt;em&gt;Security&lt;/em&gt; section and select &lt;em&gt;Code scanning alerts&lt;/em&gt;. Then we click the &lt;em&gt;Setup this workflow&lt;/em&gt; button within the &lt;em&gt;CodeQL Analysis&lt;/em&gt; item.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2dyxIKUmdQ8IfK0SZlxEST/fc4fd8563df833edb5c862731cb0bd32/codeql-setup.png&#34; alt=&#34;GitHub security policy&#34;/&gt;&lt;/p&gt;&lt;p&gt;Now, replace the default code of the workflow with the following.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Build and scan project with CodeQL&amp;#34;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;pull_request&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;branches&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt; main &lt;span&gt;]&lt;/span&gt;&#xA;&#xA;&lt;span&gt;jobs&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;analyze&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; analyze&#xA;    &lt;span&gt;runs-on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ubuntu&lt;span&gt;-&lt;/span&gt;latest&#xA;    &lt;span&gt;permissions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; read&#xA;      &lt;span&gt;contents&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; read&#xA;      &lt;span&gt;security-events&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; write&#xA;&#xA;    &lt;span&gt;strategy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;fail-fast&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&#xA;      &lt;span&gt;matrix&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;language&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt; &lt;span&gt;&amp;#39;csharp&amp;#39;&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;steps&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Checkout repository&#xA;      &lt;span&gt;uses&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; actions/checkout@v2&#xA;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Initialize CodeQL&#xA;      &lt;span&gt;uses&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; github/codeql&lt;span&gt;-&lt;/span&gt;action/init@v1&#xA;      &lt;span&gt;with&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;languages&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; $&lt;span&gt;{&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; matrix.language &lt;span&gt;}&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;config-file&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; .github/workflows/codeql/codeql&lt;span&gt;-&lt;/span&gt;config.yml&#xA;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Autobuild&#xA;      &lt;span&gt;uses&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; github/codeql&lt;span&gt;-&lt;/span&gt;action/autobuild@v1&#xA;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Perform CodeQL Analysis&#xA;      &lt;span&gt;uses&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; github/codeql&lt;span&gt;-&lt;/span&gt;action/analyze@v1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once replacing the existing code, we can commit the &lt;a href=&#34;https://github.com/Daniel-Krzyczkowski/Globomantics-Games/blob/main/.github/workflows/codeql-analysis.yml&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;codeql&lt;span&gt;-&lt;/span&gt;analysis&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt;&lt;/a&gt; generated file. Now, let&amp;#39;s discuss its structure.&lt;/p&gt;&lt;p&gt;First of all, we can decide when to run the scanning. In our case, the scanning is executed once a pull request is created to merge changes into the &lt;code&gt;main&lt;/code&gt; branch. In the &lt;code&gt;jobs&lt;/code&gt; section, we declare a runner environment specified by &lt;code&gt;runs&lt;span&gt;-&lt;/span&gt;on&lt;/code&gt;. By specifying the permission within a job definition, you can configure a different set of permissions for the &lt;a href=&#34;https://docs.github.com/en/actions/reference/authentication-in-a-workflow#about-the-github_token-secret&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;&lt;span&gt;GITHUB_TOKEN&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; for each job, if required. You can read more about job permissions in the &lt;a href=&#34;https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In the &lt;code&gt;strategy&lt;/code&gt; section, we can declare the languages for which scanning should be applied in the project. In our case, we want to scan for the C# language. We declare the languages in the &lt;code&gt;matrix&lt;/code&gt; section. With &lt;code&gt;fail&lt;span&gt;-&lt;/span&gt;fast&lt;/code&gt; set to &lt;code&gt;&lt;span&gt;false&lt;/span&gt;&lt;/code&gt;, we avoid breaking the whole workflow if scanning fails for one of the declared languages.&lt;/p&gt;&lt;p&gt;In the &lt;code&gt;steps&lt;/code&gt; section, there are the steps of the full process:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;em&gt;Checkout repository&lt;/em&gt;, to checkout project&amp;#39;s code for scanning.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Initialize CodeQL&lt;/em&gt;, to initialize CodeQL scanning for the languages declared in the &lt;code&gt;matrix&lt;/code&gt; section. In the &lt;a href=&#34;https://github.com/auth0-blog/Globomantics-Games/tree/main/.github/workflows/codeql&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;config&lt;span&gt;-&lt;/span&gt;file&lt;/code&gt;&lt;/a&gt; section, we can provide a path to the &lt;code&gt;codeql&lt;span&gt;-&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt; file where we declare the query suites which to use during the scanning. In this case, we use the &lt;code&gt;security&lt;span&gt;-&lt;/span&gt;and&lt;span&gt;-&lt;/span&gt;quality&lt;/code&gt; query suite. The &lt;code&gt;codeql&lt;span&gt;-&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt; file is not mandatory, but it helps to keep the CodeQL scanning script more readable. We can also use this file to disable the default queries and to specify which directories to scan during the analysis.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Autobuild&lt;/em&gt;, to build source code.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Perform CodeQL Analysis&lt;/em&gt;, to perform the analysis and publish the report.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Here is the content of the &lt;code&gt;codeql&lt;span&gt;-&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Security and Quality&amp;#34;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;queries&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Security and Quality&#xA;    &lt;span&gt;uses&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; security&lt;span&gt;-&lt;/span&gt;and&lt;span&gt;-&lt;/span&gt;quality&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the scanning is completed, we can check the report under the &lt;em&gt;Security&lt;/em&gt; tab in the &lt;em&gt;Code scanning alerts&lt;/em&gt; section:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4vrcomaZxQHXWWRAxL0evU/bf5028ce02c9da560b855c108f28eca8/codeql-analysis-result-example.png&#34; alt=&#34;CodeQL Analysis result&#34;/&gt;&lt;/p&gt;&lt;p&gt;In the report above, we can see a recommendation to check if the variable is null first and then try to access it instead of catching a &lt;code&gt;NullReferenceException&lt;/code&gt;. With CodeQL, we can discover many different security issues and get hints on how to improve our code quality and eliminate potential bugs. I recommend learning more about CodeQL analysis by reading the &lt;a href=&#34;https://docs.github.com/en/code-security/secure-coding/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;License-Compliance-Management&#34;&gt;License Compliance Management&lt;/h2&gt;&lt;p&gt;When talking about open-source software, it is important to remember about license compliance. There are many different types of licenses, and we have to carefully verify them before we use an open-source library in one of our projects. The most commonly used open-source licenses are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;GNU General Public License (GPL)&lt;/li&gt;&lt;li&gt;The Apache License&lt;/li&gt;&lt;li&gt;MIT License&lt;/li&gt;&lt;li&gt;GNU Less General Public License (LGPL)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For instance, GPL is a copyleft license. Using a copyleft license means that software products containing an open source copyleft license must be released with the same copyleft license. So, if we use a GPL-licensed library in our software, we cannot distribute it with an MIT license, for example.&lt;/p&gt;&lt;p&gt;MIT is a permissive license. Software licensed under the MIT license can be used and modified without limits —  as long as a copy of the original MIT license and a copyright notice are added to it.&lt;/p&gt;&lt;p&gt;So, we have to be careful in this case because this can be problematic when we want to commercialize our software product.&lt;/p&gt;&lt;p&gt;GitHub does not provide a license scanning feature by default. Third-party tools can be used to set up license scanning. For example, &lt;a href=&#34;https://snyk.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Snyk&lt;/a&gt; is one of these third-party tools. With &lt;a href=&#34;https://snyk.io/product/open-source-license-compliance/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Snyk Open Source License Compliance Management&lt;/a&gt;, we can scan our project and verify what licenses are used in the libraries we use.&lt;/p&gt;&lt;p&gt;Snyk license scanning is available in the paid plan, but a 14 days trial version is also available. Once we sign in to &lt;a href=&#34;https://app.snyk.io/login&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;app.snyk.io&lt;/a&gt; using a GitHub account, we can select which project we would like to scan. In our case, let&amp;#39;s continue using Snyk without granting direct permissions to the repository on GitHub. We will see how to connect GitHub to the Snyk API in a while. So, let&amp;#39;s click &lt;em&gt;Continue without permissions&lt;/em&gt; as presented below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2A2DFxw6sExHnkNarFmWhf/6a976312ba2f07f2ad55de49ad18b73e/snyk-setup-page.png&#34; alt=&#34;Snyk setup&#34;/&gt;&lt;/p&gt;&lt;p&gt;In the next section, we provide the URL to our public repository on GitHub. In our case, it is &lt;a href=&#34;https://github.com/Daniel-Krzyczkowski/Globomantics-Games&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://github.com/auth0-blog/Globomantics-Games)&lt;/a&gt;. Then, let&amp;#39;s click the &lt;em&gt;Import 1 repository&lt;/em&gt; button. Once we are signed in, we can activate the 14 days trial by clicking the &lt;em&gt;Start free trial&lt;/em&gt; button. &lt;/p&gt;&lt;p&gt;At this point, let&amp;#39;s click the gear icon in the right top corner of the Snyk website. From the left bar, we have to switch to &lt;em&gt;Licenses&lt;/em&gt;. This is where we can see the list of all available licenses discovered in our project once the Snyk license scanning is applied.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/57l8aP1R9XKBS0omyVJZje/55e437274f187016d4a2b6d227adf2ee/snyk-detected-licenses.png&#34; alt=&#34;Snyk license scanning&#34;/&gt;&lt;/p&gt;&lt;p&gt;As we can see in the picture above, we can assign different levels of severity to specific license types (&lt;code&gt;None&lt;/code&gt;, &lt;code&gt;Low&lt;/code&gt;, &lt;code&gt;Medium&lt;/code&gt;, or &lt;code&gt;High&lt;/code&gt;). Let&amp;#39;s select the &lt;code&gt;Apache&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2.0&lt;/span&gt;&lt;/code&gt; license from the list. We can add instructions on what should be exactly verified when this type of license is found in our project. Notice that &lt;em&gt;Severity&lt;/em&gt; is set to &lt;code&gt;Medium&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5PgRmN2iL2QbATBMRD0iN/4ad13bdd82078dc048ad688b95a81c16/apache-license-snyk.png&#34; alt=&#34;Apache license in Snyk&#34;/&gt;&lt;/p&gt;&lt;p&gt;Now, to enable Snyk scanning on our code, we need to obtain an access token from Synk and store it under the &lt;em&gt;Secrets&lt;/em&gt; section on GitHub. So, let&amp;#39;s click the avatar in the right top corner, and from the list, select &lt;em&gt;Account settings&lt;/em&gt;. Under the &lt;em&gt;Auth Token&lt;/em&gt; section, let&amp;#39;s click &lt;code&gt;Click to show&lt;/code&gt; to display the token. Finally, let&amp;#39;s copy the token so that we can use it in the GitHub Actions workflow responsible for the license scanning.&lt;/p&gt;&lt;p&gt;Back on GitHub, we click the &lt;em&gt;Secrets&lt;/em&gt; tab and select &lt;em&gt;Secrets&lt;/em&gt;. We paste the token obtained from Snyk by using  the &lt;em&gt;New repository secret&lt;/em&gt; button. Once the secret is saved, it should be displayed on the list.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/DOmT8mdLi0bfEPL06C5ei/3be9cc44abfd0909589e16fc95f49196/snyk-token-secret-on-github.png&#34; alt=&#34;Snyk token configuration on GitHub&#34;/&gt;&lt;/p&gt;&lt;p&gt;Now it is time to add the Snyk scanning workflow using GitHub Actions. Under the &lt;code&gt;&lt;span&gt;.&lt;/span&gt;github&lt;span&gt;/&lt;/span&gt;workflows&lt;/code&gt; folder (the same where we put &lt;code&gt;codeql&lt;span&gt;-&lt;/span&gt;analysis&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt; file for CodeQL scanning), we have to place the &lt;a href=&#34;https://github.com/auth0-blog/Globomantics-Games/blob/main/.github/workflows/snyk-license-scanning.yml&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;snyk&lt;span&gt;-&lt;/span&gt;license&lt;span&gt;-&lt;/span&gt;scanning&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt;&lt;/a&gt; file with the following content:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Build and scan project with Snyk&amp;#34;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;push&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;branches&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt; main &lt;span&gt;]&lt;/span&gt;&#xA;&#xA;&lt;span&gt;jobs&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;build-and-scan&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;runs-on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ubuntu&lt;span&gt;-&lt;/span&gt;latest&#xA;&#xA;    &lt;span&gt;steps&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;uses&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; actions/checkout@v2&#xA;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Setup .NET&#xA;      &lt;span&gt;uses&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; actions/setup&lt;span&gt;-&lt;/span&gt;dotnet@v1&#xA;      &lt;span&gt;with&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;dotnet-version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; 5.0.x&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Restore dependencies&#xA;      &lt;span&gt;run&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; dotnet restore ./src/web&lt;span&gt;-&lt;/span&gt;game/Globomantics.sln&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Build&#xA;      &lt;span&gt;run&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; dotnet build ./src/web&lt;span&gt;-&lt;/span&gt;game/Globomantics.sln &lt;span&gt;-&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;no&lt;span&gt;-&lt;/span&gt;restore&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Test&#xA;      &lt;span&gt;run&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; dotnet test ./src/web&lt;span&gt;-&lt;/span&gt;game/Globomantics.sln &lt;span&gt;-&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;no&lt;span&gt;-&lt;/span&gt;build &lt;span&gt;-&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;verbosity normal&#xA;&#xA;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Run Snyk to check for vulnerabilities&#xA;      &lt;span&gt;uses&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; snyk/actions/dotnet@master&#xA;      &lt;span&gt;continue-on-error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt; &lt;span&gt;# To make sure that SARIF upload gets called&lt;/span&gt;&#xA;      &lt;span&gt;env&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;SNYK_TOKEN&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; $&lt;span&gt;{&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; secrets.SNYK_TOKEN &lt;span&gt;}&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;      &lt;span&gt;with&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;args&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;sarif&lt;span&gt;-&lt;/span&gt;file&lt;span&gt;-&lt;/span&gt;output=snyk.sarif &lt;span&gt;-&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;file=./src/web&lt;span&gt;-&lt;/span&gt;game/Globomantics.sln &lt;span&gt;-&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;severity&lt;span&gt;-&lt;/span&gt;threshold=medium&#xA;&#xA;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Upload result to GitHub Code Scanning&#xA;      &lt;span&gt;uses&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; github/codeql&lt;span&gt;-&lt;/span&gt;action/upload&lt;span&gt;-&lt;/span&gt;sarif@v1&#xA;      &lt;span&gt;with&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;sarif_file&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; snyk.sarif&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s discuss its structure. We want to execute the scanning when a push to the &lt;code&gt;main&lt;/code&gt; branch occurs. In the &lt;code&gt;jobs&lt;/code&gt; section, we declare a runner environment specified by &lt;code&gt;runs&lt;span&gt;-&lt;/span&gt;on&lt;/code&gt;. In the &lt;code&gt;steps&lt;/code&gt; section, there are a few required steps:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;em&gt;Checkout repository&lt;/em&gt;, to checkout project&amp;#39;s code for scanning.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Setup .NET&lt;/em&gt;, which includes restoring dependencies with the &lt;code&gt;dotnet restore&lt;/code&gt; command, then &lt;code&gt;dotnet build&lt;/code&gt; to build project, and &lt;code&gt;dotnet test&lt;/code&gt; to run tests if they exist in the solution.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Run Snyk to check for vulnerabilities&lt;/em&gt;, which communicates with the Snyk API to apply the code scanning. Notice that we have to fill &lt;code&gt;&lt;span&gt;SNYK_TOKEN&lt;/span&gt;&lt;/code&gt; with the value we put in the &lt;code&gt;Secrets&lt;/code&gt; section. There are also a few arguments: &#xA;&lt;ul&gt;&lt;li&gt;The &lt;code&gt;&lt;span&gt;--&lt;/span&gt;sarif&lt;span&gt;-&lt;/span&gt;file&lt;span&gt;-&lt;/span&gt;output&lt;span&gt;=&lt;/span&gt;snyk&lt;span&gt;.&lt;/span&gt;sarif&lt;/code&gt; argument provides the name of the file which contains the scanning report.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;&lt;span&gt;--&lt;/span&gt;file&lt;span&gt;=&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;src&lt;span&gt;/&lt;/span&gt;web&lt;span&gt;-&lt;/span&gt;game&lt;span&gt;/&lt;/span&gt;Globomantics&lt;span&gt;.&lt;/span&gt;sln&lt;/code&gt; argument provides the path to the project/solution.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;&lt;span&gt;--&lt;/span&gt;severity&lt;span&gt;-&lt;/span&gt;threshold&lt;span&gt;=&lt;/span&gt;medium&lt;/code&gt;- parameter is used to report alerts with severity &lt;code&gt;Medium&lt;/code&gt; and above.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Upload result to GitHub Code Scanning&lt;/em&gt;, which is responsible for uploading the scanning result so that we can see it under the &lt;em&gt;Security&lt;/em&gt; tab.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Once we push any changes to the &lt;code&gt;main&lt;/code&gt; branch, the scanning will be triggered. Let&amp;#39;s check the scanning report shown below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2lM81Cue8ALxnT6u9sFDUs/48b9c563e78651709486ce66c97d5b43/snyk-license-scanning-result.png&#34; alt=&#34;License scanning report&#34;/&gt;&lt;/p&gt;&lt;p&gt;As we can see above, the &lt;code&gt;Apache&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2.0&lt;/span&gt;&lt;/code&gt; license was found in one of the libraries we use: &lt;code&gt;Serilog&lt;/code&gt;. Once we click on the alert, we can see the details shown below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7MCT0ERLSfTmqB3ztLalum/0a3209ecfbeb15549b351938e2e5b10e/snyk-license-scanning-details.png&#34; alt=&#34;License scanning details&#34;/&gt;&lt;/p&gt;&lt;p&gt;We can see that the &lt;code&gt;Serilog&lt;/code&gt; library uses &lt;code&gt;Apache&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2.0&lt;/span&gt;&lt;/code&gt; license, and we included this package in the &lt;code&gt;Globomantics&lt;span&gt;.&lt;/span&gt;CloudGame&lt;/code&gt; project using the NuGet package manager. The reason why we see this alert is the fact that we set the &lt;code&gt;&lt;span&gt;--&lt;/span&gt;severity&lt;span&gt;-&lt;/span&gt;threshold&lt;/code&gt; parameter to &lt;code&gt;Medium&lt;/code&gt;. In this case, we will be alerted whenever there is a library used in our project with the license for which we set the severity to &lt;code&gt;Medium&lt;/code&gt; in the Snyk configuration.&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this article, we discovered how to enable and use GitHub security features to improve code security and software supply chain. We learned how to enable automated dependency scanning and updates, enable scanning with CodeQL, and verify license compliance using Snyk.&lt;/p&gt;&lt;p&gt;If you want to know more about what learned in this article, please check out the following documentation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hln5v7odguE&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Achieving DevSecOps with GitHub Advanced Security&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/code-security/secure-coding/using-codeql-code-scanning-with-your-existing-ci-system/configuring-codeql-runner-in-your-ci-system&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Configuring CodeQL runner in your CI system&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/devsecops-in-github&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;DevSecOps in GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/learn/modules/maintain-secure-repository-github/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Maintain a secure repository by using GitHub best practices&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h2 id=&#34;Aside--Securing-ASP-NET-Core-with-Auth0&#34;&gt;Aside: Securing ASP.NET Core with Auth0&lt;/h2&gt;&lt;p&gt;Securing ASP.NET Core applications with Auth0 is easy and brings a lot of great features to the table. With &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0&lt;/a&gt;, you only have to write a few lines of code to get a solid &lt;a href=&#34;https://auth0.com/user-management&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;identity management solution&lt;/a&gt;, &lt;a href=&#34;https://auth0.com/docs/sso/single-sign-on&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;single sign-on&lt;/a&gt;, support for &lt;a href=&#34;https://auth0.com/docs/identityproviders&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;social identity providers (like Facebook, GitHub, Twitter, etc.)&lt;/a&gt;, and support for &lt;a href=&#34;https://auth0.com/enterprise&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;enterprise identity providers (like Active Directory, LDAP, SAML, custom, etc.)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;On ASP.NET Core, you need &lt;a href=&#34;https://auth0.com/docs/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;to create an API in your Auth0 Management Dashboard&lt;/a&gt; and change a few things on your code. To create an API, you need to &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free Auth0 account&lt;/a&gt;. After that, you need to go to &lt;a href=&#34;https://manage.auth0.com/#/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the API section of the dashboard&lt;/a&gt; and click on &amp;#34;Create API&amp;#34;. On the dialog shown, you can set the &lt;em&gt;Name&lt;/em&gt; of your API as &amp;#34;Books&amp;#34;, the &lt;em&gt;Identifier&lt;/em&gt; as &amp;#34;&lt;a href=&#34;http://books.mycompany.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://books.mycompany.com&lt;/a&gt;&amp;#34;, and leave the &lt;em&gt;Signing Algorithm&lt;/em&gt; as &amp;#34;RS256&amp;#34;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6HrObJ2eGY7YehLzbBM0sH/066be814a124d98f03224d9b177caa22/net-core-2_creating-api-on-auth0.png&#34; alt=&#34;Creating API on Auth0&#34;/&gt;&lt;/p&gt;&lt;p&gt;After that, you have to add the call to &lt;code&gt;services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; in the &lt;code&gt;&lt;span&gt;ConfigureServices&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method of the &lt;code&gt;Startup&lt;/code&gt; class as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; authority &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;$&amp;#34;https://&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Domain&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;/&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; audience &lt;span&gt;=&lt;/span&gt; Configuration&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Auth0:Audience&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;services&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;DefaultAuthenticateScheme &lt;span&gt;=&lt;/span&gt; JwtBearerDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;DefaultChallengeScheme &lt;span&gt;=&lt;/span&gt; JwtBearerDefaults&lt;span&gt;.&lt;/span&gt;AuthenticationScheme&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddJwtBearer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;options &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;Authority &lt;span&gt;=&lt;/span&gt; authority&lt;span&gt;;&lt;/span&gt;&#xA;  options&lt;span&gt;.&lt;/span&gt;Audience &lt;span&gt;=&lt;/span&gt; audience&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the body of the &lt;code&gt;&lt;span&gt;Configure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method of the &lt;code&gt;Startup&lt;/code&gt; class, you also need to add an invocation to &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; as shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseRouting&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthentication&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseAuthorization&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;app&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UseEndpoints&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;endpoints &lt;span&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;{&lt;/span&gt;&#xA;    endpoints&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MapControllers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;Make sure you invoke these methods in the order shown above. It is essential so that everything works properly.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Finally, add the following element to the &lt;code&gt;appsettings&lt;span&gt;.&lt;/span&gt;json&lt;/code&gt; configuration file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Logging&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// ...&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;Auth0&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Domain&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_DOMAIN&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;Audience&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;YOUR_AUDIENCE&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Replace the placeholders &lt;code&gt;&lt;span&gt;YOUR_DOMAIN&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;YOUR_AUDIENCE&lt;/span&gt;&lt;/code&gt; with the actual values for the domain that you specified when creating your Auth0 account and the &lt;em&gt;Identifier&lt;/em&gt; you assigned to your API.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/secure-software-supply-chain-with-github-security-features/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn what software supply chain is and how to improve security with GitHub security features.</summary>
  </entry>
  <entry>
    <title>What Is LGPD? A Business Guide To Brazil&#39;s Data Protection Law</title>
    <updated>2021-08-19T14:55:00Z</updated>
    <id>tag:auth0.com,2021-08-19:/blog/what-is-lgpd-a-business-guide-to-brazils-data-protection-law/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Lei Geral de Proteção de Dados Pessoais (LGPD or General Personal Data Protection Law) is Brazil’s data protection and privacy law that is closely modeled on the General Data Protection Regulation (GDPR) in the European Union. LGPD was passed by the National Congress of Brazil on July 10, 2018, in an effort to unify and enhance 40+ data privacy instruments within the country into a single piece of legislation. LGPD went into effect on September 18, 2020. Like the GDPR, the law impacts global organizations beyond Brazil’s borders.&lt;/p&gt;&lt;p&gt;The extent to which LGPD applies to your organization will depend on the specific nature of your business, so you should always seek skilled legal counsel to help you navigate compliance requirements. However, if your organization does business in Brazil or collects/processes the data of any individual within Brazil, you should familiarize yourself with LGPD’s requirements (summarized below) to understand what impact these regulations may have on you.&lt;/p&gt;&lt;div&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;&lt;path d=&#34;M22 11.08V12a10 10 0 11-5.93-9.14&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M22 4L12 14.01l-3-3&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;p&gt;&lt;strong&gt;Important Information&lt;/strong&gt;&lt;br/&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The following information is not intended as legal advice, and readers should consult with their attorneys about matters of compliance.&lt;br/&gt; &lt;/p&gt;&lt;/div&gt;&lt;h2 id=&#34;Why-LGPD-Was-Passed&#34;&gt;Why LGPD Was Passed&lt;/h2&gt;&lt;p&gt;LGPD was passed to demonstrate and protect individuals’ right to privacy. Despite Brazil being &lt;a href=&#34;https://www.launchwaymedia.com/blog/brazil-latin-americas-technology-leader&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Latin America’s technology leader&lt;/a&gt; and &lt;a href=&#34;https://www.zdnet.com/article/it-investments-in-brazil-surpass-world-average/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;one of the top 10 tech markets&lt;/a&gt; in the world, its data protection laws have failed to keep pace with this technological growth. As a side-effect of that rapid growth, Brazil has experienced a number of recent &lt;a href=&#34;https://portswigger.net/daily-swig/brazil-reaches-towards-cybersecurity-maturity&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;high-profile data breaches&lt;/a&gt;. LGPD establishes a clear requirement for organizations to implement controls that protect individuals’ personal data, with the end goal of reducing the impact of breaches on individuals.&lt;/p&gt;&lt;p&gt;In addition to introducing privacy regulations, the LGPD also established a separate national authority, the Autoridade Nacional de Proteção de Dados (ANPD or National Data Protection Authority in English), which is responsible for enforcing the law, including issuing penalties and fines. The creation of the ANPD was originally vetoed by President Jair Bolsonaro but later reinstated via &lt;a href=&#34;https://www.mondaq.com/brazil/data-protection/818496/provisional-measure-no-86918-creates-the-brazilian-data-protection-authority-and-amends-several-articles-of-the-brazilian-general-data-protection-law&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;executive order&lt;/a&gt; in August of 2020.&lt;/p&gt;&lt;h2 id=&#34;Who-LGPD-Applies-To&#34;&gt;Who LGPD Applies To&lt;/h2&gt;&lt;p&gt;LGPD applies to any organization (or individual) regardless of size, industry, public or private status, or country of residence.&lt;/p&gt;&lt;p&gt;Any legal entity or natural person processing data collected from persons in Brazil (“data controller”) is subject to LGPD if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The data collected/processed is about people in Brazil.&lt;/li&gt;&lt;li&gt;The processing is carried out &lt;strong&gt;inside Brazil;&lt;/strong&gt; or&lt;/li&gt;&lt;li&gt;The processing is for the purposes of offering and selling goods or services to individuals in Brazil.&lt;/li&gt;&lt;li&gt;The processing is of personal data collected within Brazil.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Exceptions&#34;&gt;Exceptions&lt;/h3&gt;&lt;p&gt;There are some limited exceptions to the applicability of LGPD. Exceptions include situations where the data is being collected and/or processed:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;By a natural person for private and non-commercial purposes.&lt;/li&gt;&lt;li&gt;For journalistic, artistic, or academic purposes, regardless of who does the collecting.&lt;/li&gt;&lt;li&gt;For the purposes of national security, defense, or public safety.&lt;/li&gt;&lt;li&gt;For investigating and prosecuting criminal offenses.&lt;/li&gt;&lt;li&gt;If the personal data originates in other countries and only passes through Brazil without any processing being carried out.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;LGPD-Includes-a-Broad-Definition-of-Personal-Data&#34;&gt;LGPD Includes a Broad Definition of Personal Data&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://iapp.org/resources/article/brazilian-data-protection-law-lgpd-english-translation/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;LGPD defines&lt;/a&gt; personal data broadly as any information that could be used to identify an individual. This includes any information that could be combined with other information to identify an individual. That means information such as email, IP addresses, phone numbers, geolocation, and credit card numbers can all be considered personal information under LGPD.&lt;/p&gt;&lt;h3 id=&#34;Sensitive-Personal-Data&#34;&gt;Sensitive Personal Data&lt;/h3&gt;&lt;p&gt;Brazil has a culturally and racially diverse population. Like Europe’s GDPR, LGPD recognizes that additional protections are sometimes needed to protect individuals against discrimination. These potentially higher-risk attributes are defined as “sensitive personal data” under LGPD and include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Health information&lt;/li&gt;&lt;li&gt;Genetic information&lt;/li&gt;&lt;li&gt;Sexual information&lt;/li&gt;&lt;li&gt;Medical information&lt;/li&gt;&lt;li&gt;Biometric characteristics&lt;/li&gt;&lt;li&gt;Racial or ethnic origin information&lt;/li&gt;&lt;li&gt;Political affiliations&lt;/li&gt;&lt;li&gt;Religious affiliations&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;LGPD-Compliance-Obligations&#34;&gt;LGPD Compliance Obligations&lt;/h2&gt;&lt;p&gt;LGPD is a significant enhancement and consolidation of Brazil’s previous data privacy laws, and the changes will affect organizations in every industry. Below are some of the key compliance considerations businesses will need to consider.&lt;/p&gt;&lt;h3 id=&#34;1--Define-and-Document-Lawful-Basis-for-Processing-Personal-Data&#34;&gt;1. Define and Document Lawful Basis for Processing Personal Data&lt;/h3&gt;&lt;p&gt;LGPD requires every organization that collects or processes personal data to have at least one of the following legally acceptable reasons for doing so, as well as to document those reasons for auditing purposes.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Consent from an individual to process their data.&lt;/strong&gt; Any individual over the age of 18 can consent to the processing of their personal data.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;To follow applicable regulatory requirements and public policies.&lt;/strong&gt; Organizations can collect and process data if it is required in order to follow laws and regulations that apply to them.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;For the purpose of conducting a study or research.&lt;/strong&gt; Research is a legal basis for personal data processing, as long as organizations take reasonable steps to anonymize that data.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;To fulfill a contractual agreement.&lt;/strong&gt; Processing an individual&amp;#39;s personal data is acceptable if you’ve signed a contract with that individual to deliver goods or services and need to process their data to provide it to them.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Legal proceedings.&lt;/strong&gt; Personal data may be processed for the sake of a court case, arbitration, or other legal proceedings.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;To protect the life or physical safety of an individual or a third party.&lt;/strong&gt; For example, national security is a legally acceptable reason to process personal data.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;To protect an individual’s health in healthcare procedures.&lt;/strong&gt; For example, it’s acceptable to process personal data to ensure you’re not putting a patient at risk during surgery.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;For the legitimate interests of your organization or a third party.&lt;/strong&gt; Your organization’s interests are a legal basis for processing personal data, as long as those interests do not conflict with the rights, freedoms, or interests of an individual.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;For the sake of protecting an individual’s credit.&lt;/strong&gt; Protecting an individual’s credit is an acceptable basis for processing data, as long as that processing is done in accordance with the provisions laid out in other relevant legislation in addition to LGPD.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;2--Honor-the-Privacy-Rights-of-Individuals&#34;&gt;2. Honor the Privacy Rights of Individuals&lt;/h3&gt;&lt;p&gt;Like GDPR, LGPD provides individuals with several rights that they can request organizations to recognize and uphold at any time. Organizations must have internal procedures and processes in place to respond to requests from individuals who exercise these rights, which include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Confirmation of processing.&lt;/strong&gt; Individuals have the right to confirm whether their personal data has been or is being processed.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Access to personal data.&lt;/strong&gt; Individuals may request access to any of their personal data that an organization processes.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Data portability.&lt;/strong&gt; Individuals may request that their personal data be transferred to another service or product provider, as long as that request is in accordance with other national regulations, doesn’t compromise any commercial or industrial secrets, and the data hasn’t already been anonymized.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Rectification of inaccurate information.&lt;/strong&gt; Individuals may request that inaccurate, outdated, or incomplete personal data be corrected or updated.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Anonymization, blocking, or deletion of data.&lt;/strong&gt; Individuals can request that unnecessary or excessive personal data, or personal data processed in a non-compliant manner, be anonymized, blocked, or deleted.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Deletion of data.&lt;/strong&gt; Individuals may request to have their personal data deleted at any time where processing is based on consent.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Right to be informed.&lt;/strong&gt; Individuals have the right to be informed about third parties granted access to their personal data. Individuals also have the right to be informed regarding their right to refuse consent.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Withdrawal of consent.&lt;/strong&gt; Individuals have the right to revoke their consent to process or collect data at any time.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Review of automated decisions.&lt;/strong&gt; Individuals have the right to request the review of decisions solely based on automated processing that affects their interests, including profiling.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Filing complaints.&lt;/strong&gt; Individuals may file a complaint against an organization with the ANPD if they feel that any of these rights have been violated.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;3--Appoint-a-Data-Protection-Officer--DPO-&#34;&gt;3. Appoint a Data Protection Officer (DPO)&lt;/h3&gt;&lt;p&gt;The LGPD requires every organization under its jurisdiction to appoint a data protection officer (DPO) to be their point person for data protection efforts. The DPO does not have to be an individual person; a committee can provide this service, as can an outside consultant. The DPO is responsible for ensuring that the organization takes appropriate action to protect personal data and for communicating with end-users and government authorities on matters related to data privacy. The identity and contact information of the DPO must be available to the public (preferably on your website).&lt;/p&gt;&lt;h3 id=&#34;4--Prepare--Inventory--and-Conduct-Data-Protection-Impact-Assessments--DPIA-&#34;&gt;4. Prepare, Inventory, and Conduct Data Protection Impact Assessments (DPIA)&lt;/h3&gt;&lt;p&gt;To comply with LGPD, you must document the types of data you’re collecting, the methods used, along the steps taken to secure that data. You must also identify potential risks and document what you’ve done to mitigate them. Every organization that falls under LGPD’s jurisdiction should have these records on hand to show to a regulator upon request.&lt;/p&gt;&lt;h3 id=&#34;5--Follow-Data-Security-Requirements-and-Data-Breach-Notification-Protocols&#34;&gt;5. Follow Data Security Requirements and Data Breach Notification Protocols&lt;/h3&gt;&lt;p&gt;Organizations must implement adequate organizational and technical controls in order to secure personal data from unauthorized access, deletion, alteration, sharing, or processing. In the event that a breach occurs that presents a risk or causes damage to individuals, organizations must notify the ANPD and individuals affected by the breach within a reasonable time period and include the following information:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The type of personal data that was exposed and the individuals affected&lt;/li&gt;&lt;li&gt;The risks associated with the exposure of that data&lt;/li&gt;&lt;li&gt;The security measures in place to protect personal data (unless sharing this information would disclose industrial or commercial secrets)&lt;/li&gt;&lt;li&gt;What your organization is doing to mitigate the effects of the breach on the individuals at risk&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The ANPD may require an organization to take further steps, such as alerting the media about the breach or taking specific steps to mitigate the effects of the breach on affected individuals. These actions are assessed on a case-by-case basis.&lt;/p&gt;&lt;h3 id=&#34;6--Implement-Privacy-by-Design&#34;&gt;6. Implement Privacy by Design&lt;/h3&gt;&lt;p&gt;Like GDPR, LGPD requires organizations under its jurisdiction to design their data processing systems and procedures so that privacy is the default setting (the approach known as privacy by design) rather than adding privacy controls to those systems as an afterthought. Organizations should also be prepared to demonstrate the effectiveness of their data protection measures to the ANPD, as an audit could be conducted at any time.&lt;/p&gt;&lt;h3 id=&#34;7--Comply-with-Cross-Border-Data-Transfer-Requirements&#34;&gt;7. Comply with Cross-Border Data Transfer Requirements&lt;/h3&gt;&lt;p&gt;LGPD allows organizations to transfer protected personal data outside of Brazil if the laws of the country the data is transferred to provide adequate protection for that data. Adequacy of protection is determined by the ANPD. In the event that the protections offered by the receiving country are deemed inadequate by the ANPD, transfers may still be allowed if &lt;a href=&#34;https://iapp.org/resources/article/brazilian-data-protection-law-lgpd-english-translation/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;certain conditions&lt;/a&gt; are met.&lt;/p&gt;&lt;h2 id=&#34;Penalties-for-Non-Compliance&#34;&gt;Penalties for Non-Compliance&lt;/h2&gt;&lt;p&gt;Under LGPD, penalties for non-compliance are assessed by the ANPD and can include fines of up to 2% of a company’s annual revenue to a maximum of 50 million Brazilian reais per violation (approximately €7.5 million or $9M USD at the time of writing). The ANPD also has the authority to block access to or delete personal data from related databases and to partially or fully prohibit data processing activities in the event that a violation occurs. Additionally, the LGPD provides individuals with the right to seek civil damages for violations of their privacy, meaning organizations could face legal action from consumers in addition to fines assessed by regulators.&lt;/p&gt;&lt;h2 id=&#34;Go-Beyond-Compliance&#34;&gt;Go Beyond Compliance&lt;/h2&gt;&lt;p&gt;Regulations like LGPD and GDPR are landmark steps toward the protection of individuals’ right to privacy. But their similarities should also serve as a wake-up call to organizations everywhere that data privacy will require a lot more than plugging in a new set of controls for their existing systems in the future.&lt;/p&gt;&lt;p&gt;Instead, businesses should look to build privacy functionality into their systems from the outset, considering the well-being of the end-user rather than just the legal requirements. Not only will this help them earn the &lt;a href=&#34;https://hbr.org/2020/01/do-you-care-about-privacy-as-much-as-your-customers-do&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;trust of consumers&lt;/a&gt;, but it will also likely simplify the process of complying with new regulations as they emerge.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/what-is-lgpd-a-business-guide-to-brazils-data-protection-law/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">LGPD carries implications for businesses beyond Brazil’s borders. Here’s what execs need to know.</summary>
    <author>
      <name>LGPD Establishes the National Data Protection Authority</name>
    </author>
  </entry>
  <entry>
    <title>Salesforce Powers Customer Identity Plus with Auth0</title>
    <updated>2021-08-18T22:17:00Z</updated>
    <id>tag:auth0.com,2021-08-18:/blog/salesforce-powers-customer-identity-plus-with-auth0/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;In July of 2020, &lt;a href=&#34;https://auth0.com/blog/auth0-announces-120m-seriesf-funding/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Salesforce Ventures led Auth0’s Series F funding round&lt;/a&gt; to fuel continued innovation and go-to-market expansion, responding to global demand for a simple, extensible identity platform that provides secure access to any application. Since that time, Auth0 worked in conjunction with Salesforce to explore ways to work together to better harness the power of both companies and bring additional value to our combined customer base and to the broader market.&lt;/p&gt;&lt;p&gt;Auth0 is proud to announce our partnership with Salesforce to power identity for Salesforce Customer Identity Plus, &lt;a href=&#34;https://www.salesforce.com/news/stories/salesforce-customer-identity-plus-helps-eliminate-identity-silos/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;a new offering announced by Salesforce&lt;/a&gt; that is available starting July 20, 2021, to Salesforce customers.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3CxRl1pNZ0M6LMcWnY5bwY/36f1b84872a53900c0eedc5137ee788e/Salesforce.png&#34; alt=&#34;Salesforce&#34;/&gt;&lt;/p&gt;&lt;p&gt;With enterprises striving to meet the evolving demands of digital engagement, the companies who are winning will deliver frictionless, secure user identity. This Salesforce and Auth0 partnership will help bridge identity data silos across channels to provide a single view of the customer, with a developer-friendly, extensible identity solution that scales to meet the needs of the world’s largest companies.  &lt;/p&gt;&lt;div itemscope=&#34;&#34; itemtype=&#34;http://schema.org/Person&#34; itemprop=&#34;author&#34;&gt;&lt;p&gt;“We’re proud to be partnering with Auth0, the leader in consumer identity as a service, to deliver Salesforce Customer Identity Plus. This will enable our customers to accelerate their digital transformation and provide their customers with frictionless pixel-perfect login &amp;amp; registration experiences.”&lt;/p&gt;&lt;p&gt;David Brossard&lt;/p&gt;&lt;p&gt;Senior Director of Product Management&lt;/p&gt;&lt;p&gt;Salesforce&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Salesforce as organizations increase the number of digital touchpoints like mobile apps and web portals, customers are forced to create new logins for each, making it difficult for organizations to gain a single, 360-degree view of the customer. Customer Identity Plus enables developers to easily integrate an identity layer into existing apps, creating a consistent customer experience.&lt;/p&gt;&lt;p&gt;Building on Salesforce’s vision to be the &lt;a href=&#34;https://www.salesforce.com/products/platform/features/single-source-of-truth/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;single source of truth for customer data&lt;/a&gt;, Customer Identity Plus is a next generation CIAM (customer identity and access management) solution that provides the services to manage customer identities, enabling businesses to connect to all of your customers, apps, and products.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://www.salesforce.com/products/platform/products/identity/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Customer Identity Plus&lt;/a&gt; bridges data silos so you can build a unified view of the customer to enrich digital interactions. Customer identities and profile data including opportunities, and customer service cases, are stored and maintained in Salesforce, which allows you to create consistent experiences with customers and partners across all lines of business, marketing, mobile, and web properties. Companies can now build deeper, richer relationships with customers and partners by creating and maintaining a single identity for interactions across all channels — sales, service, and marketing user journeys.&lt;/p&gt;&lt;p&gt;For companies looking to accelerate their digital transformation strategies and need B2C (business-to-consumer) and B2B (business-to-business) scale from day one, Customer Identity Plus enables maximum performance and scalability. With Customer Identity Plus, developers get a &lt;a href=&#34;https://auth0.com/docs/libraries&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;variety of SDKs right out of the box&lt;/a&gt;, providing the flexibility to seamlessly integrate an identity layer into existing applications.&lt;/p&gt;&lt;p&gt;Customer Identity Plus brings the power and flexibility of Auth0’s identity-as-a-service (IDaaS) to complement Salesforce’s customer-focused cloud offerings, including Sales Cloud, Experience Cloud, and Commerce Cloud.&lt;/p&gt;&lt;p&gt;Auth0 accelerates and extends customer identity for Salesforce customers, enabling you to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Create a Seamless Customer Experience — Allow consumers to quickly register and log into your applications with &lt;a href=&#34;https://auth0.com/docs/connections/passwordless&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;passwordless login&lt;/a&gt; or &lt;a href=&#34;https://auth0.com/docs/connections/identity-providers-social&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;social login&lt;/a&gt;, all out of the box.&lt;/li&gt;&lt;li&gt;Enable a Single View of the Customer — Unify digital identities from multiple sources so you can build a single view of the customer to enrich digital transactions and report on login activities.&lt;/li&gt;&lt;li&gt;Administer Contextual Security — Balance great UX with adaptive security to &lt;a href=&#34;https://auth0.com/docs/attack-protection&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;prevent automated threats&lt;/a&gt; from bots, breached credentials, or brute force attacks.&lt;/li&gt;&lt;li&gt;Build a Developer Centric Framework that Scales — Leverage support for multiple application types and an extensive library of SDKs for any language and platform and scale.&lt;/li&gt;&lt;/ul&gt;&lt;div itemscope=&#34;&#34; itemtype=&#34;http://schema.org/Person&#34; itemprop=&#34;author&#34;&gt;&lt;p&gt;“Partnering with a CRM pioneer like Salesforce to integrate Auth0’s customer identity brings an incredible opportunity to deliver a one-stop solution for end-to-end CIAM. Auth0 is proud to power identity for Customer Identity Plus, and we look forward to continued collaboration and innovation together”&lt;/p&gt;&lt;p&gt;Randy Nasson&lt;/p&gt;&lt;p&gt;Director of Product Management&lt;/p&gt;&lt;p&gt;Auth0&lt;/p&gt;&lt;/div&gt;&lt;h2 id=&#34;Partner-with-Auth0&#34;&gt;Partner with Auth0&lt;/h2&gt;&lt;p&gt;Auth0 offers a range of partnership opportunities from strategic alliances and working independent software vendors (ISVs) through to system integrators and resellers. We are able to scale according to your need and opportunity. If you’d like to learn more about how you might partner with Auth0 to add value to your customer base and the broader market, please reach out to our &lt;a href=&#34;https://auth0.com/partners&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;partner team&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/salesforce-powers-customer-identity-plus-with-auth0/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Salesforce/Auth0 partnership to help bridge identity silos for Salesforce customers</summary>
  </entry>
  <entry>
    <title>Auth0 Publishes Documentation to Help with New Standard Contractual Clauses</title>
    <updated>2021-08-18T14:54:00Z</updated>
    <id>tag:auth0.com,2021-08-18:/blog/auth0-publishes-documentation-to-help-with-new-standard-contractual-clauses/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div id=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;At Auth0, our continuing mission is to secure the world’s identities so innovators can innovate. The core to delivering this mission is trust, including Auth0’s commitment to security and privacy.&lt;/p&gt;&lt;p&gt;Following our post in June, we are pleased to announce we have updated our Data Processing Agreement (DPA) to include the new &lt;a href=&#34;https://auth0.com/blog/auth0-statement-on-new-standard-contractual-clauses-issued-by-european-commission/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Standard Contractual Clauses&lt;/a&gt; (“new SCCs”) to support our customers with European users. We’ve also made changes to our Subscription Agreement, including adding a direct reference to our updated DPA, and clarifying some of the language related to our personal data processing.&lt;/p&gt;&lt;p&gt;The new clauses and information about the changes can be found here &lt;a href=&#34;http://auth0.com/legal&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;auth0.com/legal&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;All new customers can take advantage of these new terms immediately.&lt;/p&gt;&lt;p&gt;For existing customers – your Tenant Administrators will receive a notification about how you can transition to the updated DPA and new SCCs. If you have any questions or have not received this notification, please contact your account manager, or if you are a self service customer, reach out to the Self Service Team at &lt;a href=&#34;mailto:selfserviceteam@auth0.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;selfserviceteam@auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;At Auth0, we know that privacy regulation is complex and changing rapidly. We are working to help our customers respond to this dynamic and fast-paced environment by continuously improving the resources and information we make available.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/auth0-publishes-documentation-to-help-with-new-standard-contractual-clauses/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Enabling Auth0 customers to comply with dynamic privacy requirements</summary>
  </entry>
  <entry>
    <title>State Management in Svelte Applications</title>
    <updated>2021-08-17T15:01:00Z</updated>
    <id>tag:auth0.com,2021-08-17:/blog/state-management-in-svelte-applications/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; As a Front-end developer, one of the most crucial skills to possess is how to manage state in your applications. The ability to synchronize application state with data changes and manage shared state amongst different components is a strong requirement in building modern frontend applications. Several state management libraries have been developed with certain frameworks having a de-facto state management library that they naturally work well with (e.g., &lt;a href=&#34;https://redux.js.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Redux&lt;/a&gt; for &lt;a href=&#34;https://reactjs.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Reactjs&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;In this tutorial, you will learn how to perform state management in &lt;a href=&#34;https://svelte.dev/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Svelte&lt;/a&gt; applications using Svelte&amp;#39;s built-in state management &lt;a href=&#34;https://svelte.dev/tutorial/writable-stores&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Stores&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;What-We-ll-Build&#34;&gt;What We&amp;#39;ll Build&lt;/h2&gt;&lt;p&gt;In this tutorial, you will be implementing state management in a shopping cart built with Svelte. You will begin with a pre-built e-commerce application that sells different types of wares. However, this application is not yet complete, as its shopping features for adding products to the cart and managing cart items have not been implemented. Using the Svelte store, you will be adding the following features to the application:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Load the products from a central state store&lt;/li&gt;&lt;li&gt;Add items to the shopping cart&lt;/li&gt;&lt;li&gt;Display items added to the shopping cart&lt;/li&gt;&lt;li&gt;Calculate the total price of items in the cart&lt;/li&gt;&lt;li&gt;Increase and decrease the quantity of the items in the cart&lt;/li&gt;&lt;li&gt;Remove items from the cart&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;There are a few requirements to follow along with this exercise:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://nodejs.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Node.js&lt;/a&gt; installed on your system. You can visit the website and install a suitable version for your operating system &lt;a href=&#34;https://nodejs.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Basic knowledge of &lt;a href=&#34;https://svelte.dev&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Svelte&lt;/a&gt; and using &lt;a href=&#34;https://svelte.dev/tutorial/nested-components&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Svelte components&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;With all these in place, you can proceed with the exercise.&lt;/p&gt;&lt;h2 id=&#34;Cloning-the-Demo-E-commerce-Project&#34;&gt;Cloning the Demo E-commerce Project&lt;/h2&gt;&lt;p&gt;To begin, you will clone the starting point for the project and run it. Run the following command to clone a copy of the e-commerce project unto your machine:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;git&lt;/span&gt; clone --single-branch --branch base-project https://github.com/coderonfleek/svelte-store&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you have the project on your system, go into the root of the project and install the dependencies with the following commands:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;cd&lt;/span&gt; svelte-store&#xA;&lt;span&gt;npm&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With all dependencies installed, you can then run the project using the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;npm&lt;/span&gt; run dev&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command will boot up a local development server at &lt;a href=&#34;http://localhost:5000&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;5000&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;. Navigate to this address on your browser, and you will see the page displayed below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/nwLSAkqqjS7tFnYJhSUB5/eb8586b16288ada93d2c56fbf3fb00a2/svelte_01.jpg&#34; alt=&#34;&amp;#34;Homepage - E-commerce App&amp;#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;At the moment, when you click &lt;code&gt;Add to Cart&lt;/code&gt; on any of the products, the button does nothing. The source code for the homepage is located in the file &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;views&lt;span&gt;/&lt;/span&gt;Home&lt;span&gt;.&lt;/span&gt;svelte&lt;/code&gt;. The products are currently loaded from a &lt;code&gt;products&lt;/code&gt; array on the page using a &lt;code&gt;Product&lt;/code&gt; component to display the products:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;home container&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;row&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;col-md-9 pt-5&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&#xA;          &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-3 row-cols-xl-3&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;          {#each products as product}&#xA;          &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Product&lt;/span&gt; &lt;span&gt;{product}&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;          {/each}&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;col-md-3 pt-5&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Cart&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On the right column, a &lt;code&gt;Cart&lt;/code&gt; component is used to display items that have been added to the cart and their respective quantities, which is also hard-coded into the component at the moment. The &lt;code&gt;Cart&lt;/code&gt; component also consists of a &lt;code&gt;Checkout&lt;/code&gt; button which will navigate to the full shopping cart details page shown below when clicked:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5sW3mmLvYraDwX9d71RZQY/0582cbbb68c9e9c1c697473e8779237e/svelte_02.jpg&#34; alt=&#34;&amp;#34;Cart details page - E-commerce App&amp;#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;The cart details page source code can be found in &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;views&lt;span&gt;/&lt;/span&gt;ShoppingCart&lt;span&gt;.&lt;/span&gt;svelte&lt;/code&gt;. It uses a &lt;code&gt;CartItem&lt;/code&gt; component to display any item added to the cart with buttons to increase or decrease the quantity of the item in the cart or remove it completely. The &lt;code&gt;Cart&lt;/code&gt; component is also displayed on the right column, just as it was on the homepage. At the moment, these buttons do nothing when clicked.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;home container&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;row&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;col-md-8 pt-5&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        {#each cart as product}&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;CartItem&lt;/span&gt; &lt;span&gt;{product}&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        {/each}&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;&lt;/span&gt;col-md-4 pt-5&lt;span&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Cart&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The cart items displayed on this page are loaded from a &lt;code&gt;cart&lt;/code&gt; array and are currently hard-coded on the page. What&amp;#39;s more, clicking any of the buttons does nothing at the moment. All components used in the application are contained in the &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;components&lt;/code&gt; folder.&lt;/p&gt;&lt;h2 id=&#34;Creating-the-State-Management-Store&#34;&gt;Creating the State Management Store&lt;/h2&gt;&lt;p&gt;To begin implementing the features listed in the above section, you will need to set up a central state management store in the application. Create a &lt;code&gt;store&lt;span&gt;.&lt;/span&gt;js&lt;/code&gt; file inside the &lt;code&gt;src&lt;/code&gt; folder, then add the following code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; writable&lt;span&gt;,&lt;/span&gt; derived &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;svelte/store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; products &lt;span&gt;=&lt;/span&gt; &lt;span&gt;writable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Chelsea Shoes&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    price&lt;span&gt;:&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    shortdesc&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Best Drip in the Market&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    url&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;images/chelsea-shoes.png&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Kimono&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    price&lt;span&gt;:&lt;/span&gt; &lt;span&gt;50&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    shortdesc&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Classy, Stylish, Dope&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    url&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;images/kimono.png&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Watch&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    price&lt;span&gt;:&lt;/span&gt; &lt;span&gt;2500&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    shortdesc&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Elegance built in&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    url&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;images/rolex.png&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Wallet&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    price&lt;span&gt;:&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    shortdesc&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Sleek, Trendy, Clean&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    url&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;images/wallet.png&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Lady Handbags&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    price&lt;span&gt;:&lt;/span&gt; &lt;span&gt;230&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    shortdesc&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Fabulous, Exotic, Classy&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    url&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;images/handbag.png&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;{&lt;/span&gt;&#xA;    id&lt;span&gt;:&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Casual Shirts&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    price&lt;span&gt;:&lt;/span&gt; &lt;span&gt;30&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    shortdesc&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Neat, Sleek, Smart&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    url&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;images/shirt.png&amp;#34;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; cart &lt;span&gt;=&lt;/span&gt; &lt;span&gt;writable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The store above contains two writable properties:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;code&gt;products&lt;/code&gt; property holds all products contained in the e-commerce application. In a production scenario, you would want to load products from a remote API.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;cart&lt;/code&gt; property is an array that holds the items a user adds to their cart. This is empty by default.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These properties are all that is needed to implement the features listed above.&lt;/p&gt;&lt;h2 id=&#34;Loading-Products-to-the-Home-Page-from-the-Store&#34;&gt;Loading Products to the Home Page from the Store&lt;/h2&gt;&lt;p&gt;The first task is to ensure that the products are loaded from the store instead of being hard-coded on the &lt;code&gt;Home&lt;span&gt;.&lt;/span&gt;svelte&lt;/code&gt; homepage. Locate &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;views&lt;span&gt;/&lt;/span&gt;Home&lt;span&gt;.&lt;/span&gt;svelte&lt;/code&gt; and replace its content with the following code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;script&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;import&lt;/span&gt; Product &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../components/Product.svelte&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;import&lt;/span&gt; Cart &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../components/Cart.svelte&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; products &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;script&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;main&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;home container&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;row&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;col-md-9 pt-5&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;div&#xA;          &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-3 row-cols-xl-3&amp;#34;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;          &lt;span&gt;{&lt;/span&gt;#each $products &lt;span&gt;as&lt;/span&gt; product&lt;span&gt;}&lt;/span&gt;&#xA;            &lt;span&gt;&amp;lt;&lt;/span&gt;Product &lt;span&gt;{&lt;/span&gt;product&lt;span&gt;}&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;          &lt;span&gt;{&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;each&lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;col-md-3 pt-5&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;Cart &lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;main&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the update above, the &lt;code&gt;products&lt;/code&gt; variable has now been replaced with store property &lt;code&gt;products&lt;/code&gt; that references the store to load the products. Now refresh your homepage, and you will not see any change, but you know that your products are now being loaded from the store.&lt;/p&gt;&lt;p&gt;The next task is to implement the functionality that allows users to click &lt;code&gt;Add to Cart&lt;/code&gt; on a product on the homepage and see it added to the cart widget on the right column. As mentioned earlier, products displayed on the page are managed using a &lt;code&gt;Product&lt;/code&gt; component. Locate this component at &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;components&lt;span&gt;/&lt;/span&gt;Product&lt;span&gt;.&lt;/span&gt;svelte&lt;/code&gt; and replace its content with the following code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;script&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; cart &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;export&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; product&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;let&lt;/span&gt; inCart &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  $&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    $cart&lt;span&gt;.&lt;/span&gt;&lt;span&gt;forEach&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;item&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;==&lt;/span&gt; product&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        inCart &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;function&lt;/span&gt; &lt;span&gt;addToCart&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;inCart&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;let&lt;/span&gt; updatedCart &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;$cart&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;product&lt;span&gt;,&lt;/span&gt; quantity&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;      cart&lt;span&gt;.&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;updatedCart&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;alert&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Item already added to Cart&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;script&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;main&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;col mb-4&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;card&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;img src&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;product&lt;span&gt;.&lt;/span&gt;url&lt;span&gt;}&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;card-img-top&amp;#34;&lt;/span&gt; alt&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;...&amp;#34;&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;card-body&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;h5 &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;card-title&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;product&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;h5&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;p &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;card-text&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;          $&lt;span&gt;{&lt;/span&gt;product&lt;span&gt;.&lt;/span&gt;price&lt;span&gt;}&lt;/span&gt;&#xA;          &lt;span&gt;&amp;lt;&lt;/span&gt;br &lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;          &lt;span&gt;&amp;lt;&lt;/span&gt;small&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;            &lt;span&gt;{&lt;/span&gt;product&lt;span&gt;.&lt;/span&gt;shortdesc&lt;span&gt;}&lt;/span&gt;&#xA;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;small&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;p&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;button&#xA;          on&lt;span&gt;:&lt;/span&gt;click&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;addToCart&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;          &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;btn btn-primary&amp;#34;&lt;/span&gt;&#xA;          disabled&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;inCart&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;inCart &lt;span&gt;?&lt;/span&gt; &lt;span&gt;&amp;#34;Added&amp;#34;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Add to Cart&amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;button&#xA;        &lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;main&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The updates to this file add two properties to the component:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A reference to the &lt;code&gt;cart&lt;/code&gt; property in the store&lt;/li&gt;&lt;li&gt;The &lt;code&gt;inCart&lt;/code&gt; checks if the product using this component has been added to the store or not&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The &lt;code&gt;addToCart&lt;/code&gt; function adds an item to the cart when the &lt;code&gt;Add to Cart&lt;/code&gt; button is clicked by updating the &lt;code&gt;cart&lt;/code&gt; property in the store with the new item. This function first checks if the product is already in the cart. If so, an alert is displayed indicating that the product has already been added. If not, the product is added to the cart.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;inCart&lt;/code&gt; property is also used in the template to disable the &lt;code&gt;Add to Cart&lt;/code&gt; button if the product has already been added.&lt;/p&gt;&lt;p&gt;Next, the &lt;code&gt;Cart&lt;/code&gt; component needs to display the products that have been added to the cart and also the total price. Locate the &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;components&lt;span&gt;/&lt;/span&gt;Cart&lt;span&gt;.&lt;/span&gt;svelte&lt;/code&gt; file and replace its content with the following code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;script&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; link &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;svelte-spa-router&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; cart &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  $&lt;span&gt;:&lt;/span&gt; totalPrice &lt;span&gt;=&lt;/span&gt; $cart&lt;span&gt;.&lt;/span&gt;&lt;span&gt;reduce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;total&lt;span&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;$cart&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; total &lt;span&gt;+&lt;/span&gt; next&lt;span&gt;.&lt;/span&gt;quantity &lt;span&gt;*&lt;/span&gt; next&lt;span&gt;.&lt;/span&gt;price&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;script&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;main&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;card&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;card-body&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;h5 &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;card-title&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Your Cart&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;h5&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt;#&lt;span&gt;if&lt;/span&gt; $cart&lt;span&gt;.&lt;/span&gt;length &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;p&lt;span&gt;&amp;gt;&lt;/span&gt;Your Cart is Empty&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;p&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;ul &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;list-group list-group-flush&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt;#each $cart &lt;span&gt;as&lt;/span&gt; item&lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;li&#xA;          &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;list-group-item d-flex justify-content-between align-items-center&amp;#34;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;          &lt;span&gt;{&lt;/span&gt;item&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;}&lt;/span&gt;&#xA;          &lt;span&gt;&amp;lt;&lt;/span&gt;span &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;badge badge-primary badge-pill&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;item&lt;span&gt;.&lt;/span&gt;quantity&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;span&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;li&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;{&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;each&lt;span&gt;}&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;li&#xA;        &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;list-group-item d-flex justify-content-between align-items-center&amp;#34;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        Price &lt;span&gt;&amp;lt;&lt;/span&gt;b&lt;span&gt;&amp;gt;&lt;/span&gt;$&lt;span&gt;{&lt;/span&gt;totalPrice&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;b&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;li&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;ul&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;card-body&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;a use&lt;span&gt;:&lt;/span&gt;link href&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;/shop&amp;#34;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;btn btn-primary btn-block&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Checkout&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;a&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;main&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The update to this file first replaces the hard-coded cart items with reference to that &lt;code&gt;cart&lt;/code&gt; state in the store. A &lt;code&gt;totalPrice&lt;/code&gt; property is also used to evaluate the total cost of all items currently added to the shopping cart. In the template, the length of &lt;code&gt;cart&lt;/code&gt; is used to display a message to the user to add items to the shopping cart when the cart is empty.&lt;/p&gt;&lt;p&gt;Return to the browser and reload the homepage if it hasn&amp;#39;t been reloaded. You will see the view below. Notice the new look of the cart widget on the right column:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3OzDAoyWDYhkPpma41kAlK/34958e5b49a984b65df3857f763f9cc3/svelte_03.jpg&#34; alt=&#34;&amp;#34;Updated Cart - E-commerce App&amp;#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;Now click on &lt;code&gt;Add to Cart&lt;/code&gt; to add at least 2 items to the cart and observe the cart widget update based on your selections like below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/UyhS5wLpRtIr7zRjiOXsT/cacc42d088fe9417a084e78e76a8f3e7/svelte_04.jpg&#34; alt=&#34;&amp;#34;Items selection - E-commerce App&amp;#34;&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Changing-Items-Quantity-and-Removing-Items-from-the-Cart&#34;&gt;Changing Items Quantity and Removing Items from the Cart&lt;/h2&gt;&lt;p&gt;Notice how the default quantity of each product added to the cart is set to one (1)? This is because every count has to start from 1. In a proper shopping cart application, users should be allowed to increase the quantity of each selected item.&lt;/p&gt;&lt;p&gt;The next task is to add features for increasing and decreasing the number of cart items. You will also add the ability to completely remove an item from the cart.&lt;/p&gt;&lt;p&gt;From the shopping cart details page shown earlier, each cart item displayed with buttons to manage its quantity uses the &lt;code&gt;CartItem&lt;/code&gt; component. Locate this component at &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;components&lt;span&gt;/&lt;/span&gt;CartItem&lt;span&gt;.&lt;/span&gt;svelte&lt;/code&gt; and replace the code in it with the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;script&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;import&lt;/span&gt; Product &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../components/Product.svelte&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; cart &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;export&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; product&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;let&lt;/span&gt; itemQuantity &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  $&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;let&lt;/span&gt; get_product &lt;span&gt;=&lt;/span&gt; $cart&lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; item&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;==&lt;/span&gt; product&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    itemQuantity &lt;span&gt;=&lt;/span&gt; get_product&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;quantity&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;function&lt;/span&gt; &lt;span&gt;changeQuantity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;action &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;add&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;action &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#34;add&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      product&lt;span&gt;.&lt;/span&gt;quantity &lt;span&gt;=&lt;/span&gt; product&lt;span&gt;.&lt;/span&gt;quantity &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;      &lt;span&gt;updateCart&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;product&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;product&lt;span&gt;.&lt;/span&gt;quantity &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        product&lt;span&gt;.&lt;/span&gt;quantity &lt;span&gt;=&lt;/span&gt; product&lt;span&gt;.&lt;/span&gt;quantity &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;updateCart&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;product&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;//Remove the item&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;removeItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;product&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;function&lt;/span&gt; &lt;span&gt;removeItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;product&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;let&lt;/span&gt; removedItemCart &lt;span&gt;=&lt;/span&gt; $cart&lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;cartItem&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;return&lt;/span&gt; cartItem&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;!=&lt;/span&gt; product&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    cart&lt;span&gt;.&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;removedItemCart&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;function&lt;/span&gt; &lt;span&gt;updateCart&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;product&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;let&lt;/span&gt; updatedCart &lt;span&gt;=&lt;/span&gt; $cart&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;cartItem&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;cartItem&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;==&lt;/span&gt; product&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; product&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;      &lt;span&gt;return&lt;/span&gt; cartItem&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    cart&lt;span&gt;.&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;updatedCart&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;script&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;main&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;row cart-item-row&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;col-md-6&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;Product &lt;span&gt;{&lt;/span&gt;product&lt;span&gt;}&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;col-md-4&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;row&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;col-md-5&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;          &lt;span&gt;&amp;lt;&lt;/span&gt;button&#xA;            on&lt;span&gt;:&lt;/span&gt;click&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;changeQuantity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;            &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;btn btn-primary btn-block&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;button&#xA;          &lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;col-md-2 text-center&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;product&lt;span&gt;.&lt;/span&gt;quantity&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;col-md-5&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;          &lt;span&gt;&amp;lt;&lt;/span&gt;button&#xA;            on&lt;span&gt;:&lt;/span&gt;click&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;changeQuantity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;remove&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;            &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;btn btn-warning btn-block&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;button&#xA;          &lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;row cart-remove-button&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;col-md-12&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;          &lt;span&gt;&amp;lt;&lt;/span&gt;button on&lt;span&gt;:&lt;/span&gt;click&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;removeItem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;btn btn-danger btn-block&amp;#34;&lt;/span&gt;&#xA;            &lt;span&gt;&amp;gt;&lt;/span&gt;Remove Item&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;button&#xA;          &lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;main&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;style scoped&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;cart&lt;span&gt;-&lt;/span&gt;item&lt;span&gt;-&lt;/span&gt;row &lt;span&gt;{&lt;/span&gt;&#xA;    border&lt;span&gt;-&lt;/span&gt;bottom&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;px solid #ccc&lt;span&gt;;&lt;/span&gt;&#xA;    margin&lt;span&gt;-&lt;/span&gt;top&lt;span&gt;:&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;px&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;.&lt;/span&gt;cart&lt;span&gt;-&lt;/span&gt;remove&lt;span&gt;-&lt;/span&gt;button &lt;span&gt;{&lt;/span&gt;&#xA;    margin&lt;span&gt;-&lt;/span&gt;top&lt;span&gt;:&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;px&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;style&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This update adds two computed properties, &lt;code&gt;cart&lt;/code&gt;, which is a reference to the &lt;code&gt;cart&lt;/code&gt; state property in the store, and &lt;code&gt;itemQuantity&lt;/code&gt;, which gets the current quantity of the item in the shopping cart.&lt;/p&gt;&lt;p&gt;Three methods are also added which do the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;changeQuantity&lt;/code&gt;: takes in an &lt;code&gt;action&lt;/code&gt; argument that is either set to &lt;code&gt;add&lt;/code&gt; or &lt;code&gt;decrease&lt;/code&gt; to determine whether to increase or decrease the item quantity by 1. If the current quantity is 1 and the function is asked to decrease the item, the item would be removed completely.&lt;/li&gt;&lt;li&gt;&lt;code&gt;removeItem&lt;/code&gt;: completely removes an item from the shopping cart.&lt;/li&gt;&lt;li&gt;&lt;code&gt;updateCart&lt;/code&gt;: A utility function for reusing the update logic for &lt;code&gt;cart&lt;/code&gt; in the store&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Next, locate the shopping cart details page at &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;views&lt;span&gt;/&lt;/span&gt;ShoppingCart&lt;span&gt;.&lt;/span&gt;svelte&lt;/code&gt; and replace its content with the following code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;script&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;import&lt;/span&gt; Cart &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../components/Cart.svelte&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;import&lt;/span&gt; CartItem &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../components/CartItem.svelte&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; cart &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&amp;#34;../store&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;script&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;main&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;home container&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;row&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;col-md-8 pt-5&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;#each $cart &lt;span&gt;as&lt;/span&gt; product&lt;span&gt;}&lt;/span&gt;&#xA;          &lt;span&gt;&amp;lt;&lt;/span&gt;CartItem &lt;span&gt;{&lt;/span&gt;product&lt;span&gt;}&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;{&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;each&lt;span&gt;}&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;div &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;col-md-4 pt-5&amp;#34;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span&gt;&amp;lt;&lt;/span&gt;Cart &lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;div&lt;span&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;main&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This update replaces the hard-coded cart items with reference to the &lt;code&gt;cart&lt;/code&gt; property in the store.&lt;/p&gt;&lt;h2 id=&#34;Running-the-Application&#34;&gt;Running the Application&lt;/h2&gt;&lt;p&gt;With these changes, your app should be reloaded once again. Add a few items to the shopping cart if the reload has reset the cart back to being empty, then click &amp;#34;Checkout&amp;#34; to go to the shopping cart details page. On this page, increment and decrement some of the items in the cart and try removing one of them by clicking &amp;#34;Remove&amp;#34;. You will see the cart widget update accordingly on the right column like below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7xFFbT1x3IfKUxCFT7IDvl/b42328e5782e261ffb3d1a454eba2a8c/svelte_05.jpg&#34; alt=&#34;&amp;#34;Update Cart Items - E-commerce App&amp;#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;Perfect!&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this tutorial, you have been able to implement state management in a Svelte application using a shopping cart demo application.&lt;/p&gt;&lt;p&gt;State management involves a design thinking process where you have to decide which state properties are global (reside in the store) and which state properties are to be localized to the respective components that make use of them. Knowing which state should be local and which state properties should reside in the central store will help you make good design decisions.&lt;/p&gt;&lt;p&gt;If any part of your demonstration is not working as expected, I advise you to go through the article once again to see if there is any step you may have missed. If you need additional help, feel free to reach out in the comments.&lt;/p&gt;&lt;p&gt;Happy coding :)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/state-management-in-svelte-applications/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">A tutorial on how to use the Svelte state management store to manage state in Svelte applications.</summary>
  </entry>
  <entry>
    <title>Auth0 Marketplace Now Offers netID Solution</title>
    <updated>2021-08-17T01:20:00Z</updated>
    <id>tag:auth0.com,2021-08-17:/blog/auth0-marketplace-now-offers-netid-solution/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;London/Montabaur, Germany – August 17, 2021 –&lt;/strong&gt; &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0&lt;/a&gt;, the modern identity platform, and the &lt;a href=&#34;https://enid.foundation/en/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;European netID Foundation&lt;/a&gt; today announced the availability of netID Single Sign-On on &lt;a href=&#34;https://marketplace.auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Marketplace&lt;/a&gt;, a catalog of trusted technology integrations to extend the functionality of Auth0’s identity management platform. &lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://marketplace.auth0.com/integrations/netid-single-sign-on&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;netID&lt;/a&gt; enables users to sign into apps and websites with their netID account and to decide privately and transparently which data to share. As an independent European identity provider with more than 38 million active user accounts in Germany, netID provides the necessary infrastructure for &lt;a href=&#34;https://auth0.com/blog/what-is-single-sign-on-a-non-developer-s-guide/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Single Sign-On (SSO)&lt;/a&gt; but does not store any user data itself. Users can manage the consents they’ve given at any time in netID’s Privacy Center.&lt;/p&gt;&lt;p&gt;“Whether in finance, e-commerce, or online publishing, engaging with users in an all trusted and transparent way is key to driving success. We are excited about the partnership with Auth0 and the availability of the netID Single Sign-On integration. Joint customers can now seamlessly integrate our product and offer users a European alternative to U.S. social login providers,” says Achim Schlosser, board member, and chief technology officer of the European netID Foundation.&lt;/p&gt;&lt;p&gt;“After speaking with many customers, we have identified the integrations that matter to them. The availability of netID on Auth0 Marketplace is a direct response to the growing need for privacy-enhancing technologies in Europe and part of our continued commitment to international markets,” said Cassio Sampaio, SVP of Product at Auth0. “We are thrilled to have netID as a vetted and valuable vendor in Auth0 Marketplace.” &lt;/p&gt;&lt;p&gt;Auth0 reviews partner integration functionality and makes available integrations that are easy to discover and integrate for customers. Partners can participate in the growing demand for digital identity solutions and increase their visibility as part of the Auth0 Marketplace and can learn more here: &lt;a href=&#34;https://auth0.com/partners&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://auth0.com/partners&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://auth0.com/blog/okta-acquisition-announcement/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0, recently acquired by Okta&lt;/a&gt;, provides a modern identity platform that helps organizations meet the security, privacy, and convenience needs of their users. Please visit &lt;a href=&#34;https://auth0.com/identity-os&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 identity OS&lt;/a&gt; to learn more.&lt;/p&gt;&lt;h2 id=&#34;About-the-European-netID-Foundation&#34;&gt;About the European netID Foundation&lt;/h2&gt;&lt;p&gt;The European netID Foundation was established in March 2018 by Mediengruppe RTL Deutschland, ProSiebenSat.1, and United Internet with its brands WEB.DE and GMX. With an independent market solution, the foundation supports Internet offerings from all industry sectors with the implementation of the new European data protection law and, for this purpose, has created the open login standard netID. The initiators of the foundation together reach around 50 million unique users every month and together have more than 38 million active accounts. The foundation is explicitly open to additional partners and initiatives. Further information is available at &lt;a href=&#34;https://auth0.com/blog/auth0-marketplace-now-offers-netid-solution/www.enid.eu&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;www.enid.eu&lt;/a&gt;.&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;h3 id=&#34;Media-Contacts&#34;&gt;Media Contacts&lt;/h3&gt;&lt;p&gt;Alexandra Roszkowski&lt;br/&gt;&lt;a href=&#34;mailto:presse@enid.eu&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;presse@enid.eu&lt;/a&gt;&lt;br/&gt;+49 162 25 27-188&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Sarah Konarski &amp;amp; Nele Mascher&lt;br/&gt;Finn Partners for Auth0, DACH&lt;br/&gt;&lt;a href=&#34;mailto:auth0de@finnpartners.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;auth0de@finnpartners.com&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/auth0-marketplace-now-offers-netid-solution/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Auth0 integrates netID to support customer privacy needs in Europe</summary>
  </entry>
  <entry>
    <title>The 7 Most Common Types of Cybersecurity Attacks in 2021</title>
    <updated>2021-08-16T15:44:00Z</updated>
    <id>tag:auth0.com,2021-08-16:/blog/the-7-most-common-types-of-cybersecurity-attacks-in-2021/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;With more people working remotely or online post-2020, the &lt;a href=&#34;https://thehill.com/policy/cybersecurity/493198-fbi-sees-spike-in-cyber-crime-reports-during-coronavirus-pandemic&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;FBI reports&lt;/a&gt; that cybercriminals are quadrupling the number of cyberattacks they use to disrupt online activities. Research also shows the impact to organizations and their users from a single successful cyberattack is growing each year.&lt;/p&gt;&lt;p&gt;For example, in 2017, nearly &lt;a href=&#34;https://www.statista.com/statistics/273550/data-breaches-recorded-in-the-united-states-by-number-of-breaches-and-records-exposed/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;197 million records&lt;/em&gt;&lt;/a&gt; were exposed due to data breaches. In 2020, that number &lt;a href=&#34;https://pages.riskbasedsecurity.com/hubfs/Reports/2020/2020%20Year%20End%20Data%20Breach%20QuickView%20Report.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;grew to 37 billion&lt;/a&gt;, even though the overall number of data breaches had decreased. And IBM reports that the costs are growing for organizations that fall victim to these attacks in countries like the United States, where the average cost of a data breach grew from $7.91M to $8.64M between &lt;a href=&#34;https://www.ibm.com/downloads/cas/861MNWN2&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;2018&lt;/a&gt; and &lt;a href=&#34;https://www.ibm.com/security/data-breach&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;2020&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Many of the methods cybercriminals use to breach organizations rely on human error. Even your sharpest employees can become your greatest weakness if they click on a malicious link without realizing it. However, other cyberattacks exploit gaps in your &lt;a href=&#34;https://auth0.com/blog/what-is-data-security/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;data security&lt;/a&gt; efforts to gain access to sensitive data.&lt;/p&gt;&lt;p&gt;Below are seven of the most common cyberattacks your organization will face in 2021 and the ways to protect yourself against the data breaches they have the potential to cause.&lt;/p&gt;&lt;h2 id=&#34;1--Malware-Attacks&#34;&gt;1. Malware Attacks&lt;/h2&gt;&lt;p&gt;Malware refers to many different types of malicious software designed to infiltrate, spy on, or create a backdoor and control an organization’s systems or data. This includes ransomware, worms, trojans, adware, and spyware. &lt;a href=&#34;https://monstercloud.com/blog/2020/03/23/coronavirus-alert-ransomware-attacks-up-by-800/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Experts report&lt;/a&gt; that malware usage is up almost 800% since early 2020.&lt;/p&gt;&lt;p&gt;Malware has the potential to cause major data breaches and severely disrupt business operations. Microsoft was the victim of a major ransomware attack, where WannaCry &lt;a href=&#34;https://en.wikipedia.org/wiki/WannaCry_ransomware_attack&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;took advantage of a weak spot in their operating system&lt;/a&gt; and displayed the following message to banks, health care providers, manufacturers, and other businesses across the globe:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1eCk2eoRxo2dlqfakT2rLF/3d36517813cea24b63b795f7fe3a256c/Uploaded_from_The_7_Most_Common_Types_of_Cybersecurity_Attacks_in_2021&#34; alt=&#34;image.png&#34;/&gt;&#xA;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;a href=&#34;https://blog.malwarebytes.com/cybercrime/2017/05/wanacrypt0r-ransomware-hits-it-big-just-before-the-weekend/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Source&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;To regain access to their computers, along with any files that hadn’t been backed up, businesses had to pay a ransom to the creators of the WannaCry program in &lt;a href=&#34;https://bitcoin.org/en/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Bitcoin&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Malware is typically downloaded unwittingly by clicking a malicious link or by tricking a user into thinking they&amp;#39;re downloading something legitimate when they’re not.&lt;/p&gt;&lt;h3 id=&#34;How-to-Protect-Against-Malware-Attacks&#34;&gt;How to Protect Against Malware Attacks&lt;/h3&gt;&lt;p&gt;Teaching your employees how to spot suspicious links and pop-ups that could contain malware will help reduce the chance that it could infect your systems.&lt;/p&gt;&lt;p&gt;Additional ways to protect against malware include keeping your operating systems up to date to ensure known security gaps are patched and using anti-virus software. For example, the &lt;a href=&#34;https://www.wired.com/story/equifax-breach-no-excuse/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Equifax&lt;/a&gt; data breach could have been prevented had a known patch been installed in time.&lt;/p&gt;&lt;h2 id=&#34;2--Phishing-Attacks&#34;&gt;2. Phishing Attacks&lt;/h2&gt;&lt;p&gt;Phishing attacks attempt to steal information from users or trick them into downloading malware by sending malicious emails or text messages (SMS) that look like real requests but are, in fact, a Scam. Here’s a Dropbox email asking users to verify their email address that’s actually a phishing attack:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2ISbM89J8qjqwVy4kUpgOf/a1b52597302c386ee8381bfd6f6948d9/Uploaded_from_The_7_Most_Common_Types_of_Cybersecurity_Attacks_in_2021&#34; alt=&#34;image.png&#34;/&gt; &#xA;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;a href=&#34;https://www.bankinfosecurity.com/locky-returns-via-spam-dropbox-themed-phishing-attacks-a-10250&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Source&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;According to &lt;a href=&#34;https://enterprise.verizon.com/resources/reports/dbir/2020/results-and-analysis/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Verizon’s 2020 Data Breach Investigations Report&lt;/a&gt;, phishing attacks are the most common cause of data breaches globally and have been the root cause of notable instances of cybercrime in the last decade.&lt;/p&gt;&lt;p&gt;The cybercriminals who breached the AP News Twitter account and falsely &lt;a href=&#34;https://www.bbc.com/news/world-us-canada-21508660&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;tweeted&lt;/a&gt; that the White House was under attack used a targeted phishing attack (spear-phishing) to gain access to the account, as did the bad actors who leaked sensitive emails from Hillary Clinton’s campaign chairman &lt;a href=&#34;https://www.cbsnews.com/news/the-phishing-email-that-hacked-the-account-of-john-podesta/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;before the 2016 election&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;How-to-Protect-Against-Phishing-Attacks&#34;&gt;How to Protect Against Phishing Attacks&lt;/h3&gt;&lt;p&gt;The best way to protect your organization against phishing attacks is to educate your employees on how to spot a questionable email or text message. The training programs below can help you do this:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;em&gt;Digital Defense’s&lt;/em&gt; &lt;a href=&#34;https://www.digitaldefense.com/professional-services/secured-training/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;SecurED training program&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Inspired eLearning’s&lt;/em&gt; &lt;a href=&#34;https://inspiredelearning.com/security-awareness/awareness-c-suite/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Security Awareness&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Additionally, CSO has compiled a list of resources that can help you train your teams to spot phishing attacks &lt;a href=&#34;https://www.csoonline.com/article/3225471/please-dont-send-me-to-cybersecurity-training.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;3--Distributed-Denial-of-Service-Attacks&#34;&gt;3. Distributed Denial of Service Attacks&lt;/h2&gt;&lt;p&gt;Distributed denial of service (DDoS) attacks disrupt the traffic to a website, application, server, service, or network by overwhelming it with a flood of traffic from compromised computer networks (&lt;a href=&#34;https://usa.kaspersky.com/resource-center/threats/botnet-attacks&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;botnets&lt;/a&gt;) that prevents real users from accessing it. In 2018, GitHub experienced the largest DDoS attack ever when it was hit with 1.35 terabits of traffic per second and was &lt;a href=&#34;https://www.wired.com/story/github-ddos-memcached/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;offline for almost 20 minutes as a result&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;DDoS attacks are common and increased by 50% in 2020 compared to 2019, with a large surge occurring in early 2020 during the pandemic, according to security company &lt;a href=&#34;https://securelist.com/ddos-attacks-in-q3-2020/99171/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Kaspersky&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;How-to-Protect-Against-DDoS-Attacks&#34;&gt;How to Protect Against DDoS Attacks&lt;/h3&gt;&lt;p&gt;DDoS attacks are tricky to identify because they’re often hard to distinguish from legitimate traffic. Some &lt;a href=&#34;https://www.cloudflare.com/learning/ddos/what-is-a-ddos-attack/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;methods of protecting against DDoS attacks&lt;/a&gt; include blocking all traffic for a short period of time, rate-limiting traffic to a website, using a web application firewall to detect suspicious traffic patterns, or scattering traffic across a network of servers to reduce the attack’s impact.&lt;/p&gt;&lt;h2 id=&#34;4--Man-in-the-Middle-Attacks&#34;&gt;4. Man-in-the-Middle Attacks&lt;/h2&gt;&lt;p&gt;Man-in-the-middle (MitM) attacks are when bad actors spy on or intercept communication between you and your users or employees. MitM attacks are most commonly used to steal personal or company information or to redirect that information to another destination or in espionage situations, such as when &lt;a href=&#34;https://www.theguardian.com/world/2018/oct/04/how-russian-spies-bungled-cyber-attack-on-weapons-watchdog&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Russian hackers&lt;/a&gt; attempted to breach the Organisation for the Prohibition of Chemical Weapons (OPCW).&lt;/p&gt;&lt;p&gt;MitM attacks are &lt;a href=&#34;https://www.csoonline.com/article/3340117/what-is-a-man-in-the-middle-attack-how-mitm-attacks-work-and-how-to-prevent-them.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;not the most common cyberattack&lt;/a&gt; because many of the same objectives can be achieved using malware. However, MitM attacks do present a threat for organizations because they’re often hard to spot and because &lt;a href=&#34;https://www.businesswire.com/news/home/20201215005287/en/Upwork-Study-Finds-22-of-American-Workforce-Will-Be-Remote-by-2025&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;more employees are working remotely&lt;/a&gt; post-2020.&lt;/p&gt;&lt;p&gt;For example, fake WiFi networks are &lt;a href=&#34;https://hackernoon.com/a-hacker-intercepted-your-wifi-traffic-stole-your-contacts-passwords-financial-data-heres-how-4fc0df9ff152&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;easy to deploy&lt;/a&gt; in public places like coffee shops where remote employees often work. People often connect to these networks without realizing it, allowing bad actors to spy on them while they use the network.&lt;/p&gt;&lt;h3 id=&#34;How-to-Protect-Against-MitM-Attacks&#34;&gt;How to Protect Against MitM Attacks&lt;/h3&gt;&lt;p&gt;End-to-end encryption protocols like &lt;a href=&#34;https://www.cloudflare.com/learning/ssl/transport-layer-security-tls/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Transport Layer Security&lt;/a&gt; (TLS) are the best way to protect against MitM attacks. Additionally, requiring your employees to use a VPN to access company networks over public WiFi will ensure that any information shared during their session remains private, regardless of whether the network belongs to a bad actor or if their coffee shop’s WiFi is simply unsecured.&lt;/p&gt;&lt;h2 id=&#34;5--Credential-Stuffing-Attacks&#34;&gt;5. Credential Stuffing Attacks&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://auth0.com/blog/what-is-credential-stuffing/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Credential stuffing&lt;/a&gt; is a type of brute-force cyber-attack where bad actors use stolen usernames and passwords from one data breach to access user accounts at another organization.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1WPDZfXKzHLheBp0XbP2em/6769d8d365597a77b9de207e48c303d8/Uploaded_from_The_7_Most_Common_Types_of_Cybersecurity_Attacks_in_2021&#34; alt=&#34;image.png&#34;/&gt;&lt;/p&gt;&lt;p&gt;Credential stuffing is possible because, statistically, &lt;a href=&#34;https://services.google.com/fh/files/blogs/google_security_infographic.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;65% of all people&lt;/a&gt; reuse the same password across multiple accounts. As a result, credential stuffing attacks are one of the &lt;a href=&#34;https://enterprise.verizon.com/resources/reports/dbir/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;most common&lt;/a&gt; causes of data breaches globally.&lt;/p&gt;&lt;h3 id=&#34;How-to-Protect-Against-Credential-Stuffing-Attacks&#34;&gt;How to Protect Against Credential Stuffing Attacks&lt;/h3&gt;&lt;p&gt;The best way to protect against credential stuffing attacks is by either implementing &lt;a href=&#34;https://auth0.com/passwordless/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;passwordless authentication&lt;/a&gt; or &lt;a href=&#34;https://auth0.com/multifactor-authentication&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;multi-factor authentication&lt;/a&gt; (MFA). Passwordless authentication prevents bad actors from using stolen credentials by eliminating them altogether, while MFA requires bad actors to verify their identity in one or more ways in addition to the stolen credentials they’re using to log in.&lt;/p&gt;&lt;h2 id=&#34;6--Password-Spraying-Attacks&#34;&gt;6. Password Spraying Attacks&lt;/h2&gt;&lt;p&gt;Password spraying is also a type of brute-force attack where bad actors attempt to guess a user’s password from a list of common passwords like “123456” or “password.”&lt;/p&gt;&lt;p&gt;Like credential stuffing, password spraying is quite common. For example, Verizon’s 2020 Data Breach Report showed that over &lt;a href=&#34;https://enterprise.verizon.com/content/verizonenterprise/us/en/index/resources/reports/2020-data-breach-investigations-report.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;80% of all hacking-related data breaches&lt;/a&gt; involved brute-force methods like password spraying.&lt;/p&gt;&lt;h3 id=&#34;How-to-Protect-Against-Password-Spraying-Attacks&#34;&gt;How to Protect Against Password Spraying Attacks&lt;/h3&gt;&lt;p&gt;Password spraying attacks can be prevented by using passwordless authentication or MFA, just like credential stuffing attacks can be. However, you can also reduce the risk and impact of a data breach via password spraying by following the &lt;a href=&#34;https://auth0.com/blog/dont-pass-on-the-new-nist-password-guidelines/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;NIST Password Guidelines&lt;/a&gt;, which are considered the best password standards in the world.&lt;/p&gt;&lt;h2 id=&#34;7--Mobile-Device-Attacks&#34;&gt;7. Mobile Device Attacks&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.t-mobile.com/content/dam/tfb/pdf/T-Mobile-for-Business-2020-Workplace-Mobility-Report.pdf?icid=TFB_TMO_P_TFBFTRWRKS_7LCBNVDVYBXY27WF321599&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Many organizations are working to increase the mobility&lt;/a&gt; of their workforce because it improves operational efficiency and productivity. However, cybercriminals are well aware of this fact and are targeting mobile devices more frequently &lt;a href=&#34;https://www.zdnet.com/article/mobile-malware-attacks-are-booming-in-2019-these-are-the-most-common-threats/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;year&lt;/a&gt; over &lt;a href=&#34;https://www.mcafee.com/content/dam/consumer/en-us/docs/2020-Mobile-Threat-Report.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;year&lt;/a&gt; with a variety of attacks on this list, which puts organizations at risk for a data breach through more devices than before.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://blog.lookout.com/lookout-trident-pegasus-enterprise-discovery&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;The Pegasus attack&lt;/a&gt; on Apple’s iOS software is a prime example. Pegasus infected iPhones through phishing text messages that asked recipients to click on a link inside the text message. Clicking the link triggered the installation of spyware capable of monitoring people through their camera and microphone. And once infected, users had their login credentials stolen from WhatsApp, Gmail, and other sensitive communication applications.&lt;/p&gt;&lt;h3 id=&#34;How-to-Protect-Against-Mobile-Device-Attacks&#34;&gt;How to Protect Against Mobile Device Attacks&lt;/h3&gt;&lt;p&gt;Protecting your organization against mobile security threats requires a strong enterprise mobility management (EMM) program, as well as mobile device management (MDM) tools that help you protect any company data that may be on your employees’ personal or work devices. Identity and access management tools like multi-factor authentication can also help secure any work applications that contain sensitive information from unauthorized access.&lt;/p&gt;&lt;h2 id=&#34;Create-Additional-Layers-of-Security-at-the-Login-Stage&#34;&gt;Create Additional Layers of Security at the Login Stage&lt;/h2&gt;&lt;p&gt;The impact of many cyberattacks on this list (as well as &lt;a href=&#34;https://www.google.com/url?q=https://auth0.com/resources/whitepapers/state-of-security-identity-report&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1624045583510000&amp;amp;usg=AOvVaw0jtWJoRiARLi1pwCySdu1J&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;others that many companies face&lt;/a&gt;) can be mitigated or prevented with strong authentication protocols.&lt;/p&gt;&lt;p&gt;First and foremost, this means good password policies and sound employee education. However, taking the next step to &lt;a href=&#34;https://www.google.com/url?q=https://auth0.com/login-security&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1624045583512000&amp;amp;usg=AOvVaw2FeIurZ9Qr026LNUW7RDFZ&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;secure login procedures&lt;/a&gt; with security functionality like multi-factor authentication, &lt;a href=&#34;https://auth0.com/docs/attack-protection/brute-force-protection&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;brute-force protection&lt;/a&gt;, or passwordless authentication can add a new dimension of safety to your system.&lt;/p&gt;&lt;p&gt;Auth0 makes it easy to build secure authentication for the right people without compromising on user experience — &lt;a href=&#34;https://auth0.com/resources/videos/platform-introduction-video-2020&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;learn more about Auth0’s platform here&lt;/a&gt;.&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/the-7-most-common-types-of-cybersecurity-attacks-in-2021/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn which cybersecurity tactics and tools will help you combat today&#39;s common cyberattacks.</summary>
  </entry>
  <entry>
    <title>Async Await in Swift</title>
    <updated>2021-08-12T15:07:00Z</updated>
    <id>tag:auth0.com,2021-08-12:/blog/async-await-in-swift/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;This year, WWDC came with a bunch of new features and updates. Maybe one of the most expected was the introduction of the new concurrency system by using async/await syntax. This is a huge improvement in the way that we write asynchronous code. &lt;/p&gt;&lt;h2 id=&#34;Before-Async-Await&#34;&gt;Before Async/Await&lt;/h2&gt;&lt;p&gt;Imagine that we are working on an app for a grocery store and, we want to display its list of products. We are probably going to have something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_&lt;/span&gt; completion&lt;span&gt;:&lt;/span&gt; @&lt;span&gt;escaping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Product&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;Void&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;var&lt;/span&gt; products &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;Product&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;fetchProducts &lt;span&gt;{&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;weak&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; products &lt;span&gt;in&lt;/span&gt;&#xA;    &lt;span&gt;guard&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; strongSelf &lt;span&gt;=&lt;/span&gt; &lt;span&gt;self&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;    strongSelf&lt;span&gt;.&lt;/span&gt;products&lt;span&gt;.&lt;/span&gt;&lt;span&gt;append&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;contentsOf&lt;span&gt;:&lt;/span&gt; products&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A pretty standard and well-known code using completion blocks. Now suppose that the grocery store has, once in a while, some kind of offers for some products (e.g., &amp;#34;Take 2, pay 1&amp;#34;). And, we want to hold a list with these offers. Let&amp;#39;s adjust our code by creating a new function to retrieve a String with the promotion text, given a specific product.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_&lt;/span&gt; completion&lt;span&gt;:&lt;/span&gt; @&lt;span&gt;escaping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Product&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;Void&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;getOffer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; product&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; @&lt;span&gt;escaping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;Void&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;typealias&lt;/span&gt; &lt;span&gt;ProductOffer&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;productId&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; offer&lt;span&gt;:&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;var&lt;/span&gt; products &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;Product&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;var&lt;/span&gt; offers &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;ProductOffer&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;fetchProducts &lt;span&gt;{&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;weak&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; products &lt;span&gt;in&lt;/span&gt;&#xA;    &lt;span&gt;guard&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; strongSelf &lt;span&gt;=&lt;/span&gt; &lt;span&gt;self&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;for&lt;/span&gt; product &lt;span&gt;in&lt;/span&gt; products &lt;span&gt;{&lt;/span&gt;&#xA;        strongSelf&lt;span&gt;.&lt;/span&gt;products&lt;span&gt;.&lt;/span&gt;&lt;span&gt;append&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;product&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;getOffer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; product&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;weak&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; offerText &lt;span&gt;in&lt;/span&gt;&#xA;            &lt;span&gt;guard&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; strongSelf &lt;span&gt;=&lt;/span&gt; &lt;span&gt;self&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;            &lt;span&gt;let&lt;/span&gt; productOffer &lt;span&gt;=&lt;/span&gt; &lt;span&gt;ProductOffer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;productId&lt;span&gt;:&lt;/span&gt; product&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;,&lt;/span&gt; offer&lt;span&gt;:&lt;/span&gt; offerText&lt;span&gt;)&lt;/span&gt;&#xA;            strongSelf&lt;span&gt;.&lt;/span&gt;offers&lt;span&gt;.&lt;/span&gt;&lt;span&gt;append&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;productOffer&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We only have two nested closures for a simple feature, and you can see that our code starts to get a little messed up.&lt;/p&gt;&lt;h2 id=&#34;Async-Await&#34;&gt;Async/Await&lt;/h2&gt;&lt;p&gt;From Swift 5.5 onwards, we can start using async/await functions to write asynchronous code without using completion handlers to returns values. Instead, we are allowed to return the values in the return object directly.&lt;/p&gt;&lt;p&gt;To mark a function as asynchronous, we only have to put the keyword &lt;strong&gt;async&lt;/strong&gt; before the return type.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; async &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;Product&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;getOffer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; product&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; async &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is much easier and simple to read, but the best part comes from the caller&amp;#39;s side. When we want to use the result of a function marked as &lt;strong&gt;async,&lt;/strong&gt; we need to make sure that its execution is already completed. To make this possible, we need to write the &lt;strong&gt;await&lt;/strong&gt; keyword in front of the function call. By doing this, the current execution will be paused until the result is available for its use.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; products &lt;span&gt;=&lt;/span&gt; await &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;for&lt;/span&gt; product &lt;span&gt;in&lt;/span&gt; products &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;let&lt;/span&gt; offerText &lt;span&gt;=&lt;/span&gt; await &lt;span&gt;getOffer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; product&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;offerText&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isEmpty&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;let&lt;/span&gt; productOffer &lt;span&gt;=&lt;/span&gt; &lt;span&gt;ProductOffer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;productId&lt;span&gt;:&lt;/span&gt; product&lt;span&gt;.&lt;/span&gt;id&lt;span&gt;,&lt;/span&gt; offer&lt;span&gt;:&lt;/span&gt; offerText&lt;span&gt;)&lt;/span&gt;&#xA;        offers&lt;span&gt;.&lt;/span&gt;&lt;span&gt;append&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;productOffer&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Although, if we want to execute other tasks while the async function is being executed, we should put the keyword &lt;strong&gt;async&lt;/strong&gt; in front of the variable (or let) declaration. In this case, the &lt;strong&gt;await&lt;/strong&gt; keyword will need to be placed in front of the variable (or let) where we are accessing the result of the async function.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;async &lt;span&gt;let&lt;/span&gt; products &lt;span&gt;=&lt;/span&gt; &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;// Do some work&lt;/span&gt;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;await products&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Parallel-Asynchronous-Functions&#34;&gt;Parallel Asynchronous Functions&lt;/h3&gt;&lt;p&gt;Now imagine that in our app, we want to fetch products by category—for example, just the frozen products. Let&amp;#39;s go ahead and make the adjustments to our code.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;enum&lt;/span&gt; &lt;span&gt;ProductCategory&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;case&lt;/span&gt; frozen&#xA;    &lt;span&gt;case&lt;/span&gt; meat&#xA;    &lt;span&gt;case&lt;/span&gt; vegetables&#xA;    &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;fromCategory category&lt;span&gt;:&lt;/span&gt; &lt;span&gt;ProductCategory&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; async &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;Product&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;let&lt;/span&gt; frozenProducts &lt;span&gt;=&lt;/span&gt; await &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;fromCategory&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;frozen&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;let&lt;/span&gt; meatProducts &lt;span&gt;=&lt;/span&gt; await &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;fromCategory&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;meat&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;let&lt;/span&gt; vegetablesProducts &lt;span&gt;=&lt;/span&gt; await &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;fromCategory&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;vegetals&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is ok, but the code will run in serial mode,  which means that we won&amp;#39;t start fetching the meat products until the frozen products are retrieved. Same for the vegetables. Remember, we write the &lt;strong&gt;await&lt;/strong&gt; keyword if we want to pause our execution until the function completes its work. However, in this particular scenario, we could start fetching the three categories at the same time, running in parallel.&lt;/p&gt;&lt;p&gt;In order to accomplish this, we need to write the &lt;strong&gt;async&lt;/strong&gt; keyword in front of the var (or let) declaration and use the &lt;strong&gt;await&lt;/strong&gt; keyword when we want to use it.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;async &lt;span&gt;let&lt;/span&gt; frozenProducts &lt;span&gt;=&lt;/span&gt; await &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;fromCategory&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;frozen&lt;span&gt;)&lt;/span&gt;&#xA;async &lt;span&gt;let&lt;/span&gt; meatProducts &lt;span&gt;=&lt;/span&gt; await &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;fromCategory&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;meat&lt;span&gt;)&lt;/span&gt;&#xA;async &lt;span&gt;let&lt;/span&gt; vegetablesProducts &lt;span&gt;=&lt;/span&gt; await &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;fromCategory&lt;span&gt;:&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;vegetables&lt;span&gt;)&lt;/span&gt; &#xA;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&#xA;&lt;span&gt;let&lt;/span&gt; products &lt;span&gt;=&lt;/span&gt; await &lt;span&gt;[&lt;/span&gt;frozenProducts&lt;span&gt;,&lt;/span&gt; meatProducts&lt;span&gt;,&lt;/span&gt; vegetablesProducts&lt;span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Error-handlers&#34;&gt;Error handlers&lt;/h3&gt;&lt;p&gt;Our fetching functions might have some errors that make it impossible to return the expected data values. How do we handle this in our async/await context?&lt;/p&gt;&lt;p&gt;We have a couple of options. The first one is to return the well-known Result object.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; async &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;Result&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Product&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;let&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; &lt;span&gt;try&lt;/span&gt; await &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;switch&lt;/span&gt; result &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;let&lt;/span&gt; products&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;// Handle success&lt;/span&gt;&#xA;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;.&lt;/span&gt;&lt;span&gt;failure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;let&lt;/span&gt; error&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;// Handle error&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another one is to use the try/catch approach.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; async &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;Product&lt;/span&gt;&lt;span&gt;[&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#xA;&lt;span&gt;do&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;let&lt;/span&gt; products &lt;span&gt;=&lt;/span&gt; &lt;span&gt;try&lt;/span&gt; await &lt;span&gt;fetchProducts&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;catch&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// Handle the error&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The main benefit that we had when using the Result type was to improve our completion handlers. In addition to that, we got a cleaner code at the moment we used the result, being able to switch between success and failure cases.&lt;/p&gt;&lt;p&gt;On the other hand, the use of throw errors adds extra readability in the function&amp;#39;s definition because we only need to put the result type that the function will return. The errors handling is hidden in the function&amp;#39;s implementation.&lt;/p&gt;&lt;h3 id=&#34;Asynchronous-Sequences&#34;&gt;Asynchronous Sequences&lt;/h3&gt;&lt;p&gt;Let&amp;#39;s say that we have a requirement to load a list of products from some .csv file. A traditional way to do this is to load all the lines at once and then start processing them. But, what happens if we want to start doing some work as soon as we have one of the lines available? We can now do this using an asynchronous sequence.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;URL&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;string&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;http://www.grocery.com/products.csv&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;try&lt;/span&gt; await &lt;span&gt;in&lt;/span&gt; url&lt;span&gt;.&lt;/span&gt;lines &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;// Do some work&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using this new feature also allows us to handle this particular case (reading a file) in a simpler way than before. You can check this &lt;a href=&#34;https://stackoverflow.com/questions/24581517/read-a-file-url-line-by-line-in-swift&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;stackoverflow discussion&lt;/a&gt; to see how we had to do this and see the advantages that this approach has over the previous one.&lt;/p&gt;&lt;h3 id=&#34;Async-Await-vs--Completion-Handlers&#34;&gt;Async/Await vs. Completion Handlers&lt;/h3&gt;&lt;p&gt;As we saw in the previous sections, the use of async/await syntax comes with a lot of improvements in contrast with using completion blocks. Let&amp;#39;s make a quick recap.&lt;/p&gt;&lt;h4 id=&#34;Advantages&#34;&gt;Advantages&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Avoid the Pyramid of Doom problem with nested closures&lt;/li&gt;&lt;li&gt;Reduction of code&lt;/li&gt;&lt;li&gt;Easier to read&lt;/li&gt;&lt;li&gt;Safety. With async/await, a result is guaranteed, while completion blocks might or might not be called.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;Disadvantages&#34;&gt;Disadvantages&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;It&amp;#39;s only available from Swift 5.5 and iOS 15 onwards.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Actors&#34;&gt;Actors&lt;/h2&gt;&lt;p&gt;Take a look at the following example, just a simple Order class in which we will be adding products and eventually make the checkout.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Order&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;var&lt;/span&gt; products &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;Product&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;var&lt;/span&gt; finalPrice &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;func&lt;/span&gt; &lt;span&gt;addProduct&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_&lt;/span&gt; product&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Product&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        products&lt;span&gt;.&lt;/span&gt;&lt;span&gt;append&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;product&lt;span&gt;)&lt;/span&gt;&#xA;        finalPrice &lt;span&gt;+&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; product&lt;span&gt;.&lt;/span&gt;price&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we are in a single-thread application, this code is just fine. But what happens if we have multiple threads that can access our order&amp;#39;s final price? &lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;We are on the product list and add some specific products to our order. The app will call the &lt;strong&gt;addProduct&lt;/strong&gt; function.&lt;/li&gt;&lt;li&gt;The product is added to our order&amp;#39;s product list&lt;/li&gt;&lt;li&gt;Before the final price gets updated, the user tries to checkout.&lt;/li&gt;&lt;li&gt;The app will read the final price of our order&lt;/li&gt;&lt;li&gt;The &lt;strong&gt;addProduct&lt;/strong&gt; function completes and updates the final price. But the user already checkout and paid less than they should.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;This problem is known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Race_condition&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;Data Races&lt;/strong&gt;&lt;/a&gt; when some particular resource could be accessed from multiple parts of the app&amp;#39;s code.&lt;/p&gt;&lt;p&gt;Actors, also introduced in Swift 5.5 and iOS 15, resolve this problem for us. An Actor is basically like a class but with a few key differences that make them &lt;em&gt;thread-safe&lt;/em&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Only allow accessing their state by one task at a time&lt;/li&gt;&lt;li&gt;Stored properties and functions can only be access from outside the Actor if the operation is performed asynchronously.&lt;/li&gt;&lt;li&gt;Stored properties can&amp;#39;t be written from outside the Actor.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;On the downside:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actors do not support inheritance&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can think about the Actors like a similar solution of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Semaphore_(programming&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;semaphores&lt;/a&gt;) concept.&lt;/p&gt;&lt;p&gt;To create one, we just need to use the &lt;strong&gt;actor&lt;/strong&gt; keyword.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;actor &lt;span&gt;Order&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;var&lt;/span&gt; products &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;Product&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;var&lt;/span&gt; finalPrice &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;func&lt;/span&gt; &lt;span&gt;addProduct&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_&lt;/span&gt; product&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Product&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        products&lt;span&gt;.&lt;/span&gt;&lt;span&gt;append&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;product&lt;span&gt;)&lt;/span&gt;&#xA;        finalPrice &lt;span&gt;+&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; product&lt;span&gt;.&lt;/span&gt;price&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And we can create an instance using the same initializer syntax as structures and classes. If we want to access the final price, we must do it using the keyword await (because outside the actor&amp;#39;s scope, we are only allowed to access the properties asynchronously).&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;await order&lt;span&gt;.&lt;/span&gt;finalPrice&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Definitely &lt;strong&gt;async/await&lt;/strong&gt; brings to the table an easier way to write asynchronous code, removing the need to use completion blocks. In addition, we get more readable and flexible code if our application starts scaling up. &lt;/p&gt;&lt;p&gt;However, the minimum iOS deployment target will be an entry barrier for most of us unless you start a project from scratch, in which case is highly recommended to wait until the official release of iOS 15 + Xcode 13 + Swift 5.5  to take full advantage of the new concurrency system.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/async-await-in-swift/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">A guide to fully understand the new concurrency system in Swift.</summary>
  </entry>
  <entry>
    <title>Build and Secure an API with Spring Boot and Kotlin</title>
    <updated>2021-08-11T22:32:00Z</updated>
    <id>tag:auth0.com,2021-08-11:/blog/build-and-secure-an-api-with-spring-boot/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; In this article, you’ll learn how to quickly build a RESTful API using the Spring Boot framework and the Kotlin programming language. You’ll then use Auth0 to secure the API so that only authorized parties can use its key functions. You can find the final code for the project developed throughout this article in &lt;a href=&#34;https://github.com/AccordionGuy/HotSauces&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Look for the 🌶 emoji if you’d like to skim through the content while focusing on the build and execution steps.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Spring-Framework--Spring-Boot--and-Kotlin--An-Overview&#34;&gt;Spring Framework, Spring Boot, and Kotlin: An Overview&lt;/h2&gt;&lt;p&gt;Before we start building the project, let’s look at the frameworks and language you’ll use.&lt;/p&gt;&lt;h3 id=&#34;Spring-Framework&#34;&gt;Spring Framework&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6WdgKiAbhNyVIQWDECzf48/fc4dd3f38700ba0f9a143bdaee8c9479/spring_icon.png&#34; alt=&#34;Spring Framework icon&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://spring.io/projects/spring-framework&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring Framework&lt;/a&gt;, often shortened to just “Spring”, is a popular open source application framework for the Java platform. It’s built on the principle of &lt;a href=&#34;https://dzone.com/articles/understanding-inversion-of-control-and-dependency&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;inversion of control&lt;/a&gt;, whose name implies that control of a Spring application is the opposite of how program control works in traditional applications. Instead of your code directing the application and calling on functionality from a library, the framework directs the application and calls on functionality from your code.&lt;/p&gt;&lt;p&gt;This approach makes it possible to write an application as a collection of components, with the connections between them maintained by Spring. Spring provides a lot of ready-built components called &lt;em&gt;dependencies&lt;/em&gt; that provide functionality that applications commonly require. The end result is a system for building applications that are modular, flexible, quicker to write, and easy to maintain.&lt;/p&gt;&lt;p&gt;Spring is often described — especially by Java developers, who’ve grown used to working with unwieldy frameworks — as lightweight. It provides a set of built-in often-needed capabilities such as MVC, caching, messaging, security, and data access. It significantly reduces the amount of code you have to write and lets you focus on the functionality specific to your application.&lt;/p&gt;&lt;p&gt;While Spring is often used for web and server-based applications, it’s a general application framework and it can be used to write desktop and mobile applications as well.&lt;/p&gt;&lt;h3 id=&#34;Spring-Boot&#34;&gt;Spring Boot&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/17rXel2g1r2rxiGkpeHNSy/dd64d06b65c7e095b6bcdeffecbd0a9f/spring_boot_icon.png&#34; alt=&#34;Spring Boot icon&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://spring.io/projects/spring-boot&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring Boot&lt;/a&gt; is a framework built on top of Spring that simplifies Spring development. It does this by enforcing an &lt;a href=&#34;https://www.quora.com/What-is-a-Opinionated-Framework&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;opinionated&lt;/a&gt; approach to Spring application development through &lt;a href=&#34;https://facilethings.com/blog/en/convention-over-configuration&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;“convention over configuration”&lt;/a&gt;, the use of default setups that applications are likely to use, and a standardized application structure created by a generator that goes by the decidedly “Web 2.0” name of &lt;a href=&#34;https://www.tiobe.com/tiobe-index/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring Initializr&lt;/a&gt;. Thanks to this “it just works” approach, it’s the fastest way to develop applications with the Spring framework.&lt;/p&gt;&lt;h3 id=&#34;Kotlin&#34;&gt;Kotlin&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1lE1Sn0pHAIa082QVEhJ0f/b4c6184a9387900f457d260d6e0aeb38/kotlin_icon.png&#34; alt=&#34;Kotlin icon&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Kotlin&lt;/a&gt; is part of the wave of programming languages that appeared in the 2010s, which includes &lt;a href=&#34;https://dart.dev/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Dart&lt;/a&gt;, &lt;a href=&#34;https://golang.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Go&lt;/a&gt;, &lt;a href=&#34;https://www.rust-lang.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Rust&lt;/a&gt;, and &lt;a href=&#34;https://developer.apple.com/swift/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Swift&lt;/a&gt;. These languages have a number of common traits including their own takes on object-oriented programming from the lessons of the 1990s and functional programming from the lessons of the 2000s, inferred strong static typing, and meteoric rises in popularity (all of them are in &lt;a href=&#34;https://www.tiobe.com/tiobe-index/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;TIOBE’s index of popular programming languages&lt;/a&gt;, and all of them except Kotlin are in the top 20).&lt;/p&gt;&lt;p&gt;As a programming language designed by &lt;a href=&#34;https://developer.apple.com/swift/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;a company that makes developer tools&lt;/a&gt;, Kotlin is unique in its origin. It was designed to be an &lt;a href=&#34;https://kotlinlang.org/docs/reference/comparison-to-java.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;improvement on Java&lt;/a&gt;, with many of the language features of &lt;a href=&#34;https://www.scala-lang.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Scala&lt;/a&gt; (but faster compile times) and with the power and convenience that comes from interoperability with Java and the Java platform. It has grown to become the preferred language for Android app development; as of July 2021, &lt;a href=&#34;https://developer.android.com/kotlin/stories?linkId=94116374&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;80% of the top 1,000 apps in Google Play were written in Kotlin.&lt;/a&gt; According to JetBrains’ &lt;a href=&#34;https://www.jetbrains.com/lp/devecosystem-2020/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;State of Developer Ecosystem 2020&lt;/em&gt; report,&lt;/a&gt; Kotlin is also making serious inroads into web and enterprise development territory.&lt;/p&gt;&lt;p&gt;Since Spring and Spring Boot are based on the Java platform, you can use them to build applications using any JVM-based programming language, including Kotlin. If Java’s verbosity is bringing you down, or if you’re an Android developer who wants to write the back end for your app but don’t want to switch languages, Spring and Spring Boot development in Kotlin is for you!&lt;/p&gt;&lt;h2 id=&#34;What-You-ll-Build--A-Hot-Sauce-API&#34;&gt;What You’ll Build: A Hot Sauce API&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5VZbuSuMi49Zp9x0bmAK7b/fdd5ca6bac1efdd66ce9e5984e62b0ae/a-hot-sauce-api.jpg&#34; alt=&#34;A Hot Sauce API (A tray of hot sauce bottles, viewed from above))&#34;/&gt;&lt;/p&gt;&lt;p&gt;You’ll build an API that acts as a catalog of &lt;a href=&#34;https://en.wikipedia.org/wiki/Hot_sauce&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;hot sauces&lt;/a&gt;. It will be a simple one, exposing a single resource named &lt;strong&gt;hotsauces&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;The API will provide endpoints for:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Confirming that it is operational&lt;/li&gt;&lt;li&gt;Getting a list of all the hot sauces in the catalog&lt;/li&gt;&lt;li&gt;Getting the number of hot sauces in the catalog&lt;/li&gt;&lt;li&gt;Adding a hot sauce to the catalog&lt;/li&gt;&lt;li&gt;Editing any hot sauce in the catalog&lt;/li&gt;&lt;li&gt;Deleting a hot sauce from the catalog&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In the first part of the project, you’ll build the API. Once built, you’ll secure it so that the endpoints for CRUD operations will require authentication. The endpoint for testing to see if the API is operational will remain public.&lt;/p&gt;&lt;h2 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;To follow along with this article, you’ll need the following installed on your local machine:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.oracle.com/java/technologies/javase-jdk11-downloads.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;JDK 11&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;You’ll need some command-line tool for issuing HTTP requests. The examples in this article will use the following:&#xA;&lt;ul&gt;&lt;li&gt;For macOS and Linux, the &lt;a href=&#34;https://curl.haxx.se/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;curl&lt;/a&gt; command line tool&lt;/li&gt;&lt;li&gt;For Windows, &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;PowerShell&lt;/a&gt; and its &lt;code&gt;Invoke&lt;span&gt;-&lt;/span&gt;RestMethod&lt;/code&gt; and &lt;code&gt;Invoke&lt;span&gt;-&lt;/span&gt;WebRequest&lt;/code&gt; &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/cmdlet-overview?view=powershell-7.1&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;cmdlets&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Your favorite code editor&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You’ll also need internet access, as you’ll be using the Spring Initializr web page and the &lt;a href=&#34;https://gradle.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Gradle&lt;/a&gt; build tool, which goes online to download project dependencies.&lt;/p&gt;&lt;h2 id=&#34;Building-the-API&#34;&gt;Building the API&lt;/h2&gt;&lt;h3 id=&#34;Scaffolding-with-Spring-Initializr&#34;&gt;Scaffolding with Spring Initializr&lt;/h3&gt;&lt;p&gt;The preferred way to set up a new Spring Boot project is to use &lt;strong&gt;&lt;a href=&#34;https://start.spring.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring Initializr&lt;/a&gt;&lt;/strong&gt;, a web application that generates a basic Spring Boot project, complete with all the necessary configurations, your choice of dependencies, and Gradle or Maven build files. It’s available online at &lt;a href=&#34;https://start.spring.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;start.spring.io&lt;/a&gt; and built into the Ultimate Edition of &lt;a href=&#34;https://www.jetbrains.com/idea/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;IntelliJ IDEA&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;You &lt;em&gt;could&lt;/em&gt; create a new project manually using Spring Boot’s command-line interface, but Spring Initializr organizes its projects using a standardized directory layout for JVM-based projects. This makes your projects easier to maintain, and lets you focus on what your application actually &lt;em&gt;does&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;🌶 Point your favorite browser at the &lt;a href=&#34;https://start.spring.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring Initializr page&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2Tay8vTcNWBA7HRyPUakuI/b2dbcee51217aff5aa7526ddc2d3724e/spring_initializr_blank.png&#34; alt=&#34;The Spring Initializr webpage&#34;/&gt;&lt;/p&gt;&lt;p&gt;Here’s how you should fill it out:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;em&gt;Project:&lt;/em&gt; Select &lt;strong&gt;Gradle Project&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Language:&lt;/em&gt; Select &lt;strong&gt;Kotlin&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Spring Boot:&lt;/em&gt; Select the latest stable version. At the time of writing, it’s version &lt;strong&gt;2.5.3&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Project Metadata:&lt;/em&gt;&#xA;&lt;ul&gt;&lt;li&gt;&lt;em&gt;Group:&lt;/em&gt; This should be something that uniquely identifies yourself or your organization. Typically, you’d enter your domain name in reverse notation (for example, if your domain is &lt;strong&gt;abc123.com&lt;/strong&gt;, enter &lt;strong&gt;com.abc123&lt;/strong&gt;. If you don’t have a domain name, just enter &lt;strong&gt;com.auth0&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Artifact:&lt;/em&gt; This should be something that identifies the project. Enter &lt;strong&gt;hotsauces&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Name:&lt;/em&gt; This will autofill based on what you entered for &lt;em&gt;Artifact&lt;/em&gt;; just use the value in this field.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Description:&lt;/em&gt; Enter &lt;strong&gt;A Spring Boot/Auth0 API project&lt;/strong&gt; into this field.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Package name:&lt;/em&gt; This will autofill based on what you entered for &lt;em&gt;Group&lt;/em&gt; and &lt;em&gt;Artifact&lt;/em&gt;; just use the value in this field.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Packaging:&lt;/em&gt; Select &lt;strong&gt;Jar&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Java:&lt;/em&gt; Select &lt;strong&gt;11&lt;/strong&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Dependencies:&lt;/em&gt; Click the &lt;strong&gt;ADD DEPENDENCIES...&lt;/strong&gt; button and choose the following:&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Spring Boot DevTools&lt;/strong&gt;: A set of convenient tools for development.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Spring Web&lt;/strong&gt;: Provides a web server and facilities for building RESTful web applications and APIs.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Spring Data JPA&lt;/strong&gt;: Makes the process of building a data access layer almost trivial.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;H2 Database&lt;/strong&gt;: This project will use the &lt;a href=&#34;https://www.h2database.com/html/main.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;H2&lt;/a&gt; in-memory database.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Spring Boot Actuator&lt;/strong&gt;: Adds a handy collection of diagnostic tools to a Spring Boot project.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Once filled out, the form should look like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6kuJ07yRPE8vXdHRerx2ve/76fcdd422c6a1a9bdd8350277b53e40c/spring_initializr_filled.png&#34; alt=&#34;The Spring Initializr webpage, filled out with this project&amp;#39;s details&#34;/&gt;&lt;/p&gt;&lt;p&gt;🌶 With the form filled out, click the &lt;strong&gt;GENERATE&lt;/strong&gt; button. The site will generate a .zip file, and it will automatically be downloaded to your local machine. Unzip the file to reveal the &lt;strong&gt;hotsauces&lt;/strong&gt; project folder.&lt;/p&gt;&lt;p&gt;Within the &lt;strong&gt;hotsauces&lt;/strong&gt; folder, you’ll work in two specific areas for this exercise:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;/src/main/kotlin/com/auth0/hotsauces/&lt;/strong&gt;: The code for the project goes into this directory. At the moment, it contains a single file, &lt;strong&gt;HotSaucesApplication.kt&lt;/strong&gt;. This contains a simple application class, which is the first code in the project that is executed when the application is run.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;/build.gradle.kts&lt;/strong&gt;: This is the project’s Gradle build file. Among other things, it specifies which dependencies will be used by the project. You’ll add some security-related dependencies to this file when securing the API.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Defining--HotSauces---the-Class-Behind-the-API-s-Resource&#34;&gt;Defining &lt;code&gt;HotSauces&lt;/code&gt;, the Class Behind the API’s Resource&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2qejaKSqZDNvVhRZwUAHTH/ec35c47e1bdb1a910909e9ff097a91c8/wide-hot-sauces-tray.png&#34; alt=&#34;A tray of different bottles of hot sauce&#34;/&gt;&lt;/p&gt;&lt;p&gt;The first piece of code you’ll write is the model behind the API’s only resource: hot sauces.&lt;/p&gt;&lt;p&gt;Each hot sauce has the following attributes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; — (number) The unique identifier for the hot sauce, and primary key.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;brandName&lt;/code&gt;&lt;/strong&gt; — (string) The name of the producer of the hot sauce.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;sauceName&lt;/code&gt;&lt;/strong&gt; — (string) The name of the hot sauce.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;description&lt;/code&gt;&lt;/strong&gt; — (string) A description of the hot sauce, with the appropriate keywords. This may be lengthy.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;url&lt;/code&gt;&lt;/strong&gt; — (number) The URL for the web page for the hot sauce.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;heat&lt;/code&gt;&lt;/strong&gt; — (number) The spiciness of the hot sauce, expressed in &lt;a href=&#34;https://pepperheadsforlife.com/the-scoville-scale/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Scoville heat units (SHUs).&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🌶 Create a new file named &lt;strong&gt;HotSauce.kt&lt;/strong&gt; in the &lt;strong&gt;/src/main/kotlin/com/auth0/hotsauces/&lt;/strong&gt; directory:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /src/main/kotlin/com/auth0/hotsauces/HotSauce.kt&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;hotsauces&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; javax&lt;span&gt;.&lt;/span&gt;persistence&lt;span&gt;.&lt;/span&gt;Entity&#xA;&lt;span&gt;import&lt;/span&gt; javax&lt;span&gt;.&lt;/span&gt;persistence&lt;span&gt;.&lt;/span&gt;GeneratedValue&#xA;&lt;span&gt;import&lt;/span&gt; javax&lt;span&gt;.&lt;/span&gt;persistence&lt;span&gt;.&lt;/span&gt;GenerationType&#xA;&lt;span&gt;import&lt;/span&gt; javax&lt;span&gt;.&lt;/span&gt;persistence&lt;span&gt;.&lt;/span&gt;Id&#xA;&lt;span&gt;import&lt;/span&gt; javax&lt;span&gt;.&lt;/span&gt;persistence&lt;span&gt;.&lt;/span&gt;Lob&#xA;&#xA;&lt;span&gt;@Entity&lt;/span&gt;&#xA;&lt;span&gt;data&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;HotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// This property maps to the primary key in the database.&lt;/span&gt;&#xA;    &lt;span&gt;@Id&lt;/span&gt; &lt;span&gt;@GeneratedValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;strategy &lt;span&gt;=&lt;/span&gt; GenerationType&lt;span&gt;.&lt;/span&gt;AUTO&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; Long &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// These properties are NOT likely to be longer than 256 characters.&lt;/span&gt;&#xA;    &lt;span&gt;var&lt;/span&gt; brandName&lt;span&gt;:&lt;/span&gt; String &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;var&lt;/span&gt; sauceName&lt;span&gt;:&lt;/span&gt; String &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// These properties might be longer than 256 characters.&lt;/span&gt;&#xA;    &lt;span&gt;@Lob&lt;/span&gt;&#xA;    &lt;span&gt;var&lt;/span&gt; description&lt;span&gt;:&lt;/span&gt; String &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;    &lt;span&gt;@Lob&lt;/span&gt;&#xA;    &lt;span&gt;var&lt;/span&gt; url&lt;span&gt;:&lt;/span&gt; String &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;var&lt;/span&gt; heat&lt;span&gt;:&lt;/span&gt; Int &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&#xA;&#xA;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;HotSauce&lt;/code&gt; is a Kotlin &lt;strong&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;data class&lt;/a&gt;&lt;/strong&gt;, whose job is to hold data. Data classes are all properties and no methods — or at least no &lt;em&gt;explicitly&lt;/em&gt; defined methods, anyway. The compiler automatically provides a handful of “behind the scenes” methods to data classes, including &lt;code&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Kotlin classes, data classes included, have a constructor built into the class header. This constructor, called the &lt;strong&gt;primary constructor&lt;/strong&gt;, takes its parameters in the parentheses that follow the class name. &lt;code&gt;HotSauce&lt;/code&gt;, like many data classes, is just a class header and primary constructor, and nothing else.&lt;/p&gt;&lt;p&gt;Even though there isn’t much to the class, it uses some annotations to pull in a lot of extra functionality:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;HotSauce&lt;/code&gt; is annotated with &lt;code&gt;@Entity&lt;/code&gt;, which informs the Java Persistence API (JPA, one of the dependencies that you added in Spring Initializr) that its instances will be persisted in the database.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;id&lt;/code&gt; property is annotated with both &lt;code&gt;@Id&lt;/code&gt; and &lt;code&gt;@GeneratedValue&lt;/code&gt;, which makes sense, as it will map to the &lt;code&gt;id&lt;/code&gt; field in the corresponding database table.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;@Lob&lt;/code&gt; annotation is short for “large object”. It’s being used to annotate the &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; properties because they could contain strings longer than 256 characters. By default, JPA maps &lt;code&gt;String&lt;/code&gt;s in entities to the &lt;code&gt;&lt;span&gt;VARCHAR&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; type in the database; marking a &lt;code&gt;String&lt;/code&gt; as &lt;code&gt;@Lob&lt;/code&gt; tells JPA to map it to the &lt;code&gt;&lt;span&gt;TEXT&lt;/span&gt;&lt;/code&gt; type instead.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you’re new to Kotlin, make note of the keywords in the class’ property declarations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;val&lt;/code&gt; is short for “value” and declares a constant. A hot sauce’s &lt;code&gt;id&lt;/code&gt; value shouldn’t be changed after it’s been created, so we’re declaring it with &lt;code&gt;val&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt;&lt;/code&gt; is short for “variable” and that’s what it declares. All the other class properties should be editable, so we’re declaring them with &lt;code&gt;&lt;span&gt;var&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You might be wondering about assigning the value &lt;code&gt;&lt;span&gt;0&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;id&lt;/code&gt;, which is a constant:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;@Id @&lt;span&gt;GeneratedValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;strategy &lt;span&gt;=&lt;/span&gt; GenerationType&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AUTO&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;val id&lt;span&gt;:&lt;/span&gt; Long &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The line &lt;code&gt;val id&lt;span&gt;:&lt;/span&gt; Long &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/code&gt; might make you think that every hot sauce will have an unchangeable &lt;code&gt;id&lt;/code&gt; set to &lt;code&gt;&lt;span&gt;0&lt;/span&gt;&lt;/code&gt;. As a constant, the value of &lt;code&gt;id&lt;/code&gt; can’t be changed by any code that &lt;em&gt;you&lt;/em&gt; write, but the &lt;code&gt;@GeneratedValue&lt;/code&gt; annotation allows Spring to use &lt;a href=&#34;https://kotlinlang.org/docs/reflection.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;reflection&lt;/a&gt; to get around that limitation and assign a unique &lt;code&gt;id&lt;/code&gt; value for every sauce. Every modern application framework incorporates “magic” like this; I’ve found that it’s simplest just to know where such instances are and to accept them.&lt;/p&gt;&lt;p&gt;With &lt;code&gt;HotSauce&lt;/code&gt; defined, you have a &lt;strong&gt;model&lt;/strong&gt; that represents hot sauces in the real world. By annotating it with &lt;code&gt;@Entity&lt;/code&gt;, you’ve specified that instances of &lt;code&gt;HotSauce&lt;/code&gt; should be converted into &lt;strong&gt;entities&lt;/strong&gt; — that is, instances that have been saved to a database.&lt;/p&gt;&lt;p&gt;It’s time to set up something to save &lt;code&gt;HotSauce&lt;/code&gt; instances.&lt;/p&gt;&lt;h3 id=&#34;Adding-Data-Access-with-a--CrudRepository-&#34;&gt;Adding Data Access with a &lt;code&gt;CrudRepository&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The &lt;a href=&#34;https://deviq.com/repository-pattern/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Repository pattern&lt;/a&gt; provides a layer of abstraction between an application’s models and the system used to store data. A repository provides a collection-style interface to the models, with methods for retrieving the whole collection, retrieving a specific item, and adding, editing, and deleting items. The repository insulates the models from the usual database concerns, such as connecting with it, setting up a reader, or worrying about things like cursors.&lt;/p&gt;&lt;p&gt;Spring provides a number of repository interfaces. In this project, you’ll use the &lt;a href=&#34;https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;CrudRepository&lt;/code&gt;&lt;/a&gt; interface to act as the intermediary between &lt;code&gt;HotSauce&lt;/code&gt; and the H2 database (another one of the dependencies you added in Spring Initializr) as shown below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2CCk6CDxAKOrF7RJ6F05nw/8a14bb24936eaa0efc2364a31cb551bc/repository-pattern.png&#34; alt=&#34;Repository Pattern&#34;/&gt;&lt;/p&gt;&lt;p&gt;In this exercise, the underlying data store is the H2 in-memory database. The Repository pattern makes it so that changing the database doesn’t require you to make any changes to &lt;code&gt;HotSauce&lt;/code&gt;, and Spring’s inversion of control architecture makes it so that such a change doesn’t even require a change to the &lt;code&gt;CrudRepository&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;🌶 Create a new file named &lt;strong&gt;HotSauceRepository.kt&lt;/strong&gt; in the &lt;strong&gt;/src/main/kotlin/com/auth0/hotsauces/&lt;/strong&gt; directory:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /src/main/kotlin/com/auth0/hotsauces/HotSauceRepository.kt&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;hotsauces&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;data&lt;span&gt;.&lt;/span&gt;repository&lt;span&gt;.&lt;/span&gt;CrudRepository&#xA;&#xA;&lt;span&gt;interface&lt;/span&gt; HotSauceRepository&lt;span&gt;:&lt;/span&gt; CrudRepository&lt;span&gt;&amp;lt;&lt;/span&gt;HotSauce&lt;span&gt;,&lt;/span&gt; Long&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This code sets up an interface named &lt;code&gt;HotSauceRepository&lt;/code&gt; that’s based on a &lt;code&gt;CrudRepository&lt;/code&gt; of entities based on the &lt;code&gt;HotSauce&lt;/code&gt; model, each of which is uniquely identified by a &lt;code&gt;Long&lt;/code&gt; (namely, the &lt;code&gt;id&lt;/code&gt; property of &lt;code&gt;HotSauce&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;&lt;code&gt;CrudRepository&lt;/code&gt; provides a set of methods for performing the standard set of CRUD operations. Here’s the subset that you’ll use in this project:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; — Returns the number of entities.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;deleteById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; — Deletes the entity with the given id.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;existsById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; — Returns &lt;code&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt; if the entity with the given id exists.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;findAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; — Retrieves all the entities.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;findById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; — Retrieves the entity with the given id.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;save&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; — Saves the given entity.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You’ll use these methods in the controller, which you’ll build next.&lt;/p&gt;&lt;p&gt;Note that you didn’t have to do anything to connect the repository to the database. Spring Boot’s inversion of control took care of that for you.&lt;/p&gt;&lt;h3 id=&#34;Building-the-controller&#34;&gt;Building the controller&lt;/h3&gt;&lt;p&gt;The controller should expose the following API endpoints:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;GET&lt;/span&gt; api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;/code&gt;&lt;/strong&gt;: Returns the entire collection of hot sauces. Accepts these optional named parameters:&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;brandname&lt;/code&gt;&lt;/strong&gt;: Limits the results to only those sauces whose &lt;code&gt;brandName&lt;/code&gt; contains the given string.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;saucename&lt;/code&gt;&lt;/strong&gt; Limits the results to only those sauces whose &lt;code&gt;sauceName&lt;/code&gt; contains the given string.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;desc&lt;/code&gt;&lt;/strong&gt; Limits the results to only those sauces whose &lt;code&gt;description&lt;/code&gt; contains the given string.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;minheat&lt;/code&gt;&lt;/strong&gt; Limits the results to only those sauces whose &lt;code&gt;heat&lt;/code&gt; rating is greater than or equal to the given number.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;maxheat&lt;/code&gt;&lt;/strong&gt; Limits the results to only those sauces whose &lt;code&gt;heat&lt;/code&gt; rating is less than or equal to the given number.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;GET&lt;/span&gt; api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;: Returns the hot sauce with the given id.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;GET&lt;/span&gt; api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;span&gt;/&lt;/span&gt;count&lt;/code&gt;&lt;/strong&gt;: Returns the number of hot sauces.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;POST&lt;/span&gt; api&lt;span&gt;/&lt;/span&gt;hotsauce&lt;/code&gt;&lt;/strong&gt;: Adds a hot sauce whose details are included in the request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;PUT&lt;/span&gt; api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;: Updates the hot sauce with the given id using the details included in the request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;DELETE&lt;/span&gt; api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;: Deletes the hot sauce with the given id.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🌶 Create a new file named &lt;strong&gt;HotSauceController.kt&lt;/strong&gt; in the &lt;strong&gt;/src/main/kotlin/com/auth0/hotsauces/&lt;/strong&gt; directory:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /src/main/kotlin/com/auth0/hotsauces/HotSauceController.kt&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;hotsauces&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;HttpStatus&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;ResponseEntity&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;bind&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; java&lt;span&gt;.&lt;/span&gt;util&lt;span&gt;.&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@RestController&lt;/span&gt;&#xA;&lt;span&gt;@RequestMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/hotsauces&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HotSauceController&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; hotSauceRepository&lt;span&gt;:&lt;/span&gt; HotSauceRepository&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// GET api/hotsauces&lt;/span&gt;&#xA;    &lt;span&gt;@GetMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;getAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;@RequestParam&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;value&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;brandname&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; required &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; defaultValue &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; brandNameFilter&lt;span&gt;:&lt;/span&gt; String&lt;span&gt;,&lt;/span&gt;&#xA;               &lt;span&gt;@RequestParam&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;value&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;saucename&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; required &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; defaultValue &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; sauceNameFilter&lt;span&gt;:&lt;/span&gt; String&lt;span&gt;,&lt;/span&gt;&#xA;               &lt;span&gt;@RequestParam&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;value&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;desc&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; required &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; defaultValue &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; descFilter&lt;span&gt;:&lt;/span&gt; String&lt;span&gt;,&lt;/span&gt;&#xA;               &lt;span&gt;@RequestParam&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;value&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;minheat&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; required &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; defaultValue &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; minHeat&lt;span&gt;:&lt;/span&gt; String&lt;span&gt;,&lt;/span&gt;&#xA;               &lt;span&gt;@RequestParam&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;value&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#34;maxheat&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; required &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; defaultValue &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; maxHeat&lt;span&gt;:&lt;/span&gt; String&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ResponseEntity&lt;span&gt;&amp;lt;&lt;/span&gt;List&lt;span&gt;&amp;lt;&lt;/span&gt;HotSauce&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;val&lt;/span&gt; MAX_SCOVILLE &lt;span&gt;=&lt;/span&gt; &lt;span&gt;3_000_000&lt;/span&gt; &lt;span&gt;// At this point, it&amp;#39;s no longer food, but a weapon&lt;/span&gt;&#xA;        &lt;span&gt;val&lt;/span&gt; minHeatFilter &lt;span&gt;=&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;minHeat&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isNullOrBlank&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; minHeat&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toInt&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&#xA;        &lt;span&gt;val&lt;/span&gt; maxHeatFilter &lt;span&gt;=&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;maxHeat&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isNullOrBlank&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; maxHeat&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toInt&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; MAX_SCOVILLE&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;hotSauceRepository&lt;span&gt;.&lt;/span&gt;&lt;span&gt;findAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; it&lt;span&gt;.&lt;/span&gt;brandName&lt;span&gt;.&lt;/span&gt;&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;brandNameFilter&lt;span&gt;,&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; it&lt;span&gt;.&lt;/span&gt;sauceName&lt;span&gt;.&lt;/span&gt;&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;sauceNameFilter&lt;span&gt;,&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; it&lt;span&gt;.&lt;/span&gt;description&lt;span&gt;.&lt;/span&gt;&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;descFilter&lt;span&gt;,&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; it&lt;span&gt;.&lt;/span&gt;heat &lt;span&gt;&amp;gt;=&lt;/span&gt; minHeatFilter &lt;span&gt;}&lt;/span&gt;&#xA;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; it&lt;span&gt;.&lt;/span&gt;heat &lt;span&gt;&amp;lt;=&lt;/span&gt; maxHeatFilter &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            HttpStatus&lt;span&gt;.&lt;/span&gt;OK&#xA;        &lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// GET api/hotsauces/{id}&lt;/span&gt;&#xA;    &lt;span&gt;@GetMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/count&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;getCount&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ResponseEntity&lt;span&gt;&amp;lt;&lt;/span&gt;Long&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;hotSauceRepository&lt;span&gt;.&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            HttpStatus&lt;span&gt;.&lt;/span&gt;OK&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// GET api/hotsauces/count&lt;/span&gt;&#xA;    &lt;span&gt;@GetMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/{id}&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;getHotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;@PathVariable&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; Long&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ResponseEntity&lt;span&gt;&amp;lt;&lt;/span&gt;Optional&lt;span&gt;&amp;lt;&lt;/span&gt;HotSauce&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;hotSauceRepository&lt;span&gt;.&lt;/span&gt;&lt;span&gt;existsById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;hotSauceRepository&lt;span&gt;.&lt;/span&gt;&lt;span&gt;findById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; HttpStatus&lt;span&gt;.&lt;/span&gt;OK&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;HttpStatus&lt;span&gt;.&lt;/span&gt;NOT_FOUND&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// POST api/hotsauce&lt;/span&gt;&#xA;    &lt;span&gt;@PostMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;createHotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;@RequestBody&lt;/span&gt; hotSauce&lt;span&gt;:&lt;/span&gt; HotSauce&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ResponseEntity&lt;span&gt;&amp;lt;&lt;/span&gt;HotSauce&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;hotSauceRepository&lt;span&gt;.&lt;/span&gt;&lt;span&gt;save&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;hotSauce&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; HttpStatus&lt;span&gt;.&lt;/span&gt;CREATED&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// PUT api/hotsauces/{id}&lt;/span&gt;&#xA;    &lt;span&gt;@PutMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/{id}&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;updateHotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;@PathVariable&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; Long&lt;span&gt;,&lt;/span&gt; &lt;span&gt;@RequestBody&lt;/span&gt; sauceChanges&lt;span&gt;:&lt;/span&gt; HotSauce&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ResponseEntity&lt;span&gt;&amp;lt;&lt;/span&gt;HotSauce&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;hotSauceRepository&lt;span&gt;.&lt;/span&gt;&lt;span&gt;existsById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;val&lt;/span&gt; originalSauce &lt;span&gt;=&lt;/span&gt; hotSauceRepository&lt;span&gt;.&lt;/span&gt;&lt;span&gt;findById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;val&lt;/span&gt; updatedSauce &lt;span&gt;=&lt;/span&gt; &lt;span&gt;HotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                id &lt;span&gt;=&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt;&#xA;                brandName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;sauceChanges&lt;span&gt;.&lt;/span&gt;brandName &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; sauceChanges&lt;span&gt;.&lt;/span&gt;brandName &lt;span&gt;else&lt;/span&gt; originalSauce&lt;span&gt;.&lt;/span&gt;brandName&lt;span&gt;,&lt;/span&gt;&#xA;                sauceName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;sauceChanges&lt;span&gt;.&lt;/span&gt;sauceName &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; sauceChanges&lt;span&gt;.&lt;/span&gt;sauceName &lt;span&gt;else&lt;/span&gt; originalSauce&lt;span&gt;.&lt;/span&gt;sauceName&lt;span&gt;,&lt;/span&gt;&#xA;                description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;sauceChanges&lt;span&gt;.&lt;/span&gt;description &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; sauceChanges&lt;span&gt;.&lt;/span&gt;description &lt;span&gt;else&lt;/span&gt; originalSauce&lt;span&gt;.&lt;/span&gt;description&lt;span&gt;,&lt;/span&gt;&#xA;                url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;sauceChanges&lt;span&gt;.&lt;/span&gt;url &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; sauceChanges&lt;span&gt;.&lt;/span&gt;url &lt;span&gt;else&lt;/span&gt; originalSauce&lt;span&gt;.&lt;/span&gt;url&lt;span&gt;,&lt;/span&gt;&#xA;                heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;sauceChanges&lt;span&gt;.&lt;/span&gt;heat &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; sauceChanges&lt;span&gt;.&lt;/span&gt;heat &lt;span&gt;else&lt;/span&gt; originalSauce&lt;span&gt;.&lt;/span&gt;heat&#xA;            &lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;hotSauceRepository&lt;span&gt;.&lt;/span&gt;&lt;span&gt;save&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;updatedSauce&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; HttpStatus&lt;span&gt;.&lt;/span&gt;OK&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;HttpStatus&lt;span&gt;.&lt;/span&gt;NOT_FOUND&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// DELETE api/hotsauces/{id}&lt;/span&gt;&#xA;    &lt;span&gt;@DeleteMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/{id}&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;deleteHotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;@PathVariable&lt;/span&gt; id&lt;span&gt;:&lt;/span&gt; Long&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; ResponseEntity&lt;span&gt;&amp;lt;&lt;/span&gt;HotSauce&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;hotSauceRepository&lt;span&gt;.&lt;/span&gt;&lt;span&gt;existsById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            hotSauceRepository&lt;span&gt;.&lt;/span&gt;&lt;span&gt;deleteById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;id&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;HttpStatus&lt;span&gt;.&lt;/span&gt;NO_CONTENT&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;ResponseEntity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;HttpStatus&lt;span&gt;.&lt;/span&gt;NOT_FOUND&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code is considerably less complex than it could be, thanks to some annotations which take care of a lot of tedious REST work:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;HotSauceController&lt;/code&gt; is annotated with &lt;code&gt;@RestController&lt;/code&gt;, which informs Spring Web (yet another one of the dependencies that you added in Spring Initializr) that this class is a REST controller and that it should include the necessary underlying REST functionality.&lt;/li&gt;&lt;li&gt;&lt;code&gt;HotSauceController&lt;/code&gt; is also annotated with &lt;code&gt;@&lt;span&gt;RequestMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/hotsauces&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; which means that every method in the class that responds to a request responds to requests whose endpoint ends with &lt;code&gt;api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Any method annotated with &lt;code&gt;@&lt;span&gt;GetMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; responds to &lt;code&gt;&lt;span&gt;GET&lt;/span&gt;&lt;/code&gt; requests. If &lt;code&gt;@&lt;span&gt;GetMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; takes a parameter, it means that it responds to requests whose endpoint begins with that parameter. Parameters in braces (&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;) are variable parameters.&lt;/li&gt;&lt;li&gt;Any method annotated with &lt;code&gt;@&lt;span&gt;PostMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;@&lt;span&gt;PutMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;@&lt;span&gt;DeleteMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; is similar to a method annotated with &lt;code&gt;@&lt;span&gt;GetMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; except that they respond to &lt;code&gt;&lt;span&gt;POST&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;PUT&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span&gt;DELETE&lt;/span&gt;&lt;/code&gt; requests respectively.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Every method in the class returns a &lt;a href=&#34;https://www.baeldung.com/spring-response-entity&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;ResponseEntity&lt;/code&gt;&lt;/a&gt; object, which represents a complete HTTP response, complete with status code, headers, and body.&lt;/p&gt;&lt;p&gt;Take a look at each of these methods to see what kind of &lt;code&gt;ResponseEntity&lt;/code&gt; they return. Sometimes, they’ll simply return an HTTP status code, as is the case with &lt;code&gt;&lt;span&gt;deleteHotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, which returns either &lt;code&gt;&lt;span&gt;NO_CONTENT&lt;/span&gt;&lt;/code&gt; if the hot sauce was found and deleted or &lt;code&gt;&lt;span&gt;NOT_FOUND&lt;/span&gt;&lt;/code&gt; if the hot sauce requested for deletion was not in the database. Other methods may return a more complex &lt;code&gt;ResponseEntity&lt;/code&gt;, such as &lt;code&gt;&lt;span&gt;getHotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, which returns an &lt;code&gt;&lt;span&gt;OK&lt;/span&gt;&lt;/code&gt; status code and a &lt;code&gt;HotSauce&lt;/code&gt; object if the given &lt;code&gt;id&lt;/code&gt; matches a hot sauce in the database.&lt;/p&gt;&lt;p&gt;You may have noticed the &lt;code&gt;@RequestParam&lt;/code&gt; annotations in the signature of the &lt;code&gt;&lt;span&gt;getAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method. These map the parameters in the HTTP GET query string to &lt;code&gt;&lt;span&gt;getAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;’s parameters. The first annotation declares that value in &lt;code&gt;brandname&lt;/code&gt; query parameter is mapped to the &lt;code&gt;&lt;span&gt;getAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method’s &lt;code&gt;brandNameFilter&lt;/code&gt; parameter, that &lt;code&gt;brandname&lt;/code&gt; is an optional query parameter, and if it isn’t used, its value should default to the empty string. The other &lt;code&gt;@RequestParam&lt;/code&gt; annotations work in a similar manner.&lt;/p&gt;&lt;h3 id=&#34;Initializing-the-database&#34;&gt;Initializing the database&lt;/h3&gt;&lt;p&gt;You could run the app right now and it would work. There’s just one problem: Since the database is in-memory and unitialized, you don’t have any data to work with! Let’s add a class to preload the database with some initial hot sauces.&lt;/p&gt;&lt;p&gt;🌶 Create a new file named &lt;strong&gt;DataLoader.kt&lt;/strong&gt; in the &lt;strong&gt;/src/main/kotlin/com/auth0/hotsauces/&lt;/strong&gt; directory:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /src/main/kotlin/com/auth0/hotsauces/DataLoader.kt&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;hotsauces&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;stereotype&lt;span&gt;.&lt;/span&gt;Component&#xA;&lt;span&gt;import&lt;/span&gt; javax&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;PostConstruct&#xA;&#xA;&lt;span&gt;@Component&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DataLoader&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; hotSauceRepository&lt;span&gt;:&lt;/span&gt; HotSauceRepository&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;fun&lt;/span&gt; String&lt;span&gt;.&lt;/span&gt;&lt;span&gt;trimIndentsAndRemoveNewlines&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;trimIndent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;replace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@PostConstruct&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;loadData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        hotSauceRepository&lt;span&gt;.&lt;/span&gt;&lt;span&gt;saveAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;listOf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;            &lt;span&gt;HotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                brandName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Truff&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                sauceName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Hot Sauce&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;                    Our sauce is a curated blend of ripe chili peppers, organic agave nectar, black truffle, and&#xA;                    savory spices. This combination of ingredients delivers a flavor profile unprecedented to hot sauce.&#xA;                    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;trimIndentsAndRemoveNewlines&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;https://truffhotsauce.com/collections/sauce/products/truff&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;2_500&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;HotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                brandName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Truff&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                sauceName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Hotter Sauce&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;                    TRUFF Hotter Sauce is a jalapeño rich blend of red chili peppers, Black Truffle and Black Truffle&#xA;                    Oil, Organic Agave Nectar, Red Habanero Powder, Organic Cumin and Organic Coriander. Perfectly&#xA;                    balanced and loaded with our same iconic flavor, TRUFF Hotter Sauce offers a “less sweet, more heat”&#xA;                    rendition of the Flagship original.&#xA;                    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;trimIndentsAndRemoveNewlines&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;https://truffhotsauce.com/collections/sauce/products/hotter-truff-hot-sauce&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;4_000&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;HotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                brandName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Cholula&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                sauceName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Original&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;                    Cholula Original Hot Sauce is created from a generations old recipe that features carefully-selected&#xA;                    arbol and piquin peppers and a blend of signature spices. We love it on burgers and chicken but have&#xA;                    heard it’s amazing on pizza. Uncap Real Flavor with Cholula Original.&#xA;                    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;trimIndentsAndRemoveNewlines&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;https://www.cholula.com/original.html&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;3_600&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;HotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                brandName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Mad Dog&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                sauceName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;357&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;                   Finally, a super hot sauce that tastes like real chile peppers. This sauce is blended&#xA;                   with ingredients that create a sauce fit to take your breath away. About five seconds after you&#xA;                   taste the recommended dose of one drop, prepare your mouth and mind for five to 20 minutes of agony&#xA;                   that all true chileheads fully understand and appreciate.&#xA;                   &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;trimIndentsAndRemoveNewlines&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;https://www.saucemania.com.au/mad-dog-357-hot-sauce-148ml/&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;357_000&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;HotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                brandName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Hot Ones&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                sauceName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Fiery Chipotle&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;                    This hot sauce was created with one goal in mind: to get celebrity interviewees on Hot Ones to say&#xA;                    &amp;#34;damn that&amp;#39;s tasty, and DAMN that&amp;#39;s HOT!&amp;#34; and then spill their deepest secrets to host Sean Evans.&#xA;                    The tongue tingling flavors of chipotle, pineapple and lime please the palate while the mix of ghost&#xA;                    and habanero peppers make this sauce a scorcher. Hot Ones Fiery Chipotle Hot Sauce is a spicy&#xA;                    masterpiece.&#xA;                    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;trimIndentsAndRemoveNewlines&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;https://chillychiles.com/products/hot-ones-fiery-chipotle-hot-sauce&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;15_600&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;HotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                brandName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Hot Ones&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                sauceName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;The Last Dab&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;                    More than simple mouth burn, Pepper X singes your soul. Starting with a pleasant burn in the mouth,&#xA;                    the heat passes quickly, lulling you into a false confidence. You take another bite, enjoying the&#xA;                    mustard and spice flavours. This would be great on jerk chicken, or Indian food! But then, WHAM!&#xA;                    All of a sudden your skin goes cold and your stomach goes hot, and you realize the power of X.&#xA;                    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;trimIndentsAndRemoveNewlines&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;https://www.saucemania.com.au/hot-ones-the-last-dab-hot-sauce-148ml/&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1_000_000&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;HotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                brandName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Torchbearer&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                sauceName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Zombie Apocalypse&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;                    The Zombie Apocalypse Hot Sauce lives up to its name, combining Ghost Peppers and Habaneros with a&#xA;                    mix of spices, vegetables, and vinegar to create a slow burning blow torch. Some people will feel&#xA;                    the heat right away, but others can take a few minutes for the full impact to set in. The heat can&#xA;                    last up to 20 minutes, creating a perfect match between very high heat and amazing flavor. Try it&#xA;                    on all your favorite foods - wings, chili, soups, steak or even a sandwich in need of a major kick.&#xA;                    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;trimIndentsAndRemoveNewlines&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;https://heatonist.com/products/zombie-apocalypse&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;100_000&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;HotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                brandName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Heartbeat&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                sauceName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Pineapple Habanero&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;                    Pineapple Habanero is Heartbeat Hot Sauce’s most recent offering and their spiciest to date! They’ve&#xA;                    yet again collaborated with an Ontario craft brewery, this time from their home town of Thunder Bay.&#xA;                    Made with the help of Sleeping Giant Brewery’s award winning Beaver Duck session IPA, this sauce has&#xA;                    a boldly pronounced fruitiness and a bright but savoury vibe from start to finish.&#xA;                    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;trimIndentsAndRemoveNewlines&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;https://www.saucemania.com.au/heartbeat-pineapple-habanero-hot-sauce-177ml/&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;12_200&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;            &lt;span&gt;HotSauce&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                brandName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Karma Sauce&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                sauceName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Burn After Eating&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;                    Karma Sauce Burn After Eating Hot Sauce is imbued with a unique flavour thanks to green mango,&#xA;                    ajwain and hing powder. Forged with a top-secret blend of super hots that may or may not include&#xA;                    Bhut Jolokia (Ghost), Scorpion, Carolina Reaper, 7-Pot Brown and 7-Pot Primo. This isn’t a sauce you&#xA;                    eat, it’s one you survive.&#xA;                    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;trimIndentsAndRemoveNewlines&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;https://www.saucemania.com.au/karma-sauce-burn-after-eating-hot-sauce-148ml/&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;669_000&lt;/span&gt;&#xA;            &lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This class has a couple of annotations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;DataLoader&lt;/code&gt; is annotated with &lt;code&gt;@Component&lt;/code&gt;, which marks it so that Spring will autodetect the class when it’s needed. Since the code in this class references the application’s instance of &lt;code&gt;HotSauceRepository&lt;/code&gt;, this class will be instantiated when an instance of &lt;code&gt;HotSauceRepository&lt;/code&gt; is created.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;&lt;span&gt;loadData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method is annotated with &lt;code&gt;@PostConstruct&lt;/code&gt;, which specifies that it should be called as soon as the class has been initialized. This annotation is often used to populate databases when a Spring application is launched.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;Kotlin-Extensions&#34;&gt;Kotlin Extensions&lt;/h4&gt;&lt;p&gt;This class also makes use of a handy Kotlin feature: &lt;strong&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/extensions.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Extensions&lt;/a&gt;&lt;/strong&gt;. These are properties or functions that can be added to classes to extend their capabilities without having to access their code.&lt;/p&gt;&lt;p&gt;At the beginning of the class, you added an extension to the &lt;code&gt;String&lt;/code&gt; class:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;fun&lt;/span&gt; String&lt;span&gt;.&lt;/span&gt;&lt;span&gt;trimIndentsAndRemoveNewlines&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;trimIndent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;replace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This adds the method &lt;code&gt;&lt;span&gt;trimIndentsAndRemoveNewlines&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; to the &lt;code&gt;String&lt;/code&gt; class, which removes indentations and newline characters from multiline strings. The assignments to each hot sauce’s &lt;code&gt;description&lt;/code&gt; property is done using multiline strings (which are delimited with triple-quotes — &lt;code&gt;&lt;span&gt;&amp;#34;&amp;#34;&lt;/span&gt;&amp;#34;&lt;/code&gt;) to make the code easier to read.&lt;/p&gt;&lt;h4 id=&#34;What-s-With-the-Numbers-&#34;&gt;What’s With the Numbers?&lt;/h4&gt;&lt;p&gt;You may have noticed that some of the numbers in the code contain underscore characters, such as on this line of code for the final sauce in the list:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;669_000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Kotlin — like some other languages, including Python, Ruby, and Swift — ignores undescore characters in numbers. This allows you to use them the way we typically use “separator characters” to make numbers easier to read.&lt;/p&gt;&lt;p&gt;For example, in the U.S., we tend to write the number for “one million” as &lt;strong&gt;1,000,000&lt;/strong&gt;, which is easier to read than 1000000. In India, the preference is to write this number as &lt;strong&gt;10,00,000&lt;/strong&gt;, and in some countries in Europe, it’s &lt;strong&gt;1.000.000&lt;/strong&gt;. By allowing the underscore as the grouping character for numbers and ignoring it, Kotlin lets you group digits in numbers as you see fit.&lt;/p&gt;&lt;h2 id=&#34;Trying-Out-the-API&#34;&gt;Trying Out the API&lt;/h2&gt;&lt;p&gt;You’re now ready to take the API for a trial run!&lt;/p&gt;&lt;p&gt;🌶 Run the application by opening a terminal if you’re on macOS of Linux or opening PowerShell if you’re on Windows), navigating to the the application’s directory, and entering the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;./gradlew bootRun&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command was included in the set of files that Spring Initilizr generated. It sets Gradle in motion, causing it to download any needed plugins and dependencies, after which it launches the application.&lt;/p&gt;&lt;p&gt;When it starts, you’ll see a lot of status messages. Eventually, they’ll end with this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; :bootRun&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you don’t see an error message and the last line of the output is &lt;code&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt;bootRun&lt;/code&gt;, it means that the project is running properly and listening to &lt;strong&gt;localhost:8080&lt;/strong&gt; for incoming requests. You can now start making API calls.&lt;/p&gt;&lt;h3 id=&#34;Is-this-thing-on-&#34;&gt;Is this thing on?&lt;/h3&gt;&lt;p&gt;One of the dependencies that you included when setting up this project with Spring Initializr was Spring Boot Actuator. This automatically adds a number of endpoints to your application that let you monitor and interact with it.&lt;/p&gt;&lt;p&gt;Let’s use Actuator’s &lt;code&gt;health&lt;/code&gt; endpoint to get client-side confirmation that your application is up and running.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on macOS or Linux,&lt;/strong&gt; enter this into Terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; &lt;span&gt;&amp;#34;http://localhost:8080/actuator/health&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on Windows,&lt;/strong&gt; enter this into PowerShell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Invoke&lt;span&gt;-&lt;/span&gt;RestMethod &lt;span&gt;&amp;#34;http://localhost:8080/actuator/health&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;macOS and Linux users should see this response...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&amp;#34;UP&amp;#34;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;...while Windows users should see this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;status&#xA;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&#xA;&lt;span&gt;UP&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;health&lt;/code&gt; endpoint is just one of of over 20 endpoints that a Spring Boot application provides when it includes the Actuator dependency. It’s indispensable for managing and monitoring apps during both development and production, as it provides logging, metrics, auditing, HTTP tracing, and process monitoring features, &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;all of which are covered in the Spring documentation.&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&#34;Count-hot-sauces&#34;&gt;Count hot sauces&lt;/h3&gt;&lt;p&gt;To get the number of hot sauces in the database, send a GET request to the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;span&gt;/&lt;/span&gt;count&lt;/code&gt; endpoint.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on macOS or Linux,&lt;/strong&gt; enter this into Terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/count&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on Windows,&lt;/strong&gt; enter this into PowerShell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Invoke&lt;span&gt;-&lt;/span&gt;RestMethod &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/count&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you haven’t added or removed any hot sauces since starting the application, the API should report that there are 9.&lt;/p&gt;&lt;h3 id=&#34;List-hot-sauces&#34;&gt;List hot sauces&lt;/h3&gt;&lt;p&gt;To get the complete list of hot sauces, send a GET request to the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;/code&gt; endpoint.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on macOS or Linux,&lt;/strong&gt; enter this into Terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on Windows,&lt;/strong&gt; enter this into PowerShell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Invoke&lt;span&gt;-&lt;/span&gt;RestMethod &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;macOS and Linux users will be presented with a JSON array of dictionaries, with each dictionary representing a hot sauce. Windows users will see a nicely formatted list of hot sauces and their properties.&lt;/p&gt;&lt;h3 id=&#34;Filtering-hot-sauces-with-parameters&#34;&gt;Filtering hot sauces with parameters&lt;/h3&gt;&lt;p&gt;Try using the optional parameters to limit the results. In the example below, the &lt;code&gt;maxheat&lt;/code&gt; parameter is being used to limit the response to only those hot sauces with a Scoville rating of 10,000 or less.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on macOS or Linux,&lt;/strong&gt; enter this into Terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces?maxheat=10000&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on Windows,&lt;/strong&gt; enter this into PowerShell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Invoke&lt;span&gt;-&lt;/span&gt;RestMethod &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces?maxheat=10000&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you haven’t added or removed any hot sauces since starting the application, the API should return three hot sauces: Truff Hot Sauce, Truff Hotter Sauce, and Cholula.&lt;/p&gt;&lt;h3 id=&#34;Add-a-new-hot-sauce&#34;&gt;Add a new hot sauce&lt;/h3&gt;&lt;p&gt;Add a new sauce to the database by sending a POST request to &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;span&gt;/&lt;/span&gt;&lt;/code&gt;, along with the attributes of the new sauce — except &lt;code&gt;id&lt;/code&gt;, which will automatically be assigned to the new sauce. The attributes should be in JSON dictionary form.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on macOS or Linux,&lt;/strong&gt; enter this command into the terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; --request POST &lt;span&gt;\&lt;/span&gt;&#xA;    --url http://localhost:8080/api/hotsauces/ &lt;span&gt;\&lt;/span&gt;&#xA;    -H &lt;span&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;    --data &lt;span&gt;&amp;#39;{&amp;#34;brandName&amp;#34;: &amp;#34;Dave’s Gourmet&amp;#34;, &amp;#34;sauceName&amp;#34;: &amp;#34;Temporary Insanity&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;This sauce has all the flavor of Dave’s Original Insanity with less heat. Finally, there’s sauce for when you only want to get a little crazy in the kitchen. Add to stews, burgers, burritos, and pizza, or any food that needs an insane boost. As with all super hot sauces, this sauce is best enjoyed one drop at a time!&amp;#34;, &amp;#34;heat&amp;#34;: 57000}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on Windows,&lt;/strong&gt; enter this command into PowerShell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$body &lt;span&gt;=&lt;/span&gt; @&lt;span&gt;{&lt;/span&gt;&#xA;    brandName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Dave\&amp;#39;s Gourmet&amp;#34;&lt;/span&gt;&#xA;    sauceName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Temporary Insanity&amp;#34;&lt;/span&gt;&#xA;    url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE&amp;#34;&lt;/span&gt;&#xA;    description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;This sauce has all the flavor of Dave\&amp;#39;s Original Insanity with less heat. Finally, there&amp;#39;s sauce for when you only want to get a little crazy in the kitchen. Add to stews, burgers, burritos, and pizza, or any food that needs an insane boost. As with all super hot sauces, this sauce is best enjoyed one drop at a time!&amp;#34;&lt;/span&gt;&#xA;    heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;57000&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; ConvertTo&lt;span&gt;-&lt;/span&gt;Json&#xA;Invoke&lt;span&gt;-&lt;/span&gt;RestMethod &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/&amp;#34;&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&#xA;    -Method POST &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt;ContentType &lt;span&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; `&#xA;    &lt;span&gt;-&lt;/span&gt;Body $body&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The hot sauce will be added to the database, and the API will respond with information about the newly added sauce.&lt;/p&gt;&lt;p&gt;You can confirm that the hot sauce has been added to the database by requesting the complete list, or by requesting it by id.&lt;/p&gt;&lt;h3 id=&#34;Edit-a-hot-sauce&#34;&gt;Edit a hot sauce&lt;/h3&gt;&lt;p&gt;Make changes to a hot sauce in the database by sending a PUT request to &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; where &lt;code&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; is the hot sauce’s &lt;code&gt;id&lt;/code&gt; value, along with the attributes you wish to change in JSON dictionary form.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on macOS or Linux,&lt;/strong&gt; enter this command into the terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; --request PUT &lt;span&gt;\&lt;/span&gt;&#xA;    --url http://localhost:8080/api/hotsauces/10 &lt;span&gt;\&lt;/span&gt;&#xA;    -H &lt;span&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;    --data &lt;span&gt;&amp;#39;{&amp;#34;brandName&amp;#34;: &amp;#34;NewCo&amp;#34;, &amp;#34;sauceName&amp;#34;: &amp;#34;Generic Hot Sauce&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;It’s hot. It’s sauce. That’s it.&amp;#34;, &amp;#34;heat&amp;#34;: 1000}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on Windows,&lt;/strong&gt; enter this command into PowerShell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$body &lt;span&gt;=&lt;/span&gt; @&lt;span&gt;{&lt;/span&gt;&#xA;    brandName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;NewCo&amp;#34;&lt;/span&gt;&#xA;    sauceName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Generic Hot Sauce&amp;#34;&lt;/span&gt;&#xA;    url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE&amp;#34;&lt;/span&gt;&#xA;    description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;It&amp;#39;s hot. It&amp;#39;s sauce. That&amp;#39;s it.&amp;#34;&lt;/span&gt;&#xA;    heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1000&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; ConvertTo&lt;span&gt;-&lt;/span&gt;Json&#xA;Invoke&lt;span&gt;-&lt;/span&gt;RestMethod &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/10&amp;#34;&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&#xA;    -Method PUT &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt;ContentType &lt;span&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; `&#xA;    &lt;span&gt;-&lt;/span&gt;Body $body&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The hot sauce will be updated with your changes and the API will respond with information showing the changes you made.&lt;/p&gt;&lt;h3 id=&#34;Delete-a-hot-sauce&#34;&gt;Delete a hot sauce&lt;/h3&gt;&lt;p&gt;Delete a hot sauce by sending a DELETE request to &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;span&gt;/&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; where &lt;code&gt;&lt;span&gt;{&lt;/span&gt;id&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; is the hot sauce’s &lt;code&gt;id&lt;/code&gt; value.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on macOS or Linux,&lt;/strong&gt; enter this command into Terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; --request DELETE &lt;span&gt;\&lt;/span&gt;&#xA;    --url http://localhost:8080/api/hotsauces/10&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on Windows,&lt;/strong&gt; enter this command into PowerShell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Invoke-RestMethod &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/10&amp;#34;&lt;/span&gt; `&#xA;    -Method DELETE&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can confirm that the hot sauce has been removed from the database by requesting the complete list (using &lt;code&gt;curl http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;span&gt;/&lt;/span&gt;&lt;/code&gt;) or a count of hot sauces (using &lt;code&gt;curl http&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;localhost&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;span&gt;/&lt;/span&gt;count&lt;/code&gt;).&lt;/p&gt;&lt;h2 id=&#34;Securing-the-API&#34;&gt;Securing the API&lt;/h2&gt;&lt;p&gt;Right now, the entire API is unsecured. All its endpoints are available to anyone with the URL and the ability to send HTTP requests.&lt;/p&gt;&lt;p&gt;Suppose that we want to allow only authorized applications to have access to the endpoints of the API that allow accessing, adding, editing, and deleting hot sauces. The remaining endpoints — the test endpoint and the one that reports the number of hot sauces — can remain generally available.&lt;/p&gt;&lt;p&gt;You’ll use Auth0 to secure the API’s CRUD endpoints, but before that happens, let’s take a look at how API authentication works.&lt;/p&gt;&lt;h3 id=&#34;The-Nightclub-Metaphor&#34;&gt;The Nightclub Metaphor&lt;/h3&gt;&lt;p&gt;There’s no shortage of essays and articles on the internet that try to explain API authentication. Let’s make it a little more fun and easier to grasp way by using The Nightclub Metaphor!&lt;/p&gt;&lt;p&gt;A number of nightclubs have a two-step process to control who gets in and who doesn’t. First, there’s an initial phase where the club-goer goes to a window and shows some ID...&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6oCWbsxHYlaAJXpelHJOS1/6d7fd315a5bb60f932be7c765f198106/mclovin_drivers_license.png&#34; alt=&#34;A fake ID&#34;/&gt;&lt;/p&gt;&lt;p&gt;...and if the ID passes inspection, the club-goer is given something that’s easy to see in a nightclub environment. Often, it’s a wristband:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3antgKjLDw9hqJ93J97thU/7199be675a2da2164ab71fc4532831ad/wristbands.png&#34; alt=&#34;Club wristbands&#34;/&gt;&lt;/p&gt;&lt;p&gt;The wristband is visible permission — an &lt;em&gt;access token&lt;/em&gt; — that the club-goer wearing it has been cleared to enter the club. In order to be let into the club, the club-goer has to show their wristband to the bouncers guarding the entrance.&lt;/p&gt;&lt;p&gt;The better-run nightclubs change their wristbands every night. One night, it’ll be blue, and on the next night, it’ll be a different color. This prevents club-goers from reusing the previous night’s wristband to get in.&lt;/p&gt;&lt;p&gt;API security with Auth0 works in a similar way:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Showing ID at the window:&lt;/strong&gt; You first assemble a set of credentials, which you submit to Auth0’s servers to obtain an access token.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Showing your wristband to the bouncers:&lt;/strong&gt; When accessing an API endpoint that requires authorization, you include the access token as part of your request. The API communicates with Auth0 to validate the access token, and if it’s valid, provides the response to your request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Changing wristbands every night:&lt;/strong&gt; Like the wristbands at the better-run nightclubs, access tokens aren’t valid forever. By default, Auth0 access tokens expire 24 hours after they’re issued.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;It’s time to secure the API. This needs to be done both on the Auth0 side as well as in the application.&lt;/p&gt;&lt;h2 id=&#34;Setting-Up-API-Authentication-on-the-Auth0-Side&#34;&gt;Setting Up API Authentication on the Auth0 Side&lt;/h2&gt;&lt;h3 id=&#34;Registering-the-API&#34;&gt;Registering the API&lt;/h3&gt;&lt;p&gt;The first step in setting up API authentication is to register it.&lt;/p&gt;&lt;p&gt;🌶 Log into Auth0.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you don’t have an Auth0 account yet, go ahead and &lt;a href=&#34;https://auth0.com/signup&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free one.&lt;/a&gt; You’ll find it useful for prototyping logins and API security in your projects.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;🌶 Once you’ve logged in, &lt;a href=&#34;https://manage.auth0.com/?&amp;amp;_ga=2.55268258.821728906.1599742219-782382229.1597890849#/apis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;navigate to the &lt;em&gt;APIs&lt;/em&gt; page&lt;/a&gt;...&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/48uwB1BEZbrHDz9zzeRWxO/4add50dd5a0b7317b991fd3fe1a413da/apis.png&#34; alt=&#34;Auth0 dashboard APIs page&#34;/&gt;&lt;/p&gt;&lt;p&gt;🌶 ...and click the &lt;strong&gt;Create API&lt;/strong&gt; button located near the upper right corner of the page. A form will appear, asking for basic information about the API:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4XmypcreWQ9C4HGTmKHkul/6dfbe34de3f0fd09464f3ae89440f533/new-api.png&#34; alt=&#34;New API pop-up form&#34;/&gt;&lt;/p&gt;&lt;p&gt;🌶 Fill it out like so:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;em&gt;Name:&lt;/em&gt; Enter &lt;strong&gt;HotSauces&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Identifier:&lt;/em&gt; Enter &lt;strong&gt;&lt;a href=&#34;http://hotsauces.demo&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://hotsauces.demo&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Signing Algorithm:&lt;/em&gt; Select &lt;strong&gt;RS256&lt;/strong&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🌶 When you’re done providing this information, click the &lt;strong&gt;Create&lt;/strong&gt; button. The API will now be registered, which means that Auth0 can now be used to authorize access to it.&lt;/p&gt;&lt;h3 id=&#34;Getting-the-Credentials&#34;&gt;Getting the Credentials&lt;/h3&gt;&lt;p&gt;The next step is to gather the necessary Auth0 credentials that will be needed to request an access token from Auth0 and to validate any access tokens.&lt;/p&gt;&lt;p&gt;Immediately after registering your API, you were taken to the API’s newly-created &lt;strong&gt;Quick Start&lt;/strong&gt; page, pictured below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6Wr7wbTVoKREeDqP2PPccC/6e06c065b4bd2edbfb203cebf64ce3d3/hotsauces-quick-start-page.png&#34; alt=&#34;Auth0 Quick Start page for the API&#34;/&gt;&lt;/p&gt;&lt;p&gt;This is technically a machine-to-machine application, which means that the API you created (a machine) wouldn’t normally be accessed directly by a human, but by an application (another machine). You’ll need to gather the credentials from the Machine to Machine Applications section.&lt;/p&gt;&lt;p&gt;🌶 Click on &lt;strong&gt;Machine to Machine Applications&lt;/strong&gt;, which will take you to this page:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6I4WwRBhedzzWiKaZL9Mry/b78eb788f07e9e3cf94a603fb45de80b/machine-to-machine.png&#34; alt=&#34;Auth0 Settings page&#34;/&gt;&lt;/p&gt;&lt;p&gt;This is the first of two pages that provide information that you need in order to get the access token.&lt;/p&gt;&lt;p&gt;🌶 You’ll be copying four items, and you may find it helpful to open a text editor so that you have some place in which to paste them.&lt;/p&gt;&lt;p&gt;🌶 Copy the &lt;em&gt;API Identifier&lt;/em&gt; value, which is located just below the page’s headline...&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5dyz7Uq4McFi1wk8hiLdMI/7131755fbdc21bf2797f98d7b1c78d4f/machine-to-machine_identifier.png&#34; alt=&#34;Identifier&#34;/&gt;&lt;/p&gt;&lt;p&gt;🌶 ...and paste it into the text editor.&lt;/p&gt;&lt;p&gt;Your text editor should look something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;API Identifier: &lt;span&gt;{&lt;/span&gt;API Identifier&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you’ve been following the steps in this exercise, {API Identifier} will be &lt;strong&gt;&lt;a href=&#34;http://hotsauces.demo&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://hotsauces.demo&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;There will be a list of applications at the bottom of the page. One of them will be &lt;strong&gt;HotSauces&lt;/strong&gt;. Click on its name. You’ll be taken to HotSauces’ &lt;strong&gt;Machine to Machine → Settings&lt;/strong&gt; page, which contains information that you’ll need to get the token:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/41YnIqmEdUcsVSYSNtCqmO/82596c6774a38590976f59ff61c538db/machine-to-machine_settings.png&#34; alt=&#34;Auth0 Machine to Machine page&#34;/&gt;&lt;/p&gt;&lt;p&gt;🌶 Use the “copy” buttons on the right side of these fields to copy and paste their contents into the same text editor where you pasted the API Identifier:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Domain&lt;/li&gt;&lt;li&gt;Client ID&lt;/li&gt;&lt;li&gt;Client Secret&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Your text editor should now look something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;API Identifier: &lt;span&gt;{&lt;/span&gt;API Identifier&lt;span&gt;}&lt;/span&gt;&#xA;Domain: &lt;span&gt;{&lt;/span&gt;Domain&lt;span&gt;}&lt;/span&gt;&#xA;Client ID: &lt;span&gt;{&lt;/span&gt;Client ID&lt;span&gt;}&lt;/span&gt;&#xA;Client Secret: &lt;span&gt;{&lt;/span&gt;Client Secret&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You’ve done all the necessary setup on the Auth0 side. It’s now time to do the same on the application side.&lt;/p&gt;&lt;h2 id=&#34;Setting-Up-API-Authentication-on-the-Application-Side&#34;&gt;Setting Up API Authentication on the Application Side&lt;/h2&gt;&lt;h3 id=&#34;Adding-Security-Dependencies&#34;&gt;Adding Security Dependencies&lt;/h3&gt;&lt;p&gt;The first step is to add the necessary security dependencies to the Gradle build file.&lt;/p&gt;&lt;p&gt;🌶 Update the &lt;code&gt;dependencies&lt;/code&gt; block in &lt;strong&gt;/build.gradle.kts&lt;/strong&gt; so that it looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /build.gradle.kts (excerpt)&lt;/span&gt;&#xA;&#xA;dependencies &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;implementation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;org.springframework.boot:spring-boot-starter-actuator&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;implementation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;org.springframework.boot:spring-boot-starter-data-jpa&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;implementation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;org.springframework.boot:spring-boot-starter-web&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;implementation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;com.fasterxml.jackson.module:jackson-module-kotlin&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;implementation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;org.jetbrains.kotlin:kotlin-reflect&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;implementation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;org.jetbrains.kotlin:kotlin-stdlib-jdk8&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;developmentOnly&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;org.springframework.boot:spring-boot-devtools&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;runtimeOnly&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;com.h2database:h2&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;testImplementation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;org.springframework.boot:spring-boot-starter-test&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;implementation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;org.springframework.boot:spring-boot-starter-security&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;implementation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;org.springframework.security:spring-security-oauth2-resource-server&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;implementation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;org.springframework.security:spring-security-oauth2-jose&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;implementation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;org.springframework.security:spring-security-config&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This adds four dependencies. Note that they all have “security” in their name and that two of them also include “oauth2”, a reference to the OAuth2 protocol that Auth0 uses for authorization.&lt;/p&gt;&lt;p&gt;The first time you run the application after adding these lines to the Gradle build file, Gradle will download and install these dependencies.&lt;/p&gt;&lt;h3 id=&#34;Adding-a-Configuration-File&#34;&gt;Adding a Configuration File&lt;/h3&gt;&lt;p&gt;The next step is to create a file that configures the application to use the correct API identifier and domain when authenticating with Auth0.&lt;/p&gt;&lt;p&gt;🌶 Create a new file named &lt;strong&gt;application.yml&lt;/strong&gt; in the &lt;strong&gt;/src/main/resources/&lt;/strong&gt; directory. It should contain the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# /src/main/resources/application.yml&lt;/span&gt;&#xA;&#xA;&lt;span&gt;auth0&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;audience&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; Domain &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;spring&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;security&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;oauth2&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;resourceserver&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;jwt&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;          &lt;span&gt;issuer-uri&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; https&lt;span&gt;:&lt;/span&gt;//&lt;span&gt;{&lt;/span&gt;API Identifier&lt;span&gt;}&lt;/span&gt;/&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;Indentation is important in this file: Don’t remove any indents, and use space characters to make the indents. &lt;strong&gt;Do NOT use tab characters!&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;🌶 In the file shown above, replace &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;API&lt;/span&gt; Identifier&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;{&lt;/span&gt;Domain&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with the values that you copied into your text editor. If you’ve been following the steps in this exercise, &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;API&lt;/span&gt; Identifier&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; will be &lt;strong&gt;&lt;a href=&#34;http://hotsauces.demo&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://hotsauces.demo&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;API&lt;/span&gt; Identifier&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; value will be used to tell Auth0 which API is asking for authentication, and the &lt;code&gt;&lt;span&gt;{&lt;/span&gt;Domain&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; value allows Spring’s security to get the authorization server’s public keys and validate the access token.&lt;/p&gt;&lt;h3 id=&#34;Adding-Security-Classes&#34;&gt;Adding Security Classes&lt;/h3&gt;&lt;p&gt;The final step in securing the API is adding a couple of security classes. These classes enable the application to make use of Auth0’s OAuth2 authorization.&lt;/p&gt;&lt;p&gt;Since these classes don’t directly have anything to do with the application’s main functionality, they’re often put into their own directory.&lt;/p&gt;&lt;p&gt;🌶 Create a new directory, &lt;strong&gt;security&lt;/strong&gt;, as a subdirectory of &lt;strong&gt;/src/main/kotlin/com/auth0/hotsauces/&lt;/strong&gt;. The project’s directory structure should now look like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/OmSevxxVhzfafimLdeArh/c3228767798e5f33e0866f34011d8c63/hotsauces-project-structure-2.png&#34; alt=&#34;Project structure, pointing out the security folder and application.yml&#34;/&gt;&lt;/p&gt;&lt;p&gt;The first security class that you’ll add is an audience validator. It confirms that the access token is actually the one for the API.&lt;/p&gt;&lt;p&gt;🌶 Create a new file named &lt;strong&gt;AudienceValidator.kt&lt;/strong&gt; in the &lt;strong&gt;/src/main/kotlin/com/auth0/hotsauces/security/&lt;/strong&gt; directory:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /src/main/kotlin/com/auth0/hotsauces/security/AudienceValidator.kt&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;hotsauces&lt;span&gt;.&lt;/span&gt;security&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;oauth2&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;OAuth2Error&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;oauth2&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;OAuth2TokenValidator&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;oauth2&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;OAuth2TokenValidatorResult&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;oauth2&lt;span&gt;.&lt;/span&gt;jwt&lt;span&gt;.&lt;/span&gt;Jwt&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AudienceValidator&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; audience&lt;span&gt;:&lt;/span&gt; String&lt;span&gt;)&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; OAuth2TokenValidator&lt;span&gt;&amp;lt;&lt;/span&gt;Jwt&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;validate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;jwt&lt;span&gt;:&lt;/span&gt; Jwt&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; OAuth2TokenValidatorResult &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;val&lt;/span&gt; error &lt;span&gt;=&lt;/span&gt; &lt;span&gt;OAuth2Error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;invalid_token&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;The required audience is missing&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;jwt&lt;span&gt;.&lt;/span&gt;audience&lt;span&gt;.&lt;/span&gt;&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;audience&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            OAuth2TokenValidatorResult&lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; OAuth2TokenValidatorResult&lt;span&gt;.&lt;/span&gt;&lt;span&gt;failure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;error&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The second security class configures API security in two ways:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;It validates the access token, and&lt;/li&gt;&lt;li&gt;It specifies the levels of access you grant to the API endpoints.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;🌶 Create a new file named &lt;strong&gt;SecurityConfig.kt&lt;/strong&gt; in the &lt;strong&gt;/src/main/kotlin/com/auth0/hotsauces/security/&lt;/strong&gt; directory:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// /src/main/kotlin/com/auth0/hotsauces/security/SecurityConfig.kt&lt;/span&gt;&#xA;&#xA;&lt;span&gt;package&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;hotsauces&lt;span&gt;.&lt;/span&gt;security&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;beans&lt;span&gt;.&lt;/span&gt;factory&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;Value&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;Bean&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;builders&lt;span&gt;.&lt;/span&gt;HttpSecurity&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;configuration&lt;span&gt;.&lt;/span&gt;EnableWebSecurity&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;web&lt;span&gt;.&lt;/span&gt;configuration&lt;span&gt;.&lt;/span&gt;WebSecurityConfigurerAdapter&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;oauth2&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;DelegatingOAuth2TokenValidator&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;oauth2&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;OAuth2TokenValidator&#xA;&lt;span&gt;import&lt;/span&gt; org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;oauth2&lt;span&gt;.&lt;/span&gt;jwt&lt;span&gt;.&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@EnableWebSecurity&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; SecurityConfig &lt;span&gt;:&lt;/span&gt; &lt;span&gt;WebSecurityConfigurerAdapter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Value&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;\&lt;span&gt;&lt;span&gt;${&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;audience&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; audience&lt;span&gt;:&lt;/span&gt; String &lt;span&gt;=&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Value&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;\&lt;span&gt;&lt;span&gt;${&lt;/span&gt;spring&lt;span&gt;.&lt;/span&gt;security&lt;span&gt;.&lt;/span&gt;oauth2&lt;span&gt;.&lt;/span&gt;resourceserver&lt;span&gt;.&lt;/span&gt;jwt&lt;span&gt;.&lt;/span&gt;issuer&lt;span&gt;-&lt;/span&gt;uri&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; issuer&lt;span&gt;:&lt;/span&gt; String &lt;span&gt;=&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Bean&lt;/span&gt;&#xA;    &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;jwtDecoder&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; JwtDecoder &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;val&lt;/span&gt; jwtDecoder &lt;span&gt;=&lt;/span&gt; JwtDecoders&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromOidcIssuerLocation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;issuer&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; NimbusJwtDecoder&#xA;        &lt;span&gt;val&lt;/span&gt; audienceValidator&lt;span&gt;:&lt;/span&gt; OAuth2TokenValidator&lt;span&gt;&amp;lt;&lt;/span&gt;Jwt&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;AudienceValidator&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;audience&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;val&lt;/span&gt; withIssuer&lt;span&gt;:&lt;/span&gt; OAuth2TokenValidator&lt;span&gt;&amp;lt;&lt;/span&gt;Jwt&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; JwtValidators&lt;span&gt;.&lt;/span&gt;&lt;span&gt;createDefaultWithIssuer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;issuer&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;val&lt;/span&gt; withAudience&lt;span&gt;:&lt;/span&gt; OAuth2TokenValidator&lt;span&gt;&amp;lt;&lt;/span&gt;Jwt&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;DelegatingOAuth2TokenValidator&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;withIssuer&lt;span&gt;,&lt;/span&gt; audienceValidator&lt;span&gt;)&lt;/span&gt;&#xA;        jwtDecoder&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setJwtValidator&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;withAudience&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; jwtDecoder&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Throws&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Exception&lt;span&gt;::&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;configure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;http&lt;span&gt;:&lt;/span&gt; HttpSecurity&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        http&lt;span&gt;.&lt;/span&gt;&lt;span&gt;authorizeRequests&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;mvcMatchers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/hotsauces/count&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;permitAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;mvcMatchers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/hotsauces&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;authenticated&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;mvcMatchers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/hotsauces/*&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;authenticated&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;and&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;oauth2ResourceServer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;jwt&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Take a closer look at the &lt;code&gt;&lt;span&gt;configure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method you just entered:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Throws&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Exception&lt;span&gt;::&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;override&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt; &lt;span&gt;configure&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;http&lt;span&gt;:&lt;/span&gt; HttpSecurity&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    http&lt;span&gt;.&lt;/span&gt;&lt;span&gt;authorizeRequests&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;mvcMatchers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/hotsauces/count&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;permitAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;mvcMatchers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/hotsauces&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;authenticated&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;mvcMatchers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/hotsauces/*&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;authenticated&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;and&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;oauth2ResourceServer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;jwt&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These lines specify that the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;span&gt;/&lt;/span&gt;count&lt;/code&gt; endpoints will be accessible to everyone...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;mvcMatchers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/hotsauces/count&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;permitAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;...while these specify that the &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;/code&gt; endpoint and any other endpoint beginning with &lt;code&gt;&lt;span&gt;/&lt;/span&gt;api&lt;span&gt;/&lt;/span&gt;hotsauces&lt;span&gt;/&lt;/span&gt;&lt;/code&gt; require authentication.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;mvcMatchers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/hotsauces&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;authenticated&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;mvcMatchers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/hotsauces/*&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;authenticated&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In other words, any request to these endpoints must include a valid access token in order to work. Otherwise, those requests will get an HTTP 401 — Unauthorized — response.&lt;/p&gt;&lt;p&gt;Here’s what the project’s final directory structure looks like:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4LJ2qRCHiTke0NprOsST7J/084c4abc7157d44c317b50158de1fef6/hotsauces-project-structure-3.png&#34; alt=&#34;Project file structure, showing the newly-added AudienceValidator and SecurityConfig files&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Trying-Out-the-Secured-API&#34;&gt;Trying Out the Secured API&lt;/h2&gt;&lt;p&gt;Now that you’ve secured the API, it’s time to try it out!&lt;/p&gt;&lt;h3 id=&#34;Acquiring-an-access-token&#34;&gt;Acquiring an access token&lt;/h3&gt;&lt;p&gt;You now have the necessary pieces of information needed to request a token. You’ll request the token by sending a POST request containing the information.&lt;/p&gt;&lt;p&gt;You might find it easier to assemble the POST request in the same text editor where you pasted the information.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on macOS or Linux,&lt;/strong&gt; start with this cURL command, replacing the &lt;code&gt;&lt;span&gt;{&lt;/span&gt;Domain&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;{&lt;/span&gt;Client &lt;span&gt;ID&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;{&lt;/span&gt;Client Secret&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;API&lt;/span&gt; Identifier&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with the corresponding values you copied.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; --request POST &lt;span&gt;\&lt;/span&gt;&#xA;    --url https://&lt;span&gt;{&lt;/span&gt;Domain&lt;span&gt;}&lt;/span&gt;/oauth/token &lt;span&gt;\&lt;/span&gt;&#xA;    --header &lt;span&gt;&amp;#39;content-type: application/json&amp;#39;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;    --data &lt;span&gt;&amp;#39;{&#xA;        &amp;#34;client_id&amp;#34;: &amp;#34;{Client ID}&amp;#34;,&#xA;        &amp;#34;client_secret&amp;#34;: &amp;#34;{Client Secret}&amp;#34;,&#xA;        &amp;#34;audience&amp;#34;: &amp;#34;{API Identifier}&amp;#34;,&#xA;        &amp;#34;grant_type&amp;#34;: &amp;#34;client_credentials&amp;#34;&#xA;    }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on Windows,&lt;/strong&gt; use this command instead. As with the macOS/Linux version, replace the &lt;code&gt;&lt;span&gt;{&lt;/span&gt;Domain&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;{&lt;/span&gt;Client &lt;span&gt;ID&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;{&lt;/span&gt;Client Secret&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;API&lt;/span&gt; Identifier&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with the corresponding values you copied.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;$Body&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; @&lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;client_id&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;{Client ID}&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;client_secret&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;{Client Secret}&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;audience&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;{API Identifier}&amp;#34;&lt;/span&gt;&#xA;    &lt;span&gt;&amp;#34;grant_type&amp;#34;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;client_credentials&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;$response&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; Invoke-RestMethod &lt;span&gt;&amp;#34;https://{Domain}/oauth/token&amp;#34;&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&#xA;    -Method POST &lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&#xA;    -Body &lt;span&gt;$Body&lt;/span&gt;&#xA;&lt;span&gt;$response&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; ConvertTo-Json&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In response, you should receive a JSON dictionary that looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;access_token&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;{Access Token (a 720-character string)}&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;expires_in&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;86400&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;  &lt;span&gt;&amp;#34;token_type&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#34;Bearer&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that one of the dictionary keys is &lt;code&gt;expires_in&lt;/code&gt;, which specifies that the token will expire in 86,400 seconds, or in more convenient units, 24 hours. After that time has elapsed, the token will be invalid and you’ll have to request a new one following the same steps above.&lt;/p&gt;&lt;p&gt;Copy the &lt;code&gt;&lt;span&gt;{&lt;/span&gt;Access token&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; value and paste it into the text editor with the other values.&lt;/p&gt;&lt;p&gt;Your text editor should now look something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;API Identifier: &lt;span&gt;{&lt;/span&gt;API Identifier&lt;span&gt;}&lt;/span&gt;&#xA;Domain: &lt;span&gt;{&lt;/span&gt;Domain&lt;span&gt;}&lt;/span&gt;&#xA;Client ID: &lt;span&gt;{&lt;/span&gt;Client ID&lt;span&gt;}&lt;/span&gt;&#xA;Client Secret: &lt;span&gt;{&lt;/span&gt;Client Secret&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;Access Token: &lt;span&gt;{&lt;/span&gt;Access Token&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Trying-the-Public-Endpoints&#34;&gt;Trying the Public Endpoints&lt;/h3&gt;&lt;p&gt;🌶 Open a terminal or PowerShell window, navigate to the project directory, and enter &lt;code&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;gradlew bootRun&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Start with the endpoint that remained public: The one that returns the number of hot sauces in the database.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on macOS or Linux,&lt;/strong&gt; enter this command into Terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; -i http://localhost:8080/api/hotsauces/count&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;&lt;span&gt;-&lt;/span&gt;i&lt;/code&gt; option tells cURL to &lt;code&gt;i&lt;/code&gt;nclude the HTTP response headers in its output. By using it, you can see the HTTP status code for the API’s reponse.&lt;/p&gt;&lt;p&gt;The response should still be the number of hot sauces. It will be preceded by the response header, which should look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;HTTP/1.1 &lt;span&gt;200&lt;/span&gt;&#xA;X-Content-Type-Options: nosniff&#xA;X-XSS-Protection: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;mode&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;block&#xA;Cache-Control: no-cache, no-store, max-age&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, must-revalidate&#xA;Pragma: no-cache&#xA;Expires: &lt;span&gt;0&lt;/span&gt;&#xA;X-Frame-Options: DENY&#xA;Content-Type: application/json&#xA;Transfer-Encoding: chunked&#xA;Date: &lt;span&gt;{&lt;/span&gt;Date and &lt;span&gt;time&lt;/span&gt; when the response was issued&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The status code is the number at the end of the header’s first line: &lt;strong&gt;200&lt;/strong&gt;, or “OK”.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on Windows,&lt;/strong&gt; enter this command into PowerShell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Invoke&lt;span&gt;-&lt;/span&gt;WebRequest &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/count&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You&amp;#39;re using PowerShell&amp;#39;s &lt;code&gt;Invoke&lt;span&gt;-&lt;/span&gt;WebRequest&lt;/code&gt; this time, which means that the response will look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;StatusCode        &lt;span&gt;:&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&#xA;StatusDescription &lt;span&gt;:&lt;/span&gt;&#xA;Content           &lt;span&gt;:&lt;/span&gt; &lt;span&gt;9&lt;/span&gt;&#xA;RawContent        &lt;span&gt;:&lt;/span&gt; &lt;span&gt;HTTP&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1.1&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&#xA;                    Transfer&lt;span&gt;-&lt;/span&gt;Encoding&lt;span&gt;:&lt;/span&gt; chunked&#xA;                    Keep&lt;span&gt;-&lt;/span&gt;Alive&lt;span&gt;:&lt;/span&gt; timeout&lt;span&gt;=&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;&#xA;                    Connection&lt;span&gt;:&lt;/span&gt; keep&lt;span&gt;-&lt;/span&gt;alive&#xA;                    Content&lt;span&gt;-&lt;/span&gt;Type&lt;span&gt;:&lt;/span&gt; application&lt;span&gt;/&lt;/span&gt;json&#xA;                    Date&lt;span&gt;:&lt;/span&gt; Fri&lt;span&gt;,&lt;/span&gt; &lt;span&gt;23&lt;/span&gt; Jul &lt;span&gt;2021&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;GMT&lt;/span&gt;&#xA;&#xA;                    &lt;span&gt;9&lt;/span&gt;&#xA;Forms             &lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;Headers           &lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;Transfer&lt;span&gt;-&lt;/span&gt;Encoding&lt;span&gt;,&lt;/span&gt; chunked&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;Keep&lt;span&gt;-&lt;/span&gt;Alive&lt;span&gt;,&lt;/span&gt; timeout&lt;span&gt;=&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;Connection&lt;span&gt;,&lt;/span&gt; keep&lt;span&gt;-&lt;/span&gt;alive&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;Content&lt;span&gt;-&lt;/span&gt;Type&lt;span&gt;,&lt;/span&gt;&#xA;                    application&lt;span&gt;/&lt;/span&gt;json&lt;span&gt;]&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;Images            &lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;InputFields       &lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;Links             &lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;ParsedHtml        &lt;span&gt;:&lt;/span&gt; System&lt;span&gt;.&lt;/span&gt;__ComObject&#xA;RawContentLength  &lt;span&gt;:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The number of sauces is the value in the &lt;code&gt;Content&lt;/code&gt; line, and as with the macOS/Linux version, the status code is the number at the end of the header’s first line: &lt;strong&gt;200&lt;/strong&gt;, or “OK”.&lt;/p&gt;&lt;h3 id=&#34;Trying-the-Protected-Endpoints&#34;&gt;Trying the Protected Endpoints&lt;/h3&gt;&lt;p&gt;It’s time to try the endpoints that require authorization. Before using the token, try requesting a list of all the hot sauces without it.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on macOS or Linux,&lt;/strong&gt; enter this command into Terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; -i http://localhost:8080/api/hotsauces/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Instead of a JSON list of dictionaries of hot sauces, you’ll get an empty reply. The first line of the header should be your hint as to why:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;HTTP&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1.1&lt;/span&gt; &lt;span&gt;401&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on Windows,&lt;/strong&gt; enter this command into PowerShell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;Invoke-WebRequest&lt;/span&gt; &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You&amp;#39;ll see this reply:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Invoke&lt;span&gt;-&lt;/span&gt;WebRequest &lt;span&gt;:&lt;/span&gt; The remote server returned an error&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;401&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; Unauthorized&lt;span&gt;.&lt;/span&gt;&#xA;At line&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; char&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&#xA;&lt;span&gt;+&lt;/span&gt; Invoke&lt;span&gt;-&lt;/span&gt;WebRequest &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&#xA;    &lt;span&gt;+&lt;/span&gt; CategoryInfo          &lt;span&gt;:&lt;/span&gt; InvalidOperation&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;System&lt;span&gt;.&lt;/span&gt;Net&lt;span&gt;.&lt;/span&gt;HttpWebRequest&lt;span&gt;:&lt;/span&gt;HttpWebRequest&lt;span&gt;)&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;Invoke&lt;span&gt;-&lt;/span&gt;WebRequest&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; WebExc&#xA;   eption&#xA;    &lt;span&gt;+&lt;/span&gt; FullyQualifiedErrorId &lt;span&gt;:&lt;/span&gt; WebCmdletWebResponseException&lt;span&gt;,&lt;/span&gt;Microsoft&lt;span&gt;.&lt;/span&gt;PowerShell&lt;span&gt;.&lt;/span&gt;Commands&lt;span&gt;.&lt;/span&gt;InvokeWebRequestCommand&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;strong&gt;401&lt;/strong&gt; status code means “Unauthorized”. To refer back to the nightclub metaphor, you’re trying to get into the club without a wristband.&lt;/p&gt;&lt;h4 id=&#34;Getting-a-list-of-all-the-hot-sauces-from-the-secured-API&#34;&gt;Getting a list of all the hot sauces from the secured API&lt;/h4&gt;&lt;p&gt;Make the request again, this time including the access token.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on macOS or Linux,&lt;/strong&gt; enter this command into the terminal, making sure to replace &lt;code&gt;&lt;span&gt;{&lt;/span&gt;Access Token&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with the value that you copied into your text editor:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; -i --request GET &lt;span&gt;\&lt;/span&gt;&#xA;     --url http://localhost:8080/api/hotsauces/ &lt;span&gt;\&lt;/span&gt;&#xA;     -H &lt;span&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;     -H &lt;span&gt;&amp;#34;authorization: Bearer {Access Token}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on Windows,&lt;/strong&gt; enter this command into PowerShell, making sure to replace &lt;code&gt;&lt;span&gt;{&lt;/span&gt;Access Token&lt;span&gt;}&lt;/span&gt;&lt;/code&gt; with the value that you copied into your text editor:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$accessToken &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;{Access Token}&amp;#34;&lt;/span&gt;&#xA;$headers &lt;span&gt;=&lt;/span&gt; @&lt;span&gt;{&lt;/span&gt;&#xA;    Authorization &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Bearer $accessToken&amp;#34;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;$response &lt;span&gt;=&lt;/span&gt; Invoke&lt;span&gt;-&lt;/span&gt;RestMethod &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/&amp;#34;&lt;/span&gt; `&#xA;    &lt;span&gt;-&lt;/span&gt;Headers $headers&#xA;$response &lt;span&gt;|&lt;/span&gt; ConvertTo&lt;span&gt;-&lt;/span&gt;Json&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This time, when you make the request, you’ll get the list of all the hot sauces.&lt;/p&gt;&lt;h4 id=&#34;Adding-a-hot-sauce-using-the-secured-API&#34;&gt;Adding a hot sauce using the secured API&lt;/h4&gt;&lt;p&gt;Try adding add a hot sauce using the access token.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on macOS or Linux,&lt;/strong&gt; enter this command into the terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; -i --request POST &lt;span&gt;\&lt;/span&gt;&#xA;    --url http://localhost:8080/api/hotsauces/ &lt;span&gt;\&lt;/span&gt;&#xA;    -H &lt;span&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;    --data &lt;span&gt;&amp;#39;{&amp;#34;brandName&amp;#34;: &amp;#34;Dave’s Gourmet&amp;#34;, &amp;#34;sauceName&amp;#34;: &amp;#34;Temporary Insanity&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;This sauce has all the flavor of Dave’s Original Insanity with less heat. Finally, there’s sauce for when you only want to get a little crazy in the kitchen. Add to stews, burgers, burritos, and pizza, or any food that needs an insane boost. As with all super hot sauces, this sauce is best enjoyed one drop at a time!&amp;#34;, &amp;#34;heat&amp;#34;: 57000}&amp;#39;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;    -H &lt;span&gt;&amp;#34;authorization: Bearer {Access Token}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on Windows,&lt;/strong&gt; enter this command into PowerShell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$body &lt;span&gt;=&lt;/span&gt; @&lt;span&gt;{&lt;/span&gt;&#xA;    brandName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Dave&amp;#39;s Gourmet&amp;#34;&lt;/span&gt;&#xA;    sauceName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Temporary Insanity&amp;#34;&lt;/span&gt;&#xA;    url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;https://store.davesgourmet.com/ProductDetails.asp?ProductCode=DATE&amp;#34;&lt;/span&gt;&#xA;    description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;This sauce has all the flavor of Dave\&amp;#39;s Original Insanity with less heat. Finally, there&amp;#39;s sauce for when you only want to get a little crazy in the kitchen. Add to stews, burgers, burritos, and pizza, or any food that needs an insane boost. As with all super hot sauces, this sauce is best enjoyed one drop at a time!&amp;#34;&lt;/span&gt;&#xA;    heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;57000&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; ConvertTo&lt;span&gt;-&lt;/span&gt;Json&#xA;$response &lt;span&gt;=&lt;/span&gt; Invoke&lt;span&gt;-&lt;/span&gt;RestMethod &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/&amp;#34;&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&#xA;    -Method POST &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt;ContentType &lt;span&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&#xA;    -Headers $headers &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt;Body $body&#xA;$response &lt;span&gt;|&lt;/span&gt; ConvertTo&lt;span&gt;-&lt;/span&gt;Json&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Editing-a-hot-sauce-using-the-secured-API&#34;&gt;Editing a hot sauce using the secured API&lt;/h4&gt;&lt;p&gt;Try editing the hot sauce with &lt;code&gt;id&lt;/code&gt; 10.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on macOS or Linux,&lt;/strong&gt; enter this command into the terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; -i --request PUT &lt;span&gt;\&lt;/span&gt;&#xA;    --url http://localhost:8080/api/hotsauces/10 &lt;span&gt;\&lt;/span&gt;&#xA;    -H &lt;span&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;    --data &lt;span&gt;&amp;#39;{&amp;#34;brandName&amp;#34;: &amp;#34;NewCo&amp;#34;, &amp;#34;sauceName&amp;#34;: &amp;#34;Generic Hot Sauce&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;It’s hot. It’s sauce. That’s it.&amp;#34;, &amp;#34;heat&amp;#34;: 1000}&amp;#39;&lt;/span&gt; &lt;span&gt;\&lt;/span&gt;&#xA;    -H &lt;span&gt;&amp;#34;authorization: Bearer {Access Token}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on Windows,&lt;/strong&gt; enter this command into PowerShell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$body &lt;span&gt;=&lt;/span&gt; @&lt;span&gt;{&lt;/span&gt;&#xA;    brandName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;NewCo&amp;#34;&lt;/span&gt;&#xA;    sauceName &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;Generic Hot Sauce&amp;#34;&lt;/span&gt;&#xA;    description &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;#34;It’s hot. It’s sauce. That’s it.&amp;#34;&lt;/span&gt;&#xA;    heat &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1000&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; ConvertTo&lt;span&gt;-&lt;/span&gt;Json&#xA;$response &lt;span&gt;=&lt;/span&gt; Invoke&lt;span&gt;-&lt;/span&gt;RestMethod &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/10&amp;#34;&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&#xA;    -Method PUT &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt;ContentType &lt;span&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;&#xA;    -Headers $headers &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt;Body $body&#xA;$response &lt;span&gt;|&lt;/span&gt; ConvertTo&lt;span&gt;-&lt;/span&gt;Json&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that since you didn’t change the &lt;code&gt;url&lt;/code&gt; property of the sauce, it remains the same.&lt;/p&gt;&lt;h4 id=&#34;Deleting-a-hot-sauce-using-the-secured-API&#34;&gt;Deleting a hot sauce using the secured API&lt;/h4&gt;&lt;p&gt;Then try deleting the hot sauce with &lt;code&gt;id&lt;/code&gt; 10.&lt;/p&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on macOS or Linux,&lt;/strong&gt; enter this command into the terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;curl&lt;/span&gt; -i --request DELETE &lt;span&gt;\&lt;/span&gt;&#xA;    --ur l http://localhost:8080/api/hotsauces/10&#xA;    -H &lt;span&gt;&amp;#34;authorization: Bearer {Access Token}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🌶 &lt;strong&gt;If you’re on Windows,&lt;/strong&gt; enter this command into PowerShell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Invoke-RestMethod &lt;span&gt;&amp;#34;http://localhost:8080/api/hotsauces/10&amp;#34;&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;&#xA;    -Method DELETE &lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&#xA;    -Headers &lt;span&gt;$headers&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;List the hot sauces or get a count to confirm that the sauce is no longer in the list.&lt;/p&gt;&lt;p&gt;If you’ve made it this far, congratulations! You’ve just developed and secured an API with Spring Boot, Kotlin, and Auth0!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/build-and-secure-an-api-with-spring-boot/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">See how easy it is to bootstrap a CRUD API with Spring Initializr, build it with Spring Boot and Kotlin, and secure it with Auth0.</summary>
    <author>
      <name>A closer look at the authorizations you just defined</name>
    </author>
  </entry>
  <entry>
    <title>Strategy Design Pattern in Python</title>
    <updated>2021-08-10T14:58:00Z</updated>
    <id>tag:auth0.com,2021-08-10:/blog/strategy-design-pattern-in-python/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;While you are developing software applications, you might run into some problems implementing the feature you need. Software design patterns are typical solutions for some of these commonly occurring problems while developing software applications using Object-oriented design. In this article, let&amp;#39;s learn about one of the popular design patterns, &lt;strong&gt;Strategy&lt;/strong&gt; pattern, and its implementation in Python.&lt;/p&gt;&lt;h2 id=&#34;Introduction&#34;&gt;Introduction&lt;/h2&gt;&lt;p&gt;Before diving into the strategy pattern, you should be familiar with some of the basics concepts of &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-oriented_programming&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Object-Oriented Programming&lt;/a&gt; (OOP). The entire concept of design patterns revolves around &lt;em&gt;classes&lt;/em&gt; and &lt;em&gt;objects&lt;/em&gt;. The design patterns are more high-level solutions for commonly occurring problems. They are like the blueprint to solve a specific problem. They are not confined to a single programming language. You can use design patterns in any programming language that supports object-oriented programming; the process will be the same while the syntax changes.&#xA;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4tPzU9nvm5jUwrXAeeHH3e/1badc171178aa953f7df05f08960f228/01_design-types.jpg&#34; alt=&#34;design patterns&#34;/&gt;&#xA;There are several types of design patterns, including &lt;strong&gt;Creational&lt;/strong&gt;, &lt;strong&gt;Structural&lt;/strong&gt;, and &lt;strong&gt;Behavioral&lt;/strong&gt; patterns. Creational patterns are about different ways to create objects that increase the flexibility of our code. Structural patterns are about relations between the objects, making larger structures flexible using objects and classes. Behavioral patterns are about effective communications and interactions between objects.&lt;/p&gt;&lt;h2 id=&#34;Strategy&#34;&gt;Strategy&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Strategy Pattern&lt;/strong&gt; is a design pattern that enables our application to select algorithms at runtime, making our application flexible. The original book on &lt;a href=&#34;https://en.wikipedia.org/wiki/Design_Patterns&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;design patterns&lt;/a&gt; written by &lt;a href=&#34;http://wiki.c2.com/?GangOfFour&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GoF&lt;/a&gt; states that &amp;#34;Strategy pattern intends to define a family of algorithms, &lt;a href=&#34;https://auth0.com/blog/strategy-design-pattern-in-python/shorturl.at/rHJR7&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;encapsulates&lt;/a&gt; each one, and&#xA;make them interchangeable.&amp;#34; More specifically, it lets you define a set of algorithms that are interchangeable according to some factors at runtime. Strategy Pattern falls under the category of behavioral design patterns as it enables an algorithm&amp;#39;s behavior to be selected at runtime.&lt;/p&gt;&lt;h2 id=&#34;Usage&#34;&gt;Usage&lt;/h2&gt;&lt;p&gt;While developing software applications, you may have a few alternatives to accomplish something in your code. Depending on your client choices, data sources, or other factors, you want to do something different without changing the code. You often tend to define algorithms using conditional statements for different situations in the main class of the code. But it is not an elegant way of writing better code. It makes the main class of your code quite long, and it becomes too hard to maintain the application.&lt;/p&gt;&lt;p&gt;In situations like these, the strategy pattern is an ideal solution. The strategy pattern suggests you define classes, called &lt;em&gt;strategies&lt;/em&gt;, for your algorithms of different situations. The strategy is referenced inside the main class, called &lt;em&gt;context&lt;/em&gt;, and the code works according to that situation. The context does not select an appropriate strategy for the case. Instead, the client passes the desired strategy to the context.&lt;/p&gt;&lt;p&gt;For example, if you have a chess application, you can select the difficulty level between easy, medium, or hard. The computer chooses an algorithm according to the level you choose. It is one of the best examples where the strategy pattern is used.&lt;/p&gt;&lt;p&gt;Strategy pattern follows the &lt;a href=&#34;https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Open/close principle&lt;/a&gt;; a software application is open for extension but closed for modification. It means you can add any number of additional strategies without modifying the main class. It makes your code more flexible and easy to maintain.&lt;/p&gt;&lt;h2 id=&#34;UML-Diagrams&#34;&gt;UML Diagrams&lt;/h2&gt;&lt;p&gt;The following is the UML diagram of the Strategy pattern.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/21fvYspoS3Voqv7pKyDE4E/e89c3e5f81d51b3d15a436cd81e795f7/02_UML-Strategy.jpg&#34; alt=&#34;UML Strategy&#34;/&gt;&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;strong&gt;Context&lt;/strong&gt; — It is the primary class of our application. It maintains a reference to one of the concrete strategies.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Strategy&lt;/strong&gt; — Strategy interface is common to all supported strategies. Context can communicate with other strategies only through the strategy interface.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ConcreteStrategies&lt;/strong&gt; — These are the classes that implement the algorithm using the Strategy interface.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;Implementation&#34;&gt;Implementation&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s see the step-by-step process of implementing a strategy pattern.&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;You should first identify algorithms you want to execute as concrete strategies in the primary class.&lt;/li&gt;&lt;li&gt;Define the &lt;em&gt;context&lt;/em&gt; (primary class) and add a reference to the strategy, a method to set the strategy, and another method to execute the strategy. You may also define a default strategy to switch between strategies only if they do not like the default one.&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;## context - the primary class&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Context&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    strategy&lt;span&gt;:&lt;/span&gt; Strategy  &lt;span&gt;## the strategy interface&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;setStrategy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;,&lt;/span&gt; strategy&lt;span&gt;:&lt;/span&gt; Strategy &lt;span&gt;=&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; strategy &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;            self&lt;span&gt;.&lt;/span&gt;strategy &lt;span&gt;=&lt;/span&gt; strategy&#xA;        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;            self&lt;span&gt;.&lt;/span&gt;strategy &lt;span&gt;=&lt;/span&gt; Default&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;executeStrategy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;.&lt;/span&gt;strategy&lt;span&gt;.&lt;/span&gt;execute&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First, we define the &lt;code&gt;strategy&lt;/code&gt; field for storing a reference to a strategy object, and two methods, &lt;code&gt;setStrategy&lt;/code&gt; and &lt;code&gt;executeStrategy&lt;/code&gt;. The &lt;code&gt;setStrategy&lt;/code&gt; sets the strategy selected if a user selects an option, or else the &lt;code&gt;&lt;span&gt;default&lt;/span&gt;&lt;/code&gt; one.&lt;/p&gt;&lt;ol start=&#34;3&#34;&gt;&lt;li&gt;Define the &lt;em&gt;Strategy Interface&lt;/em&gt;, which is common to all the concrete strategies. The &lt;code&gt;Strategy&lt;/code&gt; interface has an abstract method that you can alter in concrete strategies.&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; abc &lt;span&gt;import&lt;/span&gt; ABC&lt;span&gt;,&lt;/span&gt; abstractmethod&#xA;&#xA;&lt;span&gt;## Strategy interface&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Strategy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;ABC&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;@abstractmethod&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;execute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;&lt;li&gt;Define the concrete strategies which should implement the &lt;code&gt;Strategy&lt;/code&gt; interface. These concrete strategies must have a common method that overrides the &lt;code&gt;execute&lt;/code&gt; method of the &lt;code&gt;Strategy&lt;/code&gt; interface.&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;## Concrete strategies&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ConcreteStrategyA&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Strategy&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;execute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;#34;ConcreteStrategy A&amp;#34;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ConcreteStrategyB&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Strategy&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;execute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;#34;ConcreteStrategy B&amp;#34;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Default&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Strategy&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;execute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;#34;Default&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;5&#34;&gt;&lt;li&gt;Now, users can select the strategy they want at the runtime. Create an object of &lt;em&gt;context&lt;/em&gt; and pass a concrete strategy.&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;## Example application&lt;/span&gt;&#xA;appA &lt;span&gt;=&lt;/span&gt; Context&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;appB &lt;span&gt;=&lt;/span&gt; Context&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;appC &lt;span&gt;=&lt;/span&gt; Context&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;## selecting stratigies&lt;/span&gt;&#xA;appA&lt;span&gt;.&lt;/span&gt;setStrategy&lt;span&gt;(&lt;/span&gt;ConcreteStrategyA&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;appB&lt;span&gt;.&lt;/span&gt;setStrategy&lt;span&gt;(&lt;/span&gt;ConcreteStrategyB&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;appC&lt;span&gt;.&lt;/span&gt;setStrategy&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;    &lt;span&gt;## sets to default strategy&lt;/span&gt;&#xA;&#xA;&lt;span&gt;## each object below execute different strategy with same method&lt;/span&gt;&#xA;appA&lt;span&gt;.&lt;/span&gt;executeStrategy&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;appB&lt;span&gt;.&lt;/span&gt;executeStrategy&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;appC&lt;span&gt;.&lt;/span&gt;executeStrategy&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output of the above code will be as follow:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ConcreteStrategy &lt;span&gt;A&lt;/span&gt;&#xA;ConcreteStrategy &lt;span&gt;B&lt;/span&gt;&#xA;Default&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you want to use another strategy, replace the ConcreteStrategy instance with the strategy you want. You can add a new concrete strategy without changing anything in the context.&lt;/p&gt;&lt;h2 id=&#34;Example&#34;&gt;Example&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s design a &lt;a href=&#34;https://en.wikipedia.org/wiki/Rock_paper_scissors&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;rock paper scissors&lt;/a&gt; game using strategy pattern. You can select any strategy among rock, paper, scissors, and random to play against the computer. The below example code uses the strategy pattern to implement various strategies.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;## Changing the strategy among Rock, Paper, Scissors, and Random&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; random&#xA;&lt;span&gt;from&lt;/span&gt; abc &lt;span&gt;import&lt;/span&gt; ABC&lt;span&gt;,&lt;/span&gt; abstractmethod&#xA;&#xA;&lt;span&gt;## Strategy interface &lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Strategy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;ABC&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;@abstractmethod&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;selection&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;pass&lt;/span&gt;&#xA;&#xA;&lt;span&gt;## Concrete strategies&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Rock&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Strategy&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;## actual application will have the algorithm instead this method&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;selection&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;#34;Rock&amp;#34;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Paper&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Strategy&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;selection&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;#34;Paper&amp;#34;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Scissors&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Strategy&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;selection&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;#34;Scissors&amp;#34;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Random&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Strategy&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;selection&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        options &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;Rock&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;Paper&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;Scissors&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; random&lt;span&gt;.&lt;/span&gt;choice&lt;span&gt;(&lt;/span&gt;options&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;## Context class&lt;/span&gt;&#xA;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Game&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    strategy&lt;span&gt;:&lt;/span&gt; Strategy&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;,&lt;/span&gt; strategy&lt;span&gt;:&lt;/span&gt; Strategy &lt;span&gt;=&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; strategy &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;            self&lt;span&gt;.&lt;/span&gt;strategy &lt;span&gt;=&lt;/span&gt; strategy&#xA;        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;            self&lt;span&gt;.&lt;/span&gt;strategy &lt;span&gt;=&lt;/span&gt; Random&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;play&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;self&lt;span&gt;,&lt;/span&gt; sec&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        s1 &lt;span&gt;=&lt;/span&gt; self&lt;span&gt;.&lt;/span&gt;strategy&lt;span&gt;.&lt;/span&gt;selection&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        s2 &lt;span&gt;=&lt;/span&gt; sec&lt;span&gt;.&lt;/span&gt;strategy&lt;span&gt;.&lt;/span&gt;selection&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; s1 &lt;span&gt;==&lt;/span&gt; s2&lt;span&gt;:&lt;/span&gt;&#xA;            &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;It&amp;#39;s a tie&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;elif&lt;/span&gt; s1 &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#34;Rock&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;            &lt;span&gt;if&lt;/span&gt; s2 &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#34;Scissors&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;                &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Player 1 wins!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;                &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Player 2 wins!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;elif&lt;/span&gt; s1 &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#34;Scissors&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;            &lt;span&gt;if&lt;/span&gt; s2 &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#34;Paper&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;                &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Player 1 wins!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;                &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Player 2 wins!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;elif&lt;/span&gt; s1 &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#34;Paper&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;            &lt;span&gt;if&lt;/span&gt; s2 &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&amp;#34;Rock&amp;#34;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;                &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Player 1 wins!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;                &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Player 2 wins!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;## Example application&lt;/span&gt;&#xA;&lt;span&gt;## PLayer 1 can select his strategy&lt;/span&gt;&#xA;player1 &lt;span&gt;=&lt;/span&gt; Game&lt;span&gt;(&lt;/span&gt;Paper&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;# Player 2 gets to select&lt;/span&gt;&#xA;player2 &lt;span&gt;=&lt;/span&gt; Game&lt;span&gt;(&lt;/span&gt;Rock&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;# After the second player choice, we call the play method&lt;/span&gt;&#xA;player1&lt;span&gt;.&lt;/span&gt;play&lt;span&gt;(&lt;/span&gt;player2&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;According to the strategies chosen by the two players, the expected output would be:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Player &lt;span&gt;1&lt;/span&gt; wins&lt;span&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Test all the other cases of the game using all the other strategies. To add extra fun to the game, try creating two more strategies to the above example according to &lt;a href=&#34;https://bigbangtheory.fandom.com/wiki/Rock,_Paper,_Scissors,_Lizard,_Spock&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the Lizard-Spock expansion&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this article, you have seen where and how to use the strategy pattern in your code. You can build flexible and maintainable software applications using the strategy pattern. You can switch between algorithms at runtime according to the user&amp;#39;s decision without changing the code. But if your code only has a couple of algorithms, there is no need to use strategy. It just makes your code look complex with numerous classes and objects. The Strategy pattern can work as an alternative for conditional statements for selecting the behavior of the application. But the potential drawback of strategy pattern is that the users must know how strategies differ from each other to select what they need. So it would be best if you use the strategy pattern only when the variation in behavior of the application is relevant to the users. So try to make your software applications flexible using the strategy pattern.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/strategy-design-pattern-in-python/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn strategy design pattern to write better code in Python</summary>
  </entry>
  <entry>
    <title>Developer Day Helps Developers Build the Future of Identity</title>
    <updated>2021-08-09T16:30:00Z</updated>
    <id>tag:auth0.com,2021-08-09:/blog/developerday-helps-developers-build-the-future-of-identity/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;You’ve probably heard by now that &lt;a href=&#34;https://auth0.com/blog/developers-explore-okta-auth0/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Okta and Auth0 have joined forces&lt;/a&gt;. As a developer advocate for Auth0, I’m really excited to see how we can combine our forces to make identity even better for the developer community.&lt;/p&gt;&lt;p&gt;You might not be aware that I’m a huge fan of creating events that directly address the needs of developer communities. From the first conference I ran in 2004 to the user group meetings that are still going to this day, you can imagine my excitement when I heard we (Auth0 and Okta) were going to run an online event together!&lt;/p&gt;&lt;p&gt;This time, members of my team are taking the lead, so I&amp;#39;ll be in the same boat as many of you experiencing Developer Day as it happens, so I thought it might be helpful to share my thoughts on the event and what I’m looking forward to the most.&lt;/p&gt;&lt;p&gt;Hit up the &lt;a href=&#34;http://community.auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;community forum&lt;/a&gt; if I miss something that’s important to you — there’s so much for everyone, I’m sure you’ll help others out too.&lt;/p&gt;&lt;h2 id=&#34;What-Is-Developer-Day-&#34;&gt;What Is Developer Day?&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.okta.com/developerday/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Developer Day&lt;/a&gt; creates a space for all developers to discover how the identity space is evolving, learn best practices in privacy and security, and gain insights from developer experiences. It brings speakers from across these sectors right to your desktop, and best of all — it’s free!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Speaking of free, did you know you can also &lt;a href=&#34;https://auth0.com/signup&#34; data-amp-replace=&#34;CLIENT_ID&#34; data-amp-addparams=&#34;anonId=CLIENT_ID(cid-scope-cookie-fallback-name)&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sign up for a free Auth0 account&lt;/a&gt; at any time? Why not try it out today?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/12g1Ga4gP8X04Xn0H0nnFt/5b4ae4b06847a028d9a784a46ec48b26/cassidy-alyssa-kapehe.png&#34; alt=&#34;Developer Day speakers Cassidy Williams, Alyssa Miller, and Kapehe&#34;/&gt;&lt;/p&gt;&lt;p&gt;More specifically, it’s a one-day, single-track, virtual event, and while I’m proud to see some of my colleagues’ names in the speaker list, the lineup also features the likes of &lt;strong&gt;Cassidy Williams&lt;/strong&gt; (Director of Developer Experience at Netlify), &lt;strong&gt;Alyssa Miller&lt;/strong&gt; (Hacker, Researcher, and Security Advocate), and &lt;strong&gt;Kapehe&lt;/strong&gt; (Developer Relations at Sanity.io, and yes, you might remember she used to &lt;a href=&#34;https://auth0.com/blog/authors/kapehe-jorgenson/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;work at Auth0&lt;/a&gt; too).&lt;/p&gt;&lt;h2 id=&#34;What-Can-I-Learn-&#34;&gt;What Can I Learn?&lt;/h2&gt;&lt;p&gt;The first place I tend to go when looking at an event is the agenda, and skimming over this one, we’re in for a breadth and depth of information.&lt;/p&gt;&lt;p&gt;The keynote is where the day’s journey starts, and Alyssa’s &lt;strong&gt;updates from the world of cyber security&lt;/strong&gt; are sure to offer a great insight that sets the foundation for the day. I’m a huge advocate for helping all developers understand security principles and states of play. Even if you never have to deal with part of it yourself, you’ll always benefit from knowing why something is done and how you’re being protected.&lt;/p&gt;&lt;h2 id=&#34;From-APIs-to-IoT--Live-Demos-and-Security-Fundamentals&#34;&gt;From APIs to IoT: Live Demos and Security Fundamentals&lt;/h2&gt;&lt;p&gt;From there, we meander down a path from securing Python APIs to securing your Home Automation and IoT devices. Personally, I’m a sucker for anything IoT-related, so I’ll be paying attention to this one.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/hd4kE3aQJFlX45nvwu3xF/6496580a2a7c7da50a6591f781035097/aaron-vittorio.png&#34; alt=&#34;Developer Day speakers Aaron Parecki and Vittorio Bertocci&#34;/&gt;&lt;/p&gt;&lt;p&gt;Having grown up on YouTube videos (okay, I’m not that young...) about identity from both Aaron Parecki (or as I like to call him, Mr OAuth, but don’t tell him I told you) and Vittorio Bertocci (the man whose identity knowledge is dwarfed only by his magnificent hair), what better than a talk from both of them? The talk will not only cover where we’ve come from, but what the future of OAuth has in store for us.&lt;/p&gt;&lt;h2 id=&#34;Advanced-Topics-like-Verifiable-Credentials-and-Integration-with-Third-Parties&#34;&gt;Advanced Topics like Verifiable Credentials and Integration with Third Parties&lt;/h2&gt;&lt;p&gt;But identity isn’t just about logging in and loading your glamour shot from Gravatar. I just recently learned about verifiable credentials, and wow - it’s such a powerful concept with so many use cases, I just can’t even! The topic deserves its own article, but one example is around payments, and Uchi Uchibeke’s talk is going to be fascinating, to be sure.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/71FxWB7JqseFrDM9mF63Go/bd98bfcda1f9662b1c7de0bfab486599/uchi.png&#34; alt=&#34;Developer Day speaker Uchi Uchibeke&#34;/&gt;&lt;/p&gt;&lt;p&gt;Uchi is flanked by demos on integrating Auth0 with NextJS for securing your webapps and Okta with Kong for securing continuous integration, delivery, and deployment. I think this highlights that the team who worked on the agenda really put a lot of thought into the balance between talks that can have immediate benefit to us developers, as well as enough advanced topics to keep our creative juices flowing.&lt;/p&gt;&lt;p&gt;Talking of immediately applicable information, if you want to learn how to validate REST API authentication and authorization, the JFrog talk is for you.&lt;/p&gt;&lt;h2 id=&#34;Authentication-in-Gaming-and-Extended-Realities&#34;&gt;Authentication in Gaming and Extended Realities&lt;/h2&gt;&lt;p&gt;If you thought the IoT talk was a bit out of the box, the Gaming and XR talk might just be in a whole other room! Not literally. I mean — it’s a virtual event. There aren’t any rooms. There aren’t any boxes either, for that matter. I digress.&lt;/p&gt;&lt;p&gt;I won’t admit to being a huge gamer. I load up Poly Bridge 2 every now and then. Does Minesweeper count? One thing I do know, though, is that the authentication experience in games can be awful, and when you get into any extended reality (XR), well. Let’s not go there.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2REEADn8ARvYmok2WNAt5O/9185928ac397dced701f3cb2d252e4b9/nick.png&#34; alt=&#34;Developer Day speaker Nick Gamb&#34;/&gt;&lt;/p&gt;&lt;p&gt;We’ll let Okta&amp;#39;s Nick Gamb go there instead, as he tells us about the propensity for this industry to be targeted by hackers. Follow his advice, and maybe we can all keep playing in the knowledge that our Minedimes are safe. (See — I told you I’m not a huge gamer.)&lt;/p&gt;&lt;h2 id=&#34;Adding-Pixie-Dust-to-Enhance-Security&#34;&gt;Adding Pixie Dust to Enhance Security&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2tBAGZHtBlb4Dt1P21WzAS/2cd4c6438265b64c39bb39b89e6945b9/milecia.png&#34; alt=&#34;Developer Day speaker Milecia McGregor&#34;/&gt;&lt;/p&gt;&lt;p&gt;With two talks left for the day, I’m personally keen to catch Milecia McGregor from Mediavine talk about pixies! Stop it, autocorrect. PKCE! While most SDKs magically hide away much of the implementation, it’s still worth understanding how authentication flows work and how they can be improved. The most common OAuth flow is debatably the Authcode flow, but PKCE makes it even better! Come along to find out how. I’ll be at the front taking notes.&lt;/p&gt;&lt;h2 id=&#34;Closing-Keynote&#34;&gt;Closing Keynote&lt;/h2&gt;&lt;p&gt;It’s a packed event — thank goodness there are a couple of breaks during the day — and we finish with a closing keynote from Cassidy Williams. The agenda teases us with the mere existence of this session, and perhaps we’ll find out more before the event. In any case, I’ll not be missing it.&lt;/p&gt;&lt;p&gt;Tell us in the &lt;a href=&#34;http://community.auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;community forum&lt;/a&gt; what you’re looking forward to the most, and I hope to see some of you in the chat room on the day!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/developerday-helps-developers-build-the-future-of-identity/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">What is Developer Day? Developer Advocate, Ben Dechrai, explores the lineup and shares his thoughts from a delegate&#39;s perspective.</summary>
  </entry>
  <entry>
    <title>Here’s Something New for You: Identity OS</title>
    <updated>2021-08-09T14:54:00Z</updated>
    <id>tag:auth0.com,2021-08-09:/blog/here-s-something-new-for-you-identity-os/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Authentication has become so much more than just a login box.&lt;/p&gt;&lt;p&gt;Sure, that’s still what consumers see when they are eagerly clicking towards whatever pizza, handbag, or Playstation pre-sale link they want to get to ASAP.&lt;/p&gt;&lt;p&gt;But it’s the expectation around what is happening when they click that has increased. Consumers demand the convenience of a seamless login but also want to know that their card details are secure and that their identity is protected against any breaches of privacy.&lt;/p&gt;&lt;p&gt;In the past, it was about trade-offs. But consumers don’t expect trade-offs, so that’s why we wanted to develop an identity operating system that lets everyone —  from IT teams to devs — build authentication that works now and with whatever the future throws at it.&lt;/p&gt;&lt;p&gt;Okay, So That’s Why We Need a New Way, but...&lt;/p&gt;&lt;h2 id=&#34;What-Is-an-Identity-OS-&#34;&gt;What Is an Identity OS?&lt;/h2&gt;&lt;p&gt;The Auth0 identity operating system (identity OS) is a cloud-native, adaptable platform for development teams. Built with extensible building blocks, the Auth0 identity OS enables organizations to manage the complexities of today’s identity management while also prioritizing the security, privacy, and convenience of their end-users. &lt;/p&gt;&lt;p&gt;Striking the perfect balance among these priorities requires identity to integrate a myriad of different services and creates a significant integration hurdle. Identity ecosystem operators can now manage these complex integration needs with the flexibility of full-spectrum code (pro-code, low-code, and no code solutions). &lt;/p&gt;&lt;p&gt;Customizing to the requirements of different development teams removes their need to focus on identity infrastructure when building differentiated applications. This level of adaptability is a huge benefit for enterprises that are confronted with converging use cases and managing the eroding lines between identity for employees, business partners, and consumers.&lt;/p&gt;&lt;p&gt;Sounds good, but...&lt;/p&gt;&lt;h2 id=&#34;What-s-the-Three-Benefits-I-Should-Really-Care-About-&#34;&gt;What’s the Three Benefits I Should Really Care About?&lt;/h2&gt;&lt;h3 id=&#34;1--It-s-all-about-adaptability&#34;&gt;1. It’s all about adaptability&lt;/h3&gt;&lt;p&gt;If anyone reading this has never had to change their product roadmap quickly, then you are one of the lucky ones. With the explosion of consumer-friendly services made possible through digital applications, consumer expectations are constantly changing. That beautiful Netflix UX is what they expect from everything (even public sector services these days are stepping their game up). So the Auth0 identity OS is built to be as adaptable as your business needs to be, without forcing you into clunky legacy features that you will take years to strip out.&lt;/p&gt;&lt;h3 id=&#34;2--We-re-living-in-a-modular-world&#34;&gt;2. We’re living in a modular world&lt;/h3&gt;&lt;p&gt;The best technology is the most open. There are so many amazing integrations and APIs being made by devs, so the Auth0 identity OS provides modular identity building blocks with integrations and industry blueprints.&lt;/p&gt;&lt;h3 id=&#34;3--Breadth-rather-than-tiny-boxes&#34;&gt;3. Breadth rather than tiny boxes&lt;/h3&gt;&lt;p&gt;Identity is converging, and the lines between “use cases” are collapsing. When we talk about use cases, we mean allowing employees secure access to files and apps through Single Sign On (SSO); or allowing a subscriber of a media service access via their social accounts.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The Auth0 identity OS provides support for the full breadth of identity needs. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Traditionally the identity industry has created single-purpose products for Workforce Identity, Business Identity, and Consumer Identity. But the company needs rarely fit into simple, separated boxes. The lines between identity use cases are eroding because rarely does a company only require one type. &lt;/p&gt;&lt;h2 id=&#34;Anything-Else-I-Should-Know-&#34;&gt;Anything Else I Should Know?&lt;/h2&gt;&lt;p&gt;If you’ve made it this far, then you seem like the kind of person who would appreciate some of the more technical, finer points.&lt;/p&gt;&lt;p&gt;Here’s what the Auth0 identity OS offers:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;A customizable cut-of-the-box login experience&lt;/strong&gt; — Universal Login is our first huge benefit to developers. It’s an embeddable client experience that requires zero custom code to set up while allowing developers to quickly add capabilities to it, including social login and multi-factor authentication (MFA), without making any changes to your app’s code.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;User management built-in&lt;/strong&gt; — Auth0 gives you a secure and intuitive way of managing your user identities, including password resets, creating, blocking, and deleting users via the Users Dashboard or via the Auth0 API.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Control &amp;amp; customization&lt;/strong&gt; — Extend with code: All applications and scenarios are different. Auth0’s Actions extend the functionality of Auth0’s base product to adapt it to your company needs and integrate it with other applications and services.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Calling APIs and external resources&lt;/strong&gt; — Once your user authenticates, Auth0 will generate an ID Token and an Access Token that will be passed back to your application. The Access Token can then be used to call your API and/or any external resource.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;And-That-s-It--Now-It-s-up-to-You-to-Build-Something-Awesome&#34;&gt;And That’s It, Now It’s up to You to Build Something Awesome&lt;/h2&gt;&lt;p&gt;The Auth0 identity OS is here to give you the tools to build more convenient, secure, and private authentication experiences for your customers and employees. &lt;/p&gt;&lt;p&gt;Read more at &lt;a href=&#34;https://auth0.com/identity-os&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://auth0.com/identity-os&lt;/a&gt; &lt;/p&gt;&lt;p&gt;Or get in touch today to let us know what you think.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/here-s-something-new-for-you-identity-os/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Introducing the new way to think about and build identity</summary>
  </entry>
  <entry>
    <title>Deployment Strategies In Kubernetes</title>
    <updated>2021-08-06T14:59:00Z</updated>
    <id>tag:auth0.com,2021-08-06:/blog/deployment-strategies-in-kubernetes/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; In this article, we will learn what are the deployment strategies while deploying containers using Kubernetes container-orchestration system. At the end of this article, we will have learned how to do deployment using different ways in Kubernetes cluster. If you find this topic interesting, keep reading! &#xA;The code for this tutorial is available here on &lt;a href=&#34;https://github.com/akhil90s/auth0/tree/main/Deployment%20Strategies%20In%20Kubernetes/Declarative%20Templates&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;Quick-Introduction-to-Kubernetes&#34;&gt;Quick Introduction to Kubernetes&lt;/h2&gt;&lt;p&gt;With containerization gaining popularity over time and revolutionizing the process of building, shipping, and maintaining applications, there was a need to effectively manage these containers. Many container orchestration tools were introduced to manage the lifecycle of these containers in large-scale systems.&lt;/p&gt;&lt;p&gt;Kubernetes is one such orchestration tool that takes care of provisioning and deployment, allocation of resources, load balancing, service discovery, providing high availability, and other important aspects of any system. With this platform, we can decompose our applications into smaller systems (called microservices) while developing; then, we can compose (or orchestrate) these systems together while deploying. &lt;/p&gt;&lt;p&gt;The adoption of cloud-native approach has increased development of applications based on microservice architecture. For such applications, one of the biggest challenges organizations face is deployment. Having a proper strategy in terms of deployment is necessary. In Kubernetes, there are different ways to release an application; it is necessary to choose the right strategy to make your infrastructure reliable during an application deployment or update. For instance, in a production environment, it is always required to ensure that end-user shouldn&amp;#39;t experience any downtime. In Kubernetes orchestration, right strategy ensures proper management of different versions of container images. To sum up, this article will mainly be around the different deployment strategies in Kubernetes.&lt;/p&gt;&lt;h2 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;To follow along with this article, we will need some previous experience with Kubernetes. If new to this platform, kindly check out the &lt;a href=&#34;https://auth0.com/blog/kubernetes-tutorial-step-by-step-introduction-to-basic-concepts/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Step by Step Introduction to Basic Kubernetes Concepts&lt;/a&gt; tutorial. There, you can learn everything you need to follow the instructions here. We would also recommend going through the &lt;a href=&#34;https://kubernetes.io/docs/home/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Kubernetes documentation&lt;/a&gt; if and when required.&lt;/p&gt;&lt;p&gt;Besides that, we will need kubectl, a Command-Line Interface (CLI) tool that will enable us to control your cluster from a terminal. If you don&amp;#39;t have this tool, check the instructions on the &lt;a href=&#34;https://auth0.com/blog/kubernetes-tutorial-step-by-step-introduction-to-basic-concepts/#Installing.Kube.Control..kubectl.&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Installing Kube Control (kubectl)&lt;/a&gt;.We will also need a basic understanding of Linux and YAML.&lt;/p&gt;&lt;h2 id=&#34;What-Is-A-Deployment-In-Kubernetes-&#34;&gt;What Is A Deployment In Kubernetes?&lt;/h2&gt;&lt;p&gt;A Deployment is a resource object in Kubernetes that defines the desired state for our program. Deployments are declarative, meaning that we don&amp;#39;t dictate how to achieve the state. Instead, we declare the desired state and allow the Deployment-controller to automatically reach that end goal in the most efficient way. A deployment allows us to describe an application&amp;#39;s life cycle, such as which images to use for the app, the number of pods there should be, and the way in which they should be updated.&lt;/p&gt;&lt;h2 id=&#34;Benefits-Of-Using-Kubernetes-Deployment&#34;&gt;Benefits Of Using Kubernetes Deployment&lt;/h2&gt;&lt;p&gt;The process of manually updating containerized applications can be time consuming and tedious. A Kubernetes deployment makes this process automated and repeatable. Deployments are entirely managed by the Kubernetes backend, and the whole update process is performed on the server side without client interaction.&lt;/p&gt;&lt;p&gt;Moreover, the Kubernetes deployment controller is always monitoring the health of pods and nodes. It replaces a failed pod or bypass down nodes, ensuring continuity of critical applications.&lt;/p&gt;&lt;h2 id=&#34;Deployment-Strategies&#34;&gt;Deployment Strategies&lt;/h2&gt;&lt;h3 id=&#34;Rolling-Update-Deployment&#34;&gt;Rolling Update Deployment&lt;/h3&gt;&lt;p&gt;The rolling deployment is the default deployment strategy in Kubernetes. It replaces pods, one by one, of the previous version of our application with pods of the new version without any cluster downtime. A rolling deployment slowly replaces instances of the previous version of an application with instances of the new version of the application.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/LxDl5amQZC2znii0JLZuw/87f42c35b5ba35ac1550f572d23ba943/01_rolling-deployment.jpg&#34; alt=&#34;Alt text&#34;/&gt;&lt;/p&gt;&lt;p&gt;When using the RollingUpdate strategy, there are two more options that let us fine-tune the update process:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;maxSurge&lt;/strong&gt;: &#xA;The number of pods that can be created above the desired amount of pods during an update. This can be an absolute number or percentage of the replicas count. The default is 25%.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;maxUnavailable&lt;/strong&gt;: &#xA;The number of pods that can be unavailable during the update process. This can be an absolute number or a percentage of the replicas count; the default is 25%.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;First, we create our &lt;em&gt;rollingupdate.yaml&lt;/em&gt; deployment template. In the template below, we set &lt;em&gt;maxSurge&lt;/em&gt; to 2 and &lt;em&gt;maxUnavailable&lt;/em&gt; to 1.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; apps/v1&#xA;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Deployment&#xA;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&#xA;  &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1709&lt;/span&gt;&#xA;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;strategy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; RollingUpdate&#xA;    &lt;span&gt;rollingUpdate&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;maxSurge&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&#xA;      &lt;span&gt;maxUnavailable&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&#xA;  &lt;span&gt;selector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;matchLabels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; web&lt;span&gt;-&lt;/span&gt;app&lt;span&gt;-&lt;/span&gt;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&#xA;      &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1709&lt;/span&gt;&#xA;  &lt;span&gt;replicas&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&#xA;  &lt;span&gt;template&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; web&lt;span&gt;-&lt;/span&gt;app&lt;span&gt;-&lt;/span&gt;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&#xA;        &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1709&lt;/span&gt;&#xA;    &lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;containers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; web&lt;span&gt;-&lt;/span&gt;app&lt;span&gt;-&lt;/span&gt;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&#xA;          &lt;span&gt;image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; hello&lt;span&gt;-&lt;/span&gt;world&lt;span&gt;:&lt;/span&gt;nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1709&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can then create the deployment using the kubectl command.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl apply &lt;span&gt;-&lt;/span&gt;f rollingupdate&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once we have a deployment template, we can provide a way to access the instances of the deployment by creating a Service. Note that we are deploying the image &lt;em&gt;hello-world&lt;/em&gt; with version &lt;em&gt;nanoserver-1709&lt;/em&gt;. So in this case we have two labels, &amp;#39;name= &lt;em&gt;web-app-rollingupdate-strategy&lt;/em&gt;&amp;#39; and &amp;#39;version=&lt;em&gt;nanoserver-1709&lt;/em&gt;&amp;#39;. We will set these as the label selector for the service below. Save this to &amp;#39;&lt;em&gt;service.yaml&lt;/em&gt;&amp;#39; file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; v1&#xA;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Service&#xA;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &#xA;  &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; web&lt;span&gt;-&lt;/span&gt;app&lt;span&gt;-&lt;/span&gt;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&#xA;  &lt;span&gt;labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &#xA;    &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; web&lt;span&gt;-&lt;/span&gt;app&lt;span&gt;-&lt;/span&gt;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&#xA;    &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1709&lt;/span&gt;&#xA;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;ports&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; http&#xA;      &lt;span&gt;port&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;&#xA;      &lt;span&gt;targetPort&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;&#xA;  &lt;span&gt;selector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &#xA;    &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; web&lt;span&gt;-&lt;/span&gt;app&lt;span&gt;-&lt;/span&gt;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&#xA;    &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1709&lt;/span&gt;&#xA;  &lt;span&gt;type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; LoadBalancer&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now creating the service will create a load balancer that is accessible outside the cluster.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl apply &lt;span&gt;-&lt;/span&gt;f service&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run &lt;em&gt;kubectl get deployments&lt;/em&gt; to check if the Deployment is created. If the Deployment is still being created, the output should be similar to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl &lt;span&gt;get&lt;/span&gt; deployments&#xA;&#xA;&lt;span&gt;NAME&lt;/span&gt;                             &lt;span&gt;READY&lt;/span&gt;   &lt;span&gt;UP&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;TO&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;DATE&lt;/span&gt;   &lt;span&gt;AVAILABLE&lt;/span&gt;   &lt;span&gt;AGE&lt;/span&gt;&#xA;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy   &lt;span&gt;0&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt;            &lt;span&gt;0&lt;/span&gt;           &lt;span&gt;1&lt;/span&gt;s&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we run the &lt;em&gt;kubectl get deployments&lt;/em&gt; again a few seconds later. The output should be similar to this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl &lt;span&gt;get&lt;/span&gt; deployments&#xA;&#xA;&lt;span&gt;NAME&lt;/span&gt;                             &lt;span&gt;READY&lt;/span&gt;   &lt;span&gt;UP&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;TO&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;DATE&lt;/span&gt;   &lt;span&gt;AVAILABLE&lt;/span&gt;   &lt;span&gt;AGE&lt;/span&gt;&#xA;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy   &lt;span&gt;3&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt;            &lt;span&gt;0&lt;/span&gt;           &lt;span&gt;7&lt;/span&gt;s&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To see the ReplicaSet (rs) created by the Deployment, run &lt;em&gt;kubectl get rs&lt;/em&gt;. The output should be similar to this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl &lt;span&gt;get&lt;/span&gt; rs&#xA;&#xA;&lt;span&gt;NAME&lt;/span&gt;                                    &lt;span&gt;DESIRED&lt;/span&gt;   &lt;span&gt;CURRENT&lt;/span&gt;   &lt;span&gt;READY&lt;/span&gt;   &lt;span&gt;AGE&lt;/span&gt;&#xA;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&lt;span&gt;-&lt;/span&gt;&lt;span&gt;87875&lt;/span&gt;f5897   &lt;span&gt;3&lt;/span&gt;         &lt;span&gt;3&lt;/span&gt;         &lt;span&gt;3&lt;/span&gt;       &lt;span&gt;18&lt;/span&gt;s&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To see the 3 pods running for deployment, run &lt;em&gt;kubectl get pods&lt;/em&gt;. The created ReplicaSet ensures that there are three Pods running. The output should be similar to the below.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl &lt;span&gt;get&lt;/span&gt; pods&#xA;&#xA;&lt;span&gt;NAME&lt;/span&gt;                                      &lt;span&gt;READY&lt;/span&gt;     &lt;span&gt;STATUS&lt;/span&gt;    &lt;span&gt;RESTARTS&lt;/span&gt;   &lt;span&gt;AGE&lt;/span&gt;       &#xA;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&lt;span&gt;-&lt;/span&gt;&lt;span&gt;87875&lt;/span&gt;f5897&lt;span&gt;-&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;i7o   &lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;       Running   &lt;span&gt;0&lt;/span&gt;          &lt;span&gt;12&lt;/span&gt;s       &#xA;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&lt;span&gt;-&lt;/span&gt;&lt;span&gt;87875&lt;/span&gt;f5897&lt;span&gt;-&lt;/span&gt;abszs   &lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;       Running   &lt;span&gt;0&lt;/span&gt;          &lt;span&gt;12&lt;/span&gt;s       &#xA;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&lt;span&gt;-&lt;/span&gt;&lt;span&gt;87875&lt;/span&gt;f5897&lt;span&gt;-&lt;/span&gt;qazrt   &lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;       Running   &lt;span&gt;0&lt;/span&gt;          &lt;span&gt;12&lt;/span&gt;s&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s update the &lt;em&gt;rollingupdate.yaml&lt;/em&gt; deployment template to use the &lt;em&gt;hello-world:nanoserver-1809&lt;/em&gt; image instead of the &lt;em&gt;hello-world:nanoserver-1709&lt;/em&gt; image. Then update the image of the existing running deployment using the kubectl command.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl &lt;span&gt;set&lt;/span&gt; image deployment&lt;span&gt;/&lt;/span&gt;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy web&lt;span&gt;-&lt;/span&gt;app&lt;span&gt;-&lt;/span&gt;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&lt;span&gt;=&lt;/span&gt;hello&lt;span&gt;-&lt;/span&gt;world&lt;span&gt;:&lt;/span&gt;nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1809&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;record&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output is similar to the below.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;deployment&lt;span&gt;.&lt;/span&gt;apps&lt;span&gt;/&lt;/span&gt;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy image updated&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are now deploying the image &lt;em&gt;hello-world&lt;/em&gt; with version &lt;em&gt;nanoserver-1809&lt;/em&gt;. So, in this case, we will have to update the labels in the &amp;#39;&lt;em&gt;service.yaml&lt;/em&gt;&amp;#39;. The label will be updated to &amp;#39;version=&lt;em&gt;nanoserver-1809&lt;/em&gt;&amp;#39;. We will run the below kubectl command again to update the service so that it can pick new pods running on the newer image.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl apply &lt;span&gt;-&lt;/span&gt;f service&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To see the rollout status run the kubectl command below.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl rollout status deployment&lt;span&gt;/&lt;/span&gt;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&#xA;&#xA;Waiting &lt;span&gt;for&lt;/span&gt; rollout to finish&lt;span&gt;:&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; out &lt;span&gt;of&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;replicas&lt;/span&gt; have been updated&lt;span&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run again to verify the rollout is successful.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl rollout status deployment&lt;span&gt;/&lt;/span&gt;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&#xA;&#xA;deployment &lt;span&gt;&amp;#34;rollingupdate-strategy&amp;#34;&lt;/span&gt; successfully rolled out&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After the rollout is successful, we can view the Deployment by running the command &lt;em&gt;kubectl get deployments&lt;/em&gt;. The output is similar to this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl &lt;span&gt;get&lt;/span&gt; deployments&#xA;&#xA;&lt;span&gt;NAME&lt;/span&gt;                             &lt;span&gt;READY&lt;/span&gt;   &lt;span&gt;UP&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;TO&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;DATE&lt;/span&gt;   &lt;span&gt;AVAILABLE&lt;/span&gt;   &lt;span&gt;AGE&lt;/span&gt;&#xA;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy   &lt;span&gt;3&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt;            &lt;span&gt;0&lt;/span&gt;           &lt;span&gt;7&lt;/span&gt;s&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run &lt;em&gt;kubectl get rs&lt;/em&gt; to see that the Deployment is updated. The new Pods are created in a new ReplicaSet and are scaled up to 3 replicas. The old ReplicaSet is scaled down to 0 replicas.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl &lt;span&gt;get&lt;/span&gt; rs&#xA;&#xA;&lt;span&gt;NAME&lt;/span&gt;                                    &lt;span&gt;DESIRED&lt;/span&gt;   &lt;span&gt;CURRENT&lt;/span&gt;   &lt;span&gt;READY&lt;/span&gt;   &lt;span&gt;AGE&lt;/span&gt;&#xA;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&lt;span&gt;-&lt;/span&gt;&lt;span&gt;87875&lt;/span&gt;f5897   &lt;span&gt;3&lt;/span&gt;         &lt;span&gt;3&lt;/span&gt;         &lt;span&gt;3&lt;/span&gt;       &lt;span&gt;55&lt;/span&gt;s&#xA;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&lt;span&gt;-&lt;/span&gt;&lt;span&gt;89999&lt;/span&gt;f7895   &lt;span&gt;0&lt;/span&gt;         &lt;span&gt;0&lt;/span&gt;         &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;12&lt;/span&gt;s&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run &lt;em&gt;kubectl get pods&lt;/em&gt; it should now show only the new Pods in the new ReplicaSet.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl &lt;span&gt;get&lt;/span&gt; pods&#xA;&#xA;&lt;span&gt;NAME&lt;/span&gt;                                      &lt;span&gt;READY&lt;/span&gt;     &lt;span&gt;STATUS&lt;/span&gt;    &lt;span&gt;RESTARTS&lt;/span&gt;   &lt;span&gt;AGE&lt;/span&gt;       &#xA;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&lt;span&gt;-&lt;/span&gt;&lt;span&gt;89999&lt;/span&gt;f7895&lt;span&gt;-&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;i7o   &lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;       Running   &lt;span&gt;0&lt;/span&gt;          &lt;span&gt;12&lt;/span&gt;s       &#xA;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&lt;span&gt;-&lt;/span&gt;&lt;span&gt;89999&lt;/span&gt;f7895&lt;span&gt;-&lt;/span&gt;abszs   &lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;       Running   &lt;span&gt;0&lt;/span&gt;          &lt;span&gt;12&lt;/span&gt;s       &#xA;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&lt;span&gt;-&lt;/span&gt;&lt;span&gt;89999&lt;/span&gt;f7895&lt;span&gt;-&lt;/span&gt;qazrt   &lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;       Running   &lt;span&gt;0&lt;/span&gt;          &lt;span&gt;12&lt;/span&gt;s&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The kubectl&amp;#39;s rollout command is very useful here. We can use it to check how our deployment is doing. The command, by default, waits until all of the Pods in the deployment have been started successfully. When the deployment succeeds, the command exits with return code zero to indicate success. If the deployment fails, the command exits with a non-zero code.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl rollout status deployment rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&#xA;&#xA;Waiting &lt;span&gt;for&lt;/span&gt; deployment &lt;span&gt;&amp;#34;rollingupdate-strategy&amp;#34;&lt;/span&gt; rollout to finish&lt;span&gt;:&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;of&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; updated replicas are available…&#xA;Waiting &lt;span&gt;for&lt;/span&gt; deployment &lt;span&gt;&amp;#34;rollingupdate-strategy&amp;#34;&lt;/span&gt; rollout to finish&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;of&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; updated replicas are available…&#xA;Waiting &lt;span&gt;for&lt;/span&gt; deployment &lt;span&gt;&amp;#34;rollingupdate-strategy&amp;#34;&lt;/span&gt; rollout to finish&lt;span&gt;:&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;of&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; updated replicas are available…&#xA;&#xA;deployment &lt;span&gt;&amp;#34;rollingupdate-strategy&amp;#34;&lt;/span&gt; successfully rolled out&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the deployment fails in Kubernetes, the deployment process stops, but the pods from the failed deployment are kept around. On deployment failure, our environment may contain pods from both the old and new deployments. To get back to a stable, working state, we can use the rollout undo command to bring back the working pods and clean up the failed deployment.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl rollout undo deployment rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&#xA;&#xA;deployment&lt;span&gt;.&lt;/span&gt;extensions&lt;span&gt;/&lt;/span&gt;rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we will verify the status of the deployment again.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl rollout status deployment rollingupdate&lt;span&gt;-&lt;/span&gt;strategy&#xA;&#xA;deployment &lt;span&gt;&amp;#34;rollingupdate-strategy&amp;#34;&lt;/span&gt; successfully rolled out&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In order for Kubernetes to know when an application is ready, it needs some help from the application. Kubernetes uses readiness probes to examine how the application is doing. Once an application instance starts responding to the readiness probe with a positive response, the instance is considered ready for use. Readiness probes tell Kubernetes when an application is ready, but not if the application will ever become ready. If the application keeps failing, it may never respond with a positive response to Kubernetes. &lt;/p&gt;&lt;p&gt;A rolling deployment typically waits for new pods to become ready via a readiness check before scaling down the old components. If a significant issue occurs, the rolling deployment can be aborted. If there is a problem, the rolling update or deployment can be aborted without bringing the whole cluster down.&lt;/p&gt;&lt;h3 id=&#34;Recreate-Deployment&#34;&gt;Recreate Deployment&lt;/h3&gt;&lt;p&gt;In recreate deployment, we fully scale down the existing application version before we scale up the new application version. In the below diagram, Version 1 represents the current application version, and Version 2 represents the new application version. When updating the current application version, we first scale down the existing replicas of Version 1 to zero and then concurrently deploy replicas with the new version.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1FVQm06ERSn67QJkI2zlfj/49ef78e46445aa7e6a7e54349e85e2b7/02_recreate-deployment.jpg&#34; alt=&#34;Alt text&#34;/&gt;&lt;/p&gt;&lt;p&gt;The below template shows deployment using the recreate strategy: First, we create our &lt;em&gt;recreate&lt;/em&gt; deployment by saving the following yaml to a file recreate.yaml&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; apps/v1&#xA;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Deployment&#xA;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; recreate&lt;span&gt;-&lt;/span&gt;strategy&#xA;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;strategy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Recreate&#xA;  &lt;span&gt;selector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;matchLabels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; web&lt;span&gt;-&lt;/span&gt;app&lt;span&gt;-&lt;/span&gt;recreate&lt;span&gt;-&lt;/span&gt;strategy&#xA;      &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1809&lt;/span&gt;&#xA;  &lt;span&gt;replicas&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&#xA;  &lt;span&gt;template&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; web&lt;span&gt;-&lt;/span&gt;app&lt;span&gt;-&lt;/span&gt;recreate&lt;span&gt;-&lt;/span&gt;strategy&#xA;    &lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;containers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; web&lt;span&gt;-&lt;/span&gt;app&lt;span&gt;-&lt;/span&gt;recreate&lt;span&gt;-&lt;/span&gt;strategy&#xA;          &lt;span&gt;image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; hello&lt;span&gt;-&lt;/span&gt;world&lt;span&gt;:&lt;/span&gt;nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1809&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can then create the deployment using the kubectl command.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl apply &lt;span&gt;-&lt;/span&gt;f recreate&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once we have a deployment template, we can provide a way to access the instances of the deployment by creating a Service. Note that we are deploying the image &lt;em&gt;hello-world&lt;/em&gt; with version &lt;em&gt;nanoserver-1809&lt;/em&gt;. So in this case we have two labels, &amp;#39;name= &lt;em&gt;web-app-recreate-strategy&lt;/em&gt;&amp;#39; and &amp;#39;version=&lt;em&gt;nanoserver-1809&lt;/em&gt;&amp;#39;. We will set these as the label selector for the service below. Save this to &lt;em&gt;service.yaml&lt;/em&gt; file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; v1&#xA;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Service&#xA;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &#xA;  &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; web&lt;span&gt;-&lt;/span&gt;app&lt;span&gt;-&lt;/span&gt;recreate&lt;span&gt;-&lt;/span&gt;strategy&#xA;  &lt;span&gt;labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &#xA;    &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; web&lt;span&gt;-&lt;/span&gt;app&lt;span&gt;-&lt;/span&gt;recreate&lt;span&gt;-&lt;/span&gt;strategy&#xA;    &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1809&lt;/span&gt;&#xA;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;ports&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; http&#xA;      &lt;span&gt;port&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;&#xA;      &lt;span&gt;targetPort&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;&#xA;  &lt;span&gt;selector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &#xA;    &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; web&lt;span&gt;-&lt;/span&gt;app&lt;span&gt;-&lt;/span&gt;recreate&lt;span&gt;-&lt;/span&gt;strategy&#xA;    &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1809&lt;/span&gt;&#xA;  &lt;span&gt;type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; LoadBalancer&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now creating the service will create a load balancer that is accessible outside the cluster.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl apply &lt;span&gt;-&lt;/span&gt;f service&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The recreate method involves some downtime during the update process. Downtime is not an issue for applications that can handle maintenance windows or outages. However, if there is a mission-critical application with high service level agreements (SLAs) and availability requirements, choosing a different deployment strategy would be the right approach. Recreate deployment is generally used in the development stage by the developers as it is easy to set up, and the application state is entirely renewed with the new version. What&amp;#39;s more, we don&amp;#39;t have to manage more than one application version in parallel, and therefore we avoid backward compatibility challenges for data and applications. &lt;/p&gt;&lt;h3 id=&#34;Blue-Green-Deployment&#34;&gt;Blue-Green Deployment&lt;/h3&gt;&lt;p&gt;In a blue/green deployment strategy (sometimes also referred to as red/black), the blue represents the current application version, and green represents the new application version. In this, only one version is live at a time. Traffic is routed to the blue deployment while the green deployment is created and tested. After we are finished testing, we then route traffic to the new version.&lt;/p&gt;&lt;p&gt;After the deployment succeeds, we can either keep the blue deployment for a possible rollback or decommission it. Alternatively, it is possible to deploy a newer version of the application on these instances. In that case, the current (blue) environment serves as the staging area for the next release.&lt;/p&gt;&lt;p&gt;This technique can eliminate downtime as we faced in the recreate deployment strategy. In addition, blue-green deployment reduces risk: if something unexpected happens with our new version on Green, we can immediately roll back to the last version by switching back to Blue. There is instant rollout/rollback. We can also avoid versioning issues; the entire application state is changed in one deployment.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/5vHYgyomFFI2h4okBQyUTH/98d685900acef7c6c1abdea444b947e1/03_blue-green.jpg&#34; alt=&#34;Alt text&#34;/&gt;&lt;/p&gt;&lt;p&gt;The Blue-Green deployment is expensive as it requires double the resources. A proper test of the entire platform should be done before releasing it to production. Moreover, handling stateful applications is hard.&lt;/p&gt;&lt;p&gt;First, we create our &lt;em&gt;blue&lt;/em&gt; deployment by saving the following yaml to a &amp;#39;blue.yaml&amp;#39; file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; apps/v1&#xA;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Deployment&#xA;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; blue&lt;span&gt;-&lt;/span&gt;deployment&#xA;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;selector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;matchLabels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; blue&lt;span&gt;-&lt;/span&gt;deployment&#xA;      &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1709&lt;/span&gt;&#xA;  &lt;span&gt;replicas&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&#xA;  &lt;span&gt;template&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; blue&lt;span&gt;-&lt;/span&gt;deployment&#xA;        &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1709&lt;/span&gt;&#xA;    &lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;containers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; blue&lt;span&gt;-&lt;/span&gt;deployment&#xA;          &lt;span&gt;image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; hello&lt;span&gt;-&lt;/span&gt;world&lt;span&gt;:&lt;/span&gt;nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1709&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can then create the deployment using the kubectl command.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl apply &lt;span&gt;-&lt;/span&gt;f blue&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once we have a deployment template, we can provide a way to access the instances of the deployment by creating a Service. Note that we are deploying the image &lt;em&gt;hello-world&lt;/em&gt; with version &lt;em&gt;nanoserver-1809&lt;/em&gt;. So in this case we have two labels, &amp;#39;name= &lt;em&gt;blue-deployment&lt;/em&gt;&amp;#39; and &amp;#39;version=&lt;em&gt;nanoserver-1709&lt;/em&gt;&amp;#39;. We will set these as the label selector for the service below. Save this to &lt;em&gt;service.yaml&lt;/em&gt; file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; v1&#xA;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Service&#xA;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &#xA;  &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; blue&lt;span&gt;-&lt;/span&gt;green&lt;span&gt;-&lt;/span&gt;service&#xA;  &lt;span&gt;labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &#xA;    &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; blue&lt;span&gt;-&lt;/span&gt;deployment&#xA;    &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1709&lt;/span&gt;&#xA;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;ports&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; http&#xA;      &lt;span&gt;port&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;&#xA;      &lt;span&gt;targetPort&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;&#xA;  &lt;span&gt;selector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &#xA;    &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; blue&lt;span&gt;-&lt;/span&gt;deployment&#xA;    &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1709&lt;/span&gt;&#xA;  &lt;span&gt;type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; LoadBalancer&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now creating the service will create a load balancer that is accessible outside the cluster.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl apply &lt;span&gt;-&lt;/span&gt;f service&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We now have the below setup in place.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/2mRPpKDjZb7W9UPlmh0dlF/eec0754c5c458b9017bda1ca7c863bc9/04_blue.jpg&#34; alt=&#34;Alt text&#34;/&gt;&lt;/p&gt;&lt;p&gt;For the &lt;em&gt;green&lt;/em&gt; deployment we will deploy a new deployment in parallel with the &lt;em&gt;blue&lt;/em&gt; deployment. The below template is a content of the &lt;code&gt;green&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; apps/v1&#xA;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Deployment&#xA;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; green&lt;span&gt;-&lt;/span&gt;deployment&#xA;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;selector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;matchLabels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; green&lt;span&gt;-&lt;/span&gt;deployment&#xA;      &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1809&lt;/span&gt;&#xA;  &lt;span&gt;replicas&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&#xA;  &lt;span&gt;template&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; green&lt;span&gt;-&lt;/span&gt;deployment&#xA;        &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1809&lt;/span&gt;&#xA;    &lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;containers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; green&lt;span&gt;-&lt;/span&gt;deployment&#xA;          &lt;span&gt;image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; hello&lt;span&gt;-&lt;/span&gt;world&lt;span&gt;:&lt;/span&gt;nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1809&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that image &lt;em&gt;hello-world:nanoserver-1809&lt;/em&gt; tag-name has changed to 2. So we have made a separate deployment with two labels, name= &lt;em&gt;green-deployment&lt;/em&gt; and version=&lt;em&gt;nanoserver-1809&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl apply &lt;span&gt;-&lt;/span&gt;f green&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To cut over to the &lt;em&gt;green&lt;/em&gt; deployment, we will update the selector for the existing service. Edit the service.yaml and change the selector version to &lt;em&gt;2&lt;/em&gt; and name to &lt;em&gt;green-deployemnt&lt;/em&gt;. That will make it so that it matches the pods on the &lt;em&gt;green&lt;/em&gt;&amp;#34; deployment.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; v1&#xA;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Service&#xA;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &#xA;  &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; blue&lt;span&gt;-&lt;/span&gt;green&lt;span&gt;-&lt;/span&gt;service&#xA;  &lt;span&gt;labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &#xA;    &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; green&lt;span&gt;-&lt;/span&gt;deployment&#xA;    &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1809&lt;/span&gt;&#xA;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;  &lt;span&gt;ports&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; http&#xA;      &lt;span&gt;port&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;&#xA;      &lt;span&gt;targetPort&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;&#xA;  &lt;span&gt;selector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &#xA;    &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; green&lt;span&gt;-&lt;/span&gt;deployment&#xA;    &lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; nanoserver&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1809&lt;/span&gt;&#xA;  &lt;span&gt;type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; LoadBalancer&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We create the service  again using the kubectl command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ kubectl apply &lt;span&gt;-&lt;/span&gt;f service&lt;span&gt;.&lt;/span&gt;yaml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3vxIwBo5DZHGWoELo2khCL/aa6a898dcbc97234cc29f6bac6f31c52/05_green.jpg&#34; alt=&#34;Alt text&#34;/&gt;&lt;/p&gt;&lt;p&gt;Hence concluding, we can see the blue-green deployment is all-or-nothing, unlike a rolling update deployment, where we aren&amp;#39;t able to gradually roll out the new version. All users will receive the update at the same time, although existing sessions will be allowed to finish their work on the old instances. Hence the stakes are a bit higher than everything should work once we initiate the change. It also requires allocating more server resources since we will need to run two copies of every pod.&lt;/p&gt;&lt;p&gt;Fortunately, the rollback procedure is just as easy: We simply have to flip the switch again, and the previous version is swapped back into place. That&amp;#39;s because the old version is still running on the old pods. It is simply that traffic is no longer being routed to them. When we are confident that the new version is here to stay, we should decommission those pods.&lt;/p&gt;&lt;h3 id=&#34;Canary-Deployment&#34;&gt;Canary Deployment&lt;/h3&gt;&lt;p&gt;The canary update strategy is a partial update process that allows us to test our new program version on a real user base without a commitment to a full rollout. Similar to blue/green deployments, but they are more controlled, and they use a more progressive delivery where deployment is in a phased approach. There are a number of strategies that fall under the umbrella of canary, including dark launches or A/B testing.&lt;/p&gt;&lt;p&gt;In canary deployment, the new version of the application is gradually deployed to the Kubernetes cluster while getting a very small amount of live traffic (i.e., a subset of live users are connecting to the new version while the rest are still using the previous version).In this approach, we have two almost identical servers: one that goes to all the current active users and another with the new features that gets rolled out to a subset of users and then compared. When no errors are reported and the confidence increases, the new version can gradually roll out to the rest of the infrastructure. In the end, all live traffic goes to canaries, making the canary version the new &lt;em&gt;production version&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;The below picture shows the most straightforward and simple way to do a canary deployment. A new version is deployed to a subset of servers.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4thRldlIQuLdnmwSjEcmIq/85ed566fcaa6038e74de978112a79df0/06_canary-deployment-1.jpg&#34; alt=&#34;Alt text&#34;/&gt;&lt;/p&gt;&lt;p&gt;While this happens, we watch how the upgraded machines are doing. We check for errors and performance problems, and we listen for user feedback. As we grow confident in the canary, we continue installing it on the rest of the machines until they are all running the latest release.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4dsHDsWT30QXUL17T0uphC/5048ee861491e78ae2baa43682446a83/07_canary-deployment-2.png&#34; alt=&#34;Alt text&#34;/&gt;&lt;/p&gt;&lt;p&gt;We have to take into account various things when planning a canary deployment:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;strong&gt;Stages&lt;/strong&gt;: how many users will we send to the canary at first, and in how many stages.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Duration&lt;/strong&gt;: how long will we plan to run the canary? Canary releases are different, as we must wait for enough clients to be updated before we can assess the results. This can happen over several days or even weeks.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Metrics&lt;/strong&gt;: what are the metrics to record to analyze progress, including application performance and error reports? Well-chosen parameters are essential for a successful canary deployment. For instance, a very simple way to measure deployment is through HTTP status codes. We can have a simple ping service that returns 200 when the deployment is successful. It will return server end error (5xx) if there is an issue in the deployment.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Evaluation&lt;/strong&gt;: what criteria will we use to determine if the canary is successful&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A canary is used in scenarios where we have to test a new functionality typically on the backend of our application. Canary deployment should be used when we are not 100% confident in the new version; we predict we might have a low chance of failure. This strategy is usually used when we have a major update, like adding a new functionality or experimental feature.&lt;/p&gt;&lt;h2 id=&#34;Summary-K8s-Deployments-Strategies&#34;&gt;Summary K8s Deployments Strategies&lt;/h2&gt;&lt;p&gt;To sum up, there are different ways to deploy an application; when releasing to development/staging environments, a recreate or ramped deployment is usually a good choice. When it comes to production, a ramped or blue/green deployment is usually a good fit, but proper testing of the new platform is necessary. If we are not confident with the stability of the platform and what could be the impact of releasing a new software version, then a canary release should be the way to go. By doing so, we let the consumer test the application and its integration into the platform. In this article, we have only scratched the surface of the capabilities of Kubernetes deployments. By combining deployments with all the other Kubernetes features, users can create more robust containerized applications to suit any need.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/deployment-strategies-in-kubernetes/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn what are the different deployment strategies available in Kubernetes and how to use them.</summary>
  </entry>
  <entry>
    <title>Spring Cloud Messaging With AWS and LocalStack</title>
    <updated>2021-08-05T14:53:00Z</updated>
    <id>tag:auth0.com,2021-08-05:/blog/spring-cloud-messaging-with-aws-and-localstack/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; This article demonstrates the use of LocalStack and how it can simulate many of the AWS services locally. We will use Spring Cloud Messaging to create a publisher-subscriber sample application. We will use Amazon SNS and SQS to do that.&lt;/p&gt;&lt;p&gt;The sample app can be found &lt;a href=&#34;https://github.com/maniish-jaiin/spring-cloud-messaging-sample&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Spring-Cloud-Messaging-With-AWS-and-LocalStack&#34;&gt;Spring Cloud Messaging With AWS and LocalStack&lt;/h2&gt;&lt;h3 id=&#34;Introduction&#34;&gt;Introduction&lt;/h3&gt;&lt;p&gt;With an ever-growing demand for cloud services, Spring provides amazing support to integrate with Cloud providers and relevant services. &lt;a href=&#34;https://spring.io/projects/spring-cloud-aws&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring Cloud for Amazon Web Services&lt;/a&gt; is one such project that makes it easy to integrate with AWS services using familiar Spring APIs.&lt;/p&gt;&lt;p&gt;In this article, we will look into a simple application that acts as a message producer and a consumer using Amazon SNS and SQS. On top of that, we will not create an AWS account or use AWS services directly from AWS. We will instead use LocalStack, which will allow us to create AWS resources locally.&lt;/p&gt;&lt;p&gt;The sample app can be found &lt;a href=&#34;https://github.com/maniish-jaiin/spring-cloud-messaging-sample&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;Pre-requisites-&#34;&gt;Pre-requisites:&lt;/h3&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Basic knowledge of AWS, &lt;a href=&#34;https://github.com/aws/aws-cli&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;AWS CLI&lt;/a&gt;, and related services like Amazon SQS.&lt;/li&gt;&lt;li&gt;Basic knowledge of &lt;a href=&#34;https://docs.oracle.com/en/java/javase/11/docs/api/index.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Java 11&lt;/a&gt; and Spring Boot &lt;code&gt;&lt;span&gt;2.4&lt;/span&gt;&lt;span&gt;.7&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Docker&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/compose/install/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Docker Compose&lt;/a&gt; for the setup.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;Introduction-to-Amazon-SNS-and-SQS&#34;&gt;Introduction to Amazon SNS and SQS&lt;/h2&gt;&lt;h3 id=&#34;Amazon-SNS&#34;&gt;Amazon SNS&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/sns/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Amazon SNS&lt;/a&gt; is an acronym for Simple Notification Service. It provides developers with the highly scalable, cost-effective, and flexible capability to publish messages from an application and send them to other applications. It follows the pub-sub architecture to deliver messages from publishers to the subscribers. It is a highly decoupled service that can be linked to a variety of sources. It can be used to publish emails, messages to SQS, SMS, etc.&lt;/p&gt;&lt;p&gt;The Publisher (e.g., CloudWatch Alarm, S3 events, SNS, Micro-service) publishes the message on a Topic which is then published to all the Subscribers (web servers, email addresses, Amazon SQS queues, AWS Lambda)  of that particular topic.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/35P87aEWHIcpTOQxYTGWbz/03840ff6c13fdc4a94552ec8188c131e/sns_architecture.jpg&#34; alt=&#34;SNS Architecture&#34;/&gt;&lt;/p&gt;&lt;h3 id=&#34;Amazon-SQS&#34;&gt;Amazon SQS&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/sqs/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Amazon SQS&lt;/a&gt; is an acronym for Simple Queue Service, and the names convey a lot as it is really simple to use as it is a fully managed service from AWS. It follows similar messaging semantics of the producer putting a message on the queue and consumer reading from it.&lt;/p&gt;&lt;p&gt;Once consumed, the message has to be deleted from the queue. Deleting is important because SQS assumes that processing can fail. To prevent that, after the consumer receives a message, it is hidden from the queue for a defined period of time, and after that, if it is not deleted, the message shows up in the queue again.&lt;/p&gt;&lt;p&gt;Both SNS and SQS are fully managed lightweight, easy-to-use APIs. You can use Amazon SQS and SNS to decouple and scale microservices, distributed systems, and serverless applications and improve reliability.&lt;/p&gt;&lt;h3 id=&#34;Introduction-to-LocalStack&#34;&gt;Introduction to LocalStack&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/localstack/localstack&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;LocalStack&lt;/a&gt; is an open-source mock of the real AWS services. It provides a testing environment on our local machine with the same APIs as the real AWS services. We switch to using the real AWS services only in the integration environment and beyond. There are plenty of reasons to use LocalStack, few out of which are more important than others, such as:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;The ability to play with AWS services without interacting with AWS. All developers love to get their hands dirty, and what better way to learn something than to try. Localstack allows you to play with S3, SQS, DynamoDB, SNS, and the list goes on.&lt;/li&gt;&lt;li&gt;The ability to test the applications in the local dev environment. You can write integration tests for your application using LocalStack, driving down your costs and increasing the confidence in your code.&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;Spring-Cloud-Messaging-app-linked-to-LocalStack&#34;&gt;Spring Cloud Messaging app linked to LocalStack&lt;/h3&gt;&lt;p&gt;Spring Cloud AWS provides &lt;a href=&#34;https://aws.amazon.com/sqs/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Amazon SQS&lt;/a&gt; and &lt;a href=&#34;https://aws.amazon.com/sns/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Amazon SNS&lt;/a&gt; integration that simplifies the publication and consumption of messages. It reduces a lot of boilerplate code and does the heavy lifting for configuring and SNS and SQS. Let&amp;#39;s set up a Spring boot project with support for SNS and SQS.&lt;/p&gt;&lt;h4 id=&#34;Setting-up-Spring-Boot-app&#34;&gt;Setting up Spring Boot app&lt;/h4&gt;&lt;p&gt;Let us first create a Spring Boot project with the help of the &lt;a href=&#34;https://start.spring.io/#!type=maven-project&amp;amp;language=java&amp;amp;platformVersion=2.4.5.RELEASE&amp;amp;packaging=jar&amp;amp;jvmVersion=11&amp;amp;groupId=io.pratik&amp;amp;artifactId=springcloudsqs&amp;amp;name=springcloudsqs&amp;amp;description=Demo%20project%20for%20Spring%20cloud%20sqs&amp;amp;packageName=io.pratik.springcloudsqs&amp;amp;dependencies=web,lombok&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spring boot Initializr&lt;/a&gt;, and then open the project in our favorite IDE. Select Maven project and Java language. Last but not least, select Spring boot version &lt;code&gt;&lt;span&gt;2.4&lt;/span&gt;&lt;span&gt;.7&lt;/span&gt;&lt;/code&gt;. Fill in the project metadata and click generate.&lt;/p&gt;&lt;p&gt;For Spring Cloud, We need to configure Spring Cloud AWS BOM in our &lt;code&gt;pom&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; file using this dependencyManagement block:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;io.awspring.cloud&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;spring-cloud-aws-dependencies&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;2.3.1&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;pom&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;import&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For adding the support for messaging, we need to include the module dependency for Spring Cloud AWS Messaging into our Maven configuration. We do this by adding the starter module &lt;code&gt;spring&lt;span&gt;-&lt;/span&gt;cloud&lt;span&gt;-&lt;/span&gt;starter&lt;span&gt;-&lt;/span&gt;aws&lt;span&gt;-&lt;/span&gt;messaging&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;io.awspring.cloud&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;spring-cloud-starter-aws-messaging&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These are the dependencies required for Spring Cloud AWS. Next, we add some other dependencies such as Spring boot starter web and &lt;a href=&#34;https://projectlombok.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Lombok&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;2.4.7&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.projectlombok&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;lombok&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;1.18.20&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;provided&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This completes our setup process for the Spring boot project.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s jump into adding the SNS and SQS configs and start publishing our first message.&lt;/p&gt;&lt;p&gt;Amazon SNS Config:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;amazonaws&lt;span&gt;.&lt;/span&gt;auth&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AWSStaticCredentialsProvider&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;amazonaws&lt;span&gt;.&lt;/span&gt;auth&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;BasicAWSCredentials&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;amazonaws&lt;span&gt;.&lt;/span&gt;client&lt;span&gt;.&lt;/span&gt;builder&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AwsClientBuilder&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;amazonaws&lt;span&gt;.&lt;/span&gt;services&lt;span&gt;.&lt;/span&gt;sns&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AmazonSNS&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;amazonaws&lt;span&gt;.&lt;/span&gt;services&lt;span&gt;.&lt;/span&gt;sns&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AmazonSNSClientBuilder&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;io&lt;span&gt;.&lt;/span&gt;awspring&lt;span&gt;.&lt;/span&gt;cloud&lt;span&gt;.&lt;/span&gt;messaging&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;NotificationMessagingTemplate&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Bean&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Configuration&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Primary&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;authga&lt;span&gt;.&lt;/span&gt;springcloudaws&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AWSConfigConstants&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;ACCESS_KEY&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;authga&lt;span&gt;.&lt;/span&gt;springcloudaws&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AWSConfigConstants&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;SECRET_KEY&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@Configuration&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;SnsConfig&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Bean&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;NotificationMessagingTemplate&lt;/span&gt; &lt;span&gt;notificationMessagingTemplate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;AmazonSNS&lt;/span&gt; amazonSNS&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;NotificationMessagingTemplate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;amazonSNS&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Bean&lt;/span&gt;&#xA;    &lt;span&gt;@Primary&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;AmazonSNS&lt;/span&gt; &lt;span&gt;amazonSNS&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;AwsClientBuilder&lt;span&gt;.&lt;/span&gt;EndpointConfiguration&lt;/span&gt; endpointConfiguration&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;BasicAWSCredentials&lt;/span&gt; credentials &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;BasicAWSCredentials&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;ACCESS_KEY&lt;span&gt;,&lt;/span&gt; SECRET_KEY&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;AmazonSNSClientBuilder&lt;/span&gt;&#xA;                &lt;span&gt;.&lt;/span&gt;&lt;span&gt;standard&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;                &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withEndpointConfiguration&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;endpointConfiguration&lt;span&gt;)&lt;/span&gt;&#xA;                &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withCredentials&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;AWSStaticCredentialsProvider&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;credentials&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;                &lt;span&gt;.&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, we create a simple &lt;code&gt;AmazonSNSClient&lt;/code&gt; with a custom endpoint and credentials. Spring has an auto-configured &lt;code&gt;AmazonSNSClient&lt;/code&gt;, but that requires valid AWS credentials and actual resources. We instead want to run our service locally with AWS resources using LocalStack. More on this later. Let&amp;#39;s finish this setup.&lt;/p&gt;&lt;p&gt;Amazon SQS Config:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;amazonaws&lt;span&gt;.&lt;/span&gt;auth&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AWSStaticCredentialsProvider&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;amazonaws&lt;span&gt;.&lt;/span&gt;auth&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;BasicAWSCredentials&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;amazonaws&lt;span&gt;.&lt;/span&gt;client&lt;span&gt;.&lt;/span&gt;builder&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AwsClientBuilder&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;amazonaws&lt;span&gt;.&lt;/span&gt;services&lt;span&gt;.&lt;/span&gt;sqs&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AmazonSQSAsync&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;amazonaws&lt;span&gt;.&lt;/span&gt;services&lt;span&gt;.&lt;/span&gt;sqs&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AmazonSQSAsyncClientBuilder&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;io&lt;span&gt;.&lt;/span&gt;awspring&lt;span&gt;.&lt;/span&gt;cloud&lt;span&gt;.&lt;/span&gt;messaging&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;QueueMessageHandlerFactory&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;io&lt;span&gt;.&lt;/span&gt;awspring&lt;span&gt;.&lt;/span&gt;cloud&lt;span&gt;.&lt;/span&gt;messaging&lt;span&gt;.&lt;/span&gt;support&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;NotificationMessageArgumentResolver&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Bean&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Configuration&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Primary&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;messaging&lt;span&gt;.&lt;/span&gt;converter&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;MappingJackson2MessageConverter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;messaging&lt;span&gt;.&lt;/span&gt;converter&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;MessageConverter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;util&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;List&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;authga&lt;span&gt;.&lt;/span&gt;springcloudaws&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AWSConfigConstants&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;*&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@Configuration&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;SqsConfig&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Bean&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;AwsClientBuilder&lt;span&gt;.&lt;/span&gt;EndpointConfiguration&lt;/span&gt; &lt;span&gt;endpointConfiguration&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;AwsClientBuilder&lt;span&gt;.&lt;/span&gt;EndpointConfiguration&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;ENDPOINT&lt;span&gt;,&lt;/span&gt; EU_CENTRAL_1&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Bean&lt;/span&gt;&#xA;    &lt;span&gt;@Primary&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;AmazonSQSAsync&lt;/span&gt; &lt;span&gt;amazonSQSAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;AwsClientBuilder&lt;span&gt;.&lt;/span&gt;EndpointConfiguration&lt;/span&gt; endpointConfiguration&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;BasicAWSCredentials&lt;/span&gt; credentials &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;BasicAWSCredentials&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;ACCESS_KEY&lt;span&gt;,&lt;/span&gt; SECRET_KEY&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;AmazonSQSAsyncClientBuilder&lt;/span&gt;&#xA;                &lt;span&gt;.&lt;/span&gt;&lt;span&gt;standard&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;                &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withEndpointConfiguration&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;endpointConfiguration&lt;span&gt;)&lt;/span&gt;&#xA;                &lt;span&gt;.&lt;/span&gt;&lt;span&gt;withCredentials&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;AWSStaticCredentialsProvider&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;credentials&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;                &lt;span&gt;.&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Bean&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;QueueMessageHandlerFactory&lt;/span&gt; &lt;span&gt;queueMessageHandlerFactory&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;MessageConverter&lt;/span&gt; messageConverter&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;var&lt;/span&gt; factory &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;QueueMessageHandlerFactory&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        factory&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setArgumentResolvers&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;List&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;of&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;NotificationMessageArgumentResolver&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;messageConverter&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; factory&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Bean&lt;/span&gt;&#xA;    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;MessageConverter&lt;/span&gt; &lt;span&gt;messageConverter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;var&lt;/span&gt; converter &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;MappingJackson2MessageConverter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        converter&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setSerializedPayloadClass&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        converter&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setStrictContentTypeMatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; converter&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the code above, we did the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Similar to the &lt;code&gt;AmazonSNSClient&lt;/code&gt;, we create the &lt;code&gt;AmazonSQSClient&lt;/code&gt; with a custom endpoint and credentials.&lt;/li&gt;&lt;li&gt;Setup &lt;code&gt;QueueMessageHandlerFactory&lt;/code&gt; so it can convert incoming messages from SQS as String to the actual object we want, in this case, &lt;code&gt;Event&lt;/code&gt;, using a &lt;code&gt;MessageConverter&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The converter will take care of converting the &lt;code&gt;String&lt;/code&gt; message to the actual &lt;code&gt;Event&lt;/code&gt; object.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The &lt;code&gt;Event&lt;/code&gt; model is described below. I am using &lt;a href=&#34;https://projectlombok.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Lombok&lt;/a&gt; to reduce the boilerplate code.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Event&lt;span&gt;.&lt;/span&gt;java&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;lombok&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AllArgsConstructor&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;lombok&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Builder&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;lombok&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Data&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;lombok&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;NoArgsConstructor&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@Data&lt;/span&gt;&#xA;&lt;span&gt;@AllArgsConstructor&lt;/span&gt;&#xA;&lt;span&gt;@NoArgsConstructor&lt;/span&gt;&#xA;&lt;span&gt;@Builder&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Event&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Comparable&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Event&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; eventId&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; version&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; occurredAt&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;EventData&lt;/span&gt; data&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Override&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;compareTo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Event&lt;/span&gt; o&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;int&lt;/span&gt; otherVersion &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Integer&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;parseInt&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;o&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getVersion&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;int&lt;/span&gt; thisVersion &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Integer&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;parseInt&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getVersion&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Integer&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;compare&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;thisVersion&lt;span&gt;,&lt;/span&gt; otherVersion&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;EventData&lt;span&gt;.&lt;/span&gt;java&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;lombok&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AllArgsConstructor&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;lombok&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Builder&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;lombok&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Data&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;lombok&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;NoArgsConstructor&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@Data&lt;/span&gt;&#xA;&lt;span&gt;@AllArgsConstructor&lt;/span&gt;&#xA;&lt;span&gt;@NoArgsConstructor&lt;/span&gt;&#xA;&lt;span&gt;@Builder&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;EventData&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; orderId&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; owner&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;EventType&lt;/span&gt; eventType&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;EventType&lt;span&gt;.&lt;/span&gt;java&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;span&gt;.&lt;/span&gt;io&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Serializable&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; &lt;span&gt;EventType&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Serializable&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    ORDER_CREATED&lt;span&gt;,&lt;/span&gt; ORDER_CANCELLED&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Producer code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;authga&lt;span&gt;.&lt;/span&gt;springcloudaws&lt;span&gt;.&lt;/span&gt;model&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Event&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;io&lt;span&gt;.&lt;/span&gt;awspring&lt;span&gt;.&lt;/span&gt;cloud&lt;span&gt;.&lt;/span&gt;messaging&lt;span&gt;.&lt;/span&gt;core&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;NotificationMessagingTemplate&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;lombok&lt;span&gt;.&lt;/span&gt;extern&lt;span&gt;.&lt;/span&gt;slf4j&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Slf4j&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;beans&lt;span&gt;.&lt;/span&gt;factory&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Autowired&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;stereotype&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Service&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;authga&lt;span&gt;.&lt;/span&gt;springcloudaws&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AWSConfigConstants&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;ORDER_CREATED_TOPIC&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@Slf4j&lt;/span&gt;&#xA;&lt;span&gt;@Service&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;SimpleMessageProducer&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Autowired&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;NotificationMessagingTemplate&lt;/span&gt; notificationMessagingTemplate&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;publish&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Event&lt;/span&gt; event&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        notificationMessagingTemplate&lt;span&gt;.&lt;/span&gt;&lt;span&gt;convertAndSend&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;ORDER_CREATED_TOPIC&lt;span&gt;,&lt;/span&gt; event&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;We use the &lt;code&gt;NotificationMessagingTemplate&lt;/code&gt; created in the config above. It gives us several methods to send messages on an SNS topic. We will use the default &lt;code&gt;&lt;span&gt;convertAndSend&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method that takes care of converting our object to a Message using the &lt;code&gt;MessageConverter&lt;/code&gt; that we provide in the &lt;code&gt;SqsConfig&lt;/code&gt; class.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Consumer code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;authga&lt;span&gt;.&lt;/span&gt;springcloudaws&lt;span&gt;.&lt;/span&gt;model&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Event&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;io&lt;span&gt;.&lt;/span&gt;awspring&lt;span&gt;.&lt;/span&gt;cloud&lt;span&gt;.&lt;/span&gt;messaging&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;NotificationMessage&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;io&lt;span&gt;.&lt;/span&gt;awspring&lt;span&gt;.&lt;/span&gt;cloud&lt;span&gt;.&lt;/span&gt;messaging&lt;span&gt;.&lt;/span&gt;listener&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;SqsMessageDeletionPolicy&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;io&lt;span&gt;.&lt;/span&gt;awspring&lt;span&gt;.&lt;/span&gt;cloud&lt;span&gt;.&lt;/span&gt;messaging&lt;span&gt;.&lt;/span&gt;listener&lt;span&gt;.&lt;/span&gt;annotation&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;SqsListener&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;lombok&lt;span&gt;.&lt;/span&gt;extern&lt;span&gt;.&lt;/span&gt;slf4j&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Slf4j&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;span&gt;.&lt;/span&gt;springframework&lt;span&gt;.&lt;/span&gt;stereotype&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Controller&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;com&lt;span&gt;.&lt;/span&gt;authga&lt;span&gt;.&lt;/span&gt;springcloudaws&lt;span&gt;.&lt;/span&gt;config&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;AWSConfigConstants&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;ORDER_QUEUE&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;@Slf4j&lt;/span&gt;&#xA;&lt;span&gt;@Controller&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;SimpleMessageConsumer&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;MessageConsumer&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Override&lt;/span&gt;&#xA;    &lt;span&gt;@SqsListener&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;value &lt;span&gt;=&lt;/span&gt; ORDER_QUEUE&lt;span&gt;,&lt;/span&gt; deletionPolicy &lt;span&gt;=&lt;/span&gt; &lt;span&gt;SqsMessageDeletionPolicy&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;ON_SUCCESS&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;consume&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;@NotificationMessage&lt;/span&gt; &lt;span&gt;Event&lt;/span&gt; event&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;event &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            log&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Received order event for consumer 1: &amp;#34;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; event&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;We only need &lt;code&gt;@SqsListener&lt;/code&gt; annotation that automatically makes our consume method get the messages from the queue.&lt;/li&gt;&lt;li&gt;We also add &lt;code&gt;@NotificationMessage&lt;/code&gt; annotation to have the correct deserialization and extract our Event from the SNS message because the SNS message is wrapped inside a &lt;code&gt;Message&lt;/code&gt; object.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;Setup-LocalStack-and-create-resources&#34;&gt;Setup LocalStack and create resources&lt;/h3&gt;&lt;p&gt;Setting up LocalStack is dead simple; you just need to use the docker-compose file below, and it will start SNS and SQS services locally. Add the &lt;code&gt;docker compose&lt;span&gt;.&lt;/span&gt;yml&lt;/code&gt; to the repository&amp;#39;s root directory. Start the LocalStack using: &lt;code&gt;docker&lt;span&gt;-&lt;/span&gt;compose up&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;#39;3.0&amp;#39;&lt;/span&gt;&#xA;&#xA;&lt;span&gt;services&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;&#xA;  &lt;span&gt;localstack&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;    &lt;span&gt;image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; localstack/localstack&lt;span&gt;:&lt;/span&gt;latest&#xA;    &lt;span&gt;environment&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;-&lt;/span&gt; AWS_DEFAULT_REGION=eu&lt;span&gt;-&lt;/span&gt;central&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&#xA;      &lt;span&gt;-&lt;/span&gt; EDGE_PORT=4566&#xA;      &lt;span&gt;-&lt;/span&gt; SERVICES=sqs&lt;span&gt;,&lt;/span&gt;sns&#xA;    &lt;span&gt;ports&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&amp;#39;4566:4566&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once it is up and running, we can create the required AWS resources. We will create one SNS topic to which two SQS queues will be listening. The code to or publishing and listening is simple. Go to your command line, e.g., terminal, and execute the following commands.&lt;/p&gt;&lt;p&gt;To create the topic:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;aws --endpoint-url&lt;span&gt;=&lt;/span&gt;http://localhost:4566  sns create-topic  --name  order-created-topic&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To create the queues:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;aws --endpoint-url&lt;span&gt;=&lt;/span&gt;http://localhost:4566  sqs create-queue  --queue-name  order-queue&#xA;aws --endpoint-url&lt;span&gt;=&lt;/span&gt;http://localhost:4566  sqs create-queue  --queue-name  order-queue-2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To subscribe the queues to the topic:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;aws --endpoint-url&lt;span&gt;=&lt;/span&gt;http://localhost:4566 sns subscribe&#xA;--topic-arn arn:aws:sns:eu-central-1:000000000000:order-created-topic&#xA;--protocol sqs&#xA;--notification-endpoint arn:aws:sqs:eu-central-1:000000000000:order-queue&#xA;&#xA;aws --endpoint-url&lt;span&gt;=&lt;/span&gt;http://localhost:4566 sns subscribe&#xA;--topic-arn arn:aws:sns:eu-central-1:000000000000:order-created-topic&#xA;--protocol sqs&#xA;--notification-endpoint arn:aws:sqs:eu-central-1:000000000000:order-queue-2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To verify you can list queues and subscriptions:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;aws --endpoint-url&lt;span&gt;=&lt;/span&gt;http://localhost:4566  sqs list-queues&#xA;aws --endpoint-url&lt;span&gt;=&lt;/span&gt;http://localhost:4566  sns list-subscriptions&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;#39;s it!&lt;/p&gt;&lt;h3 id=&#34;Verify-sending-and-receiving-of-events&#34;&gt;Verify sending and receiving of events&lt;/h3&gt;&lt;p&gt;Run the Spring Boot app:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;Clone the sample code from the repo. Go to the root directory.&lt;/li&gt;&lt;li&gt;Use Maven plugin to run your Spring Boot app using the command in the project directory.&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;mvn spring-boot:run&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The groundwork is complete now. With the app running, we can send messages to the Amazon SNS Topic and read those messages from the queues. In the repo, I have created a controller to trigger the publishing of events. If you download the sample app, you should be able to run it, and going to &lt;a href=&#34;http://localhost:8080/create-order&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://localhost:8080/create-order&lt;/a&gt; will trigger the publisher, which in turn will trigger the consumers. In the application logs, you should be able to see. This means that our producer code publishes the code to the SNS topic. The two queues that are subscribed to the topic receive those messages, and finally, the consumer receives those messages and prints the event.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Received order event &lt;span&gt;for&lt;/span&gt; consumer &lt;span&gt;1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;Event&lt;span&gt;{&lt;/span&gt;eventId&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;386cca76-3669-4d36-b2db-01f388bbce5f&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; version&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;occurredAt&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;2021-06-19T13:42:32.946781Z&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; data&lt;span&gt;=&lt;/span&gt;&lt;span&gt;EventData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;orderId&lt;span&gt;=&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;a002b95&lt;span&gt;-&lt;/span&gt;f10b&lt;span&gt;-&lt;/span&gt;&lt;span&gt;428e-8&lt;/span&gt;d39&lt;span&gt;-&lt;/span&gt;cae90d1e631d&lt;span&gt;,&lt;/span&gt;&#xA;owner&lt;span&gt;=&lt;/span&gt;SampleProducer&lt;span&gt;,&lt;/span&gt; eventType&lt;span&gt;=&lt;/span&gt;&lt;span&gt;ORDER_CREATED&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;Received order event &lt;span&gt;for&lt;/span&gt; consumer &lt;span&gt;2&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&#xA;Event&lt;span&gt;{&lt;/span&gt;eventId&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;386cca76-3669-4d36-b2db-01f388bbce5f&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; version&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; occurredAt&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&amp;#39;2021-06-19T13:42:32.946781Z&amp;#39;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;data&lt;span&gt;=&lt;/span&gt;&lt;span&gt;EventData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;orderId&lt;span&gt;=&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;a002b95&lt;span&gt;-&lt;/span&gt;f10b&lt;span&gt;-&lt;/span&gt;&lt;span&gt;428e-8&lt;/span&gt;d39&lt;span&gt;-&lt;/span&gt;cae90d1e631d&lt;span&gt;,&lt;/span&gt; owner&lt;span&gt;=&lt;/span&gt;SampleProducer&lt;span&gt;,&lt;/span&gt; eventType&lt;span&gt;=&lt;/span&gt;&lt;span&gt;ORDER_CREATED&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;LocalStack provides a simple and convenient way to simulate AWS services without having an actual AWS account. You can build applications using various AWS services like Amazon SNS, SQS, S3 DynamoDB, and many more.&lt;/p&gt;&lt;p&gt;In this article, we have learned how to build a Spring Cloud Messaging app that utilizes LocalStack. We saw how Spring Cloud Messaging provides a layer of abstraction to create an Amazon SQS listener and SNS publisher with just a few lines of code. Furthermore, we saw how to use Amazon SNS and SQS to create an event-driven application.&lt;/p&gt;&lt;p&gt;You can refer to the repository used in the article on &lt;a href=&#34;https://github.com/maniish-jaiin/spring-cloud-messaging-sample&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/spring-cloud-messaging-with-aws-and-localstack/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to simulate AWS services locally using LocalStack with a Spring Boot application.</summary>
  </entry>
  <entry>
    <title>Node 16 Support Now Available in Actions</title>
    <updated>2021-08-04T16:02:00Z</updated>
    <id>tag:auth0.com,2021-08-04:/blog/node-16-support-now-available-in-actions/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;As our next-generation extensibility platform, designed to replace Rules &amp;amp; Hooks, our plan is to support every current and long-term supported Node version through Actions exclusively. &lt;/p&gt;&lt;p&gt;We recently introduced Node 16 support in Actions. Node 16 is the &lt;em&gt;&lt;a href=&#34;https://nodejs.org/en/about/releases/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;current version published by Node&lt;/a&gt;&lt;/em&gt;. This version does not introduce any breaking changes.  &lt;/p&gt;&lt;h2 id=&#34;What-Does-This-Mean-for-Our-Developers-&#34;&gt;What Does This Mean for Our Developers?&lt;/h2&gt;&lt;p&gt;We will continue to support Node 12 through the Long Term Support (LTS) end coming in April 2022 for all of our extensibility products - Actions, Rules, and Hooks.  However, we encourage developers to stay current in their Node version for security and compliance purposes.  &lt;/p&gt;&lt;h3 id=&#34;Developers-using-Actions&#34;&gt;Developers using Actions&lt;/h3&gt;&lt;p&gt;All new Actions will be set to the Node 16 runtime by default. However, you do not need to migrate every Action immediately to Node 16.  &lt;/p&gt;&lt;p&gt;Unlike Rules and Hooks, Actions is designed to run actions of varying Node runtimes side by side. With Actions, you no longer need to migrate all code to a single, tenant-level Node runtime. Existing Actions can be upgraded to Node 16 by creating and &lt;a href=&#34;https://auth0.com/docs/actions/manage-versions&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;deploying a new version&lt;/a&gt; to Node 16. If needed, existing Actions built on Node 12 can be upgraded to Node 16 and reverted to Node 12.&lt;/p&gt;&lt;h3 id=&#34;Developers-using-legacy-extensibility-products&#34;&gt;Developers using legacy extensibility products&lt;/h3&gt;&lt;p&gt;Our legacy extensibility products (Rules and Hooks) will continue to support Node 12. Node 16 will only roll out to Actions.&lt;/p&gt;&lt;p&gt;We strongly encourage developers using Rules and Hooks to migrate to Actions, wherever possible, to start taking advantage of the greatly &lt;a href=&#34;https://auth0.com/blog/introducing-auth0-actions/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;improved developer experience&lt;/a&gt; that comes with Actions, such as an industry standard VS Code style editor, typescript, draft mode, version control, improved secret management, an expanded library of NPM modules, and more. &lt;/p&gt;&lt;p&gt;For developers using Node 8, if there are Rules and Hooks that cannot be immediately migrated to Actions Node 16, at a minimum, update your code to Node 12. Node 8 reached the end of LTS back in December 2019 and since then has not been updated to address critical bugs, security fixes, patches, or other important updates.&lt;/p&gt;&lt;p&gt;We want to hear from you. Please share any feedback on your experience with Actions and the Node 16 update in our &lt;a href=&#34;https://community.auth0.com/c/actions/91&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Developer Community&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/node-16-support-now-available-in-actions/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Starting Aug 4, 2021, we are rolling out Node 16 as the default runtime for Actions.</summary>
  </entry>
  <entry>
    <title>Adding Auth0 RBAC Authorization to a Ktor API</title>
    <updated>2021-08-03T15:12:00Z</updated>
    <id>tag:auth0.com,2021-08-03:/blog/adding-auth0-rbac-authorization-to-a-ktor-api/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;In the previous post, we created an Auth0 API to represent the Ktor HTTP API and an Auth0 application to allow the frontend application to authenticate users. This allowed us to query the backend API from the frontend application with a valid access token. We also updated the backend API to require a valid access token for the &lt;code&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;admin&lt;/code&gt; endpoints.&lt;/p&gt;&lt;p&gt;In this post, we&amp;#39;ll complete the journey by enabling Role-Based Access Controls (RBAC) within Auth0 and restrict access to the &lt;code&gt;admin&lt;/code&gt; endpoint in our backend API to those users with the correct permissions.&lt;/p&gt;&lt;h2 id=&#34;RBAC-and-permissions&#34;&gt;RBAC and permissions&lt;/h2&gt;&lt;p&gt;We start by enabling RBAC within our Auth0 API.&lt;/p&gt;&lt;p&gt;Under the &lt;strong&gt;Settings&lt;/strong&gt; tab in the API, switch the &lt;strong&gt;Enable RBAC&lt;/strong&gt; and &lt;strong&gt;Add permissions in the Access Token&lt;/strong&gt; sliders to the on the setting. Doing so will ensure a &lt;code&gt;permissions&lt;/code&gt; claim is added to the access token with any scopes that have been assigned to the logged-in user.&lt;/p&gt;&lt;p&gt;A detailed discussion on why scopes should not be used to grant permissions is presented in the post &lt;a href=&#34;https://auth0.com/blog/on-the-nature-of-oauth2-scopes/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;On The Nature of OAuth2&amp;#39;s Scopes&lt;/a&gt;. The summary is that a scope constrains the actions that an OAuth client &lt;em&gt;may&lt;/em&gt; attempt to perform on behalf of a user, but &lt;em&gt;does not&lt;/em&gt; imply that the user has the permission to access any particular resource.&lt;/p&gt;&lt;p&gt;This has some subtle but significant implications on the claims returned in an Auth0 access token.&lt;/p&gt;&lt;p&gt;Without enabling the RBAC settings, any scope requested by the OAuth client and consented to by the user will be returned in the &lt;code&gt;scope&lt;/code&gt; claim. It doesn&amp;#39;t matter if that scope has been assigned to the user or not - it is returned regardless. It is then the responsibility of the OAuth resource server to allow or deny access to a given resource based on the user&amp;#39;s identity and the action being performed.&lt;/p&gt;&lt;p&gt;When RBAC is enabled, only scopes that have been requested by the client, &lt;em&gt;and&lt;/em&gt; consented to by the user, &lt;em&gt;and&lt;/em&gt; assigned to a user will be returned in the &lt;code&gt;scope&lt;/code&gt; claim. In this scenario, the resource server can assume the absence of a scope means the client did not request it, the user did not consent to it, or it has not been assigned to the user, and so can quickly deny access.&lt;/p&gt;&lt;p&gt;By adding the &lt;code&gt;permissions&lt;/code&gt; claim, each scope assigned to the user is calculated and included in the access token. The &lt;code&gt;permissions&lt;/code&gt; claim is populated without asking for consent from the user, which supports more traditional RBAC style applications, where clients have delegated all the permissions of their users, and the users don&amp;#39;t pick and choose scopes with each login.&lt;/p&gt;&lt;p&gt;Our sample application will make use of the scopes in the &lt;code&gt;permissions&lt;/code&gt; claim to determine access to the API.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/4ZpaxCFDvKa7It8aToFSBP/06e7bd6600e3146032475a399a0d068a/01_build-a-ktor-api-pt-3.png&#34; alt=&#34;RBAC&#34;/&gt;&#xA;&lt;em&gt;Enabling RBAC and permissions in the access token.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Under the &lt;strong&gt;Permissions&lt;/strong&gt; tab, define a new &lt;strong&gt;Permission (Scope)&lt;/strong&gt; of &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt; and a &lt;strong&gt;Description&lt;/strong&gt; of &lt;strong&gt;The ability to access the admin endpoint&lt;/strong&gt;. Click the &lt;strong&gt;Add&lt;/strong&gt; button to save the new permission:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1DJaaadYXA4vGKV9i9R8LK/4564b6449b1b1d190f2345638431b92d/02_build-a-ktor-api-pt-3.png&#34; alt=&#34;API&#34;/&gt;&#xA;&lt;em&gt;Creating an API permission.&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&#34;Creating-the-role&#34;&gt;Creating the role&lt;/h3&gt;&lt;p&gt;We now create a role to hold the permissions required by our API. Click the &lt;strong&gt;User Management -&amp;gt; Roles&lt;/strong&gt; option and click the &lt;strong&gt;Create Role&lt;/strong&gt; button.&lt;/p&gt;&lt;p&gt;In the &lt;strong&gt;New Role&lt;/strong&gt; dialog, enter a name of &lt;strong&gt;messages-admin&lt;/strong&gt;, enter a description, and click the &lt;strong&gt;Create&lt;/strong&gt; button:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/7EQTp4sJS03bScEWno7kEa/a1c2586b32a480c4b166fb4ce5ba09b5/03_build-a-ktor-api-pt-3.png&#34; alt=&#34;Roles&#34;/&gt;&#xA;&lt;em&gt;Creating a new role.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Under the &lt;strong&gt;Permissions&lt;/strong&gt; tab click the &lt;strong&gt;Add Permissions&lt;/strong&gt; button. In the &lt;strong&gt;Add Permissions&lt;/strong&gt; dialog select the API we created earlier, select the &lt;strong&gt;read:admin-messages&lt;/strong&gt; permission, and click the &lt;strong&gt;Add Permission&lt;/strong&gt; button:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/ZBB0FviUiLxmOzXoeDvJV/20ce7562521525551515e16e1c23bbe2/04_build-a-ktor-api-pt-3.png&#34; alt=&#34;Permissions&#34;/&gt;&#xA;&lt;em&gt;Adding permissions to a role.&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&#34;Assigning-the-role-to-a-user&#34;&gt;Assigning the role to a user&lt;/h3&gt;&lt;p&gt;For the purposes of this demo, I&amp;#39;ll assume you have already &lt;a href=&#34;https://auth0.com/docs/users/create-users&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;created an Auth0 user&lt;/a&gt;. I&amp;#39;ll also assume this user is linked to the application that was created earlier.&lt;/p&gt;&lt;p&gt;Select the user, click the &lt;strong&gt;Roles&lt;/strong&gt; tab, and click the &lt;strong&gt;Assign Roles&lt;/strong&gt; button.&lt;/p&gt;&lt;p&gt;In the &lt;strong&gt;Add Roles&lt;/strong&gt; dialog, select the &lt;strong&gt;messages-admin&lt;/strong&gt; role and click the &lt;strong&gt;Assign&lt;/strong&gt; button:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/6X6s3poUPbop1eG6LShtqM/b8147045f0f291e2e853b6f8027a1e74/05_build-a-ktor-api-pt-3.png&#34; alt=&#34;User&#34;/&gt;&#xA;&lt;em&gt;Assigning a role to a user.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Auth0 is now configured and ready to authenticate our frontend application. We can move on to updating our Ktor HTTP API to check for the presence of these permissions when accessing the &lt;code&gt;admin&lt;/code&gt; endpoint.&lt;/p&gt;&lt;h2 id=&#34;The-sample-application-code&#34;&gt;The sample application code&lt;/h2&gt;&lt;p&gt;To build the backend application, you&amp;#39;ll need to have JDK 11 or above, which is available from many sources, including &lt;a href=&#34;https://openjdk.java.net/install/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OpenJDK&lt;/a&gt;, &lt;a href=&#34;https://adoptopenjdk.net/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;AdoptOpenJDK&lt;/a&gt;, &lt;a href=&#34;https://www.azul.com/downloads/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Azul&lt;/a&gt;, or &lt;a href=&#34;https://www.oracle.com/au/java/technologies/javase-jdk11-downloads.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Oracle&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The final code for the Ktor application can be found &lt;a href=&#34;https://github.com/mcasperson/Auth0Ktor&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;. The code discussed in each post is matched by a branch:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/mcasperson/Auth0Ktor/tree/starter&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;starter&lt;/a&gt; &lt;ul&gt;&lt;li&gt;the base API with no authentication or authorization.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/mcasperson/Auth0Ktor/tree/add-authorization&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;add-authorization&lt;/a&gt; &lt;ul&gt;&lt;li&gt;the API requiring a valid access token for the &lt;code&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;admin&lt;/code&gt; endpoints.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/mcasperson/Auth0Ktor/tree/add-rbac&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;add-rbac&lt;/a&gt; &lt;ul&gt;&lt;li&gt;the API requiring special permissions to access the &lt;code&gt;admin&lt;/code&gt; endpoint. This branch is discussed in this post.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The frontend application code can be found &lt;a href=&#34;https://github.com/auth0-sample-gallery/spa_react_javascript_hello-world&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;Updating-the-API&#34;&gt;Updating the API&lt;/h2&gt;&lt;p&gt;The backend API must now be updated to ensure the &lt;code&gt;admin&lt;/code&gt; endpoint requires the access token, including the &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt; permission. The complete code for the &lt;code&gt;src&lt;span&gt;/&lt;/span&gt;Application&lt;span&gt;.&lt;/span&gt;kt&lt;/code&gt; file is shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;matthewcasperson&#xA;&#xA;&lt;span&gt;import&lt;/span&gt; com&lt;span&gt;.&lt;/span&gt;auth0&lt;span&gt;.&lt;/span&gt;jwk&lt;span&gt;.&lt;/span&gt;JwkProviderBuilder&#xA;&lt;span&gt;import&lt;/span&gt; io&lt;span&gt;.&lt;/span&gt;ktor&lt;span&gt;.&lt;/span&gt;application&lt;span&gt;.&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; io&lt;span&gt;.&lt;/span&gt;ktor&lt;span&gt;.&lt;/span&gt;auth&lt;span&gt;.&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; io&lt;span&gt;.&lt;/span&gt;ktor&lt;span&gt;.&lt;/span&gt;auth&lt;span&gt;.&lt;/span&gt;jwt&lt;span&gt;.&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; io&lt;span&gt;.&lt;/span&gt;ktor&lt;span&gt;.&lt;/span&gt;features&lt;span&gt;.&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; io&lt;span&gt;.&lt;/span&gt;ktor&lt;span&gt;.&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; io&lt;span&gt;.&lt;/span&gt;ktor&lt;span&gt;.&lt;/span&gt;response&lt;span&gt;.&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; io&lt;span&gt;.&lt;/span&gt;ktor&lt;span&gt;.&lt;/span&gt;routing&lt;span&gt;.&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&#xA;&lt;span&gt;import&lt;/span&gt; java&lt;span&gt;.&lt;/span&gt;util&lt;span&gt;.&lt;/span&gt;concurrent&lt;span&gt;.&lt;/span&gt;TimeUnit&#xA;&#xA;&lt;span&gt;fun&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;args&lt;span&gt;:&lt;/span&gt; Array&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; Unit &lt;span&gt;=&lt;/span&gt; io&lt;span&gt;.&lt;/span&gt;ktor&lt;span&gt;.&lt;/span&gt;server&lt;span&gt;.&lt;/span&gt;netty&lt;span&gt;.&lt;/span&gt;EngineMain&lt;span&gt;.&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;args&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span&gt;fun&lt;/span&gt; &lt;span&gt;validateCreds&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;credential&lt;span&gt;:&lt;/span&gt; JWTCredential&lt;span&gt;,&lt;/span&gt; permission&lt;span&gt;:&lt;/span&gt; String&lt;span&gt;?&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; JWTPrincipal&lt;span&gt;?&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; containsAudience &lt;span&gt;=&lt;/span&gt; credential&lt;span&gt;.&lt;/span&gt;payload&lt;span&gt;.&lt;/span&gt;audience&lt;span&gt;.&lt;/span&gt;&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;System&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getenv&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;AUDIENCE&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; containsScope &lt;span&gt;=&lt;/span&gt; permission&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isNullOrBlank&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;||&lt;/span&gt;&#xA;            credential&lt;span&gt;.&lt;/span&gt;payload&lt;span&gt;.&lt;/span&gt;claims&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;permissions&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;asArray&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;String&lt;span&gt;::&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;java&lt;span&gt;)&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;permission&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;containsAudience &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; containsScope&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;JWTPrincipal&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;credential&lt;span&gt;.&lt;/span&gt;payload&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&lt;span&gt;fun&lt;/span&gt; Application&lt;span&gt;.&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;val&lt;/span&gt; jwkProvider &lt;span&gt;=&lt;/span&gt; &lt;span&gt;JwkProviderBuilder&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;System&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getenv&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;ISSUER&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;cached&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;24&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; TimeUnit&lt;span&gt;.&lt;/span&gt;HOURS&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;rateLimited&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; TimeUnit&lt;span&gt;.&lt;/span&gt;MINUTES&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;install&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Authentication&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;jwt&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;auth0&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;verifier&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;jwkProvider&lt;span&gt;,&lt;/span&gt; System&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getenv&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;ISSUER&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            validate &lt;span&gt;{&lt;/span&gt; credential &lt;span&gt;-&amp;gt;&lt;/span&gt; &lt;span&gt;validateCreds&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;credential&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;jwt&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;auth0-admin&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;verifier&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;jwkProvider&lt;span&gt;,&lt;/span&gt; System&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getenv&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;ISSUER&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            validate &lt;span&gt;{&lt;/span&gt; credential &lt;span&gt;-&amp;gt;&lt;/span&gt; &lt;span&gt;validateCreds&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;credential&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;read:admin-messages&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;install&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;CORS&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;anyHost&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;method&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;HttpMethod&lt;span&gt;.&lt;/span&gt;Options&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;method&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;HttpMethod&lt;span&gt;.&lt;/span&gt;Get&lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;header&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;authorization&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;        allowCredentials &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;        allowNonSimpleContentTypes &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;&#xA;    routing &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/messages/public&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            call&lt;span&gt;.&lt;/span&gt;&lt;span&gt;respondText&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;{&amp;#34;message&amp;#34;: &amp;#34;The API doesn&amp;#39;t require an access token to share this message.&amp;#34;}&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                contentType &lt;span&gt;=&lt;/span&gt; ContentType&lt;span&gt;.&lt;/span&gt;Application&lt;span&gt;.&lt;/span&gt;Json&#xA;            &lt;span&gt;)&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    routing &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;authenticate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;auth0&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/messages/protected&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                call&lt;span&gt;.&lt;/span&gt;&lt;span&gt;respondText&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;{&amp;#34;message&amp;#34;: &amp;#34;The API successfully validated your access token.&amp;#34;}&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                    contentType &lt;span&gt;=&lt;/span&gt; ContentType&lt;span&gt;.&lt;/span&gt;Application&lt;span&gt;.&lt;/span&gt;Json&#xA;                &lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    routing &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;authenticate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;auth0-admin&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/messages/admin&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                call&lt;span&gt;.&lt;/span&gt;&lt;span&gt;respondText&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;{&amp;#34;message&amp;#34;: &amp;#34;The API successfully recognized you as an admin.&amp;#34;}&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                    contentType &lt;span&gt;=&lt;/span&gt; ContentType&lt;span&gt;.&lt;/span&gt;Application&lt;span&gt;.&lt;/span&gt;Json&#xA;                &lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#39;s highlight the changes required from the code presented in the previous blog post.&lt;/p&gt;&lt;p&gt;We&amp;#39;ve updated the &lt;code&gt;validateCreds&lt;/code&gt; function to include an optional &lt;code&gt;permission&lt;/code&gt; parameter. If a permission has been supplied, we ensure it is present in the &lt;code&gt;permissions&lt;/code&gt; claim on the access token:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;fun&lt;/span&gt; &lt;span&gt;validateCreds&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;credential&lt;span&gt;:&lt;/span&gt; JWTCredential&lt;span&gt;,&lt;/span&gt; permission&lt;span&gt;:&lt;/span&gt; String&lt;span&gt;?&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; JWTPrincipal&lt;span&gt;?&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; containsAudience &lt;span&gt;=&lt;/span&gt; credential&lt;span&gt;.&lt;/span&gt;payload&lt;span&gt;.&lt;/span&gt;audience&lt;span&gt;.&lt;/span&gt;&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;System&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getenv&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;AUDIENCE&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;val&lt;/span&gt; containsScope &lt;span&gt;=&lt;/span&gt; permission&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isNullOrBlank&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;||&lt;/span&gt;&#xA;            credential&lt;span&gt;.&lt;/span&gt;payload&lt;span&gt;.&lt;/span&gt;claims&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;#34;permissions&amp;#34;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;asArray&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;String&lt;span&gt;::&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;java&lt;span&gt;)&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;permission&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;containsAudience &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; containsScope&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;JWTPrincipal&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;credential&lt;span&gt;.&lt;/span&gt;payload&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We then define a second authentication mechanism called &lt;code&gt;auth0&lt;span&gt;-&lt;/span&gt;admin&lt;/code&gt; requiring the permission &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt; in order to pass validation:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;install&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Authentication&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;// ...&lt;/span&gt;&#xA;        &lt;span&gt;jwt&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;auth0-admin&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;verifier&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;jwkProvider&lt;span&gt;,&lt;/span&gt; System&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getenv&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;ISSUER&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;            validate &lt;span&gt;{&lt;/span&gt; credential &lt;span&gt;-&amp;gt;&lt;/span&gt; &lt;span&gt;validateCreds&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;credential&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;#34;read:admin-messages&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, the route exposing the &lt;code&gt;admin&lt;/code&gt; endpoint is updated to use the new &lt;code&gt;auth0&lt;span&gt;-&lt;/span&gt;admin&lt;/code&gt; authentication mechanism:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    routing &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;authenticate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;auth0-admin&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;            &lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;/api/messages/admin&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;                call&lt;span&gt;.&lt;/span&gt;&lt;span&gt;respondText&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;                    &lt;span&gt;&amp;#34;&amp;#34;&amp;#34;{&amp;#34;message&amp;#34;: &amp;#34;The API successfully recognized you as an admin.&amp;#34;}&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&#xA;                    contentType &lt;span&gt;=&lt;/span&gt; ContentType&lt;span&gt;.&lt;/span&gt;Application&lt;span&gt;.&lt;/span&gt;Json&#xA;                &lt;span&gt;)&lt;/span&gt;&#xA;            &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Inspecting-the-access-token&#34;&gt;Inspecting the access token&lt;/h2&gt;&lt;p&gt;By capturing the network traffic sent by the frontend (as we did in the previous post), we can copy the access token to &lt;a href=&#34;https://jwt.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;jwt.io&lt;/a&gt; to inspect the JWT contents.&lt;/p&gt;&lt;p&gt;Note that the token includes the &lt;code&gt;permissions&lt;/code&gt; claim, which defines the &lt;code&gt;read&lt;span&gt;:&lt;/span&gt;admin&lt;span&gt;-&lt;/span&gt;messages&lt;/code&gt; permission:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/eFammxKcqhwLSKDPgfxRU/8b24e9b2c662143d983b4033aef61197/Assigning_the_role_to_a_user.jpg&#34; alt=&#34;Inspecting the access token&#34;/&gt;&#xA;&lt;em&gt;A parsed JWT token.&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this post, we completed our three-part journey creating an HTTP API with Ktor, requiring authentication via Auth0, and finally enabling RBAC. By embedding the permissions assigned to a user in the &lt;code&gt;permissions&lt;/code&gt; scope and verifying the presence of a known permission for any queries to the &lt;code&gt;admin&lt;/code&gt; endpoint, we can be sure that only authorized users can access the restricted endpoints in our HTTP API.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/adding-auth0-rbac-authorization-to-a-ktor-api/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Learn how to add Auth0 RBAC authorization to Ktor HTTP API endpoints</summary>
  </entry>
  <entry>
    <title>Time to Prepare: Be Ready to Scale Your Workforce and App</title>
    <updated>2021-07-30T16:32:00Z</updated>
    <id>tag:auth0.com,2021-07-30:/blog/time-to-prepare-be-ready-to-scale-your-workforce-and-app/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;If you sped through your digital road map during the pandemic and are looking to fill security and privacy gaps right now, go back and check out my earlier posts:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://auth0.com/blog/accelerated-your-road-map-go-fix-workforce-and-app-security&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Accelerated Your Road Map? Go Fix Workforce and App Security&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://auth0.com/blog/workforce-and-app-privacy-have-changed-so-should-you&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Workforce and App Privacy Have Changed, So Should You&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This post is about making the shift from reaction to preparation so that you are ready for the next moment that requires speed – and set up to scale.&lt;/p&gt;&lt;h2 id=&#34;Find-Your-Balance&#34;&gt;Find Your Balance&lt;/h2&gt;&lt;p&gt;In all of these posts, we mention speed and imply pressure. There is always going to be a business reason to get an app to market as quickly as possible. You will discover vulnerabilities that require your immediate attention. And regulations will set deadlines for you. &lt;/p&gt;&lt;p&gt;So there is always going to be more you could do to improve security for your customers, your business, and the rest of the internet. Even for veteran security professionals, the pandemic was a reminder that we still need to pick and choose priorities. If you have an internal security team, lean into their expertise. Give them the time and space to guide you on priorities. Listen to their assessments of risk and let them set a pace that works for your business.&lt;/p&gt;&lt;p&gt;Longer-term security and privacy improvements can have big payoffs. Like the previous posts, these things require action. You’re also going to need to support your existing security team or create one. By support, I mean backing conversations about risks with budget for tools, external vendors, and hiring internal talent.&lt;/p&gt;&lt;p&gt;If you don’t currently have security or privacy teams, we’ll cover a bit of advice on what to look for as well.&lt;/p&gt;&lt;h2 id=&#34;Consumers-Expect-and-Deserve-Strong-Security-and-Privacy&#34;&gt;Consumers Expect and Deserve Strong Security and Privacy&lt;/h2&gt;&lt;p&gt;Let’s also set some context.&lt;/p&gt;&lt;p&gt;There was a time when businesses leaned heavily into just shipping the product. Speed often won over security or privacy.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Consumers are telling us that time is over.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In a &lt;a href=&#34;https://www.mckinsey.com/business-functions/risk/our-insights/the-consumer-data-opportunity-and-the-privacy-imperative&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;recent global survey&lt;/a&gt;, McKinsey found that 87% of consumer respondents said security practice concerns would mean they wouldn’t do business with a company, and 71% would stop doing business if it gave away sensitive data without their permission. &lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The more secure and private app is now the one that keeps and attracts customers. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Security--Longer-Term-Planning&#34;&gt;Security: Longer-Term Planning&lt;/h2&gt;&lt;p&gt;If you’re looking to make a dramatic improvement in your cybersecurity, these best practices will help get you there.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Increase pen test frequency.&lt;/strong&gt; Penetration testing (pen testing) includes hiring an external vendor to test your application and site for vulnerabilities and provide you with a report cataloged by severity. Many companies do this once a year and call it good. In today’s evolving threat environment, that’s not enough. If you can up your pen testing to every quarter — and take action on what you learn — you’ll see a big increase in security. Adding a pen test after every major operating system upgrade, library update, or major code push will do even more.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Improve your software development life cycle (SLDC).&lt;/strong&gt; Many shops are still doing security after the product is completely coded, but this creates an automatic security backlog that can not only slow getting your product to market it can put pressure on your execs to allow unnecessary risks into the wild. Involving security and privacy teams as software is being developed allows them to raise questions that influence architecture before burning hours of engineering time. Few people like to put hours and hours into something only to have to take it apart, so your devs are rarely pleased to see this analysis tacked on at the end of the SLDC., which leads me to my next point.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Encourage ownership and collaboration between devs and security.&lt;/strong&gt; How you introduce the idea of static and dynamic code analysis as well as overall participation of security in the SLDC matters. Explaining that humans are fallible, so all code is going to have vulnerabilities, and there are going to be remote code executions (RCEs) is a good place to start. As a dev, they don’t want RCEs creating headaches, and they don’t want to get paged and work nights because problems have been discovered and exploited. You can encourage ownership by asking your dev team to review the security team handling analyses. Ultimately, this can go a long way towards establishing security-dev collaboration, leading to apps that get to market more securely as well quickly.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Create a golden image.&lt;/strong&gt; A &lt;a href=&#34;https://www.cisecurity.org/cis-hardened-images/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;golden Image&lt;/a&gt;is a single machine image that has been tested and hardened. When there is an operating system or library update, the AMI gets updated and tested. This allows you to see how your customers might be impacted before you push that patch update out to thousands of users. It also provides an approved starting point for new business units or apps. The time it takes to create and maintain this image pays off in protected services and reduced downtimes. Using &lt;a href=&#34;https://en.wikipedia.org/wiki/Hardening_(computing&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;hardened&lt;/a&gt;) images also increases reliability and consistency.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Hiring-Security-Talent&#34;&gt;Hiring Security Talent&lt;/h2&gt;&lt;p&gt;Security can seem like an area that is purely technical — and your team does need to have a deep understanding of your product and how it works, but sooner or later, a human is going to touch or use your product. Strong security talent needs to understand human behavior from bad actors to customers. Your chief information security officer (CISO) also needs to be able to explain technical risks and benefits to non-technical executive teams.&lt;/p&gt;&lt;p&gt;There’s a cybersecurity talent shortage globally. According to an International Information System Security Certification Consortium (ISC)² &lt;a href=&#34;https://www.isc2.org/Research/Workforce-Study#&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;report&lt;/a&gt;, that shortage shrank slightly during the pandemic, from 4 million open jobs in 2019 to 3.1 million. You’re going to need to compete for talent.&lt;/p&gt;&lt;p&gt;Your new CISO also needs to understand your industry because threats are often industry-specific. Here are some questions to ask your hiring team when considering a potential candidate:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Are they passionate about not only security but also your company?&lt;/li&gt;&lt;li&gt;Do they have experience in your industry? If not, how adept are they at cross-applying knowledge?&lt;/li&gt;&lt;li&gt;Areas of expertise? If you need them to be a generalist, do they understand how to source third-party support (and are you willing to fund that support)?&lt;/li&gt;&lt;li&gt;Do they welcome diversity?&lt;/li&gt;&lt;li&gt;Do they contribute to open source security?&lt;/li&gt;&lt;li&gt;Do they regularly attend and speak at conferences?&lt;/li&gt;&lt;li&gt;Can they explain the business case for your product?&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Privacy--Longer-Term-Planning&#34;&gt;Privacy: Longer-Term Planning&lt;/h2&gt;&lt;p&gt;Consumers are demanding a secure and contextual private experience — and we’re seeing regulators back them up with a variety of data privacy regulations.&lt;/p&gt;&lt;p&gt;&amp;#34;&lt;em&gt;By industry, consumers are most comfortable sharing data with providers in healthcare and financial services, though no industry reached a trust rating of 50 percent for data protection,&lt;/em&gt;” notes &lt;a href=&#34;https://www.mckinsey.com/business-functions/risk/our-insights/the-consumer-data-opportunity-and-the-privacy-imperative&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;McKinsey&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This isn’t one of those things that is going away, says Auth0’s Vice President of Privacy Lucy McGrath. Globally, we’re seeing consumer groups becoming more vocal about data privacy concerns and violations with filings against companies like &lt;a href=&#34;https://www.beuc.eu/publications/consumer-groups-file-complaint-against-whatsapp-unfairly-pressuring-users-accept-its/html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;What’sApp&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;“&lt;em&gt;Data privacy is going to continue to evolve with consumers’ awareness and expectations,&lt;/em&gt;” says Lucy. “&lt;em&gt;To adapt, companies are going to have to think beyond just meeting the bare minimum of legal requirements. They need to ask themselves hard questions about what protections are appropriate given the context and the humans you’re interacting with and work through the answers. We need to be building proactive privacy programs that reflect these data privacy conversations. Creating consumer trust requires listening and deliberate action.&lt;/em&gt;”&lt;/p&gt;&lt;p&gt;Start with these questions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Have I taken the time to understand the relationship my digital properties (app, site) create with my customers? How do I want them to feel at login? What about as they continue through my app or site?&lt;/li&gt;&lt;li&gt;Am I encouraging or discouraging trust by how I gather consent and data?&lt;/li&gt;&lt;li&gt;Have I created a transparent customer experience (CX) with clear consent and options?&lt;/li&gt;&lt;li&gt;If I am really honest with myself, do I need to change something? Do I really need this data?&lt;/li&gt;&lt;li&gt;Who are my customers? What does privacy mean to them in the context of my services?&lt;/li&gt;&lt;li&gt;Do I have appropriate basic security and data governance processes in place?&lt;/li&gt;&lt;li&gt;Have I invested extra resources and time to protect the most sensitive/high-risk data such as health, financial, religious, or sexual orientation information?&lt;/li&gt;&lt;li&gt;Do I have any customers in regulated jurisdictions such as the European Union (EU) or California? If so, when was the last time I checked in with my legal counsel to make sure I’m in line with current requirements?&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Provide-Cues-for-Safety-and-Trust&#34;&gt;Provide Cues for Safety and Trust&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.wired.com/story/apple-app-privacy-labels/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Apple’s nutrition labels for data privacy&lt;/a&gt; make good on efforts that have been around since the 2010s. If your new app is going to be in the App Store, Apple requires that you report publicly on data you’re using to track your customers, data linked to them, and data gathered but not linked to them. Even though Apple is relying on app developers to self-report, the labels increase consumer awareness and expectation, says Lucy. Given Apple’s size ($274.5 billion reported revenue in 2020 makes it the world’s largest company), these nutrition labels signal that data privacy is now an everyday consumer concern.&lt;/p&gt;&lt;p&gt;“&lt;em&gt;Businesses who don’t respond could miss out&lt;/em&gt;”, says Lucy. “&lt;em&gt;The threats of data privacy fines and unhappy customers are real, but so is the opportunity to create customer experiences (CX) that drive brand loyalty. The entire tech industry is coming together to work on these data privacy challenges. Companies that act on the side of the consumer stand out.&lt;/em&gt;”&lt;/p&gt;&lt;h2 id=&#34;Hiring-Data-Privacy-Talent&#34;&gt;Hiring Data Privacy Talent&lt;/h2&gt;&lt;p&gt;Like security, data privacy professionals need to understand and express the intersection of humans and technology. They need to be able to communicate risks and benefits across an entire organization, with an emphasis on engineering, marketing, and senior leadership. Critical and analytical thinking, empathy, and consideration of different motivations and perspectives are key. Technical knowledge around privacy laws can be taught, but an ability to engage, listen and understand the context of the business and their customers is essential. Privacy isn’t “done” by privacy professionals - they support all parts of the business to build privacy protections into their individual business processes.&lt;/p&gt;&lt;p&gt;Lucy recommends that you ask candidates questions to show how they think about privacy issues in the context of the businesses in which they work. Examples of such questions include: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;How would you demonstrate the value of good privacy practices to the chief financial officer (CFO)?&lt;/li&gt;&lt;li&gt;How do you respond to the statement: privacy slows the business down?&lt;/li&gt;&lt;li&gt;What can you do to support developers to integrate privacy controls into their development lifecycle?&lt;/li&gt;&lt;li&gt;Provide examples of when you have translated legal obligations into plain English requirements that the business can implement?&lt;/li&gt;&lt;li&gt;Which company does privacy well? Why? How would you implement similar standards here?&lt;/li&gt;&lt;li&gt;What are the key privacy risks that need to be prioritized? What actions are required to mitigate these risks?&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;You-re-Helping-Make-the-Internet-Safer&#34;&gt;You’re Helping Make the Internet Safer&lt;/h2&gt;&lt;p&gt;Thank you for checking out this series. One of the things that came up while working on this content is how the pandemic has made everything even more connected. The &lt;a href=&#34;https://auth0.com/resources/whitepapers/state-of-security-identity-report&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;threat landscape&lt;/a&gt; and regulatory requirements can seem overwhelming, but taking the time to secure your personal data, your customer’s data, and your businesses make it harder for bad actors.&lt;/p&gt;&lt;p&gt;Identity can be a weak spot for both security and privacy if it’s not handled by experts. A strong Customer Identity Access Management (CIAM) solution like Auth0 can increase your security, support your data privacy strategy, and comes with certifications for various compliance requirements like &lt;a href=&#34;https://auth0.com/blog/what-is-iso-27001-2013-a-guide-for-businesses/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ISO 27001:2013&lt;/a&gt; and &lt;a href=&#34;https://auth0.com/blog/what-is-iso-27018-2019-everything-executives-need-to-know/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ISO 27018:2019&lt;/a&gt; and &lt;a href=&#34;https://auth0.com/blog/the-csa-star-program-a-business-guide-to-certification/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CSA Star&lt;/a&gt;. If you’d like to learn more about how Auth0 can help make your business more secure and stay ahead of your customers’ evolving expectations, please &lt;a href=&#34;https://auth0.com/contact-us?place=header&amp;amp;type=button&amp;amp;text=contact%20sales&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;reach out to the team at Auth0&lt;/a&gt;.&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/time-to-prepare-be-ready-to-scale-your-workforce-and-app/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">The consumer speaks — how readiness to scale wins the security and privacy battle for the customer</summary>
  </entry>
  <entry>
    <title>LATAM Response to Rapid Digital Change</title>
    <updated>2021-07-30T12:45:00Z</updated>
    <id>tag:auth0.com,2021-07-30:/blog/latam-response-to-rapid-digital-change/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;The market in Latin America is growing faster than ever, with new venture capital deals nearly doubling to 488 between 2017 and 2020, according to &lt;a href=&#34;https://www.bloomberg.com/news/articles/2021-03-16/latin-american-startups-had-record-venture-capital-deals-in-2020&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Bloomberg&lt;/a&gt;. Beyond VC, a &lt;a href=&#34;https://publications.iadb.org/publications/english/document/Tecnolatinas-2021-The-LAC-Startup-Ecosystem-Comes-of-Age.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;study by IDB lab&lt;/a&gt; revealed that the tech-enabled startup market hit a valuation of more than $220 billion USD in 2020.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/Gz6t31FLxbPc7r8T996gE/caed742f057acf90192df17560dbf527/Latam11.jpg&#34; alt=&#34;LATAM&#34;/&gt;&lt;/p&gt;&lt;p&gt;Globally, the pandemic has &lt;a href=&#34;https://auth0.com/blog/how-brick-and-mortar-approaches-improve-digital-experiences/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;accelerated digital road maps across industries&lt;/a&gt; and businesses now have to respond to changes in digital expectations and buying patterns.&#xA;&lt;/p&gt;&lt;div itemscope=&#34;&#34; itemtype=&#34;http://schema.org/Person&#34; itemprop=&#34;author&#34;&gt;&lt;p&gt;“Companies cannot predict exactly what their business and customers will need tomorrow, especially in response to today’s rapidly changing digital environment.”&lt;/p&gt;&lt;p&gt;Gabriel Camargo&lt;/p&gt;&lt;p&gt;Product Director&lt;/p&gt;&lt;p&gt;CLM&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Partnering with &lt;a href=&#34;https://auth0.com/blog/auth0-expands-global-partner-network-in-latin-america-with-clm/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CLM&lt;/a&gt; on distribution in Latin America (LATAM) extends Auth0’s reach into Brazil, Colombia, Ecuador, and Peru.&lt;/p&gt;&lt;p&gt;Over the years of working within Latin America, we’ve learned that &lt;a href=&#34;https://auth0.com/blog/building-an-identity-solution-quantity-doesnt-equal-quality&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;identity expertise&lt;/a&gt; and &lt;a href=&#34;https://auth0.com/blog/can-your-identity-solution-grow-with-your-company&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;scalability&lt;/a&gt; are two critical areas of concern for businesses in the region. You can check out our earlier posts in this series for details, but here, we wanted to look more closely at how we were able to help two companies within the region.&lt;/p&gt;&lt;h2 id=&#34;Naranja---From-Leading-Credit-Card-Issuer-in-Argentina--To-Complete-Consumer-Ecosystem&#34;&gt;Naranja — From Leading Credit Card Issuer in Argentina, To Complete Consumer Ecosystem&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://auth0.com/case-studies/naranja/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Fintech leader Naranja&lt;/a&gt; has been providing credit cards to the Argentinian market for over 30 years. In that time, they’ve grown to cover over 5 million customers by keeping those customers’ needs their top priority. As they grew, Naranja also began to integrate additional verticals into their business model. Pretty soon, they were offering payment services, financing, travel, media, and other services beyond their credit card programs.&lt;/p&gt;&lt;p&gt;As they added these verticals, Naranja’s head of engineering Javier Voos soon realized they would need to consolidate their identity solution to cover all aspects of their growing ecosystem. He knew that in order to continue putting the customer experience first, they would need to find the right IDaaS provider that would be able to scale along with their planned expansion.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=kqouiuVk07Q&amp;amp;feature=emb_imp_woyt&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;link to video&lt;/a&gt;&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/kqouiuVk07Q&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen=&#34;&#34;&gt;&lt;/iframe&gt;&lt;div itemscope=&#34;&#34; itemtype=&#34;http://schema.org/Person&#34; itemprop=&#34;author&#34;&gt;&lt;p&gt;“The main idea behind the Naranja ecosystem is to provide the best experience to our customers, making sure that our digital platform provides all the resources that an online business needs for success, and hence support the ecosystem evolution.”&lt;/p&gt;&lt;p&gt;Javier Voos&lt;/p&gt;&lt;p&gt;Head of Engineerin&lt;/p&gt;&lt;p&gt;Naranja&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Voos’ priority was to find a platform that provided secure APIs for identity so they could focus their expansion efforts on B2B services alongside their expanded consumer offerings. Finding Auth0 meant that his team could implement one identity solution that would allow both B2B and B2C customers access to the platforms they needed access to while ensuring data privacy and a low-friction user experience.&#xA;&lt;/p&gt;&lt;div itemscope=&#34;&#34; itemtype=&#34;http://schema.org/Person&#34; itemprop=&#34;author&#34;&gt;&lt;p&gt;“Auth0 gave our company the tools to secure the access to our API for first- and third-party consumers, in a way that can scale through time and put us in a better position to ally with new partners and work our way to a fully functional Naranja API Market.”&lt;/p&gt;&lt;p&gt;Danilo Asis&lt;/p&gt;&lt;p&gt;Solution Architect&lt;/p&gt;&lt;p&gt;Naranja&lt;/p&gt;&lt;/div&gt;&lt;h2 id=&#34;WABI---South-America-s-E-Commerce-Portal&#34;&gt;WABI — South America’s E-Commerce Portal&lt;/h2&gt;&lt;p&gt;With a half-dozen offerings already on offer, &lt;a href=&#34;https://auth0.com/case-studies/wabipay/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;WABI&lt;/a&gt; is looking to the future. Their ambitious goal is to become Latin America’s go-to e-commerce portal. Their offerings already include WABI, a smartphone-based grocery service; Wabipay, an e-wallet app; and four additional applications. The end-goal WABI envisions is for customers to log in one time and have access to a complete, end-to-end e-commerce experience. They’ll be able to shop, pay, and track delivery all in one place.&lt;/p&gt;&lt;p&gt;Juan Manuel Mingo, former WABI Business Manager, sums up the hurdle they faced when it came to identity and customer authentication, “We had different platforms with different user registration processes,” he says. “Our aim was to unify all the user registration of the different platforms in order to get a better user experience and to have a more organized user database.” The disjointed customer experience was the first thing WABI knew they would have to solve before they could continue growing and expanding their e-commerce ecosystem. &lt;/p&gt;&lt;div itemscope=&#34;&#34; itemtype=&#34;http://schema.org/Person&#34; itemprop=&#34;author&#34;&gt;&lt;p&gt;“Our endgame is that you enter the ecosystem through Wabi. You log in to Wabi, order your things, and when you want to pay, you simply go to WabiPay, and you’re already logged in.”&lt;/p&gt;&lt;p&gt;Frederico Galli&lt;/p&gt;&lt;p&gt;General Manager&lt;/p&gt;&lt;p&gt;WABI&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Like Naranja, WABI has always had a customer-first attitude. That meant that customer-facing features like single sign-on were top priorities. As Frederico Galli stated, their endgame is for customers to sign in once and have access to the entire ecosystem of WABI offerings. Not only that, but with further expansion plans in the works, they needed an identity solution that was with them for the long haul. Juan Manual Mingo put it like this, “WABI is scalable, and we need a partner that is, too. We believe Auth0 will support us in getting there.”&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/P45m9X6Z8ag9oOTv8R4kW/cc92f6325cb89fd84f233aa6c6992218/Latam12.jpg&#34; alt=&#34;LATAM&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Learn-how-Auth0-can-help-your-business&#34;&gt;Learn how Auth0 can help your business&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.forbesargentina.com/editorial/la-increible-historia-auth0-cliente-us-27-quinto-unicornio-hoy-vale-us-1100-n1352&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Argentinian talent Eugenio Pace and Matias Wolowski&lt;/a&gt; founded Auth0, so we know the ins and outs of the South American market. When you’re ready to bring your identity solution in line with your broader organizational expansion goals, reach out to our &lt;a href=&#34;https://auth0.com/contact-us&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;market experts&lt;/a&gt; to start the discussion about how we can help.&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/latam-response-to-rapid-digital-change/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Why Naranja and Wabi turned to Auth0 to ensure identity expertise and scaling</summary>
  </entry>
  <entry>
    <title>A Complete Guide to Lombok</title>
    <updated>2021-07-29T16:55:00Z</updated>
    <id>tag:auth0.com,2021-07-29:/blog/a-complete-guide-to-lombok/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Java is a great but verbose language. You may be ending up writing many lines of code even to achieve the most common goals. Plus, it definitely involves repetitive code, like getters and setters. This leads to a huge amount of boilerplate and avoidable code. Not only does this add nothing to the business logic of your application, but writing it is an unnecessarily boring and time-consuming process. This is why you should start employing tools and libraries to make you more productive by avoiding this. That’s where Lombok comes into play!&lt;/p&gt;&lt;p&gt;This Java library provides you with several annotations aimed at avoiding writing Java code known to be repetitive and/or boilerplate. Project Lombok works by plugging into your build process. Then, it will auto-generate the Java bytecode into your &lt;em&gt;.class&lt;/em&gt; files required to implement the desired behavior, based on the annotations you used. Thus, each annotation offered by Project Lombok allows you to skip writing methods and logic you would like to avoid, like constructors, equals, and hash code functions. This will save you a lot of time and let you focus on the business logic of your project. Plus, you will be able to keep your codebase smaller, cleaner, and easier to be read and maintained.&lt;/p&gt;&lt;p&gt;First, we will see what Project Lombok is and how it works. Then, we will study the most common and relevant Lombok’s annotations, understanding what the most important ones are, where, and how to use them. Next, it will be time to see how to integrate it in your IDE (&lt;a href=&#34;https://en.wikipedia.org/wiki/Integrated_development_environment&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Integrated Development Environment&lt;/a&gt;) and why you should not be afraid of using it.&lt;/p&gt;&lt;h2 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;This is the list of all the prerequisites to replicate the examples that will be shown next:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Java &amp;gt;= 1.8&lt;/li&gt;&lt;li&gt;Gradle &amp;gt;= 4.x or Maven 3.6.x&lt;/li&gt;&lt;li&gt;Project Lombok &amp;gt;= 1.18.20&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;What-is-Lombok&#34;&gt;What is Lombok&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://projectlombok.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Project Lombok&lt;/a&gt; (from now on, &lt;em&gt;Lombok&lt;/em&gt;) is an annotation-based Java library that allows you to reduce boilerplate code. Lombok offers various annotations aimed at replacing Java code that is well known for being boilerplate, repetitive, or tedious to write. For example, by using Lombok, you can avoid writing constructors with no arguments, &lt;code&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; methods by simply adding a few annotations. The magic happens during the compile-time when the library injects the bytecode representing the desired and boilerplate code into your &lt;em&gt;.class&lt;/em&gt; files. Plus, as we will see, the library can be plugged into your IDE, letting you have the same experience as if you had written all the boilerplate code yourself.&lt;/p&gt;&lt;p&gt;You can easily install Lombok by adding &lt;a href=&#34;https://mvnrepository.com/artifact/org.projectlombok/lombok/1.18.20&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;lombok&lt;/code&gt;&lt;/a&gt; to your dependencies.&#xA;If you are a &lt;a href=&#34;https://projectlombok.org/setup/gradle&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Gradle user&lt;/a&gt;, add these two lines to the dependencies section of your &lt;code&gt;build&lt;span&gt;.&lt;/span&gt;gradle&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;compileOnly &lt;span&gt;&amp;#39;org.projectlombok:lombok:1.18.20&amp;#39;&lt;/span&gt;&#xA;annotationProcessor &lt;span&gt;&amp;#39;org.projectlombok:lombok:1.18.20&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While if you are a &lt;a href=&#34;https://projectlombok.org/setup/maven&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Maven user&lt;/a&gt;, add the following dependency to your &lt;code&gt;pom&lt;span&gt;.&lt;/span&gt;xml&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.projectlombok&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;lombok&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;1.18.20&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;provided&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Plus, add the Lombok dependency to the &lt;a href=&#34;https://maven.apache.org/plugins/maven-compiler-plugin/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;maven&lt;span&gt;-&lt;/span&gt;compiler&lt;span&gt;-&lt;/span&gt;plugin&lt;/code&gt;&lt;/a&gt; configuration section as follows :&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;      &#xA;            &#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                  &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                  &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;maven-compiler-plugin&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                  &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;3.5.1&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                  &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;11&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!-- depending on your project --&amp;gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;11&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!-- depending on your project --&amp;gt;&lt;/span&gt;&#xA;                        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;annotationProcessorPaths&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                              &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                                    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.projectlombok&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                                    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;lombok&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                                    &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;1.18.20&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                              &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;path&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;                              &#xA;                        &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;annotationProcessorPaths&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;                  &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;            &#xA;            &lt;span&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;  &#xA;            &#xA;      &lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, you have all you need to start using Lombok.&lt;/p&gt;&lt;h2 id=&#34;Most-Common-Lombok-Annotations&#34;&gt;Most Common Lombok Annotations&lt;/h2&gt;&lt;p&gt;Here you can find the most common and important Lombok annotations. Each of them will be explained and then seen in use compared to the equivalent Java vanilla translation. To see examples and get more support, click on each annotation and visit its page on the &lt;a href=&#34;https://projectlombok.org/features/all&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Lombok official documentation&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;---Getter---https---projectlombok-org-features-GetterSetter------Setter---https---projectlombok-org-features-GetterSetter-&#34;&gt;&lt;a href=&#34;https://projectlombok.org/features/GetterSetter&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Getter&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://projectlombok.org/features/GetterSetter&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Setter&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When a field is annotated with &lt;code&gt;@Getter&lt;/code&gt; and/or &lt;code&gt;@Setter&lt;/code&gt;, Lombok will automatically generate the default getter and/or setter, respectively. The default implementation for getters simply takes care of returning the annotated field. Similarly, the default implementation for setters takes one parameter of the same type as the annotated field and simply sets it with the received value. When a field called &lt;code&gt;value&lt;/code&gt; is annotated with both &lt;code&gt;@Getter&lt;/code&gt; and &lt;code&gt;@Setter&lt;/code&gt;, Lombok will define a &lt;code&gt;&lt;span&gt;getValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; (or &lt;code&gt;&lt;span&gt;isValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; if the field is &lt;code&gt;boolean&lt;/code&gt;), and a &lt;code&gt;&lt;span&gt;setValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method. The generated getter/setter method will be &lt;code&gt;&lt;span&gt;public&lt;/span&gt;&lt;/code&gt;, unless a particular &lt;code&gt;AccessLevel&lt;/code&gt; is specified. The allowed &lt;code&gt;AccessLevel&lt;/code&gt; values are &lt;code&gt;&lt;span&gt;PUBLIC&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;PROTECTED&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;PACKAGE&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span&gt;PRIVATE&lt;/span&gt;&lt;/code&gt;. Please, note that you can also annotate the entire class. In this case, this logic will be applied to each field.&lt;/p&gt;&lt;h4 id=&#34;With-Lombok&#34;&gt;With Lombok&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Getter&lt;/span&gt;&#xA;&lt;span&gt;@Setter&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;@Setter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;AccessLevel&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;PROTECTED&lt;span&gt;)&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Java-Vanilla&#34;&gt;Java Vanilla&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;User&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;=&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt; name&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name &lt;span&gt;=&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;surname &lt;span&gt;=&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;---NoArgsConstructor---https---projectlombok-org-features-constructor------RequiredArgsConstructor---https---projectlombok-org-features-constructor------AllArgsConstructor---https---projectlombok-org-features-constructor-&#34;&gt;&lt;a href=&#34;https://projectlombok.org/features/constructor&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@NoArgsConstructor&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://projectlombok.org/features/constructor&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@RequiredArgsConstructor&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://projectlombok.org/features/constructor&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@AllArgsConstructor&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When a class is annotated with &lt;code&gt;@NoArgsConstructor&lt;/code&gt;, Lombok will take care of automatically generating a constructor with no parameters. Likewise, when annotated with &lt;code&gt;@AllArgsConstructor&lt;/code&gt;, a constructor with one parameter for each field in your class will be generated. Similarly, &lt;code&gt;@RequiredArgsConstructor&lt;/code&gt; leads to a constructor with a parameter for each field requiring special handling. In particular, this involves non-initialized &lt;code&gt;final&lt;/code&gt; fields, as well as any fields marked as &lt;code&gt;@NonNull&lt;/code&gt; that are not initialized where declared. Please, do not forget that static fields will be ignored by these annotations.&lt;/p&gt;&lt;h4 id=&#34;With-Lombok&#34;&gt;With Lombok&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@NoArgsConstructor&lt;/span&gt;&#xA;&lt;span&gt;@AllArgsConstructor&lt;/span&gt;&#xA;&lt;span&gt;@RequiredArgsConstructor&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; birthPlace&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Java-Vanilla&#34;&gt;Java Vanilla&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; birthPlace&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// @NoArgsConstructor&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// @AllArgsConstructor&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;,&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;,&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; birthPlace&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;=&lt;/span&gt; id&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name &lt;span&gt;=&lt;/span&gt; name&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;surname &lt;span&gt;=&lt;/span&gt; surname&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;birthPlace &lt;span&gt;=&lt;/span&gt; birthPlace&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;// @RequiredArgsConstructor&lt;/span&gt;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt; birthPlace&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;birthPlace &lt;span&gt;=&lt;/span&gt; birthPlace&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;---ToString---https---projectlombok-org-features-ToString-&#34;&gt;&lt;a href=&#34;https://projectlombok.org/features/ToString&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@ToString&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When a class is annotated with &lt;code&gt;@ToString&lt;/code&gt;, Lombok will take care of generating a proper implementation of the &lt;code&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method. By default, a String containing the class name, followed by each field&amp;#39;s value separated by a comma, will be returned. By setting the &lt;code&gt;includeFieldNames&lt;/code&gt; parameter to &lt;em&gt;true&lt;/em&gt;, the name of each field will be placed before its value. By default, all non-static fields will be considered when generating the &lt;code&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; method. Annotate a field with &lt;code&gt;@ToString&lt;span&gt;.&lt;/span&gt;Exclude&lt;/code&gt; to make Lombok ignore it. Alternatively, you can specify which fields you wish to be taken into account by using &lt;code&gt;@&lt;span&gt;ToString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;onlyExplicitlyIncluded &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;. Then, mark each field you want to include with &lt;code&gt;@ToString&lt;span&gt;.&lt;/span&gt;Include&lt;/code&gt;.&lt;/p&gt;&lt;h4 id=&#34;With-Lombok&#34;&gt;With Lombok&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@ToString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;includeFieldNames&lt;span&gt;=&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Java-Vanilla&#34;&gt;Java Vanilla&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Override&lt;/span&gt; &#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;#34;Author(id=&amp;#34;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;+&lt;/span&gt; &lt;span&gt;&amp;#34;, name=&amp;#34;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name &lt;span&gt;+&lt;/span&gt; &lt;span&gt;&amp;#34;, surnname=&amp;#34;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;surname &lt;span&gt;+&lt;/span&gt; &lt;span&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;---EqualsAndHashCode---https---projectlombok-org-features-EqualsAndHashCode-&#34;&gt;&lt;a href=&#34;https://projectlombok.org/features/EqualsAndHashCode&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@EqualsAndHashCode&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Annotate a class with &lt;code&gt;@EqualsAndHashCode&lt;/code&gt;, and Lombok will automatically implement the &lt;code&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; methods for you. By default, all non-static, non-transient fields will be taken into account. You can modify which fields are used by annotating them with &lt;code&gt;@EqualsAndHashCode&lt;span&gt;.&lt;/span&gt;Include&lt;/code&gt; or &lt;code&gt;@EqualsAndHashCode&lt;span&gt;.&lt;/span&gt;Exclude&lt;/code&gt;. Alternatively, you can annotate your class with &lt;code&gt;@&lt;span&gt;EqualsAndHashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;onlyExplicitlyIncluded &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and then specify exactly which fields or methods you want to be used by marking them with &lt;code&gt;@EqualsAndHashCode&lt;span&gt;.&lt;/span&gt;Include&lt;/code&gt;. Please, note that the &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;) and &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode(&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;&lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;) methods will be generated by Lombok without breaking the contract between them. Follow the link on the two methods to the official Java documentation to learn more about the contracts that &lt;code&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; implementations should fulfill.&lt;/p&gt;&lt;h4 id=&#34;With-Lombok&#34;&gt;With Lombok&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Getter&lt;/span&gt;&#xA;&lt;span&gt;@Setter&lt;/span&gt;&#xA;&lt;span&gt;@EqualsAndHashCode&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Java-Vanilla&#34;&gt;Java Vanilla&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &#xA;    &lt;span&gt;// gettes and setters ...&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Override&lt;/span&gt; &#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;       &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; PRIME &lt;span&gt;=&lt;/span&gt; &lt;span&gt;31&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;int&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       result &lt;span&gt;=&lt;/span&gt; prime &lt;span&gt;*&lt;/span&gt; result &lt;span&gt;+&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;       result &lt;span&gt;=&lt;/span&gt; prime &lt;span&gt;*&lt;/span&gt; result &lt;span&gt;+&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;name &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; name&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       result &lt;span&gt;=&lt;/span&gt; prime &lt;span&gt;*&lt;/span&gt; result &lt;span&gt;+&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;surname &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; surname&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;return&lt;/span&gt; result&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Override&lt;/span&gt; &#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Object&lt;/span&gt; o&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;       &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;o &lt;span&gt;==&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;o &lt;span&gt;instanceof&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;Author&lt;/span&gt; other &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;Author&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; o&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;canEqual&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;---NonNull---https---projectlombok-org-features-NonNull-&#34;&gt;&lt;a href=&#34;https://projectlombok.org/features/NonNull&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@NonNull&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can annotate with &lt;code&gt;@NonNull&lt;/code&gt; a record component, a parameter of a method, or an entire constructor. This way, Lombok will generate null-check statements for you accordingly.&lt;/p&gt;&lt;h4 id=&#34;With-Lombok&#34;&gt;With Lombok&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;@NonNull&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;@NonNull&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;String&lt;/span&gt; surname&#xA;    &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;=&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name &lt;span&gt;=&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;surname &lt;span&gt;=&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt; &#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Java-Vanilla&#34;&gt;Java Vanilla&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&#xA;      &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;,&lt;/span&gt;&#xA;      &lt;span&gt;String&lt;/span&gt; surname&#xA;    &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;id &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;          &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;NullPointerException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;id is marked @NonNull but is null&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;=&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;name &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;          &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;NullPointerException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;name is marked @NonNull but is null&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name &lt;span&gt;=&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;surname &lt;span&gt;=&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt; &#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;---Data---https---projectlombok-org-features-Data-&#34;&gt;&lt;a href=&#34;https://projectlombok.org/features/Data&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Data&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@Data&lt;/code&gt; is a shortcut annotation that combines the features of &lt;a href=&#34;https://projectlombok.org/features/ToString&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@ToString&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://projectlombok.org/features/EqualsAndHashCode&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@EqualsAndHashCode&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://projectlombok.org/features/GetterSetter&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Getter&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://projectlombok.org/features/GetterSetter&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Setter&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://projectlombok.org/features/constructor&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@RequiredArgsConstructor&lt;/code&gt;&lt;/a&gt; together. So, &lt;code&gt;@Data&lt;/code&gt; generates all the boilerplate involved in POJOs (&lt;a href=&#34;https://en.wikipedia.org/wiki/Plain_old_Java_object&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Plain Old Java Objects&lt;/a&gt;). This means, in particular, getters for all fields, setters for all non-final fields, proper &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt;, and &lt;code&gt;hashCode&lt;/code&gt; implementations involving every field of the class, and a constructor for all final fields.&lt;/p&gt;&lt;h4 id=&#34;With-Lombok&#34;&gt;With Lombok&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Data&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Java-Vanilla&#34;&gt;Java Vanilla&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; id&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;=&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;    &#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt; name&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name &lt;span&gt;=&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;surname &lt;span&gt;=&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Override&lt;/span&gt; &#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;       &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; PRIME &lt;span&gt;=&lt;/span&gt; &lt;span&gt;31&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;int&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       result &lt;span&gt;=&lt;/span&gt; prime &lt;span&gt;*&lt;/span&gt; result &lt;span&gt;+&lt;/span&gt; &lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       result &lt;span&gt;=&lt;/span&gt; prime &lt;span&gt;*&lt;/span&gt; result &lt;span&gt;+&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       result &lt;span&gt;=&lt;/span&gt; prime &lt;span&gt;*&lt;/span&gt; result &lt;span&gt;+&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;return&lt;/span&gt; result&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Override&lt;/span&gt; &#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Object&lt;/span&gt; o&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;       &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;o &lt;span&gt;==&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;o &lt;span&gt;instanceof&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;Author&lt;/span&gt; other &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;Author&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; o&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;canEqual&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;       &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;---Value---https---projectlombok-org-features-Value-&#34;&gt;&lt;a href=&#34;https://projectlombok.org/features/Value&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Value&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@Value&lt;/code&gt; is the immutable variant of &lt;a href=&#34;https://projectlombok.org/features/Data&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Data&lt;/code&gt;&lt;/a&gt;. This means that all fields are made &lt;code&gt;&lt;span&gt;private&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;final&lt;/code&gt; by Lombok by default. Plus, setters will not be generated, and the class itself will be marked as &lt;code&gt;final&lt;/code&gt;. This way, the class will not be inheritable. Just like what happens with &lt;code&gt;@Data&lt;/code&gt;, &lt;code&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt; implementations are also created.&lt;/p&gt;&lt;h4 id=&#34;With-Lombok&#34;&gt;With Lombok&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Data&lt;/span&gt;&#xA;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Java-Vanilla&#34;&gt;Java Vanilla&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; id&lt;span&gt;,&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name&lt;span&gt;,&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; surname&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;id &lt;span&gt;=&lt;/span&gt; id&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;name &lt;span&gt;=&lt;/span&gt; name&#xA;      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;surname &lt;span&gt;=&lt;/span&gt; surname&#xA;    &lt;span&gt;}&lt;/span&gt;  &#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; id&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; name&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; surname&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Override&lt;/span&gt; &#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; PRIME &lt;span&gt;=&lt;/span&gt; &lt;span&gt;31&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;int&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        result &lt;span&gt;=&lt;/span&gt; prime &lt;span&gt;*&lt;/span&gt; result &lt;span&gt;+&lt;/span&gt; &lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        result &lt;span&gt;=&lt;/span&gt; prime &lt;span&gt;*&lt;/span&gt; result &lt;span&gt;+&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        result &lt;span&gt;=&lt;/span&gt; prime &lt;span&gt;*&lt;/span&gt; result &lt;span&gt;+&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hashCode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; result&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Override&lt;/span&gt; &#xA;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Object&lt;/span&gt; o&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;o &lt;span&gt;==&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;o &lt;span&gt;instanceof&lt;/span&gt; &lt;span&gt;Author&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;Author&lt;/span&gt; other &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;Author&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; o&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;canEqual&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getId&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;other&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getSurname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;Advanced-Lombok-Annotations&#34;&gt;Advanced Lombok Annotations&lt;/h2&gt;&lt;p&gt;Here you can find the most complex Lombok annotations. Each of them will be explained and then seen in use compared to the equivalent Java vanilla translation. To see examples and get more support, click on each annotation and visit its page on the &lt;a href=&#34;https://projectlombok.org/features/all&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Lombok official documentation&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;---Cleanup---https---projectlombok-org-features-Cleanup-&#34;&gt;&lt;a href=&#34;https://projectlombok.org/features/Cleanup&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Cleanup&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@Cleanup&lt;/code&gt; can be used to ensure a given resource is automatically cleaned up before leaving the current scope. By default, the cleanup method of the annotated resource is assumed to be &lt;code&gt;&lt;span&gt;close&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;, but you can specify the name of the desired method to be called instead. Note that this annotation works by harnessing the &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;try-with-resources statement&lt;/a&gt;.&lt;/p&gt;&lt;h4 id=&#34;With-Lombok&#34;&gt;With Lombok&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;CleanupDemo&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; args&lt;span&gt;)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;IOException&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;@Cleanup&lt;/span&gt; &#xA;    &lt;span&gt;InputStream&lt;/span&gt; input &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;FileInputStream&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;args&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;@Cleanup&lt;/span&gt; &#xA;    &lt;span&gt;OutputStream&lt;/span&gt; output &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;FileOutputStream&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;args&lt;span&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; b &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;    &lt;span&gt;while&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;int&lt;/span&gt; r &lt;span&gt;=&lt;/span&gt; input&lt;span&gt;.&lt;/span&gt;&lt;span&gt;read&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;b&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;      &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;r &lt;span&gt;==&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &#xA;        &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;      output&lt;span&gt;.&lt;/span&gt;&lt;span&gt;write&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;b&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; r&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Java-Vanilla&#34;&gt;Java Vanilla&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;CleanupDemo&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; args&lt;span&gt;)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;IOException&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;try&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;OutputStream&lt;/span&gt; output &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;FileOutputStream&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;args&lt;span&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;try&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;InputStream&lt;/span&gt; input &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;FileInputStream&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;args&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;        &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; b &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;        &lt;span&gt;while&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;          &lt;span&gt;int&lt;/span&gt; r &lt;span&gt;=&lt;/span&gt; input&lt;span&gt;.&lt;/span&gt;&lt;span&gt;read&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;b&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;          &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;r &lt;span&gt;==&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &#xA;            &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;&#xA;          output&lt;span&gt;.&lt;/span&gt;&lt;span&gt;write&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;b&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; r&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;        &lt;span&gt;}&lt;/span&gt;&#xA;      &lt;span&gt;}&lt;/span&gt;       &#xA;    &lt;span&gt;}&lt;/span&gt; &#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;---Synchronized---https---projectlombok-org-features-Synchronized-&#34;&gt;&lt;a href=&#34;https://projectlombok.org/features/Synchronized&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Synchronized&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@Synchronized&lt;/code&gt; allows you to achieve something similar to the &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;synchronized&lt;/code&gt;&lt;/a&gt; keyword, but locking on different objects. The keyword locks on &lt;code&gt;&lt;span&gt;this&lt;/span&gt;&lt;/code&gt;, while the annotation locks on a special private field named &lt;code&gt;$lock&lt;/code&gt;. If this field does not exist, it will be created by Lombok. This is the default behavior, but you can also specify lock objects yourself. When dealing with &lt;code&gt;&lt;span&gt;static&lt;/span&gt;&lt;/code&gt; methods, the annotation will lock on a static field named &lt;code&gt;$&lt;span&gt;LOCK&lt;/span&gt;&lt;/code&gt;. Please, consider that just like &lt;code&gt;synchronized&lt;/code&gt;, the annotation can only be used on static and instance methods. &lt;/p&gt;&lt;h4 id=&#34;With-Lombok&#34;&gt;With Lombok&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;SynchronizedDemo&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt; objectToLock &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;@Synchronized&lt;/span&gt;&#xA;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;System&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;out&lt;span&gt;.&lt;/span&gt;&lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;@Synchronized&lt;/span&gt;&#xA;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getOne&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;@Synchronized&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;objectToLock&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&#xA;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;printObject&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;System&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;out&lt;span&gt;.&lt;/span&gt;&lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;objectToLock&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Java-Vanilla&#34;&gt;Java Vanilla&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;SynchronizedDemo&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt; $LOCK &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt; $lock &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt; readLock &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;$LOCK&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;System&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;out&lt;span&gt;.&lt;/span&gt;&lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getOne&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;$lock&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;  &#xA;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;printObject&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;    &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;readLock&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&#xA;      &lt;span&gt;System&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;out&lt;span&gt;.&lt;/span&gt;&lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;objectToLock&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&#xA;    &lt;span&gt;}&lt;/span&gt;&#xA;  &lt;span&gt;}&lt;/span&gt;&#xA;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;---SneakyThrows---https---projectlombok-org-features-SneakyThrows-&#34;&gt;&lt;a href=&#34;https://projectlombok.org/features/SneakyThrows&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@SneakyThrows&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@SneakyThrows&lt;/code&gt; can be used to sneakily throw checked exceptions without actually declaring them in your method&amp;#39;s &lt;code&gt;throws&lt;/code&gt; clause, as you normally would. So, this annotation allows you to avoid the required &lt;code&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;catch&lt;/code&gt; blocks completely by handling all the checked exceptions quietly. Lombok will not ignore, wrap, replace, or modify the thrown checked exception. On the contrary, it will mislead the compiler. In fact, at the JVM (&lt;a href=&#34;https://en.wikipedia.org/wiki/Java_virtual_machine&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Java Virtual Machine&lt;/a&gt;) class file level, all exceptions can be thrown regardless of the &lt;code&gt;throws&lt;/code&gt; clause of your methods, which is why this works. This annotation can be dangerous and should be used carefully. This is why you should read &lt;a href=&#34;https://projectlombok.org/features/SneakyThrows&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this&lt;/a&gt; page from the Lombok official documentation to learn more about when and how to use it.&lt;/p&gt;&lt;h3 id=&#34;---Builder---https---projectlombok-org-features-Builder-&#34;&gt;&lt;a href=&#34;https://projectlombok.org/features/Builder&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You may need to develop a builder object allowing you to create objects by following a step-by-step construction pattern, such as &lt;code&gt;Author&lt;span&gt;.&lt;/span&gt;&lt;span&gt;builder&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Maria&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;surname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;#34;Williams&amp;#34;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;. This is particularly useful when dealing with large classes with several fields. Instead of using a constructor with many parameters, you can use this more readable approach.&#xA;By using the &lt;code&gt;@Builder&lt;/code&gt; annotation, you let Lombok generate the builders for you. By annotating a class with &lt;code&gt;@Builder&lt;/code&gt;, Lombok will produce a class implementing the aforementioned builder pattern. For example, by annotating the &lt;code&gt;Author&lt;/code&gt; class, an &lt;code&gt;AuthorBuilder&lt;/code&gt; class will be automatically generated. Since the behavior of your builder may be complex or highly-tailored, Lombok offers many parameters to achieve the desired result. You can find out them all &lt;a href=&#34;https://projectlombok.org/features/Builder&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;---Log---https---projectlombok-org-features-log-&#34;&gt;&lt;a href=&#34;https://projectlombok.org/features/log&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;code&gt;@Log&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The majority of loggers require you to set up a logger instance in every class where you want to log. This definitely involves boilerplate code. By annotating a class with &lt;code&gt;@Log&lt;/code&gt;, Lombok will automatically add a static final &lt;code&gt;log&lt;/code&gt; field, initialized as required by your logging library. This is why Lombok provides developers with an annotation per each of the most popular logging frameworks. You can find the entire list &lt;a href=&#34;https://projectlombok.org/features/log&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;The-Lombok-Plugin&#34;&gt;The Lombok Plugin&lt;/h2&gt;&lt;p&gt;The most popular and widely used IDEs come with an official Lombok plugin designed to help developers use Lombok. In particular, it supports you by offering shortcuts to the most common Lombok annotation. Plus, it suggests to you the annotations you may require or be looking for based on where you clicked. At the time of writing &lt;a href=&#34;https://projectlombok.org/setup/intellij&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;IntelliJ IDEA&lt;/a&gt;, &lt;a href=&#34;https://projectlombok.org/setup/eclipse&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Eclipse, Spring Tool Suite, (Red Hat) JBoss Developer Studio, MyEclipse&lt;/a&gt;, &lt;a href=&#34;https://projectlombok.org/setup/vscode&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Microsoft Visual Studio Code&lt;/a&gt;, and &lt;a href=&#34;https://projectlombok.org/setup/netbeans&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Netbeans&lt;/a&gt; are officially supported. Follow the link related to your IDE to get support on how to install it.&#xA;Visit the &lt;a href=&#34;https://projectlombok.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Lombok&lt;/a&gt; website for the complete list of all supported IDEs.&lt;/p&gt;&lt;h2 id=&#34;Is-Using-Lombok-A-Risk-&#34;&gt;Is Using Lombok A Risk?&lt;/h2&gt;&lt;p&gt;You may be concerned about spreading Lombok annotations throughout your codebase. In fact, what would happen if you decided to avoid using it? You might be finding yourself stuck. Well, this is not a real problem because Lombok comes with a &lt;em&gt;delombok&lt;/em&gt; tool. &#xA;As stated &lt;a href=&#34;https://projectlombok.org/features/delombok&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;in the official documentation&lt;/a&gt;, although not covering all possible IDEs and cases, it makes the process of freeing your code from Lombok easier. What this tool does is auto-generate Java source code containing the same features contained in the bytecode Lombok would have injected. This way, your Lombok annotated codebase will be simply replaced with a standard, non-Lombok Java one. &#xA;As a result, your entire project will no longer depend on Lombok. So, to answer the original question, no, not at all. Using Lombok does not represent a risk for the future or your project.&lt;/p&gt;&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this article, we looked at how to use Project Lombok, a Java library that automatically plugs into your editor and builds tools, to avoid writing boilerplate, boring, and repetitive code Java is well known for. As shown, this is an easy way to make you a more productive developer and do not waste your time on cumbersome activities. By starting to take advantage of its most relevant annotations, you can avoid writing thousand of lines of code with no real value from the business logic point of view of your project. Plus, there is always the possibility to make your project no longer depend on Project Lombok easily. So, it using it does not represent a risk of finding yourself locked in. In conclusion, every Java developer should use Project Lombok, and explaining everything you need to start using it is what this article was aimed at.&lt;/p&gt;&lt;p&gt;Thanks for reading! I hope that you found this article helpful. Feel free to reach out to me with any questions, comments, or suggestions.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/a-complete-guide-to-lombok/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Let’s see everything you should know to start using Project Lombok. We will have a look at how to integrate it into your IDE and use it to avoid boilerplate code.</summary>
  </entry>
  <entry>
    <title>Workforce and App Privacy Have Changed, So Should You</title>
    <updated>2021-07-29T15:08:00Z</updated>
    <id>tag:auth0.com,2021-07-29:/blog/workforce-and-app-privacy-have-changed-so-should-you/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;Accelerating digital road maps by seven to 10 years likely left you with some things to review from a security perspective. Please check out the &lt;a href=&#34;https://auth0.com/blog/accelerated-your-road-map-go-fix-workforce-and-app-security&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;first post in this series&lt;/a&gt; for what you might need to review to securely support your remote or hybrid workforce, as well as a checklist for consumer-facing apps.&lt;/p&gt;&lt;p&gt;Security isn’t the only thing that can get overlooked when we go fast.  As well as implementing technical protections — we also need to understand what and how the data and how impacts the humans that use technology. This is where privacy comes in. Privacy is having a critical global impact on software development because consumers, businesses, and governments are demanding that technology operates in a way that complies with legislation like GDPR (General Data Privacy Regulation), CPRA (California Public Records Act), APPI (Act on the Protection of Personal Information), and LGPD (Lei Geral de Proteção de Dados Pessoais). This is an opportunity to rethink exactly what and how much data is collected, how it’s used, and who gets to see it. It’s a turning point where individuals are no longer blithely accepting that massive amounts of data about them are being created, shared, and used.&lt;/p&gt;&lt;p&gt;At Auth0, I regularly collaborate with our vice president of privacy, Lucy McGrath, and she is a part of my organization. For this series, I asked Lucy for her perspective on data privacy mistakes companies can make when they move fast.&lt;/p&gt;&lt;p&gt;An integrated approach is essential for security and privacy. There’s a saying if you want to go fast, go alone, but if you want to go far, go together. This is changing — you can’t protect privacy alone. If you go alone, you won’t go anywhere. “Ultimately, data privacy is about trust,” says Lucy. “And it’s a collaborative effort. You can’t think about security or data governance, or privacy in isolation. You need to work across departments within your organization and also listen to your staff and your consumers/users. From a practical standpoint, you need to work with others even beyond your immediate business — data privacy regulations are changing rapidly —technical solutions are essential in order to scale privacy compliant technology. If you don’t collaborate, you’ll be left behind.”&lt;/p&gt;&lt;p&gt;Lucy’s insights on remote/hybrid workforces and consumer-facing apps can improve your workplace culture and improve your relationships with your customers — and keep you focused on your business rather than dealing with regulators and potentially incurring large fines.&lt;/p&gt;&lt;h2 id=&#34;Put-Your-Focus-on-the-Human&#34;&gt;Put Your Focus on the Human&lt;/h2&gt;&lt;p&gt;“Probably the most important thing to remember when thinking through data privacy is that you’re delivering a service that impacts humans,” says Lucy. “We can get dazzled by what technology can do, but the technology is really there to help the humans accomplish something. Centering on the human who needs to use or benefit from the technology helps you to focus.  — and align with existing and emerging data privacy regulations.”&lt;/p&gt;&lt;p&gt;As always, this information is shared from the perspective of business impact and planning. For how data privacy regulations apply to your specific business situation, please reach out to your legal counsel.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Auth0 recommends you always consult legal counsel for specific advice about compliance with legal requirements.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;The workforce mix: remote, hybrid, in office&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If your company relies on a globally dispersed workforce (or acquired one during the pandemic), you’re likely dealing with a mix of employees who welcome some office quietly, some still struggling with lockdown requirements, and others who may not expect to see vaccines become available until fall. “As you look at creating or reviewing policies, it’s especially important to remember that there’s a human on the other side of the Zoom screen”, says Lucy. “This is a good time for your HR team to check back in with staff. Circumstances and perspectives have changed for many people as a result of the pandemic. One size definitely will not fit all.”&lt;/p&gt;&lt;p&gt;Understanding that worker privacy rights vary globally, here are some areas to review:&lt;/p&gt;&lt;h3 id=&#34;1--How-you-measure-productivity&#34;&gt;1. How you measure productivity&lt;/h3&gt;&lt;p&gt;For organizations used to seeing people in chairs, the shift to Zoom screens caused some anxiety. Interestingly, &lt;a href=&#34;https://www.bcg.com/publications/2020/valuable-productivity-gains-covid-19&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;75% of 12,000 workers surveyed by BCG&lt;/a&gt; in the United States, Germany, and India felt they were able to maintain or increase productivity on individual tasks during the pandemic. &lt;/p&gt;&lt;p&gt;Some of that may have been accomplished by blurring the lines between home and work, says Lucy. &lt;/p&gt;&lt;p&gt;Surveillance technologies like keyloggers, video monitoring, and attention tracking via biometrics have been rising in adoption even before the pandemic. We’re hearing this often says, Lucy: “I like my boss — a lot —  but I would find it a bit creepy if she was tracking every word I write, tracking when I popped off to the loo and listening to my family conversations. And it would make it harder to do my job because I would feel unnecessarily surveilled. It’s really important to assess the correct way to protect data and maintain trust with your employees as humans. Especially with workers working from home in potentially cramped situations, you could be gathering data you don’t need and shouldn’t have.&lt;/p&gt;&lt;p&gt;“Workers generally know that emails are subject to company oversight nearly everywhere, but it’s essential to be transparent about monitoring activities across all applications and devices. Transparency also encourages trust and increases the likelihood that individuals will report issues/mistakes they encounter. Tell them about how long you retain the data, and why and be sure to check local rules about internal and external data sharing — they can vary by region and even by state in the United States. It’s important to only keep what you really need to perform a task,” says Lucy.&lt;/p&gt;&lt;h3 id=&#34;2--How-do-you-encourage-collaboration-&#34;&gt;2. How do you encourage collaboration?&lt;/h3&gt;&lt;p&gt;Nearly everyone became Zoom-literate in 2020. Many people were introduced to Slack or other collaboration tools, and some folks also mixed in personal texts. “As great as these technologies are — and I am speaking as someone who enjoys working with a globally distributed workforce — they’re not going to replicate the physical space. From a privacy perspective, some small changes can mean a lot to employees,” says Lucy.&lt;/p&gt;&lt;p&gt;“Some people enjoy having dogs and kids flow in and out of their workplace. Others prefer to keep things separated. Over the last several months, I’ve noticed some colleagues making different choices.”&lt;/p&gt;&lt;p&gt;Things like Zoom backgrounds can protect employee privacy, but only if they know how to use the tools. If you’re using a collaboration tool like Zoom or Slack, document expected uses, alternatives on offer (as applicable) and make sure employees know how to use tools like Zoom backgrounds. &lt;/p&gt;&lt;h3 id=&#34;3--Onboarding-can-protect-against-data-breaches&#34;&gt;3. Onboarding can protect against data breaches&lt;/h3&gt;&lt;p&gt;Normally, we bring our new employees to our Bellevue, Wash. offices for onboarding. This in-person connection brings all kinds of benefits, including protecting data. “Onboarding may seem like an odd place to bring up data privacy, but people are more likely to feel comfortable reporting potential problems or even breaches when they have formed a connection to their colleagues,” says Lucy.&lt;/p&gt;&lt;p&gt;Establishing connections may mean creating social events (likely on Zoom) or connecting employees for non-work meetings. We have an app that randomly pairs employees for casual chat sessions we call “donuts.” It’s a surprisingly effective way to establish connection and get to know about the day-to-day work life of far-flung colleagues.&lt;/p&gt;&lt;h3 id=&#34;4--Security-and-Privacy-of-Customers-is-Key&#34;&gt;4. Security and Privacy of Customers is Key&lt;/h3&gt;&lt;p&gt;“We’ve had workers who used to be home by themselves all day, suddenly have teenaged children pass through meetings on the way to the fridge,” says Lucy. “It’s charming, but it also means that family members might see things they’re not meant to see. You need to recognize that not everyone has the luxury of a room with a door and a lock. Protecting customer security and privacy is key.”&lt;/p&gt;&lt;p&gt;To your security protocols, Lucy would also suggest adding:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Headphones so you can control what can be overheard (and coaching that awareness with your teams)&lt;/li&gt;&lt;li&gt;Privacy screens for monitors&lt;/li&gt;&lt;li&gt;Printed material (and the printer) needs to be kept in a space that remains locked when not in use&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;Data-Privacy-Checklist-for-Consumer-Facing-Apps&#34;&gt;Data Privacy Checklist for Consumer-Facing Apps&lt;/h2&gt;&lt;p&gt;COVID has brought populations that are used to trust in physical environments online, says Lucy. This is part of why in the UK we’re seeing &lt;a href=&#34;https://www.theguardian.com/money/2021/may/18/delivery-text-scams-the-nasty-new-wave-sweeping-the-uk&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;increase in delivery text phishing scams&lt;/a&gt; where additional funds are requested for delivery. Many of these ploys play on user trust and the expectation that information is being shared securely. We’ll get deeper into how consumers are demanding a secure and contextual private experience in the final post. As preparation, here is a data privacy checklist. Please follow up with your legal counsel on your specifics.&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;strong&gt;Review what you’ve got and why you’ve got it and how you’re getting it.&lt;/strong&gt; It’s not uncommon for apps to gather more information than is necessary to do the job. You need to know what data you have and why you’re collecting it as well how it’s stored to comply with regulations — and to know how to safeguard your customers’ data. &lt;strong&gt;This includes third-party vendors and your marketing teams.&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Make sure your code only collects data you really need&lt;/strong&gt;. The days of data gluttony are coming to an end. Individuals are rightly fed up with the attitude of “just because you can collect as much data as possible, you do. Ask yourself: do you use all the data you collect? Don’t be afraid to reduce the amount of data you collect when you update your app or add new products. Look for opportunities to innovate by using privacy-enhancing technologies to mask or anonymize, or de-identify data. And safely delete the information you don’t use.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Know where your customers are and check out the regulations.&lt;/strong&gt; While the EU’s General Data Privacy Regulation (GDPR) has become the benchmark for data privacy, not every regulation is GDPR. There are differences. Children also often have extra protections. Once you’ve identified where and who your customers are, work closely with your legal counsel to design the right approach.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Securely delete info and keep a record.&lt;/strong&gt; Maybe you’re deleting information due to a verified request or because you have data you actually don’t need; either way, you need to keep a record.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Make sure you have someone responsible for privacy who respects the humans interacting with your app.&lt;/strong&gt; This stuff is not simple. You need someone who looks after it.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Look out for service departments or social media complaints.&lt;/strong&gt; Complaints can show you how the public perceives their data is being used — and identify areas that need your attention.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Communicate clearly with your users.&lt;/strong&gt; Users often need to know how to unsubscribe and other rights as part of data privacy regulations.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Do as you would be done by.&lt;/strong&gt; Think through how you’d like your data to be treated. That’s a good guideline. But also think about the specific customer base - what’s their perspective and might they require additional protections (e.g., if they are a vulnerable group).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Consult your legal counsel.&lt;/strong&gt; Data privacy is a rapidly evolving field. Lawyers really are your friends! Please check in with your legal counsel regularly, and especially if you’re thinking of expanding into a new region.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;Learn-More-about-Identity-s-Role-in-Your-Data-Privacy-Strategy&#34;&gt;Learn More about Identity’s Role in Your Data Privacy Strategy&lt;/h2&gt;&lt;p&gt;As Lucy says, you can have security without privacy, but you can’t have privacy without security if you’d like to learn more about how a robust identity solution can support your data privacy and security strategies, &lt;a href=&#34;https://auth0.com/contact-us&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;please reach out to the team at Auth0&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In the final post in the Acceleration Response Series, we’ll look at how creating a long-term plan for security and privacy can help you meet consumers’ demands.&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/workforce-and-app-privacy-have-changed-so-should-you/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Go fast but not alone — our leaders are here to help secure your workforce and app privacy.</summary>
  </entry>
  <entry>
    <title>Can Your Identity Solution Grow With Your Company?</title>
    <updated>2021-07-29T11:56:00Z</updated>
    <id>tag:auth0.com,2021-07-29:/blog/can-your-identity-solution-grow-with-your-company/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&lt;p&gt;The number of Venture Capital deals signed in Latin America hit a record high of 488 in 2020. That’s nearly double the 2017 number according to &lt;a href=&#34;https://www.bloomberg.com/news/articles/2021-03-16/latin-american-startups-had-record-venture-capital-deals-in-2020&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Bloomberg&lt;/a&gt;. The growth in the tech market in LatAm isn’t only apparent in new startup deals; companies who already have a presence in the region are expanding both through mergers and acquisitions and by looking into new countries to grow their footprint in the region. &lt;/p&gt;&lt;p&gt;Each scenario brings its own challenges for your IT infrastructure, particularly your&lt;a href=&#34;https://auth0.com/blog/how-to-scale-quickly-with-identity/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt; identity solution&lt;/a&gt;. If you’re expanding into a new country, there’s likely to be a different data privacy regulation you’ll have to comply with. And that startup you’re eyeing probably has a vastly different infrastructure than yours, whether private or public cloud or even legacy on-prem. An Identity management solution has to be able to expand and flex in order to grow with your company, regardless of the specific scenario.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1HnNeEEQ4hCBb2M4y2ZerT/5b5a1de004ea8021fdc38d042a85a672/Latam05.jpg&#34; alt=&#34;Business Expansion&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;With-Business-Expansion-Come-Business-Questions&#34;&gt;With Business Expansion Come Business Questions&lt;/h2&gt;&lt;p&gt;Let’s take a look at those two potential growth scenarios and what they mean for your business’s identity solution. First up is the acquisition of a competitor or related smaller entity. &lt;a href=&#34;https://auth0.com/blog/why-your-ma-strategy-has-to-include-an-iam-solution/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Mergers and acquisitions&lt;/a&gt; (M&amp;amp;A) always bring an array of unique challenges, but for this article, we’re going to focus on the identity challenges associated with the merging of IT infrastructure.&lt;/p&gt;&lt;p&gt;Your web app may be hosted on a public cloud, but the company you just bought has been in business for a while and is still using on-prem hosting for theirs. In order for you to bring both properties together under one identity solution, you need one that can bridge the gap between the two, allowing your new audience access to both apps without managing multiple sets of credentials.&lt;/p&gt;&lt;p&gt;In our second scenario, your organization is considering an expansion into a neighboring country to take advantage of the easing of business restrictions and the growing market for your product that your marketing team has identified. You already comply with the privacy regulations in your country, but are you ready to comply with those abroad? &lt;/p&gt;&lt;p&gt;Is your organization ready to answer questions like these:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Can our existing in-house identity platform scale to include our hybrid-cloud infrastructure and the legacy system our latest acquisition uses?&lt;/li&gt;&lt;li&gt;Is our identity solution ready to handle the influx of new user accounts and login requests when we roll out to our new market?&lt;/li&gt;&lt;li&gt;Is our consent gathering process in compliance with the regulations in the country we’re expanding into?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If not, or if the answer to any of these questions is “no,” it may be time to consult with an identity specialist. &lt;/p&gt;&lt;blockquote&gt;&lt;a href=&#34;https://twitter.com/intent/tweet?text=&amp;#34;Auth0%20recommends%20you%20always%20consult%20legal%20counsel%20when%20it%20comes%20to%20complying%20with%20data%20privacy%20regulations.&amp;#34; via @auth0 https://auth0.com/blog/can-your-identity-solution-grow-with-your-company&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;p&gt;&amp;#34;Auth0 recommends you always consult legal counsel when it comes to complying with data privacy regulations.&amp;#34;&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;img alt=&#34;Tweet&#34; src=&#34;https://cdn.auth0.com/blog/resources/twitter.svg&#34;/&gt;&lt;/p&gt;&lt;h4&gt;Tweet This&lt;/h4&gt;&lt;/div&gt;&lt;/a&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;Auth0-Is-the-Identity-Solution-That-Scales-With-You&#34;&gt;Auth0 Is the Identity Solution That Scales With You&lt;/h2&gt;&lt;p&gt;Both of these scenarios mean you’re going to be scaling your infrastructure, adding users to existing web apps, and even adding new web apps. Having an identity solution in place that can easily expand to include controlling access to these new properties can help reign in costs and speed your time to market post-expansion. Our customers tell us that by using Auth0 for their authentication and identity needs, they took their time-to-value from months or years down to weeks or even days.&lt;/p&gt;&lt;p&gt;Credit card company &lt;a href=&#34;https://www.marketwatch.com/story/visa-sees-massive-digital-acceleration-with-millions-trying-e-commerce-for-the-first-time-2020-05-13&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Visa reported&lt;/a&gt; that during just the first month of the COVID-19 pandemic, more than 13 million cardholders in Latin America made their very first e-commerce transaction. That’s 13 million new accounts being created, 13 million new logins, and 13 million opportunities for identity to go wrong if your solution isn’t scalable. There are many aspects to what makes something scalable. When it comes to identity, we see five as being the most important.&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;strong&gt;Bridging legacy and cloud systems&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;One of the downsides to M&amp;amp;A is that your IT department inherits the backend infrastructure of the other company, for better or worse. Auth0’s extensive SDK libraries and robust APIs mean it’s a simple matter to bridge the gap between legacy systems and modern cloud-first ones. One login box can take your current and new customers to both web apps, no matter where they’re hosted. This ability also speeds your time to value because your developers can maintain focus on their core product delivery rather than piecing together connectivity solutions that may only work for a short time.&lt;/p&gt;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;&lt;strong&gt;Single source of truth for customer data&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Bringing all of your customer data together into one single source of truth (SSoT) makes it that much easier to protect. It also speeds access when a user logs in, as no matter which property they’re using, it has only one place to look to find their credentials, rather than scouring multiple data silos.&lt;/p&gt;&lt;ol start=&#34;3&#34;&gt;&lt;li&gt;&lt;strong&gt;Single sign-on&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Customers want low-friction experiences online, and being able to create an account using credentials they already have is a great way to win them over. Single sign-on (using account information from a provider like Apple, Facebook, or Twitter) allows a customer to create an account on your site quickly and easily, and without the need to create and remember a new password.&lt;/p&gt;&lt;ol start=&#34;4&#34;&gt;&lt;li&gt;&lt;strong&gt;Breach protection&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The issue of passwords brings us to a major sticking point for many identity solutions, protecting user information from data breaches. According to the most recent &lt;a href=&#34;https://www.ibm.com/security/data-breach&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;IBM/Ponemon Cost of a Data Breach Study&lt;/a&gt;, the global average cost of a breach is now $3.86 million (USD). And Verizon reports in their &lt;a href=&#34;https://www.verizon.com/business/resources/reports/dbir/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;2021 Data Breach Investigations Report&lt;/a&gt; that 61% of breaches involve misuse of credentials. Put those together, and you see why protecting your customers’ information is such a major piece of scaling your online business presence and why a robust identity solution needs to take this aspect into account.&lt;/p&gt;&lt;ol start=&#34;5&#34;&gt;&lt;li&gt;&lt;strong&gt;Protection from staffing fluctuations&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;An often overlooked aspect of identity projects is the simple fact that people change jobs. If you have an identity tool that was developed in-house two years ago, there’s a good chance you won’t have anyone on staff who can expand it to cover your new properties. That will delay roll-out and extend your time-to-market. &lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://auth0.com/case-studies/wabipay/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 customer WABI&lt;/a&gt; is modernizing e-commerce in Latin America. They’re currently active in 11 countries and have expansion plans to add four more in 2021. And they’re trusting Auth0 to scale their identity solution to match these ambitious plans. “WABI is scalable, and we need a partner that is, too. We believe Auth0 will support us in getting there.” Says WABI Business Manager Juan Manuel Mingo. With their planned expansion opening their market to millions of potential new customers, WABI knows they need a robust identity platform that’s ready to handle the influx of new users.&lt;/p&gt;&lt;h2 id=&#34;Auth0-Brings-Global-Experience-to-Your-Latin-America-Growth-Plans&#34;&gt;Auth0 Brings Global Experience to Your Latin America Growth Plans&lt;/h2&gt;&lt;p&gt;Our founders are from Argentina, the company was started in the United States, and we currently have people in 30+ countries with more being added every day. Our &lt;a href=&#34;https://auth0.com/blog/auth0-expands-global-partner-network-in-latin-america-with-clm/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;international team&lt;/a&gt; of identity specialists can help you work out your identity needs and help get you set up with an identity as a service (IDaaS) platform that is ready to grow with your company, no matter what your expansion plans look like. We know that having an identity solution designed to be extensible and flexible to move with your business can mean the difference between a successful rollout or a failed acquisition attempt. &lt;/p&gt;&lt;p&gt;Auth0 is built on open standards, making it easy to connect with existing systems and varying infrastructure scenarios. Bridging the gap between a public cloud-based web app and an on-prem user database is only the beginning. Our extensive marketplace of integrations means you can connect with your existing business software solutions as well.&lt;/p&gt;&lt;p&gt;Our breach protection includes features such as &lt;a href=&#34;https://auth0.com/docs/attack-protection/bot-detection&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;bot detection&lt;/a&gt;, &lt;a href=&#34;https://auth0.com/multifactor-authentication&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;adaptive MFA&lt;/a&gt;, &lt;a href=&#34;https://auth0.com/single-sign-on&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;single sign-on&lt;/a&gt;, and &lt;a href=&#34;https://auth0.com/passwordless&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;passwordless&lt;/a&gt; flows. And the &lt;a href=&#34;https://marketplace.auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Auth0 Marketplace&lt;/a&gt; has what you need to handle everything from consent management to business process software integrations. The protections and extensibility we offer is a key factor in our scalability. &lt;/p&gt;&lt;p&gt;When the time comes to expand across borders, Auth0 is ready. We’re certified by a third party as compliant with the International Standards Organization (ISO) standards &lt;a href=&#34;https://www.iso.org/obp/ui/#iso:std:iso-iec:27001:ed-2:v1:en&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ISO27001&lt;/a&gt; and &lt;a href=&#34;https://www.iso.org/standard/61498.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ISO27018&lt;/a&gt; for handling information security and personally identifiable information (PII) as a cloud provider.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/1sBMtrIri0sAw0OBkWE4QV/41d7fc8b0740ac05ec3c82145fd1478f/Latam06.jpg&#34; alt=&#34;Growing&#34;/&gt;&lt;/p&gt;&lt;h2 id=&#34;Auth0-is-the-Identity-Solution-That-Can-Keep-Up-With-The-Growing-LatAm-Market&#34;&gt;Auth0 is the Identity Solution That Can Keep Up With The Growing LatAm Market&lt;/h2&gt;&lt;p&gt;To provide your customers with a continuous, low-friction, and intuitive login flow requires a robust identity solution. Whether you’re scaling internationally or your growth plans call for staying closer to home, Auth0 can provide the IDaaS platform you need to maintain a great customer experience while ensuring the security and privacy of your customer data. And don’t worry if you’ve already started an identity project and hit a stumbling block, &lt;a href=&#34;https://auth0.com/contact-us&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;our experts can help&lt;/a&gt;. &lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/can-your-identity-solution-grow-with-your-company/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">The tech market in Latin America is growing; Auth0 can help you keep up with a scalable identity solution.</summary>
  </entry>
  <entry>
    <title>Accelerated Your Road Map? Go Fix Workforce and App Security</title>
    <updated>2021-07-28T16:05:00Z</updated>
    <id>tag:auth0.com,2021-07-28:/blog/accelerated-your-road-map-go-fix-workforce-and-app-security/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section itemscope=&#34;&#34; itemtype=&#34;http://schema.org/BlogPosting&#34; itemprop=&#34;mainEntity&#34;&gt;&lt;header&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;ACCELERATION RESPONSE SERIES&lt;/span&gt;&lt;/p&gt;&lt;p itemprop=&#34;description&#34;&gt;Rapid change introduces workforce and app risks. Auth0 Security team’s advice on what to fix now.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Last Updated On: July 28, 2021&lt;/p&gt;&lt;meta itemprop=&#34;datePublished&#34; content=&#34;2021-07-28&#34;/&gt;&lt;meta itemprop=&#34;dateModified&#34; content=&#34;2021-07-28&#34;/&gt;&lt;/div&gt;&lt;/header&gt;&lt;header&gt;&lt;div&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/lpo0yom5xDZonfNzlOkHc/c55bd864b5d7360bf8a2c307f99c8e40/Security_and_Identity_4x.jpg&#34;/&gt;&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;ACCELERATION RESPONSE SERIES&lt;/span&gt;&lt;/p&gt;&lt;p itemprop=&#34;description&#34;&gt;Rapid change introduces workforce and app risks. Auth0 Security team’s advice on what to fix now.&lt;/p&gt;&lt;p&gt;Last Updated On: July 28, 2021&lt;/p&gt;&lt;meta itemprop=&#34;datePublished&#34; content=&#34;2021-07-28&#34;/&gt;&lt;meta itemprop=&#34;dateModified&#34; content=&#34;2021-07-28&#34;/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/header&gt;&lt;article&gt;&lt;main id=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;&lt;div&gt;&lt;p&gt;Fast response allowed many organizations to survive and thrive in 2020. Orgs went remote overnight; businesses launched consumer-facing apps, and &lt;a href=&#34;https://auth0.com/blog/how-brick-and-mortar-approaches-improve-digital-experiences/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;consumers shifted buying patterns online&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Going fast gets products to market, it gives consumers choices, and it helps companies scale. But when you jump ahead seven to 10 years in your digital road map, you risk leaving a few security and data privacy concerns behind. I reached out to key members of my security team, as well as our data privacy team, to put together this three-part series based on our industry experience and observations.&lt;/p&gt;&lt;p&gt;Each post will focus on protecting and securing two critical areas: your workforce and your consumer-facing apps. The first post will focus on security details to check and mitigate now. The second will focus on immediate data privacy concerns with the help of Auth0 Vice President, Privacy Lucy McGrath. And the third post will help you put together a plan for the future that will make it easier the next time you want to turn on the speed — and to remain current in an ever-changing security landscape.&lt;/p&gt;&lt;p&gt;The thing is that security is a global team sport.  As more of us shift to working and living online, everything is more connected — and that can be a good thing. Securing your personal identity, your business identity, and helping increase security at your business can actually make an impact. Here’s what you can do to help make the internet safer for everyone.&lt;/p&gt;&lt;h2 id=&#34;Why-Remote-Work-Forced-a-Change-in-Security-Thinking&#34;&gt;Why Remote Work Forced a Change in Security Thinking&lt;/h2&gt;&lt;p&gt;Before the world started working remotely, a lot of companies used a castle-and-moat approach to security. They relied on a combination of physical security and internal networks to ensure that employees and outsiders only accessed necessary information. They might even have relied on SaaS companies to provide some of their protections, but the thinking was still pretty much “protect the castle.”&lt;/p&gt;&lt;p&gt;Suddenly workers were working anywhere in the world, maybe on their own devices. Without remote experience, your security team might not have had time to think through all of the security issues inherent with having remote endpoints. For example, to ensure that they properly protect these assets against current threats like ransomware and malware, it would be appropriate to install leading next-gen antivirus on these machines.&lt;/p&gt;&lt;p&gt;Role-based privileges and policies also abruptly needed to follow the user. I know I work for an identity company, but it was identity and policy &lt;a href=&#34;https://auth0.com/blog/why-identity-federation-matters/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;federation&lt;/a&gt; that anticipated this need and allowed for a rapid response.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://www.businessinsider.com/companies-asking-employees-to-work-from-home-due-to-coronavirus-2020&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Now some companies are making work from home a permanent&lt;/a&gt; part of their employee offering. Since Auth0 was built as a remote-friendly, globally dispersed company, we’ve had some time to think through the security concerns. Here’s what you need to consider to protect your customers, your business, and your employees:&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;strong&gt;Secure the endpoints.&lt;/strong&gt; Services like CarbonBlack or CrowdStrike can help prevent malware or breaches occurring from endpoints.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Update bring your own device policies.&lt;/strong&gt; Rethink how and where employees are accessing business and customer data. Do you need to restrict access in public spaces? Adjust policies?&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Update action policies&lt;/strong&gt;. What do your employees do if a work computer is stolen? What steps do they need to take if the information is exposed at home? A &lt;a href=&#34;https://www.darkreading.com/51--of-wfh-parents-say-children-have-accessed-work-accounts/d/d-id/1339754&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;1Password survey&lt;/a&gt; found that 51% of work from home (WFH) parents surveyed said their children had accessed their work accounts, sometimes accidentally deleting necessary files.  How can you support your employees??&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Human risk is increased.&lt;/strong&gt; Have a look at the next section.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;The-Human-Element&#34;&gt;The Human Element&lt;/h2&gt;&lt;p&gt;This is the critical part of this series — &lt;strong&gt;the human element is the most important aspect of security and data privacy.&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Security awareness training needs to happen at every single level of your organization.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;A malicious actor is going to use everything you need to do business — email address patterns, information on your website, social media posts, and items gleaned from news articles all to try to gain entry to your system. While the attacks will vary, they usually follow this pattern: &lt;strong&gt;human factor&lt;/strong&gt; + inject something into the code + lack of input validation + insufficient logging and monitoring.&lt;/p&gt;&lt;p&gt;If something looks like it’s coming from your CEO or payroll, an employee might fall for it and supply a way into your system. And once a bad actor is in, there’s lots they can do.&lt;/p&gt;&lt;p&gt;But if you train your entire team to watch out for phishing attacks, you can stop them at the first step. &lt;a href=&#34;https://auth0.com/blog/protecting-against-phishing-attacks/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;This post is a good place to start.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Attacks evolve, so even though security awareness is something you should pause and do now, it’s something you’re going to need to do regularly. Developing a security culture throughout your org provides great protection. To do business with some industries like finance or healthcare, the training will be required to cover specific areas and will need to be documented. The training you provide can also help protect your employees in their personal lives.&lt;/p&gt;&lt;h2 id=&#34;Top-7-Things-to-Do-Now-to-Check-Your-App-s-Security&#34;&gt;Top 7 Things to Do Now to Check Your App’s Security&lt;/h2&gt;&lt;p&gt;This can seem like a lot if you don’t have an in-house security team (and maybe if you do). One principle of security is encouraging diversity of thought not only because it’s the right thing to do but because studies show it makes teams more productive. In security, &lt;a href=&#34;https://www.mckinsey.com/business-functions/strategy-and-corporate-finance/our-insights/innovation-in-a-crisis-why-it-is-more-critical-than-ever&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;diversity of thought&lt;/a&gt; makes it easier to spot potential threats. This is part of why even large teams rely on external testing vendors and may even need to provide proof of outside testing for certifications like &lt;a href=&#34;https://auth0.com/blog/the-csa-star-program-a-business-guide-to-certification/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CSA Star&lt;/a&gt; and &lt;a href=&#34;https://auth0.com/blog/what-is-pci-a-business-guide-to-compliance/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;PCI&lt;/a&gt;.&lt;/p&gt;&lt;ol start=&#34;1&#34;&gt;&lt;li&gt;&lt;strong&gt;Get an external third-party pen test — and implement the recommendations&lt;/strong&gt;. A penetration test is where you hire a verified third party to attempt to find your app’s vulnerabilities. They will sign a non-disclosure agreement (NDA) and provide a detailed report outlining their findings and usually with recommended fixes cataloged by severity. Discovering vulnerabilities can be scary, and there is the temptation to use fear to drive organizational change, but we’ve found that partnering and collaborating with other teams and leadership can often get changes implemented faster.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Review best practices for your cloud-based services.&lt;/strong&gt; When people go really fast, they may not take the time to fully understand the technology and security controls. This is a great time to go back and pay really close attention to the docs provided by your third-party vendors.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;“Many common AWS security issues, for example, happen as a result of not following AWS security best practice guidelines when setting up the infrastructure. This can lead to open and accessible EC2 security groups, public S3 buckets, unprotected EMR clusters, and more,” says Auth0 Detection and Response Security Engineer Troy Wegner (formerly of AWS and Amazon.com).&lt;/p&gt;&lt;/blockquote&gt;&lt;ol start=&#34;3&#34;&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.overops.com/blog/static-vs-dynamic-code-analysis-how-to-choose-between-them/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Perform static&lt;/a&gt; and &lt;a href=&#34;https://www.overops.com/blog/static-vs-dynamic-code-analysis-how-to-choose-between-them/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;dynamic code analysis&lt;/a&gt;&lt;/strong&gt;. Static analysis reviews the code as it exists. Dynamic analysis looks for vulnerabilities while the code is being executed and for unexpected outcomes. Ideally, you want to move towards baking both into your Software Development Lifecycle (SDLC). Devs may not always enjoy adding this to part of their process—more on how to add this analysis to your long-term software development plans in the final post.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Think through vulnerability management and updates&lt;/strong&gt;. Since humans are fallible and it’s humans who make code, it’s inevitable that you’re going to run into vulnerabilities. If you don’t have a plan for pushing updates, now’s the time to make one so you don’t hear about something BIG like the &lt;a href=&#34;https://www.vox.com/2014/6/19/18076318/heartbleed&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Heartbleed Bug&lt;/a&gt; and find yourself painfully updating ad-hoc.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;In general, you’re going to need to test every time your devs update something and whenever your tech stack libraries or any of the main operating systems updates. Services like Chef, Puppet and Terraform can make this easier by pushing updates from a central server to connected servers. In the final post, we’ll get into longer-term strategies for updates, like maintaining a Golden Amazon Machine Image (AMI) if you’re on AWS. For now, just document how and when you’re going to update and test.&lt;/p&gt;&lt;/blockquote&gt;&lt;ol start=&#34;5&#34;&gt;&lt;li&gt;&lt;strong&gt;Threat model&lt;/strong&gt;. A lot of security is determining risks. Ideally, you’ve threat modeled before building your app, but in some ways, it’s easier to model after it’s live. Yes, you can hire a trusted third party to do this for you. To give you a sense of the thought process, I asked Troy to threat model this restaurant scenario. Security engineers often diagram vulnerabilities, so we also include Troy’s whiteboard as a reference.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let’s say you’re a local restaurant who responded to COVID by offering the ingredients to make your tastiest dishes and recipes to your customers via curbside pickup. You hired someone to put the app together quickly, but now your region is opening up, and you’ve decided this channel of operations should continue contributing to your bottom line. &lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://images.ctfassets.net/23aumh6u8s0i/3qWEruezG4YZw2AwS2w4Nf/ccb3121e94d794c8baa0ec470e4b084d/diagram.jpg&#34; alt=&#34;Whiteboard&#34;/&gt;&#xA;&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Auth0 Senior Security Engineer - Detection and Response Troy Wegner’s whiteboard of our restaurant scenario.&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Start with authentication because you know customers need to authenticate in order to interact with your app. How are they authenticating? Are they only using a username and password? If they are only using a username and password for authentication, then you have just hit on your first major risk (user compromise/phishing/user impersonation).&lt;/li&gt;&lt;li&gt;As a way to address the first risk identified, you have chosen to go with two-factor authentication for your users. But here is where things get interesting; which 2-factor options do you want to support? There are authenticator apps, FIDO U2F, Push-based 2FA, and SMS (the weakest available option). Each option has its own pros and cons to consider.&lt;/li&gt;&lt;li&gt;Since this is a restaurant, you’re also somehow connecting the app to the food supply. How are you measuring and validating your existing ingredients inventory to ensure you do not oversell based on your total ingredients available? Are you using a database to store this information? If so, where does this database live, is it protected or hardened information security wise, and if so, how is it hardened? How do you authenticate to the database, is it updated regularly, do you perform backups, etc.&lt;/li&gt;&lt;li&gt;If your service has gotten really popular, too many people might try to order at once, and that could overwhelm the app’s limits. The app could go down due to resource constraints based on how it is architected. This is basically the risk a DOS/DDOS would present in bringing your app down and making it no longer available to your customers. In order to mitigate a DDOS risk, you might have a plan to make your app more fault tolerant and highly available by using load balancing, increasing back-end servers to handle the load, or using a front-end CDN to help distribute load across various edge locations.&lt;/li&gt;&lt;li&gt;Most likely, your app is taking payment and processing it in order to fulfill orders; how are customer payment and other sensitive information being handled/stored? If you accept credit cards or debit cards, PCI compliance is a concern you should address.&lt;/li&gt;&lt;li&gt;Here is where you would now want to think through and fully diagram out the rest of how the app works and uncover any other risks or bottlenecks that currently exist with your app, place a severity on those risks, and determine by severity which risks you want to fix, and which ones you are ok accepting.&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;6&#34;&gt;&lt;li&gt;&lt;strong&gt;Turn on your logs — and make sure they’re monitored&lt;/strong&gt;. Turning on logs can seem like common sense, but because there’s often an expense attached to logging and getting the data analyzed, the logs might not always be turned on. It’s really hard to know what to fix after a malware outbreak or other issues occur, especially if your logs aren’t turned on and are being actively analyzed.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;So this is where we tell you to turn on the logs for all the services you’re using. You should also make sure that a trusted third-party vendor or trained security engineer is watching your logs and building actionable detections based on those log sources to look for suspicious or anomalous activity.&lt;/p&gt;&lt;ol start=&#34;7&#34;&gt;&lt;li&gt;&lt;strong&gt;Take action&lt;/strong&gt;. Logs, vulnerability assessments, pen tests — these things can help you identify what needs to be fixed, but you still need to fix it. Breaches and ransomware are the obvious security problems you want to avoid. How your security challenges impact consumer behavior might not be as clear. Lost conversions, abandoned shopping carts, and low time on site are all indications that your target audience may not feel comfortable sharing their data with you. Our customers tell us that an app or site that feels secure (think smooth login, logical and smooth payment process) supports their business goals.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;If-You-Need-More-Help&#34;&gt;If You Need More Help&lt;/h2&gt;&lt;p&gt;Authentication is often a critical part of securing an app or workplace. If you’d like to understand how Auth0’s solutions might help make your app more secure, please reach out to the &lt;a href=&#34;https://auth0.com/contact-us&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;team at Auth0&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;My next post will focus on immediate data privacy concerns with the help of Auth0 Vice President of Privacy Lucy McGrath.&lt;/p&gt;&lt;div&gt;&lt;h2 id=&#34;About-Auth0&#34;&gt;About Auth0 &lt;/h2&gt;&lt;p&gt;Auth0’s modern approach to identity enables organizations to provide secure access to any application, for any user. The Auth0 platform is a highly customizable identity operating system that is as simple as development teams want and as flexible as they need. Safeguarding billions of login transactions each month, Auth0 delivers convenience, privacy, and security so customers can focus on innovation. For more information, visit &lt;a href=&#34;https://auth0.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/main&gt;&lt;/article&gt;&lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://auth0.com/blog/accelerated-your-road-map-go-fix-workforce-and-app-security/" rel="alternate"></link>
    <link href="" rel="enclosure"></link>
    <summary type="html">Rapid change introduces workforce and app risks. Auth0 Security team’s advice on what to fix now.</summary>
  </entry>
</feed>