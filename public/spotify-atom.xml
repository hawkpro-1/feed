<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spotify</title>
  <id>https://engineering.atspotify.com/</id>
  <updated></updated>
  <link href="https://engineering.atspotify.com/"></link>
  <entry>
    <title>&#xA;                                            Chantal Delfeld: Engineer&#xA;</title>
    <updated>2022-03-09T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2022-03-09:/2022/03/chantal-delfeld-engineer/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-5158&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;        &#xA;         &lt;div&gt;&#xA;            &lt;div&gt;&#xA;            &lt;h2&gt;Putting the Spotlight on our technical employees&lt;/h2&gt;&#xA;    &lt;p&gt;My beat is a blog series that turns the spotlight towards technical employees across various desciplines and roles to showcase what a typical day as a Spotifier consists of.&lt;/p&gt;&#xA;            &lt;/div&gt;&#xA; &#xA;             &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/Header-Image_Chantal-Delfeld.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/Header-Image_Chantal-Delfeld.png 1200w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/Header-Image_Chantal-Delfeld-250x156.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/Header-Image_Chantal-Delfeld-700x438.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/Header-Image_Chantal-Delfeld-768x480.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/Header-Image_Chantal-Delfeld-120x75.png 120w&#34; sizes=&#34;(max-width: 1200px) 100vw, 1200px&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;div&gt;&#xA;             &#xA;                 &lt;p&gt;&lt;b&gt;Chantal is a Software Engineer and part of the Spotify team in New York. But she lives thousands of miles away in Austin, Texas – with her husband, mother and two young children. &lt;/b&gt;&lt;/p&gt;&#xA;             &lt;/div&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;blockquote&gt;&lt;p&gt;7:00am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My early mornings are spent running about after my children – getting them dressed, giving them breakfast and putting on their sunscreen, so they’re all ready for the day ahead. At 8am, I drive my daughter to preschool, while my mom looks after my one-year-old son – she’s been living with us since the start of the pandemic and has been a huge help when it comes to family life and childcare.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;8:30am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Back home after drop-off, I make myself a nice coffee, head to the home office we’ve built in our backyard and get started on my working day. I’m a full-stack engineer, focussing mostly on the backend. But I’m becoming ‘T-shaped’ – which means gaining a broad knowledge of certain areas and doing some frontend work too – and I really like the variety that brings.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I’ve been at Spotify six months now, working as part of a big team that deals with commerce-related projects. Our main product is a wallet that allows creators to add credit cards as payment. And right now, we’re improving our operations ahead of opening up in new markets – getting ourselves ready for the increased traffic and making sure we’ve got all the right learnings and monitoring in place for this exciting new phase. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’re also in the process of developing a middle layer between our frontend and backend services – a sort of gateway service that means frontend won’t ever have to deal with backend directly. We have a lot of dependencies with other services and this new gateway will help us integrate with them more easily. It’ll also make things more secure, so it’s a really great project to be part of. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;12:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I take a half-hour break around noon and grab a few minutes with my mom and son while heating up some food for lunch. I usually eat at my desk though – I’m new to the world of commerce and take every chance to do additional reading or watch something that’s related to the field. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;12:30pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the afternoon, I tend to have a few more meetings, or I often pair with someone in our team and work through a certain task or issue together. It’s nice to have someone to communicate with in this way, since I work remotely and haven’t actually met any of my team in person! &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I can’t see myself moving to New York anytime soon, but what’s really great is that Spotify is running lots of workshops to help with remote working – I’m doing one called ‘Rethinking Communication in a Distributed World’ and another all about asynchronous communication. I’m really keen to make sure that my team know I’m there for them whenever they need me – despite the distance and the time difference. That’s super-important to me and I’m doing everything I can to make sure things run smoothly.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;3:30pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Time to pick up my daughter from preschool and have a quick play with both children, before wrapping up a few last bits and bobs for work. When that’s all done, I make dinner for the kids and go through the usual bedtime madness – then, I sit down with my husband for dinner, get a little grown-up time and chat about the ups and downs of our days.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;111&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-250x40.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-768x121.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-120x19.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering.png 1525w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;595&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/Chantal-Delfeld_Weekly-Breakdown-700x595.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/Chantal-Delfeld_Weekly-Breakdown-700x595.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/Chantal-Delfeld_Weekly-Breakdown-250x213.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/Chantal-Delfeld_Weekly-Breakdown-768x653.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/Chantal-Delfeld_Weekly-Breakdown-1536x1306.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/Chantal-Delfeld_Weekly-Breakdown-120x102.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/Chantal-Delfeld_Weekly-Breakdown.png 1584w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;You can hear more about Chantal’s life as a Spotify engineer on our new podcast &lt;a href=&#34;https://open.spotify.com/episode/43cbJh4ccRD7lzM2730YK3&#34;&gt;NerdOut@Spotify&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&#xA;&#xA;         Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2022/03/chantal-delfeld-engineer/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/Header-Image_Chantal-Delfeld.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Chantal is a Software Engineer and part of the Spotify team in New York. But she lives thousands of miles away in Austin, Texas – with her husband, mother and two young children.</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Jordan Loeser: Web Engineer&#xA;</title>
    <updated>2022-03-04T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2022-03-04:/2022/03/jordan-loeser-web-engineer/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-5150&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;        &#xA;         &lt;div&gt;&#xA;            &lt;div&gt;&#xA;            &lt;h2&gt;Putting the Spotlight on our technical employees&lt;/h2&gt;&#xA;    &lt;p&gt;My beat is a blog series that turns the spotlight towards technical employees across various desciplines and roles to showcase what a typical day as a Spotifier consists of.&lt;/p&gt;&#xA;            &lt;/div&gt;&#xA; &#xA;             &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/0132-Wrapped-MyBeat-takeover_Jordan.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/0132-Wrapped-MyBeat-takeover_Jordan.png 1000w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/0132-Wrapped-MyBeat-takeover_Jordan-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/0132-Wrapped-MyBeat-takeover_Jordan-700x343.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/0132-Wrapped-MyBeat-takeover_Jordan-768x376.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/0132-Wrapped-MyBeat-takeover_Jordan-120x59.png 120w&#34; sizes=&#34;(max-width: 1000px) 100vw, 1000px&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;div&gt;&#xA;             &#xA;                 &lt;p&gt;&lt;b&gt;Jordan works at Spotify in New York and has been part of Spotify Wrapped for the past two years…&lt;/b&gt;&lt;/p&gt;&#xA;             &lt;/div&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;p&gt;&lt;strong&gt;Tell us more about working on Spotify Wrapped… &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My main focus on Wrapped was the social media share cards – the static images that summarize the information from someone’s data stories and can be shared on platforms like Instagram, TikTok and Snapchat. Since these cards must accommodate a variety of languages and dynamic data within a fixed space, we needed to work really closely with our designers and localization team right from the start and there were plenty of interesting challenges to work through together. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;What were the biggest challenges? &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By far the most challenging – and exciting – share card to implement was the &lt;a href=&#34;https://engineering.atspotify.com/2021/12/the-audio-aura-story-mystical-to-mathematical/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Audio Aura&lt;/a&gt; story. This was our first time leveraging this kind of advanced web technology to generate graphics in real-time, so there was lots of trial and error. But after experimenting and collaborating closely with our designers, we were able to get things just right. And with nearly 100 different aura combinations presented in 30 different languages, this share card really got people talking. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;What was the most inspiring moment? &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One moment that stands out to me vividly is the first time we were able to run through the full, end-to-end Wrapped experience using our own listening data. That test session was the first time we could see all the brand kit, data stories and share cards come together and really enjoy the fruits of our collaboration in a tangible way. Seeing our own favorite artists and hearing our own top tracks was a great reminder of why the experience resonates with listeners and what makes Wrapped so magical in the first place.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;What made it a fun project to be part of? &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It was a joy to collaborate with such an incredible team of bright, talented colleagues. And I love working on something so visual and user-facing – it’s amazing to release Wrapped into the wild and see how users engage and make it their own after launch. Working on a project that has such a presence on social media and generates so many memes and comments never fails to blow me away – it’s the part of the campaign that I truly cherish every year.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Any special shout-outs? &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It really does take a village! Share cards wouldn’t have been possible without the help of so many brilliant Spotifiers: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Samantha Whitt, my collaborator and share card builder extraordinaire&lt;/li&gt;&lt;li&gt;Melia Wagner, expert in all things Localization&lt;/li&gt;&lt;li&gt;Our exceptional designers, Angeline Toh, Cait Charniga and Sona Dolasia&lt;/li&gt;&lt;li&gt;My backend heroes, Mike Smith and Patty Santa Cruz&lt;/li&gt;&lt;li&gt;Genius problem-solver, Itay Yahimovitz&lt;/li&gt;&lt;li&gt;Our fearless tech lead and my mentor, Zela Taino&lt;/li&gt;&lt;li&gt;The glue of it all, our road manager, Udaya Uma Pillalamarri&lt;/li&gt;&lt;li&gt;Last but not least, my incredible manager and advocate, Ashley Casey.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&#xA;&#xA;         Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/web/&#34; rel=&#34;tag&#34;&gt;web&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/wrapped21/&#34; rel=&#34;tag&#34;&gt;Wrapped21&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2022/03/jordan-loeser-web-engineer/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/0132-Wrapped-MyBeat-takeover_Jordan.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Tell us more about working on Spotify Wrapped… My main focus on Wrapped was the social media share cards – the static images that summarize the information from someone’s data stories and can be shared on platforms like Instagram, TikTok and Snapchat. Since these cards must accommodate a variety</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Introducing NerdOut@Spotify: A New Podcast for Developers&#xA;</title>
    <updated>2022-03-01T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2022-03-01:/2022/03/introducing-nerdout-at-spotify-tech-podcast/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-5125&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;March 1, 2022&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2022/03/introducing-nerdout-at-spotify-tech-podcast/&#34; title=&#34;Introducing NerdOut@Spotify: A New Podcast for Developers&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/NerdOut@Spotify.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/NerdOut@Spotify.png 1000w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/NerdOut@Spotify-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/NerdOut@Spotify-700x343.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/NerdOut@Spotify-768x376.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/NerdOut@Spotify-120x59.png 120w&#34; sizes=&#34;(max-width: 1000px) 100vw, 1000px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; For years, Spotify’s official engineering blog has been giving you a peek behind the curtain at Spotify R&amp;amp;D. Today, we’re announcing &lt;a href=&#34;https://open.spotify.com/show/5eXZwvvxt3K2dxha3BSaAe?si=a6db69f76efe4459&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;NerdOut@Spotify&lt;/a&gt;, our new R&amp;amp;D podcast that gives you another view into our tech world. In each episode I’ll talk with Spotify developers about challenging tech problems and give you a firsthand look into what we’re doing, what we’re building, and what we’re nerding out about at Spotify every day.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As a Spotify engineer, I’ve seen this company transition from a music-only service that was fighting to keep up with the speed of our user growth to becoming an audio streaming platform operating at global scale. I’m excited to see what happens next in our tech journey, and this podcast gives us a way to share that journey with you, while introducing you to the amazing people who work here. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Come learn with us&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Software development has always been a very rapidly changing field, and every company does it a little bit differently. Both writing software and owning and operating high-scale systems have drastically changed over the years, and will continue to rapidly change every day. This brings new challenges, new technologies, new languages, but also bigger opportunities and all new ways to make an impact. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As developers in this rapidly changing industry, we’re constantly learning; finding new things that we didn’t know about every day. If you’d like to join us on our journey of constantly experimenting, inventing, building, testing, and debugging, and just dig much deeper into all of the nerdy things that we’re up to at Spotify, NerdOut@Spotify is the podcast for you.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Tackling tech issues from the inside out&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Join us on a behind-the-scenes tour of how we innovate at Spotify. We’re tackling interesting challenges and exploring the possibilities that new technology and trends bring to our products. Find out what we’re currently learning about — new cloud services, open source software like our own Backstage, infrastructure trends like Kubernetes, applying new innovations in machine learning, and our constantly increasing scale and the challenges that that brings. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We believe that these are the same problems that many of our peer companies are facing. So, we are bringing these conversations from the hallways of conferences to your podcast player. We’ll bring these topics in a way that only Spotify can, and highlight the ways in which we are approaching these challenges that are unique to our aligned and autonomous squad culture. Of course, we’ll also touch on the playful sides of our culture and show you some of the nerdy ways in which we have fun.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Meet the people behind the tech&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In every episode, you’ll hear from nerds just like you digging into topics that they love. We’ll introduce you to people from all over Spotify and all around the world — developers, engineering managers, data scientists, designers, PMs, and just about any other R&amp;amp;D role — from all experience levels and backgrounds. Hear their individual stories and how they got to where they are now. Share in their passions, and learn from their failures and successes. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ll cover plenty of big topics, but won’t be afraid to go a little too deep into some small obsessions, covering everything from the world of DevOps and some language wars, to Lego, gymnastics, and Kubernetes clusters running the lights in our homes.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Listen and subscribe now&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our first few episodes are live now and dive into the deep end: We explore open source, the problem of developer experience, and &lt;a href=&#34;https://backstage.io/docs/overview/what-is-backstage&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt;, the open platform for building developer portals that was created at Spotify, donated to the &lt;a href=&#34;https://www.cncf.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Cloud Native Computing Foundation (CNCF)&lt;/a&gt;, and is now maintained by a worldwide community of contributors. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;343&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/NerdOut_Ep01_Backstage-700x343.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/NerdOut_Ep01_Backstage-700x343.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/NerdOut_Ep01_Backstage-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/NerdOut_Ep01_Backstage-768x376.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/NerdOut_Ep01_Backstage-120x59.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/NerdOut_Ep01_Backstage.png 1200w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Come and &lt;a href=&#34;https://open.spotify.com/show/5eXZwvvxt3K2dxha3BSaAe?si=a6db69f76efe4459&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;listen on Spotify&lt;/a&gt; or wherever you get your podcasts, including:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://podcasts.apple.com/us/podcast/nerdout-spotify/id1610028432&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy84MDU2ODJiMC9wb2RjYXN0L3Jzcw&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Google Podcasts&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://overcast.fm/itunes1610028432/nerdout-spotify&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Overcast&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://pca.st/1t2eonyr&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Pocket Casts&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Be sure to follow &lt;a href=&#34;https://open.spotify.com/show/5eXZwvvxt3K2dxha3BSaAe?si=a6db69f76efe4459&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the show&lt;/a&gt; so you’re in the loop when new episodes drop. I hope that you’ll listen and enjoy the show.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;NerdOut@Spotify is produced by Spotify’s Ted Vergakis and our friends at &lt;/em&gt;&lt;a href=&#34;https://seaplanearmada.com/&#34;&gt;&lt;em&gt;Seaplane Armada&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-culture/&#34; rel=&#34;tag&#34;&gt;engineering culture&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2022/03/introducing-nerdout-at-spotify-tech-podcast/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/03/NerdOut@Spotify.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR For years, Spotify’s official engineering blog has been giving you a peek behind the curtain at Spotify R&amp;D. Today, we’re announcing NerdOut@Spotify, our new R&amp;D podcast that gives you another view into our tech world. In each episode I’ll talk with Spotify developers about challenging</summary>
    <author>
      <name>Published by Dave Zolotusky, Principal Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Search Journey Towards Better Experimentation Practices &#xA;</title>
    <updated>2022-02-28T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2022-02-28:/2022/02/search-journey-towards-better-experimentation-practices/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;February 28, 2022&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2022/02/search-journey-towards-better-experimentation-practices/&#34; title=&#34;Search Journey Towards Better Experimentation Practices &#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Search-journey-towards-better-experimentation-practices_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Search-journey-towards-better-experimentation-practices_Header.png 2106w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Search-journey-towards-better-experimentation-practices_Header-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Search-journey-towards-better-experimentation-practices_Header-700x352.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Search-journey-towards-better-experimentation-practices_Header-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Search-journey-towards-better-experimentation-practices_Header-1536x772.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Search-journey-towards-better-experimentation-practices_Header-2048x1029.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Search-journey-towards-better-experimentation-practices_Header-120x60.png 120w&#34; sizes=&#34;(max-width: 2106px) 100vw, 2106px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify, we aim to build and improve our product in a data-informed way. To do that, teams are encouraged to generate and test hypotheses by running experiments and gathering evidence for what works and what doesn’t. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the Search team, in our journey towards this goal, we have learned that, besides having the ambition, we need at least two more things:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;An experimentation platform that allows us to run experiments at scale and generate accurate results&lt;/li&gt;&lt;li&gt;A product development culture with evidence-based hypothesis testing at its core&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Over the last two years, Spotify has invested in building a new Experimentation Platform (see &lt;a href=&#34;https://engineering.atspotify.com/2020/10/29/spotifys-new-experimentation-platform-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s New Experimentation Platform (Part 1)&lt;/a&gt; and &lt;a href=&#34;https://engineering.atspotify.com/2020/11/02/spotifys-new-experimentation-platform-part-2/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s New Experimentation Platform (Part 2)&lt;/a&gt;) which, to a large extent, solves the first point. The experimentation platform is already mature and offers most of the functionality and flexibility required — and the pace at which the experimentation platform improves is often faster than the rate of adopting new functionality by individual teams. In addition, a lot of documentation and best practices have been established for the platform’s functionalities, which help with the process of setting up tests. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But the effort to adopt a truly data-informed product development process doesn’t stop there — it requires continuous effort and push. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Experimentation practices and data-driven product development is often considered a data science topic — and that is true to some extent. Data scientists usually have a deeper understanding of statistics and experimentation, so they tend to be the most excited about adopting a data-driven product development culture. The Search team at Spotify consists of several engineering teams, an array of product managers, a product insights team with a number of data scientists, and a product area leads group. You’d probably guess that engineering teams have to be pretty independent from data scientists to avoid creating bottlenecks, and you’d be right. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Defining best practices for experimentation is made relatively easily thanks to hundreds of articles that explain how to do things like perform a power analysis, choose metrics, interpret a p-value, etc. It is, however, less easy to integrate those practices day to day and turn them into habits. This requires creating an environment where adapting ways of working to improve our experimentation culture feels empowering, rather than uncomfortable, in a diverse team with different disciplines and varying levels of knowledge. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Read on to find out more about the two key drivers of our success and the concrete actions we took over the last year.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Key driver 1 – Roadmap&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When it comes to adopting a truly data-informed product development process, the road to the end goal can feel overwhelming both for the engineering team and for data scientists. It is crucial that the plan towards that goal takes into account the maturity, ability, and bandwidth of the teams. In large organizations, these aspects often vary a lot from team to team and across parts of the organization. Too much too soon will lead to people feeling overwhelmed and giving up; too little too seldom and the momentum and excitement will be lost. To make this balancing easier, we created a roadmap with three simple steps:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;Individual experiment quality — Adopt quality standards for each experiment to meet&lt;/li&gt;&lt;li&gt;Cross-experiments quality — Coordinate individual experiments&lt;/li&gt;&lt;li&gt;Measure total business impact — Estimate the cumulative impact of all the features released in a quarter&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Step 1 — Individual experiment quality &lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For an experiment to bring the promised gold-standard value to a product decision, many things have to be in place: proper hypothesis, well-defined metrics to evaluate the hypothesis, decision rules set before the experiment starts, etc. These individual practices can be introduced to the teams gradually, making each one easy to integrate into the workflow. Combined, they raise each experiment to the gold-standard level. The main goal of Step 1 is to ensure that each experiment leads to a highly reliable data-informed product decision. Once the quality, and thereby the value, of each experiment starts to improve, the number of experiments will often also increase. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify Search, we continue to scale the speed of iteration in each team using experiments, and thus need to make each decision transparent and self-explanatory for anyone, e.g., new team members or those external to the team. For this reason, it is important to guide individual teams during Step 1 into using shared practices. Examples of such shared practices are using common conventions for naming experiments, writing hypotheses, and logging decisions after the experiment ends. We have applied this by having our Search data science team provide and advocate for simple templates for test specifications and experiment setups. These templates help remind each team member of important steps and considerations for each test while also streamlining the practices across teams. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Step 2 — Cross-experiments quality&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Another important aspect of experimentation at Spotify is coordination. Most of the time, teams have to run several experiments on top of each other, and some of these experiments must be coordinated in the sense that the same user cannot be in two experiments at the same time.  The Search team is no exception and coordinating experiments is a big part of our effort.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/03/10/spotifys-new-experimentation-coordination-strategy/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s experimentation platform&lt;/a&gt; has flexible coordination capabilities, so coordinating experiments at scale is possible, but it requires cross-team collaboration and alignment. The Search data science team helps experimenting teams find the right setup for the right experiment, and provides guidelines to avoid running out of users that are available to try our new search features. This effort is again helped by the Step 1 alignment, where template experiments have pre-selected coordination behaviors that nudge team members to select the appropriate setup.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Step 3 — Measure total business impact&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The final step of our plan to adopt a truly data-informed product development process is to measure the total impact of a product initiative over some relevant reporting time period, e.g., a quarter. The goal is to answer the question “What is the combined causal effect of all our product changes on our key metrics?” This can be done in several ways. A simple and naive total impact analysis is to sum the individual estimated causal effects from the experiments of all shipped product changes. At Spotify Search we use quarterly holdbacks to estimate the total impact of the product development program. This is achieved by holding a set of users back from all product changes during the quarter. At the end of the quarter, we run one experiment on the users in the holdback, where one group is given no product change (control group), and one group is given all the shipped product changes (treatment group). This yields an unbiased estimator of the total causal effect of all product changes and directly answers the question posed above. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;352&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Before-the-quarter-700x352.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Before-the-quarter-700x352.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Before-the-quarter-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Before-the-quarter-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Before-the-quarter-120x60.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Before-the-quarter.png 1011w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 1: During the quarter&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;307&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/After-the-quarter-700x307.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/After-the-quarter-700x307.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/After-the-quarter-250x110.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/After-the-quarter-768x337.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/After-the-quarter-120x53.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/After-the-quarter.png 1011w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 2: After the quarter&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;An important aspect of these steps is that they grow from within one team and spread across teams and within each individual experiment to across several experiments within the same initiative.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It is not uncommon that experimentation initiatives in larger organizations are driven by the middle-level decision makers’ need for better total business impact estimates to guide future priorities. However, it is important to acknowledge that measuring the impact of a full product initiative with decent precision is not a trivial thing to achieve. This is especially challenging when product evaluation is not already a natural part of the product development culture. Our belief and experience is that the quickest way to achieve proper overall product evaluation is to build from the bottom up with solid product evaluation practices in each team. Moreover, we have found that each of these steps has brought a lot of value to our product development cycle beyond measuring impact, e.g., product quality awareness, better practices around product evaluation in general, knowledge sharing, and alignment across product teams. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Key driver 2 – Constant injection of energy&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;&lt;strong&gt;Starting the fire&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Building great experimentation practices is like starting a fire with wet wood. It won’t start just because you provide a spark, but if you give it care and provide it with the right resources, the fire will eventually start and burn by itself. It’s the same for experimentation practices. You will need to start with a source of energy, pulling and pushing in the right direction, and you will need to continuously inject energy, for a long time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Adopting new practices that sometimes conflict with existing habits is a big challenge — it will take time and effort to convince teams of the value that experimentation brings to the product development process.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our learnings reveal that at the beginning of the journey, a lot of things have to be boosted and done &lt;em&gt;for&lt;/em&gt; the engineering teams rather than &lt;em&gt;by&lt;/em&gt; them. By actually setting up and reviewing tests &lt;em&gt;for&lt;/em&gt; the teams, it allows them to see for themselves that the amount of work required on a day-to-day basis is manageable and, most importantly, the value those efforts bring to the team and product. Doing certain tasks for the teams will also deepen the trust between the experimentation advocate and the teams, reassuring engineers that they will get support along the way.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the early experimenting stage of any team, it is critical to accept that some tests will not be perfect and some product decisions, therefore, not fully data informed. However, it is of the utmost importance that the teams get sufficient support to succeed with an experiment by continuously injecting support and energy, starting the fire and keeping it burning. In our experience, the key to the success of starting experimentation is endurance and continuity. The smallest lighter can make any wet wood burn with sufficient time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;&lt;strong&gt;Maintaining the fire&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Just as we had to scale our practices between teams, we had to scale the injection of energy. The solution to scale presented itself in the form of individuals across Search teams who developed an interest and expertise in experimentation and became new precious sources of energy. As we progressed as a team towards more data-driven product development, the expertise and support gradually transferred from the advocating team to individual team members who naturally started to inject energy. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In big and agile organizations, there are often organizational changes made to fit new needs, as well as new people joining, which makes it harder to keep practices aligned. So even if the fire burns by itself at some point, it is still crucial to have people dedicated to keep injecting energy, restarting and boosting the fire continuously. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Spotify Search in 2021&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that we have covered the major steps and principles that led Spotify Search on the journey to data-driven product development, we will look in more detail at the specific actions that were taken in Search last year.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;177&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Timeline-700x177.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Timeline-700x177.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Timeline-250x63.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Timeline-768x195.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Timeline-120x30.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Timeline.png 1404w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;December 2020:&lt;/strong&gt; Unlock the use of all features from our experimentation platform (like sample size calculation or result page) by integrating our Search-specific metric into the system. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;January 2021: &lt;/strong&gt;Creation of a dedicated weekly forum and communication channel to make information flow better between the search engineering teams and data scientists.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;March 2021:&lt;/strong&gt; Standardization of template for the test setup and test specification with pre-filled parameters. That unlocked the possibility for anyone to create and launch an experiment with basic search-specific parameters without prior knowledge.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;June 2021:&lt;/strong&gt; End-of-quarter cumulative experiment. At this point, most of the new features we developed for users were tested with an experiment, so we had all the ingredients to start measuring the cumulative impact of all the features we launch in Search over a quarter. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;August 2021:&lt;/strong&gt; Experimentation Champion program. Scale knowledge-sharing when new members join by establishing one person from each team as a dedicated experimentation champion. The role of the champion is to help spread knowledge between the Search data science team and their own.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;September 2021:&lt;/strong&gt; Naming convention for experiments. As part of our effort to scale and make each test more transparent, we created a naming convention to be able to determine from the name of the experiment which quarter and initiative this experiment was part of.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;September 2021:&lt;/strong&gt; The team committed to shipping all product changes gradually using monitoring. This was a great milestone for us! It showed that the whole team was feeling confident enough in our practices to commit to this objective.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;October 2021:&lt;/strong&gt; Decision-making process improvement. To ensure that we made good decisions for each experiment we ran, the experiment design needed to contain three elements: Hypothesis, Metrics, and Decision rules.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The key to the success of this roadmap was that the team only needed to focus on one small step at a time. Implementing these small steps over the course of just one year led to an impressive change in Search experimentation practices. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;In 2022: keep the fire burning!&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In 2021 we made great progress improving each experiment’s quality, improving coordination between experiments, and measuring global impact. This year in Search, we will take one more step toward truly building and improving our product in a data-informed way by integrating experimentation into a more global evaluation process for each initiative of our product development. If you’re interested in joining the team, take a look at our &lt;a href=&#34;https://www.lifeatspotify.com/jobs/data-scientist-search-insights&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;open jobs&lt;/a&gt;!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Approaching this problem, I thought that changing product development culture could only come from a change in expectations and incentives from leaders higher up in the organization. However, during the last year, I have seen many people from several disciplines stepping in and taking responsibility for the progress of our experimentation practices. It is now common to see engineers discussing if they should stop a product change from being launched to prevent a negative user experience. We have PMs on our team driving the education of PMs at Spotify globally on the topic of experimentation. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To me this evolution of behavior is proof that it is possible to improve our product evaluation process substantially by taking three simple measures: providing a safe environment for teams to evolve their practices, continuously injecting energy and support, and ensuring that the teams can see, with their own eyes, the benefits of the changes they’ve made.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/data/&#34; rel=&#34;tag&#34;&gt;Data&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2022/02/search-journey-towards-better-experimentation-practices/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Search-journey-towards-better-experimentation-practices_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify, we aim to build and improve our product in a data-informed way. To do that, teams are encouraged to generate and test hypotheses by running experiments and gathering evidence for what works and what doesn’t. In the Search team, in our journey towards this goal, we have learned that,</summary>
    <author>
      <name>Published by Claire Detilleux, Sr. Data Scientist</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Mesfin Mekonnen: Senior Engineer &#xA;</title>
    <updated>2022-02-22T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2022-02-22:/2022/02/mesfin-mekonnen-senior-engineer/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-5103&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;        &#xA;         &lt;div&gt;&#xA;            &lt;div&gt;&#xA;            &lt;h2&gt;Putting the Spotlight on our technical employees&lt;/h2&gt;&#xA;    &lt;p&gt;My beat is a blog series that turns the spotlight towards technical employees across various desciplines and roles to showcase what a typical day as a Spotifier consists of.&lt;/p&gt;&#xA;            &lt;/div&gt;&#xA; &#xA;             &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/0132-DDS_1-Wrapped-MyBeat-takeover_Mesfin.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/0132-DDS_1-Wrapped-MyBeat-takeover_Mesfin.png 1000w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/0132-DDS_1-Wrapped-MyBeat-takeover_Mesfin-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/0132-DDS_1-Wrapped-MyBeat-takeover_Mesfin-700x343.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/0132-DDS_1-Wrapped-MyBeat-takeover_Mesfin-768x376.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/0132-DDS_1-Wrapped-MyBeat-takeover_Mesfin-120x59.png 120w&#34; sizes=&#34;(max-width: 1000px) 100vw, 1000px&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;div&gt;&#xA;             &#xA;                 &lt;p&gt;&lt;b&gt;Mesfin is part of our Spotify New York team and jumped at the chance to work as an embed on 2021 Wrapped. &lt;/b&gt;&lt;/p&gt;&#xA;             &lt;/div&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;p&gt;&lt;strong&gt;Tell us more about working on Spotify Wrapped… &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I specialize in iOS Engineering and was one of a few iOS embeds working on 2021 Wrapped. We divided up the various Wrapped stories amongst ourselves — my focus was on Top Five Artists, Top Five Songs, Top Five Podcasts, Top Genres and the &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://engineering.atspotify.com/2021/12/17/the-audio-aura-story-mystical-to-mathematical/&#34; target=&#34;_blank&#34;&gt;Audio Aura&lt;/a&gt;, which was brand new for this year and really fun to be part of. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;What were the biggest challenges? &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We all thought the Audio Aura was going to be the toughest story to build — it certainly took the most time to implement, because it had a lot of different components and we were starting from scratch, rather than building on executions from previous years. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;However, I actually found the Top Genres story to be the most technically challenging — we needed to use a special type of software for the bar charts, programmatically drawing the text into a canvas and rendering the context as an image. I’d never done that before and learned a lot from the deeper knowledge of the other engineers. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;What made it a fun project to be part of? &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The best part of working on Wrapped was that it was a truly collaborative effort. We had a tight schedule and weekly deliverables for all the stories, which could be stressful at times. But whenever blockers came up, we could always rely on our teammates to pitch in and help out — it was a really safe, supportive atmosphere and we were constantly learning from one another. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;All the stories had iOS and Android counterparts, so we communicated a lot with our mobile teammates to share our approaches and flag up any issues we encountered along the way. Basically, it was just a really fun team to be part of — there were so many genuinely great people involved. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Any special shout-outs? &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So many! The whole core team was amazing – they gave me and the other embeds such a warm welcome and I really enjoyed the opportunity to work with them. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In particular, I’d like to shout out: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Cait Charniga and Sona Dolasia for their incredibly detailed designs and awesome motion specs&lt;/li&gt;&lt;li&gt;Udaya Pillalamarri, the engineering manager, for caring so much about our wellbeing and fostering a working environment where we could be our true selves — it showed that she cared about us personally beyond delivering the project&lt;/li&gt;&lt;li&gt;Zela Taino, the tech lead, for her impressive project and time management skills — managing the Wrapped experience, as well as implementing some of the Wrapped stories&lt;/li&gt;&lt;li&gt;Kylan McBride for his deep technical iOS expertise and being someone I could always turn to with my toughest challenges.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;What were the most inspiring moments? &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Having always admired the Wrapped experience from afar, I knew it would take a lot to deliver such a personalized project, with such massive scale and reach. However, I didn’t truly appreciate the amount of people and work involved — it requires literally hundreds of Spotifiers. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Throughout the project, I was very inspired by the attention to detail shown by our localization teams — we had weekly testing sessions, where the localization manager would identify any issues related to translations and ensure we had a quality experience in all languages. Their input pushed us to work harder on fixing issues that came up with non-Latin characters. And this kind of dedication — along with a real focus on accessibility — is something I’m taking back to my home squad and my day-to-day work at Spotify.&lt;/p&gt;&lt;p&gt;&#xA;&#xA;         Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/mobile/&#34; rel=&#34;tag&#34;&gt;Mobile&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2022/02/mesfin-mekonnen-senior-engineer/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/0132-DDS_1-Wrapped-MyBeat-takeover_Mesfin.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Mesfin is part of our Spotify New York team and jumped at the chance to work as an embed on 2021 Wrapped.</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Fred Wang: Senior Backend Engineer￼&#xA;</title>
    <updated>2022-02-16T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2022-02-16:/2022/02/fred-wang-senior-backend-engineer/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-5047&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;        &#xA;         &lt;div&gt;&#xA;            &lt;div&gt;&#xA;            &lt;h2&gt;Putting the Spotlight on our technical employees&lt;/h2&gt;&#xA;    &lt;p&gt;My beat is a blog series that turns the spotlight towards technical employees across various desciplines and roles to showcase what a typical day as a Spotifier consists of.&lt;/p&gt;&#xA;            &lt;/div&gt;&#xA; &#xA;             &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/0132-Wrapped-MyBeat-takeover_Fred.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/0132-Wrapped-MyBeat-takeover_Fred.png 600w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/0132-Wrapped-MyBeat-takeover_Fred-250x168.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/0132-Wrapped-MyBeat-takeover_Fred-120x81.png 120w&#34; sizes=&#34;(max-width: 600px) 100vw, 600px&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;div&gt;&#xA;             &#xA;                 &lt;p&gt;As a Senior Backend Engineer at Spotify New York, Fred’s role on 2021 Wrapped involved serving data stories content for iOS and Android. Here, he shares some of the most memorable moments…&lt;/p&gt;&#xA;             &lt;/div&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&#xA;&#xA;&#xA;&#xA;&lt;h3 id=&#34;tell-us-more-about-working-on-spotify-wrapped&#34;&gt;&lt;strong&gt;Tell us more about working on Spotify Wrapped… &lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I’m part of the Mambas team at Spotify, which is responsible for all the animation, presentation and personalized data in the Wrapped interactive mobile app. My job is to take the raw data from the backend and enrich it, translate it and format it for different regions before it goes to the frontend mobile engineers. That includes deciding what music to play during data stories and what images and localised text to display – all the things we serve from the backend to help iOS and Android show the data stories correctly. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 id=&#34;what-were-the-biggest-challenges&#34;&gt;&lt;strong&gt;What were the biggest challenges? &lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Load-testing was definitely the most challenging aspect of working on this project. In the first few hours after launch, Wrapped gets a high volume of unique visitors – all with their own unique data stories, all served to different types of mobile devices. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So we can’t just roll it out and hope for the best – we have to simulate that load and make sure we can withstand all the requests we’re going to get at peak usage. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;During load test sessions, we process a high volume of requests and try to uncover as many issues across our dependencies as possible. It’s a big job, but really helps discover all weak links in the chain&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 id=&#34;what-were-the-best-moments&#34;&gt;&lt;strong&gt;What were the best moments? &lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the first two hours after the launch of Spotify Wrapped, we saw unprecedented traffic from around the world – yet we scaled without any major issues. It was nerve-wracking, but also extremely exciting to see all our hard work pay off like that.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 id=&#34;what-made-it-a-fun-project-to-be-part-of&#34;&gt;&lt;strong&gt;What made it a fun project to be part of? &lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I really enjoyed collaborating with all the great engineers and localization teams to make the data stories work cleanly across every region, language and format. And I loved the moment when the data pipelines started working – we all turned on live data for our endpoints and got to see our own Wrapped stories for the very first time. We were all so giddy and excited – all we could do was play around and compare notes for a good few hours afterwards! &lt;/p&gt;&lt;p&gt;&#xA;&#xA;         Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/data/&#34; rel=&#34;tag&#34;&gt;Data&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/wrapped21/&#34; rel=&#34;tag&#34;&gt;Wrapped21&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2022/02/fred-wang-senior-backend-engineer/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/0132-Wrapped-MyBeat-takeover_Fred.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">As a Senior Backend Engineer at Spotify New York, Fred’s role on 2021 Wrapped involved serving data stories content for iOS and Android. Here, he shares some of the most memorable moments…</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Introducing Ruler: Our Tool for Measuring Android App Size&#xA;</title>
    <updated>2022-02-14T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2022-02-14:/2022/02/introducing-ruler-our-tool-for-measuring-android-app-size/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;February 14, 2022&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2022/02/introducing-ruler-our-tool-for-measuring-android-app-size/&#34; title=&#34;Introducing Ruler: Our Tool for Measuring Android App Size&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Spotify_RnD-Blog_Header-Ruler_1.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Spotify_RnD-Blog_Header-Ruler_1.png 1011w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Spotify_RnD-Blog_Header-Ruler_1-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Spotify_RnD-Blog_Header-Ruler_1-700x352.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Spotify_RnD-Blog_Header-Ruler_1-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Spotify_RnD-Blog_Header-Ruler_1-120x60.png 120w&#34; sizes=&#34;(max-width: 1011px) 100vw, 1011px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify, we strive to make our apps available to as many people as possible. As mobile developers, that means we want everybody to be able to download our app without hiccups or constraints.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One important metric related to this goal is the size of the Spotify app — if it’s too big, users with poor network connectivity or little device storage might not be able to download it. And since shrinking download size &lt;a href=&#34;https://medium.com/googleplaydev/shrinking-apks-growing-installs-5d3fcba23ce2&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;has been shown&lt;/a&gt; to improve install conversion rate, we aim to keep the app as lean as possible.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But working with app size is not always easy, particularly for large applications with numerous contributors adding cool new features. That’s why we built and open sourced &lt;a href=&#34;https://github.com/spotify/ruler&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Ruler&lt;/a&gt; — a tool to measure and analyze the size of your Android apps, built with automation in mind.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 id=&#34;where-we-started&#34;&gt;Where we started&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We set out to see how we could decrease app size, and started our investigations by using existing tools like &lt;a href=&#34;https://github.com/jakewharton/diffuse&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Diffuse&lt;/a&gt; and Android Studio. Those work great if you want to get a high-level overview of your app, but when we wanted to dig deeper, we quickly arrived at another question — how much are certain modules and dependencies contributing to the overall app size?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The codebase of the main Android Spotify app consists of over 1,000 Gradle modules and hundreds of third-party dependencies. All of these modules and dependencies are merged and packaged into a single app, without a clear way to determine where things came from. This can make it hard to analyze app size and determine where optimization opportunities lie.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Ruler is a Gradle plugin that solves this exact problem. It allows you to analyze your app and gives you detailed insights into the origin and size of certain files, modules, and third-party dependencies.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 id=&#34;how-does-ruler-work&#34;&gt;How does Ruler work?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Android apps are typically packaged and uploaded to the Play Store as &lt;a href=&#34;https://developer.android.com/guide/app-bundle&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;App Bundles&lt;/a&gt;. The Play Store uses these bundles to generate an optimized &lt;a href=&#34;https://en.wikipedia.org/wiki/Android_application_package&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Android application package (APK)&lt;/a&gt; for every device. Ruler replicates this mechanism (using &lt;a href=&#34;https://github.com/google/bundletool&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Google’s Bundletool&lt;/a&gt;) to generate an APK for a given device configuration. We do that to accurately measure what ends up on the devices of our users.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Next, we analyze this APK to see which files actually end up in the app and how much space those files take up, leveraging &lt;a href=&#34;https://developer.android.com/studio/command-line/apkanalyzer&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;apkanalyzer&lt;/a&gt; to ensure the numbers reported by Ruler stay consistent with those analyzed by Android Studio and guaranteeing we measure app size after any optimizations done by another process (e.g. R8). &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For each file, Ruler captures two measurements:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Download size: &lt;/strong&gt;Bytes transferred over the network when a user downloads the app&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Install size:&lt;/strong&gt; Bytes a file takes up on the device once the app has been installed&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 id=&#34;determining-the-origin-of-files&#34;&gt;Determining the origin of files&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After analyzing the APK, we end up with a list of all files and their respective sizes. But how do we determine where they came from? To do that, Ruler scans through all Gradle modules and dependencies included in the build and analyzes which files they contain. The result of this is a second list of all components and their contents. Based on this second list, we can now group all files of the app by their source and therefore determine how much each module and dependency contributes to the overall app size.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Ruler adds a simple analyzeReleaseBundle task to your project, which you can use to execute all this logic. This task will generate two outputs — a JSON report you can use for further processing and an HTML report you can use to analyze and dig into the data yourself.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;h3 id=&#34;class-size&#34;&gt;Class size&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On Android, all classes are compressed into one or more DEX files. Because we want to be able to see the impact of individual classes, Ruler parses those DEX files and treats every class like a separate file.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When classes are compressed, some information is shared between class entries inside the DEX file. Because of that, it’s not possible to 100% accurately measure how much a single class contributes to the overall app size. Ruler solves this problem by approximating the size of each class by setting the raw class size in proportion to the size of the DEX file.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 id=&#34;ownership&#34;&gt;Ownership&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Knowing which components contribute to the size of an app is great, but knowing who owns these components is even better. Because of this, Ruler supports gathering and analyzing app size ownership data.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you provide a list of component owners to Ruler, it can analyze the contributions of certain teams to the size of the overall app. This can be helpful to determine who to talk to if questions about certain parts of the app arise.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;569&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Example_Ownership-Overview-700x569.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Example_Ownership-Overview-700x569.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Example_Ownership-Overview-250x203.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Example_Ownership-Overview-768x625.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Example_Ownership-Overview-1536x1249.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Example_Ownership-Overview-120x98.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Example_Ownership-Overview.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figures above are for illustrative purposes only.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 id=&#34;ruler-at-spotify&#34;&gt;Ruler at Spotify&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ve been using Ruler at Spotify for over half a year now and have seen great success. It has allowed us to identify many improvement opportunities and we have been able to reduce our app size by a little over 9% so far.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We export the app size data once a day, using the latest main build. This data is used to track historical trends, both of the app as a whole and of individual modules and third-party dependencies. Additionally, we analyze the app size impact of every pull request, so we can give early feedback to developers and prevent regressions from being merged in the first place.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 id=&#34;start-using-ruler-today&#34;&gt;Start using Ruler today&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you are curious about Ruler, you can try it out today. All you need to do is apply the plugin to your Android project and run a single Gradle task. Check out &lt;a href=&#34;https://github.com/spotify/ruler&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GitHub&lt;/a&gt; for an always up-to-date guide on how you can integrate Ruler.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 id=&#34;contributing-to-ruler&#34;&gt;Contributing to Ruler&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Ruler is fully written in Kotlin and leverages exciting technologies like Kotlin Multiplatform. Ruler continues to be actively developed, and we already have many exciting ideas about our new tool. At Spotify, we benefit immensely from open source software, so we decided to open source Ruler and give back to the community.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’re always looking for input — both raising issues and opening pull requests are very welcome and appreciated. We believe that, together, we can move this project further and help make Android apps accessible to more people.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And if you want to work full time on tools like Ruler, please check out our &lt;a href=&#34;https://www.lifeatspotify.com/jobs?c=mobile&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;open job positions&lt;/a&gt; — we’re always looking for great minds to join the band.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/mobile/&#34; rel=&#34;tag&#34;&gt;Mobile&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2022/02/introducing-ruler-our-tool-for-measuring-android-app-size/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/02/Spotify_RnD-Blog_Header-Ruler_1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify, we strive to make our apps available to as many people as possible. As mobile developers, that means we want everybody to be able to download our app without hiccups or constraints. One important metric related to this goal is the size of the Spotify app — if it’s too big, users with</summary>
    <author>
      <name>Published by Simon Schiller, Android Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Product Lessons from ML Home: Spotify’s One-Stop Shop for Machine Learning&#xA;</title>
    <updated>2022-01-19T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2022-01-19:/2022/01/19/product-lessons-from-ml-home-spotifys-one-stop-shop-for-machine-learning/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;January 19, 2022&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2022/01/19/product-lessons-from-ml-home-spotifys-one-stop-shop-for-machine-learning/&#34; title=&#34;Product Lessons from ML Home: Spotify’s One-Stop Shop for Machine Learning&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-768x378.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;h2&gt;Introduction &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Building platforms is a hard business. Building platforms for discerning machine learning (ML) practitioners with bespoke needs and a do-it-yourself ethos is even harder. In today’s post, we will give you a peek into how we built &lt;strong&gt;ML Home&lt;/strong&gt;, the internal user interface for Spotify’s Machine Learning Platform, and the product lessons we learned along the way in our quest to entrench it in Spotify’s ML ecosystem.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s a massive understatement to say that machine learning is at the heart of Spotify’s success story. Spotify has delivered beloved audio experiences such as Discover Weekly, Daily Mix, and &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/the-wait-is-over-your-spotify-2021-wrapped-is-here/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Wrapped&lt;/a&gt; on the strength of ML-powered personalized recommendations. Today, almost every part of Spotify has some applied ML systems, and a significant and growing portion of our R&amp;amp;D teams consist of ML engineers and data scientists. In order to support ML systems at the scale and speed that our business requires, and to apply ML responsibly for our listeners, we have platformized sizable parts of the most common ML infrastructure within our Machine Learning Platform. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Overview of Spotify’s ML Platform&lt;br/&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since the beginning, our ambition for &lt;a href=&#34;https://engineering.atspotify.com/2019/12/13/the-winding-road-to-better-machine-learning-infrastructure-through-tensorflow-extended-and-kubeflow/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s ML Platform&lt;/a&gt; was to connect the end-to-end user journey for ML practitioners. We subscribe to the “walking skeleton” model of product development, focusing from the start on end-to-end workflow and subsequently fleshing out functionality once we’ve proven value.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;154&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-700x154.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-700x154.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-250x55.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-768x169.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-120x26.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow.png 1448w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In late 2019 / early 2020, our ML Platform consisted of a few components that covered the (supervised) machine learning workflow experience for Spotify’s ML practitioners: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Spotify Kubeflow&lt;strong&gt;, &lt;/strong&gt;which is our version of the open source Kubeflow Pipelines platform that helped us standardize ML workflows on the TensorFlow Extended (TFX) ecosystem  &lt;/li&gt;&lt;li&gt;Jukebox,&lt;strong&gt; &lt;/strong&gt;which is based on TensorFlow Transform and powers our feature engineering and management workflows &lt;/li&gt;&lt;li&gt;Salem, which is based on TensorFlow Serving and helps us standardize model serving and production workflows, and &lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://engineering.atspotify.com/2020/11/04/its-all-just-wiggly-air-building-infrastructure-to-support-audio-research/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Klio&lt;/a&gt;, which is our open source solution for audio processing with Apache Beam and Dataflow&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;153&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-700x153.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-700x153.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-250x54.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-768x167.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-1536x335.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-120x26.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1.png 1606w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The Product Opportunity&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we started to onboard more ML teams onto our platform, we identified two important gaps in our end-to-end support for ML workflows: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;A &lt;strong&gt;centralized metadata layer&lt;/strong&gt;,&lt;strong&gt; &lt;/strong&gt;where we could define our platform entities / entity relationships (e.g., models, evaluations, training sets)&lt;/li&gt;&lt;li&gt;A &lt;strong&gt;metadata presentation layer&lt;/strong&gt;, where users could store, track, and manage the metadata generated from their ML workflows, which is the focus of this blogpost&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As the ML Platform team, we knew we wanted a tool where ML engineers could store ML project information and access metadata related to the ML application lifecycle, but weren’t entirely sure what that product would be. As we began exploring, we found that teams were using spreadsheets to track ML metadata and gave us hyper-specific feature requests for their individual problems. We also came away with broader unmet needs such as discovery of ML projects&lt;strong&gt;,&lt;/strong&gt; support for ML team collaboration&lt;strong&gt;,&lt;/strong&gt; and important product&lt;strong&gt; &lt;/strong&gt;gaps within our own ML Platform tooling. These learnings informed the initial scope of our MVP (minimally viable product) and taught us our first product lesson. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Product Lesson 1: Balancing Product Vision and Product Strategy&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For the first iteration of the product, we took a &lt;a href=&#34;https://jchyip.medium.com/why-t-shaped-people-e8706198e437&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;T-shaped&lt;/a&gt; approach. We focused on building horizontal solutions&lt;strong&gt; &lt;/strong&gt;for needs we heard most commonly across all ML practitioner roles, such as being able to collaborate more effectively as an ML team. We also built a vertical solution&lt;strong&gt; &lt;/strong&gt;that mapped to a specific platform tooling gap: better evaluation tooling for offline model training for ML engineers. We launched our MVP with an aspirational name and product vision: ML Home, one-stop shop for machine learning at Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;282&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-700x282.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-700x282.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-250x101.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-768x309.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-120x48.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021.png 1504w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;The initial feedback we received on our MVP fell on two ends of the spectrum. Individual contributions struggled with the broad idea of a “one-stop shop” and wanted to know what concrete problems the product could solve for them today. Leadership wanted to know how many users we would serve over the long run and how big our impact could be.&lt;/p&gt;&lt;p&gt;Throughout the process of selling our MVP, we learned how difficult it is to balance product vision and product strategy without compromising one for the other. Had we scratched our broader vision based on the initial feedback and focused exclusively on the concrete needs (e.g., I want to see all my training pipelines in one view), we would have risked delivering a narrow point solution. On the other hand, if we over-indexed our roadmap on the broad, ambiguous needs (e.g. I want to collaborate more effectively with my team), we would have delivered a nice-to-have but not a must-have product. &lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By intentionally keeping our &lt;strong&gt;Product Vision broad&lt;/strong&gt; &lt;strong&gt;and future-looking &lt;/strong&gt;(one-stop shop)&lt;strong&gt;, &lt;/strong&gt;we gave ourselves the runway to think bigger about our solution space and our potential impact down the line. And by keeping &lt;strong&gt;Product Strategy concrete&lt;/strong&gt; &lt;strong&gt;and iterative&lt;/strong&gt; (offline evaluation tool), we were able to ensure that we solved concrete problems that over time helped us ingrain the product into our user’s daily workflows. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Product Lesson 2: The Limits of MVPs &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;355&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-700x355.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-700x355.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-768x390.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-120x61.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home.png 1080w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;ML Home&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we wrapped up the feedback and adoption drive for the MVP, we learned our second product lesson. It is no secret that driving product adoption is hard, especially for products that are trying to replace existing solutions or market incumbents. We hit the ceiling of our MVP’s potential fairly quickly. We did not see a surge of adoption beyond the handful of users who were involved in the very early ideation process. Most users understood the value proposition of what we were building, but did not see enough depth to switch over from their existing tooling. In retrospect, our expectations of what we delivered and how valuable it would be did not match the depth of our users’ needs. It would have been easy at that stage to dismiss the product entirely, based on early adoption signals. That would have been a mistake. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we plowed on with more detailed user feedback in our quest to drive more adoption, it became clear to us that we were misplacing our expectations on what role the MVP played in the product development process. &lt;strong&gt;The most valuable end goal of an MVP is to get enough of the vision and strategies out there to help validate or invalidate them. &lt;/strong&gt;Our initial MVP helped us test and de-risk our work because we were able to get detailed validation of the workflows from ML teams and lay out the technical foundations for the product. It did not matter how many daily active users we had at that stage, as long as we had enough users (which we did) who saw the value in what we were building. These users continued to attend our user feedback sessions and helped us get the product to a higher and more valuable place.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Product Lesson 3: Knowing the true Differentiators&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we moved beyond the MVP phase and started to map out our next steps (focusing on some aspects of the product over others), we learned our third and perhaps most important product lesson. We realized that in order to provide a really valuable product to our users, we needed to not only reach feature parity with existing solutions, but also double down on ML Home’s unique differentiators. In short, ML Home as a product needed to be more compelling than the competing solutions. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For a while, we probed, debated, and stack-ranked specific features and workflows that we felt would be game-changing for our users. Our theory was that if we built a “compelling feature,” it would be able to singularly pass a threshold for users to adopt. In the end, we realized that the unique differentiators for ML Home actually came in the form of our other ML Platform offerings, not any one individual feature. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While some aspects of ML Home could functionally serve as a stand-alone product, by enriching it with training, evaluation, and system metadata generated from the rest of our ML Platform, it became a much more compelling product. &lt;strong&gt;ML Home’s unique differentiator isn’t any one silver-bullet feature but rather the gateway value it provides as the sum of our ML Platform capabilities.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Much of the work we did in this phase was building out our metadata service to consolidate our overall entities and concepts across the platform, but we also spent significant time building flexibility into the product’s interface. For example, annotation capabilities such as tagging and notes became key features that enabled teams to customize and mirror their own workflows. That, paired with a faster, slicker product experience and information-rich model comparisons, tipped the balance in our favor. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By the time we released the second version of ML Home, we had successfully onboarded more ML teams who were actively using the product in their daily workflows. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;473&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-700x473.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-700x473.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-250x169.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-768x519.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-1536x1039.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-120x81.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Sample ML Project in ML Home. For illustrative purposes only.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Scaling the Product to Our Vision&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Getting closer to&lt;strong&gt; &lt;/strong&gt;product-market fit taught us a lot about how to iterate moving forward. We knew that ML Home only served one typical ML workflow. However, in order to be an indispensable product for &lt;em&gt;all&lt;/em&gt; ML practitioners, it needed to cover more ground. We also knew that tightly coupling ML Home’s capabilities to our existing ML Platform products resulted in a much higher rate of adoption than stand-alone solutions. Armed with these takeaways, we wireframed a broader vision for the product.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Today, ML Home provides Spotify’s ML practitioners with artifacts and workflow metadata of all models passing through individual components of our ML Platform. It includes capabilities such as the ability to track and evaluate offline experiments, visualize results, track and monitor deployed models, explore features, certify models for production readiness, and much more.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Through intuitive workflows and simplified information architecture, users are able to quickly spin up a project space to collaborate with their team and discover the 220+ ML projects across Spotify currently listed in ML Home. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have seen a 200% growth in daily active users since we began our scaling efforts a year ago, and ML Home is now solidly entrenched in the daily workflows of some of the most important ML teams at Spotify. Despite its short tenure in Spotify’s Infrastructure landscape, ML Home is well on its way to becoming the one-stop shop for all things ML at Spotify. &lt;br/&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;476&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-700x476.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-700x476.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-250x170.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-768x523.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-120x82.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home.png 1340w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Conceptual rendering of ML Home. For illustrative purposes only.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Three Key Lessons&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The saying goes that hindsight is 20/20, and it’s true. Looking back, these are the lessons that stick out the most from our product development process: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Product vision vs product strategy. &lt;/strong&gt;It is difficult to strike the right balance between an inspiring vision that can support future solutions and a responsive product strategy that addresses today’s problems. But it is crucially important to not conflate the two in the early stages of product development. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Limits of MVPs.&lt;/strong&gt; MVPs provide the most value as a validation and de-risking tool for product strategy and overall direction. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Know the true differentiators.&lt;/strong&gt; It’s worth paying attention to what the real differentiators are for a product. It does not have to be a “compelling” feature; it can simply be opportunities found in the ecosystem that turn the tide for a product’s success. &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Looking Ahead &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;ML Home is not done — not even close. We know this because, in the last year, Spotify’s ML community has proposed new and inventive ways to evolve the product. For exampleML engineers saw the potential to build on top of ML Home and proposed we build production readiness certification of ML models in the interface. In addition, we are exploring aspects such as explainability to advance model interpretability and observability to better understand model health. Then there are the ever-inspiring hack week projects that tell us that our product has taken root at Spotify. We are excited for what’s next! &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you are interested in building cutting edge machine learning infrastructure at Spotify, we are &lt;a href=&#34;https://www.lifeatspotify.com/jobs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;hiring&lt;/a&gt; for engineering and product roles across the board. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;ML Home would not exist without the brilliant work of the ML UX team, our teammates from ML Platform, and the generous guidance from Spotify’s ML community. Since the list of individuals to thank would far exceed the words in this post, I will instead mention the individuals whose work made ML Home possible: Johan Bååth, Joshua Baer, Hayden Betts, Martin Bomio, Matt Brown, Keshi Dai, Omar Delarosa, Funmilayo Doro, Gandalf Hernandez, Adam Laiacano, Brian Martin, Daniel Norberg, James O’Dwyer, Ed Samour, Wesley Yee, and Qi Zheng.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2022/01/19/product-lessons-from-ml-home-spotifys-one-stop-shop-for-machine-learning/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Introduction Building platforms is a hard business. Building platforms for discerning machine learning (ML) practitioners with bespoke needs and a do-it-yourself ethos is even harder. In today’s post, we will give you a peek into how we built ML Home, the internal user interface for Spotify’s Ma</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Product Lessons from ML Home: Spotify’s One-Stop Shop for Machine Learning&#xA;</title>
    <updated>2022-01-19T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2022-01-19:/2022/01/product-lessons-from-ml-home-spotifys-one-stop-shop-for-machine-learning/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;January 19, 2022&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2022/01/product-lessons-from-ml-home-spotifys-one-stop-shop-for-machine-learning/&#34; title=&#34;Product Lessons from ML Home: Spotify’s One-Stop Shop for Machine Learning&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-768x378.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;h2&gt;Introduction &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Building platforms is a hard business. Building platforms for discerning machine learning (ML) practitioners with bespoke needs and a do-it-yourself ethos is even harder. In today’s post, we will give you a peek into how we built &lt;strong&gt;ML Home&lt;/strong&gt;, the internal user interface for Spotify’s Machine Learning Platform, and the product lessons we learned along the way in our quest to entrench it in Spotify’s ML ecosystem.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s a massive understatement to say that machine learning is at the heart of Spotify’s success story. Spotify has delivered beloved audio experiences such as Discover Weekly, Daily Mix, and &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/the-wait-is-over-your-spotify-2021-wrapped-is-here/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Wrapped&lt;/a&gt; on the strength of ML-powered personalized recommendations. Today, almost every part of Spotify has some applied ML systems, and a significant and growing portion of our R&amp;amp;D teams consist of ML engineers and data scientists. In order to support ML systems at the scale and speed that our business requires, and to apply ML responsibly for our listeners, we have platformized sizable parts of the most common ML infrastructure within our Machine Learning Platform. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Overview of Spotify’s ML Platform&lt;br/&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since the beginning, our ambition for &lt;a href=&#34;https://engineering.atspotify.com/2019/12/13/the-winding-road-to-better-machine-learning-infrastructure-through-tensorflow-extended-and-kubeflow/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s ML Platform&lt;/a&gt; was to connect the end-to-end user journey for ML practitioners. We subscribe to the “walking skeleton” model of product development, focusing from the start on end-to-end workflow and subsequently fleshing out functionality once we’ve proven value.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;154&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-700x154.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-700x154.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-250x55.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-768x169.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-120x26.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow.png 1448w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In late 2019 / early 2020, our ML Platform consisted of a few components that covered the (supervised) machine learning workflow experience for Spotify’s ML practitioners: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Spotify Kubeflow&lt;strong&gt;, &lt;/strong&gt;which is our version of the open source Kubeflow Pipelines platform that helped us standardize ML workflows on the TensorFlow Extended (TFX) ecosystem  &lt;/li&gt;&lt;li&gt;Jukebox,&lt;strong&gt; &lt;/strong&gt;which is based on TensorFlow Transform and powers our feature engineering and management workflows &lt;/li&gt;&lt;li&gt;Salem, which is based on TensorFlow Serving and helps us standardize model serving and production workflows, and &lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://engineering.atspotify.com/2020/11/04/its-all-just-wiggly-air-building-infrastructure-to-support-audio-research/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Klio&lt;/a&gt;, which is our open source solution for audio processing with Apache Beam and Dataflow&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;153&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-700x153.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-700x153.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-250x54.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-768x167.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-1536x335.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-120x26.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1.png 1606w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The Product Opportunity&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we started to onboard more ML teams onto our platform, we identified two important gaps in our end-to-end support for ML workflows: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;A &lt;strong&gt;centralized metadata layer&lt;/strong&gt;,&lt;strong&gt; &lt;/strong&gt;where we could define our platform entities / entity relationships (e.g., models, evaluations, training sets)&lt;/li&gt;&lt;li&gt;A &lt;strong&gt;metadata presentation layer&lt;/strong&gt;, where users could store, track, and manage the metadata generated from their ML workflows, which is the focus of this blogpost&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As the ML Platform team, we knew we wanted a tool where ML engineers could store ML project information and access metadata related to the ML application lifecycle, but weren’t entirely sure what that product would be. As we began exploring, we found that teams were using spreadsheets to track ML metadata and gave us hyper-specific feature requests for their individual problems. We also came away with broader unmet needs such as discovery of ML projects&lt;strong&gt;,&lt;/strong&gt; support for ML team collaboration&lt;strong&gt;,&lt;/strong&gt; and important product&lt;strong&gt; &lt;/strong&gt;gaps within our own ML Platform tooling. These learnings informed the initial scope of our MVP (minimally viable product) and taught us our first product lesson. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Product Lesson 1: Balancing Product Vision and Product Strategy&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For the first iteration of the product, we took a &lt;a href=&#34;https://jchyip.medium.com/why-t-shaped-people-e8706198e437&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;T-shaped&lt;/a&gt; approach. We focused on building horizontal solutions&lt;strong&gt; &lt;/strong&gt;for needs we heard most commonly across all ML practitioner roles, such as being able to collaborate more effectively as an ML team. We also built a vertical solution&lt;strong&gt; &lt;/strong&gt;that mapped to a specific platform tooling gap: better evaluation tooling for offline model training for ML engineers. We launched our MVP with an aspirational name and product vision: ML Home, one-stop shop for machine learning at Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;282&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-700x282.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-700x282.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-250x101.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-768x309.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-120x48.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021.png 1504w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;The initial feedback we received on our MVP fell on two ends of the spectrum. Individual contributions struggled with the broad idea of a “one-stop shop” and wanted to know what concrete problems the product could solve for them today. Leadership wanted to know how many users we would serve over the long run and how big our impact could be.&lt;/p&gt;&lt;p&gt;Throughout the process of selling our MVP, we learned how difficult it is to balance product vision and product strategy without compromising one for the other. Had we scratched our broader vision based on the initial feedback and focused exclusively on the concrete needs (e.g., I want to see all my training pipelines in one view), we would have risked delivering a narrow point solution. On the other hand, if we over-indexed our roadmap on the broad, ambiguous needs (e.g. I want to collaborate more effectively with my team), we would have delivered a nice-to-have but not a must-have product. &lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By intentionally keeping our &lt;strong&gt;Product Vision broad&lt;/strong&gt; &lt;strong&gt;and future-looking &lt;/strong&gt;(one-stop shop)&lt;strong&gt;, &lt;/strong&gt;we gave ourselves the runway to think bigger about our solution space and our potential impact down the line. And by keeping &lt;strong&gt;Product Strategy concrete&lt;/strong&gt; &lt;strong&gt;and iterative&lt;/strong&gt; (offline evaluation tool), we were able to ensure that we solved concrete problems that over time helped us ingrain the product into our user’s daily workflows. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Product Lesson 2: The Limits of MVPs &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;355&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-700x355.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-700x355.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-768x390.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-120x61.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home.png 1080w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;ML Home&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we wrapped up the feedback and adoption drive for the MVP, we learned our second product lesson. It is no secret that driving product adoption is hard, especially for products that are trying to replace existing solutions or market incumbents. We hit the ceiling of our MVP’s potential fairly quickly. We did not see a surge of adoption beyond the handful of users who were involved in the very early ideation process. Most users understood the value proposition of what we were building, but did not see enough depth to switch over from their existing tooling. In retrospect, our expectations of what we delivered and how valuable it would be did not match the depth of our users’ needs. It would have been easy at that stage to dismiss the product entirely, based on early adoption signals. That would have been a mistake. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we plowed on with more detailed user feedback in our quest to drive more adoption, it became clear to us that we were misplacing our expectations on what role the MVP played in the product development process. &lt;strong&gt;The most valuable end goal of an MVP is to get enough of the vision and strategies out there to help validate or invalidate them. &lt;/strong&gt;Our initial MVP helped us test and de-risk our work because we were able to get detailed validation of the workflows from ML teams and lay out the technical foundations for the product. It did not matter how many daily active users we had at that stage, as long as we had enough users (which we did) who saw the value in what we were building. These users continued to attend our user feedback sessions and helped us get the product to a higher and more valuable place.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Product Lesson 3: Knowing the true Differentiators&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we moved beyond the MVP phase and started to map out our next steps (focusing on some aspects of the product over others), we learned our third and perhaps most important product lesson. We realized that in order to provide a really valuable product to our users, we needed to not only reach feature parity with existing solutions, but also double down on ML Home’s unique differentiators. In short, ML Home as a product needed to be more compelling than the competing solutions. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For a while, we probed, debated, and stack-ranked specific features and workflows that we felt would be game-changing for our users. Our theory was that if we built a “compelling feature,” it would be able to singularly pass a threshold for users to adopt. In the end, we realized that the unique differentiators for ML Home actually came in the form of our other ML Platform offerings, not any one individual feature. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While some aspects of ML Home could functionally serve as a stand-alone product, by enriching it with training, evaluation, and system metadata generated from the rest of our ML Platform, it became a much more compelling product. &lt;strong&gt;ML Home’s unique differentiator isn’t any one silver-bullet feature but rather the gateway value it provides as the sum of our ML Platform capabilities.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Much of the work we did in this phase was building out our metadata service to consolidate our overall entities and concepts across the platform, but we also spent significant time building flexibility into the product’s interface. For example, annotation capabilities such as tagging and notes became key features that enabled teams to customize and mirror their own workflows. That, paired with a faster, slicker product experience and information-rich model comparisons, tipped the balance in our favor. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By the time we released the second version of ML Home, we had successfully onboarded more ML teams who were actively using the product in their daily workflows. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;473&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-700x473.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-700x473.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-250x169.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-768x519.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-1536x1039.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-120x81.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Sample ML Project in ML Home. For illustrative purposes only.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Scaling the Product to Our Vision&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Getting closer to&lt;strong&gt; &lt;/strong&gt;product-market fit taught us a lot about how to iterate moving forward. We knew that ML Home only served one typical ML workflow. However, in order to be an indispensable product for &lt;em&gt;all&lt;/em&gt; ML practitioners, it needed to cover more ground. We also knew that tightly coupling ML Home’s capabilities to our existing ML Platform products resulted in a much higher rate of adoption than stand-alone solutions. Armed with these takeaways, we wireframed a broader vision for the product.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Today, ML Home provides Spotify’s ML practitioners with artifacts and workflow metadata of all models passing through individual components of our ML Platform. It includes capabilities such as the ability to track and evaluate offline experiments, visualize results, track and monitor deployed models, explore features, certify models for production readiness, and much more.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Through intuitive workflows and simplified information architecture, users are able to quickly spin up a project space to collaborate with their team and discover the 220+ ML projects across Spotify currently listed in ML Home. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have seen a 200% growth in daily active users since we began our scaling efforts a year ago, and ML Home is now solidly entrenched in the daily workflows of some of the most important ML teams at Spotify. Despite its short tenure in Spotify’s Infrastructure landscape, ML Home is well on its way to becoming the one-stop shop for all things ML at Spotify. &lt;br/&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;476&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-700x476.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-700x476.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-250x170.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-768x523.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-120x82.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home.png 1340w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Conceptual rendering of ML Home. For illustrative purposes only.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Three Key Lessons&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The saying goes that hindsight is 20/20, and it’s true. Looking back, these are the lessons that stick out the most from our product development process: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Product vision vs product strategy. &lt;/strong&gt;It is difficult to strike the right balance between an inspiring vision that can support future solutions and a responsive product strategy that addresses today’s problems. But it is crucially important to not conflate the two in the early stages of product development. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Limits of MVPs.&lt;/strong&gt; MVPs provide the most value as a validation and de-risking tool for product strategy and overall direction. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Know the true differentiators.&lt;/strong&gt; It’s worth paying attention to what the real differentiators are for a product. It does not have to be a “compelling” feature; it can simply be opportunities found in the ecosystem that turn the tide for a product’s success. &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Looking Ahead &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;ML Home is not done — not even close. We know this because, in the last year, Spotify’s ML community has proposed new and inventive ways to evolve the product. For exampleML engineers saw the potential to build on top of ML Home and proposed we build production readiness certification of ML models in the interface. In addition, we are exploring aspects such as explainability to advance model interpretability and observability to better understand model health. Then there are the ever-inspiring hack week projects that tell us that our product has taken root at Spotify. We are excited for what’s next! &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you are interested in building cutting edge machine learning infrastructure at Spotify, we are &lt;a href=&#34;https://www.lifeatspotify.com/jobs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;hiring&lt;/a&gt; for engineering and product roles across the board. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;ML Home would not exist without the brilliant work of the ML UX team, our teammates from ML Platform, and the generous guidance from Spotify’s ML community. Since the list of individuals to thank would far exceed the words in this post, I will instead mention the individuals whose work made ML Home possible: Johan Bååth, Joshua Baer, Hayden Betts, Martin Bomio, Matt Brown, Keshi Dai, Omar Delarosa, Funmilayo Doro, Gandalf Hernandez, Adam Laiacano, Brian Martin, Daniel Norberg, James O’Dwyer, Ed Samour, Wesley Yee, and Qi Zheng.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2022/01/product-lessons-from-ml-home-spotifys-one-stop-shop-for-machine-learning/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Introduction Building platforms is a hard business. Building platforms for discerning machine learning (ML) practitioners with bespoke needs and a do-it-yourself ethos is even harder. In today’s post, we will give you a peek into how we built ML Home, the internal user interface for Spotify’s Ma</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Product Lessons from ML Home: Spotify’s One-Stop Shop for Machine Learning&#xA;</title>
    <updated>2022-01-19T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2022-01-19:/product-lessons-from-ml-home-spotifys-one-stop-shop-for-machine-learning/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;January 19, 2022&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/product-lessons-from-ml-home-spotifys-one-stop-shop-for-machine-learning/&#34; title=&#34;Product Lessons from ML Home: Spotify’s One-Stop Shop for Machine Learning&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-768x378.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;h2&gt;Introduction &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Building platforms is a hard business. Building platforms for discerning machine learning (ML) practitioners with bespoke needs and a do-it-yourself ethos is even harder. In today’s post, we will give you a peek into how we built &lt;strong&gt;ML Home&lt;/strong&gt;, the internal user interface for Spotify’s Machine Learning Platform, and the product lessons we learned along the way in our quest to entrench it in Spotify’s ML ecosystem.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s a massive understatement to say that machine learning is at the heart of Spotify’s success story. Spotify has delivered beloved audio experiences such as Discover Weekly, Daily Mix, and &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/the-wait-is-over-your-spotify-2021-wrapped-is-here/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Wrapped&lt;/a&gt; on the strength of ML-powered personalized recommendations. Today, almost every part of Spotify has some applied ML systems, and a significant and growing portion of our R&amp;amp;D teams consist of ML engineers and data scientists. In order to support ML systems at the scale and speed that our business requires, and to apply ML responsibly for our listeners, we have platformized sizable parts of the most common ML infrastructure within our Machine Learning Platform. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Overview of Spotify’s ML Platform&lt;br/&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since the beginning, our ambition for &lt;a href=&#34;https://engineering.atspotify.com/2019/12/13/the-winding-road-to-better-machine-learning-infrastructure-through-tensorflow-extended-and-kubeflow/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s ML Platform&lt;/a&gt; was to connect the end-to-end user journey for ML practitioners. We subscribe to the “walking skeleton” model of product development, focusing from the start on end-to-end workflow and subsequently fleshing out functionality once we’ve proven value.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;154&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-700x154.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-700x154.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-250x55.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-768x169.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-120x26.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow.png 1448w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In late 2019 / early 2020, our ML Platform consisted of a few components that covered the (supervised) machine learning workflow experience for Spotify’s ML practitioners: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Spotify Kubeflow&lt;strong&gt;, &lt;/strong&gt;which is our version of the open source Kubeflow Pipelines platform that helped us standardize ML workflows on the TensorFlow Extended (TFX) ecosystem  &lt;/li&gt;&lt;li&gt;Jukebox,&lt;strong&gt; &lt;/strong&gt;which is based on TensorFlow Transform and powers our feature engineering and management workflows &lt;/li&gt;&lt;li&gt;Salem, which is based on TensorFlow Serving and helps us standardize model serving and production workflows, and &lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://engineering.atspotify.com/2020/11/04/its-all-just-wiggly-air-building-infrastructure-to-support-audio-research/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Klio&lt;/a&gt;, which is our open source solution for audio processing with Apache Beam and Dataflow&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;153&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-700x153.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-700x153.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-250x54.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-768x167.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-1536x335.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-120x26.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1.png 1606w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The Product Opportunity&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we started to onboard more ML teams onto our platform, we identified two important gaps in our end-to-end support for ML workflows: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;A &lt;strong&gt;centralized metadata layer&lt;/strong&gt;,&lt;strong&gt; &lt;/strong&gt;where we could define our platform entities / entity relationships (e.g., models, evaluations, training sets)&lt;/li&gt;&lt;li&gt;A &lt;strong&gt;metadata presentation layer&lt;/strong&gt;, where users could store, track, and manage the metadata generated from their ML workflows, which is the focus of this blogpost&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As the ML Platform team, we knew we wanted a tool where ML engineers could store ML project information and access metadata related to the ML application lifecycle, but weren’t entirely sure what that product would be. As we began exploring, we found that teams were using spreadsheets to track ML metadata and gave us hyper-specific feature requests for their individual problems. We also came away with broader unmet needs such as discovery of ML projects&lt;strong&gt;,&lt;/strong&gt; support for ML team collaboration&lt;strong&gt;,&lt;/strong&gt; and important product&lt;strong&gt; &lt;/strong&gt;gaps within our own ML Platform tooling. These learnings informed the initial scope of our MVP (minimally viable product) and taught us our first product lesson. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Product Lesson 1: Balancing Product Vision and Product Strategy&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For the first iteration of the product, we took a &lt;a href=&#34;https://jchyip.medium.com/why-t-shaped-people-e8706198e437&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;T-shaped&lt;/a&gt; approach. We focused on building horizontal solutions&lt;strong&gt; &lt;/strong&gt;for needs we heard most commonly across all ML practitioner roles, such as being able to collaborate more effectively as an ML team. We also built a vertical solution&lt;strong&gt; &lt;/strong&gt;that mapped to a specific platform tooling gap: better evaluation tooling for offline model training for ML engineers. We launched our MVP with an aspirational name and product vision: ML Home, one-stop shop for machine learning at Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;282&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-700x282.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-700x282.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-250x101.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-768x309.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-120x48.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021.png 1504w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;The initial feedback we received on our MVP fell on two ends of the spectrum. Individual contributions struggled with the broad idea of a “one-stop shop” and wanted to know what concrete problems the product could solve for them today. Leadership wanted to know how many users we would serve over the long run and how big our impact could be.&lt;/p&gt;&lt;p&gt;Throughout the process of selling our MVP, we learned how difficult it is to balance product vision and product strategy without compromising one for the other. Had we scratched our broader vision based on the initial feedback and focused exclusively on the concrete needs (e.g., I want to see all my training pipelines in one view), we would have risked delivering a narrow point solution. On the other hand, if we over-indexed our roadmap on the broad, ambiguous needs (e.g. I want to collaborate more effectively with my team), we would have delivered a nice-to-have but not a must-have product. &lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By intentionally keeping our &lt;strong&gt;Product Vision broad&lt;/strong&gt; &lt;strong&gt;and future-looking &lt;/strong&gt;(one-stop shop)&lt;strong&gt;, &lt;/strong&gt;we gave ourselves the runway to think bigger about our solution space and our potential impact down the line. And by keeping &lt;strong&gt;Product Strategy concrete&lt;/strong&gt; &lt;strong&gt;and iterative&lt;/strong&gt; (offline evaluation tool), we were able to ensure that we solved concrete problems that over time helped us ingrain the product into our user’s daily workflows. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Product Lesson 2: The Limits of MVPs &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;355&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-700x355.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-700x355.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-768x390.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-120x61.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home.png 1080w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;ML Home&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we wrapped up the feedback and adoption drive for the MVP, we learned our second product lesson. It is no secret that driving product adoption is hard, especially for products that are trying to replace existing solutions or market incumbents. We hit the ceiling of our MVP’s potential fairly quickly. We did not see a surge of adoption beyond the handful of users who were involved in the very early ideation process. Most users understood the value proposition of what we were building, but did not see enough depth to switch over from their existing tooling. In retrospect, our expectations of what we delivered and how valuable it would be did not match the depth of our users’ needs. It would have been easy at that stage to dismiss the product entirely, based on early adoption signals. That would have been a mistake. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we plowed on with more detailed user feedback in our quest to drive more adoption, it became clear to us that we were misplacing our expectations on what role the MVP played in the product development process. &lt;strong&gt;The most valuable end goal of an MVP is to get enough of the vision and strategies out there to help validate or invalidate them. &lt;/strong&gt;Our initial MVP helped us test and de-risk our work because we were able to get detailed validation of the workflows from ML teams and lay out the technical foundations for the product. It did not matter how many daily active users we had at that stage, as long as we had enough users (which we did) who saw the value in what we were building. These users continued to attend our user feedback sessions and helped us get the product to a higher and more valuable place.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Product Lesson 3: Knowing the true Differentiators&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we moved beyond the MVP phase and started to map out our next steps (focusing on some aspects of the product over others), we learned our third and perhaps most important product lesson. We realized that in order to provide a really valuable product to our users, we needed to not only reach feature parity with existing solutions, but also double down on ML Home’s unique differentiators. In short, ML Home as a product needed to be more compelling than the competing solutions. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For a while, we probed, debated, and stack-ranked specific features and workflows that we felt would be game-changing for our users. Our theory was that if we built a “compelling feature,” it would be able to singularly pass a threshold for users to adopt. In the end, we realized that the unique differentiators for ML Home actually came in the form of our other ML Platform offerings, not any one individual feature. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While some aspects of ML Home could functionally serve as a stand-alone product, by enriching it with training, evaluation, and system metadata generated from the rest of our ML Platform, it became a much more compelling product. &lt;strong&gt;ML Home’s unique differentiator isn’t any one silver-bullet feature but rather the gateway value it provides as the sum of our ML Platform capabilities.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Much of the work we did in this phase was building out our metadata service to consolidate our overall entities and concepts across the platform, but we also spent significant time building flexibility into the product’s interface. For example, annotation capabilities such as tagging and notes became key features that enabled teams to customize and mirror their own workflows. That, paired with a faster, slicker product experience and information-rich model comparisons, tipped the balance in our favor. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By the time we released the second version of ML Home, we had successfully onboarded more ML teams who were actively using the product in their daily workflows. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;473&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-700x473.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-700x473.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-250x169.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-768x519.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-1536x1039.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-120x81.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Sample ML Project in ML Home. For illustrative purposes only.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Scaling the Product to Our Vision&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Getting closer to&lt;strong&gt; &lt;/strong&gt;product-market fit taught us a lot about how to iterate moving forward. We knew that ML Home only served one typical ML workflow. However, in order to be an indispensable product for &lt;em&gt;all&lt;/em&gt; ML practitioners, it needed to cover more ground. We also knew that tightly coupling ML Home’s capabilities to our existing ML Platform products resulted in a much higher rate of adoption than stand-alone solutions. Armed with these takeaways, we wireframed a broader vision for the product.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Today, ML Home provides Spotify’s ML practitioners with artifacts and workflow metadata of all models passing through individual components of our ML Platform. It includes capabilities such as the ability to track and evaluate offline experiments, visualize results, track and monitor deployed models, explore features, certify models for production readiness, and much more.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Through intuitive workflows and simplified information architecture, users are able to quickly spin up a project space to collaborate with their team and discover the 220+ ML projects across Spotify currently listed in ML Home. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have seen a 200% growth in daily active users since we began our scaling efforts a year ago, and ML Home is now solidly entrenched in the daily workflows of some of the most important ML teams at Spotify. Despite its short tenure in Spotify’s Infrastructure landscape, ML Home is well on its way to becoming the one-stop shop for all things ML at Spotify. &lt;br/&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;476&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-700x476.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-700x476.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-250x170.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-768x523.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-120x82.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home.png 1340w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Conceptual rendering of ML Home. For illustrative purposes only.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Three Key Lessons&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The saying goes that hindsight is 20/20, and it’s true. Looking back, these are the lessons that stick out the most from our product development process: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Product vision vs product strategy. &lt;/strong&gt;It is difficult to strike the right balance between an inspiring vision that can support future solutions and a responsive product strategy that addresses today’s problems. But it is crucially important to not conflate the two in the early stages of product development. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Limits of MVPs.&lt;/strong&gt; MVPs provide the most value as a validation and de-risking tool for product strategy and overall direction. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Know the true differentiators.&lt;/strong&gt; It’s worth paying attention to what the real differentiators are for a product. It does not have to be a “compelling” feature; it can simply be opportunities found in the ecosystem that turn the tide for a product’s success. &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Looking Ahead &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;ML Home is not done — not even close. We know this because, in the last year, Spotify’s ML community has proposed new and inventive ways to evolve the product. For exampleML engineers saw the potential to build on top of ML Home and proposed we build production readiness certification of ML models in the interface. In addition, we are exploring aspects such as explainability to advance model interpretability and observability to better understand model health. Then there are the ever-inspiring hack week projects that tell us that our product has taken root at Spotify. We are excited for what’s next! &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you are interested in building cutting edge machine learning infrastructure at Spotify, we are &lt;a href=&#34;https://www.lifeatspotify.com/jobs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;hiring&lt;/a&gt; for engineering and product roles across the board. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;ML Home would not exist without the brilliant work of the ML UX team, our teammates from ML Platform, and the generous guidance from Spotify’s ML community. Since the list of individuals to thank would far exceed the words in this post, I will instead mention the individuals whose work made ML Home possible: Johan Bååth, Joshua Baer, Hayden Betts, Martin Bomio, Matt Brown, Keshi Dai, Omar Delarosa, Funmilayo Doro, Gandalf Hernandez, Adam Laiacano, Brian Martin, Daniel Norberg, James O’Dwyer, Ed Samour, Wesley Yee, and Qi Zheng.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/product-lessons-from-ml-home-spotifys-one-stop-shop-for-machine-learning/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Introduction Building platforms is a hard business. Building platforms for discerning machine learning (ML) practitioners with bespoke needs and a do-it-yourself ethos is even harder. In today’s post, we will give you a peek into how we built ML Home, the internal user interface for Spotify’s Ma</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Product Lessons from ML Home: Spotify’s One-Stop Shop for Machine Learning&#xA;</title>
    <updated>2022-01-19T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2022-01-19:/product-lessons-from-ml-home-spotifys-one-stop-shop-for-machine-learning/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;January 19, 2022&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/product-lessons-from-ml-home-spotifys-one-stop-shop-for-machine-learning/&#34; title=&#34;Product Lessons from ML Home: Spotify’s One-Stop Shop for Machine Learning&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-768x378.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;h2&gt;Introduction &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Building platforms is a hard business. Building platforms for discerning machine learning (ML) practitioners with bespoke needs and a do-it-yourself ethos is even harder. In today’s post, we will give you a peek into how we built &lt;strong&gt;ML Home&lt;/strong&gt;, the internal user interface for Spotify’s Machine Learning Platform, and the product lessons we learned along the way in our quest to entrench it in Spotify’s ML ecosystem.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s a massive understatement to say that machine learning is at the heart of Spotify’s success story. Spotify has delivered beloved audio experiences such as Discover Weekly, Daily Mix, and &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/the-wait-is-over-your-spotify-2021-wrapped-is-here/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Wrapped&lt;/a&gt; on the strength of ML-powered personalized recommendations. Today, almost every part of Spotify has some applied ML systems, and a significant and growing portion of our R&amp;amp;D teams consist of ML engineers and data scientists. In order to support ML systems at the scale and speed that our business requires, and to apply ML responsibly for our listeners, we have platformized sizable parts of the most common ML infrastructure within our Machine Learning Platform. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Overview of Spotify’s ML Platform&lt;br/&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since the beginning, our ambition for &lt;a href=&#34;https://engineering.atspotify.com/2019/12/13/the-winding-road-to-better-machine-learning-infrastructure-through-tensorflow-extended-and-kubeflow/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s ML Platform&lt;/a&gt; was to connect the end-to-end user journey for ML practitioners. We subscribe to the “walking skeleton” model of product development, focusing from the start on end-to-end workflow and subsequently fleshing out functionality once we’ve proven value.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;154&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-700x154.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-700x154.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-250x55.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-768x169.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow-120x26.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-User-Workflow.png 1448w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In late 2019 / early 2020, our ML Platform consisted of a few components that covered the (supervised) machine learning workflow experience for Spotify’s ML practitioners: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Spotify Kubeflow&lt;strong&gt;, &lt;/strong&gt;which is our version of the open source Kubeflow Pipelines platform that helped us standardize ML workflows on the TensorFlow Extended (TFX) ecosystem  &lt;/li&gt;&lt;li&gt;Jukebox,&lt;strong&gt; &lt;/strong&gt;which is based on TensorFlow Transform and powers our feature engineering and management workflows &lt;/li&gt;&lt;li&gt;Salem, which is based on TensorFlow Serving and helps us standardize model serving and production workflows, and &lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://engineering.atspotify.com/2020/11/04/its-all-just-wiggly-air-building-infrastructure-to-support-audio-research/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Klio&lt;/a&gt;, which is our open source solution for audio processing with Apache Beam and Dataflow&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;153&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-700x153.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-700x153.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-250x54.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-768x167.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-1536x335.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1-120x26.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2019-1.png 1606w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The Product Opportunity&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we started to onboard more ML teams onto our platform, we identified two important gaps in our end-to-end support for ML workflows: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;A &lt;strong&gt;centralized metadata layer&lt;/strong&gt;,&lt;strong&gt; &lt;/strong&gt;where we could define our platform entities / entity relationships (e.g., models, evaluations, training sets)&lt;/li&gt;&lt;li&gt;A &lt;strong&gt;metadata presentation layer&lt;/strong&gt;, where users could store, track, and manage the metadata generated from their ML workflows, which is the focus of this blogpost&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As the ML Platform team, we knew we wanted a tool where ML engineers could store ML project information and access metadata related to the ML application lifecycle, but weren’t entirely sure what that product would be. As we began exploring, we found that teams were using spreadsheets to track ML metadata and gave us hyper-specific feature requests for their individual problems. We also came away with broader unmet needs such as discovery of ML projects&lt;strong&gt;,&lt;/strong&gt; support for ML team collaboration&lt;strong&gt;,&lt;/strong&gt; and important product&lt;strong&gt; &lt;/strong&gt;gaps within our own ML Platform tooling. These learnings informed the initial scope of our MVP (minimally viable product) and taught us our first product lesson. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Product Lesson 1: Balancing Product Vision and Product Strategy&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For the first iteration of the product, we took a &lt;a href=&#34;https://jchyip.medium.com/why-t-shaped-people-e8706198e437&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;T-shaped&lt;/a&gt; approach. We focused on building horizontal solutions&lt;strong&gt; &lt;/strong&gt;for needs we heard most commonly across all ML practitioner roles, such as being able to collaborate more effectively as an ML team. We also built a vertical solution&lt;strong&gt; &lt;/strong&gt;that mapped to a specific platform tooling gap: better evaluation tooling for offline model training for ML engineers. We launched our MVP with an aspirational name and product vision: ML Home, one-stop shop for machine learning at Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;282&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-700x282.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-700x282.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-250x101.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-768x309.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021-120x48.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Platform_2021.png 1504w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;The initial feedback we received on our MVP fell on two ends of the spectrum. Individual contributions struggled with the broad idea of a “one-stop shop” and wanted to know what concrete problems the product could solve for them today. Leadership wanted to know how many users we would serve over the long run and how big our impact could be.&lt;/p&gt;&lt;p&gt;Throughout the process of selling our MVP, we learned how difficult it is to balance product vision and product strategy without compromising one for the other. Had we scratched our broader vision based on the initial feedback and focused exclusively on the concrete needs (e.g., I want to see all my training pipelines in one view), we would have risked delivering a narrow point solution. On the other hand, if we over-indexed our roadmap on the broad, ambiguous needs (e.g. I want to collaborate more effectively with my team), we would have delivered a nice-to-have but not a must-have product. &lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By intentionally keeping our &lt;strong&gt;Product Vision broad&lt;/strong&gt; &lt;strong&gt;and future-looking &lt;/strong&gt;(one-stop shop)&lt;strong&gt;, &lt;/strong&gt;we gave ourselves the runway to think bigger about our solution space and our potential impact down the line. And by keeping &lt;strong&gt;Product Strategy concrete&lt;/strong&gt; &lt;strong&gt;and iterative&lt;/strong&gt; (offline evaluation tool), we were able to ensure that we solved concrete problems that over time helped us ingrain the product into our user’s daily workflows. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Product Lesson 2: The Limits of MVPs &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;355&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-700x355.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-700x355.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-768x390.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home-120x61.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Spotify-ML-Home.png 1080w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;ML Home&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we wrapped up the feedback and adoption drive for the MVP, we learned our second product lesson. It is no secret that driving product adoption is hard, especially for products that are trying to replace existing solutions or market incumbents. We hit the ceiling of our MVP’s potential fairly quickly. We did not see a surge of adoption beyond the handful of users who were involved in the very early ideation process. Most users understood the value proposition of what we were building, but did not see enough depth to switch over from their existing tooling. In retrospect, our expectations of what we delivered and how valuable it would be did not match the depth of our users’ needs. It would have been easy at that stage to dismiss the product entirely, based on early adoption signals. That would have been a mistake. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we plowed on with more detailed user feedback in our quest to drive more adoption, it became clear to us that we were misplacing our expectations on what role the MVP played in the product development process. &lt;strong&gt;The most valuable end goal of an MVP is to get enough of the vision and strategies out there to help validate or invalidate them. &lt;/strong&gt;Our initial MVP helped us test and de-risk our work because we were able to get detailed validation of the workflows from ML teams and lay out the technical foundations for the product. It did not matter how many daily active users we had at that stage, as long as we had enough users (which we did) who saw the value in what we were building. These users continued to attend our user feedback sessions and helped us get the product to a higher and more valuable place.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Product Lesson 3: Knowing the true Differentiators&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we moved beyond the MVP phase and started to map out our next steps (focusing on some aspects of the product over others), we learned our third and perhaps most important product lesson. We realized that in order to provide a really valuable product to our users, we needed to not only reach feature parity with existing solutions, but also double down on ML Home’s unique differentiators. In short, ML Home as a product needed to be more compelling than the competing solutions. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For a while, we probed, debated, and stack-ranked specific features and workflows that we felt would be game-changing for our users. Our theory was that if we built a “compelling feature,” it would be able to singularly pass a threshold for users to adopt. In the end, we realized that the unique differentiators for ML Home actually came in the form of our other ML Platform offerings, not any one individual feature. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While some aspects of ML Home could functionally serve as a stand-alone product, by enriching it with training, evaluation, and system metadata generated from the rest of our ML Platform, it became a much more compelling product. &lt;strong&gt;ML Home’s unique differentiator isn’t any one silver-bullet feature but rather the gateway value it provides as the sum of our ML Platform capabilities.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Much of the work we did in this phase was building out our metadata service to consolidate our overall entities and concepts across the platform, but we also spent significant time building flexibility into the product’s interface. For example, annotation capabilities such as tagging and notes became key features that enabled teams to customize and mirror their own workflows. That, paired with a faster, slicker product experience and information-rich model comparisons, tipped the balance in our favor. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By the time we released the second version of ML Home, we had successfully onboarded more ML teams who were actively using the product in their daily workflows. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;473&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-700x473.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-700x473.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-250x169.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-768x519.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-1536x1039.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project-120x81.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Sample-NLP-Project.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Sample ML Project in ML Home. For illustrative purposes only.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Scaling the Product to Our Vision&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Getting closer to&lt;strong&gt; &lt;/strong&gt;product-market fit taught us a lot about how to iterate moving forward. We knew that ML Home only served one typical ML workflow. However, in order to be an indispensable product for &lt;em&gt;all&lt;/em&gt; ML practitioners, it needed to cover more ground. We also knew that tightly coupling ML Home’s capabilities to our existing ML Platform products resulted in a much higher rate of adoption than stand-alone solutions. Armed with these takeaways, we wireframed a broader vision for the product.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Today, ML Home provides Spotify’s ML practitioners with artifacts and workflow metadata of all models passing through individual components of our ML Platform. It includes capabilities such as the ability to track and evaluate offline experiments, visualize results, track and monitor deployed models, explore features, certify models for production readiness, and much more.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Through intuitive workflows and simplified information architecture, users are able to quickly spin up a project space to collaborate with their team and discover the 220+ ML projects across Spotify currently listed in ML Home. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have seen a 200% growth in daily active users since we began our scaling efforts a year ago, and ML Home is now solidly entrenched in the daily workflows of some of the most important ML teams at Spotify. Despite its short tenure in Spotify’s Infrastructure landscape, ML Home is well on its way to becoming the one-stop shop for all things ML at Spotify. &lt;br/&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;476&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-700x476.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-700x476.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-250x170.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-768x523.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home-120x82.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/Conceptual-Rendering-of-ML-Home.png 1340w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Conceptual rendering of ML Home. For illustrative purposes only.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Three Key Lessons&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The saying goes that hindsight is 20/20, and it’s true. Looking back, these are the lessons that stick out the most from our product development process: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Product vision vs product strategy. &lt;/strong&gt;It is difficult to strike the right balance between an inspiring vision that can support future solutions and a responsive product strategy that addresses today’s problems. But it is crucially important to not conflate the two in the early stages of product development. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Limits of MVPs.&lt;/strong&gt; MVPs provide the most value as a validation and de-risking tool for product strategy and overall direction. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Know the true differentiators.&lt;/strong&gt; It’s worth paying attention to what the real differentiators are for a product. It does not have to be a “compelling” feature; it can simply be opportunities found in the ecosystem that turn the tide for a product’s success. &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Looking Ahead &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;ML Home is not done — not even close. We know this because, in the last year, Spotify’s ML community has proposed new and inventive ways to evolve the product. For exampleML engineers saw the potential to build on top of ML Home and proposed we build production readiness certification of ML models in the interface. In addition, we are exploring aspects such as explainability to advance model interpretability and observability to better understand model health. Then there are the ever-inspiring hack week projects that tell us that our product has taken root at Spotify. We are excited for what’s next! &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you are interested in building cutting edge machine learning infrastructure at Spotify, we are &lt;a href=&#34;https://www.lifeatspotify.com/jobs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;hiring&lt;/a&gt; for engineering and product roles across the board. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;ML Home would not exist without the brilliant work of the ML UX team, our teammates from ML Platform, and the generous guidance from Spotify’s ML community. Since the list of individuals to thank would far exceed the words in this post, I will instead mention the individuals whose work made ML Home possible: Johan Bååth, Joshua Baer, Hayden Betts, Martin Bomio, Matt Brown, Keshi Dai, Omar Delarosa, Funmilayo Doro, Gandalf Hernandez, Adam Laiacano, Brian Martin, Daniel Norberg, James O’Dwyer, Ed Samour, Wesley Yee, and Qi Zheng.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/product-lessons-from-ml-home-spotifys-one-stop-shop-for-machine-learning/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2022/01/ML-Home_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Introduction Building platforms is a hard business. Building platforms for discerning machine learning (ML) practitioners with bespoke needs and a do-it-yourself ethos is even harder. In today’s post, we will give you a peek into how we built ML Home, the internal user interface for Spotify’s Ma</summary>
  </entry>
  <entry>
    <title>&#xA;                                            The Audio Aura Story: Mystical to Mathematical&#xA;</title>
    <updated>2021-12-17T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-12-17:/2021/12/17/the-audio-aura-story-mystical-to-mathematical/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;December 17, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/12/17/the-audio-aura-story-mystical-to-mathematical/&#34; title=&#34;The Audio Aura Story: Mystical to Mathematical&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-250x124.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-700x347.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-768x380.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-1536x761.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;For 2021 Wrapped, we were challenged to visually express a user’s &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/learn-more-about-the-audio-aura-in-your-spotify-2021-wrapped-with-aura-reader-mystic-michaela/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Audio Aura&lt;/a&gt; based on how they listened this year. I like to think of it like this: if your music listening data became a person and walked down the street to the neighborhood aura reader, what would that person’s aura look like? That’s the 2021 Wrapped Audio Aura story. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;A new Wrapped experience&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify Wrapped is a company-wide effort with 300+ Spotifiers across 20+ teams. My team in particular is a design/engineering team and our main focus is to design, build, and launch the Wrapped personalized user experience to millions of Spotify users around the world. These personalized stories bring users’ annual listening habits to life through creative storytelling. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The personalized experience shows listeners’ data stories such as their top songs, top artists, and top genres of the year. In addition to building these stories, our Brand and Creative team thinks outside the box and ideates new ways to illuminate insights into a user’s audio streams. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Imagine.&lt;/em&gt; A meeting room full of professionals — a virtual meeting room, of course. Brows furrowed, pens clicking, and fingers scratching heads. We were brainstorming the answer to the question: how do we &lt;em&gt;define&lt;/em&gt; a Spotify user’s Audio Aura? To help with this question and guarantee the auras we create are valid, we consulted an aura reader, &lt;a href=&#34;https://www.mysticmichaela.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Mystic Michaela&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;According to Mystic Michaela, auras are “your personal energy signature. Everyone has one, and aura readers see them as a combination of colors, each representative of the traits that make you, you” (check out Michaela’s full take on auras &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/learn-more-about-the-audio-aura-in-your-spotify-2021-wrapped-with-aura-reader-mystic-michaela/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;). For the purposes of our Audio Aura story, we can extend the definition to say that a 2021 Spotify Wrapped Audio Aura is a colorful energy made up of two colors that help our listeners understand the vibe or mood of the music they streamed this year.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Let’s get to the whiteboard &lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;h5&gt;&lt;strong&gt;Challenge #1&lt;/strong&gt; &lt;/h5&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Return the top two mood categories and the descriptor associated with their 2021 listening history for each user.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h5&gt;&lt;strong&gt;Challenge #2&lt;/strong&gt;&lt;/h5&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Identify how much of a user’s music is represented by each mood aka the mood weight.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To address the above challenges, we utilized a track mood descriptor dataset, aggregated each user’s listening history, and created six broad mood categories (i.e. “Happy”, “Calm”, “Hopeful”) that would then be narrowed down to two to create the audio aura.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;Count the number of streams for a given track and retrieve its top mood descriptor as determined by the mood descriptor dataset.&lt;/li&gt;&lt;li&gt;Bucket those moods into one of the six mood categories.&lt;/li&gt;&lt;li&gt;Perform an aggregation to find the total number of streams for each mood category and take the mood descriptor with the highest number of streams.&lt;/li&gt;&lt;li&gt;Carry out one last calculation to find the percentage of streams of a mood over the total number of streams.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;505&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-700x505.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-700x505.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-250x180.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-768x554.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-1536x1107.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-120x87.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the example above, tracks that are “happy” or “calm” are the most streamed, making them the top two moods found in a specific user’s music. “happy” makes up 47% of the user’s listening with the mood descriptor being “blissful”. “calm” makes up 29% of the user’s listening with the granular descriptor being “chill”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Now, let’s turn these moods into colors&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Dry-erase pen caps click… we’ve identified a user’s top two Audio Aura moods and their mood weights. Now let’s turn this data into colors. Mystic Michaela stepped in to lend her expertise on auras and their colors. With her guidance, we assigned six core colors to the six mood descriptor categories mentioned above (which include “happy”, “calm”, and “hopeful”). To provide secondary colors to the aura visual, our designer represents mood weights through varying levels of contrast. The more a mood is present in a user’s listening, the darker the color. The less a mood is present in a user’s listening, the lighter the color. In the graphic above, the user has a mood weight of 0.47; therefore, the secondary color would be found in the row labeled Encore 100. Their second mood weight was 0.29; therefore, the secondary color would be found in the row labeled Encore 180.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Creativity and embracing constraints&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that we have a user’s Audio Aura colors, all that’s left is for design and engineering to consider the last question: how can we engineer an ethereal Aura visual?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our deadline was two weeks away. In our milestones planning, we allocated a few days of engineering per story since we committed to a number of data stories and several new features. We had a few days to explore an elegant aura visual that was feasible on both iOS and Android. Part of the challenge for design is knowing what’s possible for engineering to execute in a dedicated amount of time. And part of the challenge for engineering is accurately estimating the time it will take to build a given design. We had to come up with a solution that made good use of our time and garnered a confident engineering sign-off. Situations like this are very unique to the Wrapped design/engineering experience and through such situations, I’ve learned that creativity comes from embracing constraints and making use of what we have in novel ways. Our designer made use of three elements: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;An animated gradient built for last year’s 2020 Wrapped campaign to create a “lava lamp” effect.&lt;/li&gt;&lt;li&gt;Ribbons built for 2021 Wrapped to create organic and unique shapes.&lt;/li&gt;&lt;li&gt;A blur effect to blend everything together in a dreamlike fashion.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since we had already built the animated gradient and ribbons, we were able to build the aura visual with high confidence, on time, and to accurately depict an ethereal aura!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;250&#34; height=&#34;501&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-250x501.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-250x501.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-700x1403.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-768x1540.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-766x1536.png 766w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-120x241.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura.png 858w&#34; sizes=&#34;(max-width: 250px) 100vw, 250px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;To wrap it up&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The 2021 Wrapped Audio Aura story is a peek into the unique experience of engineering and design. We took an esoteric concept and broke it down into its basic elements to build an exciting feature for the Wrapped experience. Our ability to work together with teams across Spotify allows us to find creative solutions, enabling us to create stories that, hopefully, delight our users. If you’re interested in joining our efforts to bring Spotify listeners new experiences, check out our &lt;a href=&#34;https://www.lifeatspotify.com/jobs?c=engineering&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;open roles&lt;/a&gt;!&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/12/17/the-audio-aura-story-mystical-to-mathematical/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR For 2021 Wrapped, we were challenged to visually express a user’s Audio Aura based on how they listened this year. I like to think of it like this: if your music listening data became a person and walked down the street to the neighborhood aura reader, what would that person’s aura look like?</summary>
    <author>
      <name>Published by Zela Taino, Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            The Audio Aura Story: Mystical to Mathematical&#xA;</title>
    <updated>2021-12-17T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-12-17:/the-audio-aura-story-mystical-to-mathematical/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;December 17, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/the-audio-aura-story-mystical-to-mathematical/&#34; title=&#34;The Audio Aura Story: Mystical to Mathematical&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-250x124.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-700x347.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-768x380.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-1536x761.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;For 2021 Wrapped, we were challenged to visually express a user’s &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/learn-more-about-the-audio-aura-in-your-spotify-2021-wrapped-with-aura-reader-mystic-michaela/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Audio Aura&lt;/a&gt; based on how they listened this year. I like to think of it like this: if your music listening data became a person and walked down the street to the neighborhood aura reader, what would that person’s aura look like? That’s the 2021 Wrapped Audio Aura story. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;A new Wrapped experience&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify Wrapped is a company-wide effort with 300+ Spotifiers across 20+ teams. My team in particular is a design/engineering team and our main focus is to design, build, and launch the Wrapped personalized user experience to millions of Spotify users around the world. These personalized stories bring users’ annual listening habits to life through creative storytelling. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The personalized experience shows listeners’ data stories such as their top songs, top artists, and top genres of the year. In addition to building these stories, our Brand and Creative team thinks outside the box and ideates new ways to illuminate insights into a user’s audio streams. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Imagine.&lt;/em&gt; A meeting room full of professionals — a virtual meeting room, of course. Brows furrowed, pens clicking, and fingers scratching heads. We were brainstorming the answer to the question: how do we &lt;em&gt;define&lt;/em&gt; a Spotify user’s Audio Aura? To help with this question and guarantee the auras we create are valid, we consulted an aura reader, &lt;a href=&#34;https://www.mysticmichaela.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Mystic Michaela&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;According to Mystic Michaela, auras are “your personal energy signature. Everyone has one, and aura readers see them as a combination of colors, each representative of the traits that make you, you” (check out Michaela’s full take on auras &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/learn-more-about-the-audio-aura-in-your-spotify-2021-wrapped-with-aura-reader-mystic-michaela/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;). For the purposes of our Audio Aura story, we can extend the definition to say that a 2021 Spotify Wrapped Audio Aura is a colorful energy made up of two colors that help our listeners understand the vibe or mood of the music they streamed this year.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Let’s get to the whiteboard &lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;h5&gt;&lt;strong&gt;Challenge #1&lt;/strong&gt; &lt;/h5&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Return the top two mood categories and the descriptor associated with their 2021 listening history for each user.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h5&gt;&lt;strong&gt;Challenge #2&lt;/strong&gt;&lt;/h5&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Identify how much of a user’s music is represented by each mood aka the mood weight.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To address the above challenges, we utilized a track mood descriptor dataset, aggregated each user’s listening history, and created six broad mood categories (i.e. “Happy”, “Calm”, “Hopeful”) that would then be narrowed down to two to create the audio aura.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;Count the number of streams for a given track and retrieve its top mood descriptor as determined by the mood descriptor dataset.&lt;/li&gt;&lt;li&gt;Bucket those moods into one of the six mood categories.&lt;/li&gt;&lt;li&gt;Perform an aggregation to find the total number of streams for each mood category and take the mood descriptor with the highest number of streams.&lt;/li&gt;&lt;li&gt;Carry out one last calculation to find the percentage of streams of a mood over the total number of streams.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;505&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-700x505.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-700x505.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-250x180.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-768x554.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-1536x1107.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-120x87.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the example above, tracks that are “happy” or “calm” are the most streamed, making them the top two moods found in a specific user’s music. “happy” makes up 47% of the user’s listening with the mood descriptor being “blissful”. “calm” makes up 29% of the user’s listening with the granular descriptor being “chill”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Now, let’s turn these moods into colors&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Dry-erase pen caps click… we’ve identified a user’s top two Audio Aura moods and their mood weights. Now let’s turn this data into colors. Mystic Michaela stepped in to lend her expertise on auras and their colors. With her guidance, we assigned six core colors to the six mood descriptor categories mentioned above (which include “happy”, “calm”, and “hopeful”). To provide secondary colors to the aura visual, our designer represents mood weights through varying levels of contrast. The more a mood is present in a user’s listening, the darker the color. The less a mood is present in a user’s listening, the lighter the color. In the graphic above, the user has a mood weight of 0.47; therefore, the secondary color would be found in the row labeled Encore 100. Their second mood weight was 0.29; therefore, the secondary color would be found in the row labeled Encore 180.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Creativity and embracing constraints&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that we have a user’s Audio Aura colors, all that’s left is for design and engineering to consider the last question: how can we engineer an ethereal Aura visual?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our deadline was two weeks away. In our milestones planning, we allocated a few days of engineering per story since we committed to a number of data stories and several new features. We had a few days to explore an elegant aura visual that was feasible on both iOS and Android. Part of the challenge for design is knowing what’s possible for engineering to execute in a dedicated amount of time. And part of the challenge for engineering is accurately estimating the time it will take to build a given design. We had to come up with a solution that made good use of our time and garnered a confident engineering sign-off. Situations like this are very unique to the Wrapped design/engineering experience and through such situations, I’ve learned that creativity comes from embracing constraints and making use of what we have in novel ways. Our designer made use of three elements: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;An animated gradient built for last year’s 2020 Wrapped campaign to create a “lava lamp” effect.&lt;/li&gt;&lt;li&gt;Ribbons built for 2021 Wrapped to create organic and unique shapes.&lt;/li&gt;&lt;li&gt;A blur effect to blend everything together in a dreamlike fashion.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since we had already built the animated gradient and ribbons, we were able to build the aura visual with high confidence, on time, and to accurately depict an ethereal aura!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;250&#34; height=&#34;501&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-250x501.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-250x501.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-700x1403.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-768x1540.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-766x1536.png 766w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-120x241.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura.png 858w&#34; sizes=&#34;(max-width: 250px) 100vw, 250px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;To wrap it up&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The 2021 Wrapped Audio Aura story is a peek into the unique experience of engineering and design. We took an esoteric concept and broke it down into its basic elements to build an exciting feature for the Wrapped experience. Our ability to work together with teams across Spotify allows us to find creative solutions, enabling us to create stories that, hopefully, delight our users. If you’re interested in joining our efforts to bring Spotify listeners new experiences, check out our &lt;a href=&#34;https://www.lifeatspotify.com/jobs?c=engineering&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;open roles&lt;/a&gt;!&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/data/&#34; rel=&#34;tag&#34;&gt;Data&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/the-audio-aura-story-mystical-to-mathematical/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR For 2021 Wrapped, we were challenged to visually express a user’s Audio Aura based on how they listened this year. I like to think of it like this: if your music listening data became a person and walked down the street to the neighborhood aura reader, what would that person’s aura look like?</summary>
    <author>
      <name>Published by Zela Taino, Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            The Audio Aura Story: Mystical to Mathematical&#xA;</title>
    <updated>2021-12-17T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-12-17:/the-audio-aura-story-mystical-to-mathematical/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;December 17, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/the-audio-aura-story-mystical-to-mathematical/&#34; title=&#34;The Audio Aura Story: Mystical to Mathematical&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-250x124.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-700x347.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-768x380.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-1536x761.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;For 2021 Wrapped, we were challenged to visually express a user’s &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/learn-more-about-the-audio-aura-in-your-spotify-2021-wrapped-with-aura-reader-mystic-michaela/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Audio Aura&lt;/a&gt; based on how they listened this year. I like to think of it like this: if your music listening data became a person and walked down the street to the neighborhood aura reader, what would that person’s aura look like? That’s the 2021 Wrapped Audio Aura story. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;A new Wrapped experience&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify Wrapped is a company-wide effort with 300+ Spotifiers across 20+ teams. My team in particular is a design/engineering team and our main focus is to design, build, and launch the Wrapped personalized user experience to millions of Spotify users around the world. These personalized stories bring users’ annual listening habits to life through creative storytelling. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The personalized experience shows listeners’ data stories such as their top songs, top artists, and top genres of the year. In addition to building these stories, our Brand and Creative team thinks outside the box and ideates new ways to illuminate insights into a user’s audio streams. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Imagine.&lt;/em&gt; A meeting room full of professionals — a virtual meeting room, of course. Brows furrowed, pens clicking, and fingers scratching heads. We were brainstorming the answer to the question: how do we &lt;em&gt;define&lt;/em&gt; a Spotify user’s Audio Aura? To help with this question and guarantee the auras we create are valid, we consulted an aura reader, &lt;a href=&#34;https://www.mysticmichaela.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Mystic Michaela&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;According to Mystic Michaela, auras are “your personal energy signature. Everyone has one, and aura readers see them as a combination of colors, each representative of the traits that make you, you” (check out Michaela’s full take on auras &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/learn-more-about-the-audio-aura-in-your-spotify-2021-wrapped-with-aura-reader-mystic-michaela/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;). For the purposes of our Audio Aura story, we can extend the definition to say that a 2021 Spotify Wrapped Audio Aura is a colorful energy made up of two colors that help our listeners understand the vibe or mood of the music they streamed this year.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Let’s get to the whiteboard &lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;h5&gt;&lt;strong&gt;Challenge #1&lt;/strong&gt; &lt;/h5&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Return the top two mood categories and the descriptor associated with their 2021 listening history for each user.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h5&gt;&lt;strong&gt;Challenge #2&lt;/strong&gt;&lt;/h5&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Identify how much of a user’s music is represented by each mood aka the mood weight.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To address the above challenges, we utilized a track mood descriptor dataset, aggregated each user’s listening history, and created six broad mood categories (i.e. “Happy”, “Calm”, “Hopeful”) that would then be narrowed down to two to create the audio aura.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;Count the number of streams for a given track and retrieve its top mood descriptor as determined by the mood descriptor dataset.&lt;/li&gt;&lt;li&gt;Bucket those moods into one of the six mood categories.&lt;/li&gt;&lt;li&gt;Perform an aggregation to find the total number of streams for each mood category and take the mood descriptor with the highest number of streams.&lt;/li&gt;&lt;li&gt;Carry out one last calculation to find the percentage of streams of a mood over the total number of streams.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;505&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-700x505.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-700x505.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-250x180.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-768x554.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-1536x1107.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-120x87.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the example above, tracks that are “happy” or “calm” are the most streamed, making them the top two moods found in a specific user’s music. “happy” makes up 47% of the user’s listening with the mood descriptor being “blissful”. “calm” makes up 29% of the user’s listening with the granular descriptor being “chill”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Now, let’s turn these moods into colors&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Dry-erase pen caps click… we’ve identified a user’s top two Audio Aura moods and their mood weights. Now let’s turn this data into colors. Mystic Michaela stepped in to lend her expertise on auras and their colors. With her guidance, we assigned six core colors to the six mood descriptor categories mentioned above (which include “happy”, “calm”, and “hopeful”). To provide secondary colors to the aura visual, our designer represents mood weights through varying levels of contrast. The more a mood is present in a user’s listening, the darker the color. The less a mood is present in a user’s listening, the lighter the color. In the graphic above, the user has a mood weight of 0.47; therefore, the secondary color would be found in the row labeled Encore 100. Their second mood weight was 0.29; therefore, the secondary color would be found in the row labeled Encore 180.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Creativity and embracing constraints&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that we have a user’s Audio Aura colors, all that’s left is for design and engineering to consider the last question: how can we engineer an ethereal Aura visual?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our deadline was two weeks away. In our milestones planning, we allocated a few days of engineering per story since we committed to a number of data stories and several new features. We had a few days to explore an elegant aura visual that was feasible on both iOS and Android. Part of the challenge for design is knowing what’s possible for engineering to execute in a dedicated amount of time. And part of the challenge for engineering is accurately estimating the time it will take to build a given design. We had to come up with a solution that made good use of our time and garnered a confident engineering sign-off. Situations like this are very unique to the Wrapped design/engineering experience and through such situations, I’ve learned that creativity comes from embracing constraints and making use of what we have in novel ways. Our designer made use of three elements: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;An animated gradient built for last year’s 2020 Wrapped campaign to create a “lava lamp” effect.&lt;/li&gt;&lt;li&gt;Ribbons built for 2021 Wrapped to create organic and unique shapes.&lt;/li&gt;&lt;li&gt;A blur effect to blend everything together in a dreamlike fashion.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since we had already built the animated gradient and ribbons, we were able to build the aura visual with high confidence, on time, and to accurately depict an ethereal aura!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;250&#34; height=&#34;501&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-250x501.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-250x501.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-700x1403.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-768x1540.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-766x1536.png 766w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-120x241.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura.png 858w&#34; sizes=&#34;(max-width: 250px) 100vw, 250px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;To wrap it up&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The 2021 Wrapped Audio Aura story is a peek into the unique experience of engineering and design. We took an esoteric concept and broke it down into its basic elements to build an exciting feature for the Wrapped experience. Our ability to work together with teams across Spotify allows us to find creative solutions, enabling us to create stories that, hopefully, delight our users. If you’re interested in joining our efforts to bring Spotify listeners new experiences, check out our &lt;a href=&#34;https://www.lifeatspotify.com/jobs?c=engineering&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;open roles&lt;/a&gt;!&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/data/&#34; rel=&#34;tag&#34;&gt;Data&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/the-audio-aura-story-mystical-to-mathematical/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR For 2021 Wrapped, we were challenged to visually express a user’s Audio Aura based on how they listened this year. I like to think of it like this: if your music listening data became a person and walked down the street to the neighborhood aura reader, what would that person’s aura look like?</summary>
    <author>
      <name>Published by Zela Taino, Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            The Audio Aura Story: Mystical to Mathematical&#xA;</title>
    <updated>2021-12-17T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-12-17:/2021/12/the-audio-aura-story-mystical-to-mathematical/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;December 17, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/12/the-audio-aura-story-mystical-to-mathematical/&#34; title=&#34;The Audio Aura Story: Mystical to Mathematical&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-250x124.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-700x347.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-768x380.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-1536x761.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;For 2021 Wrapped, we were challenged to visually express a user’s &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/learn-more-about-the-audio-aura-in-your-spotify-2021-wrapped-with-aura-reader-mystic-michaela/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Audio Aura&lt;/a&gt; based on how they listened this year. I like to think of it like this: if your music listening data became a person and walked down the street to the neighborhood aura reader, what would that person’s aura look like? That’s the 2021 Wrapped Audio Aura story. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;A new Wrapped experience&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify Wrapped is a company-wide effort with 300+ Spotifiers across 20+ teams. My team in particular is a design/engineering team and our main focus is to design, build, and launch the Wrapped personalized user experience to millions of Spotify users around the world. These personalized stories bring users’ annual listening habits to life through creative storytelling. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The personalized experience shows listeners’ data stories such as their top songs, top artists, and top genres of the year. In addition to building these stories, our Brand and Creative team thinks outside the box and ideates new ways to illuminate insights into a user’s audio streams. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Imagine.&lt;/em&gt; A meeting room full of professionals — a virtual meeting room, of course. Brows furrowed, pens clicking, and fingers scratching heads. We were brainstorming the answer to the question: how do we &lt;em&gt;define&lt;/em&gt; a Spotify user’s Audio Aura? To help with this question and guarantee the auras we create are valid, we consulted an aura reader, &lt;a href=&#34;https://www.mysticmichaela.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Mystic Michaela&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;According to Mystic Michaela, auras are “your personal energy signature. Everyone has one, and aura readers see them as a combination of colors, each representative of the traits that make you, you” (check out Michaela’s full take on auras &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/learn-more-about-the-audio-aura-in-your-spotify-2021-wrapped-with-aura-reader-mystic-michaela/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;). For the purposes of our Audio Aura story, we can extend the definition to say that a 2021 Spotify Wrapped Audio Aura is a colorful energy made up of two colors that help our listeners understand the vibe or mood of the music they streamed this year.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Let’s get to the whiteboard &lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;h5&gt;&lt;strong&gt;Challenge #1&lt;/strong&gt; &lt;/h5&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Return the top two mood categories and the descriptor associated with their 2021 listening history for each user.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h5&gt;&lt;strong&gt;Challenge #2&lt;/strong&gt;&lt;/h5&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Identify how much of a user’s music is represented by each mood aka the mood weight.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To address the above challenges, we utilized a track mood descriptor dataset, aggregated each user’s listening history, and created six broad mood categories (i.e. “Happy”, “Calm”, “Hopeful”) that would then be narrowed down to two to create the audio aura.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;Count the number of streams for a given track and retrieve its top mood descriptor as determined by the mood descriptor dataset.&lt;/li&gt;&lt;li&gt;Bucket those moods into one of the six mood categories.&lt;/li&gt;&lt;li&gt;Perform an aggregation to find the total number of streams for each mood category and take the mood descriptor with the highest number of streams.&lt;/li&gt;&lt;li&gt;Carry out one last calculation to find the percentage of streams of a mood over the total number of streams.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;505&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-700x505.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-700x505.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-250x180.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-768x554.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-1536x1107.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight-120x87.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weight.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the example above, tracks that are “happy” or “calm” are the most streamed, making them the top two moods found in a specific user’s music. “happy” makes up 47% of the user’s listening with the mood descriptor being “blissful”. “calm” makes up 29% of the user’s listening with the granular descriptor being “chill”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Mood-Weightdescriptor.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Now, let’s turn these moods into colors&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Dry-erase pen caps click… we’ve identified a user’s top two Audio Aura moods and their mood weights. Now let’s turn this data into colors. Mystic Michaela stepped in to lend her expertise on auras and their colors. With her guidance, we assigned six core colors to the six mood descriptor categories mentioned above (which include “happy”, “calm”, and “hopeful”). To provide secondary colors to the aura visual, our designer represents mood weights through varying levels of contrast. The more a mood is present in a user’s listening, the darker the color. The less a mood is present in a user’s listening, the lighter the color. In the graphic above, the user has a mood weight of 0.47; therefore, the secondary color would be found in the row labeled Encore 100. Their second mood weight was 0.29; therefore, the secondary color would be found in the row labeled Encore 180.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Core-Colors.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Creativity and embracing constraints&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that we have a user’s Audio Aura colors, all that’s left is for design and engineering to consider the last question: how can we engineer an ethereal Aura visual?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our deadline was two weeks away. In our milestones planning, we allocated a few days of engineering per story since we committed to a number of data stories and several new features. We had a few days to explore an elegant aura visual that was feasible on both iOS and Android. Part of the challenge for design is knowing what’s possible for engineering to execute in a dedicated amount of time. And part of the challenge for engineering is accurately estimating the time it will take to build a given design. We had to come up with a solution that made good use of our time and garnered a confident engineering sign-off. Situations like this are very unique to the Wrapped design/engineering experience and through such situations, I’ve learned that creativity comes from embracing constraints and making use of what we have in novel ways. Our designer made use of three elements: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;An animated gradient built for last year’s 2020 Wrapped campaign to create a “lava lamp” effect.&lt;/li&gt;&lt;li&gt;Ribbons built for 2021 Wrapped to create organic and unique shapes.&lt;/li&gt;&lt;li&gt;A blur effect to blend everything together in a dreamlike fashion.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Gradient-ribbons-blur.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since we had already built the animated gradient and ribbons, we were able to build the aura visual with high confidence, on time, and to accurately depict an ethereal aura!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;250&#34; height=&#34;501&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-250x501.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-250x501.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-700x1403.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-768x1540.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-766x1536.png 766w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura-120x241.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Audio-Aura.png 858w&#34; sizes=&#34;(max-width: 250px) 100vw, 250px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;To wrap it up&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The 2021 Wrapped Audio Aura story is a peek into the unique experience of engineering and design. We took an esoteric concept and broke it down into its basic elements to build an exciting feature for the Wrapped experience. Our ability to work together with teams across Spotify allows us to find creative solutions, enabling us to create stories that, hopefully, delight our users. If you’re interested in joining our efforts to bring Spotify listeners new experiences, check out our &lt;a href=&#34;https://www.lifeatspotify.com/jobs?c=engineering&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;open roles&lt;/a&gt;!&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/data/&#34; rel=&#34;tag&#34;&gt;Data&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/12/the-audio-aura-story-mystical-to-mathematical/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/image3.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR For 2021 Wrapped, we were challenged to visually express a user’s Audio Aura based on how they listened this year. I like to think of it like this: if your music listening data became a person and walked down the street to the neighborhood aura reader, what would that person’s aura look like?</summary>
    <author>
      <name>Published by Zela Taino, Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            A Look Behind Blend: The Personalized Playlist for You…and You&#xA;</title>
    <updated>2021-12-07T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-12-07:/a-look-behind-blend-the-personalized-playlist-for-youand-you/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;December 7, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/a-look-behind-blend-the-personalized-playlist-for-youand-you/&#34; title=&#34;A Look Behind Blend: The Personalized Playlist for You…and You&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header.png 2097w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-768x379.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-2048x1010.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-120x59.png 120w&#34; sizes=&#34;(max-width: 2097px) 100vw, 2097px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;What does it take to go from an idea for a new playlist, to shipping that playlist to Spotify users all around the world? From inception, to prototyping, to QAing, and finally shipping, releasing a new playlist at Spotify is a long process full of new learnings every time. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We recently launched a new playlist initiative, &lt;a href=&#34;https://newsroom.spotify.com/2021-08-31/how-spotifys-newest-personalized-experience-blend-creates-a-playlist-for-you-and-your-bestie/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Blend&lt;/a&gt;, where any user can invite any user to generate a playlist wherein the two users’ tastes are combined into one shared playlist. Prior to Blend, the team worked on similar products, Family Mix and Duo Mix. These products create shared playlists for users on the same Family or Duo plan. The products were well received, so we decided to expand this product line, creating a version of opt-in, automatic, shared, personalized playlists that could work for any two users. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Anytime we want to make a new playlist at Spotify, we’re aiming to do something different that we haven’t been able to accomplish before. This means we can’t always lean on our past experiences, and often encounter new challenges that require new solutions. With Blend in particular, we were taking concepts from Family Mix and Duo Mix, and expanding them to a much larger user group. A major complication we saw here was the increase of scale in the number of users we had to deal with. We dealt with unique challenges both in the content creation process, and in the invitation flow, to create a Blend.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most playlists are composed of a number of attributes and characteristics. For example, with Discover Weekly, our main attribute is discovery. For Daily Mix, our attributes are familiarity and coherency. When we are working with multiple users, however, we have the challenge of taking more attributes into account. Is the playlist:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Relevant:&lt;/strong&gt; Does the track we’re selecting for that user reflect their taste? Or is it just a song they accidentally listened to once?&lt;ul&gt;&lt;li&gt;This is especially important for track attribution — if we put a user’s profile image next to a song, we need to make sure that this specific user would agree the song listed is representative of their taste.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Coherent: &lt;/strong&gt;Does the playlist have flow, or do the tracks feel completely random and unrelated to each other?&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Equal:&lt;/strong&gt; Are both users in the Blend represented equally?&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Democratic:&lt;/strong&gt; Does music that both users like rise to the top?&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One of the core decisions we made for this product was whether it was better to “minimize the misery” or “maximize the joy”. In other words, is it better to pick everyone’s favorite tracks, even if other people in the group wouldn’t like them, or is it better to pick the tracks that everyone is likely to like, even if their favorite songs never get selected? “Minimize the misery” is valuing democratic and coherent attributes over relevance. “Maximize the joy” values relevance over democratic and coherent attributes. Our solution is more about maximizing the joy, where we try to select the songs that are most personally relevant to a user. This decision was made based on feedback from employees and our data curation team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;477&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-700x477.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-700x477.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-250x170.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-768x524.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-1536x1047.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-2048x1397.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-120x82.png 120w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s a bit simpler to create a Blend with users with similar taste since they listen to a lot of the same music. However, if we have two users with no common music listening history, it’s significantly more difficult to create a perfect Blend. We needed an approach that worked for both types of pairs, while also taking into consideration how any changes to the Blend algorithm impacts all combinations of users.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Between fetching data for both users in the Blend, and trying to come up with the ideal sequence balancing for all of our attributes, creating a Blend is a pretty heavy process. When we tried to come up with the best algorithm, we weren’t so concerned about our latency. Once we were happy with Blend quality, and started to think about scaling the service, we realized how bad our latency had gotten while iterating on the algorithm. We spent a lot of time trying to make the service as fast as possible. What we learned is that our code base had some hot spots in it: some sections of the code were run over 50 times per Blend generation, while other sections of the code were only run once. If we tried to optimize sections of the code that weren’t run many times, we didn’t make much of an impact in our latency. However, when we made improvements to our hot spots, we were able to make a huge difference. The biggest example here was swapping the order of two function calls within an if statement, taking advantage of Java’s short circuiting. This simple code change reduced our latency to 1/10 of its original time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We were able to make content quality improvements by using both qualitative and quantitative methods. While we normally rely on testing our own playlists when we make changes, we also needed to make sure that we checked several different types of Blends (for example: test a high taste overlap Blend and a low taste overlap Blend). We created some offline metrics to measure how our attributes performed. We also work closely with a Data Curation team, often referred to as the “humans in the loop”. The Data Curation team evaluates and ensures content quality for recommendation systems. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For example, when the team wanted to make a change to make the playlist more coherent, we:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Tested our own playlists — the team had implemented the change for about a month before we evaluated it. During this time, we were able to get a good feel for whether we preferred the change or not.&lt;/li&gt;&lt;li&gt;Performed a heuristic review, where our Data Curation team reviewed a number of Blends with a variety of taste overlap scores. &lt;ul&gt;&lt;li&gt;This process helps identify issues with usability and comprehensibility associated most closely with content quality and with the user experience.&lt;/li&gt;&lt;li&gt;Utilize a tool called a “Content Recommendation Scorecard”.&lt;ul&gt;&lt;li&gt;Score each track over a number of attributes such as relevance and coherence.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;From the Content Recommendation Scorecard, we were able to see that the new approach more strongly met our criteria in terms of the attributes we wanted to optimize for.&lt;/li&gt;&lt;li&gt;The review built enough confidence for the team to roll out the new approach to all users.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Creating a social playlist presented a new set of challenges in creating a new playlist algorithm. We had to try to optimize for many attributes: relevance, coherence, equality, and democratic decisions. We also had to consider both high taste overlap users and users who don’t have much taste overlap. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While building out the Blend product, we wanted a way to communicate information to the users about what similarities and differences they have in their music taste. This led to us building out Blend Data Stories, where we can show the users’ information like the artist that brings them together and their taste match score. This year, during the Wrapped Campaign, we gave users a &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/the-wait-is-over-your-spotify-2021-wrapped-is-here/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Wrapped Blend&lt;/a&gt; experience. We modified the Blend Data Stories to use data from Wrapped, to show users information like their top mutual artists and top mutual genre of the year.&lt;br/&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’re still working hard to improve Blend, and build a product that allows our users to feel closer through music, while thinking of more fun ways to grow the social experience in Spotify. If this type of work sounds interesting, our Personalization team is &lt;a href=&#34;https://www.lifeatspotify.com/jobs?q=personalization&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;hiring&lt;/a&gt;!&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/data-modeling/&#34; rel=&#34;tag&#34;&gt;data modeling&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/a-look-behind-blend-the-personalized-playlist-for-youand-you/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">What does it take to go from an idea for a new playlist, to shipping that playlist to Spotify users all around the world? From inception, to prototyping, to QAing, and finally shipping, releasing a new playlist at Spotify is a long process full of new learnings every time. We recently launched a</summary>
    <author>
      <name>Published by Jen Lamere, Senior Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            A Look Behind Blend: The Personalized Playlist for You…and You&#xA;</title>
    <updated>2021-12-07T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-12-07:/2021/12/a-look-behind-blend-the-personalized-playlist-for-youand-you/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;December 7, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/12/a-look-behind-blend-the-personalized-playlist-for-youand-you/&#34; title=&#34;A Look Behind Blend: The Personalized Playlist for You…and You&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header.png 2097w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-768x379.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-2048x1010.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-120x59.png 120w&#34; sizes=&#34;(max-width: 2097px) 100vw, 2097px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;What does it take to go from an idea for a new playlist, to shipping that playlist to Spotify users all around the world? From inception, to prototyping, to QAing, and finally shipping, releasing a new playlist at Spotify is a long process full of new learnings every time. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We recently launched a new playlist initiative, &lt;a href=&#34;https://newsroom.spotify.com/2021-08-31/how-spotifys-newest-personalized-experience-blend-creates-a-playlist-for-you-and-your-bestie/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Blend&lt;/a&gt;, where any user can invite any user to generate a playlist wherein the two users’ tastes are combined into one shared playlist. Prior to Blend, the team worked on similar products, Family Mix and Duo Mix. These products create shared playlists for users on the same Family or Duo plan. The products were well received, so we decided to expand this product line, creating a version of opt-in, automatic, shared, personalized playlists that could work for any two users. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Anytime we want to make a new playlist at Spotify, we’re aiming to do something different that we haven’t been able to accomplish before. This means we can’t always lean on our past experiences, and often encounter new challenges that require new solutions. With Blend in particular, we were taking concepts from Family Mix and Duo Mix, and expanding them to a much larger user group. A major complication we saw here was the increase of scale in the number of users we had to deal with. We dealt with unique challenges both in the content creation process, and in the invitation flow, to create a Blend.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most playlists are composed of a number of attributes and characteristics. For example, with Discover Weekly, our main attribute is discovery. For Daily Mix, our attributes are familiarity and coherency. When we are working with multiple users, however, we have the challenge of taking more attributes into account. Is the playlist:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Relevant:&lt;/strong&gt; Does the track we’re selecting for that user reflect their taste? Or is it just a song they accidentally listened to once?&lt;ul&gt;&lt;li&gt;This is especially important for track attribution — if we put a user’s profile image next to a song, we need to make sure that this specific user would agree the song listed is representative of their taste.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Coherent: &lt;/strong&gt;Does the playlist have flow, or do the tracks feel completely random and unrelated to each other?&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Equal:&lt;/strong&gt; Are both users in the Blend represented equally?&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Democratic:&lt;/strong&gt; Does music that both users like rise to the top?&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One of the core decisions we made for this product was whether it was better to “minimize the misery” or “maximize the joy”. In other words, is it better to pick everyone’s favorite tracks, even if other people in the group wouldn’t like them, or is it better to pick the tracks that everyone is likely to like, even if their favorite songs never get selected? “Minimize the misery” is valuing democratic and coherent attributes over relevance. “Maximize the joy” values relevance over democratic and coherent attributes. Our solution is more about maximizing the joy, where we try to select the songs that are most personally relevant to a user. This decision was made based on feedback from employees and our data curation team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;477&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-700x477.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-700x477.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-250x170.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-768x524.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-1536x1047.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-2048x1397.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-120x82.png 120w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s a bit simpler to create a Blend with users with similar taste since they listen to a lot of the same music. However, if we have two users with no common music listening history, it’s significantly more difficult to create a perfect Blend. We needed an approach that worked for both types of pairs, while also taking into consideration how any changes to the Blend algorithm impacts all combinations of users.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Between fetching data for both users in the Blend, and trying to come up with the ideal sequence balancing for all of our attributes, creating a Blend is a pretty heavy process. When we tried to come up with the best algorithm, we weren’t so concerned about our latency. Once we were happy with Blend quality, and started to think about scaling the service, we realized how bad our latency had gotten while iterating on the algorithm. We spent a lot of time trying to make the service as fast as possible. What we learned is that our code base had some hot spots in it: some sections of the code were run over 50 times per Blend generation, while other sections of the code were only run once. If we tried to optimize sections of the code that weren’t run many times, we didn’t make much of an impact in our latency. However, when we made improvements to our hot spots, we were able to make a huge difference. The biggest example here was swapping the order of two function calls within an if statement, taking advantage of Java’s short circuiting. This simple code change reduced our latency to 1/10 of its original time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We were able to make content quality improvements by using both qualitative and quantitative methods. While we normally rely on testing our own playlists when we make changes, we also needed to make sure that we checked several different types of Blends (for example: test a high taste overlap Blend and a low taste overlap Blend). We created some offline metrics to measure how our attributes performed. We also work closely with a Data Curation team, often referred to as the “humans in the loop”. The Data Curation team evaluates and ensures content quality for recommendation systems. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For example, when the team wanted to make a change to make the playlist more coherent, we:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Tested our own playlists — the team had implemented the change for about a month before we evaluated it. During this time, we were able to get a good feel for whether we preferred the change or not.&lt;/li&gt;&lt;li&gt;Performed a heuristic review, where our Data Curation team reviewed a number of Blends with a variety of taste overlap scores. &lt;ul&gt;&lt;li&gt;This process helps identify issues with usability and comprehensibility associated most closely with content quality and with the user experience.&lt;/li&gt;&lt;li&gt;Utilize a tool called a “Content Recommendation Scorecard”.&lt;ul&gt;&lt;li&gt;Score each track over a number of attributes such as relevance and coherence.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;From the Content Recommendation Scorecard, we were able to see that the new approach more strongly met our criteria in terms of the attributes we wanted to optimize for.&lt;/li&gt;&lt;li&gt;The review built enough confidence for the team to roll out the new approach to all users.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Creating a social playlist presented a new set of challenges in creating a new playlist algorithm. We had to try to optimize for many attributes: relevance, coherence, equality, and democratic decisions. We also had to consider both high taste overlap users and users who don’t have much taste overlap. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While building out the Blend product, we wanted a way to communicate information to the users about what similarities and differences they have in their music taste. This led to us building out Blend Data Stories, where we can show the users’ information like the artist that brings them together and their taste match score. This year, during the Wrapped Campaign, we gave users a &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/the-wait-is-over-your-spotify-2021-wrapped-is-here/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Wrapped Blend&lt;/a&gt; experience. We modified the Blend Data Stories to use data from Wrapped, to show users information like their top mutual artists and top mutual genre of the year.&lt;br/&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’re still working hard to improve Blend, and build a product that allows our users to feel closer through music, while thinking of more fun ways to grow the social experience in Spotify. If this type of work sounds interesting, our Personalization team is &lt;a href=&#34;https://www.lifeatspotify.com/jobs?q=personalization&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;hiring&lt;/a&gt;!&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/data-modeling/&#34; rel=&#34;tag&#34;&gt;data modeling&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/12/a-look-behind-blend-the-personalized-playlist-for-youand-you/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">What does it take to go from an idea for a new playlist, to shipping that playlist to Spotify users all around the world? From inception, to prototyping, to QAing, and finally shipping, releasing a new playlist at Spotify is a long process full of new learnings every time. We recently launched a</summary>
    <author>
      <name>Published by Jen Lamere, Senior Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            A Look Behind Blend: The Personalized Playlist for You…and You&#xA;</title>
    <updated>2021-12-07T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-12-07:/2021/12/07/a-look-behind-blend-the-personalized-playlist-for-youand-you/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;December 7, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/12/07/a-look-behind-blend-the-personalized-playlist-for-youand-you/&#34; title=&#34;A Look Behind Blend: The Personalized Playlist for You…and You&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header.png 2097w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-768x379.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-2048x1010.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-120x59.png 120w&#34; sizes=&#34;(max-width: 2097px) 100vw, 2097px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;What does it take to go from an idea for a new playlist, to shipping that playlist to Spotify users all around the world? From inception, to prototyping, to QAing, and finally shipping, releasing a new playlist at Spotify is a long process full of new learnings every time. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We recently launched a new playlist initiative, &lt;a href=&#34;https://newsroom.spotify.com/2021-08-31/how-spotifys-newest-personalized-experience-blend-creates-a-playlist-for-you-and-your-bestie/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Blend&lt;/a&gt;, where any user can invite any user to generate a playlist wherein the two users’ tastes are combined into one shared playlist. Prior to Blend, the team worked on similar products, Family Mix and Duo Mix. These products create shared playlists for users on the same Family or Duo plan. The products were well received, so we decided to expand this product line, creating a version of opt-in, automatic, shared, personalized playlists that could work for any two users. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Anytime we want to make a new playlist at Spotify, we’re aiming to do something different that we haven’t been able to accomplish before. This means we can’t always lean on our past experiences, and often encounter new challenges that require new solutions. With Blend in particular, we were taking concepts from Family Mix and Duo Mix, and expanding them to a much larger user group. A major complication we saw here was the increase of scale in the number of users we had to deal with. We dealt with unique challenges both in the content creation process, and in the invitation flow, to create a Blend.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most playlists are composed of a number of attributes and characteristics. For example, with Discover Weekly, our main attribute is discovery. For Daily Mix, our attributes are familiarity and coherency. When we are working with multiple users, however, we have the challenge of taking more attributes into account. Is the playlist:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Relevant:&lt;/strong&gt; Does the track we’re selecting for that user reflect their taste? Or is it just a song they accidentally listened to once?&lt;ul&gt;&lt;li&gt;This is especially important for track attribution — if we put a user’s profile image next to a song, we need to make sure that this specific user would agree the song listed is representative of their taste.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Coherent: &lt;/strong&gt;Does the playlist have flow, or do the tracks feel completely random and unrelated to each other?&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Equal:&lt;/strong&gt; Are both users in the Blend represented equally?&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Democratic:&lt;/strong&gt; Does music that both users like rise to the top?&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One of the core decisions we made for this product was whether it was better to “minimize the misery” or “maximize the joy”. In other words, is it better to pick everyone’s favorite tracks, even if other people in the group wouldn’t like them, or is it better to pick the tracks that everyone is likely to like, even if their favorite songs never get selected? “Minimize the misery” is valuing democratic and coherent attributes over relevance. “Maximize the joy” values relevance over democratic and coherent attributes. Our solution is more about maximizing the joy, where we try to select the songs that are most personally relevant to a user. This decision was made based on feedback from employees and our data curation team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;477&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-700x477.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-700x477.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-250x170.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-768x524.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-1536x1047.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-2048x1397.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-120x82.png 120w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s a bit simpler to create a Blend with users with similar taste since they listen to a lot of the same music. However, if we have two users with no common music listening history, it’s significantly more difficult to create a perfect Blend. We needed an approach that worked for both types of pairs, while also taking into consideration how any changes to the Blend algorithm impacts all combinations of users.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Between fetching data for both users in the Blend, and trying to come up with the ideal sequence balancing for all of our attributes, creating a Blend is a pretty heavy process. When we tried to come up with the best algorithm, we weren’t so concerned about our latency. Once we were happy with Blend quality, and started to think about scaling the service, we realized how bad our latency had gotten while iterating on the algorithm. We spent a lot of time trying to make the service as fast as possible. What we learned is that our code base had some hot spots in it: some sections of the code were run over 50 times per Blend generation, while other sections of the code were only run once. If we tried to optimize sections of the code that weren’t run many times, we didn’t make much of an impact in our latency. However, when we made improvements to our hot spots, we were able to make a huge difference. The biggest example here was swapping the order of two function calls within an if statement, taking advantage of Java’s short circuiting. This simple code change reduced our latency to 1/10 of its original time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We were able to make content quality improvements by using both qualitative and quantitative methods. While we normally rely on testing our own playlists when we make changes, we also needed to make sure that we checked several different types of Blends (for example: test a high taste overlap Blend and a low taste overlap Blend). We created some offline metrics to measure how our attributes performed. We also work closely with a Data Curation team, often referred to as the “humans in the loop”. The Data Curation team evaluates and ensures content quality for recommendation systems. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For example, when the team wanted to make a change to make the playlist more coherent, we:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Tested our own playlists — the team had implemented the change for about a month before we evaluated it. During this time, we were able to get a good feel for whether we preferred the change or not.&lt;/li&gt;&lt;li&gt;Performed a heuristic review, where our Data Curation team reviewed a number of Blends with a variety of taste overlap scores. &lt;ul&gt;&lt;li&gt;This process helps identify issues with usability and comprehensibility associated most closely with content quality and with the user experience.&lt;/li&gt;&lt;li&gt;Utilize a tool called a “Content Recommendation Scorecard”.&lt;ul&gt;&lt;li&gt;Score each track over a number of attributes such as relevance and coherence.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;From the Content Recommendation Scorecard, we were able to see that the new approach more strongly met our criteria in terms of the attributes we wanted to optimize for.&lt;/li&gt;&lt;li&gt;The review built enough confidence for the team to roll out the new approach to all users.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Creating a social playlist presented a new set of challenges in creating a new playlist algorithm. We had to try to optimize for many attributes: relevance, coherence, equality, and democratic decisions. We also had to consider both high taste overlap users and users who don’t have much taste overlap. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While building out the Blend product, we wanted a way to communicate information to the users about what similarities and differences they have in their music taste. This led to us building out Blend Data Stories, where we can show the users’ information like the artist that brings them together and their taste match score. This year, during the Wrapped Campaign, we gave users a &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/the-wait-is-over-your-spotify-2021-wrapped-is-here/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Wrapped Blend&lt;/a&gt; experience. We modified the Blend Data Stories to use data from Wrapped, to show users information like their top mutual artists and top mutual genre of the year.&lt;br/&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’re still working hard to improve Blend, and build a product that allows our users to feel closer through music, while thinking of more fun ways to grow the social experience in Spotify. If this type of work sounds interesting, our Personalization team is &lt;a href=&#34;https://www.lifeatspotify.com/jobs?q=personalization&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;hiring&lt;/a&gt;!&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/data-modeling/&#34; rel=&#34;tag&#34;&gt;data modeling&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/12/07/a-look-behind-blend-the-personalized-playlist-for-youand-you/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">What does it take to go from an idea for a new playlist, to shipping that playlist to Spotify users all around the world? From inception, to prototyping, to QAing, and finally shipping, releasing a new playlist at Spotify is a long process full of new learnings every time. We recently launched a</summary>
    <author>
      <name>Published by Jen Lamere, Senior Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            A Look Behind Blend: The Personalized Playlist for You…and You&#xA;</title>
    <updated>2021-12-07T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-12-07:/a-look-behind-blend-the-personalized-playlist-for-youand-you/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;December 7, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/a-look-behind-blend-the-personalized-playlist-for-youand-you/&#34; title=&#34;A Look Behind Blend: The Personalized Playlist for You…and You&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header.png 2097w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-768x379.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-2048x1010.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header-120x59.png 120w&#34; sizes=&#34;(max-width: 2097px) 100vw, 2097px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;What does it take to go from an idea for a new playlist, to shipping that playlist to Spotify users all around the world? From inception, to prototyping, to QAing, and finally shipping, releasing a new playlist at Spotify is a long process full of new learnings every time. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We recently launched a new playlist initiative, &lt;a href=&#34;https://newsroom.spotify.com/2021-08-31/how-spotifys-newest-personalized-experience-blend-creates-a-playlist-for-you-and-your-bestie/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Blend&lt;/a&gt;, where any user can invite any user to generate a playlist wherein the two users’ tastes are combined into one shared playlist. Prior to Blend, the team worked on similar products, Family Mix and Duo Mix. These products create shared playlists for users on the same Family or Duo plan. The products were well received, so we decided to expand this product line, creating a version of opt-in, automatic, shared, personalized playlists that could work for any two users. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Anytime we want to make a new playlist at Spotify, we’re aiming to do something different that we haven’t been able to accomplish before. This means we can’t always lean on our past experiences, and often encounter new challenges that require new solutions. With Blend in particular, we were taking concepts from Family Mix and Duo Mix, and expanding them to a much larger user group. A major complication we saw here was the increase of scale in the number of users we had to deal with. We dealt with unique challenges both in the content creation process, and in the invitation flow, to create a Blend.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most playlists are composed of a number of attributes and characteristics. For example, with Discover Weekly, our main attribute is discovery. For Daily Mix, our attributes are familiarity and coherency. When we are working with multiple users, however, we have the challenge of taking more attributes into account. Is the playlist:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Relevant:&lt;/strong&gt; Does the track we’re selecting for that user reflect their taste? Or is it just a song they accidentally listened to once?&lt;ul&gt;&lt;li&gt;This is especially important for track attribution — if we put a user’s profile image next to a song, we need to make sure that this specific user would agree the song listed is representative of their taste.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Coherent: &lt;/strong&gt;Does the playlist have flow, or do the tracks feel completely random and unrelated to each other?&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Equal:&lt;/strong&gt; Are both users in the Blend represented equally?&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Democratic:&lt;/strong&gt; Does music that both users like rise to the top?&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One of the core decisions we made for this product was whether it was better to “minimize the misery” or “maximize the joy”. In other words, is it better to pick everyone’s favorite tracks, even if other people in the group wouldn’t like them, or is it better to pick the tracks that everyone is likely to like, even if their favorite songs never get selected? “Minimize the misery” is valuing democratic and coherent attributes over relevance. “Maximize the joy” values relevance over democratic and coherent attributes. Our solution is more about maximizing the joy, where we try to select the songs that are most personally relevant to a user. This decision was made based on feedback from employees and our data curation team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;477&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-700x477.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-700x477.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-250x170.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-768x524.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-1536x1047.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-2048x1397.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Mix-120x82.png 120w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s a bit simpler to create a Blend with users with similar taste since they listen to a lot of the same music. However, if we have two users with no common music listening history, it’s significantly more difficult to create a perfect Blend. We needed an approach that worked for both types of pairs, while also taking into consideration how any changes to the Blend algorithm impacts all combinations of users.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Between fetching data for both users in the Blend, and trying to come up with the ideal sequence balancing for all of our attributes, creating a Blend is a pretty heavy process. When we tried to come up with the best algorithm, we weren’t so concerned about our latency. Once we were happy with Blend quality, and started to think about scaling the service, we realized how bad our latency had gotten while iterating on the algorithm. We spent a lot of time trying to make the service as fast as possible. What we learned is that our code base had some hot spots in it: some sections of the code were run over 50 times per Blend generation, while other sections of the code were only run once. If we tried to optimize sections of the code that weren’t run many times, we didn’t make much of an impact in our latency. However, when we made improvements to our hot spots, we were able to make a huge difference. The biggest example here was swapping the order of two function calls within an if statement, taking advantage of Java’s short circuiting. This simple code change reduced our latency to 1/10 of its original time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We were able to make content quality improvements by using both qualitative and quantitative methods. While we normally rely on testing our own playlists when we make changes, we also needed to make sure that we checked several different types of Blends (for example: test a high taste overlap Blend and a low taste overlap Blend). We created some offline metrics to measure how our attributes performed. We also work closely with a Data Curation team, often referred to as the “humans in the loop”. The Data Curation team evaluates and ensures content quality for recommendation systems. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For example, when the team wanted to make a change to make the playlist more coherent, we:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Tested our own playlists — the team had implemented the change for about a month before we evaluated it. During this time, we were able to get a good feel for whether we preferred the change or not.&lt;/li&gt;&lt;li&gt;Performed a heuristic review, where our Data Curation team reviewed a number of Blends with a variety of taste overlap scores. &lt;ul&gt;&lt;li&gt;This process helps identify issues with usability and comprehensibility associated most closely with content quality and with the user experience.&lt;/li&gt;&lt;li&gt;Utilize a tool called a “Content Recommendation Scorecard”.&lt;ul&gt;&lt;li&gt;Score each track over a number of attributes such as relevance and coherence.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;From the Content Recommendation Scorecard, we were able to see that the new approach more strongly met our criteria in terms of the attributes we wanted to optimize for.&lt;/li&gt;&lt;li&gt;The review built enough confidence for the team to roll out the new approach to all users.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Creating a social playlist presented a new set of challenges in creating a new playlist algorithm. We had to try to optimize for many attributes: relevance, coherence, equality, and democratic decisions. We also had to consider both high taste overlap users and users who don’t have much taste overlap. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While building out the Blend product, we wanted a way to communicate information to the users about what similarities and differences they have in their music taste. This led to us building out Blend Data Stories, where we can show the users’ information like the artist that brings them together and their taste match score. This year, during the Wrapped Campaign, we gave users a &lt;a href=&#34;https://newsroom.spotify.com/2021-12-01/the-wait-is-over-your-spotify-2021-wrapped-is-here/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Wrapped Blend&lt;/a&gt; experience. We modified the Blend Data Stories to use data from Wrapped, to show users information like their top mutual artists and top mutual genre of the year.&lt;br/&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’re still working hard to improve Blend, and build a product that allows our users to feel closer through music, while thinking of more fun ways to grow the social experience in Spotify. If this type of work sounds interesting, our Personalization team is &lt;a href=&#34;https://www.lifeatspotify.com/jobs?q=personalization&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;hiring&lt;/a&gt;!&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/data-modeling/&#34; rel=&#34;tag&#34;&gt;data modeling&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/a-look-behind-blend-the-personalized-playlist-for-youand-you/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Blend_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">What does it take to go from an idea for a new playlist, to shipping that playlist to Spotify users all around the world? From inception, to prototyping, to QAing, and finally shipping, releasing a new playlist at Spotify is a long process full of new learnings every time. We recently launched a</summary>
    <author>
      <name>Published by Jen Lamere, Senior Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            How Spotify Uses ML to Create the Future of Personalization&#xA;</title>
    <updated>2021-12-02T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-12-02:/how-spotify-uses-ml-to-create-the-future-of-personalization/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-4904&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;December 2, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/how-spotify-uses-ml-to-create-the-future-of-personalization/&#34; title=&#34;How Spotify Uses ML to Create the Future of Personalization&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header.png 1920w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-120x68.png 120w&#34; sizes=&#34;(max-width: 1920px) 100vw, 1920px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;Machine learning is what drives personalization on Spotify. We may have a single platform with 381 million different users, but it may actually be more accurate to say there are 381 million individual versions of Spotify, each one filled with different Home pages, playlists, and recommendations. But with a library of over 70 million tracks to thumb through, how do our ML models actually go about making these decisions?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Well, Spotify’s VP of Personalization Oskar Stål recently gave a talk at TransformX, a summit for leaders in ML and AI, to discuss just that. Read on to get a glimpse of how ML and reinforcement learning help inform our music and podcast recommendations, and don’t forget to check out Oskar’s presentation &lt;a href=&#34;https://www.youtube.com/watch?v=n16LOyba-SE&amp;amp;list=PLf1KFlSkDLIBNfiMCsXfj_pegmiyRwrSc&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt; (or below!) to hear even more about the future of ML at Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;How do we use ML? &lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It all starts with data. At the most fundamental level, all sorts of user info — playlists, listening history, interactions with Spotify’s UI, etc. — are fed into our ML models, while keeping trust and responsibility top of mind. Every day, nearly half a trillion events are processed, and the more info our models gather, the smarter they become about making associations between different artists, songs, podcasts, and playlists.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But our ML models even go beyond this, incorporating other factors in their decision-making processes. What time of day is it? Is this playlist for working out or chilling out? Are you on mobile or desktop? By incorporating several of these ML models throughout Spotify’s infrastructure, we’re able to offer increasingly intelligent, specialized recommendations that can, as Oskar puts it, “serve even the narrowest of tastes”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We aren’t just looking for our users’ instant gratification, though. We want to provide listeners with a lifetime of great audio experiences and be with them on every step of that journey. And that brings us to what we’re working on now.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;The future is reinforcement learning&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Reinforcement learning, or RL, is a type of ML model that responds to its current environment in an effort to maximize the ultimate, long-term reward, whatever that may be. In our case, that reward is our users’ long-term satisfaction with Spotify. RL isn’t about short-term solutions. It’s always playing the long game.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In a general sense, our RL model tries to predict how satisfied our users are with their current experience, and attempts to nudge them toward consuming more fulfilling content in their audio diet to make them happier with the service. In other words, rather than handing users the “empty calories” of a content diet that will only satisfy them in the moment, RL aims to push them to a more sustainable, diverse, and fulfilling content diet that will last a lifetime. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This could mean playing a new dance track we think might fit a user’s current mood, or it could mean suggesting a calming, ambient piece to help them study. Predicting what a user will want 10 minutes from now, a day from now, a week from now, means creating a ton of simulations and running the RL model against those simulations to make it smarter, like a computer playing against itself in chess to get better at the game.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With ML and RL, we’re trying to create a more holistic audio experience, focused on recommendations that ensure long-term satisfaction and enjoyment. Our approach to personalization doesn’t just benefit listeners: better and more satisfying recommendations help out artists, exposing their work to a larger audience more likely to enjoy it. After all, there’s a reason there are 16 billion artist discoveries every month on our platform. And the best is yet to come.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;p&gt;&#xA;&lt;iframe loading=&#34;lazy&#34; title=&#34;VP of Personalization Oskar Stål Talks the Future of ML at TransformX&#34; width=&#34;900&#34; height=&#34;506&#34; src=&#34;https://www.youtube.com/embed/n16LOyba-SE?list=PLf1KFlSkDLIBNfiMCsXfj_pegmiyRwrSc&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen=&#34;&#34;&gt;&lt;/iframe&gt;&#xA;&lt;/p&gt;&lt;/figure&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/how-spotify-uses-ml-to-create-the-future-of-personalization/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Machine learning is what drives personalization on Spotify. We may have a single platform with 381 million different users, but it may actually be more accurate to say there are 381 million individual versions of Spotify, each one filled with different Home pages, playlists, and recommendations. But</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            How Spotify Uses ML to Create the Future of Personalization&#xA;</title>
    <updated>2021-12-02T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-12-02:/how-spotify-uses-ml-to-create-the-future-of-personalization/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-4904&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;December 2, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/how-spotify-uses-ml-to-create-the-future-of-personalization/&#34; title=&#34;How Spotify Uses ML to Create the Future of Personalization&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header.png 1920w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-120x68.png 120w&#34; sizes=&#34;(max-width: 1920px) 100vw, 1920px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;Machine learning is what drives personalization on Spotify. We may have a single platform with 381 million different users, but it may actually be more accurate to say there are 381 million individual versions of Spotify, each one filled with different Home pages, playlists, and recommendations. But with a library of over 70 million tracks to thumb through, how do our ML models actually go about making these decisions?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Well, Spotify’s VP of Personalization Oskar Stål recently gave a talk at TransformX, a summit for leaders in ML and AI, to discuss just that. Read on to get a glimpse of how ML and reinforcement learning help inform our music and podcast recommendations, and don’t forget to check out Oskar’s presentation &lt;a href=&#34;https://www.youtube.com/watch?v=n16LOyba-SE&amp;amp;list=PLf1KFlSkDLIBNfiMCsXfj_pegmiyRwrSc&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt; (or below!) to hear even more about the future of ML at Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;How do we use ML? &lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It all starts with data. At the most fundamental level, all sorts of user info — playlists, listening history, interactions with Spotify’s UI, etc. — are fed into our ML models, while keeping trust and responsibility top of mind. Every day, nearly half a trillion events are processed, and the more info our models gather, the smarter they become about making associations between different artists, songs, podcasts, and playlists.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But our ML models even go beyond this, incorporating other factors in their decision-making processes. What time of day is it? Is this playlist for working out or chilling out? Are you on mobile or desktop? By incorporating several of these ML models throughout Spotify’s infrastructure, we’re able to offer increasingly intelligent, specialized recommendations that can, as Oskar puts it, “serve even the narrowest of tastes”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We aren’t just looking for our users’ instant gratification, though. We want to provide listeners with a lifetime of great audio experiences and be with them on every step of that journey. And that brings us to what we’re working on now.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;The future is reinforcement learning&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Reinforcement learning, or RL, is a type of ML model that responds to its current environment in an effort to maximize the ultimate, long-term reward, whatever that may be. In our case, that reward is our users’ long-term satisfaction with Spotify. RL isn’t about short-term solutions. It’s always playing the long game.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In a general sense, our RL model tries to predict how satisfied our users are with their current experience, and attempts to nudge them toward consuming more fulfilling content in their audio diet to make them happier with the service. In other words, rather than handing users the “empty calories” of a content diet that will only satisfy them in the moment, RL aims to push them to a more sustainable, diverse, and fulfilling content diet that will last a lifetime. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This could mean playing a new dance track we think might fit a user’s current mood, or it could mean suggesting a calming, ambient piece to help them study. Predicting what a user will want 10 minutes from now, a day from now, a week from now, means creating a ton of simulations and running the RL model against those simulations to make it smarter, like a computer playing against itself in chess to get better at the game.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With ML and RL, we’re trying to create a more holistic audio experience, focused on recommendations that ensure long-term satisfaction and enjoyment. Our approach to personalization doesn’t just benefit listeners: better and more satisfying recommendations help out artists, exposing their work to a larger audience more likely to enjoy it. After all, there’s a reason there are 16 billion artist discoveries every month on our platform. And the best is yet to come.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;p&gt;&#xA;&lt;iframe loading=&#34;lazy&#34; title=&#34;VP of Personalization Oskar Stål Talks the Future of ML at TransformX&#34; width=&#34;900&#34; height=&#34;506&#34; src=&#34;https://www.youtube.com/embed/n16LOyba-SE?list=PLf1KFlSkDLIBNfiMCsXfj_pegmiyRwrSc&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen=&#34;&#34;&gt;&lt;/iframe&gt;&#xA;&lt;/p&gt;&lt;/figure&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/how-spotify-uses-ml-to-create-the-future-of-personalization/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Machine learning is what drives personalization on Spotify. We may have a single platform with 381 million different users, but it may actually be more accurate to say there are 381 million individual versions of Spotify, each one filled with different Home pages, playlists, and recommendations. But</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            How Spotify Uses ML to Create the Future of Personalization&#xA;</title>
    <updated>2021-12-02T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-12-02:/2021/12/how-spotify-uses-ml-to-create-the-future-of-personalization/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-4904&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;December 2, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/12/how-spotify-uses-ml-to-create-the-future-of-personalization/&#34; title=&#34;How Spotify Uses ML to Create the Future of Personalization&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header.png 1920w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-120x68.png 120w&#34; sizes=&#34;(max-width: 1920px) 100vw, 1920px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;Machine learning is what drives personalization on Spotify. We may have a single platform with 381 million different users, but it may actually be more accurate to say there are 381 million individual versions of Spotify, each one filled with different Home pages, playlists, and recommendations. But with a library of over 70 million tracks to thumb through, how do our ML models actually go about making these decisions?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Well, Spotify’s VP of Personalization Oskar Stål recently gave a talk at TransformX, a summit for leaders in ML and AI, to discuss just that. Read on to get a glimpse of how ML and reinforcement learning help inform our music and podcast recommendations, and don’t forget to check out Oskar’s presentation &lt;a href=&#34;https://www.youtube.com/watch?v=n16LOyba-SE&amp;amp;list=PLf1KFlSkDLIBNfiMCsXfj_pegmiyRwrSc&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt; (or below!) to hear even more about the future of ML at Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;How do we use ML? &lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It all starts with data. At the most fundamental level, all sorts of user info — playlists, listening history, interactions with Spotify’s UI, etc. — are fed into our ML models, while keeping trust and responsibility top of mind. Every day, nearly half a trillion events are processed, and the more info our models gather, the smarter they become about making associations between different artists, songs, podcasts, and playlists.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But our ML models even go beyond this, incorporating other factors in their decision-making processes. What time of day is it? Is this playlist for working out or chilling out? Are you on mobile or desktop? By incorporating several of these ML models throughout Spotify’s infrastructure, we’re able to offer increasingly intelligent, specialized recommendations that can, as Oskar puts it, “serve even the narrowest of tastes”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We aren’t just looking for our users’ instant gratification, though. We want to provide listeners with a lifetime of great audio experiences and be with them on every step of that journey. And that brings us to what we’re working on now.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;The future is reinforcement learning&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Reinforcement learning, or RL, is a type of ML model that responds to its current environment in an effort to maximize the ultimate, long-term reward, whatever that may be. In our case, that reward is our users’ long-term satisfaction with Spotify. RL isn’t about short-term solutions. It’s always playing the long game.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In a general sense, our RL model tries to predict how satisfied our users are with their current experience, and attempts to nudge them toward consuming more fulfilling content in their audio diet to make them happier with the service. In other words, rather than handing users the “empty calories” of a content diet that will only satisfy them in the moment, RL aims to push them to a more sustainable, diverse, and fulfilling content diet that will last a lifetime. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This could mean playing a new dance track we think might fit a user’s current mood, or it could mean suggesting a calming, ambient piece to help them study. Predicting what a user will want 10 minutes from now, a day from now, a week from now, means creating a ton of simulations and running the RL model against those simulations to make it smarter, like a computer playing against itself in chess to get better at the game.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With ML and RL, we’re trying to create a more holistic audio experience, focused on recommendations that ensure long-term satisfaction and enjoyment. Our approach to personalization doesn’t just benefit listeners: better and more satisfying recommendations help out artists, exposing their work to a larger audience more likely to enjoy it. After all, there’s a reason there are 16 billion artist discoveries every month on our platform. And the best is yet to come.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;p&gt;&#xA;&lt;iframe loading=&#34;lazy&#34; title=&#34;VP of Personalization Oskar Stål Talks the Future of ML at TransformX&#34; width=&#34;900&#34; height=&#34;506&#34; src=&#34;https://www.youtube.com/embed/n16LOyba-SE?list=PLf1KFlSkDLIBNfiMCsXfj_pegmiyRwrSc&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen=&#34;&#34;&gt;&lt;/iframe&gt;&#xA;&lt;/p&gt;&lt;/figure&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/12/how-spotify-uses-ml-to-create-the-future-of-personalization/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Machine learning is what drives personalization on Spotify. We may have a single platform with 381 million different users, but it may actually be more accurate to say there are 381 million individual versions of Spotify, each one filled with different Home pages, playlists, and recommendations. But</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            How Spotify Uses ML to Create the Future of Personalization&#xA;</title>
    <updated>2021-12-02T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-12-02:/2021/12/02/how-spotify-uses-ml-to-create-the-future-of-personalization/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-4904&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;December 2, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/12/02/how-spotify-uses-ml-to-create-the-future-of-personalization/&#34; title=&#34;How Spotify Uses ML to Create the Future of Personalization&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header.png 1920w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-768x432.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-1536x864.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header-120x68.png 120w&#34; sizes=&#34;(max-width: 1920px) 100vw, 1920px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;Machine learning is what drives personalization on Spotify. We may have a single platform with 381 million different users, but it may actually be more accurate to say there are 381 million individual versions of Spotify, each one filled with different Home pages, playlists, and recommendations. But with a library of over 70 million tracks to thumb through, how do our ML models actually go about making these decisions?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Well, Spotify’s VP of Personalization Oskar Stål recently gave a talk at TransformX, a summit for leaders in ML and AI, to discuss just that. Read on to get a glimpse of how ML and reinforcement learning help inform our music and podcast recommendations, and don’t forget to check out Oskar’s presentation &lt;a href=&#34;https://www.youtube.com/watch?v=n16LOyba-SE&amp;amp;list=PLf1KFlSkDLIBNfiMCsXfj_pegmiyRwrSc&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt; (or below!) to hear even more about the future of ML at Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;How do we use ML? &lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It all starts with data. At the most fundamental level, all sorts of user info — playlists, listening history, interactions with Spotify’s UI, etc. — are fed into our ML models, while keeping trust and responsibility top of mind. Every day, nearly half a trillion events are processed, and the more info our models gather, the smarter they become about making associations between different artists, songs, podcasts, and playlists.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But our ML models even go beyond this, incorporating other factors in their decision-making processes. What time of day is it? Is this playlist for working out or chilling out? Are you on mobile or desktop? By incorporating several of these ML models throughout Spotify’s infrastructure, we’re able to offer increasingly intelligent, specialized recommendations that can, as Oskar puts it, “serve even the narrowest of tastes”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We aren’t just looking for our users’ instant gratification, though. We want to provide listeners with a lifetime of great audio experiences and be with them on every step of that journey. And that brings us to what we’re working on now.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;The future is reinforcement learning&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Reinforcement learning, or RL, is a type of ML model that responds to its current environment in an effort to maximize the ultimate, long-term reward, whatever that may be. In our case, that reward is our users’ long-term satisfaction with Spotify. RL isn’t about short-term solutions. It’s always playing the long game.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In a general sense, our RL model tries to predict how satisfied our users are with their current experience, and attempts to nudge them toward consuming more fulfilling content in their audio diet to make them happier with the service. In other words, rather than handing users the “empty calories” of a content diet that will only satisfy them in the moment, RL aims to push them to a more sustainable, diverse, and fulfilling content diet that will last a lifetime. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This could mean playing a new dance track we think might fit a user’s current mood, or it could mean suggesting a calming, ambient piece to help them study. Predicting what a user will want 10 minutes from now, a day from now, a week from now, means creating a ton of simulations and running the RL model against those simulations to make it smarter, like a computer playing against itself in chess to get better at the game.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With ML and RL, we’re trying to create a more holistic audio experience, focused on recommendations that ensure long-term satisfaction and enjoyment. Our approach to personalization doesn’t just benefit listeners: better and more satisfying recommendations help out artists, exposing their work to a larger audience more likely to enjoy it. After all, there’s a reason there are 16 billion artist discoveries every month on our platform. And the best is yet to come.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;p&gt;&#xA;&lt;iframe loading=&#34;lazy&#34; title=&#34;VP of Personalization Oskar Stål Talks the Future of ML at TransformX&#34; width=&#34;900&#34; height=&#34;506&#34; src=&#34;https://www.youtube.com/embed/n16LOyba-SE?list=PLf1KFlSkDLIBNfiMCsXfj_pegmiyRwrSc&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen=&#34;&#34;&gt;&lt;/iframe&gt;&#xA;&lt;/p&gt;&lt;/figure&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/12/02/how-spotify-uses-ml-to-create-the-future-of-personalization/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/12/Oskar-at-TransformX_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Machine learning is what drives personalization on Spotify. We may have a single platform with 381 million different users, but it may actually be more accurate to say there are 381 million individual versions of Spotify, each one filled with different Home pages, playlists, and recommendations. But</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part II)&#xA;</title>
    <updated>2021-11-18T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-11-18:/2021/11/18/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-ii/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;November 18, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/11/18/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-ii/&#34; title=&#34;The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part II)&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A.png 2098w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-768x379.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-2048x1009.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-120x59.png 120w&#34; sizes=&#34;(max-width: 2098px) 100vw, 2098px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;In &lt;a href=&#34;https://engineering.atspotify.com/2021/11/15/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part I&lt;/a&gt; of this two-part series, we talked about the challenges we faced with the models we use to recommend content on Home, including:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;The Podcast Model:&lt;/strong&gt; Predicts podcasts a listener is likely to listen to in the &lt;em&gt;Shows you might like&lt;/em&gt; shelf. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Shortcuts Model: &lt;/strong&gt;Predicts the listener’s next familiar listen in the Shortcuts feature. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Playlists Model: &lt;/strong&gt;Predicts the playlists a new listener is likely to listen to in the &lt;em&gt;Try something else&lt;/em&gt; shelf.  &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this part of the series, we’ll highlight how and why we evaluate our models with different tools, and the hurdles to maintaining these models in production. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Trust but verify your recommendations… with dashboards&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So let’s talk about what we do with that data — specifically, how we run experiments, and maybe more importantly, how we evaluate our models’ performance.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Making experimentation simpler&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;How it started: experimenting on a siloed platform&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Not that long ago, after transforming our training data, we would run experiments on a siloed platform specifically geared towards model experimentation, and that was only really used within our team — we did this for both the initial Podcast Model as well as for the Shortcuts Model. This platform could easily launch hundreds of experiments by using a configuration file to specify hyperparameters (it also supported a grid search on specified hyperparameters). And since everything that was submitted to run an experiment was a script, it supported custom evaluation metrics — something that has always been important in our team. While it provided these necessary features, it wasn’t scalable, wasn’t maintained, and had an incomplete UI. Sometimes the compute instances would lose connection with the API (via a periodic ping) and would end up being ghost workers — still running, but not connected to anything.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;How it’s going: integration with Spotify ML ecosystem&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2019/12/13/the-winding-road-to-better-machine-learning-infrastructure-through-tensorflow-extended-and-kubeflow/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s managed Kubeflow clusters&lt;/a&gt; provide a more scalable approach, modular components, and are compatible with other parts of the Spotify ML infrastructure, so it was an obvious choice to move our experimentation to this platform. Training our models using Kubeflow pipelines is easy and efficient, but running the evaluation we needed and tracking those results were our biggest pain points for two reasons: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;As Spotify’s SDK for Kubeflow uses Tensorflow Model Analysis (TFMA), comparing the performance of a non-ML heuristic algorithm to that of a trained model is challenging to set up and requires extra infrastructure. &lt;/li&gt;&lt;li&gt;We often have custom evaluation metrics that are specific to the model’s task, but they are infinitely more difficult to implement in TFMA than in vanilla Python.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Evaluating models against simpler (non-ML) solutions&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As I alluded to in an earlier paragraph, we don’t typically start solutions to a problem with an ML solution. We first identify a heuristic, or rule-based, solution, and the most appropriate way to evaluate it.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;The first step — having a baseline for comparison&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are often tasked with creating better recommendations for content X, but what are “better recommendations,” and what are they better than? Having a baseline helps answer these questions, giving us something to compare our models against. And a good baseline — usually a heuristic/rule-based solution — is a quick, efficient, but maybe not the most optimal, solution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Take the Shortcuts Model as an example. We created an initial heuristic that recommended, simply, the most frequently played items from a listener’s short-term listening history. We improved the heuristic over many iterations, then compared it to the performance of the models we trained. Being able to compare these heuristics to the models gave us confidence to say that having a model was an improvement over the heuristics and was worth the extra effort of maintaining, deploying, and monitoring these models.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Comparing model performance to baseline performance is difficult&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After establishing our baseline and training our model(s), the difficulty lies in how we compare them evenly. In a perfect world we would run infinite A/B tests with hundreds of test cells to compare the performance of all our solutions in the real world, on real listeners. Since it’s not a perfect world, we need reliable offline metrics that act as a proxy for the online metrics we can’t get in those A/B tests.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When evaluating our recommendations models, we typically use normalized discounted cumulative gain (NDCG@k) as our metric, which can be implemented using Spotify’s Python SDK for Kubeflow pipelines. The question then becomes: how do we do the same for our heuristic? As we’ve mentioned before, transformation logic consistency is paramount, and so is evaluation logic — ideally, we’d have the same evaluation logic and the same evaluation test set of data. Unfortunately, our heuristics are generally written in a Java service and are tested with unit tests (not for performance).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For fairly simple heuristics, we found a way to “train a model” so that its output is the heuristic rule’s output. This allowed us to use the same evaluation and evaluation test set as the models we were comparing against. We took this same approach when coming up with a solution to recommendations in the &lt;em&gt;Try something else&lt;/em&gt; shelf for new users on Home. We computed a popularity heuristic based on a listener’s demographics in Tensorflow Transform (TFT) and used the model as a lookup utility (with a fake loss).  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We can’t always fit our problem into such a simple heuristic, as was the case for Shortcuts. The logic used in most of the Shortcuts heuristics was too complex to write in Tensorflow, so we implemented a completely separate offline evaluation pipeline that would gather recommendations made by models and heuristics, and apply custom evaluation functions for comparison.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Adding freedom and flexibility to our evaluation tools&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As mentioned earlier, there’s a second pain point we run into often: using custom evaluation metrics in TFMA.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;TFMA is sometimes too rigid&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify’s SDK for Kubeflow only supports evaluations using TFMA, which provides fairly basic metrics out of the box — think: precision, recall, accuracy. The most common metric we typically use is NDCG@k — TFMA provides NDCG, but not NDCG@k. Implementing metrics in TFMA is notoriously difficult; it takes ~120 lines of code to implement NDCG@k in TFMA, but only a single line of code using scikit-learn in Python.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most recently, we were experimenting with a model that predicts the next playlist that a new user will listen to, and as we have very little information about new users, we wanted to ensure that the model was not just predicting the most popular content. To do so, we were going to evaluate the model with a diversity metric that measured the difference between specific characteristics of items in each playlist. This was nearly impossible to implement in TFMA, so our team contributed to the Python SDK for Kubeflow to support any custom Python evaluation. We have been using this and running our experiments via Kubeflow pipelines since October 2020. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Compare and track experiment results&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the pre-Kubeflow world, our experimentation platform allowed for a way to track and compare models — now, we are using Spotify’s internal UI for machine learning, as it easily integrates with our Kubeflow runs. We can view and compare the evaluation scores of our experiments — both NDCG and custom metrics — in the UI. We’ve been using this for a number of our models, and it allows us to track our model deployments as well.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Looking at more than just the numbers for evaluating recommendations&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I’ve mostly mentioned what metrics we use and why they are important, but there is another incredibly useful way we evaluate our models — sometimes more useful than what a metric can reveal.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;We build custom dashboards to manually evaluate the recs&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Based on past issues, we know that evaluation metrics don’t show the whole picture of how well a model is recommending content. Sometimes, the best way to evaluate a model is by seeing what content it recommends given a specific set of features about a listener. And for this reason, our team built a dashboard that does exactly that. It loads models simply by supplying the storage location of the model, and supports comparison of multiple models given a set of features. We often test and evaluate the recommendations that a new model will provide before deploying it to production by making predictions with different sets of feature values; this gives us an intuition behind what content will be recommended to different users that have these feature values. This has helped us find glaring issues; for example, when developing and testing a new model, we found that it would recommend the same popular playlist to listeners in all European countries. Having this knowledge allowed us to fix and improve the model before deploying it to production.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most recently, we have been working on a new model to recommend albums a listener might like based on their locality and what they like to listen to. We have been running experiments comparing evaluation metric values, but we have also been looking at the recommendations on our dashboard. This dashboard gives you the ability to try different features and compare the recommendations across different models — all before the models are used to recommend content to our listeners. At the beginning stages of experimentation and modeling for this project, we noticed that the same album was recommended as the first item no matter what input features (such as user’s country, followed artists, etc.) were used for testing, meaning this album would have been recommended to everyone as the first recommendation. Without this dashboard as a tool, it would have been more challenging to identify this issue and remediate it before the model went live.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While our offline metrics might indicate poor performance, they don’t tell us anything about what the reason might be, whereas this dashboard can show the quality of our recommendations and is extremely useful in finding issues like this.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Through the use of task-specific custom evaluations and dashboards to show evaluation metrics and recommendations per feature set, we have been able to gain deep insight into how our models are behaving, and make our models a little less of a black box. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The struggles of automated model retraining and deployment&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s dive into our last topic, which is all about maintaining models in production: retraining and automatic deployment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;But do we actually need to retrain our models?&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It would be really nice if we could train a model once, deploy it, and then not have to do anything except monitor its online performance. Sadly, we’ve never seen this in reality.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Sometimes the model’s task requires frequent retraining&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since we first deployed the Podcast Model in Home, we have always had retraining set up for it — and that’s because it only recommends podcast shows that it has seen in training data. So if we didn’t retrain it, it wouldn’t recommend any newly published shows.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;The rest of the time, it just becomes a tech debt monster&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But in some cases, retraining isn’t necessarily required to capture the full set of possible candidates. For the Shortcuts Model, we didn’t have retraining set up because it only recommends content that the listener has previously listened to (which is always in the serving features). But while retraining wasn’t needed for the Shortcuts Model to operate, the lack of it became one of the biggest sources of ML tech debt. We did not implement retraining for Shortcuts because it wasn’t needed for launching the feature, but have seen that it would have saved us time and effort in the long run had we invested some time in the short term. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It wasn’t until many months after the launch of the model that we saw issues with the quality of recommendations in Shortcuts due to no retraining — some of the features for this model describe the type of content that a listener has listened to, like whether it’s a personalized playlist or an album, etc., and there was a recent addition of a new type of content that was introduced after the model was last trained. As a result, the model didn’t recommend this piece of content in Shortcuts. While this starts to look like the same scenario as the Podcast Model described above, we also saw issues with migrating to different tools and platforms because the model was trained using older versions of libraries.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Implement for the short term while waiting for the long-term solution&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once upon a time, we only had that singular Podcast Model, which was used to generate batch predictions, not real-time predictions. We had a Scio pipeline that used &lt;a href=&#34;https://spotify.github.io/zoltar/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Zoltar&lt;/a&gt; to predict podcast recommendations for all listeners, and we stored these predictions in our Bigtable instance that holds all of our content recommendations. This was a great start, but fairly inflexible when it came to when and how often we could make predictions for a given listener — and this is important because the listeners’ features could change if they listen to new content or follow new artists, which could provide better information to the model.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Building a recommender service for the short term&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Consequently, we built a new service to serve this model and enable online predictions. We could get fresh recommendations for a listener almost instantly, and we could get these recommendations at useful times, such as when a listener follows a new artist. While this was a great improvement to move from offline predictions to online predictions, and an important step in making a better product, we knew we were only going to be in this state for the short term. Spotify’s online serving platform was on the horizon, but not yet ready; the benefits to building a short-term less-than-optimal solution outweighed the benefits of waiting to serve online models until Spotify’s serving solution was production ready.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With that said, let’s talk about some challenges we faced in building this recommender service, such as how to refresh the local version of a deployed model. Our solution was to poll our internal storage directory every 10 minutes to check if there was a new revision of the model; if so, the service would pull the model down from where it was stored and start using that model to make predictions. Nevermind that we only retrained weekly or that there would be some state at which some machines would have the new revision of a model and others would have the older revision (although this was not something we worried about in our specific use case).  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;The pain of manually deploying models&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This was really a solution to serving models online, and less of a solution to a better process of serving models. Each time we wanted to deploy a model we had to: 1) copy the model to a specific storage location, 2) manually generate a pointer in our internal storage directory for that location, and 3) add this pointer to our recommender service along with the logic to fetch and transform features for the model. If we were to retrain the model, we would have to repeat each of those steps.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Obviously, this was a cumbersome process, but because we had this short-term solution, we were able to deploy four models to production and tested many others in A/B tests.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;CI/CD — but make it for model training and deployment&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While this recommender service lived a long life of about 10 months, the next obvious step was to migrate to Spotify’s model serving platform, which enabled us to automate retraining and deployment of retrained models.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Automating feature transformations without Tensorflow Transform&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The first step in automating retraining is automating train dataset and test dataset curation, fetching the correct features and performing the necessary feature transformations. While feature transformations are generally handled automatically via TFT in a Kubeflow pipeline, we don’t perform our feature transformations in TFT (and therefore not in our experiment pipeline) because many the transformations we perform on the data are fairly complex and would be unnecessarily difficult to do in Tensorflow.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But because the serving platform provides feature logging, we enabled logging of &lt;em&gt;already transformed&lt;/em&gt; features, to which we then apply the correct labels, and separate into train and test sets. These actions are all performed in scheduled pipelines that run weekly and produce weekly datasets for our models to use.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Migrating from our short-term solution to a long-term solution&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In order to enable feature logging, we had to migrate to the new online model serving platform from our recommender service using Zoltar. It was a matter of dark loading all prediction traffic to the new deployment and then running a simple rollout to start directing traffic to our new deployment instead of using Zoltar to make predictions in our own service. This was an easy migration and provided the benefits that the online serving platform offers — feature logging, faster predictions / lower latencies, less code managed by our team — and it also supports pushing a new model version (from a Kubeflow pipeline), as opposed to constantly polling for a new model version. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Continuous retraining and automatic deployment&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that our models are all deployed via the Spotify serving platform, it enables us to employ CI/CD. We can schedule our models to be retrained via a Kubeflow pipeline, and as part of the Kubeflow pipeline we can ensure that a “bad” model is not accidentally automatically deployed by specifying that it should: 1) check that the evaluation score is greater than our configured threshold, and 2) automatically push it to our serving infrastructure if it is greater than the threshold. This automates a lot of the processes that we had to perform manually not long ago.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Enabling CI/CD for retraining and model deployment is hard, but it’s becoming easier with the new tools available and makes the quality and reliability of our models better. And at first glance, you might not think you need retraining for a model because of the task it performs, but without it, your model could make predictions in unpredictable ways and increase your tech debt.   &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our ML stack has come a long way in recent years, but it’s not perfect by any means. There are still a number of challenges we are tackling — data versioning, model versioning, moving feature transformations to Tensorflow Transform — and better ways to compare offline metrics across both ML and non-ML solutions. But it has decreased the time it takes for us to iterate, experiment, and deploy quality models.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have adopted and/or built the components we need to successfully and efficiently manage our data, experiment with different models, and support continuous integration and development throughout the deployment and retraining processes. Our ML stack has enabled us to launch numerous models that serve millions of listeners on Home every day.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you are interested in joining us and helping improve how we recommend content on Home, we are &lt;a href=&#34;https://www.lifeatspotify.com/jobs&#34;&gt;hiring&lt;/a&gt;!&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/11/18/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-ii/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">In Part I of this two-part series, we talked about the challenges we faced with the models we use to recommend content on Home, including: The Podcast Model: Predicts podcasts a listener is likely to listen to in the Shows you might like shelf. The Shortcuts Model: Predicts the listener’s next fa</summary>
    <author>
      <name>Published by Annie Edmundson, Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part II)&#xA;</title>
    <updated>2021-11-18T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-11-18:/2021/11/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-ii/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;November 18, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/11/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-ii/&#34; title=&#34;The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part II)&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A.png 2098w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-768x379.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-2048x1009.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-120x59.png 120w&#34; sizes=&#34;(max-width: 2098px) 100vw, 2098px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;In &lt;a href=&#34;https://engineering.atspotify.com/2021/11/15/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part I&lt;/a&gt; of this two-part series, we talked about the challenges we faced with the models we use to recommend content on Home, including:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;The Podcast Model:&lt;/strong&gt; Predicts podcasts a listener is likely to listen to in the &lt;em&gt;Shows you might like&lt;/em&gt; shelf. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Shortcuts Model: &lt;/strong&gt;Predicts the listener’s next familiar listen in the Shortcuts feature. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Playlists Model: &lt;/strong&gt;Predicts the playlists a new listener is likely to listen to in the &lt;em&gt;Try something else&lt;/em&gt; shelf.  &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this part of the series, we’ll highlight how and why we evaluate our models with different tools, and the hurdles to maintaining these models in production. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Trust but verify your recommendations… with dashboards&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So let’s talk about what we do with that data — specifically, how we run experiments, and maybe more importantly, how we evaluate our models’ performance.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Making experimentation simpler&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;How it started: experimenting on a siloed platform&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Not that long ago, after transforming our training data, we would run experiments on a siloed platform specifically geared towards model experimentation, and that was only really used within our team — we did this for both the initial Podcast Model as well as for the Shortcuts Model. This platform could easily launch hundreds of experiments by using a configuration file to specify hyperparameters (it also supported a grid search on specified hyperparameters). And since everything that was submitted to run an experiment was a script, it supported custom evaluation metrics — something that has always been important in our team. While it provided these necessary features, it wasn’t scalable, wasn’t maintained, and had an incomplete UI. Sometimes the compute instances would lose connection with the API (via a periodic ping) and would end up being ghost workers — still running, but not connected to anything.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;How it’s going: integration with Spotify ML ecosystem&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2019/12/13/the-winding-road-to-better-machine-learning-infrastructure-through-tensorflow-extended-and-kubeflow/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s managed Kubeflow clusters&lt;/a&gt; provide a more scalable approach, modular components, and are compatible with other parts of the Spotify ML infrastructure, so it was an obvious choice to move our experimentation to this platform. Training our models using Kubeflow pipelines is easy and efficient, but running the evaluation we needed and tracking those results were our biggest pain points for two reasons: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;As Spotify’s SDK for Kubeflow uses Tensorflow Model Analysis (TFMA), comparing the performance of a non-ML heuristic algorithm to that of a trained model is challenging to set up and requires extra infrastructure. &lt;/li&gt;&lt;li&gt;We often have custom evaluation metrics that are specific to the model’s task, but they are infinitely more difficult to implement in TFMA than in vanilla Python.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Evaluating models against simpler (non-ML) solutions&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As I alluded to in an earlier paragraph, we don’t typically start solutions to a problem with an ML solution. We first identify a heuristic, or rule-based, solution, and the most appropriate way to evaluate it.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;The first step — having a baseline for comparison&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are often tasked with creating better recommendations for content X, but what are “better recommendations,” and what are they better than? Having a baseline helps answer these questions, giving us something to compare our models against. And a good baseline — usually a heuristic/rule-based solution — is a quick, efficient, but maybe not the most optimal, solution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Take the Shortcuts Model as an example. We created an initial heuristic that recommended, simply, the most frequently played items from a listener’s short-term listening history. We improved the heuristic over many iterations, then compared it to the performance of the models we trained. Being able to compare these heuristics to the models gave us confidence to say that having a model was an improvement over the heuristics and was worth the extra effort of maintaining, deploying, and monitoring these models.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Comparing model performance to baseline performance is difficult&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After establishing our baseline and training our model(s), the difficulty lies in how we compare them evenly. In a perfect world we would run infinite A/B tests with hundreds of test cells to compare the performance of all our solutions in the real world, on real listeners. Since it’s not a perfect world, we need reliable offline metrics that act as a proxy for the online metrics we can’t get in those A/B tests.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When evaluating our recommendations models, we typically use normalized discounted cumulative gain (NDCG@k) as our metric, which can be implemented using Spotify’s Python SDK for Kubeflow pipelines. The question then becomes: how do we do the same for our heuristic? As we’ve mentioned before, transformation logic consistency is paramount, and so is evaluation logic — ideally, we’d have the same evaluation logic and the same evaluation test set of data. Unfortunately, our heuristics are generally written in a Java service and are tested with unit tests (not for performance).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For fairly simple heuristics, we found a way to “train a model” so that its output is the heuristic rule’s output. This allowed us to use the same evaluation and evaluation test set as the models we were comparing against. We took this same approach when coming up with a solution to recommendations in the &lt;em&gt;Try something else&lt;/em&gt; shelf for new users on Home. We computed a popularity heuristic based on a listener’s demographics in Tensorflow Transform (TFT) and used the model as a lookup utility (with a fake loss).  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We can’t always fit our problem into such a simple heuristic, as was the case for Shortcuts. The logic used in most of the Shortcuts heuristics was too complex to write in Tensorflow, so we implemented a completely separate offline evaluation pipeline that would gather recommendations made by models and heuristics, and apply custom evaluation functions for comparison.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Adding freedom and flexibility to our evaluation tools&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As mentioned earlier, there’s a second pain point we run into often: using custom evaluation metrics in TFMA.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;TFMA is sometimes too rigid&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify’s SDK for Kubeflow only supports evaluations using TFMA, which provides fairly basic metrics out of the box — think: precision, recall, accuracy. The most common metric we typically use is NDCG@k — TFMA provides NDCG, but not NDCG@k. Implementing metrics in TFMA is notoriously difficult; it takes ~120 lines of code to implement NDCG@k in TFMA, but only a single line of code using scikit-learn in Python.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most recently, we were experimenting with a model that predicts the next playlist that a new user will listen to, and as we have very little information about new users, we wanted to ensure that the model was not just predicting the most popular content. To do so, we were going to evaluate the model with a diversity metric that measured the difference between specific characteristics of items in each playlist. This was nearly impossible to implement in TFMA, so our team contributed to the Python SDK for Kubeflow to support any custom Python evaluation. We have been using this and running our experiments via Kubeflow pipelines since October 2020. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Compare and track experiment results&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the pre-Kubeflow world, our experimentation platform allowed for a way to track and compare models — now, we are using Spotify’s internal UI for machine learning, as it easily integrates with our Kubeflow runs. We can view and compare the evaluation scores of our experiments — both NDCG and custom metrics — in the UI. We’ve been using this for a number of our models, and it allows us to track our model deployments as well.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Looking at more than just the numbers for evaluating recommendations&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I’ve mostly mentioned what metrics we use and why they are important, but there is another incredibly useful way we evaluate our models — sometimes more useful than what a metric can reveal.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;We build custom dashboards to manually evaluate the recs&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Based on past issues, we know that evaluation metrics don’t show the whole picture of how well a model is recommending content. Sometimes, the best way to evaluate a model is by seeing what content it recommends given a specific set of features about a listener. And for this reason, our team built a dashboard that does exactly that. It loads models simply by supplying the storage location of the model, and supports comparison of multiple models given a set of features. We often test and evaluate the recommendations that a new model will provide before deploying it to production by making predictions with different sets of feature values; this gives us an intuition behind what content will be recommended to different users that have these feature values. This has helped us find glaring issues; for example, when developing and testing a new model, we found that it would recommend the same popular playlist to listeners in all European countries. Having this knowledge allowed us to fix and improve the model before deploying it to production.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most recently, we have been working on a new model to recommend albums a listener might like based on their locality and what they like to listen to. We have been running experiments comparing evaluation metric values, but we have also been looking at the recommendations on our dashboard. This dashboard gives you the ability to try different features and compare the recommendations across different models — all before the models are used to recommend content to our listeners. At the beginning stages of experimentation and modeling for this project, we noticed that the same album was recommended as the first item no matter what input features (such as user’s country, followed artists, etc.) were used for testing, meaning this album would have been recommended to everyone as the first recommendation. Without this dashboard as a tool, it would have been more challenging to identify this issue and remediate it before the model went live.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While our offline metrics might indicate poor performance, they don’t tell us anything about what the reason might be, whereas this dashboard can show the quality of our recommendations and is extremely useful in finding issues like this.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Through the use of task-specific custom evaluations and dashboards to show evaluation metrics and recommendations per feature set, we have been able to gain deep insight into how our models are behaving, and make our models a little less of a black box. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The struggles of automated model retraining and deployment&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s dive into our last topic, which is all about maintaining models in production: retraining and automatic deployment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;But do we actually need to retrain our models?&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It would be really nice if we could train a model once, deploy it, and then not have to do anything except monitor its online performance. Sadly, we’ve never seen this in reality.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Sometimes the model’s task requires frequent retraining&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since we first deployed the Podcast Model in Home, we have always had retraining set up for it — and that’s because it only recommends podcast shows that it has seen in training data. So if we didn’t retrain it, it wouldn’t recommend any newly published shows.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;The rest of the time, it just becomes a tech debt monster&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But in some cases, retraining isn’t necessarily required to capture the full set of possible candidates. For the Shortcuts Model, we didn’t have retraining set up because it only recommends content that the listener has previously listened to (which is always in the serving features). But while retraining wasn’t needed for the Shortcuts Model to operate, the lack of it became one of the biggest sources of ML tech debt. We did not implement retraining for Shortcuts because it wasn’t needed for launching the feature, but have seen that it would have saved us time and effort in the long run had we invested some time in the short term. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It wasn’t until many months after the launch of the model that we saw issues with the quality of recommendations in Shortcuts due to no retraining — some of the features for this model describe the type of content that a listener has listened to, like whether it’s a personalized playlist or an album, etc., and there was a recent addition of a new type of content that was introduced after the model was last trained. As a result, the model didn’t recommend this piece of content in Shortcuts. While this starts to look like the same scenario as the Podcast Model described above, we also saw issues with migrating to different tools and platforms because the model was trained using older versions of libraries.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Implement for the short term while waiting for the long-term solution&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once upon a time, we only had that singular Podcast Model, which was used to generate batch predictions, not real-time predictions. We had a Scio pipeline that used &lt;a href=&#34;https://spotify.github.io/zoltar/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Zoltar&lt;/a&gt; to predict podcast recommendations for all listeners, and we stored these predictions in our Bigtable instance that holds all of our content recommendations. This was a great start, but fairly inflexible when it came to when and how often we could make predictions for a given listener — and this is important because the listeners’ features could change if they listen to new content or follow new artists, which could provide better information to the model.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Building a recommender service for the short term&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Consequently, we built a new service to serve this model and enable online predictions. We could get fresh recommendations for a listener almost instantly, and we could get these recommendations at useful times, such as when a listener follows a new artist. While this was a great improvement to move from offline predictions to online predictions, and an important step in making a better product, we knew we were only going to be in this state for the short term. Spotify’s online serving platform was on the horizon, but not yet ready; the benefits to building a short-term less-than-optimal solution outweighed the benefits of waiting to serve online models until Spotify’s serving solution was production ready.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With that said, let’s talk about some challenges we faced in building this recommender service, such as how to refresh the local version of a deployed model. Our solution was to poll our internal storage directory every 10 minutes to check if there was a new revision of the model; if so, the service would pull the model down from where it was stored and start using that model to make predictions. Nevermind that we only retrained weekly or that there would be some state at which some machines would have the new revision of a model and others would have the older revision (although this was not something we worried about in our specific use case).  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;The pain of manually deploying models&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This was really a solution to serving models online, and less of a solution to a better process of serving models. Each time we wanted to deploy a model we had to: 1) copy the model to a specific storage location, 2) manually generate a pointer in our internal storage directory for that location, and 3) add this pointer to our recommender service along with the logic to fetch and transform features for the model. If we were to retrain the model, we would have to repeat each of those steps.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Obviously, this was a cumbersome process, but because we had this short-term solution, we were able to deploy four models to production and tested many others in A/B tests.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;CI/CD — but make it for model training and deployment&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While this recommender service lived a long life of about 10 months, the next obvious step was to migrate to Spotify’s model serving platform, which enabled us to automate retraining and deployment of retrained models.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Automating feature transformations without Tensorflow Transform&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The first step in automating retraining is automating train dataset and test dataset curation, fetching the correct features and performing the necessary feature transformations. While feature transformations are generally handled automatically via TFT in a Kubeflow pipeline, we don’t perform our feature transformations in TFT (and therefore not in our experiment pipeline) because many the transformations we perform on the data are fairly complex and would be unnecessarily difficult to do in Tensorflow.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But because the serving platform provides feature logging, we enabled logging of &lt;em&gt;already transformed&lt;/em&gt; features, to which we then apply the correct labels, and separate into train and test sets. These actions are all performed in scheduled pipelines that run weekly and produce weekly datasets for our models to use.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Migrating from our short-term solution to a long-term solution&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In order to enable feature logging, we had to migrate to the new online model serving platform from our recommender service using Zoltar. It was a matter of dark loading all prediction traffic to the new deployment and then running a simple rollout to start directing traffic to our new deployment instead of using Zoltar to make predictions in our own service. This was an easy migration and provided the benefits that the online serving platform offers — feature logging, faster predictions / lower latencies, less code managed by our team — and it also supports pushing a new model version (from a Kubeflow pipeline), as opposed to constantly polling for a new model version. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Continuous retraining and automatic deployment&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that our models are all deployed via the Spotify serving platform, it enables us to employ CI/CD. We can schedule our models to be retrained via a Kubeflow pipeline, and as part of the Kubeflow pipeline we can ensure that a “bad” model is not accidentally automatically deployed by specifying that it should: 1) check that the evaluation score is greater than our configured threshold, and 2) automatically push it to our serving infrastructure if it is greater than the threshold. This automates a lot of the processes that we had to perform manually not long ago.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Enabling CI/CD for retraining and model deployment is hard, but it’s becoming easier with the new tools available and makes the quality and reliability of our models better. And at first glance, you might not think you need retraining for a model because of the task it performs, but without it, your model could make predictions in unpredictable ways and increase your tech debt.   &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our ML stack has come a long way in recent years, but it’s not perfect by any means. There are still a number of challenges we are tackling — data versioning, model versioning, moving feature transformations to Tensorflow Transform — and better ways to compare offline metrics across both ML and non-ML solutions. But it has decreased the time it takes for us to iterate, experiment, and deploy quality models.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have adopted and/or built the components we need to successfully and efficiently manage our data, experiment with different models, and support continuous integration and development throughout the deployment and retraining processes. Our ML stack has enabled us to launch numerous models that serve millions of listeners on Home every day.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you are interested in joining us and helping improve how we recommend content on Home, we are &lt;a href=&#34;https://www.lifeatspotify.com/jobs&#34;&gt;hiring&lt;/a&gt;!&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/11/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-ii/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">In Part I of this two-part series, we talked about the challenges we faced with the models we use to recommend content on Home, including: The Podcast Model: Predicts podcasts a listener is likely to listen to in the Shows you might like shelf. The Shortcuts Model: Predicts the listener’s next fa</summary>
    <author>
      <name>Published by Annie Edmundson, Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part II)&#xA;</title>
    <updated>2021-11-18T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-11-18:/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-ii/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;November 18, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-ii/&#34; title=&#34;The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part II)&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A.png 2098w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-768x379.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-2048x1009.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-120x59.png 120w&#34; sizes=&#34;(max-width: 2098px) 100vw, 2098px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;In &lt;a href=&#34;https://engineering.atspotify.com/2021/11/15/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part I&lt;/a&gt; of this two-part series, we talked about the challenges we faced with the models we use to recommend content on Home, including:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;The Podcast Model:&lt;/strong&gt; Predicts podcasts a listener is likely to listen to in the &lt;em&gt;Shows you might like&lt;/em&gt; shelf. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Shortcuts Model: &lt;/strong&gt;Predicts the listener’s next familiar listen in the Shortcuts feature. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Playlists Model: &lt;/strong&gt;Predicts the playlists a new listener is likely to listen to in the &lt;em&gt;Try something else&lt;/em&gt; shelf.  &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this part of the series, we’ll highlight how and why we evaluate our models with different tools, and the hurdles to maintaining these models in production. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Trust but verify your recommendations… with dashboards&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So let’s talk about what we do with that data — specifically, how we run experiments, and maybe more importantly, how we evaluate our models’ performance.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Making experimentation simpler&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;How it started: experimenting on a siloed platform&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Not that long ago, after transforming our training data, we would run experiments on a siloed platform specifically geared towards model experimentation, and that was only really used within our team — we did this for both the initial Podcast Model as well as for the Shortcuts Model. This platform could easily launch hundreds of experiments by using a configuration file to specify hyperparameters (it also supported a grid search on specified hyperparameters). And since everything that was submitted to run an experiment was a script, it supported custom evaluation metrics — something that has always been important in our team. While it provided these necessary features, it wasn’t scalable, wasn’t maintained, and had an incomplete UI. Sometimes the compute instances would lose connection with the API (via a periodic ping) and would end up being ghost workers — still running, but not connected to anything.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;How it’s going: integration with Spotify ML ecosystem&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2019/12/13/the-winding-road-to-better-machine-learning-infrastructure-through-tensorflow-extended-and-kubeflow/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s managed Kubeflow clusters&lt;/a&gt; provide a more scalable approach, modular components, and are compatible with other parts of the Spotify ML infrastructure, so it was an obvious choice to move our experimentation to this platform. Training our models using Kubeflow pipelines is easy and efficient, but running the evaluation we needed and tracking those results were our biggest pain points for two reasons: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;As Spotify’s SDK for Kubeflow uses Tensorflow Model Analysis (TFMA), comparing the performance of a non-ML heuristic algorithm to that of a trained model is challenging to set up and requires extra infrastructure. &lt;/li&gt;&lt;li&gt;We often have custom evaluation metrics that are specific to the model’s task, but they are infinitely more difficult to implement in TFMA than in vanilla Python.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Evaluating models against simpler (non-ML) solutions&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As I alluded to in an earlier paragraph, we don’t typically start solutions to a problem with an ML solution. We first identify a heuristic, or rule-based, solution, and the most appropriate way to evaluate it.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;The first step — having a baseline for comparison&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are often tasked with creating better recommendations for content X, but what are “better recommendations,” and what are they better than? Having a baseline helps answer these questions, giving us something to compare our models against. And a good baseline — usually a heuristic/rule-based solution — is a quick, efficient, but maybe not the most optimal, solution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Take the Shortcuts Model as an example. We created an initial heuristic that recommended, simply, the most frequently played items from a listener’s short-term listening history. We improved the heuristic over many iterations, then compared it to the performance of the models we trained. Being able to compare these heuristics to the models gave us confidence to say that having a model was an improvement over the heuristics and was worth the extra effort of maintaining, deploying, and monitoring these models.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Comparing model performance to baseline performance is difficult&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After establishing our baseline and training our model(s), the difficulty lies in how we compare them evenly. In a perfect world we would run infinite A/B tests with hundreds of test cells to compare the performance of all our solutions in the real world, on real listeners. Since it’s not a perfect world, we need reliable offline metrics that act as a proxy for the online metrics we can’t get in those A/B tests.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When evaluating our recommendations models, we typically use normalized discounted cumulative gain (NDCG@k) as our metric, which can be implemented using Spotify’s Python SDK for Kubeflow pipelines. The question then becomes: how do we do the same for our heuristic? As we’ve mentioned before, transformation logic consistency is paramount, and so is evaluation logic — ideally, we’d have the same evaluation logic and the same evaluation test set of data. Unfortunately, our heuristics are generally written in a Java service and are tested with unit tests (not for performance).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For fairly simple heuristics, we found a way to “train a model” so that its output is the heuristic rule’s output. This allowed us to use the same evaluation and evaluation test set as the models we were comparing against. We took this same approach when coming up with a solution to recommendations in the &lt;em&gt;Try something else&lt;/em&gt; shelf for new users on Home. We computed a popularity heuristic based on a listener’s demographics in Tensorflow Transform (TFT) and used the model as a lookup utility (with a fake loss).  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We can’t always fit our problem into such a simple heuristic, as was the case for Shortcuts. The logic used in most of the Shortcuts heuristics was too complex to write in Tensorflow, so we implemented a completely separate offline evaluation pipeline that would gather recommendations made by models and heuristics, and apply custom evaluation functions for comparison.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Adding freedom and flexibility to our evaluation tools&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As mentioned earlier, there’s a second pain point we run into often: using custom evaluation metrics in TFMA.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;TFMA is sometimes too rigid&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify’s SDK for Kubeflow only supports evaluations using TFMA, which provides fairly basic metrics out of the box — think: precision, recall, accuracy. The most common metric we typically use is NDCG@k — TFMA provides NDCG, but not NDCG@k. Implementing metrics in TFMA is notoriously difficult; it takes ~120 lines of code to implement NDCG@k in TFMA, but only a single line of code using scikit-learn in Python.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most recently, we were experimenting with a model that predicts the next playlist that a new user will listen to, and as we have very little information about new users, we wanted to ensure that the model was not just predicting the most popular content. To do so, we were going to evaluate the model with a diversity metric that measured the difference between specific characteristics of items in each playlist. This was nearly impossible to implement in TFMA, so our team contributed to the Python SDK for Kubeflow to support any custom Python evaluation. We have been using this and running our experiments via Kubeflow pipelines since October 2020. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Compare and track experiment results&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the pre-Kubeflow world, our experimentation platform allowed for a way to track and compare models — now, we are using Spotify’s internal UI for machine learning, as it easily integrates with our Kubeflow runs. We can view and compare the evaluation scores of our experiments — both NDCG and custom metrics — in the UI. We’ve been using this for a number of our models, and it allows us to track our model deployments as well.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Looking at more than just the numbers for evaluating recommendations&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I’ve mostly mentioned what metrics we use and why they are important, but there is another incredibly useful way we evaluate our models — sometimes more useful than what a metric can reveal.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;We build custom dashboards to manually evaluate the recs&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Based on past issues, we know that evaluation metrics don’t show the whole picture of how well a model is recommending content. Sometimes, the best way to evaluate a model is by seeing what content it recommends given a specific set of features about a listener. And for this reason, our team built a dashboard that does exactly that. It loads models simply by supplying the storage location of the model, and supports comparison of multiple models given a set of features. We often test and evaluate the recommendations that a new model will provide before deploying it to production by making predictions with different sets of feature values; this gives us an intuition behind what content will be recommended to different users that have these feature values. This has helped us find glaring issues; for example, when developing and testing a new model, we found that it would recommend the same popular playlist to listeners in all European countries. Having this knowledge allowed us to fix and improve the model before deploying it to production.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most recently, we have been working on a new model to recommend albums a listener might like based on their locality and what they like to listen to. We have been running experiments comparing evaluation metric values, but we have also been looking at the recommendations on our dashboard. This dashboard gives you the ability to try different features and compare the recommendations across different models — all before the models are used to recommend content to our listeners. At the beginning stages of experimentation and modeling for this project, we noticed that the same album was recommended as the first item no matter what input features (such as user’s country, followed artists, etc.) were used for testing, meaning this album would have been recommended to everyone as the first recommendation. Without this dashboard as a tool, it would have been more challenging to identify this issue and remediate it before the model went live.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While our offline metrics might indicate poor performance, they don’t tell us anything about what the reason might be, whereas this dashboard can show the quality of our recommendations and is extremely useful in finding issues like this.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Through the use of task-specific custom evaluations and dashboards to show evaluation metrics and recommendations per feature set, we have been able to gain deep insight into how our models are behaving, and make our models a little less of a black box. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The struggles of automated model retraining and deployment&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s dive into our last topic, which is all about maintaining models in production: retraining and automatic deployment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;But do we actually need to retrain our models?&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It would be really nice if we could train a model once, deploy it, and then not have to do anything except monitor its online performance. Sadly, we’ve never seen this in reality.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Sometimes the model’s task requires frequent retraining&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since we first deployed the Podcast Model in Home, we have always had retraining set up for it — and that’s because it only recommends podcast shows that it has seen in training data. So if we didn’t retrain it, it wouldn’t recommend any newly published shows.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;The rest of the time, it just becomes a tech debt monster&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But in some cases, retraining isn’t necessarily required to capture the full set of possible candidates. For the Shortcuts Model, we didn’t have retraining set up because it only recommends content that the listener has previously listened to (which is always in the serving features). But while retraining wasn’t needed for the Shortcuts Model to operate, the lack of it became one of the biggest sources of ML tech debt. We did not implement retraining for Shortcuts because it wasn’t needed for launching the feature, but have seen that it would have saved us time and effort in the long run had we invested some time in the short term. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It wasn’t until many months after the launch of the model that we saw issues with the quality of recommendations in Shortcuts due to no retraining — some of the features for this model describe the type of content that a listener has listened to, like whether it’s a personalized playlist or an album, etc., and there was a recent addition of a new type of content that was introduced after the model was last trained. As a result, the model didn’t recommend this piece of content in Shortcuts. While this starts to look like the same scenario as the Podcast Model described above, we also saw issues with migrating to different tools and platforms because the model was trained using older versions of libraries.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Implement for the short term while waiting for the long-term solution&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once upon a time, we only had that singular Podcast Model, which was used to generate batch predictions, not real-time predictions. We had a Scio pipeline that used &lt;a href=&#34;https://spotify.github.io/zoltar/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Zoltar&lt;/a&gt; to predict podcast recommendations for all listeners, and we stored these predictions in our Bigtable instance that holds all of our content recommendations. This was a great start, but fairly inflexible when it came to when and how often we could make predictions for a given listener — and this is important because the listeners’ features could change if they listen to new content or follow new artists, which could provide better information to the model.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Building a recommender service for the short term&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Consequently, we built a new service to serve this model and enable online predictions. We could get fresh recommendations for a listener almost instantly, and we could get these recommendations at useful times, such as when a listener follows a new artist. While this was a great improvement to move from offline predictions to online predictions, and an important step in making a better product, we knew we were only going to be in this state for the short term. Spotify’s online serving platform was on the horizon, but not yet ready; the benefits to building a short-term less-than-optimal solution outweighed the benefits of waiting to serve online models until Spotify’s serving solution was production ready.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With that said, let’s talk about some challenges we faced in building this recommender service, such as how to refresh the local version of a deployed model. Our solution was to poll our internal storage directory every 10 minutes to check if there was a new revision of the model; if so, the service would pull the model down from where it was stored and start using that model to make predictions. Nevermind that we only retrained weekly or that there would be some state at which some machines would have the new revision of a model and others would have the older revision (although this was not something we worried about in our specific use case).  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;The pain of manually deploying models&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This was really a solution to serving models online, and less of a solution to a better process of serving models. Each time we wanted to deploy a model we had to: 1) copy the model to a specific storage location, 2) manually generate a pointer in our internal storage directory for that location, and 3) add this pointer to our recommender service along with the logic to fetch and transform features for the model. If we were to retrain the model, we would have to repeat each of those steps.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Obviously, this was a cumbersome process, but because we had this short-term solution, we were able to deploy four models to production and tested many others in A/B tests.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;CI/CD — but make it for model training and deployment&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While this recommender service lived a long life of about 10 months, the next obvious step was to migrate to Spotify’s model serving platform, which enabled us to automate retraining and deployment of retrained models.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Automating feature transformations without Tensorflow Transform&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The first step in automating retraining is automating train dataset and test dataset curation, fetching the correct features and performing the necessary feature transformations. While feature transformations are generally handled automatically via TFT in a Kubeflow pipeline, we don’t perform our feature transformations in TFT (and therefore not in our experiment pipeline) because many the transformations we perform on the data are fairly complex and would be unnecessarily difficult to do in Tensorflow.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But because the serving platform provides feature logging, we enabled logging of &lt;em&gt;already transformed&lt;/em&gt; features, to which we then apply the correct labels, and separate into train and test sets. These actions are all performed in scheduled pipelines that run weekly and produce weekly datasets for our models to use.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Migrating from our short-term solution to a long-term solution&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In order to enable feature logging, we had to migrate to the new online model serving platform from our recommender service using Zoltar. It was a matter of dark loading all prediction traffic to the new deployment and then running a simple rollout to start directing traffic to our new deployment instead of using Zoltar to make predictions in our own service. This was an easy migration and provided the benefits that the online serving platform offers — feature logging, faster predictions / lower latencies, less code managed by our team — and it also supports pushing a new model version (from a Kubeflow pipeline), as opposed to constantly polling for a new model version. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Continuous retraining and automatic deployment&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that our models are all deployed via the Spotify serving platform, it enables us to employ CI/CD. We can schedule our models to be retrained via a Kubeflow pipeline, and as part of the Kubeflow pipeline we can ensure that a “bad” model is not accidentally automatically deployed by specifying that it should: 1) check that the evaluation score is greater than our configured threshold, and 2) automatically push it to our serving infrastructure if it is greater than the threshold. This automates a lot of the processes that we had to perform manually not long ago.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Enabling CI/CD for retraining and model deployment is hard, but it’s becoming easier with the new tools available and makes the quality and reliability of our models better. And at first glance, you might not think you need retraining for a model because of the task it performs, but without it, your model could make predictions in unpredictable ways and increase your tech debt.   &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our ML stack has come a long way in recent years, but it’s not perfect by any means. There are still a number of challenges we are tackling — data versioning, model versioning, moving feature transformations to Tensorflow Transform — and better ways to compare offline metrics across both ML and non-ML solutions. But it has decreased the time it takes for us to iterate, experiment, and deploy quality models.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have adopted and/or built the components we need to successfully and efficiently manage our data, experiment with different models, and support continuous integration and development throughout the deployment and retraining processes. Our ML stack has enabled us to launch numerous models that serve millions of listeners on Home every day.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you are interested in joining us and helping improve how we recommend content on Home, we are &lt;a href=&#34;https://www.lifeatspotify.com/jobs&#34;&gt;hiring&lt;/a&gt;!&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-ii/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">In Part I of this two-part series, we talked about the challenges we faced with the models we use to recommend content on Home, including: The Podcast Model: Predicts podcasts a listener is likely to listen to in the Shows you might like shelf. The Shortcuts Model: Predicts the listener’s next fa</summary>
    <author>
      <name>Published by Annie Edmundson, Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part II)&#xA;</title>
    <updated>2021-11-18T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-11-18:/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-ii/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;November 18, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-ii/&#34; title=&#34;The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part II)&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A.png 2098w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-768x379.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-2048x1009.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A-120x59.png 120w&#34; sizes=&#34;(max-width: 2098px) 100vw, 2098px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;In &lt;a href=&#34;https://engineering.atspotify.com/2021/11/15/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part I&lt;/a&gt; of this two-part series, we talked about the challenges we faced with the models we use to recommend content on Home, including:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;The Podcast Model:&lt;/strong&gt; Predicts podcasts a listener is likely to listen to in the &lt;em&gt;Shows you might like&lt;/em&gt; shelf. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Shortcuts Model: &lt;/strong&gt;Predicts the listener’s next familiar listen in the Shortcuts feature. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Playlists Model: &lt;/strong&gt;Predicts the playlists a new listener is likely to listen to in the &lt;em&gt;Try something else&lt;/em&gt; shelf.  &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this part of the series, we’ll highlight how and why we evaluate our models with different tools, and the hurdles to maintaining these models in production. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Trust but verify your recommendations… with dashboards&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So let’s talk about what we do with that data — specifically, how we run experiments, and maybe more importantly, how we evaluate our models’ performance.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Making experimentation simpler&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;How it started: experimenting on a siloed platform&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Not that long ago, after transforming our training data, we would run experiments on a siloed platform specifically geared towards model experimentation, and that was only really used within our team — we did this for both the initial Podcast Model as well as for the Shortcuts Model. This platform could easily launch hundreds of experiments by using a configuration file to specify hyperparameters (it also supported a grid search on specified hyperparameters). And since everything that was submitted to run an experiment was a script, it supported custom evaluation metrics — something that has always been important in our team. While it provided these necessary features, it wasn’t scalable, wasn’t maintained, and had an incomplete UI. Sometimes the compute instances would lose connection with the API (via a periodic ping) and would end up being ghost workers — still running, but not connected to anything.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;How it’s going: integration with Spotify ML ecosystem&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2019/12/13/the-winding-road-to-better-machine-learning-infrastructure-through-tensorflow-extended-and-kubeflow/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s managed Kubeflow clusters&lt;/a&gt; provide a more scalable approach, modular components, and are compatible with other parts of the Spotify ML infrastructure, so it was an obvious choice to move our experimentation to this platform. Training our models using Kubeflow pipelines is easy and efficient, but running the evaluation we needed and tracking those results were our biggest pain points for two reasons: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;As Spotify’s SDK for Kubeflow uses Tensorflow Model Analysis (TFMA), comparing the performance of a non-ML heuristic algorithm to that of a trained model is challenging to set up and requires extra infrastructure. &lt;/li&gt;&lt;li&gt;We often have custom evaluation metrics that are specific to the model’s task, but they are infinitely more difficult to implement in TFMA than in vanilla Python.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Evaluating models against simpler (non-ML) solutions&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As I alluded to in an earlier paragraph, we don’t typically start solutions to a problem with an ML solution. We first identify a heuristic, or rule-based, solution, and the most appropriate way to evaluate it.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;The first step — having a baseline for comparison&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are often tasked with creating better recommendations for content X, but what are “better recommendations,” and what are they better than? Having a baseline helps answer these questions, giving us something to compare our models against. And a good baseline — usually a heuristic/rule-based solution — is a quick, efficient, but maybe not the most optimal, solution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Take the Shortcuts Model as an example. We created an initial heuristic that recommended, simply, the most frequently played items from a listener’s short-term listening history. We improved the heuristic over many iterations, then compared it to the performance of the models we trained. Being able to compare these heuristics to the models gave us confidence to say that having a model was an improvement over the heuristics and was worth the extra effort of maintaining, deploying, and monitoring these models.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Comparing model performance to baseline performance is difficult&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After establishing our baseline and training our model(s), the difficulty lies in how we compare them evenly. In a perfect world we would run infinite A/B tests with hundreds of test cells to compare the performance of all our solutions in the real world, on real listeners. Since it’s not a perfect world, we need reliable offline metrics that act as a proxy for the online metrics we can’t get in those A/B tests.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When evaluating our recommendations models, we typically use normalized discounted cumulative gain (NDCG@k) as our metric, which can be implemented using Spotify’s Python SDK for Kubeflow pipelines. The question then becomes: how do we do the same for our heuristic? As we’ve mentioned before, transformation logic consistency is paramount, and so is evaluation logic — ideally, we’d have the same evaluation logic and the same evaluation test set of data. Unfortunately, our heuristics are generally written in a Java service and are tested with unit tests (not for performance).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For fairly simple heuristics, we found a way to “train a model” so that its output is the heuristic rule’s output. This allowed us to use the same evaluation and evaluation test set as the models we were comparing against. We took this same approach when coming up with a solution to recommendations in the &lt;em&gt;Try something else&lt;/em&gt; shelf for new users on Home. We computed a popularity heuristic based on a listener’s demographics in Tensorflow Transform (TFT) and used the model as a lookup utility (with a fake loss).  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We can’t always fit our problem into such a simple heuristic, as was the case for Shortcuts. The logic used in most of the Shortcuts heuristics was too complex to write in Tensorflow, so we implemented a completely separate offline evaluation pipeline that would gather recommendations made by models and heuristics, and apply custom evaluation functions for comparison.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Adding freedom and flexibility to our evaluation tools&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As mentioned earlier, there’s a second pain point we run into often: using custom evaluation metrics in TFMA.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;TFMA is sometimes too rigid&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify’s SDK for Kubeflow only supports evaluations using TFMA, which provides fairly basic metrics out of the box — think: precision, recall, accuracy. The most common metric we typically use is NDCG@k — TFMA provides NDCG, but not NDCG@k. Implementing metrics in TFMA is notoriously difficult; it takes ~120 lines of code to implement NDCG@k in TFMA, but only a single line of code using scikit-learn in Python.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most recently, we were experimenting with a model that predicts the next playlist that a new user will listen to, and as we have very little information about new users, we wanted to ensure that the model was not just predicting the most popular content. To do so, we were going to evaluate the model with a diversity metric that measured the difference between specific characteristics of items in each playlist. This was nearly impossible to implement in TFMA, so our team contributed to the Python SDK for Kubeflow to support any custom Python evaluation. We have been using this and running our experiments via Kubeflow pipelines since October 2020. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Compare and track experiment results&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the pre-Kubeflow world, our experimentation platform allowed for a way to track and compare models — now, we are using Spotify’s internal UI for machine learning, as it easily integrates with our Kubeflow runs. We can view and compare the evaluation scores of our experiments — both NDCG and custom metrics — in the UI. We’ve been using this for a number of our models, and it allows us to track our model deployments as well.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Looking at more than just the numbers for evaluating recommendations&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I’ve mostly mentioned what metrics we use and why they are important, but there is another incredibly useful way we evaluate our models — sometimes more useful than what a metric can reveal.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;We build custom dashboards to manually evaluate the recs&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Based on past issues, we know that evaluation metrics don’t show the whole picture of how well a model is recommending content. Sometimes, the best way to evaluate a model is by seeing what content it recommends given a specific set of features about a listener. And for this reason, our team built a dashboard that does exactly that. It loads models simply by supplying the storage location of the model, and supports comparison of multiple models given a set of features. We often test and evaluate the recommendations that a new model will provide before deploying it to production by making predictions with different sets of feature values; this gives us an intuition behind what content will be recommended to different users that have these feature values. This has helped us find glaring issues; for example, when developing and testing a new model, we found that it would recommend the same popular playlist to listeners in all European countries. Having this knowledge allowed us to fix and improve the model before deploying it to production.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most recently, we have been working on a new model to recommend albums a listener might like based on their locality and what they like to listen to. We have been running experiments comparing evaluation metric values, but we have also been looking at the recommendations on our dashboard. This dashboard gives you the ability to try different features and compare the recommendations across different models — all before the models are used to recommend content to our listeners. At the beginning stages of experimentation and modeling for this project, we noticed that the same album was recommended as the first item no matter what input features (such as user’s country, followed artists, etc.) were used for testing, meaning this album would have been recommended to everyone as the first recommendation. Without this dashboard as a tool, it would have been more challenging to identify this issue and remediate it before the model went live.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While our offline metrics might indicate poor performance, they don’t tell us anything about what the reason might be, whereas this dashboard can show the quality of our recommendations and is extremely useful in finding issues like this.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Through the use of task-specific custom evaluations and dashboards to show evaluation metrics and recommendations per feature set, we have been able to gain deep insight into how our models are behaving, and make our models a little less of a black box. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The struggles of automated model retraining and deployment&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s dive into our last topic, which is all about maintaining models in production: retraining and automatic deployment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;But do we actually need to retrain our models?&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It would be really nice if we could train a model once, deploy it, and then not have to do anything except monitor its online performance. Sadly, we’ve never seen this in reality.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Sometimes the model’s task requires frequent retraining&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since we first deployed the Podcast Model in Home, we have always had retraining set up for it — and that’s because it only recommends podcast shows that it has seen in training data. So if we didn’t retrain it, it wouldn’t recommend any newly published shows.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;The rest of the time, it just becomes a tech debt monster&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But in some cases, retraining isn’t necessarily required to capture the full set of possible candidates. For the Shortcuts Model, we didn’t have retraining set up because it only recommends content that the listener has previously listened to (which is always in the serving features). But while retraining wasn’t needed for the Shortcuts Model to operate, the lack of it became one of the biggest sources of ML tech debt. We did not implement retraining for Shortcuts because it wasn’t needed for launching the feature, but have seen that it would have saved us time and effort in the long run had we invested some time in the short term. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It wasn’t until many months after the launch of the model that we saw issues with the quality of recommendations in Shortcuts due to no retraining — some of the features for this model describe the type of content that a listener has listened to, like whether it’s a personalized playlist or an album, etc., and there was a recent addition of a new type of content that was introduced after the model was last trained. As a result, the model didn’t recommend this piece of content in Shortcuts. While this starts to look like the same scenario as the Podcast Model described above, we also saw issues with migrating to different tools and platforms because the model was trained using older versions of libraries.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Implement for the short term while waiting for the long-term solution&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once upon a time, we only had that singular Podcast Model, which was used to generate batch predictions, not real-time predictions. We had a Scio pipeline that used &lt;a href=&#34;https://spotify.github.io/zoltar/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Zoltar&lt;/a&gt; to predict podcast recommendations for all listeners, and we stored these predictions in our Bigtable instance that holds all of our content recommendations. This was a great start, but fairly inflexible when it came to when and how often we could make predictions for a given listener — and this is important because the listeners’ features could change if they listen to new content or follow new artists, which could provide better information to the model.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Building a recommender service for the short term&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Consequently, we built a new service to serve this model and enable online predictions. We could get fresh recommendations for a listener almost instantly, and we could get these recommendations at useful times, such as when a listener follows a new artist. While this was a great improvement to move from offline predictions to online predictions, and an important step in making a better product, we knew we were only going to be in this state for the short term. Spotify’s online serving platform was on the horizon, but not yet ready; the benefits to building a short-term less-than-optimal solution outweighed the benefits of waiting to serve online models until Spotify’s serving solution was production ready.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With that said, let’s talk about some challenges we faced in building this recommender service, such as how to refresh the local version of a deployed model. Our solution was to poll our internal storage directory every 10 minutes to check if there was a new revision of the model; if so, the service would pull the model down from where it was stored and start using that model to make predictions. Nevermind that we only retrained weekly or that there would be some state at which some machines would have the new revision of a model and others would have the older revision (although this was not something we worried about in our specific use case).  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;The pain of manually deploying models&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This was really a solution to serving models online, and less of a solution to a better process of serving models. Each time we wanted to deploy a model we had to: 1) copy the model to a specific storage location, 2) manually generate a pointer in our internal storage directory for that location, and 3) add this pointer to our recommender service along with the logic to fetch and transform features for the model. If we were to retrain the model, we would have to repeat each of those steps.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Obviously, this was a cumbersome process, but because we had this short-term solution, we were able to deploy four models to production and tested many others in A/B tests.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;CI/CD — but make it for model training and deployment&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While this recommender service lived a long life of about 10 months, the next obvious step was to migrate to Spotify’s model serving platform, which enabled us to automate retraining and deployment of retrained models.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Automating feature transformations without Tensorflow Transform&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The first step in automating retraining is automating train dataset and test dataset curation, fetching the correct features and performing the necessary feature transformations. While feature transformations are generally handled automatically via TFT in a Kubeflow pipeline, we don’t perform our feature transformations in TFT (and therefore not in our experiment pipeline) because many the transformations we perform on the data are fairly complex and would be unnecessarily difficult to do in Tensorflow.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But because the serving platform provides feature logging, we enabled logging of &lt;em&gt;already transformed&lt;/em&gt; features, to which we then apply the correct labels, and separate into train and test sets. These actions are all performed in scheduled pipelines that run weekly and produce weekly datasets for our models to use.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Migrating from our short-term solution to a long-term solution&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In order to enable feature logging, we had to migrate to the new online model serving platform from our recommender service using Zoltar. It was a matter of dark loading all prediction traffic to the new deployment and then running a simple rollout to start directing traffic to our new deployment instead of using Zoltar to make predictions in our own service. This was an easy migration and provided the benefits that the online serving platform offers — feature logging, faster predictions / lower latencies, less code managed by our team — and it also supports pushing a new model version (from a Kubeflow pipeline), as opposed to constantly polling for a new model version. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4&gt;Continuous retraining and automatic deployment&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that our models are all deployed via the Spotify serving platform, it enables us to employ CI/CD. We can schedule our models to be retrained via a Kubeflow pipeline, and as part of the Kubeflow pipeline we can ensure that a “bad” model is not accidentally automatically deployed by specifying that it should: 1) check that the evaluation score is greater than our configured threshold, and 2) automatically push it to our serving infrastructure if it is greater than the threshold. This automates a lot of the processes that we had to perform manually not long ago.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Enabling CI/CD for retraining and model deployment is hard, but it’s becoming easier with the new tools available and makes the quality and reliability of our models better. And at first glance, you might not think you need retraining for a model because of the task it performs, but without it, your model could make predictions in unpredictable ways and increase your tech debt.   &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our ML stack has come a long way in recent years, but it’s not perfect by any means. There are still a number of challenges we are tackling — data versioning, model versioning, moving feature transformations to Tensorflow Transform — and better ways to compare offline metrics across both ML and non-ML solutions. But it has decreased the time it takes for us to iterate, experiment, and deploy quality models.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have adopted and/or built the components we need to successfully and efficiently manage our data, experiment with different models, and support continuous integration and development throughout the deployment and retraining processes. Our ML stack has enabled us to launch numerous models that serve millions of listeners on Home every day.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you are interested in joining us and helping improve how we recommend content on Home, we are &lt;a href=&#34;https://www.lifeatspotify.com/jobs&#34;&gt;hiring&lt;/a&gt;!&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-ii/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/147_Part-02A.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">In Part I of this two-part series, we talked about the challenges we faced with the models we use to recommend content on Home, including: The Podcast Model: Predicts podcasts a listener is likely to listen to in the Shows you might like shelf. The Shortcuts Model: Predicts the listener’s next fa</summary>
    <author>
      <name>Published by Annie Edmundson, Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Introducing XCRemoteCache: The iOS Remote Caching Tool that Cut Our Clean Build Times by 70%&#xA;</title>
    <updated>2021-11-16T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-11-16:/2021/11/16/introducing-xcremotecache-the-ios-remote-caching-tool-that-cut-our-clean-build-times-by-70/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;November 16, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/11/16/introducing-xcremotecache-the-ios-remote-caching-tool-that-cut-our-clean-build-times-by-70/&#34; title=&#34;Introducing XCRemoteCache: The iOS Remote Caching Tool that Cut Our Clean Build Times by 70%&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-768x378.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify, we constantly work on creating the best developer experience possible for our iOS engineers. Improving build times is one of the most common requests for infrastructure teams and, as such, we constantly seek to improve our infrastructure toolchain.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are excited to be open sourcing &lt;a href=&#34;https://github.com/spotify/XCRemoteCache&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;XCRemoteCache&lt;/a&gt;, the library we created to mitigate long local builds. As the name suggests, this library is a remote caching implementation for iOS projects with an aim to reuse Xcode target artifacts generated on Continuous Integration (CI) machines. It supports Objective-C, Swift, and ObjC+Swift targets and can be easily integrated with existing Xcode projects, including ones managed by CocoaPods or Carthage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Best of all, XCRemoteCache resulted in a &lt;strong&gt;70% decrease in clean build times&lt;/strong&gt; (we classify a build as &lt;em&gt;clean&lt;/em&gt; when at least 50% of all targets compile at least one file).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Using our Xcode build metrics (for more details on how this works, take a look at our open source &lt;a href=&#34;https://xcmetrics.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;XCMetrics project&lt;/a&gt;), we found out that it often takes our developers more than 10 minutes to build the main Spotify iOS application. Even though the number of these builds is relatively small (less than 3% of all builds), they take more than 50% of global building times (Figure 1). &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After some investigation, it was revealed that long-lasting builds usually happen after rebasing or merging remote branches. Implementing a remote cache solution was the perfect fit.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;354&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-700x354.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-700x354.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-768x389.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-120x61.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times.png 1205w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 1: Distribution of local machines’ build times and their total build times.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Remote cache principle&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A remote cache is a popular technique to speed up builds of big applications by applying the “compile once, use everywhere” approach. As long as all input files and compilation parameters are the same, instead of building a target locally, one can download artifacts that were built and shared from some other machine. A key success factor for remote caching is finding an optimal caching level. Caching units that are too granular, where every single piece of the compilation step is cacheable, may lead to extensive network traffic overhead, which can offset CPU savings. On the other hand, putting the entire codebase into a single cacheable unit may significantly degrade the caching hit rate; every single local change invalidates remotely available cache artifacts, triggering a full build, locally.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The main Spotify iOS application is highly modularized and contains more than 400 independent modules configured as separate Xcode targets. Applying target-level caching was natural, and as we found out later, the right decision.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Designing the remote cache solution &lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the design phase, our aim was to come up with a solution generic enough that it could be applied to a broad range of iOS applications with minimal or no project changes. That was an ambitious goal given how the Xcode build system works. Before going straight to the applied solution, let’s consider how an Xcode build actually works. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;How does XCRemoteCache work?&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In general, all caching mechanisms use a fingerprint of input files to recognize if build products can be reused. However, finding a precise set of these files is a nontrivial task. The Xcode build system is very liberal when it comes to dependency attribution. It tries to optimistically find a definition of the dependency (header files, &lt;code&gt;.swiftmodule&lt;/code&gt;, etc.) in all available search paths — provided either by the developer in the Xcode project settings or in the current build product directory. As a result, developers don’t have to explicitly specify all dependencies a target uses, but just have to make sure that those dependencies will be placed in a correct location &lt;em&gt;before&lt;/em&gt; Xcode actually needs them. The fact that compilers are able to implicitly find required dependencies, hinders the simple fingerprint generation by hashing all available files in header and framework search paths — a list of files to consider in the fingerprinting would often be too broad.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On the other hand, we observed that Xcode works quite well for local incremental builds and executes only a narrow subset of steps that were affected since the last build. In other words, the Xcode build system knows which files are the actual input files for the compilation, but that list is generated as compiler’s output (.d files) and is not available ahead of a compilation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;XCRemoteCache applies a unique approach to automatically identify all input files of the compilation based on Git history and dependency lists provided as a compilation output. The generation side, called &lt;em&gt;producer mode&lt;/em&gt;, along with the compilation product, also uploads a meta file. That file contains a list of all compilation files the compiler used and the full SHA-1 (Secure Hash Algorithm 1) commit identifier it was built against. The producer mode should run on CI for each primary branch (like &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;develop&lt;/code&gt;) commit, as a part of the post-merge phase.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On the consumer side (aka &lt;em&gt;consumer mode&lt;/em&gt;), XCRemoteCache finds the most recent history commit for which the remote server contains build artifacts and builds a fingerprint based on input files provided in the meta file. Let’s imagine two developers, &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, working on their local branches &lt;code&gt;featureA &lt;/code&gt;and &lt;code&gt;featureB&lt;/code&gt;, branching out from &lt;code&gt;master &lt;/code&gt;on &lt;code&gt;Commit1&lt;/code&gt; and &lt;code&gt;Commit3&lt;/code&gt;, respectively (Figure 2). A CI job that produces and uploads cache artifacts to the central server finished its work only for commits 1, 2, and 4. For some reason, &lt;code&gt;Commit3&lt;/code&gt; artifacts are not ready — either the build is in progress or it has failed. Developer A’s machine will reuse the artifacts generated for &lt;code&gt;Commit1&lt;/code&gt;, while Developer B’s takes them from &lt;code&gt;Commit2&lt;/code&gt; — it tried with &lt;code&gt;Commit3&lt;/code&gt;, but they are not ready yet.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;440&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-700x440.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-700x440.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-250x157.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-768x483.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-120x75.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts.png 1205w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 2: Finding a commit with artifacts to reuse.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;With that procedure, XCRemoteCache gets a strict list of input files almost for free.&lt;/p&gt;&lt;p&gt;Assuming we have an app split into several independent targets and local branches that don’t divert much from a primary branch, the caching hit rate will be high, minus only these targets that contain changes comparing the commit of which remote artifacts are used. &lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Build artifacts portability&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Another problem to consider is “build artifacts portability” between multiple machines. Several types of compilation output files include absolute paths, so for full compatibility, some kind of normalization is required. For iOS projects, such a step is required for &lt;code&gt;.swiftmodule&lt;/code&gt; files and debug symbols. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Projects cloned to &lt;code&gt;/dir1&lt;/code&gt; and &lt;code&gt;/dir2&lt;/code&gt; generate &lt;code&gt;.swiftmodule &lt;/code&gt;files that do not match on a byte level. Swiftmodule represents an inter-module API (Swift counterparts to .h) that can be included in the list of fingerprinting files. To overcome falsy cache misses if two machines don’t have the same absolute source root paths, XCRemoteCache carries an extra fingerprint file (called a fingerprint override) next to the &lt;code&gt;.swiftmodule &lt;/code&gt;that includes a fingerprint of all the files used in the compilation step. A fingerprint override is path agnostic, so contrary to the &lt;code&gt;.swiftmodule&lt;/code&gt; file, it can be used as a byte-level stable fingerprint of a Swift target. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Debug symbols, other path-sensitive files, are appended to the binary package to associate the machine code with the corresponding source location when debugging. The XCRemoteCache leverages support for LLDB runtime path rewrites using &lt;code&gt;settings set target.source-map&lt;/code&gt;. Both producer and consumer pass &lt;code&gt;debug-prefix-map&lt;/code&gt; parameters to the Swift and Clang compilers to align the source root of all debug symbols making the LLDB source mapping a simple, single-line command.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;The Spotify story&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify, we have fast, well-optimized CI jobs that no longer slow down our development feedback loop (please head to &lt;a href=&#34;https://engineering.atspotify.com/2020/05/01/how-we-gave-superpowers-to-our-macos-ci/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;How We Gave Superpowers to Our macOS CI&lt;/a&gt; to read more about that), so we focused on applying XCRemoteCache on local machines. Keep in mind that the tool is able to work on CI machines and accelerate PR jobs, too.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In controlled conditions, XCRemoteCache was able to cut the very first iOS Spotify application build time by 85%. This was a great achievement, but in practice, developers introduce changes locally, and some targets have to be compiled locally. Our goal was to evaluate real-world scenarios to understand their true impact. To estimate that, we rolled out the remote cache to 50% of our developers for a week and compared all build metrics. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Results exceeded our expectations — we observed a huge improvement of the local build times: &lt;strong&gt;median clean build and incremental build times decreased by 70% and 6%, respectively. &lt;/strong&gt;We classify builds as &lt;em&gt;clean&lt;/em&gt; when at least 50% of all targets compile at least one file.  Other builds that compile at least one file are &lt;em&gt;incremental&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, we enabled XCRemoteCache into our main application more than a year ago, and since then, it has worked flawlessly. We get very positive feedback from our developers and, as a side effect, we’ve seen the portion of clean builds almost double compared to the pre-remote cache times. Developers nowadays are twice more likely to rebase their working branches, eventually leading to fewer conflicts when creating a pull request. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;How to integrate XCRemoteCache into your existing project&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that XCRemoteCache is open source, you can apply it to your own project with minimum effort. It supports multiple project setups, including the ones managed by CocoaPods, Carthage, or any other custom dependency management. Keep in mind, though, that for best results, your project should be split into several targets or you risk frequent cache invalidations, as described above.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;For seamless integration, we are open sourcing a &lt;a href=&#34;https://github.com/spotify/XCRemoteCache/tree/master/cocoapods-plugin&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CocoaPods plugin&lt;/a&gt; and provide an automated script to modify the existing .xcodeproj project.&lt;/p&gt;&lt;p&gt;XCRemoteCache works with any HTTP server that supports PUT, HEAD, and GET requests. You are free to pick a server that works best for you, including the two popular storage options provided by Amazon S3 and Google’s Google Cloud Storage. We also provide a simple docker image that hosts a local server, perfect for the development phase.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With that in place, you should be able to try out XCRemoteCache within minutes. For a list of integration steps, head to the &lt;a href=&#34;https://github.com/spotify/XCRemoteCache#how-to-integrate-xcremotecache-with-your-xcode-project&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;How-to&lt;/em&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;section in the GitHub repo.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Contributing to XCRemoteCache&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The XCRemoteCache tool is written fully in Swift, so iOS developers can easily familiarize themselves with the codebase and potentially contribute to it. We tried to cover most of the common scenarios but, keeping in mind that Xcode projects may have very custom setups, some of them may not be compatible right now. Therefore, any inputs from the community, both raising issues or pull requests, are very welcome. We believe that, together, we will be able to move the project even further and support a wider audience of iOS developers. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you want to contribute to the codebase, make sure to check out our &lt;a href=&#34;https://github.com/spotify/XCRemoteCache/blob/master/docs/Development.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;development&lt;/a&gt; guide. And if you want to work full-time on tools like that, please check out our &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.lifeatspotify.com/jobs&#34; target=&#34;_blank&#34;&gt;open job positions&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I want to personally thank Erick Camacho for his help in preparing this blog post.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Xcode is a trademark of Apple Inc., registered in the U.S. and other countries.&lt;/em&gt;&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/mobile/&#34; rel=&#34;tag&#34;&gt;Mobile&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/11/16/introducing-xcremotecache-the-ios-remote-caching-tool-that-cut-our-clean-build-times-by-70/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify, we constantly work on creating the best developer experience possible for our iOS engineers. Improving build times is one of the most common requests for infrastructure teams and, as such, we constantly seek to improve our infrastructure toolchain. We are excited to be open sourcing X</summary>
    <author>
      <name>Published by Bartosz Polaczyk, Senior Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Introducing XCRemoteCache: The iOS Remote Caching Tool that Cut Our Clean Build Times by 70%&#xA;</title>
    <updated>2021-11-16T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-11-16:/introducing-xcremotecache-the-ios-remote-caching-tool-that-cut-our-clean-build-times-by-70/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;November 16, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/introducing-xcremotecache-the-ios-remote-caching-tool-that-cut-our-clean-build-times-by-70/&#34; title=&#34;Introducing XCRemoteCache: The iOS Remote Caching Tool that Cut Our Clean Build Times by 70%&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-768x378.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify, we constantly work on creating the best developer experience possible for our iOS engineers. Improving build times is one of the most common requests for infrastructure teams and, as such, we constantly seek to improve our infrastructure toolchain.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are excited to be open sourcing &lt;a href=&#34;https://github.com/spotify/XCRemoteCache&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;XCRemoteCache&lt;/a&gt;, the library we created to mitigate long local builds. As the name suggests, this library is a remote caching implementation for iOS projects with an aim to reuse Xcode target artifacts generated on Continuous Integration (CI) machines. It supports Objective-C, Swift, and ObjC+Swift targets and can be easily integrated with existing Xcode projects, including ones managed by CocoaPods or Carthage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Best of all, XCRemoteCache resulted in a &lt;strong&gt;70% decrease in clean build times&lt;/strong&gt; (we classify a build as &lt;em&gt;clean&lt;/em&gt; when at least 50% of all targets compile at least one file).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Using our Xcode build metrics (for more details on how this works, take a look at our open source &lt;a href=&#34;https://xcmetrics.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;XCMetrics project&lt;/a&gt;), we found out that it often takes our developers more than 10 minutes to build the main Spotify iOS application. Even though the number of these builds is relatively small (less than 3% of all builds), they take more than 50% of global building times (Figure 1). &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After some investigation, it was revealed that long-lasting builds usually happen after rebasing or merging remote branches. Implementing a remote cache solution was the perfect fit.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;354&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-700x354.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-700x354.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-768x389.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-120x61.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times.png 1205w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 1: Distribution of local machines’ build times and their total build times.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Remote cache principle&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A remote cache is a popular technique to speed up builds of big applications by applying the “compile once, use everywhere” approach. As long as all input files and compilation parameters are the same, instead of building a target locally, one can download artifacts that were built and shared from some other machine. A key success factor for remote caching is finding an optimal caching level. Caching units that are too granular, where every single piece of the compilation step is cacheable, may lead to extensive network traffic overhead, which can offset CPU savings. On the other hand, putting the entire codebase into a single cacheable unit may significantly degrade the caching hit rate; every single local change invalidates remotely available cache artifacts, triggering a full build, locally.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The main Spotify iOS application is highly modularized and contains more than 400 independent modules configured as separate Xcode targets. Applying target-level caching was natural, and as we found out later, the right decision.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Designing the remote cache solution &lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the design phase, our aim was to come up with a solution generic enough that it could be applied to a broad range of iOS applications with minimal or no project changes. That was an ambitious goal given how the Xcode build system works. Before going straight to the applied solution, let’s consider how an Xcode build actually works. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;How does XCRemoteCache work?&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In general, all caching mechanisms use a fingerprint of input files to recognize if build products can be reused. However, finding a precise set of these files is a nontrivial task. The Xcode build system is very liberal when it comes to dependency attribution. It tries to optimistically find a definition of the dependency (header files, &lt;code&gt;.swiftmodule&lt;/code&gt;, etc.) in all available search paths — provided either by the developer in the Xcode project settings or in the current build product directory. As a result, developers don’t have to explicitly specify all dependencies a target uses, but just have to make sure that those dependencies will be placed in a correct location &lt;em&gt;before&lt;/em&gt; Xcode actually needs them. The fact that compilers are able to implicitly find required dependencies, hinders the simple fingerprint generation by hashing all available files in header and framework search paths — a list of files to consider in the fingerprinting would often be too broad.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On the other hand, we observed that Xcode works quite well for local incremental builds and executes only a narrow subset of steps that were affected since the last build. In other words, the Xcode build system knows which files are the actual input files for the compilation, but that list is generated as compiler’s output (.d files) and is not available ahead of a compilation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;XCRemoteCache applies a unique approach to automatically identify all input files of the compilation based on Git history and dependency lists provided as a compilation output. The generation side, called &lt;em&gt;producer mode&lt;/em&gt;, along with the compilation product, also uploads a meta file. That file contains a list of all compilation files the compiler used and the full SHA-1 (Secure Hash Algorithm 1) commit identifier it was built against. The producer mode should run on CI for each primary branch (like &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;develop&lt;/code&gt;) commit, as a part of the post-merge phase.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On the consumer side (aka &lt;em&gt;consumer mode&lt;/em&gt;), XCRemoteCache finds the most recent history commit for which the remote server contains build artifacts and builds a fingerprint based on input files provided in the meta file. Let’s imagine two developers, &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, working on their local branches &lt;code&gt;featureA &lt;/code&gt;and &lt;code&gt;featureB&lt;/code&gt;, branching out from &lt;code&gt;master &lt;/code&gt;on &lt;code&gt;Commit1&lt;/code&gt; and &lt;code&gt;Commit3&lt;/code&gt;, respectively (Figure 2). A CI job that produces and uploads cache artifacts to the central server finished its work only for commits 1, 2, and 4. For some reason, &lt;code&gt;Commit3&lt;/code&gt; artifacts are not ready — either the build is in progress or it has failed. Developer A’s machine will reuse the artifacts generated for &lt;code&gt;Commit1&lt;/code&gt;, while Developer B’s takes them from &lt;code&gt;Commit2&lt;/code&gt; — it tried with &lt;code&gt;Commit3&lt;/code&gt;, but they are not ready yet.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;440&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-700x440.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-700x440.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-250x157.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-768x483.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-120x75.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts.png 1205w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 2: Finding a commit with artifacts to reuse.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;With that procedure, XCRemoteCache gets a strict list of input files almost for free.&lt;/p&gt;&lt;p&gt;Assuming we have an app split into several independent targets and local branches that don’t divert much from a primary branch, the caching hit rate will be high, minus only these targets that contain changes comparing the commit of which remote artifacts are used. &lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Build artifacts portability&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Another problem to consider is “build artifacts portability” between multiple machines. Several types of compilation output files include absolute paths, so for full compatibility, some kind of normalization is required. For iOS projects, such a step is required for &lt;code&gt;.swiftmodule&lt;/code&gt; files and debug symbols. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Projects cloned to &lt;code&gt;/dir1&lt;/code&gt; and &lt;code&gt;/dir2&lt;/code&gt; generate &lt;code&gt;.swiftmodule &lt;/code&gt;files that do not match on a byte level. Swiftmodule represents an inter-module API (Swift counterparts to .h) that can be included in the list of fingerprinting files. To overcome falsy cache misses if two machines don’t have the same absolute source root paths, XCRemoteCache carries an extra fingerprint file (called a fingerprint override) next to the &lt;code&gt;.swiftmodule &lt;/code&gt;that includes a fingerprint of all the files used in the compilation step. A fingerprint override is path agnostic, so contrary to the &lt;code&gt;.swiftmodule&lt;/code&gt; file, it can be used as a byte-level stable fingerprint of a Swift target. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Debug symbols, other path-sensitive files, are appended to the binary package to associate the machine code with the corresponding source location when debugging. The XCRemoteCache leverages support for LLDB runtime path rewrites using &lt;code&gt;settings set target.source-map&lt;/code&gt;. Both producer and consumer pass &lt;code&gt;debug-prefix-map&lt;/code&gt; parameters to the Swift and Clang compilers to align the source root of all debug symbols making the LLDB source mapping a simple, single-line command.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;The Spotify story&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify, we have fast, well-optimized CI jobs that no longer slow down our development feedback loop (please head to &lt;a href=&#34;https://engineering.atspotify.com/2020/05/01/how-we-gave-superpowers-to-our-macos-ci/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;How We Gave Superpowers to Our macOS CI&lt;/a&gt; to read more about that), so we focused on applying XCRemoteCache on local machines. Keep in mind that the tool is able to work on CI machines and accelerate PR jobs, too.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In controlled conditions, XCRemoteCache was able to cut the very first iOS Spotify application build time by 85%. This was a great achievement, but in practice, developers introduce changes locally, and some targets have to be compiled locally. Our goal was to evaluate real-world scenarios to understand their true impact. To estimate that, we rolled out the remote cache to 50% of our developers for a week and compared all build metrics. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Results exceeded our expectations — we observed a huge improvement of the local build times: &lt;strong&gt;median clean build and incremental build times decreased by 70% and 6%, respectively. &lt;/strong&gt;We classify builds as &lt;em&gt;clean&lt;/em&gt; when at least 50% of all targets compile at least one file.  Other builds that compile at least one file are &lt;em&gt;incremental&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, we enabled XCRemoteCache into our main application more than a year ago, and since then, it has worked flawlessly. We get very positive feedback from our developers and, as a side effect, we’ve seen the portion of clean builds almost double compared to the pre-remote cache times. Developers nowadays are twice more likely to rebase their working branches, eventually leading to fewer conflicts when creating a pull request. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;How to integrate XCRemoteCache into your existing project&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that XCRemoteCache is open source, you can apply it to your own project with minimum effort. It supports multiple project setups, including the ones managed by CocoaPods, Carthage, or any other custom dependency management. Keep in mind, though, that for best results, your project should be split into several targets or you risk frequent cache invalidations, as described above.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;For seamless integration, we are open sourcing a &lt;a href=&#34;https://github.com/spotify/XCRemoteCache/tree/master/cocoapods-plugin&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CocoaPods plugin&lt;/a&gt; and provide an automated script to modify the existing .xcodeproj project.&lt;/p&gt;&lt;p&gt;XCRemoteCache works with any HTTP server that supports PUT, HEAD, and GET requests. You are free to pick a server that works best for you, including the two popular storage options provided by Amazon S3 and Google’s Google Cloud Storage. We also provide a simple docker image that hosts a local server, perfect for the development phase.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With that in place, you should be able to try out XCRemoteCache within minutes. For a list of integration steps, head to the &lt;a href=&#34;https://github.com/spotify/XCRemoteCache#how-to-integrate-xcremotecache-with-your-xcode-project&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;How-to&lt;/em&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;section in the GitHub repo.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Contributing to XCRemoteCache&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The XCRemoteCache tool is written fully in Swift, so iOS developers can easily familiarize themselves with the codebase and potentially contribute to it. We tried to cover most of the common scenarios but, keeping in mind that Xcode projects may have very custom setups, some of them may not be compatible right now. Therefore, any inputs from the community, both raising issues or pull requests, are very welcome. We believe that, together, we will be able to move the project even further and support a wider audience of iOS developers. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you want to contribute to the codebase, make sure to check out our &lt;a href=&#34;https://github.com/spotify/XCRemoteCache/blob/master/docs/Development.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;development&lt;/a&gt; guide. And if you want to work full-time on tools like that, please check out our &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.lifeatspotify.com/jobs&#34; target=&#34;_blank&#34;&gt;open job positions&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I want to personally thank Erick Camacho for his help in preparing this blog post.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Xcode is a trademark of Apple Inc., registered in the U.S. and other countries.&lt;/em&gt;&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/mobile/&#34; rel=&#34;tag&#34;&gt;Mobile&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/introducing-xcremotecache-the-ios-remote-caching-tool-that-cut-our-clean-build-times-by-70/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify, we constantly work on creating the best developer experience possible for our iOS engineers. Improving build times is one of the most common requests for infrastructure teams and, as such, we constantly seek to improve our infrastructure toolchain. We are excited to be open sourcing X</summary>
    <author>
      <name>Published by Bartosz Polaczyk, Senior Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Introducing XCRemoteCache: The iOS Remote Caching Tool that Cut Our Clean Build Times by 70%&#xA;</title>
    <updated>2021-11-16T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-11-16:/2021/11/introducing-xcremotecache-the-ios-remote-caching-tool-that-cut-our-clean-build-times-by-70/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;November 16, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/11/introducing-xcremotecache-the-ios-remote-caching-tool-that-cut-our-clean-build-times-by-70/&#34; title=&#34;Introducing XCRemoteCache: The iOS Remote Caching Tool that Cut Our Clean Build Times by 70%&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-768x378.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify, we constantly work on creating the best developer experience possible for our iOS engineers. Improving build times is one of the most common requests for infrastructure teams and, as such, we constantly seek to improve our infrastructure toolchain.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are excited to be open sourcing &lt;a href=&#34;https://github.com/spotify/XCRemoteCache&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;XCRemoteCache&lt;/a&gt;, the library we created to mitigate long local builds. As the name suggests, this library is a remote caching implementation for iOS projects with an aim to reuse Xcode target artifacts generated on Continuous Integration (CI) machines. It supports Objective-C, Swift, and ObjC+Swift targets and can be easily integrated with existing Xcode projects, including ones managed by CocoaPods or Carthage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Best of all, XCRemoteCache resulted in a &lt;strong&gt;70% decrease in clean build times&lt;/strong&gt; (we classify a build as &lt;em&gt;clean&lt;/em&gt; when at least 50% of all targets compile at least one file).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Using our Xcode build metrics (for more details on how this works, take a look at our open source &lt;a href=&#34;https://xcmetrics.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;XCMetrics project&lt;/a&gt;), we found out that it often takes our developers more than 10 minutes to build the main Spotify iOS application. Even though the number of these builds is relatively small (less than 3% of all builds), they take more than 50% of global building times (Figure 1). &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After some investigation, it was revealed that long-lasting builds usually happen after rebasing or merging remote branches. Implementing a remote cache solution was the perfect fit.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;354&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-700x354.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-700x354.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-768x389.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-120x61.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times.png 1205w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 1: Distribution of local machines’ build times and their total build times.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Remote cache principle&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A remote cache is a popular technique to speed up builds of big applications by applying the “compile once, use everywhere” approach. As long as all input files and compilation parameters are the same, instead of building a target locally, one can download artifacts that were built and shared from some other machine. A key success factor for remote caching is finding an optimal caching level. Caching units that are too granular, where every single piece of the compilation step is cacheable, may lead to extensive network traffic overhead, which can offset CPU savings. On the other hand, putting the entire codebase into a single cacheable unit may significantly degrade the caching hit rate; every single local change invalidates remotely available cache artifacts, triggering a full build, locally.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The main Spotify iOS application is highly modularized and contains more than 400 independent modules configured as separate Xcode targets. Applying target-level caching was natural, and as we found out later, the right decision.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Designing the remote cache solution &lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the design phase, our aim was to come up with a solution generic enough that it could be applied to a broad range of iOS applications with minimal or no project changes. That was an ambitious goal given how the Xcode build system works. Before going straight to the applied solution, let’s consider how an Xcode build actually works. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;How does XCRemoteCache work?&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In general, all caching mechanisms use a fingerprint of input files to recognize if build products can be reused. However, finding a precise set of these files is a nontrivial task. The Xcode build system is very liberal when it comes to dependency attribution. It tries to optimistically find a definition of the dependency (header files, &lt;code&gt;.swiftmodule&lt;/code&gt;, etc.) in all available search paths — provided either by the developer in the Xcode project settings or in the current build product directory. As a result, developers don’t have to explicitly specify all dependencies a target uses, but just have to make sure that those dependencies will be placed in a correct location &lt;em&gt;before&lt;/em&gt; Xcode actually needs them. The fact that compilers are able to implicitly find required dependencies, hinders the simple fingerprint generation by hashing all available files in header and framework search paths — a list of files to consider in the fingerprinting would often be too broad.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On the other hand, we observed that Xcode works quite well for local incremental builds and executes only a narrow subset of steps that were affected since the last build. In other words, the Xcode build system knows which files are the actual input files for the compilation, but that list is generated as compiler’s output (.d files) and is not available ahead of a compilation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;XCRemoteCache applies a unique approach to automatically identify all input files of the compilation based on Git history and dependency lists provided as a compilation output. The generation side, called &lt;em&gt;producer mode&lt;/em&gt;, along with the compilation product, also uploads a meta file. That file contains a list of all compilation files the compiler used and the full SHA-1 (Secure Hash Algorithm 1) commit identifier it was built against. The producer mode should run on CI for each primary branch (like &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;develop&lt;/code&gt;) commit, as a part of the post-merge phase.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On the consumer side (aka &lt;em&gt;consumer mode&lt;/em&gt;), XCRemoteCache finds the most recent history commit for which the remote server contains build artifacts and builds a fingerprint based on input files provided in the meta file. Let’s imagine two developers, &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, working on their local branches &lt;code&gt;featureA &lt;/code&gt;and &lt;code&gt;featureB&lt;/code&gt;, branching out from &lt;code&gt;master &lt;/code&gt;on &lt;code&gt;Commit1&lt;/code&gt; and &lt;code&gt;Commit3&lt;/code&gt;, respectively (Figure 2). A CI job that produces and uploads cache artifacts to the central server finished its work only for commits 1, 2, and 4. For some reason, &lt;code&gt;Commit3&lt;/code&gt; artifacts are not ready — either the build is in progress or it has failed. Developer A’s machine will reuse the artifacts generated for &lt;code&gt;Commit1&lt;/code&gt;, while Developer B’s takes them from &lt;code&gt;Commit2&lt;/code&gt; — it tried with &lt;code&gt;Commit3&lt;/code&gt;, but they are not ready yet.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;440&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-700x440.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-700x440.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-250x157.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-768x483.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-120x75.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts.png 1205w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 2: Finding a commit with artifacts to reuse.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;With that procedure, XCRemoteCache gets a strict list of input files almost for free.&lt;/p&gt;&lt;p&gt;Assuming we have an app split into several independent targets and local branches that don’t divert much from a primary branch, the caching hit rate will be high, minus only these targets that contain changes comparing the commit of which remote artifacts are used. &lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Build artifacts portability&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Another problem to consider is “build artifacts portability” between multiple machines. Several types of compilation output files include absolute paths, so for full compatibility, some kind of normalization is required. For iOS projects, such a step is required for &lt;code&gt;.swiftmodule&lt;/code&gt; files and debug symbols. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Projects cloned to &lt;code&gt;/dir1&lt;/code&gt; and &lt;code&gt;/dir2&lt;/code&gt; generate &lt;code&gt;.swiftmodule &lt;/code&gt;files that do not match on a byte level. Swiftmodule represents an inter-module API (Swift counterparts to .h) that can be included in the list of fingerprinting files. To overcome falsy cache misses if two machines don’t have the same absolute source root paths, XCRemoteCache carries an extra fingerprint file (called a fingerprint override) next to the &lt;code&gt;.swiftmodule &lt;/code&gt;that includes a fingerprint of all the files used in the compilation step. A fingerprint override is path agnostic, so contrary to the &lt;code&gt;.swiftmodule&lt;/code&gt; file, it can be used as a byte-level stable fingerprint of a Swift target. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Debug symbols, other path-sensitive files, are appended to the binary package to associate the machine code with the corresponding source location when debugging. The XCRemoteCache leverages support for LLDB runtime path rewrites using &lt;code&gt;settings set target.source-map&lt;/code&gt;. Both producer and consumer pass &lt;code&gt;debug-prefix-map&lt;/code&gt; parameters to the Swift and Clang compilers to align the source root of all debug symbols making the LLDB source mapping a simple, single-line command.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;The Spotify story&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify, we have fast, well-optimized CI jobs that no longer slow down our development feedback loop (please head to &lt;a href=&#34;https://engineering.atspotify.com/2020/05/01/how-we-gave-superpowers-to-our-macos-ci/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;How We Gave Superpowers to Our macOS CI&lt;/a&gt; to read more about that), so we focused on applying XCRemoteCache on local machines. Keep in mind that the tool is able to work on CI machines and accelerate PR jobs, too.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In controlled conditions, XCRemoteCache was able to cut the very first iOS Spotify application build time by 85%. This was a great achievement, but in practice, developers introduce changes locally, and some targets have to be compiled locally. Our goal was to evaluate real-world scenarios to understand their true impact. To estimate that, we rolled out the remote cache to 50% of our developers for a week and compared all build metrics. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Results exceeded our expectations — we observed a huge improvement of the local build times: &lt;strong&gt;median clean build and incremental build times decreased by 70% and 6%, respectively. &lt;/strong&gt;We classify builds as &lt;em&gt;clean&lt;/em&gt; when at least 50% of all targets compile at least one file.  Other builds that compile at least one file are &lt;em&gt;incremental&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, we enabled XCRemoteCache into our main application more than a year ago, and since then, it has worked flawlessly. We get very positive feedback from our developers and, as a side effect, we’ve seen the portion of clean builds almost double compared to the pre-remote cache times. Developers nowadays are twice more likely to rebase their working branches, eventually leading to fewer conflicts when creating a pull request. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;How to integrate XCRemoteCache into your existing project&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that XCRemoteCache is open source, you can apply it to your own project with minimum effort. It supports multiple project setups, including the ones managed by CocoaPods, Carthage, or any other custom dependency management. Keep in mind, though, that for best results, your project should be split into several targets or you risk frequent cache invalidations, as described above.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;For seamless integration, we are open sourcing a &lt;a href=&#34;https://github.com/spotify/XCRemoteCache/tree/master/cocoapods-plugin&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CocoaPods plugin&lt;/a&gt; and provide an automated script to modify the existing .xcodeproj project.&lt;/p&gt;&lt;p&gt;XCRemoteCache works with any HTTP server that supports PUT, HEAD, and GET requests. You are free to pick a server that works best for you, including the two popular storage options provided by Amazon S3 and Google’s Google Cloud Storage. We also provide a simple docker image that hosts a local server, perfect for the development phase.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With that in place, you should be able to try out XCRemoteCache within minutes. For a list of integration steps, head to the &lt;a href=&#34;https://github.com/spotify/XCRemoteCache#how-to-integrate-xcremotecache-with-your-xcode-project&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;How-to&lt;/em&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;section in the GitHub repo.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Contributing to XCRemoteCache&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The XCRemoteCache tool is written fully in Swift, so iOS developers can easily familiarize themselves with the codebase and potentially contribute to it. We tried to cover most of the common scenarios but, keeping in mind that Xcode projects may have very custom setups, some of them may not be compatible right now. Therefore, any inputs from the community, both raising issues or pull requests, are very welcome. We believe that, together, we will be able to move the project even further and support a wider audience of iOS developers. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you want to contribute to the codebase, make sure to check out our &lt;a href=&#34;https://github.com/spotify/XCRemoteCache/blob/master/docs/Development.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;development&lt;/a&gt; guide. And if you want to work full-time on tools like that, please check out our &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.lifeatspotify.com/jobs&#34; target=&#34;_blank&#34;&gt;open job positions&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I want to personally thank Erick Camacho for his help in preparing this blog post.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Xcode is a trademark of Apple Inc., registered in the U.S. and other countries.&lt;/em&gt;&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/mobile/&#34; rel=&#34;tag&#34;&gt;Mobile&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/11/introducing-xcremotecache-the-ios-remote-caching-tool-that-cut-our-clean-build-times-by-70/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify, we constantly work on creating the best developer experience possible for our iOS engineers. Improving build times is one of the most common requests for infrastructure teams and, as such, we constantly seek to improve our infrastructure toolchain. We are excited to be open sourcing X</summary>
    <author>
      <name>Published by Bartosz Polaczyk, Senior Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Introducing XCRemoteCache: The iOS Remote Caching Tool that Cut Our Clean Build Times by 70%&#xA;</title>
    <updated>2021-11-16T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-11-16:/introducing-xcremotecache-the-ios-remote-caching-tool-that-cut-our-clean-build-times-by-70/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;November 16, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/introducing-xcremotecache-the-ios-remote-caching-tool-that-cut-our-clean-build-times-by-70/&#34; title=&#34;Introducing XCRemoteCache: The iOS Remote Caching Tool that Cut Our Clean Build Times by 70%&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-768x378.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify, we constantly work on creating the best developer experience possible for our iOS engineers. Improving build times is one of the most common requests for infrastructure teams and, as such, we constantly seek to improve our infrastructure toolchain.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are excited to be open sourcing &lt;a href=&#34;https://github.com/spotify/XCRemoteCache&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;XCRemoteCache&lt;/a&gt;, the library we created to mitigate long local builds. As the name suggests, this library is a remote caching implementation for iOS projects with an aim to reuse Xcode target artifacts generated on Continuous Integration (CI) machines. It supports Objective-C, Swift, and ObjC+Swift targets and can be easily integrated with existing Xcode projects, including ones managed by CocoaPods or Carthage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Best of all, XCRemoteCache resulted in a &lt;strong&gt;70% decrease in clean build times&lt;/strong&gt; (we classify a build as &lt;em&gt;clean&lt;/em&gt; when at least 50% of all targets compile at least one file).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Using our Xcode build metrics (for more details on how this works, take a look at our open source &lt;a href=&#34;https://xcmetrics.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;XCMetrics project&lt;/a&gt;), we found out that it often takes our developers more than 10 minutes to build the main Spotify iOS application. Even though the number of these builds is relatively small (less than 3% of all builds), they take more than 50% of global building times (Figure 1). &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After some investigation, it was revealed that long-lasting builds usually happen after rebasing or merging remote branches. Implementing a remote cache solution was the perfect fit.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;354&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-700x354.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-700x354.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-768x389.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times-120x61.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/BuildsBuild-Times.png 1205w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 1: Distribution of local machines’ build times and their total build times.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Remote cache principle&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A remote cache is a popular technique to speed up builds of big applications by applying the “compile once, use everywhere” approach. As long as all input files and compilation parameters are the same, instead of building a target locally, one can download artifacts that were built and shared from some other machine. A key success factor for remote caching is finding an optimal caching level. Caching units that are too granular, where every single piece of the compilation step is cacheable, may lead to extensive network traffic overhead, which can offset CPU savings. On the other hand, putting the entire codebase into a single cacheable unit may significantly degrade the caching hit rate; every single local change invalidates remotely available cache artifacts, triggering a full build, locally.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The main Spotify iOS application is highly modularized and contains more than 400 independent modules configured as separate Xcode targets. Applying target-level caching was natural, and as we found out later, the right decision.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Designing the remote cache solution &lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the design phase, our aim was to come up with a solution generic enough that it could be applied to a broad range of iOS applications with minimal or no project changes. That was an ambitious goal given how the Xcode build system works. Before going straight to the applied solution, let’s consider how an Xcode build actually works. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;How does XCRemoteCache work?&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In general, all caching mechanisms use a fingerprint of input files to recognize if build products can be reused. However, finding a precise set of these files is a nontrivial task. The Xcode build system is very liberal when it comes to dependency attribution. It tries to optimistically find a definition of the dependency (header files, &lt;code&gt;.swiftmodule&lt;/code&gt;, etc.) in all available search paths — provided either by the developer in the Xcode project settings or in the current build product directory. As a result, developers don’t have to explicitly specify all dependencies a target uses, but just have to make sure that those dependencies will be placed in a correct location &lt;em&gt;before&lt;/em&gt; Xcode actually needs them. The fact that compilers are able to implicitly find required dependencies, hinders the simple fingerprint generation by hashing all available files in header and framework search paths — a list of files to consider in the fingerprinting would often be too broad.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On the other hand, we observed that Xcode works quite well for local incremental builds and executes only a narrow subset of steps that were affected since the last build. In other words, the Xcode build system knows which files are the actual input files for the compilation, but that list is generated as compiler’s output (.d files) and is not available ahead of a compilation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;XCRemoteCache applies a unique approach to automatically identify all input files of the compilation based on Git history and dependency lists provided as a compilation output. The generation side, called &lt;em&gt;producer mode&lt;/em&gt;, along with the compilation product, also uploads a meta file. That file contains a list of all compilation files the compiler used and the full SHA-1 (Secure Hash Algorithm 1) commit identifier it was built against. The producer mode should run on CI for each primary branch (like &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;develop&lt;/code&gt;) commit, as a part of the post-merge phase.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On the consumer side (aka &lt;em&gt;consumer mode&lt;/em&gt;), XCRemoteCache finds the most recent history commit for which the remote server contains build artifacts and builds a fingerprint based on input files provided in the meta file. Let’s imagine two developers, &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, working on their local branches &lt;code&gt;featureA &lt;/code&gt;and &lt;code&gt;featureB&lt;/code&gt;, branching out from &lt;code&gt;master &lt;/code&gt;on &lt;code&gt;Commit1&lt;/code&gt; and &lt;code&gt;Commit3&lt;/code&gt;, respectively (Figure 2). A CI job that produces and uploads cache artifacts to the central server finished its work only for commits 1, 2, and 4. For some reason, &lt;code&gt;Commit3&lt;/code&gt; artifacts are not ready — either the build is in progress or it has failed. Developer A’s machine will reuse the artifacts generated for &lt;code&gt;Commit1&lt;/code&gt;, while Developer B’s takes them from &lt;code&gt;Commit2&lt;/code&gt; — it tried with &lt;code&gt;Commit3&lt;/code&gt;, but they are not ready yet.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;440&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-700x440.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-700x440.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-250x157.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-768x483.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts-120x75.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Commit_Artifacts.png 1205w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 2: Finding a commit with artifacts to reuse.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;With that procedure, XCRemoteCache gets a strict list of input files almost for free.&lt;/p&gt;&lt;p&gt;Assuming we have an app split into several independent targets and local branches that don’t divert much from a primary branch, the caching hit rate will be high, minus only these targets that contain changes comparing the commit of which remote artifacts are used. &lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Build artifacts portability&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Another problem to consider is “build artifacts portability” between multiple machines. Several types of compilation output files include absolute paths, so for full compatibility, some kind of normalization is required. For iOS projects, such a step is required for &lt;code&gt;.swiftmodule&lt;/code&gt; files and debug symbols. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Projects cloned to &lt;code&gt;/dir1&lt;/code&gt; and &lt;code&gt;/dir2&lt;/code&gt; generate &lt;code&gt;.swiftmodule &lt;/code&gt;files that do not match on a byte level. Swiftmodule represents an inter-module API (Swift counterparts to .h) that can be included in the list of fingerprinting files. To overcome falsy cache misses if two machines don’t have the same absolute source root paths, XCRemoteCache carries an extra fingerprint file (called a fingerprint override) next to the &lt;code&gt;.swiftmodule &lt;/code&gt;that includes a fingerprint of all the files used in the compilation step. A fingerprint override is path agnostic, so contrary to the &lt;code&gt;.swiftmodule&lt;/code&gt; file, it can be used as a byte-level stable fingerprint of a Swift target. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Debug symbols, other path-sensitive files, are appended to the binary package to associate the machine code with the corresponding source location when debugging. The XCRemoteCache leverages support for LLDB runtime path rewrites using &lt;code&gt;settings set target.source-map&lt;/code&gt;. Both producer and consumer pass &lt;code&gt;debug-prefix-map&lt;/code&gt; parameters to the Swift and Clang compilers to align the source root of all debug symbols making the LLDB source mapping a simple, single-line command.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;The Spotify story&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify, we have fast, well-optimized CI jobs that no longer slow down our development feedback loop (please head to &lt;a href=&#34;https://engineering.atspotify.com/2020/05/01/how-we-gave-superpowers-to-our-macos-ci/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;How We Gave Superpowers to Our macOS CI&lt;/a&gt; to read more about that), so we focused on applying XCRemoteCache on local machines. Keep in mind that the tool is able to work on CI machines and accelerate PR jobs, too.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In controlled conditions, XCRemoteCache was able to cut the very first iOS Spotify application build time by 85%. This was a great achievement, but in practice, developers introduce changes locally, and some targets have to be compiled locally. Our goal was to evaluate real-world scenarios to understand their true impact. To estimate that, we rolled out the remote cache to 50% of our developers for a week and compared all build metrics. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Results exceeded our expectations — we observed a huge improvement of the local build times: &lt;strong&gt;median clean build and incremental build times decreased by 70% and 6%, respectively. &lt;/strong&gt;We classify builds as &lt;em&gt;clean&lt;/em&gt; when at least 50% of all targets compile at least one file.  Other builds that compile at least one file are &lt;em&gt;incremental&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, we enabled XCRemoteCache into our main application more than a year ago, and since then, it has worked flawlessly. We get very positive feedback from our developers and, as a side effect, we’ve seen the portion of clean builds almost double compared to the pre-remote cache times. Developers nowadays are twice more likely to rebase their working branches, eventually leading to fewer conflicts when creating a pull request. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;How to integrate XCRemoteCache into your existing project&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that XCRemoteCache is open source, you can apply it to your own project with minimum effort. It supports multiple project setups, including the ones managed by CocoaPods, Carthage, or any other custom dependency management. Keep in mind, though, that for best results, your project should be split into several targets or you risk frequent cache invalidations, as described above.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;For seamless integration, we are open sourcing a &lt;a href=&#34;https://github.com/spotify/XCRemoteCache/tree/master/cocoapods-plugin&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CocoaPods plugin&lt;/a&gt; and provide an automated script to modify the existing .xcodeproj project.&lt;/p&gt;&lt;p&gt;XCRemoteCache works with any HTTP server that supports PUT, HEAD, and GET requests. You are free to pick a server that works best for you, including the two popular storage options provided by Amazon S3 and Google’s Google Cloud Storage. We also provide a simple docker image that hosts a local server, perfect for the development phase.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With that in place, you should be able to try out XCRemoteCache within minutes. For a list of integration steps, head to the &lt;a href=&#34;https://github.com/spotify/XCRemoteCache#how-to-integrate-xcremotecache-with-your-xcode-project&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;How-to&lt;/em&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;section in the GitHub repo.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Contributing to XCRemoteCache&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The XCRemoteCache tool is written fully in Swift, so iOS developers can easily familiarize themselves with the codebase and potentially contribute to it. We tried to cover most of the common scenarios but, keeping in mind that Xcode projects may have very custom setups, some of them may not be compatible right now. Therefore, any inputs from the community, both raising issues or pull requests, are very welcome. We believe that, together, we will be able to move the project even further and support a wider audience of iOS developers. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you want to contribute to the codebase, make sure to check out our &lt;a href=&#34;https://github.com/spotify/XCRemoteCache/blob/master/docs/Development.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;development&lt;/a&gt; guide. And if you want to work full-time on tools like that, please check out our &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.lifeatspotify.com/jobs&#34; target=&#34;_blank&#34;&gt;open job positions&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I want to personally thank Erick Camacho for his help in preparing this blog post.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Xcode is a trademark of Apple Inc., registered in the U.S. and other countries.&lt;/em&gt;&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/mobile/&#34; rel=&#34;tag&#34;&gt;Mobile&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/introducing-xcremotecache-the-ios-remote-caching-tool-that-cut-our-clean-build-times-by-70/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify, we constantly work on creating the best developer experience possible for our iOS engineers. Improving build times is one of the most common requests for infrastructure teams and, as such, we constantly seek to improve our infrastructure toolchain. We are excited to be open sourcing X</summary>
    <author>
      <name>Published by Bartosz Polaczyk, Senior Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part I)&#xA;</title>
    <updated>2021-11-15T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-11-15:/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;November 15, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/&#34; title=&#34;The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part I)&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-768x378.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify, our goal is to connect listeners with creators, and one way we do that is by recommending quality music and podcasts on the Home page. In this two-part blog series, we will talk about the ML models we build and use to recommend diverse and fulfilling content to our listeners, and the lessons we’ve learned from building the ML stack that serves these models.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Machine learning is central to how we personalize the Home page user experience and connect listeners to the creators that are most relevant to them. Like many recommendation systems, the &lt;a href=&#34;https://engineering.atspotify.com/2020/01/16/for-your-ears-only-personalizing-spotify-home-with-machine-learning/&#34;&gt;Spotify Home page recommendations are powered&lt;/a&gt; by two stages: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Stage 1: Candidate generation:&lt;/strong&gt; The best albums, playlists, artists, and podcasts are selected for each listener.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Stage 2: Ranking:&lt;/strong&gt; Candidates are ranked in the best order for each listener.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In Part I of this series, we’ll focus on the first stage — the machine learning solutions we’ve built to personalize the content for listeners’ Home pages and, specifically, the lessons we’ve learned in building, experimenting, and deploying these models. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Home @ Spotify&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-700x772.png&#34; alt=&#34;&#34; width=&#34;303&#34; height=&#34;334&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-700x772.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-250x276.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-768x847.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-1393x1536.png 1393w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-120x132.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home.png 1642w&#34; sizes=&#34;(max-width: 303px) 100vw, 303px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Home page consists of cards — the square items that represent an album, playlist, etc. — and shelves — the horizontal rows that contain multiple cards. We generate personalized content for listeners’ Home pages, algorithmically curating the music and podcasts that are shown to listeners in the shelves on Home. Some content is generated via heuristics and rules and some content is manually curated by editors, while other content is generated via predictions using trained models. We currently have a number of models running in production, each one powering content curation for a different shelf, but we will be discussing three of those models in this post, including: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;The Podcast Model:&lt;/strong&gt; Predicts podcasts a listener is likely to listen to in the &lt;em&gt;Shows you might like&lt;/em&gt; shelf. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Shortcuts Model: &lt;/strong&gt;Predicts the listener’s next familiar listen in the Shortcuts feature. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Playlists Model: &lt;/strong&gt;Predicts the playlists a new listener is likely to listen to in the &lt;em&gt;Try something else&lt;/em&gt; shelf.  &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-700x638.png&#34; alt=&#34;&#34; width=&#34;411&#34; height=&#34;375&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-700x638.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-250x228.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-768x700.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-1536x1400.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-120x109.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2.png 1999w&#34; sizes=&#34;(max-width: 411px) 100vw, 411px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since we launched our first model to recommend content on Home, we have worked to improve our ML stack and processes in order to experiment and productionize models more quickly and reliably.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The road to simplicity and automation&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As anyone who may have contributed to operationalizing an ML model knows, moving a model from experimentation to production is no easy feat. There are numerous challenges in managing the data that goes into a model, running and tracking experiments, and monitoring and retraining models. While we have always tried to keep our ML infrastructure simple, and as close to the sources of features as possible, it has become drastically easier for our squads to deploy and maintain models now than when we started.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At a high level, an ML workflow can be broken down into three main phases: 1) data management, 2) experimentation, and 3) operationalization.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-700x146.png&#34; alt=&#34;&#34; width=&#34;784&#34; height=&#34;164&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-700x146.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-250x52.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-768x160.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-120x25.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow.png 1351w&#34; sizes=&#34;(max-width: 784px) 100vw, 784px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s common to iteratively work on the training and evaluation phase until a final model version is selected as the best. This model is then deployed to production systems and can start making predictions for listeners. Similar to most production systems, models (and the services/pipelines that serve them) should be monitored closely. To keep a model up to date (which is more important for some tasks than others; more to come on this), retraining and model versioning are the last steps in our workflow. This part of our stack and workflow has had significant changes since our first model — making batch predictions (offline) of content listeners are likely to stream — to now, where all our models are served in real time. The figure below shows where our machine learning stack started and where we are now:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;533&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-700x533.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-700x533.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-250x190.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-768x584.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-120x91.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going.png 1012w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our current ML stack automates a lot of the processes involved in maintaining models in production (with online serving): we have automated feature logging instrumented in our serving infrastructure, with both scheduled Scio pipelines to transform these features and Kubeflow pipelines to retrain weekly. We have also implemented data validation of our training and serving features (as well as validation between subsequent training datasets) to verify our features are consistent and follow the same distributions at training and inference times. In our Kubeflow pipelines, we have components that check the evaluation score and automatically push the model to production if the score is above our threshold. With this stack, we monitor and alert on the automatic data validation pipeline, as well as the online deployments of our models — allowing us to handle any issues as soon as they arise.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With a lot of effort and many lessons learned, our ML stack has evolved to make these processes automated and more reliable, enabling us to iterate faster to improve our models and increase our engineering productivity. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How we unified training and serving data&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we first start to think about a problem, we always dig into the data first — what data would be useful? What data is available? And then we take a really close look at the data that will be used for features, characterizing what is in the dataset and identifying the edge cases in the data. We feel fairly confident about the contents of the data used for our training features as well as what the transformed data looks like, but features fetched and transformed at &lt;em&gt;serving&lt;/em&gt; time are an entirely different story. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Batch training data and batch predictions&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Historically, we have had one set of infrastructure for fetching and transforming features during experimentation (training) and a different set of infrastructure for fetching and transforming features for making predictions (serving). &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Then we started to make online predictions (… with the wrong data)&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we changed the Podcast Model from making batch offline predictions to serving in real time, we set up a new service that could support this — this new service had to fetch and transform features, make the prediction, and respond to the request. The important part here is that the feature processing and transformation was now in a different place than where the corresponding training feature processing took place. And, unfortunately, models are like black boxes, so testing the output is difficult, if not impossible. A while ago, we discovered that we had been transforming one of the model’s features slightly differently at training time than at serving time, leading to potentially degraded recommendations — and there was no way to detect this, so it continued to happen for four months.Think about this for just a second. Such a simple part of our stack — at most, a few lines of code — was doing the wrong thing and impacted the recommendations produced by our model. Our short-term fix was to simply change the one line of code in our prediction service that was causing the issue, but we knew long term that we needed to either have a single source of data for both training and serving, or we needed to ensure that data was produced and transformed the same way in both stages.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;One transformation implementation to rule them all&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our first approach was to make any feature processing and transformation occur in the same code path, so that training and serving features would be processed identically. Taking the Shortcuts Model as an example again, our goal was to get rid of the Python service that transformed training features — this service was always running and constantly checking, on all days, to see if it was a Monday; if so, then it would request data from the necessary service (at a rate-limited 5 requests/second) and transform them into features; ideally, this would have been implemented as a pipeline, but we couldn’t schedule and orchestrate it because the process took more than 24 hours. There were many reasons we wanted to migrate away from this approach, but logging features when the only data source for features is a different service (owned by a different squad) proved difficult. Using our serving infrastructure’s feature logging capabilities, we could automatically log already transformed features, which could later be used for training. At this point, all of our features for training and serving were being transformed by code in the Java service. And we now use this feature logging for all of our models both to solve this problem, and also because it reduces the amount of additional infrastructure we need to support.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;But wait, we can do more by validating our data&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The second approach we took to ensure our training and serving features did not differ was to use Tensorflow Data Validation (TFDV) to compare training and serving data schemas and feature distributions on a daily basis. The alerting we have added to our data validation pipeline allows us to detect significant differences in our feature sets — it uses the Chebyshev distance metric, which compares the distance between two vectors, and can help alert us to drift in training and serving features.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While we knew that understanding what is in our data is crucial, we quickly learned that it’s easy to make mistakes when moving models to production because the data often uses a different processing library. We didn’t expect many data differences, but validating and alerting on issues lets us know if something changed, and how we should remediate the issue.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Stay tuned for Part II as we take a closer look at how we evaluate our models using offline and online metrics, why it’s so important to actually look at the recommendations we are making, and the challenges we faced in our journey to CI/CD in model retraining. &lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify, our goal is to connect listeners with creators, and one way we do that is by recommending quality music and podcasts on the Home page. In this two-part blog series, we will talk about the ML models we build and use to recommend diverse and fulfilling content to our listeners, and the les</summary>
    <author>
      <name>Published by Annie Edmundson, Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part I)&#xA;</title>
    <updated>2021-11-15T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-11-15:/2021/11/15/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;November 15, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/11/15/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/&#34; title=&#34;The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part I)&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-768x378.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify, our goal is to connect listeners with creators, and one way we do that is by recommending quality music and podcasts on the Home page. In this two-part blog series, we will talk about the ML models we build and use to recommend diverse and fulfilling content to our listeners, and the lessons we’ve learned from building the ML stack that serves these models.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Machine learning is central to how we personalize the Home page user experience and connect listeners to the creators that are most relevant to them. Like many recommendation systems, the &lt;a href=&#34;https://engineering.atspotify.com/2020/01/16/for-your-ears-only-personalizing-spotify-home-with-machine-learning/&#34;&gt;Spotify Home page recommendations are powered&lt;/a&gt; by two stages: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Stage 1: Candidate generation:&lt;/strong&gt; The best albums, playlists, artists, and podcasts are selected for each listener.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Stage 2: Ranking:&lt;/strong&gt; Candidates are ranked in the best order for each listener.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In Part I of this series, we’ll focus on the first stage — the machine learning solutions we’ve built to personalize the content for listeners’ Home pages and, specifically, the lessons we’ve learned in building, experimenting, and deploying these models. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Home @ Spotify&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-700x772.png&#34; alt=&#34;&#34; width=&#34;303&#34; height=&#34;334&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-700x772.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-250x276.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-768x847.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-1393x1536.png 1393w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-120x132.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home.png 1642w&#34; sizes=&#34;(max-width: 303px) 100vw, 303px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Home page consists of cards — the square items that represent an album, playlist, etc. — and shelves — the horizontal rows that contain multiple cards. We generate personalized content for listeners’ Home pages, algorithmically curating the music and podcasts that are shown to listeners in the shelves on Home. Some content is generated via heuristics and rules and some content is manually curated by editors, while other content is generated via predictions using trained models. We currently have a number of models running in production, each one powering content curation for a different shelf, but we will be discussing three of those models in this post, including: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;The Podcast Model:&lt;/strong&gt; Predicts podcasts a listener is likely to listen to in the &lt;em&gt;Shows you might like&lt;/em&gt; shelf. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Shortcuts Model: &lt;/strong&gt;Predicts the listener’s next familiar listen in the Shortcuts feature. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Playlists Model: &lt;/strong&gt;Predicts the playlists a new listener is likely to listen to in the &lt;em&gt;Try something else&lt;/em&gt; shelf.  &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-700x638.png&#34; alt=&#34;&#34; width=&#34;411&#34; height=&#34;375&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-700x638.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-250x228.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-768x700.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-1536x1400.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-120x109.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2.png 1999w&#34; sizes=&#34;(max-width: 411px) 100vw, 411px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since we launched our first model to recommend content on Home, we have worked to improve our ML stack and processes in order to experiment and productionize models more quickly and reliably.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The road to simplicity and automation&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As anyone who may have contributed to operationalizing an ML model knows, moving a model from experimentation to production is no easy feat. There are numerous challenges in managing the data that goes into a model, running and tracking experiments, and monitoring and retraining models. While we have always tried to keep our ML infrastructure simple, and as close to the sources of features as possible, it has become drastically easier for our squads to deploy and maintain models now than when we started.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At a high level, an ML workflow can be broken down into three main phases: 1) data management, 2) experimentation, and 3) operationalization.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-700x146.png&#34; alt=&#34;&#34; width=&#34;784&#34; height=&#34;164&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-700x146.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-250x52.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-768x160.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-120x25.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow.png 1351w&#34; sizes=&#34;(max-width: 784px) 100vw, 784px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s common to iteratively work on the training and evaluation phase until a final model version is selected as the best. This model is then deployed to production systems and can start making predictions for listeners. Similar to most production systems, models (and the services/pipelines that serve them) should be monitored closely. To keep a model up to date (which is more important for some tasks than others; more to come on this), retraining and model versioning are the last steps in our workflow. This part of our stack and workflow has had significant changes since our first model — making batch predictions (offline) of content listeners are likely to stream — to now, where all our models are served in real time. The figure below shows where our machine learning stack started and where we are now:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;533&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-700x533.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-700x533.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-250x190.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-768x584.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-120x91.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going.png 1012w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our current ML stack automates a lot of the processes involved in maintaining models in production (with online serving): we have automated feature logging instrumented in our serving infrastructure, with both scheduled Scio pipelines to transform these features and Kubeflow pipelines to retrain weekly. We have also implemented data validation of our training and serving features (as well as validation between subsequent training datasets) to verify our features are consistent and follow the same distributions at training and inference times. In our Kubeflow pipelines, we have components that check the evaluation score and automatically push the model to production if the score is above our threshold. With this stack, we monitor and alert on the automatic data validation pipeline, as well as the online deployments of our models — allowing us to handle any issues as soon as they arise.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With a lot of effort and many lessons learned, our ML stack has evolved to make these processes automated and more reliable, enabling us to iterate faster to improve our models and increase our engineering productivity. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How we unified training and serving data&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we first start to think about a problem, we always dig into the data first — what data would be useful? What data is available? And then we take a really close look at the data that will be used for features, characterizing what is in the dataset and identifying the edge cases in the data. We feel fairly confident about the contents of the data used for our training features as well as what the transformed data looks like, but features fetched and transformed at &lt;em&gt;serving&lt;/em&gt; time are an entirely different story. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Batch training data and batch predictions&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Historically, we have had one set of infrastructure for fetching and transforming features during experimentation (training) and a different set of infrastructure for fetching and transforming features for making predictions (serving). &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Then we started to make online predictions (… with the wrong data)&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we changed the Podcast Model from making batch offline predictions to serving in real time, we set up a new service that could support this — this new service had to fetch and transform features, make the prediction, and respond to the request. The important part here is that the feature processing and transformation was now in a different place than where the corresponding training feature processing took place. And, unfortunately, models are like black boxes, so testing the output is difficult, if not impossible. A while ago, we discovered that we had been transforming one of the model’s features slightly differently at training time than at serving time, leading to potentially degraded recommendations — and there was no way to detect this, so it continued to happen for four months.Think about this for just a second. Such a simple part of our stack — at most, a few lines of code — was doing the wrong thing and impacted the recommendations produced by our model. Our short-term fix was to simply change the one line of code in our prediction service that was causing the issue, but we knew long term that we needed to either have a single source of data for both training and serving, or we needed to ensure that data was produced and transformed the same way in both stages.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;One transformation implementation to rule them all&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our first approach was to make any feature processing and transformation occur in the same code path, so that training and serving features would be processed identically. Taking the Shortcuts Model as an example again, our goal was to get rid of the Python service that transformed training features — this service was always running and constantly checking, on all days, to see if it was a Monday; if so, then it would request data from the necessary service (at a rate-limited 5 requests/second) and transform them into features; ideally, this would have been implemented as a pipeline, but we couldn’t schedule and orchestrate it because the process took more than 24 hours. There were many reasons we wanted to migrate away from this approach, but logging features when the only data source for features is a different service (owned by a different squad) proved difficult. Using our serving infrastructure’s feature logging capabilities, we could automatically log already transformed features, which could later be used for training. At this point, all of our features for training and serving were being transformed by code in the Java service. And we now use this feature logging for all of our models both to solve this problem, and also because it reduces the amount of additional infrastructure we need to support.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;But wait, we can do more by validating our data&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The second approach we took to ensure our training and serving features did not differ was to use Tensorflow Data Validation (TFDV) to compare training and serving data schemas and feature distributions on a daily basis. The alerting we have added to our data validation pipeline allows us to detect significant differences in our feature sets — it uses the Chebyshev distance metric, which compares the distance between two vectors, and can help alert us to drift in training and serving features.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While we knew that understanding what is in our data is crucial, we quickly learned that it’s easy to make mistakes when moving models to production because the data often uses a different processing library. We didn’t expect many data differences, but validating and alerting on issues lets us know if something changed, and how we should remediate the issue.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Stay tuned for Part II as we take a closer look at how we evaluate our models using offline and online metrics, why it’s so important to actually look at the recommendations we are making, and the challenges we faced in our journey to CI/CD in model retraining. &lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/11/15/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify, our goal is to connect listeners with creators, and one way we do that is by recommending quality music and podcasts on the Home page. In this two-part blog series, we will talk about the ML models we build and use to recommend diverse and fulfilling content to our listeners, and the les</summary>
    <author>
      <name>Published by Annie Edmundson, Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part I)&#xA;</title>
    <updated>2021-11-15T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-11-15:/2021/11/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;November 15, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/11/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/&#34; title=&#34;The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part I)&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-768x378.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify, our goal is to connect listeners with creators, and one way we do that is by recommending quality music and podcasts on the Home page. In this two-part blog series, we will talk about the ML models we build and use to recommend diverse and fulfilling content to our listeners, and the lessons we’ve learned from building the ML stack that serves these models.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Machine learning is central to how we personalize the Home page user experience and connect listeners to the creators that are most relevant to them. Like many recommendation systems, the &lt;a href=&#34;https://engineering.atspotify.com/2020/01/16/for-your-ears-only-personalizing-spotify-home-with-machine-learning/&#34;&gt;Spotify Home page recommendations are powered&lt;/a&gt; by two stages: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Stage 1: Candidate generation:&lt;/strong&gt; The best albums, playlists, artists, and podcasts are selected for each listener.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Stage 2: Ranking:&lt;/strong&gt; Candidates are ranked in the best order for each listener.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In Part I of this series, we’ll focus on the first stage — the machine learning solutions we’ve built to personalize the content for listeners’ Home pages and, specifically, the lessons we’ve learned in building, experimenting, and deploying these models. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Home @ Spotify&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-700x772.png&#34; alt=&#34;&#34; width=&#34;303&#34; height=&#34;334&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-700x772.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-250x276.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-768x847.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-1393x1536.png 1393w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-120x132.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home.png 1642w&#34; sizes=&#34;(max-width: 303px) 100vw, 303px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Home page consists of cards — the square items that represent an album, playlist, etc. — and shelves — the horizontal rows that contain multiple cards. We generate personalized content for listeners’ Home pages, algorithmically curating the music and podcasts that are shown to listeners in the shelves on Home. Some content is generated via heuristics and rules and some content is manually curated by editors, while other content is generated via predictions using trained models. We currently have a number of models running in production, each one powering content curation for a different shelf, but we will be discussing three of those models in this post, including: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;The Podcast Model:&lt;/strong&gt; Predicts podcasts a listener is likely to listen to in the &lt;em&gt;Shows you might like&lt;/em&gt; shelf. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Shortcuts Model: &lt;/strong&gt;Predicts the listener’s next familiar listen in the Shortcuts feature. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Playlists Model: &lt;/strong&gt;Predicts the playlists a new listener is likely to listen to in the &lt;em&gt;Try something else&lt;/em&gt; shelf.  &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-700x638.png&#34; alt=&#34;&#34; width=&#34;411&#34; height=&#34;375&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-700x638.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-250x228.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-768x700.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-1536x1400.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-120x109.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2.png 1999w&#34; sizes=&#34;(max-width: 411px) 100vw, 411px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since we launched our first model to recommend content on Home, we have worked to improve our ML stack and processes in order to experiment and productionize models more quickly and reliably.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The road to simplicity and automation&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As anyone who may have contributed to operationalizing an ML model knows, moving a model from experimentation to production is no easy feat. There are numerous challenges in managing the data that goes into a model, running and tracking experiments, and monitoring and retraining models. While we have always tried to keep our ML infrastructure simple, and as close to the sources of features as possible, it has become drastically easier for our squads to deploy and maintain models now than when we started.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At a high level, an ML workflow can be broken down into three main phases: 1) data management, 2) experimentation, and 3) operationalization.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-700x146.png&#34; alt=&#34;&#34; width=&#34;784&#34; height=&#34;164&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-700x146.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-250x52.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-768x160.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-120x25.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow.png 1351w&#34; sizes=&#34;(max-width: 784px) 100vw, 784px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s common to iteratively work on the training and evaluation phase until a final model version is selected as the best. This model is then deployed to production systems and can start making predictions for listeners. Similar to most production systems, models (and the services/pipelines that serve them) should be monitored closely. To keep a model up to date (which is more important for some tasks than others; more to come on this), retraining and model versioning are the last steps in our workflow. This part of our stack and workflow has had significant changes since our first model — making batch predictions (offline) of content listeners are likely to stream — to now, where all our models are served in real time. The figure below shows where our machine learning stack started and where we are now:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;533&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-700x533.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-700x533.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-250x190.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-768x584.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-120x91.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going.png 1012w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our current ML stack automates a lot of the processes involved in maintaining models in production (with online serving): we have automated feature logging instrumented in our serving infrastructure, with both scheduled Scio pipelines to transform these features and Kubeflow pipelines to retrain weekly. We have also implemented data validation of our training and serving features (as well as validation between subsequent training datasets) to verify our features are consistent and follow the same distributions at training and inference times. In our Kubeflow pipelines, we have components that check the evaluation score and automatically push the model to production if the score is above our threshold. With this stack, we monitor and alert on the automatic data validation pipeline, as well as the online deployments of our models — allowing us to handle any issues as soon as they arise.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With a lot of effort and many lessons learned, our ML stack has evolved to make these processes automated and more reliable, enabling us to iterate faster to improve our models and increase our engineering productivity. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How we unified training and serving data&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we first start to think about a problem, we always dig into the data first — what data would be useful? What data is available? And then we take a really close look at the data that will be used for features, characterizing what is in the dataset and identifying the edge cases in the data. We feel fairly confident about the contents of the data used for our training features as well as what the transformed data looks like, but features fetched and transformed at &lt;em&gt;serving&lt;/em&gt; time are an entirely different story. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Batch training data and batch predictions&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Historically, we have had one set of infrastructure for fetching and transforming features during experimentation (training) and a different set of infrastructure for fetching and transforming features for making predictions (serving). &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Then we started to make online predictions (… with the wrong data)&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we changed the Podcast Model from making batch offline predictions to serving in real time, we set up a new service that could support this — this new service had to fetch and transform features, make the prediction, and respond to the request. The important part here is that the feature processing and transformation was now in a different place than where the corresponding training feature processing took place. And, unfortunately, models are like black boxes, so testing the output is difficult, if not impossible. A while ago, we discovered that we had been transforming one of the model’s features slightly differently at training time than at serving time, leading to potentially degraded recommendations — and there was no way to detect this, so it continued to happen for four months.Think about this for just a second. Such a simple part of our stack — at most, a few lines of code — was doing the wrong thing and impacted the recommendations produced by our model. Our short-term fix was to simply change the one line of code in our prediction service that was causing the issue, but we knew long term that we needed to either have a single source of data for both training and serving, or we needed to ensure that data was produced and transformed the same way in both stages.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;One transformation implementation to rule them all&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our first approach was to make any feature processing and transformation occur in the same code path, so that training and serving features would be processed identically. Taking the Shortcuts Model as an example again, our goal was to get rid of the Python service that transformed training features — this service was always running and constantly checking, on all days, to see if it was a Monday; if so, then it would request data from the necessary service (at a rate-limited 5 requests/second) and transform them into features; ideally, this would have been implemented as a pipeline, but we couldn’t schedule and orchestrate it because the process took more than 24 hours. There were many reasons we wanted to migrate away from this approach, but logging features when the only data source for features is a different service (owned by a different squad) proved difficult. Using our serving infrastructure’s feature logging capabilities, we could automatically log already transformed features, which could later be used for training. At this point, all of our features for training and serving were being transformed by code in the Java service. And we now use this feature logging for all of our models both to solve this problem, and also because it reduces the amount of additional infrastructure we need to support.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;But wait, we can do more by validating our data&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The second approach we took to ensure our training and serving features did not differ was to use Tensorflow Data Validation (TFDV) to compare training and serving data schemas and feature distributions on a daily basis. The alerting we have added to our data validation pipeline allows us to detect significant differences in our feature sets — it uses the Chebyshev distance metric, which compares the distance between two vectors, and can help alert us to drift in training and serving features.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While we knew that understanding what is in our data is crucial, we quickly learned that it’s easy to make mistakes when moving models to production because the data often uses a different processing library. We didn’t expect many data differences, but validating and alerting on issues lets us know if something changed, and how we should remediate the issue.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Stay tuned for Part II as we take a closer look at how we evaluate our models using offline and online metrics, why it’s so important to actually look at the recommendations we are making, and the challenges we faced in our journey to CI/CD in model retraining. &lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/11/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify, our goal is to connect listeners with creators, and one way we do that is by recommending quality music and podcasts on the Home page. In this two-part blog series, we will talk about the ML models we build and use to recommend diverse and fulfilling content to our listeners, and the les</summary>
    <author>
      <name>Published by Annie Edmundson, Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part I)&#xA;</title>
    <updated>2021-11-15T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-11-15:/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;November 15, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/&#34; title=&#34;The Rise (and Lessons Learned) of ML Models to Personalize Content on Home (Part I)&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-250x123.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-700x345.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-768x378.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-1536x757.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I-120x59.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify, our goal is to connect listeners with creators, and one way we do that is by recommending quality music and podcasts on the Home page. In this two-part blog series, we will talk about the ML models we build and use to recommend diverse and fulfilling content to our listeners, and the lessons we’ve learned from building the ML stack that serves these models.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Machine learning is central to how we personalize the Home page user experience and connect listeners to the creators that are most relevant to them. Like many recommendation systems, the &lt;a href=&#34;https://engineering.atspotify.com/2020/01/16/for-your-ears-only-personalizing-spotify-home-with-machine-learning/&#34;&gt;Spotify Home page recommendations are powered&lt;/a&gt; by two stages: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Stage 1: Candidate generation:&lt;/strong&gt; The best albums, playlists, artists, and podcasts are selected for each listener.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Stage 2: Ranking:&lt;/strong&gt; Candidates are ranked in the best order for each listener.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In Part I of this series, we’ll focus on the first stage — the machine learning solutions we’ve built to personalize the content for listeners’ Home pages and, specifically, the lessons we’ve learned in building, experimenting, and deploying these models. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Home @ Spotify&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-700x772.png&#34; alt=&#34;&#34; width=&#34;303&#34; height=&#34;334&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-700x772.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-250x276.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-768x847.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-1393x1536.png 1393w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home-120x132.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Home.png 1642w&#34; sizes=&#34;(max-width: 303px) 100vw, 303px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Home page consists of cards — the square items that represent an album, playlist, etc. — and shelves — the horizontal rows that contain multiple cards. We generate personalized content for listeners’ Home pages, algorithmically curating the music and podcasts that are shown to listeners in the shelves on Home. Some content is generated via heuristics and rules and some content is manually curated by editors, while other content is generated via predictions using trained models. We currently have a number of models running in production, each one powering content curation for a different shelf, but we will be discussing three of those models in this post, including: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;The Podcast Model:&lt;/strong&gt; Predicts podcasts a listener is likely to listen to in the &lt;em&gt;Shows you might like&lt;/em&gt; shelf. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Shortcuts Model: &lt;/strong&gt;Predicts the listener’s next familiar listen in the Shortcuts feature. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Playlists Model: &lt;/strong&gt;Predicts the playlists a new listener is likely to listen to in the &lt;em&gt;Try something else&lt;/em&gt; shelf.  &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-700x638.png&#34; alt=&#34;&#34; width=&#34;411&#34; height=&#34;375&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-700x638.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-250x228.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-768x700.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-1536x1400.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2-120x109.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Powered-by-2.png 1999w&#34; sizes=&#34;(max-width: 411px) 100vw, 411px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since we launched our first model to recommend content on Home, we have worked to improve our ML stack and processes in order to experiment and productionize models more quickly and reliably.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The road to simplicity and automation&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As anyone who may have contributed to operationalizing an ML model knows, moving a model from experimentation to production is no easy feat. There are numerous challenges in managing the data that goes into a model, running and tracking experiments, and monitoring and retraining models. While we have always tried to keep our ML infrastructure simple, and as close to the sources of features as possible, it has become drastically easier for our squads to deploy and maintain models now than when we started.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At a high level, an ML workflow can be broken down into three main phases: 1) data management, 2) experimentation, and 3) operationalization.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-700x146.png&#34; alt=&#34;&#34; width=&#34;784&#34; height=&#34;164&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-700x146.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-250x52.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-768x160.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow-120x25.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Workflow.png 1351w&#34; sizes=&#34;(max-width: 784px) 100vw, 784px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s common to iteratively work on the training and evaluation phase until a final model version is selected as the best. This model is then deployed to production systems and can start making predictions for listeners. Similar to most production systems, models (and the services/pipelines that serve them) should be monitored closely. To keep a model up to date (which is more important for some tasks than others; more to come on this), retraining and model versioning are the last steps in our workflow. This part of our stack and workflow has had significant changes since our first model — making batch predictions (offline) of content listeners are likely to stream — to now, where all our models are served in real time. The figure below shows where our machine learning stack started and where we are now:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;533&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-700x533.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-700x533.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-250x190.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-768x584.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going-120x91.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/How-it-started_how-its-going.png 1012w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our current ML stack automates a lot of the processes involved in maintaining models in production (with online serving): we have automated feature logging instrumented in our serving infrastructure, with both scheduled Scio pipelines to transform these features and Kubeflow pipelines to retrain weekly. We have also implemented data validation of our training and serving features (as well as validation between subsequent training datasets) to verify our features are consistent and follow the same distributions at training and inference times. In our Kubeflow pipelines, we have components that check the evaluation score and automatically push the model to production if the score is above our threshold. With this stack, we monitor and alert on the automatic data validation pipeline, as well as the online deployments of our models — allowing us to handle any issues as soon as they arise.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With a lot of effort and many lessons learned, our ML stack has evolved to make these processes automated and more reliable, enabling us to iterate faster to improve our models and increase our engineering productivity. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How we unified training and serving data&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we first start to think about a problem, we always dig into the data first — what data would be useful? What data is available? And then we take a really close look at the data that will be used for features, characterizing what is in the dataset and identifying the edge cases in the data. We feel fairly confident about the contents of the data used for our training features as well as what the transformed data looks like, but features fetched and transformed at &lt;em&gt;serving&lt;/em&gt; time are an entirely different story. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Batch training data and batch predictions&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Historically, we have had one set of infrastructure for fetching and transforming features during experimentation (training) and a different set of infrastructure for fetching and transforming features for making predictions (serving). &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Then we started to make online predictions (… with the wrong data)&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we changed the Podcast Model from making batch offline predictions to serving in real time, we set up a new service that could support this — this new service had to fetch and transform features, make the prediction, and respond to the request. The important part here is that the feature processing and transformation was now in a different place than where the corresponding training feature processing took place. And, unfortunately, models are like black boxes, so testing the output is difficult, if not impossible. A while ago, we discovered that we had been transforming one of the model’s features slightly differently at training time than at serving time, leading to potentially degraded recommendations — and there was no way to detect this, so it continued to happen for four months.Think about this for just a second. Such a simple part of our stack — at most, a few lines of code — was doing the wrong thing and impacted the recommendations produced by our model. Our short-term fix was to simply change the one line of code in our prediction service that was causing the issue, but we knew long term that we needed to either have a single source of data for both training and serving, or we needed to ensure that data was produced and transformed the same way in both stages.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;One transformation implementation to rule them all&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our first approach was to make any feature processing and transformation occur in the same code path, so that training and serving features would be processed identically. Taking the Shortcuts Model as an example again, our goal was to get rid of the Python service that transformed training features — this service was always running and constantly checking, on all days, to see if it was a Monday; if so, then it would request data from the necessary service (at a rate-limited 5 requests/second) and transform them into features; ideally, this would have been implemented as a pipeline, but we couldn’t schedule and orchestrate it because the process took more than 24 hours. There were many reasons we wanted to migrate away from this approach, but logging features when the only data source for features is a different service (owned by a different squad) proved difficult. Using our serving infrastructure’s feature logging capabilities, we could automatically log already transformed features, which could later be used for training. At this point, all of our features for training and serving were being transformed by code in the Java service. And we now use this feature logging for all of our models both to solve this problem, and also because it reduces the amount of additional infrastructure we need to support.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;But wait, we can do more by validating our data&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The second approach we took to ensure our training and serving features did not differ was to use Tensorflow Data Validation (TFDV) to compare training and serving data schemas and feature distributions on a daily basis. The alerting we have added to our data validation pipeline allows us to detect significant differences in our feature sets — it uses the Chebyshev distance metric, which compares the distance between two vectors, and can help alert us to drift in training and serving features.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While we knew that understanding what is in our data is crucial, we quickly learned that it’s easy to make mistakes when moving models to production because the data often uses a different processing library. We didn’t expect many data differences, but validating and alerting on issues lets us know if something changed, and how we should remediate the issue.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Stay tuned for Part II as we take a closer look at how we evaluate our models using offline and online metrics, why it’s so important to actually look at the recommendations we are making, and the challenges we faced in our journey to CI/CD in model retraining. &lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/the-rise-and-lessons-learned-of-ml-models-to-personalize-content-on-home-part-i/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/11/Header_part-I.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify, our goal is to connect listeners with creators, and one way we do that is by recommending quality music and podcasts on the Home page. In this two-part blog series, we will talk about the ML models we build and use to recommend diverse and fulfilling content to our listeners, and the les</summary>
    <author>
      <name>Published by Annie Edmundson, Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Changing the Wheels on a Moving Bus — Spotify’s Event Delivery Migration&#xA;</title>
    <updated>2021-10-20T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-10-20:/2021/10/20/changing-the-wheels-on-a-moving-bus-spotify-event-delivery-migration/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;October 20, 2021&lt;/span&gt;&#xA;                &lt;span&gt;&#xA;                    Published by Flavio Santos (Data Infrastructure Engineer) and Robert Stephenson (Senior Product Manager)                &lt;/span&gt;&#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/10/20/changing-the-wheels-on-a-moving-bus-spotify-event-delivery-migration/&#34; title=&#34;Changing the Wheels on a Moving Bus — Spotify’s Event Delivery Migration&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-250x124.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-700x347.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-768x381.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-1536x761.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-2048x1015.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-120x59.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify, data rules all. We log a variety of data, from listening history, to results of A/B testing, to page load times so we can analyze and improve the Spotify service. We instrument and log data across every surface that is running Spotify code through a system called the Event Delivery Infrastructure (EDI). Throughout this blog post we make a distinction between the internal users of the EDI, who are Spotify Engineers, Data Scientists, PMs and squads, and end users, who use Spotify as a service and audio platform.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In 2016, we redesigned the EDI in Google Cloud Platform (GCP) when Spotify migrated to the cloud, and we documented the journey in three blog posts (&lt;a href=&#34;https://engineering.atspotify.com/2016/02/25/spotifys-event-delivery-the-road-to-the-cloud-part-i/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part I&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/2016/03/03/spotifys-event-delivery-the-road-to-the-cloud-part-ii/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part II&lt;/a&gt;, and &lt;a href=&#34;https://engineering.atspotify.com/2016/03/10/spotifys-event-delivery-the-road-to-the-cloud-part-iii/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part III&lt;/a&gt;). Not everything went as planned, and we wrote about our learnings from operating our cloud-native EDI in &lt;a href=&#34;https://engineering.atspotify.com/2019/11/12/spotifys-event-delivery-life-in-the-cloud/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part IV&lt;/a&gt;. Our design was optimized to make it quick and easy for internal developers to instrument and log the data they needed. We then extended it to adapt to the General Data Protection Regulation (GDPR), we introduced streaming event delivery in addition to batch, and we brought BigQuery to our data community. We also improved operational stability and the quality of life of our on-call engineers. The peak traffic increased from 1.5M events per second to nearly 8M, and we were ready for that massive scale increase. This increased the total volume of data which we ingested daily to nearly 70TB! (Figure 1).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;436&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-700x436.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-700x436.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-250x156.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-768x478.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-120x75.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1.png 1480w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 1: Average total volume (TB) of events stored daily by our &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://en.wikipedia.org/wiki/Extract,_transform,_load&#34; target=&#34;_blank&#34;&gt;ETL process&lt;/a&gt; (after compression).&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;However, with that high adoption and traffic increase we discovered some bottlenecks. Our internal users had feature requests and needed more from the system. Now our incomplete and low-quality data was degrading the productivity of the Spotify data community. Whoops!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What was hurting us?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we designed and built the initial EDI, our team had the mission statement to “provide infrastructure for teams at Spotify to reliably collect data, and make it available, safely and efficiently.” The use cases we focused on were well supported, such as music streaming and application monitoring. As other use cases started to appear, the assumptions we made when building the system had to be revisited. During three years of operating and scaling the existing EDI, we gathered a lot of feedback from our internal users and learned a lot about our limitations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Data loss&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most events generated on mobile clients were sent in a fire-and-forget fashion. This might seem surprising, but because end users can enjoy Spotify while offline, there are some complications around deduplication of data that is re-sent. For example, if we detect that we are missing a data point, we don’t necessarily know if it is actually lost, or just has not arrived yet due to the user being offline, in a tunnel, or maybe having a flaky network connection. This leads to a small percentage of data loss for nearly all the data we collect, which is not acceptable for some types of data. Furthermore, this problem is compounded for datasets generated from a combination of multiple event types in order to “connect the dots” in user journeys where, for example, a single lost event can compromise the whole journey. While we had some specific client code and algorithms to reliably deliver business-critical data exactly once, it was not done in a way that we could extend to all 600+ event types that we had at that time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Control plane UX&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The workflow for a customer to progress from “instrumentation to insights” took far too long. Under normal circumstances it would take a customer a week to go through this workflow and get their data. One issue was that multiple components in the EDI had to be schema aware. For example, the receiver service, which is the entry point of the infrastructure, uses the schemas to validate that incoming data is well formed. Due to some tech debt, it took a few hours to propagate the schemas for this validation. This was an eternity in terms of iteration time. Since this process was so painful, some teams tried to instrument their features or services, but then gave up. Some other teams would shoehorn their data into existing data events. This led to gaps in what was instrumented, and a data-quality nightmare.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Backwards compatible? Or stuck in the past?&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For strategic reasons, it was critical, in 2016, that we build the EDI in GCP and migrate over as quickly as possible. A key decision we took to make this happen was to stay backwards compatible to minimize the migration time. That meant we had to stick with some historical design choices that we would not have if we had built this EDI from scratch. For example:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Tab-separated values (TSV):&lt;/strong&gt; All data events were sent as TSV strings. The schemas were parsed and converted to Avro with a Python library created in 2007. The schema-aware tooling for parsing the TSV data was the main cause for the painful control plane UX mentioned earlier.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Stateful services:&lt;/strong&gt; Data events were first stored on disk and then forwarded to the EDI. This made us resilient to crashes, but made us vulnerable to data loss if a machine was taken down. Furthermore, Spotify could not take advantage of auto-scaling mechanisms or Kubernetes (without difficult workarounds) because the EDI made our service ecosystem stateful.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Legacy perimeter:&lt;/strong&gt; Since data events were forwarded from disk to our EDI, all events triggered by Spotify clients needed to be emitted from our perimeter servers. These servers had to keep events on disk and were tightly coupled to our legacy logging mechanism. This caused some pain to perimeter administrators and hindered architectural innovations. Besides the additional complexity in the perimeter, the shared ownership of different teams with different goals caused alignment problems.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The situation&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We had hundreds of services sending events through a legacy EDI by logging data to disk. After being ingested by the infrastructure, events were consumed by hundreds of downstream data pipelines to produce derivative datasets (Figure 2). Our goal was to build a platform that takes advantage of the modern landscape in the cloud while also enabling legacy event types to be migrated easily. The workflow to create new events should be frictionless, while still following our data governance principles and applicable privacy laws.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;591&#34; height=&#34;302&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2.png 591w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2-250x128.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2-120x61.png 120w&#34; sizes=&#34;(max-width: 591px) 100vw, 591px&#34;/&gt;&lt;figcaption&gt;Figure 2. Events produced by our internal services go through the legacy EDI and are consumed by hundreds of data pipelines.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Transitioning event logging to a new infrastructure would need to take into consideration the long tail that mobile app updates have. A new version of our mobile apps takes several months to gain adoption from a high percentage of Spotify end users. We knew that we would have traffic coming to both the old and new EDIs for quite some time. Moreover, events emitted from embedded devices, such as TVs and speakers, would need special treatment as some of these devices are unlikely to ever be upgraded. We call this challenge “The Long Tail Problem”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The strategy&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We partially solved “The Long Tail Problem” by designing a data transformation pipeline that reads events from legacy clients, converts them, and feeds them from the legacy EDI into the new infrastructure (Figure 3). Since we were breaking backwards compatibility, we took the opportunity to update our data model. The transformation to the new data model would not have all the necessary information available, so missing or inaccurate fields were expected occasionally. But since this transformation only applied to legacy clients, it would decrease as end users upgraded to the latest version of Spotify. This traffic would become negligible, eventually.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;355&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-700x355.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-700x355.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-768x390.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-120x61.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3.png 1286w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 3: To handle clients which had not yet upgraded to the latest version, we implemented a job to export legacy data to the new EDI and transform it to our new data model.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We gave data producers two options to adopt the new EDI: either redesign their instrumentation using the new data model, or stick with what they have and turn on exporting data from the legacy EDI to the new EDI. After producers onboarded, event consumers would migrate to read data from the new EDI. If producers and consumers agree to use the exporter, they would first need to update any downstream pipelines to read from the new infrastructure before making client-side changes.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Get in production with real use cases ASAP&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In order to validate our decisions, we had to find early adopters to start producing events with the new infrastructure. We presented the advantages and explained the limitations of our alpha product to potential interested teams. It was important to be able to experiment, break, and fix issues fast and safely without worrying about affecting critical production systems or data. Setting expectations with our internal users was important so we could make breaking changes when our assumptions were wrong.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Next, we found at least one real use case to migrate. We were looking for something specific, since different event types have different levels of importance, timeliness requirements, and downstream dependencies. We reached out to event owners to understand how their data was being used and how we could help them migrate.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Given a set of eligible event types, we identified use cases that were satisfied by the limited features we had built so far. Learning which features our internal users were missing also helped prioritize our roadmap. The more features we added to the new EDI, the more event types we could onboard. We periodically revisited our design decisions and assumptions in order to identify potential problems in the new infrastructure as quickly as possible.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once we had a prototype that was working with real production traffic, we solidified the interfaces and data model and helped the alpha internal users adapt to the changes (Figure 4). This enabled us to decouple the significant work of migrating the 600+ event types which were running on the legacy infrastructure, and actually building the new EDI behind the abstractions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;187&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-700x187.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-700x187.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-250x67.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-768x206.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-1536x411.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-120x32.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 4: New interfaces for the prototype infrastructure, so we could concurrently migrate internal users to the new Event Delivery Infrastructure while building it.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Just-in-time optimizations&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Prematurely optimizing is generally a bad idea without motivating metrics. We always want to be as efficient as possible, but we had to prioritize and make trade-offs. Part of the challenge was to find a good balance between the desired efficiency of our infrastructure and the features we absolutely needed to release in order to accomplish our goals.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We learned from the first EDI that we needed to design for our targeted service availability from the start. Since transactional data collection was not required, there was no need for 100% delivery. We instead had to determine what level of service availability was acceptable and understand the trade-offs associated with that.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The design changes and decisions&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have two main interfaces to the EDI. The control plane is the starting point where internal users declare their events, design their schemas, and bind them to specific SDKs. The data plane receives events sent by those SDKs, divides them by event type, and makes them available as batch datasets or data-streaming topics. The events go through several other components that deduplicate, translate to our well-designed data model, and pseudonymize personal information. The output data is reliably stored for Spotify’s data community to consume and build data pipelines. Due to the evolving needs of internal users, as well as operational overhead and scalability concerns, we needed to make changes between the old and new infrastructure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Client re-sends and new deduplication&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In order to reduce event loss and improve reliability, we implemented client resends. Due to connection stability and offline mode, these resends may happen immediately, within a few minutes, or maybe several days later. They may never happen! It’s actually impossible to tell if an event has been lost in transport, or if a user has used Spotify and then dropped their phone in the ocean, causing data loss. The combination of resend strategies and flaky network connections complicates things and introduces duplicate events.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the old infrastructure, we only deduplicate events within a small window of hours. However, due to the significant increase of duplicates, we hit some bottlenecks and decided to redesign the job. The biggest changes in the new job are the introduction of event message identifiers, and the adoption of Google’s Dataflow processing service instead of Hadoop. The event message identifiers were used to generate lookup indices and remove duplicates. This new strategy allowed us to look back across multiple weeks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Receiver service — offline to online&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The legacy EDI used files on disk to store events before they were sent to a receiver service.  Spotify’s access point or other backend services would have their own availability guarantees, and we would read the data from disk eventually. In the new EDI, our receiver service needs its own availability guarantees, which was a paradigm shift in our infrastructure and for our team as &lt;a href=&#34;https://sre.google/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SREs&lt;/a&gt;. Furthermore, those files on disk were a blocker for Spotify to leverage auto-scaling fleets.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the new EDI, we have the receiver service as a highly available API used by SDKs to send events. In case of a receiver service outage, events would be temporarily stored on clients and, eventually, re-sent according to a predefined retry policy.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Managed Dataflow&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We wanted the new EDI to leverage cloud-managed services as much as possible. By rebuilding the architecture to run in the cloud, we can offload management responsibilities to Google, and our team can focus on providing additional value.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When building the legacy EDI, we needed to migrate a heavy Hadoop job from our on-premise cluster to the cloud. The easiest way was to run the same job on Google’s managed Hadoop solution, Dataproc, so that’s what we did. In the new EDI, the new implementation of that job uses &lt;a href=&#34;https://spotify.github.io/scio/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Scio&lt;/a&gt; (Scala API for Apache Beam) and runs on Google’s Dataflow instead. We considered Spark or Flink, but those had to run over Hadoop, which goes against our strategy to save us operational burden and cost.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By using Dataflow, we no longer needed to keep long-lived Hadoop clusters to execute our jobs. These clusters had to be big enough to process the largest job without issues, and were overkill for almost everything else. Maintaining these clusters was incredibly expensive. Conversely, Dataflow recycles clusters for every job and supports auto-scaling, allowing us to use and pay only for the resources we need.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Wrap-up&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once we decided to redesign our EDI, we evaluated new technologies and adopted new paradigms available to us in the cloud. We had been operating our old infrastructure for years, and that helped us to understand the main pain points and fragilities. We made decisions based on the technical direction of the company, the industry state of the art, and the known scalability issues with existing components. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We started by first designing new components for the new EDI, which we hacked together into a proof of concept and quickly evolved to a more robust prototype that could be used in production. Shipping as soon as possible was critical to validate the infrastructure end to end and catch issues fast. Having the internal users onboarded early was an important forcing function to keep quality and operational maturity high. Next, we solidified the interfaces to the prototype infrastructure and scaled up traffic by onboarding many noncritical event types. With the interfaces stable, we could improve or change out the internals without friction. This approach decoupled the mass migration from actually rebuilding the infrastructure and reduced wall-clock project time significantly.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we neared the end of the migration, we had thrown out nearly all the old, obsolete infrastructure in favor of the state of the art. We successfully changed the wheels of the moving bus, and gave Spotify’s data community a smooth ride.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/10/20/changing-the-wheels-on-a-moving-bus-spotify-event-delivery-migration/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify, data rules all. We log a variety of data, from listening history, to results of A/B testing, to page load times so we can analyze and improve the Spotify service. We instrument and log data across every surface that is running Spotify code through a system called the Event Delivery Infra</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Changing the Wheels on a Moving Bus — Spotify’s Event Delivery Migration&#xA;</title>
    <updated>2021-10-20T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-10-20:/changing-the-wheels-on-a-moving-bus-spotify-event-delivery-migration/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;October 20, 2021&lt;/span&gt;&#xA;                &lt;span&gt;&#xA;                    Published by Flavio Santos (Data Infrastructure Engineer) and Robert Stephenson (Senior Product Manager)                &lt;/span&gt;&#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/changing-the-wheels-on-a-moving-bus-spotify-event-delivery-migration/&#34; title=&#34;Changing the Wheels on a Moving Bus — Spotify’s Event Delivery Migration&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-250x124.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-700x347.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-768x381.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-1536x761.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-2048x1015.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-120x59.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify, data rules all. We log a variety of data, from listening history, to results of A/B testing, to page load times so we can analyze and improve the Spotify service. We instrument and log data across every surface that is running Spotify code through a system called the Event Delivery Infrastructure (EDI). Throughout this blog post we make a distinction between the internal users of the EDI, who are Spotify Engineers, Data Scientists, PMs and squads, and end users, who use Spotify as a service and audio platform.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In 2016, we redesigned the EDI in Google Cloud Platform (GCP) when Spotify migrated to the cloud, and we documented the journey in three blog posts (&lt;a href=&#34;https://engineering.atspotify.com/2016/02/25/spotifys-event-delivery-the-road-to-the-cloud-part-i/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part I&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/2016/03/03/spotifys-event-delivery-the-road-to-the-cloud-part-ii/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part II&lt;/a&gt;, and &lt;a href=&#34;https://engineering.atspotify.com/2016/03/10/spotifys-event-delivery-the-road-to-the-cloud-part-iii/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part III&lt;/a&gt;). Not everything went as planned, and we wrote about our learnings from operating our cloud-native EDI in &lt;a href=&#34;https://engineering.atspotify.com/2019/11/12/spotifys-event-delivery-life-in-the-cloud/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part IV&lt;/a&gt;. Our design was optimized to make it quick and easy for internal developers to instrument and log the data they needed. We then extended it to adapt to the General Data Protection Regulation (GDPR), we introduced streaming event delivery in addition to batch, and we brought BigQuery to our data community. We also improved operational stability and the quality of life of our on-call engineers. The peak traffic increased from 1.5M events per second to nearly 8M, and we were ready for that massive scale increase. This increased the total volume of data which we ingested daily to nearly 70TB! (Figure 1).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;436&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-700x436.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-700x436.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-250x156.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-768x478.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-120x75.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1.png 1480w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 1: Average total volume (TB) of events stored daily by our &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://en.wikipedia.org/wiki/Extract,_transform,_load&#34; target=&#34;_blank&#34;&gt;ETL process&lt;/a&gt; (after compression).&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;However, with that high adoption and traffic increase we discovered some bottlenecks. Our internal users had feature requests and needed more from the system. Now our incomplete and low-quality data was degrading the productivity of the Spotify data community. Whoops!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What was hurting us?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we designed and built the initial EDI, our team had the mission statement to “provide infrastructure for teams at Spotify to reliably collect data, and make it available, safely and efficiently.” The use cases we focused on were well supported, such as music streaming and application monitoring. As other use cases started to appear, the assumptions we made when building the system had to be revisited. During three years of operating and scaling the existing EDI, we gathered a lot of feedback from our internal users and learned a lot about our limitations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Data loss&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most events generated on mobile clients were sent in a fire-and-forget fashion. This might seem surprising, but because end users can enjoy Spotify while offline, there are some complications around deduplication of data that is re-sent. For example, if we detect that we are missing a data point, we don’t necessarily know if it is actually lost, or just has not arrived yet due to the user being offline, in a tunnel, or maybe having a flaky network connection. This leads to a small percentage of data loss for nearly all the data we collect, which is not acceptable for some types of data. Furthermore, this problem is compounded for datasets generated from a combination of multiple event types in order to “connect the dots” in user journeys where, for example, a single lost event can compromise the whole journey. While we had some specific client code and algorithms to reliably deliver business-critical data exactly once, it was not done in a way that we could extend to all 600+ event types that we had at that time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Control plane UX&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The workflow for a customer to progress from “instrumentation to insights” took far too long. Under normal circumstances it would take a customer a week to go through this workflow and get their data. One issue was that multiple components in the EDI had to be schema aware. For example, the receiver service, which is the entry point of the infrastructure, uses the schemas to validate that incoming data is well formed. Due to some tech debt, it took a few hours to propagate the schemas for this validation. This was an eternity in terms of iteration time. Since this process was so painful, some teams tried to instrument their features or services, but then gave up. Some other teams would shoehorn their data into existing data events. This led to gaps in what was instrumented, and a data-quality nightmare.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Backwards compatible? Or stuck in the past?&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For strategic reasons, it was critical, in 2016, that we build the EDI in GCP and migrate over as quickly as possible. A key decision we took to make this happen was to stay backwards compatible to minimize the migration time. That meant we had to stick with some historical design choices that we would not have if we had built this EDI from scratch. For example:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Tab-separated values (TSV):&lt;/strong&gt; All data events were sent as TSV strings. The schemas were parsed and converted to Avro with a Python library created in 2007. The schema-aware tooling for parsing the TSV data was the main cause for the painful control plane UX mentioned earlier.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Stateful services:&lt;/strong&gt; Data events were first stored on disk and then forwarded to the EDI. This made us resilient to crashes, but made us vulnerable to data loss if a machine was taken down. Furthermore, Spotify could not take advantage of auto-scaling mechanisms or Kubernetes (without difficult workarounds) because the EDI made our service ecosystem stateful.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Legacy perimeter:&lt;/strong&gt; Since data events were forwarded from disk to our EDI, all events triggered by Spotify clients needed to be emitted from our perimeter servers. These servers had to keep events on disk and were tightly coupled to our legacy logging mechanism. This caused some pain to perimeter administrators and hindered architectural innovations. Besides the additional complexity in the perimeter, the shared ownership of different teams with different goals caused alignment problems.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The situation&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We had hundreds of services sending events through a legacy EDI by logging data to disk. After being ingested by the infrastructure, events were consumed by hundreds of downstream data pipelines to produce derivative datasets (Figure 2). Our goal was to build a platform that takes advantage of the modern landscape in the cloud while also enabling legacy event types to be migrated easily. The workflow to create new events should be frictionless, while still following our data governance principles and applicable privacy laws.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;591&#34; height=&#34;302&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2.png 591w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2-250x128.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2-120x61.png 120w&#34; sizes=&#34;(max-width: 591px) 100vw, 591px&#34;/&gt;&lt;figcaption&gt;Figure 2: Events produced by our internal services go through the legacy EDI and are consumed by hundreds of data pipelines.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Transitioning event logging to a new infrastructure would need to take into consideration the long tail that mobile app updates have. A new version of our mobile apps takes several months to gain adoption from a high percentage of Spotify end users. We knew that we would have traffic coming to both the old and new EDIs for quite some time. Moreover, events emitted from embedded devices, such as TVs and speakers, would need special treatment as some of these devices are unlikely to ever be upgraded. We call this challenge “The Long Tail Problem”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The strategy&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We partially solved “The Long Tail Problem” by designing a data transformation pipeline that reads events from legacy clients, converts them, and feeds them from the legacy EDI into the new infrastructure (Figure 3). Since we were breaking backwards compatibility, we took the opportunity to update our data model. The transformation to the new data model would not have all the necessary information available, so missing or inaccurate fields were expected occasionally. But since this transformation only applied to legacy clients, it would decrease as end users upgraded to the latest version of Spotify. This traffic would become negligible, eventually.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;355&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-700x355.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-700x355.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-768x390.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-120x61.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3.png 1286w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 3: To handle clients which had not yet upgraded to the latest version, we implemented a job to export legacy data to the new EDI and transform it to our new data model.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We gave data producers two options to adopt the new EDI: either redesign their instrumentation using the new data model, or stick with what they have and turn on exporting data from the legacy EDI to the new EDI. After producers onboarded, event consumers would migrate to read data from the new EDI. If producers and consumers agree to use the exporter, they would first need to update any downstream pipelines to read from the new infrastructure before making client-side changes.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Get in production with real use cases ASAP&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In order to validate our decisions, we had to find early adopters to start producing events with the new infrastructure. We presented the advantages and explained the limitations of our alpha product to potential interested teams. It was important to be able to experiment, break, and fix issues fast and safely without worrying about affecting critical production systems or data. Setting expectations with our internal users was important so we could make breaking changes when our assumptions were wrong.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Next, we found at least one real use case to migrate. We were looking for something specific, since different event types have different levels of importance, timeliness requirements, and downstream dependencies. We reached out to event owners to understand how their data was being used and how we could help them migrate.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Given a set of eligible event types, we identified use cases that were satisfied by the limited features we had built so far. Learning which features our internal users were missing also helped prioritize our roadmap. The more features we added to the new EDI, the more event types we could onboard. We periodically revisited our design decisions and assumptions in order to identify potential problems in the new infrastructure as quickly as possible.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once we had a prototype that was working with real production traffic, we solidified the interfaces and data model and helped the alpha internal users adapt to the changes (Figure 4). This enabled us to decouple the significant work of migrating the 600+ event types which were running on the legacy infrastructure, and actually building the new EDI behind the abstractions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;187&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-700x187.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-700x187.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-250x67.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-768x206.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-1536x411.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-120x32.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 4: New interfaces for the prototype infrastructure, so we could concurrently migrate internal users to the new Event Delivery Infrastructure while building it.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Just-in-time optimizations&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Prematurely optimizing is generally a bad idea without motivating metrics. We always want to be as efficient as possible, but we had to prioritize and make trade-offs. Part of the challenge was to find a good balance between the desired efficiency of our infrastructure and the features we absolutely needed to release in order to accomplish our goals.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We learned from the first EDI that we needed to design for our targeted service availability from the start. Since transactional data collection was not required, there was no need for 100% delivery. We instead had to determine what level of service availability was acceptable and understand the trade-offs associated with that.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The design changes and decisions&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have two main interfaces to the EDI. The control plane is the starting point where internal users declare their events, design their schemas, and bind them to specific SDKs. The data plane receives events sent by those SDKs, divides them by event type, and makes them available as batch datasets or data-streaming topics. The events go through several other components that deduplicate, translate to our well-designed data model, and pseudonymize personal information. The output data is reliably stored for Spotify’s data community to consume and build data pipelines. Due to the evolving needs of internal users, as well as operational overhead and scalability concerns, we needed to make changes between the old and new infrastructure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Client re-sends and new deduplication&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In order to reduce event loss and improve reliability, we implemented client resends. Due to connection stability and offline mode, these resends may happen immediately, within a few minutes, or maybe several days later. They may never happen! It’s actually impossible to tell if an event has been lost in transport, or if a user has used Spotify and then dropped their phone in the ocean, causing data loss. The combination of resend strategies and flaky network connections complicates things and introduces duplicate events.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the old infrastructure, we only deduplicate events within a small window of hours. However, due to the significant increase of duplicates, we hit some bottlenecks and decided to redesign the job. The biggest changes in the new job are the introduction of event message identifiers, and the adoption of Google’s Dataflow processing service instead of Hadoop. The event message identifiers were used to generate lookup indices and remove duplicates. This new strategy allowed us to look back across multiple weeks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Receiver service — offline to online&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The legacy EDI used files on disk to store events before they were sent to a receiver service.  Spotify’s access point or other backend services would have their own availability guarantees, and we would read the data from disk eventually. In the new EDI, our receiver service needs its own availability guarantees, which was a paradigm shift in our infrastructure and for our team as &lt;a href=&#34;https://sre.google/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SREs&lt;/a&gt;. Furthermore, those files on disk were a blocker for Spotify to leverage auto-scaling fleets.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the new EDI, we have the receiver service as a highly available API used by SDKs to send events. In case of a receiver service outage, events would be temporarily stored on clients and, eventually, re-sent according to a predefined retry policy.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Managed Dataflow&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We wanted the new EDI to leverage cloud-managed services as much as possible. By rebuilding the architecture to run in the cloud, we can offload management responsibilities to Google, and our team can focus on providing additional value.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When building the legacy EDI, we needed to migrate a heavy Hadoop job from our on-premise cluster to the cloud. The easiest way was to run the same job on Google’s managed Hadoop solution, Dataproc, so that’s what we did. In the new EDI, the new implementation of that job uses &lt;a href=&#34;https://spotify.github.io/scio/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Scio&lt;/a&gt; (Scala API for Apache Beam) and runs on Google’s Dataflow instead. We considered Spark or Flink, but those had to run over Hadoop, which goes against our strategy to save us operational burden and cost.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By using Dataflow, we no longer needed to keep long-lived Hadoop clusters to execute our jobs. These clusters had to be big enough to process the largest job without issues, and were overkill for almost everything else. Maintaining these clusters was incredibly expensive. Conversely, Dataflow recycles clusters for every job and supports auto-scaling, allowing us to use and pay only for the resources we need.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Wrap-up&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once we decided to redesign our EDI, we evaluated new technologies and adopted new paradigms available to us in the cloud. We had been operating our old infrastructure for years, and that helped us to understand the main pain points and fragilities. We made decisions based on the technical direction of the company, the industry state of the art, and the known scalability issues with existing components. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We started by first designing new components for the new EDI, which we hacked together into a proof of concept and quickly evolved to a more robust prototype that could be used in production. Shipping as soon as possible was critical to validate the infrastructure end to end and catch issues fast. Having the internal users onboarded early was an important forcing function to keep quality and operational maturity high. Next, we solidified the interfaces to the prototype infrastructure and scaled up traffic by onboarding many noncritical event types. With the interfaces stable, we could improve or change out the internals without friction. This approach decoupled the mass migration from actually rebuilding the infrastructure and reduced wall-clock project time significantly.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we neared the end of the migration, we had thrown out nearly all the old, obsolete infrastructure in favor of the state of the art. We successfully changed the wheels of the moving bus, and gave Spotify’s data community a smooth ride.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/data/&#34; rel=&#34;tag&#34;&gt;Data&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/changing-the-wheels-on-a-moving-bus-spotify-event-delivery-migration/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify, data rules all. We log a variety of data, from listening history, to results of A/B testing, to page load times so we can analyze and improve the Spotify service. We instrument and log data across every surface that is running Spotify code through a system called the Event Delivery Infra</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Changing the Wheels on a Moving Bus — Spotify’s Event Delivery Migration&#xA;</title>
    <updated>2021-10-20T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-10-20:/changing-the-wheels-on-a-moving-bus-spotify-event-delivery-migration/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;October 20, 2021&lt;/span&gt;&#xA;                &lt;span&gt;&#xA;                    Published by Flavio Santos (Data Infrastructure Engineer) and Robert Stephenson (Senior Product Manager)                &lt;/span&gt;&#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/changing-the-wheels-on-a-moving-bus-spotify-event-delivery-migration/&#34; title=&#34;Changing the Wheels on a Moving Bus — Spotify’s Event Delivery Migration&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-250x124.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-700x347.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-768x381.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-1536x761.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-2048x1015.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-120x59.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify, data rules all. We log a variety of data, from listening history, to results of A/B testing, to page load times so we can analyze and improve the Spotify service. We instrument and log data across every surface that is running Spotify code through a system called the Event Delivery Infrastructure (EDI). Throughout this blog post we make a distinction between the internal users of the EDI, who are Spotify Engineers, Data Scientists, PMs and squads, and end users, who use Spotify as a service and audio platform.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In 2016, we redesigned the EDI in Google Cloud Platform (GCP) when Spotify migrated to the cloud, and we documented the journey in three blog posts (&lt;a href=&#34;https://engineering.atspotify.com/2016/02/25/spotifys-event-delivery-the-road-to-the-cloud-part-i/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part I&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/2016/03/03/spotifys-event-delivery-the-road-to-the-cloud-part-ii/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part II&lt;/a&gt;, and &lt;a href=&#34;https://engineering.atspotify.com/2016/03/10/spotifys-event-delivery-the-road-to-the-cloud-part-iii/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part III&lt;/a&gt;). Not everything went as planned, and we wrote about our learnings from operating our cloud-native EDI in &lt;a href=&#34;https://engineering.atspotify.com/2019/11/12/spotifys-event-delivery-life-in-the-cloud/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part IV&lt;/a&gt;. Our design was optimized to make it quick and easy for internal developers to instrument and log the data they needed. We then extended it to adapt to the General Data Protection Regulation (GDPR), we introduced streaming event delivery in addition to batch, and we brought BigQuery to our data community. We also improved operational stability and the quality of life of our on-call engineers. The peak traffic increased from 1.5M events per second to nearly 8M, and we were ready for that massive scale increase. This increased the total volume of data which we ingested daily to nearly 70TB! (Figure 1).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;436&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-700x436.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-700x436.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-250x156.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-768x478.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-120x75.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1.png 1480w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 1: Average total volume (TB) of events stored daily by our &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://en.wikipedia.org/wiki/Extract,_transform,_load&#34; target=&#34;_blank&#34;&gt;ETL process&lt;/a&gt; (after compression).&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;However, with that high adoption and traffic increase we discovered some bottlenecks. Our internal users had feature requests and needed more from the system. Now our incomplete and low-quality data was degrading the productivity of the Spotify data community. Whoops!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What was hurting us?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we designed and built the initial EDI, our team had the mission statement to “provide infrastructure for teams at Spotify to reliably collect data, and make it available, safely and efficiently.” The use cases we focused on were well supported, such as music streaming and application monitoring. As other use cases started to appear, the assumptions we made when building the system had to be revisited. During three years of operating and scaling the existing EDI, we gathered a lot of feedback from our internal users and learned a lot about our limitations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Data loss&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most events generated on mobile clients were sent in a fire-and-forget fashion. This might seem surprising, but because end users can enjoy Spotify while offline, there are some complications around deduplication of data that is re-sent. For example, if we detect that we are missing a data point, we don’t necessarily know if it is actually lost, or just has not arrived yet due to the user being offline, in a tunnel, or maybe having a flaky network connection. This leads to a small percentage of data loss for nearly all the data we collect, which is not acceptable for some types of data. Furthermore, this problem is compounded for datasets generated from a combination of multiple event types in order to “connect the dots” in user journeys where, for example, a single lost event can compromise the whole journey. While we had some specific client code and algorithms to reliably deliver business-critical data exactly once, it was not done in a way that we could extend to all 600+ event types that we had at that time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Control plane UX&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The workflow for a customer to progress from “instrumentation to insights” took far too long. Under normal circumstances it would take a customer a week to go through this workflow and get their data. One issue was that multiple components in the EDI had to be schema aware. For example, the receiver service, which is the entry point of the infrastructure, uses the schemas to validate that incoming data is well formed. Due to some tech debt, it took a few hours to propagate the schemas for this validation. This was an eternity in terms of iteration time. Since this process was so painful, some teams tried to instrument their features or services, but then gave up. Some other teams would shoehorn their data into existing data events. This led to gaps in what was instrumented, and a data-quality nightmare.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Backwards compatible? Or stuck in the past?&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For strategic reasons, it was critical, in 2016, that we build the EDI in GCP and migrate over as quickly as possible. A key decision we took to make this happen was to stay backwards compatible to minimize the migration time. That meant we had to stick with some historical design choices that we would not have if we had built this EDI from scratch. For example:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Tab-separated values (TSV):&lt;/strong&gt; All data events were sent as TSV strings. The schemas were parsed and converted to Avro with a Python library created in 2007. The schema-aware tooling for parsing the TSV data was the main cause for the painful control plane UX mentioned earlier.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Stateful services:&lt;/strong&gt; Data events were first stored on disk and then forwarded to the EDI. This made us resilient to crashes, but made us vulnerable to data loss if a machine was taken down. Furthermore, Spotify could not take advantage of auto-scaling mechanisms or Kubernetes (without difficult workarounds) because the EDI made our service ecosystem stateful.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Legacy perimeter:&lt;/strong&gt; Since data events were forwarded from disk to our EDI, all events triggered by Spotify clients needed to be emitted from our perimeter servers. These servers had to keep events on disk and were tightly coupled to our legacy logging mechanism. This caused some pain to perimeter administrators and hindered architectural innovations. Besides the additional complexity in the perimeter, the shared ownership of different teams with different goals caused alignment problems.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The situation&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We had hundreds of services sending events through a legacy EDI by logging data to disk. After being ingested by the infrastructure, events were consumed by hundreds of downstream data pipelines to produce derivative datasets (Figure 2). Our goal was to build a platform that takes advantage of the modern landscape in the cloud while also enabling legacy event types to be migrated easily. The workflow to create new events should be frictionless, while still following our data governance principles and applicable privacy laws.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;591&#34; height=&#34;302&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2.png 591w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2-250x128.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2-120x61.png 120w&#34; sizes=&#34;(max-width: 591px) 100vw, 591px&#34;/&gt;&lt;figcaption&gt;Figure 2: Events produced by our internal services go through the legacy EDI and are consumed by hundreds of data pipelines.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Transitioning event logging to a new infrastructure would need to take into consideration the long tail that mobile app updates have. A new version of our mobile apps takes several months to gain adoption from a high percentage of Spotify end users. We knew that we would have traffic coming to both the old and new EDIs for quite some time. Moreover, events emitted from embedded devices, such as TVs and speakers, would need special treatment as some of these devices are unlikely to ever be upgraded. We call this challenge “The Long Tail Problem”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The strategy&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We partially solved “The Long Tail Problem” by designing a data transformation pipeline that reads events from legacy clients, converts them, and feeds them from the legacy EDI into the new infrastructure (Figure 3). Since we were breaking backwards compatibility, we took the opportunity to update our data model. The transformation to the new data model would not have all the necessary information available, so missing or inaccurate fields were expected occasionally. But since this transformation only applied to legacy clients, it would decrease as end users upgraded to the latest version of Spotify. This traffic would become negligible, eventually.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;355&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-700x355.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-700x355.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-768x390.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-120x61.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3.png 1286w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 3: To handle clients which had not yet upgraded to the latest version, we implemented a job to export legacy data to the new EDI and transform it to our new data model.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We gave data producers two options to adopt the new EDI: either redesign their instrumentation using the new data model, or stick with what they have and turn on exporting data from the legacy EDI to the new EDI. After producers onboarded, event consumers would migrate to read data from the new EDI. If producers and consumers agree to use the exporter, they would first need to update any downstream pipelines to read from the new infrastructure before making client-side changes.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Get in production with real use cases ASAP&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In order to validate our decisions, we had to find early adopters to start producing events with the new infrastructure. We presented the advantages and explained the limitations of our alpha product to potential interested teams. It was important to be able to experiment, break, and fix issues fast and safely without worrying about affecting critical production systems or data. Setting expectations with our internal users was important so we could make breaking changes when our assumptions were wrong.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Next, we found at least one real use case to migrate. We were looking for something specific, since different event types have different levels of importance, timeliness requirements, and downstream dependencies. We reached out to event owners to understand how their data was being used and how we could help them migrate.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Given a set of eligible event types, we identified use cases that were satisfied by the limited features we had built so far. Learning which features our internal users were missing also helped prioritize our roadmap. The more features we added to the new EDI, the more event types we could onboard. We periodically revisited our design decisions and assumptions in order to identify potential problems in the new infrastructure as quickly as possible.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once we had a prototype that was working with real production traffic, we solidified the interfaces and data model and helped the alpha internal users adapt to the changes (Figure 4). This enabled us to decouple the significant work of migrating the 600+ event types which were running on the legacy infrastructure, and actually building the new EDI behind the abstractions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;187&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-700x187.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-700x187.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-250x67.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-768x206.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-1536x411.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-120x32.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 4: New interfaces for the prototype infrastructure, so we could concurrently migrate internal users to the new Event Delivery Infrastructure while building it.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Just-in-time optimizations&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Prematurely optimizing is generally a bad idea without motivating metrics. We always want to be as efficient as possible, but we had to prioritize and make trade-offs. Part of the challenge was to find a good balance between the desired efficiency of our infrastructure and the features we absolutely needed to release in order to accomplish our goals.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We learned from the first EDI that we needed to design for our targeted service availability from the start. Since transactional data collection was not required, there was no need for 100% delivery. We instead had to determine what level of service availability was acceptable and understand the trade-offs associated with that.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The design changes and decisions&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have two main interfaces to the EDI. The control plane is the starting point where internal users declare their events, design their schemas, and bind them to specific SDKs. The data plane receives events sent by those SDKs, divides them by event type, and makes them available as batch datasets or data-streaming topics. The events go through several other components that deduplicate, translate to our well-designed data model, and pseudonymize personal information. The output data is reliably stored for Spotify’s data community to consume and build data pipelines. Due to the evolving needs of internal users, as well as operational overhead and scalability concerns, we needed to make changes between the old and new infrastructure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Client re-sends and new deduplication&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In order to reduce event loss and improve reliability, we implemented client resends. Due to connection stability and offline mode, these resends may happen immediately, within a few minutes, or maybe several days later. They may never happen! It’s actually impossible to tell if an event has been lost in transport, or if a user has used Spotify and then dropped their phone in the ocean, causing data loss. The combination of resend strategies and flaky network connections complicates things and introduces duplicate events.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the old infrastructure, we only deduplicate events within a small window of hours. However, due to the significant increase of duplicates, we hit some bottlenecks and decided to redesign the job. The biggest changes in the new job are the introduction of event message identifiers, and the adoption of Google’s Dataflow processing service instead of Hadoop. The event message identifiers were used to generate lookup indices and remove duplicates. This new strategy allowed us to look back across multiple weeks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Receiver service — offline to online&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The legacy EDI used files on disk to store events before they were sent to a receiver service.  Spotify’s access point or other backend services would have their own availability guarantees, and we would read the data from disk eventually. In the new EDI, our receiver service needs its own availability guarantees, which was a paradigm shift in our infrastructure and for our team as &lt;a href=&#34;https://sre.google/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SREs&lt;/a&gt;. Furthermore, those files on disk were a blocker for Spotify to leverage auto-scaling fleets.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the new EDI, we have the receiver service as a highly available API used by SDKs to send events. In case of a receiver service outage, events would be temporarily stored on clients and, eventually, re-sent according to a predefined retry policy.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Managed Dataflow&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We wanted the new EDI to leverage cloud-managed services as much as possible. By rebuilding the architecture to run in the cloud, we can offload management responsibilities to Google, and our team can focus on providing additional value.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When building the legacy EDI, we needed to migrate a heavy Hadoop job from our on-premise cluster to the cloud. The easiest way was to run the same job on Google’s managed Hadoop solution, Dataproc, so that’s what we did. In the new EDI, the new implementation of that job uses &lt;a href=&#34;https://spotify.github.io/scio/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Scio&lt;/a&gt; (Scala API for Apache Beam) and runs on Google’s Dataflow instead. We considered Spark or Flink, but those had to run over Hadoop, which goes against our strategy to save us operational burden and cost.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By using Dataflow, we no longer needed to keep long-lived Hadoop clusters to execute our jobs. These clusters had to be big enough to process the largest job without issues, and were overkill for almost everything else. Maintaining these clusters was incredibly expensive. Conversely, Dataflow recycles clusters for every job and supports auto-scaling, allowing us to use and pay only for the resources we need.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Wrap-up&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once we decided to redesign our EDI, we evaluated new technologies and adopted new paradigms available to us in the cloud. We had been operating our old infrastructure for years, and that helped us to understand the main pain points and fragilities. We made decisions based on the technical direction of the company, the industry state of the art, and the known scalability issues with existing components. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We started by first designing new components for the new EDI, which we hacked together into a proof of concept and quickly evolved to a more robust prototype that could be used in production. Shipping as soon as possible was critical to validate the infrastructure end to end and catch issues fast. Having the internal users onboarded early was an important forcing function to keep quality and operational maturity high. Next, we solidified the interfaces to the prototype infrastructure and scaled up traffic by onboarding many noncritical event types. With the interfaces stable, we could improve or change out the internals without friction. This approach decoupled the mass migration from actually rebuilding the infrastructure and reduced wall-clock project time significantly.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we neared the end of the migration, we had thrown out nearly all the old, obsolete infrastructure in favor of the state of the art. We successfully changed the wheels of the moving bus, and gave Spotify’s data community a smooth ride.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/data/&#34; rel=&#34;tag&#34;&gt;Data&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/changing-the-wheels-on-a-moving-bus-spotify-event-delivery-migration/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify, data rules all. We log a variety of data, from listening history, to results of A/B testing, to page load times so we can analyze and improve the Spotify service. We instrument and log data across every surface that is running Spotify code through a system called the Event Delivery Infra</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Changing the Wheels on a Moving Bus — Spotify’s Event Delivery Migration&#xA;</title>
    <updated>2021-10-20T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-10-20:/2021/10/changing-the-wheels-on-a-moving-bus-spotify-event-delivery-migration/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;October 20, 2021&lt;/span&gt;&#xA;                &lt;span&gt;&#xA;                    Published by Flavio Santos (Data Infrastructure Engineer) and Robert Stephenson (Senior Product Manager)                &lt;/span&gt;&#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/10/changing-the-wheels-on-a-moving-bus-spotify-event-delivery-migration/&#34; title=&#34;Changing the Wheels on a Moving Bus — Spotify’s Event Delivery Migration&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-250x124.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-700x347.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-768x381.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-1536x761.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-2048x1015.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage-120x59.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify, data rules all. We log a variety of data, from listening history, to results of A/B testing, to page load times so we can analyze and improve the Spotify service. We instrument and log data across every surface that is running Spotify code through a system called the Event Delivery Infrastructure (EDI). Throughout this blog post we make a distinction between the internal users of the EDI, who are Spotify Engineers, Data Scientists, PMs and squads, and end users, who use Spotify as a service and audio platform.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In 2016, we redesigned the EDI in Google Cloud Platform (GCP) when Spotify migrated to the cloud, and we documented the journey in three blog posts (&lt;a href=&#34;https://engineering.atspotify.com/2016/02/25/spotifys-event-delivery-the-road-to-the-cloud-part-i/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part I&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/2016/03/03/spotifys-event-delivery-the-road-to-the-cloud-part-ii/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part II&lt;/a&gt;, and &lt;a href=&#34;https://engineering.atspotify.com/2016/03/10/spotifys-event-delivery-the-road-to-the-cloud-part-iii/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part III&lt;/a&gt;). Not everything went as planned, and we wrote about our learnings from operating our cloud-native EDI in &lt;a href=&#34;https://engineering.atspotify.com/2019/11/12/spotifys-event-delivery-life-in-the-cloud/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part IV&lt;/a&gt;. Our design was optimized to make it quick and easy for internal developers to instrument and log the data they needed. We then extended it to adapt to the General Data Protection Regulation (GDPR), we introduced streaming event delivery in addition to batch, and we brought BigQuery to our data community. We also improved operational stability and the quality of life of our on-call engineers. The peak traffic increased from 1.5M events per second to nearly 8M, and we were ready for that massive scale increase. This increased the total volume of data which we ingested daily to nearly 70TB! (Figure 1).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;436&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-700x436.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-700x436.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-250x156.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-768x478.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1-120x75.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig1.png 1480w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 1: Average total volume (TB) of events stored daily by our &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://en.wikipedia.org/wiki/Extract,_transform,_load&#34; target=&#34;_blank&#34;&gt;ETL process&lt;/a&gt; (after compression).&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;However, with that high adoption and traffic increase we discovered some bottlenecks. Our internal users had feature requests and needed more from the system. Now our incomplete and low-quality data was degrading the productivity of the Spotify data community. Whoops!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What was hurting us?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we designed and built the initial EDI, our team had the mission statement to “provide infrastructure for teams at Spotify to reliably collect data, and make it available, safely and efficiently.” The use cases we focused on were well supported, such as music streaming and application monitoring. As other use cases started to appear, the assumptions we made when building the system had to be revisited. During three years of operating and scaling the existing EDI, we gathered a lot of feedback from our internal users and learned a lot about our limitations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Data loss&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most events generated on mobile clients were sent in a fire-and-forget fashion. This might seem surprising, but because end users can enjoy Spotify while offline, there are some complications around deduplication of data that is re-sent. For example, if we detect that we are missing a data point, we don’t necessarily know if it is actually lost, or just has not arrived yet due to the user being offline, in a tunnel, or maybe having a flaky network connection. This leads to a small percentage of data loss for nearly all the data we collect, which is not acceptable for some types of data. Furthermore, this problem is compounded for datasets generated from a combination of multiple event types in order to “connect the dots” in user journeys where, for example, a single lost event can compromise the whole journey. While we had some specific client code and algorithms to reliably deliver business-critical data exactly once, it was not done in a way that we could extend to all 600+ event types that we had at that time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Control plane UX&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The workflow for a customer to progress from “instrumentation to insights” took far too long. Under normal circumstances it would take a customer a week to go through this workflow and get their data. One issue was that multiple components in the EDI had to be schema aware. For example, the receiver service, which is the entry point of the infrastructure, uses the schemas to validate that incoming data is well formed. Due to some tech debt, it took a few hours to propagate the schemas for this validation. This was an eternity in terms of iteration time. Since this process was so painful, some teams tried to instrument their features or services, but then gave up. Some other teams would shoehorn their data into existing data events. This led to gaps in what was instrumented, and a data-quality nightmare.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Backwards compatible? Or stuck in the past?&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For strategic reasons, it was critical, in 2016, that we build the EDI in GCP and migrate over as quickly as possible. A key decision we took to make this happen was to stay backwards compatible to minimize the migration time. That meant we had to stick with some historical design choices that we would not have if we had built this EDI from scratch. For example:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Tab-separated values (TSV):&lt;/strong&gt; All data events were sent as TSV strings. The schemas were parsed and converted to Avro with a Python library created in 2007. The schema-aware tooling for parsing the TSV data was the main cause for the painful control plane UX mentioned earlier.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Stateful services:&lt;/strong&gt; Data events were first stored on disk and then forwarded to the EDI. This made us resilient to crashes, but made us vulnerable to data loss if a machine was taken down. Furthermore, Spotify could not take advantage of auto-scaling mechanisms or Kubernetes (without difficult workarounds) because the EDI made our service ecosystem stateful.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Legacy perimeter:&lt;/strong&gt; Since data events were forwarded from disk to our EDI, all events triggered by Spotify clients needed to be emitted from our perimeter servers. These servers had to keep events on disk and were tightly coupled to our legacy logging mechanism. This caused some pain to perimeter administrators and hindered architectural innovations. Besides the additional complexity in the perimeter, the shared ownership of different teams with different goals caused alignment problems.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The situation&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We had hundreds of services sending events through a legacy EDI by logging data to disk. After being ingested by the infrastructure, events were consumed by hundreds of downstream data pipelines to produce derivative datasets (Figure 2). Our goal was to build a platform that takes advantage of the modern landscape in the cloud while also enabling legacy event types to be migrated easily. The workflow to create new events should be frictionless, while still following our data governance principles and applicable privacy laws.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;591&#34; height=&#34;302&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2.png 591w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2-250x128.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig2-120x61.png 120w&#34; sizes=&#34;(max-width: 591px) 100vw, 591px&#34;/&gt;&lt;figcaption&gt;Figure 2: Events produced by our internal services go through the legacy EDI and are consumed by hundreds of data pipelines.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Transitioning event logging to a new infrastructure would need to take into consideration the long tail that mobile app updates have. A new version of our mobile apps takes several months to gain adoption from a high percentage of Spotify end users. We knew that we would have traffic coming to both the old and new EDIs for quite some time. Moreover, events emitted from embedded devices, such as TVs and speakers, would need special treatment as some of these devices are unlikely to ever be upgraded. We call this challenge “The Long Tail Problem”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The strategy&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We partially solved “The Long Tail Problem” by designing a data transformation pipeline that reads events from legacy clients, converts them, and feeds them from the legacy EDI into the new infrastructure (Figure 3). Since we were breaking backwards compatibility, we took the opportunity to update our data model. The transformation to the new data model would not have all the necessary information available, so missing or inaccurate fields were expected occasionally. But since this transformation only applied to legacy clients, it would decrease as end users upgraded to the latest version of Spotify. This traffic would become negligible, eventually.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;355&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-700x355.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-700x355.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-768x390.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3-120x61.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-Migration_Fig3.png 1286w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 3: To handle clients which had not yet upgraded to the latest version, we implemented a job to export legacy data to the new EDI and transform it to our new data model.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We gave data producers two options to adopt the new EDI: either redesign their instrumentation using the new data model, or stick with what they have and turn on exporting data from the legacy EDI to the new EDI. After producers onboarded, event consumers would migrate to read data from the new EDI. If producers and consumers agree to use the exporter, they would first need to update any downstream pipelines to read from the new infrastructure before making client-side changes.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Get in production with real use cases ASAP&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In order to validate our decisions, we had to find early adopters to start producing events with the new infrastructure. We presented the advantages and explained the limitations of our alpha product to potential interested teams. It was important to be able to experiment, break, and fix issues fast and safely without worrying about affecting critical production systems or data. Setting expectations with our internal users was important so we could make breaking changes when our assumptions were wrong.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Next, we found at least one real use case to migrate. We were looking for something specific, since different event types have different levels of importance, timeliness requirements, and downstream dependencies. We reached out to event owners to understand how their data was being used and how we could help them migrate.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Given a set of eligible event types, we identified use cases that were satisfied by the limited features we had built so far. Learning which features our internal users were missing also helped prioritize our roadmap. The more features we added to the new EDI, the more event types we could onboard. We periodically revisited our design decisions and assumptions in order to identify potential problems in the new infrastructure as quickly as possible.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once we had a prototype that was working with real production traffic, we solidified the interfaces and data model and helped the alpha internal users adapt to the changes (Figure 4). This enabled us to decouple the significant work of migrating the 600+ event types which were running on the legacy infrastructure, and actually building the new EDI behind the abstractions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;187&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-700x187.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-700x187.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-250x67.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-768x206.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-1536x411.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4-120x32.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery-MIgration_Fig4.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 4: New interfaces for the prototype infrastructure, so we could concurrently migrate internal users to the new Event Delivery Infrastructure while building it.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Just-in-time optimizations&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Prematurely optimizing is generally a bad idea without motivating metrics. We always want to be as efficient as possible, but we had to prioritize and make trade-offs. Part of the challenge was to find a good balance between the desired efficiency of our infrastructure and the features we absolutely needed to release in order to accomplish our goals.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We learned from the first EDI that we needed to design for our targeted service availability from the start. Since transactional data collection was not required, there was no need for 100% delivery. We instead had to determine what level of service availability was acceptable and understand the trade-offs associated with that.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The design changes and decisions&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have two main interfaces to the EDI. The control plane is the starting point where internal users declare their events, design their schemas, and bind them to specific SDKs. The data plane receives events sent by those SDKs, divides them by event type, and makes them available as batch datasets or data-streaming topics. The events go through several other components that deduplicate, translate to our well-designed data model, and pseudonymize personal information. The output data is reliably stored for Spotify’s data community to consume and build data pipelines. Due to the evolving needs of internal users, as well as operational overhead and scalability concerns, we needed to make changes between the old and new infrastructure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Client re-sends and new deduplication&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In order to reduce event loss and improve reliability, we implemented client resends. Due to connection stability and offline mode, these resends may happen immediately, within a few minutes, or maybe several days later. They may never happen! It’s actually impossible to tell if an event has been lost in transport, or if a user has used Spotify and then dropped their phone in the ocean, causing data loss. The combination of resend strategies and flaky network connections complicates things and introduces duplicate events.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the old infrastructure, we only deduplicate events within a small window of hours. However, due to the significant increase of duplicates, we hit some bottlenecks and decided to redesign the job. The biggest changes in the new job are the introduction of event message identifiers, and the adoption of Google’s Dataflow processing service instead of Hadoop. The event message identifiers were used to generate lookup indices and remove duplicates. This new strategy allowed us to look back across multiple weeks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Receiver service — offline to online&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The legacy EDI used files on disk to store events before they were sent to a receiver service.  Spotify’s access point or other backend services would have their own availability guarantees, and we would read the data from disk eventually. In the new EDI, our receiver service needs its own availability guarantees, which was a paradigm shift in our infrastructure and for our team as &lt;a href=&#34;https://sre.google/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SREs&lt;/a&gt;. Furthermore, those files on disk were a blocker for Spotify to leverage auto-scaling fleets.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the new EDI, we have the receiver service as a highly available API used by SDKs to send events. In case of a receiver service outage, events would be temporarily stored on clients and, eventually, re-sent according to a predefined retry policy.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Managed Dataflow&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We wanted the new EDI to leverage cloud-managed services as much as possible. By rebuilding the architecture to run in the cloud, we can offload management responsibilities to Google, and our team can focus on providing additional value.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When building the legacy EDI, we needed to migrate a heavy Hadoop job from our on-premise cluster to the cloud. The easiest way was to run the same job on Google’s managed Hadoop solution, Dataproc, so that’s what we did. In the new EDI, the new implementation of that job uses &lt;a href=&#34;https://spotify.github.io/scio/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Scio&lt;/a&gt; (Scala API for Apache Beam) and runs on Google’s Dataflow instead. We considered Spark or Flink, but those had to run over Hadoop, which goes against our strategy to save us operational burden and cost.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By using Dataflow, we no longer needed to keep long-lived Hadoop clusters to execute our jobs. These clusters had to be big enough to process the largest job without issues, and were overkill for almost everything else. Maintaining these clusters was incredibly expensive. Conversely, Dataflow recycles clusters for every job and supports auto-scaling, allowing us to use and pay only for the resources we need.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Wrap-up&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once we decided to redesign our EDI, we evaluated new technologies and adopted new paradigms available to us in the cloud. We had been operating our old infrastructure for years, and that helped us to understand the main pain points and fragilities. We made decisions based on the technical direction of the company, the industry state of the art, and the known scalability issues with existing components. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We started by first designing new components for the new EDI, which we hacked together into a proof of concept and quickly evolved to a more robust prototype that could be used in production. Shipping as soon as possible was critical to validate the infrastructure end to end and catch issues fast. Having the internal users onboarded early was an important forcing function to keep quality and operational maturity high. Next, we solidified the interfaces to the prototype infrastructure and scaled up traffic by onboarding many noncritical event types. With the interfaces stable, we could improve or change out the internals without friction. This approach decoupled the mass migration from actually rebuilding the infrastructure and reduced wall-clock project time significantly.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we neared the end of the migration, we had thrown out nearly all the old, obsolete infrastructure in favor of the state of the art. We successfully changed the wheels of the moving bus, and gave Spotify’s data community a smooth ride.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/data/&#34; rel=&#34;tag&#34;&gt;Data&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/10/changing-the-wheels-on-a-moving-bus-spotify-event-delivery-migration/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/Event-Delivery_Header-IMage.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify, data rules all. We log a variety of data, from listening history, to results of A/B testing, to page load times so we can analyze and improve the Spotify service. We instrument and log data across every surface that is running Spotify code through a system called the Event Delivery Infra</summary>
  </entry>
  <entry>
    <title>&#xA;                                            A Product Story: Three Lessons We Learned from Developing the Mobile App&#xA;</title>
    <updated>2021-10-05T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-10-05:/a-product-story-three-lessons-we-learned-from-developing-the-mobile-app/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;October 5, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/a-product-story-three-lessons-we-learned-from-developing-the-mobile-app/&#34; title=&#34;A Product Story: Three Lessons We Learned from Developing the Mobile App&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630.png 1201w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-250x131.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-700x368.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-768x404.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-120x63.png 120w&#34; sizes=&#34;(max-width: 1201px) 100vw, 1201px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;Remember what life was like before smartphones? Remember manually having to sync your computer’s playlists with your iPod every time you added a few songs? One of Spotify’s core products, our mobile app, was designed specifically to leave all of that busywork in the past, changing how we travel with our music forever.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In &lt;a href=&#34;https://open.spotify.com/episode/7oB1UYZtOiKqY1Gj3niptG?si=21630574510943f3&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Episode 02&lt;/a&gt; of our podcast series, &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Spotify: A Product Story&lt;/em&gt;&lt;/a&gt;&lt;em&gt;,&lt;/em&gt; host and Chief R&amp;amp;D Officer Gustav Söderström chats with the engineers, executives, and other Spotifiers who helped make the mobile streaming revolution possible. Why was it so difficult to create Spotify for mobile even after we created the desktop app? Why were Spotify’s licensing deals such a game changer for us? Keep reading to find out the answers, and don’t forget to &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB?si=pX_Ez7ZHR3untiFXd5WaNA&amp;amp;dl_branch=1&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;listen to the podcast&lt;/a&gt; itself to learn even more.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;What’s user research really for?&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we first released the Spotify desktop app in Sweden in 2008, the idea of creating an on-the-go version of that same experience seemed out of the question. After all, Spotify didn’t have access to iPods or the other dedicated digital music players, and besides, at the time, most phones were equipped with only enough memory to hold a handful of songs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Then something happened. Smartphones happened. The iPhone happened. Suddenly the idea of creating a piece of software that people could carry around with them everywhere didn’t seem so far-fetched.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Though it was theoretically possible to create a mobile edition of Spotify, there was still one major issue. A free, offline music app, one that could truly compete with the already-offline MP3 players, just wasn’t in the cards. First off, it couldn’t be free — you can’t click on ads without an internet connection — so it would have to be a paid service. Plus, our listeners already had access to all the music they wanted through piracy. So, once again, we had to ask ourselves something: Why would anyone pay for Spotify? How do you charge for nothing? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And indeed, when we surveyed our users, we discovered that $10 per month — the number we settled on after months of licensing negotiations with labels (more on those in a bit) — was a number literally no one said they would pay.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Well, at least they &lt;em&gt;said&lt;/em&gt; that. See, user research is great, but you have to know what it’s really there for. That was our &lt;strong&gt;first lesson:&lt;/strong&gt; &lt;strong&gt;user research is for understanding what people &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;think&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt; they will do, not what they will actually do.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There’s a reason for that, as Gustav points out.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Gustav:&lt;/strong&gt; Humans are not very good at predicting our own future behavior, especially when it comes to what we are prepared to pay for something like convenience. We just can’t imagine our future selves being that lazy.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Exactly. In other words, just like we discovered while creating the desktop app, convenience is key. Of course people don’t think they would pay for something they were already getting for free — but they just might if it’s a lot more convenient than what they’re using. At least, that’s what we were betting on.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We just needed to find another magic trick.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Beware your optimization bias&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;That was easier said than done, though. Setting aside the business side of things, actually building a mobile experience convenient enough to convert music pirates was a tall order, one without an obvious solution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Back then, in the early days of Spotify, the desktop app may have technically been able to run on the iPhone, but that didn’t mean it was built for it. When Gustav asked Mattias Arrelid, one of Spotify’s early Mac developers, what the challenges were in translating the desktop app into a great mobile product, two things sprang immediately to Mattias’ mind:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;“One [challenge] is that … a phone doesn’t have a constant power supply. For example, it doesn’t have a constant high-bandwidth network connection. Spotify was, at that time, at least leveraging peer to peer … If you do that on the phone, you basically force it to keep the radio on quite a bit. And that is draining in terms of battery.”&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;“The other one is data. [When] you had Spotify running on the desktop, you relied on some kind of data connection that [you] don’t really need to care about … On the phone, you had many contracts that had limited bandwidth included in the monthly allowance. So you really wanted to be careful about your consumption of that.”&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It turns out by developing the desktop app to be as efficient as possible, we were actually developing something that was &lt;em&gt;only&lt;/em&gt; efficient as a desktop app. Concerns like bandwidth and power consumption never factored into the equation, since you don’t need to worry about them when you’re a desktop user. And that’s where &lt;strong&gt;the second lesson&lt;/strong&gt; comes in: &lt;strong&gt;whether you realize it or not, you’re always optimizing for something.&lt;/strong&gt; This isn’t always a bad thing — after all, you’re still optimizing — but you are unwittingly creating blind spots for you and your product, ones that can hamper your growth down the road.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One of the solutions Mattias and the engineering team came up with to improve battery performance involved changing up the codec we used to encode audio. (&lt;a href=&#34;https://open.spotify.com/episode/7oB1UYZtOiKqY1Gj3niptG?si=21630574510943f3&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Dive into the full episode&lt;/a&gt; to hear all the details about why.) But changing up our codec didn’t just have technical ramifications — it had business implications as well, implications that dovetail nicely with our final lesson.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Your tech is only half of the story&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify didn’t invent streaming, and it was only a matter of time until other companies could start to pull off a service similar to what we were offering. What we needed, in other words, was a breakthrough in our business strategy as well.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Enter licensing. Contrary to what you may expect, there isn’t a one-size-fits-all codec license for streaming songs. Different licenses are required for almost every use case — say, streaming on desktop versus streaming on mobile. This meant that hammering out licensing deals with record labels could end up being a lengthy, complex process. Rather than dealing with these complications, we saw plenty of other companies kick that sort of nitty-gritty work down the road, focusing instead on shipping code and getting to market quicker.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But to us, this wasn’t a sustainable strategy. So rather than take the same route, Spotify slowed things down, sweating the details in the negotiations for months on end, making sure that we had licenses that no one else had. That way, we could guarantee that we hit the ground running when we introduced a paid mobile tier. Here’s Spotify’s first general counsel, Petra Hansson, on the matter:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Petra:&lt;/strong&gt; We spent a lot of time getting those licenses right. Because, you know, back in the day, the norm was more to just sign any licenses and then, you know, try and flip the companies, so it became someone else’s problem or companies would go belly up. So we were sort of hell-bent. And that’s one of the reasons why I joined [Spotify], because what I really liked about the company was that [co-founder and CEO Daniel Ek]’s vision was always to build something long-term and sustainable.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As it so happens, truly great product development is more than just a cool new feature or even a breakthrough new technology. &lt;strong&gt;Our third lesson is that&lt;/strong&gt; &lt;strong&gt;truly great product development, in short, almost always combines technological innovation with business innovation.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;That’s another three lessons down, but there are plenty more to go. The podcast series &lt;em&gt;Spotify: A Product Story&lt;/em&gt; shares all these stories and dozens more, filled with insider insight and product strategy lessons from the employees, collaborators, and musicians who made Spotify what it is today. Join podcast host and Chief R&amp;amp;D Officer Gustav Söderström, and &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check out all the episodes right here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/a-product-story-three-lessons-we-learned-from-developing-the-mobile-app/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR Remember what life was like before smartphones? Remember manually having to sync your computer’s playlists with your iPod every time you added a few songs? One of Spotify’s core products, our mobile app, was designed specifically to leave all of that busywork in the past, changing how we trave</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            A Product Story: Three Lessons We Learned from Developing the Mobile App&#xA;</title>
    <updated>2021-10-05T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-10-05:/2021/10/05/a-product-story-three-lessons-we-learned-from-developing-the-mobile-app/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;October 5, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/10/05/a-product-story-three-lessons-we-learned-from-developing-the-mobile-app/&#34; title=&#34;A Product Story: Three Lessons We Learned from Developing the Mobile App&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630.png 1201w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-250x131.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-700x368.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-768x404.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-120x63.png 120w&#34; sizes=&#34;(max-width: 1201px) 100vw, 1201px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;Remember what life was like before smartphones? Remember manually having to sync your computer’s playlists with your iPod every time you added a few songs? One of Spotify’s core products, our mobile app, was designed specifically to leave all of that busywork in the past, changing how we travel with our music forever.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In &lt;a href=&#34;https://open.spotify.com/episode/7oB1UYZtOiKqY1Gj3niptG?si=21630574510943f3&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Episode 02&lt;/a&gt; of our podcast series, &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Spotify: A Product Story&lt;/em&gt;&lt;/a&gt;&lt;em&gt;,&lt;/em&gt; host and Chief R&amp;amp;D Officer Gustav Söderström chats with the engineers, executives, and other Spotifiers who helped make the mobile streaming revolution possible. Why was it so difficult to create Spotify for mobile even after we created the desktop app? Why were Spotify’s licensing deals such a game changer for us? Keep reading to find out the answers, and don’t forget to &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB?si=pX_Ez7ZHR3untiFXd5WaNA&amp;amp;dl_branch=1&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;listen to the podcast&lt;/a&gt; itself to learn even more.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;What’s user research really for?&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we first released the Spotify desktop app in Sweden in 2008, the idea of creating an on-the-go version of that same experience seemed out of the question. After all, Spotify didn’t have access to iPods or the other dedicated digital music players, and besides, at the time, most phones were equipped with only enough memory to hold a handful of songs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Then something happened. Smartphones happened. The iPhone happened. Suddenly the idea of creating a piece of software that people could carry around with them everywhere didn’t seem so far-fetched.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Though it was theoretically possible to create a mobile edition of Spotify, there was still one major issue. A free, offline music app, one that could truly compete with the already-offline MP3 players, just wasn’t in the cards. First off, it couldn’t be free — you can’t click on ads without an internet connection — so it would have to be a paid service. Plus, our listeners already had access to all the music they wanted through piracy. So, once again, we had to ask ourselves something: Why would anyone pay for Spotify? How do you charge for nothing? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And indeed, when we surveyed our users, we discovered that $10 per month — the number we settled on after months of licensing negotiations with labels (more on those in a bit) — was a number literally no one said they would pay.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Well, at least they &lt;em&gt;said&lt;/em&gt; that. See, user research is great, but you have to know what it’s really there for. That was our &lt;strong&gt;first lesson:&lt;/strong&gt; &lt;strong&gt;user research is for understanding what people &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;think&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt; they will do, not what they will actually do.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There’s a reason for that, as Gustav points out.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Gustav:&lt;/strong&gt; Humans are not very good at predicting our own future behavior, especially when it comes to what we are prepared to pay for something like convenience. We just can’t imagine our future selves being that lazy.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Exactly. In other words, just like we discovered while creating the desktop app, convenience is key. Of course people don’t think they would pay for something they were already getting for free — but they just might if it’s a lot more convenient than what they’re using. At least, that’s what we were betting on.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We just needed to find another magic trick.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Beware your optimization bias&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;That was easier said than done, though. Setting aside the business side of things, actually building a mobile experience convenient enough to convert music pirates was a tall order, one without an obvious solution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Back then, in the early days of Spotify, the desktop app may have technically been able to run on the iPhone, but that didn’t mean it was built for it. When Gustav asked Mattias Arrelid, one of Spotify’s early Mac developers, what the challenges were in translating the desktop app into a great mobile product, two things sprang immediately to Mattias’ mind:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;“One [challenge] is that … a phone doesn’t have a constant power supply. For example, it doesn’t have a constant high-bandwidth network connection. Spotify was, at that time, at least leveraging peer to peer … If you do that on the phone, you basically force it to keep the radio on quite a bit. And that is draining in terms of battery.”&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;“The other one is data. [When] you had Spotify running on the desktop, you relied on some kind of data connection that [you] don’t really need to care about … On the phone, you had many contracts that had limited bandwidth included in the monthly allowance. So you really wanted to be careful about your consumption of that.”&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It turns out by developing the desktop app to be as efficient as possible, we were actually developing something that was &lt;em&gt;only&lt;/em&gt; efficient as a desktop app. Concerns like bandwidth and power consumption never factored into the equation, since you don’t need to worry about them when you’re a desktop user. And that’s where &lt;strong&gt;the second lesson&lt;/strong&gt; comes in: &lt;strong&gt;whether you realize it or not, you’re always optimizing for something.&lt;/strong&gt; This isn’t always a bad thing — after all, you’re still optimizing — but you are unwittingly creating blind spots for you and your product, ones that can hamper your growth down the road.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One of the solutions Mattias and the engineering team came up with to improve battery performance involved changing up the codec we used to encode audio. (&lt;a href=&#34;https://open.spotify.com/episode/7oB1UYZtOiKqY1Gj3niptG?si=21630574510943f3&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Dive into the full episode&lt;/a&gt; to hear all the details about why.) But changing up our codec didn’t just have technical ramifications — it had business implications as well, implications that dovetail nicely with our final lesson.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Your tech is only half of the story&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify didn’t invent streaming, and it was only a matter of time until other companies could start to pull off a service similar to what we were offering. What we needed, in other words, was a breakthrough in our business strategy as well.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Enter licensing. Contrary to what you may expect, there isn’t a one-size-fits-all codec license for streaming songs. Different licenses are required for almost every use case — say, streaming on desktop versus streaming on mobile. This meant that hammering out licensing deals with record labels could end up being a lengthy, complex process. Rather than dealing with these complications, we saw plenty of other companies kick that sort of nitty-gritty work down the road, focusing instead on shipping code and getting to market quicker.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But to us, this wasn’t a sustainable strategy. So rather than take the same route, Spotify slowed things down, sweating the details in the negotiations for months on end, making sure that we had licenses that no one else had. That way, we could guarantee that we hit the ground running when we introduced a paid mobile tier. Here’s Spotify’s first general counsel, Petra Hansson, on the matter:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Petra:&lt;/strong&gt; We spent a lot of time getting those licenses right. Because, you know, back in the day, the norm was more to just sign any licenses and then, you know, try and flip the companies, so it became someone else’s problem or companies would go belly up. So we were sort of hell-bent. And that’s one of the reasons why I joined [Spotify], because what I really liked about the company was that [co-founder and CEO Daniel Ek]’s vision was always to build something long-term and sustainable.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As it so happens, truly great product development is more than just a cool new feature or even a breakthrough new technology. &lt;strong&gt;Our third lesson is that&lt;/strong&gt; &lt;strong&gt;truly great product development, in short, almost always combines technological innovation with business innovation.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;That’s another three lessons down, but there are plenty more to go. The podcast series &lt;em&gt;Spotify: A Product Story&lt;/em&gt; shares all these stories and dozens more, filled with insider insight and product strategy lessons from the employees, collaborators, and musicians who made Spotify what it is today. Join podcast host and Chief R&amp;amp;D Officer Gustav Söderström, and &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check out all the episodes right here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/10/05/a-product-story-three-lessons-we-learned-from-developing-the-mobile-app/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR Remember what life was like before smartphones? Remember manually having to sync your computer’s playlists with your iPod every time you added a few songs? One of Spotify’s core products, our mobile app, was designed specifically to leave all of that busywork in the past, changing how we trave</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            A Product Story: Three Lessons We Learned from Developing the Mobile App&#xA;</title>
    <updated>2021-10-05T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-10-05:/a-product-story-three-lessons-we-learned-from-developing-the-mobile-app/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;October 5, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/a-product-story-three-lessons-we-learned-from-developing-the-mobile-app/&#34; title=&#34;A Product Story: Three Lessons We Learned from Developing the Mobile App&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630.png 1201w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-250x131.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-700x368.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-768x404.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-120x63.png 120w&#34; sizes=&#34;(max-width: 1201px) 100vw, 1201px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;Remember what life was like before smartphones? Remember manually having to sync your computer’s playlists with your iPod every time you added a few songs? One of Spotify’s core products, our mobile app, was designed specifically to leave all of that busywork in the past, changing how we travel with our music forever.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In &lt;a href=&#34;https://open.spotify.com/episode/7oB1UYZtOiKqY1Gj3niptG?si=21630574510943f3&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Episode 02&lt;/a&gt; of our podcast series, &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Spotify: A Product Story&lt;/em&gt;&lt;/a&gt;&lt;em&gt;,&lt;/em&gt; host and Chief R&amp;amp;D Officer Gustav Söderström chats with the engineers, executives, and other Spotifiers who helped make the mobile streaming revolution possible. Why was it so difficult to create Spotify for mobile even after we created the desktop app? Why were Spotify’s licensing deals such a game changer for us? Keep reading to find out the answers, and don’t forget to &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB?si=pX_Ez7ZHR3untiFXd5WaNA&amp;amp;dl_branch=1&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;listen to the podcast&lt;/a&gt; itself to learn even more.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;What’s user research really for?&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we first released the Spotify desktop app in Sweden in 2008, the idea of creating an on-the-go version of that same experience seemed out of the question. After all, Spotify didn’t have access to iPods or the other dedicated digital music players, and besides, at the time, most phones were equipped with only enough memory to hold a handful of songs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Then something happened. Smartphones happened. The iPhone happened. Suddenly the idea of creating a piece of software that people could carry around with them everywhere didn’t seem so far-fetched.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Though it was theoretically possible to create a mobile edition of Spotify, there was still one major issue. A free, offline music app, one that could truly compete with the already-offline MP3 players, just wasn’t in the cards. First off, it couldn’t be free — you can’t click on ads without an internet connection — so it would have to be a paid service. Plus, our listeners already had access to all the music they wanted through piracy. So, once again, we had to ask ourselves something: Why would anyone pay for Spotify? How do you charge for nothing? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And indeed, when we surveyed our users, we discovered that $10 per month — the number we settled on after months of licensing negotiations with labels (more on those in a bit) — was a number literally no one said they would pay.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Well, at least they &lt;em&gt;said&lt;/em&gt; that. See, user research is great, but you have to know what it’s really there for. That was our &lt;strong&gt;first lesson:&lt;/strong&gt; &lt;strong&gt;user research is for understanding what people &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;think&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt; they will do, not what they will actually do.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There’s a reason for that, as Gustav points out.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Gustav:&lt;/strong&gt; Humans are not very good at predicting our own future behavior, especially when it comes to what we are prepared to pay for something like convenience. We just can’t imagine our future selves being that lazy.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Exactly. In other words, just like we discovered while creating the desktop app, convenience is key. Of course people don’t think they would pay for something they were already getting for free — but they just might if it’s a lot more convenient than what they’re using. At least, that’s what we were betting on.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We just needed to find another magic trick.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Beware your optimization bias&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;That was easier said than done, though. Setting aside the business side of things, actually building a mobile experience convenient enough to convert music pirates was a tall order, one without an obvious solution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Back then, in the early days of Spotify, the desktop app may have technically been able to run on the iPhone, but that didn’t mean it was built for it. When Gustav asked Mattias Arrelid, one of Spotify’s early Mac developers, what the challenges were in translating the desktop app into a great mobile product, two things sprang immediately to Mattias’ mind:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;“One [challenge] is that … a phone doesn’t have a constant power supply. For example, it doesn’t have a constant high-bandwidth network connection. Spotify was, at that time, at least leveraging peer to peer … If you do that on the phone, you basically force it to keep the radio on quite a bit. And that is draining in terms of battery.”&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;“The other one is data. [When] you had Spotify running on the desktop, you relied on some kind of data connection that [you] don’t really need to care about … On the phone, you had many contracts that had limited bandwidth included in the monthly allowance. So you really wanted to be careful about your consumption of that.”&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It turns out by developing the desktop app to be as efficient as possible, we were actually developing something that was &lt;em&gt;only&lt;/em&gt; efficient as a desktop app. Concerns like bandwidth and power consumption never factored into the equation, since you don’t need to worry about them when you’re a desktop user. And that’s where &lt;strong&gt;the second lesson&lt;/strong&gt; comes in: &lt;strong&gt;whether you realize it or not, you’re always optimizing for something.&lt;/strong&gt; This isn’t always a bad thing — after all, you’re still optimizing — but you are unwittingly creating blind spots for you and your product, ones that can hamper your growth down the road.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One of the solutions Mattias and the engineering team came up with to improve battery performance involved changing up the codec we used to encode audio. (&lt;a href=&#34;https://open.spotify.com/episode/7oB1UYZtOiKqY1Gj3niptG?si=21630574510943f3&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Dive into the full episode&lt;/a&gt; to hear all the details about why.) But changing up our codec didn’t just have technical ramifications — it had business implications as well, implications that dovetail nicely with our final lesson.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Your tech is only half of the story&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify didn’t invent streaming, and it was only a matter of time until other companies could start to pull off a service similar to what we were offering. What we needed, in other words, was a breakthrough in our business strategy as well.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Enter licensing. Contrary to what you may expect, there isn’t a one-size-fits-all codec license for streaming songs. Different licenses are required for almost every use case — say, streaming on desktop versus streaming on mobile. This meant that hammering out licensing deals with record labels could end up being a lengthy, complex process. Rather than dealing with these complications, we saw plenty of other companies kick that sort of nitty-gritty work down the road, focusing instead on shipping code and getting to market quicker.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But to us, this wasn’t a sustainable strategy. So rather than take the same route, Spotify slowed things down, sweating the details in the negotiations for months on end, making sure that we had licenses that no one else had. That way, we could guarantee that we hit the ground running when we introduced a paid mobile tier. Here’s Spotify’s first general counsel, Petra Hansson, on the matter:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Petra:&lt;/strong&gt; We spent a lot of time getting those licenses right. Because, you know, back in the day, the norm was more to just sign any licenses and then, you know, try and flip the companies, so it became someone else’s problem or companies would go belly up. So we were sort of hell-bent. And that’s one of the reasons why I joined [Spotify], because what I really liked about the company was that [co-founder and CEO Daniel Ek]’s vision was always to build something long-term and sustainable.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As it so happens, truly great product development is more than just a cool new feature or even a breakthrough new technology. &lt;strong&gt;Our third lesson is that&lt;/strong&gt; &lt;strong&gt;truly great product development, in short, almost always combines technological innovation with business innovation.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;That’s another three lessons down, but there are plenty more to go. The podcast series &lt;em&gt;Spotify: A Product Story&lt;/em&gt; shares all these stories and dozens more, filled with insider insight and product strategy lessons from the employees, collaborators, and musicians who made Spotify what it is today. Join podcast host and Chief R&amp;amp;D Officer Gustav Söderström, and &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check out all the episodes right here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/a-product-story-three-lessons-we-learned-from-developing-the-mobile-app/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR Remember what life was like before smartphones? Remember manually having to sync your computer’s playlists with your iPod every time you added a few songs? One of Spotify’s core products, our mobile app, was designed specifically to leave all of that busywork in the past, changing how we trave</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            A Product Story: Three Lessons We Learned from Developing the Mobile App&#xA;</title>
    <updated>2021-10-05T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-10-05:/2021/10/a-product-story-three-lessons-we-learned-from-developing-the-mobile-app/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;October 5, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/10/a-product-story-three-lessons-we-learned-from-developing-the-mobile-app/&#34; title=&#34;A Product Story: Three Lessons We Learned from Developing the Mobile App&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630.png 1201w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-250x131.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-700x368.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-768x404.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630-120x63.png 120w&#34; sizes=&#34;(max-width: 1201px) 100vw, 1201px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;Remember what life was like before smartphones? Remember manually having to sync your computer’s playlists with your iPod every time you added a few songs? One of Spotify’s core products, our mobile app, was designed specifically to leave all of that busywork in the past, changing how we travel with our music forever.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In &lt;a href=&#34;https://open.spotify.com/episode/7oB1UYZtOiKqY1Gj3niptG?si=21630574510943f3&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Episode 02&lt;/a&gt; of our podcast series, &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Spotify: A Product Story&lt;/em&gt;&lt;/a&gt;&lt;em&gt;,&lt;/em&gt; host and Chief R&amp;amp;D Officer Gustav Söderström chats with the engineers, executives, and other Spotifiers who helped make the mobile streaming revolution possible. Why was it so difficult to create Spotify for mobile even after we created the desktop app? Why were Spotify’s licensing deals such a game changer for us? Keep reading to find out the answers, and don’t forget to &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB?si=pX_Ez7ZHR3untiFXd5WaNA&amp;amp;dl_branch=1&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;listen to the podcast&lt;/a&gt; itself to learn even more.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;What’s user research really for?&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we first released the Spotify desktop app in Sweden in 2008, the idea of creating an on-the-go version of that same experience seemed out of the question. After all, Spotify didn’t have access to iPods or the other dedicated digital music players, and besides, at the time, most phones were equipped with only enough memory to hold a handful of songs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Then something happened. Smartphones happened. The iPhone happened. Suddenly the idea of creating a piece of software that people could carry around with them everywhere didn’t seem so far-fetched.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Though it was theoretically possible to create a mobile edition of Spotify, there was still one major issue. A free, offline music app, one that could truly compete with the already-offline MP3 players, just wasn’t in the cards. First off, it couldn’t be free — you can’t click on ads without an internet connection — so it would have to be a paid service. Plus, our listeners already had access to all the music they wanted through piracy. So, once again, we had to ask ourselves something: Why would anyone pay for Spotify? How do you charge for nothing? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And indeed, when we surveyed our users, we discovered that $10 per month — the number we settled on after months of licensing negotiations with labels (more on those in a bit) — was a number literally no one said they would pay.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Well, at least they &lt;em&gt;said&lt;/em&gt; that. See, user research is great, but you have to know what it’s really there for. That was our &lt;strong&gt;first lesson:&lt;/strong&gt; &lt;strong&gt;user research is for understanding what people &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;think&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt; they will do, not what they will actually do.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There’s a reason for that, as Gustav points out.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Gustav:&lt;/strong&gt; Humans are not very good at predicting our own future behavior, especially when it comes to what we are prepared to pay for something like convenience. We just can’t imagine our future selves being that lazy.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Exactly. In other words, just like we discovered while creating the desktop app, convenience is key. Of course people don’t think they would pay for something they were already getting for free — but they just might if it’s a lot more convenient than what they’re using. At least, that’s what we were betting on.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We just needed to find another magic trick.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Beware your optimization bias&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;That was easier said than done, though. Setting aside the business side of things, actually building a mobile experience convenient enough to convert music pirates was a tall order, one without an obvious solution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Back then, in the early days of Spotify, the desktop app may have technically been able to run on the iPhone, but that didn’t mean it was built for it. When Gustav asked Mattias Arrelid, one of Spotify’s early Mac developers, what the challenges were in translating the desktop app into a great mobile product, two things sprang immediately to Mattias’ mind:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;“One [challenge] is that … a phone doesn’t have a constant power supply. For example, it doesn’t have a constant high-bandwidth network connection. Spotify was, at that time, at least leveraging peer to peer … If you do that on the phone, you basically force it to keep the radio on quite a bit. And that is draining in terms of battery.”&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;“The other one is data. [When] you had Spotify running on the desktop, you relied on some kind of data connection that [you] don’t really need to care about … On the phone, you had many contracts that had limited bandwidth included in the monthly allowance. So you really wanted to be careful about your consumption of that.”&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It turns out by developing the desktop app to be as efficient as possible, we were actually developing something that was &lt;em&gt;only&lt;/em&gt; efficient as a desktop app. Concerns like bandwidth and power consumption never factored into the equation, since you don’t need to worry about them when you’re a desktop user. And that’s where &lt;strong&gt;the second lesson&lt;/strong&gt; comes in: &lt;strong&gt;whether you realize it or not, you’re always optimizing for something.&lt;/strong&gt; This isn’t always a bad thing — after all, you’re still optimizing — but you are unwittingly creating blind spots for you and your product, ones that can hamper your growth down the road.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One of the solutions Mattias and the engineering team came up with to improve battery performance involved changing up the codec we used to encode audio. (&lt;a href=&#34;https://open.spotify.com/episode/7oB1UYZtOiKqY1Gj3niptG?si=21630574510943f3&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Dive into the full episode&lt;/a&gt; to hear all the details about why.) But changing up our codec didn’t just have technical ramifications — it had business implications as well, implications that dovetail nicely with our final lesson.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Your tech is only half of the story&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify didn’t invent streaming, and it was only a matter of time until other companies could start to pull off a service similar to what we were offering. What we needed, in other words, was a breakthrough in our business strategy as well.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Enter licensing. Contrary to what you may expect, there isn’t a one-size-fits-all codec license for streaming songs. Different licenses are required for almost every use case — say, streaming on desktop versus streaming on mobile. This meant that hammering out licensing deals with record labels could end up being a lengthy, complex process. Rather than dealing with these complications, we saw plenty of other companies kick that sort of nitty-gritty work down the road, focusing instead on shipping code and getting to market quicker.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But to us, this wasn’t a sustainable strategy. So rather than take the same route, Spotify slowed things down, sweating the details in the negotiations for months on end, making sure that we had licenses that no one else had. That way, we could guarantee that we hit the ground running when we introduced a paid mobile tier. Here’s Spotify’s first general counsel, Petra Hansson, on the matter:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Petra:&lt;/strong&gt; We spent a lot of time getting those licenses right. Because, you know, back in the day, the norm was more to just sign any licenses and then, you know, try and flip the companies, so it became someone else’s problem or companies would go belly up. So we were sort of hell-bent. And that’s one of the reasons why I joined [Spotify], because what I really liked about the company was that [co-founder and CEO Daniel Ek]’s vision was always to build something long-term and sustainable.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As it so happens, truly great product development is more than just a cool new feature or even a breakthrough new technology. &lt;strong&gt;Our third lesson is that&lt;/strong&gt; &lt;strong&gt;truly great product development, in short, almost always combines technological innovation with business innovation.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;That’s another three lessons down, but there are plenty more to go. The podcast series &lt;em&gt;Spotify: A Product Story&lt;/em&gt; shares all these stories and dozens more, filled with insider insight and product strategy lessons from the employees, collaborators, and musicians who made Spotify what it is today. Join podcast host and Chief R&amp;amp;D Officer Gustav Söderström, and &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check out all the episodes right here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/10/a-product-story-three-lessons-we-learned-from-developing-the-mobile-app/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/10/A-Product-Story_02-Illustration_1200x630.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR Remember what life was like before smartphones? Remember manually having to sync your computer’s playlists with your iPod every time you added a few songs? One of Spotify’s core products, our mobile app, was designed specifically to leave all of that busywork in the past, changing how we trave</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            How Backstage Made Our Developers More Effective — And How It Can Help Yours, Too&#xA;</title>
    <updated>2021-09-23T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-09-23:/how-backstage-made-our-developers-more-effective-and-how-it-can-help-yours-too/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;September 23, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/how-backstage-made-our-developers-more-effective-and-how-it-can-help-yours-too/&#34; title=&#34;How Backstage Made Our Developers More Effective — And How It Can Help Yours, Too&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header.png 512w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header-250x131.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header-120x63.png 120w&#34; sizes=&#34;(max-width: 512px) 100vw, 512px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;What’s the best way to assess your developers’ experience and performance to discover what they need help with? Is it by measuring something arbitrary, like how many lines of code they’ve written or how many commits they’ve made? Nope. How much useful data are you really getting out of those numbers anyway?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Instead, it’s more helpful to think of performance in terms of “developer effectiveness”. Suddenly, it’s not about the quantity of work and time spent, but the quality. Are engineers wasting a bunch of their days just trying to find what they need to get started, or are they able to jump straight into the work they really want to do with as few blockers as possible?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Pia Nilsson, Director of Engineering and Head of Platform Developer Experience at Spotify, addressed these and other questions on the &lt;a href=&#34;https://www.thoughtworks.com/insights/podcasts/technology-podcasts/developer-effectiveness&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Thoughtworks&lt;/em&gt; podcast&lt;/a&gt;: What types of problems do Spotify engineers face? And why did we create &lt;a href=&#34;http://backstage.spotify.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt; to address those issues? Read on to find out how exactly Backstage helped us, and how you can use Backstage to boost the effectiveness of your own team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Growing pains&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As Pia explains in the podcast, when she started at Spotify in 2016, we were facing an interesting problem. We were in the middle of a hiring boom during a period of exponential growth. From the outside, everything seemed to be moving along swimmingly. But internally, a few metrics were giving us pause; specifically, our productivity wasn’t increasing at all, even with all the new hires.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So we did what we always do: we looked at the data. We had a few metrics for determining and monitoring developer effectiveness — deployment frequency, for instance — but the most crucial was our onboarding metric. You see, we gauge how well our onboarding process is working by measuring how long it takes for a new engineer to make their tenth pull request. And in the midst of our hiring frenzy, that number was getting incredibly high: over 60 days. Clearly something had to be done, but what were the issues developers were facing to begin with?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Pia and her team looked into the issue, and this was the feedback she got back from the engineers, in her own words:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;“First, it was the context switching … because we had a very fragmented ecosystem. Why did we have a fragmented ecosystem? … Every single team is like a little startup, and it’s free to charge ahead and reach their mission by themselves … This is very conducive for speed, but when we grow, that’s where stuff starts to break down. Of course, this leads to a lot of cognitive load for our engineers.”&lt;br/&gt;&lt;/li&gt;&lt;li&gt;“The number two blocker was that it’s just hard to find things. Which service should I be integrating with as an engineer? Should I use the user data service that the customer service team has built? Or should I use the slightly different user data service that the premium team has built? Or should I just go ahead and build my own? This, of course, leads to further fragmentation, and we’re back to problem number one.”&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Considering both of these challenges, it’s clear that as Spotify grew, our famously autonomous culture was also driving our working environment to become increasingly convoluted and disparate. No one was on the same page, and it was starting to weigh us down. The obvious solution, of course, would be to mandate our engineers use the same technologies and microservices so that we started acting more as a monolith.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But that just wouldn’t fly at Spotify. Again, our autonomous culture, and all the freedom that comes with it, was a big reason a lot of people liked working at Spotify to begin with. It’s key to our identity. Mandating our problems away was out of the question.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;What else could we do? What we needed was a solution that prioritized developers and their ways of working. What we needed was a place where everyone could go to find everything they needed, no matter what it was. What we needed was Backstage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Backstage: a platform for your platforms&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As Pia notes, Spotify developed &lt;a href=&#34;https://engineering.atspotify.com/2020/03/17/what-the-heck-is-backstage-anyway/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt; to help our engineers do three different things: find stuff, manage stuff, and create stuff. In other words, it’s built to address all the blockers our engineers were facing, especially in terms of discoverability.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Where our engineers used to spend hours of their week just looking for things — documentation, platforms, systems and their owners — all over the internet, now they can find everything in one place: Backstage. Similarly, rather than moving from tab to tab, checking to see the health of, say, their Kubernetes clusters or the status of their recent deployment, engineers can now use Backstage to bring together monitoring tools, logging, their CI/CD pipeline, and whatever else our engineers needed to manage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, let’s say our engineers want to spin up a new ML model, data pipeline, or some other component or microservice. Rather than building something on their own, introducing yet another instance of boilerplate code similar to a dozen others in our ecosystem, they can now use Backstage to do that work for them. Not only does this save them time if they choose to do this, but these new components and services are also set up using our own best practices and tech standards — what we call our &lt;a href=&#34;https://engineering.atspotify.com/2020/08/17/how-we-use-golden-paths-to-solve-fragmentation-in-our-software-ecosystem/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Golden Paths&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Because of this, we’re able to have our cake and eat it too. Our engineers and squads can remain entirely autonomous, even as Backstage nudges them toward walking down these Golden Paths, thereby increasing our teams’ alignment and keeping our ecosystem from becoming more fragmented. Additionally, because &lt;a href=&#34;https://github.com/backstage/backstage&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage is a rapidly growing open source tool&lt;/a&gt;, more and more features and plugins are constantly being added for a variety of use cases beyond the ones mentioned here.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, with all that being said, was Backstage worth all the time and money we invested into it? Well, let’s go back to the onboarding metrics one more time. Remember when Pia discovered that it took over 60 days for onboarding engineers to merge their tenth pull request? After Backstage was introduced, that number dropped to only 20. “And if you have numbers like that in your organization,” mentions Pia, “I find that it’s easy to get buy-in for investments in developer experience.” &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Interested in hearing more about Backstage and what it can do for you? To hear more from Pia discussing Backstage and developer effectiveness with other engineers, check out the &lt;a href=&#34;https://www.thoughtworks.com/insights/podcasts/technology-podcasts/developer-effectiveness&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Thoughtworks podcast episode&lt;/a&gt;. And if you’re curious about how to get started with Backstage, read more about that &lt;a href=&#34;https://backstage.spotify.com/blog/getting-started-with-backstage/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/how-backstage-made-our-developers-more-effective-and-how-it-can-help-yours-too/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">What’s the best way to assess your developers’ experience and performance to discover what they need help with? Is it by measuring something arbitrary, like how many lines of code they’ve written or how many commits they’ve made? Nope. How much useful data are you really getting out of those numbers</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            How Backstage Made Our Developers More Effective — And How It Can Help Yours, Too&#xA;</title>
    <updated>2021-09-23T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-09-23:/2021/09/how-backstage-made-our-developers-more-effective-and-how-it-can-help-yours-too/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;September 23, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/09/how-backstage-made-our-developers-more-effective-and-how-it-can-help-yours-too/&#34; title=&#34;How Backstage Made Our Developers More Effective — And How It Can Help Yours, Too&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header.png 512w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header-250x131.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header-120x63.png 120w&#34; sizes=&#34;(max-width: 512px) 100vw, 512px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;What’s the best way to assess your developers’ experience and performance to discover what they need help with? Is it by measuring something arbitrary, like how many lines of code they’ve written or how many commits they’ve made? Nope. How much useful data are you really getting out of those numbers anyway?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Instead, it’s more helpful to think of performance in terms of “developer effectiveness”. Suddenly, it’s not about the quantity of work and time spent, but the quality. Are engineers wasting a bunch of their days just trying to find what they need to get started, or are they able to jump straight into the work they really want to do with as few blockers as possible?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Pia Nilsson, Director of Engineering and Head of Platform Developer Experience at Spotify, addressed these and other questions on the &lt;a href=&#34;https://www.thoughtworks.com/insights/podcasts/technology-podcasts/developer-effectiveness&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Thoughtworks&lt;/em&gt; podcast&lt;/a&gt;: What types of problems do Spotify engineers face? And why did we create &lt;a href=&#34;http://backstage.spotify.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt; to address those issues? Read on to find out how exactly Backstage helped us, and how you can use Backstage to boost the effectiveness of your own team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Growing pains&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As Pia explains in the podcast, when she started at Spotify in 2016, we were facing an interesting problem. We were in the middle of a hiring boom during a period of exponential growth. From the outside, everything seemed to be moving along swimmingly. But internally, a few metrics were giving us pause; specifically, our productivity wasn’t increasing at all, even with all the new hires.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So we did what we always do: we looked at the data. We had a few metrics for determining and monitoring developer effectiveness — deployment frequency, for instance — but the most crucial was our onboarding metric. You see, we gauge how well our onboarding process is working by measuring how long it takes for a new engineer to make their tenth pull request. And in the midst of our hiring frenzy, that number was getting incredibly high: over 60 days. Clearly something had to be done, but what were the issues developers were facing to begin with?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Pia and her team looked into the issue, and this was the feedback she got back from the engineers, in her own words:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;“First, it was the context switching … because we had a very fragmented ecosystem. Why did we have a fragmented ecosystem? … Every single team is like a little startup, and it’s free to charge ahead and reach their mission by themselves … This is very conducive for speed, but when we grow, that’s where stuff starts to break down. Of course, this leads to a lot of cognitive load for our engineers.”&lt;br/&gt;&lt;/li&gt;&lt;li&gt;“The number two blocker was that it’s just hard to find things. Which service should I be integrating with as an engineer? Should I use the user data service that the customer service team has built? Or should I use the slightly different user data service that the premium team has built? Or should I just go ahead and build my own? This, of course, leads to further fragmentation, and we’re back to problem number one.”&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Considering both of these challenges, it’s clear that as Spotify grew, our famously autonomous culture was also driving our working environment to become increasingly convoluted and disparate. No one was on the same page, and it was starting to weigh us down. The obvious solution, of course, would be to mandate our engineers use the same technologies and microservices so that we started acting more as a monolith.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But that just wouldn’t fly at Spotify. Again, our autonomous culture, and all the freedom that comes with it, was a big reason a lot of people liked working at Spotify to begin with. It’s key to our identity. Mandating our problems away was out of the question.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;What else could we do? What we needed was a solution that prioritized developers and their ways of working. What we needed was a place where everyone could go to find everything they needed, no matter what it was. What we needed was Backstage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Backstage: a platform for your platforms&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As Pia notes, Spotify developed &lt;a href=&#34;https://engineering.atspotify.com/2020/03/17/what-the-heck-is-backstage-anyway/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt; to help our engineers do three different things: find stuff, manage stuff, and create stuff. In other words, it’s built to address all the blockers our engineers were facing, especially in terms of discoverability.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Where our engineers used to spend hours of their week just looking for things — documentation, platforms, systems and their owners — all over the internet, now they can find everything in one place: Backstage. Similarly, rather than moving from tab to tab, checking to see the health of, say, their Kubernetes clusters or the status of their recent deployment, engineers can now use Backstage to bring together monitoring tools, logging, their CI/CD pipeline, and whatever else our engineers needed to manage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, let’s say our engineers want to spin up a new ML model, data pipeline, or some other component or microservice. Rather than building something on their own, introducing yet another instance of boilerplate code similar to a dozen others in our ecosystem, they can now use Backstage to do that work for them. Not only does this save them time if they choose to do this, but these new components and services are also set up using our own best practices and tech standards — what we call our &lt;a href=&#34;https://engineering.atspotify.com/2020/08/17/how-we-use-golden-paths-to-solve-fragmentation-in-our-software-ecosystem/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Golden Paths&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Because of this, we’re able to have our cake and eat it too. Our engineers and squads can remain entirely autonomous, even as Backstage nudges them toward walking down these Golden Paths, thereby increasing our teams’ alignment and keeping our ecosystem from becoming more fragmented. Additionally, because &lt;a href=&#34;https://github.com/backstage/backstage&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage is a rapidly growing open source tool&lt;/a&gt;, more and more features and plugins are constantly being added for a variety of use cases beyond the ones mentioned here.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, with all that being said, was Backstage worth all the time and money we invested into it? Well, let’s go back to the onboarding metrics one more time. Remember when Pia discovered that it took over 60 days for onboarding engineers to merge their tenth pull request? After Backstage was introduced, that number dropped to only 20. “And if you have numbers like that in your organization,” mentions Pia, “I find that it’s easy to get buy-in for investments in developer experience.” &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Interested in hearing more about Backstage and what it can do for you? To hear more from Pia discussing Backstage and developer effectiveness with other engineers, check out the &lt;a href=&#34;https://www.thoughtworks.com/insights/podcasts/technology-podcasts/developer-effectiveness&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Thoughtworks podcast episode&lt;/a&gt;. And if you’re curious about how to get started with Backstage, read more about that &lt;a href=&#34;https://backstage.spotify.com/blog/getting-started-with-backstage/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/09/how-backstage-made-our-developers-more-effective-and-how-it-can-help-yours-too/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">What’s the best way to assess your developers’ experience and performance to discover what they need help with? Is it by measuring something arbitrary, like how many lines of code they’ve written or how many commits they’ve made? Nope. How much useful data are you really getting out of those numbers</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            How Backstage Made Our Developers More Effective — And How It Can Help Yours, Too&#xA;</title>
    <updated>2021-09-23T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-09-23:/how-backstage-made-our-developers-more-effective-and-how-it-can-help-yours-too/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;September 23, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/how-backstage-made-our-developers-more-effective-and-how-it-can-help-yours-too/&#34; title=&#34;How Backstage Made Our Developers More Effective — And How It Can Help Yours, Too&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header.png 512w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header-250x131.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header-120x63.png 120w&#34; sizes=&#34;(max-width: 512px) 100vw, 512px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;What’s the best way to assess your developers’ experience and performance to discover what they need help with? Is it by measuring something arbitrary, like how many lines of code they’ve written or how many commits they’ve made? Nope. How much useful data are you really getting out of those numbers anyway?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Instead, it’s more helpful to think of performance in terms of “developer effectiveness”. Suddenly, it’s not about the quantity of work and time spent, but the quality. Are engineers wasting a bunch of their days just trying to find what they need to get started, or are they able to jump straight into the work they really want to do with as few blockers as possible?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Pia Nilsson, Director of Engineering and Head of Platform Developer Experience at Spotify, addressed these and other questions on the &lt;a href=&#34;https://www.thoughtworks.com/insights/podcasts/technology-podcasts/developer-effectiveness&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Thoughtworks&lt;/em&gt; podcast&lt;/a&gt;: What types of problems do Spotify engineers face? And why did we create &lt;a href=&#34;http://backstage.spotify.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt; to address those issues? Read on to find out how exactly Backstage helped us, and how you can use Backstage to boost the effectiveness of your own team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Growing pains&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As Pia explains in the podcast, when she started at Spotify in 2016, we were facing an interesting problem. We were in the middle of a hiring boom during a period of exponential growth. From the outside, everything seemed to be moving along swimmingly. But internally, a few metrics were giving us pause; specifically, our productivity wasn’t increasing at all, even with all the new hires.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So we did what we always do: we looked at the data. We had a few metrics for determining and monitoring developer effectiveness — deployment frequency, for instance — but the most crucial was our onboarding metric. You see, we gauge how well our onboarding process is working by measuring how long it takes for a new engineer to make their tenth pull request. And in the midst of our hiring frenzy, that number was getting incredibly high: over 60 days. Clearly something had to be done, but what were the issues developers were facing to begin with?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Pia and her team looked into the issue, and this was the feedback she got back from the engineers, in her own words:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;“First, it was the context switching … because we had a very fragmented ecosystem. Why did we have a fragmented ecosystem? … Every single team is like a little startup, and it’s free to charge ahead and reach their mission by themselves … This is very conducive for speed, but when we grow, that’s where stuff starts to break down. Of course, this leads to a lot of cognitive load for our engineers.”&lt;br/&gt;&lt;/li&gt;&lt;li&gt;“The number two blocker was that it’s just hard to find things. Which service should I be integrating with as an engineer? Should I use the user data service that the customer service team has built? Or should I use the slightly different user data service that the premium team has built? Or should I just go ahead and build my own? This, of course, leads to further fragmentation, and we’re back to problem number one.”&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Considering both of these challenges, it’s clear that as Spotify grew, our famously autonomous culture was also driving our working environment to become increasingly convoluted and disparate. No one was on the same page, and it was starting to weigh us down. The obvious solution, of course, would be to mandate our engineers use the same technologies and microservices so that we started acting more as a monolith.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But that just wouldn’t fly at Spotify. Again, our autonomous culture, and all the freedom that comes with it, was a big reason a lot of people liked working at Spotify to begin with. It’s key to our identity. Mandating our problems away was out of the question.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;What else could we do? What we needed was a solution that prioritized developers and their ways of working. What we needed was a place where everyone could go to find everything they needed, no matter what it was. What we needed was Backstage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Backstage: a platform for your platforms&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As Pia notes, Spotify developed &lt;a href=&#34;https://engineering.atspotify.com/2020/03/17/what-the-heck-is-backstage-anyway/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt; to help our engineers do three different things: find stuff, manage stuff, and create stuff. In other words, it’s built to address all the blockers our engineers were facing, especially in terms of discoverability.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Where our engineers used to spend hours of their week just looking for things — documentation, platforms, systems and their owners — all over the internet, now they can find everything in one place: Backstage. Similarly, rather than moving from tab to tab, checking to see the health of, say, their Kubernetes clusters or the status of their recent deployment, engineers can now use Backstage to bring together monitoring tools, logging, their CI/CD pipeline, and whatever else our engineers needed to manage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, let’s say our engineers want to spin up a new ML model, data pipeline, or some other component or microservice. Rather than building something on their own, introducing yet another instance of boilerplate code similar to a dozen others in our ecosystem, they can now use Backstage to do that work for them. Not only does this save them time if they choose to do this, but these new components and services are also set up using our own best practices and tech standards — what we call our &lt;a href=&#34;https://engineering.atspotify.com/2020/08/17/how-we-use-golden-paths-to-solve-fragmentation-in-our-software-ecosystem/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Golden Paths&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Because of this, we’re able to have our cake and eat it too. Our engineers and squads can remain entirely autonomous, even as Backstage nudges them toward walking down these Golden Paths, thereby increasing our teams’ alignment and keeping our ecosystem from becoming more fragmented. Additionally, because &lt;a href=&#34;https://github.com/backstage/backstage&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage is a rapidly growing open source tool&lt;/a&gt;, more and more features and plugins are constantly being added for a variety of use cases beyond the ones mentioned here.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, with all that being said, was Backstage worth all the time and money we invested into it? Well, let’s go back to the onboarding metrics one more time. Remember when Pia discovered that it took over 60 days for onboarding engineers to merge their tenth pull request? After Backstage was introduced, that number dropped to only 20. “And if you have numbers like that in your organization,” mentions Pia, “I find that it’s easy to get buy-in for investments in developer experience.” &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Interested in hearing more about Backstage and what it can do for you? To hear more from Pia discussing Backstage and developer effectiveness with other engineers, check out the &lt;a href=&#34;https://www.thoughtworks.com/insights/podcasts/technology-podcasts/developer-effectiveness&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Thoughtworks podcast episode&lt;/a&gt;. And if you’re curious about how to get started with Backstage, read more about that &lt;a href=&#34;https://backstage.spotify.com/blog/getting-started-with-backstage/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/how-backstage-made-our-developers-more-effective-and-how-it-can-help-yours-too/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Backstage_Developers_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">What’s the best way to assess your developers’ experience and performance to discover what they need help with? Is it by measuring something arbitrary, like how many lines of code they’ve written or how many commits they’ve made? Nope. How much useful data are you really getting out of those numbers</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            How Backstage Made Our Developers More Effective — And How It Can Help Yours, Too&#xA;</title>
    <updated>2021-09-23T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-09-23:/2021/09/23/how-backstage-made-our-developers-more-effective-and-how-it-can-help-yours-too/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;September 23, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/09/23/how-backstage-made-our-developers-more-effective-and-how-it-can-help-yours-too/&#34; title=&#34;How Backstage Made Our Developers More Effective — And How It Can Help Yours, Too&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Backstage_Developers_Header.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Backstage_Developers_Header.png 512w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Backstage_Developers_Header-250x131.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Backstage_Developers_Header-120x63.png 120w&#34; sizes=&#34;(max-width: 512px) 100vw, 512px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/09/Backstage_Developers_Header.png&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;What’s the best way to assess your developers’ experience and performance to discover what they need help with? Is it by measuring something arbitrary, like how many lines of code they’ve written or how many commits they’ve made? Nope. How much useful data are you really getting out of those numbers anyway?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Instead, it’s more helpful to think of performance in terms of “developer effectiveness”. Suddenly, it’s not about the quantity of work and time spent, but the quality. Are engineers wasting a bunch of their days just trying to find what they need to get started, or are they able to jump straight into the work they really want to do with as few blockers as possible?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Pia Nilsson, Director of Engineering and Head of Platform Developer Experience at Spotify, addressed these and other questions on the &lt;a href=&#34;https://www.thoughtworks.com/insights/podcasts/technology-podcasts/developer-effectiveness&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Thoughtworks&lt;/em&gt; podcast&lt;/a&gt;: What types of problems do Spotify engineers face? And why did we create &lt;a href=&#34;http://backstage.spotify.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt; to address those issues? Read on to find out how exactly Backstage helped us, and how you can use Backstage to boost the effectiveness of your own team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Growing pains&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As Pia explains in the podcast, when she started at Spotify in 2016, we were facing an interesting problem. We were in the middle of a hiring boom during a period of exponential growth. From the outside, everything seemed to be moving along swimmingly. But internally, a few metrics were giving us pause; specifically, our productivity wasn’t increasing at all, even with all the new hires.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So we did what we always do: we looked at the data. We had a few metrics for determining and monitoring developer effectiveness — deployment frequency, for instance — but the most crucial was our onboarding metric. You see, we gauge how well our onboarding process is working by measuring how long it takes for a new engineer to make their tenth pull request. And in the midst of our hiring frenzy, that number was getting incredibly high: over 60 days. Clearly something had to be done, but what were the issues developers were facing to begin with?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Pia and her team looked into the issue, and this was the feedback she got back from the engineers, in her own words:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;“First, it was the context switching … because we had a very fragmented ecosystem. Why did we have a fragmented ecosystem? … Every single team is like a little startup, and it’s free to charge ahead and reach their mission by themselves … This is very conducive for speed, but when we grow, that’s where stuff starts to break down. Of course, this leads to a lot of cognitive load for our engineers.”&lt;br/&gt;&lt;/li&gt;&lt;li&gt;“The number two blocker was that it’s just hard to find things. Which service should I be integrating with as an engineer? Should I use the user data service that the customer service team has built? Or should I use the slightly different user data service that the premium team has built? Or should I just go ahead and build my own? This, of course, leads to further fragmentation, and we’re back to problem number one.”&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Considering both of these challenges, it’s clear that as Spotify grew, our famously autonomous culture was also driving our working environment to become increasingly convoluted and disparate. No one was on the same page, and it was starting to weigh us down. The obvious solution, of course, would be to mandate our engineers use the same technologies and microservices so that we started acting more as a monolith.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But that just wouldn’t fly at Spotify. Again, our autonomous culture, and all the freedom that comes with it, was a big reason a lot of people liked working at Spotify to begin with. It’s key to our identity. Mandating our problems away was out of the question.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;What else could we do? What we needed was a solution that prioritized developers and their ways of working. What we needed was a place where everyone could go to find everything they needed, no matter what it was. What we needed was Backstage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Backstage: a platform for your platforms&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As Pia notes, Spotify developed &lt;a href=&#34;https://engineering.atspotify.com/2020/03/17/what-the-heck-is-backstage-anyway/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt; to help our engineers do three different things: find stuff, manage stuff, and create stuff. In other words, it’s built to address all the blockers our engineers were facing, especially in terms of discoverability.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Where our engineers used to spend hours of their week just looking for things — documentation, platforms, systems and their owners — all over the internet, now they can find everything in one place: Backstage. Similarly, rather than moving from tab to tab, checking to see the health of, say, their Kubernetes clusters or the status of their recent deployment, engineers can now use Backstage to bring together monitoring tools, logging, their CI/CD pipeline, and whatever else our engineers needed to manage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, let’s say our engineers want to spin up a new ML model, data pipeline, or some other component or microservice. Rather than building something on their own, introducing yet another instance of boilerplate code similar to a dozen others in our ecosystem, they can now use Backstage to do that work for them. Not only does this save them time if they choose to do this, but these new components and services are also set up using our own best practices and tech standards — what we call our &lt;a href=&#34;https://engineering.atspotify.com/2020/08/17/how-we-use-golden-paths-to-solve-fragmentation-in-our-software-ecosystem/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Golden Paths&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Because of this, we’re able to have our cake and eat it too. Our engineers and squads can remain entirely autonomous, even as Backstage nudges them toward walking down these Golden Paths, thereby increasing our teams’ alignment and keeping our ecosystem from becoming more fragmented. Additionally, because &lt;a href=&#34;https://github.com/backstage/backstage&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage is a rapidly growing open source tool&lt;/a&gt;, more and more features and plugins are constantly being added for a variety of use cases beyond the ones mentioned here.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, with all that being said, was Backstage worth all the time and money we invested into it? Well, let’s go back to the onboarding metrics one more time. Remember when Pia discovered that it took over 60 days for onboarding engineers to merge their tenth pull request? After Backstage was introduced, that number dropped to only 20. “And if you have numbers like that in your organization,” mentions Pia, “I find that it’s easy to get buy-in for investments in developer experience.” &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Interested in hearing more about Backstage and what it can do for you? To hear more from Pia discussing Backstage and developer effectiveness with other engineers, check out the &lt;a href=&#34;https://www.thoughtworks.com/insights/podcasts/technology-podcasts/developer-effectiveness&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Thoughtworks podcast episode&lt;/a&gt;. And if you’re curious about how to get started with Backstage, read more about that &lt;a href=&#34;https://backstage.spotify.com/blog/getting-started-with-backstage/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/09/23/how-backstage-made-our-developers-more-effective-and-how-it-can-help-yours-too/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Backstage_Developers_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">What’s the best way to assess your developers’ experience and performance to discover what they need help with? Is it by measuring something arbitrary, like how many lines of code they’ve written or how many commits they’ve made? Nope. How much useful data are you really getting out of those numbers</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Introducing Pedalboard: Spotify’s Audio Effects Library for Python&#xA;</title>
    <updated>2021-09-07T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-09-07:/introducing-pedalboard-spotifys-audio-effects-library-for-python/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-4787&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;September 7, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/introducing-pedalboard-spotifys-audio-effects-library-for-python/&#34; title=&#34;Introducing Pedalboard: Spotify’s Audio Effects Library for Python&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_header.gif&#34; alt=&#34;&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;We’ve just open sourced &lt;a href=&#34;https://github.com/spotify/pedalboard&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Pedalboard&lt;/a&gt;, Spotify’s framework for adding effects to audio in Python. Pedalboard makes it easy to use studio-quality audio effects in your code, rather than just in your digital audio workstation (DAW).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you ask any music or podcast producer where they spend most of their time, chances are they’ll say their DAW — the app that lets them edit, manipulate, and perfect their audio. DAWs are powerful software packages that are used in the production of the vast majority of audio today. Most music or podcast content that you hear on Spotify has probably been processed through popular DAWs like Ableton Live, Logic Pro&lt;sup&gt;®&lt;/sup&gt;, or Pro Tools&lt;sup&gt;®&lt;/sup&gt;, or newer, more accessible tools like &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.soundtrap.com/&#34; target=&#34;_blank&#34;&gt;Soundtrap&lt;/a&gt; or &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://anchor.fm/&#34; target=&#34;_blank&#34;&gt;Anchor&lt;/a&gt;. These apps are optimized for high performance and audio quality, and give producers both incredible flexibility and control over their audio.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This ability to play with sound is usually relegated to DAWs, and these apps are built for musicians, not programmers. But what if programmers want to use the power, speed, and sound quality of a DAW in their code? The engineers and researchers at &lt;a href=&#34;https://research.atspotify.com/audio-intelligence/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s Audio Intelligence Lab&lt;/a&gt; found themselves with that exact need as part of their cutting-edge audio research. They found that each existing solution met some (but not all) of the criteria they needed — so instead, they built their own. Enter &lt;em&gt;Pedalboard&lt;/em&gt;, a new Python package.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;182&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-700x182.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-700x182.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-250x65.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-768x200.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-1536x400.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-120x31.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Pedalboard is a Python audio effects library designed to bridge the gap between professional audio software and Python code. It’s built on top of &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://juce.com/&#34; target=&#34;_blank&#34;&gt;JUCE&lt;/a&gt;, the industry-standard framework for performant and reliable audio applications. Just like a professional DAW, Pedalboard supports a number of built-in audio effects, as well as third-party VST3&lt;sup&gt;® &lt;/sup&gt;and Audio Unit plugins. And just like a DAW, Pedalboard prioritizes speed and quality: in basic tests on common developer hardware, it’s up to 300 times faster than the currently widely used packages for Python audio effects.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Similar to the pedalboards used by guitar players, Pedalboard includes a variety of common stylistic effects and augmentations that you can use to alter sounds. You’ll find basic tools to control volume, like a noise gate, compressor, and limiter, as well as more stylistic tools like distortion, phaser, filter, and reverb. Pedalboard even includes a built-in convolution operator for high-quality simulation of speakers and microphones. If that’s not enough, any VST3&lt;sup&gt;® &lt;/sup&gt;or Audio Unit effect plugin can be loaded to provide access to more sonic possibilities. Once you’ve got the sound you’re looking for, you can save your effects by grouping plugins together into a pedalboard, which has the added benefit of speeding up processing.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;538&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-700x538.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-700x538.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-250x192.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-768x591.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-1536x1181.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-120x92.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2.png 1874w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ve found a number of great uses for Pedalboard at Spotify so far, including:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Machine Learning (ML):&lt;/strong&gt; Pedalboard makes the process of &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://en.wikipedia.org/wiki/Data_augmentation&#34; target=&#34;_blank&#34;&gt;data augmentation&lt;/a&gt; for audio dramatically faster and produces more realistic results. Using Pedalboard, it’s easy to take a small dataset and augment it with audio effects — adding reverb, compression, distortion, and more — to vastly increase the size of your model’s training data and increase your model’s performance. Pedalboard has been thoroughly tested in high-performance and high-reliability ML use cases at Spotify, and is used heavily with TensorFlow.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Content Creation: &lt;/strong&gt;Pedalboard makes it easy to script the application of audio effects with small amounts of Python code. This can help automate parts of the audio creation process. Applying a VST3&lt;sup&gt;®&lt;/sup&gt; or Audio Unit plugin no longer requires launching your DAW, importing audio, and exporting it; a couple of lines of code can do it all in one command, or as part of a larger workflow.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Creativity:&lt;/strong&gt; Artists, musicians, and producers with a bit of Python knowledge can use Pedalboard to produce new creative effects that would be extremely time consuming and difficult to produce in a DAW. And for those just getting started with Python, Pedalboard is a great place to begin, as it provides a bridge between code and music.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify has a long tradition of contributing to open source software, and our research labs are active participants in the open source and academic communities. To continue that tradition, we’re open sourcing the project after nearly a year of internal use in the hopes that it will open up new possibilities for researchers, engineers, musicians, and tinkerers. Pedalboard is “stage ready” — it supports macOS, Windows, and Linux out of the box, and we’ve used it internally at Spotify to process millions of hours of audio.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you’re interested in trying out Pedalboard, it’s ready now. You can find its &lt;a href=&#34;https://github.com/spotify/pedalboard&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;code and documentation on GitHub&lt;/a&gt;, where we welcome contributions to the code. Installing Pedalboard on your computer is as simple as running one command: pip install pedalboard. We can’t wait to hear what you use Pedalboard for!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;—&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;VST is a registered trademark of Steinberg Media Technologies GmbH.&lt;/em&gt;&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/tech-research/&#34; rel=&#34;tag&#34;&gt;tech research&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/introducing-pedalboard-spotifys-audio-effects-library-for-python/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_header.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">We’ve just open sourced Pedalboard, Spotify’s framework for adding effects to audio in Python. Pedalboard makes it easy to use studio-quality audio effects in your code, rather than just in your digital audio workstation (DAW). If you ask any music or podcast producer where they spend most of the</summary>
    <author>
      <name>Published by Peter Sobot, Staff Machine Learning Engineer - Spotify Audio Intelligence Lab</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Introducing Pedalboard: Spotify’s Audio Effects Library for Python&#xA;</title>
    <updated>2021-09-07T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-09-07:/2021/09/introducing-pedalboard-spotifys-audio-effects-library-for-python/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-4787&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;September 7, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/09/introducing-pedalboard-spotifys-audio-effects-library-for-python/&#34; title=&#34;Introducing Pedalboard: Spotify’s Audio Effects Library for Python&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_header.gif&#34; alt=&#34;&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;We’ve just open sourced &lt;a href=&#34;https://github.com/spotify/pedalboard&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Pedalboard&lt;/a&gt;, Spotify’s framework for adding effects to audio in Python. Pedalboard makes it easy to use studio-quality audio effects in your code, rather than just in your digital audio workstation (DAW).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you ask any music or podcast producer where they spend most of their time, chances are they’ll say their DAW — the app that lets them edit, manipulate, and perfect their audio. DAWs are powerful software packages that are used in the production of the vast majority of audio today. Most music or podcast content that you hear on Spotify has probably been processed through popular DAWs like Ableton Live, Logic Pro&lt;sup&gt;®&lt;/sup&gt;, or Pro Tools&lt;sup&gt;®&lt;/sup&gt;, or newer, more accessible tools like &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.soundtrap.com/&#34; target=&#34;_blank&#34;&gt;Soundtrap&lt;/a&gt; or &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://anchor.fm/&#34; target=&#34;_blank&#34;&gt;Anchor&lt;/a&gt;. These apps are optimized for high performance and audio quality, and give producers both incredible flexibility and control over their audio.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This ability to play with sound is usually relegated to DAWs, and these apps are built for musicians, not programmers. But what if programmers want to use the power, speed, and sound quality of a DAW in their code? The engineers and researchers at &lt;a href=&#34;https://research.atspotify.com/audio-intelligence/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s Audio Intelligence Lab&lt;/a&gt; found themselves with that exact need as part of their cutting-edge audio research. They found that each existing solution met some (but not all) of the criteria they needed — so instead, they built their own. Enter &lt;em&gt;Pedalboard&lt;/em&gt;, a new Python package.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;182&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-700x182.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-700x182.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-250x65.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-768x200.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-1536x400.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-120x31.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Pedalboard is a Python audio effects library designed to bridge the gap between professional audio software and Python code. It’s built on top of &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://juce.com/&#34; target=&#34;_blank&#34;&gt;JUCE&lt;/a&gt;, the industry-standard framework for performant and reliable audio applications. Just like a professional DAW, Pedalboard supports a number of built-in audio effects, as well as third-party VST3&lt;sup&gt;® &lt;/sup&gt;and Audio Unit plugins. And just like a DAW, Pedalboard prioritizes speed and quality: in basic tests on common developer hardware, it’s up to 300 times faster than the currently widely used packages for Python audio effects.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Similar to the pedalboards used by guitar players, Pedalboard includes a variety of common stylistic effects and augmentations that you can use to alter sounds. You’ll find basic tools to control volume, like a noise gate, compressor, and limiter, as well as more stylistic tools like distortion, phaser, filter, and reverb. Pedalboard even includes a built-in convolution operator for high-quality simulation of speakers and microphones. If that’s not enough, any VST3&lt;sup&gt;® &lt;/sup&gt;or Audio Unit effect plugin can be loaded to provide access to more sonic possibilities. Once you’ve got the sound you’re looking for, you can save your effects by grouping plugins together into a pedalboard, which has the added benefit of speeding up processing.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;538&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-700x538.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-700x538.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-250x192.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-768x591.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-1536x1181.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-120x92.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2.png 1874w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ve found a number of great uses for Pedalboard at Spotify so far, including:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Machine Learning (ML):&lt;/strong&gt; Pedalboard makes the process of &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://en.wikipedia.org/wiki/Data_augmentation&#34; target=&#34;_blank&#34;&gt;data augmentation&lt;/a&gt; for audio dramatically faster and produces more realistic results. Using Pedalboard, it’s easy to take a small dataset and augment it with audio effects — adding reverb, compression, distortion, and more — to vastly increase the size of your model’s training data and increase your model’s performance. Pedalboard has been thoroughly tested in high-performance and high-reliability ML use cases at Spotify, and is used heavily with TensorFlow.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Content Creation: &lt;/strong&gt;Pedalboard makes it easy to script the application of audio effects with small amounts of Python code. This can help automate parts of the audio creation process. Applying a VST3&lt;sup&gt;®&lt;/sup&gt; or Audio Unit plugin no longer requires launching your DAW, importing audio, and exporting it; a couple of lines of code can do it all in one command, or as part of a larger workflow.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Creativity:&lt;/strong&gt; Artists, musicians, and producers with a bit of Python knowledge can use Pedalboard to produce new creative effects that would be extremely time consuming and difficult to produce in a DAW. And for those just getting started with Python, Pedalboard is a great place to begin, as it provides a bridge between code and music.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify has a long tradition of contributing to open source software, and our research labs are active participants in the open source and academic communities. To continue that tradition, we’re open sourcing the project after nearly a year of internal use in the hopes that it will open up new possibilities for researchers, engineers, musicians, and tinkerers. Pedalboard is “stage ready” — it supports macOS, Windows, and Linux out of the box, and we’ve used it internally at Spotify to process millions of hours of audio.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you’re interested in trying out Pedalboard, it’s ready now. You can find its &lt;a href=&#34;https://github.com/spotify/pedalboard&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;code and documentation on GitHub&lt;/a&gt;, where we welcome contributions to the code. Installing Pedalboard on your computer is as simple as running one command: pip install pedalboard. We can’t wait to hear what you use Pedalboard for!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;—&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;VST is a registered trademark of Steinberg Media Technologies GmbH.&lt;/em&gt;&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/tech-research/&#34; rel=&#34;tag&#34;&gt;tech research&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/09/introducing-pedalboard-spotifys-audio-effects-library-for-python/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_header.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">We’ve just open sourced Pedalboard, Spotify’s framework for adding effects to audio in Python. Pedalboard makes it easy to use studio-quality audio effects in your code, rather than just in your digital audio workstation (DAW). If you ask any music or podcast producer where they spend most of the</summary>
    <author>
      <name>Published by Peter Sobot, Staff Machine Learning Engineer - Spotify Audio Intelligence Lab</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Introducing Pedalboard: Spotify’s Audio Effects Library for Python&#xA;</title>
    <updated>2021-09-07T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-09-07:/2021/09/07/introducing-pedalboard-spotifys-audio-effects-library-for-python/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-4787&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;September 7, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/09/07/introducing-pedalboard-spotifys-audio-effects-library-for-python/&#34; title=&#34;Introducing Pedalboard: Spotify’s Audio Effects Library for Python&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_header.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/09/Pedalboard_header.gif&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;We’ve just open sourced &lt;a href=&#34;https://github.com/spotify/pedalboard&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Pedalboard&lt;/a&gt;, Spotify’s framework for adding effects to audio in Python. Pedalboard makes it easy to use studio-quality audio effects in your code, rather than just in your digital audio workstation (DAW).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you ask any music or podcast producer where they spend most of their time, chances are they’ll say their DAW — the app that lets them edit, manipulate, and perfect their audio. DAWs are powerful software packages that are used in the production of the vast majority of audio today. Most music or podcast content that you hear on Spotify has probably been processed through popular DAWs like Ableton Live, Logic Pro&lt;sup&gt;®&lt;/sup&gt;, or Pro Tools&lt;sup&gt;®&lt;/sup&gt;, or newer, more accessible tools like &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.soundtrap.com/&#34; target=&#34;_blank&#34;&gt;Soundtrap&lt;/a&gt; or &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://anchor.fm/&#34; target=&#34;_blank&#34;&gt;Anchor&lt;/a&gt;. These apps are optimized for high performance and audio quality, and give producers both incredible flexibility and control over their audio.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This ability to play with sound is usually relegated to DAWs, and these apps are built for musicians, not programmers. But what if programmers want to use the power, speed, and sound quality of a DAW in their code? The engineers and researchers at &lt;a href=&#34;https://research.atspotify.com/audio-intelligence/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s Audio Intelligence Lab&lt;/a&gt; found themselves with that exact need as part of their cutting-edge audio research. They found that each existing solution met some (but not all) of the criteria they needed — so instead, they built their own. Enter &lt;em&gt;Pedalboard&lt;/em&gt;, a new Python package.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;182&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_Audio_Effects_1-700x182.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_Audio_Effects_1-700x182.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_Audio_Effects_1-250x65.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_Audio_Effects_1-768x200.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_Audio_Effects_1-1536x400.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_Audio_Effects_1-120x31.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_Audio_Effects_1.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Pedalboard is a Python audio effects library designed to bridge the gap between professional audio software and Python code. It’s built on top of &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://juce.com/&#34; target=&#34;_blank&#34;&gt;JUCE&lt;/a&gt;, the industry-standard framework for performant and reliable audio applications. Just like a professional DAW, Pedalboard supports a number of built-in audio effects, as well as third-party VST3&lt;sup&gt;® &lt;/sup&gt;and Audio Unit plugins. And just like a DAW, Pedalboard prioritizes speed and quality: in basic tests on common developer hardware, it’s up to 300 times faster than the currently widely used packages for Python audio effects.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Similar to the pedalboards used by guitar players, Pedalboard includes a variety of common stylistic effects and augmentations that you can use to alter sounds. You’ll find basic tools to control volume, like a noise gate, compressor, and limiter, as well as more stylistic tools like distortion, phaser, filter, and reverb. Pedalboard even includes a built-in convolution operator for high-quality simulation of speakers and microphones. If that’s not enough, any VST3&lt;sup&gt;® &lt;/sup&gt;or Audio Unit effect plugin can be loaded to provide access to more sonic possibilities. Once you’ve got the sound you’re looking for, you can save your effects by grouping plugins together into a pedalboard, which has the added benefit of speeding up processing.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;538&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_Audio_Effects_2-700x538.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_Audio_Effects_2-700x538.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_Audio_Effects_2-250x192.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_Audio_Effects_2-768x591.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_Audio_Effects_2-1536x1181.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_Audio_Effects_2-120x92.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_Audio_Effects_2.png 1874w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ve found a number of great uses for Pedalboard at Spotify so far, including:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Machine Learning (ML):&lt;/strong&gt; Pedalboard makes the process of &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://en.wikipedia.org/wiki/Data_augmentation&#34; target=&#34;_blank&#34;&gt;data augmentation&lt;/a&gt; for audio dramatically faster and produces more realistic results. Using Pedalboard, it’s easy to take a small dataset and augment it with audio effects — adding reverb, compression, distortion, and more — to vastly increase the size of your model’s training data and increase your model’s performance. Pedalboard has been thoroughly tested in high-performance and high-reliability ML use cases at Spotify, and is used heavily with TensorFlow.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Content Creation: &lt;/strong&gt;Pedalboard makes it easy to script the application of audio effects with small amounts of Python code. This can help automate parts of the audio creation process. Applying a VST3&lt;sup&gt;®&lt;/sup&gt; or Audio Unit plugin no longer requires launching your DAW, importing audio, and exporting it; a couple of lines of code can do it all in one command, or as part of a larger workflow.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Creativity:&lt;/strong&gt; Artists, musicians, and producers with a bit of Python knowledge can use Pedalboard to produce new creative effects that would be extremely time consuming and difficult to produce in a DAW. And for those just getting started with Python, Pedalboard is a great place to begin, as it provides a bridge between code and music.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify has a long tradition of contributing to open source software, and our research labs are active participants in the open source and academic communities. To continue that tradition, we’re open sourcing the project after nearly a year of internal use in the hopes that it will open up new possibilities for researchers, engineers, musicians, and tinkerers. Pedalboard is “stage ready” — it supports macOS, Windows, and Linux out of the box, and we’ve used it internally at Spotify to process millions of hours of audio.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you’re interested in trying out Pedalboard, it’s ready now. You can find its &lt;a href=&#34;https://github.com/spotify/pedalboard&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;code and documentation on GitHub&lt;/a&gt;, where we welcome contributions to the code. Installing Pedalboard on your computer is as simple as running one command: pip install pedalboard. We can’t wait to hear what you use Pedalboard for!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;—&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;VST is a registered trademark of Steinberg Media Technologies GmbH.&lt;/em&gt;&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/09/07/introducing-pedalboard-spotifys-audio-effects-library-for-python/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/09/Pedalboard_header.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">We’ve just open sourced Pedalboard, Spotify’s framework for adding effects to audio in Python. Pedalboard makes it easy to use studio-quality audio effects in your code, rather than just in your digital audio workstation (DAW). If you ask any music or podcast producer where they spend most of the</summary>
    <author>
      <name>Published by Peter Sobot, Staff Machine Learning Engineer - Spotify Audio Intelligence Lab</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Introducing Pedalboard: Spotify’s Audio Effects Library for Python&#xA;</title>
    <updated>2021-09-07T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-09-07:/introducing-pedalboard-spotifys-audio-effects-library-for-python/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-4787&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;September 7, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/introducing-pedalboard-spotifys-audio-effects-library-for-python/&#34; title=&#34;Introducing Pedalboard: Spotify’s Audio Effects Library for Python&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_header.gif&#34; alt=&#34;&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;We’ve just open sourced &lt;a href=&#34;https://github.com/spotify/pedalboard&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Pedalboard&lt;/a&gt;, Spotify’s framework for adding effects to audio in Python. Pedalboard makes it easy to use studio-quality audio effects in your code, rather than just in your digital audio workstation (DAW).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you ask any music or podcast producer where they spend most of their time, chances are they’ll say their DAW — the app that lets them edit, manipulate, and perfect their audio. DAWs are powerful software packages that are used in the production of the vast majority of audio today. Most music or podcast content that you hear on Spotify has probably been processed through popular DAWs like Ableton Live, Logic Pro&lt;sup&gt;®&lt;/sup&gt;, or Pro Tools&lt;sup&gt;®&lt;/sup&gt;, or newer, more accessible tools like &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.soundtrap.com/&#34; target=&#34;_blank&#34;&gt;Soundtrap&lt;/a&gt; or &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://anchor.fm/&#34; target=&#34;_blank&#34;&gt;Anchor&lt;/a&gt;. These apps are optimized for high performance and audio quality, and give producers both incredible flexibility and control over their audio.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This ability to play with sound is usually relegated to DAWs, and these apps are built for musicians, not programmers. But what if programmers want to use the power, speed, and sound quality of a DAW in their code? The engineers and researchers at &lt;a href=&#34;https://research.atspotify.com/audio-intelligence/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify’s Audio Intelligence Lab&lt;/a&gt; found themselves with that exact need as part of their cutting-edge audio research. They found that each existing solution met some (but not all) of the criteria they needed — so instead, they built their own. Enter &lt;em&gt;Pedalboard&lt;/em&gt;, a new Python package.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;182&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-700x182.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-700x182.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-250x65.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-768x200.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-1536x400.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1-120x31.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_1.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Pedalboard is a Python audio effects library designed to bridge the gap between professional audio software and Python code. It’s built on top of &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://juce.com/&#34; target=&#34;_blank&#34;&gt;JUCE&lt;/a&gt;, the industry-standard framework for performant and reliable audio applications. Just like a professional DAW, Pedalboard supports a number of built-in audio effects, as well as third-party VST3&lt;sup&gt;® &lt;/sup&gt;and Audio Unit plugins. And just like a DAW, Pedalboard prioritizes speed and quality: in basic tests on common developer hardware, it’s up to 300 times faster than the currently widely used packages for Python audio effects.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Similar to the pedalboards used by guitar players, Pedalboard includes a variety of common stylistic effects and augmentations that you can use to alter sounds. You’ll find basic tools to control volume, like a noise gate, compressor, and limiter, as well as more stylistic tools like distortion, phaser, filter, and reverb. Pedalboard even includes a built-in convolution operator for high-quality simulation of speakers and microphones. If that’s not enough, any VST3&lt;sup&gt;® &lt;/sup&gt;or Audio Unit effect plugin can be loaded to provide access to more sonic possibilities. Once you’ve got the sound you’re looking for, you can save your effects by grouping plugins together into a pedalboard, which has the added benefit of speeding up processing.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;538&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-700x538.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-700x538.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-250x192.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-768x591.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-1536x1181.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2-120x92.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_Audio_Effects_2.png 1874w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ve found a number of great uses for Pedalboard at Spotify so far, including:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Machine Learning (ML):&lt;/strong&gt; Pedalboard makes the process of &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://en.wikipedia.org/wiki/Data_augmentation&#34; target=&#34;_blank&#34;&gt;data augmentation&lt;/a&gt; for audio dramatically faster and produces more realistic results. Using Pedalboard, it’s easy to take a small dataset and augment it with audio effects — adding reverb, compression, distortion, and more — to vastly increase the size of your model’s training data and increase your model’s performance. Pedalboard has been thoroughly tested in high-performance and high-reliability ML use cases at Spotify, and is used heavily with TensorFlow.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Content Creation: &lt;/strong&gt;Pedalboard makes it easy to script the application of audio effects with small amounts of Python code. This can help automate parts of the audio creation process. Applying a VST3&lt;sup&gt;®&lt;/sup&gt; or Audio Unit plugin no longer requires launching your DAW, importing audio, and exporting it; a couple of lines of code can do it all in one command, or as part of a larger workflow.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Creativity:&lt;/strong&gt; Artists, musicians, and producers with a bit of Python knowledge can use Pedalboard to produce new creative effects that would be extremely time consuming and difficult to produce in a DAW. And for those just getting started with Python, Pedalboard is a great place to begin, as it provides a bridge between code and music.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify has a long tradition of contributing to open source software, and our research labs are active participants in the open source and academic communities. To continue that tradition, we’re open sourcing the project after nearly a year of internal use in the hopes that it will open up new possibilities for researchers, engineers, musicians, and tinkerers. Pedalboard is “stage ready” — it supports macOS, Windows, and Linux out of the box, and we’ve used it internally at Spotify to process millions of hours of audio.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you’re interested in trying out Pedalboard, it’s ready now. You can find its &lt;a href=&#34;https://github.com/spotify/pedalboard&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;code and documentation on GitHub&lt;/a&gt;, where we welcome contributions to the code. Installing Pedalboard on your computer is as simple as running one command: pip install pedalboard. We can’t wait to hear what you use Pedalboard for!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;—&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;VST is a registered trademark of Steinberg Media Technologies GmbH.&lt;/em&gt;&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/tech-research/&#34; rel=&#34;tag&#34;&gt;tech research&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/introducing-pedalboard-spotifys-audio-effects-library-for-python/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/09/Pedalboard_header.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">We’ve just open sourced Pedalboard, Spotify’s framework for adding effects to audio in Python. Pedalboard makes it easy to use studio-quality audio effects in your code, rather than just in your digital audio workstation (DAW). If you ask any music or podcast producer where they spend most of the</summary>
    <author>
      <name>Published by Peter Sobot, Staff Machine Learning Engineer - Spotify Audio Intelligence Lab</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Four Lessons We Learned from Creating Spotify’s Desktop App&#xA;</title>
    <updated>2021-08-04T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-08-04:/four-lessons-we-learned-from-creating-spotifys-desktop-app/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;August 4, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/four-lessons-we-learned-from-creating-spotifys-desktop-app/&#34; title=&#34;Four Lessons We Learned from Creating Spotify’s Desktop App&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1.png 1201w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-250x131.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-700x368.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-768x404.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-120x63.png 120w&#34; sizes=&#34;(max-width: 1201px) 100vw, 1201px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;Over the years, Spotify’s brand has expanded to encompass a number of products, from mobile apps to &lt;a href=&#34;https://engineering.atspotify.com/2021/04/07/building-the-future-of-our-desktop-apps/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;web players&lt;/a&gt; to &lt;a href=&#34;https://carthing.spotify.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;car things&lt;/a&gt;. But sitting at the core is our flagship product, the one that started it all: the desktop app. In &lt;a href=&#34;https://open.spotify.com/episode/1jHRUXkeiUh44CK4KZQb0h?si=d8695b5f4e58491c&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the first episode&lt;/a&gt; of our podcast series, “&lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify: A Product Story&lt;/a&gt;”, host and Chief R&amp;amp;D Officer Gustav Söderström walks through how the app (and Spotify in general) came to be — and the product lessons you should take away from that journey. So read on to learn how Spotify had to completely rethink peer-to-peer (P2P) networking to improve our user experience, and why everyone needs a bit of magic to stand out from their competitors. And, of course, please &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB?si=pX_Ez7ZHR3untiFXd5WaNA&amp;amp;dl_branch=1&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check out the podcast&lt;/a&gt; yourself to hear even more about how Spotify became, well, Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How do you steal from a pirate?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s rewind to the mid-2000s. At this point, music piracy wasn’t a new phenomenon, but it was a newly popular one. No longer did you have to physically steal records, rip radio onto a cassette, or even burn a CD. With peer-to-peer technology, all it took was an internet connection and some software, and you could be moments away from nabbing a song for yourself, with almost no chance of getting punished for it. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Sure, download speeds could be painfully slow, the programs were a bit janky, and that album you pirated might turn out to be low-quality, incomplete, or covertly smuggling a virus along with it. But, hey, it was pretty convenient and low risk, all things considered. It was also, most importantly, absolutely free. What could compete?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the very first episode of the podcast, Spotify co-founder and CEO Daniel Ek remembers considering what it would take to beat piracy at its own game when first conceiving of the company:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Daniel: &lt;/strong&gt;I guess if you could take the concept of downloading all the world’s music, like you have on Napster and Kazaa, for a free price or a very low price, and you married it with the user experience of iTunes, so that it would feel like you had all the world’s music on your hard drive — that would be a much better experience than piracy. And then I think everyone would turn to that.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In other words, when it comes to guiding your product strategy, &lt;strong&gt;our&lt;/strong&gt; &lt;strong&gt;first lesson is an important rule to live by: convenience trumps everything. &lt;/strong&gt;The appeal of music piracy for most people, after all, wasn’t to deliberately sabotage the record industry or cut off a revenue stream for artists — it’s that it was free and relatively convenient. After realizing that, Spotify’s mission was set: if we could provide those same things with an even better user experience while still generating revenue, then, and only then, did we have a shot at success.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Go big or go home&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But how exactly could we make a user experience &lt;em&gt;that&lt;/em&gt; good? How could we actually beat pirates at their own game? One obvious improvement was speed; waiting hours over a slow connection to download an album was a massive pain, no matter how free it was. But when we looked at the tech and tools out there, it wasn’t immediately clear how to make anything better.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Luckily, Spotify co-founder Martin Lorentzon ran into someone who knew how. Enter Ludde Strigeus, the creator of µTorrent, one of the world’s most popular BitTorrent clients and, ironically, one of the largest drivers of music piracy. If there were one person who could promise to push the limits of what client-server technology and P2P networking could do, it was him.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Little surprise, then, that Ludde was fielding offers from Silicon Valley left and right. Even so, he wasn’t in any rush to accept any of them. As he puts it in the podcast, “When I find a project that interests me enough, I can’t really stop working on it. So the problem is to actually find these projects.” &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Bad news for other companies, but great news for us. You see, it’s always good to keep in mind &lt;strong&gt;our second lesson:&lt;/strong&gt; &lt;strong&gt;great ambition attracts great talent. This is why companies always need to keep moving the goalposts.&lt;/strong&gt; When Daniel and Martin first approached Ludde to give him the hard sell on Spotify, a company whose goal, again, seemed impossible to achieve at the time, Ludde signed right up.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The rules are only suggestions&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And it wasn’t long before he identified Spotify’s problem — and the solution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Ludde: &lt;/strong&gt;Doing it in the browser wasn’t even an alternative. There wasn’t any competitive way to do it in the browser at that time. The browsers weren’t mature enough.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Essentially, if Spotify ran in a browser, it would only be able to run as fast as the rest of the browser-based internet, which included our competition. That meant that it would never provide a better experience than piracy if we went that route. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Fortunately, Ludde already knew &lt;strong&gt;our&lt;/strong&gt; &lt;strong&gt;third product lesson:&lt;/strong&gt; &lt;strong&gt;don’t be afraid to break the rules. &lt;/strong&gt;The problem was bigger than just a matter of finding the right tech; for Spotify to be what we wanted, we would need to custom-build everything in our entire infrastructure from the ground up. In short, we would need to go full stack.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Not to go into too much detail here, but at the time, most of the internet was made up of “thin clients,” like web pages or Flash-based clients that ran in-browser, and used more traditional, standardized protocols like HTTPS. Seeing the limitations of that, Ludde and a team of engineers ran in the exact opposite direction, creating a stand-alone “fat client,” building entirely new protocols and hybridizing client-server and P2P technology to suit their own ends. (&lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/episode/1jHRUXkeiUh44CK4KZQb0h?si=d8695b5f4e58491c&#34; target=&#34;_blank&#34;&gt;Check out Episode 01, “How do you steal from a pirate?”&lt;/a&gt;, to hear more of that nitty-gritty stuff about persistent TCP connections and how our P2P implementation saved us bandwidth cost.) It was only by rethinking every layer of our infrastructure that we were able to pull Spotify off, to create that magic moment of double-clicking on a new song and having it instantly play. And speaking of magic …&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Do you want to see a magic trick?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;All of that ambition would have meant nothing if we couldn’t secure the licensing deals we needed to actually play music on our app. We knew our tech was cool and groundbreaking, but would anyone else? The music industry was being ravaged by the same peer-to-peer technology that Spotify was using in the desktop app. Why would they want to strike a deal with someone who seemed like the enemy?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When Michelle Kadir joined Universal Sweden in 2008 to vet new technologies that could potentially help the ailing music industry, she originally saw Spotify as just another start-up setting up a meeting, vying for her attention. That was, until she saw the product in action.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Michelle&lt;/strong&gt;: The thing that happened that was kind of pure magic in that meeting was that [Daniel] did a comparison. He started playing a song on the software, and the song played so quick, so instant … I mean, I don’t know if people remember, but playback was slow back then. Even if you had an MP3 on your computer, and you played it via, you know, Winamp, iTunes, this was faster. And we were like, “You have the files on your computer, right?” And he was like, “No, it’s in the cloud.”&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;That’s our fourth and final lesson:&lt;/strong&gt; &lt;strong&gt;differentiating yourself from your competitors is one thing. But if you can pull off something that no one thought was possible — a magic trick — now that’s captivating.&lt;/strong&gt; Captivating enough to potentially change the minds of not only users, but an entire industry that’s stuck in a rut.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, sure, that’s four lessons, but why stop there? The podcast series “Spotify: A Product Story” shares all these stories and dozens more, filled with insider insight and product strategy lessons from the employees, collaborators, and musicians who made Spotify what it is today. Join host and Chief R&amp;amp;D Officer Gustav Söderström and &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34;&gt;check out all the episodes right here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/four-lessons-we-learned-from-creating-spotifys-desktop-app/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR Over the years, Spotify’s brand has expanded to encompass a number of products, from mobile apps to web players to car things. But sitting at the core is our flagship product, the one that started it all: the desktop app. In the first episode of our podcast series, “Spotify: A Product Story”,</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Four Lessons We Learned from Creating Spotify’s Desktop App&#xA;</title>
    <updated>2021-08-04T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-08-04:/four-lessons-we-learned-from-creating-spotifys-desktop-app/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;August 4, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/four-lessons-we-learned-from-creating-spotifys-desktop-app/&#34; title=&#34;Four Lessons We Learned from Creating Spotify’s Desktop App&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1.png 1201w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-250x131.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-700x368.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-768x404.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-120x63.png 120w&#34; sizes=&#34;(max-width: 1201px) 100vw, 1201px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;Over the years, Spotify’s brand has expanded to encompass a number of products, from mobile apps to &lt;a href=&#34;https://engineering.atspotify.com/2021/04/07/building-the-future-of-our-desktop-apps/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;web players&lt;/a&gt; to &lt;a href=&#34;https://carthing.spotify.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;car things&lt;/a&gt;. But sitting at the core is our flagship product, the one that started it all: the desktop app. In &lt;a href=&#34;https://open.spotify.com/episode/1jHRUXkeiUh44CK4KZQb0h?si=d8695b5f4e58491c&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the first episode&lt;/a&gt; of our podcast series, “&lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify: A Product Story&lt;/a&gt;”, host and Chief R&amp;amp;D Officer Gustav Söderström walks through how the app (and Spotify in general) came to be — and the product lessons you should take away from that journey. So read on to learn how Spotify had to completely rethink peer-to-peer (P2P) networking to improve our user experience, and why everyone needs a bit of magic to stand out from their competitors. And, of course, please &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB?si=pX_Ez7ZHR3untiFXd5WaNA&amp;amp;dl_branch=1&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check out the podcast&lt;/a&gt; yourself to hear even more about how Spotify became, well, Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How do you steal from a pirate?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s rewind to the mid-2000s. At this point, music piracy wasn’t a new phenomenon, but it was a newly popular one. No longer did you have to physically steal records, rip radio onto a cassette, or even burn a CD. With peer-to-peer technology, all it took was an internet connection and some software, and you could be moments away from nabbing a song for yourself, with almost no chance of getting punished for it. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Sure, download speeds could be painfully slow, the programs were a bit janky, and that album you pirated might turn out to be low-quality, incomplete, or covertly smuggling a virus along with it. But, hey, it was pretty convenient and low risk, all things considered. It was also, most importantly, absolutely free. What could compete?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the very first episode of the podcast, Spotify co-founder and CEO Daniel Ek remembers considering what it would take to beat piracy at its own game when first conceiving of the company:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Daniel: &lt;/strong&gt;I guess if you could take the concept of downloading all the world’s music, like you have on Napster and Kazaa, for a free price or a very low price, and you married it with the user experience of iTunes, so that it would feel like you had all the world’s music on your hard drive — that would be a much better experience than piracy. And then I think everyone would turn to that.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In other words, when it comes to guiding your product strategy, &lt;strong&gt;our&lt;/strong&gt; &lt;strong&gt;first lesson is an important rule to live by: convenience trumps everything. &lt;/strong&gt;The appeal of music piracy for most people, after all, wasn’t to deliberately sabotage the record industry or cut off a revenue stream for artists — it’s that it was free and relatively convenient. After realizing that, Spotify’s mission was set: if we could provide those same things with an even better user experience while still generating revenue, then, and only then, did we have a shot at success.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Go big or go home&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But how exactly could we make a user experience &lt;em&gt;that&lt;/em&gt; good? How could we actually beat pirates at their own game? One obvious improvement was speed; waiting hours over a slow connection to download an album was a massive pain, no matter how free it was. But when we looked at the tech and tools out there, it wasn’t immediately clear how to make anything better.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Luckily, Spotify co-founder Martin Lorentzon ran into someone who knew how. Enter Ludde Strigeus, the creator of µTorrent, one of the world’s most popular BitTorrent clients and, ironically, one of the largest drivers of music piracy. If there were one person who could promise to push the limits of what client-server technology and P2P networking could do, it was him.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Little surprise, then, that Ludde was fielding offers from Silicon Valley left and right. Even so, he wasn’t in any rush to accept any of them. As he puts it in the podcast, “When I find a project that interests me enough, I can’t really stop working on it. So the problem is to actually find these projects.” &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Bad news for other companies, but great news for us. You see, it’s always good to keep in mind &lt;strong&gt;our second lesson:&lt;/strong&gt; &lt;strong&gt;great ambition attracts great talent. This is why companies always need to keep moving the goalposts.&lt;/strong&gt; When Daniel and Martin first approached Ludde to give him the hard sell on Spotify, a company whose goal, again, seemed impossible to achieve at the time, Ludde signed right up.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The rules are only suggestions&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And it wasn’t long before he identified Spotify’s problem — and the solution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Ludde: &lt;/strong&gt;Doing it in the browser wasn’t even an alternative. There wasn’t any competitive way to do it in the browser at that time. The browsers weren’t mature enough.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Essentially, if Spotify ran in a browser, it would only be able to run as fast as the rest of the browser-based internet, which included our competition. That meant that it would never provide a better experience than piracy if we went that route. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Fortunately, Ludde already knew &lt;strong&gt;our&lt;/strong&gt; &lt;strong&gt;third product lesson:&lt;/strong&gt; &lt;strong&gt;don’t be afraid to break the rules. &lt;/strong&gt;The problem was bigger than just a matter of finding the right tech; for Spotify to be what we wanted, we would need to custom-build everything in our entire infrastructure from the ground up. In short, we would need to go full stack.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Not to go into too much detail here, but at the time, most of the internet was made up of “thin clients,” like web pages or Flash-based clients that ran in-browser, and used more traditional, standardized protocols like HTTPS. Seeing the limitations of that, Ludde and a team of engineers ran in the exact opposite direction, creating a stand-alone “fat client,” building entirely new protocols and hybridizing client-server and P2P technology to suit their own ends. (&lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/episode/1jHRUXkeiUh44CK4KZQb0h?si=d8695b5f4e58491c&#34; target=&#34;_blank&#34;&gt;Check out Episode 01, “How do you steal from a pirate?”&lt;/a&gt;, to hear more of that nitty-gritty stuff about persistent TCP connections and how our P2P implementation saved us bandwidth cost.) It was only by rethinking every layer of our infrastructure that we were able to pull Spotify off, to create that magic moment of double-clicking on a new song and having it instantly play. And speaking of magic …&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Do you want to see a magic trick?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;All of that ambition would have meant nothing if we couldn’t secure the licensing deals we needed to actually play music on our app. We knew our tech was cool and groundbreaking, but would anyone else? The music industry was being ravaged by the same peer-to-peer technology that Spotify was using in the desktop app. Why would they want to strike a deal with someone who seemed like the enemy?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When Michelle Kadir joined Universal Sweden in 2008 to vet new technologies that could potentially help the ailing music industry, she originally saw Spotify as just another start-up setting up a meeting, vying for her attention. That was, until she saw the product in action.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Michelle&lt;/strong&gt;: The thing that happened that was kind of pure magic in that meeting was that [Daniel] did a comparison. He started playing a song on the software, and the song played so quick, so instant … I mean, I don’t know if people remember, but playback was slow back then. Even if you had an MP3 on your computer, and you played it via, you know, Winamp, iTunes, this was faster. And we were like, “You have the files on your computer, right?” And he was like, “No, it’s in the cloud.”&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;That’s our fourth and final lesson:&lt;/strong&gt; &lt;strong&gt;differentiating yourself from your competitors is one thing. But if you can pull off something that no one thought was possible — a magic trick — now that’s captivating.&lt;/strong&gt; Captivating enough to potentially change the minds of not only users, but an entire industry that’s stuck in a rut.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, sure, that’s four lessons, but why stop there? The podcast series “Spotify: A Product Story” shares all these stories and dozens more, filled with insider insight and product strategy lessons from the employees, collaborators, and musicians who made Spotify what it is today. Join host and Chief R&amp;amp;D Officer Gustav Söderström and &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34;&gt;check out all the episodes right here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/four-lessons-we-learned-from-creating-spotifys-desktop-app/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR Over the years, Spotify’s brand has expanded to encompass a number of products, from mobile apps to web players to car things. But sitting at the core is our flagship product, the one that started it all: the desktop app. In the first episode of our podcast series, “Spotify: A Product Story”,</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Four Lessons We Learned from Creating Spotify’s Desktop App&#xA;</title>
    <updated>2021-08-04T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-08-04:/2021/08/four-lessons-we-learned-from-creating-spotifys-desktop-app/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;August 4, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/08/four-lessons-we-learned-from-creating-spotifys-desktop-app/&#34; title=&#34;Four Lessons We Learned from Creating Spotify’s Desktop App&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1.png 1201w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-250x131.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-700x368.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-768x404.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-120x63.png 120w&#34; sizes=&#34;(max-width: 1201px) 100vw, 1201px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;Over the years, Spotify’s brand has expanded to encompass a number of products, from mobile apps to &lt;a href=&#34;https://engineering.atspotify.com/2021/04/07/building-the-future-of-our-desktop-apps/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;web players&lt;/a&gt; to &lt;a href=&#34;https://carthing.spotify.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;car things&lt;/a&gt;. But sitting at the core is our flagship product, the one that started it all: the desktop app. In &lt;a href=&#34;https://open.spotify.com/episode/1jHRUXkeiUh44CK4KZQb0h?si=d8695b5f4e58491c&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the first episode&lt;/a&gt; of our podcast series, “&lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify: A Product Story&lt;/a&gt;”, host and Chief R&amp;amp;D Officer Gustav Söderström walks through how the app (and Spotify in general) came to be — and the product lessons you should take away from that journey. So read on to learn how Spotify had to completely rethink peer-to-peer (P2P) networking to improve our user experience, and why everyone needs a bit of magic to stand out from their competitors. And, of course, please &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB?si=pX_Ez7ZHR3untiFXd5WaNA&amp;amp;dl_branch=1&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check out the podcast&lt;/a&gt; yourself to hear even more about how Spotify became, well, Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How do you steal from a pirate?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s rewind to the mid-2000s. At this point, music piracy wasn’t a new phenomenon, but it was a newly popular one. No longer did you have to physically steal records, rip radio onto a cassette, or even burn a CD. With peer-to-peer technology, all it took was an internet connection and some software, and you could be moments away from nabbing a song for yourself, with almost no chance of getting punished for it. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Sure, download speeds could be painfully slow, the programs were a bit janky, and that album you pirated might turn out to be low-quality, incomplete, or covertly smuggling a virus along with it. But, hey, it was pretty convenient and low risk, all things considered. It was also, most importantly, absolutely free. What could compete?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the very first episode of the podcast, Spotify co-founder and CEO Daniel Ek remembers considering what it would take to beat piracy at its own game when first conceiving of the company:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Daniel: &lt;/strong&gt;I guess if you could take the concept of downloading all the world’s music, like you have on Napster and Kazaa, for a free price or a very low price, and you married it with the user experience of iTunes, so that it would feel like you had all the world’s music on your hard drive — that would be a much better experience than piracy. And then I think everyone would turn to that.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In other words, when it comes to guiding your product strategy, &lt;strong&gt;our&lt;/strong&gt; &lt;strong&gt;first lesson is an important rule to live by: convenience trumps everything. &lt;/strong&gt;The appeal of music piracy for most people, after all, wasn’t to deliberately sabotage the record industry or cut off a revenue stream for artists — it’s that it was free and relatively convenient. After realizing that, Spotify’s mission was set: if we could provide those same things with an even better user experience while still generating revenue, then, and only then, did we have a shot at success.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Go big or go home&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But how exactly could we make a user experience &lt;em&gt;that&lt;/em&gt; good? How could we actually beat pirates at their own game? One obvious improvement was speed; waiting hours over a slow connection to download an album was a massive pain, no matter how free it was. But when we looked at the tech and tools out there, it wasn’t immediately clear how to make anything better.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Luckily, Spotify co-founder Martin Lorentzon ran into someone who knew how. Enter Ludde Strigeus, the creator of µTorrent, one of the world’s most popular BitTorrent clients and, ironically, one of the largest drivers of music piracy. If there were one person who could promise to push the limits of what client-server technology and P2P networking could do, it was him.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Little surprise, then, that Ludde was fielding offers from Silicon Valley left and right. Even so, he wasn’t in any rush to accept any of them. As he puts it in the podcast, “When I find a project that interests me enough, I can’t really stop working on it. So the problem is to actually find these projects.” &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Bad news for other companies, but great news for us. You see, it’s always good to keep in mind &lt;strong&gt;our second lesson:&lt;/strong&gt; &lt;strong&gt;great ambition attracts great talent. This is why companies always need to keep moving the goalposts.&lt;/strong&gt; When Daniel and Martin first approached Ludde to give him the hard sell on Spotify, a company whose goal, again, seemed impossible to achieve at the time, Ludde signed right up.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The rules are only suggestions&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And it wasn’t long before he identified Spotify’s problem — and the solution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Ludde: &lt;/strong&gt;Doing it in the browser wasn’t even an alternative. There wasn’t any competitive way to do it in the browser at that time. The browsers weren’t mature enough.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Essentially, if Spotify ran in a browser, it would only be able to run as fast as the rest of the browser-based internet, which included our competition. That meant that it would never provide a better experience than piracy if we went that route. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Fortunately, Ludde already knew &lt;strong&gt;our&lt;/strong&gt; &lt;strong&gt;third product lesson:&lt;/strong&gt; &lt;strong&gt;don’t be afraid to break the rules. &lt;/strong&gt;The problem was bigger than just a matter of finding the right tech; for Spotify to be what we wanted, we would need to custom-build everything in our entire infrastructure from the ground up. In short, we would need to go full stack.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Not to go into too much detail here, but at the time, most of the internet was made up of “thin clients,” like web pages or Flash-based clients that ran in-browser, and used more traditional, standardized protocols like HTTPS. Seeing the limitations of that, Ludde and a team of engineers ran in the exact opposite direction, creating a stand-alone “fat client,” building entirely new protocols and hybridizing client-server and P2P technology to suit their own ends. (&lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/episode/1jHRUXkeiUh44CK4KZQb0h?si=d8695b5f4e58491c&#34; target=&#34;_blank&#34;&gt;Check out Episode 01, “How do you steal from a pirate?”&lt;/a&gt;, to hear more of that nitty-gritty stuff about persistent TCP connections and how our P2P implementation saved us bandwidth cost.) It was only by rethinking every layer of our infrastructure that we were able to pull Spotify off, to create that magic moment of double-clicking on a new song and having it instantly play. And speaking of magic …&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Do you want to see a magic trick?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;All of that ambition would have meant nothing if we couldn’t secure the licensing deals we needed to actually play music on our app. We knew our tech was cool and groundbreaking, but would anyone else? The music industry was being ravaged by the same peer-to-peer technology that Spotify was using in the desktop app. Why would they want to strike a deal with someone who seemed like the enemy?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When Michelle Kadir joined Universal Sweden in 2008 to vet new technologies that could potentially help the ailing music industry, she originally saw Spotify as just another start-up setting up a meeting, vying for her attention. That was, until she saw the product in action.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Michelle&lt;/strong&gt;: The thing that happened that was kind of pure magic in that meeting was that [Daniel] did a comparison. He started playing a song on the software, and the song played so quick, so instant … I mean, I don’t know if people remember, but playback was slow back then. Even if you had an MP3 on your computer, and you played it via, you know, Winamp, iTunes, this was faster. And we were like, “You have the files on your computer, right?” And he was like, “No, it’s in the cloud.”&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;That’s our fourth and final lesson:&lt;/strong&gt; &lt;strong&gt;differentiating yourself from your competitors is one thing. But if you can pull off something that no one thought was possible — a magic trick — now that’s captivating.&lt;/strong&gt; Captivating enough to potentially change the minds of not only users, but an entire industry that’s stuck in a rut.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, sure, that’s four lessons, but why stop there? The podcast series “Spotify: A Product Story” shares all these stories and dozens more, filled with insider insight and product strategy lessons from the employees, collaborators, and musicians who made Spotify what it is today. Join host and Chief R&amp;amp;D Officer Gustav Söderström and &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34;&gt;check out all the episodes right here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/08/four-lessons-we-learned-from-creating-spotifys-desktop-app/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR Over the years, Spotify’s brand has expanded to encompass a number of products, from mobile apps to web players to car things. But sitting at the core is our flagship product, the one that started it all: the desktop app. In the first episode of our podcast series, “Spotify: A Product Story”,</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Four Lessons We Learned from Creating Spotify’s Desktop App&#xA;</title>
    <updated>2021-08-04T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-08-04:/2021/08/04/four-lessons-we-learned-from-creating-spotifys-desktop-app/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;August 4, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/08/04/four-lessons-we-learned-from-creating-spotifys-desktop-app/&#34; title=&#34;Four Lessons We Learned from Creating Spotify’s Desktop App&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1.png 1201w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-250x131.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-700x368.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-768x404.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1-120x63.png 120w&#34; sizes=&#34;(max-width: 1201px) 100vw, 1201px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1.png&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;Over the years, Spotify’s brand has expanded to encompass a number of products, from mobile apps to &lt;a href=&#34;https://engineering.atspotify.com/2021/04/07/building-the-future-of-our-desktop-apps/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;web players&lt;/a&gt; to &lt;a href=&#34;https://carthing.spotify.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;car things&lt;/a&gt;. But sitting at the core is our flagship product, the one that started it all: the desktop app. In &lt;a href=&#34;https://open.spotify.com/episode/1jHRUXkeiUh44CK4KZQb0h?si=d8695b5f4e58491c&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the first episode&lt;/a&gt; of our podcast series, “&lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify: A Product Story&lt;/a&gt;”, host and Chief R&amp;amp;D Officer Gustav Söderström walks through how the app (and Spotify in general) came to be — and the product lessons you should take away from that journey. So read on to learn how Spotify had to completely rethink peer-to-peer (P2P) networking to improve our user experience, and why everyone needs a bit of magic to stand out from their competitors. And, of course, please &lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB?si=pX_Ez7ZHR3untiFXd5WaNA&amp;amp;dl_branch=1&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;check out the podcast&lt;/a&gt; yourself to hear even more about how Spotify became, well, Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How do you steal from a pirate?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s rewind to the mid-2000s. At this point, music piracy wasn’t a new phenomenon, but it was a newly popular one. No longer did you have to physically steal records, rip radio onto a cassette, or even burn a CD. With peer-to-peer technology, all it took was an internet connection and some software, and you could be moments away from nabbing a song for yourself, with almost no chance of getting punished for it. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Sure, download speeds could be painfully slow, the programs were a bit janky, and that album you pirated might turn out to be low-quality, incomplete, or covertly smuggling a virus along with it. But, hey, it was pretty convenient and low risk, all things considered. It was also, most importantly, absolutely free. What could compete?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the very first episode of the podcast, Spotify co-founder and CEO Daniel Ek remembers considering what it would take to beat piracy at its own game when first conceiving of the company:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Daniel: &lt;/strong&gt;I guess if you could take the concept of downloading all the world’s music, like you have on Napster and Kazaa, for a free price or a very low price, and you married it with the user experience of iTunes, so that it would feel like you had all the world’s music on your hard drive — that would be a much better experience than piracy. And then I think everyone would turn to that.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In other words, when it comes to guiding your product strategy, &lt;strong&gt;our&lt;/strong&gt; &lt;strong&gt;first lesson is an important rule to live by: convenience trumps everything. &lt;/strong&gt;The appeal of music piracy for most people, after all, wasn’t to deliberately sabotage the record industry or cut off a revenue stream for artists — it’s that it was free and relatively convenient. After realizing that, Spotify’s mission was set: if we could provide those same things with an even better user experience while still generating revenue, then, and only then, did we have a shot at success.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Go big or go home&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But how exactly could we make a user experience &lt;em&gt;that&lt;/em&gt; good? How could we actually beat pirates at their own game? One obvious improvement was speed; waiting hours over a slow connection to download an album was a massive pain, no matter how free it was. But when we looked at the tech and tools out there, it wasn’t immediately clear how to make anything better.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Luckily, Spotify co-founder Martin Lorentzon ran into someone who knew how. Enter Ludde Strigeus, the creator of µTorrent, one of the world’s most popular BitTorrent clients and, ironically, one of the largest drivers of music piracy. If there were one person who could promise to push the limits of what client-server technology and P2P networking could do, it was him.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Little surprise, then, that Ludde was fielding offers from Silicon Valley left and right. Even so, he wasn’t in any rush to accept any of them. As he puts it in the podcast, “When I find a project that interests me enough, I can’t really stop working on it. So the problem is to actually find these projects.” &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Bad news for other companies, but great news for us. You see, it’s always good to keep in mind &lt;strong&gt;our second lesson:&lt;/strong&gt; &lt;strong&gt;great ambition attracts great talent. This is why companies always need to keep moving the goalposts.&lt;/strong&gt; When Daniel and Martin first approached Ludde to give him the hard sell on Spotify, a company whose goal, again, seemed impossible to achieve at the time, Ludde signed right up.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The rules are only suggestions&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And it wasn’t long before he identified Spotify’s problem — and the solution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Ludde: &lt;/strong&gt;Doing it in the browser wasn’t even an alternative. There wasn’t any competitive way to do it in the browser at that time. The browsers weren’t mature enough.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Essentially, if Spotify ran in a browser, it would only be able to run as fast as the rest of the browser-based internet, which included our competition. That meant that it would never provide a better experience than piracy if we went that route. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Fortunately, Ludde already knew &lt;strong&gt;our&lt;/strong&gt; &lt;strong&gt;third product lesson:&lt;/strong&gt; &lt;strong&gt;don’t be afraid to break the rules. &lt;/strong&gt;The problem was bigger than just a matter of finding the right tech; for Spotify to be what we wanted, we would need to custom-build everything in our entire infrastructure from the ground up. In short, we would need to go full stack.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Not to go into too much detail here, but at the time, most of the internet was made up of “thin clients,” like web pages or Flash-based clients that ran in-browser, and used more traditional, standardized protocols like HTTPS. Seeing the limitations of that, Ludde and a team of engineers ran in the exact opposite direction, creating a stand-alone “fat client,” building entirely new protocols and hybridizing client-server and P2P technology to suit their own ends. (&lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/episode/1jHRUXkeiUh44CK4KZQb0h?si=d8695b5f4e58491c&#34; target=&#34;_blank&#34;&gt;Check out Episode 01, “How do you steal from a pirate?”&lt;/a&gt;, to hear more of that nitty-gritty stuff about persistent TCP connections and how our P2P implementation saved us bandwidth cost.) It was only by rethinking every layer of our infrastructure that we were able to pull Spotify off, to create that magic moment of double-clicking on a new song and having it instantly play. And speaking of magic …&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Do you want to see a magic trick?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;All of that ambition would have meant nothing if we couldn’t secure the licensing deals we needed to actually play music on our app. We knew our tech was cool and groundbreaking, but would anyone else? The music industry was being ravaged by the same peer-to-peer technology that Spotify was using in the desktop app. Why would they want to strike a deal with someone who seemed like the enemy?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When Michelle Kadir joined Universal Sweden in 2008 to vet new technologies that could potentially help the ailing music industry, she originally saw Spotify as just another start-up setting up a meeting, vying for her attention. That was, until she saw the product in action.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Michelle&lt;/strong&gt;: The thing that happened that was kind of pure magic in that meeting was that [Daniel] did a comparison. He started playing a song on the software, and the song played so quick, so instant … I mean, I don’t know if people remember, but playback was slow back then. Even if you had an MP3 on your computer, and you played it via, you know, Winamp, iTunes, this was faster. And we were like, “You have the files on your computer, right?” And he was like, “No, it’s in the cloud.”&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;That’s our fourth and final lesson:&lt;/strong&gt; &lt;strong&gt;differentiating yourself from your competitors is one thing. But if you can pull off something that no one thought was possible — a magic trick — now that’s captivating.&lt;/strong&gt; Captivating enough to potentially change the minds of not only users, but an entire industry that’s stuck in a rut.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, sure, that’s four lessons, but why stop there? The podcast series “Spotify: A Product Story” shares all these stories and dozens more, filled with insider insight and product strategy lessons from the employees, collaborators, and musicians who made Spotify what it is today. Join host and Chief R&amp;amp;D Officer Gustav Söderström and &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34;&gt;check out all the episodes right here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/08/04/four-lessons-we-learned-from-creating-spotifys-desktop-app/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/08/A-Product-Story_01-Illustration_1200x630-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR Over the years, Spotify’s brand has expanded to encompass a number of products, from mobile apps to web players to car things. But sitting at the core is our flagship product, the one that started it all: the desktop app. In the first episode of our podcast series, “Spotify: A Product Story”,</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Patrick Balestra: Senior Engineer&#xA;</title>
    <updated>2021-06-04T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-06-04:/2021/06/04/patrick-balestra-senior-engineer/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-4729&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;         &#xA;         &lt;div&gt;&#xA;             &lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/06/Patrick-Balestra_Header-Image.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/06/Patrick-Balestra_Header-Image.png 693w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/06/Patrick-Balestra_Header-Image-250x222.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/06/Patrick-Balestra_Header-Image-120x106.png 120w&#34; sizes=&#34;(max-width: 693px) 100vw, 693px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/06/Patrick-Balestra_Header-Image.png&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;p&gt;&lt;b&gt;Originally from Switzerland, Patrick has lived in Sweden for almost three years now and works as a Senior iOS Engineer in our Stockholm office.&lt;/b&gt;&lt;/p&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;blockquote&gt;&lt;p&gt;8:30am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I’m at my best after nine hours’ sleep, so I tend to wake up pretty late, shower and dress as though I’m going into the office. Although I’ve been in Stockholm a while now, I’m still not a fan of the Swedish breakfast of bread and cheese or salami – give me Nutella on toast any day!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;10:00am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After breakfast, I log into my computer, check my messages and settle down for my morning’s work. Officially, I’m an iOS engineer on the Infrastructure team, which means I take care of the iOS developer experience — creating tools, libraries and other innovative solutions to help developers work faster and more efficiently. But over the last year, I’ve transitioned to work more on a new monorepo and Bazel system project that’s designed for all kinds of developers, not just iOS. We’re unifying how the tooling works, where the code lives and so on. And it’s an ongoing project – we’re constantly finding ways to improve and make life easier for developers across Spotify. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My team is divided between Stockholm and New York, so we’re accustomed to being far apart and have adapted to working from home pretty easily. But I’m a sociable person and really miss being in the office, chatting with other people and knowing what’s going on with other teams. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;1:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One way I stay connected is by meeting up with colleagues that live close by — we often take our lunch breaks together and grab a bite to eat in a local restaurant. Stockholm’s a great place to live — the winters can be rough but, as a Swiss-Italian, I’m no stranger to snow and ice. And at this time of year, the city is becoming more lively — the weather’s warmer, the restaurants are buzzing, and people are ready to enjoy themselves. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;2:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After lunch is when New York wakes up, so I tend to have more meetings and less time for writing code or reviewing documents. I also like to keep up-to-date with the wider engineering community and do open source work — I usually have a bunch of projects on the go. Recently, I helped to open source &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://xcmetrics.io/&#34; target=&#34;_blank&#34;&gt;XCMetrics&lt;/a&gt; — &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://engineering.atspotify.com/2021/01/20/introducing-xcmetrics-our-all-in-one-tool-for-tracking-xcode-build-metrics/&#34; target=&#34;_blank&#34;&gt;a tool developed at Spotify&lt;/a&gt; for Apple’s developer software, Xcode, that allows people to collect, display, and track the metrics inside their team’s Xcode build logs. It can provide valuable insights to help improve both developer experience and productivity.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;7:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I tend to work fairly late in the evenings to make the most of the overlap with New York. But around 7pm, it’s time to relax — I watch movies, play video games, all the usual stuff. On Thursday evenings, I often play football with a few other folks from Spotify. And I’ve also got more into cooking over the last year — I love to get my girlfriend or a few friends over for dinner and try out one of my new recipes. Somehow, I’ve become the chef of the group, but I’m more than happy with that…&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;111&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-250x40.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-768x121.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-120x19.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering.png 1525w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;557&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-700x557.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-700x557.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-250x199.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-768x611.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-120x96.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2.png 1000w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;         &#xA;         &#xA;&#xA;         &lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/06/04/patrick-balestra-senior-engineer/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/06/Patrick-Balestra_Header-Image.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">8:30am I’m at my best after nine hours’ sleep, so I tend to wake up pretty late, shower and dress as though I’m going into the office. Although I’ve been in Stockholm a while now, I’m still not a fan of the Swedish breakfast of bread and cheese or salami – give me Nutella on toast any day! 10:</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Patrick Balestra: Senior Engineer&#xA;</title>
    <updated>2021-06-04T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-06-04:/2021/06/patrick-balestra-senior-engineer/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-4729&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;        &#xA;         &lt;div&gt;&#xA;            &lt;div&gt;&#xA;            &lt;h2&gt;Putting the Spotlight on our technical employees&lt;/h2&gt;&#xA;    &lt;p&gt;My beat is a blog series that turns the spotlight towards technical employees across various desciplines and roles to showcase what a typical day as a Spotifier consists of.&lt;/p&gt;&#xA;            &lt;/div&gt;&#xA; &#xA;             &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image.png 693w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image-250x222.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image-120x106.png 120w&#34; sizes=&#34;(max-width: 693px) 100vw, 693px&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;div&gt;&#xA;             &#xA;                 &lt;p&gt;&lt;b&gt;Originally from Switzerland, Patrick has lived in Sweden for almost three years now and works as a Senior iOS Engineer in our Stockholm office.&lt;/b&gt;&lt;/p&gt;&#xA;             &lt;/div&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;blockquote&gt;&lt;p&gt;8:30am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I’m at my best after nine hours’ sleep, so I tend to wake up pretty late, shower and dress as though I’m going into the office. Although I’ve been in Stockholm a while now, I’m still not a fan of the Swedish breakfast of bread and cheese or salami – give me Nutella on toast any day!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;10:00am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After breakfast, I log into my computer, check my messages and settle down for my morning’s work. Officially, I’m an iOS engineer on the Infrastructure team, which means I take care of the iOS developer experience — creating tools, libraries and other innovative solutions to help developers work faster and more efficiently. But over the last year, I’ve transitioned to work more on a new monorepo and Bazel system project that’s designed for all kinds of developers, not just iOS. We’re unifying how the tooling works, where the code lives and so on. And it’s an ongoing project – we’re constantly finding ways to improve and make life easier for developers across Spotify. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My team is divided between Stockholm and New York, so we’re accustomed to being far apart and have adapted to working from home pretty easily. But I’m a sociable person and really miss being in the office, chatting with other people and knowing what’s going on with other teams. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;1:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One way I stay connected is by meeting up with colleagues that live close by — we often take our lunch breaks together and grab a bite to eat in a local restaurant. Stockholm’s a great place to live — the winters can be rough but, as a Swiss-Italian, I’m no stranger to snow and ice. And at this time of year, the city is becoming more lively — the weather’s warmer, the restaurants are buzzing, and people are ready to enjoy themselves. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;2:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After lunch is when New York wakes up, so I tend to have more meetings and less time for writing code or reviewing documents. I also like to keep up-to-date with the wider engineering community and do open source work — I usually have a bunch of projects on the go. Recently, I helped to open source &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://xcmetrics.io/&#34; target=&#34;_blank&#34;&gt;XCMetrics&lt;/a&gt; — &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://engineering.atspotify.com/2021/01/20/introducing-xcmetrics-our-all-in-one-tool-for-tracking-xcode-build-metrics/&#34; target=&#34;_blank&#34;&gt;a tool developed at Spotify&lt;/a&gt; for Apple’s developer software, Xcode, that allows people to collect, display, and track the metrics inside their team’s Xcode build logs. It can provide valuable insights to help improve both developer experience and productivity.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;7:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I tend to work fairly late in the evenings to make the most of the overlap with New York. But around 7pm, it’s time to relax — I watch movies, play video games, all the usual stuff. On Thursday evenings, I often play football with a few other folks from Spotify. And I’ve also got more into cooking over the last year — I love to get my girlfriend or a few friends over for dinner and try out one of my new recipes. Somehow, I’ve become the chef of the group, but I’m more than happy with that…&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;111&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-250x40.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-768x121.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-120x19.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering.png 1525w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;557&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-700x557.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-700x557.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-250x199.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-768x611.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-120x96.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2.png 1000w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;p&gt;&#xA;&#xA;         Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/mobile/&#34; rel=&#34;tag&#34;&gt;Mobile&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/06/patrick-balestra-senior-engineer/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">8:30am I’m at my best after nine hours’ sleep, so I tend to wake up pretty late, shower and dress as though I’m going into the office. Although I’ve been in Stockholm a while now, I’m still not a fan of the Swedish breakfast of bread and cheese or salami – give me Nutella on toast any day! 10:</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Patrick Balestra: Senior Engineer&#xA;</title>
    <updated>2021-06-04T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-06-04:/patrick-balestra-senior-engineer/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-4729&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;        &#xA;         &lt;div&gt;&#xA;            &lt;div&gt;&#xA;            &lt;h2&gt;Putting the Spotlight on our technical employees&lt;/h2&gt;&#xA;    &lt;p&gt;My beat is a blog series that turns the spotlight towards technical employees across various desciplines and roles to showcase what a typical day as a Spotifier consists of.&lt;/p&gt;&#xA;            &lt;/div&gt;&#xA; &#xA;             &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image.png 693w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image-250x222.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image-120x106.png 120w&#34; sizes=&#34;(max-width: 693px) 100vw, 693px&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;div&gt;&#xA;             &#xA;                 &lt;p&gt;&lt;b&gt;Originally from Switzerland, Patrick has lived in Sweden for almost three years now and works as a Senior iOS Engineer in our Stockholm office.&lt;/b&gt;&lt;/p&gt;&#xA;             &lt;/div&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;blockquote&gt;&lt;p&gt;8:30am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I’m at my best after nine hours’ sleep, so I tend to wake up pretty late, shower and dress as though I’m going into the office. Although I’ve been in Stockholm a while now, I’m still not a fan of the Swedish breakfast of bread and cheese or salami – give me Nutella on toast any day!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;10:00am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After breakfast, I log into my computer, check my messages and settle down for my morning’s work. Officially, I’m an iOS engineer on the Infrastructure team, which means I take care of the iOS developer experience — creating tools, libraries and other innovative solutions to help developers work faster and more efficiently. But over the last year, I’ve transitioned to work more on a new monorepo and Bazel system project that’s designed for all kinds of developers, not just iOS. We’re unifying how the tooling works, where the code lives and so on. And it’s an ongoing project – we’re constantly finding ways to improve and make life easier for developers across Spotify. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My team is divided between Stockholm and New York, so we’re accustomed to being far apart and have adapted to working from home pretty easily. But I’m a sociable person and really miss being in the office, chatting with other people and knowing what’s going on with other teams. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;1:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One way I stay connected is by meeting up with colleagues that live close by — we often take our lunch breaks together and grab a bite to eat in a local restaurant. Stockholm’s a great place to live — the winters can be rough but, as a Swiss-Italian, I’m no stranger to snow and ice. And at this time of year, the city is becoming more lively — the weather’s warmer, the restaurants are buzzing, and people are ready to enjoy themselves. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;2:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After lunch is when New York wakes up, so I tend to have more meetings and less time for writing code or reviewing documents. I also like to keep up-to-date with the wider engineering community and do open source work — I usually have a bunch of projects on the go. Recently, I helped to open source &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://xcmetrics.io/&#34; target=&#34;_blank&#34;&gt;XCMetrics&lt;/a&gt; — &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://engineering.atspotify.com/2021/01/20/introducing-xcmetrics-our-all-in-one-tool-for-tracking-xcode-build-metrics/&#34; target=&#34;_blank&#34;&gt;a tool developed at Spotify&lt;/a&gt; for Apple’s developer software, Xcode, that allows people to collect, display, and track the metrics inside their team’s Xcode build logs. It can provide valuable insights to help improve both developer experience and productivity.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;7:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I tend to work fairly late in the evenings to make the most of the overlap with New York. But around 7pm, it’s time to relax — I watch movies, play video games, all the usual stuff. On Thursday evenings, I often play football with a few other folks from Spotify. And I’ve also got more into cooking over the last year — I love to get my girlfriend or a few friends over for dinner and try out one of my new recipes. Somehow, I’ve become the chef of the group, but I’m more than happy with that…&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;111&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-250x40.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-768x121.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-120x19.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering.png 1525w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;557&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-700x557.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-700x557.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-250x199.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-768x611.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-120x96.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2.png 1000w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;p&gt;&#xA;&#xA;         Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/mobile/&#34; rel=&#34;tag&#34;&gt;Mobile&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/patrick-balestra-senior-engineer/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">8:30am I’m at my best after nine hours’ sleep, so I tend to wake up pretty late, shower and dress as though I’m going into the office. Although I’ve been in Stockholm a while now, I’m still not a fan of the Swedish breakfast of bread and cheese or salami – give me Nutella on toast any day! 10:</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Patrick Balestra: Senior Engineer&#xA;</title>
    <updated>2021-06-04T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-06-04:/patrick-balestra-senior-engineer/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-4729&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;        &#xA;         &lt;div&gt;&#xA;            &lt;div&gt;&#xA;            &lt;h2&gt;Putting the Spotlight on our technical employees&lt;/h2&gt;&#xA;    &lt;p&gt;My beat is a blog series that turns the spotlight towards technical employees across various desciplines and roles to showcase what a typical day as a Spotifier consists of.&lt;/p&gt;&#xA;            &lt;/div&gt;&#xA; &#xA;             &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image.png 693w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image-250x222.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image-120x106.png 120w&#34; sizes=&#34;(max-width: 693px) 100vw, 693px&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;div&gt;&#xA;             &#xA;                 &lt;p&gt;&lt;b&gt;Originally from Switzerland, Patrick has lived in Sweden for almost three years now and works as a Senior iOS Engineer in our Stockholm office.&lt;/b&gt;&lt;/p&gt;&#xA;             &lt;/div&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;blockquote&gt;&lt;p&gt;8:30am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I’m at my best after nine hours’ sleep, so I tend to wake up pretty late, shower and dress as though I’m going into the office. Although I’ve been in Stockholm a while now, I’m still not a fan of the Swedish breakfast of bread and cheese or salami – give me Nutella on toast any day!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;10:00am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After breakfast, I log into my computer, check my messages and settle down for my morning’s work. Officially, I’m an iOS engineer on the Infrastructure team, which means I take care of the iOS developer experience — creating tools, libraries and other innovative solutions to help developers work faster and more efficiently. But over the last year, I’ve transitioned to work more on a new monorepo and Bazel system project that’s designed for all kinds of developers, not just iOS. We’re unifying how the tooling works, where the code lives and so on. And it’s an ongoing project – we’re constantly finding ways to improve and make life easier for developers across Spotify. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My team is divided between Stockholm and New York, so we’re accustomed to being far apart and have adapted to working from home pretty easily. But I’m a sociable person and really miss being in the office, chatting with other people and knowing what’s going on with other teams. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;1:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One way I stay connected is by meeting up with colleagues that live close by — we often take our lunch breaks together and grab a bite to eat in a local restaurant. Stockholm’s a great place to live — the winters can be rough but, as a Swiss-Italian, I’m no stranger to snow and ice. And at this time of year, the city is becoming more lively — the weather’s warmer, the restaurants are buzzing, and people are ready to enjoy themselves. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;2:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After lunch is when New York wakes up, so I tend to have more meetings and less time for writing code or reviewing documents. I also like to keep up-to-date with the wider engineering community and do open source work — I usually have a bunch of projects on the go. Recently, I helped to open source &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://xcmetrics.io/&#34; target=&#34;_blank&#34;&gt;XCMetrics&lt;/a&gt; — &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://engineering.atspotify.com/2021/01/20/introducing-xcmetrics-our-all-in-one-tool-for-tracking-xcode-build-metrics/&#34; target=&#34;_blank&#34;&gt;a tool developed at Spotify&lt;/a&gt; for Apple’s developer software, Xcode, that allows people to collect, display, and track the metrics inside their team’s Xcode build logs. It can provide valuable insights to help improve both developer experience and productivity.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;7:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I tend to work fairly late in the evenings to make the most of the overlap with New York. But around 7pm, it’s time to relax — I watch movies, play video games, all the usual stuff. On Thursday evenings, I often play football with a few other folks from Spotify. And I’ve also got more into cooking over the last year — I love to get my girlfriend or a few friends over for dinner and try out one of my new recipes. Somehow, I’ve become the chef of the group, but I’m more than happy with that…&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;111&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-250x40.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-768x121.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-120x19.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering.png 1525w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;557&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-700x557.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-700x557.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-250x199.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-768x611.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2-120x96.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/MyBeat-Patrick-Balestra_Pie-chart2.png 1000w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;p&gt;&#xA;&#xA;         Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/mobile/&#34; rel=&#34;tag&#34;&gt;Mobile&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/patrick-balestra-senior-engineer/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/06/Patrick-Balestra_Header-Image.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">8:30am I’m at my best after nine hours’ sleep, so I tend to wake up pretty late, shower and dress as though I’m going into the office. Although I’ve been in Stockholm a while now, I’m still not a fan of the Swedish breakfast of bread and cheese or salami – give me Nutella on toast any day! 10:</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Achieving Team Purpose and Pride with Scrum&#xA;</title>
    <updated>2021-05-27T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-05-27:/achieving-team-purpose-and-pride-with-scrum/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;May 27, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/achieving-team-purpose-and-pride-with-scrum/&#34; title=&#34;Achieving Team Purpose and Pride with Scrum&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-700x351.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-1536x771.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-2048x1028.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;Team purpose and pride — my team hit those high marks, but it was a long journey to get there from where we started.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify, we strive for “aligned autonomy” among our teams. Meaning: we align on what it is we set out to do, but preserve flexibility to choose how we’ll achieve those goals. Letting teams adjust their processes to work for them promises many benefits (innovation, lower overhead, team happiness, speed, etc.), but it takes intentional team effort to make these adjustments.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While this international effort towards aligned autonomy has shown dazzling success and efficiency across the company, my team was struggling to make it work, finding ourselves with a process that wasn’t working for us. This is the story of how we changed that.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Our problem&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our squad had long been following a process comprising bits and pieces from the &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://scrumguides.org/scrum-guide.html&#34; target=&#34;_blank&#34;&gt;Scrum&lt;/a&gt; framework, an agile methodology developed in the 1990s by Ken Schwaber and Jeff Sutherland. However, we hadn’t connected the Scrum practices we were using — like stand-ups, two-week sprints, and retros — to the principles behind them, and we hadn’t woven them together cohesively as a system. As a result, we found ourselves with a surprising lack of structure and clarity: our meetings often felt purposeless, we never finished our sprints, and our product manager had a difficult time knowing what could reasonably be expected to be delivered at any given time. We, as engineers, also had little sense of how our day-to-day work fit into a larger quarterly picture, or how close our team was to achieving its goals. This left many of us with a gnawing feeling that our team rhythm could be better, though we weren’t quite sure how to get there.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The goals we ultimately wanted our process to achieve were:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Continuous improvement: &lt;/strong&gt;We wanted to iterate better — to easily and fluidly understand our work and find opportunities where we could improve.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;&lt;strong&gt;Shared understanding and transparency: &lt;/strong&gt;We wanted everyone on the team to know at any given time what work was happening, and what it entailed.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;3&#34;&gt;&lt;li&gt;&lt;strong&gt;Confidence: &lt;/strong&gt;We wanted to be able to more confidently plan our long-term trajectory and communicate with stakeholders about what they could expect.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Our approach&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To help us reach our goals, we sought the help of a Spotify Agile coach, who first guided us through an assessment of our existing ways of working. Since our team generally liked the Scrum framework but wasn’t using it holistically, our Agile coach helped us dig deeper into how the Scrum elements work together as a whole. Each piece has a specific role to play and interacts with each other piece. Ultimately, we unanimously agreed to adopt Scrum more or less “by the book”: that is to say, following the entire framework laid out in the Scrum Guide, rather than just disconnected bits of it. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Backlog refinement&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Create a shared understanding of each ticket, as well as how “large” it is, so that the PM can prioritize accordingly.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Before these process changes, we were itching for a succinct way to size our stories; sometimes stories would get pointed during a planning meeting, but more often than not, we were bringing many unsized stories into a sprint. This meant that we had virtually no gauge of how much work we were bringing in or committing to.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With the help of our coach, we began holding a weekly backlog refinement meeting. We alternate each week between “coarse refinement” — in which we hone in on tickets, ask questions, and find collective understanding — and “fine refinement”, in which we actually &lt;em&gt;point &lt;/em&gt;those tickets.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This system ensures that everyone has an opportunity to ask questions and shares a basic understanding of every ticket. We all know how much work we are committing to when we begin a sprint, and it also allows us to compare, sprint by sprint, how many points we are finishing as a team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Sprint planning&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Create a sprint full of stories ready to be picked up, and which we feel confident we can deliver on time.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Previously, our sprint planning process didn’t allow for us to share a collective grasp of each of the tickets in the backlog before our sprint planning ceremony, so we spent most of the two hours reading about the tickets and trying to arrive at an agreement about which ones felt important to bring in.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, because all the tickets are pointed and prioritized in the backlog ahead of time, the process is very simple: we go down the backlog — full of tickets we’ve already pointed and discussed — and simply do any subtasking to get clearer on the actual work we’ll be doing. After each ticket we review and bring into the sprint, we check whether the team feels we can take on more. By the end, we have a sprint full of fully subtasked stories we thoroughly understand, and that we’re confident we can deliver within two weeks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Sprint review&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Review the sprint’s work, celebrate achievements, and note what new tasks came out of this sprint.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While we already had a retro in which we talked vaguely about the successes and challenges of the sprint, we didn’t evaluate the work in terms of our team’s product prioritization.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In a 30-minute sprint review, we demo the features completed, and ask ourselves some basic questions:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;em&gt;What work did we complete?&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Is there anything we need to extend or add to what we’ve done?&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Did we discover any tech debt?&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Are we on track to meet our longer-term goals?&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This allows us to regroup and reprioritize work accordingly for the next sprint, which begins the following day.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Retro&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Bring team celebrations and concerns to the table; arrive at an action item to implement in order to improve team process.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In previous retros, we all jotted down our notes and talked a little bit about the many things that had come up during the sprint, but we didn’t discuss action items sufficiently in order to implement them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, we continue to create those notes, but then vote on a &lt;em&gt;single issue &lt;/em&gt;to spend the majority of the retro discussing and ideating to solve.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;746&#34; height=&#34;787&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format.png 746w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format-250x264.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format-700x738.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format-120x127.png 120w&#34; sizes=&#34;(max-width: 746px) 100vw, 746px&#34;/&gt;&lt;figcaption&gt;&lt;em&gt;Now, our retro format takes us step-by-step from ideation at the beginning, to the refining of a single idea at the end.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By the end of the retro, we now have an implementable action item that can be tracked throughout the next few sprints. These action items allow us to actively resolve pain points and, in turn, make progress toward our broader goal of continuous self-improvement.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Stand-ups&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Establish a shared understanding of the day-to-day state of the team’s work, and make any adjustments needed to unblock any team member.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Incorporating a key question to the end of stand-ups has helped the team prioritize and make adjustments where needed: “How likely are we to complete this sprint, on a scale of 1 to 5?” All at once, each team member holds up 1 to 5 fingers to communicate their answer. If anyone holds up three or fewer fingers, we invite a deeper discussion. This helps us catch and swarm on problems early, even if only one person has noticed them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Recommendations&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With simple adjustments to our Agile process, we found a meaningful change in our working rhythm. If you’re thinking about revamping your team’s Agile process, you can give these steps a try:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;1. Try out a system holistically before making adjustments. &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Agile systems are designed with a lot of intention. Honoring all of the different parts will allow you to experience the originally intended benefits, before fine-tuning the nuances to your specific use case.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;2. Ask the “stand-up question”.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Asking “How confident are we that we will finish this sprint?” gives team members the opportunity to voice their concerns and offer potential solutions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;3. Focus on a single issue in retros.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Allow team members to vote on one or two issues to discuss at length, so there’s time and space to brainstorm actionable solutions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;4. Plan sprints you can finish, and commit to finishing them.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Create multiple decision points during the sprint planning process where team members can decline work. Planning accurately sized sprints and committing to finishing them will help teams run like a well-oiled machine.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;These changes allowed our team to finally experience the great feeling of actually finishing a sprint and celebrating what we’ve accomplished, as well as giving us increased confidence when communicating our deliverables to stakeholders. We also found expanded opportunities to learn and collaborate, as backend and frontend engineers &lt;a href=&#34;https://engineering.atspotify.com/2021/03/23/why-you-should-pair-with-non-engineers/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;became more T-shaped&lt;/a&gt; to finish the sprint’s work in time. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Additionally, as we implemented these changes, the average time we took to complete a work item dropped from 8.1 days to just 3.9 days, and we were able to increase our product load from one product to three products, tripling our monthly active users (MAU) without any change in the number of engineers on our team. These quantitative improvements aligned with our impression that, with the help of our improved process, we were working with greater efficiency.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My team’s practical work of recommitting to the principles behind our Agile practices speaks to a larger theme here at Spotify: finding the right level of alignment to help navigate the flexibility of autonomy. By increasing the structure in our team processes (through adoption of Scrum, in our case), we found enhanced clarity in our work, which allowed us to ensure we always felt aligned towards our shared goals. Ultimately, we finished our process upgrade with an increased sense of pride, direction, and responsibility for our success.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Many thanks are in order to our Agile coach, Matthieu Cornillon, for guiding us through every step of this process! And of course to my teammates: Isaac Ezer, Joshua Freeberg, Rishabh Jain, Linda Liu, Yani Metaxas, Nithya Muralidharan, Sabrina Siu, Jim Thomson, Hui Yuan, and Veronica Yurovsky.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/achieving-team-purpose-and-pride-with-scrum/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Team purpose and pride — my team hit those high marks, but it was a long journey to get there from where we started. At Spotify, we strive for “aligned autonomy” among our teams. Meaning: we align on what it is we set out to do, but preserve flexibility to choose how we’ll achieve those goals. Le</summary>
    <author>
      <name>Published by Sophia Ciocca, Web Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Achieving Team Purpose and Pride with Scrum&#xA;</title>
    <updated>2021-05-27T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-05-27:/achieving-team-purpose-and-pride-with-scrum/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;May 27, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/achieving-team-purpose-and-pride-with-scrum/&#34; title=&#34;Achieving Team Purpose and Pride with Scrum&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-700x351.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-1536x771.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-2048x1028.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;Team purpose and pride — my team hit those high marks, but it was a long journey to get there from where we started.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify, we strive for “aligned autonomy” among our teams. Meaning: we align on what it is we set out to do, but preserve flexibility to choose how we’ll achieve those goals. Letting teams adjust their processes to work for them promises many benefits (innovation, lower overhead, team happiness, speed, etc.), but it takes intentional team effort to make these adjustments.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While this international effort towards aligned autonomy has shown dazzling success and efficiency across the company, my team was struggling to make it work, finding ourselves with a process that wasn’t working for us. This is the story of how we changed that.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Our problem&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our squad had long been following a process comprising bits and pieces from the &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://scrumguides.org/scrum-guide.html&#34; target=&#34;_blank&#34;&gt;Scrum&lt;/a&gt; framework, an agile methodology developed in the 1990s by Ken Schwaber and Jeff Sutherland. However, we hadn’t connected the Scrum practices we were using — like stand-ups, two-week sprints, and retros — to the principles behind them, and we hadn’t woven them together cohesively as a system. As a result, we found ourselves with a surprising lack of structure and clarity: our meetings often felt purposeless, we never finished our sprints, and our product manager had a difficult time knowing what could reasonably be expected to be delivered at any given time. We, as engineers, also had little sense of how our day-to-day work fit into a larger quarterly picture, or how close our team was to achieving its goals. This left many of us with a gnawing feeling that our team rhythm could be better, though we weren’t quite sure how to get there.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The goals we ultimately wanted our process to achieve were:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Continuous improvement: &lt;/strong&gt;We wanted to iterate better — to easily and fluidly understand our work and find opportunities where we could improve.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;&lt;strong&gt;Shared understanding and transparency: &lt;/strong&gt;We wanted everyone on the team to know at any given time what work was happening, and what it entailed.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;3&#34;&gt;&lt;li&gt;&lt;strong&gt;Confidence: &lt;/strong&gt;We wanted to be able to more confidently plan our long-term trajectory and communicate with stakeholders about what they could expect.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Our approach&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To help us reach our goals, we sought the help of a Spotify Agile coach, who first guided us through an assessment of our existing ways of working. Since our team generally liked the Scrum framework but wasn’t using it holistically, our Agile coach helped us dig deeper into how the Scrum elements work together as a whole. Each piece has a specific role to play and interacts with each other piece. Ultimately, we unanimously agreed to adopt Scrum more or less “by the book”: that is to say, following the entire framework laid out in the Scrum Guide, rather than just disconnected bits of it. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Backlog refinement&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Create a shared understanding of each ticket, as well as how “large” it is, so that the PM can prioritize accordingly.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Before these process changes, we were itching for a succinct way to size our stories; sometimes stories would get pointed during a planning meeting, but more often than not, we were bringing many unsized stories into a sprint. This meant that we had virtually no gauge of how much work we were bringing in or committing to.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With the help of our coach, we began holding a weekly backlog refinement meeting. We alternate each week between “coarse refinement” — in which we hone in on tickets, ask questions, and find collective understanding — and “fine refinement”, in which we actually &lt;em&gt;point &lt;/em&gt;those tickets.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This system ensures that everyone has an opportunity to ask questions and shares a basic understanding of every ticket. We all know how much work we are committing to when we begin a sprint, and it also allows us to compare, sprint by sprint, how many points we are finishing as a team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Sprint planning&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Create a sprint full of stories ready to be picked up, and which we feel confident we can deliver on time.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Previously, our sprint planning process didn’t allow for us to share a collective grasp of each of the tickets in the backlog before our sprint planning ceremony, so we spent most of the two hours reading about the tickets and trying to arrive at an agreement about which ones felt important to bring in.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, because all the tickets are pointed and prioritized in the backlog ahead of time, the process is very simple: we go down the backlog — full of tickets we’ve already pointed and discussed — and simply do any subtasking to get clearer on the actual work we’ll be doing. After each ticket we review and bring into the sprint, we check whether the team feels we can take on more. By the end, we have a sprint full of fully subtasked stories we thoroughly understand, and that we’re confident we can deliver within two weeks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Sprint review&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Review the sprint’s work, celebrate achievements, and note what new tasks came out of this sprint.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While we already had a retro in which we talked vaguely about the successes and challenges of the sprint, we didn’t evaluate the work in terms of our team’s product prioritization.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In a 30-minute sprint review, we demo the features completed, and ask ourselves some basic questions:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;em&gt;What work did we complete?&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Is there anything we need to extend or add to what we’ve done?&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Did we discover any tech debt?&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Are we on track to meet our longer-term goals?&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This allows us to regroup and reprioritize work accordingly for the next sprint, which begins the following day.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Retro&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Bring team celebrations and concerns to the table; arrive at an action item to implement in order to improve team process.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In previous retros, we all jotted down our notes and talked a little bit about the many things that had come up during the sprint, but we didn’t discuss action items sufficiently in order to implement them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, we continue to create those notes, but then vote on a &lt;em&gt;single issue &lt;/em&gt;to spend the majority of the retro discussing and ideating to solve.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;746&#34; height=&#34;787&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format.png 746w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format-250x264.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format-700x738.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format-120x127.png 120w&#34; sizes=&#34;(max-width: 746px) 100vw, 746px&#34;/&gt;&lt;figcaption&gt;&lt;em&gt;Now, our retro format takes us step-by-step from ideation at the beginning, to the refining of a single idea at the end.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By the end of the retro, we now have an implementable action item that can be tracked throughout the next few sprints. These action items allow us to actively resolve pain points and, in turn, make progress toward our broader goal of continuous self-improvement.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Stand-ups&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Establish a shared understanding of the day-to-day state of the team’s work, and make any adjustments needed to unblock any team member.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Incorporating a key question to the end of stand-ups has helped the team prioritize and make adjustments where needed: “How likely are we to complete this sprint, on a scale of 1 to 5?” All at once, each team member holds up 1 to 5 fingers to communicate their answer. If anyone holds up three or fewer fingers, we invite a deeper discussion. This helps us catch and swarm on problems early, even if only one person has noticed them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Recommendations&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With simple adjustments to our Agile process, we found a meaningful change in our working rhythm. If you’re thinking about revamping your team’s Agile process, you can give these steps a try:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;1. Try out a system holistically before making adjustments. &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Agile systems are designed with a lot of intention. Honoring all of the different parts will allow you to experience the originally intended benefits, before fine-tuning the nuances to your specific use case.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;2. Ask the “stand-up question”.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Asking “How confident are we that we will finish this sprint?” gives team members the opportunity to voice their concerns and offer potential solutions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;3. Focus on a single issue in retros.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Allow team members to vote on one or two issues to discuss at length, so there’s time and space to brainstorm actionable solutions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;4. Plan sprints you can finish, and commit to finishing them.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Create multiple decision points during the sprint planning process where team members can decline work. Planning accurately sized sprints and committing to finishing them will help teams run like a well-oiled machine.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;These changes allowed our team to finally experience the great feeling of actually finishing a sprint and celebrating what we’ve accomplished, as well as giving us increased confidence when communicating our deliverables to stakeholders. We also found expanded opportunities to learn and collaborate, as backend and frontend engineers &lt;a href=&#34;https://engineering.atspotify.com/2021/03/23/why-you-should-pair-with-non-engineers/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;became more T-shaped&lt;/a&gt; to finish the sprint’s work in time. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Additionally, as we implemented these changes, the average time we took to complete a work item dropped from 8.1 days to just 3.9 days, and we were able to increase our product load from one product to three products, tripling our monthly active users (MAU) without any change in the number of engineers on our team. These quantitative improvements aligned with our impression that, with the help of our improved process, we were working with greater efficiency.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My team’s practical work of recommitting to the principles behind our Agile practices speaks to a larger theme here at Spotify: finding the right level of alignment to help navigate the flexibility of autonomy. By increasing the structure in our team processes (through adoption of Scrum, in our case), we found enhanced clarity in our work, which allowed us to ensure we always felt aligned towards our shared goals. Ultimately, we finished our process upgrade with an increased sense of pride, direction, and responsibility for our success.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Many thanks are in order to our Agile coach, Matthieu Cornillon, for guiding us through every step of this process! And of course to my teammates: Isaac Ezer, Joshua Freeberg, Rishabh Jain, Linda Liu, Yani Metaxas, Nithya Muralidharan, Sabrina Siu, Jim Thomson, Hui Yuan, and Veronica Yurovsky.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/achieving-team-purpose-and-pride-with-scrum/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Team purpose and pride — my team hit those high marks, but it was a long journey to get there from where we started. At Spotify, we strive for “aligned autonomy” among our teams. Meaning: we align on what it is we set out to do, but preserve flexibility to choose how we’ll achieve those goals. Le</summary>
    <author>
      <name>Published by Sophia Ciocca, Web Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Achieving Team Purpose and Pride with Scrum&#xA;</title>
    <updated>2021-05-27T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-05-27:/2021/05/achieving-team-purpose-and-pride-with-scrum/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;May 27, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/05/achieving-team-purpose-and-pride-with-scrum/&#34; title=&#34;Achieving Team Purpose and Pride with Scrum&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-700x351.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-1536x771.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-2048x1028.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;Team purpose and pride — my team hit those high marks, but it was a long journey to get there from where we started.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify, we strive for “aligned autonomy” among our teams. Meaning: we align on what it is we set out to do, but preserve flexibility to choose how we’ll achieve those goals. Letting teams adjust their processes to work for them promises many benefits (innovation, lower overhead, team happiness, speed, etc.), but it takes intentional team effort to make these adjustments.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While this international effort towards aligned autonomy has shown dazzling success and efficiency across the company, my team was struggling to make it work, finding ourselves with a process that wasn’t working for us. This is the story of how we changed that.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Our problem&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our squad had long been following a process comprising bits and pieces from the &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://scrumguides.org/scrum-guide.html&#34; target=&#34;_blank&#34;&gt;Scrum&lt;/a&gt; framework, an agile methodology developed in the 1990s by Ken Schwaber and Jeff Sutherland. However, we hadn’t connected the Scrum practices we were using — like stand-ups, two-week sprints, and retros — to the principles behind them, and we hadn’t woven them together cohesively as a system. As a result, we found ourselves with a surprising lack of structure and clarity: our meetings often felt purposeless, we never finished our sprints, and our product manager had a difficult time knowing what could reasonably be expected to be delivered at any given time. We, as engineers, also had little sense of how our day-to-day work fit into a larger quarterly picture, or how close our team was to achieving its goals. This left many of us with a gnawing feeling that our team rhythm could be better, though we weren’t quite sure how to get there.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The goals we ultimately wanted our process to achieve were:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Continuous improvement: &lt;/strong&gt;We wanted to iterate better — to easily and fluidly understand our work and find opportunities where we could improve.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;&lt;strong&gt;Shared understanding and transparency: &lt;/strong&gt;We wanted everyone on the team to know at any given time what work was happening, and what it entailed.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;3&#34;&gt;&lt;li&gt;&lt;strong&gt;Confidence: &lt;/strong&gt;We wanted to be able to more confidently plan our long-term trajectory and communicate with stakeholders about what they could expect.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Our approach&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To help us reach our goals, we sought the help of a Spotify Agile coach, who first guided us through an assessment of our existing ways of working. Since our team generally liked the Scrum framework but wasn’t using it holistically, our Agile coach helped us dig deeper into how the Scrum elements work together as a whole. Each piece has a specific role to play and interacts with each other piece. Ultimately, we unanimously agreed to adopt Scrum more or less “by the book”: that is to say, following the entire framework laid out in the Scrum Guide, rather than just disconnected bits of it. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Backlog refinement&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Create a shared understanding of each ticket, as well as how “large” it is, so that the PM can prioritize accordingly.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Before these process changes, we were itching for a succinct way to size our stories; sometimes stories would get pointed during a planning meeting, but more often than not, we were bringing many unsized stories into a sprint. This meant that we had virtually no gauge of how much work we were bringing in or committing to.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With the help of our coach, we began holding a weekly backlog refinement meeting. We alternate each week between “coarse refinement” — in which we hone in on tickets, ask questions, and find collective understanding — and “fine refinement”, in which we actually &lt;em&gt;point &lt;/em&gt;those tickets.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This system ensures that everyone has an opportunity to ask questions and shares a basic understanding of every ticket. We all know how much work we are committing to when we begin a sprint, and it also allows us to compare, sprint by sprint, how many points we are finishing as a team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Sprint planning&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Create a sprint full of stories ready to be picked up, and which we feel confident we can deliver on time.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Previously, our sprint planning process didn’t allow for us to share a collective grasp of each of the tickets in the backlog before our sprint planning ceremony, so we spent most of the two hours reading about the tickets and trying to arrive at an agreement about which ones felt important to bring in.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, because all the tickets are pointed and prioritized in the backlog ahead of time, the process is very simple: we go down the backlog — full of tickets we’ve already pointed and discussed — and simply do any subtasking to get clearer on the actual work we’ll be doing. After each ticket we review and bring into the sprint, we check whether the team feels we can take on more. By the end, we have a sprint full of fully subtasked stories we thoroughly understand, and that we’re confident we can deliver within two weeks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Sprint review&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Review the sprint’s work, celebrate achievements, and note what new tasks came out of this sprint.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While we already had a retro in which we talked vaguely about the successes and challenges of the sprint, we didn’t evaluate the work in terms of our team’s product prioritization.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In a 30-minute sprint review, we demo the features completed, and ask ourselves some basic questions:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;em&gt;What work did we complete?&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Is there anything we need to extend or add to what we’ve done?&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Did we discover any tech debt?&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Are we on track to meet our longer-term goals?&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This allows us to regroup and reprioritize work accordingly for the next sprint, which begins the following day.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Retro&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Bring team celebrations and concerns to the table; arrive at an action item to implement in order to improve team process.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In previous retros, we all jotted down our notes and talked a little bit about the many things that had come up during the sprint, but we didn’t discuss action items sufficiently in order to implement them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, we continue to create those notes, but then vote on a &lt;em&gt;single issue &lt;/em&gt;to spend the majority of the retro discussing and ideating to solve.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;746&#34; height=&#34;787&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format.png 746w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format-250x264.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format-700x738.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum_Retro-Format-120x127.png 120w&#34; sizes=&#34;(max-width: 746px) 100vw, 746px&#34;/&gt;&lt;figcaption&gt;&lt;em&gt;Now, our retro format takes us step-by-step from ideation at the beginning, to the refining of a single idea at the end.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By the end of the retro, we now have an implementable action item that can be tracked throughout the next few sprints. These action items allow us to actively resolve pain points and, in turn, make progress toward our broader goal of continuous self-improvement.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Stand-ups&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Establish a shared understanding of the day-to-day state of the team’s work, and make any adjustments needed to unblock any team member.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Incorporating a key question to the end of stand-ups has helped the team prioritize and make adjustments where needed: “How likely are we to complete this sprint, on a scale of 1 to 5?” All at once, each team member holds up 1 to 5 fingers to communicate their answer. If anyone holds up three or fewer fingers, we invite a deeper discussion. This helps us catch and swarm on problems early, even if only one person has noticed them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Recommendations&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With simple adjustments to our Agile process, we found a meaningful change in our working rhythm. If you’re thinking about revamping your team’s Agile process, you can give these steps a try:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;1. Try out a system holistically before making adjustments. &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Agile systems are designed with a lot of intention. Honoring all of the different parts will allow you to experience the originally intended benefits, before fine-tuning the nuances to your specific use case.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;2. Ask the “stand-up question”.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Asking “How confident are we that we will finish this sprint?” gives team members the opportunity to voice their concerns and offer potential solutions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;3. Focus on a single issue in retros.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Allow team members to vote on one or two issues to discuss at length, so there’s time and space to brainstorm actionable solutions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;4. Plan sprints you can finish, and commit to finishing them.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Create multiple decision points during the sprint planning process where team members can decline work. Planning accurately sized sprints and committing to finishing them will help teams run like a well-oiled machine.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;These changes allowed our team to finally experience the great feeling of actually finishing a sprint and celebrating what we’ve accomplished, as well as giving us increased confidence when communicating our deliverables to stakeholders. We also found expanded opportunities to learn and collaborate, as backend and frontend engineers &lt;a href=&#34;https://engineering.atspotify.com/2021/03/23/why-you-should-pair-with-non-engineers/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;became more T-shaped&lt;/a&gt; to finish the sprint’s work in time. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Additionally, as we implemented these changes, the average time we took to complete a work item dropped from 8.1 days to just 3.9 days, and we were able to increase our product load from one product to three products, tripling our monthly active users (MAU) without any change in the number of engineers on our team. These quantitative improvements aligned with our impression that, with the help of our improved process, we were working with greater efficiency.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My team’s practical work of recommitting to the principles behind our Agile practices speaks to a larger theme here at Spotify: finding the right level of alignment to help navigate the flexibility of autonomy. By increasing the structure in our team processes (through adoption of Scrum, in our case), we found enhanced clarity in our work, which allowed us to ensure we always felt aligned towards our shared goals. Ultimately, we finished our process upgrade with an increased sense of pride, direction, and responsibility for our success.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Many thanks are in order to our Agile coach, Matthieu Cornillon, for guiding us through every step of this process! And of course to my teammates: Isaac Ezer, Joshua Freeberg, Rishabh Jain, Linda Liu, Yani Metaxas, Nithya Muralidharan, Sabrina Siu, Jim Thomson, Hui Yuan, and Veronica Yurovsky.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/05/achieving-team-purpose-and-pride-with-scrum/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/Scrum-Post_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Team purpose and pride — my team hit those high marks, but it was a long journey to get there from where we started. At Spotify, we strive for “aligned autonomy” among our teams. Meaning: we align on what it is we set out to do, but preserve flexibility to choose how we’ll achieve those goals. Le</summary>
    <author>
      <name>Published by Sophia Ciocca, Web Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Achieving Team Purpose and Pride with Scrum&#xA;</title>
    <updated>2021-05-27T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-05-27:/2021/05/27/achieving-team-purpose-and-pride-with-scrum/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;May 27, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/05/27/achieving-team-purpose-and-pride-with-scrum/&#34; title=&#34;Achieving Team Purpose and Pride with Scrum&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/Scrum-Post_Header.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/Scrum-Post_Header.png 2105w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/Scrum-Post_Header-250x126.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/Scrum-Post_Header-700x351.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/Scrum-Post_Header-768x386.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/Scrum-Post_Header-1536x771.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/Scrum-Post_Header-2048x1028.png 2048w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/Scrum-Post_Header-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/05/Scrum-Post_Header.png&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;Team purpose and pride — my team hit those high marks, but it was a long journey to get there from where we started.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify, we strive for “aligned autonomy” among our teams. Meaning: we align on what it is we set out to do, but preserve flexibility to choose how we’ll achieve those goals. Letting teams adjust their processes to work for them promises many benefits (innovation, lower overhead, team happiness, speed, etc.), but it takes intentional team effort to make these adjustments.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While this international effort towards aligned autonomy has shown dazzling success and efficiency across the company, my team was struggling to make it work, finding ourselves with a process that wasn’t working for us. This is the story of how we changed that.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Our problem&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our squad had long been following a process comprising bits and pieces from the &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://scrumguides.org/scrum-guide.html&#34; target=&#34;_blank&#34;&gt;Scrum&lt;/a&gt; framework, an agile methodology developed in the 1990s by Ken Schwaber and Jeff Sutherland. However, we hadn’t connected the Scrum practices we were using — like stand-ups, two-week sprints, and retros — to the principles behind them, and we hadn’t woven them together cohesively as a system. As a result, we found ourselves with a surprising lack of structure and clarity: our meetings often felt purposeless, we never finished our sprints, and our product manager had a difficult time knowing what could reasonably be expected to be delivered at any given time. We, as engineers, also had little sense of how our day-to-day work fit into a larger quarterly picture, or how close our team was to achieving its goals. This left many of us with a gnawing feeling that our team rhythm could be better, though we weren’t quite sure how to get there.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The goals we ultimately wanted our process to achieve were:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Continuous improvement: &lt;/strong&gt;We wanted to iterate better — to easily and fluidly understand our work and find opportunities where we could improve.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;&lt;strong&gt;Shared understanding and transparency: &lt;/strong&gt;We wanted everyone on the team to know at any given time what work was happening, and what it entailed.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;3&#34;&gt;&lt;li&gt;&lt;strong&gt;Confidence: &lt;/strong&gt;We wanted to be able to more confidently plan our long-term trajectory and communicate with stakeholders about what they could expect.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Our approach&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To help us reach our goals, we sought the help of a Spotify Agile coach, who first guided us through an assessment of our existing ways of working. Since our team generally liked the Scrum framework but wasn’t using it holistically, our Agile coach helped us dig deeper into how the Scrum elements work together as a whole. Each piece has a specific role to play and interacts with each other piece. Ultimately, we unanimously agreed to adopt Scrum more or less “by the book”: that is to say, following the entire framework laid out in the Scrum Guide, rather than just disconnected bits of it. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Backlog refinement&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Create a shared understanding of each ticket, as well as how “large” it is, so that the PM can prioritize accordingly.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Before these process changes, we were itching for a succinct way to size our stories; sometimes stories would get pointed during a planning meeting, but more often than not, we were bringing many unsized stories into a sprint. This meant that we had virtually no gauge of how much work we were bringing in or committing to.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With the help of our coach, we began holding a weekly backlog refinement meeting. We alternate each week between “coarse refinement” — in which we hone in on tickets, ask questions, and find collective understanding — and “fine refinement”, in which we actually &lt;em&gt;point &lt;/em&gt;those tickets.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This system ensures that everyone has an opportunity to ask questions and shares a basic understanding of every ticket. We all know how much work we are committing to when we begin a sprint, and it also allows us to compare, sprint by sprint, how many points we are finishing as a team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Sprint planning&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Create a sprint full of stories ready to be picked up, and which we feel confident we can deliver on time.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Previously, our sprint planning process didn’t allow for us to share a collective grasp of each of the tickets in the backlog before our sprint planning ceremony, so we spent most of the two hours reading about the tickets and trying to arrive at an agreement about which ones felt important to bring in.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, because all the tickets are pointed and prioritized in the backlog ahead of time, the process is very simple: we go down the backlog — full of tickets we’ve already pointed and discussed — and simply do any subtasking to get clearer on the actual work we’ll be doing. After each ticket we review and bring into the sprint, we check whether the team feels we can take on more. By the end, we have a sprint full of fully subtasked stories we thoroughly understand, and that we’re confident we can deliver within two weeks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Sprint review&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Review the sprint’s work, celebrate achievements, and note what new tasks came out of this sprint.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While we already had a retro in which we talked vaguely about the successes and challenges of the sprint, we didn’t evaluate the work in terms of our team’s product prioritization.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In a 30-minute sprint review, we demo the features completed, and ask ourselves some basic questions:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;em&gt;What work did we complete?&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Is there anything we need to extend or add to what we’ve done?&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Did we discover any tech debt?&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Are we on track to meet our longer-term goals?&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This allows us to regroup and reprioritize work accordingly for the next sprint, which begins the following day.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Retro&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Bring team celebrations and concerns to the table; arrive at an action item to implement in order to improve team process.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In previous retros, we all jotted down our notes and talked a little bit about the many things that had come up during the sprint, but we didn’t discuss action items sufficiently in order to implement them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, we continue to create those notes, but then vote on a &lt;em&gt;single issue &lt;/em&gt;to spend the majority of the retro discussing and ideating to solve.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;746&#34; height=&#34;787&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/Scrum_Retro-Format.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/Scrum_Retro-Format.png 746w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/Scrum_Retro-Format-250x264.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/Scrum_Retro-Format-700x738.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/Scrum_Retro-Format-120x127.png 120w&#34; sizes=&#34;(max-width: 746px) 100vw, 746px&#34;/&gt;&lt;figcaption&gt;&lt;em&gt;Now, our retro format takes us step-by-step from ideation at the beginning, to the refining of a single idea at the end.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By the end of the retro, we now have an implementable action item that can be tracked throughout the next few sprints. These action items allow us to actively resolve pain points and, in turn, make progress toward our broader goal of continuous self-improvement.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Stand-ups&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Goal: Establish a shared understanding of the day-to-day state of the team’s work, and make any adjustments needed to unblock any team member.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Incorporating a key question to the end of stand-ups has helped the team prioritize and make adjustments where needed: “How likely are we to complete this sprint, on a scale of 1 to 5?” All at once, each team member holds up 1 to 5 fingers to communicate their answer. If anyone holds up three or fewer fingers, we invite a deeper discussion. This helps us catch and swarm on problems early, even if only one person has noticed them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Recommendations&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With simple adjustments to our Agile process, we found a meaningful change in our working rhythm. If you’re thinking about revamping your team’s Agile process, you can give these steps a try:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;1. Try out a system holistically before making adjustments. &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Agile systems are designed with a lot of intention. Honoring all of the different parts will allow you to experience the originally intended benefits, before fine-tuning the nuances to your specific use case.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;2. Ask the “stand-up question”.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Asking “How confident are we that we will finish this sprint?” gives team members the opportunity to voice their concerns and offer potential solutions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;3. Focus on a single issue in retros.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Allow team members to vote on one or two issues to discuss at length, so there’s time and space to brainstorm actionable solutions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;4. Plan sprints you can finish, and commit to finishing them.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Create multiple decision points during the sprint planning process where team members can decline work. Planning accurately sized sprints and committing to finishing them will help teams run like a well-oiled machine.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;These changes allowed our team to finally experience the great feeling of actually finishing a sprint and celebrating what we’ve accomplished, as well as giving us increased confidence when communicating our deliverables to stakeholders. We also found expanded opportunities to learn and collaborate, as backend and frontend engineers &lt;a href=&#34;https://engineering.atspotify.com/2021/03/23/why-you-should-pair-with-non-engineers/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;became more T-shaped&lt;/a&gt; to finish the sprint’s work in time. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Additionally, as we implemented these changes, the average time we took to complete a work item dropped from 8.1 days to just 3.9 days, and we were able to increase our product load from one product to three products, tripling our monthly active users (MAU) without any change in the number of engineers on our team. These quantitative improvements aligned with our impression that, with the help of our improved process, we were working with greater efficiency.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My team’s practical work of recommitting to the principles behind our Agile practices speaks to a larger theme here at Spotify: finding the right level of alignment to help navigate the flexibility of autonomy. By increasing the structure in our team processes (through adoption of Scrum, in our case), we found enhanced clarity in our work, which allowed us to ensure we always felt aligned towards our shared goals. Ultimately, we finished our process upgrade with an increased sense of pride, direction, and responsibility for our success.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Many thanks are in order to our Agile coach, Matthieu Cornillon, for guiding us through every step of this process! And of course to my teammates: Isaac Ezer, Joshua Freeberg, Rishabh Jain, Linda Liu, Yani Metaxas, Nithya Muralidharan, Sabrina Siu, Jim Thomson, Hui Yuan, and Veronica Yurovsky.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/05/27/achieving-team-purpose-and-pride-with-scrum/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/Scrum-Post_Header.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Team purpose and pride — my team hit those high marks, but it was a long journey to get there from where we started. At Spotify, we strive for “aligned autonomy” among our teams. Meaning: we align on what it is we set out to do, but preserve flexibility to choose how we’ll achieve those goals. Le</summary>
    <author>
      <name>Published by Sophia Ciocca, Web Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            A Product Story: The Lessons of Backstage and Spotify’s Autonomous Culture&#xA;</title>
    <updated>2021-05-18T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-05-18:/2021/05/a-product-story-the-lessons-of-backstage-and-spotifys-autonomous-culture/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;May 18, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/05/a-product-story-the-lessons-of-backstage-and-spotifys-autonomous-culture/&#34; title=&#34;A Product Story: The Lessons of Backstage and Spotify’s Autonomous Culture&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/a-product-story-backstage-1.gif&#34; alt=&#34;&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt; In episode 08 of our podcast series “&lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify: A Product Story&lt;/a&gt;”, we share stories and lessons from building and open sourcing &lt;a href=&#34;https://engineering.atspotify.com/2021/03/16/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt;, our homegrown developer portal. Hear why a developer-friendly, market-based platform like Backstage could only have been developed at Spotify (where autonomy is prized, not top-down mandates) and why that ends up making Backstage such a flexible fit for other companies, too. &lt;a href=&#34;https://open.spotify.com/episode/7iuQ3ew1Wwpuiq6LbBKzCl&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Listen to the episode now&lt;/a&gt; and get all our hard-earned lessons in entertaining podcast form — or read on for episode highlights and to learn more about this critical time in Spotify’s growth.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How it started: “Like a cold shower”&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The story begins five years ago when Spotify had a problem: we were growing fast. Really, really fast. This should be a great problem to have, except that instead of speeding us up, adding new hires was actually slowing us down. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As Director of Engineering Pia Nilsson explains in the podcast, one of the metrics Spotify’s Platform team used to measure productivity was onboarding time: how long did it take for a new engineer to merge their tenth pull request at Spotify? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The answer was not good — over 60 days. That is, from the day an engineer walked through Spotify’s doors, it would be two more months before they were able to contribute code in the form of their tenth pull request. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But the number alone doesn’t capture the whole feeling. Gustav Söderström, Spotify’s Chief R&amp;amp;D Officer and the podcast’s host, asks Pia if she remembers what it was like seeing that “60 days” metric for the first time:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Gustav&lt;/strong&gt;: Was it like, “Maybe that’s OK”? Or was it like, “That seems super long”?&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Pia&lt;/strong&gt;: Having spent 15 years as an engineer at other companies, it was like a cold shower.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Brrr. So the first thing Pia’s team had to do was figure out what was putting the chill on new hires. Why did productivity keep dropping as the headcount kept rising?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Engineers are users, too&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When it comes to their own employees, companies will often skip doing user research — after all, why ask when you can just dictate? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But the Platform team at Spotify sees Spotify’s developers as their customers. Their priorities are our priorities. Their pain points are our problems to solve. So, to find out what was holding back our engineers, the first thing to do was ask our engineers. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;According to Pia, two issues emerged as common causes for declining productivity:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Context switching&lt;/strong&gt;: “People are interrupted constantly … New joiners had to tap someone on the shoulder because very seldom was there any documentation.” &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;&lt;strong&gt;Discoverability&lt;/strong&gt;: “People couldn’t find things. It was simple as that. It took forever to just find the right service. There were so many &lt;em&gt;almost&lt;/em&gt; duplications — not pure duplications — because people are very smart and they would recognize that.” &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There would be 15 different versions of the same service, each speaking to the slightly different needs of different teams. And if a new team needed a similar service? Instead of sorting through all those versions … they would just build yet another version of the same service for themselves. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In a way, this is what worked for Spotify before: small, autonomous teams building fast. But that basic agile approach was reaching its limits. More teams meant more confusion, as evidenced by our onboarding metric. New hires didn’t even know where to begin — let alone how to decipher our “spaghetti” codebase — without tapping another engineer on the shoulder. It was a way of working that was becoming so common, we gave it a name — “&lt;a href=&#34;https://engineering.atspotify.com/2020/08/17/how-we-use-golden-paths-to-solve-fragmentation-in-our-software-ecosystem/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;rumour-driven development&lt;/a&gt;”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And as Spotify continued to grow, the problem only got worse.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Speed, scale, autonomy… pick two?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that the problem was clear, the solution was also obvious: centralization. But just as obvious was the fact that a centralized team will always be much slower than many small teams. Would Spotify have to trade speed for scale?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Turns out, the question was moot. Tasked with restoring productivity, the Platform team realized that a top-down, centralized approach wouldn’t work at Spotify for another, much more fundamental reason: it just wasn’t part of Spotify’s DNA. As Pia explains in the podcast:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;“So we basically knew we couldn’t build a centralized solution. It would never work. No one would use it. And no one really believed in it even among ourselves. We had joined Spotify for the reason that we all loved autonomy. We thought that was brilliant to set people free. So the culture really spoke to us there: “Well, you don’t have the option of building something central and mandating everyone.”&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;What made Spotify engineering great was now slowing it down: too much autonomy. But that culture of autonomy would also lead to an even better solution than a simplistic tech requirements list or top-down mandates. As Spotify’s VP of Engineering, Tyson Singer, says, for Backstage to succeed with our engineers, it had to be the better solution, not the only solution:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“For the most part, if we go out and we tell people to do X, they just shrug, and they do wherever they want. So we really do have to sell to them. We have to basically make their lives better with everything that we do. And so [our culture] really did inform our approach, if we wanted to take control of this fragmentation problem in our tech ecosystem.”&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify wanted something that could give us everything: speed, scale — and a new idea at Spotify — aligned autonomy. And that’s how Backstage was conceived and born.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How it’s going: Not just adopted, but embraced&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So if we can’t make anyone use it, how do we know it’s working? Every day, we see the 280 engineering teams inside Spotify use Backstage to manage over 2,000 backend services, 300 websites, 4,000 data pipelines, and 200 mobile features. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Even more impressive are the contribution numbers. More than 200 engineers inside Spotify have contributed features to Backstage. We now have 120+ plugins developed by 50+ teams. And 80% of contributions came from Spotifiers outside the Backstage core team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;People can find what they need — without constantly interrupting their fellow developers. Any Spotifier — not just engineers, but also compliance and security team members — can easily discover all the software in our ecosystem, see who owns it, and access technical documentation in a centralized location. In an environment optimized for speed and as decentralized as Spotify, having this information so easily accessible makes all the difference. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For a company growing as fast as ours, this is a game-changing improvement to both productivity and developer happiness — which we believe go hand in hand. And we know the open source version will be able to transform other tech organizations as well. As a product, Backstage is what happens when you treat your developers with the same thoughtfulness as your users. According to our company-wide surveys, 80% of our internal users are satisfied with Backstage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Want to know what happens next? How much were we able to lower that bone-chilling “60 days to tenth pull request” onboarding metric? How did our homegrown developer portal go on to become Spotify’s biggest open source project? And the significance of this humble GIF?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;a href=&#34;https://backstage.io/&#34;&gt;&lt;img loading=&#34;lazy&#34; width=&#34;350&#34; height=&#34;350&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/backstage-service-catalog-icon-4.gif&#34; alt=&#34;&#34;/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Listen to episode 08 — “&lt;a href=&#34;https://open.spotify.com/episode/7iuQ3ew1Wwpuiq6LbBKzCl&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;When to build vs buy — and when to open source&lt;/a&gt;” — to get the whole story. You’ll hear from Gustav, Tyson, and Pia, as well as Jeremiah Lowin, CEO of Prefect.io, a company that runs on what is called an “open core” model. Now streaming on Spotify — or wherever you listen to podcasts!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Want to hear more about how Spotify was built, straight from the people who built it? The podcast series “Spotify: A Product Story” shares the stories behind the most important product strategy lessons we’ve learned at Spotify, all told in the words of the people who were actually there. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In each episode, Spotify’s Chief R&amp;amp;D Officer, Gustav Söderström, is joined by Spotify insiders and special guests, from &lt;a href=&#34;https://open.spotify.com/episode/5mEUQUycl3Wgx8hfWjCexD&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Metallica’s Lars Ulrich and Napster’s Sean Parker&lt;/a&gt;, to &lt;a href=&#34;https://open.spotify.com/episode/0T3nb0PcpvqA4o1BbbQWpp&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ML legend Andrew Ng&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;How did P2P networking and local caching create a feeling of magic in the very first Spotify app? How did we go from stashing servers in a cupboard to running &lt;a href=&#34;https://engineering.atspotify.com/2021/02/11/how-spotify-optimized-the-largest-dataflow-job-ever-for-wrapped-2020/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Google Cloud’s largest Dataflow jobs ever&lt;/a&gt;? What does it mean to build truly ML-first products? And what’s the next frontier for creators and audio formats? &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34;&gt;You can find all the podcast episodes here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/05/a-product-story-the-lessons-of-backstage-and-spotifys-autonomous-culture/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/a-product-story-backstage-1.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">TLDR; In episode 08 of our podcast series “Spotify: A Product Story”, we share stories and lessons from building and open sourcing Backstage, our homegrown developer portal. Hear why a developer-friendly, market-based platform like Backstage could only have been developed at Spotify (where autonomy</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            A Product Story: The Lessons of Backstage and Spotify’s Autonomous Culture&#xA;</title>
    <updated>2021-05-18T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-05-18:/a-product-story-the-lessons-of-backstage-and-spotifys-autonomous-culture/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;May 18, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/a-product-story-the-lessons-of-backstage-and-spotifys-autonomous-culture/&#34; title=&#34;A Product Story: The Lessons of Backstage and Spotify’s Autonomous Culture&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/a-product-story-backstage-1.gif&#34; alt=&#34;&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt; In episode 08 of our podcast series “&lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify: A Product Story&lt;/a&gt;”, we share stories and lessons from building and open sourcing &lt;a href=&#34;https://engineering.atspotify.com/2021/03/16/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt;, our homegrown developer portal. Hear why a developer-friendly, market-based platform like Backstage could only have been developed at Spotify (where autonomy is prized, not top-down mandates) and why that ends up making Backstage such a flexible fit for other companies, too. &lt;a href=&#34;https://open.spotify.com/episode/7iuQ3ew1Wwpuiq6LbBKzCl&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Listen to the episode now&lt;/a&gt; and get all our hard-earned lessons in entertaining podcast form — or read on for episode highlights and to learn more about this critical time in Spotify’s growth.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How it started: “Like a cold shower”&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The story begins five years ago when Spotify had a problem: we were growing fast. Really, really fast. This should be a great problem to have, except that instead of speeding us up, adding new hires was actually slowing us down. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As Director of Engineering Pia Nilsson explains in the podcast, one of the metrics Spotify’s Platform team used to measure productivity was onboarding time: how long did it take for a new engineer to merge their tenth pull request at Spotify? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The answer was not good — over 60 days. That is, from the day an engineer walked through Spotify’s doors, it would be two more months before they were able to contribute code in the form of their tenth pull request. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But the number alone doesn’t capture the whole feeling. Gustav Söderström, Spotify’s Chief R&amp;amp;D Officer and the podcast’s host, asks Pia if she remembers what it was like seeing that “60 days” metric for the first time:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Gustav&lt;/strong&gt;: Was it like, “Maybe that’s OK”? Or was it like, “That seems super long”?&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Pia&lt;/strong&gt;: Having spent 15 years as an engineer at other companies, it was like a cold shower.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Brrr. So the first thing Pia’s team had to do was figure out what was putting the chill on new hires. Why did productivity keep dropping as the headcount kept rising?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Engineers are users, too&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When it comes to their own employees, companies will often skip doing user research — after all, why ask when you can just dictate? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But the Platform team at Spotify sees Spotify’s developers as their customers. Their priorities are our priorities. Their pain points are our problems to solve. So, to find out what was holding back our engineers, the first thing to do was ask our engineers. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;According to Pia, two issues emerged as common causes for declining productivity:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Context switching&lt;/strong&gt;: “People are interrupted constantly … New joiners had to tap someone on the shoulder because very seldom was there any documentation.” &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;&lt;strong&gt;Discoverability&lt;/strong&gt;: “People couldn’t find things. It was simple as that. It took forever to just find the right service. There were so many &lt;em&gt;almost&lt;/em&gt; duplications — not pure duplications — because people are very smart and they would recognize that.” &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There would be 15 different versions of the same service, each speaking to the slightly different needs of different teams. And if a new team needed a similar service? Instead of sorting through all those versions … they would just build yet another version of the same service for themselves. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In a way, this is what worked for Spotify before: small, autonomous teams building fast. But that basic agile approach was reaching its limits. More teams meant more confusion, as evidenced by our onboarding metric. New hires didn’t even know where to begin — let alone how to decipher our “spaghetti” codebase — without tapping another engineer on the shoulder. It was a way of working that was becoming so common, we gave it a name — “&lt;a href=&#34;https://engineering.atspotify.com/2020/08/17/how-we-use-golden-paths-to-solve-fragmentation-in-our-software-ecosystem/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;rumour-driven development&lt;/a&gt;”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And as Spotify continued to grow, the problem only got worse.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Speed, scale, autonomy… pick two?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that the problem was clear, the solution was also obvious: centralization. But just as obvious was the fact that a centralized team will always be much slower than many small teams. Would Spotify have to trade speed for scale?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Turns out, the question was moot. Tasked with restoring productivity, the Platform team realized that a top-down, centralized approach wouldn’t work at Spotify for another, much more fundamental reason: it just wasn’t part of Spotify’s DNA. As Pia explains in the podcast:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;“So we basically knew we couldn’t build a centralized solution. It would never work. No one would use it. And no one really believed in it even among ourselves. We had joined Spotify for the reason that we all loved autonomy. We thought that was brilliant to set people free. So the culture really spoke to us there: “Well, you don’t have the option of building something central and mandating everyone.”&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;What made Spotify engineering great was now slowing it down: too much autonomy. But that culture of autonomy would also lead to an even better solution than a simplistic tech requirements list or top-down mandates. As Spotify’s VP of Engineering, Tyson Singer, says, for Backstage to succeed with our engineers, it had to be the better solution, not the only solution:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“For the most part, if we go out and we tell people to do X, they just shrug, and they do wherever they want. So we really do have to sell to them. We have to basically make their lives better with everything that we do. And so [our culture] really did inform our approach, if we wanted to take control of this fragmentation problem in our tech ecosystem.”&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify wanted something that could give us everything: speed, scale — and a new idea at Spotify — aligned autonomy. And that’s how Backstage was conceived and born.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How it’s going: Not just adopted, but embraced&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So if we can’t make anyone use it, how do we know it’s working? Every day, we see the 280 engineering teams inside Spotify use Backstage to manage over 2,000 backend services, 300 websites, 4,000 data pipelines, and 200 mobile features. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Even more impressive are the contribution numbers. More than 200 engineers inside Spotify have contributed features to Backstage. We now have 120+ plugins developed by 50+ teams. And 80% of contributions came from Spotifiers outside the Backstage core team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;People can find what they need — without constantly interrupting their fellow developers. Any Spotifier — not just engineers, but also compliance and security team members — can easily discover all the software in our ecosystem, see who owns it, and access technical documentation in a centralized location. In an environment optimized for speed and as decentralized as Spotify, having this information so easily accessible makes all the difference. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For a company growing as fast as ours, this is a game-changing improvement to both productivity and developer happiness — which we believe go hand in hand. And we know the open source version will be able to transform other tech organizations as well. As a product, Backstage is what happens when you treat your developers with the same thoughtfulness as your users. According to our company-wide surveys, 80% of our internal users are satisfied with Backstage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Want to know what happens next? How much were we able to lower that bone-chilling “60 days to tenth pull request” onboarding metric? How did our homegrown developer portal go on to become Spotify’s biggest open source project? And the significance of this humble GIF?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;a href=&#34;https://backstage.io/&#34;&gt;&lt;img loading=&#34;lazy&#34; width=&#34;350&#34; height=&#34;350&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/backstage-service-catalog-icon-4.gif&#34; alt=&#34;&#34;/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Listen to episode 08 — “&lt;a href=&#34;https://open.spotify.com/episode/7iuQ3ew1Wwpuiq6LbBKzCl&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;When to build vs buy — and when to open source&lt;/a&gt;” — to get the whole story. You’ll hear from Gustav, Tyson, and Pia, as well as Jeremiah Lowin, CEO of Prefect.io, a company that runs on what is called an “open core” model. Now streaming on Spotify — or wherever you listen to podcasts!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Want to hear more about how Spotify was built, straight from the people who built it? The podcast series “Spotify: A Product Story” shares the stories behind the most important product strategy lessons we’ve learned at Spotify, all told in the words of the people who were actually there. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In each episode, Spotify’s Chief R&amp;amp;D Officer, Gustav Söderström, is joined by Spotify insiders and special guests, from &lt;a href=&#34;https://open.spotify.com/episode/5mEUQUycl3Wgx8hfWjCexD&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Metallica’s Lars Ulrich and Napster’s Sean Parker&lt;/a&gt;, to &lt;a href=&#34;https://open.spotify.com/episode/0T3nb0PcpvqA4o1BbbQWpp&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ML legend Andrew Ng&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;How did P2P networking and local caching create a feeling of magic in the very first Spotify app? How did we go from stashing servers in a cupboard to running &lt;a href=&#34;https://engineering.atspotify.com/2021/02/11/how-spotify-optimized-the-largest-dataflow-job-ever-for-wrapped-2020/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Google Cloud’s largest Dataflow jobs ever&lt;/a&gt;? What does it mean to build truly ML-first products? And what’s the next frontier for creators and audio formats? &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34;&gt;You can find all the podcast episodes here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/a-product-story-the-lessons-of-backstage-and-spotifys-autonomous-culture/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/a-product-story-backstage-1.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">TLDR; In episode 08 of our podcast series “Spotify: A Product Story”, we share stories and lessons from building and open sourcing Backstage, our homegrown developer portal. Hear why a developer-friendly, market-based platform like Backstage could only have been developed at Spotify (where autonomy</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            A Product Story: The Lessons of Backstage and Spotify’s Autonomous Culture&#xA;</title>
    <updated>2021-05-18T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-05-18:/a-product-story-the-lessons-of-backstage-and-spotifys-autonomous-culture/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;May 18, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/a-product-story-the-lessons-of-backstage-and-spotifys-autonomous-culture/&#34; title=&#34;A Product Story: The Lessons of Backstage and Spotify’s Autonomous Culture&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/a-product-story-backstage-1.gif&#34; alt=&#34;&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt; In episode 08 of our podcast series “&lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify: A Product Story&lt;/a&gt;”, we share stories and lessons from building and open sourcing &lt;a href=&#34;https://engineering.atspotify.com/2021/03/16/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt;, our homegrown developer portal. Hear why a developer-friendly, market-based platform like Backstage could only have been developed at Spotify (where autonomy is prized, not top-down mandates) and why that ends up making Backstage such a flexible fit for other companies, too. &lt;a href=&#34;https://open.spotify.com/episode/7iuQ3ew1Wwpuiq6LbBKzCl&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Listen to the episode now&lt;/a&gt; and get all our hard-earned lessons in entertaining podcast form — or read on for episode highlights and to learn more about this critical time in Spotify’s growth.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How it started: “Like a cold shower”&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The story begins five years ago when Spotify had a problem: we were growing fast. Really, really fast. This should be a great problem to have, except that instead of speeding us up, adding new hires was actually slowing us down. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As Director of Engineering Pia Nilsson explains in the podcast, one of the metrics Spotify’s Platform team used to measure productivity was onboarding time: how long did it take for a new engineer to merge their tenth pull request at Spotify? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The answer was not good — over 60 days. That is, from the day an engineer walked through Spotify’s doors, it would be two more months before they were able to contribute code in the form of their tenth pull request. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But the number alone doesn’t capture the whole feeling. Gustav Söderström, Spotify’s Chief R&amp;amp;D Officer and the podcast’s host, asks Pia if she remembers what it was like seeing that “60 days” metric for the first time:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Gustav&lt;/strong&gt;: Was it like, “Maybe that’s OK”? Or was it like, “That seems super long”?&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Pia&lt;/strong&gt;: Having spent 15 years as an engineer at other companies, it was like a cold shower.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Brrr. So the first thing Pia’s team had to do was figure out what was putting the chill on new hires. Why did productivity keep dropping as the headcount kept rising?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Engineers are users, too&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When it comes to their own employees, companies will often skip doing user research — after all, why ask when you can just dictate? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But the Platform team at Spotify sees Spotify’s developers as their customers. Their priorities are our priorities. Their pain points are our problems to solve. So, to find out what was holding back our engineers, the first thing to do was ask our engineers. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;According to Pia, two issues emerged as common causes for declining productivity:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Context switching&lt;/strong&gt;: “People are interrupted constantly … New joiners had to tap someone on the shoulder because very seldom was there any documentation.” &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;&lt;strong&gt;Discoverability&lt;/strong&gt;: “People couldn’t find things. It was simple as that. It took forever to just find the right service. There were so many &lt;em&gt;almost&lt;/em&gt; duplications — not pure duplications — because people are very smart and they would recognize that.” &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There would be 15 different versions of the same service, each speaking to the slightly different needs of different teams. And if a new team needed a similar service? Instead of sorting through all those versions … they would just build yet another version of the same service for themselves. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In a way, this is what worked for Spotify before: small, autonomous teams building fast. But that basic agile approach was reaching its limits. More teams meant more confusion, as evidenced by our onboarding metric. New hires didn’t even know where to begin — let alone how to decipher our “spaghetti” codebase — without tapping another engineer on the shoulder. It was a way of working that was becoming so common, we gave it a name — “&lt;a href=&#34;https://engineering.atspotify.com/2020/08/17/how-we-use-golden-paths-to-solve-fragmentation-in-our-software-ecosystem/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;rumour-driven development&lt;/a&gt;”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And as Spotify continued to grow, the problem only got worse.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Speed, scale, autonomy… pick two?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that the problem was clear, the solution was also obvious: centralization. But just as obvious was the fact that a centralized team will always be much slower than many small teams. Would Spotify have to trade speed for scale?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Turns out, the question was moot. Tasked with restoring productivity, the Platform team realized that a top-down, centralized approach wouldn’t work at Spotify for another, much more fundamental reason: it just wasn’t part of Spotify’s DNA. As Pia explains in the podcast:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;“So we basically knew we couldn’t build a centralized solution. It would never work. No one would use it. And no one really believed in it even among ourselves. We had joined Spotify for the reason that we all loved autonomy. We thought that was brilliant to set people free. So the culture really spoke to us there: “Well, you don’t have the option of building something central and mandating everyone.”&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;What made Spotify engineering great was now slowing it down: too much autonomy. But that culture of autonomy would also lead to an even better solution than a simplistic tech requirements list or top-down mandates. As Spotify’s VP of Engineering, Tyson Singer, says, for Backstage to succeed with our engineers, it had to be the better solution, not the only solution:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“For the most part, if we go out and we tell people to do X, they just shrug, and they do wherever they want. So we really do have to sell to them. We have to basically make their lives better with everything that we do. And so [our culture] really did inform our approach, if we wanted to take control of this fragmentation problem in our tech ecosystem.”&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify wanted something that could give us everything: speed, scale — and a new idea at Spotify — aligned autonomy. And that’s how Backstage was conceived and born.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How it’s going: Not just adopted, but embraced&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So if we can’t make anyone use it, how do we know it’s working? Every day, we see the 280 engineering teams inside Spotify use Backstage to manage over 2,000 backend services, 300 websites, 4,000 data pipelines, and 200 mobile features. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Even more impressive are the contribution numbers. More than 200 engineers inside Spotify have contributed features to Backstage. We now have 120+ plugins developed by 50+ teams. And 80% of contributions came from Spotifiers outside the Backstage core team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;People can find what they need — without constantly interrupting their fellow developers. Any Spotifier — not just engineers, but also compliance and security team members — can easily discover all the software in our ecosystem, see who owns it, and access technical documentation in a centralized location. In an environment optimized for speed and as decentralized as Spotify, having this information so easily accessible makes all the difference. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For a company growing as fast as ours, this is a game-changing improvement to both productivity and developer happiness — which we believe go hand in hand. And we know the open source version will be able to transform other tech organizations as well. As a product, Backstage is what happens when you treat your developers with the same thoughtfulness as your users. According to our company-wide surveys, 80% of our internal users are satisfied with Backstage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Want to know what happens next? How much were we able to lower that bone-chilling “60 days to tenth pull request” onboarding metric? How did our homegrown developer portal go on to become Spotify’s biggest open source project? And the significance of this humble GIF?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;a href=&#34;https://backstage.io/&#34;&gt;&lt;img loading=&#34;lazy&#34; width=&#34;350&#34; height=&#34;350&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/backstage-service-catalog-icon-4.gif&#34; alt=&#34;&#34;/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Listen to episode 08 — “&lt;a href=&#34;https://open.spotify.com/episode/7iuQ3ew1Wwpuiq6LbBKzCl&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;When to build vs buy — and when to open source&lt;/a&gt;” — to get the whole story. You’ll hear from Gustav, Tyson, and Pia, as well as Jeremiah Lowin, CEO of Prefect.io, a company that runs on what is called an “open core” model. Now streaming on Spotify — or wherever you listen to podcasts!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Want to hear more about how Spotify was built, straight from the people who built it? The podcast series “Spotify: A Product Story” shares the stories behind the most important product strategy lessons we’ve learned at Spotify, all told in the words of the people who were actually there. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In each episode, Spotify’s Chief R&amp;amp;D Officer, Gustav Söderström, is joined by Spotify insiders and special guests, from &lt;a href=&#34;https://open.spotify.com/episode/5mEUQUycl3Wgx8hfWjCexD&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Metallica’s Lars Ulrich and Napster’s Sean Parker&lt;/a&gt;, to &lt;a href=&#34;https://open.spotify.com/episode/0T3nb0PcpvqA4o1BbbQWpp&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ML legend Andrew Ng&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;How did P2P networking and local caching create a feeling of magic in the very first Spotify app? How did we go from stashing servers in a cupboard to running &lt;a href=&#34;https://engineering.atspotify.com/2021/02/11/how-spotify-optimized-the-largest-dataflow-job-ever-for-wrapped-2020/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Google Cloud’s largest Dataflow jobs ever&lt;/a&gt;? What does it mean to build truly ML-first products? And what’s the next frontier for creators and audio formats? &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34;&gt;You can find all the podcast episodes here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;, &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/a-product-story-the-lessons-of-backstage-and-spotifys-autonomous-culture/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/a-product-story-backstage-1.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">TLDR; In episode 08 of our podcast series “Spotify: A Product Story”, we share stories and lessons from building and open sourcing Backstage, our homegrown developer portal. Hear why a developer-friendly, market-based platform like Backstage could only have been developed at Spotify (where autonomy</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            A Product Story: The Lessons of Backstage and Spotify’s Autonomous Culture&#xA;</title>
    <updated>2021-05-18T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-05-18:/2021/05/18/a-product-story-the-lessons-of-backstage-and-spotifys-autonomous-culture/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;May 18, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/05/18/a-product-story-the-lessons-of-backstage-and-spotifys-autonomous-culture/&#34; title=&#34;A Product Story: The Lessons of Backstage and Spotify’s Autonomous Culture&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/a-product-story-backstage-1.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/05/a-product-story-backstage-1.gif&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt; In episode 08 of our podcast series “&lt;a href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify: A Product Story&lt;/a&gt;”, we share stories and lessons from building and open sourcing &lt;a href=&#34;https://engineering.atspotify.com/2021/03/16/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt;, our homegrown developer portal. Hear why a developer-friendly, market-based platform like Backstage could only have been developed at Spotify (where autonomy is prized, not top-down mandates) and why that ends up making Backstage such a flexible fit for other companies, too. &lt;a href=&#34;https://open.spotify.com/episode/7iuQ3ew1Wwpuiq6LbBKzCl&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Listen to the episode now&lt;/a&gt; and get all our hard-earned lessons in entertaining podcast form — or read on for episode highlights and to learn more about this critical time in Spotify’s growth.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How it started: “Like a cold shower”&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The story begins five years ago when Spotify had a problem: we were growing fast. Really, really fast. This should be a great problem to have, except that instead of speeding us up, adding new hires was actually slowing us down. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As Director of Engineering Pia Nilsson explains in the podcast, one of the metrics Spotify’s Platform team used to measure productivity was onboarding time: how long did it take for a new engineer to merge their tenth pull request at Spotify? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The answer was not good — over 60 days. That is, from the day an engineer walked through Spotify’s doors, it would be two more months before they were able to contribute code in the form of their tenth pull request. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But the number alone doesn’t capture the whole feeling. Gustav Söderström, Spotify’s Chief R&amp;amp;D Officer and the podcast’s host, asks Pia if she remembers what it was like seeing that “60 days” metric for the first time:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Gustav&lt;/strong&gt;: Was it like, “Maybe that’s OK”? Or was it like, “That seems super long”?&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Pia&lt;/strong&gt;: Having spent 15 years as an engineer at other companies, it was like a cold shower.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Brrr. So the first thing Pia’s team had to do was figure out what was putting the chill on new hires. Why did productivity keep dropping as the headcount kept rising?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Engineers are users, too&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When it comes to their own employees, companies will often skip doing user research — after all, why ask when you can just dictate? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But the Platform team at Spotify sees Spotify’s developers as their customers. Their priorities are our priorities. Their pain points are our problems to solve. So, to find out what was holding back our engineers, the first thing to do was ask our engineers. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;According to Pia, two issues emerged as common causes for declining productivity:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Context switching&lt;/strong&gt;: “People are interrupted constantly … New joiners had to tap someone on the shoulder because very seldom was there any documentation.” &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;&lt;strong&gt;Discoverability&lt;/strong&gt;: “People couldn’t find things. It was simple as that. It took forever to just find the right service. There were so many &lt;em&gt;almost&lt;/em&gt; duplications — not pure duplications — because people are very smart and they would recognize that.” &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There would be 15 different versions of the same service, each speaking to the slightly different needs of different teams. And if a new team needed a similar service? Instead of sorting through all those versions … they would just build yet another version of the same service for themselves. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In a way, this is what worked for Spotify before: small, autonomous teams building fast. But that basic agile approach was reaching its limits. More teams meant more confusion, as evidenced by our onboarding metric. New hires didn’t even know where to begin — let alone how to decipher our “spaghetti” codebase — without tapping another engineer on the shoulder. It was a way of working that was becoming so common, we gave it a name — “&lt;a href=&#34;https://engineering.atspotify.com/2020/08/17/how-we-use-golden-paths-to-solve-fragmentation-in-our-software-ecosystem/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;rumour-driven development&lt;/a&gt;”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And as Spotify continued to grow, the problem only got worse.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Speed, scale, autonomy… pick two?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that the problem was clear, the solution was also obvious: centralization. But just as obvious was the fact that a centralized team will always be much slower than many small teams. Would Spotify have to trade speed for scale?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Turns out, the question was moot. Tasked with restoring productivity, the Platform team realized that a top-down, centralized approach wouldn’t work at Spotify for another, much more fundamental reason: it just wasn’t part of Spotify’s DNA. As Pia explains in the podcast:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;“So we basically knew we couldn’t build a centralized solution. It would never work. No one would use it. And no one really believed in it even among ourselves. We had joined Spotify for the reason that we all loved autonomy. We thought that was brilliant to set people free. So the culture really spoke to us there: “Well, you don’t have the option of building something central and mandating everyone.”&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;What made Spotify engineering great was now slowing it down: too much autonomy. But that culture of autonomy would also lead to an even better solution than a simplistic tech requirements list or top-down mandates. As Spotify’s VP of Engineering, Tyson Singer, says, for Backstage to succeed with our engineers, it had to be the better solution, not the only solution:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“For the most part, if we go out and we tell people to do X, they just shrug, and they do wherever they want. So we really do have to sell to them. We have to basically make their lives better with everything that we do. And so [our culture] really did inform our approach, if we wanted to take control of this fragmentation problem in our tech ecosystem.”&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify wanted something that could give us everything: speed, scale — and a new idea at Spotify — aligned autonomy. And that’s how Backstage was conceived and born.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How it’s going: Not just adopted, but embraced&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So if we can’t make anyone use it, how do we know it’s working? Every day, we see the 280 engineering teams inside Spotify use Backstage to manage over 2,000 backend services, 300 websites, 4,000 data pipelines, and 200 mobile features. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Even more impressive are the contribution numbers. More than 200 engineers inside Spotify have contributed features to Backstage. We now have 120+ plugins developed by 50+ teams. And 80% of contributions came from Spotifiers outside the Backstage core team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;People can find what they need — without constantly interrupting their fellow developers. Any Spotifier — not just engineers, but also compliance and security team members — can easily discover all the software in our ecosystem, see who owns it, and access technical documentation in a centralized location. In an environment optimized for speed and as decentralized as Spotify, having this information so easily accessible makes all the difference. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For a company growing as fast as ours, this is a game-changing improvement to both productivity and developer happiness — which we believe go hand in hand. And we know the open source version will be able to transform other tech organizations as well. As a product, Backstage is what happens when you treat your developers with the same thoughtfulness as your users. According to our company-wide surveys, 80% of our internal users are satisfied with Backstage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Want to know what happens next? How much were we able to lower that bone-chilling “60 days to tenth pull request” onboarding metric? How did our homegrown developer portal go on to become Spotify’s biggest open source project? And the significance of this humble GIF?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;a href=&#34;https://backstage.io/&#34;&gt;&lt;img loading=&#34;lazy&#34; width=&#34;350&#34; height=&#34;350&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/backstage-service-catalog-icon-4.gif&#34; alt=&#34;&#34;/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Listen to episode 08 — “&lt;a href=&#34;https://open.spotify.com/episode/7iuQ3ew1Wwpuiq6LbBKzCl&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;When to build vs buy — and when to open source&lt;/a&gt;” — to get the whole story. You’ll hear from Gustav, Tyson, and Pia, as well as Jeremiah Lowin, CEO of Prefect.io, a company that runs on what is called an “open core” model. Now streaming on Spotify — or wherever you listen to podcasts!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Want to hear more about how Spotify was built, straight from the people who built it? The podcast series “Spotify: A Product Story” shares the stories behind the most important product strategy lessons we’ve learned at Spotify, all told in the words of the people who were actually there. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In each episode, Spotify’s Chief R&amp;amp;D Officer, Gustav Söderström, is joined by Spotify insiders and special guests, from &lt;a href=&#34;https://open.spotify.com/episode/5mEUQUycl3Wgx8hfWjCexD&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Metallica’s Lars Ulrich and Napster’s Sean Parker&lt;/a&gt;, to &lt;a href=&#34;https://open.spotify.com/episode/0T3nb0PcpvqA4o1BbbQWpp&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ML legend Andrew Ng&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;How did P2P networking and local caching create a feeling of magic in the very first Spotify app? How did we go from stashing servers in a cupboard to running &lt;a href=&#34;https://engineering.atspotify.com/2021/02/11/how-spotify-optimized-the-largest-dataflow-job-ever-for-wrapped-2020/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Google Cloud’s largest Dataflow jobs ever&lt;/a&gt;? What does it mean to build truly ML-first products? And what’s the next frontier for creators and audio formats? &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34;&gt;You can find all the podcast episodes here&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/05/18/a-product-story-the-lessons-of-backstage-and-spotifys-autonomous-culture/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/a-product-story-backstage-1.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">TLDR; In episode 08 of our podcast series “Spotify: A Product Story”, we share stories and lessons from building and open sourcing Backstage, our homegrown developer portal. Hear why a developer-friendly, market-based platform like Backstage could only have been developed at Spotify (where autonomy</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Spotify Wins CNCF’s Top End User Award and Toots Own Horn About It&#xA;</title>
    <updated>2021-05-11T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-05-11:/2021/05/spotify-wins-cncfs-top-end-user-award-and-toots-own-horn-about-it/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-4585&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;May 11, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/05/spotify-wins-cncfs-top-end-user-award-and-toots-own-horn-about-it/&#34; title=&#34;Spotify Wins CNCF’s Top End User Award and Toots Own Horn About It&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-700x351.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-1536x771.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-2048x1028.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;Last week, Spotify won an award — and we’re not playing it cool. We &lt;a href=&#34;https://twitter.com/SpotifyEng/status/1389988765725245441&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;tweeted&lt;/a&gt;. We bragged &lt;a href=&#34;https://www.linkedin.com/posts/spotify_congratulations-to-everyone-in-spotify-r-activity-6797492373665394688-lrcs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;on LinkedIn&lt;/a&gt;. Our internal Slack is alive with emoji and exclamation points. We’re really very proud of this one.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The award is &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/&#34; target=&#34;_blank&#34;&gt;Cloud Native Computing Foundation&lt;/a&gt;’s Top End User Award, &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/announcements/2021/05/05/cloud-native-computing-foundation-grants-spotify-the-top-end-user-award/&#34; target=&#34;_blank&#34;&gt;announced&lt;/a&gt; at last week’s KubeCon + CloudNativeCon. Voted on by the 140+ organizations in the &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/enduser/&#34; target=&#34;_blank&#34;&gt;End User Community&lt;/a&gt;, we’re honored to receive this recognition from our peers in the CNCF — home to so many outstanding open source projects (and people!).&lt;br/&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We joined the CNCF three years ago, and we’ve come a long way with the community in a short time. The award recognizes Spotify for our adoption and evangelizing of cloud native technology (like &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.reddit.com/r/kubernetes/comments/lwb31v/were_the_engineers_rethinking_kubernetes_at/&#34; target=&#34;_blank&#34;&gt;Kubernetes&lt;/a&gt;, &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.youtube.com/watch?v=fMq3IpPE3TU&#34; target=&#34;_blank&#34;&gt;gRPC&lt;/a&gt;, and &lt;a href=&#34;https://www.youtube.com/watch?v=HfRU414cjjQ&#34;&gt;Envoy&lt;/a&gt;), our leadership in CNCF forums and meetups (&lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://community.cncf.io/stockholm/&#34; target=&#34;_blank&#34;&gt;look out for the next Stockholm one here&lt;/a&gt;), our contributions to both the code and the direction of CNCF projects (more than 27,000 contributions to 13 different projects), and our industry-leading work on &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://engineering.atspotify.com/2021/03/16/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/&#34; target=&#34;_blank&#34;&gt;Backstage&lt;/a&gt;, which is now in &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://engineering.atspotify.com/2020/09/24/cloud-native-computing-foundation-accepts-backstage-as-a-sandbox-project/&#34; target=&#34;_blank&#34;&gt;the CNCF Sandbox&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But in the end, this is a win for all of Spotify R&amp;amp;D. It’s recognition for our commitment to technical excellence across the entire company and our desire to always give back to the community. Thank you to everyone at Spotify for your contributions across the open source ecosystem. You should be proud.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You can read more about the award on the &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/announcements/2021/05/05/cloud-native-computing-foundation-grants-spotify-the-top-end-user-award/&#34; target=&#34;_blank&#34;&gt;CNCF website&lt;/a&gt;. And to learn more about what got us here, listen to our podcast series “&lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34;&gt;Spotify: A Product Story&lt;/a&gt;”. You’ll hear the stories and lessons from building Spotify, as told by the people who were there. For more on our journey to becoming cloud native, check out these episodes:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;&lt;figure&gt;&lt;figcaption&gt;Hear how we started with servers in a closet in an apartment in Stockholm, all the way to becoming one of Google Cloud’s biggest customers&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;figcaption&gt;Hear what we learned from building and open sourcing Backstage, the open platform for building developer portals, which we donated to the CNCF last year.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/05/spotify-wins-cncfs-top-end-user-award-and-toots-own-horn-about-it/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Last week, Spotify won an award — and we’re not playing it cool. We tweeted. We bragged on LinkedIn. Our internal Slack is alive with emoji and exclamation points. We’re really very proud of this one. The award is Cloud Native Computing Foundation’s Top End User Award, announced at last week’s Ku</summary>
    <author>
      <name>Published by Dave Zolotusky, Principal Engineer &amp; CNCF Technical Oversight Committee Representative</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Spotify Wins CNCF’s Top End User Award and Toots Own Horn About It&#xA;</title>
    <updated>2021-05-11T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-05-11:/spotify-wins-cncfs-top-end-user-award-and-toots-own-horn-about-it/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-4585&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;May 11, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/spotify-wins-cncfs-top-end-user-award-and-toots-own-horn-about-it/&#34; title=&#34;Spotify Wins CNCF’s Top End User Award and Toots Own Horn About It&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-700x351.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-1536x771.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-2048x1028.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;Last week, Spotify won an award — and we’re not playing it cool. We &lt;a href=&#34;https://twitter.com/SpotifyEng/status/1389988765725245441&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;tweeted&lt;/a&gt;. We bragged &lt;a href=&#34;https://www.linkedin.com/posts/spotify_congratulations-to-everyone-in-spotify-r-activity-6797492373665394688-lrcs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;on LinkedIn&lt;/a&gt;. Our internal Slack is alive with emoji and exclamation points. We’re really very proud of this one.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The award is &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/&#34; target=&#34;_blank&#34;&gt;Cloud Native Computing Foundation&lt;/a&gt;’s Top End User Award, &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/announcements/2021/05/05/cloud-native-computing-foundation-grants-spotify-the-top-end-user-award/&#34; target=&#34;_blank&#34;&gt;announced&lt;/a&gt; at last week’s KubeCon + CloudNativeCon. Voted on by the 140+ organizations in the &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/enduser/&#34; target=&#34;_blank&#34;&gt;End User Community&lt;/a&gt;, we’re honored to receive this recognition from our peers in the CNCF — home to so many outstanding open source projects (and people!).&lt;br/&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We joined the CNCF three years ago, and we’ve come a long way with the community in a short time. The award recognizes Spotify for our adoption and evangelizing of cloud native technology (like &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.reddit.com/r/kubernetes/comments/lwb31v/were_the_engineers_rethinking_kubernetes_at/&#34; target=&#34;_blank&#34;&gt;Kubernetes&lt;/a&gt;, &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.youtube.com/watch?v=fMq3IpPE3TU&#34; target=&#34;_blank&#34;&gt;gRPC&lt;/a&gt;, and &lt;a href=&#34;https://www.youtube.com/watch?v=HfRU414cjjQ&#34;&gt;Envoy&lt;/a&gt;), our leadership in CNCF forums and meetups (&lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://community.cncf.io/stockholm/&#34; target=&#34;_blank&#34;&gt;look out for the next Stockholm one here&lt;/a&gt;), our contributions to both the code and the direction of CNCF projects (more than 27,000 contributions to 13 different projects), and our industry-leading work on &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://engineering.atspotify.com/2021/03/16/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/&#34; target=&#34;_blank&#34;&gt;Backstage&lt;/a&gt;, which is now in &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://engineering.atspotify.com/2020/09/24/cloud-native-computing-foundation-accepts-backstage-as-a-sandbox-project/&#34; target=&#34;_blank&#34;&gt;the CNCF Sandbox&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But in the end, this is a win for all of Spotify R&amp;amp;D. It’s recognition for our commitment to technical excellence across the entire company and our desire to always give back to the community. Thank you to everyone at Spotify for your contributions across the open source ecosystem. You should be proud.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You can read more about the award on the &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/announcements/2021/05/05/cloud-native-computing-foundation-grants-spotify-the-top-end-user-award/&#34; target=&#34;_blank&#34;&gt;CNCF website&lt;/a&gt;. And to learn more about what got us here, listen to our podcast series “&lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34;&gt;Spotify: A Product Story&lt;/a&gt;”. You’ll hear the stories and lessons from building Spotify, as told by the people who were there. For more on our journey to becoming cloud native, check out these episodes:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;&lt;figure&gt;&lt;figcaption&gt;Hear how we started with servers in a closet in an apartment in Stockholm, all the way to becoming one of Google Cloud’s biggest customers&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;figcaption&gt;Hear what we learned from building and open sourcing Backstage, the open platform for building developer portals, which we donated to the CNCF last year.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/spotify-wins-cncfs-top-end-user-award-and-toots-own-horn-about-it/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Last week, Spotify won an award — and we’re not playing it cool. We tweeted. We bragged on LinkedIn. Our internal Slack is alive with emoji and exclamation points. We’re really very proud of this one. The award is Cloud Native Computing Foundation’s Top End User Award, announced at last week’s Ku</summary>
    <author>
      <name>Published by Dave Zolotusky, Principal Engineer &amp; CNCF Technical Oversight Committee Representative</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Spotify Wins CNCF’s Top End User Award and Toots Own Horn About It&#xA;</title>
    <updated>2021-05-11T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-05-11:/spotify-wins-cncfs-top-end-user-award-and-toots-own-horn-about-it/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-4585&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;May 11, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/spotify-wins-cncfs-top-end-user-award-and-toots-own-horn-about-it/&#34; title=&#34;Spotify Wins CNCF’s Top End User Award and Toots Own Horn About It&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-700x351.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-1536x771.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-2048x1028.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;Last week, Spotify won an award — and we’re not playing it cool. We &lt;a href=&#34;https://twitter.com/SpotifyEng/status/1389988765725245441&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;tweeted&lt;/a&gt;. We bragged &lt;a href=&#34;https://www.linkedin.com/posts/spotify_congratulations-to-everyone-in-spotify-r-activity-6797492373665394688-lrcs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;on LinkedIn&lt;/a&gt;. Our internal Slack is alive with emoji and exclamation points. We’re really very proud of this one.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The award is &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/&#34; target=&#34;_blank&#34;&gt;Cloud Native Computing Foundation&lt;/a&gt;’s Top End User Award, &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/announcements/2021/05/05/cloud-native-computing-foundation-grants-spotify-the-top-end-user-award/&#34; target=&#34;_blank&#34;&gt;announced&lt;/a&gt; at last week’s KubeCon + CloudNativeCon. Voted on by the 140+ organizations in the &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/enduser/&#34; target=&#34;_blank&#34;&gt;End User Community&lt;/a&gt;, we’re honored to receive this recognition from our peers in the CNCF — home to so many outstanding open source projects (and people!).&lt;br/&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We joined the CNCF three years ago, and we’ve come a long way with the community in a short time. The award recognizes Spotify for our adoption and evangelizing of cloud native technology (like &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.reddit.com/r/kubernetes/comments/lwb31v/were_the_engineers_rethinking_kubernetes_at/&#34; target=&#34;_blank&#34;&gt;Kubernetes&lt;/a&gt;, &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.youtube.com/watch?v=fMq3IpPE3TU&#34; target=&#34;_blank&#34;&gt;gRPC&lt;/a&gt;, and &lt;a href=&#34;https://www.youtube.com/watch?v=HfRU414cjjQ&#34;&gt;Envoy&lt;/a&gt;), our leadership in CNCF forums and meetups (&lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://community.cncf.io/stockholm/&#34; target=&#34;_blank&#34;&gt;look out for the next Stockholm one here&lt;/a&gt;), our contributions to both the code and the direction of CNCF projects (more than 27,000 contributions to 13 different projects), and our industry-leading work on &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://engineering.atspotify.com/2021/03/16/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/&#34; target=&#34;_blank&#34;&gt;Backstage&lt;/a&gt;, which is now in &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://engineering.atspotify.com/2020/09/24/cloud-native-computing-foundation-accepts-backstage-as-a-sandbox-project/&#34; target=&#34;_blank&#34;&gt;the CNCF Sandbox&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But in the end, this is a win for all of Spotify R&amp;amp;D. It’s recognition for our commitment to technical excellence across the entire company and our desire to always give back to the community. Thank you to everyone at Spotify for your contributions across the open source ecosystem. You should be proud.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You can read more about the award on the &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/announcements/2021/05/05/cloud-native-computing-foundation-grants-spotify-the-top-end-user-award/&#34; target=&#34;_blank&#34;&gt;CNCF website&lt;/a&gt;. And to learn more about what got us here, listen to our podcast series “&lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34;&gt;Spotify: A Product Story&lt;/a&gt;”. You’ll hear the stories and lessons from building Spotify, as told by the people who were there. For more on our journey to becoming cloud native, check out these episodes:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;&lt;figure&gt;&lt;figcaption&gt;Hear how we started with servers in a closet in an apartment in Stockholm, all the way to becoming one of Google Cloud’s biggest customers&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;figcaption&gt;Hear what we learned from building and open sourcing Backstage, the open platform for building developer portals, which we donated to the CNCF last year.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/spotify-wins-cncfs-top-end-user-award-and-toots-own-horn-about-it/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/05/spotify-wins-cncf-end-user-award-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Last week, Spotify won an award — and we’re not playing it cool. We tweeted. We bragged on LinkedIn. Our internal Slack is alive with emoji and exclamation points. We’re really very proud of this one. The award is Cloud Native Computing Foundation’s Top End User Award, announced at last week’s Ku</summary>
    <author>
      <name>Published by Dave Zolotusky, Principal Engineer &amp; CNCF Technical Oversight Committee Representative</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Spotify Wins CNCF’s Top End User Award and Toots Own Horn About It&#xA;</title>
    <updated>2021-05-11T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-05-11:/2021/05/11/spotify-wins-cncfs-top-end-user-award-and-toots-own-horn-about-it/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-4585&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;May 11, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/05/11/spotify-wins-cncfs-top-end-user-award-and-toots-own-horn-about-it/&#34; title=&#34;Spotify Wins CNCF’s Top End User Award and Toots Own Horn About It&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/spotify-wins-cncf-end-user-award-1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/spotify-wins-cncf-end-user-award-1.png 2105w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-250x126.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-700x351.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-768x386.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-1536x771.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-2048x1028.png 2048w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/spotify-wins-cncf-end-user-award-1-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/05/spotify-wins-cncf-end-user-award-1.png&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;Last week, Spotify won an award — and we’re not playing it cool. We &lt;a href=&#34;https://twitter.com/SpotifyEng/status/1389988765725245441&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;tweeted&lt;/a&gt;. We bragged &lt;a href=&#34;https://www.linkedin.com/posts/spotify_congratulations-to-everyone-in-spotify-r-activity-6797492373665394688-lrcs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;on LinkedIn&lt;/a&gt;. Our internal Slack is alive with emoji and exclamation points. We’re really very proud of this one.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The award is &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/&#34; target=&#34;_blank&#34;&gt;Cloud Native Computing Foundation&lt;/a&gt;’s Top End User Award, &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/announcements/2021/05/05/cloud-native-computing-foundation-grants-spotify-the-top-end-user-award/&#34; target=&#34;_blank&#34;&gt;announced&lt;/a&gt; at last week’s KubeCon + CloudNativeCon. Voted on by the 140+ organizations in the &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/enduser/&#34; target=&#34;_blank&#34;&gt;End User Community&lt;/a&gt;, we’re honored to receive this recognition from our peers in the CNCF — home to so many outstanding open source projects (and people!).&lt;br/&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We joined the CNCF three years ago, and we’ve come a long way with the community in a short time. The award recognizes Spotify for our adoption and evangelizing of cloud native technology (like &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.reddit.com/r/kubernetes/comments/lwb31v/were_the_engineers_rethinking_kubernetes_at/&#34; target=&#34;_blank&#34;&gt;Kubernetes&lt;/a&gt;, &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.youtube.com/watch?v=fMq3IpPE3TU&#34; target=&#34;_blank&#34;&gt;gRPC&lt;/a&gt;, and &lt;a href=&#34;https://www.youtube.com/watch?v=HfRU414cjjQ&#34;&gt;Envoy&lt;/a&gt;), our leadership in CNCF forums and meetups (&lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://community.cncf.io/stockholm/&#34; target=&#34;_blank&#34;&gt;look out for the next Stockholm one here&lt;/a&gt;), our contributions to both the code and the direction of CNCF projects (more than 27,000 contributions to 13 different projects), and our industry-leading work on &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://engineering.atspotify.com/2021/03/16/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/&#34; target=&#34;_blank&#34;&gt;Backstage&lt;/a&gt;, which is now in &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://engineering.atspotify.com/2020/09/24/cloud-native-computing-foundation-accepts-backstage-as-a-sandbox-project/&#34; target=&#34;_blank&#34;&gt;the CNCF Sandbox&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But in the end, this is a win for all of Spotify R&amp;amp;D. It’s recognition for our commitment to technical excellence across the entire company and our desire to always give back to the community. Thank you to everyone at Spotify for your contributions across the open source ecosystem. You should be proud.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You can read more about the award on the &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.cncf.io/announcements/2021/05/05/cloud-native-computing-foundation-grants-spotify-the-top-end-user-award/&#34; target=&#34;_blank&#34;&gt;CNCF website&lt;/a&gt;. And to learn more about what got us here, listen to our podcast series “&lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://open.spotify.com/show/3L9tzrt0CthF6hNkxYIeSB&#34; target=&#34;_blank&#34;&gt;Spotify: A Product Story&lt;/a&gt;”. You’ll hear the stories and lessons from building Spotify, as told by the people who were there. For more on our journey to becoming cloud native, check out these episodes:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;&lt;figure&gt;&lt;figcaption&gt;Hear how we started with servers in a closet in an apartment in Stockholm, all the way to becoming one of Google Cloud’s biggest customers&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;figcaption&gt;Hear what we learned from building and open sourcing Backstage, the open platform for building developer portals, which we donated to the CNCF last year.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/05/11/spotify-wins-cncfs-top-end-user-award-and-toots-own-horn-about-it/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/05/spotify-wins-cncf-end-user-award-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Last week, Spotify won an award — and we’re not playing it cool. We tweeted. We bragged on LinkedIn. Our internal Slack is alive with emoji and exclamation points. We’re really very proud of this one. The award is Cloud Native Computing Foundation’s Top End User Award, announced at last week’s Ku</summary>
    <author>
      <name>Published by Dave Zolotusky, Principal Engineer &amp; CNCF Technical Oversight Committee Representative</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Customization vs. Configuration in Evolving Design Systems&#xA;</title>
    <updated>2021-04-28T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-28:/customization-vs-configuration-in-evolving-design-systems/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;April 28, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/customization-vs-configuration-in-evolving-design-systems/&#34; title=&#34;Customization vs. Configuration in Evolving Design Systems&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-700x352.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-1536x772.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-120x60.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;When a design system first starts out, the promise of visual consistency glows bright — the ideal product would have only one set of buttons, a unified typography scale, and elements that look the same no matter which designer made the design or which developer programmed them to be real and deployed.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As the product grows — and so does the team — it can sometimes seem like the team is outgrowing the current set of components and styles. Your once-perfect button doesn’t quite cover the new specs needed for a new feature. Some restrictions in the way a component is coded means it would be quicker and easier to spin up something new, rather than pull from the component library.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;How do we grow a design system to meet the needs of an evolving product? How do we ensure designers and developers have the tools they need to build the product or feature, even when they are not sitting next to the maintainers of the relevant design system?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As a system grows more complex, this evolution can be handled by developing an abstract shared vocabulary around component properties or by ensuring that base properties remain accessible for modification by end consumers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When working on Encore, the design system for Spotify, we try hard to ensure our customers (fellow Spotifiers) are given as much autonomy and control as possible. While we have the option to enable configuration in our components, it’s not always the first thing we reach for. Why might this be? We’ll explore these considerations in a bit more detail later on.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this post, we’ll dive into the factors at play as a design system evolves, and the pros and cons of this range of approaches.    &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Abstraction&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So what is an abstraction? In this context, we define it as a simplified version of a more complex concept. Abstraction can make some concepts easier by obscuring underlying characters of a system in favor of a more high-level representation. We are looking at abstraction here as a measure of how different the code we write is from the HTML and CSS that is ultimately rendered. For the scope of this piece, we will be discussing abstraction from the lens of frontend development using React, starting with written code through to what is rendered in the browser. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;For a more thorough view of abstraction in software, and in life, check out &lt;/em&gt;&lt;a href=&#34;https://medium.com/@danieljyoo/levels-of-abstraction-a-key-concept-in-systems-design-7fdb33d288af&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Levels of Abstraction, A Key Concept in Systems Design&lt;/em&gt;&lt;/a&gt;&lt;em&gt; by Daniel Jhin Yoo. &lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this context, a low level of abstraction would define something that touches CSS or HTML elements directly, whereas a high level of abstraction would define changing custom properties that have their own subjective meaning and value, that in turn modify some underlying CSS or elements within the component.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Current landscape&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that we understand what abstraction means in terms of defining web components, let’s take a look at some of the common approaches to handling evolving use cases. Some definitions that will help us understand what’s going on here:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;em&gt;Customization — &lt;/em&gt;Custom styles are added external to the component. These styles reference HTML elements and touch CSS properties directly. A low level of abstraction.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;em&gt;Configuration — &lt;/em&gt;The original component is made more flexible. Additional parameters are passed to the component for more varied behavior. A high level of abstraction.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-768x433.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-1536x865.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1.png 1672w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Some highlights of our available options:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Powerhouse definitions&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; By assigning a definition to a whole set of underlying properties, this category of abstraction can get a lot done without a ton of input from the end user. Configurations like enum props allow us to add configuration to our components in a semantic way, while remaining typesafe. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Prepacked guidelines&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; Utility classes allow us to modify CSS properties in a granular way that still references the underlying style guide of the design system, and without having to touch CSS directly.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Property passthroughs&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; These strategies pass the elements and properties through to ultimately be rendered to the page. Children, className, and props allow feature developers to pass their custom styles and components into the design system’s components.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Direct overrides&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; These strategies are the closest to the CSS and JSX itself. Direct overrides of existing classes and CSS properties give the most granular control of look and feel, but at the cost of unchecked specificity.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Customization vs. configuration&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With the range of approaches made more tangible, let’s now look at the pros and cons of different ends of the spectrum.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Customization&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Pros: Autonomy, speed, innovation&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The greatest benefit of this approach is that feature developers have the freedom to modify components in order to meet their specific needs. Developers are not tied to the system’s release cadence, which can be very appealing to teams who have pressing deadlines to meet. Not being tied to the constraints of a design system can also provide more freedom and flexibility, which can lead to more innovative approaches.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Cons: Lack of coherency, loss of maintainability, potential duplication&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A local override may solve the problem in a pinch, but those style overrides are less likely to be in close alignment with the system’s broader standards. What’s more, if this pattern emerges more broadly, this local code is not accessible for other feature developers to pick up and use — it would have to be duplicated. Further problems arise if we are looking at more sweeping updates to the design system — any sort of override (think padding, headings, spacing, even colors) made to a local version of the component will stay in place, even if the official version changes drastically.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Configuration&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Pros: Consistency, contribution, maintainability&lt;/strong&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If emerging variations all find their way back to the parent component, then they can be reused and tracked, to ensure that consistency is maintained. If changes need to be made to the main component, folks using the system will need to contribute back to it to meet their needs. As components are updated, consumers may safely upgrade to the latest version with less concern of breaking local overrides in the process.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Cons: Can become a bottleneck, rigidness, vocabulary awareness&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The other side of the contribution coin — relying on updates to the system means that code must be developed and released in a separate library before it can be used in features. This can slow down feature development, and it introduces a dependency, often on another team. The system also becomes more rigid when consumers are given fewer options — this is good for consistency, but can stifle innovation by setting constraints on how components can be manipulated. Understanding of the abstract vocabulary you have defined in configurations is an additional responsibility maintainers must take on, since you are no longer relying on baseline properties of CSS and HTML that are already thoroughly documented on the web.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How to decide which approach to use&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With both ends of the abstraction spectrum carrying implications for the key functions of your design system, it should come as no surprise that you will end up with a mix of approaches. Here are some factors to consider in deciding what approach is best for your use case:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Feature maturity&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; If a feature is still taking shape, odds are the design is yet to be fully realized. This isn’t a bad thing — iteration is the name of the game. But when you are still experimenting with what the exact look will be, customization is your friend because you have access to any properties you may realize you need. On the flip side, if you are working with an established component, you have a wealth of existing use cases available to you to reference and establish patterns from, resulting in modifications with a more meaningful configuration for all to use.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Product maturity&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; As with feature maturity, the less developed the product is, the harder it is to know what conventions will stick around. If you are seeing a pattern for the first time, customization may be the right move, but if you start to see it emerging in other aspects of the product, use that opportunity to take inventory of your variations and move into a more maintainable configuration approach.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; While design system engineers would rather look at the best-case scenario, the feature teams who consume design systems don’t often have the same luxury. Customization is going to get something out the door quicker, but this is a great opportunity to utilize the full spectrum of approaches — what is an approach closest to configuration which will still allow you to deliver on time?&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Reusability&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; If a pattern emerges that you can see applying across features, odds are someone else is looking for the same thing — configuration will benefit you here, and can cut down on duplication that is more likely in a customization approach.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Key takeaways&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When evolving a design system, there is a range of strategies you can take. A more abstract configuration approach can increase consistency and maintainability, but at the risk of the system being a bottleneck for outgoing features. The less abstract customization approach enables quicker feature development; however, overall consistency of the product can suffer as a result.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The more mature a product or feature is, the more beneficial and feasible a configuration approach is. However, the iterative and low-level nature of customization makes it more suitable for prototyping and features which are bespoke, or are still subject to change.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Lastly, one size does not fit all. In viewing the pros and cons of these different approaches, think of how those tradeoffs relate to your company’s broader values. At Spotify, the ability for teams to work autonomously is highly valued, and thus we generally lean more towards customization as a result.  Though we have the maturity to support a more configurable design system, that doesn’t mean we need to solve all of our challenges through configuration — it’s just another tool in the set that we can choose from.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While there is no right or wrong approach on how to best evolve your design system, I hope the measures above helped broaden your understanding of the tools available and the context surrounding them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;—&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;A huge shout out to Krist Wongsuphasawat and his article &lt;/em&gt;&lt;a href=&#34;https://medium.com/nightingale/navigating-the-wide-world-of-web-based-data-visualization-libraries-798ea9f536e7&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Navigating the Wide World of Data Visualization Libraries&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. While the subject matter is different, the format of Krist’s article was a huge inspiration, and the content opened my eyes to how abstraction is a huge part of the equation, even in the frontend world. &lt;/em&gt;&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/web/&#34; rel=&#34;tag&#34;&gt;web&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/customization-vs-configuration-in-evolving-design-systems/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">When a design system first starts out, the promise of visual consistency glows bright — the ideal product would have only one set of buttons, a unified typography scale, and elements that look the same no matter which designer made the design or which developer programmed them to be real and deploye</summary>
    <author>
      <name>Published by Charlie Backus</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Customization vs. Configuration in Evolving Design Systems&#xA;</title>
    <updated>2021-04-28T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-28:/2021/04/28/customization-vs-configuration-in-evolving-design-systems/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;April 28, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/04/28/customization-vs-configuration-in-evolving-design-systems/&#34; title=&#34;Customization vs. Configuration in Evolving Design Systems&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3.png 1999w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-250x126.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-700x352.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-768x386.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-1536x772.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-120x60.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/04/image3.png&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;When a design system first starts out, the promise of visual consistency glows bright — the ideal product would have only one set of buttons, a unified typography scale, and elements that look the same no matter which designer made the design or which developer programmed them to be real and deployed.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As the product grows — and so does the team — it can sometimes seem like the team is outgrowing the current set of components and styles. Your once-perfect button doesn’t quite cover the new specs needed for a new feature. Some restrictions in the way a component is coded means it would be quicker and easier to spin up something new, rather than pull from the component library.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;How do we grow a design system to meet the needs of an evolving product? How do we ensure designers and developers have the tools they need to build the product or feature, even when they are not sitting next to the maintainers of the relevant design system?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As a system grows more complex, this evolution can be handled by developing an abstract shared vocabulary around component properties or by ensuring that base properties remain accessible for modification by end consumers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When working on Encore, the design system for Spotify, we try hard to ensure our customers (fellow Spotifiers) are given as much autonomy and control as possible. While we have the option to enable configuration in our components, it’s not always the first thing we reach for. Why might this be? We’ll explore these considerations in a bit more detail later on.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this post, we’ll dive into the factors at play as a design system evolves, and the pros and cons of this range of approaches.    &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Abstraction&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So what is an abstraction? In this context, we define it as a simplified version of a more complex concept. Abstraction can make some concepts easier by obscuring underlying characters of a system in favor of a more high-level representation. We are looking at abstraction here as a measure of how different the code we write is from the HTML and CSS that is ultimately rendered. For the scope of this piece, we will be discussing abstraction from the lens of frontend development using React, starting with written code through to what is rendered in the browser. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;For a more thorough view of abstraction in software, and in life, check out &lt;/em&gt;&lt;a href=&#34;https://medium.com/@danieljyoo/levels-of-abstraction-a-key-concept-in-systems-design-7fdb33d288af&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Levels of Abstraction, A Key Concept in Systems Design&lt;/em&gt;&lt;/a&gt;&lt;em&gt; by Daniel Jhin Yoo. &lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this context, a low level of abstraction would define something that touches CSS or HTML elements directly, whereas a high level of abstraction would define changing custom properties that have their own subjective meaning and value, that in turn modify some underlying CSS or elements within the component.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Current landscape&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that we understand what abstraction means in terms of defining web components, let’s take a look at some of the common approaches to handling evolving use cases. Some definitions that will help us understand what’s going on here:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;em&gt;Customization — &lt;/em&gt;Custom styles are added external to the component. These styles reference HTML elements and touch CSS properties directly. A low level of abstraction.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;em&gt;Configuration — &lt;/em&gt;The original component is made more flexible. Additional parameters are passed to the component for more varied behavior. A high level of abstraction.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image1-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image1-700x394.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image1-250x141.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image1-768x433.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image1-1536x865.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image1-120x68.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image1.png 1672w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Some highlights of our available options:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Powerhouse definitions&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; By assigning a definition to a whole set of underlying properties, this category of abstraction can get a lot done without a ton of input from the end user. Configurations like enum props allow us to add configuration to our components in a semantic way, while remaining typesafe. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Prepacked guidelines&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; Utility classes allow us to modify CSS properties in a granular way that still references the underlying style guide of the design system, and without having to touch CSS directly.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Property passthroughs&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; These strategies pass the elements and properties through to ultimately be rendered to the page. Children, className, and props allow feature developers to pass their custom styles and components into the design system’s components.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Direct overrides&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; These strategies are the closest to the CSS and JSX itself. Direct overrides of existing classes and CSS properties give the most granular control of look and feel, but at the cost of unchecked specificity.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Customization vs. configuration&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With the range of approaches made more tangible, let’s now look at the pros and cons of different ends of the spectrum.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Customization&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Pros: Autonomy, speed, innovation&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The greatest benefit of this approach is that feature developers have the freedom to modify components in order to meet their specific needs. Developers are not tied to the system’s release cadence, which can be very appealing to teams who have pressing deadlines to meet. Not being tied to the constraints of a design system can also provide more freedom and flexibility, which can lead to more innovative approaches.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Cons: Lack of coherency, loss of maintainability, potential duplication&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A local override may solve the problem in a pinch, but those style overrides are less likely to be in close alignment with the system’s broader standards. What’s more, if this pattern emerges more broadly, this local code is not accessible for other feature developers to pick up and use — it would have to be duplicated. Further problems arise if we are looking at more sweeping updates to the design system — any sort of override (think padding, headings, spacing, even colors) made to a local version of the component will stay in place, even if the official version changes drastically.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Configuration&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Pros: Consistency, contribution, maintainability&lt;/strong&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If emerging variations all find their way back to the parent component, then they can be reused and tracked, to ensure that consistency is maintained. If changes need to be made to the main component, folks using the system will need to contribute back to it to meet their needs. As components are updated, consumers may safely upgrade to the latest version with less concern of breaking local overrides in the process.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Cons: Can become a bottleneck, rigidness, vocabulary awareness&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The other side of the contribution coin — relying on updates to the system means that code must be developed and released in a separate library before it can be used in features. This can slow down feature development, and it introduces a dependency, often on another team. The system also becomes more rigid when consumers are given fewer options — this is good for consistency, but can stifle innovation by setting constraints on how components can be manipulated. Understanding of the abstract vocabulary you have defined in configurations is an additional responsibility maintainers must take on, since you are no longer relying on baseline properties of CSS and HTML that are already thoroughly documented on the web.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How to decide which approach to use&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With both ends of the abstraction spectrum carrying implications for the key functions of your design system, it should come as no surprise that you will end up with a mix of approaches. Here are some factors to consider in deciding what approach is best for your use case:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Feature maturity&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; If a feature is still taking shape, odds are the design is yet to be fully realized. This isn’t a bad thing — iteration is the name of the game. But when you are still experimenting with what the exact look will be, customization is your friend because you have access to any properties you may realize you need. On the flip side, if you are working with an established component, you have a wealth of existing use cases available to you to reference and establish patterns from, resulting in modifications with a more meaningful configuration for all to use.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Product maturity&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; As with feature maturity, the less developed the product is, the harder it is to know what conventions will stick around. If you are seeing a pattern for the first time, customization may be the right move, but if you start to see it emerging in other aspects of the product, use that opportunity to take inventory of your variations and move into a more maintainable configuration approach.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; While design system engineers would rather look at the best-case scenario, the feature teams who consume design systems don’t often have the same luxury. Customization is going to get something out the door quicker, but this is a great opportunity to utilize the full spectrum of approaches — what is an approach closest to configuration which will still allow you to deliver on time?&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Reusability&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; If a pattern emerges that you can see applying across features, odds are someone else is looking for the same thing — configuration will benefit you here, and can cut down on duplication that is more likely in a customization approach.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Key takeaways&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When evolving a design system, there is a range of strategies you can take. A more abstract configuration approach can increase consistency and maintainability, but at the risk of the system being a bottleneck for outgoing features. The less abstract customization approach enables quicker feature development; however, overall consistency of the product can suffer as a result.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The more mature a product or feature is, the more beneficial and feasible a configuration approach is. However, the iterative and low-level nature of customization makes it more suitable for prototyping and features which are bespoke, or are still subject to change.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Lastly, one size does not fit all. In viewing the pros and cons of these different approaches, think of how those tradeoffs relate to your company’s broader values. At Spotify, the ability for teams to work autonomously is highly valued, and thus we generally lean more towards customization as a result.  Though we have the maturity to support a more configurable design system, that doesn’t mean we need to solve all of our challenges through configuration — it’s just another tool in the set that we can choose from.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While there is no right or wrong approach on how to best evolve your design system, I hope the measures above helped broaden your understanding of the tools available and the context surrounding them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;—&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;A huge shout out to Krist Wongsuphasawat and his article &lt;/em&gt;&lt;a href=&#34;https://medium.com/nightingale/navigating-the-wide-world-of-web-based-data-visualization-libraries-798ea9f536e7&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Navigating the Wide World of Data Visualization Libraries&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. While the subject matter is different, the format of Krist’s article was a huge inspiration, and the content opened my eyes to how abstraction is a huge part of the equation, even in the frontend world. &lt;/em&gt;&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/04/28/customization-vs-configuration-in-evolving-design-systems/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">When a design system first starts out, the promise of visual consistency glows bright — the ideal product would have only one set of buttons, a unified typography scale, and elements that look the same no matter which designer made the design or which developer programmed them to be real and deploye</summary>
    <author>
      <name>Published by Charlie Backus</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Customization vs. Configuration in Evolving Design Systems&#xA;</title>
    <updated>2021-04-28T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-28:/2021/04/customization-vs-configuration-in-evolving-design-systems/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;April 28, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/04/customization-vs-configuration-in-evolving-design-systems/&#34; title=&#34;Customization vs. Configuration in Evolving Design Systems&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-700x352.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-1536x772.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-120x60.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;When a design system first starts out, the promise of visual consistency glows bright — the ideal product would have only one set of buttons, a unified typography scale, and elements that look the same no matter which designer made the design or which developer programmed them to be real and deployed.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As the product grows — and so does the team — it can sometimes seem like the team is outgrowing the current set of components and styles. Your once-perfect button doesn’t quite cover the new specs needed for a new feature. Some restrictions in the way a component is coded means it would be quicker and easier to spin up something new, rather than pull from the component library.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;How do we grow a design system to meet the needs of an evolving product? How do we ensure designers and developers have the tools they need to build the product or feature, even when they are not sitting next to the maintainers of the relevant design system?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As a system grows more complex, this evolution can be handled by developing an abstract shared vocabulary around component properties or by ensuring that base properties remain accessible for modification by end consumers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When working on Encore, the design system for Spotify, we try hard to ensure our customers (fellow Spotifiers) are given as much autonomy and control as possible. While we have the option to enable configuration in our components, it’s not always the first thing we reach for. Why might this be? We’ll explore these considerations in a bit more detail later on.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this post, we’ll dive into the factors at play as a design system evolves, and the pros and cons of this range of approaches.    &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Abstraction&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So what is an abstraction? In this context, we define it as a simplified version of a more complex concept. Abstraction can make some concepts easier by obscuring underlying characters of a system in favor of a more high-level representation. We are looking at abstraction here as a measure of how different the code we write is from the HTML and CSS that is ultimately rendered. For the scope of this piece, we will be discussing abstraction from the lens of frontend development using React, starting with written code through to what is rendered in the browser. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;For a more thorough view of abstraction in software, and in life, check out &lt;/em&gt;&lt;a href=&#34;https://medium.com/@danieljyoo/levels-of-abstraction-a-key-concept-in-systems-design-7fdb33d288af&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Levels of Abstraction, A Key Concept in Systems Design&lt;/em&gt;&lt;/a&gt;&lt;em&gt; by Daniel Jhin Yoo. &lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this context, a low level of abstraction would define something that touches CSS or HTML elements directly, whereas a high level of abstraction would define changing custom properties that have their own subjective meaning and value, that in turn modify some underlying CSS or elements within the component.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Current landscape&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that we understand what abstraction means in terms of defining web components, let’s take a look at some of the common approaches to handling evolving use cases. Some definitions that will help us understand what’s going on here:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;em&gt;Customization — &lt;/em&gt;Custom styles are added external to the component. These styles reference HTML elements and touch CSS properties directly. A low level of abstraction.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;em&gt;Configuration — &lt;/em&gt;The original component is made more flexible. Additional parameters are passed to the component for more varied behavior. A high level of abstraction.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-768x433.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-1536x865.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1.png 1672w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Some highlights of our available options:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Powerhouse definitions&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; By assigning a definition to a whole set of underlying properties, this category of abstraction can get a lot done without a ton of input from the end user. Configurations like enum props allow us to add configuration to our components in a semantic way, while remaining typesafe. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Prepacked guidelines&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; Utility classes allow us to modify CSS properties in a granular way that still references the underlying style guide of the design system, and without having to touch CSS directly.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Property passthroughs&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; These strategies pass the elements and properties through to ultimately be rendered to the page. Children, className, and props allow feature developers to pass their custom styles and components into the design system’s components.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Direct overrides&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; These strategies are the closest to the CSS and JSX itself. Direct overrides of existing classes and CSS properties give the most granular control of look and feel, but at the cost of unchecked specificity.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Customization vs. configuration&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With the range of approaches made more tangible, let’s now look at the pros and cons of different ends of the spectrum.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Customization&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Pros: Autonomy, speed, innovation&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The greatest benefit of this approach is that feature developers have the freedom to modify components in order to meet their specific needs. Developers are not tied to the system’s release cadence, which can be very appealing to teams who have pressing deadlines to meet. Not being tied to the constraints of a design system can also provide more freedom and flexibility, which can lead to more innovative approaches.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Cons: Lack of coherency, loss of maintainability, potential duplication&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A local override may solve the problem in a pinch, but those style overrides are less likely to be in close alignment with the system’s broader standards. What’s more, if this pattern emerges more broadly, this local code is not accessible for other feature developers to pick up and use — it would have to be duplicated. Further problems arise if we are looking at more sweeping updates to the design system — any sort of override (think padding, headings, spacing, even colors) made to a local version of the component will stay in place, even if the official version changes drastically.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Configuration&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Pros: Consistency, contribution, maintainability&lt;/strong&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If emerging variations all find their way back to the parent component, then they can be reused and tracked, to ensure that consistency is maintained. If changes need to be made to the main component, folks using the system will need to contribute back to it to meet their needs. As components are updated, consumers may safely upgrade to the latest version with less concern of breaking local overrides in the process.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Cons: Can become a bottleneck, rigidness, vocabulary awareness&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The other side of the contribution coin — relying on updates to the system means that code must be developed and released in a separate library before it can be used in features. This can slow down feature development, and it introduces a dependency, often on another team. The system also becomes more rigid when consumers are given fewer options — this is good for consistency, but can stifle innovation by setting constraints on how components can be manipulated. Understanding of the abstract vocabulary you have defined in configurations is an additional responsibility maintainers must take on, since you are no longer relying on baseline properties of CSS and HTML that are already thoroughly documented on the web.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How to decide which approach to use&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With both ends of the abstraction spectrum carrying implications for the key functions of your design system, it should come as no surprise that you will end up with a mix of approaches. Here are some factors to consider in deciding what approach is best for your use case:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Feature maturity&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; If a feature is still taking shape, odds are the design is yet to be fully realized. This isn’t a bad thing — iteration is the name of the game. But when you are still experimenting with what the exact look will be, customization is your friend because you have access to any properties you may realize you need. On the flip side, if you are working with an established component, you have a wealth of existing use cases available to you to reference and establish patterns from, resulting in modifications with a more meaningful configuration for all to use.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Product maturity&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; As with feature maturity, the less developed the product is, the harder it is to know what conventions will stick around. If you are seeing a pattern for the first time, customization may be the right move, but if you start to see it emerging in other aspects of the product, use that opportunity to take inventory of your variations and move into a more maintainable configuration approach.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; While design system engineers would rather look at the best-case scenario, the feature teams who consume design systems don’t often have the same luxury. Customization is going to get something out the door quicker, but this is a great opportunity to utilize the full spectrum of approaches — what is an approach closest to configuration which will still allow you to deliver on time?&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Reusability&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; If a pattern emerges that you can see applying across features, odds are someone else is looking for the same thing — configuration will benefit you here, and can cut down on duplication that is more likely in a customization approach.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Key takeaways&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When evolving a design system, there is a range of strategies you can take. A more abstract configuration approach can increase consistency and maintainability, but at the risk of the system being a bottleneck for outgoing features. The less abstract customization approach enables quicker feature development; however, overall consistency of the product can suffer as a result.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The more mature a product or feature is, the more beneficial and feasible a configuration approach is. However, the iterative and low-level nature of customization makes it more suitable for prototyping and features which are bespoke, or are still subject to change.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Lastly, one size does not fit all. In viewing the pros and cons of these different approaches, think of how those tradeoffs relate to your company’s broader values. At Spotify, the ability for teams to work autonomously is highly valued, and thus we generally lean more towards customization as a result.  Though we have the maturity to support a more configurable design system, that doesn’t mean we need to solve all of our challenges through configuration — it’s just another tool in the set that we can choose from.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While there is no right or wrong approach on how to best evolve your design system, I hope the measures above helped broaden your understanding of the tools available and the context surrounding them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;—&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;A huge shout out to Krist Wongsuphasawat and his article &lt;/em&gt;&lt;a href=&#34;https://medium.com/nightingale/navigating-the-wide-world-of-web-based-data-visualization-libraries-798ea9f536e7&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Navigating the Wide World of Data Visualization Libraries&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. While the subject matter is different, the format of Krist’s article was a huge inspiration, and the content opened my eyes to how abstraction is a huge part of the equation, even in the frontend world. &lt;/em&gt;&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/web/&#34; rel=&#34;tag&#34;&gt;web&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/04/customization-vs-configuration-in-evolving-design-systems/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">When a design system first starts out, the promise of visual consistency glows bright — the ideal product would have only one set of buttons, a unified typography scale, and elements that look the same no matter which designer made the design or which developer programmed them to be real and deploye</summary>
    <author>
      <name>Published by Charlie Backus</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Customization vs. Configuration in Evolving Design Systems&#xA;</title>
    <updated>2021-04-28T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-28:/customization-vs-configuration-in-evolving-design-systems/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;April 28, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/customization-vs-configuration-in-evolving-design-systems/&#34; title=&#34;Customization vs. Configuration in Evolving Design Systems&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-700x352.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-1536x772.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-120x60.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;When a design system first starts out, the promise of visual consistency glows bright — the ideal product would have only one set of buttons, a unified typography scale, and elements that look the same no matter which designer made the design or which developer programmed them to be real and deployed.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As the product grows — and so does the team — it can sometimes seem like the team is outgrowing the current set of components and styles. Your once-perfect button doesn’t quite cover the new specs needed for a new feature. Some restrictions in the way a component is coded means it would be quicker and easier to spin up something new, rather than pull from the component library.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;How do we grow a design system to meet the needs of an evolving product? How do we ensure designers and developers have the tools they need to build the product or feature, even when they are not sitting next to the maintainers of the relevant design system?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As a system grows more complex, this evolution can be handled by developing an abstract shared vocabulary around component properties or by ensuring that base properties remain accessible for modification by end consumers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When working on Encore, the design system for Spotify, we try hard to ensure our customers (fellow Spotifiers) are given as much autonomy and control as possible. While we have the option to enable configuration in our components, it’s not always the first thing we reach for. Why might this be? We’ll explore these considerations in a bit more detail later on.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this post, we’ll dive into the factors at play as a design system evolves, and the pros and cons of this range of approaches.    &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Abstraction&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So what is an abstraction? In this context, we define it as a simplified version of a more complex concept. Abstraction can make some concepts easier by obscuring underlying characters of a system in favor of a more high-level representation. We are looking at abstraction here as a measure of how different the code we write is from the HTML and CSS that is ultimately rendered. For the scope of this piece, we will be discussing abstraction from the lens of frontend development using React, starting with written code through to what is rendered in the browser. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;For a more thorough view of abstraction in software, and in life, check out &lt;/em&gt;&lt;a href=&#34;https://medium.com/@danieljyoo/levels-of-abstraction-a-key-concept-in-systems-design-7fdb33d288af&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Levels of Abstraction, A Key Concept in Systems Design&lt;/em&gt;&lt;/a&gt;&lt;em&gt; by Daniel Jhin Yoo. &lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this context, a low level of abstraction would define something that touches CSS or HTML elements directly, whereas a high level of abstraction would define changing custom properties that have their own subjective meaning and value, that in turn modify some underlying CSS or elements within the component.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Current landscape&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that we understand what abstraction means in terms of defining web components, let’s take a look at some of the common approaches to handling evolving use cases. Some definitions that will help us understand what’s going on here:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;em&gt;Customization — &lt;/em&gt;Custom styles are added external to the component. These styles reference HTML elements and touch CSS properties directly. A low level of abstraction.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;em&gt;Configuration — &lt;/em&gt;The original component is made more flexible. Additional parameters are passed to the component for more varied behavior. A high level of abstraction.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-700x394.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-700x394.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-250x141.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-768x433.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-1536x865.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-120x68.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1.png 1672w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Some highlights of our available options:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Powerhouse definitions&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; By assigning a definition to a whole set of underlying properties, this category of abstraction can get a lot done without a ton of input from the end user. Configurations like enum props allow us to add configuration to our components in a semantic way, while remaining typesafe. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Prepacked guidelines&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; Utility classes allow us to modify CSS properties in a granular way that still references the underlying style guide of the design system, and without having to touch CSS directly.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Property passthroughs&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; These strategies pass the elements and properties through to ultimately be rendered to the page. Children, className, and props allow feature developers to pass their custom styles and components into the design system’s components.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Direct overrides&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; These strategies are the closest to the CSS and JSX itself. Direct overrides of existing classes and CSS properties give the most granular control of look and feel, but at the cost of unchecked specificity.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Customization vs. configuration&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With the range of approaches made more tangible, let’s now look at the pros and cons of different ends of the spectrum.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Customization&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Pros: Autonomy, speed, innovation&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The greatest benefit of this approach is that feature developers have the freedom to modify components in order to meet their specific needs. Developers are not tied to the system’s release cadence, which can be very appealing to teams who have pressing deadlines to meet. Not being tied to the constraints of a design system can also provide more freedom and flexibility, which can lead to more innovative approaches.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Cons: Lack of coherency, loss of maintainability, potential duplication&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A local override may solve the problem in a pinch, but those style overrides are less likely to be in close alignment with the system’s broader standards. What’s more, if this pattern emerges more broadly, this local code is not accessible for other feature developers to pick up and use — it would have to be duplicated. Further problems arise if we are looking at more sweeping updates to the design system — any sort of override (think padding, headings, spacing, even colors) made to a local version of the component will stay in place, even if the official version changes drastically.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Configuration&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Pros: Consistency, contribution, maintainability&lt;/strong&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If emerging variations all find their way back to the parent component, then they can be reused and tracked, to ensure that consistency is maintained. If changes need to be made to the main component, folks using the system will need to contribute back to it to meet their needs. As components are updated, consumers may safely upgrade to the latest version with less concern of breaking local overrides in the process.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Cons: Can become a bottleneck, rigidness, vocabulary awareness&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The other side of the contribution coin — relying on updates to the system means that code must be developed and released in a separate library before it can be used in features. This can slow down feature development, and it introduces a dependency, often on another team. The system also becomes more rigid when consumers are given fewer options — this is good for consistency, but can stifle innovation by setting constraints on how components can be manipulated. Understanding of the abstract vocabulary you have defined in configurations is an additional responsibility maintainers must take on, since you are no longer relying on baseline properties of CSS and HTML that are already thoroughly documented on the web.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;How to decide which approach to use&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With both ends of the abstraction spectrum carrying implications for the key functions of your design system, it should come as no surprise that you will end up with a mix of approaches. Here are some factors to consider in deciding what approach is best for your use case:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Feature maturity&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; If a feature is still taking shape, odds are the design is yet to be fully realized. This isn’t a bad thing — iteration is the name of the game. But when you are still experimenting with what the exact look will be, customization is your friend because you have access to any properties you may realize you need. On the flip side, if you are working with an established component, you have a wealth of existing use cases available to you to reference and establish patterns from, resulting in modifications with a more meaningful configuration for all to use.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Product maturity&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; As with feature maturity, the less developed the product is, the harder it is to know what conventions will stick around. If you are seeing a pattern for the first time, customization may be the right move, but if you start to see it emerging in other aspects of the product, use that opportunity to take inventory of your variations and move into a more maintainable configuration approach.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; While design system engineers would rather look at the best-case scenario, the feature teams who consume design systems don’t often have the same luxury. Customization is going to get something out the door quicker, but this is a great opportunity to utilize the full spectrum of approaches — what is an approach closest to configuration which will still allow you to deliver on time?&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Reusability&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; If a pattern emerges that you can see applying across features, odds are someone else is looking for the same thing — configuration will benefit you here, and can cut down on duplication that is more likely in a customization approach.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Key takeaways&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When evolving a design system, there is a range of strategies you can take. A more abstract configuration approach can increase consistency and maintainability, but at the risk of the system being a bottleneck for outgoing features. The less abstract customization approach enables quicker feature development; however, overall consistency of the product can suffer as a result.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The more mature a product or feature is, the more beneficial and feasible a configuration approach is. However, the iterative and low-level nature of customization makes it more suitable for prototyping and features which are bespoke, or are still subject to change.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Lastly, one size does not fit all. In viewing the pros and cons of these different approaches, think of how those tradeoffs relate to your company’s broader values. At Spotify, the ability for teams to work autonomously is highly valued, and thus we generally lean more towards customization as a result.  Though we have the maturity to support a more configurable design system, that doesn’t mean we need to solve all of our challenges through configuration — it’s just another tool in the set that we can choose from.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While there is no right or wrong approach on how to best evolve your design system, I hope the measures above helped broaden your understanding of the tools available and the context surrounding them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;—&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;A huge shout out to Krist Wongsuphasawat and his article &lt;/em&gt;&lt;a href=&#34;https://medium.com/nightingale/navigating-the-wide-world-of-web-based-data-visualization-libraries-798ea9f536e7&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;Navigating the Wide World of Data Visualization Libraries&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. While the subject matter is different, the format of Krist’s article was a huge inspiration, and the content opened my eyes to how abstraction is a huge part of the equation, even in the frontend world. &lt;/em&gt;&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/web/&#34; rel=&#34;tag&#34;&gt;web&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/customization-vs-configuration-in-evolving-design-systems/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">When a design system first starts out, the promise of visual consistency glows bright — the ideal product would have only one set of buttons, a unified typography scale, and elements that look the same no matter which designer made the design or which developer programmed them to be real and deploye</summary>
    <author>
      <name>Published by Charlie Backus</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Nour Daoud Bösing: Security Engineer&#xA;</title>
    <updated>2021-04-26T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-26:/2021/04/nour-daoud-bosing-security-engineer/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-4531&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;        &#xA;         &lt;div&gt;&#xA;            &lt;div&gt;&#xA;            &lt;h2&gt;Putting the Spotlight on our technical employees&lt;/h2&gt;&#xA;    &lt;p&gt;My beat is a blog series that turns the spotlight towards technical employees across various desciplines and roles to showcase what a typical day as a Spotifier consists of.&lt;/p&gt;&#xA;            &lt;/div&gt;&#xA; &#xA;             &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1.png 1200w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1-250x144.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1-700x404.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1-768x444.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1-120x69.png 120w&#34; sizes=&#34;(max-width: 1200px) 100vw, 1200px&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;div&gt;&#xA;             &#xA;                 &lt;p&gt;&lt;b&gt;Nour is a Security Engineer at Spotify New York – juggling her busy day job with completing her Masters in Cyber Security and looking after her 11-month-old daughter, Leya. &lt;/b&gt;&lt;/p&gt;&#xA;             &lt;/div&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;blockquote&gt;&lt;p&gt;6:00am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;These days, I don’t need an alarm clock – I get woken up bright and early by my daughter! I live in Jersey City, just across the river from the Spotify NY office, and often used to take the ferry into work. But now, there’s no need to commute – instead, I squeeze in an hour of yoga whilst Leya is entertained by her dad. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;7:30am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I work as a Security Engineer in the Product Security team, which involves a lot of collaboration with colleagues in Sweden, so I start my day early to bridge the gap between the two time zones. My role really differs from project to project and from phase to phase of projects – some weeks will be mostly consultancy and design work, whereas others will be almost all programming. For instance, when Spotify acquired the podcasting platform Anchor, I did their security assessment, enumerated their issues and prioritized what to tackle first. Then, I put on my engineer hat and embedded with them for three weeks – getting hands-on, working through the issues that needed fixing and making sure their security was completely up to par.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Things are just as varied when it comes to big internal development projects, like the Security Tiers project we rolled out last quarter. Here, the goal was to shift to a more targeted approach in addressing security risks at Spotify. I worked across every phase, from design and architecture to implementation – taking on the initial detective work, finding ways to automate our information and assigning products with their appropriate security tier. It was a lot of work and very complex at times. But being involved across all the different phases definitely kept things interesting! &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;12:00 noon&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Twice a week, my team has a virtual &lt;em&gt;fika&lt;/em&gt; (coffee break) to help us all stay connected while we’re working remotely. We also have a monthly get-together, like a baking challenge, happy hour or yoga session. I really miss the ‘water cooler chat’ that comes with working in an office. But being at home means I get to see much more of Leya – most days, she’s looked after by my mum who lives in the next block, so I stop by and take her for a walk at lunchtime. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;1:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My afternoons tend to be less meeting-heavy than my mornings, so I get more focus time to spend on things like coding and reviewing RFCs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;4:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I finish up around 4pm, collect Leya and head to the park – the weather’s so nice at the moment and there’s lots of other babies there for her to look at. Then it’s home for dinner and a bit more playtime, although some days I need to study too – I’m doing a Master’s degree in Cyber Security at NYU and I’m just five weeks away from graduating, so right now it’s the final push! &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On nights when I can just kick back and relax, my husband and I usually play cards, read or watch something on Netflix. I also make a huge effort to keep in touch with my family back in Syria – I was lucky enough to escape the war and come here on a scholarship, but I have plenty of loved ones still living there. And I’m so grateful to &lt;a href=&#34;https://jusoorsyria.com/&#34;&gt;Jussor&lt;/a&gt;, an amazing organization that funded my education in the US (please support them if you can!) – without their help, I wouldn’t be here in New York or doing what I do at Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;111&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-250x40.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-768x121.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-120x19.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering.png 1525w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;583&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-700x583.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-700x583.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-250x208.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-768x640.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-120x100.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1.png 1520w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;&#xA;&#xA;         Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/security/&#34; rel=&#34;tag&#34;&gt;security&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/04/nour-daoud-bosing-security-engineer/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Nour is a Security Engineer at Spotify New York – juggling her busy day job with completing her Masters in Cyber Security and looking after her 10-month-old daughter, Leya.</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Nour Daoud Bösing: Security Engineer&#xA;</title>
    <updated>2021-04-26T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-26:/nour-daoud-bosing-security-engineer/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-4531&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;        &#xA;         &lt;div&gt;&#xA;            &lt;div&gt;&#xA;            &lt;h2&gt;Putting the Spotlight on our technical employees&lt;/h2&gt;&#xA;    &lt;p&gt;My beat is a blog series that turns the spotlight towards technical employees across various desciplines and roles to showcase what a typical day as a Spotifier consists of.&lt;/p&gt;&#xA;            &lt;/div&gt;&#xA; &#xA;             &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1.png 1200w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1-250x144.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1-700x404.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1-768x444.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1-120x69.png 120w&#34; sizes=&#34;(max-width: 1200px) 100vw, 1200px&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;div&gt;&#xA;             &#xA;                 &lt;p&gt;&lt;b&gt;Nour is a Security Engineer at Spotify New York – juggling her busy day job with completing her Masters in Cyber Security and looking after her 11-month-old daughter, Leya. &lt;/b&gt;&lt;/p&gt;&#xA;             &lt;/div&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;blockquote&gt;&lt;p&gt;6:00am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;These days, I don’t need an alarm clock – I get woken up bright and early by my daughter! I live in Jersey City, just across the river from the Spotify NY office, and often used to take the ferry into work. But now, there’s no need to commute – instead, I squeeze in an hour of yoga whilst Leya is entertained by her dad. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;7:30am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I work as a Security Engineer in the Product Security team, which involves a lot of collaboration with colleagues in Sweden, so I start my day early to bridge the gap between the two time zones. My role really differs from project to project and from phase to phase of projects – some weeks will be mostly consultancy and design work, whereas others will be almost all programming. For instance, when Spotify acquired the podcasting platform Anchor, I did their security assessment, enumerated their issues and prioritized what to tackle first. Then, I put on my engineer hat and embedded with them for three weeks – getting hands-on, working through the issues that needed fixing and making sure their security was completely up to par.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Things are just as varied when it comes to big internal development projects, like the Security Tiers project we rolled out last quarter. Here, the goal was to shift to a more targeted approach in addressing security risks at Spotify. I worked across every phase, from design and architecture to implementation – taking on the initial detective work, finding ways to automate our information and assigning products with their appropriate security tier. It was a lot of work and very complex at times. But being involved across all the different phases definitely kept things interesting! &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;12:00 noon&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Twice a week, my team has a virtual &lt;em&gt;fika&lt;/em&gt; (coffee break) to help us all stay connected while we’re working remotely. We also have a monthly get-together, like a baking challenge, happy hour or yoga session. I really miss the ‘water cooler chat’ that comes with working in an office. But being at home means I get to see much more of Leya – most days, she’s looked after by my mum who lives in the next block, so I stop by and take her for a walk at lunchtime. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;1:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My afternoons tend to be less meeting-heavy than my mornings, so I get more focus time to spend on things like coding and reviewing RFCs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;4:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I finish up around 4pm, collect Leya and head to the park – the weather’s so nice at the moment and there’s lots of other babies there for her to look at. Then it’s home for dinner and a bit more playtime, although some days I need to study too – I’m doing a Master’s degree in Cyber Security at NYU and I’m just five weeks away from graduating, so right now it’s the final push! &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On nights when I can just kick back and relax, my husband and I usually play cards, read or watch something on Netflix. I also make a huge effort to keep in touch with my family back in Syria – I was lucky enough to escape the war and come here on a scholarship, but I have plenty of loved ones still living there. And I’m so grateful to &lt;a href=&#34;https://jusoorsyria.com/&#34;&gt;Jussor&lt;/a&gt;, an amazing organization that funded my education in the US (please support them if you can!) – without their help, I wouldn’t be here in New York or doing what I do at Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;111&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-250x40.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-768x121.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-120x19.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering.png 1525w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;583&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-700x583.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-700x583.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-250x208.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-768x640.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-120x100.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1.png 1520w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;&#xA;&#xA;         Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/security/&#34; rel=&#34;tag&#34;&gt;security&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/nour-daoud-bosing-security-engineer/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Nour is a Security Engineer at Spotify New York – juggling her busy day job with completing her Masters in Cyber Security and looking after her 10-month-old daughter, Leya.</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Nour Daoud Bösing: Security Engineer&#xA;</title>
    <updated>2021-04-26T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-26:/nour-daoud-bosing-security-engineer/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-4531&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;        &#xA;         &lt;div&gt;&#xA;            &lt;div&gt;&#xA;            &lt;h2&gt;Putting the Spotlight on our technical employees&lt;/h2&gt;&#xA;    &lt;p&gt;My beat is a blog series that turns the spotlight towards technical employees across various desciplines and roles to showcase what a typical day as a Spotifier consists of.&lt;/p&gt;&#xA;            &lt;/div&gt;&#xA; &#xA;             &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1.png 1200w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1-250x144.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1-700x404.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1-768x444.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1-120x69.png 120w&#34; sizes=&#34;(max-width: 1200px) 100vw, 1200px&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;div&gt;&#xA;             &#xA;                 &lt;p&gt;&lt;b&gt;Nour is a Security Engineer at Spotify New York – juggling her busy day job with completing her Masters in Cyber Security and looking after her 11-month-old daughter, Leya. &lt;/b&gt;&lt;/p&gt;&#xA;             &lt;/div&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;blockquote&gt;&lt;p&gt;6:00am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;These days, I don’t need an alarm clock – I get woken up bright and early by my daughter! I live in Jersey City, just across the river from the Spotify NY office, and often used to take the ferry into work. But now, there’s no need to commute – instead, I squeeze in an hour of yoga whilst Leya is entertained by her dad. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;7:30am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I work as a Security Engineer in the Product Security team, which involves a lot of collaboration with colleagues in Sweden, so I start my day early to bridge the gap between the two time zones. My role really differs from project to project and from phase to phase of projects – some weeks will be mostly consultancy and design work, whereas others will be almost all programming. For instance, when Spotify acquired the podcasting platform Anchor, I did their security assessment, enumerated their issues and prioritized what to tackle first. Then, I put on my engineer hat and embedded with them for three weeks – getting hands-on, working through the issues that needed fixing and making sure their security was completely up to par.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Things are just as varied when it comes to big internal development projects, like the Security Tiers project we rolled out last quarter. Here, the goal was to shift to a more targeted approach in addressing security risks at Spotify. I worked across every phase, from design and architecture to implementation – taking on the initial detective work, finding ways to automate our information and assigning products with their appropriate security tier. It was a lot of work and very complex at times. But being involved across all the different phases definitely kept things interesting! &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;12:00 noon&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Twice a week, my team has a virtual &lt;em&gt;fika&lt;/em&gt; (coffee break) to help us all stay connected while we’re working remotely. We also have a monthly get-together, like a baking challenge, happy hour or yoga session. I really miss the ‘water cooler chat’ that comes with working in an office. But being at home means I get to see much more of Leya – most days, she’s looked after by my mum who lives in the next block, so I stop by and take her for a walk at lunchtime. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;1:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My afternoons tend to be less meeting-heavy than my mornings, so I get more focus time to spend on things like coding and reviewing RFCs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;4:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I finish up around 4pm, collect Leya and head to the park – the weather’s so nice at the moment and there’s lots of other babies there for her to look at. Then it’s home for dinner and a bit more playtime, although some days I need to study too – I’m doing a Master’s degree in Cyber Security at NYU and I’m just five weeks away from graduating, so right now it’s the final push! &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On nights when I can just kick back and relax, my husband and I usually play cards, read or watch something on Netflix. I also make a huge effort to keep in touch with my family back in Syria – I was lucky enough to escape the war and come here on a scholarship, but I have plenty of loved ones still living there. And I’m so grateful to &lt;a href=&#34;https://jusoorsyria.com/&#34;&gt;Jussor&lt;/a&gt;, an amazing organization that funded my education in the US (please support them if you can!) – without their help, I wouldn’t be here in New York or doing what I do at Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;111&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-250x40.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-768x121.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-120x19.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering.png 1525w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;583&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-700x583.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-700x583.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-250x208.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-768x640.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-120x100.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1.png 1520w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;&#xA;&#xA;         Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/security/&#34; rel=&#34;tag&#34;&gt;security&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/nour-daoud-bosing-security-engineer/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Nour-edit-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Nour is a Security Engineer at Spotify New York – juggling her busy day job with completing her Masters in Cyber Security and looking after her 10-month-old daughter, Leya.</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Nour Daoud Bösing: Security Engineer&#xA;</title>
    <updated>2021-04-26T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-26:/2021/04/26/nour-daoud-bosing-security-engineer/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-4531&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;         &#xA;         &lt;div&gt;&#xA;             &lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Nour-edit-1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Nour-edit-1.png 1200w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Nour-edit-1-250x144.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Nour-edit-1-700x404.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Nour-edit-1-768x444.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Nour-edit-1-120x69.png 120w&#34; sizes=&#34;(max-width: 1200px) 100vw, 1200px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/04/Nour-edit-1.png&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;p&gt;&lt;b&gt;Nour is a Security Engineer at Spotify New York – juggling her busy day job with completing her Masters in Cyber Security and looking after her 11-month-old daughter, Leya. &lt;/b&gt;&lt;/p&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;blockquote&gt;&lt;p&gt;6:00am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;These days, I don’t need an alarm clock – I get woken up bright and early by my daughter! I live in Jersey City, just across the river from the Spotify NY office, and often used to take the ferry into work. But now, there’s no need to commute – instead, I squeeze in an hour of yoga whilst Leya is entertained by her dad. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;7:30am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I work as a Security Engineer in the Product Security team, which involves a lot of collaboration with colleagues in Sweden, so I start my day early to bridge the gap between the two time zones. My role really differs from project to project and from phase to phase of projects – some weeks will be mostly consultancy and design work, whereas others will be almost all programming. For instance, when Spotify acquired the podcasting platform Anchor, I did their security assessment, enumerated their issues and prioritized what to tackle first. Then, I put on my engineer hat and embedded with them for three weeks – getting hands-on, working through the issues that needed fixing and making sure their security was completely up to par.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Things are just as varied when it comes to big internal development projects, like the Security Tiers project we rolled out last quarter. Here, the goal was to shift to a more targeted approach in addressing security risks at Spotify. I worked across every phase, from design and architecture to implementation – taking on the initial detective work, finding ways to automate our information and assigning products with their appropriate security tier. It was a lot of work and very complex at times. But being involved across all the different phases definitely kept things interesting! &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;12:00 noon&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Twice a week, my team has a virtual &lt;em&gt;fika&lt;/em&gt; (coffee break) to help us all stay connected while we’re working remotely. We also have a monthly get-together, like a baking challenge, happy hour or yoga session. I really miss the ‘water cooler chat’ that comes with working in an office. But being at home means I get to see much more of Leya – most days, she’s looked after by my mum who lives in the next block, so I stop by and take her for a walk at lunchtime. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;1:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My afternoons tend to be less meeting-heavy than my mornings, so I get more focus time to spend on things like coding and reviewing RFCs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;4:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I finish up around 4pm, collect Leya and head to the park – the weather’s so nice at the moment and there’s lots of other babies there for her to look at. Then it’s home for dinner and a bit more playtime, although some days I need to study too – I’m doing a Master’s degree in Cyber Security at NYU and I’m just five weeks away from graduating, so right now it’s the final push! &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On nights when I can just kick back and relax, my husband and I usually play cards, read or watch something on Netflix. I also make a huge effort to keep in touch with my family back in Syria – I was lucky enough to escape the war and come here on a scholarship, but I have plenty of loved ones still living there. And I’m so grateful to &lt;a href=&#34;https://jusoorsyria.com/&#34;&gt;Jussor&lt;/a&gt;, an amazing organization that funded my education in the US (please support them if you can!) – without their help, I wouldn’t be here in New York or doing what I do at Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;111&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-250x40.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-768x121.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-120x19.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering.png 1525w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;583&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-700x583.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-700x583.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-250x208.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-768x640.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1-120x100.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/MyBeat_Nour-Daoud-graph-1.png 1520w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;         &#xA;         &#xA;&#xA;         &lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/04/26/nour-daoud-bosing-security-engineer/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Nour-edit-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Nour is a Security Engineer at Spotify New York – juggling her busy day job with completing her Masters in Cyber Security and looking after her 10-month-old daughter, Leya.</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Rethinking Spotify Search&#xA;</title>
    <updated>2021-04-15T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-15:/2021/04/rethinking-spotify-search/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;April 15, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/04/rethinking-spotify-search/&#34; title=&#34;Rethinking Spotify Search&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Search-gif.gif&#34; alt=&#34;&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;h2&gt;Search @ Spotify&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;Search is a well-established functionality across different industries, devices, and applications. When users come to any kind of search, they already have something in mind, whether they come looking for one thing in particular or are open to becoming inspired. Spotify Search is no exception, helping a vast majority of users find joy through search, regardless of the language or method used to search, both typed and spoken.&lt;/p&gt;&lt;p&gt;Since Spotify’s launch in 2008, Search has been a core piece of the user journey, and it’s where we’ve increased our investment and focus over time. Earlier on, only a small group of people were responsible for the end-to-end experience that encompassed the infrastructure that held Search together, the backend system that powered the personalized results, and the desktop and mobile interface that delighted our users. Spotify continued to grow, reaching 345 million users in December 2020, and Search grew with it. This post details the challenges that emerged as teams began to scale.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;When more doesn’t mean more&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the beginning of 2019, we already had a handful of teams working across the Search infrastructure, as well as the machine learning and backend systems. Given the increasing number of user issues we were trying to solve at the time, we decided to organize ourselves around these problems. But we quickly learned that problems come and go, new problems arise, and priorities can change unexpectedly. This meant that we were creating new teams all the time (well, not all the time, but almost every quarter).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;352&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-700x352.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-700x352.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-250x126.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-768x386.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-1536x772.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-120x60.jpg 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;2020 was the year for us to try something new. We decided to take a different approach to organizing our teams. Each team would become responsible for one piece of our Search stack — meaning one team would be responsible for getting data into Search, another team would be responsible for the quality of personalized Search results, another team would be responsible for our Search APIs, another team for insights, and finally, a team would be focused on our company bet, podcast Search. You might be wondering, “&lt;em&gt;If each team were responsible for one part of the Search stack, how would we solve problems that required the expertise of different parts of our time around specific issues such as query intent, retrieval, and ranking?”&lt;/em&gt; That is a great question — one that was highlighted as one of the original risks when we formed this  organization. But we believed that nurturing our tech stack was the way to go. And guess what? We learned new things, which made us reconsider old ways of thinking. Or better, made us want to try something different.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;352&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-700x352.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-700x352.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-250x126.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-768x386.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-1536x772.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-120x60.jpg 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By the end of 2020, we had grown our internal efforts by more than 100% compared to 2018, and 500% compared to 2016. But we were not seeing the same boom in terms of speed of delivery, experimentation, and number of problems we were solving. Each time a team outside our Search area wanted to collaborate with us or use our systems to solve their problems, they would need to involve multiple experts from each Search stack part, meaning sometimes five different Search teams. There were also varied rhythms and maturities among teams and systems, despite having the same priorities.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We were experiencing these problems on a daily basis, but we weren’t sure if we were blindsided by our previous learnings and our own beliefs or if we were biased because of the people we asked for feedback. We decided to check some numbers. Supported by Spotify’s Chief Architect Niklas Gustavsson’s latest research, we focused on two data points: system centrality and system congestion. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;2101&#34; height=&#34;879&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15.jpg 2101w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-250x105.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-700x293.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-768x321.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-1536x643.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-2048x857.jpg 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-120x50.jpg 120w&#34; sizes=&#34;(max-width: 2101px) 100vw, 2101px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the image above, congestion represents the unique teams contributing to the codebase over a period of time. Centrality is subdivided into two buckets: indegree centrality — how many teams have a dependency on a given service; and outdegree centrality — how many teams the service depends on. Search was in high demand across all these dimensions. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Search as a platform&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Great — we received feedback from users, from other teams, from our own Search teams, and we also had data from our own systems. Was there something else we could use to have a better understanding and make a more informed decision on how to make our Search better? We knew that users from different markets were experiencing different levels of Search satisfaction, and that the forecast was that new-user growth would come from outside North America and Western Europe. We also knew that we had dedicated Spotify teams focused on improving the overall experience for these new markets. Spotify had, as well, much experience building internal tools and platforms to scale our business and improve productivity. So we wondered, should we build a Search platform? We believed so.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;From user obsession to developer satisfaction&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With insights about Spotify’s growth, system centrality and system congestion, along with team and user feedback, we decided, in 2021, to evolve our organization to try to solve for the needs of both external (Spotify end users) and internal (Spotify developers) users. In order to accomplish that, we created two groups inside our Search area —  one focused on our personalized core Search experience, with Spotify end user satisfaction as the measure of success, and the other aiming to improve Spotify developer happiness, encouraging experimentation while maintaining the services SLOs. Below you can see what our Search organization looks like today.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;352&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-700x352.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-700x352.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-250x126.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-768x386.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-1536x772.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-120x60.jpg 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While these two groups don’t necessarily share the same metrics, we believe that they do share the same goal: “&lt;em&gt;[T]o unlock the potential of human creativity — by giving a million creative artists the opportunity to live off their art and billions of fans the opportunity to enjoy and be inspired by it.&lt;/em&gt;” Making these groups autonomous and independent in ways of working and goal setting — leading with context instead of control — is what we believe makes us better prepared to support Spotify users and growth.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Katarina Berg, Chief HR Officer, says “&lt;em&gt;Growth is our mantra&lt;/em&gt;” and “&lt;em&gt;Change is our constant.”&lt;/em&gt; This means that our Search journey will not end here. Nor will this be the last iteration of our organization. But we are eager to give it a try, learn new things, tweak them, and try again —  especially now that we are expanding into more markets and languages, investing in podcast topic search, podcast understanding, and retrieval, and rolling out many other new features in the future.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Ang Li et al., “Search Mindsets:&lt;em&gt; &lt;/em&gt;Understanding Focused and Non-Focused Information Seeking  in&lt;em&gt; &lt;/em&gt;Music Search,” &lt;a href=&#34;https://research.atspotify.com/publications/search-mindsets-understanding-focused-and-non-focused-information-needs-in-music-search/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;publication&lt;/a&gt; &lt;em&gt;WWW ’19: The World Wide Web Conference&lt;/em&gt; (May 2019): 2971–2977. &lt;a href=&#34;https://doi.org/10.1145/3308558.3313627&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://doi.org/10.1145/3308558.3313627&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Shareholder Letter Q4 2020” (February 3, 2021) &lt;a href=&#34;https://s22.q4cdn.com/540910603/files/doc_financials/2020/q4/Shareholder-Letter-Q4-2020_FINAL.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://s22.q4cdn.com/540910603/files/doc_financials/2020/q4/Shareholder-Letter-Q4-2020_FINAL.pdf&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Spotify — Company Info,” For the Record, &lt;a href=&#34;https://newsroom.spotify.com/company-info/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://newsroom.spotify.com/company-info/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“The Band Manifesto.” &lt;a href=&#34;https://www.spotifyjobs.com/culture/the-band-manifesto&#34;&gt;https://www.spotifyjobs.com/culture/the-band-manifesto&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Spotify Expands International Footprint, Bringing Audio to 80+ New Markets,” For the Record (February 22, 2021).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Today’s Spotify Stream On Announcements,” For the Record (February 22, 2021) &lt;a href=&#34;https://newsroom.spotify.com/2021-02-22/todays-spotify-stream-on-announcements/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://newsroom.spotify.com/2021-02-22/todays-spotify-stream-on-announcements/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt; “SPOTIFY PODCASTS DATASET.” &lt;a href=&#34;https://podcastsdataset.byspotify.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://podcastsdataset.byspotify.com/&lt;/a&gt;&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/04/rethinking-spotify-search/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Search-gif.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">Search @ Spotify Search is a well-established functionality across different industries, devices, and applications. When users come to any kind of search, they already have something in mind, whether they come looking for one thing in particular or are open to becoming inspired. Spotify Search is</summary>
    <author>
      <name>Published by Hugo Galvão and Daniel Doro</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Rethinking Spotify Search&#xA;</title>
    <updated>2021-04-15T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-15:/rethinking-spotify-search/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;April 15, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/rethinking-spotify-search/&#34; title=&#34;Rethinking Spotify Search&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Search-gif.gif&#34; alt=&#34;&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;h2&gt;Search @ Spotify&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;Search is a well-established functionality across different industries, devices, and applications. When users come to any kind of search, they already have something in mind, whether they come looking for one thing in particular or are open to becoming inspired. Spotify Search is no exception, helping a vast majority of users find joy through search, regardless of the language or method used to search, both typed and spoken.&lt;/p&gt;&lt;p&gt;Since Spotify’s launch in 2008, Search has been a core piece of the user journey, and it’s where we’ve increased our investment and focus over time. Earlier on, only a small group of people were responsible for the end-to-end experience that encompassed the infrastructure that held Search together, the backend system that powered the personalized results, and the desktop and mobile interface that delighted our users. Spotify continued to grow, reaching 345 million users in December 2020, and Search grew with it. This post details the challenges that emerged as teams began to scale.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;When more doesn’t mean more&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the beginning of 2019, we already had a handful of teams working across the Search infrastructure, as well as the machine learning and backend systems. Given the increasing number of user issues we were trying to solve at the time, we decided to organize ourselves around these problems. But we quickly learned that problems come and go, new problems arise, and priorities can change unexpectedly. This meant that we were creating new teams all the time (well, not all the time, but almost every quarter).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;352&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-700x352.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-700x352.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-250x126.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-768x386.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-1536x772.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-120x60.jpg 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;2020 was the year for us to try something new. We decided to take a different approach to organizing our teams. Each team would become responsible for one piece of our Search stack — meaning one team would be responsible for getting data into Search, another team would be responsible for the quality of personalized Search results, another team would be responsible for our Search APIs, another team for insights, and finally, a team would be focused on our company bet, podcast Search. You might be wondering, “&lt;em&gt;If each team were responsible for one part of the Search stack, how would we solve problems that required the expertise of different parts of our time around specific issues such as query intent, retrieval, and ranking?”&lt;/em&gt; That is a great question — one that was highlighted as one of the original risks when we formed this  organization. But we believed that nurturing our tech stack was the way to go. And guess what? We learned new things, which made us reconsider old ways of thinking. Or better, made us want to try something different.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;352&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-700x352.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-700x352.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-250x126.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-768x386.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-1536x772.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-120x60.jpg 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By the end of 2020, we had grown our internal efforts by more than 100% compared to 2018, and 500% compared to 2016. But we were not seeing the same boom in terms of speed of delivery, experimentation, and number of problems we were solving. Each time a team outside our Search area wanted to collaborate with us or use our systems to solve their problems, they would need to involve multiple experts from each Search stack part, meaning sometimes five different Search teams. There were also varied rhythms and maturities among teams and systems, despite having the same priorities.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We were experiencing these problems on a daily basis, but we weren’t sure if we were blindsided by our previous learnings and our own beliefs or if we were biased because of the people we asked for feedback. We decided to check some numbers. Supported by Spotify’s Chief Architect Niklas Gustavsson’s latest research, we focused on two data points: system centrality and system congestion. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;2101&#34; height=&#34;879&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15.jpg 2101w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-250x105.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-700x293.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-768x321.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-1536x643.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-2048x857.jpg 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-120x50.jpg 120w&#34; sizes=&#34;(max-width: 2101px) 100vw, 2101px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the image above, congestion represents the unique teams contributing to the codebase over a period of time. Centrality is subdivided into two buckets: indegree centrality — how many teams have a dependency on a given service; and outdegree centrality — how many teams the service depends on. Search was in high demand across all these dimensions. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Search as a platform&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Great — we received feedback from users, from other teams, from our own Search teams, and we also had data from our own systems. Was there something else we could use to have a better understanding and make a more informed decision on how to make our Search better? We knew that users from different markets were experiencing different levels of Search satisfaction, and that the forecast was that new-user growth would come from outside North America and Western Europe. We also knew that we had dedicated Spotify teams focused on improving the overall experience for these new markets. Spotify had, as well, much experience building internal tools and platforms to scale our business and improve productivity. So we wondered, should we build a Search platform? We believed so.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;From user obsession to developer satisfaction&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With insights about Spotify’s growth, system centrality and system congestion, along with team and user feedback, we decided, in 2021, to evolve our organization to try to solve for the needs of both external (Spotify end users) and internal (Spotify developers) users. In order to accomplish that, we created two groups inside our Search area —  one focused on our personalized core Search experience, with Spotify end user satisfaction as the measure of success, and the other aiming to improve Spotify developer happiness, encouraging experimentation while maintaining the services SLOs. Below you can see what our Search organization looks like today.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;352&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-700x352.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-700x352.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-250x126.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-768x386.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-1536x772.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-120x60.jpg 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While these two groups don’t necessarily share the same metrics, we believe that they do share the same goal: “&lt;em&gt;[T]o unlock the potential of human creativity — by giving a million creative artists the opportunity to live off their art and billions of fans the opportunity to enjoy and be inspired by it.&lt;/em&gt;” Making these groups autonomous and independent in ways of working and goal setting — leading with context instead of control — is what we believe makes us better prepared to support Spotify users and growth.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Katarina Berg, Chief HR Officer, says “&lt;em&gt;Growth is our mantra&lt;/em&gt;” and “&lt;em&gt;Change is our constant.”&lt;/em&gt; This means that our Search journey will not end here. Nor will this be the last iteration of our organization. But we are eager to give it a try, learn new things, tweak them, and try again —  especially now that we are expanding into more markets and languages, investing in podcast topic search, podcast understanding, and retrieval, and rolling out many other new features in the future.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Ang Li et al., “Search Mindsets:&lt;em&gt; &lt;/em&gt;Understanding Focused and Non-Focused Information Seeking  in&lt;em&gt; &lt;/em&gt;Music Search,” &lt;a href=&#34;https://research.atspotify.com/publications/search-mindsets-understanding-focused-and-non-focused-information-needs-in-music-search/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;publication&lt;/a&gt; &lt;em&gt;WWW ’19: The World Wide Web Conference&lt;/em&gt; (May 2019): 2971–2977. &lt;a href=&#34;https://doi.org/10.1145/3308558.3313627&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://doi.org/10.1145/3308558.3313627&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Shareholder Letter Q4 2020” (February 3, 2021) &lt;a href=&#34;https://s22.q4cdn.com/540910603/files/doc_financials/2020/q4/Shareholder-Letter-Q4-2020_FINAL.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://s22.q4cdn.com/540910603/files/doc_financials/2020/q4/Shareholder-Letter-Q4-2020_FINAL.pdf&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Spotify — Company Info,” For the Record, &lt;a href=&#34;https://newsroom.spotify.com/company-info/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://newsroom.spotify.com/company-info/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“The Band Manifesto.” &lt;a href=&#34;https://www.spotifyjobs.com/culture/the-band-manifesto&#34;&gt;https://www.spotifyjobs.com/culture/the-band-manifesto&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Spotify Expands International Footprint, Bringing Audio to 80+ New Markets,” For the Record (February 22, 2021).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Today’s Spotify Stream On Announcements,” For the Record (February 22, 2021) &lt;a href=&#34;https://newsroom.spotify.com/2021-02-22/todays-spotify-stream-on-announcements/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://newsroom.spotify.com/2021-02-22/todays-spotify-stream-on-announcements/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt; “SPOTIFY PODCASTS DATASET.” &lt;a href=&#34;https://podcastsdataset.byspotify.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://podcastsdataset.byspotify.com/&lt;/a&gt;&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/rethinking-spotify-search/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Search-gif.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">Search @ Spotify Search is a well-established functionality across different industries, devices, and applications. When users come to any kind of search, they already have something in mind, whether they come looking for one thing in particular or are open to becoming inspired. Spotify Search is</summary>
    <author>
      <name>Published by Hugo Galvão and Daniel Doro</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Rethinking Spotify Search&#xA;</title>
    <updated>2021-04-15T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-15:/2021/04/15/rethinking-spotify-search/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;April 15, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/04/15/rethinking-spotify-search/&#34; title=&#34;Rethinking Spotify Search&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Search-gif.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/04/Search-gif.gif&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;h2&gt;Search @ Spotify&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;Search is a well-established functionality across different industries, devices, and applications. When users come to any kind of search, they already have something in mind, whether they come looking for one thing in particular or are open to becoming inspired. Spotify Search is no exception, helping a vast majority of users find joy through search, regardless of the language or method used to search, both typed and spoken.&lt;/p&gt;&lt;p&gt;Since Spotify’s launch in 2008, Search has been a core piece of the user journey, and it’s where we’ve increased our investment and focus over time. Earlier on, only a small group of people were responsible for the end-to-end experience that encompassed the infrastructure that held Search together, the backend system that powered the personalized results, and the desktop and mobile interface that delighted our users. Spotify continued to grow, reaching 345 million users in December 2020, and Search grew with it. This post details the challenges that emerged as teams began to scale.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;When more doesn’t mean more&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the beginning of 2019, we already had a handful of teams working across the Search infrastructure, as well as the machine learning and backend systems. Given the increasing number of user issues we were trying to solve at the time, we decided to organize ourselves around these problems. But we quickly learned that problems come and go, new problems arise, and priorities can change unexpectedly. This meant that we were creating new teams all the time (well, not all the time, but almost every quarter).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;352&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image5-700x352.jpg&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image5-700x352.jpg 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image5-250x126.jpg 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image5-768x386.jpg 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image5-1536x772.jpg 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image5-120x60.jpg 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image5.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;2020 was the year for us to try something new. We decided to take a different approach to organizing our teams. Each team would become responsible for one piece of our Search stack — meaning one team would be responsible for getting data into Search, another team would be responsible for the quality of personalized Search results, another team would be responsible for our Search APIs, another team for insights, and finally, a team would be focused on our company bet, podcast Search. You might be wondering, “&lt;em&gt;If each team were responsible for one part of the Search stack, how would we solve problems that required the expertise of different parts of our time around specific issues such as query intent, retrieval, and ranking?”&lt;/em&gt; That is a great question — one that was highlighted as one of the original risks when we formed this  organization. But we believed that nurturing our tech stack was the way to go. And guess what? We learned new things, which made us reconsider old ways of thinking. Or better, made us want to try something different.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;352&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image2-700x352.jpg&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image2-700x352.jpg 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image2-250x126.jpg 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image2-768x386.jpg 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image2-1536x772.jpg 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image2-120x60.jpg 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image2.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By the end of 2020, we had grown our internal efforts by more than 100% compared to 2018, and 500% compared to 2016. But we were not seeing the same boom in terms of speed of delivery, experimentation, and number of problems we were solving. Each time a team outside our Search area wanted to collaborate with us or use our systems to solve their problems, they would need to involve multiple experts from each Search stack part, meaning sometimes five different Search teams. There were also varied rhythms and maturities among teams and systems, despite having the same priorities.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We were experiencing these problems on a daily basis, but we weren’t sure if we were blindsided by our previous learnings and our own beliefs or if we were biased because of the people we asked for feedback. We decided to check some numbers. Supported by Spotify’s Chief Architect Niklas Gustavsson’s latest research, we focused on two data points: system centrality and system congestion. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;2101&#34; height=&#34;879&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Frame-15.jpg&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Frame-15.jpg 2101w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Frame-15-250x105.jpg 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Frame-15-700x293.jpg 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Frame-15-768x321.jpg 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Frame-15-1536x643.jpg 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Frame-15-2048x857.jpg 2048w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Frame-15-120x50.jpg 120w&#34; sizes=&#34;(max-width: 2101px) 100vw, 2101px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the image above, congestion represents the unique teams contributing to the codebase over a period of time. Centrality is subdivided into two buckets: indegree centrality — how many teams have a dependency on a given service; and outdegree centrality — how many teams the service depends on. Search was in high demand across all these dimensions. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Search as a platform&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Great — we received feedback from users, from other teams, from our own Search teams, and we also had data from our own systems. Was there something else we could use to have a better understanding and make a more informed decision on how to make our Search better? We knew that users from different markets were experiencing different levels of Search satisfaction, and that the forecast was that new-user growth would come from outside North America and Western Europe. We also knew that we had dedicated Spotify teams focused on improving the overall experience for these new markets. Spotify had, as well, much experience building internal tools and platforms to scale our business and improve productivity. So we wondered, should we build a Search platform? We believed so.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;From user obsession to developer satisfaction&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With insights about Spotify’s growth, system centrality and system congestion, along with team and user feedback, we decided, in 2021, to evolve our organization to try to solve for the needs of both external (Spotify end users) and internal (Spotify developers) users. In order to accomplish that, we created two groups inside our Search area —  one focused on our personalized core Search experience, with Spotify end user satisfaction as the measure of success, and the other aiming to improve Spotify developer happiness, encouraging experimentation while maintaining the services SLOs. Below you can see what our Search organization looks like today.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;352&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-700x352.jpg&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-700x352.jpg 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-250x126.jpg 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-768x386.jpg 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-1536x772.jpg 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-120x60.jpg 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While these two groups don’t necessarily share the same metrics, we believe that they do share the same goal: “&lt;em&gt;[T]o unlock the potential of human creativity — by giving a million creative artists the opportunity to live off their art and billions of fans the opportunity to enjoy and be inspired by it.&lt;/em&gt;” Making these groups autonomous and independent in ways of working and goal setting — leading with context instead of control — is what we believe makes us better prepared to support Spotify users and growth.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Katarina Berg, Chief HR Officer, says “&lt;em&gt;Growth is our mantra&lt;/em&gt;” and “&lt;em&gt;Change is our constant.”&lt;/em&gt; This means that our Search journey will not end here. Nor will this be the last iteration of our organization. But we are eager to give it a try, learn new things, tweak them, and try again —  especially now that we are expanding into more markets and languages, investing in podcast topic search, podcast understanding, and retrieval, and rolling out many other new features in the future.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Ang Li et al., “Search Mindsets:&lt;em&gt; &lt;/em&gt;Understanding Focused and Non-Focused Information Seeking  in&lt;em&gt; &lt;/em&gt;Music Search,” &lt;a href=&#34;https://research.atspotify.com/publications/search-mindsets-understanding-focused-and-non-focused-information-needs-in-music-search/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;publication&lt;/a&gt; &lt;em&gt;WWW ’19: The World Wide Web Conference&lt;/em&gt; (May 2019): 2971–2977. &lt;a href=&#34;https://doi.org/10.1145/3308558.3313627&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://doi.org/10.1145/3308558.3313627&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Shareholder Letter Q4 2020” (February 3, 2021) &lt;a href=&#34;https://s22.q4cdn.com/540910603/files/doc_financials/2020/q4/Shareholder-Letter-Q4-2020_FINAL.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://s22.q4cdn.com/540910603/files/doc_financials/2020/q4/Shareholder-Letter-Q4-2020_FINAL.pdf&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Spotify — Company Info,” For the Record, &lt;a href=&#34;https://newsroom.spotify.com/company-info/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://newsroom.spotify.com/company-info/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“The Band Manifesto.” &lt;a href=&#34;https://www.spotifyjobs.com/culture/the-band-manifesto&#34;&gt;https://www.spotifyjobs.com/culture/the-band-manifesto&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Spotify Expands International Footprint, Bringing Audio to 80+ New Markets,” For the Record (February 22, 2021).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Today’s Spotify Stream On Announcements,” For the Record (February 22, 2021) &lt;a href=&#34;https://newsroom.spotify.com/2021-02-22/todays-spotify-stream-on-announcements/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://newsroom.spotify.com/2021-02-22/todays-spotify-stream-on-announcements/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt; “SPOTIFY PODCASTS DATASET.” &lt;a href=&#34;https://podcastsdataset.byspotify.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://podcastsdataset.byspotify.com/&lt;/a&gt;&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/04/15/rethinking-spotify-search/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/Search-gif.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">Search @ Spotify Search is a well-established functionality across different industries, devices, and applications. When users come to any kind of search, they already have something in mind, whether they come looking for one thing in particular or are open to becoming inspired. Spotify Search is</summary>
    <author>
      <name>Published by Hugo Galvão and Daniel Doro</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Rethinking Spotify Search&#xA;</title>
    <updated>2021-04-15T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-15:/rethinking-spotify-search/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;April 15, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/rethinking-spotify-search/&#34; title=&#34;Rethinking Spotify Search&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Search-gif.gif&#34; alt=&#34;&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;h2&gt;Search @ Spotify&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;Search is a well-established functionality across different industries, devices, and applications. When users come to any kind of search, they already have something in mind, whether they come looking for one thing in particular or are open to becoming inspired. Spotify Search is no exception, helping a vast majority of users find joy through search, regardless of the language or method used to search, both typed and spoken.&lt;/p&gt;&lt;p&gt;Since Spotify’s launch in 2008, Search has been a core piece of the user journey, and it’s where we’ve increased our investment and focus over time. Earlier on, only a small group of people were responsible for the end-to-end experience that encompassed the infrastructure that held Search together, the backend system that powered the personalized results, and the desktop and mobile interface that delighted our users. Spotify continued to grow, reaching 345 million users in December 2020, and Search grew with it. This post details the challenges that emerged as teams began to scale.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;When more doesn’t mean more&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the beginning of 2019, we already had a handful of teams working across the Search infrastructure, as well as the machine learning and backend systems. Given the increasing number of user issues we were trying to solve at the time, we decided to organize ourselves around these problems. But we quickly learned that problems come and go, new problems arise, and priorities can change unexpectedly. This meant that we were creating new teams all the time (well, not all the time, but almost every quarter).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;352&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-700x352.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-700x352.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-250x126.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-768x386.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-1536x772.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5-120x60.jpg 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image5.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;2020 was the year for us to try something new. We decided to take a different approach to organizing our teams. Each team would become responsible for one piece of our Search stack — meaning one team would be responsible for getting data into Search, another team would be responsible for the quality of personalized Search results, another team would be responsible for our Search APIs, another team for insights, and finally, a team would be focused on our company bet, podcast Search. You might be wondering, “&lt;em&gt;If each team were responsible for one part of the Search stack, how would we solve problems that required the expertise of different parts of our time around specific issues such as query intent, retrieval, and ranking?”&lt;/em&gt; That is a great question — one that was highlighted as one of the original risks when we formed this  organization. But we believed that nurturing our tech stack was the way to go. And guess what? We learned new things, which made us reconsider old ways of thinking. Or better, made us want to try something different.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;352&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-700x352.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-700x352.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-250x126.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-768x386.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-1536x772.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2-120x60.jpg 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image2.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By the end of 2020, we had grown our internal efforts by more than 100% compared to 2018, and 500% compared to 2016. But we were not seeing the same boom in terms of speed of delivery, experimentation, and number of problems we were solving. Each time a team outside our Search area wanted to collaborate with us or use our systems to solve their problems, they would need to involve multiple experts from each Search stack part, meaning sometimes five different Search teams. There were also varied rhythms and maturities among teams and systems, despite having the same priorities.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We were experiencing these problems on a daily basis, but we weren’t sure if we were blindsided by our previous learnings and our own beliefs or if we were biased because of the people we asked for feedback. We decided to check some numbers. Supported by Spotify’s Chief Architect Niklas Gustavsson’s latest research, we focused on two data points: system centrality and system congestion. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;2101&#34; height=&#34;879&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15.jpg 2101w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-250x105.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-700x293.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-768x321.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-1536x643.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-2048x857.jpg 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Frame-15-120x50.jpg 120w&#34; sizes=&#34;(max-width: 2101px) 100vw, 2101px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the image above, congestion represents the unique teams contributing to the codebase over a period of time. Centrality is subdivided into two buckets: indegree centrality — how many teams have a dependency on a given service; and outdegree centrality — how many teams the service depends on. Search was in high demand across all these dimensions. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Search as a platform&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Great — we received feedback from users, from other teams, from our own Search teams, and we also had data from our own systems. Was there something else we could use to have a better understanding and make a more informed decision on how to make our Search better? We knew that users from different markets were experiencing different levels of Search satisfaction, and that the forecast was that new-user growth would come from outside North America and Western Europe. We also knew that we had dedicated Spotify teams focused on improving the overall experience for these new markets. Spotify had, as well, much experience building internal tools and platforms to scale our business and improve productivity. So we wondered, should we build a Search platform? We believed so.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;From user obsession to developer satisfaction&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With insights about Spotify’s growth, system centrality and system congestion, along with team and user feedback, we decided, in 2021, to evolve our organization to try to solve for the needs of both external (Spotify end users) and internal (Spotify developers) users. In order to accomplish that, we created two groups inside our Search area —  one focused on our personalized core Search experience, with Spotify end user satisfaction as the measure of success, and the other aiming to improve Spotify developer happiness, encouraging experimentation while maintaining the services SLOs. Below you can see what our Search organization looks like today.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;352&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-700x352.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-700x352.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-250x126.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-768x386.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-1536x772.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-120x60.jpg 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While these two groups don’t necessarily share the same metrics, we believe that they do share the same goal: “&lt;em&gt;[T]o unlock the potential of human creativity — by giving a million creative artists the opportunity to live off their art and billions of fans the opportunity to enjoy and be inspired by it.&lt;/em&gt;” Making these groups autonomous and independent in ways of working and goal setting — leading with context instead of control — is what we believe makes us better prepared to support Spotify users and growth.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Katarina Berg, Chief HR Officer, says “&lt;em&gt;Growth is our mantra&lt;/em&gt;” and “&lt;em&gt;Change is our constant.”&lt;/em&gt; This means that our Search journey will not end here. Nor will this be the last iteration of our organization. But we are eager to give it a try, learn new things, tweak them, and try again —  especially now that we are expanding into more markets and languages, investing in podcast topic search, podcast understanding, and retrieval, and rolling out many other new features in the future.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Ang Li et al., “Search Mindsets:&lt;em&gt; &lt;/em&gt;Understanding Focused and Non-Focused Information Seeking  in&lt;em&gt; &lt;/em&gt;Music Search,” &lt;a href=&#34;https://research.atspotify.com/publications/search-mindsets-understanding-focused-and-non-focused-information-needs-in-music-search/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;publication&lt;/a&gt; &lt;em&gt;WWW ’19: The World Wide Web Conference&lt;/em&gt; (May 2019): 2971–2977. &lt;a href=&#34;https://doi.org/10.1145/3308558.3313627&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://doi.org/10.1145/3308558.3313627&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Shareholder Letter Q4 2020” (February 3, 2021) &lt;a href=&#34;https://s22.q4cdn.com/540910603/files/doc_financials/2020/q4/Shareholder-Letter-Q4-2020_FINAL.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://s22.q4cdn.com/540910603/files/doc_financials/2020/q4/Shareholder-Letter-Q4-2020_FINAL.pdf&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Spotify — Company Info,” For the Record, &lt;a href=&#34;https://newsroom.spotify.com/company-info/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://newsroom.spotify.com/company-info/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“The Band Manifesto.” &lt;a href=&#34;https://www.spotifyjobs.com/culture/the-band-manifesto&#34;&gt;https://www.spotifyjobs.com/culture/the-band-manifesto&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Spotify Expands International Footprint, Bringing Audio to 80+ New Markets,” For the Record (February 22, 2021).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“Today’s Spotify Stream On Announcements,” For the Record (February 22, 2021) &lt;a href=&#34;https://newsroom.spotify.com/2021-02-22/todays-spotify-stream-on-announcements/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://newsroom.spotify.com/2021-02-22/todays-spotify-stream-on-announcements/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt; “SPOTIFY PODCASTS DATASET.” &lt;a href=&#34;https://podcastsdataset.byspotify.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://podcastsdataset.byspotify.com/&lt;/a&gt;&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/backend/&#34; rel=&#34;tag&#34;&gt;backend&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/rethinking-spotify-search/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/Search-gif.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">Search @ Spotify Search is a well-established functionality across different industries, devices, and applications. When users come to any kind of search, they already have something in mind, whether they come looking for one thing in particular or are open to becoming inspired. Spotify Search is</summary>
    <author>
      <name>Published by Hugo Galvão and Daniel Doro</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Building the Future of Our Desktop Apps&#xA;</title>
    <updated>2021-04-07T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-07:/2021/04/building-the-future-of-our-desktop-apps/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;April 7, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/04/building-the-future-of-our-desktop-apps/&#34; title=&#34;Building the Future of Our Desktop Apps&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-700x352.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-1536x771.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-120x60.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;For the past couple of years, we’ve been on a mission to modernize our Spotify clients by creating one single desktop UI for both the Desktop application and the Web Player.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We couldn’t build everything we wanted to for our users with our old setup, so we decided to do something about it.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;In the beginning, there were two clients&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;Towards the end of 2018, our team was the owner of a recently built &lt;a href=&#34;https://open.spotify.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Web Player&lt;/a&gt;, as well as Spotify’s Desktop client. The Desktop was our rich, full-featured experience and the Web Player was a much lighter, simpler experience.&lt;/p&gt;&lt;p&gt;Because the Web Player was implemented with a modern React app architecture, we had success onboarding new engineers to the Web Player code. But those same engineers were having difficulties with the Desktop client, which used a very diverse range of web technologies (thanks to &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_law&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Conway’s law&lt;/a&gt;). Due to having to implement many of the features twice at different levels of complexity while dealing with context switching, we were not shipping new features at the pace we would have liked to.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;In addition, there were accessibility issues in our clients that we needed to solve. We discovered that making our Web Player accessible was going to be a difficult, yet achievable, challenge. Making the Desktop application accessible, in contrast, would be nearly impossible.&lt;/p&gt;&lt;p&gt;We had many discussions on how to solve these problems. The team figured out that converging the clients into a single codebase and user experience would be the best way forward. We considered several approaches and did tech spikes to test many of the ideas — component sharing, feature sharing — always trying to find the right balance between fixing our technical debt problem while continuing to improve the experience for our users.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We knew we were embarking on a long-term project, so our biggest priority was to de-risk delivery and avoid trapping ourselves into a big bang rewrite. We settled on a bold solution: focus on iterating on top of the existing Web Player codebase until it reached a Desktop-grade feature set. Since our Web Player is continuously deployed, we could ship and test with real users every change made towards our final goal.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There were risks, of course. Desktop had (and has) many more users than Web Player, and Spotify’s Desktop client is the place most of Spotify’s “power users” call home. We knew we would have a lot of work to do to bring our Web Player up to those power users’ exacting standards.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, at the beginning of 2021, we have created one maintainable codebase for both of our clients with the high standard of accessibility and speed of development we hoped for.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s talk more in detail about how we turned the idea into reality.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;259&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-700x259.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-700x259.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-250x93.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-768x285.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-1536x569.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-120x44.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;One UI, multiple containers&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Spotify Desktop client is a Windows and Mac native application that uses CEF (&lt;a href=&#34;https://bitbucket.org/chromiumembedded/cef/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Chromium Embedded Framework&lt;/a&gt;) to display a web-based user interface. That’s still true today, but for the previous version of Desktop, every “page” in the client was built as a standalone “app” to run inside its own iframe. This architecture was designed to foster autonomy, allowing multiple teams — and potentially partners — to own the development and maintenance of the features. Eventually, however, one team became responsible for the user interface of the entire application.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-700x701.png&#34; alt=&#34;&#34; width=&#34;450&#34; height=&#34;451&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-700x701.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-250x250.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-150x150.png 150w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-768x769.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-120x120.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7.png 1200w&#34; sizes=&#34;(max-width: 450px) 100vw, 450px&#34;/&gt;&lt;figcaption&gt;Previous architecture (simplified) of the Desktop client. Each page in the application would be sandboxed in an iframe and built in different ways. The UI would access the backend through the native container.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The previous version of the Desktop client had many strengths, including Spotify’s original “killer feature” from its very first client, which would allow &lt;a href=&#34;http://www.csc.kth.se/~gkreitz/spotify-p2p10/spotify-p2p10.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;playback to begin as soon as a listener clicked&lt;/a&gt;. It also boasted a comprehensive set of features we know Spotify listeners value. But, at the same time, this architecture was causing severe friction for developers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;The Web Player’s codebase, however, was considered a much more solid foundation to build upon. It allowed us to develop new features quickly. It was developed with the web in mind, meaning it was small in size, more performant, and worked with various browsers. The client was delivered continuously, allowing changes to get to users almost immediately. We decided, then, to use the Web Player as the starting point for a single user experience shared between the Web Player and Desktop. One of the main challenges we encountered was that this approach would require us to ship and run the Web Player UI with the Desktop container.&lt;/p&gt;&lt;p&gt;The Web Player was also tightly coupled to our web servers, relying on them for all data and authentication. The playback system used by Web Player was not compatible with Desktop. Authentication worked differently — we needed to support our web OAuth login on Web Player and our native login on Desktop. Desktop would also need features its users expect, such as downloading and offline playback, that are not supported by the Web Player.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This concept of running the same user interface on two similar but different infrastructures is what informed the architecture we developed. In order to keep the UI platform agnostic, we built TypeScript Platform APIs that would abstract the different sources of data and different playback stacks, as well as provide helpful information to the user interface about what functionality was available to it. We also rewrote the whole client in TypeScript along the way, as we were rebuilding the experience bit by bit.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While work was done outside of our team to make certain kinds of data available via the web, we focused on decoupling the Web Player not just from the web servers but also from any hard-coded dependencies from being run in a normal browser.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The final architecture looks like a layer of Platform APIs that expose the underlying Spotify ecosystem to clients, with a React-based user interface and the Platform APIs exposed via React Hooks. Thus, the new UI can run on the web, and it can run in our Desktop container, and never know, or care, if the data is coming from our C++ stack or our web infrastructure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;375&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-700x375.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-700x375.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-250x134.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-768x412.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-120x64.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879.png 1199w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;The new architecture of Web Player (left) and Desktop (right) clients. The UI is built as a React application that reaches the backend through our GraphQL and Web API services, and in some cases achieves this through the native Desktop APIs due to their increased performance and capabilities.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With this architecture in place, the team’s velocity began increasing rapidly. We added downloading, offline mode, local files, lyrics, a “Now Playing” queue, as well as advanced features such as sorting and filtering of playlists and albums. In just over a year, the new shared UI included all the features of the original Desktop client and was, in some areas, actually more advanced, including features previously seen only on the mobile client.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;387&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-700x387.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-700x387.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-250x138.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-768x425.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-1536x850.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-120x66.jpg 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-700x483.png&#34; alt=&#34;&#34;/&gt;&lt;figcaption&gt;Old vs New: the Web Player UI has come a long way since the project started.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Solving the organizational challenge&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;From the moment we decided on the product strategy for the new Desktop client, we began work on solving the engineering challenge — but there was also the organizational challenge: how could we actually make this happen in a reasonable amount of time without dropping the everyday “business as usual” work that needed to continue?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There was also a large information gap we had to solve. What features in the existing Desktop application &lt;em&gt;had&lt;/em&gt; to be implemented in the new one? What should the new client look like? Almost immediately the design and product insight teams began to investigate how our users use our software, so that we could draw up a road map towards being able to ship.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At the same time we created a small “virtual team” made up of engineers from several teams to begin the very first engineering experiments and answer some fundamental questions: Was the desired solution even possible? How much work would it actually require? This virtual team’s priority was simply to get the Web Player, as it was, running inside the Desktop container. They would solve the problem of playback and authentication, explore how the UI was bundled with the container, and set the engineering blueprint for the rest of the project. The team was aided by other teams within Spotify to create a single UI that could run on multiple platforms having different capabilities — for example, televisions. The fact that both codebases were co-located in the same monorepo as a result of previous efforts to converge the clients was key to facilitating this task.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After three months, the team’s work concluded successfully. We established our roadmap and priorities, and we knew exactly what we would be doing for the upcoming year. It would require a full commitment from everyone on our wider team, with constant testing and analysis to ensure we were on the correct path. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In reality, this project only happened because of the commitment of our engineering, design, and product management teams to envision a product that engineers could iterate on quickly, and that would fully support the Spotify vision. We had to iterate longer than we’d hoped before shipping to users, but the speed at which the team was able to implement these features in the new shared UI is what gave everyone the confidence that we were heading in the right direction.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Evaluating success&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We had four primary goals at the start of this project: make our code reusable, unify our user experience and visual design, improve speed to deliver more quickly, and do all of this while meeting Desktop and Web Player users’ needs. With the results of the project now shipped, how have we performed against these metrics?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.png&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;500&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;1. &lt;strong&gt;Reusability&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Reusing the same code in multiple clients (i.e., the Web Player and Desktop) allows us to write the code once and reap the benefits in multiple places. When we need to implement a design change, it’s much more efficient to make it in one location and have it propagate to all receiving endpoints. We would like to expand our reusability in the future, sharing more of our Platform APIs with even more clients.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;2. &lt;strong&gt;Unification&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;User experience and visual design are important yet time-consuming areas to improve within an application. Thus, having one set of components that service multiple clients ensures that we can implement designs more thoroughly, thereby improving our users’ experiences.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Critically, we have been able to achieve a degree of unification with the rest of the Spotify ecosystem, moving our clients to Spotify’s shared design language. The result is a more consistent experience when users switch between mobile and desktop, as well as a more modern, contemporary, accessible, and user-oriented experience for everyone. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;3. &lt;strong&gt;Speed&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;An important justification for this project was the argument that a modernized codebase with a single, easy-to-understand architecture would increase our velocity as engineers. While we need more time to conclusively prove success in the long term, the large number of features the team has already completed since the project began is a positive indicator. Speed, however, is merely an outcome — the result of engineers with clear goals working with a healthy codebase. We measure code health in terms of test coverage, maintainability, readability, and how easy code is to remove. The architecture we chose had unexpected benefits in terms of making UI coding simpler and easier to understand as developers, and so we are hopeful this platform is going to be a solid foundation for us to build on in the years to come.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;4. &lt;strong&gt;Satisfaction: Meeting Desktop and Web Player user needs&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The new experience has been developed with Spotify users in mind — both existing Desktop power users, and new users coming from the mobile app or completely new to the Spotify ecosystem. From the very beginning, we’ve been evaluating and testing our progress at each step to make sure we deliver an experience that fulfills our users’ needs. We’ve conducted extensive user research and run continuous tests over the past year that have informed us of the direction we should take. We’ve made the experience more accessible than ever, so everyone can enjoy using the application.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are looking closely at the feedback received and are continuously shaping the application to satisfy users’ needs. The new architecture lets us move faster, and users can expect the client to evolve more quickly than ever before.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What does all this mean for you as a user?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;As a music listener using the Spotify Desktop client or Web Player, we hope it feels like a fresh new experience, but with all the features you use and love still there. You’ll notice a few new features that you might have seen on Spotify on mobile appearing for the first time too.&lt;/p&gt;&lt;p&gt;As time goes on, you’ll begin to notice brand-new features appearing more often, making your experience of music and podcasts even better. The launch of the new Desktop, for us, is not the end. It’s just a new beginning for the app that started everything here at Spotify.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Is this your jam? Join us!&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Want to join the band and build the future of Spotify? Head over to our &lt;a href=&#34;https://www.spotifyjobs.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;job board&lt;/a&gt; and see if anything catches your eye. We’ve just announced our &lt;a href=&#34;https://hrblog.spotify.com/2021/02/12/introducing-working-from-anywhere/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Working From Anywhere&lt;/a&gt; policy, which allows employees to choose whether they want to work from home full time, at the office full time, or a combination of the two.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;A shout out to everyone who contributed to this project, especially Felix Bruns, Peter Johansson, Alberto Núñez Acosta, Guido Kessels, Tryggvi Gylfason, Craig Spence, Lucas Lencinas and Emma Bostian&lt;/em&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/web/&#34; rel=&#34;tag&#34;&gt;web&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/04/building-the-future-of-our-desktop-apps/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">For the past couple of years, we’ve been on a mission to modernize our Spotify clients by creating one single desktop UI for both the Desktop application and the Web Player. We couldn’t build everything we wanted to for our users with our old setup, so we decided to do something about it.</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Building the Future of Our Desktop Apps&#xA;</title>
    <updated>2021-04-07T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-07:/building-the-future-of-our-desktop-apps/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;April 7, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/building-the-future-of-our-desktop-apps/&#34; title=&#34;Building the Future of Our Desktop Apps&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-700x352.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-1536x771.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-120x60.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;For the past couple of years, we’ve been on a mission to modernize our Spotify clients by creating one single desktop UI for both the Desktop application and the Web Player.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We couldn’t build everything we wanted to for our users with our old setup, so we decided to do something about it.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;In the beginning, there were two clients&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;Towards the end of 2018, our team was the owner of a recently built &lt;a href=&#34;https://open.spotify.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Web Player&lt;/a&gt;, as well as Spotify’s Desktop client. The Desktop was our rich, full-featured experience and the Web Player was a much lighter, simpler experience.&lt;/p&gt;&lt;p&gt;Because the Web Player was implemented with a modern React app architecture, we had success onboarding new engineers to the Web Player code. But those same engineers were having difficulties with the Desktop client, which used a very diverse range of web technologies (thanks to &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_law&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Conway’s law&lt;/a&gt;). Due to having to implement many of the features twice at different levels of complexity while dealing with context switching, we were not shipping new features at the pace we would have liked to.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;In addition, there were accessibility issues in our clients that we needed to solve. We discovered that making our Web Player accessible was going to be a difficult, yet achievable, challenge. Making the Desktop application accessible, in contrast, would be nearly impossible.&lt;/p&gt;&lt;p&gt;We had many discussions on how to solve these problems. The team figured out that converging the clients into a single codebase and user experience would be the best way forward. We considered several approaches and did tech spikes to test many of the ideas — component sharing, feature sharing — always trying to find the right balance between fixing our technical debt problem while continuing to improve the experience for our users.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We knew we were embarking on a long-term project, so our biggest priority was to de-risk delivery and avoid trapping ourselves into a big bang rewrite. We settled on a bold solution: focus on iterating on top of the existing Web Player codebase until it reached a Desktop-grade feature set. Since our Web Player is continuously deployed, we could ship and test with real users every change made towards our final goal.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There were risks, of course. Desktop had (and has) many more users than Web Player, and Spotify’s Desktop client is the place most of Spotify’s “power users” call home. We knew we would have a lot of work to do to bring our Web Player up to those power users’ exacting standards.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, at the beginning of 2021, we have created one maintainable codebase for both of our clients with the high standard of accessibility and speed of development we hoped for.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s talk more in detail about how we turned the idea into reality.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;259&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-700x259.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-700x259.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-250x93.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-768x285.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-1536x569.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-120x44.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;One UI, multiple containers&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Spotify Desktop client is a Windows and Mac native application that uses CEF (&lt;a href=&#34;https://bitbucket.org/chromiumembedded/cef/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Chromium Embedded Framework&lt;/a&gt;) to display a web-based user interface. That’s still true today, but for the previous version of Desktop, every “page” in the client was built as a standalone “app” to run inside its own iframe. This architecture was designed to foster autonomy, allowing multiple teams — and potentially partners — to own the development and maintenance of the features. Eventually, however, one team became responsible for the user interface of the entire application.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-700x701.png&#34; alt=&#34;&#34; width=&#34;450&#34; height=&#34;451&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-700x701.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-250x250.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-150x150.png 150w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-768x769.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-120x120.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7.png 1200w&#34; sizes=&#34;(max-width: 450px) 100vw, 450px&#34;/&gt;&lt;figcaption&gt;Previous architecture (simplified) of the Desktop client. Each page in the application would be sandboxed in an iframe and built in different ways. The UI would access the backend through the native container.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The previous version of the Desktop client had many strengths, including Spotify’s original “killer feature” from its very first client, which would allow &lt;a href=&#34;http://www.csc.kth.se/~gkreitz/spotify-p2p10/spotify-p2p10.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;playback to begin as soon as a listener clicked&lt;/a&gt;. It also boasted a comprehensive set of features we know Spotify listeners value. But, at the same time, this architecture was causing severe friction for developers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;The Web Player’s codebase, however, was considered a much more solid foundation to build upon. It allowed us to develop new features quickly. It was developed with the web in mind, meaning it was small in size, more performant, and worked with various browsers. The client was delivered continuously, allowing changes to get to users almost immediately. We decided, then, to use the Web Player as the starting point for a single user experience shared between the Web Player and Desktop. One of the main challenges we encountered was that this approach would require us to ship and run the Web Player UI with the Desktop container.&lt;/p&gt;&lt;p&gt;The Web Player was also tightly coupled to our web servers, relying on them for all data and authentication. The playback system used by Web Player was not compatible with Desktop. Authentication worked differently — we needed to support our web OAuth login on Web Player and our native login on Desktop. Desktop would also need features its users expect, such as downloading and offline playback, that are not supported by the Web Player.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This concept of running the same user interface on two similar but different infrastructures is what informed the architecture we developed. In order to keep the UI platform agnostic, we built TypeScript Platform APIs that would abstract the different sources of data and different playback stacks, as well as provide helpful information to the user interface about what functionality was available to it. We also rewrote the whole client in TypeScript along the way, as we were rebuilding the experience bit by bit.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While work was done outside of our team to make certain kinds of data available via the web, we focused on decoupling the Web Player not just from the web servers but also from any hard-coded dependencies from being run in a normal browser.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The final architecture looks like a layer of Platform APIs that expose the underlying Spotify ecosystem to clients, with a React-based user interface and the Platform APIs exposed via React Hooks. Thus, the new UI can run on the web, and it can run in our Desktop container, and never know, or care, if the data is coming from our C++ stack or our web infrastructure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;375&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-700x375.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-700x375.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-250x134.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-768x412.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-120x64.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879.png 1199w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;The new architecture of Web Player (left) and Desktop (right) clients. The UI is built as a React application that reaches the backend through our GraphQL and Web API services, and in some cases achieves this through the native Desktop APIs due to their increased performance and capabilities.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With this architecture in place, the team’s velocity began increasing rapidly. We added downloading, offline mode, local files, lyrics, a “Now Playing” queue, as well as advanced features such as sorting and filtering of playlists and albums. In just over a year, the new shared UI included all the features of the original Desktop client and was, in some areas, actually more advanced, including features previously seen only on the mobile client.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;387&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-700x387.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-700x387.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-250x138.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-768x425.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-1536x850.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-120x66.jpg 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-700x483.png&#34; alt=&#34;&#34;/&gt;&lt;figcaption&gt;Old vs New: the Web Player UI has come a long way since the project started.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Solving the organizational challenge&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;From the moment we decided on the product strategy for the new Desktop client, we began work on solving the engineering challenge — but there was also the organizational challenge: how could we actually make this happen in a reasonable amount of time without dropping the everyday “business as usual” work that needed to continue?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There was also a large information gap we had to solve. What features in the existing Desktop application &lt;em&gt;had&lt;/em&gt; to be implemented in the new one? What should the new client look like? Almost immediately the design and product insight teams began to investigate how our users use our software, so that we could draw up a road map towards being able to ship.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At the same time we created a small “virtual team” made up of engineers from several teams to begin the very first engineering experiments and answer some fundamental questions: Was the desired solution even possible? How much work would it actually require? This virtual team’s priority was simply to get the Web Player, as it was, running inside the Desktop container. They would solve the problem of playback and authentication, explore how the UI was bundled with the container, and set the engineering blueprint for the rest of the project. The team was aided by other teams within Spotify to create a single UI that could run on multiple platforms having different capabilities — for example, televisions. The fact that both codebases were co-located in the same monorepo as a result of previous efforts to converge the clients was key to facilitating this task.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After three months, the team’s work concluded successfully. We established our roadmap and priorities, and we knew exactly what we would be doing for the upcoming year. It would require a full commitment from everyone on our wider team, with constant testing and analysis to ensure we were on the correct path. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In reality, this project only happened because of the commitment of our engineering, design, and product management teams to envision a product that engineers could iterate on quickly, and that would fully support the Spotify vision. We had to iterate longer than we’d hoped before shipping to users, but the speed at which the team was able to implement these features in the new shared UI is what gave everyone the confidence that we were heading in the right direction.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Evaluating success&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We had four primary goals at the start of this project: make our code reusable, unify our user experience and visual design, improve speed to deliver more quickly, and do all of this while meeting Desktop and Web Player users’ needs. With the results of the project now shipped, how have we performed against these metrics?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.png&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;500&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;1. &lt;strong&gt;Reusability&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Reusing the same code in multiple clients (i.e., the Web Player and Desktop) allows us to write the code once and reap the benefits in multiple places. When we need to implement a design change, it’s much more efficient to make it in one location and have it propagate to all receiving endpoints. We would like to expand our reusability in the future, sharing more of our Platform APIs with even more clients.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;2. &lt;strong&gt;Unification&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;User experience and visual design are important yet time-consuming areas to improve within an application. Thus, having one set of components that service multiple clients ensures that we can implement designs more thoroughly, thereby improving our users’ experiences.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Critically, we have been able to achieve a degree of unification with the rest of the Spotify ecosystem, moving our clients to Spotify’s shared design language. The result is a more consistent experience when users switch between mobile and desktop, as well as a more modern, contemporary, accessible, and user-oriented experience for everyone. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;3. &lt;strong&gt;Speed&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;An important justification for this project was the argument that a modernized codebase with a single, easy-to-understand architecture would increase our velocity as engineers. While we need more time to conclusively prove success in the long term, the large number of features the team has already completed since the project began is a positive indicator. Speed, however, is merely an outcome — the result of engineers with clear goals working with a healthy codebase. We measure code health in terms of test coverage, maintainability, readability, and how easy code is to remove. The architecture we chose had unexpected benefits in terms of making UI coding simpler and easier to understand as developers, and so we are hopeful this platform is going to be a solid foundation for us to build on in the years to come.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;4. &lt;strong&gt;Satisfaction: Meeting Desktop and Web Player user needs&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The new experience has been developed with Spotify users in mind — both existing Desktop power users, and new users coming from the mobile app or completely new to the Spotify ecosystem. From the very beginning, we’ve been evaluating and testing our progress at each step to make sure we deliver an experience that fulfills our users’ needs. We’ve conducted extensive user research and run continuous tests over the past year that have informed us of the direction we should take. We’ve made the experience more accessible than ever, so everyone can enjoy using the application.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are looking closely at the feedback received and are continuously shaping the application to satisfy users’ needs. The new architecture lets us move faster, and users can expect the client to evolve more quickly than ever before.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What does all this mean for you as a user?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;As a music listener using the Spotify Desktop client or Web Player, we hope it feels like a fresh new experience, but with all the features you use and love still there. You’ll notice a few new features that you might have seen on Spotify on mobile appearing for the first time too.&lt;/p&gt;&lt;p&gt;As time goes on, you’ll begin to notice brand-new features appearing more often, making your experience of music and podcasts even better. The launch of the new Desktop, for us, is not the end. It’s just a new beginning for the app that started everything here at Spotify.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Is this your jam? Join us!&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Want to join the band and build the future of Spotify? Head over to our &lt;a href=&#34;https://www.spotifyjobs.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;job board&lt;/a&gt; and see if anything catches your eye. We’ve just announced our &lt;a href=&#34;https://hrblog.spotify.com/2021/02/12/introducing-working-from-anywhere/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Working From Anywhere&lt;/a&gt; policy, which allows employees to choose whether they want to work from home full time, at the office full time, or a combination of the two.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;A shout out to everyone who contributed to this project, especially Felix Bruns, Peter Johansson, Alberto Núñez Acosta, Guido Kessels, Tryggvi Gylfason, Craig Spence, Lucas Lencinas and Emma Bostian&lt;/em&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/web/&#34; rel=&#34;tag&#34;&gt;web&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/building-the-future-of-our-desktop-apps/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">For the past couple of years, we’ve been on a mission to modernize our Spotify clients by creating one single desktop UI for both the Desktop application and the Web Player. We couldn’t build everything we wanted to for our users with our old setup, so we decided to do something about it.</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Building the Future of Our Desktop Apps&#xA;</title>
    <updated>2021-04-07T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-07:/2021/04/07/building-the-future-of-our-desktop-apps/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;April 7, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/04/07/building-the-future-of-our-desktop-apps/&#34; title=&#34;Building the Future of Our Desktop Apps&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/ClientX.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/ClientX.png 1999w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/ClientX-250x126.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/ClientX-700x352.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/ClientX-768x386.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/ClientX-1536x771.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/ClientX-120x60.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/04/ClientX.png&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;For the past couple of years, we’ve been on a mission to modernize our Spotify clients by creating one single desktop UI for both the Desktop application and the Web Player.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We couldn’t build everything we wanted to for our users with our old setup, so we decided to do something about it.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;In the beginning, there were two clients&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;Towards the end of 2018, our team was the owner of a recently built &lt;a href=&#34;https://open.spotify.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Web Player&lt;/a&gt;, as well as Spotify’s Desktop client. The Desktop was our rich, full-featured experience and the Web Player was a much lighter, simpler experience.&lt;/p&gt;&lt;p&gt;Because the Web Player was implemented with a modern React app architecture, we had success onboarding new engineers to the Web Player code. But those same engineers were having difficulties with the Desktop client, which used a very diverse range of web technologies (thanks to &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_law&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Conway’s law&lt;/a&gt;). Due to having to implement many of the features twice at different levels of complexity while dealing with context switching, we were not shipping new features at the pace we would have liked to.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;In addition, there were accessibility issues in our clients that we needed to solve. We discovered that making our Web Player accessible was going to be a difficult, yet achievable, challenge. Making the Desktop application accessible, in contrast, would be nearly impossible.&lt;/p&gt;&lt;p&gt;We had many discussions on how to solve these problems. The team figured out that converging the clients into a single codebase and user experience would be the best way forward. We considered several approaches and did tech spikes to test many of the ideas — component sharing, feature sharing — always trying to find the right balance between fixing our technical debt problem while continuing to improve the experience for our users.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We knew we were embarking on a long-term project, so our biggest priority was to de-risk delivery and avoid trapping ourselves into a big bang rewrite. We settled on a bold solution: focus on iterating on top of the existing Web Player codebase until it reached a Desktop-grade feature set. Since our Web Player is continuously deployed, we could ship and test with real users every change made towards our final goal.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There were risks, of course. Desktop had (and has) many more users than Web Player, and Spotify’s Desktop client is the place most of Spotify’s “power users” call home. We knew we would have a lot of work to do to bring our Web Player up to those power users’ exacting standards.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, at the beginning of 2021, we have created one maintainable codebase for both of our clients with the high standard of accessibility and speed of development we hoped for.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s talk more in detail about how we turned the idea into reality.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;259&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image8-700x259.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image8-700x259.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image8-250x93.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image8-768x285.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image8-1536x569.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image8-120x44.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image8.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;One UI, multiple containers&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Spotify Desktop client is a Windows and Mac native application that uses CEF (&lt;a href=&#34;https://bitbucket.org/chromiumembedded/cef/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Chromium Embedded Framework&lt;/a&gt;) to display a web-based user interface. That’s still true today, but for the previous version of Desktop, every “page” in the client was built as a standalone “app” to run inside its own iframe. This architecture was designed to foster autonomy, allowing multiple teams — and potentially partners — to own the development and maintenance of the features. Eventually, however, one team became responsible for the user interface of the entire application.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image7-700x701.png&#34; alt=&#34;&#34; width=&#34;450&#34; height=&#34;451&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image7-700x701.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image7-250x250.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image7-150x150.png 150w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image7-768x769.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image7-120x120.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image7.png 1200w&#34; sizes=&#34;(max-width: 450px) 100vw, 450px&#34;/&gt;&lt;figcaption&gt;Previous architecture (simplified) of the Desktop client. Each page in the application would be sandboxed in an iframe and built in different ways. The UI would access the backend through the native container.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The previous version of the Desktop client had many strengths, including Spotify’s original “killer feature” from its very first client, which would allow &lt;a href=&#34;http://www.csc.kth.se/~gkreitz/spotify-p2p10/spotify-p2p10.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;playback to begin as soon as a listener clicked&lt;/a&gt;. It also boasted a comprehensive set of features we know Spotify listeners value. But, at the same time, this architecture was causing severe friction for developers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;The Web Player’s codebase, however, was considered a much more solid foundation to build upon. It allowed us to develop new features quickly. It was developed with the web in mind, meaning it was small in size, more performant, and worked with various browsers. The client was delivered continuously, allowing changes to get to users almost immediately. We decided, then, to use the Web Player as the starting point for a single user experience shared between the Web Player and Desktop. One of the main challenges we encountered was that this approach would require us to ship and run the Web Player UI with the Desktop container.&lt;/p&gt;&lt;p&gt;The Web Player was also tightly coupled to our web servers, relying on them for all data and authentication. The playback system used by Web Player was not compatible with Desktop. Authentication worked differently — we needed to support our web OAuth login on Web Player and our native login on Desktop. Desktop would also need features its users expect, such as downloading and offline playback, that are not supported by the Web Player.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This concept of running the same user interface on two similar but different infrastructures is what informed the architecture we developed. In order to keep the UI platform agnostic, we built TypeScript Platform APIs that would abstract the different sources of data and different playback stacks, as well as provide helpful information to the user interface about what functionality was available to it. We also rewrote the whole client in TypeScript along the way, as we were rebuilding the experience bit by bit.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While work was done outside of our team to make certain kinds of data available via the web, we focused on decoupling the Web Player not just from the web servers but also from any hard-coded dependencies from being run in a normal browser.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The final architecture looks like a layer of Platform APIs that expose the underlying Spotify ecosystem to clients, with a React-based user interface and the Platform APIs exposed via React Hooks. Thus, the new UI can run on the web, and it can run in our Desktop container, and never know, or care, if the data is coming from our C++ stack or our web infrastructure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;375&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/path879-700x375.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/path879-700x375.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/path879-250x134.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/path879-768x412.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/path879-120x64.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/path879.png 1199w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;The new architecture of Web Player (left) and Desktop (right) clients. The UI is built as a React application that reaches the backend through our GraphQL and Web API services, and in some cases achieves this through the native Desktop APIs due to their increased performance and capabilities.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With this architecture in place, the team’s velocity began increasing rapidly. We added downloading, offline mode, local files, lyrics, a “Now Playing” queue, as well as advanced features such as sorting and filtering of playlists and albums. In just over a year, the new shared UI included all the features of the original Desktop client and was, in some areas, actually more advanced, including features previously seen only on the mobile client.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;387&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-2-700x387.jpg&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-2-700x387.jpg 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-2-250x138.jpg 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-2-768x425.jpg 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-2-1536x850.jpg 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-2-120x66.jpg 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-2.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;483&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image1-700x483.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image1-700x483.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image1-250x172.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image1-768x529.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image1-1536x1059.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image1-120x83.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image1.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Old vs New: the Web Player UI has come a long way since the project started.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Solving the organizational challenge&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;From the moment we decided on the product strategy for the new Desktop client, we began work on solving the engineering challenge — but there was also the organizational challenge: how could we actually make this happen in a reasonable amount of time without dropping the everyday “business as usual” work that needed to continue?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There was also a large information gap we had to solve. What features in the existing Desktop application &lt;em&gt;had&lt;/em&gt; to be implemented in the new one? What should the new client look like? Almost immediately the design and product insight teams began to investigate how our users use our software, so that we could draw up a road map towards being able to ship.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At the same time we created a small “virtual team” made up of engineers from several teams to begin the very first engineering experiments and answer some fundamental questions: Was the desired solution even possible? How much work would it actually require? This virtual team’s priority was simply to get the Web Player, as it was, running inside the Desktop container. They would solve the problem of playback and authentication, explore how the UI was bundled with the container, and set the engineering blueprint for the rest of the project. The team was aided by other teams within Spotify to create a single UI that could run on multiple platforms having different capabilities — for example, televisions. The fact that both codebases were co-located in the same monorepo as a result of previous efforts to converge the clients was key to facilitating this task.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After three months, the team’s work concluded successfully. We established our roadmap and priorities, and we knew exactly what we would be doing for the upcoming year. It would require a full commitment from everyone on our wider team, with constant testing and analysis to ensure we were on the correct path. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In reality, this project only happened because of the commitment of our engineering, design, and product management teams to envision a product that engineers could iterate on quickly, and that would fully support the Spotify vision. We had to iterate longer than we’d hoped before shipping to users, but the speed at which the team was able to implement these features in the new shared UI is what gave everyone the confidence that we were heading in the right direction.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Evaluating success&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We had four primary goals at the start of this project: make our code reusable, unify our user experience and visual design, improve speed to deliver more quickly, and do all of this while meeting Desktop and Web Player users’ needs. With the results of the project now shipped, how have we performed against these metrics?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3.png&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;500&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3.png 1999w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-250x250.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-700x700.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-150x150.png 150w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-768x768.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-1536x1536.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/image3-120x120.png 120w&#34; sizes=&#34;(max-width: 500px) 100vw, 500px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;1. &lt;strong&gt;Reusability&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Reusing the same code in multiple clients (i.e., the Web Player and Desktop) allows us to write the code once and reap the benefits in multiple places. When we need to implement a design change, it’s much more efficient to make it in one location and have it propagate to all receiving endpoints. We would like to expand our reusability in the future, sharing more of our Platform APIs with even more clients.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;2. &lt;strong&gt;Unification&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;User experience and visual design are important yet time-consuming areas to improve within an application. Thus, having one set of components that service multiple clients ensures that we can implement designs more thoroughly, thereby improving our users’ experiences.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Critically, we have been able to achieve a degree of unification with the rest of the Spotify ecosystem, moving our clients to Spotify’s shared design language. The result is a more consistent experience when users switch between mobile and desktop, as well as a more modern, contemporary, accessible, and user-oriented experience for everyone. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;3. &lt;strong&gt;Speed&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;An important justification for this project was the argument that a modernized codebase with a single, easy-to-understand architecture would increase our velocity as engineers. While we need more time to conclusively prove success in the long term, the large number of features the team has already completed since the project began is a positive indicator. Speed, however, is merely an outcome — the result of engineers with clear goals working with a healthy codebase. We measure code health in terms of test coverage, maintainability, readability, and how easy code is to remove. The architecture we chose had unexpected benefits in terms of making UI coding simpler and easier to understand as developers, and so we are hopeful this platform is going to be a solid foundation for us to build on in the years to come.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;4. &lt;strong&gt;Satisfaction: Meeting Desktop and Web Player user needs&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The new experience has been developed with Spotify users in mind — both existing Desktop power users, and new users coming from the mobile app or completely new to the Spotify ecosystem. From the very beginning, we’ve been evaluating and testing our progress at each step to make sure we deliver an experience that fulfills our users’ needs. We’ve conducted extensive user research and run continuous tests over the past year that have informed us of the direction we should take. We’ve made the experience more accessible than ever, so everyone can enjoy using the application.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are looking closely at the feedback received and are continuously shaping the application to satisfy users’ needs. The new architecture lets us move faster, and users can expect the client to evolve more quickly than ever before.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What does all this mean for you as a user?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;As a music listener using the Spotify Desktop client or Web Player, we hope it feels like a fresh new experience, but with all the features you use and love still there. You’ll notice a few new features that you might have seen on Spotify on mobile appearing for the first time too.&lt;/p&gt;&lt;p&gt;As time goes on, you’ll begin to notice brand-new features appearing more often, making your experience of music and podcasts even better. The launch of the new Desktop, for us, is not the end. It’s just a new beginning for the app that started everything here at Spotify.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Is this your jam? Join us!&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Want to join the band and build the future of Spotify? Head over to our &lt;a href=&#34;https://www.spotifyjobs.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;job board&lt;/a&gt; and see if anything catches your eye. We’ve just announced our &lt;a href=&#34;https://hrblog.spotify.com/2021/02/12/introducing-working-from-anywhere/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Working From Anywhere&lt;/a&gt; policy, which allows employees to choose whether they want to work from home full time, at the office full time, or a combination of the two.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;A shout out to everyone who contributed to this project, especially Felix Bruns, Peter Johansson, Alberto Núñez Acosta, Guido Kessels, Tryggvi Gylfason, Craig Spence, Lucas Lencinas and Emma Bostian&lt;/em&gt;.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/04/07/building-the-future-of-our-desktop-apps/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/04/ClientX.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">For the past couple of years, we’ve been on a mission to modernize our Spotify clients by creating one single desktop UI for both the Desktop application and the Web Player. We couldn’t build everything we wanted to for our users with our old setup, so we decided to do something about it.</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Building the Future of Our Desktop Apps&#xA;</title>
    <updated>2021-04-07T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-04-07:/building-the-future-of-our-desktop-apps/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;April 7, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/building-the-future-of-our-desktop-apps/&#34; title=&#34;Building the Future of Our Desktop Apps&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-700x352.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-1536x771.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX-120x60.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;For the past couple of years, we’ve been on a mission to modernize our Spotify clients by creating one single desktop UI for both the Desktop application and the Web Player.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We couldn’t build everything we wanted to for our users with our old setup, so we decided to do something about it.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;In the beginning, there were two clients&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;Towards the end of 2018, our team was the owner of a recently built &lt;a href=&#34;https://open.spotify.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Web Player&lt;/a&gt;, as well as Spotify’s Desktop client. The Desktop was our rich, full-featured experience and the Web Player was a much lighter, simpler experience.&lt;/p&gt;&lt;p&gt;Because the Web Player was implemented with a modern React app architecture, we had success onboarding new engineers to the Web Player code. But those same engineers were having difficulties with the Desktop client, which used a very diverse range of web technologies (thanks to &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_law&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Conway’s law&lt;/a&gt;). Due to having to implement many of the features twice at different levels of complexity while dealing with context switching, we were not shipping new features at the pace we would have liked to.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;In addition, there were accessibility issues in our clients that we needed to solve. We discovered that making our Web Player accessible was going to be a difficult, yet achievable, challenge. Making the Desktop application accessible, in contrast, would be nearly impossible.&lt;/p&gt;&lt;p&gt;We had many discussions on how to solve these problems. The team figured out that converging the clients into a single codebase and user experience would be the best way forward. We considered several approaches and did tech spikes to test many of the ideas — component sharing, feature sharing — always trying to find the right balance between fixing our technical debt problem while continuing to improve the experience for our users.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We knew we were embarking on a long-term project, so our biggest priority was to de-risk delivery and avoid trapping ourselves into a big bang rewrite. We settled on a bold solution: focus on iterating on top of the existing Web Player codebase until it reached a Desktop-grade feature set. Since our Web Player is continuously deployed, we could ship and test with real users every change made towards our final goal.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There were risks, of course. Desktop had (and has) many more users than Web Player, and Spotify’s Desktop client is the place most of Spotify’s “power users” call home. We knew we would have a lot of work to do to bring our Web Player up to those power users’ exacting standards.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, at the beginning of 2021, we have created one maintainable codebase for both of our clients with the high standard of accessibility and speed of development we hoped for.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s talk more in detail about how we turned the idea into reality.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;259&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-700x259.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-700x259.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-250x93.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-768x285.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-1536x569.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8-120x44.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image8.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;One UI, multiple containers&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Spotify Desktop client is a Windows and Mac native application that uses CEF (&lt;a href=&#34;https://bitbucket.org/chromiumembedded/cef/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Chromium Embedded Framework&lt;/a&gt;) to display a web-based user interface. That’s still true today, but for the previous version of Desktop, every “page” in the client was built as a standalone “app” to run inside its own iframe. This architecture was designed to foster autonomy, allowing multiple teams — and potentially partners — to own the development and maintenance of the features. Eventually, however, one team became responsible for the user interface of the entire application.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-700x701.png&#34; alt=&#34;&#34; width=&#34;450&#34; height=&#34;451&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-700x701.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-250x250.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-150x150.png 150w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-768x769.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7-120x120.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image7.png 1200w&#34; sizes=&#34;(max-width: 450px) 100vw, 450px&#34;/&gt;&lt;figcaption&gt;Previous architecture (simplified) of the Desktop client. Each page in the application would be sandboxed in an iframe and built in different ways. The UI would access the backend through the native container.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The previous version of the Desktop client had many strengths, including Spotify’s original “killer feature” from its very first client, which would allow &lt;a href=&#34;http://www.csc.kth.se/~gkreitz/spotify-p2p10/spotify-p2p10.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;playback to begin as soon as a listener clicked&lt;/a&gt;. It also boasted a comprehensive set of features we know Spotify listeners value. But, at the same time, this architecture was causing severe friction for developers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;The Web Player’s codebase, however, was considered a much more solid foundation to build upon. It allowed us to develop new features quickly. It was developed with the web in mind, meaning it was small in size, more performant, and worked with various browsers. The client was delivered continuously, allowing changes to get to users almost immediately. We decided, then, to use the Web Player as the starting point for a single user experience shared between the Web Player and Desktop. One of the main challenges we encountered was that this approach would require us to ship and run the Web Player UI with the Desktop container.&lt;/p&gt;&lt;p&gt;The Web Player was also tightly coupled to our web servers, relying on them for all data and authentication. The playback system used by Web Player was not compatible with Desktop. Authentication worked differently — we needed to support our web OAuth login on Web Player and our native login on Desktop. Desktop would also need features its users expect, such as downloading and offline playback, that are not supported by the Web Player.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This concept of running the same user interface on two similar but different infrastructures is what informed the architecture we developed. In order to keep the UI platform agnostic, we built TypeScript Platform APIs that would abstract the different sources of data and different playback stacks, as well as provide helpful information to the user interface about what functionality was available to it. We also rewrote the whole client in TypeScript along the way, as we were rebuilding the experience bit by bit.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While work was done outside of our team to make certain kinds of data available via the web, we focused on decoupling the Web Player not just from the web servers but also from any hard-coded dependencies from being run in a normal browser.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The final architecture looks like a layer of Platform APIs that expose the underlying Spotify ecosystem to clients, with a React-based user interface and the Platform APIs exposed via React Hooks. Thus, the new UI can run on the web, and it can run in our Desktop container, and never know, or care, if the data is coming from our C++ stack or our web infrastructure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;375&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-700x375.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-700x375.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-250x134.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-768x412.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879-120x64.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/path879.png 1199w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;The new architecture of Web Player (left) and Desktop (right) clients. The UI is built as a React application that reaches the backend through our GraphQL and Web API services, and in some cases achieves this through the native Desktop APIs due to their increased performance and capabilities.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With this architecture in place, the team’s velocity began increasing rapidly. We added downloading, offline mode, local files, lyrics, a “Now Playing” queue, as well as advanced features such as sorting and filtering of playlists and albums. In just over a year, the new shared UI included all the features of the original Desktop client and was, in some areas, actually more advanced, including features previously seen only on the mobile client.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;387&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-700x387.jpg&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-700x387.jpg 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-250x138.jpg 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-768x425.jpg 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-1536x850.jpg 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2-120x66.jpg 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3-2.jpg 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image1-700x483.png&#34; alt=&#34;&#34;/&gt;&lt;figcaption&gt;Old vs New: the Web Player UI has come a long way since the project started.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Solving the organizational challenge&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;From the moment we decided on the product strategy for the new Desktop client, we began work on solving the engineering challenge — but there was also the organizational challenge: how could we actually make this happen in a reasonable amount of time without dropping the everyday “business as usual” work that needed to continue?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There was also a large information gap we had to solve. What features in the existing Desktop application &lt;em&gt;had&lt;/em&gt; to be implemented in the new one? What should the new client look like? Almost immediately the design and product insight teams began to investigate how our users use our software, so that we could draw up a road map towards being able to ship.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At the same time we created a small “virtual team” made up of engineers from several teams to begin the very first engineering experiments and answer some fundamental questions: Was the desired solution even possible? How much work would it actually require? This virtual team’s priority was simply to get the Web Player, as it was, running inside the Desktop container. They would solve the problem of playback and authentication, explore how the UI was bundled with the container, and set the engineering blueprint for the rest of the project. The team was aided by other teams within Spotify to create a single UI that could run on multiple platforms having different capabilities — for example, televisions. The fact that both codebases were co-located in the same monorepo as a result of previous efforts to converge the clients was key to facilitating this task.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After three months, the team’s work concluded successfully. We established our roadmap and priorities, and we knew exactly what we would be doing for the upcoming year. It would require a full commitment from everyone on our wider team, with constant testing and analysis to ensure we were on the correct path. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In reality, this project only happened because of the commitment of our engineering, design, and product management teams to envision a product that engineers could iterate on quickly, and that would fully support the Spotify vision. We had to iterate longer than we’d hoped before shipping to users, but the speed at which the team was able to implement these features in the new shared UI is what gave everyone the confidence that we were heading in the right direction.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Evaluating success&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We had four primary goals at the start of this project: make our code reusable, unify our user experience and visual design, improve speed to deliver more quickly, and do all of this while meeting Desktop and Web Player users’ needs. With the results of the project now shipped, how have we performed against these metrics?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/image3.png&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;500&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;1. &lt;strong&gt;Reusability&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Reusing the same code in multiple clients (i.e., the Web Player and Desktop) allows us to write the code once and reap the benefits in multiple places. When we need to implement a design change, it’s much more efficient to make it in one location and have it propagate to all receiving endpoints. We would like to expand our reusability in the future, sharing more of our Platform APIs with even more clients.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;2. &lt;strong&gt;Unification&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;User experience and visual design are important yet time-consuming areas to improve within an application. Thus, having one set of components that service multiple clients ensures that we can implement designs more thoroughly, thereby improving our users’ experiences.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Critically, we have been able to achieve a degree of unification with the rest of the Spotify ecosystem, moving our clients to Spotify’s shared design language. The result is a more consistent experience when users switch between mobile and desktop, as well as a more modern, contemporary, accessible, and user-oriented experience for everyone. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;3. &lt;strong&gt;Speed&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;An important justification for this project was the argument that a modernized codebase with a single, easy-to-understand architecture would increase our velocity as engineers. While we need more time to conclusively prove success in the long term, the large number of features the team has already completed since the project began is a positive indicator. Speed, however, is merely an outcome — the result of engineers with clear goals working with a healthy codebase. We measure code health in terms of test coverage, maintainability, readability, and how easy code is to remove. The architecture we chose had unexpected benefits in terms of making UI coding simpler and easier to understand as developers, and so we are hopeful this platform is going to be a solid foundation for us to build on in the years to come.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;4. &lt;strong&gt;Satisfaction: Meeting Desktop and Web Player user needs&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The new experience has been developed with Spotify users in mind — both existing Desktop power users, and new users coming from the mobile app or completely new to the Spotify ecosystem. From the very beginning, we’ve been evaluating and testing our progress at each step to make sure we deliver an experience that fulfills our users’ needs. We’ve conducted extensive user research and run continuous tests over the past year that have informed us of the direction we should take. We’ve made the experience more accessible than ever, so everyone can enjoy using the application.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are looking closely at the feedback received and are continuously shaping the application to satisfy users’ needs. The new architecture lets us move faster, and users can expect the client to evolve more quickly than ever before.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What does all this mean for you as a user?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;p&gt;As a music listener using the Spotify Desktop client or Web Player, we hope it feels like a fresh new experience, but with all the features you use and love still there. You’ll notice a few new features that you might have seen on Spotify on mobile appearing for the first time too.&lt;/p&gt;&lt;p&gt;As time goes on, you’ll begin to notice brand-new features appearing more often, making your experience of music and podcasts even better. The launch of the new Desktop, for us, is not the end. It’s just a new beginning for the app that started everything here at Spotify.&lt;/p&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Is this your jam? Join us!&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Want to join the band and build the future of Spotify? Head over to our &lt;a href=&#34;https://www.spotifyjobs.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;job board&lt;/a&gt; and see if anything catches your eye. We’ve just announced our &lt;a href=&#34;https://hrblog.spotify.com/2021/02/12/introducing-working-from-anywhere/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Working From Anywhere&lt;/a&gt; policy, which allows employees to choose whether they want to work from home full time, at the office full time, or a combination of the two.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;A shout out to everyone who contributed to this project, especially Felix Bruns, Peter Johansson, Alberto Núñez Acosta, Guido Kessels, Tryggvi Gylfason, Craig Spence, Lucas Lencinas and Emma Bostian&lt;/em&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/web/&#34; rel=&#34;tag&#34;&gt;web&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/building-the-future-of-our-desktop-apps/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/04/ClientX.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">For the past couple of years, we’ve been on a mission to modernize our Spotify clients by creating one single desktop UI for both the Desktop application and the Web Player. We couldn’t build everything we wanted to for our users with our old setup, so we decided to do something about it.</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            David Riordan: Product Manager&#xA;</title>
    <updated>2021-03-30T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-30:/my-beat-david-riordan/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-4054&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;        &#xA;         &lt;div&gt;&#xA;            &lt;div&gt;&#xA;            &lt;h2&gt;Putting the Spotlight on our technical employees&lt;/h2&gt;&#xA;    &lt;p&gt;My beat is a blog series that turns the spotlight towards technical employees across various desciplines and roles to showcase what a typical day as a Spotifier consists of.&lt;/p&gt;&#xA;            &lt;/div&gt;&#xA; &#xA;             &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan.png 500w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-250x175.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-120x84.png 120w&#34; sizes=&#34;(max-width: 500px) 100vw, 500px&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;div&gt;&#xA;             &#xA;                 &lt;p&gt;&lt;b&gt;David is a Product Manager at Spotify in New York. But since the start of the pandemic, he’s been working from the Greenpoint apartment he shares with his wife, dog and 21-month-old son, Zev. Here, he talks us through his day-to-day…  &lt;/b&gt;&lt;/p&gt;&#xA;             &lt;/div&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;blockquote&gt;&lt;p&gt;5:00 am &lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My days begin with an early morning wake-up call from Zev – he comes through at around 5am and we get a couple of dedicated hours of playtime before the rest of the world gets up. It’s fun – this morning, we baked oatmeal cookies. Then once my wife and I are ready, we take the dog, throw Zev in the back carrier and walk all together through the park to his nanny-share. It’s a really lovely way to start the day. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;9:00 am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Back home, the first thing I do is check in with my To Do list – I have a love-hate relationship with task management software, but it’s great to have all my personal and professional commitments in one place. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As a Product Manager in Spotify’s Data and Insights team, I work on the audio-processing infrastructure – which means I get to hang out with brilliant researchers and build the tools they need to take big leaps in knowledge, as well as in the application of that new knowledge. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For the past year, I’ve been part of a project called &lt;a href=&#34;https://klio.io/&#34;&gt;Klio&lt;/a&gt; – creating a software framework that allows researchers, engineers and data scientists to process audio files easily and at scale, as part of a commodity data pipeline. It means that algorithms that could previously only run in a very bespoke manner on a small or medium-sized scale can now work for a relatively unbounded amount of input data. And they can do so in a unified, standardized way – meaning there’s no need for people to reinvent the wheel every time and freeing them up to go further, faster, with their research.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Klio has been a long time in the making, so &lt;a href=&#34;https://engineering.atspotify.com/2020/11/04/its-all-just-wiggly-air-building-infrastructure-to-support-audio-research/&#34;&gt;it was amazing to finally open-source it&lt;/a&gt; last month. Now, our tools and methodology are available to everyone and will help drive groundbreaking work across the research community worldwide. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;11:30 am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Working on a project like this has required lots of collaboration, so I’m glad to be part of a strong, supportive team. Even though we’re now spread out geographically, we’re always there for each other on Slack. And we all get together for a Hangout every morning to check in on what everyone’s doing and discuss the most important actions for the day. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;12:00 noon&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Time to leave my desk and break for lunch – my wife and I try to eat together and grab a bit of fresh air if we can. We’re lucky to have a communal outdoor space at our apartment block and plenty of parks nearby. And one of the great perks of staying in New York throughout the pandemic has been seeing other people out and about – bumping into neighbours and keeping up that sense of connection. It feels extra special right now.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;1:00 pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Whilst my mornings tend to be fairly unstructured, my afternoons are when most of my regularly scheduled meetings happen, particularly those involving colleagues in the US. But outside of these meetings, my work routine is highly variable – I might spend some focus time on a specific issue, check in with one of my fellow Product Managers, or run a workshop or user research session with one of our current customers. One of the things I love is that, at the moment, our community is small enough for us to know every single customer on a personal level – we can get to know their pain points and problems precisely and really understand the impact of any changes we make. Obviously, I’d love us to grow our customer base and I know it won’t always be possible to be so personally connected. But right now, it feels like we’re doing favours for friends – for extraordinary people that we admire and have the privilege of working with. And that brings a lot of meaning to everything we do. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;6:00 pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’re getting into planning season now – both for a new quarter and a new year – so some nights, I find myself working a bit later than usual on my laptop. Other times, I get an idea in my head and can’t stop till I’ve got it out! But mostly, I log off in the early evening, spend time with my family, walk the dog and then collapse. Like busy parents all over the world, right?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;111&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-250x40.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-768x121.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-120x19.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering.png 1525w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-700x685.png&#34; alt=&#34;&#34; width=&#34;700&#34; height=&#34;685&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-700x685.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-250x245.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-768x752.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-120x117.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2.png 1140w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&#xA;&#xA;         Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/my-beat-david-riordan/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">5:00 am My days begin with an early morning wake-up call from Zev – he comes through at around 5am and we get a couple of dedicated hours of playtime before the rest of the world gets up. It’s fun – this morning, we baked oatmeal cookies. Then once my wife and I are ready, we take the dog, throw</summary>
  </entry>
  <entry>
    <title>&#xA;                                            David Riordan: Product Manager&#xA;</title>
    <updated>2021-03-30T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-30:/2021/03/30/my-beat-david-riordan/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-4054&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;         &#xA;         &lt;div&gt;&#xA;             &lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/MyBeat_David-Riordan.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/MyBeat_David-Riordan.png 500w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/MyBeat_David-Riordan-250x175.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/MyBeat_David-Riordan-120x84.png 120w&#34; sizes=&#34;(max-width: 500px) 100vw, 500px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2020/11/MyBeat_David-Riordan.png&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;p&gt;&lt;b&gt;David is a Product Manager at Spotify in New York. But since the start of the pandemic, he’s been working from the Greenpoint apartment he shares with his wife, dog and 21-month-old son, Zev. Here, he talks us through his day-to-day…  &lt;/b&gt;&lt;/p&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;blockquote&gt;&lt;p&gt;5:00 am &lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My days begin with an early morning wake-up call from Zev – he comes through at around 5am and we get a couple of dedicated hours of playtime before the rest of the world gets up. It’s fun – this morning, we baked oatmeal cookies. Then once my wife and I are ready, we take the dog, throw Zev in the back carrier and walk all together through the park to his nanny-share. It’s a really lovely way to start the day. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;9:00 am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Back home, the first thing I do is check in with my To Do list – I have a love-hate relationship with task management software, but it’s great to have all my personal and professional commitments in one place. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As a Product Manager in Spotify’s Data and Insights team, I work on the audio-processing infrastructure – which means I get to hang out with brilliant researchers and build the tools they need to take big leaps in knowledge, as well as in the application of that new knowledge. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For the past year, I’ve been part of a project called &lt;a href=&#34;https://klio.io/&#34;&gt;Klio&lt;/a&gt; – creating a software framework that allows researchers, engineers and data scientists to process audio files easily and at scale, as part of a commodity data pipeline. It means that algorithms that could previously only run in a very bespoke manner on a small or medium-sized scale can now work for a relatively unbounded amount of input data. And they can do so in a unified, standardized way – meaning there’s no need for people to reinvent the wheel every time and freeing them up to go further, faster, with their research.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Klio has been a long time in the making, so &lt;a href=&#34;https://engineering.atspotify.com/2020/11/04/its-all-just-wiggly-air-building-infrastructure-to-support-audio-research/&#34;&gt;it was amazing to finally open-source it&lt;/a&gt; last month. Now, our tools and methodology are available to everyone and will help drive groundbreaking work across the research community worldwide. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;11:30 am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Working on a project like this has required lots of collaboration, so I’m glad to be part of a strong, supportive team. Even though we’re now spread out geographically, we’re always there for each other on Slack. And we all get together for a Hangout every morning to check in on what everyone’s doing and discuss the most important actions for the day. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;12:00 noon&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Time to leave my desk and break for lunch – my wife and I try to eat together and grab a bit of fresh air if we can. We’re lucky to have a communal outdoor space at our apartment block and plenty of parks nearby. And one of the great perks of staying in New York throughout the pandemic has been seeing other people out and about – bumping into neighbours and keeping up that sense of connection. It feels extra special right now.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;1:00 pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Whilst my mornings tend to be fairly unstructured, my afternoons are when most of my regularly scheduled meetings happen, particularly those involving colleagues in the US. But outside of these meetings, my work routine is highly variable – I might spend some focus time on a specific issue, check in with one of my fellow Product Managers, or run a workshop or user research session with one of our current customers. One of the things I love is that, at the moment, our community is small enough for us to know every single customer on a personal level – we can get to know their pain points and problems precisely and really understand the impact of any changes we make. Obviously, I’d love us to grow our customer base and I know it won’t always be possible to be so personally connected. But right now, it feels like we’re doing favours for friends – for extraordinary people that we admire and have the privilege of working with. And that brings a lot of meaning to everything we do. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;6:00 pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’re getting into planning season now – both for a new quarter and a new year – so some nights, I find myself working a bit later than usual on my laptop. Other times, I get an idea in my head and can’t stop till I’ve got it out! But mostly, I log off in the early evening, spend time with my family, walk the dog and then collapse. Like busy parents all over the world, right?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;111&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-250x40.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-768x121.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-120x19.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering.png 1525w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/MyBeat_David-Riordan-2-700x685.png&#34; alt=&#34;&#34; width=&#34;700&#34; height=&#34;685&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/MyBeat_David-Riordan-2-700x685.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/MyBeat_David-Riordan-2-250x245.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/MyBeat_David-Riordan-2-768x752.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/MyBeat_David-Riordan-2-120x117.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/MyBeat_David-Riordan-2.png 1140w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;         &#xA;         &#xA;&#xA;         &lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/03/30/my-beat-david-riordan/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/MyBeat_David-Riordan.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">5:00 am My days begin with an early morning wake-up call from Zev – he comes through at around 5am and we get a couple of dedicated hours of playtime before the rest of the world gets up. It’s fun – this morning, we baked oatmeal cookies. Then once my wife and I are ready, we take the dog, throw</summary>
  </entry>
  <entry>
    <title>&#xA;                                            David Riordan: Product Manager&#xA;</title>
    <updated>2021-03-30T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-30:/2021/03/my-beat-david-riordan/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-4054&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;        &#xA;         &lt;div&gt;&#xA;            &lt;div&gt;&#xA;            &lt;h2&gt;Putting the Spotlight on our technical employees&lt;/h2&gt;&#xA;    &lt;p&gt;My beat is a blog series that turns the spotlight towards technical employees across various desciplines and roles to showcase what a typical day as a Spotifier consists of.&lt;/p&gt;&#xA;            &lt;/div&gt;&#xA; &#xA;             &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan.png 500w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-250x175.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-120x84.png 120w&#34; sizes=&#34;(max-width: 500px) 100vw, 500px&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;div&gt;&#xA;             &#xA;                 &lt;p&gt;&lt;b&gt;David is a Product Manager at Spotify in New York. But since the start of the pandemic, he’s been working from the Greenpoint apartment he shares with his wife, dog and 21-month-old son, Zev. Here, he talks us through his day-to-day…  &lt;/b&gt;&lt;/p&gt;&#xA;             &lt;/div&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;blockquote&gt;&lt;p&gt;5:00 am &lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My days begin with an early morning wake-up call from Zev – he comes through at around 5am and we get a couple of dedicated hours of playtime before the rest of the world gets up. It’s fun – this morning, we baked oatmeal cookies. Then once my wife and I are ready, we take the dog, throw Zev in the back carrier and walk all together through the park to his nanny-share. It’s a really lovely way to start the day. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;9:00 am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Back home, the first thing I do is check in with my To Do list – I have a love-hate relationship with task management software, but it’s great to have all my personal and professional commitments in one place. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As a Product Manager in Spotify’s Data and Insights team, I work on the audio-processing infrastructure – which means I get to hang out with brilliant researchers and build the tools they need to take big leaps in knowledge, as well as in the application of that new knowledge. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For the past year, I’ve been part of a project called &lt;a href=&#34;https://klio.io/&#34;&gt;Klio&lt;/a&gt; – creating a software framework that allows researchers, engineers and data scientists to process audio files easily and at scale, as part of a commodity data pipeline. It means that algorithms that could previously only run in a very bespoke manner on a small or medium-sized scale can now work for a relatively unbounded amount of input data. And they can do so in a unified, standardized way – meaning there’s no need for people to reinvent the wheel every time and freeing them up to go further, faster, with their research.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Klio has been a long time in the making, so &lt;a href=&#34;https://engineering.atspotify.com/2020/11/04/its-all-just-wiggly-air-building-infrastructure-to-support-audio-research/&#34;&gt;it was amazing to finally open-source it&lt;/a&gt; last month. Now, our tools and methodology are available to everyone and will help drive groundbreaking work across the research community worldwide. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;11:30 am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Working on a project like this has required lots of collaboration, so I’m glad to be part of a strong, supportive team. Even though we’re now spread out geographically, we’re always there for each other on Slack. And we all get together for a Hangout every morning to check in on what everyone’s doing and discuss the most important actions for the day. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;12:00 noon&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Time to leave my desk and break for lunch – my wife and I try to eat together and grab a bit of fresh air if we can. We’re lucky to have a communal outdoor space at our apartment block and plenty of parks nearby. And one of the great perks of staying in New York throughout the pandemic has been seeing other people out and about – bumping into neighbours and keeping up that sense of connection. It feels extra special right now.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;1:00 pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Whilst my mornings tend to be fairly unstructured, my afternoons are when most of my regularly scheduled meetings happen, particularly those involving colleagues in the US. But outside of these meetings, my work routine is highly variable – I might spend some focus time on a specific issue, check in with one of my fellow Product Managers, or run a workshop or user research session with one of our current customers. One of the things I love is that, at the moment, our community is small enough for us to know every single customer on a personal level – we can get to know their pain points and problems precisely and really understand the impact of any changes we make. Obviously, I’d love us to grow our customer base and I know it won’t always be possible to be so personally connected. But right now, it feels like we’re doing favours for friends – for extraordinary people that we admire and have the privilege of working with. And that brings a lot of meaning to everything we do. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;6:00 pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’re getting into planning season now – both for a new quarter and a new year – so some nights, I find myself working a bit later than usual on my laptop. Other times, I get an idea in my head and can’t stop till I’ve got it out! But mostly, I log off in the early evening, spend time with my family, walk the dog and then collapse. Like busy parents all over the world, right?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;111&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-250x40.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-768x121.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-120x19.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering.png 1525w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-700x685.png&#34; alt=&#34;&#34; width=&#34;700&#34; height=&#34;685&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-700x685.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-250x245.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-768x752.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-120x117.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2.png 1140w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&#xA;&#xA;         Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/03/my-beat-david-riordan/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">5:00 am My days begin with an early morning wake-up call from Zev – he comes through at around 5am and we get a couple of dedicated hours of playtime before the rest of the world gets up. It’s fun – this morning, we baked oatmeal cookies. Then once my wife and I are ready, we take the dog, throw</summary>
  </entry>
  <entry>
    <title>&#xA;                                            David Riordan: Product Manager&#xA;</title>
    <updated>2021-03-30T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-30:/my-beat-david-riordan/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-4054&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;        &#xA;         &lt;div&gt;&#xA;            &lt;div&gt;&#xA;            &lt;h2&gt;Putting the Spotlight on our technical employees&lt;/h2&gt;&#xA;    &lt;p&gt;My beat is a blog series that turns the spotlight towards technical employees across various desciplines and roles to showcase what a typical day as a Spotifier consists of.&lt;/p&gt;&#xA;            &lt;/div&gt;&#xA; &#xA;             &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan.png 500w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-250x175.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-120x84.png 120w&#34; sizes=&#34;(max-width: 500px) 100vw, 500px&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;div&gt;&#xA;             &#xA;                 &lt;p&gt;&lt;b&gt;David is a Product Manager at Spotify in New York. But since the start of the pandemic, he’s been working from the Greenpoint apartment he shares with his wife, dog and 21-month-old son, Zev. Here, he talks us through his day-to-day…  &lt;/b&gt;&lt;/p&gt;&#xA;             &lt;/div&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;blockquote&gt;&lt;p&gt;5:00 am &lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My days begin with an early morning wake-up call from Zev – he comes through at around 5am and we get a couple of dedicated hours of playtime before the rest of the world gets up. It’s fun – this morning, we baked oatmeal cookies. Then once my wife and I are ready, we take the dog, throw Zev in the back carrier and walk all together through the park to his nanny-share. It’s a really lovely way to start the day. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;9:00 am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Back home, the first thing I do is check in with my To Do list – I have a love-hate relationship with task management software, but it’s great to have all my personal and professional commitments in one place. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As a Product Manager in Spotify’s Data and Insights team, I work on the audio-processing infrastructure – which means I get to hang out with brilliant researchers and build the tools they need to take big leaps in knowledge, as well as in the application of that new knowledge. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For the past year, I’ve been part of a project called &lt;a href=&#34;https://klio.io/&#34;&gt;Klio&lt;/a&gt; – creating a software framework that allows researchers, engineers and data scientists to process audio files easily and at scale, as part of a commodity data pipeline. It means that algorithms that could previously only run in a very bespoke manner on a small or medium-sized scale can now work for a relatively unbounded amount of input data. And they can do so in a unified, standardized way – meaning there’s no need for people to reinvent the wheel every time and freeing them up to go further, faster, with their research.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Klio has been a long time in the making, so &lt;a href=&#34;https://engineering.atspotify.com/2020/11/04/its-all-just-wiggly-air-building-infrastructure-to-support-audio-research/&#34;&gt;it was amazing to finally open-source it&lt;/a&gt; last month. Now, our tools and methodology are available to everyone and will help drive groundbreaking work across the research community worldwide. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;11:30 am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Working on a project like this has required lots of collaboration, so I’m glad to be part of a strong, supportive team. Even though we’re now spread out geographically, we’re always there for each other on Slack. And we all get together for a Hangout every morning to check in on what everyone’s doing and discuss the most important actions for the day. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;12:00 noon&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Time to leave my desk and break for lunch – my wife and I try to eat together and grab a bit of fresh air if we can. We’re lucky to have a communal outdoor space at our apartment block and plenty of parks nearby. And one of the great perks of staying in New York throughout the pandemic has been seeing other people out and about – bumping into neighbours and keeping up that sense of connection. It feels extra special right now.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;1:00 pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Whilst my mornings tend to be fairly unstructured, my afternoons are when most of my regularly scheduled meetings happen, particularly those involving colleagues in the US. But outside of these meetings, my work routine is highly variable – I might spend some focus time on a specific issue, check in with one of my fellow Product Managers, or run a workshop or user research session with one of our current customers. One of the things I love is that, at the moment, our community is small enough for us to know every single customer on a personal level – we can get to know their pain points and problems precisely and really understand the impact of any changes we make. Obviously, I’d love us to grow our customer base and I know it won’t always be possible to be so personally connected. But right now, it feels like we’re doing favours for friends – for extraordinary people that we admire and have the privilege of working with. And that brings a lot of meaning to everything we do. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;6:00 pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’re getting into planning season now – both for a new quarter and a new year – so some nights, I find myself working a bit later than usual on my laptop. Other times, I get an idea in my head and can’t stop till I’ve got it out! But mostly, I log off in the early evening, spend time with my family, walk the dog and then collapse. Like busy parents all over the world, right?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;111&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-250x40.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-768x121.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering-120x19.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/My-Beat-Breakdown-Engineering.png 1525w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-700x685.png&#34; alt=&#34;&#34; width=&#34;700&#34; height=&#34;685&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-700x685.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-250x245.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-768x752.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2-120x117.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan-2.png 1140w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&#xA;&#xA;         Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/machine-learning/&#34; rel=&#34;tag&#34;&gt;machine learning&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/my-beat-david-riordan/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2020/11/MyBeat_David-Riordan.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">5:00 am My days begin with an early morning wake-up call from Zev – he comes through at around 5am and we get a couple of dedicated hours of playtime before the rest of the world gets up. It’s fun – this morning, we baked oatmeal cookies. Then once my wife and I are ready, we take the dog, throw</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Why You Should Pair with Non-Engineers&#xA;</title>
    <updated>2021-03-23T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-23:/why-you-should-pair-with-non-engineers/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;March 23, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/why-you-should-pair-with-non-engineers/&#34; title=&#34;Why You Should Pair with Non-Engineers&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-700x352.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-1536x772.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-2048x1029.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;Spotify encourages engineers to become &lt;a href=&#34;https://jchyip.medium.com/why-t-shaped-people-e8706198e437&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;T-shaped&lt;/a&gt; and lean into technologies and skill sets outside of their core specialization. Being a T-shaped developer doesn’t always mean having to learn more code, additional languages, or frameworks. It can be about broadening your outlook on the product-creation process and &lt;a href=&#34;https://www.youtube.com/watch?v=4jckqGVtyAA&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;learning from peers&lt;/a&gt; outside of your discipline. Design Systems Engineering Manager at Spotify Tyce Clee talks about his experiences and the benefits of pairing with teams outside your strict discipline. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Prior to becoming an engineering manager, I spent the majority of my career as an engineer, primarily working on web interfaces and applications. The experiences and relationships built during my time as an engineer were essential to a successful transition into management. I’ve had firsthand experience with pairing with many other disciplines to achieve a goal or take a feature to production, and I want to share some of those learnings with you.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Broaden scope of knowledge (T shape)&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Engineers tend to skew towards a particular focus area within their chosen path, allowing for more advanced skills in some areas, but less in others. A JavaScript engineer who loves to work on data visualization, for example, may work less with GraphQL or Node.JS, or a more UI-focused engineer who lives within the world of CSS may not get a ton of exposure to complex routing or performance-based optimizations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Within web engineering, we can look to our other developer colleagues and learn from them and their processes and workflows and bring that back to our discipline. This could be done by embedding with a backend team to understand how to map out an API schema for the very first time, build that together, and finally serve it to the front end. Then, returning to your team as a web engineer, you can have a much better understanding of how the schema was made and exactly what’s returned when making requests. Methods such as these can extend your “T-shapedness” by expanding your knowledge in areas that you don’t necessarily focus on in your day to day.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Additionally, when pairing with those outside of our discipline, we get to expand our thinking more laterally beyond just code, understanding more of the why and how behind a product-creation process and not just the final piece of the puzzle.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When I paired with a UX prototyper, I was able to gain early insights into product inception. This allowed me to get face time with real users through user-testing sessions, to have conversations with product managers on the importance of the new feature or product, and even to pair with designers on early mockups of the UI itself. Then, when the time came to write code, I had a much more well-rounded and cohesive background on the product we were building, and could be more invested in why it’s important for the business.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Stress-test documentation&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I had a humbling and great learning moment with a designer who was attempting to write code for the first time on their computer. My team had written and rewritten our contribution documentation multiple times in previous weeks, and were confident it was thorough and had accounted for all use cases and disciplines. One thing we forgot to include, however, was the scenario when a computer had &lt;em&gt;never&lt;/em&gt; been used for writing code for the web.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This meant the machine didn’t have Xcode command-line tools, Node.JS, npm, Homebrew, etc. After watching the designer try to figure out why nothing was working, I had to interject and explain what was missing. We then paired on the pull request to update the contribution docs with a new section purely for those who had never run a frontend web environment before.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Stress-testing your documentation is critical for the success of your product, and we’ve found it best to simply observe when someone is attempting to read through the docs. Try to hold back your thoughts and tips in order to really test what you’ve written down.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Build empathy between disciplines&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Understanding the work that your colleagues do is a key piece to building better products together. One way to achieve this relatively quickly is to spend a “day in the life” with someone outside of your discipline. Go to every meeting, ask questions, take notes and, critically, attempt to do a piece of work as they would. A great example would be pairing with a designer to work on a small piece of a project or to spend time with a UX writer to understand the importance of tone of voice and language.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The next step would be to return the favor and encourage your non-engineer teammates to spend time with you. Dedicate the day to it, and treat it like an open conversation with some learning goals to achieve by the end of the day. Building this level of empathy between disciplines can only help with future planning, prioritization of work, and overall understanding of the difficulties faced by all the disciplines required to build digital products. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I once spent half a day pairing with a designer to brainstorm ways to better capture key descriptions of each component in our design system, and together we came up with a way to store that data to then use as code hints in an &lt;a href=&#34;https://en.wikipedia.org/wiki/Integrated_development_environment&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;IDE&lt;/a&gt; and also display in &lt;a href=&#34;http://www.figma.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Figma&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You might be thinking “I don’t have time for this,” or “I can’t justify prioritizing this over other things in my sprint,” but I would argue that spending a “day in the life” with someone else will forever affect the way you interact with that person, discipline, or product. Diversity of thought and background is key to building the best products imaginable, and by sharing your day with someone else you will exponentially increase your ability to build better products that will ultimately impact a broader group of people due to that expanded way of thinking.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Shared language&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Many workplaces these days have their own unique acronyms, slang, and more to help make sense of the slew of historical information a company has. This &lt;em&gt;can&lt;/em&gt; be helpful, but only when you’re aware of what those acronyms mean and why they’re important. It’s vital to help all new starters or internal transfers understand these terms and to explain them in a manner that makes sense to those outside of your team and/or discipline.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Something we use extensively across Spotify is SEMVER (&lt;a href=&#34;https://semver.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;semantic versioning&lt;/a&gt;), and this technique for releasing software doesn’t always translate 1:1 to other disciplines without a little bit of explanation. I remember multiple times where my team took the time to walk through the fundamentals of this strategy with non-engineers to help them better understand the terminology and intent. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Doing this helped create a bridge of understanding between our disciplines, and such collaboration might even assist those outside of engineering with understanding release schedules and how they can play a key part in releasing software. Conversely, a designer explaining how a design critique works, the names given to various flows within their design tool, and even the difference between vector- and pixel-based image creation, can go a long way to helping an engineer better understand and relate to design.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We made it to the end! So what did we learn? It’s always important to stress-test your onboarding documentation and procedures, and the best way to do that is with someone that’s never done it before. Don’t be afraid of this; embrace the awkward moment your lack of documentation leads to a brick wall for the person onboarding. Make a note and fix it before the next person stumbles into the same problem.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Share more between disciplines, and encourage each other to translate words and phrases that  may otherwise be confusing and isolating. Consider being T-shaped in more unorthodox ways —take up a design course, learn more about UX writing, study how accessibility in the browser works. I’ve personally spent time on all of these things, and see myself as having broader knowledge in areas I would’ve otherwise overlooked in favor of focusing on purely engineering-based areas.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/why-you-should-pair-with-non-engineers/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR Spotify encourages engineers to become T-shaped and lean into technologies and skill sets outside of their core specialization. Being a T-shaped developer doesn&#39;t always mean having to learn more code, additional languages, or frameworks. It can be about broadening your outlook on the product-</summary>
    <author>
      <name>Published by Tyce Clee</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Why You Should Pair with Non-Engineers&#xA;</title>
    <updated>2021-03-23T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-23:/2021/03/why-you-should-pair-with-non-engineers/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;March 23, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/03/why-you-should-pair-with-non-engineers/&#34; title=&#34;Why You Should Pair with Non-Engineers&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-700x352.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-1536x772.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-2048x1029.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;Spotify encourages engineers to become &lt;a href=&#34;https://jchyip.medium.com/why-t-shaped-people-e8706198e437&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;T-shaped&lt;/a&gt; and lean into technologies and skill sets outside of their core specialization. Being a T-shaped developer doesn’t always mean having to learn more code, additional languages, or frameworks. It can be about broadening your outlook on the product-creation process and &lt;a href=&#34;https://www.youtube.com/watch?v=4jckqGVtyAA&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;learning from peers&lt;/a&gt; outside of your discipline. Design Systems Engineering Manager at Spotify Tyce Clee talks about his experiences and the benefits of pairing with teams outside your strict discipline. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Prior to becoming an engineering manager, I spent the majority of my career as an engineer, primarily working on web interfaces and applications. The experiences and relationships built during my time as an engineer were essential to a successful transition into management. I’ve had firsthand experience with pairing with many other disciplines to achieve a goal or take a feature to production, and I want to share some of those learnings with you.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Broaden scope of knowledge (T shape)&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Engineers tend to skew towards a particular focus area within their chosen path, allowing for more advanced skills in some areas, but less in others. A JavaScript engineer who loves to work on data visualization, for example, may work less with GraphQL or Node.JS, or a more UI-focused engineer who lives within the world of CSS may not get a ton of exposure to complex routing or performance-based optimizations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Within web engineering, we can look to our other developer colleagues and learn from them and their processes and workflows and bring that back to our discipline. This could be done by embedding with a backend team to understand how to map out an API schema for the very first time, build that together, and finally serve it to the front end. Then, returning to your team as a web engineer, you can have a much better understanding of how the schema was made and exactly what’s returned when making requests. Methods such as these can extend your “T-shapedness” by expanding your knowledge in areas that you don’t necessarily focus on in your day to day.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Additionally, when pairing with those outside of our discipline, we get to expand our thinking more laterally beyond just code, understanding more of the why and how behind a product-creation process and not just the final piece of the puzzle.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When I paired with a UX prototyper, I was able to gain early insights into product inception. This allowed me to get face time with real users through user-testing sessions, to have conversations with product managers on the importance of the new feature or product, and even to pair with designers on early mockups of the UI itself. Then, when the time came to write code, I had a much more well-rounded and cohesive background on the product we were building, and could be more invested in why it’s important for the business.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Stress-test documentation&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I had a humbling and great learning moment with a designer who was attempting to write code for the first time on their computer. My team had written and rewritten our contribution documentation multiple times in previous weeks, and were confident it was thorough and had accounted for all use cases and disciplines. One thing we forgot to include, however, was the scenario when a computer had &lt;em&gt;never&lt;/em&gt; been used for writing code for the web.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This meant the machine didn’t have Xcode command-line tools, Node.JS, npm, Homebrew, etc. After watching the designer try to figure out why nothing was working, I had to interject and explain what was missing. We then paired on the pull request to update the contribution docs with a new section purely for those who had never run a frontend web environment before.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Stress-testing your documentation is critical for the success of your product, and we’ve found it best to simply observe when someone is attempting to read through the docs. Try to hold back your thoughts and tips in order to really test what you’ve written down.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Build empathy between disciplines&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Understanding the work that your colleagues do is a key piece to building better products together. One way to achieve this relatively quickly is to spend a “day in the life” with someone outside of your discipline. Go to every meeting, ask questions, take notes and, critically, attempt to do a piece of work as they would. A great example would be pairing with a designer to work on a small piece of a project or to spend time with a UX writer to understand the importance of tone of voice and language.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The next step would be to return the favor and encourage your non-engineer teammates to spend time with you. Dedicate the day to it, and treat it like an open conversation with some learning goals to achieve by the end of the day. Building this level of empathy between disciplines can only help with future planning, prioritization of work, and overall understanding of the difficulties faced by all the disciplines required to build digital products. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I once spent half a day pairing with a designer to brainstorm ways to better capture key descriptions of each component in our design system, and together we came up with a way to store that data to then use as code hints in an &lt;a href=&#34;https://en.wikipedia.org/wiki/Integrated_development_environment&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;IDE&lt;/a&gt; and also display in &lt;a href=&#34;http://www.figma.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Figma&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You might be thinking “I don’t have time for this,” or “I can’t justify prioritizing this over other things in my sprint,” but I would argue that spending a “day in the life” with someone else will forever affect the way you interact with that person, discipline, or product. Diversity of thought and background is key to building the best products imaginable, and by sharing your day with someone else you will exponentially increase your ability to build better products that will ultimately impact a broader group of people due to that expanded way of thinking.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Shared language&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Many workplaces these days have their own unique acronyms, slang, and more to help make sense of the slew of historical information a company has. This &lt;em&gt;can&lt;/em&gt; be helpful, but only when you’re aware of what those acronyms mean and why they’re important. It’s vital to help all new starters or internal transfers understand these terms and to explain them in a manner that makes sense to those outside of your team and/or discipline.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Something we use extensively across Spotify is SEMVER (&lt;a href=&#34;https://semver.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;semantic versioning&lt;/a&gt;), and this technique for releasing software doesn’t always translate 1:1 to other disciplines without a little bit of explanation. I remember multiple times where my team took the time to walk through the fundamentals of this strategy with non-engineers to help them better understand the terminology and intent. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Doing this helped create a bridge of understanding between our disciplines, and such collaboration might even assist those outside of engineering with understanding release schedules and how they can play a key part in releasing software. Conversely, a designer explaining how a design critique works, the names given to various flows within their design tool, and even the difference between vector- and pixel-based image creation, can go a long way to helping an engineer better understand and relate to design.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We made it to the end! So what did we learn? It’s always important to stress-test your onboarding documentation and procedures, and the best way to do that is with someone that’s never done it before. Don’t be afraid of this; embrace the awkward moment your lack of documentation leads to a brick wall for the person onboarding. Make a note and fix it before the next person stumbles into the same problem.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Share more between disciplines, and encourage each other to translate words and phrases that  may otherwise be confusing and isolating. Consider being T-shaped in more unorthodox ways —take up a design course, learn more about UX writing, study how accessibility in the browser works. I’ve personally spent time on all of these things, and see myself as having broader knowledge in areas I would’ve otherwise overlooked in favor of focusing on purely engineering-based areas.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/03/why-you-should-pair-with-non-engineers/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR Spotify encourages engineers to become T-shaped and lean into technologies and skill sets outside of their core specialization. Being a T-shaped developer doesn&#39;t always mean having to learn more code, additional languages, or frameworks. It can be about broadening your outlook on the product-</summary>
    <author>
      <name>Published by Tyce Clee</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Why You Should Pair with Non-Engineers&#xA;</title>
    <updated>2021-03-23T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-23:/why-you-should-pair-with-non-engineers/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;March 23, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/why-you-should-pair-with-non-engineers/&#34; title=&#34;Why You Should Pair with Non-Engineers&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-700x352.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-1536x772.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-2048x1029.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;Spotify encourages engineers to become &lt;a href=&#34;https://jchyip.medium.com/why-t-shaped-people-e8706198e437&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;T-shaped&lt;/a&gt; and lean into technologies and skill sets outside of their core specialization. Being a T-shaped developer doesn’t always mean having to learn more code, additional languages, or frameworks. It can be about broadening your outlook on the product-creation process and &lt;a href=&#34;https://www.youtube.com/watch?v=4jckqGVtyAA&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;learning from peers&lt;/a&gt; outside of your discipline. Design Systems Engineering Manager at Spotify Tyce Clee talks about his experiences and the benefits of pairing with teams outside your strict discipline. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Prior to becoming an engineering manager, I spent the majority of my career as an engineer, primarily working on web interfaces and applications. The experiences and relationships built during my time as an engineer were essential to a successful transition into management. I’ve had firsthand experience with pairing with many other disciplines to achieve a goal or take a feature to production, and I want to share some of those learnings with you.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Broaden scope of knowledge (T shape)&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Engineers tend to skew towards a particular focus area within their chosen path, allowing for more advanced skills in some areas, but less in others. A JavaScript engineer who loves to work on data visualization, for example, may work less with GraphQL or Node.JS, or a more UI-focused engineer who lives within the world of CSS may not get a ton of exposure to complex routing or performance-based optimizations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Within web engineering, we can look to our other developer colleagues and learn from them and their processes and workflows and bring that back to our discipline. This could be done by embedding with a backend team to understand how to map out an API schema for the very first time, build that together, and finally serve it to the front end. Then, returning to your team as a web engineer, you can have a much better understanding of how the schema was made and exactly what’s returned when making requests. Methods such as these can extend your “T-shapedness” by expanding your knowledge in areas that you don’t necessarily focus on in your day to day.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Additionally, when pairing with those outside of our discipline, we get to expand our thinking more laterally beyond just code, understanding more of the why and how behind a product-creation process and not just the final piece of the puzzle.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When I paired with a UX prototyper, I was able to gain early insights into product inception. This allowed me to get face time with real users through user-testing sessions, to have conversations with product managers on the importance of the new feature or product, and even to pair with designers on early mockups of the UI itself. Then, when the time came to write code, I had a much more well-rounded and cohesive background on the product we were building, and could be more invested in why it’s important for the business.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Stress-test documentation&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I had a humbling and great learning moment with a designer who was attempting to write code for the first time on their computer. My team had written and rewritten our contribution documentation multiple times in previous weeks, and were confident it was thorough and had accounted for all use cases and disciplines. One thing we forgot to include, however, was the scenario when a computer had &lt;em&gt;never&lt;/em&gt; been used for writing code for the web.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This meant the machine didn’t have Xcode command-line tools, Node.JS, npm, Homebrew, etc. After watching the designer try to figure out why nothing was working, I had to interject and explain what was missing. We then paired on the pull request to update the contribution docs with a new section purely for those who had never run a frontend web environment before.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Stress-testing your documentation is critical for the success of your product, and we’ve found it best to simply observe when someone is attempting to read through the docs. Try to hold back your thoughts and tips in order to really test what you’ve written down.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Build empathy between disciplines&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Understanding the work that your colleagues do is a key piece to building better products together. One way to achieve this relatively quickly is to spend a “day in the life” with someone outside of your discipline. Go to every meeting, ask questions, take notes and, critically, attempt to do a piece of work as they would. A great example would be pairing with a designer to work on a small piece of a project or to spend time with a UX writer to understand the importance of tone of voice and language.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The next step would be to return the favor and encourage your non-engineer teammates to spend time with you. Dedicate the day to it, and treat it like an open conversation with some learning goals to achieve by the end of the day. Building this level of empathy between disciplines can only help with future planning, prioritization of work, and overall understanding of the difficulties faced by all the disciplines required to build digital products. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I once spent half a day pairing with a designer to brainstorm ways to better capture key descriptions of each component in our design system, and together we came up with a way to store that data to then use as code hints in an &lt;a href=&#34;https://en.wikipedia.org/wiki/Integrated_development_environment&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;IDE&lt;/a&gt; and also display in &lt;a href=&#34;http://www.figma.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Figma&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You might be thinking “I don’t have time for this,” or “I can’t justify prioritizing this over other things in my sprint,” but I would argue that spending a “day in the life” with someone else will forever affect the way you interact with that person, discipline, or product. Diversity of thought and background is key to building the best products imaginable, and by sharing your day with someone else you will exponentially increase your ability to build better products that will ultimately impact a broader group of people due to that expanded way of thinking.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Shared language&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Many workplaces these days have their own unique acronyms, slang, and more to help make sense of the slew of historical information a company has. This &lt;em&gt;can&lt;/em&gt; be helpful, but only when you’re aware of what those acronyms mean and why they’re important. It’s vital to help all new starters or internal transfers understand these terms and to explain them in a manner that makes sense to those outside of your team and/or discipline.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Something we use extensively across Spotify is SEMVER (&lt;a href=&#34;https://semver.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;semantic versioning&lt;/a&gt;), and this technique for releasing software doesn’t always translate 1:1 to other disciplines without a little bit of explanation. I remember multiple times where my team took the time to walk through the fundamentals of this strategy with non-engineers to help them better understand the terminology and intent. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Doing this helped create a bridge of understanding between our disciplines, and such collaboration might even assist those outside of engineering with understanding release schedules and how they can play a key part in releasing software. Conversely, a designer explaining how a design critique works, the names given to various flows within their design tool, and even the difference between vector- and pixel-based image creation, can go a long way to helping an engineer better understand and relate to design.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We made it to the end! So what did we learn? It’s always important to stress-test your onboarding documentation and procedures, and the best way to do that is with someone that’s never done it before. Don’t be afraid of this; embrace the awkward moment your lack of documentation leads to a brick wall for the person onboarding. Make a note and fix it before the next person stumbles into the same problem.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Share more between disciplines, and encourage each other to translate words and phrases that  may otherwise be confusing and isolating. Consider being T-shaped in more unorthodox ways —take up a design course, learn more about UX writing, study how accessibility in the browser works. I’ve personally spent time on all of these things, and see myself as having broader knowledge in areas I would’ve otherwise overlooked in favor of focusing on purely engineering-based areas.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/why-you-should-pair-with-non-engineers/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Pairing_02.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR Spotify encourages engineers to become T-shaped and lean into technologies and skill sets outside of their core specialization. Being a T-shaped developer doesn&#39;t always mean having to learn more code, additional languages, or frameworks. It can be about broadening your outlook on the product-</summary>
    <author>
      <name>Published by Tyce Clee</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Why You Should Pair with Non-Engineers&#xA;</title>
    <updated>2021-03-23T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-23:/2021/03/23/why-you-should-pair-with-non-engineers/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;March 23, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/03/23/why-you-should-pair-with-non-engineers/&#34; title=&#34;Why You Should Pair with Non-Engineers&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pairing_02.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pairing_02.png 2105w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pairing_02-250x126.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pairing_02-700x352.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pairing_02-768x386.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pairing_02-1536x772.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pairing_02-2048x1029.png 2048w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pairing_02-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/03/Pairing_02.png&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;Spotify encourages engineers to become &lt;a href=&#34;https://jchyip.medium.com/why-t-shaped-people-e8706198e437&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;T-shaped&lt;/a&gt; and lean into technologies and skill sets outside of their core specialization. Being a T-shaped developer doesn’t always mean having to learn more code, additional languages, or frameworks. It can be about broadening your outlook on the product-creation process and &lt;a href=&#34;https://www.youtube.com/watch?v=4jckqGVtyAA&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;learning from peers&lt;/a&gt; outside of your discipline. Design Systems Engineering Manager at Spotify Tyce Clee talks about his experiences and the benefits of pairing with teams outside your strict discipline. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Prior to becoming an engineering manager, I spent the majority of my career as an engineer, primarily working on web interfaces and applications. The experiences and relationships built during my time as an engineer were essential to a successful transition into management. I’ve had firsthand experience with pairing with many other disciplines to achieve a goal or take a feature to production, and I want to share some of those learnings with you.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Broaden scope of knowledge (T shape)&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Engineers tend to skew towards a particular focus area within their chosen path, allowing for more advanced skills in some areas, but less in others. A JavaScript engineer who loves to work on data visualization, for example, may work less with GraphQL or Node.JS, or a more UI-focused engineer who lives within the world of CSS may not get a ton of exposure to complex routing or performance-based optimizations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Within web engineering, we can look to our other developer colleagues and learn from them and their processes and workflows and bring that back to our discipline. This could be done by embedding with a backend team to understand how to map out an API schema for the very first time, build that together, and finally serve it to the front end. Then, returning to your team as a web engineer, you can have a much better understanding of how the schema was made and exactly what’s returned when making requests. Methods such as these can extend your “T-shapedness” by expanding your knowledge in areas that you don’t necessarily focus on in your day to day.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Additionally, when pairing with those outside of our discipline, we get to expand our thinking more laterally beyond just code, understanding more of the why and how behind a product-creation process and not just the final piece of the puzzle.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When I paired with a UX prototyper, I was able to gain early insights into product inception. This allowed me to get face time with real users through user-testing sessions, to have conversations with product managers on the importance of the new feature or product, and even to pair with designers on early mockups of the UI itself. Then, when the time came to write code, I had a much more well-rounded and cohesive background on the product we were building, and could be more invested in why it’s important for the business.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Stress-test documentation&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I had a humbling and great learning moment with a designer who was attempting to write code for the first time on their computer. My team had written and rewritten our contribution documentation multiple times in previous weeks, and were confident it was thorough and had accounted for all use cases and disciplines. One thing we forgot to include, however, was the scenario when a computer had &lt;em&gt;never&lt;/em&gt; been used for writing code for the web.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This meant the machine didn’t have Xcode command-line tools, Node.JS, npm, Homebrew, etc. After watching the designer try to figure out why nothing was working, I had to interject and explain what was missing. We then paired on the pull request to update the contribution docs with a new section purely for those who had never run a frontend web environment before.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Stress-testing your documentation is critical for the success of your product, and we’ve found it best to simply observe when someone is attempting to read through the docs. Try to hold back your thoughts and tips in order to really test what you’ve written down.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Build empathy between disciplines&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Understanding the work that your colleagues do is a key piece to building better products together. One way to achieve this relatively quickly is to spend a “day in the life” with someone outside of your discipline. Go to every meeting, ask questions, take notes and, critically, attempt to do a piece of work as they would. A great example would be pairing with a designer to work on a small piece of a project or to spend time with a UX writer to understand the importance of tone of voice and language.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The next step would be to return the favor and encourage your non-engineer teammates to spend time with you. Dedicate the day to it, and treat it like an open conversation with some learning goals to achieve by the end of the day. Building this level of empathy between disciplines can only help with future planning, prioritization of work, and overall understanding of the difficulties faced by all the disciplines required to build digital products. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I once spent half a day pairing with a designer to brainstorm ways to better capture key descriptions of each component in our design system, and together we came up with a way to store that data to then use as code hints in an &lt;a href=&#34;https://en.wikipedia.org/wiki/Integrated_development_environment&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;IDE&lt;/a&gt; and also display in &lt;a href=&#34;http://www.figma.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Figma&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You might be thinking “I don’t have time for this,” or “I can’t justify prioritizing this over other things in my sprint,” but I would argue that spending a “day in the life” with someone else will forever affect the way you interact with that person, discipline, or product. Diversity of thought and background is key to building the best products imaginable, and by sharing your day with someone else you will exponentially increase your ability to build better products that will ultimately impact a broader group of people due to that expanded way of thinking.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Shared language&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Many workplaces these days have their own unique acronyms, slang, and more to help make sense of the slew of historical information a company has. This &lt;em&gt;can&lt;/em&gt; be helpful, but only when you’re aware of what those acronyms mean and why they’re important. It’s vital to help all new starters or internal transfers understand these terms and to explain them in a manner that makes sense to those outside of your team and/or discipline.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Something we use extensively across Spotify is SEMVER (&lt;a href=&#34;https://semver.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;semantic versioning&lt;/a&gt;), and this technique for releasing software doesn’t always translate 1:1 to other disciplines without a little bit of explanation. I remember multiple times where my team took the time to walk through the fundamentals of this strategy with non-engineers to help them better understand the terminology and intent. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Doing this helped create a bridge of understanding between our disciplines, and such collaboration might even assist those outside of engineering with understanding release schedules and how they can play a key part in releasing software. Conversely, a designer explaining how a design critique works, the names given to various flows within their design tool, and even the difference between vector- and pixel-based image creation, can go a long way to helping an engineer better understand and relate to design.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We made it to the end! So what did we learn? It’s always important to stress-test your onboarding documentation and procedures, and the best way to do that is with someone that’s never done it before. Don’t be afraid of this; embrace the awkward moment your lack of documentation leads to a brick wall for the person onboarding. Make a note and fix it before the next person stumbles into the same problem.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Share more between disciplines, and encourage each other to translate words and phrases that  may otherwise be confusing and isolating. Consider being T-shaped in more unorthodox ways —take up a design course, learn more about UX writing, study how accessibility in the browser works. I’ve personally spent time on all of these things, and see myself as having broader knowledge in areas I would’ve otherwise overlooked in favor of focusing on purely engineering-based areas.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/03/23/why-you-should-pair-with-non-engineers/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pairing_02.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">TL;DR Spotify encourages engineers to become T-shaped and lean into technologies and skill sets outside of their core specialization. Being a T-shaped developer doesn&#39;t always mean having to learn more code, additional languages, or frameworks. It can be about broadening your outlook on the product-</summary>
    <author>
      <name>Published by Tyce Clee</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Happy Birthday, Backstage: Spotify’s Biggest Open Source Project Grows Up Fast&#xA;</title>
    <updated>2021-03-16T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-16:/2021/03/16/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;March 16, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/03/16/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/&#34; title=&#34;Happy Birthday, Backstage: Spotify’s Biggest Open Source Project Grows Up Fast&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Backstage-BDay-Blog_v002.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/03/Backstage-BDay-Blog_v002.gif&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; As Backstage turns one, we’re doubling down on our commitment to the open source project and the community we’re building it with. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;From Hack Week hunch to CNCF Sandbox&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Last year, a small team of Spotifiers had a hunch about our homegrown developer portal: if Backstage could help our 1,600+ engineers manage the 14,000+ software components we use at Spotify, then couldn’t it do the same for other growing tech companies, too? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The team began building a proof of concept for an external version of Backstage during Hack Week. Just six weeks later &lt;a href=&#34;https://backstage.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt; was out in the wild — making its official open source debut &lt;a href=&#34;https://engineering.atspotify.com/2020/03/17/what-the-heck-is-backstage-anyway/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;one year ago today&lt;/a&gt;. A few months and a few thousand pull requests later, what started as a hunch became an early stage Sandbox project at &lt;a href=&#34;https://engineering.atspotify.com/2020/09/24/cloud-native-computing-foundation-accepts-backstage-as-a-sandbox-project/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the CNCF&lt;/a&gt; (also home to Kubernetes, Envoy, and Helm).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Looking back, the Backstage open source project feels like it has come incredibly far in a short amount of time. But on its first anniversary — as we prepare Backstage for a more stable release and wider adoption — we’re even more excited for what lies ahead. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;1999&#34; height=&#34;1016&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image2.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image2.png 1999w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image2-250x127.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image2-700x356.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image2-768x390.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image2-1536x781.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image2-120x61.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;&lt;figcaption&gt;&lt;em&gt;“We recognized the need to drive increased productivity and collaboration for our developer community. We could only accomplish this by removing friction along the developer journey and by prioritizing pain points that got in the way of our developers. Building a unified developer front door for all things developers need was critical to us. Backstage provided the foundation that allowed us to accelerate on this promise.” &lt;/em&gt;&lt;br/&gt;&lt;em&gt;— Expedia Group Developer Experience Team&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Companies as varied as Expedia, Zalando, TELUS, American Airlines, and DoorDash have already started using Backstage. And we remain committed to our long-term vision of seeing Backstage become the standard for all kinds of companies. We think the past year has given us a good head start. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Why a developer portal?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To understand the problems Backstage solves, let’s go back to its beginnings at Spotify — and why we built it in the first place. (If you’ve heard &lt;a href=&#34;https://backstage.io/docs/overview/background&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this story&lt;/a&gt; before, feel free to skip ahead.) &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In March 2020, our internal version of Backstage was already a mature product; our developers had started using a primitive version of it four years earlier. During that period, we were growing fast. We seemed to be adding new developers, new software components, and new tooling at an equally breakneck pace. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our small, autonomous developer teams have always been our strength. But as we scaled, we didn’t have one way to create a microservice, we had a dozen. We didn’t have one new developer trying to find their way around our stack, we had hundreds. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The faster we grew, the more this fragmentation slowed us down again. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;A single pane of glass&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Designed first as a basic service catalog, our engineering teams began to gravitate to Backstage on their own — recognizing its ability to streamline workflows, help them align with work being done across the organization, and reduce the daily frustrations that slow developers down.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It became the “single pane of glass” for all our tooling. Everything our developers needed to create, manage, and monitor their projects was in one place. We began to rely on Backstage more and more — from managing data pipelines to software migrations — until it became the hub for all our development work.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With Backstage, infrastructure tooling got out of our engineers’ way so they could build and test faster. And since it simplified discovery — from ownership and documentation to best practices — we could onboard new developers faster, too. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Speed was the key. We saw firsthand that faster developers aren’t just &lt;a href=&#34;https://martinfowler.com/articles/developer-effectiveness.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;more productive developers&lt;/a&gt;, they’re happier developers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;From internal portal to open platform&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;What’s the biggest difference between the internal version of Backstage and the version we released a year ago? We didn’t want to ship you Spotify’s developer portal. We wanted to ship the best platform for you to build your own developer portal — one that fits your particular needs and use cases.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Unlike &lt;a href=&#34;https://engineering.atspotify.com/2020/04/21/how-we-use-backstage-at-spotify/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the internal version of Backstage&lt;/a&gt;, which has more than 120 different &lt;a href=&#34;https://backstage.io/docs/FAQ#what-is-a-plugin-in-backstage&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;plugins&lt;/a&gt; built by 60 different teams, the first open source version was mostly an empty shell. Shiny, new, and full of potential — yes. But less like a brand new car and more like a blank canvas. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since that first day, the promise of that empty shell has been filled in and shaped into a full-featured product, thanks to feedback from early adopters and contributions from the open source community. In the last year:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We introduced four core features: the &lt;a href=&#34;https://backstage.io/blog/2020/06/22/backstage-service-catalog-alpha&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Service Catalog&lt;/a&gt;, &lt;a href=&#34;https://backstage.io/blog/2020/08/05/announcing-backstage-software-templates&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Software Templates&lt;/a&gt;, &lt;a href=&#34;https://backstage.io/blog/2020/09/08/announcing-tech-docs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;TechDocs&lt;/a&gt;, and our &lt;a href=&#34;https://engineering.atspotify.com/2021/03/01/designing-a-better-kubernetes-experience-for-developers/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;new Kubernetes monitoring tool&lt;/a&gt;. This is functionality that we think defines the Backstage experience and that everyone would want out of the box.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We launched the &lt;a href=&#34;https://backstage.io/plugins&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Plugin Marketplace&lt;/a&gt;: the ecosystem for open source plugins for Backstage continues to grow, including contributions from individuals, from other tech companies, and software providers, like &lt;a href=&#34;https://github.com/snyk-tech-services/backstage-plugin-snyk/blob/main/README.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Snyk&lt;/a&gt;. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We created the &lt;a href=&#34;https://backstage.io/blog/2020/09/30/backstage-design-system&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage Design System&lt;/a&gt;: consistent frontend design is integral to creating a seamless experience inside Backstage, so we developed tools and guidelines anyone can use, including non-designers.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Stabilizing the core&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The work we did last year — identifying the core features and iterating on them quickly — has prepared us for what’s next: &lt;a href=&#34;https://backstage.io/blog/2020/12/22/stability-index&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;stabilizing those features and APIs&lt;/a&gt; so that more companies can adopt the platform for production use. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the coming weeks, our team will:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Bring both the Service Catalog and the Software Templates scaffolder into beta, resulting in a more stable release ready for wider adoption.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Create an easy, standardized way for developers to build plugins that will encourage contributions and lead to a richer ecosystem for everyone.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Update other parts of the core app — notably, improving search and incorporating GraphQL systemwide.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You can learn more in &lt;a href=&#34;https://github.com/backstage/backstage/blob/master/docs/overview/roadmap.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the project roadmap&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Adopters: Backstage in the wild!&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Beyond the &lt;a href=&#34;https://github.com/backstage/backstage/blob/master/ADOPTERS.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;official adopters list&lt;/a&gt;, we’ve consulted with hundreds of other companies evaluating Backstage — from digital natives to Fortune 50’s undergoing digital transformations. Our rule of thumb has been that once your org reaches 100 engineers, it’s time to stop managing your infrastructure solely with spreadsheets and Slack channels.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Early adopters Zalando and SDA SE shared &lt;a href=&#34;https://youtu.be/4-VX9tDdJYY?t=1756&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;their adoption experiences&lt;/a&gt; last month at our first community session. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Expedia has a team dedicated to rolling out Backstage.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;American Airlines has 20 teams using their version of Backstage, which they named Runway. They’re already seeing some good internal traction:&lt;p&gt;“We now get upwards of 500+ hits a day from people using not only “Create an App” but also consuming other components in Runway, like Catalog, and our custom plugins. Just a few months ago, this was maybe 50/day.” — Jason Walker, Director, Technology Transformation, American Airlines&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;DoorDash is one of our most recent adopters and we’ve been working closely to get them up and running. &lt;p&gt;“The support we received from the Spotify team, GitHub collaborators, and Discord members enabled us to stand up our initial environment quickly and painlessly, while also inspiring a robust roadmap that will make Backstage our engineering hub.” — Adam Rogal, Director, Developer Platform, DoorDash&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;A world of contributors grows into a community&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Of course, none of this would have been possible without our ever-growing community of contributors from around the world. Since the project’s beginning, the project has averaged &lt;a href=&#34;https://twitter.com/SpotifyEng/status/1341376341636239364&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;two new contributors a week&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This year, we’ve given the global community of maintainers, contributors, adopters, and an official home on the &lt;a href=&#34;https://github.com/backstage/community&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage Community&lt;/a&gt; page. As our excitement for Backstage open source continues to grow at Spotify, we hope you will join us there — and in &lt;a href=&#34;https://github.com/backstage/backstage/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the main repo&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/03/16/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Backstage-BDay-Blog_v002.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">TLDR: As Backstage turns one, we’re doubling down on our commitment to the open source project and the community we’re building it with.</summary>
    <author>
      <name>Published by Tyson Singer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Happy Birthday, Backstage: Spotify’s Biggest Open Source Project Grows Up Fast&#xA;</title>
    <updated>2021-03-16T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-16:/2021/03/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;March 16, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/03/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/&#34; title=&#34;Happy Birthday, Backstage: Spotify’s Biggest Open Source Project Grows Up Fast&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Backstage-BDay-Blog_v002.gif&#34; alt=&#34;&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; As Backstage turns one, we’re doubling down on our commitment to the open source project and the community we’re building it with. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;From Hack Week hunch to CNCF Sandbox&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Last year, a small team of Spotifiers had a hunch about our homegrown developer portal: if Backstage could help our 1,600+ engineers manage the 14,000+ software components we use at Spotify, then couldn’t it do the same for other growing tech companies, too? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The team began building a proof of concept for an external version of Backstage during Hack Week. Just six weeks later &lt;a href=&#34;https://backstage.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt; was out in the wild — making its official open source debut &lt;a href=&#34;https://engineering.atspotify.com/2020/03/17/what-the-heck-is-backstage-anyway/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;one year ago today&lt;/a&gt;. A few months and a few thousand pull requests later, what started as a hunch became an early stage Sandbox project at &lt;a href=&#34;https://engineering.atspotify.com/2020/09/24/cloud-native-computing-foundation-accepts-backstage-as-a-sandbox-project/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the CNCF&lt;/a&gt; (also home to Kubernetes, Envoy, and Helm).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Looking back, the Backstage open source project feels like it has come incredibly far in a short amount of time. But on its first anniversary — as we prepare Backstage for a more stable release and wider adoption — we’re even more excited for what lies ahead. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;1999&#34; height=&#34;1016&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-700x356.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-768x390.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-1536x781.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-120x61.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;&lt;figcaption&gt;&lt;em&gt;“We recognized the need to drive increased productivity and collaboration for our developer community. We could only accomplish this by removing friction along the developer journey and by prioritizing pain points that got in the way of our developers. Building a unified developer front door for all things developers need was critical to us. Backstage provided the foundation that allowed us to accelerate on this promise.” &lt;/em&gt;&lt;br/&gt;&lt;em&gt;— Expedia Group Developer Experience Team&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Companies as varied as Expedia, Zalando, TELUS, American Airlines, and DoorDash have already started using Backstage. And we remain committed to our long-term vision of seeing Backstage become the standard for all kinds of companies. We think the past year has given us a good head start. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Why a developer portal?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To understand the problems Backstage solves, let’s go back to its beginnings at Spotify — and why we built it in the first place. (If you’ve heard &lt;a href=&#34;https://backstage.io/docs/overview/background&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this story&lt;/a&gt; before, feel free to skip ahead.) &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In March 2020, our internal version of Backstage was already a mature product; our developers had started using a primitive version of it four years earlier. During that period, we were growing fast. We seemed to be adding new developers, new software components, and new tooling at an equally breakneck pace. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our small, autonomous developer teams have always been our strength. But as we scaled, we didn’t have one way to create a microservice, we had a dozen. We didn’t have one new developer trying to find their way around our stack, we had hundreds. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The faster we grew, the more this fragmentation slowed us down again. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;A single pane of glass&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Designed first as a basic service catalog, our engineering teams began to gravitate to Backstage on their own — recognizing its ability to streamline workflows, help them align with work being done across the organization, and reduce the daily frustrations that slow developers down.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It became the “single pane of glass” for all our tooling. Everything our developers needed to create, manage, and monitor their projects was in one place. We began to rely on Backstage more and more — from managing data pipelines to software migrations — until it became the hub for all our development work.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With Backstage, infrastructure tooling got out of our engineers’ way so they could build and test faster. And since it simplified discovery — from ownership and documentation to best practices — we could onboard new developers faster, too. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Speed was the key. We saw firsthand that faster developers aren’t just &lt;a href=&#34;https://martinfowler.com/articles/developer-effectiveness.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;more productive developers&lt;/a&gt;, they’re happier developers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;From internal portal to open platform&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;What’s the biggest difference between the internal version of Backstage and the version we released a year ago? We didn’t want to ship you Spotify’s developer portal. We wanted to ship the best platform for you to build your own developer portal — one that fits your particular needs and use cases.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Unlike &lt;a href=&#34;https://engineering.atspotify.com/2020/04/21/how-we-use-backstage-at-spotify/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the internal version of Backstage&lt;/a&gt;, which has more than 120 different &lt;a href=&#34;https://backstage.io/docs/FAQ#what-is-a-plugin-in-backstage&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;plugins&lt;/a&gt; built by 60 different teams, the first open source version was mostly an empty shell. Shiny, new, and full of potential — yes. But less like a brand new car and more like a blank canvas. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since that first day, the promise of that empty shell has been filled in and shaped into a full-featured product, thanks to feedback from early adopters and contributions from the open source community. In the last year:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We introduced four core features: the &lt;a href=&#34;https://backstage.io/blog/2020/06/22/backstage-service-catalog-alpha&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Service Catalog&lt;/a&gt;, &lt;a href=&#34;https://backstage.io/blog/2020/08/05/announcing-backstage-software-templates&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Software Templates&lt;/a&gt;, &lt;a href=&#34;https://backstage.io/blog/2020/09/08/announcing-tech-docs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;TechDocs&lt;/a&gt;, and our &lt;a href=&#34;https://engineering.atspotify.com/2021/03/01/designing-a-better-kubernetes-experience-for-developers/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;new Kubernetes monitoring tool&lt;/a&gt;. This is functionality that we think defines the Backstage experience and that everyone would want out of the box.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We launched the &lt;a href=&#34;https://backstage.io/plugins&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Plugin Marketplace&lt;/a&gt;: the ecosystem for open source plugins for Backstage continues to grow, including contributions from individuals, from other tech companies, and software providers, like &lt;a href=&#34;https://github.com/snyk-tech-services/backstage-plugin-snyk/blob/main/README.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Snyk&lt;/a&gt;. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We created the &lt;a href=&#34;https://backstage.io/blog/2020/09/30/backstage-design-system&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage Design System&lt;/a&gt;: consistent frontend design is integral to creating a seamless experience inside Backstage, so we developed tools and guidelines anyone can use, including non-designers.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Stabilizing the core&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The work we did last year — identifying the core features and iterating on them quickly — has prepared us for what’s next: &lt;a href=&#34;https://backstage.io/blog/2020/12/22/stability-index&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;stabilizing those features and APIs&lt;/a&gt; so that more companies can adopt the platform for production use. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the coming weeks, our team will:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Bring both the Service Catalog and the Software Templates scaffolder into beta, resulting in a more stable release ready for wider adoption.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Create an easy, standardized way for developers to build plugins that will encourage contributions and lead to a richer ecosystem for everyone.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Update other parts of the core app — notably, improving search and incorporating GraphQL systemwide.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You can learn more in &lt;a href=&#34;https://github.com/backstage/backstage/blob/master/docs/overview/roadmap.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the project roadmap&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Adopters: Backstage in the wild!&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Beyond the &lt;a href=&#34;https://github.com/backstage/backstage/blob/master/ADOPTERS.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;official adopters list&lt;/a&gt;, we’ve consulted with hundreds of other companies evaluating Backstage — from digital natives to Fortune 50’s undergoing digital transformations. Our rule of thumb has been that once your org reaches 100 engineers, it’s time to stop managing your infrastructure solely with spreadsheets and Slack channels.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Early adopters Zalando and SDA SE shared &lt;a href=&#34;https://youtu.be/4-VX9tDdJYY?t=1756&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;their adoption experiences&lt;/a&gt; last month at our first community session. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Expedia has a team dedicated to rolling out Backstage.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;American Airlines has 20 teams using their version of Backstage, which they named Runway. They’re already seeing some good internal traction:&lt;p&gt;“We now get upwards of 500+ hits a day from people using not only “Create an App” but also consuming other components in Runway, like Catalog, and our custom plugins. Just a few months ago, this was maybe 50/day.” — Jason Walker, Director, Technology Transformation, American Airlines&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;DoorDash is one of our most recent adopters and we’ve been working closely to get them up and running. &lt;p&gt;“The support we received from the Spotify team, GitHub collaborators, and Discord members enabled us to stand up our initial environment quickly and painlessly, while also inspiring a robust roadmap that will make Backstage our engineering hub.” — Adam Rogal, Director, Developer Platform, DoorDash&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;A world of contributors grows into a community&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Of course, none of this would have been possible without our ever-growing community of contributors from around the world. Since the project’s beginning, the project has averaged &lt;a href=&#34;https://twitter.com/SpotifyEng/status/1341376341636239364&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;two new contributors a week&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This year, we’ve given the global community of maintainers, contributors, adopters, and an official home on the &lt;a href=&#34;https://github.com/backstage/community&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage Community&lt;/a&gt; page. As our excitement for Backstage open source continues to grow at Spotify, we hope you will join us there — and in &lt;a href=&#34;https://github.com/backstage/backstage/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the main repo&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/03/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Backstage-BDay-Blog_v002.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">TLDR: As Backstage turns one, we’re doubling down on our commitment to the open source project and the community we’re building it with.</summary>
    <author>
      <name>Published by Tyson Singer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Happy Birthday, Backstage: Spotify’s Biggest Open Source Project Grows Up Fast&#xA;</title>
    <updated>2021-03-16T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-16:/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;March 16, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/&#34; title=&#34;Happy Birthday, Backstage: Spotify’s Biggest Open Source Project Grows Up Fast&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Backstage-BDay-Blog_v002.gif&#34; alt=&#34;&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; As Backstage turns one, we’re doubling down on our commitment to the open source project and the community we’re building it with. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;From Hack Week hunch to CNCF Sandbox&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Last year, a small team of Spotifiers had a hunch about our homegrown developer portal: if Backstage could help our 1,600+ engineers manage the 14,000+ software components we use at Spotify, then couldn’t it do the same for other growing tech companies, too? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The team began building a proof of concept for an external version of Backstage during Hack Week. Just six weeks later &lt;a href=&#34;https://backstage.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt; was out in the wild — making its official open source debut &lt;a href=&#34;https://engineering.atspotify.com/2020/03/17/what-the-heck-is-backstage-anyway/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;one year ago today&lt;/a&gt;. A few months and a few thousand pull requests later, what started as a hunch became an early stage Sandbox project at &lt;a href=&#34;https://engineering.atspotify.com/2020/09/24/cloud-native-computing-foundation-accepts-backstage-as-a-sandbox-project/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the CNCF&lt;/a&gt; (also home to Kubernetes, Envoy, and Helm).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Looking back, the Backstage open source project feels like it has come incredibly far in a short amount of time. But on its first anniversary — as we prepare Backstage for a more stable release and wider adoption — we’re even more excited for what lies ahead. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;1999&#34; height=&#34;1016&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-700x356.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-768x390.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-1536x781.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-120x61.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;&lt;figcaption&gt;&lt;em&gt;“We recognized the need to drive increased productivity and collaboration for our developer community. We could only accomplish this by removing friction along the developer journey and by prioritizing pain points that got in the way of our developers. Building a unified developer front door for all things developers need was critical to us. Backstage provided the foundation that allowed us to accelerate on this promise.” &lt;/em&gt;&lt;br/&gt;&lt;em&gt;— Expedia Group Developer Experience Team&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Companies as varied as Expedia, Zalando, TELUS, American Airlines, and DoorDash have already started using Backstage. And we remain committed to our long-term vision of seeing Backstage become the standard for all kinds of companies. We think the past year has given us a good head start. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Why a developer portal?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To understand the problems Backstage solves, let’s go back to its beginnings at Spotify — and why we built it in the first place. (If you’ve heard &lt;a href=&#34;https://backstage.io/docs/overview/background&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this story&lt;/a&gt; before, feel free to skip ahead.) &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In March 2020, our internal version of Backstage was already a mature product; our developers had started using a primitive version of it four years earlier. During that period, we were growing fast. We seemed to be adding new developers, new software components, and new tooling at an equally breakneck pace. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our small, autonomous developer teams have always been our strength. But as we scaled, we didn’t have one way to create a microservice, we had a dozen. We didn’t have one new developer trying to find their way around our stack, we had hundreds. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The faster we grew, the more this fragmentation slowed us down again. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;A single pane of glass&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Designed first as a basic service catalog, our engineering teams began to gravitate to Backstage on their own — recognizing its ability to streamline workflows, help them align with work being done across the organization, and reduce the daily frustrations that slow developers down.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It became the “single pane of glass” for all our tooling. Everything our developers needed to create, manage, and monitor their projects was in one place. We began to rely on Backstage more and more — from managing data pipelines to software migrations — until it became the hub for all our development work.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With Backstage, infrastructure tooling got out of our engineers’ way so they could build and test faster. And since it simplified discovery — from ownership and documentation to best practices — we could onboard new developers faster, too. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Speed was the key. We saw firsthand that faster developers aren’t just &lt;a href=&#34;https://martinfowler.com/articles/developer-effectiveness.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;more productive developers&lt;/a&gt;, they’re happier developers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;From internal portal to open platform&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;What’s the biggest difference between the internal version of Backstage and the version we released a year ago? We didn’t want to ship you Spotify’s developer portal. We wanted to ship the best platform for you to build your own developer portal — one that fits your particular needs and use cases.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Unlike &lt;a href=&#34;https://engineering.atspotify.com/2020/04/21/how-we-use-backstage-at-spotify/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the internal version of Backstage&lt;/a&gt;, which has more than 120 different &lt;a href=&#34;https://backstage.io/docs/FAQ#what-is-a-plugin-in-backstage&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;plugins&lt;/a&gt; built by 60 different teams, the first open source version was mostly an empty shell. Shiny, new, and full of potential — yes. But less like a brand new car and more like a blank canvas. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since that first day, the promise of that empty shell has been filled in and shaped into a full-featured product, thanks to feedback from early adopters and contributions from the open source community. In the last year:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We introduced four core features: the &lt;a href=&#34;https://backstage.io/blog/2020/06/22/backstage-service-catalog-alpha&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Service Catalog&lt;/a&gt;, &lt;a href=&#34;https://backstage.io/blog/2020/08/05/announcing-backstage-software-templates&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Software Templates&lt;/a&gt;, &lt;a href=&#34;https://backstage.io/blog/2020/09/08/announcing-tech-docs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;TechDocs&lt;/a&gt;, and our &lt;a href=&#34;https://engineering.atspotify.com/2021/03/01/designing-a-better-kubernetes-experience-for-developers/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;new Kubernetes monitoring tool&lt;/a&gt;. This is functionality that we think defines the Backstage experience and that everyone would want out of the box.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We launched the &lt;a href=&#34;https://backstage.io/plugins&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Plugin Marketplace&lt;/a&gt;: the ecosystem for open source plugins for Backstage continues to grow, including contributions from individuals, from other tech companies, and software providers, like &lt;a href=&#34;https://github.com/snyk-tech-services/backstage-plugin-snyk/blob/main/README.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Snyk&lt;/a&gt;. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We created the &lt;a href=&#34;https://backstage.io/blog/2020/09/30/backstage-design-system&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage Design System&lt;/a&gt;: consistent frontend design is integral to creating a seamless experience inside Backstage, so we developed tools and guidelines anyone can use, including non-designers.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Stabilizing the core&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The work we did last year — identifying the core features and iterating on them quickly — has prepared us for what’s next: &lt;a href=&#34;https://backstage.io/blog/2020/12/22/stability-index&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;stabilizing those features and APIs&lt;/a&gt; so that more companies can adopt the platform for production use. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the coming weeks, our team will:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Bring both the Service Catalog and the Software Templates scaffolder into beta, resulting in a more stable release ready for wider adoption.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Create an easy, standardized way for developers to build plugins that will encourage contributions and lead to a richer ecosystem for everyone.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Update other parts of the core app — notably, improving search and incorporating GraphQL systemwide.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You can learn more in &lt;a href=&#34;https://github.com/backstage/backstage/blob/master/docs/overview/roadmap.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the project roadmap&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Adopters: Backstage in the wild!&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Beyond the &lt;a href=&#34;https://github.com/backstage/backstage/blob/master/ADOPTERS.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;official adopters list&lt;/a&gt;, we’ve consulted with hundreds of other companies evaluating Backstage — from digital natives to Fortune 50’s undergoing digital transformations. Our rule of thumb has been that once your org reaches 100 engineers, it’s time to stop managing your infrastructure solely with spreadsheets and Slack channels.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Early adopters Zalando and SDA SE shared &lt;a href=&#34;https://youtu.be/4-VX9tDdJYY?t=1756&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;their adoption experiences&lt;/a&gt; last month at our first community session. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Expedia has a team dedicated to rolling out Backstage.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;American Airlines has 20 teams using their version of Backstage, which they named Runway. They’re already seeing some good internal traction:&lt;p&gt;“We now get upwards of 500+ hits a day from people using not only “Create an App” but also consuming other components in Runway, like Catalog, and our custom plugins. Just a few months ago, this was maybe 50/day.” — Jason Walker, Director, Technology Transformation, American Airlines&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;DoorDash is one of our most recent adopters and we’ve been working closely to get them up and running. &lt;p&gt;“The support we received from the Spotify team, GitHub collaborators, and Discord members enabled us to stand up our initial environment quickly and painlessly, while also inspiring a robust roadmap that will make Backstage our engineering hub.” — Adam Rogal, Director, Developer Platform, DoorDash&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;A world of contributors grows into a community&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Of course, none of this would have been possible without our ever-growing community of contributors from around the world. Since the project’s beginning, the project has averaged &lt;a href=&#34;https://twitter.com/SpotifyEng/status/1341376341636239364&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;two new contributors a week&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This year, we’ve given the global community of maintainers, contributors, adopters, and an official home on the &lt;a href=&#34;https://github.com/backstage/community&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage Community&lt;/a&gt; page. As our excitement for Backstage open source continues to grow at Spotify, we hope you will join us there — and in &lt;a href=&#34;https://github.com/backstage/backstage/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the main repo&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Backstage-BDay-Blog_v002.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">TLDR: As Backstage turns one, we’re doubling down on our commitment to the open source project and the community we’re building it with.</summary>
    <author>
      <name>Published by Tyson Singer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Happy Birthday, Backstage: Spotify’s Biggest Open Source Project Grows Up Fast&#xA;</title>
    <updated>2021-03-16T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-16:/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;March 16, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/&#34; title=&#34;Happy Birthday, Backstage: Spotify’s Biggest Open Source Project Grows Up Fast&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Backstage-BDay-Blog_v002.gif&#34; alt=&#34;&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; As Backstage turns one, we’re doubling down on our commitment to the open source project and the community we’re building it with. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;From Hack Week hunch to CNCF Sandbox&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Last year, a small team of Spotifiers had a hunch about our homegrown developer portal: if Backstage could help our 1,600+ engineers manage the 14,000+ software components we use at Spotify, then couldn’t it do the same for other growing tech companies, too? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The team began building a proof of concept for an external version of Backstage during Hack Week. Just six weeks later &lt;a href=&#34;https://backstage.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt; was out in the wild — making its official open source debut &lt;a href=&#34;https://engineering.atspotify.com/2020/03/17/what-the-heck-is-backstage-anyway/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;one year ago today&lt;/a&gt;. A few months and a few thousand pull requests later, what started as a hunch became an early stage Sandbox project at &lt;a href=&#34;https://engineering.atspotify.com/2020/09/24/cloud-native-computing-foundation-accepts-backstage-as-a-sandbox-project/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the CNCF&lt;/a&gt; (also home to Kubernetes, Envoy, and Helm).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Looking back, the Backstage open source project feels like it has come incredibly far in a short amount of time. But on its first anniversary — as we prepare Backstage for a more stable release and wider adoption — we’re even more excited for what lies ahead. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;1999&#34; height=&#34;1016&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2.png 1999w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-250x127.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-700x356.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-768x390.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-1536x781.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image2-120x61.png 120w&#34; sizes=&#34;(max-width: 1999px) 100vw, 1999px&#34;/&gt;&lt;figcaption&gt;&lt;em&gt;“We recognized the need to drive increased productivity and collaboration for our developer community. We could only accomplish this by removing friction along the developer journey and by prioritizing pain points that got in the way of our developers. Building a unified developer front door for all things developers need was critical to us. Backstage provided the foundation that allowed us to accelerate on this promise.” &lt;/em&gt;&lt;br/&gt;&lt;em&gt;— Expedia Group Developer Experience Team&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Companies as varied as Expedia, Zalando, TELUS, American Airlines, and DoorDash have already started using Backstage. And we remain committed to our long-term vision of seeing Backstage become the standard for all kinds of companies. We think the past year has given us a good head start. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Why a developer portal?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To understand the problems Backstage solves, let’s go back to its beginnings at Spotify — and why we built it in the first place. (If you’ve heard &lt;a href=&#34;https://backstage.io/docs/overview/background&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this story&lt;/a&gt; before, feel free to skip ahead.) &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In March 2020, our internal version of Backstage was already a mature product; our developers had started using a primitive version of it four years earlier. During that period, we were growing fast. We seemed to be adding new developers, new software components, and new tooling at an equally breakneck pace. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our small, autonomous developer teams have always been our strength. But as we scaled, we didn’t have one way to create a microservice, we had a dozen. We didn’t have one new developer trying to find their way around our stack, we had hundreds. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The faster we grew, the more this fragmentation slowed us down again. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;A single pane of glass&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Designed first as a basic service catalog, our engineering teams began to gravitate to Backstage on their own — recognizing its ability to streamline workflows, help them align with work being done across the organization, and reduce the daily frustrations that slow developers down.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It became the “single pane of glass” for all our tooling. Everything our developers needed to create, manage, and monitor their projects was in one place. We began to rely on Backstage more and more — from managing data pipelines to software migrations — until it became the hub for all our development work.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With Backstage, infrastructure tooling got out of our engineers’ way so they could build and test faster. And since it simplified discovery — from ownership and documentation to best practices — we could onboard new developers faster, too. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Speed was the key. We saw firsthand that faster developers aren’t just &lt;a href=&#34;https://martinfowler.com/articles/developer-effectiveness.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;more productive developers&lt;/a&gt;, they’re happier developers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;From internal portal to open platform&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;What’s the biggest difference between the internal version of Backstage and the version we released a year ago? We didn’t want to ship you Spotify’s developer portal. We wanted to ship the best platform for you to build your own developer portal — one that fits your particular needs and use cases.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Unlike &lt;a href=&#34;https://engineering.atspotify.com/2020/04/21/how-we-use-backstage-at-spotify/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the internal version of Backstage&lt;/a&gt;, which has more than 120 different &lt;a href=&#34;https://backstage.io/docs/FAQ#what-is-a-plugin-in-backstage&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;plugins&lt;/a&gt; built by 60 different teams, the first open source version was mostly an empty shell. Shiny, new, and full of potential — yes. But less like a brand new car and more like a blank canvas. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since that first day, the promise of that empty shell has been filled in and shaped into a full-featured product, thanks to feedback from early adopters and contributions from the open source community. In the last year:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We introduced four core features: the &lt;a href=&#34;https://backstage.io/blog/2020/06/22/backstage-service-catalog-alpha&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Service Catalog&lt;/a&gt;, &lt;a href=&#34;https://backstage.io/blog/2020/08/05/announcing-backstage-software-templates&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Software Templates&lt;/a&gt;, &lt;a href=&#34;https://backstage.io/blog/2020/09/08/announcing-tech-docs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;TechDocs&lt;/a&gt;, and our &lt;a href=&#34;https://engineering.atspotify.com/2021/03/01/designing-a-better-kubernetes-experience-for-developers/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;new Kubernetes monitoring tool&lt;/a&gt;. This is functionality that we think defines the Backstage experience and that everyone would want out of the box.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We launched the &lt;a href=&#34;https://backstage.io/plugins&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Plugin Marketplace&lt;/a&gt;: the ecosystem for open source plugins for Backstage continues to grow, including contributions from individuals, from other tech companies, and software providers, like &lt;a href=&#34;https://github.com/snyk-tech-services/backstage-plugin-snyk/blob/main/README.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Snyk&lt;/a&gt;. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We created the &lt;a href=&#34;https://backstage.io/blog/2020/09/30/backstage-design-system&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage Design System&lt;/a&gt;: consistent frontend design is integral to creating a seamless experience inside Backstage, so we developed tools and guidelines anyone can use, including non-designers.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Stabilizing the core&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The work we did last year — identifying the core features and iterating on them quickly — has prepared us for what’s next: &lt;a href=&#34;https://backstage.io/blog/2020/12/22/stability-index&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;stabilizing those features and APIs&lt;/a&gt; so that more companies can adopt the platform for production use. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the coming weeks, our team will:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Bring both the Service Catalog and the Software Templates scaffolder into beta, resulting in a more stable release ready for wider adoption.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Create an easy, standardized way for developers to build plugins that will encourage contributions and lead to a richer ecosystem for everyone.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Update other parts of the core app — notably, improving search and incorporating GraphQL systemwide.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You can learn more in &lt;a href=&#34;https://github.com/backstage/backstage/blob/master/docs/overview/roadmap.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the project roadmap&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Adopters: Backstage in the wild!&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Beyond the &lt;a href=&#34;https://github.com/backstage/backstage/blob/master/ADOPTERS.md&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;official adopters list&lt;/a&gt;, we’ve consulted with hundreds of other companies evaluating Backstage — from digital natives to Fortune 50’s undergoing digital transformations. Our rule of thumb has been that once your org reaches 100 engineers, it’s time to stop managing your infrastructure solely with spreadsheets and Slack channels.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Early adopters Zalando and SDA SE shared &lt;a href=&#34;https://youtu.be/4-VX9tDdJYY?t=1756&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;their adoption experiences&lt;/a&gt; last month at our first community session. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Expedia has a team dedicated to rolling out Backstage.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;American Airlines has 20 teams using their version of Backstage, which they named Runway. They’re already seeing some good internal traction:&lt;p&gt;“We now get upwards of 500+ hits a day from people using not only “Create an App” but also consuming other components in Runway, like Catalog, and our custom plugins. Just a few months ago, this was maybe 50/day.” — Jason Walker, Director, Technology Transformation, American Airlines&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;DoorDash is one of our most recent adopters and we’ve been working closely to get them up and running. &lt;p&gt;“The support we received from the Spotify team, GitHub collaborators, and Discord members enabled us to stand up our initial environment quickly and painlessly, while also inspiring a robust roadmap that will make Backstage our engineering hub.” — Adam Rogal, Director, Developer Platform, DoorDash&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;A world of contributors grows into a community&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Of course, none of this would have been possible without our ever-growing community of contributors from around the world. Since the project’s beginning, the project has averaged &lt;a href=&#34;https://twitter.com/SpotifyEng/status/1341376341636239364&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;two new contributors a week&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This year, we’ve given the global community of maintainers, contributors, adopters, and an official home on the &lt;a href=&#34;https://github.com/backstage/community&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage Community&lt;/a&gt; page. As our excitement for Backstage open source continues to grow at Spotify, we hope you will join us there — and in &lt;a href=&#34;https://github.com/backstage/backstage/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;the main repo&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/engineering-leadership/&#34; rel=&#34;tag&#34;&gt;engineering leadership&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/happy-birthday-backstage-spotifys-biggest-open-source-project-grows-up-fast/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Backstage-BDay-Blog_v002.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">TLDR: As Backstage turns one, we’re doubling down on our commitment to the open source project and the community we’re building it with.</summary>
    <author>
      <name>Published by Tyson Singer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Spotify’s New Experimentation Coordination Strategy&#xA;</title>
    <updated>2021-03-10T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-10:/spotifys-new-experimentation-coordination-strategy/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;March 10, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/spotifys-new-experimentation-coordination-strategy/&#34; title=&#34;Spotify’s New Experimentation Coordination Strategy&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1-700x352.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1-1536x772.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1-2048x1029.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify we run hundreds of experiments at any given time. Coordinating these experiments, i.e., making sure the right user is receiving the right “treatment” with a population of hundreds of millions of users, poses technical challenges. Adding to the complexity, some of these experiments must be coordinated in the sense that the same user cannot be in two experiments at the same time. These are well-known problems among tech companies — take, for example, Google’s solution in Tang et al (2010). But the statistical implications of different solutions have not been properly investigated. In a recent paper (&lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-030-89906-6_50&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;M. Schultzberg, O. Kjellin, and J. Rydberg, 2020&lt;/a&gt;), we investigate important statistical properties of a common technical solution to the coordination — called “Bucket Reuse”. In this blog post we highlight some interesting results and present some details about how Spotify will coordinate experiments from now on.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What is Bucket Reuse?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Bucket Reuse is a simple idea utilizing the power of hashing. Essentially the steps are as follows: decide on a number of buckets (B). Take the unique user ID and hash it together with a  random salt into B “buckets” such that all users hash into one and only one bucket. Once the hash map is established, all sampling is performed on the bucket level. This implies that a bucket either is or is not in a sample at any given time point. If we want to sample N number of users, we sample the number of buckets that contain the number of users closest to the desired number N. If, e.g., the desired N is 20 and each bucket contains 3 users, we would sample 7 buckets and end up with 21 users. Note that a bucket is simply a logical group of units to which we assign a certain user by a fixed hash map. Figure 1 illustrates such a map. The second part of the name Bucket &lt;em&gt;Reuse&lt;/em&gt; comes from the fact that we reuse the same buckets over and over again in the sampling for all experiments. That is, the random salt for the hashing is selected only once; after that, the hash map and the number of buckets is fixed. &lt;strong&gt;Importantly,&lt;/strong&gt; when we talk about Bucket Reuse for experimentation, we always mean the following: the random sampling is performed on the bucket level; the random treatment allocation is performed at the user level on the users in the sample. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;625&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image4-700x625.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image4-700x625.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image4-250x223.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image4-768x686.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image4-120x107.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image4.png 1366w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 1: &lt;em&gt;Schematic illustration of a hash map. A user ID is hashed together with a random salt to map each user to a unique bucket. &lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What is experiment coordination?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To get into the interesting parts of experiment coordination, we need to establish some key concepts. Figure 2 illustrates the concepts of exclusive and nonexclusive experiments. That two or more experiments “are exclusive” to each other simply means that they are run on distinct sets of users. Experiments that are nonexclusive are nonexclusive to &lt;em&gt;all&lt;/em&gt; experiments at Spotify, meaning that they all randomly overlap in terms of users.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;383&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image5-700x383.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image5-700x383.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image5-250x137.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image5-768x420.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image5-120x66.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image5.png 1498w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 2: &lt;em&gt;Illustration of exclusive and nonexclusive experiments. Exclusive experiments never overlap with each other in terms of users; nonexclusive experiments randomly overlap with exclusive experiments and other nonexclusive experiments. Note that the allocations in this figure were selected for illustration; in a true random sample we would expect exclusive experiments to also be spread out uniformly.  &lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The most critical challenge from a statistical perspective is imposed by what we call &lt;em&gt;programs of exclusive experiments&lt;/em&gt;. A program of exclusive experiments is a set of experiments run over time where all simultaneous experiments are exclusive to each other. That is, a unit is in at most one, and only one, of the experiments in the program at any given time point. At Spotify we have such programs for several surfaces in the app, for example Search, the Home screen, and certain parts of the backend code base. To better understand the limitations imposed on the sampling by running programs of exclusive experiments, it is helpful to introduce the concepts of paths. A path is simply a sequence of experiments that a unit can be in. Figure 3 illustrates a program of exclusive experiments containing 5 experiments over time. Below the experiments, their possible paths are displayed. For example, it is not possible to go through both Experiments 3 and 4 as they overlap in time and are exclusive, and must therefore be run on distinct users. The number of unique possible paths explodes combinatorially after a relatively short time period in most programs, and only a small partition of the possible paths can be taken by any unit regardless of the sample strategies discussed in this post.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;806&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Figure3-700x806.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Figure3-700x806.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Figure3-250x288.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Figure3-768x885.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Figure3-1334x1536.png 1334w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Figure3-120x138.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Figure3.png 1370w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 3: &lt;em&gt;Paths of experiences possible during a hypothetical program of 5 exclusive experiments.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Highlights from &lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-030-89906-6_50&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Schultzberg et al.&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Schultzberg et al. presents two key results:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;Under unrestricted sampling of buckets, i.e., Bucket Reuse in nonexclusive experiments, the properties of the difference-in-means estimator of the average treatment effect is approximately equivalent to the properties under random sampling of units. In other words, standard t-tests can be used for inference. The key to this remarkable finding is connecting Bucket Reuse to the existing literature on randomized experiments embedded in complex sampling designs (Horvitz and Thompson, 1952;  van den Brakel and Renssen, 2005). &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;The bias imposed by the restricted sampling of buckets implied by programs of exclusive experiments is derived. It is shown that this bias is often restricted to the history right before the experiment. Moreover, the length of the window of the history that affects the bias can be estimated for any empirical experimentation program. One way to phrase this finding is that the sample at a time point T is not random with respect to the last D days leading up to time T, but random with respect to everything that happened before the time point T-D. If things happened during the last D days that make the set of buckets available for sampling at time T different from the population with respect to the treatment effect, the estimator is biased. This insight makes it possible for experimenters to evaluate the risk for biases by checking what experiments have been run in the program over the last D days, and if those risks for biases are likely to affect the average treatment effect in the experiment that is about to be started. &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Spotify’s new experimentation coordination strategy&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have migrated our experimentation platform to using Bucket Reuse for all experiments at Spotify. There are a few key reasons why we prefer Bucket Reuse over other solutions:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;It is simple to implement and understand. &lt;/li&gt;&lt;li&gt;It is a technically feasible solution that allows us to do complex coordination without losing speed in our systems. As new users come into Spotify, they are uniformly hashed into the existing buckets — that is, the system scales as Spotify’s user base grows.&lt;/li&gt;&lt;li&gt;Using one company-global bucket structure makes it easy to coordinate experiments arbitrarily. For example, two programs that have been run independently can easily be merged into one program of exclusive experiments at any time point for any period of time. And, a sample from a previous experiment with a broken experience can easily be quarantined and avoided in any future experiments, as the sampling units are always the same over time.  &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify we have chosen Bucket Reuse with 1M (1,000,000) buckets to coordinate all experiments. That is, all users are hashed into 1M buckets, and these buckets are used for all experiments in all experimentation programs, exclusive and nonexclusive. Although Schultzberg et al.  establishes that smaller numbers of buckets can have statistical properties enabling straight forward inference, it should be clear that the larger the number of buckets, the better. Even though the inference for the average treatment effect is unaffected by the bucket sampling, it is well known that the effect of cluster sampling on other estimands decreases when the number of buckets increases (Kumar Pradhan). That is, imposing a bucket structure is not preferred from a statistical perspective, but it is a technical necessity. The choice of 1M buckets was made because it is close to the largest number of buckets we can have while still keeping the selected buckets within an executable script stored in a database without having to resort to &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://en.wikipedia.org/wiki/Binary_large_object&#34; target=&#34;_blank&#34;&gt;BLOB&lt;/a&gt; storage. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are not planning to have any full stops or to reshuffle users into new buckets. However, there are naturally occurring periods of low experimentation that will help decrease the dependency between the samples in programs of exclusive experiments. For example, many programs run fewer general product experiments over the winter holidays due to unusual listening behaviors. These natural pauses effectively reset the programs in terms of dependencies.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To help experimenters running programs of exclusive experiments, we are implementing a few tools to keep track of the short-term dependencies. For each program, we will estimate the length of the history that can bias the results. Moreover, we are also implementing a tool to see the history of the available buckets at any time point. Figure 4 displays a prototype of this tool. It allows experimenters to evaluate if the experiments that the available user came out of are likely to bias the estimator in their experiment. It also provides information about the size of the overlap with previous experiments. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;1600&#34; height=&#34;1394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/2020-10-23-10.58.56.gif&#34; alt=&#34;&#34;/&gt;&lt;figcaption&gt;Figure 4: &lt;em&gt;Dependency graph that shows the experimenter where the free space, and thereby their sample, will come from in terms of previous experiments in the exclusive program. Each rectangle corresponds to a previously run experiment. The numbers in the yellow circles indicate the percentage points of the population that went from one experiment into another, and finally into the proportion of the population that is available (“free space”) for sampling right now. The experimenter can see what effects the previous experiments had on the metrics of interest in their experiment. &lt;/em&gt;&lt;br/&gt;&lt;em&gt;Figure above for illustrative purposes only.&lt;/em&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Statistical validity, derived from proper random sampling and random treatment allocation, is the cornerstone of a successful experimentation program. However, implementing systems that can serve hundreds of experiments to hundreds of millions users — while retaining the ability to conveniently coordinate experiments to be exclusive, without overlap — requires compromises between technical feasibility and statistical properties. At Spotify, we have migrated the internal experimentation platform to rely fully on &lt;em&gt;bucket reuse&lt;/em&gt;, a technically desirable solution that provides speed, simplicity, and flexibility. In this post we establish the statistical properties under bucket reuse and conclude that the validity is unaffected. This migration enables more experiments of higher quality at Spotify.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Experimentation Platform team, Spotify&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Brakel, Jan van den, and Robbert H. Renssen. “Analysis of Experiments Embedded in Complex Sampling Designs.” &lt;em&gt;Survey Methodology &lt;/em&gt; 31, no. 1 (2005): 23–40.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Horvitz, D. G. and D. J. Thompson. “A Generalization of Sampling Without Replacement from a Finite Universe.” &lt;em&gt;Journal of the American Statistical Association&lt;/em&gt; 47, no. 260 (1952): 663–685. https://doi.org/10.2307/2280784&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Kumar Pradhan, Bijoy. “On efficiency of cluster sampling on sampling on two occasions.” &lt;em&gt;Statistica&lt;/em&gt; 64, no. 1 (2004): 183–191. &lt;a href=&#34;https://doi.org/10.6092/issn.1973-2201/31&#34;&gt;https://doi.org/10.6092/issn.1973-2201/31&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Schultzberg, Mårten, Oskar Kjellin, and Johan Rydberg. “Statistical Properties of Exclusive and Non-exclusive Online Randomized Experiments using Bucket Reuse.” &lt;em&gt;arXiv preprint arXiv:2012.10202 &lt;/em&gt;(2020).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Tang, Diane, Ashish Agarwal, Deirdre O’Brien, and Mike Meyer. “Overlapping experiment infrastructure: more, better, faster experimentation.” &lt;em&gt;KDD&lt;/em&gt; &lt;em&gt;’10: Proceedings of the 16th ACM SIGKDD international conference on Knowledge discovery and data mining&lt;/em&gt;, (July 2010): 17–26.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/data/&#34; rel=&#34;tag&#34;&gt;Data&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/spotifys-new-experimentation-coordination-strategy/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify we run hundreds of experiments at any given time. Coordinating these experiments, i.e., making sure the right user is receiving the right “treatment” with a population of hundreds of millions of users, poses technical challenges. Adding to the complexity, some of these experiments must be</summary>
    <author>
      <name>Published by Mårten Schultzberg, Oskar Kjellin, and Johan Rydberg</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Spotify’s New Experimentation Coordination Strategy&#xA;</title>
    <updated>2021-03-10T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-10:/spotifys-new-experimentation-coordination-strategy/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;March 10, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/spotifys-new-experimentation-coordination-strategy/&#34; title=&#34;Spotify’s New Experimentation Coordination Strategy&#34;&gt;&#xA;                        &lt;img src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1.png 2105w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1-250x126.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1-700x352.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1-768x386.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1-1536x772.png 1536w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1-2048x1029.png 2048w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify we run hundreds of experiments at any given time. Coordinating these experiments, i.e., making sure the right user is receiving the right “treatment” with a population of hundreds of millions of users, poses technical challenges. Adding to the complexity, some of these experiments must be coordinated in the sense that the same user cannot be in two experiments at the same time. These are well-known problems among tech companies — take, for example, Google’s solution in Tang et al (2010). But the statistical implications of different solutions have not been properly investigated. In a recent paper (&lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-030-89906-6_50&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;M. Schultzberg, O. Kjellin, and J. Rydberg, 2020&lt;/a&gt;), we investigate important statistical properties of a common technical solution to the coordination — called “Bucket Reuse”. In this blog post we highlight some interesting results and present some details about how Spotify will coordinate experiments from now on.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What is Bucket Reuse?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Bucket Reuse is a simple idea utilizing the power of hashing. Essentially the steps are as follows: decide on a number of buckets (B). Take the unique user ID and hash it together with a  random salt into B “buckets” such that all users hash into one and only one bucket. Once the hash map is established, all sampling is performed on the bucket level. This implies that a bucket either is or is not in a sample at any given time point. If we want to sample N number of users, we sample the number of buckets that contain the number of users closest to the desired number N. If, e.g., the desired N is 20 and each bucket contains 3 users, we would sample 7 buckets and end up with 21 users. Note that a bucket is simply a logical group of units to which we assign a certain user by a fixed hash map. Figure 1 illustrates such a map. The second part of the name Bucket &lt;em&gt;Reuse&lt;/em&gt; comes from the fact that we reuse the same buckets over and over again in the sampling for all experiments. That is, the random salt for the hashing is selected only once; after that, the hash map and the number of buckets is fixed. &lt;strong&gt;Importantly,&lt;/strong&gt; when we talk about Bucket Reuse for experimentation, we always mean the following: the random sampling is performed on the bucket level; the random treatment allocation is performed at the user level on the users in the sample. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;625&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image4-700x625.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image4-700x625.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image4-250x223.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image4-768x686.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image4-120x107.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image4.png 1366w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 1: &lt;em&gt;Schematic illustration of a hash map. A user ID is hashed together with a random salt to map each user to a unique bucket. &lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What is experiment coordination?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To get into the interesting parts of experiment coordination, we need to establish some key concepts. Figure 2 illustrates the concepts of exclusive and nonexclusive experiments. That two or more experiments “are exclusive” to each other simply means that they are run on distinct sets of users. Experiments that are nonexclusive are nonexclusive to &lt;em&gt;all&lt;/em&gt; experiments at Spotify, meaning that they all randomly overlap in terms of users.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;383&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image5-700x383.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image5-700x383.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image5-250x137.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image5-768x420.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image5-120x66.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/image5.png 1498w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 2: &lt;em&gt;Illustration of exclusive and nonexclusive experiments. Exclusive experiments never overlap with each other in terms of users; nonexclusive experiments randomly overlap with exclusive experiments and other nonexclusive experiments. Note that the allocations in this figure were selected for illustration; in a true random sample we would expect exclusive experiments to also be spread out uniformly.  &lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The most critical challenge from a statistical perspective is imposed by what we call &lt;em&gt;programs of exclusive experiments&lt;/em&gt;. A program of exclusive experiments is a set of experiments run over time where all simultaneous experiments are exclusive to each other. That is, a unit is in at most one, and only one, of the experiments in the program at any given time point. At Spotify we have such programs for several surfaces in the app, for example Search, the Home screen, and certain parts of the backend code base. To better understand the limitations imposed on the sampling by running programs of exclusive experiments, it is helpful to introduce the concepts of paths. A path is simply a sequence of experiments that a unit can be in. Figure 3 illustrates a program of exclusive experiments containing 5 experiments over time. Below the experiments, their possible paths are displayed. For example, it is not possible to go through both Experiments 3 and 4 as they overlap in time and are exclusive, and must therefore be run on distinct users. The number of unique possible paths explodes combinatorially after a relatively short time period in most programs, and only a small partition of the possible paths can be taken by any unit regardless of the sample strategies discussed in this post.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;806&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Figure3-700x806.png&#34; alt=&#34;&#34; srcset=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Figure3-700x806.png 700w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Figure3-250x288.png 250w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Figure3-768x885.png 768w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Figure3-1334x1536.png 1334w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Figure3-120x138.png 120w, https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Figure3.png 1370w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 3: &lt;em&gt;Paths of experiences possible during a hypothetical program of 5 exclusive experiments.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Highlights from &lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-030-89906-6_50&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Schultzberg et al.&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Schultzberg et al. presents two key results:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;Under unrestricted sampling of buckets, i.e., Bucket Reuse in nonexclusive experiments, the properties of the difference-in-means estimator of the average treatment effect is approximately equivalent to the properties under random sampling of units. In other words, standard t-tests can be used for inference. The key to this remarkable finding is connecting Bucket Reuse to the existing literature on randomized experiments embedded in complex sampling designs (Horvitz and Thompson, 1952;  van den Brakel and Renssen, 2005). &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;The bias imposed by the restricted sampling of buckets implied by programs of exclusive experiments is derived. It is shown that this bias is often restricted to the history right before the experiment. Moreover, the length of the window of the history that affects the bias can be estimated for any empirical experimentation program. One way to phrase this finding is that the sample at a time point T is not random with respect to the last D days leading up to time T, but random with respect to everything that happened before the time point T-D. If things happened during the last D days that make the set of buckets available for sampling at time T different from the population with respect to the treatment effect, the estimator is biased. This insight makes it possible for experimenters to evaluate the risk for biases by checking what experiments have been run in the program over the last D days, and if those risks for biases are likely to affect the average treatment effect in the experiment that is about to be started. &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Spotify’s new experimentation coordination strategy&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have migrated our experimentation platform to using Bucket Reuse for all experiments at Spotify. There are a few key reasons why we prefer Bucket Reuse over other solutions:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;It is simple to implement and understand. &lt;/li&gt;&lt;li&gt;It is a technically feasible solution that allows us to do complex coordination without losing speed in our systems. As new users come into Spotify, they are uniformly hashed into the existing buckets — that is, the system scales as Spotify’s user base grows.&lt;/li&gt;&lt;li&gt;Using one company-global bucket structure makes it easy to coordinate experiments arbitrarily. For example, two programs that have been run independently can easily be merged into one program of exclusive experiments at any time point for any period of time. And, a sample from a previous experiment with a broken experience can easily be quarantined and avoided in any future experiments, as the sampling units are always the same over time.  &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify we have chosen Bucket Reuse with 1M (1,000,000) buckets to coordinate all experiments. That is, all users are hashed into 1M buckets, and these buckets are used for all experiments in all experimentation programs, exclusive and nonexclusive. Although Schultzberg et al.  establishes that smaller numbers of buckets can have statistical properties enabling straight forward inference, it should be clear that the larger the number of buckets, the better. Even though the inference for the average treatment effect is unaffected by the bucket sampling, it is well known that the effect of cluster sampling on other estimands decreases when the number of buckets increases (Kumar Pradhan). That is, imposing a bucket structure is not preferred from a statistical perspective, but it is a technical necessity. The choice of 1M buckets was made because it is close to the largest number of buckets we can have while still keeping the selected buckets within an executable script stored in a database without having to resort to &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://en.wikipedia.org/wiki/Binary_large_object&#34; target=&#34;_blank&#34;&gt;BLOB&lt;/a&gt; storage. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are not planning to have any full stops or to reshuffle users into new buckets. However, there are naturally occurring periods of low experimentation that will help decrease the dependency between the samples in programs of exclusive experiments. For example, many programs run fewer general product experiments over the winter holidays due to unusual listening behaviors. These natural pauses effectively reset the programs in terms of dependencies.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To help experimenters running programs of exclusive experiments, we are implementing a few tools to keep track of the short-term dependencies. For each program, we will estimate the length of the history that can bias the results. Moreover, we are also implementing a tool to see the history of the available buckets at any time point. Figure 4 displays a prototype of this tool. It allows experimenters to evaluate if the experiments that the available user came out of are likely to bias the estimator in their experiment. It also provides information about the size of the overlap with previous experiments. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;1600&#34; height=&#34;1394&#34; src=&#34;https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/2020-10-23-10.58.56.gif&#34; alt=&#34;&#34;/&gt;&lt;figcaption&gt;Figure 4: &lt;em&gt;Dependency graph that shows the experimenter where the free space, and thereby their sample, will come from in terms of previous experiments in the exclusive program. Each rectangle corresponds to a previously run experiment. The numbers in the yellow circles indicate the percentage points of the population that went from one experiment into another, and finally into the proportion of the population that is available (“free space”) for sampling right now. The experimenter can see what effects the previous experiments had on the metrics of interest in their experiment. &lt;/em&gt;&lt;br/&gt;&lt;em&gt;Figure above for illustrative purposes only.&lt;/em&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Statistical validity, derived from proper random sampling and random treatment allocation, is the cornerstone of a successful experimentation program. However, implementing systems that can serve hundreds of experiments to hundreds of millions users — while retaining the ability to conveniently coordinate experiments to be exclusive, without overlap — requires compromises between technical feasibility and statistical properties. At Spotify, we have migrated the internal experimentation platform to rely fully on &lt;em&gt;bucket reuse&lt;/em&gt;, a technically desirable solution that provides speed, simplicity, and flexibility. In this post we establish the statistical properties under bucket reuse and conclude that the validity is unaffected. This migration enables more experiments of higher quality at Spotify.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Experimentation Platform team, Spotify&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Brakel, Jan van den, and Robbert H. Renssen. “Analysis of Experiments Embedded in Complex Sampling Designs.” &lt;em&gt;Survey Methodology &lt;/em&gt; 31, no. 1 (2005): 23–40.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Horvitz, D. G. and D. J. Thompson. “A Generalization of Sampling Without Replacement from a Finite Universe.” &lt;em&gt;Journal of the American Statistical Association&lt;/em&gt; 47, no. 260 (1952): 663–685. https://doi.org/10.2307/2280784&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Kumar Pradhan, Bijoy. “On efficiency of cluster sampling on sampling on two occasions.” &lt;em&gt;Statistica&lt;/em&gt; 64, no. 1 (2004): 183–191. &lt;a href=&#34;https://doi.org/10.6092/issn.1973-2201/31&#34;&gt;https://doi.org/10.6092/issn.1973-2201/31&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Schultzberg, Mårten, Oskar Kjellin, and Johan Rydberg. “Statistical Properties of Exclusive and Non-exclusive Online Randomized Experiments using Bucket Reuse.” &lt;em&gt;arXiv preprint arXiv:2012.10202 &lt;/em&gt;(2020).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Tang, Diane, Ashish Agarwal, Deirdre O’Brien, and Mike Meyer. “Overlapping experiment infrastructure: more, better, faster experimentation.” &lt;em&gt;KDD&lt;/em&gt; &lt;em&gt;’10: Proceedings of the 16th ACM SIGKDD international conference on Knowledge discovery and data mining&lt;/em&gt;, (July 2010): 17–26.&lt;/p&gt;&#xA;        &lt;p&gt;&#xA;&#xA;        Tags: &lt;a href=&#34;https://engineering.atspotify.com/tag/data/&#34; rel=&#34;tag&#34;&gt;Data&lt;/a&gt;&lt;br/&gt;        &#xA;            &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/spotifys-new-experimentation-coordination-strategy/" rel="alternate"></link>
    <link href="https://engineering.atspotify.com/wp-content/uploads/sites/2/2021/03/Bucket-Reuse_01-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify we run hundreds of experiments at any given time. Coordinating these experiments, i.e., making sure the right user is receiving the right “treatment” with a population of hundreds of millions of users, poses technical challenges. Adding to the complexity, some of these experiments must be</summary>
    <author>
      <name>Published by Mårten Schultzberg, Oskar Kjellin, and Johan Rydberg</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Spotify’s New Experimentation Coordination Strategy&#xA;</title>
    <updated>2021-03-10T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-10:/2021/03/10/spotifys-new-experimentation-coordination-strategy/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;March 10, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/03/10/spotifys-new-experimentation-coordination-strategy/&#34; title=&#34;Spotify’s New Experimentation Coordination Strategy&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Bucket-Reuse_01-1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Bucket-Reuse_01-1.png 2105w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Bucket-Reuse_01-1-250x126.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Bucket-Reuse_01-1-700x352.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Bucket-Reuse_01-1-768x386.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Bucket-Reuse_01-1-1536x772.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Bucket-Reuse_01-1-2048x1029.png 2048w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Bucket-Reuse_01-1-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/03/Bucket-Reuse_01-1.png&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify we run hundreds of experiments at any given time. Coordinating these experiments, i.e., making sure the right user is receiving the right “treatment” with a population of hundreds of millions of users, poses technical challenges. Adding to the complexity, some of these experiments must be coordinated in the sense that the same user cannot be in two experiments at the same time. These are well-known problems among tech companies — take, for example, Google’s solution in Tang et al (2010). But the statistical implications of different solutions have not been properly investigated. In a recent paper (&lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://arxiv.org/abs/2012.10202&#34; target=&#34;_blank&#34;&gt;M. Schultzberg, O. Kjellin, and J. Rydberg, 2020&lt;/a&gt;), we investigate important statistical properties of a common technical solution to the coordination — called “Bucket Reuse”. In this blog post we highlight some interesting results and present some details about how Spotify will coordinate experiments from now on.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What is Bucket Reuse?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Bucket Reuse is a simple idea utilizing the power of hashing. Essentially the steps are as follows: decide on a number of buckets (B). Take the unique user ID and hash it together with a  random salt into B “buckets” such that all users hash into one and only one bucket. Once the hash map is established, all sampling is performed on the bucket level. This implies that a bucket either is or is not in a sample at any given time point. If we want to sample N number of users, we sample the number of buckets that contain the number of users closest to the desired number N. If, e.g., the desired N is 20 and each bucket contains 3 users, we would sample 7 buckets and end up with 21 users. Note that a bucket is simply a logical group of units to which we assign a certain user by a fixed hash map. Figure 1 illustrates such a map. The second part of the name Bucket &lt;em&gt;Reuse&lt;/em&gt; comes from the fact that we reuse the same buckets over and over again in the sampling for all experiments. That is, the random salt for the hashing is selected only once; after that, the hash map and the number of buckets is fixed. &lt;strong&gt;Importantly,&lt;/strong&gt; when we talk about Bucket Reuse for experimentation, we always mean the following: the random sampling is performed on the bucket level; the random treatment allocation is performed at the user level on the users in the sample. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;625&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image4-700x625.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image4-700x625.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image4-250x223.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image4-768x686.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image4-120x107.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image4.png 1366w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 1: &lt;em&gt;Schematic illustration of a hash map. A user ID is hashed together with a random salt to map each user to a unique bucket. &lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What is experiment coordination?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To get into the interesting parts of experiment coordination, we need to establish some key concepts. Figure 2 illustrates the concepts of exclusive and nonexclusive experiments. That two or more experiments “are exclusive” to each other simply means that they are run on distinct sets of users. Experiments that are nonexclusive are nonexclusive to &lt;em&gt;all&lt;/em&gt; experiments at Spotify, meaning that they all randomly overlap in terms of users.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;383&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image5-700x383.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image5-700x383.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image5-250x137.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image5-768x420.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image5-120x66.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image5.png 1498w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 2: &lt;em&gt;Illustration of exclusive and nonexclusive experiments. Exclusive experiments never overlap with each other in terms of users; nonexclusive experiments randomly overlap with exclusive experiments and other nonexclusive experiments. Note that the allocations in this figure were selected for illustration; in a true random sample we would expect exclusive experiments to also be spread out uniformly.  &lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The most critical challenge from a statistical perspective is imposed by what we call &lt;em&gt;programs of exclusive experiments&lt;/em&gt;. A program of exclusive experiments is a set of experiments run over time where all simultaneous experiments are exclusive to each other. That is, a unit is in at most one, and only one, of the experiments in the program at any given time point. At Spotify we have such programs for several surfaces in the app, for example Search, the Home screen, and certain parts of the backend code base. To better understand the limitations imposed on the sampling by running programs of exclusive experiments, it is helpful to introduce the concepts of paths. A path is simply a sequence of experiments that a unit can be in. Figure 3 illustrates a program of exclusive experiments containing 5 experiments over time. Below the experiments, their possible paths are displayed. For example, it is not possible to go through both Experiments 3 and 4 as they overlap in time and are exclusive, and must therefore be run on distinct users. The number of unique possible paths explodes combinatorially after a relatively short time period in most programs, and only a small partition of the possible paths can be taken by any unit regardless of the sample strategies discussed in this post.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;806&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Figure3-700x806.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Figure3-700x806.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Figure3-250x288.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Figure3-768x885.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Figure3-1334x1536.png 1334w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Figure3-120x138.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Figure3.png 1370w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figure 3: &lt;em&gt;Paths of experiences possible during a hypothetical program of 5 exclusive experiments.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Highlights from &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://arxiv.org/abs/2012.10202&#34; target=&#34;_blank&#34;&gt;Schultzberg et al.&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Schultzberg et al. presents two key results:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;Under unrestricted sampling of buckets, i.e., Bucket Reuse in nonexclusive experiments, the properties of the difference-in-means estimator of the average treatment effect is approximately equivalent to the properties under random sampling of units. In other words, standard t-tests can be used for inference. The key to this remarkable finding is connecting Bucket Reuse to the existing literature on randomized experiments embedded in complex sampling designs (Horvitz and Thompson, 1952;  van den Brakel and Renssen, 2005). &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;The bias imposed by the restricted sampling of buckets implied by programs of exclusive experiments is derived. It is shown that this bias is often restricted to the history right before the experiment. Moreover, the length of the window of the history that affects the bias can be estimated for any empirical experimentation program. One way to phrase this finding is that the sample at a time point T is not random with respect to the last D days leading up to time T, but random with respect to everything that happened before the time point T-D. If things happened during the last D days that make the set of buckets available for sampling at time T different from the population with respect to the treatment effect, the estimator is biased. This insight makes it possible for experimenters to evaluate the risk for biases by checking what experiments have been run in the program over the last D days, and if those risks for biases are likely to affect the average treatment effect in the experiment that is about to be started. &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Spotify’s new experimentation coordination strategy&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have migrated our experimentation platform to using Bucket Reuse for all experiments at Spotify. There are a few key reasons why we prefer Bucket Reuse over other solutions:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;It is simple to implement and understand. &lt;/li&gt;&lt;li&gt;It is a technically feasible solution that allows us to do complex coordination without losing speed in our systems. As new users come into Spotify, they are uniformly hashed into the existing buckets — that is, the system scales as Spotify’s user base grows.&lt;/li&gt;&lt;li&gt;Using one company-global bucket structure makes it easy to coordinate experiments arbitrarily. For example, two programs that have been run independently can easily be merged into one program of exclusive experiments at any time point for any period of time. And, a sample from a previous experiment with a broken experience can easily be quarantined and avoided in any future experiments, as the sampling units are always the same over time.  &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify we have chosen Bucket Reuse with 1M (1,000,000) buckets to coordinate all experiments. That is, all users are hashed into 1M buckets, and these buckets are used for all experiments in all experimentation programs, exclusive and nonexclusive. Although Schultzberg et al.  establishes that smaller numbers of buckets can have statistical properties enabling straight forward inference, it should be clear that the larger the number of buckets, the better. Even though the inference for the average treatment effect is unaffected by the bucket sampling, it is well known that the effect of cluster sampling on other estimands decreases when the number of buckets increases (Kumar Pradhan). That is, imposing a bucket structure is not preferred from a statistical perspective, but it is a technical necessity. The choice of 1M buckets was made because it is close to the largest number of buckets we can have while still keeping the selected buckets within an executable script stored in a database without having to resort to &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://en.wikipedia.org/wiki/Binary_large_object&#34; target=&#34;_blank&#34;&gt;BLOB&lt;/a&gt; storage. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are not planning to have any full stops or to reshuffle users into new buckets. However, there are naturally occurring periods of low experimentation that will help decrease the dependency between the samples in programs of exclusive experiments. For example, many programs run fewer general product experiments over the winter holidays due to unusual listening behaviors. These natural pauses effectively reset the programs in terms of dependencies.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To help experimenters running programs of exclusive experiments, we are implementing a few tools to keep track of the short-term dependencies. For each program, we will estimate the length of the history that can bias the results. Moreover, we are also implementing a tool to see the history of the available buckets at any time point. Figure 4 displays a prototype of this tool. It allows experimenters to evaluate if the experiments that the available user came out of are likely to bias the estimator in their experiment. It also provides information about the size of the overlap with previous experiments. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;1600&#34; height=&#34;1394&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/2020-10-23-10.58.56.gif&#34; alt=&#34;&#34;/&gt;&lt;figcaption&gt;Figure 4: &lt;em&gt;Dependency graph that shows the experimenter where the free space, and thereby their sample, will come from in terms of previous experiments in the exclusive program. Each rectangle corresponds to a previously run experiment. The numbers in the yellow circles indicate the percentage points of the population that went from one experiment into another, and finally into the proportion of the population that is available (“free space”) for sampling right now. The experimenter can see what effects the previous experiments had on the metrics of interest in their experiment. &lt;/em&gt;&lt;br/&gt;&lt;em&gt;Figure above for illustrative purposes only.&lt;/em&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Statistical validity, derived from proper random sampling and random treatment allocation, is the cornerstone of a successful experimentation program. However, implementing systems that can serve hundreds of experiments to hundreds of millions users — while retaining the ability to conveniently coordinate experiments to be exclusive, without overlap — requires compromises between technical feasibility and statistical properties. At Spotify, we have migrated the internal experimentation platform to rely fully on &lt;em&gt;bucket reuse&lt;/em&gt;, a technically desirable solution that provides speed, simplicity, and flexibility. In this post we establish the statistical properties under bucket reuse and conclude that the validity is unaffected. This migration enables more experiments of higher quality at Spotify.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Experimentation Platform team, Spotify&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Brakel, Jan van den, and Robbert H. Renssen. “Analysis of Experiments Embedded in Complex Sampling Designs.” &lt;em&gt;Survey Methodology &lt;/em&gt; 31, no. 1 (2005): 23–40.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Horvitz, D. G. and D. J. Thompson. “A Generalization of Sampling Without Replacement from a Finite Universe.” &lt;em&gt;Journal of the American Statistical Association&lt;/em&gt; 47, no. 260 (1952): 663–685. https://doi.org/10.2307/2280784&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Kumar Pradhan, Bijoy. “On efficiency of cluster sampling on sampling on two occasions.” &lt;em&gt;Statistica&lt;/em&gt; 64, no. 1 (2004): 183–191. &lt;a href=&#34;https://doi.org/10.6092/issn.1973-2201/31&#34;&gt;https://doi.org/10.6092/issn.1973-2201/31&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Schultzberg, Mårten, Oskar Kjellin, and Johan Rydberg. “Statistical Properties of Exclusive and Non-exclusive Online Randomized Experiments using Bucket Reuse.” &lt;em&gt;arXiv preprint arXiv:2012.10202 &lt;/em&gt;(2020).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Tang, Diane, Ashish Agarwal, Deirdre O’Brien, and Mike Meyer. “Overlapping experiment infrastructure: more, better, faster experimentation.” &lt;em&gt;KDD&lt;/em&gt; &lt;em&gt;’10: Proceedings of the 16th ACM SIGKDD international conference on Knowledge discovery and data mining&lt;/em&gt;, (July 2010): 17–26.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/03/10/spotifys-new-experimentation-coordination-strategy/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Bucket-Reuse_01-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify we run hundreds of experiments at any given time. Coordinating these experiments, i.e., making sure the right user is receiving the right “treatment” with a population of hundreds of millions of users, poses technical challenges. Adding to the complexity, some of these experiments must be</summary>
    <author>
      <name>Published by Mårten Schultzberg, Oskar Kjellin, and Johan Rydberg</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Matt Clarke: Senior Backend Infrastructure Engineer&#xA;</title>
    <updated>2021-03-09T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-09:/2021/03/09/my-beat-matt-clarke/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                 &#xA; &lt;article id=&#34;post-4139&#34;&gt;&#xA;     &lt;div&gt;&#xA;         &#xA;         &#xA;         &#xA;         &lt;div&gt;&#xA;             &lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/Matt-Clarke-edit.jpg&#34; alt=&#34;Matt Clarke&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/Matt-Clarke-edit.jpg 800w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/Matt-Clarke-edit-250x192.jpg 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/Matt-Clarke-edit-700x537.jpg 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/Matt-Clarke-edit-768x589.jpg 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/Matt-Clarke-edit-120x92.jpg 120w&#34; sizes=&#34;(max-width: 800px) 100vw, 800px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/02/Matt-Clarke-edit.jpg&#34;/&gt;&#xA;                                  &#xA;             &lt;/p&gt;&#xA;             &lt;p&gt;&lt;strong&gt;Matt is a Senior Backend Infrastructure Engineer and has been at Spotify for two-and-a-half years. This time last year, he was living and working in London – but that’s all changed since the start of the pandemic… &lt;/strong&gt;&lt;/p&gt;&#xA;         &lt;/div&gt;&#xA;&#xA;         &#xA;&#xA;&#xA;         &#xA;&#xA;         &#xA;&lt;blockquote&gt;&lt;p&gt;8:00am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At the moment, I’m living with my wife and step daughter in London and working from home like most people. Which means I get up around 8am, drink lots of coffee (way too much!) and log onto my computer an hour later – ready to check my messages and start getting my brain into thinking mode. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;10:00am&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My team is actually based in New York, so I tend to work 10–6 to overlap as much as possible with their hours. But the time difference means my mornings are fairly quiet and meeting-free – a chance for me to get down to focussed, individual tasks, without too many interruptions. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;My work is mostly to do with Kubernetes – the technology we use to deploy our services at Spotify – and a lot of my time is spent helping other engineers get to grips with the system, debugging their issues and developing our infrastructure services, so they can deploy more easily and reliably. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Recently, I’ve been working on something called the k8s plug in, which vastly simplifies the Kubernetes experience for developers and means they can operate without a huge understanding of the platform under the hood. Earlier this year, we open-sourced this plug in, which felt like a really great moment – it’s amazing to think it’s now available to everyone in the tech community worldwide and can benefit so many people outside our organization. That to me is the magical thing about open-source. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;1:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I try to grab a bite to eat around 1pm, although I’m really bad at taking breaks – I get so sucked into what I’m doing that I forget the time, especially if I’m coding. It used to happen when I worked in the office too, even though there was an awesome canteen and a table tennis table to tempt me away from my desk!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;2:00pm&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This is when New York starts to wake up, so my work becomes more team-based – I often pair remotely with one of the developers out there, which means jumping on a hangout and sharing our screens, so we can collaborate on a piece of code. Alternatively, we might work together to write documents like RFCs, debug production issues or help other developers with their infrastructure issues. It’s a bit of a mix, really, &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Weirdly, I’ve only met one of team-mates in real life, when I first joined up and spent two weeks in the New York office as part of an embed. But we still all work together really well – it’s friendly and we joke around a lot. I think there are some rules you need to learn for remote working and being in different zones – you need to be a bit flexible and not always expect to get your answers straight away. But once you’ve got used to that, things are surprisingly easy – it’s really not a big deal at all. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;6:00pm &lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I usually finish up at 6ish, although I’m terrible for checking my emails in the evening. To try and switch off, I watch TV, listen to podcasts or play video games – I also started up an engineering book club at the start of the first lockdown. And I’m really into cooking at the moment – there’s something about following a recipe and going through a series of orchestrated steps that reminds me of coding. Although, as the old joke goes, at least your potato peeler never turns out to be ten versions out of date… &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;111&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-700x111.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-250x40.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-768x121.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering-120x19.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/My-Beat-Breakdown-Engineering.png 1525w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;557&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/MyBeat_Matt-Clarke-graph-700x557.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/MyBeat_Matt-Clarke-graph-700x557.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/MyBeat_Matt-Clarke-graph-250x199.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/MyBeat_Matt-Clarke-graph-768x611.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/MyBeat_Matt-Clarke-graph-120x96.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/MyBeat_Matt-Clarke-graph.png 1520w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;         &#xA;         &#xA;&#xA;         &lt;p&gt;&#xA;             Published by Spotify Engineering         &lt;/p&gt;&#xA;     &lt;/div&gt;&#xA;&#xA;     &#xA;     &#xA;&#xA;&#xA; &lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/03/09/my-beat-matt-clarke/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/Matt-Clarke-edit.jpg" rel="enclosure" type="image/jpeg" length="0"></link>
    <summary type="html">Matt is a Senior Backend Infrastructure Engineer and has been at Spotify for two-and-a-half years. This time last year, he was living and working in London – but that’s all changed since the start of the pandemic…</summary>
  </entry>
  <entry>
    <title>&#xA;                                            Designing a Better Kubernetes Experience for Developers&#xA;</title>
    <updated>2021-03-01T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-01:/2021/03/01/designing-a-better-kubernetes-experience-for-developers/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;March 1, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/03/01/designing-a-better-kubernetes-experience-for-developers/&#34; title=&#34;Designing a Better Kubernetes Experience for Developers&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image3.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/03/image3.gif&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt; If you’re deploying a service with Kubernetes, you shouldn’t have to use all of your cluster management skills just to perform everyday developer tasks (like seeing which pods are experiencing errors or checking autoscaler limits). Backstage Kubernetes simplifies your deployment workflow by connecting to your existing Kubernetes implementation and aggregating the status of all your deployments into a single view — even across multiple clusters in multiple regions. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Navigating the complexity of Kubernetes&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you’re building a service today, you’re likely deploying it as a container, which is inside a pod, which is inside a cluster (alongside a bunch of other services that don’t belong to you), with deployments on different clusters spinning up and down all around the world. It can be hard to keep track of everything.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But despite widespread adoption of Kubernetes, all the tools for navigating this complexity have been focussed on the needs of cluster admins. This can make something as simple as checking the health of your service somewhat complicated. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;That’s why we built a Kubernetes monitoring tool focussed on the needs of service owners and made it a core feature of &lt;a href=&#34;https://backstage.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt;, our open platform for building developer portals. We wanted to make the experience of managing services deployed on Kubernetes easier for all developers. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But first, how did we get here?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The rise of Kubernetes and DevOps&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since its release in 2014, Kubernetes has become one of the most widely adopted and important open source projects. Capabilities like autoscaling and cost optimisation through container scheduling used to be time-consuming and tricky to get right — now they’ve been democratised. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At the same time, the concept of DevOps has become mainstream. Developers now regularly perform tasks that were traditionally the domain of operations experts. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, while everyday engineers can do more than ever before, their new powers have also come along with a new set of responsibilities.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;New powers, shifting roles&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When I first started using Kubernetes, cluster admins and service owners were one and the same: the people who built a cluster were usually the same people who owned the services that ran in the cluster. That’s not how it is today. As Kubernetes has achieved widespread adoption there has been a shift in Kubernetes usage as well as a shift in how Kubernetes is managed at the organisation level. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now organisations tend to have a separate infrastructure team (sometimes not-so-ironically called the “DevOps” team) who build and maintain clusters for the feature developers and service owners. As the teams have become more specialized, the setups have become more advanced. For instance, the infrastructure team might set up Kubernetes clusters in multiple geographic regions in order to reduce end-user latency, wherever the user is in the world. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This is a better experience for the user, and it’s an optimization you might not have considered before Kubernetes existed or without a dedicated infrastructure team. But it also comes with productivity costs for the developer.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Frustration also scales&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When your deployment environment reaches this kind of complexity and scale, the maintenance overhead for service owners increases. It forces them to use multiple kubectl contexts or multiple UIs just to get an overall view of their system. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s a small overhead — but adds up over time — and multiplies as service owners build more services and deploy them to more regions. Just checking the status of a service first requires hunting for it across multiple clusters. This can reduce productivity (and patience) company-wide.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Better tools for the job&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We believed we could solve the problem through developer tooling. But we soon discovered the available tools weren’t suitable, because they:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Don’t cater well for deploying to multiple Kubernetes clusters,&lt;/li&gt;&lt;li&gt;Usually require that users have clusterwide permissions, or&lt;/li&gt;&lt;li&gt;Display everything on a cluster and aren’t focused on the service the user cares about.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we often do when we want to &lt;a href=&#34;https://backstage.io/blog/2020/10/22/cost-insights-plugin&#34;&gt;solve a problem involving infrastructure complexity&lt;/a&gt;, we wondered, why not build a custom plugin for Backstage, our homegrown developer portal?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Backstage Kubernetes: Manage your services, not clusters&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Backstage provides vital information from Kubernetes — specifically focussed on the developer’s service. At a glance, the developer can see:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;The current status of their systems running in Kubernetes&lt;ul&gt;&lt;li&gt;Including information aggregated from multiple clusters/regions&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Any errors reported by Kubernetes&lt;/li&gt;&lt;li&gt;How close the system is to its autoscaling limits&lt;/li&gt;&lt;li&gt;Container restarts&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;419&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image1-700x419.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image1-700x419.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image1-250x150.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image1-768x459.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image1-1536x919.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image1-120x72.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image1.png 1999w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;&lt;em&gt;A default Kubernetes UI provides a cluster-centric view, including info about software you don’t own. &lt;/em&gt;&lt;br/&gt;&lt;em&gt;(Source: &lt;/em&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/&#34;&gt;&lt;em&gt;kubernetes.io&lt;/em&gt;&lt;/a&gt;&lt;em&gt;)&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image4-700x394.png&#34; alt=&#34;&#34;/&gt;&lt;figcaption&gt;&lt;em&gt;The Backstage Kubernetes UI provides a service-centric view, showing you the status of your service no matter how many clusters it’s been deployed to. &lt;/em&gt;&lt;br/&gt;&lt;em&gt;Figures above are for illustrative purposes.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image2-700x382.png&#34; alt=&#34;&#34;/&gt;&lt;figcaption&gt;&lt;em&gt;More detail about your deployments is just a click away. You can see autoscaler limits, errors, and the status of individual pods — all at a glance — and without a trip to the CLI.&lt;/em&gt;&lt;br/&gt;&lt;em&gt;Figures above are for illustrative purposes.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Instead of spending 20 minutes in a CLI trying to track down which clusters your service has been deployed to, you get all the information you need to know at a glance. You can learn more about these features on the &lt;a href=&#34;https://backstage.io/blog/2021/01/12/new-backstage-feature-kubernetes-for-service-owners&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage blog&lt;/a&gt; — or watch the demo video below to get an overview.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;p&gt;&#xA;&lt;iframe loading=&#34;lazy&#34; title=&#34;How to monitor your services on Kubernetes with Backstage (Demo)&#34; width=&#34;900&#34; height=&#34;506&#34; src=&#34;https://www.youtube.com/embed/VivuOxn3VQ8?feature=oembed&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen=&#34;&#34;&gt;&lt;/iframe&gt;&#xA;&lt;/p&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Everything about your service in one place&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As a standalone monitoring tool, we think Backstage Kubernetes can improve the experience of any developer who deploys to Kubernetes. Combined with the other features of Backstage, developers get a complete solution for building and managing their services.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At the core of Backstage is its &lt;a href=&#34;https://backstage.io/blog/2020/05/22/phase-2-service-catalog&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;service catalog&lt;/a&gt;, which aggregates information about software systems together so you have a consistent UI and one tool for developers to use. For years, Backstage has provided one place for Spotify’s developers to see everything they need to know about their services (APIs, documentation, ownership, etc.). Now that includes the current status of their service, regardless of how many Kubernetes clusters they deploy to.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that Backstage is open source, we want to improve on what we have built internally and provide Kubernetes as a core component of Backstage for anyone to contribute to and benefit from. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Future Iteration&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we continue to grow and develop Kubernetes in Backstage with the community, we hope to offer support for Kubernetes resources beyond Deployments and Custom Resource Definitions. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Although at Spotify we currently use GKE extensively, Kubernetes in Backstage communicates directly with the Kubernetes API and is cloud agnostic, accordingly. It will work with other cloud providers, including AWS and Azure, as well as managed Kubernetes services, like Red Hat OpenShift.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To contribute or get more information on Kubernetes in Backstage, &lt;a href=&#34;https://discord.gg/MUpMjP2&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;join the discussion on Discord&lt;/a&gt;!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Ask us anything: Matthew and the Backstage team will be hosting a Reddit AMA on March 3 at 4:00pm GMT. Send questions in &lt;a href=&#34;https://www.reddit.com/r/kubernetes/comments/lwb31v/were_the_engineers_rethinking_kubernetes_at/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;r/kubernetes&lt;/a&gt; starting March 2.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;A version of this article first appeared on &lt;/em&gt;&lt;a href=&#34;https://thenewstack.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;The New Stack&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/03/01/designing-a-better-kubernetes-experience-for-developers/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image3.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">TLDR; If you’re deploying a service with Kubernetes, you shouldn’t have to use all of your cluster management skills just to perform everyday developer tasks (like seeing which pods are experiencing errors or checking autoscaler limits). Backstage Kubernetes simplifies your deployment workflow by co</summary>
    <author>
      <name>Published by Matthew Clarke, Senior Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            2020 Unwrapped: The people behind the numbers&#xA;</title>
    <updated>2021-03-01T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-03-01:/2021/03/01/2020-unwrapped-the-people-behind-the-numbers/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;March 1, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/03/01/2020-unwrapped-the-people-behind-the-numbers/&#34; title=&#34;2020 Unwrapped: The people behind the numbers&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/2020-Wrapped.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/2020-Wrapped.jpg 1510w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/2020-Wrapped-250x122.jpg 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/2020-Wrapped-700x341.jpg 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/2020-Wrapped-768x374.jpg 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/2020-Wrapped-120x58.jpg 120w&#34; sizes=&#34;(max-width: 1510px) 100vw, 1510px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/03/2020-Wrapped.jpg&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;2020 Wrapped is a story of gratitude and resilience. And we’re grateful for the people and teams behind the curtain who built this product experience (👏🏽Give them a hand!). &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The effort behind Wrapped spans the entire company and is founded on communication and collaboration. With the shift to working from home, we needed to create a structure that enabled us to collaborate and communicate remotely, and prioritized asynchronous communication over synchronous communication when possible. We were able to adapt to unprecedented challenges and join forces to deliver a personalized product experience for our listeners. Now, let’s take a look at the numbers behind the 2020 Wrapped experience.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Distributed execution&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;2020 Wrapped, like the Wrapped campaigns before it, was a company-wide project that involved collaboration among hundreds of Spotifiers. Over a span of 4 months, two key groups dedicated themselves to building the product experience — &lt;strong&gt;Personalization&lt;/strong&gt; &lt;strong&gt;(PZN)&lt;/strong&gt;, the minds behind the &lt;a href=&#34;https://engineering.atspotify.com/2021/02/11/how-spotify-optimized-the-largest-dataflow-job-ever-for-wrapped-2020/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;data&lt;/a&gt; magic, and &lt;strong&gt;Edison&lt;/strong&gt;, drivers of the rich end-user experience. Around twenty engineers from 4 different squads within Edison and 6 engineers from other squads joined as embeds, all working as a virtual team covering 4 different time zones. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We adapted our ways of working to allow team members to contribute, communicate and collaborate regardless of their location. The team asynchronously worked on 10 technical specification documents, 8 RFC documents, 4 project planners, and more than 15 slide decks to facilitate information sharing.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;ul&gt;&lt;li&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;1245&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pioneer-700x1245.png&#34; alt=&#34;&#34; data-id=&#34;4235&#34; data-full-url=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pioneer.png&#34; data-link=&#34;https://engineering.atspotify.com/?attachment_id=4235&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pioneer-700x1245.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pioneer-250x445.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pioneer-768x1366.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pioneer-120x213.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Pioneer.png 822w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;figure&gt;&lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image3-700x1245.png&#34; alt=&#34;&#34; data-id=&#34;4225&#34; data-full-url=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/image3.png&#34; data-link=&#34;https://engineering.atspotify.com/?attachment_id=4225&#34;/&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With a distributed-first mindset, Slack became our place to build traceability and transparency, allowing us to easily retrace our steps and find documentation that led to business decisions and actions. By the end of the project,  we had created 11 Slack channels each dedicated to brief messages that required quick answers or a brief team discussion around specific topics. One particular channel existed solely for the purpose of sharing memes — 8,116 and counting. 😬&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;ul&gt;&lt;li&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;1245&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Slack-700x1245.png&#34; alt=&#34;&#34; data-id=&#34;4237&#34; data-full-url=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Slack.png&#34; data-link=&#34;https://engineering.atspotify.com/?attachment_id=4237&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Slack-700x1245.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Slack-250x445.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Slack-768x1366.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Slack-120x213.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Slack.png 822w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;1245&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Edison-700x1245.png&#34; alt=&#34;&#34; data-id=&#34;4238&#34; data-full-url=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Edison.png&#34; data-link=&#34;https://engineering.atspotify.com/?attachment_id=4238&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Edison-700x1245.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Edison-250x445.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Edison-768x1366.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Edison-120x213.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Edison.png 822w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Ultimately, we kept the team connected and created team spirit by holding brainstorm meetings and building on ideas we generated as a group. It was especially helpful when complex problems arose and we needed to get people on the same page.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Collaboration&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The core &lt;a href=&#34;https://spotify.design/article/how-we-brought-2020-wrapped-to-life-in-the-mobile-app&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;mobile experience&lt;/a&gt; was built by a few teams, but to deliver the product experience, it took the effort of 8 additional squads working simultaneously. We defaulted to open communication and, in most cases, preferred to overshare than undershare. Given the number of teams, oversharing ensured a successful flow of information. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We focused a great deal on expanding the mobile experience for our listeners in 2019, and we were able to reuse some of the components and apply some of the &lt;a href=&#34;https://engineering.atspotify.com/2020/09/21/spotify-unwrapped-2019-how-we-built-an-in-app-experience-just-for-you/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;lessons from 2019 Wrapped&lt;/a&gt; to the 2020 experience. Compared to 2019, we were able to reduce our engineering effort by 50% for Android development, reduce our timeline for iOS development by 30%, and repeat with 60 engineering weeks for Backend. For Web, we increased our scope with an ambitious vision and made a significant investment in our engineering effort compared to 2019.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On the day of launch, individuals from multiple functions — Marketing, Brand + Creative, R&amp;amp;D, Customer Support, Local Marketing, Public Relations, and Localization — gathered in a war room (aka a virtual meeting) testing, troubleshooting, and tackling live issues with tight coordination across 8 hours.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Wrapped around the world&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With 12 new markets and 4 new languages, 2020 Wrapped was the most global iteration of the project to date 🌎🌍🌏. We served 26 total languages, 8 different fonts, and 87,343 words total — approximately 4,000 words per language in both left-to-right and right-to-left text orientations. Though a challenging task, it was absolutely critical that we embed localization into our process to improve the listening experience for our users across the globe. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;ul&gt;&lt;li&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;1245&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/the-daily-700x1245.png&#34; alt=&#34;&#34; data-id=&#34;4240&#34; data-full-url=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/the-daily.png&#34; data-link=&#34;https://engineering.atspotify.com/?attachment_id=4240&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/the-daily-700x1245.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/the-daily-250x445.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/the-daily-768x1366.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/the-daily-120x213.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/the-daily.png 822w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;1245&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/top-fonts-700x1245.png&#34; alt=&#34;&#34; data-id=&#34;4241&#34; data-full-url=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/top-fonts.png&#34; data-link=&#34;https://engineering.atspotify.com/?attachment_id=4241&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/top-fonts-700x1245.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/top-fonts-250x445.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/top-fonts-768x1366.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/top-fonts-120x213.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/top-fonts.png 822w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Shareable cards, like the ones above, hold a number of different corner cases to test, and quality remains top of mind. Because we weren’t physically in the office to pair and review pieces, it became imperative that we find creative solutions to allow for effective and efficient collaboration. For Localization testing and the Design Review process, we created a dedicated tool to reduce the feedback loop and enable the team to use it asynchronously. Using this tool, we were able to increase productivity in our distributed work environment, while respecting flexible work schedules and work/life boundaries.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;358&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/I-want-to-believe8-700x358.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/I-want-to-believe8-700x358.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/I-want-to-believe8-250x128.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/I-want-to-believe8-768x393.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/I-want-to-believe8-1536x786.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/I-want-to-believe8-120x61.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/I-want-to-believe8.png 1749w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;359&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Lionel-Hampton-700x359.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Lionel-Hampton-700x359.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Lionel-Hampton-250x128.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Lionel-Hampton-768x393.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Lionel-Hampton-1536x787.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Lionel-Hampton-120x61.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/Lionel-Hampton.png 1743w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;Closing words from the Wrapped fellowship&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the shift to working from home on a project that spanned the company, we needed to (quickly) set up a structure to keep productivity high and collaboration and communication flowing, while ensuring we were taking care of ourselves, our family and friends, and our team members. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We hope you enjoyed reading about the people behind the numbers, and hope that Wrapped made the end of your 2020 just a little bit better.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Thank you to everyone who made another year of Wrapped.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/03/01/2020-unwrapped-the-people-behind-the-numbers/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/03/2020-Wrapped.jpg" rel="enclosure" type="image/jpeg" length="0"></link>
    <summary type="html">2020 Wrapped is a story of gratitude and resilience. And we’re grateful for the people and teams behind the curtain who built this product experience (👏🏽Give them a hand!). The effort behind Wrapped spans the entire company and is founded on communication and collaboration. With the shift to wor</summary>
  </entry>
  <entry>
    <title>&#xA;                                            How Spotify Optimized the Largest Dataflow Job Ever for Wrapped 2020&#xA;</title>
    <updated>2021-02-11T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-02-11:/2021/02/11/how-spotify-optimized-the-largest-dataflow-job-ever-for-wrapped-2020/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;February 11, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/02/11/how-spotify-optimized-the-largest-dataflow-job-ever-for-wrapped-2020/&#34; title=&#34;How Spotify Optimized the Largest Dataflow Job Ever for Wrapped 2020&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image1.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/02/image1.gif&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;In this post we’ll discuss how Spotify optimized and sped up elements from our largest Dataflow job, &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://engineering.atspotify.com/2020/02/18/spotify-unwrapped-how-we-brought-you-a-decade-of-data/&#34; target=&#34;_blank&#34;&gt;Wrapped 2019&lt;/a&gt;, for &lt;a href=&#34;https://open.spotify.com/genre/2020-page&#34;&gt;Wrapped 2020&lt;/a&gt; using a technique called Sort Merge Bucket (SMB) join. We’ll present the design and implementation of SMB and how we incorporated it into our data pipelines.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Introduction&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Shuffle is the core building block for many big data transforms, such as a join, GroupByKey, or other reduce operations. Unfortunately, it’s also one of the most expensive steps in many pipelines. Sort Merge Bucket is an optimization that reduces shuffle by doing work up front on the producer side. The intuition is that for datasets commonly and frequently joined on a known key, e.g., user events with user metadata on a user ID, we can write them in bucket files with records bucketed and sorted by that key. By knowing which files contain a subset of keys and in what order, shuffle becomes a matter of merge-sorting values from matching bucket files, completely eliminating costly disk and network I/O of moving key–value pairs around. Andrea Nardelli carried out the original investigation on Sort Merge Buckets for his &lt;a href=&#34;http://kth.diva-portal.org/smash/get/diva2:1334587/FULLTEXT01.pdf&#34;&gt;2018 master’s thesis&lt;/a&gt;, and we started looking into generalizing the idea as a &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://spotify.github.io/scio/extras/Sort-Merge-Bucket.html&#34; target=&#34;_blank&#34;&gt;Scio module&lt;/a&gt; afterwards.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Design and Implementation&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The majority of the data pipelines at Spotify are written in &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://github.com/spotify/scio&#34; target=&#34;_blank&#34;&gt;Scio&lt;/a&gt;, a Scala API for &lt;a href=&#34;https://beam.apache.org/&#34;&gt;Apache Beam&lt;/a&gt;, and run on the &lt;a href=&#34;https://cloud.google.com/dataflow&#34;&gt;Google Cloud Dataflow&lt;/a&gt; service. We implemented SMB in Java to be closer to the native Beam SDK (and even wrote and collaborated on a &lt;a href=&#34;https://docs.google.com/document/d/1AQlonN8t4YJrARcWzepyP7mWHTxHAd6WIECwk1s3LQQ/edit?usp=sharing&#34;&gt;design document with the Beam community&lt;/a&gt;), and provide Scala syntactic sugar in Scio like many other I/Os. The design is modularized into the main components listed below — we’ll start with the two top-level SMB &lt;a href=&#34;https://beam.apache.org/documentation/programming-guide/#transforms&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;PTransforms&lt;/a&gt; — the write and read operations SortedBucketSink and SortedBucketSource.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;SortedBucketSink&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This transform writes a &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://beam.apache.org/documentation/programming-guide/#pcollections&#34; target=&#34;_blank&#34;&gt;PCollection&lt;/a&gt;&amp;lt;T&amp;gt; (where T has a corresponding &lt;a href=&#34;https://github.com/spotify/scio/blob/master/scio-smb/src/main/java/org/apache/beam/sdk/extensions/smb/FileOperations.java&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;FileOperations&amp;lt;T&amp;gt;&lt;/a&gt; instance) in SMB format. It first extracts keys and assigns bucket IDs using logic provided by &lt;a href=&#34;https://github.com/spotify/scio/blob/master/scio-smb/src/main/java/org/apache/beam/sdk/extensions/smb/BucketMetadata.java&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;BucketMetadata&lt;/a&gt;, groups key–values by the ID, sorts all values, and then writes them into files corresponding to bucket IDs using the FileOperations instance.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In addition to the bucket files, a JSON file is also written to the output directory representing the information from BucketMetadata that’s necessary to read the source: the number of buckets, the hashing scheme, and the instructions to extract the key from each record (for example, for Avro records we can encode this instruction with the name of the GenericRecord field containing the key).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;255&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image5-700x255.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image5-700x255.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image5-250x91.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image5-768x280.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image5-120x44.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image5.png 1180w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;SortedBucketSource&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This transform reads from one or more sources written in SMB format with the same key and hashing scheme. It opens file handles for corresponding buckets from each source (using FileOperations&amp;lt;T&amp;gt; for that input type) and merges them while maintaining sorted order. Results are emitted as &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/join/CoGbkResult.java&#34; target=&#34;_blank&#34;&gt;CoGbkResult&lt;/a&gt; objects per key group, the same class Beam uses for regular Cogroup operations, so the user can extract the results per source with the correct parameterized type.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;365&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image7-700x365.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image7-700x365.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image7-250x130.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image7-768x400.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image7-120x63.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image7.png 1067w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;FileOperations&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;FileOperations abstracts away the reading and writing of individual bucket files. Since we need fine-grained control over the exact elements and their order in every file, we cannot leverage the existing Beam file I/Os, which operate on a PCollection level and abstract away the locality and order of elements. Instead, SMB file operations happen at a lower level of BoundedSource for input and ParDo for output. Currently Avro, BigQuery TableRow JSON, and TensorFlow TFRecord/Example records are supported. We plan to add other formats like Parquet as well.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;BucketMetadata&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This class abstracts the keying and bucketing of elements, and includes information such as key field, class, number of buckets, shards, and hash function. The metadata is serialized as a JSON file alongside data files when writing, and used to check compatibility when reading SMB sources.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Optimizations and Variants&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Over the last year and a half we’ve been adopting SMB at Spotify for various use cases, and accumulated many improvements to handle the scale and complexity of our data pipelines.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Date partitioning:&lt;/strong&gt; At Spotify, event data is written to Google Cloud Services (GCS) in hourly or daily partitions. A common data engineering use case is to read many partitions in a single pipeline — for example, to compute stream count over the last seven days. For a non-SMB read, this can be easily done in a single PTransform using wildcard file patterns to match files across multiple directories. However, unlike most File I/Os in Beam, the SMB Read API requires the input to be specified as a directory, rather than a file pattern (this is because we need to check the directory’s metadata.json file as well as the actual record files). Additionally, it must match up bucket files across partitions as well as across different sources, while ensuring that the CoGbkResult output correctly groups data from all partitions of a source into the same TupleTag key. We evolved the SMB Read API to accept one or more directories &lt;em&gt;per source&lt;/em&gt;. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Sharding:&lt;/strong&gt; Although the Murmur class of hash functions we use during bucket assignment usually ensures an even distribution of records across buckets, in some instances one or more buckets may be disproportionately large if the key space is skewed, creating possible OOM errors when grouping and sorting records. In this case, we allow users to specify a number of &lt;em&gt;shards&lt;/em&gt; to further split each bucket file. During the bucket assignment step, a value between [0, numShards) is generated randomly &lt;a href=&#34;https://beam.apache.org/documentation/runtime/model/#bundling-and-persistence&#34;&gt;&lt;em&gt;per bundle&lt;/em&gt;&lt;/a&gt;. Since this value is computed completely orthogonally to the bucket ID, it can break up large key groups across files. Since each shard is still written in sorted order, they can simply be merged together at read time.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Parallelism:&lt;/strong&gt; Since the number of buckets in an SMB sink is always a power of 2, we can come up with a joining scheme across sources with different numbers of buckets based off of a desired level of parallelism specified by the user. For example, if the user wants to join Source 1 with 4 buckets and Source 2 with 2 buckets, they can specify either:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Minimum parallelism,&lt;/strong&gt; or “Merge Greatest Buckets” strategy: 2 parallel readers will be created. Each reader will read 2 buckets from source A and 1 from source B, merging them together. Because bucket IDs are assigned by taking the integer hash value of the key modulo the desired number of buckets, mathematically we know that the key spaces of the merged buckets overlap.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Maximum parallelism,&lt;/strong&gt; or “Least Bucket Replication” strategy: 4 parallel readers will be created. Each reader will read 1 bucket from Source A and 1 from Source B. After merging each key group, the reader will have to rehash the key modulo the greatest number of buckets, to avoid emitting duplicate values. Therefore, even though this strategy achieves a higher level of parallelism, there is some overhead of computing duplicate values and rehashing to eliminate them.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Auto parallelism:&lt;/strong&gt; Creates a number of readers between minimal and maximal amounts, based on a desired split size value provided by the Runner at runtime.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;459&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image3-700x459.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image3-700x459.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image3-250x164.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image3-768x504.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image3-120x79.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image3.png 1115w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;SortedBucketTransform:&lt;/strong&gt; A common usage pattern is for pipelines to enrich an existing dataset by joining it with one or more other sources, then writing it to an output location. We decided to specifically support this in SMB with a unique PTransform that reads, transforms, and writes output using the same keying and bucketing scheme. By doing the read/transform/write logic per bucket on the same worker, we can avoid having to reshuffle the data and recompute buckets — since the key is the same, we know that the transformed elements from bucket M of the inputs also correspond to bucket M in the output, in the same sorted order as they were read from.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;320&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image4-700x320.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image4-700x320.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image4-250x114.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image4-768x351.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image4-120x55.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image4.png 902w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;External Sort:&lt;/strong&gt; We made a number of improvements to Beam’s &lt;a href=&#34;https://github.com/apache/beam/tree/master/sdks/java/extensions/sorter&#34;&gt;external sorter extension&lt;/a&gt;, including replacing the Hadoop sequence file with the native file I/O, removing the 2GB memory limit, and reducing disk usage and coder overhead.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Adoption — Core Data Producers&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since SMB requires data to be bucketed and sorted in a specific fashion, the adoption naturally starts from the producer of that data. A majority of the Spotify data processing relies on a few core data sets that act as single sources of truth for various business domains like streaming activities, user metadata and streaming context. We worked with the maintainer of these data sets to convert a year’s worth of data to SMB format.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Implementation was straightforward since SortedBucketSink is mostly a drop-in replacement for the vanilla Avro sink with some extra settings. We were using Avro sink with the sharding option to control the number and size of output files. After migrating to SMB, we did not notice any major bump in terms of vCPU, vRAM, or wall time since sharding requires a full shuffle similar to the additional cost of SMB sinks. A few other settings we have since had to tweak:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Agree on user_id as a hexadecimal string as bucket and sort key, since we need the same key type and semantic across all SMB datasets.&lt;/li&gt;&lt;li&gt;Set compression to DEFLATE with level 6 to be consistent with the default Avro sink in Scio. As a nice side effect of data being bucketed and sorted by key, we observed ~50% reduction in storage from better compression due to collocation of similar records.&lt;/li&gt;&lt;li&gt;Make sure output files are backwards compatible. SMB output files have “bucket-X-shard-Y” in their names but otherwise contain the same records with the same schema. So existing pipelines can consume them without any code change; they just do not leverage the speedup in certain join cases.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Adoption — Wrapped 2020&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once the core datasets were available in SMB format, we started Wrapped 2020, building off the work left from the Wrapped 2019 campaign. The architecture was meant to be reusable and was a great place to start. However, the source of data was a large, expensive Bigtable cluster that had to be scaled further up to handle the load of Wrapped jobs. We wanted to save cost and time by moving from Bigtable to SMB sources. This year we also needed to handle new complex requirements for filtering and aggregating streams. This required us to join a large dataset containing stream contextual information to the user’s listening history. This would have been nearly impossible or at the very least extremely expensive because of the considerable size of each of these joins. Instead we tried using SMB to eliminate that join completely and avoid using Bigtable as our listening history source.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To compute Wrapped 2020, we had to read from three main data sources for streaming activity, user metadata and streaming context. These three sources had all the data we needed to generate each person’s Wrapped while filtering based on listening context. Previously, the Bigtable had 5 years’ worth of listening history already keyed by user_id. Now, we are able to read data already keyed by user_id from these three sources through SMB. We then aggregated a year’s worth of data per key to calculate each user’s Wrapped.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Because 1 of the 3 main sources are partitioned hourly while the other 2 are partitioned daily, it would be problematic to read a year’s worth of data in one job due to the excessive number of concurrent reads from the hourly partitioned source. Instead, we first ran smaller jobs that would aggregate a week’s or day’s worth of play counts, msPlayed, and other information on each user. From there, we then aggregated all these smaller partitions to a singular partition of data that would hold a year’s worth of data. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;218&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image2-700x218.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image2-700x218.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image2-250x78.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image2-768x240.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image2-1536x479.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image2-120x37.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image2.png 1692w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;SMB made this relatively easy. We used sortMergeTransform to combine our three sources of data, read each one keyed by user_id, and write our Wrapped output (play counts, ms played, play context, etc.) in SMB format. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;353&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/Screen-Shot-2021-02-11-at-9.59.05-AM-700x353.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/Screen-Shot-2021-02-11-at-9.59.05-AM-700x353.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/Screen-Shot-2021-02-11-at-9.59.05-AM-250x126.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/Screen-Shot-2021-02-11-at-9.59.05-AM-768x387.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/Screen-Shot-2021-02-11-at-9.59.05-AM-120x60.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/Screen-Shot-2021-02-11-at-9.59.05-AM.png 1246w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Finally, we ran our aggregate job that uses sortMergeGroupByKey to read all Wrapped weekly partitions of SMB, combine a year’s worth of data, and write the output so later jobs can calculate the rest of Wrapped. A key point of flexibility here is that the aggregate job can take any mix of weekly and daily partitions, which is incredibly helpful logistically when running these jobs. The end result in practice looks something like this:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;218&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image6-700x218.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image6-700x218.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image6-250x78.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image6-768x240.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image6-1536x479.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image6-120x37.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image6.png 1692w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This ended up being a huge cost savings for us in this year’s Wrapped project. By leveraging SMB, we managed to join roughly a total of 1PB data without using conventional shuffle or Bigtable. We estimate around a 50% decrease in Dataflow costs this year compared to previous years’ Bigtable-based approach. Additionally, we avoided scaling the Bigtable cluster up two to three times its normal capacity (up to around 1,500 nodes at peak) to support the heavy Wrapped jobs. This was a huge win in this year’s campaign as we were able to bring a wonderful experience in a more cost effective way than ever before.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By adopting SMB, we were able to perform extremely large joins that were previously either unfeasible or cost-prohibitive, or that required custom workarounds like Bigtable. We achieved significant cost savings and opened up more ways of optimizing our workflows. There’s still much work to be done. We look forward to migrating more workflows to SMB, while handling more edge cases like data skew, composite keys, and more file formats.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/02/11/how-spotify-optimized-the-largest-dataflow-job-ever-for-wrapped-2020/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/02/image1.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">In this post we&#39;ll discuss how Spotify optimized and sped up elements from our largest Dataflow job, Wrapped 2019, for Wrapped 2020 using a technique called Sort Merge Bucket (SMB) join. We&#39;ll present the design and implementation of SMB and how we incorporated it into our data pipelines. Introdu</summary>
    <author>
      <name>Published by Neville Li, Claire McGinty, Sahith Nallapareddy, &amp; Joel Östlund</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Introducing XCMetrics: Our All-in-One Tool for Tracking Xcode Build Metrics&#xA;</title>
    <updated>2021-01-20T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2021-01-20:/2021/01/20/introducing-xcmetrics-our-all-in-one-tool-for-tracking-xcode-build-metrics/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;January 20, 2021&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2021/01/20/introducing-xcmetrics-our-all-in-one-tool-for-tracking-xcode-build-metrics/&#34; title=&#34;Introducing XCMetrics: Our All-in-One Tool for Tracking Xcode Build Metrics&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/xcmetrics-open-source-xcode-tool-1.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2021/01/xcmetrics-open-source-xcode-tool-1.gif&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; We just open sourced &lt;a href=&#34;https://xcmetrics.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;XCMetrics&lt;/a&gt; — a tool for Apple’s developer software, Xcode, that lets you collect, display, and track the valuable metrics hiding inside your team’s Xcode build logs. Are your build times improving or regressing? Which version of Xcode is slowest? Which hardware setup is fastest? XCMetrics makes it easy to find out all this and more. Made for iOS engineers, by iOS engineers, the tool is written completely in Swift, so it’s easy to customize. Use it to track the metrics you want — and get insights that can help improve both developer experience and productivity.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The problem: Where do you get good Xcode build data?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You’ve read before on this blog about how our infrastructure teams are always finding new and innovative ways to make &lt;a href=&#34;https://engineering.atspotify.com/2020/07/22/leveraging-mobile-infrastructure-with-data-driven-decisions/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;data-driven decisions&lt;/a&gt;. But what if you don’t have access to good data in the first place? This is especially challenging for iOS engineers given that most of that platform’s tools are closed source, making it especially tricky to customize them to your needs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For example, when we first introduced Swift to our music app, a requirement that we set for ourselves was not to worsen the developer experience. One metric for that is build time: is adopting Swift slowing our Xcode build times down or speeding them up? And how do we accurately measure that (without using a stopwatch every time we hit run)?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Our first solution: Parse the data from Xcode’s log files&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Whenever you run a build in Xcode, whether it’s a test build or a continuous integration build in production, xcodebuild produces a log file called xcactivitylog. Many developers don’t know that this file exists or that it’s useful for inspecting warnings, errors, and other data from past builds, like build times. So, over a year ago we developed and released an open source tool called &lt;a href=&#34;https://github.com/spotify/XCLogParser&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;XCLogParser&lt;/a&gt; — which parses those xcactivitylog files and makes all that build data more accessible to developers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;XCLogParser was created for a simple purpose: unearth the data buried in Xcode’s build logs and make it more human readable. But one piece of feedback we received from various teams after open sourcing XCLogParser is that it still requires substantial time to build the infrastructure for continuously collecting those build logs and maintaining them over time. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It was time for us to build a more full-featured tool — one that could integrate with a production environment composed of distributed teams, and provide better insights over time. A collector and a tracker, not just a parser. And that’s how XCMetrics was born.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;A complete solution: Collect, parse, store, track, repeat&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ve been developing and testing XCMetrics over the last year, building a whole suite of tools in order to create a complete solution for tracking Xcode build metrics. &lt;strong&gt;Since introducing this system at Spotify, the tools have been used to collect over one million builds and billions of compilation steps — producing over 10TB of data. &lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With this amount of data, we’ve been able to answer complex questions for our developer teams, such as:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Which function takes the longest to typecheck in our project every day? &lt;/li&gt;&lt;li&gt;Which pull requests introduce a specific warning or compilation failure?&lt;/li&gt;&lt;li&gt;How should we configure our engineers’ machines in order to maximize their productivity (hardware specs, installed software, etc.)?&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ve used these insights to improve the everyday experience and productivity of our developers, and we think other organizations will find these kinds of insights valuable, as well. So we are happy to open source XCMetrics with the world — we’re especially excited to see and learn from the insights other teams uncover.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Architectural overview: Designed for scale and customization&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;XCMetrics is an all-in-one tool that tracks Xcode build metrics for teams of all sizes. We built it with a flexible and extensible architecture in order to fit as many requirements as possible into its plugin system, allowing for customization of the information collected in every build. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;XCMetrics is made up of the following components:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;A Swift CLI tool&lt;/strong&gt; that should be invoked in a post-scheme action after every build completes, whose task is to cache and upload build metrics.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;A backend service&lt;/strong&gt; written in Swift receives the log and attaches metadata via a multipart request. The data can be parsed and saved synchronously or asynchronously.&lt;ul&gt;&lt;li&gt;If the configuration specifies parsing logs asynchronously, they are enqueued for processing in a Redis instance.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;A PostgreSQL database&lt;/strong&gt; — once the log is parsed, the data for each build is inserted into the database, partitioned by day, for easy retrieval and historical analysis.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;280&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image3-700x280.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image3-700x280.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image3-250x100.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image3-768x307.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image3-1536x615.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image3-120x48.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image3.png 1837w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Getting started: Which metrics do you want to track?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We did our best to make XCMetrics as generic and customizable as possible. The only decisions you have to make are where the backend service should be deployed — and, more interestingly, what type of data you would like to collect.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Standard metrics&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;XCMetrics is distributed as an executable from our GitHub releases page. You can follow the &lt;a href=&#34;https://xcmetrics.io/docs/getting-started.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Getting Started guide&lt;/a&gt; to learn how to get XCMetrics on your developer’s machine and execute it in a post-action scheme. Once that’s done, the default set of build metrics will be collected and uploaded to your service. You can check out the default set of collected metrics here.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Custom metrics&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you would like to collect even more metrics, you can wrap the XCMetrics Swift Package in your own package in order to invoke it manually. By doing so, you’ll be able to provide even more metrics to be attached to every build. Some examples are:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Anonymized version control information to correlate build times with dirty checkout state&lt;/li&gt;&lt;li&gt;Thermal throttling of the machine that could affect build times&lt;/li&gt;&lt;li&gt;Project configuration information that could affect build metrics&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This is the minimal example of a XCMetrics plugin that collects the thermal throttling state of the machine and attaches it to each build.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;593&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image2-700x593.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image2-700x593.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image2-250x212.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image2-768x651.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image2-1536x1302.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image2-120x102.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image2.png 1930w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The main method forwards the arguments parsing to &lt;em&gt;XCMetrics&lt;/em&gt;. You proceed to create a &lt;em&gt;XCMetricsConfiguration&lt;/em&gt; and add &lt;em&gt;XCMetricsPlugin&lt;/em&gt; to it. Each plugin takes a dictionary of the environment variables passed to the post-action scheme environment and returns a dictionary of the metrics to be collected. You would then distribute your own custom version of XCMetrics and execute it with the same arguments to upload the logs with the new metrics attached.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Service deployment&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We provide a &lt;a href=&#34;https://hub.docker.com/r/spotify/xcmetrics&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Docker image&lt;/a&gt; that has everything needed to deploy the XCMetrics backend in any infrastructure. We also support a one-click deployment to Google Cloud via Google Cloud Run. Our documentation also contains examples on how to deploy to Kubernetes, if you fancy that.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Needless to say, you don’t need a complex DevOps team to deploy and run XCMetrics. It’s made by iOS engineers, for iOS engineers, so simplicity is at its heart.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Using XCMetrics at Spotify&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;XCMetrics has been in use in production at Spotify for over one year, and it has allowed us to make more informed decisions in regards to our project structure and investments. We have data pipelines and dashboards that are used every day to monitor the state of our codebase and tools. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;424&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image4-700x424.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image4-700x424.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image4-250x151.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image4-768x465.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image4-1536x930.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image4-120x73.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/image4.png 1792w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;Figures above are for illustrative purposes only.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We hope XCMetrics will inspire and help other teams keep track of their build metrics and improve their developer experience.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You can learn more and watch a demo at &lt;a href=&#34;https://xcmetrics.io&#34;&gt;XCMetrics.io&lt;/a&gt;. We are happy to receive bug fixes and improvements on &lt;a href=&#34;https://github.com/spotify/XCMetrics/&#34;&gt;GitHub&lt;/a&gt;. And make sure to check out our &lt;a href=&#34;https://github.com/spotify/XCMetrics/blob/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;, which explains more advanced concepts of the project.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Xcode is a trademark of Apple Inc., registered in the U.S. and other countries.&lt;/em&gt;&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2021/01/20/introducing-xcmetrics-our-all-in-one-tool-for-tracking-xcode-build-metrics/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2021/01/xcmetrics-open-source-xcode-tool-1.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">TL;DR We just open sourced XCMetrics — a tool for Apple’s developer software, Xcode, that lets you collect, display, and track the valuable metrics hiding inside your team’s Xcode build logs. Are your build times improving or regressing? Which version of Xcode is slowest? Which hardware setup is fas</summary>
    <author>
      <name>Published by Patrick Balestra, Sr. Engineer</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            How We Built It: Spotify Lite, One Year Later&#xA;</title>
    <updated>2020-12-03T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2020-12-03:/2020/12/03/how-we-built-it-spotify-lite-one-year-later/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;December 3, 2020&lt;/span&gt;&#xA;                &lt;span&gt;&#xA;                    Published by Erik Ghonyan (Senior Engineer), Slava Savitskiy (Senior Engineer), and Tommy Tynjä (Engineering Manager)                &lt;/span&gt;&#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2020/12/03/how-we-built-it-spotify-lite-one-year-later/&#34; title=&#34;How We Built It: Spotify Lite, One Year Later&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_B.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_B.png 2105w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_B-250x126.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_B-700x352.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_B-768x386.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_B-1536x772.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_B-2048x1029.png 2048w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_B-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2020/12/Spotify-Lite_B.png&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;What if, for some users, the very best Spotify is a little less Spotify? Spotify Lite started as an experiment that had to be proven, both from a technical and a product-market fit perspective. In 2017, we found that a significant portion of registrations in some of our fastest-growing markets were happening on Android devices much older than what we were used to seeing in North American and European markets. Because of storage constraints, many of our potential users couldn’t install Spotify, and the ones that could weren’t getting the full “Spotify experience”.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our mission was clear: we needed to make Spotify accessible to users with constrained resources, i.e., unreliable networks or phones with limited storage, memory, and low-resolution screens. Now we needed a team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;A flexible, Lite team&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The main Spotify Music Android client is divided into multiple features, all owned by separate teams. But for Spotify Lite, we formed a single, autonomous team to fully own the entire process of designing, developing, and releasing the app. This allowed us to roll out an MVP product in record time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Before building the new app, the Spotify Lite team — a cross-functional mix of insights, design, product, and engineering — travelled to a number of locations where Lite would be available in order to experience the network and device constraints firsthand. It was absolutely critical to design Spotify Lite with our users in mind, and to experiment and iterate on the streaming experience for cases when devices have poor connectivity or are completely offline. Only then were we able to come up with an optimal, performant solution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It should be noted that we wouldn’t have achieved success had it not been for the existing tooling that we were able to reuse — tools for enabling recommendations, playback, search, browsing, and instrumentation. We were building on all the work, experience, and knowledge that came before us, giving us the ability to focus on finding solutions for our users.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Spotify Lite: Spotify’s first separate app&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Creating a more performant and smaller version of the Spotify app proved to be more challenging than we liked, as the codebase hadn’t been modularized. With these challenges in mind, we decided to build a new separate app from scratch, giving us the ability to quickly iterate, obtain feedback, and innovate freely.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify Lite was initially built on an entirely different playback stack than the regular Android app. This allowed Lite to be as small as possible, with minimal memory and network data usage. Having a separate app enabled us to test new performance ideas and to gain insights, such as understanding how application size impacts the new user funnel. We no longer use the initial playback stack, and have evolved towards a tailored setup that guarantees stability and playback quality on unreliable networks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Building Lite was a lot like packing a backpack for your travels. With limited space, you have to be selective in what you bring. Only the most crucial and necessary components were carried forward.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;A balancing act&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Shrinking the original Spotify app to create Spotify Lite brought up two crucial questions: What key elements of the original Spotify should remain intact to ensure listeners still get the “Spotify experience”? And what sacrifices do we need to make to ensure Spotify Lite does, in fact, remain light? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In answering the first question, we knew that keeping the brand look and feel was absolutely critical to giving listeners a Spotify they could recognize. So, we used the same design philosophy as the original Spotify Android app. However, given a range of constraints (smaller screens, quick/performant interactions), we had to adapt some of our design choices. For example, information density has to be reviewed with smaller screen sizes and lower resolutions in mind, as well as whether information is still readable on a broken or scratched screen (these phones have been around for a while!). We’ve recently added our heuristics for how to design for these constraints to the overall design strategy so that this is kept in mind for other apps and surfaces, as well.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;444&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_Iphone-Mockups-01-700x444.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_Iphone-Mockups-01-700x444.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_Iphone-Mockups-01-250x159.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_Iphone-Mockups-01-768x487.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_Iphone-Mockups-01-1536x975.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_Iphone-Mockups-01-2048x1300.png 2048w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_Iphone-Mockups-01-120x76.png 120w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Along with streamlining the design, we also had to shrink things down under the hood. The team put a lot of work into implementing all the known techniques for binary size reduction, as well as making tradeoffs when selecting features. As the app includes a native shared library for playback, we have experimented with many compiler and linker flags to prioritize a small app size. This includes, for instance, switching to the &lt;em&gt;lld&lt;/em&gt; linker, employing link time code optimizations, and disabling certain language features like RTTI. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On the Android side, it was the use of App Bundles for application publishing, optimizing our R8 shrinking, carefully choosing dependency libraries, and stripping unused translations. We made an effort to reduce the install size, too. We store the shared library unpacked in the APK without copying it to the install folder, and allow users to store both the app and its cache and downloads separately on the SD card.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After the initial larger gains, it became harder and harder to reduce the app size. It was a constant balance between keeping it small while adding additional requested features. Along with monitoring the app download and install sizes in the Google Play Store, we added checks to our continuous delivery pipelines to prevent size bloat.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Lite is different&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Because Lite was a brand-new concept, some of our work went beyond the app itself, leading to improvements to Spotify systems that other teams could benefit from, too.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Before Lite, developers could safely assume there was only one Spotify app for any given platform — the Android platform and the Android app were considered one and the same. Backend services — including those providing application views and deciding which features are enabled — were built with that assumption in mind. Some of these assumptions cascaded through many different parts of our internal systems. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we added Lite to the mix, developers needed to know exactly which app a user was using, not just what platform they were on. We generalized that issue beyond our own app and built ways to identify all the apps in the Spotify ecosystem. That work paid off again each time anyone introduced a new Spotify app to the Android platform, including our sister apps &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.spotify.com/us/kids/?utm_source=us-en_brand_contextual_text&amp;amp;utm_medium=paidsearch&amp;amp;utm_campaign=alwayson_ucanz_us_premiumbusiness_kids_brand+contextual-desktop+text+exact+us-en+google&amp;amp;gclid=CjwKCAiA8Jf-BRB-EiwAWDtEGnamKsxw1Yx_w3KgzFDyJ1g4NKVvIUkc9jRA8fBFdlHCkR8pD4iHmBoCMLAQAvD_BwE&amp;amp;gclsrc=aw.ds&#34; target=&#34;_blank&#34;&gt;Spotify Kids&lt;/a&gt;, &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://www.spotify.com/us/stations/&#34; target=&#34;_blank&#34;&gt;Spotify Stations&lt;/a&gt;, and &lt;a href=&#34;https://spotify-everywhere.com/collections/car-audio/products/polestar&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Android Automotive&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We also had to redesign parts of Spotify’s playback library with Lite constraints in mind — taking into account smaller download and installation sizes, memory usage, and the reduced feature set. Similar considerations have been applied to Spotify’s music and image transcoding services.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Making Lite a big deal&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our ambition is to be the best-in-class Lite app. We are constantly modifying and updating the app to adapt to our users and their ever-evolving needs. As we’ve seen positive adoption of Spotify Lite since launch, we’ve invested in performance improvements, quality, and resilience. We recently rolled out an overhaul of our client architecture to cater to our growing user base and to reduce playback latencies.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The birth of Spotify Lite has given us flexible solutions that our other apps have benefited from. One such example is our backend service that scales down images to use less network traffic. Another is the support for App Bundles, which has allowed us to reduce the app size significantly so that users only download the assets needed for their particular device. Creating a separate app was a first for our build system — one that laid the groundwork for building native dependencies, sharing code components, and setting up crash and ANR reporting for tracking app quality.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are continuing our work to lower the barrier for people to access Spotify. We have our backlog full of ideas and performance improvements we want to keep investing in, not only for Lite but also for our other apps to benefit from.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2020/12/03/how-we-built-it-spotify-lite-one-year-later/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2020/12/Spotify-Lite_B.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">What if, for some users, the very best Spotify is a little less Spotify? Spotify Lite started as an experiment that had to be proven, both from a technical and a product-market fit perspective. In 2017, we found that a significant portion of registrations in some of our fastest-growing markets were</summary>
  </entry>
  <entry>
    <title>&#xA;                                            It’s All Just Wiggly Air: Building Infrastructure to Support Audio Research&#xA;</title>
    <updated>2020-11-04T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2020-11-04:/2020/11/04/its-all-just-wiggly-air-building-infrastructure-to-support-audio-research/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;November 4, 2020&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2020/11/04/its-all-just-wiggly-air-building-infrastructure-to-support-audio-research/&#34; title=&#34;It’s All Just Wiggly Air: Building Infrastructure to Support Audio Research&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Klio-Blog2.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2020/10/Klio-Blog2.gif&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;&lt;strong&gt;TL;DR &lt;/strong&gt;&lt;a href=&#34;https://venturebeat.com/2020/10/13/spotify-open-sources-klio-a-framework-for-ai-audio-research/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;We just open sourced Klio&lt;/a&gt; — our framework for building smarter data pipelines for audio and other media processing. Based on Python and Apache Beam, &lt;a href=&#34;https://klio.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Klio&lt;/a&gt; helps our teams process Spotify’s massive catalog of music and podcasts, faster and more efficiently. We think Klio’s &lt;a href=&#34;https://docs.klio.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ease of use&lt;/a&gt; — and its ability to let anyone leverage modern cloud infrastructure and tooling — has the potential to unlock new possibilities in media and ML research everywhere, from big tech companies to universities and libraries. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But now we’re getting ahead of ourselves. What exactly is Klio and what does it do? Let’s start with the problem of audio itself.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Audio is hard &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Really, sound is just wiggly air. At a basic level, every violin concerto, love song, dog bark, and knock-knock joke is the result of air compressing and vibrating, which we sense as it moves bones and hair in our ears. Sound is an invisible force that reaches us in ways that we can’t see, but can feel. And that’s what also makes audio so difficult for machines to parse: Humans can tell the difference between a swooning vocal, a danceable beat, and a buzzing bee. Can we teach machines to hear those differences, too? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Machine listening, the field of research focused on getting computers to understand audio, combines expertise and methods from signal processing, music information retrieval, and machine learning — so that all those vibrations in the air result in data that makes a bit more sense for an engineer to work with. When encoded, compressed, and stored on a computer, you’re left with ones and zeroes packed into relatively large binary files. At a glance, a guitar solo can look just like a yodel. So, how do we begin to make sense of it all? And at scale?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Klio_Blog-Images_10-22_01-Which-is-which-01-1.gif&#34; alt=&#34;&#34; width=&#34;580&#34; height=&#34;525&#34;/&gt;&lt;figcaption&gt;&lt;em&gt;One is a &lt;/em&gt;&lt;a href=&#34;https://open.spotify.com/show/71mvGXupfKcmO6jlmOJQTP?si=6vu_5jg7TUaxQmySGfzliA&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;popular podcast&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, one is &lt;/em&gt;&lt;a href=&#34;https://open.spotify.com/track/3Zb3SXZdtyNA0Cdq0DWLeC&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;acoustic guitar&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. It’s all just wiggly air. Software can help process the audio — identify voices, find beats per minute, analyze frequencies. But all at once? And 60+ million tracks at a time?&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;One problem multiplied 60 million times&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Processing massive amounts of large binary files: It was a problem that was only getting bigger at Spotify. We’re adding about 40,000 songs a day and are processing our music catalog — about 60 million songs — on a regular basis, with multiple teams around the world doing work at the same time. Besides the problem of engineering that kind of scale and parallelization, we also wanted a way to tie the processing jobs more closely with the work our audio and ML research teams were doing.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We were already building sophisticated data pipelines that supported AI and ML jobs using &lt;a href=&#34;https://spotify.github.io/scio&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Scio&lt;/a&gt;, a precursor to Klio. Scio proved to be a flexible, scalable framework that any team could use to &lt;a href=&#34;https://engineering.atspotify.com/tag/scio/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;build smarter data pipelines at scale&lt;/a&gt;. By tying together large database queries, map-filter-reduce operations, natural language processing, and ML models, teams could create better, more personalized playlists, like Discover Weekly, Release Radar, and dozens of others. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, Scio created a platform for processing massive amounts of data about the audio. But what about processing the audio itself? &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;A uniquely Spotify problem, a uniquely Spotify solution&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While processing metadata for the libraries of 299+ million users is impressive, it’s not the same as processing the content itself — those tens of millions of binary audio files that Spotify hosts and serves all over the world. On top of that, Java-based languages weren’t interfacing well with our Python-based research tools for audio and ML.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We knew that if we could build data pipelines that supported large-scale audio processing, there were untold features and personalizations waiting to be unlocked. We just needed a framework that supported it — and that worked as well with our research tools as our engineering tools. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In 2019, an ad hoc team of data engineers, ML researchers, and audio experts outlined the requirements for creating a framework designed especially for processing media. Scio was a model of success, but still just a starting point. This new framework would need to support:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Large-file input/output: &lt;/strong&gt;We wanted to transform audio, videos, images — all kinds of heavy-duty binary media files — in dozens of ways, with both streaming and batch processing.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Scalability, reproducibility, efficiency: &lt;/strong&gt;When you’re working with a dataset as large as the world’s music, as well as a burgeoning ecosystem of podcasts, you don’t want to have to redo your work over and over again.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Closer collaboration between researchers and engineers:&lt;/strong&gt; This translated into support for both Python (the lingua franca of both audio processing and ML) as well as non-Python dependencies (e.g., libsndfile, ffmpeg, etc.).&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In short, we needed a framework that could production-ize audio processing. This wasn’t just about creating data pipelines for media. It was about doing it at Spotify scale and with support for the latest audio and ML research. Let’s dig into that last requirement first.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Researchers, engineers, and Python: The importance of speaking a common language&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Around this time, we noticed that both our researchers and engineers were beginning to get a little tired of the roadblocks preventing their audio work from getting adopted. Audio researchers were making promising breakthroughs, but the cost of getting new approaches integrated into shipping products was becoming increasingly high. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As much as their counterparts in data and ML engineering wanted to help, those engineers were spending much of their time looking after several distinct, bespoke systems for production audio processing, all built and customized for individual teams. In other words, we had smart people all over the company working on audio, but our &lt;a href=&#34;https://research.atspotify.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;world-class researchers&lt;/a&gt; and engineers couldn’t work together, until most of the research was rewritten by the engineers. And even then, all that work and effort was siloed.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The solution was simple: Python. It’s the native language of research and well-suited for the engineering problems at hand. Most importantly, allowing everyone to speak without a translation layer puts everyone in a position to focus on what they excel at. Audio and ML researchers get to focus on experimentation and building cutting-edge research tools. Engineers get to focus on building clean, reliable code.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;What is Klio?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;2409&#34; height=&#34;1868&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Klio_Blog-Images_10-22_02-What-is-02-B.gif&#34; alt=&#34;&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Klio is a framework for building smarter data pipelines for audio and other binary files, enabling you to production-ize media processing at scale.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Streamlined Apache Beam&lt;/strong&gt; for a more ergonomic, Python-native experience for researchers and engineers&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Open graph of job dependencies&lt;/strong&gt; with support for top-down and bottom-up executions&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Integration with cloud processing engines&lt;/strong&gt; for managed resources and autoscaling production pipelines&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Containerization of custom dependencies&lt;/strong&gt; for simplified development and easily  reproducible deployment&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Batch and streaming pipelines&lt;/strong&gt; for continuous processing&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Apache Beam under the hood, Klio in the driver’s seat&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s no surprise then that Klio is built on top of &lt;a href=&#34;https://beam.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Apache Beam&lt;/a&gt; for Python, while also aiming to be a more Pythonic experience of Beam. Additionally, Klio offers several advantages over traditional Python Beam for media processing — providing a substantial reduction in boilerplate code (an average of 60%), a focus on heavy file I/O, and standards for connecting multiple streaming jobs together in a jobs dependency graph (with top-down and bottom-up execution). This allows teams to immediately focus on writing new pipelines, with the knowledge that they can easily be extended and connected later. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This ease of use and streamlining of Apache Beam means we can get our state-of-the-art audio research into people’s hands and ears, faster. And while Klio offers this more opinionated way to use Apache Beam for common media processing use cases by default, it also allows the use of core Python Beam at any time if Klio’s opinions don’t fit your use case.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Efficiency, &lt;s&gt;efficiency,&lt;/s&gt; &lt;s&gt;efficiency&lt;/s&gt; (DRY: Don’t Repeat Yourself)&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When we were developing Klio, we decided to test it by downsampling every track in Spotify’s 60-million song catalog — amounting to well over 100 million audio files in all (including multiple releases of the same song). Downsampling is often the first step of audio analysis, so it’s a great benchmark of what real-world performance might look like. Previously, the fastest we had accomplished this at Spotify was about three or four weeks. With Klio, we did it in six days, and reduced costs by four times. When you think about the number of songs in our catalog, and our quickly growing podcast library, Klio can have a tremendous impact on our teams and our business.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Klio_Blog-Images_10-22_03-Before-After-01-2-700x409.png&#34; alt=&#34;&#34; width=&#34;580&#34; height=&#34;338&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Klio_Blog-Images_10-22_03-Before-After-01-2-700x409.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Klio_Blog-Images_10-22_03-Before-After-01-2-250x146.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Klio_Blog-Images_10-22_03-Before-After-01-2-768x449.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Klio_Blog-Images_10-22_03-Before-After-01-2-1536x898.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Klio_Blog-Images_10-22_03-Before-After-01-2-2048x1197.png 2048w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Klio_Blog-Images_10-22_03-Before-After-01-2-120x70.png 120w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34;/&gt;&lt;figcaption&gt;&lt;em&gt;With Klio’s streamlined framework, pipelines are more efficient and reliable. We can do in days what took weeks. And since jobs don’t have to be repeated (missing dependencies can be recursively created), you don’t have to run files through the whole pipeline again just to apply one more transformation at the end. &lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You’ll find these kinds of optimizations throughout Klio’s implementation. Klio pipelines improve processing time and costs by avoiding duplicate work on already processed audio. And the framework is opinionated — encouraging engineers and researchers to write a pipeline focused on one thing, like finding the timestamps of all the beats to a song or measuring a song’s loudness. By creating reusable building blocks, Klio allows for researchers to build more easily on top of previous research and create graphs of pipelines, leading to features like infinite playlists optimized for your current mood, internal tools that help automate the review of new content, and powerful data that personalizes the Spotify experience for each user.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Scale, reproducibility, and clouds. No infra team required.&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Klio can be run locally, but it really shines in the cloud — and is ready-made for it. In order to achieve the large-scale processing and reproducibility that we require at Spotify, Klio leverages the best parts of modern cloud infrastructures (like managed resources to autoscale production pipelines) and tooling (like containerization for easier deployments).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Klio was designed to be cloud agnostic, and the underlying Apache Beam project is designed to run workloads across any data workflow engine. Right now, it’s configured to work with Google Cloud Platform, but we welcome &lt;a href=&#34;https://docs.klio.io/en/latest/contributors.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;contributions&lt;/a&gt; to help get Klio running on AWS, Azure, or another infrastructure. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;One thing to note: Current limitations to Beam Python prevent all of its features from being used on every engine, but we expect increased compatibility with Apache Flink and Apache Spark as Apache Beam extends its underlying compatibility with these engines. Preliminary work has also been done testing Klio on Amazon AWS and S3 using Klio’s Direct Runner.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We think this cloud integration (infrastructure as a service) can unlock production bottlenecks, as well as encourage experimentation. Engineering teams can rely on Klio to standardize media processing — using data processing and monitoring tools they’re already familiar with — rather than creating architectures from the ground up. Klio’s ability to autoscale production pipelines to handle variable workloads lets engineers focus on the next thing, rather than constantly tuning workloads.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;From Sing Along to dolphin songs: Open and the great unknown&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Klio began as a proof of concept a little less than two years ago. It was invented out of necessity — to overcome challenges we were facing internally. But even from the very beginning, it was built with the intention of being free and open source software. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we’ve seen with &lt;a href=&#34;https://backstage.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt;, our open platform for building developer portals, &lt;a href=&#34;https://engineering.atspotify.com/2020/09/24/cloud-native-computing-foundation-accepts-backstage-as-a-sandbox-project/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Spotify is committed to open source and developer experience&lt;/a&gt;. We want to make the lives of engineers easier, so they can focus on building amazing things. So we’re excited to see not only how Klio can help others and advance audio/media research, but also what we can learn from others’ contributions and how Klio can evolve as a result. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Before and after Klio, Spotify has been doing this kind of large-scale audio analysis for nearly a decade, extracting and transforming tracks in our catalog on a weekly, daily, and streaming basis. Audio analysis algorithms power our &lt;a href=&#34;https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Audio Features API&lt;/a&gt; for fingerprinting songs by their unique attributes (illustrated in this interactive &lt;a href=&#34;https://www.nytimes.com/interactive/2018/08/09/opinion/do-songs-of-the-summer-sound-the-same.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;New York Times&lt;/a&gt; article), in-house tools, like our automated content review screener; and market-specific features, like our Sing Along feature in Japan — which &lt;a href=&#34;https://research.atspotify.com/making-sense-of-music-by-extracting-and-analyzing-individual-instruments-in-a-song/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;separates the vocals from the instruments&lt;/a&gt; as songs are uploaded to the catalog to create interactive versions that people can sing along with.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But as we saw when we open sourced Backstage, the open source community will come up with use cases we never dreamed of. And since Klio enables anyone to do this kind of heavy-duty media processing at scale (not just big tech companies), we’re particularly curious to see what academics and research institutions will build with it. (&lt;a href=&#34;https://twitter.com/tomncooper/status/1316071741131759617&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Dolphin speech, anyone&lt;/a&gt;?)&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, thank you to the Klio team and to everyone who’s ever used Klio or contributed to its development over the years (including its sibling framework, Scio). And thank you to all those reading this right now and who will contribute to its development in the future. It’s a product that only Spotify could have built. But we’re even more proud now that it’s out there for the world to share. Now let’s &lt;a href=&#34;https://docs.klio.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;get started&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2020/11/04/its-all-just-wiggly-air-building-infrastructure-to-support-audio-research/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Klio-Blog2.gif" rel="enclosure" type="image/gif" length="0"></link>
    <summary type="html">TL;DR We just open sourced Klio — our framework for building smarter data pipelines for audio and other media processing. Based on Python and Apache Beam, Klio helps our teams process Spotify’s massive catalog of music and podcasts, faster and more efficiently. We think Klio’s ease of use — and its</summary>
    <author>
      <name>Published by David Riordan and Lynn Root</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Spotify’s New Experimentation Platform (Part 2)&#xA;</title>
    <updated>2020-11-02T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2020-11-02:/2020/11/02/spotifys-new-experimentation-platform-part-2/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;November 2, 2020&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2020/11/02/spotifys-new-experimentation-platform-part-2/&#34; title=&#34;Spotify’s New Experimentation Platform (Part 2)&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation-Platform_Part-II_A.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation-Platform_Part-II_A.png 2105w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation-Platform_Part-II_A-250x126.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation-Platform_Part-II_A-700x352.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation-Platform_Part-II_A-768x386.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation-Platform_Part-II_A-1536x772.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation-Platform_Part-II_A-2048x1029.png 2048w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation-Platform_Part-II_A-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2020/11/Experimentation-Platform_Part-II_A.png&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;So you’ve read &lt;a href=&#34;https://engineering.atspotify.com/2020/10/29/spotifys-new-experimentation-platform-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Part I&lt;/a&gt; of our two-part series about the new Experimentation Platform we’ve built at Spotify, and now know why we decided to invest in a new platform. In Part II, you’ll get a more detailed look at how we assigned users to experiments, how we analyze results and ensure test integrity. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Coordination, holdbacks, and exclusivity&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A lot of the experiments we run change some small aspect of the user experience in one of our prime surfaces and it’s important for teams to be aware of what other experiments are running at the same time, as well as what other experiments are running in their field of interest.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To accommodate for this, we allow experiments to be put into a “domain”. Domains roughly map different surfaces or systems in our service. Each domain has a timeline that shows what experiments have been running and what’s upcoming.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;486&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_1-700x486.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_1-700x486.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_1-250x174.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_1-768x533.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_1-1536x1067.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_1-120x83.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_1.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;For illustrative purposes only.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When a lot of teams experiment in the same proximity, there’s risk of interaction effects. For this reason many experiments need to run in an exclusive manner, where a user can only be in one of a set of experiments that can potentially impact each other. Currently only experiments in a single domain can be exclusive to each other. We’re planning to decouple exclusivity from the domain concept, to allow for experiments across domains to also be exclusive to each other. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We implement holdbacks (the practice of exempting a set of users from experiments and new features, in order to see long-term effects and combined evaluation) in domains. Each domain can have a set of holdbacks. Users in these holdbacks are exempt from the general experimentation that happens in the domain. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify we have established a pattern where at the start of a quarter, we create a new holdback. Experiments that run throughout the quarter will never be assigned to any of those users subject to the holdback. When the quarter ends, a single test is run on these users where the combined experience of all (successful) experiments is given to the treatment group. This way we can get a read for the compound effect of everything the team decided to ship during the quarter. Once this test is done, the holdback is released and these users will go into new experiments. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The Salt Machine&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify, autonomous are teams free to move at schedules that fit them best. This means that they need to be able to start and stop experiments at any time. With requirements of exclusivity and holdbacks, assigning users to experiments gets quite complex if we do not want to compromise on randomization (and we do not want to).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have developed something we call the “salt machine” that automatically reshuffles users without the need to stop all experiments. This is done by hashing users into buckets using a tree of “salts” (it’s worth noting that if two experiments are disjoint because of targeting, we do not have to use the same salt tree for them).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For this article, imagine that we split users into 8 buckets:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;126&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_2-700x126.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_2-700x126.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_2-250x45.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_2-768x138.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_2-1536x276.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_2-120x22.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_2.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A user ends up in bucket 1 if HASH(user id, SALT) % 8 = 1 and so forth. We allocate buckets to experiments. In the image below, experiment E1 has been allocated buckets 0 and 1. Note that we also have a per-experiment salt to spread users from the allocated buckets over treatments, but for simplicity we omit that from the images in this article. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;146&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_3-700x146.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_3-700x146.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_3-250x52.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_3-768x160.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_3-1536x320.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_3-120x25.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_3.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since we’re experimenting a lot, most buckets are always allocated to an experiment. So what happens when two experiments (E1and E1) end, releasing some space that can be allocated to a new experiment?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;289&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_4-700x289.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_4-700x289.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_4-250x103.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_4-768x317.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_4-1536x635.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_4-120x50.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_4.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now 50% of the buckets are free and we want to start E4 that needs 25% of the population.  How can we allocate buckets safely without jeopardizing randomization? If we were to pick only bucket 0 and 1 we would have a 100% overlap with experiment E1 that just ended, which might lead to biased results due to carryover effects. Not good.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;122&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_6-700x122.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_6-700x122.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_6-250x43.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_6-768x133.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_6-1536x267.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_6-120x21.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_6.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;What if we shuffled the free users into new buckets using a new salt?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;279&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_7-700x279.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_7-700x279.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_7-250x100.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_7-768x306.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_7-1536x612.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_7-120x48.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_7.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now we have eight free buckets we can use for experiments. But because of the dilution of bucket size (those new eight buckets only get 50% of the traffic), we need to allocate four of them to E4 to get 25% of the population. We call the amount of required overallocation of buckets the “compensation factor” — and in this case it’s 1/.50 = 2. The remaining four buckets can be allocated to some other experiment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_8-700x302.png&#34; alt=&#34;&#34; width=&#34;579&#34; height=&#34;250&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_8-700x302.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_8-250x108.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_8-768x332.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_8-1536x663.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_8-120x52.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_8.png 1600w&#34; sizes=&#34;(max-width: 579px) 100vw, 579px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When experiment E3 ends we can completely get rid of salt 1 — but because we diluted the buckets the released space cannot be used until E4 finishes. In effect, we’re wasting 50% of the users. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The compensation factor changes all the time as experiments start and end. Over time we have learned that it’s good practice to not start new experiments if the compensation factor is higher than 5 (the higher the compensation factor, the more space is being wasted).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’re currently working on the second iteration of our allocation scheme where we believe we waste less space but still maintain the benefits of randomization.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Analysis&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To conduct a well-designed experiment we need to decide up front what we want to measure and test. The Experiment Planner asks that all necessary information be specified when an experiment is created.  A metric can have one of two roles in an experiment:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Success metrics to find evidence for the hypothesis.&lt;/li&gt;&lt;li&gt;Guardrail metrics to find evidence that the experiment is not introducing any harmful side effects. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For each success metric it is possible to choose either a one- or two-sided statistical test. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;417&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_9-700x417.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_9-700x417.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_9-250x149.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_9-768x457.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_9-1536x914.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_9-120x71.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_9.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For success metrics, we perform superiority tests and require a relative minimum detectable effect (MDE) to be specified. This is used in power calculations in the result analysis and also in the sample size calculator. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For guardrails, we perform a non-inferiority test where a non-inferiority margin has to be specified so we know when a change is considered non-inferior or not. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;243&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_10-700x243.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_10-700x243.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_10-250x87.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_10-768x266.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_10-1536x533.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_10-120x42.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_10.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If the experimenter wants to see results as the experiment is running, they need to choose sequential testing. If they decide to do a fixed horizon test, the results will only be available once the experiment is stopped. Regardless, to minimize weekday biases we recommend that tests are always run for the planned period and are only stopped early if harmful side effects are detected. We also have an optional (but highly recommended) gradual ramp-up assignment of the experiment over a time period to further minimize possible weekday effects. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With a potentially large number of metrics, targeting, different statistical tests, and many treatment groups, it’s not always easy to calculate an accurate required sample size. For this reason we’ve built a sample size calculator and put it into the platform (it’s optional to use for fixed horizon tests, but required for sequential testing).  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;266&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_11-700x266.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_11-700x266.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_11-250x95.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_11-768x291.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_11-1536x583.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_11-120x46.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation_11.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As can be seen above (numbers redacted), the sample size calculator shows how many users are needed to power the metric for the specified target population. The calculator automatically queries historical data for the specified target population to proxy the control group average and variance needed for the calculations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Validity checks&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Many things can go wrong when we run an experiment, and even subtle issues can have a big impact on the result. For this reason we’re continuously monitoring all running experiments for potential problems. If a problem is detected, we notify the owning team so that they can decide what to do.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have the following checks in place:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Sample ratio mismatch:&lt;/strong&gt; We make sure that the targeted proportion between the treatment groups align with exposure. If we see a statistically significant difference, we sound the alarm.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Pre-exposure activity: &lt;/strong&gt;We see if there’s any difference in activity between the groups prior to the experiment starting. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Increases in crashes:&lt;/strong&gt; We ensure that we do not see an increase in client crashes.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Property collisions:&lt;/strong&gt; If two experiments use the same Remote Configuration properties (and are not exclusive to each other), we will warn that the experiments might not get the exposure that was expected. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For checks that require a statistical test, we deploy sequential testing and correct for multiple comparisons. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Rollouts&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A use case supported by the Experimentation Platform, in addition to experimentation, is gradual rollouts. Once we learn that our change improves the user experience, we want to ship it, and with gradual rollouts we can do that while protecting against unexpected regressions. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There are two ways of doing rollouts: with or without statistical testing. If we select the latter, we will be able to select a set of guardrail metrics and deploy sequential testing so we can continuously monitor the progress. Every day we also provide one of three recommendations to the owning team:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We cannot detect any harmful effects, so the recommendation is to continue the rollout.&lt;/li&gt;&lt;li&gt;We have statistical evidence of harmful effects, so we recommend aborting the rollout.&lt;/li&gt;&lt;li&gt;We do not know yet, and we recommend continuing with caution or wait until we have more data.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The ability to get metrics for rollouts is fairly new so we’re still iterating on it, but we plan to make it the default option going forward.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Summary&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have spent the last two years rebuilding our experimentation capabilities at Spotify. The new platform is a step change in ease of use and capabilities, but we still feel it’s early for experimentation at Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are constantly evolving our Experimentation Platform and practices. If you would like to know more, or if you’re interested in joining the team and contribute to our journey, do not hesitate to reach out.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Johan Rydberg, &lt;a href=&#34;mailto:jrydberg@spotify.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;jrydberg@spotify.com&lt;/a&gt; / @datamishap&lt;br/&gt;Experimentation Lead&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2020/11/02/spotifys-new-experimentation-platform-part-2/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2020/11/Experimentation-Platform_Part-II_A.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">So you’ve read Part I of our two-part series about the new Experimentation Platform we’ve built at Spotify, and now know why we decided to invest in a new platform. In Part II, you’ll get a more detailed look at how we assigned users to experiments, how we analyze results and ensure test integrity.</summary>
    <author>
      <name>Published by Johan Rydberg</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Spotify’s New Experimentation Platform (Part 1)&#xA;</title>
    <updated>2020-10-29T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2020-10-29:/2020/10/29/spotifys-new-experimentation-platform-part-1/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;October 29, 2020&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2020/10/29/spotifys-new-experimentation-platform-part-1/&#34; title=&#34;Spotify’s New Experimentation Platform (Part 1)&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-Platform_01.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-Platform_01.png 4209w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-Platform_01-250x126.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-Platform_01-700x352.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-Platform_01-768x386.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-Platform_01-1536x772.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-Platform_01-2048x1029.png 2048w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-Platform_01-120x60.png 120w&#34; sizes=&#34;(max-width: 4209px) 100vw, 4209px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2020/10/Experimentation-Platform_01.png&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;At Spotify we try to be as scientific as possible about how we build our products. Teams generate hypotheses that we test by running experiments — normally in the form of an A/B test — to learn what works and what doesn’t. The learnings give us insights and fuel new product ideas.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Want to know why Spotify decided to build a new Experimentation Platform and how it works? In this two-part series, we’ll share what led us to throw out our old A/B testing platform (called ABBA) and details around the new architecture we’ve chosen to substitute it.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Early days&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Today almost all product decisions are made with some input from one or more A/B tests. But it hasn’t always been like that. Back when Spotify was a small startup in Sweden, a team, simply called Analytics, played around with various kinds of tests. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Over time, interest in A/B testing grew, and in 2013 we decided to spin up a team to take on building a more robust system. Thus was born &lt;a href=&#34;https://open.spotify.com/track/2PzCOP5Aj9SABiBgNEZ52G&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ABBA&lt;/a&gt;, an A/B testing system that allowed us to (more) easily run experiments. Now we had a place to see what A/B tests were actually running, and a pipeline that computed results. The introduction of the system was a step change in productivity, and over time it was integrated into pretty much every aspect of Spotify — in our desktop clients and mobile clients, backend services and data pipelines, in-app messaging, and email campaigns. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;ABBA as a system was quite simple. Each experiment (or rollout) mapped one to one to a feature flag, named after the experiment. When a client fetched the value of the feature flag it got back the name of the treatment group — e.g., “Control” or “Enabled” or “Sort according to color” — anything the user decided to name the group. (Fun trivia: some users of ABBA started encoding more elaborate configurations as JSON in the group names. Life finds a way). Every time a feature flag value was resolved, an event was logged, which fed into the exposure and results pipelines. For each experiment, only a small number of metrics were calculated. Many of these metrics were not very sensitive, leading to almost all analysis being performed manually in notebooks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Why we decided to build a new system&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Around 2017, the system began to reveal its limitations. We had a few big projects that required a lot of experimentation, and the sentiment at the company was that the system needed to improve.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At a hack week in late 2017, a few senior engineers gathered to sketch out a new system, which aimed to address the following challenges (as well as some others):&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Reduce Time:&lt;/strong&gt; The 1-1 mapping between an experiment and the feature flag led to some interesting side effects. If there were a problem with the experiment (and often there were) and it needed to be restarted, we simply couldn’t just … restart it. A new experiment would have to be created, and the software would need to be updated to use the new feature flag. The new system would have to reduce the time it took to complete this cycle.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Produce less events&lt;/strong&gt;: The volume of events that were logged by the A/B testing system had over time grown to almost 25% of our total event volume. This drove up the cost of processing, and the volume of events caused incidents in the event delivery system.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Improved analysis:&lt;/strong&gt; The metrics that ABBA provided out of the box were no way near enough for our analysis needs, and our data scientists were getting tired of performing analyses in notebooks. It was time consuming, and we also didn’t have any consistency across the company when it came to how experiments were analyzed. The new system would have to allow us to add custom metrics and we needed a solid analysis methodology.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Sophisticated coordination:&lt;/strong&gt; Over time our needs for how we allocated users to experiments changed, which was done manually by coordinating bucket ranges between teams. This was of course error prone — if someone ended up using the wrong buckets a whole slew of experiments would be impacted; the new system would have to address this.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;The Experimentation Platform&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The new experimentation system, dubbed “The Experimentation Platform”, is composed of three parts:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Remote Configuration&lt;/strong&gt; – replaces our feature-flagging service. Instead of “flags”, its model is based on “properties” — a configurable aspect of one of our clients or backend services. An example of a property could be the color of our buttons, or the number of tracks in the top list. &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;&lt;strong&gt;Metrics Catalog&lt;/strong&gt; – a managed environment for running SQL pipelines to ingest metrics into a data warehouse, from where data can be served with sub-second latency to UIs and notebooks. &lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol start=&#34;3&#34;&gt;&lt;li&gt;&lt;strong&gt;Experiment Planner&lt;/strong&gt; – manages and orchestrates experiments. This is the part of the platform users interact with when they want to run an experiment.&lt;/li&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;505&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-1-700x505.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-1-700x505.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-1-250x180.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-1-768x554.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-1-1536x1109.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-1-120x87.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-1.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Remote Configuration&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Remote Configuration is a way to change the experience a user receives. This is done through controlling the values of a set of “properties” of the client. A property is a variable with a type (enum or integer) and a default value, and can represent the appearance or behavior of pretty much anything. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;525&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-2-700x525.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-2-700x525.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-2-250x188.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-2-768x576.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-2-1536x1153.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-2-120x90.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-2.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The example above shows an imaginary version of Spotify’s home page in our mobile apps. It’s made up of a set of shelves, and each shelf has a set of cards. With Remote Configuration properties we can control elements for any purpose, i.e. the number of shelves or font sizes on the home page for experiments, rollouts, or personalization or localization. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The properties are defined in a yaml file living next to the code that uses it. When the code is built, all properties and their default values are gathered and published via an API to the admin interface together with the ID of the client being built and the version number. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;351&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-3-700x351.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-3-700x351.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-3-250x125.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-3-768x385.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-3-120x60.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-3.png 1420w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The default value is critical. It allows us to have a programmatic understanding of what the end user experience will be if a client fails to fetch or apply property values. Also, we only have to transfer values to the client when they differ from the default, which saves a lot of time and data traffic when the client starts up. We know what defaults a client has since it identifies itself with the version number. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;234&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-4-700x234.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-4-700x234.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-4-250x84.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-4-768x257.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-4-1536x514.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-4-120x40.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-4.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The way different users get different values for properties is through a set of policies that is evaluated when a client requests the configuration. The policy has a set of filtering criteria and a property-value mapping to apply if the filters match. The actual implementation of the policy is a &lt;a href=&#34;https://facebook.github.io/planout/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;PlanOut&lt;/a&gt; script that the Remote Configuration service executes. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;An important side effect of the fetching of property values is that two events are being logged:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Config Assigned,&lt;/strong&gt; which lets us know that a user has fetched its values. Besides user information, this log message also identifies which policies were applied. This information is later used to determine which experiments a user was exposed to.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Config Applied,&lt;/strong&gt; which lets us know that the device has actually started using the property values. We use this event as the trigger event for exposure. &lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Property values are re-fetched in the background at regular intervals, but are only applied when the app is relaunched. The main reason for this is that we do not want the user experience to change mid-session. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Metrics Catalog&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Metrics Catalog is where we manage, store, and serve metrics to the Experimentation Platform. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;336&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-5-700x336.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-5-700x336.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-5-250x120.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-5-768x369.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-5-1536x737.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-5-120x58.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-5.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On a high level, raw metric data is fed into a pipeline where it’s joined with information on which experiment groups a user belongs to. This data is then aggregated into a OLAP cube and put into a data warehouse. In front of the data warehouse sits an API that allows other parties to query for information without knowing too much about the underlying storage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Exposure is assembled from the Config Assigned and Config Applied messages from Remote Configuration.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;292&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-6-700x292.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-6-700x292.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-6-250x104.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-6-768x320.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-6-1536x640.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-6-120x50.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-6.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A user is considered exposed to an experiment if the following is true:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We have a Config Assigned event that assigns the user to one of the groups in the experiment,&lt;p&gt;&lt;strong&gt;AND&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;We have a Config Applied event that tells us that the user started using the configuration of the experiment.&lt;p&gt;&lt;strong&gt;AND OPTIONALLY&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;The user exists in one specified “custom exposure source”.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The custom exposure sources allow us to define finer-grained exposure events, such as when a user visited a certain page in the mobile app.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Experiment Planner&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Experiment Planner sits as an orchestrating layer on top of Metrics Catalog and Remote Configuration. This is where we create, launch, and stop experiments, as well as analyze test results.&lt;br/&gt;The UI lives in &lt;a href=&#34;https://engineering.atspotify.com/2020/03/17/what-the-heck-is-backstage-anyway/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt;, our developer portal. All of our internal teams have access to our internal instance of Backstage and are free to create as many experiments as they like.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;404&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-7.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-7.png 512w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-7-250x197.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-7-120x95.png 120w&#34; sizes=&#34;(max-width: 512px) 100vw, 512px&#34;/&gt;&lt;figcaption&gt;For illustrative purposes only.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When creating an experiment, we have to define the test treatments, what experience users should get for each treatment (by specifying property values), and all the things that go into testing the hypothesis. Having programmatic understanding of available properties in Remote Configuration and their types helps this process and reduces configuration errors. It’s possible to define values for properties belonging to different systems in a single experiment. For example, if Android and iOS are implemented differently, we still can run a single experiment on both platforms.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Summary&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have spent the last two years rebuilding our experimentation capabilities at Spotify. The new platform is a step change in ease of use and capabilities, but we still feel it’s early for experimentation at Spotify.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are constantly evolving our Experimentation Platform and practices. If you would like to know more, or if you’re interested in joining the team and contribute to our journey, do not hesitate to reach out.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Johan Rydberg, Experimentation Lead&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a rel=&#34;noreferrer noopener&#34; href=&#34;mailto:jrydberg@spotify.com&#34; target=&#34;_blank&#34;&gt;jrydberg@spotify.com&lt;/a&gt; / &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://twitter.com/datamishap&#34; target=&#34;_blank&#34;&gt;@datamishap&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2020/10/29/spotifys-new-experimentation-platform-part-1/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2020/10/Experimentation-Platform_01.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">At Spotify we try to be as scientific as possible about how we build our products. Teams generate hypotheses that we test by running experiments — normally in the form of an A/B test — to learn what works and what doesn’t. The learnings give us insights and fuel new product ideas. Want to know wh</summary>
    <author>
      <name>Published by Johan Rydberg</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Managing Clouds from the Ground Up: Cost Engineering at Spotify&#xA;</title>
    <updated>2020-09-29T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2020-09-29:/2020/09/29/managing-clouds-from-the-ground-up-cost-engineering-at-spotify/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-3958&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;September 29, 2020&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2020/09/29/managing-clouds-from-the-ground-up-cost-engineering-at-spotify/&#34; title=&#34;Managing Clouds from the Ground Up: Cost Engineering at Spotify&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Engineering_01C-1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Engineering_01C-1.png 2105w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Engineering_01C-1-250x126.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Engineering_01C-1-700x352.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Engineering_01C-1-768x386.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Engineering_01C-1-1536x772.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Engineering_01C-1-2048x1029.png 2048w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Engineering_01C-1-120x60.png 120w&#34; sizes=&#34;(max-width: 2105px) 100vw, 2105px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2020/09/Cost-Engineering_01C-1.png&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;Like many of those in tech, we invest heavily in our cloud and data infrastructure. While seemingly routine, the ability to manage and scale our infrastructure to support our 299+ million listeners worldwide, 24/7, without missing a beat (or syllable) is crucial for the business and our brand. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On top of that, our infrastructure teams are resolute when it comes to upholding a highly valued cultural goal: enabling our autonomous engineering teams (called squads) to work as freely and quickly as they possibly can. Finish that off with the fact that we’re a growing public company, and we’ve created a challenging problem for our cost engineering team.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;493&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Big-Problem_Image-1-700x493.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Big-Problem_Image-1-700x493.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Big-Problem_Image-1-250x176.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Big-Problem_Image-1-768x541.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Big-Problem_Image-1-1536x1082.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Big-Problem_Image-1-120x85.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Big-Problem_Image-1.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Introducing Spotify’s Cost Insights tool&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Managing costs in our unique situation is no easy feat, but that certainly doesn’t stop us from innovating on the process. We’re leaving behind the days of reducing costs via top-down requests and moving on to finding fun and rewarding ways engineers can strengthen technology while improving the company’s bottom line. Our new &lt;a href=&#34;https://github.com/spotify/backstage/tree/master/plugins/cost-insights&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Cost Insights&lt;/a&gt; product in &lt;a href=&#34;https://backstage.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage.io&lt;/a&gt; explains cloud costs in a way our engineers can relate to and identifies optimizations that have resulted in some big wins for Spotify.  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; width=&#34;700&#34; height=&#34;460&#34; src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Insights-700x460.png&#34; alt=&#34;&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Insights-700x460.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Insights-250x164.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Insights-768x505.png 768w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Insights-1536x1010.png 1536w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Insights-120x79.png 120w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Insights.png 1600w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34;/&gt;&lt;figcaption&gt;&lt;em&gt;Figure above for illustrative purposes only.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ve found that our engineers see these optimizations as an interesting challenge — they improve cost, performance, and reliability, turning our infrastructure into a lean, green execution machine. The Cost Insights tool brings those optimization opportunities to light, so engineers can move quickly in achieving those wins. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Spotify’s unique take on cost management&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Many great cloud cost management tools are on the market, but we were looking for a way to better understand the relationship between a business’s cloud cost and its overall growth. Without broader context, it’s difficult to determine whether $10,000, for example, might be an appropriate amount to spend. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify, we believe showcasing cost and business data in a meaningful way will empower our engineers to understand where they are spending and optimize quickly. To encourage engineers to take action, their cloud cost tool should be located where other frequently used products and services are to increase productivity.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Growing the business while being cost conscious&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Spotify continues to be heavily focused on growth, allowing teams that may be high spending on cloud costs to continue to do so if it results in growth opportunities for the business. We needed a tool that showcases costs and helps engineers, engineering managers, and product managers to be information driven when deciding between growth initiatives and worthwhile cost optimizations. Cost Insights is a solution that allows for engineering teams to:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;Become aware of their cloud spend and how it relates to their business unit’s growth.&lt;/li&gt;&lt;li&gt;Understand how cost optimizations should be prioritized compared to the goals for business growth.&lt;/li&gt;&lt;li&gt;Receive clear recommendations on how they can optimize or reduce their spend.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Cost Insights features&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our goal was to launch the Cost Insights plugin with a strong foundation and a great potential for growth. The open source version includes three key features:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cost vs. business graph:&lt;/strong&gt; Users track how their team or a specific GCP project is trending compared to their company’s business growth.  &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Detailed product panels:&lt;/strong&gt; Cost Insights currently includes detailed information on six cloud products. The product panels currently cater to GCP but can be configured to utilize other cloud providers. These panels help users understand the cost of their products down to the resource level and compare their growth over time.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Project alerting:&lt;/strong&gt; Teams are alerted when project costs exceed a chosen threshold, allowing them to deep dive into cost changes at the resource level.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Preventing over-optimizations&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Developing a cost tool in a growth-focused, autonomous culture can have severe consequences if executed incorrectly. The Cost Insights product is accessible by any Spotifier, so it became essential to be explicit with teams when there is a cost increase to review. We’ve set several thresholds to capture how much a team is spending and to track their growth trends. Only teams that are growing faster than Spotify’s business will be nudged to investigate their spending. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3&gt;Upcoming on the roadmap&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Cost Insights allows teams to determine for themselves if the time invested in an optimization is valuable compared to the costs saved. Now that it’s available in open source with &lt;a href=&#34;http://backstage.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt;, our focus will shift to open sourcing the backend, creating detailed cost breakdowns (SKU level), and delivering alert dismissals that incorporate user feedback.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For more information about Cost Insights, reach out to Janisa Anandamohan at &lt;a href=&#34;mailto:janisa@spotify.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;janisa@spotify.com&lt;/a&gt;.&lt;/p&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2020/09/29/managing-clouds-from-the-ground-up-cost-engineering-at-spotify/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cost-Engineering_01C-1.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">Like many of those in tech, we invest heavily in our cloud and data infrastructure. While seemingly routine, the ability to manage and scale our infrastructure to support our 299+ million listeners worldwide, 24/7, without missing a beat (or syllable) is crucial for the business and our brand. O</summary>
    <author>
      <name>Published by Janisa Anandamohan</name>
    </author>
  </entry>
  <entry>
    <title>&#xA;                                            Cloud Native Computing Foundation Accepts Backstage as a Sandbox Project&#xA;</title>
    <updated>2020-09-24T00:00:00Z</updated>
    <id>tag:engineering.atspotify.com,2020-09-24:/2020/09/24/cloud-native-computing-foundation-accepts-backstage-as-a-sandbox-project/</id>
    <content type="html">&lt;div id=&#34;readability-page-1&#34; class=&#34;page&#34;&gt;&lt;section role=&#34;main&#34; id=&#34;main&#34;&gt;&#xA;&#xA;                        &#xA;&#xA;                &lt;article id=&#34;post-3947&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &#xA;        &#xA;&#xA;        &lt;div&gt;&#xA;            &lt;p&gt;&lt;img src=&#34;https://engineering.atspotify.com/wp-content/themes/theme-spotify/images/icon.png&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;September 24, 2020&lt;/span&gt;&#xA;                &#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;p&gt;&lt;a href=&#34;https://engineering.atspotify.com/2020/09/24/cloud-native-computing-foundation-accepts-backstage-as-a-sandbox-project/&#34; title=&#34;Cloud Native Computing Foundation Accepts Backstage as a Sandbox Project&#34;&gt;&#xA;                        &lt;img src=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cloud-native-computing-foundation-accepts-Backstage.png&#34; alt=&#34;Cloud Native Computing Foundation Accepts Backstage&#34; loading=&#34;lazy&#34; srcset=&#34;https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cloud-native-computing-foundation-accepts-Backstage.png 753w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cloud-native-computing-foundation-accepts-Backstage-250x121.png 250w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cloud-native-computing-foundation-accepts-Backstage-700x337.png 700w, https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cloud-native-computing-foundation-accepts-Backstage-120x58.png 120w&#34; sizes=&#34;(max-width: 753px) 100vw, 753px&#34; data-image-size=&#34;post-thumbnail&#34; data-stateless-media-bucket=&#34;rnd-atspotify&#34; data-stateless-media-name=&#34;sites/2/2020/09/Cloud-native-computing-foundation-accepts-Backstage.png&#34;/&gt;                    &lt;/a&gt;&#xA;                        &#xA;        &lt;/p&gt;&#xA;&#xA;        &#xA;&#xA;        &#xA;&lt;p&gt;If you hear faint whooping in the background of your playlists today, it’s just us celebrating a new milestone for Spotify’s open source efforts: &lt;a href=&#34;https://www.cncf.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;The Cloud Native Computing Foundation (CNCF)&lt;/a&gt; has accepted &lt;a href=&#34;https://backstage.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage&lt;/a&gt;, our open source developer portal, as an early stage project in the &lt;a href=&#34;https://www.cncf.io/sandbox-projects/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CNCF Sandbox&lt;/a&gt;. It’s just the first step in a longer journey with the CNCF, but it’s an important one for Spotify as it underlines our renewed commitment to open source — and developers everywhere.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Backstage + CNCF = 🎉&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For those of you unfamiliar with the CNCF, you may recognize them as the home of such hits as Google’s Kubernetes and Lyft’s Envoy. With such a strong foundation watching over our community’s efforts and such an impressive roster of projects leading the way before us, we have high hopes for the future of Backstage — one of our most ambitious open source projects to date.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You’ve heard us talk about Backstage before on this blog — back in March when we &lt;a href=&#34;https://engineering.atspotify.com/2020/03/17/what-the-heck-is-backstage-anyway/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;announced the open source project&lt;/a&gt; and later when we shared &lt;a href=&#34;https://engineering.atspotify.com/2020/04/21/how-we-use-backstage-at-spotify/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;how we use Backstage internally at Spotify&lt;/a&gt;. In a nutshell: Backstage is an open platform for building developer portals. Built around a centralized service catalog, it’s designed to streamline your development environment from end to end. We built it to improve the everyday experience and productivity of developers — initially, our own developers, and then when we open sourced it, all developers, everywhere.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Our commitment to improving developer experience&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At Spotify, Backstage enables us to scale safely and onboard quickly, helping us build and ship the product that hundreds of millions of people around the world use every day. We believe it has the potential to transform how all engineers work together, whether they’re in a 50-person startup or a Fortune 50. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Here’s what Backstage can do for companies and tech organizations, and how it improves developer experience:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Restore order to software ecosystems.&lt;/strong&gt; For companies whose infrastructure has become a wilderness of competing technologies and orphaned dependencies hiding in the dark corners of their tech stack, the &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://backstage.io/blog/2020/06/22/backstage-service-catalog-alpha&#34; target=&#34;_blank&#34;&gt;Backstage Service Catalog&lt;/a&gt; brings back discoverability, accountability, and control — not to mention sanity. Instead of being overwhelmed by fragmentation and information sprawl, the Backstage Service Catalog creates a centralized system for tracking all your software — making it easy for teams to manage 10 services and making it possible for a company to manage thousands of them.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Jumpstart productivity by standardizing software and tooling.&lt;/strong&gt; With software templates, engineers can spin up a new software project in minutes instead of hours. &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://backstage.io/blog/2020/08/05/announcing-backstage-software-templates&#34; target=&#34;_blank&#34;&gt;Backstage Software Templates&lt;/a&gt; are like automated getting started guides. After an engineer chooses a template, Backstage takes care of the rest — automatically setting up the repo, deploying the first build, and providing a Hello World project, all ready to go — with your organization’s best practices built right in, right from the start. By reducing the number of low-variance choices a developer is forced to consider when starting a project, templates remove friction and allow developers to spend more cycles solving problems higher up in the stack. Standards can set engineers free.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Get unstuck with great technical documentation made easy. &lt;/strong&gt;No one can ever find documentation when they need it — and if they do, it might not be that helpful because it hasn’t been kept up to date. Backstage solves both ends of the problem. With &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://backstage.io/blog/2020/09/08/announcing-tech-docs&#34; target=&#34;_blank&#34;&gt;our “docs like code” approach&lt;/a&gt;, engineers write their technical documentation in Markdown files right alongside their code. Whenever you create a new project in Backstage, a TechDocs site is automatically set up in the same repo — so you can update your code and your documentation with the same pull request. This integrated workflow and centralization makes great documentation easy. Easy to create and maintain. And easy to find and use.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Customize and scale your infrastructure with a growing ecosystems of plugins.&lt;/strong&gt; Every company has their own, homegrown infrastructure — Backstage’s plugin architecture makes it simple to make Backstage a perfect fit for yours. Integrating your custom, proprietary tooling is as simple as building an internal plugin for your installation of Backstage. You can also build open source plugins to share with the community. The open source &lt;a rel=&#34;noreferrer noopener&#34; href=&#34;https://backstage.io/plugins&#34; target=&#34;_blank&#34;&gt;plugin marketplace&lt;/a&gt; for Backstage continues to grow, expanding Backstage’s functionality with each new plugin. It’s like an app store for your infrastructure.&lt;/li&gt;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Backstage has already come a long way — and none of these features would be what they are today without contributions from the open source community.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2&gt;Our commitment to the open source community&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We were excited by the reception Backstage received when we first released it. But we’ve been even more gratified by how the community of contributors has grown since then, as they’ve built new &lt;a href=&#34;https://backstage.io/plugins&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;plugins&lt;/a&gt; and added new functionality to the core product. Over &lt;a href=&#34;https://github.com/spotify/backstage/graphs/contributors&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;130 people&lt;/a&gt; have contributed to the project, and roughly 40% of pull requests are now coming from external, non-Spotify contributors.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As Principal Product Manager &lt;a href=&#34;https://engineering.atspotify.com/2020/04/01/my-beat-stefan-alund/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Stefan Ålund&lt;/a&gt; writes on the &lt;a href=&#34;https://backstage.io/blog/2020/09/23/backstage-cncf-sandbox&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage blog&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt;We released the open source version of Backstage ‘early’. That was intentional. Because even though we’ve been using Backstage internally for years, we wanted the open source version to be developed with input and contributions from the community. And that’s exactly the product that’s going into the CNCF Sandbox today.&lt;/p&gt;&lt;p&gt;Backstage’s ability to simplify tooling and standardize engineering practices has attracted interest from other major tech companies, as well as airlines, auto manufacturers, investment firms, and global retailers. We know that Backstage solves a problem — infrastructure complexity — that’s common to a lot of large and growing companies today. But different companies work differently, use particular toolsets, and have unique use cases. By making Backstage open source, we can build it with people working inside a variety of engineering organizations all over the world. It makes for a better product that serves a wider group of users (beyond that of Spotify’s) and their needs.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Thank you to everyone who has already contributed to this project, inside and outside of Spotify. And if you’ve been curious about Backstage, now is the perfect time to dive in. Visit &lt;a href=&#34;https://backstage.io&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Backstage.io&lt;/a&gt; to learn more and &lt;a href=&#34;https://mailchi.mp/spotify/backstage-community&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;subscribe to our newsletter&lt;/a&gt; for updates. Check out open issues on &lt;a href=&#34;https://github.com/spotify/backstage/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GitHub&lt;/a&gt; or get started building a &lt;a href=&#34;https://backstage.io/plugins&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;plugin&lt;/a&gt; for your favorite tool or service. We look forward to seeing the community grow, and can’t wait to see where open source takes us all next.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ll give Remy DeCausemaker — Head of Spotify’s &lt;a href=&#34;https://thenewstack.io/does-your-organization-need-an-open-source-program-office/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Open Source Program Office&lt;/a&gt; (OSPO) — the last word: &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;We’re excited to embark on this journey with the CNCF community. Backstage isn’t the first open source project Spotify has released, but it is the first one we felt was ready to dedicate to an upstream foundation, and we can’t wait to bring what we’ve learned to the next project. There’s so much great tech being built here, and it’s about time we share it to build even greater products, together.&lt;/p&gt;&lt;/blockquote&gt;&#xA;        &lt;br/&gt;&#xA;&#xA;        &#xA;        &#xA;&#xA;        &#xA;&#xA;            &lt;/div&gt;&#xA;    &#xA;&#xA;&#xA;&lt;/article&gt;&#xA;                &#xA;&#xA;            &#xA;        &#xA;    &lt;/section&gt;&lt;/div&gt;</content>
    <link href="https://engineering.atspotify.com/2020/09/24/cloud-native-computing-foundation-accepts-backstage-as-a-sandbox-project/" rel="alternate"></link>
    <link href="https://storage.googleapis.com/rnd-atspotify/sites/2/2020/09/Cloud-native-computing-foundation-accepts-Backstage.png" rel="enclosure" type="image/png" length="0"></link>
    <summary type="html">If you hear faint whooping in the background of your playlists today, it’s just us celebrating a new milestone for Spotify’s open source efforts: The Cloud Native Computing Foundation (CNCF) has accepted Backstage, our open source developer portal, as an early stage project in the CNCF Sandbox. It’s</summary>
    <author>
      <name>Published by Spotify Engineering</name>
    </author>
  </entry>
</feed>